{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n\tVerified Crypto Company token\r\n\r\n\tCopyright (C) Fusion Solutions KFT <contact@fusionsolutions.io> - All Rights Reserved\r\n\r\n\tThis file is part of Verified Crypto Company token project.\r\n\tUnauthorized copying of this file or source, via any medium is strictly prohibited\r\n\tProprietary and confidential\r\n\tThis file can not be copied and/or distributed without the express permission of the Author.\r\n\r\n\tWritten by Andor Rajci, August 2018\r\n*/\r\npragma solidity 0.4.24;\r\n\r\nlibrary SafeMath {\r\n    /* Internals */\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a + b;\r\n        assert( c >= a );\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a - b;\r\n        assert( c <= a );\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a * b;\r\n        assert( c == 0 || c / a == b );\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a / b;\r\n    }\r\n    function pow(uint256 a, uint256 b) internal pure returns(uint256 c) {\r\n        c = a ** b;\r\n        assert( c % a == 0 );\r\n        return a ** b;\r\n    }\r\n}\r\n\r\ncontract Token {\r\n\t/* Declarations */\r\n\tusing SafeMath for uint256;\r\n\t/* Structures */\r\n\tstruct action_s {\r\n\t\taddress origin;\r\n\t\tuint256 voteCounter;\r\n\t\tuint256 uid;\r\n\t\tmapping(address => uint256) voters;\r\n\t}\r\n\t/* Variables */\r\n\tstring  public name = \"Verified Crypto Company token\";\r\n\tstring  public symbol = \"VRFD\";\r\n\tuint8   public decimals = 0;\r\n\tuint256 public totalSupply = 1e6;\r\n\tuint256 public actionVotedRate;\r\n\tuint256 public ownerCounter;\r\n\tuint256 public voteUID;\r\n\taddress public admin;\r\n\tmapping(address => uint256) public balanceOf;\r\n\tmapping(address => string) public nameOf;\r\n\tmapping(address => bool) public owners;\r\n\tmapping(bytes32 => action_s) public actions;\r\n\t/* Constructor */\r\n\tconstructor(address _admin, uint256 _actionVotedRate, address[] _owners) public {\r\n\t\tuint256 i;\r\n\t\trequire( _actionVotedRate <= 100 );\r\n\t\tactionVotedRate = _actionVotedRate;\r\n\t\tfor ( i=0 ; i<_owners.length ; i++ ) {\r\n\t\t\towners[_owners[i]] = true;\r\n\t\t}\r\n\t\townerCounter = _owners.length;\r\n\t\tbalanceOf[address(this)] = totalSupply;\r\n\t\temit Mint(address(this), totalSupply);\r\n\t\tadmin = _admin;\r\n\t}\r\n\t/* Fallback */\r\n\tfunction () public { revert(); }\r\n\t/* Externals */\r\n\tfunction setStatus(address _target, uint256 _status, string _name) external forAdmin {\r\n\t\trequire( balanceOf[_target] == 0 );\r\n\t\tbalanceOf[address(this)] = balanceOf[address(this)].sub(_status);\r\n\t\tbalanceOf[_target] = _status;\r\n\t\tnameOf[_target] = _name;\r\n\t\temit Transfer(address(this), _target, _status);\r\n\t}\r\n\tfunction delStatus(address _target) external forAdmin {\r\n\t\trequire( balanceOf[_target] > 0 );\r\n\t\tbalanceOf[address(this)] = balanceOf[address(this)].add(balanceOf[_target]);\r\n\t\temit Transfer(_target,  address(this), balanceOf[_target]);\r\n\t\tdelete balanceOf[_target];\r\n\t\tdelete nameOf[_target];\r\n\t}\r\n\tfunction changeAdmin(address _newAdmin) external forOwner {\r\n\t\tbytes32 _hash;\r\n\t\t_hash = keccak256('changeAdmin', _newAdmin);\r\n\t\tif ( actions[_hash].origin == 0x00 ) {\r\n\t\t\temit newAdminAction(_hash, _newAdmin, msg.sender);\r\n\t\t}\r\n\t\tif ( doVote(_hash) ) {\r\n\t\t\tadmin = _newAdmin;\r\n\t\t}\r\n\t}\r\n\tfunction newOwner(address _owner) external forOwner {\r\n\t\tbytes32 _hash;\r\n\t\trequire( ! owners[_owner] );\r\n\t\t_hash = keccak256('addNewOwner', _owner);\r\n\t\tif ( actions[_hash].origin == 0x00 ) {\r\n\t\t\temit newAddNewOwnerAction(_hash, _owner, msg.sender);\r\n\t\t}\r\n\t\tif ( doVote(_hash) ) {\r\n\t\t\townerCounter = ownerCounter.add(1);\r\n\t\t\towners[_owner] = true;\r\n\t\t}\r\n\t}\r\n\tfunction delOwner(address _owner) external forOwner {\r\n\t\tbytes32 _hash;\r\n\t\trequire( owners[_owner] );\r\n\t\t_hash = keccak256('delOwner', _owner);\r\n\t\tif ( actions[_hash].origin == 0x00 ) {\r\n\t\t\temit newDelOwnerAction(_hash, _owner, msg.sender);\r\n\t\t}\r\n\t\tif ( doVote(_hash) ) {\r\n\t\t\townerCounter = ownerCounter.sub(1);\r\n\t\t\towners[_owner] = false;\r\n\t\t}\r\n\t}\r\n\t/* Internals */\r\n\tfunction doVote(bytes32 _hash) internal returns (bool _voted) {\r\n\t\trequire( owners[msg.sender] );\r\n\t\tif ( actions[_hash].origin == 0x00 ) {\r\n\t\t\tvoteUID = voteUID.add(1);\r\n\t\t\tactions[_hash].origin = msg.sender;\r\n\t\t\tactions[_hash].voteCounter = 1;\r\n\t\t\tactions[_hash].uid = voteUID;\r\n\t\t} else if ( ( actions[_hash].voters[msg.sender] != actions[_hash].uid ) && actions[_hash].origin != msg.sender ) {\r\n\t\t\tactions[_hash].voters[msg.sender] = actions[_hash].uid;\r\n\t\t\tactions[_hash].voteCounter = actions[_hash].voteCounter.add(1);\r\n\t\t\temit vote(_hash, msg.sender);\r\n\t\t}\r\n\t\tif ( actions[_hash].voteCounter.mul(100).div(ownerCounter) >= actionVotedRate ) {\r\n\t\t\t_voted = true;\r\n\t\t\temit votedAction(_hash);\r\n\t\t\tdelete actions[_hash];\r\n\t\t}\r\n\t}\r\n\t/* Modifiers */\r\n\tmodifier forAdmin {\r\n\t\trequire( msg.sender == admin );\r\n\t\t_;\r\n\t}\r\n\tmodifier forOwner {\r\n\t\trequire( owners[msg.sender] );\r\n\t\t_;\r\n\t}\r\n\t/* Events */\r\n\tevent Mint(address indexed _addr, uint256 indexed _value);\r\n\tevent Transfer(address indexed _from, address indexed _to, uint _value);\r\n\tevent newAddNewOwnerAction(bytes32 _hash, address _owner, address _origin);\r\n\tevent newDelOwnerAction(bytes32 _hash, address _owner, address _origin);\r\n\tevent newAdminAction(bytes32 _hash, address _newAdmin, address _origin);\r\n\tevent vote(bytes32 _hash, address _voter);\r\n\tevent votedAction(bytes32 _hash);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteUID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"delOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"actionVotedRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"newOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"delStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"actions\",\"outputs\":[{\"name\":\"origin\",\"type\":\"address\"},{\"name\":\"voteCounter\",\"type\":\"uint256\"},{\"name\":\"uid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nameOf\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_actionVotedRate\",\"type\":\"uint256\"},{\"name\":\"_owners\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_origin\",\"type\":\"address\"}],\"name\":\"newAddNewOwnerAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_origin\",\"type\":\"address\"}],\"name\":\"newDelOwnerAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_origin\",\"type\":\"address\"}],\"name\":\"newAdminAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"votedAction\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e03b330278355f65f2b63e06b6f13f05673c8eb7000000000000000000000000000000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000004000000000000000000000000cb876c2d2639be3325f501cf66c639e37e9f8d4f000000000000000000000000e03b330278355f65f2b63e06b6f13f05673c8eb7000000000000000000000000d327bf1e669b0844ed92f0cc2e0759279c23bf29000000000000000000000000610e3b4e804b367c182c5fc4d65d09c089723389","Library":"","SwarmSource":"bzzr://1512aa0a1bb204d04000c9f65f1baf7434470e8c253bea560007369c47e03a6c"}]}