{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: zeppelin-solidity/contracts/introspection/ERC165.sol\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    ownedTokens[_from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/Deed.sol\r\n\r\n/**\r\n * @title Deed to hold ether in exchange for ownership of a node\r\n * @dev The deed can be controlled only by the registrar and can only send ether back to the owner.\r\n */\r\ncontract Deed {\r\n\r\n    address constant burn = 0xdead;\r\n\r\n    address public registrar;\r\n    address public owner;\r\n    address public previousOwner;\r\n\r\n    uint public creationDate;\r\n    uint public value;\r\n\r\n    bool active;\r\n\r\n    event OwnerChanged(address newOwner);\r\n    event DeedClosed();\r\n\r\n    modifier onlyRegistrar {\r\n        require(msg.sender == registrar);\r\n        _;\r\n    }\r\n\r\n    modifier onlyActive {\r\n        require(active);\r\n        _;\r\n    }\r\n\r\n    function Deed(address _owner) public payable {\r\n        owner = _owner;\r\n        registrar = msg.sender;\r\n        creationDate = now;\r\n        active = true;\r\n        value = msg.value;\r\n    }\r\n\r\n    function setOwner(address newOwner) public onlyRegistrar {\r\n        require(newOwner != 0);\r\n        previousOwner = owner;  // This allows contracts to check who sent them the ownership\r\n        owner = newOwner;\r\n        OwnerChanged(newOwner);\r\n    }\r\n\r\n    function setRegistrar(address newRegistrar) public onlyRegistrar {\r\n        registrar = newRegistrar;\r\n    }\r\n\r\n    function setBalance(uint newValue, bool throwOnFailure) public onlyRegistrar onlyActive {\r\n        // Check if it has enough balance to set the value\r\n        require(value >= newValue);\r\n        value = newValue;\r\n        // Send the difference to the owner\r\n        require(owner.send(this.balance - newValue) || !throwOnFailure);\r\n    }\r\n\r\n    /**\r\n     * @dev Close a deed and refund a specified fraction of the bid value\r\n     *\r\n     * @param refundRatio The amount*1/1000 to refund\r\n     */\r\n    function closeDeed(uint refundRatio) public onlyRegistrar onlyActive {\r\n        active = false;\r\n        require(burn.send(((1000 - refundRatio) * this.balance)/1000));\r\n        DeedClosed();\r\n        destroyDeed();\r\n    }\r\n\r\n    /**\r\n     * @dev Close a deed and refund a specified fraction of the bid value\r\n     */\r\n    function destroyDeed() public {\r\n        require(!active);\r\n\r\n        // Instead of selfdestruct(owner), invoke owner fallback function to allow\r\n        // owner to log an event if desired; but owner should also be aware that\r\n        // its fallback function can also be invoked by setBalance\r\n        if (owner.send(this.balance)) {\r\n            selfdestruct(burn);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/ENS.sol\r\n\r\ninterface ENS {\r\n\r\n    // Logged when the owner of a node assigns a new owner to a subnode.\r\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\r\n\r\n    // Logged when the owner of a node transfers ownership to a new account.\r\n    event Transfer(bytes32 indexed node, address owner);\r\n\r\n    // Logged when the resolver for a node changes.\r\n    event NewResolver(bytes32 indexed node, address resolver);\r\n\r\n    // Logged when the TTL of a node changes\r\n    event NewTTL(bytes32 indexed node, uint64 ttl);\r\n\r\n\r\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\r\n    function setResolver(bytes32 node, address resolver) public;\r\n    function setOwner(bytes32 node, address owner) public;\r\n    function setTTL(bytes32 node, uint64 ttl) public;\r\n    function owner(bytes32 node) public view returns (address);\r\n    function resolver(bytes32 node) public view returns (address);\r\n    function ttl(bytes32 node) public view returns (uint64);\r\n\r\n}\r\n\r\n// File: @ensdomains/ens/contracts/HashRegistrarSimplified.sol\r\n\r\n/*\r\n\r\nTemporary Hash Registrar\r\n========================\r\n\r\nThis is a simplified version of a hash registrar. It is purporsefully limited:\r\nnames cannot be six letters or shorter, new auctions will stop after 4 years.\r\n\r\nThe plan is to test the basic features and then move to a new contract in at most\r\n2 years, when some sort of renewal mechanism will be enabled.\r\n*/\r\n\r\n\r\n\r\n/**\r\n * @title Registrar\r\n * @dev The registrar handles the auction process for each subnode of the node it owns.\r\n */\r\ncontract Registrar {\r\n    ENS public ens;\r\n    bytes32 public rootNode;\r\n\r\n    mapping (bytes32 => Entry) _entries;\r\n    mapping (address => mapping (bytes32 => Deed)) public sealedBids;\r\n    \r\n    enum Mode { Open, Auction, Owned, Forbidden, Reveal, NotYetAvailable }\r\n\r\n    uint32 constant totalAuctionLength = 5 days;\r\n    uint32 constant revealPeriod = 48 hours;\r\n    uint32 public constant launchLength = 8 weeks;\r\n\r\n    uint constant minPrice = 0.01 ether;\r\n    uint public registryStarted;\r\n\r\n    event AuctionStarted(bytes32 indexed hash, uint registrationDate);\r\n    event NewBid(bytes32 indexed hash, address indexed bidder, uint deposit);\r\n    event BidRevealed(bytes32 indexed hash, address indexed owner, uint value, uint8 status);\r\n    event HashRegistered(bytes32 indexed hash, address indexed owner, uint value, uint registrationDate);\r\n    event HashReleased(bytes32 indexed hash, uint value);\r\n    event HashInvalidated(bytes32 indexed hash, string indexed name, uint value, uint registrationDate);\r\n\r\n    struct Entry {\r\n        Deed deed;\r\n        uint registrationDate;\r\n        uint value;\r\n        uint highestBid;\r\n    }\r\n\r\n    modifier inState(bytes32 _hash, Mode _state) {\r\n        require(state(_hash) == _state);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner(bytes32 _hash) {\r\n        require(state(_hash) == Mode.Owned && msg.sender == _entries[_hash].deed.owner());\r\n        _;\r\n    }\r\n\r\n    modifier registryOpen() {\r\n        require(now >= registryStarted && now <= registryStarted + 4 years && ens.owner(rootNode) == address(this));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Constructs a new Registrar, with the provided address as the owner of the root node.\r\n     *\r\n     * @param _ens The address of the ENS\r\n     * @param _rootNode The hash of the rootnode.\r\n     */\r\n    function Registrar(ENS _ens, bytes32 _rootNode, uint _startDate) public {\r\n        ens = _ens;\r\n        rootNode = _rootNode;\r\n        registryStarted = _startDate > 0 ? _startDate : now;\r\n    }\r\n\r\n    /**\r\n     * @dev Start an auction for an available hash\r\n     *\r\n     * @param _hash The hash to start an auction on\r\n     */\r\n    function startAuction(bytes32 _hash) public registryOpen() {\r\n        Mode mode = state(_hash);\r\n        if (mode == Mode.Auction) return;\r\n        require(mode == Mode.Open);\r\n\r\n        Entry storage newAuction = _entries[_hash];\r\n        newAuction.registrationDate = now + totalAuctionLength;\r\n        newAuction.value = 0;\r\n        newAuction.highestBid = 0;\r\n        AuctionStarted(_hash, newAuction.registrationDate);\r\n    }\r\n\r\n    /**\r\n     * @dev Start multiple auctions for better anonymity\r\n     *\r\n     * Anyone can start an auction by sending an array of hashes that they want to bid for.\r\n     * Arrays are sent so that someone can open up an auction for X dummy hashes when they\r\n     * are only really interested in bidding for one. This will increase the cost for an\r\n     * attacker to simply bid blindly on all new auctions. Dummy auctions that are\r\n     * open but not bid on are closed after a week.\r\n     *\r\n     * @param _hashes An array of hashes, at least one of which you presumably want to bid on\r\n     */\r\n    function startAuctions(bytes32[] _hashes) public {\r\n        for (uint i = 0; i < _hashes.length; i ++) {\r\n            startAuction(_hashes[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Submit a new sealed bid on a desired hash in a blind auction\r\n     *\r\n     * Bids are sent by sending a message to the main contract with a hash and an amount. The hash\r\n     * contains information about the bid, including the bidded hash, the bid amount, and a random\r\n     * salt. Bids are not tied to any one auction until they are revealed. The value of the bid\r\n     * itself can be masqueraded by sending more than the value of your actual bid. This is\r\n     * followed by a 48h reveal period. Bids revealed after this period will be burned and the ether unrecoverable.\r\n     * Since this is an auction, it is expected that most public hashes, like known domains and common dictionary\r\n     * words, will have multiple bidders pushing the price up.\r\n     *\r\n     * @param sealedBid A sealedBid, created by the shaBid function\r\n     */\r\n    function newBid(bytes32 sealedBid) public payable {\r\n        require(address(sealedBids[msg.sender][sealedBid]) == 0x0);\r\n        require(msg.value >= minPrice);\r\n\r\n        // Creates a new hash contract with the owner\r\n        Deed newBid = (new Deed).value(msg.value)(msg.sender);\r\n        sealedBids[msg.sender][sealedBid] = newBid;\r\n        NewBid(sealedBid, msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Start a set of auctions and bid on one of them\r\n     *\r\n     * This method functions identically to calling `startAuctions` followed by `newBid`,\r\n     * but all in one transaction.\r\n     *\r\n     * @param hashes A list of hashes to start auctions on.\r\n     * @param sealedBid A sealed bid for one of the auctions.\r\n     */\r\n    function startAuctionsAndBid(bytes32[] hashes, bytes32 sealedBid) public payable {\r\n        startAuctions(hashes);\r\n        newBid(sealedBid);\r\n    }\r\n\r\n    /**\r\n     * @dev Submit the properties of a bid to reveal them\r\n     *\r\n     * @param _hash The node in the sealedBid\r\n     * @param _value The bid amount in the sealedBid\r\n     * @param _salt The sale in the sealedBid\r\n     */\r\n    function unsealBid(bytes32 _hash, uint _value, bytes32 _salt) public {\r\n        bytes32 seal = shaBid(_hash, msg.sender, _value, _salt);\r\n        Deed bid = sealedBids[msg.sender][seal];\r\n        require(address(bid) != 0);\r\n\r\n        sealedBids[msg.sender][seal] = Deed(0);\r\n        Entry storage h = _entries[_hash];\r\n        uint value = min(_value, bid.value());\r\n        bid.setBalance(value, true);\r\n\r\n        var auctionState = state(_hash);\r\n        if (auctionState == Mode.Owned) {\r\n            // Too late! Bidder loses their bid. Gets 0.5% back.\r\n            bid.closeDeed(5);\r\n            BidRevealed(_hash, msg.sender, value, 1);\r\n        } else if (auctionState != Mode.Reveal) {\r\n            // Invalid phase\r\n            revert();\r\n        } else if (value < minPrice || bid.creationDate() > h.registrationDate - revealPeriod) {\r\n            // Bid too low or too late, refund 99.5%\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 0);\r\n        } else if (value > h.highestBid) {\r\n            // New winner\r\n            // Cancel the other bid, refund 99.5%\r\n            if (address(h.deed) != 0) {\r\n                Deed previousWinner = h.deed;\r\n                previousWinner.closeDeed(995);\r\n            }\r\n\r\n            // Set new winner\r\n            // Per the rules of a vickery auction, the value becomes the previous highestBid\r\n            h.value = h.highestBid;  // will be zero if there's only 1 bidder\r\n            h.highestBid = value;\r\n            h.deed = bid;\r\n            BidRevealed(_hash, msg.sender, value, 2);\r\n        } else if (value > h.value) {\r\n            // Not winner, but affects second place\r\n            h.value = value;\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 3);\r\n        } else {\r\n            // Bid doesn't affect auction\r\n            bid.closeDeed(995);\r\n            BidRevealed(_hash, msg.sender, value, 4);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel a bid\r\n     *\r\n     * @param seal The value returned by the shaBid function\r\n     */\r\n    function cancelBid(address bidder, bytes32 seal) public {\r\n        Deed bid = sealedBids[bidder][seal];\r\n        \r\n        // If a sole bidder does not `unsealBid` in time, they have a few more days\r\n        // where they can call `startAuction` (again) and then `unsealBid` during\r\n        // the revealPeriod to get back their bid value.\r\n        // For simplicity, they should call `startAuction` within\r\n        // 9 days (2 weeks - totalAuctionLength), otherwise their bid will be\r\n        // cancellable by anyone.\r\n        require(address(bid) != 0 && now >= bid.creationDate() + totalAuctionLength + 2 weeks);\r\n\r\n        // Send the canceller 0.5% of the bid, and burn the rest.\r\n        bid.setOwner(msg.sender);\r\n        bid.closeDeed(5);\r\n        sealedBids[bidder][seal] = Deed(0);\r\n        BidRevealed(seal, bidder, 0, 5);\r\n    }\r\n\r\n    /**\r\n     * @dev Finalize an auction after the registration date has passed\r\n     *\r\n     * @param _hash The hash of the name the auction is for\r\n     */\r\n    function finalizeAuction(bytes32 _hash) public onlyOwner(_hash) {\r\n        Entry storage h = _entries[_hash];\r\n        \r\n        // Handles the case when there's only a single bidder (h.value is zero)\r\n        h.value =  max(h.value, minPrice);\r\n        h.deed.setBalance(h.value, true);\r\n\r\n        trySetSubnodeOwner(_hash, h.deed.owner());\r\n        HashRegistered(_hash, h.deed.owner(), h.value, h.registrationDate);\r\n    }\r\n\r\n    /**\r\n     * @dev The owner of a domain may transfer it to someone else at any time.\r\n     *\r\n     * @param _hash The node to transfer\r\n     * @param newOwner The address to transfer ownership to\r\n     */\r\n    function transfer(bytes32 _hash, address newOwner) public onlyOwner(_hash) {\r\n        require(newOwner != 0);\r\n\r\n        Entry storage h = _entries[_hash];\r\n        h.deed.setOwner(newOwner);\r\n        trySetSubnodeOwner(_hash, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev After some time, or if we're no longer the registrar, the owner can release\r\n     *      the name and get their ether back.\r\n     *\r\n     * @param _hash The node to release\r\n     */\r\n    function releaseDeed(bytes32 _hash) public onlyOwner(_hash) {\r\n        Entry storage h = _entries[_hash];\r\n        Deed deedContract = h.deed;\r\n\r\n        require(now >= h.registrationDate + 1 years || ens.owner(rootNode) != address(this));\r\n\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n        h.deed = Deed(0);\r\n\r\n        _tryEraseSingleNode(_hash);\r\n        deedContract.closeDeed(1000);\r\n        HashReleased(_hash, h.value);        \r\n    }\r\n\r\n    /**\r\n     * @dev Submit a name 6 characters long or less. If it has been registered,\r\n     *      the submitter will earn 50% of the deed value. \r\n     * \r\n     * We are purposefully handicapping the simplified registrar as a way \r\n     * to force it into being restructured in a few years.\r\n     *\r\n     * @param unhashedName An invalid name to search for in the registry.\r\n     */\r\n    function invalidateName(string unhashedName) public inState(keccak256(unhashedName), Mode.Owned) {\r\n        require(strlen(unhashedName) <= 6);\r\n        bytes32 hash = keccak256(unhashedName);\r\n\r\n        Entry storage h = _entries[hash];\r\n\r\n        _tryEraseSingleNode(hash);\r\n\r\n        if (address(h.deed) != 0) {\r\n            // Reward the discoverer with 50% of the deed\r\n            // The previous owner gets 50%\r\n            h.value = max(h.value, minPrice);\r\n            h.deed.setBalance(h.value/2, false);\r\n            h.deed.setOwner(msg.sender);\r\n            h.deed.closeDeed(1000);\r\n        }\r\n\r\n        HashInvalidated(hash, unhashedName, h.value, h.registrationDate);\r\n\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n        h.deed = Deed(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to delete the owner and resolver records for a (subdomain of) a\r\n     *      name that is not currently owned in the registrar. If passing, eg, 'foo.bar.eth',\r\n     *      the owner and resolver fields on 'foo.bar.eth' and 'bar.eth' will all be cleared.\r\n     *\r\n     * @param labels A series of label hashes identifying the name to zero out, rooted at the\r\n     *        registrar's root. Must contain at least one element. For instance, to zero \r\n     *        'foo.bar.eth' on a registrar that owns '.eth', pass an array containing\r\n     *        [keccak256('foo'), keccak256('bar')].\r\n     */\r\n    function eraseNode(bytes32[] labels) public {\r\n        require(labels.length != 0);\r\n        require(state(labels[labels.length - 1]) != Mode.Owned);\r\n\r\n        _eraseNodeHierarchy(labels.length - 1, labels, rootNode);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the deed to the current registrar, if different from this one.\r\n     *\r\n     * Used during the upgrade process to a permanent registrar.\r\n     *\r\n     * @param _hash The name hash to transfer.\r\n     */\r\n    function transferRegistrars(bytes32 _hash) public onlyOwner(_hash) {\r\n        address registrar = ens.owner(rootNode);\r\n        require(registrar != address(this));\r\n\r\n        // Migrate the deed\r\n        Entry storage h = _entries[_hash];\r\n        h.deed.setRegistrar(registrar);\r\n\r\n        // Call the new registrar to accept the transfer\r\n        Registrar(registrar).acceptRegistrarTransfer(_hash, h.deed, h.registrationDate);\r\n\r\n        // Zero out the Entry\r\n        h.deed = Deed(0);\r\n        h.registrationDate = 0;\r\n        h.value = 0;\r\n        h.highestBid = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts a transfer from a previous registrar; stubbed out here since there\r\n     *      is no previous registrar implementing this interface.\r\n     *\r\n     * @param hash The sha3 hash of the label to transfer.\r\n     * @param deed The Deed object for the name being transferred in.\r\n     * @param registrationDate The date at which the name was originally registered.\r\n     */\r\n    function acceptRegistrarTransfer(bytes32 hash, Deed deed, uint registrationDate) public {\r\n        hash; deed; registrationDate; // Don't warn about unused variables\r\n    }\r\n\r\n    // State transitions for names:\r\n    //   Open -> Auction (startAuction)\r\n    //   Auction -> Reveal\r\n    //   Reveal -> Owned\r\n    //   Reveal -> Open (if nobody bid)\r\n    //   Owned -> Open (releaseDeed or invalidateName)\r\n    function state(bytes32 _hash) public view returns (Mode) {\r\n        Entry storage entry = _entries[_hash];\r\n\r\n        if (!isAllowed(_hash, now)) {\r\n            return Mode.NotYetAvailable;\r\n        } else if (now < entry.registrationDate) {\r\n            if (now < entry.registrationDate - revealPeriod) {\r\n                return Mode.Auction;\r\n            } else {\r\n                return Mode.Reveal;\r\n            }\r\n        } else {\r\n            if (entry.highestBid == 0) {\r\n                return Mode.Open;\r\n            } else {\r\n                return Mode.Owned;\r\n            }\r\n        }\r\n    }\r\n\r\n    function entries(bytes32 _hash) public view returns (Mode, address, uint, uint, uint) {\r\n        Entry storage h = _entries[_hash];\r\n        return (state(_hash), h.deed, h.registrationDate, h.value, h.highestBid);\r\n    }\r\n\r\n    /**\r\n     * @dev Determines if a name is available for registration yet\r\n     *\r\n     * Each name will be assigned a random date in which its auction\r\n     * can be started, from 0 to 8 weeks\r\n     *\r\n     * @param _hash The hash to start an auction on\r\n     * @param _timestamp The timestamp to query about\r\n     */\r\n    function isAllowed(bytes32 _hash, uint _timestamp) public view returns (bool allowed) {\r\n        return _timestamp > getAllowedTime(_hash);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns available date for hash\r\n     *\r\n     * The available time from the `registryStarted` for a hash is proportional\r\n     * to its numeric value.\r\n     *\r\n     * @param _hash The hash to start an auction on\r\n     */\r\n    function getAllowedTime(bytes32 _hash) public view returns (uint) {\r\n        return registryStarted + ((launchLength * (uint(_hash) >> 128)) >> 128);\r\n        // Right shift operator: a >> b == a / 2**b\r\n    }\r\n\r\n    /**\r\n     * @dev Hash the values required for a secret bid\r\n     *\r\n     * @param hash The node corresponding to the desired namehash\r\n     * @param value The bid amount\r\n     * @param salt A random value to ensure secrecy of the bid\r\n     * @return The hash of the bid values\r\n     */\r\n    function shaBid(bytes32 hash, address owner, uint value, bytes32 salt) public pure returns (bytes32) {\r\n        return keccak256(hash, owner, value, salt);\r\n    }\r\n\r\n    function _tryEraseSingleNode(bytes32 label) internal {\r\n        if (ens.owner(rootNode) == address(this)) {\r\n            ens.setSubnodeOwner(rootNode, label, address(this));\r\n            bytes32 node = keccak256(rootNode, label);\r\n            ens.setResolver(node, 0);\r\n            ens.setOwner(node, 0);\r\n        }\r\n    }\r\n\r\n    function _eraseNodeHierarchy(uint idx, bytes32[] labels, bytes32 node) internal {\r\n        // Take ownership of the node\r\n        ens.setSubnodeOwner(node, labels[idx], address(this));\r\n        node = keccak256(node, labels[idx]);\r\n\r\n        // Recurse if there are more labels\r\n        if (idx > 0) {\r\n            _eraseNodeHierarchy(idx - 1, labels, node);\r\n        }\r\n\r\n        // Erase the resolver and owner records\r\n        ens.setResolver(node, 0);\r\n        ens.setOwner(node, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Assign the owner in ENS, if we're still the registrar\r\n     *\r\n     * @param _hash hash to change owner\r\n     * @param _newOwner new owner to transfer to\r\n     */\r\n    function trySetSubnodeOwner(bytes32 _hash, address _newOwner) internal {\r\n        if (ens.owner(rootNode) == address(this))\r\n            ens.setSubnodeOwner(rootNode, _hash, _newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the maximum of two unsigned integers\r\n     *\r\n     * @param a A number to compare\r\n     * @param b A number to compare\r\n     * @return The maximum of two unsigned integers\r\n     */\r\n    function max(uint a, uint b) internal pure returns (uint) {\r\n        if (a > b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the minimum of two unsigned integers\r\n     *\r\n     * @param a A number to compare\r\n     * @param b A number to compare\r\n     * @return The minimum of two unsigned integers\r\n     */\r\n    function min(uint a, uint b) internal pure returns (uint) {\r\n        if (a < b)\r\n            return a;\r\n        else\r\n            return b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the length of a given string\r\n     *\r\n     * @param s The string to measure the length of\r\n     * @return The length of the input string\r\n     */\r\n    function strlen(string s) internal pure returns (uint) {\r\n        s; // Don't warn about unused variables\r\n        // Starting here means the LSB will be the byte we care about\r\n        uint ptr;\r\n        uint end;\r\n        assembly {\r\n            ptr := add(s, 1)\r\n            end := add(mload(s), ptr)\r\n        }\r\n        for (uint len = 0; ptr < end; len++) {\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b < 0x80) {\r\n                ptr += 1;\r\n            } else if (b < 0xE0) {\r\n                ptr += 2;\r\n            } else if (b < 0xF0) {\r\n                ptr += 3;\r\n            } else if (b < 0xF8) {\r\n                ptr += 4;\r\n            } else if (b < 0xFC) {\r\n                ptr += 5;\r\n            } else {\r\n                ptr += 6;\r\n            }\r\n        }\r\n        return len;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/ENSNFT.sol\r\n\r\ncontract ENSNFT is ERC721Token {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    Registrar registrar;\r\n    constructor (string _name, string _symbol, address _registrar) public\r\n        ERC721Token(_name, _symbol) {\r\n        registrar = Registrar(_registrar);\r\n    }\r\n    function mint(bytes32 _hash) public {\r\n        address deedAddress;\r\n        (, deedAddress, , , ) = registrar.entries(_hash);\r\n        Deed deed = Deed(deedAddress);\r\n        require(deed.owner() == address(this));\r\n        require(deed.previousOwner() == msg.sender);\r\n        uint256 tokenId = uint256(_hash); // dont do math on this\r\n        _mint(deed.previousOwner(), tokenId);\r\n    }\r\n    function burn(uint256 tokenId) {\r\n        require(ownerOf(tokenId) == msg.sender);\r\n        _burn(msg.sender, tokenId);\r\n        registrar.transfer(bytes32(tokenId), msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_registrar\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"ENSNFT","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000006090a6e47849629b7245dfa1ca21d94cd15878ef0000000000000000000000000000000000000000000000000000000000000009454e53204e4946545900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007454e532d4e465400000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://cbefecfb360a7488d59b52f6e956d7cf628fe34d711f09a91f808665f36565ea"}]}