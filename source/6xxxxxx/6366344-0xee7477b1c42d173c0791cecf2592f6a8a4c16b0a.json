{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n/// @title BlockchainCuties bidding auction\r\n/// @author https://BlockChainArchitect.io\r\ncontract BiddingBase is Pausable\r\n{\r\n    uint40 public minTime = 60*10;\r\n    uint public minBid = 50 finney - 1 szabo;\r\n\r\n    address public operatorAddress;\r\n\r\n    // Allowed withdrawals of previous bids\r\n    mapping(address => uint) public pendingReturns;\r\n    uint public totalReturns;\r\n\r\n    event Withdraw(address indexed bidder, uint256 value);\r\n\r\n    /// Withdraw a bid that was overbid.\r\n    function withdraw() public {\r\n        uint amount = pendingReturns[msg.sender];\r\n        require (amount > 0);\r\n\r\n        // It is important to set this to zero because the recipient\r\n        // can call this function again as part of the receiving call\r\n        // before `send` returns.\r\n\r\n        totalReturns -= amount;\r\n        pendingReturns[msg.sender] -= amount;\r\n\r\n        msg.sender.transfer(amount);\r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n\r\n    function destroyContract() public onlyOwner {\r\n//        require(address(this).balance == 0);\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n    function withdrawEthFromBalance() external onlyOwner\r\n    {\r\n        owner.transfer(address(this).balance - totalReturns);\r\n    }\r\n\r\n    function setOperator(address _operator) public onlyOwner\r\n    {\r\n        operatorAddress = _operator;\r\n    }\r\n\r\n    function setMinBid(uint _minBid) public onlyOwner\r\n    {\r\n        minBid = _minBid;\r\n    }\r\n\r\n    function setMinTime(uint40 _minTime) public onlyOwner\r\n    {\r\n        minTime = _minTime;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operatorAddress || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function isContract(address addr) public view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\n/// @title BlockchainCuties bidding auction\r\n/// @author https://BlockChainArchitect.io\r\ncontract BiddingCustom is BiddingBase\r\n{\r\n    struct Auction\r\n    {\r\n        uint128 highestBid;\r\n        address highestBidder;\r\n        uint40 timeEnd;\r\n        uint40 lastBidTime;\r\n        uint40 timeStart;\r\n    }\r\n\r\n    Auction[] public auctions;\r\n\r\n    event Bid(address indexed bidder, address indexed prevBider, uint256 value, uint256 addedValue, uint40 auction);\r\n\r\n    function getAuctions(address bidder) public view returns (\r\n        uint40[5] _timeEnd,\r\n        uint40[5] _lastBidTime,\r\n        uint256[5] _highestBid,\r\n        address[5] _highestBidder,\r\n        uint16[5] _auctionIndex,\r\n        uint256 _pendingReturn)\r\n    {\r\n        _pendingReturn = pendingReturns[bidder];\r\n\r\n        uint16 j = 0;\r\n        for (uint16 i = 0; i < auctions.length; i++)\r\n        {\r\n            if (isActive(i))\r\n            {\r\n                _timeEnd[j] = auctions[i].timeEnd;\r\n                _lastBidTime[j] = auctions[i].lastBidTime;\r\n                _highestBid[j] = auctions[i].highestBid;\r\n                _highestBidder[j] = auctions[i].highestBidder;\r\n                _auctionIndex[j] = i;\r\n                j++;\r\n                if (j >= 5)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function finish(uint16 auction) public onlyOperator\r\n    {\r\n        auctions[auction].timeEnd = 1;\r\n    }\r\n\r\n    function abort(uint16 auctionIndex) public onlyOperator\r\n    {\r\n        Auction storage auction = auctions[auctionIndex];\r\n\r\n        address prevBidder = auction.highestBidder;\r\n        uint256 returnValue = auction.highestBid;\r\n\r\n        auction.highestBid = 0;\r\n        auction.highestBidder = address(0);\r\n        auction.timeEnd = 1;\r\n\r\n        if (prevBidder != address(0))\r\n        {\r\n            if (!isContract(prevBidder)) // do not allow auto withdraw for contracts\r\n            {\r\n                if (prevBidder.send(returnValue))\r\n                {\r\n                    return; // sent ok, no need to keep returned money on contract\r\n                }\r\n            }\r\n\r\n            pendingReturns[prevBidder] += returnValue;\r\n            totalReturns += returnValue;\r\n        }\r\n    }\r\n\r\n    function addAuction(uint40 _startTime, uint40 _duration, uint128 _startPrice) public onlyOperator\r\n    {\r\n        auctions.push(Auction(_startPrice, address(0), _startTime + _duration, 0, _startTime));\r\n    }\r\n\r\n    function isEnded(uint16 auction) public view returns (bool)\r\n    {\r\n        return\r\n            auctions[auction].timeEnd < now &&\r\n            auctions[auction].highestBidder != address(0);\r\n    }\r\n\r\n    function isActive(uint16 auctionIndex) public view returns (bool)\r\n    {\r\n        Auction storage auction = auctions[auctionIndex];\r\n        return\r\n            auction.timeStart <= now &&\r\n            (now < auction.timeEnd || auction.timeEnd != 0 && auction.highestBidder == address(0));\r\n    }\r\n\r\n    function bid(uint16 auctionIndex, uint256 useFromPendingReturn) public payable whenNotPaused\r\n    {\r\n        Auction storage auction = auctions[auctionIndex];\r\n        address prevBidder = auction.highestBidder;\r\n        uint256 returnValue = auction.highestBid;\r\n\r\n        require (useFromPendingReturn <= pendingReturns[msg.sender]);\r\n\r\n        uint256 bank = useFromPendingReturn;\r\n        pendingReturns[msg.sender] -= bank;\r\n        totalReturns -= bank;\r\n\r\n        uint256 currentBid = bank + msg.value;\r\n\r\n        require(currentBid >= auction.highestBid + minBid ||\r\n                currentBid >= auction.highestBid && prevBidder == address(0));\r\n        require(isActive(auctionIndex));\r\n\r\n        auction.highestBid = uint128(currentBid);\r\n        auction.highestBidder = msg.sender;\r\n        auction.lastBidTime = uint40(now);\r\n\r\n        for (uint16 i = 0; i < auctions.length; i++)\r\n        {\r\n            if (isActive(i) &&  auctions[i].timeEnd < now + minTime)\r\n            {\r\n                auctions[i].timeEnd = uint40(now) + minTime;\r\n            }\r\n        }\r\n\r\n        emit Bid(msg.sender, prevBidder, currentBid, currentBid - returnValue, auctionIndex);\r\n\r\n        if (prevBidder != address(0))\r\n        {\r\n            if (!isContract(prevBidder)) // do not allow auto withdraw for contracts\r\n            {\r\n                if (prevBidder.send(returnValue))\r\n                {\r\n                    return; // sent ok, no need to keep returned money on contract\r\n                }\r\n            }\r\n\r\n            pendingReturns[prevBidder] += returnValue;\r\n            totalReturns += returnValue;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalReturns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBid\",\"type\":\"uint256\"}],\"name\":\"setMinBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"auction\",\"type\":\"uint16\"}],\"name\":\"isEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingReturns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"auctionIndex\",\"type\":\"uint16\"},{\"name\":\"useFromPendingReturn\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"name\":\"highestBid\",\"type\":\"uint128\"},{\"name\":\"highestBidder\",\"type\":\"address\"},{\"name\":\"timeEnd\",\"type\":\"uint40\"},{\"name\":\"lastBidTime\",\"type\":\"uint40\"},{\"name\":\"timeStart\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minTime\",\"type\":\"uint40\"}],\"name\":\"setMinTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"auctionIndex\",\"type\":\"uint16\"}],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEthFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint40\"},{\"name\":\"_duration\",\"type\":\"uint40\"},{\"name\":\"_startPrice\",\"type\":\"uint128\"}],\"name\":\"addAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"auctionIndex\",\"type\":\"uint16\"}],\"name\":\"abort\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"auction\",\"type\":\"uint16\"}],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"getAuctions\",\"outputs\":[{\"name\":\"_timeEnd\",\"type\":\"uint40[5]\"},{\"name\":\"_lastBidTime\",\"type\":\"uint40[5]\"},{\"name\":\"_highestBid\",\"type\":\"uint256[5]\"},{\"name\":\"_highestBidder\",\"type\":\"address[5]\"},{\"name\":\"_auctionIndex\",\"type\":\"uint16[5]\"},{\"name\":\"_pendingReturn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"prevBider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addedValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"auction\",\"type\":\"uint40\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BiddingCustom","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://46562745f6a81ca9050d9002569c59cfc212655c35d969bd558dcb79b3659fd5"}]}