{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract SimpleBanners {\r\n\r\n    struct BannerOwnerStruct {\r\n        address owner;\r\n        uint balance;\r\n        uint bidAmountPerDay;\r\n        bytes32 dataCID;\r\n        uint timestampTaken;\r\n    }\r\n\r\n    address owner;\r\n    BannerOwnerStruct[2] banners;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    event BannerUpdate();\r\n\r\n    function takeBanner(uint bannerId, uint bidAmountPerDay, bytes32 dataCID) public payable {\r\n\r\n        if (msg.value == 0)\r\n            revert(\"Requires some ETH\");\r\n\r\n        if (bidAmountPerDay < 10000000000000 wei) // 0.00001 ETH / 0.003 usd / 0.3 of a cent\r\n            revert(\"bid amount is below minimum\");\r\n\r\n        // calculate total charge amount\r\n        uint totalCost = calculateTotalCost(bannerId);\r\n        uint totalValueRemaining = banners[bannerId].balance - totalCost;\r\n\r\n        // compare the total value of new bid vs calculated remaining value of current bid\r\n        if (msg.value <= totalValueRemaining) {\r\n            // if the bid is double the active price and has enough funds for 1 week then allow it to replace\r\n            if (bidAmountPerDay < banners[bannerId].bidAmountPerDay * 2)\r\n                revert(\"amount needs to be double existing bid\");\r\n            \r\n            if (msg.value < bidAmountPerDay * 7)\r\n                revert(\"requires at least 7 days to replace existing bid\");\r\n        }            \r\n\r\n        // new banner bid is good to go, charge previous account and send them any refunds\r\n        owner.transfer(totalCost);\r\n        banners[bannerId].owner.transfer(totalValueRemaining);\r\n\r\n        banners[bannerId].owner = msg.sender;\r\n        banners[bannerId].balance = msg.value;\r\n        banners[bannerId].bidAmountPerDay = bidAmountPerDay;\r\n        banners[bannerId].dataCID = dataCID;\r\n        banners[bannerId].timestampTaken = block.timestamp;\r\n\r\n        emit BannerUpdate();\r\n    }\r\n\r\n    function updateBannerContent(uint bannerId, bytes32 dataCID) public {\r\n        if (banners[bannerId].owner != msg.sender)\r\n            revert(\"Not owner\");\r\n\r\n        banners[bannerId].dataCID = dataCID;\r\n        emit BannerUpdate();\r\n    }\r\n\r\n    function addFunds(uint bannerId) public payable{\r\n        if (banners[bannerId].owner != msg.sender)\r\n            revert(\"Not owner\");\r\n\r\n        uint totalCost = calculateTotalCost(bannerId);\r\n        if (totalCost >= banners[bannerId].balance) {\r\n            // the funds have all been used up, take the balance\r\n            owner.transfer(banners[bannerId].balance);\r\n            banners[bannerId].timestampTaken = block.timestamp;\r\n            banners[bannerId].balance = msg.value;\r\n            emit BannerUpdate();\r\n        } else {\r\n            banners[bannerId].balance += msg.value;\r\n        }        \r\n    }\r\n\r\n    /************************************************************************************\r\n    *** VIEW FUNCTIONS\r\n    ************************************************************************************/\r\n    function getBannerDetails(uint bannerId) public view returns (address, uint, uint, bytes32, uint) {\r\n        return (\r\n            banners[bannerId].owner,\r\n            banners[bannerId].balance,\r\n            banners[bannerId].bidAmountPerDay,\r\n            banners[bannerId].dataCID,\r\n            banners[bannerId].timestampTaken\r\n        );\r\n    }\r\n\r\n    function getRemainingBalance(uint bannerId) public view returns (uint remainingBalance) {\r\n        uint totalCost = calculateTotalCost(bannerId);\r\n        return banners[bannerId].balance - totalCost;\r\n    }\r\n\r\n    function calculateTotalCost(uint bannerId) internal view returns (uint) {\r\n        // calculate total seconds passed, and times that by our daily rate on a seconds basis\r\n        uint totalSecondsPassed = block.timestamp - banners[bannerId].timestampTaken;\r\n        uint totalCost = totalSecondsPassed * (banners[bannerId].bidAmountPerDay / 1 days);\r\n\r\n        // total cost cant be more than balance\r\n        if (totalCost > banners[bannerId].balance)\r\n            totalCost = banners[bannerId].balance;\r\n\r\n        return totalCost;\r\n    }\r\n\r\n    function getActiveBanners() public view returns (bytes32, bytes32) {\r\n        bytes32 b1;\r\n        bytes32 b2;\r\n\r\n        uint tCost = calculateTotalCost(0);\r\n        if (tCost >= banners[0].balance)\r\n            b1 = 0x00;\r\n        else\r\n            b1 = banners[0].dataCID;\r\n\r\n        tCost = calculateTotalCost(1);\r\n        if (tCost >= banners[1].balance)\r\n            b2 = 0x00;\r\n        else\r\n            b2 = banners[1].dataCID;\r\n\r\n        return (b1, b2);\r\n    }\r\n\r\n    /************************************************************************************\r\n    *** ADMIN FUNCTIONS\r\n    ************************************************************************************/\r\n    function updateOwner(address newOwner) public {\r\n        if (msg.sender != owner)\r\n            revert(\"Not the owner\");\r\n\r\n        owner = newOwner;\r\n    }\r\n\r\n    function emergencyWithdraw() public {\r\n        if (msg.sender != owner)\r\n            revert(\"Not the owner\");\r\n\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function rejectBanner(uint bannerId) public {\r\n        if (msg.sender != owner)\r\n            revert(\"Not the owner\");\r\n\r\n        // settle costs\r\n        uint totalCost = calculateTotalCost(bannerId);\r\n        owner.transfer(totalCost);\r\n        banners[bannerId].owner.transfer(banners[bannerId].balance - totalCost);\r\n\r\n        delete banners[bannerId];\r\n\r\n        emit BannerUpdate();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"bannerId\",\"type\":\"uint256\"}],\"name\":\"rejectBanner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bannerId\",\"type\":\"uint256\"}],\"name\":\"getBannerDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bannerId\",\"type\":\"uint256\"},{\"name\":\"bidAmountPerDay\",\"type\":\"uint256\"},{\"name\":\"dataCID\",\"type\":\"bytes32\"}],\"name\":\"takeBanner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bannerId\",\"type\":\"uint256\"}],\"name\":\"getRemainingBalance\",\"outputs\":[{\"name\":\"remainingBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bannerId\",\"type\":\"uint256\"}],\"name\":\"addFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bannerId\",\"type\":\"uint256\"},{\"name\":\"dataCID\",\"type\":\"bytes32\"}],\"name\":\"updateBannerContent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getActiveBanners\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BannerUpdate\",\"type\":\"event\"}]","ContractName":"SimpleBanners","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3c66fc784324ae9056829d61f73425f7def38bdfb91b9cca19dc24c9248f79e9"}]}