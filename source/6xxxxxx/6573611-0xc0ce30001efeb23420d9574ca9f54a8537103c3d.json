{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract agame {\r\n   \r\n    address internal owner;\r\n    uint256 internal startCount;\r\n    \r\n    uint internal roundCount; \r\n    uint internal startTime;\r\n    uint internal currentRoundSupport;\r\n    uint internal currentRoundLeft;\r\n    uint internal timeout;\r\n    mapping(uint => uint) roundSupportMapping;\r\n   \r\n    uint constant internal decimals = 18;\r\n    uint constant internal min_wei = 1e9;\r\n    uint constant internal dividendFee = 10;\r\n    uint constant internal dynamicDividendFee = 6;\r\n    uint constant internal platformDividendFee = 4;\r\n   \r\n    constructor(uint _startCount,uint timeout_) public{\r\n        require(_startCount>0);\r\n        owner = msg.sender;\r\n        startCount = _startCount * 1e14;\r\n        currentRoundLeft = startCount;\r\n        currentRoundSupport = startCount;\r\n        roundCount = 1;\r\n        startTime = now;\r\n        timeout = timeout_;\r\n        roundSupportMapping[roundCount] = currentRoundLeft;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier running() {\r\n        require((now - startTime) < timeout,'time is out');\r\n        _;\r\n    }\r\n    \r\n    modifier correctValue(uint256 _eth) {\r\n        require(_eth >= min_wei, \"can not lessthan 1 gwei \");\r\n        require(_eth <= 100000000000000000000000, \"no vitalik, no\");\r\n        _;\r\n    }\r\n    \r\n   string contractName = \"OGAME\";\r\n   \r\n   mapping(address => Buyer) buyerList;\r\n   mapping(address => Buyer) buyerList_next;\r\n   address[] addressList;\r\n   address[] addressList_next;\r\n   \r\n   event ChangeName(string name_);\r\n   event BuySuccess(address who,uint256 value,uint againCount);\r\n   event SendDivedend(address who,uint256 value);\r\n   event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n    event ReturnValue(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n    \r\n    function getContractName() public view returns(string name_){    \r\n        return contractName;\r\n    }\r\n   \r\n    function setContractName(string newName) public onlyOwner{\r\n       contractName = newName;\r\n       emit ChangeName(newName);\r\n    }\r\n    \r\n    function getCurrentRoundLeft() public view returns(uint left,uint _all){\r\n        return (currentRoundLeft,currentRoundSupport);\r\n    }\r\n    \r\n    function transfer(address to_,uint256 amount) public onlyOwner returns(bool success_){\r\n        to_.transfer(amount);\r\n        emit Transfer(address(this), to_, amount);\r\n        return true;\r\n    }\r\n   \r\n    function dealDivedendOfBuyers() internal onlyOwner returns(bool success_){\r\n        for (uint128 i = 0; i < addressList.length; i++) {\r\n            uint256 _amount = buyerList[addressList[i]].amount*(100+dividendFee)/100;\r\n            address _to = addressList[i];\r\n            _to.transfer(_amount);\r\n            emit SendDivedend(_to, _amount);\r\n        }\r\n        return true;\r\n    }\r\n   \r\n    function gettAddressList() public view returns(address[] addressList_){\r\n        return addressList;\r\n    }\r\n    \r\n    function gameInfo() public view returns(string _gameName,uint _roundCount,uint _remaining,uint _all,uint _leftTime){\r\n        return (contractName,roundCount,currentRoundLeft,currentRoundSupport,timeout-(now - startTime));\r\n    }\r\n   \r\n    struct Buyer{\r\n        address who;\r\n        uint256 amount;\r\n        uint time;\r\n        uint againCount;\r\n        bool isValue;\r\n    }\r\n  \r\n    function buy(uint againCount_) payable correctValue(msg.value) running public{\r\n\r\n        uint256 value = msg.value;\r\n        address sender = msg.sender;\r\n        uint returnValue = 0;\r\n        if(currentRoundLeft <= value){\r\n           returnValue = value - currentRoundLeft;\r\n           value = currentRoundLeft;\r\n        }\r\n\r\n        currentRoundLeft -= value;\r\n\r\n        if(currentRoundLeft == 0){\r\n            _initNextRound();\r\n        }\r\n\r\n        if(returnValue > 0){\r\n            sender.transfer(returnValue);\r\n            emit ReturnValue(address(this), sender, returnValue);\r\n        }\r\n\r\n        Buyer memory buyer;\r\n        if(buyerList[sender].isValue){\r\n            buyer = buyerList[sender];\r\n            buyer.amount = buyer.amount + value;\r\n            buyerList[sender] = (buyer);\r\n        }else{\r\n            addressList.push(sender);\r\n            buyer = Buyer(sender,value,now,againCount_,true);\r\n            buyerList[sender] = (buyer);\r\n        }\r\n        emit BuySuccess(sender,value,againCount_);\r\n       \r\n    }\r\n    \r\n    // 内部方法\r\n    function _initNextRound() internal{ \r\n        currentRoundSupport = currentRoundSupport * (100 + dividendFee + dynamicDividendFee + platformDividendFee)/100;\r\n        currentRoundLeft = currentRoundSupport;\r\n        roundCount++;\r\n        roundSupportMapping[roundCount] = currentRoundSupport;\r\n        startTime = now;\r\n    }\r\n    \r\n    // view\r\n    function mybalance() public view onlyOwner returns(uint256 balance){\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function userAmount(address user) public view returns(uint256 _amount,uint256 _devidend){\r\n        return (buyerList[user].amount,(buyerList[user].amount * (100+dividendFee) / 100));\r\n    }\r\n    \r\n    function userDevidend(address user) public view returns(uint256 _amount){\r\n        return (buyerList[user].amount * (100+dividendFee) / 100);\r\n    }\r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setContractName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userDevidend\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gettAddressList\",\"outputs\":[{\"name\":\"addressList_\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mybalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"againCount_\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameInfo\",\"outputs\":[{\"name\":\"_gameName\",\"type\":\"string\"},{\"name\":\"_roundCount\",\"type\":\"uint256\"},{\"name\":\"_remaining\",\"type\":\"uint256\"},{\"name\":\"_all\",\"type\":\"uint256\"},{\"name\":\"_leftTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userAmount\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_devidend\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"name\":\"name_\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRoundLeft\",\"outputs\":[{\"name\":\"left\",\"type\":\"uint256\"},{\"name\":\"_all\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startCount\",\"type\":\"uint256\"},{\"name\":\"timeout_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name_\",\"type\":\"string\"}],\"name\":\"ChangeName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"againCount\",\"type\":\"uint256\"}],\"name\":\"BuySuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SendDivedend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ReturnValue\",\"type\":\"event\"}]","ContractName":"agame","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000186a0","Library":"","SwarmSource":"bzzr://2610681cdb95f8f873d5cee1b755c3f1e169b97b403a963971ac197089dd097a"}]}