{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface PlayerBookInterface {\r\n    function getPlayerID(address _addr) external returns (uint256);\r\n    function getPlayerName(uint256 _pID) external view returns (bytes32);\r\n    function getPlayerLAff(uint256 _pID) external view returns (uint256);\r\n    function getPlayerAddr(uint256 _pID) external view returns (address);\r\n    function getNameFee() external view returns (uint256);\r\n    function registerNameXIDFromDapp(address _addr, bytes32 _name, uint256 _affCode, bool _all) external payable returns(bool, uint256);\r\n    function registerNameXaddrFromDapp(address _addr, bytes32 _name, address _affCode, bool _all) external payable returns(bool, uint256);\r\n    function registerNameXnameFromDapp(address _addr, bytes32 _name, bytes32 _affCode, bool _all) external payable returns(bool, uint256);\r\n}\r\n\r\ninterface FoMo3DLongInterface {\r\n    function buyXid(uint256 _affCode, uint256 _eth, bytes32 _keyType) public returns(uint256);\r\n    function buyXaddr(address _affCode, uint256 _eth, bytes32 _keyType) public returns(uint256);\r\n    function buyXname(bytes32 _affCode, uint256 _eth, bytes32 _keyType) public returns(uint256);\r\n\r\n    function registerNameXid(string memory _nameString, uint256 _affCode, bool _all) public;\r\n    function registerNameXaddr(string memory _nameString, address _affCode, bool _all) public;\r\n    function registerNameXname(string memory _nameString, bytes32 _affCode, bool _all) public;\r\n    \r\n    function getBuyPrice() public returns(uint256);\r\n    function getTimeLeft() public returns(uint256);\r\n\r\n    function getCurrentRoundInfo() public returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256);\r\n    function getPlayerInfoByAddress(address _addr) public view returns(uint256, bytes32, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256);\r\n    function getPlayerRoundInfoByID(uint256 _pID, uint256 _rID) public view returns(uint256, uint256, bool, uint256, uint256, uint256, uint256, bool, uint256, uint256, uint256, uint256, uint256, uint256);\r\n    function getCurrentRoundTeamCos() public view returns(uint256,uint256,uint256,uint256);\r\n    \r\n    function sellKeys(uint256 _pID_, uint256 _keys_, bytes32 _keyType) public returns(uint256);\r\n    function playGame(uint256 _pID, uint256 _keys, uint256 _team, bytes32 _keyType) public returns(bool,bool);\r\n    function buyProp(uint256 _pID, uint256 _eth, uint256 _propID) public returns(uint256,uint256);\r\n    function buyLeader(uint256 _pID, uint256 _eth) public returns(uint256,uint256);\r\n    function iWantXKeys(uint256 _keys) public returns(uint256);\r\n    \r\n    function withdrawHoldVault(uint256 _pID) public returns(bool);\r\n    function withdrawAffVault(uint256 _pID) public returns(bool);\r\n    function withdrawWonCosFromGame(uint256 _pID, uint256 _affID, uint256 _rID) public returns(bool);\r\n    function transferToAnotherAddr(address _to, uint256 _keys, bytes32 _keyType) public returns(bool);\r\n    function activate() public;\r\n}\r\n\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr\r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256 c)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) \r\n    internal \r\n    pure \r\n    returns (uint256 c) \r\n    {\r\n        require(b > 0);\r\n        c = a / b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n    internal\r\n    pure\r\n    returns (uint256 y)\r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n    /**\r\n     * @dev x to the power of y\r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else\r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary NameFilter {\r\n\r\n    /**\r\n     * @dev filters name strings\r\n     * -converts uppercase to lower case.\r\n     * -makes sure it does not start/end with a space\r\n     * -makes sure it does not contain multiple spaces in a row\r\n     * -cannot be only numbers\r\n     * -cannot start with 0x\r\n     * -restricts characters to A-Z, a-z, 0-9, and space.\r\n     * @return reprocessed string in bytes32 format\r\n     */\r\n    function nameFilter(string memory _input)\r\n    internal\r\n    pure\r\n    returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n\r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n\r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                //_temp[i] = byte(uint(_temp[i]) + 32);\r\n\r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                // require character is a space\r\n                    _temp[i] == 0x20 ||\r\n                // OR lowercase a-z\r\n                (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                // or 0-9\r\n                (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n\r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;\r\n            }\r\n        }\r\n\r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n\r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n// \"./PlayerBookInterface.sol\";\r\n// \"./SafeMath.sol\";\r\n// \"./NameFilter.sol\";\r\n// 'openzeppelin-solidity/contracts/ownership/Ownable.sol';\r\n\r\n//==============================================================================\r\n//     _    _  _ _|_ _  .\r\n//    (/_\\/(/_| | | _\\  .\r\n//==============================================================================\r\ncontract F3Devents {\r\n    /*\r\n    event debug (\r\n        uint16 code,\r\n        uint256 value,\r\n        bytes32 msg\r\n    );\r\n    */\r\n\r\n    // fired whenever a player registers a name\r\n    event onNewName\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        bool isNewPlayer,\r\n        uint256 affiliateID,\r\n        address affiliateAddress,\r\n        bytes32 affiliateName,\r\n        uint256 amountPaid,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // fired whenever a withdraw forces end round to be ran\r\n    event onWithdrawAndDistribute\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethOut,\r\n        uint256 compressedData,\r\n        uint256 compressedIDs,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon\r\n    );\r\n\r\n    // (fomo3d long only) fired whenever a player tries a buy after round timer\r\n    // hit zero, and causes end round to be ran.\r\n    // emit F3Devents.onBuyAndDistribute\r\n    //             (\r\n    //                 msg.sender,\r\n    //                 plyr_[_pID].name,\r\n    //                 plyr_[_pID].cosd,\r\n    //                 plyr_[_pID].cosc,\r\n    //                 plyr_[pIDCom_].cosd,\r\n    //                 plyr_[pIDCom_].cosc,\r\n    //                 plyr_[_affID].affVltCosd,\r\n    //                 plyr_[_affID].affVltCosc,\r\n    //                 keyNum_\r\n    //             );\r\n    event onBuyAndDistribute\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 pCosd,\r\n        uint256 pCosc,\r\n        uint256 comCosd,\r\n        uint256 comCosc,\r\n        uint256 affVltCosd,\r\n        uint256 affVltCosc,\r\n        uint256 keyNums\r\n    );\r\n\r\n    // emit F3Devents.onRecHldVltCosd\r\n    //                     (\r\n    //                         msg.sender,\r\n    //                         plyr_[j].name,\r\n    //                         plyr_[j].hldVltCosd\r\n    //                     );\r\n    event onRecHldVltCosd\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName, \r\n        uint256 hldVltCosd\r\n    );\r\n\r\n    // emit F3Devents.onSellAndDistribute\r\n    //             (\r\n    //                 msg.sender,\r\n    //                 plyr_[_pID].name,\r\n    //                 plyr_[_pID].cosd,\r\n    //                 plyr_[_pID].cosc,\r\n    //                 keyNum_\r\n    //             );\r\n    event onSellAndDistribute\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 pCosd,\r\n        uint256 pCosc,\r\n        uint256 keyNums\r\n    );\r\n\r\n    event onGameCore\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 pCosd,\r\n        uint256 pCosc,\r\n        uint256 plyrRnds_cosd,\r\n        uint256 plyrRnds_cosc,\r\n        bool plyrRnds_first,\r\n        uint256 plyrRnds_redtPRFirst,\r\n        uint256 plyrRnds_firstCosd,\r\n        uint256 plyrRnds_firstCosc,\r\n        uint256 round_cosd,\r\n        uint256 round_cosc,\r\n        uint256 plyrRnds_team\r\n    );\r\n\r\n    event onEndRoundProssRate\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 plyrRnds_cosd,\r\n        uint256 plyrRnds_cosc,\r\n        uint256 plyr_rounds,\r\n        uint256 plyr_redt1,\r\n        uint256 plyr_redt3\r\n    );\r\n\r\n    event onWin\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 plyrRnds_wonCosd,\r\n        uint256 plyrRnds_wonCosc,\r\n        uint256 plyr_lrnd\r\n    );\r\n\r\n    event onLoss\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 plyrRnds_wonCosd,\r\n        uint256 plyrRnds_wonCosc,\r\n        uint256 plyr_lrnd\r\n    );\r\n    // emit F3Devents.onEndRound\r\n    //             (\r\n    //                 rID_,\r\n    //                 round_[_rID].strt,\r\n    //                 round_[_rID].end,\r\n    //                 round_[_rID].ended\r\n    //             );\r\n    // (fomo3d long only) fired whenever a player tries a reload after round timer\r\n    // hit zero, and causes end round to be ran.\r\n    event onEndRound\r\n    (\r\n        uint256 rID,\r\n        uint256 round_strt,\r\n        uint256 round_end,\r\n        bool    round_ended\r\n    );\r\n\r\n    event onBuyProp\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 plyrRnds_predtPRProp,\r\n        uint256 plyrRnds_pincrPRProp,\r\n        uint256 plyr_predtProp,\r\n        bool    plyrRnds_phadProp,\r\n        uint256 plyrRnds_ppropID,\r\n        uint256 plyrRnds_oredtPRProp,\r\n        uint256 plyrRnds_oincrPRProp,\r\n        uint256 plyr_oredtProp,\r\n        bool    plyrRnds_ohadProp,\r\n        uint256 plyrRnds_opropID,\r\n        uint256 rndProp_oID\r\n    );\r\n\r\n    event onBuyLeader\r\n    (\r\n        address playerAddress,\r\n        // bytes32 playerName,\r\n        uint256 rndLd_price,\r\n        uint256 round_plyr,\r\n        uint256 round_team,\r\n        uint256 rndTmEth_winRate1,\r\n        uint256 rndTmEth_winRate2\r\n    );\r\n   \r\n    event onWithdrawHoldVault\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 plyr_cosd,\r\n        uint256 plyr_hldVltCosd\r\n    );\r\n    \r\n    event onWithdrawAffVault\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 plyr_cosd,\r\n        uint256 plyr_cosc,\r\n        uint256 plyr_affVltCosd,\r\n        uint256 plyr_affVltCosc\r\n    );\r\n    \r\n    event onWithdrawWonCosFromGame\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 plyr_cosd,\r\n        uint256 plyr_cosc,\r\n        uint256 plyr_affVltCosd\r\n    );\r\n}\r\n\r\ncontract modularLong is F3Devents {}\r\n\r\ncontract FoMo3DLong is modularLong, Ownable, FoMo3DLongInterface {\r\n    using SafeMath for *;\r\n    using NameFilter for *;\r\n    using F3DKeysCalcLong for *;\r\n\r\n    //    otherFoMo3D private otherF3D_;\r\n    PlayerBookInterface constant private PlayerBook = PlayerBookInterface(0xdDc312cc5675fc3e36C33A6bAfd1aDC089E3ED46);\r\n\r\n     //==============================================================================\r\n    //     _ _  _  |`. _     _ _ |_ | _  _  .\r\n    //    (_(_)| |~|~|(_||_|| (_||_)|(/__\\  .  (game settings)\r\n    //=================_|===========================================================\r\n    string constant public name = \"FoMo3D World\";\r\n    string constant public symbol = \"F3DW\";\r\n    //    uint256 private rndExtra_ = extSettings.getLongExtra();     // length of the very first ICO\r\n    uint256 constant public rndGap_ = 0; // 120 seconds;         // length of ICO phase.\r\n    uint256 constant public rndInit_ = 4 hours;                // round timer starts at this\r\n    // uint256 constant private rndInc_ = 30 seconds;              // every full key purchased adds this much to the timer\r\n    // uint256 constant private rndMax_ = 24 hours;                // max length a round timer can be\r\n\r\n    uint256 constant public rndFirst_ = 1 hours;                // a round fist step timer can be\r\n\r\n    uint256 constant public threshould_ = 3;//超过XXX个cos\r\n\r\n    uint256 public rID_;    // round id number / total rounds that have happened\r\n    uint256 public plyNum_ = 2;\r\n    uint256 public keyNum_ = 0;\r\n\r\n    uint256 constant public pIDCom_ = 1;\r\n    //****************\r\n    // PLAYER DATA\r\n    //****************\r\n    mapping (address => uint256) public pIDxAddr_;          // (addr => pID) returns player id by address\r\n    mapping (bytes32 => uint256) public pIDxName_;          // (name => pID) returns player id by name\r\n    mapping (uint256 => F3Ddatasets.Player) public plyr_;   // (pID => data) player data\r\n    mapping (uint256 => mapping (uint256 => F3Ddatasets.PlayerRounds)) public plyrRnds_;    // (pID => rID => data) player round data by player id & round id\r\n    mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; // (pID => name => bool) list of names a player owns.  (used so you can change your display name amongst any name you own)\r\n    //****************\r\n    // ROUND DATA\r\n    //****************\r\n    mapping (uint256 => F3Ddatasets.Round) public round_;   // (rID => data) round data\r\n    mapping (uint256 => mapping(uint256 => F3Ddatasets.Team)) public rndTmEth_;      // (rID => tID => data) eth in per team, by round id and team id\r\n    mapping (uint256 => mapping(uint256 => F3Ddatasets.Prop)) public rndProp_;      // (rID => propID => data) eth in per team, by round id and team id\r\n    mapping (uint256 => F3Ddatasets.Leader) public rndLd_;      // (rID => data) eth in per team, by round id and team id\r\n    \r\n    //****************\r\n    // TEAM FEE DATA\r\n    //****************\r\n\r\n    // mapping (uint256 => F3Ddatasets.Team) public teams_;          // (teamID => team)\r\n    // mapping (uint256 => F3Ddatasets.Prop) public props_;          // (teamID => team)\r\n    mapping (uint256 => F3Ddatasets.Fee) public fees_;          // (teamID => team)\r\n    \r\n    //F3Ddatasets.EventReturns  _eventData_;\r\n\r\n    constructor()\r\n    public\r\n    {\r\n        //teams\r\n        // teams_[0] = F3Ddatasets.Team(0,70,0);\r\n        // teams_[1] = F3Ddatasets.Team(1,30,0);\r\n        //props\r\n        // props_[0] = F3Ddatasets.Prop(0,5,20,20);\r\n        // props_[1] = F3Ddatasets.Prop(1,2,0,20);\r\n        // props_[2] = F3Ddatasets.Prop(2,2,10,0);\r\n        // props_[3] = F3Ddatasets.Prop(3,1,0,10);\r\n        // props_[4] = F3Ddatasets.Prop(4,1,10,0);\r\n        //fees\r\n        fees_[0] = F3Ddatasets.Fee(5,2,3);    //cosdBuyFee\r\n        fees_[1] = F3Ddatasets.Fee(0,0,20);  //cosdSellFee\r\n        fees_[2] = F3Ddatasets.Fee(4,1,0);    //coscBuyFee\r\n        fees_[3] = F3Ddatasets.Fee(0,0,0);   //coscSellFee\r\n    }\r\n\r\n    // **\r\n    //  * @dev used to make sure no one can interact with contract until it has\r\n    //  * been activated.\r\n    //  *\r\n    modifier isActivated() {\r\n        require(activated_ == true, \"its not ready yet.  check ?eta in discord\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev prevents contracts from interacting with fomo3d\r\n     */\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev sets boundaries for incoming tx\r\n     */\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 1000000000, \"pocket lint: not a valid currency\");\r\n        //require(_eth <= 100000000000000000000000, \"no vitalik, no\");\r\n        _;\r\n    }\r\n\r\n    function buyXid(uint256 _affCode, uint256 _eth, bytes32 _keyType)\r\n    isActivated()\r\n    isHuman()\r\n    // isWithinLimits(msg.value)\r\n    public\r\n    // payable\r\n    returns(uint256)\r\n    {\r\n        // set up our tx event data and determine if player is new or not\r\n        // F3Ddatasets.EventReturns memory _eventData_;\r\n        // _eventData_ = determinePID(_eventData_);\r\n        determinePID();\r\n\r\n        // fetch player id\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // manage affiliate residuals\r\n        // if no affiliate code was given or player tried to use their own, lolz\r\n        if (_affCode == 0 || _affCode == _pID)\r\n        {\r\n            // use last stored affiliate code\r\n            _affCode = plyr_[_pID].laff;\r\n\r\n            // if affiliate code was given & its not the same as previously stored\r\n        } else if (_affCode != plyr_[_pID].laff) {\r\n            // update last affiliate\r\n            plyr_[_pID].laff = _affCode;\r\n        }\r\n\r\n        // verify a valid team was selected\r\n        // _team = verifyTeam(_team);\r\n\r\n        // buy core\r\n        //function buyCore(uint256 _pID, uint256 _affID, uint256 _eth, uint256 _team, bytes32 _keyType, F3Ddatasets.EventReturns memory _eventData_)\r\n        return buyCore(_pID, _affCode,_eth, _keyType);\r\n    }\r\n\r\n    function buyXaddr(address _affCode, uint256 _eth, bytes32 _keyType)\r\n    isActivated()\r\n    isHuman()\r\n    // isWithinLimits(msg.value)\r\n    public\r\n    // payable\r\n    returns(uint256)\r\n    {\r\n        // set up our tx event data and determine if player is new or not\r\n        // F3Ddatasets.EventReturns memory _eventData_;\r\n        // _eventData_ = determinePID(_eventData_);\r\n        determinePID();\r\n\r\n        // fetch player id\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // manage affiliate residuals\r\n        uint256 _affID;\r\n        // if no affiliate code was given or player tried to use their own, lolz\r\n        if (_affCode == address(0) || _affCode == msg.sender)\r\n        {\r\n            // use last stored affiliate code\r\n            _affID = plyr_[_pID].laff;\r\n\r\n            // if affiliate code was given\r\n        } else {\r\n            // get affiliate ID from aff Code\r\n            _affID = pIDxAddr_[_affCode];\r\n\r\n            // if affID is not the same as previously stored\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // update last affiliate\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // verify a valid team was selected\r\n        // _team = verifyTeam(_team);\r\n\r\n        // buy core\r\n        return buyCore(_pID, _affID, _eth, _keyType);\r\n    }\r\n\r\n    // function buyXname(bytes32 _affCode,  uint256 _eth, bytes32 _keyType)\r\n    // isActivated()\r\n    // isHuman()\r\n    // // isWithinLimits(msg.value)\r\n    // public\r\n    // // payable\r\n    // returns(uint256)\r\n    // {\r\n    //     // set up our tx event data and determine if player is new or not\r\n    //     // F3Ddatasets.EventReturns memory _eventData_;\r\n    //     // _eventData_ = determinePID(_eventData_);\r\n    //     determinePID();\r\n    //     // fetch player id\r\n    //     uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n    //     // manage affiliate residuals\r\n    //     uint256 _affID;\r\n    //     // if no affiliate code was given or player tried to use their own, lolz\r\n    //     if (_affCode == '' || _affCode == plyr_[_pID].name)\r\n    //     {\r\n    //         // use last stored affiliate code\r\n    //         _affID = plyr_[_pID].laff;\r\n\r\n    //         // if affiliate code was given\r\n    //     } else {\r\n    //         // get affiliate ID from aff Code\r\n    //         _affID = pIDxName_[_affCode];\r\n\r\n    //         // if affID is not the same as previously stored\r\n    //         if (_affID != plyr_[_pID].laff)\r\n    //         {\r\n    //             // update last affiliate\r\n    //             plyr_[_pID].laff = _affID;\r\n    //         }\r\n    //     }\r\n\r\n    //     // verify a valid team was selected\r\n    //     // _team = verifyTeam(_team);\r\n\r\n    //     // buy core\r\n    //     return buyCore(_pID, _affID,_eth, _keyType);\r\n    // }\r\n\r\n\r\n    function registerNameXid(string memory _nameString, uint256 _affCode, bool _all)\r\n    isHuman()\r\n    public\r\n    // payable\r\n    {\r\n        bytes32 _name = _nameString.nameFilter();\r\n        address _addr = msg.sender;\r\n        uint256 _paid = msg.value;\r\n        (bool _isNewPlayer, uint256 _affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr, _name, _affCode, _all);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        // fire event\r\n        emit F3Devents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\r\n    }\r\n\r\n    function registerNameXaddr(string   memory  _nameString, address _affCode, bool _all)\r\n    isHuman()\r\n    public\r\n    // payable\r\n    {\r\n        bytes32 _name = _nameString.nameFilter();\r\n        address _addr = msg.sender;\r\n        uint256 _paid = msg.value;\r\n        (bool _isNewPlayer, uint256 _affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        // fire event\r\n        emit F3Devents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\r\n    }\r\n\r\n    // function registerNameXname(string memory  _nameString, bytes32 _affCode, bool _all)\r\n    // isHuman()\r\n    // public\r\n    // // payable\r\n    // {\r\n    //     bytes32 _name = _nameString.nameFilter();\r\n    //     address _addr = msg.sender;\r\n    //     uint256 _paid = msg.value;\r\n    //     (bool _isNewPlayer, uint256 _affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\r\n\r\n    //     uint256 _pID = pIDxAddr_[_addr];\r\n\r\n    //     // fire event\r\n    //     emit F3Devents.onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\r\n    // }\r\n    /**\r\n     * @dev return the price buyer will pay for next 1 individual key.\r\n     * -functionhash- 0x018a25e8\r\n     * @return price for next key bought (in wei format)\r\n     */\r\n    function getBuyPrice()\r\n    public\r\n    // view\r\n    returns(uint256)\r\n    {\r\n        // // setup local rID\r\n        // uint256 _rID = rID_;\r\n\r\n        // // grab time\r\n        // uint256 _now = now;\r\n        uint256 _price = 10**16;\r\n        uint256 _keyNum = keyNum_;\r\n        // are we in a round?\r\n        // if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))) {\r\n        //     //return  uint256((10 ** 16).mul( ((1+3/10000) ** (round_[_rID].cosd.add(round_[_rID].cosc)-1))));\r\n        //     uint256 _count = round_[_rID].cosd.add(round_[_rID].cosc);\r\n            while(_keyNum > 0){\r\n                _price = _price + _price*3/10000;\r\n                _keyNum--;\r\n            }\r\n            return _price;\r\n        // }\r\n        // else // rounds over.  need price for new round\r\n        //     return ( 10**16 ); // init\r\n    }\r\n\r\n    function getTimeLeft()\r\n    public\r\n    // view\r\n    returns(uint256)\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n\r\n        // grab time\r\n        uint256 _now = now;\r\n\r\n        if (_now < round_[_rID].end)\r\n            if (_now > round_[_rID].strt + rndGap_)\r\n                return( (round_[_rID].end).sub(_now) );\r\n            else\r\n                return( (round_[_rID].strt + rndGap_).sub(_now) );\r\n        else\r\n            return(0);\r\n    }\r\n\r\n  \r\n    \r\n    //  struct Round {\r\n    //     uint256 plyr;   // pID of player in lead\r\n    //     uint256 team;   // tID of team in lead\r\n    //     uint256 end;    // time ends/ended\r\n    //     bool ended;     // has round end function been ran\r\n    //     uint256 strt;   // time round started\r\n    //     uint256 cosd;   // keys\r\n    //     uint256 cosc;   // keys\r\n    //     uint256 eth;    // total eth in\r\n    //     uint256 ico;    // total eth sent in during ICO phase\r\n    //     uint256 winTeam;\r\n    // }     \r\n    // \r\n    function getCurrentRoundInfo()\r\n    public\r\n    // view\r\n    returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n\r\n        return\r\n        (\r\n            _rID,                           \r\n            round_[_rID].plyr,\r\n            round_[_rID].team,\r\n            round_[_rID].cosd,              \r\n            round_[_rID].cosc,              \r\n            round_[_rID].strt,              \r\n            round_[_rID].end,                                                \r\n            round_[_rID].winTeam           \r\n        );\r\n    }\r\n\r\n\r\n    //  struct Player {\r\n    //     address addr;   // player address\r\n    //     bytes32 name;   // player name\r\n    //     uint256 cosd;    // winnings vault\r\n    //     uint256 cosc;    // winnings vault\r\n    //     uint256 aff;    // affiliate vault\r\n    //     uint256 lrnd;   // last round played\r\n    //     uint256 laff;   // last affiliate id used\r\n    //     uint256 rounds; //超过xxxcosd的轮数累计\r\n    //     uint256 redtProp; //买道具赠送的累计亏损减少率\r\n    //     uint256 redt1;\r\n    //     uint256 redt3;\r\n    //     uint256 affVltCosd;\r\n    //     uint256 affVltCosc;\r\n    //     uint256 hldVltCosd;\r\n    // }\r\n    //  \r\n    function getPlayerInfoByAddress(address _addr)\r\n    public\r\n    view\r\n    returns(uint256, bytes32, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        // setup local rID\r\n        // uint256 _rID = rID_;\r\n        // address _addr = _addr_;\r\n\r\n        if (_addr == address(0))\r\n        {\r\n            _addr == msg.sender;\r\n        }\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        return\r\n        (\r\n            _pID,                              \r\n            plyr_[_pID].name,                  \r\n            plyr_[_pID].cosd,       \r\n            plyr_[_pID].cosc,\r\n            plyr_[_pID].lrnd,                  \r\n            plyr_[_pID].laff,\r\n            plyr_[_pID].rounds,\r\n            plyr_[_pID].redtProp,\r\n            plyr_[_pID].redt1,\r\n            plyr_[_pID].redt3,\r\n            plyr_[_pID].affVltCosd,\r\n            plyr_[_pID].affVltCosc,\r\n            plyr_[_pID].hldVltCosd\r\n        );\r\n    }\r\n\r\n    // struct PlayerRounds {\r\n    //     uint256 eth;    // eth player has added to round (used for eth limiter)\r\n    //     uint256 cosd;   // keys\r\n    //     uint256 cosc;   // keys\r\n    //     bool hadProp;\r\n    //     uint256 propID;\r\n    //     uint256 redtPRProp; //lossReductionRate，玩家当前回合道具总亏损减少率\r\n    //     uint256 incrPRProp; //Income increase rate收入增加率\r\n    //     uint256 team;\r\n    //     bool first;\r\n    //     uint256 firstCosd;//第一阶段投入的COS资金，可减少20% 亏损率\r\n    //     uint256 firstCosc;//第一阶段投入的COS资金，可减少20% 亏损率\r\n    //     uint256 redtInFirst;\r\n    //     uint256 wonCosd;\r\n    //     uint256 wonCosc;\r\n    //     uint256 wonEth;\r\n    // }\r\n   \r\n    function getPlayerRoundInfoByID(uint256 _pID, uint256 _rID)\r\n    public\r\n    view\r\n    returns(uint256, uint256, bool, uint256, uint256, uint256, uint256, bool, uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        // setup local rID\r\n        uint256 _rID_ = _rID;\r\n        uint256 _pID_ = _pID;\r\n\r\n        return\r\n        (              \r\n            plyrRnds_[_pID_][_rID_].cosd,       \r\n            plyrRnds_[_pID_][_rID_].cosc,\r\n            plyrRnds_[_pID_][_rID_].hadProp,                  \r\n            plyrRnds_[_pID_][_rID_].propID,\r\n            plyrRnds_[_pID_][_rID_].redtPRProp,\r\n            plyrRnds_[_pID_][_rID_].incrPRProp,\r\n            plyrRnds_[_pID_][_rID_].team,\r\n            plyrRnds_[_pID_][_rID_].first,\r\n            plyrRnds_[_pID_][_rID_].firstCosd,\r\n            plyrRnds_[_pID_][_rID_].firstCosc,\r\n            plyrRnds_[_pID_][_rID_].wonCosd,\r\n            plyrRnds_[_pID_][_rID_].wonCosc,\r\n            plyrRnds_[_pID_][_rID_].wonCosdRcd,\r\n            plyrRnds_[_pID_][_rID_].wonCoscRcd        \r\n        );\r\n    }\r\n\r\n    function getCurrentRoundTeamCos()\r\n    public\r\n    view\r\n    returns(uint256, uint256, uint256, uint256)\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n\r\n        return\r\n        (              \r\n              rndTmEth_[_rID][1].cosd,\r\n              rndTmEth_[_rID][1].cosc,\r\n              rndTmEth_[_rID][2].cosd,\r\n              rndTmEth_[_rID][2].cosc\r\n        );\r\n    }\r\n\r\n   \r\n    function buyCore(uint256 _pID, uint256 _affID, uint256 _eth, bytes32 _keyType)\r\n    private\r\n    returns(uint256)\r\n    {\r\n        uint256 _keys;\r\n        // if eth left is greater than min eth allowed (sorry no pocket lint)\r\n        if (_eth > 1000000000)\r\n        {\r\n            // require(_eth >= getBuyPrice());\r\n            // mint the new keys\r\n            _keys = _eth.keysRec(getBuyPrice());\r\n            // pay 2% out to community rewards\r\n            uint256 _aff;\r\n            uint256 _com;\r\n            uint256 _holders;\r\n            uint256 _self;\r\n\r\n            if (_keyType == \"cosd\") {\r\n                _aff        = _keys.mul(fees_[0].aff)/100;\r\n                _com        = _keys.mul(fees_[0].com)/100;\r\n                _holders    = _keys.mul(fees_[0].holders)/100;\r\n                _self       = _keys.sub(_aff).sub(_com).sub(_holders);\r\n            }else{\r\n                _aff        = _keys.mul(fees_[2].aff)/100;\r\n                _com        = _keys.mul(fees_[2].com)/100;\r\n                _holders    = _keys.mul(fees_[2].holders)/100;\r\n                _self       = _keys.sub(_aff).sub(_com).sub(_holders);\r\n            }\r\n\r\n            // // if they bought at least 1 whole key\r\n            // if (_keys >= 1)\r\n            // {\r\n            //     // set new leaders\r\n            //     if (round_[_rID].plyr != _pID)\r\n            //         round_[_rID].plyr = _pID;\r\n            //     if (round_[_rID].team != _team)\r\n            //         round_[_rID].team = _team;\r\n            // }\r\n            // update player\r\n            if(_keyType == \"cosd\"){\r\n\r\n                uint256 _hldCosd;\r\n                for (uint256 i = 1; i <= plyNum_; i++) {\r\n                    if(i!=_pID && plyr_[i].cosd>0) _hldCosd = _hldCosd.add(plyr_[i].cosd);\r\n                }\r\n\r\n                // plyrRnds_[_pID][_rID].cosd   = plyrRnds_[_pID][_rID].cosd.add(_self);\r\n                // plyrRnds_[0][_rID].cosd      = plyrRnds_[0][_rID].cosd.add(_com);     //给团队\r\n                // plyrRnds_[_affID][_rID].cosd = plyrRnds_[_affID][_rID].cosd.add(_aff);\r\n                //Player\r\n                plyr_[_pID].cosd = plyr_[_pID].cosd + _self;\r\n                plyr_[pIDCom_].cosd = plyr_[pIDCom_].cosd.add(_com);\r\n                plyr_[_affID].affVltCosd = plyr_[_affID].affVltCosd.add(_aff);\r\n\r\n                for (uint256 j = 1; j <= plyNum_; j++) {\r\n                    if(j!=_pID && plyr_[j].cosd>0) {\r\n                        // plyrRnds_[j][_rID].cosd = plyrRnds_[j][_rID].cosd.add(_holders.div(_otherHodles));\r\n                        plyr_[j].hldVltCosd = plyr_[j].hldVltCosd.add(_holders.mul(plyr_[j].cosd).div(_hldCosd));\r\n                        emit F3Devents.onRecHldVltCosd\r\n                        (\r\n                            msg.sender,\r\n                            plyr_[j].name,\r\n                            plyr_[j].hldVltCosd\r\n                        );\r\n                    }\r\n                }\r\n                //team\r\n                // rndTmEth_[_rID][_team].cosd = _self.add(rndTmEth_[_rID][_team].cosd);\r\n                // cosdNum_ = cosdNum_.add(_keys);\r\n            }\r\n            else{//cosc\r\n                // plyrRnds_[_pID][_rID].cosc   = plyrRnds_[_pID][_rID].cosc.add(_self);\r\n                // plyrRnds_[0][_rID].cosc      = plyrRnds_[0][_rID].cosc.add(_com);     //给团队\r\n                // plyrRnds_[_affID][_rID].cosc = plyrRnds_[_affID][_rID].cosc.add(_aff);\r\n                //Player\r\n                plyr_[_pID].cosc = plyr_[_pID].cosc + _self;\r\n                plyr_[pIDCom_].cosc = plyr_[0].cosc.add(_com);\r\n                plyr_[_affID].affVltCosc = plyr_[_affID].affVltCosc.add(_aff);\r\n                // rndTmEth_[_rID][_team].cosc = _self.add(rndTmEth_[_rID][_team].cosc);\r\n                // coscNum_ = coscNum_.add(_keys);\r\n            }\r\n\r\n            keyNum_ = keyNum_.add(_keys);//update\r\n            // plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth);\r\n\r\n            // // update round\r\n            // if(_keyType == \"cosd\")\r\n            //     round_[_rID].cosd = _keys.add(round_[_rID].cosd);\r\n            // else\r\n            //     round_[_rID].cosc = _keys.add(round_[_rID].cosc);\r\n\r\n            // round_[_rID].eth = _eth.add(round_[_rID].eth);\r\n            // rndTmEth_[_rID][_team].eth = _eth.add(rndTmEth_[_rID][_team].eth);\r\n            // plyrRnds_[_pID][_rID].team = _team;\r\n\r\n            // call end tx function to fire end tx event.\r\n        //    endTx(_pID, _team, _eth, _keys, _keyType,_eventData_);\r\n\r\n            // uint256 _now = now;\r\n            // if (_now > round_[_rID].strt + rndGap_ && _now <= round_[_rID].strt + rndFirst_) { //first step\r\n            //     plyrRnds_[_pID][_rID].first = plyrRnds_[_pID][_rID].first.add(_eth);\r\n            // }\r\n            // emit F3Devents.onBuyAndDistribute\r\n            //     (\r\n            //         msg.sender,\r\n            //         plyr_[_pID].name,\r\n            //         plyr_[_pID].cosd,\r\n            //         plyr_[_pID].cosc,\r\n            //         plyr_[pIDCom_].cosd,\r\n            //         plyr_[pIDCom_].cosc,\r\n            //         plyr_[_affID].affVltCosd,\r\n            //         plyr_[_affID].affVltCosc,\r\n            //         keyNum_\r\n            //     );\r\n        }\r\n\r\n        return _keys;\r\n    }  \r\n\r\n\r\n   \r\n    function sellKeys(uint256 _pID_, uint256 _keys_, bytes32 _keyType)\r\n    isActivated()\r\n    isHuman()\r\n    // isWithinLimits(msg.value)\r\n    public\r\n    // payable\r\n    returns(uint256)\r\n    {\r\n        uint256 _pID = _pID_;\r\n        uint256 _keys = _keys_;\r\n        require(_keys>0);\r\n        uint256 _eth;\r\n\r\n        // uint256 _aff;\r\n        // uint256 _com;\r\n        uint256 _holders;\r\n        uint256 _self;\r\n        if (_keyType == \"cosd\") {\r\n                // _aff        = _keys.mul(fees_[1].aff)/100;\r\n                // _com        = _keys.mul(fees_[1].com)/100;\r\n                _holders    = _keys.mul(fees_[1].holders)/100;\r\n                // _self       = _keys.sub(_aff).sub(_com);\r\n                _self       = _self.sub(_holders);\r\n        }else{\r\n                // _aff        = _keys.mul(fees_[3].aff)/100;\r\n                // _com        = _keys.mul(fees_[3].com)/100;\r\n                _holders    = _keys.mul(fees_[3].holders)/100;\r\n                // _self       = _keys.sub(_aff).sub(_com);\r\n                _self       = _self.sub(_holders);\r\n        }\r\n        //split\r\n       if(_keyType == \"cosd\"){\r\n            require(plyr_[_pID].cosd >= _keys,\"Do not have cosd!\");\r\n\r\n            uint256 _hldCosd;\r\n                for (uint256 i = 1; i <= plyNum_; i++) {\r\n                    if(i!=_pID && plyr_[i].cosd>0) _hldCosd = _hldCosd.add(plyr_[i].cosd);\r\n                }\r\n\r\n                plyr_[_pID].cosd = plyr_[_pID].cosd.sub(_self);\r\n\r\n                for (uint256 j = 1; j <= plyNum_; j++) {\r\n                    if(j!=_pID && plyr_[j].cosd>0) {                    \r\n                        plyr_[j].hldVltCosd = plyr_[j].hldVltCosd.add(_holders.mul(plyr_[j].cosd).div(_hldCosd));\r\n                        emit F3Devents.onRecHldVltCosd\r\n                        (\r\n                            msg.sender,\r\n                            plyr_[j].name,\r\n                            plyr_[j].hldVltCosd\r\n                        );\r\n                    }\r\n                }\r\n       }\r\n       else{\r\n            require(plyr_[_pID].cosc >= _keys,\"Do not have cosc!\");           \r\n\r\n            plyr_[_pID].cosc = plyr_[_pID].cosc.sub(_self);\r\n       }\r\n\r\n       keyNum_ = keyNum_.sub(_keys);//update\r\n       _eth = _keys.ethRec(getBuyPrice());\r\n\r\n       emit F3Devents.onSellAndDistribute\r\n                (\r\n                    msg.sender,\r\n                    plyr_[_pID].name,\r\n                    plyr_[_pID].cosd,\r\n                    plyr_[_pID].cosc,\r\n                    keyNum_\r\n                );\r\n\r\n       return _eth;\r\n    }\r\n\r\n\r\n    function playGame(uint256 _pID, uint256 _keys, uint256 _team, bytes32 _keyType)\r\n    isActivated()\r\n    isHuman()\r\n    // isWithinLimits(msg.value)\r\n    public\r\n    // payable\r\n    returns(bool, bool)\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n\r\n        // grab time\r\n        uint256 _now = now;\r\n        bool _game;\r\n        bool _end;\r\n\r\n        // if round is active\r\n        if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n        {   //uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _team, bytes32 _keyType, bytes32 F3Ddatasets.EventReturns memory _eventData_\r\n            // call core\r\n            _game = gameCore(_pID, _keys, _team, _keyType);\r\n\r\n            // if round is not active\r\n        } else {\r\n            // check to see if end round needs to be ran\r\n            if (_now > round_[_rID].end && round_[_rID].ended == false)\r\n            {\r\n                // end the round (distributes pot) & start new round\r\n                round_[_rID].ended = true;\r\n                // _eventData_ = endRound(_eventData_);\r\n                uint256 _winTeam;\r\n\r\n                _winTeam =  endRound();\r\n                _end = true;\r\n\r\n                // build event data\r\n                // _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\r\n                // _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\r\n\r\n                // // fire buy and distribute event\r\n                emit F3Devents.onEndRound\r\n                (\r\n                    rID_,\r\n                    round_[_rID].strt,\r\n                    round_[_rID].end,\r\n                    round_[_rID].ended\r\n                );\r\n            }\r\n\r\n        }\r\n        return (_game, _end);\r\n    }\r\n  \r\n    function gameCore(uint256 _pID, uint256 _keys, uint256 _team, bytes32 _keyType)\r\n    private\r\n    returns(bool)\r\n    {\r\n            uint256 _rID = rID_;\r\n            uint256 _now = now;\r\n\r\n            // update player\r\n            if(_keyType == \"cosd\"){\r\n                require(plyr_[_pID].cosd >= _keys);\r\n                plyrRnds_[_pID][_rID].cosd   = plyrRnds_[_pID][_rID].cosd.add(_keys);\r\n                //Player\r\n                plyr_[_pID].cosd = plyr_[_pID].cosd.sub(_keys);\r\n                //team\r\n                rndTmEth_[_rID][_team].cosd = _keys.add(rndTmEth_[_rID][_team].cosd);\r\n\r\n                if (_now > round_[_rID].strt + rndGap_ && _now <= round_[_rID].strt + rndGap_ + rndFirst_) { //first step\r\n                    plyrRnds_[_pID][_rID].first = true;\r\n                    plyrRnds_[_pID][_rID].redtPRFirst = 80;\r\n                    plyrRnds_[_pID][_rID].firstCosd = plyrRnds_[_pID][_rID].firstCosd.add(_keys);\r\n                }\r\n            }\r\n            else{//cosc\r\n                require(plyr_[_pID].cosc >= _keys);\r\n                plyrRnds_[_pID][_rID].cosc   = plyrRnds_[_pID][_rID].cosc.add(_keys);\r\n                //Player\r\n                plyr_[_pID].cosc = plyr_[_pID].cosc.sub(_keys);\r\n  \r\n                rndTmEth_[_rID][_team].cosc = _keys.add(rndTmEth_[_rID][_team].cosc);\r\n\r\n                if (_now > round_[_rID].strt + rndGap_ && _now <= round_[_rID].strt + rndGap_ + rndFirst_) { //first step\r\n                    plyrRnds_[_pID][_rID].first = true;\r\n                    plyrRnds_[_pID][_rID].redtPRFirst = 80;\r\n                    plyrRnds_[_pID][_rID].firstCosc = plyrRnds_[_pID][_rID].firstCosc.add(_keys);\r\n                }\r\n            }\r\n\r\n            // update round\r\n            if(_keyType == \"cosd\")\r\n                round_[_rID].cosd = _keys.add(round_[_rID].cosd);\r\n            else\r\n                round_[_rID].cosc = _keys.add(round_[_rID].cosc);\r\n\r\n            // round_[_rID].eth = _eth.add(round_[_rID].eth);\r\n            // rndTmEth_[_rID][_team].eth = _eth.add(rndTmEth_[_rID][_team].eth);\r\n            plyrRnds_[_pID][_rID].team = _team;\r\n\r\n           //  call end tx function to fire end tx event.\r\n           // endTx(_pID, _team, _eth, _keys, _keyType,_eventData_);\r\n        //   emit F3Devents.onGameCore\r\n        //         (\r\n        //             msg.sender,\r\n        //             plyr_[_pID].name,\r\n        //             plyr_[_pID].cosd,\r\n        //             plyr_[_pID].cosc,\r\n        //             plyrRnds_[_pID][_rID].cosd,\r\n        //             plyrRnds_[_pID][_rID].cosc,\r\n        //             plyrRnds_[_pID][_rID].first,\r\n        //             plyrRnds_[_pID][_rID].redtPRFirst,\r\n        //             plyrRnds_[_pID][_rID].firstCosd,\r\n        //             plyrRnds_[_pID][_rID].firstCosc,\r\n        //             round_[_rID].cosd,\r\n        //             round_[_rID].cosc,\r\n        //             plyrRnds_[_pID][_rID].team\r\n        //         );\r\n        \r\n            return true;\r\n    }  \r\n\r\n    function buyProp(uint256 _pID, uint256 _eth, uint256 _propID)\r\n    isActivated()\r\n    isHuman()\r\n    // isWithinLimits(msg.value)\r\n    public\r\n    // payable\r\n    returns(uint256,uint256) //pID,eth\r\n    {\r\n        //require(_eth <= msg.value);\r\n        uint256 _rID = rID_;\r\n        uint256 _rstETH = 0;\r\n        uint256 _oID = rndProp_[_rID][_propID].oID;\r\n        // require(_eth >= rndProp_[_rID][_propID].price && plyrRnds_[_pID][_rID].hadProp = false);\r\n\r\n      if(_pID >= 1 && _pID <= 6){\r\n\r\n        if (_propID == 1) {\r\n            require(_eth >= 3 * 10**18 && plyrRnds_[_pID][_rID].hadProp == false && _oID != _pID);\r\n            if(plyrRnds_[_pID][_rID].team == 1)\r\n                rndTmEth_[_rID][plyrRnds_[_pID][_rID].team].winRate += 5;\r\n            else rndTmEth_[_rID][plyrRnds_[_pID][_rID].team].winRate += 10;\r\n\r\n            if(plyrRnds_[_pID][_rID].redtPRProp == 0) plyrRnds_[_pID][_rID].redtPRProp = 80;\r\n            else    plyrRnds_[_pID][_rID].redtPRProp = plyrRnds_[_pID][_rID].redtPRProp*80/100;\r\n\r\n            if(plyrRnds_[_pID][_rID].incrPRProp == 0) plyrRnds_[_pID][_rID].incrPRProp = 120;\r\n            else    plyrRnds_[_pID][_rID].incrPRProp = plyrRnds_[_pID][_rID].incrPRProp*120/100;\r\n\r\n            //个人亏损减少率增加，永久效果\r\n            if(plyr_[_pID].redtProp == 0) plyr_[_pID].redtProp = 97;\r\n            else plyr_[_pID].redtProp = plyr_[_pID].redtProp*97/100;\r\n            //clean\r\n            if (_oID != 0) {\r\n\r\n                if(plyrRnds_[_oID][_rID].team == 1)\r\n                    rndTmEth_[_rID][plyrRnds_[_oID][_rID].team].winRate -= 5;\r\n                else rndTmEth_[_rID][plyrRnds_[_oID][_rID].team].winRate -= 10;\r\n\r\n                plyrRnds_[_oID][_rID].redtPRProp = plyrRnds_[_oID][_rID].redtPRProp*120/100;\r\n\r\n                plyrRnds_[_oID][_rID].incrPRProp = plyrRnds_[_oID][_rID].incrPRProp*80/100;\r\n                //个人亏损减少率增加，永久效果\r\n                plyr_[_oID].redtProp = plyr_[_oID].redtProp*103/100;\r\n\r\n                plyrRnds_[_oID][_rID].hadProp = false;\r\n                plyrRnds_[_oID][_rID].propID = 0;\r\n            }\r\n\r\n            rndProp_[_rID][_propID].oID = _pID;\r\n            plyrRnds_[_pID][_rID].hadProp = true;\r\n            plyrRnds_[_pID][_rID].propID = _propID;\r\n            //update price\r\n            if (_oID == 0) {\r\n                rndProp_[_rID][_propID].price = 3 * 10**18;\r\n                _rstETH = 0;\r\n            }else{\r\n                _rstETH = rndProp_[_rID][_propID].price*150/100;\r\n                rndProp_[_rID][_propID].price = rndProp_[_rID][_propID].price*200/100;\r\n            }\r\n        }\r\n        else if (_propID == 2) {\r\n            require(_eth >= 1 * 10**18 && plyrRnds_[_pID][_rID].hadProp == false && _oID != _pID);\r\n            if(plyrRnds_[_pID][_rID].team == 1)\r\n                rndTmEth_[_rID][plyrRnds_[_pID][_rID].team].winRate += 2;\r\n            else rndTmEth_[_rID][plyrRnds_[_pID][_rID].team].winRate += 4;\r\n\r\n            if(plyrRnds_[_pID][_rID].redtPRProp == 0) plyrRnds_[_pID][_rID].redtPRProp = 90;\r\n            else    plyrRnds_[_pID][_rID].redtPRProp = plyrRnds_[_pID][_rID].redtPRProp*90/100;\r\n            //个人亏损减少率增加，永久效果\r\n            if(plyr_[_pID].redtProp == 0) plyr_[_pID].redtProp = 99;\r\n            else plyr_[_pID].redtProp = plyr_[_pID].redtProp*99/100;\r\n            //clean\r\n            if (_oID != 0) {\r\n\r\n                if(plyrRnds_[_oID][_rID].team == 1)\r\n                    rndTmEth_[_rID][plyrRnds_[_oID][_rID].team].winRate -= 2;\r\n                else rndTmEth_[_rID][plyrRnds_[_oID][_rID].team].winRate -= 4;\r\n\r\n                plyrRnds_[_oID][_rID].redtPRProp = plyrRnds_[_oID][_rID].redtPRProp*110/100;\r\n                //个人亏损减少率增加，永久效果\r\n                plyr_[_oID].redtProp = plyr_[_oID].redtProp*101/100;\r\n\r\n                plyrRnds_[_oID][_rID].hadProp = false;\r\n                plyrRnds_[_oID][_rID].propID = 0;\r\n            }\r\n\r\n            rndProp_[_rID][_propID].oID = _pID;\r\n            plyrRnds_[_pID][_rID].hadProp = true;\r\n            plyrRnds_[_pID][_rID].propID = _propID;\r\n            //update price\r\n            if (_oID == 0) {\r\n                rndProp_[_rID][_propID].price = 1 * 10**18;\r\n                _rstETH = 0;\r\n            }else{\r\n                _rstETH = rndProp_[_rID][_propID].price*200/100;\r\n                rndProp_[_rID][_propID].price = rndProp_[_rID][_propID].price*300/100;\r\n            }\r\n        }\r\n        else if (_propID == 3) {\r\n            require(_eth >= 1 * 10**18 && plyrRnds_[_pID][_rID].hadProp == false && _oID != _pID);\r\n            if(plyrRnds_[_pID][_rID].team == 1)\r\n                rndTmEth_[_rID][plyrRnds_[_pID][_rID].team].winRate += 2;\r\n            else rndTmEth_[_rID][plyrRnds_[_pID][_rID].team].winRate += 4;\r\n\r\n            if(plyrRnds_[_pID][_rID].incrPRProp == 0) plyrRnds_[_pID][_rID].incrPRProp = 110;\r\n            else    plyrRnds_[_pID][_rID].incrPRProp = plyrRnds_[_pID][_rID].incrPRProp*110/100;\r\n            //个人亏损减少率增加，永久效果\r\n            if(plyr_[_pID].redtProp == 0) plyr_[_pID].redtProp = 99;\r\n            else plyr_[_pID].redtProp = plyr_[_pID].redtProp*99/100;\r\n            //clean\r\n            if (_oID != 0) {\r\n\r\n                if(plyrRnds_[_oID][_rID].team == 1)\r\n                    rndTmEth_[_rID][plyrRnds_[_oID][_rID].team].winRate -= 2;\r\n                else rndTmEth_[_rID][plyrRnds_[_oID][_rID].team].winRate -= 4;\r\n\r\n                plyrRnds_[_oID][_rID].incrPRProp = plyrRnds_[_oID][_rID].incrPRProp*90/100;\r\n                //个人亏损减少率增加，永久效果\r\n                plyr_[_oID].redtProp = plyr_[_oID].redtProp*101/100;\r\n\r\n                plyrRnds_[_oID][_rID].hadProp = false;\r\n                plyrRnds_[_oID][_rID].propID = 0;\r\n            }\r\n\r\n            rndProp_[_rID][_propID].oID = _pID;\r\n            plyrRnds_[_pID][_rID].hadProp = true;\r\n            plyrRnds_[_pID][_rID].propID = _propID;\r\n            //update price\r\n            if (_oID == 0) {\r\n                rndProp_[_rID][_propID].price = 1 * 10**18;\r\n                _rstETH = 0;\r\n            }else{\r\n                _rstETH = rndProp_[_rID][_propID].price*200/100;\r\n                rndProp_[_rID][_propID].price = rndProp_[_rID][_propID].price*300/100;\r\n            }\r\n        }\r\n        else if (_propID == 4) {\r\n            require(_eth >= 5 * 10**17 && plyrRnds_[_pID][_rID].hadProp == false && _oID != _pID);\r\n            if(plyrRnds_[_pID][_rID].team == 1)\r\n                rndTmEth_[_rID][plyrRnds_[_pID][_rID].team].winRate += 1;\r\n            else rndTmEth_[_rID][plyrRnds_[_pID][_rID].team].winRate += 2;\r\n\r\n            if(plyrRnds_[_pID][_rID].redtPRProp == 0) plyrRnds_[_pID][_rID].redtPRProp = 90;\r\n            else    plyrRnds_[_pID][_rID].redtPRProp = plyrRnds_[_pID][_rID].redtPRProp*90/100;\r\n\r\n            //个人亏损减少率增加，永久效果\r\n            if(plyr_[_pID].redtProp == 0) plyr_[_pID].redtProp = 99;\r\n            else plyr_[_pID].redtProp = plyr_[_pID].redtProp*995/1000;\r\n            //clean\r\n            if (_oID != 0) {\r\n\r\n                if(plyrRnds_[_oID][_rID].team == 1)\r\n                    rndTmEth_[_rID][plyrRnds_[_oID][_rID].team].winRate -= 1;\r\n                else rndTmEth_[_rID][plyrRnds_[_oID][_rID].team].winRate -= 2;\r\n\r\n                plyrRnds_[_oID][_rID].redtPRProp = plyrRnds_[_oID][_rID].redtPRProp*110/100;\r\n                //个人亏损减少率增加，永久效果\r\n                plyr_[_oID].redtProp = plyr_[_oID].redtProp*1005/1000;\r\n\r\n                plyrRnds_[_oID][_rID].hadProp = false;\r\n                plyrRnds_[_oID][_rID].propID = 0;\r\n            }\r\n\r\n            rndProp_[_rID][_propID].oID = _pID;\r\n            plyrRnds_[_pID][_rID].hadProp = true;\r\n            plyrRnds_[_pID][_rID].propID = _propID;\r\n            //update price\r\n            if (_oID == 0) {\r\n                rndProp_[_rID][_propID].price = 5 * 10**17;\r\n                _rstETH = 0;\r\n            }else{\r\n                _rstETH = rndProp_[_rID][_propID].price*250/100;\r\n                rndProp_[_rID][_propID].price = rndProp_[_rID][_propID].price*400/100;\r\n            }\r\n        }\r\n        else if (_propID == 5) {\r\n            require(_eth >= 5 * 10**17 && plyrRnds_[_pID][_rID].hadProp == false && _oID != _pID);\r\n            if(plyrRnds_[_pID][_rID].team == 1)\r\n                rndTmEth_[_rID][plyrRnds_[_pID][_rID].team].winRate += 1;\r\n            else rndTmEth_[_rID][plyrRnds_[_pID][_rID].team].winRate += 2;\r\n\r\n            if(plyrRnds_[_pID][_rID].incrPRProp == 0) plyrRnds_[_pID][_rID].incrPRProp = 110;\r\n            else    plyrRnds_[_pID][_rID].incrPRProp = plyrRnds_[_pID][_rID].incrPRProp*110/100;\r\n            //个人亏损减少率增加，永久效果\r\n            if(plyr_[_pID].redtProp == 0) plyr_[_pID].redtProp = 99;\r\n            else plyr_[_pID].redtProp = plyr_[_pID].redtProp*995/1000;\r\n            //clean\r\n            if (_oID != 0) {\r\n\r\n                if(plyrRnds_[_oID][_rID].team == 1)\r\n                    rndTmEth_[_rID][plyrRnds_[_oID][_rID].team].winRate -= 1;\r\n                else rndTmEth_[_rID][plyrRnds_[_oID][_rID].team].winRate -= 2;\r\n\r\n                plyrRnds_[_oID][_rID].incrPRProp = plyrRnds_[_oID][_rID].incrPRProp*90/100;\r\n                //个人亏损减少率增加，永久效果\r\n                plyr_[_oID].redtProp = plyr_[_oID].redtProp*1005/1000;\r\n\r\n                plyrRnds_[_oID][_rID].hadProp = false;\r\n                plyrRnds_[_oID][_rID].propID = 0;\r\n            }\r\n\r\n            rndProp_[_rID][_propID].oID = _pID;\r\n            plyrRnds_[_pID][_rID].hadProp = true;\r\n            plyrRnds_[_pID][_rID].propID = _propID;\r\n            //update price\r\n            if (_oID == 0) {\r\n                rndProp_[_rID][_propID].price = 5 * 10**17;\r\n                _rstETH = 0;\r\n            }else{\r\n                _rstETH = rndProp_[_rID][_propID].price*250/100;\r\n                rndProp_[_rID][_propID].price = rndProp_[_rID][_propID].price*400/100;\r\n            }\r\n        }\r\n        //imit\r\n        if(plyrRnds_[_pID][_rID].redtPRProp < 80) plyrRnds_[_pID][_rID].redtPRProp = 80;\r\n        if(plyrRnds_[_pID][_rID].incrPRProp > 120) plyrRnds_[_pID][_rID].incrPRProp = 120;\r\n        //个人亏损减少率增加，永久效果\r\n        if(plyr_[_pID].redtProp < 90) plyr_[_pID].redtProp = 90;\r\n\r\n        if(plyrRnds_[_oID][_rID].redtPRProp < 80) plyrRnds_[_oID][_rID].redtPRProp = 80;\r\n        if(plyrRnds_[_oID][_rID].incrPRProp > 120) plyrRnds_[_oID][_rID].incrPRProp = 120;\r\n        //个人亏损减少率增加，永久效果\r\n        if(plyr_[_oID].redtProp < 90) plyr_[_oID].redtProp = 90;\r\n \r\n      }\r\n    //   emit F3Devents.onBuyProp\r\n    //             (\r\n    //                 msg.sender,\r\n    //                 plyr_[_pID].name,\r\n    //                 plyrRnds_[_pID][_rID].redtPRProp,\r\n    //                 plyrRnds_[_pID][_rID].incrPRProp,\r\n    //                 plyr_[_pID].redtProp,\r\n    //                 plyrRnds_[_pID][_rID].hadProp,\r\n    //                 plyrRnds_[_pID][_rID].propID,\r\n    //                 plyrRnds_[_oID][_rID].redtPRProp,\r\n    //                 plyrRnds_[_oID][_rID].incrPRProp,\r\n    //                 plyr_[_oID].redtProp,\r\n    //                 plyrRnds_[_oID][_rID].hadProp,\r\n    //                 plyrRnds_[_oID][_rID].propID,\r\n    //                 rndProp_[_rID][_propID].oID\r\n    //             );\r\n\r\n      return (_oID,_rstETH);\r\n    }\r\n\r\n    function buyLeader(uint256 _pID, uint256 _eth)\r\n    isActivated()\r\n    isHuman()\r\n    // isWithinLimits(msg.value)\r\n    public\r\n    // payable\r\n    returns(uint256,uint256)\r\n    {\r\n        uint256 _rID = rID_;\r\n        uint256 _oID = rndLd_[_rID].oID;\r\n        uint256 _rstETH = 0;\r\n\r\n        require(_eth >= 1 * 10**18 && _oID != _pID);\r\n        \r\n        if (_oID == 0) {\r\n            _rstETH = 0;\r\n            rndLd_[_rID].price = 1 * 10**18;\r\n        }\r\n        else{//clean\r\n            if(plyrRnds_[_oID][_rID].team == 1)\r\n                    rndTmEth_[_rID][plyrRnds_[_oID][_rID].team].winRate -= 4;\r\n            else    rndTmEth_[_rID][plyrRnds_[_oID][_rID].team].winRate -= 8;\r\n\r\n            _rstETH = rndLd_[_rID].price*110/100;\r\n            rndLd_[_rID].price = rndLd_[_rID].price*120/100;\r\n        }\r\n\r\n        if(plyrRnds_[_pID][_rID].team == 1)\r\n                    rndTmEth_[_rID][plyrRnds_[_pID][_rID].team].winRate += 4;\r\n        else        rndTmEth_[_rID][plyrRnds_[_pID][_rID].team].winRate += 8;\r\n            //set leader    \r\n        round_[_rID].plyr = _pID;\r\n        round_[_rID].team = plyrRnds_[_pID][_rID].team;\r\n        uint256 _team = plyrRnds_[_pID][_rID].team;\r\n\r\n        emit F3Devents.onBuyLeader\r\n        (\r\n            msg.sender,\r\n            rndLd_[_rID].price,\r\n            round_[_rID].plyr,\r\n            round_[_rID].team,\r\n            rndTmEth_[_rID][_team].winRate,\r\n            rndTmEth_[_rID][_team].winRate\r\n        );\r\n\r\n        return(_oID,_rstETH);\r\n    }\r\n   \r\n    function iWantXKeys(uint256 _keys)\r\n    public\r\n    // view\r\n    returns(uint256)\r\n    {\r\n        // // setup local rID\r\n        // uint256 _rID = rID_;\r\n\r\n        // // grab time\r\n        // uint256 _now = now;\r\n\r\n        // // are we in a round?\r\n        // if (_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n        //     return ( _keys.ethRec(getBuyPrice()) );\r\n        // else // rounds over.  need price for new round\r\n            return ( _keys.ethRec(getBuyPrice()) );\r\n    }\r\n    //==============================================================================\r\n    //    _|_ _  _ | _  .\r\n    //     | (_)(_)|_\\  .\r\n    // //==============================================================================\r\n    // \r\n    //  @dev receives name/player info from names contract\r\n    //  \r\n    function receivePlayerInfo(uint256 _pID, address _addr, bytes32 _name, uint256 _laff)\r\n    external\r\n    {\r\n        require (msg.sender == address(PlayerBook), \"your not playerNames contract... hmmm..\");\r\n        if (pIDxAddr_[_addr] != _pID)\r\n            pIDxAddr_[_addr] = _pID;\r\n        if (pIDxName_[_name] != _pID)\r\n            pIDxName_[_name] = _pID;\r\n        if (plyr_[_pID].addr != _addr)\r\n            plyr_[_pID].addr = _addr;\r\n        if (plyr_[_pID].name != _name)\r\n            plyr_[_pID].name = _name;\r\n        if (plyr_[_pID].laff != _laff)\r\n            plyr_[_pID].laff = _laff;\r\n        if (plyrNames_[_pID][_name] == false)\r\n            plyrNames_[_pID][_name] = true;\r\n    }\r\n\r\n    //  **\r\n    //  * @dev receives entire player name list\r\n    //  *\r\n    function receivePlayerNameList(uint256 _pID, bytes32 _name)\r\n    external\r\n    {\r\n        require (msg.sender == address(PlayerBook), \"your not playerNames contract... hmmm..\");\r\n        if(plyrNames_[_pID][_name] == false)\r\n            plyrNames_[_pID][_name] = true;\r\n    }\r\n\r\n    // **\r\n    //  * @dev gets existing or registers new pID.  use this when a player may be new\r\n    //  * @return pID\r\n    //  *\r\n    function determinePID()\r\n    private\r\n    {\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        // if player is new to this version of fomo3d\r\n        if (_pID == 0)\r\n        {\r\n            // grab their player ID, name and last aff ID, from player names contract\r\n            _pID = PlayerBook.getPlayerID(msg.sender);\r\n            bytes32 _name = PlayerBook.getPlayerName(_pID);\r\n            uint256 _laff = PlayerBook.getPlayerLAff(_pID);\r\n\r\n            // set up player account\r\n            pIDxAddr_[msg.sender] = _pID;\r\n            plyr_[_pID].addr = msg.sender;\r\n\r\n            if (_name != \"\")\r\n            {\r\n                pIDxName_[_name] = _pID;\r\n                plyr_[_pID].name = _name;\r\n                plyrNames_[_pID][_name] = true;\r\n            }\r\n\r\n            if (_laff != 0 && _laff != _pID)\r\n                plyr_[_pID].laff = _laff;\r\n\r\n            // set the new player bool to true\r\n            // _eventData_.compressedData = _eventData_.compressedData + 1;\r\n            plyNum_++;\r\n        }\r\n        // return (_eventData_);\r\n    }\r\n\r\n    //  **\r\n    //  * @dev checks to make sure user picked a valid team.  if not sets team\r\n    //  * to default (sneks)\r\n    //  *\r\n    function verifyTeam(uint256 _team)\r\n    private\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        if (_team < 1 || _team > 2)\r\n            return(1);\r\n        else\r\n            return(_team);\r\n    }\r\n\r\n    //  **\r\n    //  * @dev decides if round end needs to be run & new round started.  and if\r\n    //  * player unmasked earnings from previously played rounds need to be moved.\r\n    //  *\r\n    // function managePlayer(uint256 _pID, F3Ddatasets.EventReturns memory _eventData_)\r\n    // private\r\n    // returns (F3Ddatasets.EventReturns memory)\r\n    // {\r\n    //     // update player's last round played\r\n    //     plyr_[_pID].lrnd = rID_;\r\n\r\n    //     // set the joined round bool to true\r\n    //     _eventData_.compressedData = _eventData_.compressedData + 10;\r\n\r\n    //     return(_eventData_);\r\n    // }\r\n\r\n    //  **\r\n    //  * @dev ends the round. manages paying out winner/splitting up pot\r\n    //  *\r\n    \r\n    function endRound()\r\n    private\r\n    returns (uint256)\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n        // uint256 _rID = _rID_;\r\n\r\n        uint256 _ramNum = F3DKeysCalcLong.random();\r\n        uint256 _winTeam;\r\n        uint256 i;\r\n\r\n        for ( i = 1; i <= plyNum_; i++) {\r\n\r\n            if (plyrRnds_[i][_rID].incrPRProp > 0) {\r\n                plyrRnds_[i][_rID].cosd = plyrRnds_[i][_rID].cosd.mul(plyrRnds_[i][_rID].incrPRProp).div(100);\r\n                plyrRnds_[i][_rID].cosc = plyrRnds_[i][_rID].cosc.mul(plyrRnds_[i][_rID].incrPRProp).div(100);\r\n            }\r\n\r\n            if (plyrRnds_[i][_rID].cosd.add(plyrRnds_[i][_rID].cosc) > threshould_) {\r\n                plyr_[i].rounds++;\r\n                //update ret\r\n                if(plyr_[i].redt1 == 0) plyr_[i].redt1 = 99;\r\n                else plyr_[i].redt1 = plyr_[i].redt1 * 995 / 1000;\r\n\r\n                if (plyr_[i].rounds % 4 == 0) {\r\n                    if(plyr_[i].redt3 == 0) plyr_[i].redt3 = 90;\r\n                    else plyr_[i].redt3 = plyr_[i].redt3 * 90 / 100;\r\n                }\r\n                //limit\r\n                if(plyr_[i].redt1 < 90) plyr_[i].redt1 = 90;\r\n                if(plyr_[i].redt3 < 90) plyr_[i].redt3 = 90;\r\n            }\r\n\r\n            emit F3Devents.onEndRoundProssRate\r\n                (\r\n                    msg.sender,\r\n                    plyr_[i].name,\r\n                    plyrRnds_[i][_rID].cosd,\r\n                    plyrRnds_[i][_rID].cosc,\r\n                    plyr_[i].rounds,\r\n                    plyr_[i].redt1,\r\n                    plyr_[i].redt3\r\n                );\r\n\r\n        }\r\n\r\n\r\n        if ( _ramNum <= (rndTmEth_[_rID][1].winRate + 70) )\r\n            _winTeam = 1;\r\n    \r\n        else _winTeam = 2;\r\n        \r\n\r\n        prossWinOrLoss(_winTeam);\r\n\r\n        round_[_rID].winTeam = _winTeam;\r\n        // prepare event data\r\n        // _eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000);\r\n        // _eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000);\r\n\r\n        // start next round\r\n        rID_++;\r\n        _rID++;\r\n        round_[_rID].strt = now;\r\n        round_[_rID].end = now.add(rndInit_).add(rndGap_);\r\n        // update player's last round played\r\n        // plyr_[_pID].lrnd = rID_;\r\n\r\n        return (_winTeam);\r\n    }\r\n \r\n    function prossWinOrLoss(uint256 _winTeam)\r\n    private\r\n    returns(bool){\r\n        uint256 i;\r\n        uint256 _ttlCosd;\r\n        uint256 _ttlCosc;\r\n        uint256 _rID = rID_;\r\n        uint256 _lossCosd;\r\n        uint256 _lossCosc;\r\n\r\n        uint256    _potCosd = rndTmEth_[_rID][1].cosd.add(rndTmEth_[_rID][2].cosd);\r\n        uint256    _potCosc = rndTmEth_[_rID][1].cosc.add(rndTmEth_[_rID][2].cosc);\r\n        //com\r\n\r\n            plyr_[pIDCom_].cosd = plyr_[pIDCom_].cosd.add(_potCosd * 3 / 100);\r\n            plyr_[pIDCom_].cosc = plyr_[pIDCom_].cosc.add(_potCosc * 3 / 100);\r\n\r\n            _potCosd = _potCosd.sub(_potCosd * 97 / 100);\r\n            _potCosc = _potCosc.sub(_potCosd * 97 / 100);\r\n\r\n            for ( i = 1; i <= plyNum_; i++) {\r\n                if (i != 0 && plyrRnds_[i][_rID].team == _winTeam) {//赢的队伍\r\n                    _ttlCosd = _ttlCosd.add(plyrRnds_[i][_rID].cosd);\r\n                    _ttlCosc = _ttlCosc.add(plyrRnds_[i][_rID].cosc);\r\n                }\r\n            }\r\n\r\n            for ( i=1 ; i <= plyNum_; i++) {\r\n                if (i != 0 && plyrRnds_[i][_rID].team != _winTeam) {//输的\r\n                    _lossCosd = plyrRnds_[i][_rID].cosd;\r\n                    _lossCosc = plyrRnds_[i][_rID].cosc;\r\n\r\n                    if (plyrRnds_[i][_rID].redtPRProp > 0) {\r\n                        _lossCosd = _lossCosd*plyrRnds_[i][_rID].redtPRProp/100;\r\n                        _lossCosc = _lossCosc*plyrRnds_[i][_rID].redtPRProp/100;\r\n                    }\r\n                    if (plyr_[i].redt1 > 0) {\r\n                        _lossCosd = _lossCosd*plyr_[i].redt1/100;\r\n                        _lossCosc = _lossCosc*plyr_[i].redt1/100;\r\n                    }\r\n                    if (plyr_[i].redt3 > 0) {\r\n                        _lossCosd = _lossCosd*plyr_[i].redt3/100;\r\n                        _lossCosc = _lossCosc*plyr_[i].redt3/100;\r\n                    }\r\n                    if (plyrRnds_[i][_rID].redtPRFirst > 0) {\r\n                        _lossCosd = _lossCosd.add(plyrRnds_[i][_rID].firstCosd * plyrRnds_[i][_rID].redtPRFirst / 100);\r\n                        _lossCosc = _lossCosc.add(plyrRnds_[i][_rID].firstCosc * plyrRnds_[i][_rID].redtPRFirst / 100);\r\n                    }\r\n                    plyrRnds_[i][_rID].wonCosd = plyrRnds_[i][_rID].cosd.sub(_lossCosd);\r\n                    plyrRnds_[i][_rID].wonCosc = plyrRnds_[i][_rID].cosc.sub(_lossCosc);\r\n\r\n                    _potCosd = _potCosd - plyrRnds_[i][_rID].wonCosd;\r\n                    _potCosc = _potCosc - plyrRnds_[i][_rID].wonCosc;\r\n\r\n                    plyr_[i].lrnd = _rID;\r\n\r\n                    emit F3Devents.onLoss\r\n                    (\r\n                        msg.sender,\r\n                        plyr_[i].name,\r\n                        plyrRnds_[i][_rID].wonCosd,\r\n                        plyrRnds_[i][_rID].wonCosc,\r\n                        plyr_[i].lrnd\r\n                    );\r\n                }\r\n            }\r\n\r\n            for ( i=1 ; i <= plyNum_; i++) {\r\n                if (plyrRnds_[i][_rID].team == _winTeam) {//赢的队伍\r\n                    plyrRnds_[i][_rID].wonCosd = plyrRnds_[i][_rID].wonCosd.add(_potCosd.mul(plyrRnds_[i][_rID].cosd).div(_ttlCosd));\r\n                    plyrRnds_[i][_rID].wonCosc = plyrRnds_[i][_rID].wonCosc.add(_potCosc.mul(plyrRnds_[i][_rID].cosc).div(_ttlCosc));\r\n                    plyr_[i].lrnd = _rID;\r\n\r\n                    emit F3Devents.onWin\r\n                    (\r\n                        msg.sender,\r\n                        plyr_[i].name,\r\n                        plyrRnds_[i][_rID].wonCosd,\r\n                        plyrRnds_[i][_rID].wonCosc,\r\n                        plyr_[i].lrnd\r\n                    );\r\n                }\r\n            }\r\n\r\n            return true;\r\n    }\r\n\r\n    function withdrawHoldVault(uint256 _pID)\r\n    public\r\n    returns(bool){\r\n        if (plyr_[_pID].hldVltCosd>0) {\r\n            plyr_[_pID].cosd = plyr_[_pID].cosd.add(plyr_[_pID].hldVltCosd);\r\n            plyr_[_pID].hldVltCosd = 0;\r\n        }\r\n\r\n        emit F3Devents.onWithdrawHoldVault\r\n                    (\r\n                        _pID,\r\n                        msg.sender,\r\n                        plyr_[_pID].name,\r\n                        plyr_[_pID].cosd,\r\n                        plyr_[_pID].hldVltCosd\r\n                    );\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawAffVault(uint256 _pID)\r\n    public\r\n    returns(bool){\r\n        if (plyr_[_pID].affVltCosd>0) {\r\n            plyr_[_pID].cosd = plyr_[_pID].cosd.add(plyr_[_pID].affVltCosd);\r\n            plyr_[_pID].affVltCosd = 0;\r\n        }\r\n        if (plyr_[_pID].affVltCosc>0) {\r\n            plyr_[_pID].cosc = plyr_[_pID].cosc.add(plyr_[_pID].affVltCosc);\r\n            plyr_[_pID].affVltCosc = 0;\r\n        }\r\n\r\n                emit F3Devents.onWithdrawAffVault\r\n                    (\r\n                        _pID,\r\n                        msg.sender,\r\n                        plyr_[_pID].name,\r\n                        plyr_[_pID].cosd,\r\n                        plyr_[_pID].cosc,\r\n                        plyr_[_pID].affVltCosd,\r\n                        plyr_[_pID].affVltCosc\r\n                    );\r\n\r\n        return true;\r\n    }\r\n\r\n    function withdrawWonCosFromGame(uint256 _pID, uint256 _affID, uint256 _rID)//一轮只能提取一次\r\n    public\r\n    returns(bool){\r\n        // uint256 _rID = rID_;\r\n        uint256 _aff;\r\n        uint256 _holders;\r\n        uint256 _self;\r\n    \r\n        if (plyrRnds_[_pID][_rID].wonCosd > 0) {\r\n\r\n                uint256 _hldCosd;\r\n                for (uint256 i = 1; i <= plyNum_; i++) {\r\n                    if(i!=_pID && plyr_[i].cosd>0) _hldCosd = _hldCosd.add(plyr_[i].cosd);\r\n                }\r\n\r\n                _holders = plyrRnds_[_pID][_rID].wonCosd * 5/100;\r\n                _aff =     plyrRnds_[_pID][_rID].wonCosd * 1/100;\r\n                _self = plyrRnds_[_pID][_rID].wonCosd.sub(_holders).sub(_aff);\r\n\r\n                plyr_[_pID].cosd = plyr_[_pID].cosd.add(_self);\r\n                plyr_[_affID].affVltCosd = plyr_[_affID].affVltCosd.add(_aff);\r\n\r\n                for (uint256 j = 1; j <= plyNum_; j++) {\r\n                    if(j!=_pID && plyr_[j].cosd>0) plyr_[j].hldVltCosd = plyr_[j].hldVltCosd.add(_holders.mul(plyr_[j].cosd).div(_hldCosd));\r\n                }\r\n\r\n                plyrRnds_[_pID][_rID].wonCosdRcd = plyrRnds_[_pID][_rID].wonCosd;\r\n                plyrRnds_[_pID][_rID].wonCosd = 0;\r\n        }\r\n\r\n        if (plyrRnds_[_pID][_rID].wonCosc > 0) {\r\n            plyr_[_pID].cosc = plyr_[_pID].cosc.add(plyrRnds_[_pID][_rID].wonCosc);\r\n\r\n            plyrRnds_[_pID][_rID].wonCoscRcd = plyrRnds_[_pID][_rID].wonCosc;\r\n            plyrRnds_[_pID][_rID].wonCosc = 0;\r\n        }\r\n\r\n        // emit F3Devents.onWithdrawWonCosFromGame\r\n        //             (\r\n        //                 _pID,\r\n        //                 msg.sender,\r\n        //                 plyr_[i].name,\r\n        //                 plyr_[_pID].cosd,\r\n        //                 plyr_[_pID].cosc,\r\n        //                 plyr_[_pID].affVltCosd\r\n        //             );\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferToAnotherAddr(address _to, uint256 _keys, bytes32 _keyType)\r\n    public\r\n    returns(bool){\r\n        // uint256 _rID = rID_;\r\n        uint256 _holders;\r\n        uint256 _self;\r\n        uint256 i;\r\n\r\n        determinePID();\r\n        // fetch player id\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        uint256 _tID = pIDxAddr_[_to];\r\n\r\n        require(_tID > 0);\r\n    \r\n        if (_keyType == \"cosd\") {\r\n\r\n                require(plyr_[_pID].cosd >= _keys);\r\n\r\n                uint256 _hldCosd;\r\n                for ( i = 1; i <= plyNum_; i++) {\r\n                    if(i!=_pID && plyr_[i].cosd>0) _hldCosd = _hldCosd.add(plyr_[i].cosd);\r\n                }\r\n\r\n                _holders = _keys * 20/100;\r\n                // _aff =     plyrRnds_[_pID][_rID].wonCosd * 1/100;\r\n                _self = plyr_[_pID].cosd.sub(_holders);\r\n\r\n                plyr_[_tID].cosd = plyr_[_tID].cosd.add(_self);\r\n                plyr_[_pID].cosd = plyr_[_pID].cosd.sub(_self);\r\n\r\n                for ( i = 1; i <= plyNum_; i++) {\r\n                    if(i!=_pID && plyr_[i].cosd>0) plyr_[i].hldVltCosd = plyr_[i].hldVltCosd.add(_holders.mul(plyr_[i].cosd).div(_hldCosd));\r\n                }\r\n        }\r\n\r\n        else{\r\n            require(plyr_[_pID].cosc >= _keys);\r\n\r\n            plyr_[_tID].cosc = plyr_[_tID].cosc.add(_keys);\r\n            plyr_[_pID].cosc = plyr_[_pID].cosc.sub(_keys);\r\n        }\r\n\r\n        // emit F3Devents.onWithdrawWonCosFromGame\r\n        //             (\r\n        //                 _pID,\r\n        //                 msg.sender,\r\n        //                 plyr_[i].name,\r\n        //                 plyr_[_pID].cosd,\r\n        //                 plyr_[_pID].cosc,\r\n        //                 plyr_[_pID].affVltCosd\r\n        //             );\r\n\r\n        return true;\r\n    }\r\n    \r\n    //==============================================================================\r\n    //    (~ _  _    _._|_    .\r\n    //    _)(/_(_|_|| | | \\/  .\r\n    //====================/=========================================================\r\n    // ** upon contract deploy, it will be deactivated.  this is a one time\r\n    //  * use function that will activate the contract.  we do this so devs\r\n    //  * have time to set things up on the web end                            **\r\n    bool public activated_ = false;\r\n    function activate()\r\n    public onlyOwner {\r\n        // make sure that its been linked.\r\n        //        require(address(otherF3D_) != address(0), \"must link to other FoMo3D first\");\r\n\r\n        // can only be ran once\r\n        require(activated_ == false, \"fomo3d already activated\");\r\n\r\n        // activate the contract\r\n        activated_ = true;\r\n\r\n        // lets start first round\r\n        rID_ = 1;\r\n        round_[1].strt = now;\r\n        round_[1].end = now + rndInit_;\r\n    }\r\n}\r\n\r\nlibrary F3Ddatasets {\r\n    //compressedData key\r\n    // [76-33][32][31][30][29][28-18][17][16-6][5-3][2][1][0]\r\n    // 0 - new player (bool)\r\n    // 1 - joined round (bool)\r\n    // 2 - new  leader (bool)\r\n    // 3-5 - air drop tracker (uint 0-999)\r\n    // 6-16 - round end time\r\n    // 17 - winnerTeam\r\n    // 18 - 28 timestamp\r\n    // 29 - team\r\n    // 30 - 0 = reinvest (round), 1 = buy (round), 2 = buy (ico), 3 = reinvest (ico)\r\n    // 31 - airdrop happened bool\r\n    // 32 - airdrop tier\r\n    // 33 - airdrop amount won\r\n    //compressedIDs key\r\n    // [77-52][51-26][25-0]\r\n    // 0-25 - pID\r\n    // 26-51 - winPID\r\n    // 52-77 - rID\r\n    // struct EventReturns {\r\n    //     uint256 compressedData;\r\n    //     uint256 compressedIDs;\r\n    //     address winnerAddr;         // winner address\r\n    //     bytes32 winnerName;         // winner name\r\n    //     uint256 amountWonCosd;          // amount won\r\n    //     uint256 amountWonCosc;          // amount won\r\n    // }\r\n    struct Player {\r\n        address addr;   // player address\r\n        bytes32 name;   // player name\r\n        uint256 cosd;    // winnings vault\r\n        uint256 cosc;    // winnings vault\r\n        uint256 lrnd;   // last round played\r\n        uint256 laff;   // last affiliate id used\r\n        uint256 rounds; //超过xxxcosd的轮数累计\r\n        uint256 redtProp; //买道具赠送的累计亏损减少率\r\n        uint256 redt1;\r\n        uint256 redt3;\r\n        uint256 affVltCosd;\r\n        uint256 affVltCosc;\r\n        uint256 hldVltCosd;\r\n    }\r\n    struct PlayerRounds {\r\n        uint256 cosd;   // keys\r\n        uint256 cosc;   // keys\r\n        bool hadProp;\r\n        uint256 propID;\r\n        uint256 redtPRProp; //lossReductionRate，玩家当前回合道具总亏损减少率\r\n        uint256 incrPRProp; //Income increase rate收入增加率\r\n        uint256 team;\r\n        bool first;\r\n        uint256 firstCosd;//第一阶段投入的COS资金，可减少20% 亏损率\r\n        uint256 firstCosc;//第一阶段投入的COS资金，可减少20% 亏损率\r\n        uint256 redtPRFirst;\r\n        uint256 wonCosd;\r\n        uint256 wonCosc;\r\n        uint256 wonCosdRcd;\r\n        uint256 wonCoscRcd;\r\n    }\r\n    struct Round {\r\n        uint256 plyr;   // pID of player in lead\r\n        uint256 team;   // tID of team in lead\r\n        uint256 end;    // time ends/ended\r\n        bool ended;     // has round end function been ran\r\n        uint256 strt;   // time round started\r\n        uint256 cosd;   // keys\r\n        uint256 cosc;   // keys\r\n        uint256 winTeam;\r\n    }     \r\n    struct Team {\r\n        uint256 teamID;        \r\n        uint256 winRate;    // 胜率\r\n        uint256 eth;\r\n        uint256 cosd;\r\n        uint256 cosc;\r\n    }\r\n    struct Prop {           //道具\r\n        uint256 propID;         \r\n        uint256 price;\r\n        uint256 oID;\r\n    }\r\n    struct Leader {           //道具       \r\n        uint256 price;\r\n        uint256 oID;\r\n    }\r\n    struct Fee {\r\n        uint256 aff;          // % of buy in thats paid to referrer  of current round推荐人分配比例\r\n        uint256 com;    // % of buy in thats paid for comnunity\r\n        uint256 holders; //key holders\r\n    }\r\n}\r\n\r\nlibrary F3DKeysCalcLong {\r\n    using SafeMath for *;\r\n\r\n    function keysRec(uint256 _newEth, uint256 _price)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        return( keys(_newEth, _price) );\r\n    }\r\n\r\n    function ethRec(uint256 _sellKeys, uint256 _price)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        return ( eth(_sellKeys, _price) );\r\n    }\r\n\r\n    function keys(uint256 _eth, uint256 _price)\r\n    internal\r\n    pure\r\n    returns(uint256)\r\n    {\r\n        uint256 _rstAmount;\r\n        // require(_price >= 10**16);\r\n        // require(_eth >= msg.value);\r\n\r\n        while(_eth >= _price){\r\n            _eth = _eth - _price;\r\n            _price = _price + _price*3/10000;\r\n            _rstAmount++;\r\n        }\r\n\r\n        return _rstAmount;\r\n    }\r\n\r\n    function eth(uint256 _keys, uint256 _price)\r\n    internal\r\n    pure\r\n    returns(uint256)\r\n    {\r\n        uint256 _eth = 0;\r\n        // require(_price >= 10**16);\r\n        // require(_eth >= msg.value);\r\n\r\n        while(_keys > 0){\r\n            _eth = _eth + _price;\r\n            _price = _price - _price*3/10000;\r\n            _keys--;\r\n        }\r\n\r\n        return _eth;\r\n    }\r\n\r\n    function random() internal pure returns (uint256) {\r\n       uint ranNum = uint(keccak256(msg.data)) % 100;\r\n       return ranNum;\r\n   }\r\n}\r\n\r\ncontract FoMo3DProxy {\r\n    //    otherFoMo3D private otherF3D_;\r\n    FoMo3DLongInterface  private foMo3DLong = FoMo3DLongInterface(this);\r\n\r\n     //==============================================================================\r\n    //     _ _  _  |`. _     _ _ |_ | _  _  .\r\n    //    (_(_)| |~|~|(_||_|| (_||_)|(/__\\  .  (game settings)\r\n    //=================_|===========================================================\r\n    string constant public name = \"FoMo3D Proxy\";\r\n    string constant public symbol = \"F3DP\";\r\n\r\n    constructor()\r\n    public\r\n    {\r\n\r\n    }\r\n\r\n    function _buyXid(uint256 _affCode, uint256 _eth, bytes32 _keyType) public returns(uint256){\r\n        return foMo3DLong.buyXid(_affCode, _eth, _keyType);\r\n    }\r\n    function _buyXaddr(address _affCode, uint256 _eth, bytes32 _keyType) public returns(uint256){\r\n        return foMo3DLong.buyXaddr(_affCode,  _eth, _keyType);\r\n    }\r\n    // function _buyXname(bytes32 _affCode, uint256 _eth, bytes32 _keyType) public returns(uint256){\r\n    //     return FoMo3DLong.buyXname(_affCode,  _eth, _keyType);\r\n    // }\r\n\r\n\r\n    function _registerNameXid(string memory _nameString, uint256 _affCode, bool _all) public{\r\n        foMo3DLong.registerNameXid(_nameString, _affCode, _all);\r\n    }\r\n    function _registerNameXaddr(string memory _nameString, address _affCode, bool _all) public{\r\n        foMo3DLong.registerNameXaddr(_nameString, _affCode, _all);\r\n    }\r\n    // function _registerNameXname(string memory _nameString, bytes32 _affCode, bool _all) public{\r\n    //     FoMo3DLong.registerNameXname(_nameString, _affCode, _all);\r\n    // }\r\n\r\n    \r\n    function _getBuyPrice() public returns(uint256){\r\n        return foMo3DLong.getBuyPrice();\r\n    }\r\n    function _getTimeLeft() public returns(uint256){\r\n        return foMo3DLong.getTimeLeft();\r\n    }\r\n\r\n    function _getCurrentRoundInfo() public returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256){\r\n        return foMo3DLong.getCurrentRoundInfo();\r\n    }\r\n    function _getPlayerInfoByAddress(address _addr) public returns(uint256, bytes32, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256){\r\n        return foMo3DLong.getPlayerInfoByAddress(_addr);\r\n    }\r\n    function _getCurrentRoundTeamCos() public view returns(uint256,uint256,uint256,uint256){\r\n        return foMo3DLong.getCurrentRoundTeamCos();\r\n    }\r\n    \r\n    function _sellKeys(uint256 _pID_, uint256 _keys_, bytes32 _keyType) public returns(uint256){\r\n        return foMo3DLong.sellKeys(_pID_, _keys_, _keyType);\r\n    }\r\n    function _playGame(uint256 _pID, uint256 _keys, uint256 _team, bytes32 _keyType) public returns(bool,bool){\r\n        return foMo3DLong.playGame(_pID, _keys, _team, _keyType);\r\n    }\r\n\r\n    function _buyProp(uint256 _pID, uint256 _eth, uint256 _propID) public returns(uint256,uint256){\r\n        return foMo3DLong.buyProp(_pID, _eth,_propID);\r\n    }\r\n    function _buyLeader(uint256 _pID, uint256 _eth) public returns(uint256,uint256){\r\n        return foMo3DLong.buyLeader(_pID, _eth);\r\n    }\r\n    function _iWantXKeys(uint256 _keys) public returns(uint256){\r\n        return foMo3DLong.iWantXKeys(_keys);\r\n    }\r\n    \r\n    function _withdrawHoldVault(uint256 _pID) public returns(bool){\r\n        return foMo3DLong.withdrawHoldVault(_pID);\r\n    }\r\n    function _withdrawAffVault(uint256 _pID) public returns(bool){\r\n        return foMo3DLong.withdrawAffVault(_pID);\r\n    }\r\n\r\n    function _withdrawWonCosFromGame(uint256 _pID, uint256 _affID, uint256 _rID) public returns(bool){\r\n        return foMo3DLong.withdrawWonCosFromGame(_pID, _affID, _rID);\r\n    }\r\n\r\n    function _transferToAnotherAddr(address _to, uint256 _keys, bytes32 _keyType) public returns(bool){\r\n        return foMo3DLong.transferToAnotherAddr(_to, _keys, _keyType);\r\n    }\r\n\r\n    function _activate() public{\r\n        foMo3DLong.activate();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_getCurrentRoundTeamCos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"_registerNameXaddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"_buyLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_keys\",\"type\":\"uint256\"}],\"name\":\"_iWantXKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_affID\",\"type\":\"uint256\"},{\"name\":\"_rID\",\"type\":\"uint256\"}],\"name\":\"_withdrawWonCosFromGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_getCurrentRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"_withdrawHoldVault\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_keyType\",\"type\":\"bytes32\"}],\"name\":\"_buyXaddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_keys\",\"type\":\"uint256\"},{\"name\":\"_keyType\",\"type\":\"bytes32\"}],\"name\":\"_transferToAnotherAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_keys\",\"type\":\"uint256\"},{\"name\":\"_team\",\"type\":\"uint256\"},{\"name\":\"_keyType\",\"type\":\"bytes32\"}],\"name\":\"_playGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_getTimeLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_propID\",\"type\":\"uint256\"}],\"name\":\"_buyProp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"_withdrawAffVault\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_keyType\",\"type\":\"bytes32\"}],\"name\":\"_buyXid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"_registerNameXid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"_getPlayerInfoByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID_\",\"type\":\"uint256\"},{\"name\":\"_keys_\",\"type\":\"uint256\"},{\"name\":\"_keyType\",\"type\":\"bytes32\"}],\"name\":\"_sellKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_getBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"FoMo3DProxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://75a6be2ae92e8a9c9fcc977b1f0ca18aa36d01957ae7ab314be423b7023f2c29"}]}