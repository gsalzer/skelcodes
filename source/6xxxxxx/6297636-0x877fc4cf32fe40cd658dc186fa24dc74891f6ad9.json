{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.4;\r\n \r\n\r\n/*    \r\n* Author:  Konstantin G...\r\n* Telegram: @bunnygame\r\n* \r\n* email: info@bunnycoin.co\r\n* site : http://bunnycoin.co\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\n\r\ncontract Ownable {\r\n    \r\n    address owner;\r\n    address ownerMoney;   \r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        ownerMoney = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n \r\n\r\n    function transferMoney(address _add) public  onlyOwner {\r\n        if (_add != address(0)) {\r\n            ownerMoney = _add;\r\n        }\r\n    }\r\n    \r\n \r\n    function transferOwner(address _add) public onlyOwner {\r\n        if (_add != address(0)) {\r\n            owner = _add;\r\n        }\r\n    } \r\n      \r\n    function getOwnerMoney() public view onlyOwner returns(address) {\r\n        return ownerMoney;\r\n    } \r\n \r\n}\r\n\r\n \r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * @dev This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) public whitelist;\r\n\r\n    event WhitelistedAddressAdded(address addr);\r\n    event WhitelistedAddressRemoved(address addr);\r\n \r\n  /**\r\n   * @dev Throws if called by any account that's not whitelisted.\r\n   */\r\n    modifier onlyWhitelisted() {\r\n        require(whitelist[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        addAddressToWhitelist(msg.sender);   \r\n    }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param addr address\r\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n   */\r\n    function addAddressToWhitelist(address addr) public onlyOwner returns(bool success) {\r\n        if (!whitelist[addr]) {\r\n            whitelist[addr] = true;\r\n            emit WhitelistedAddressAdded(addr);\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    function getInWhitelist(address addr) public view returns(bool) {\r\n        return whitelist[addr];\r\n    }\r\n\r\n    /**\r\n    * @dev add addresses to the whitelist\r\n    * @param addrs addresses\r\n    * @return true if at least one address was added to the whitelist,\r\n    * false if all addresses were already in the whitelist\r\n    */\r\n    function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            if (addAddressToWhitelist(addrs[i])) {\r\n                success = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev remove an address from the whitelist\r\n    * @param addr address\r\n    * @return true if the address was removed from the whitelist,\r\n    * false if the address wasn't in the whitelist in the first place\r\n    */\r\n    function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\r\n        if (whitelist[addr]) {\r\n            whitelist[addr] = false;\r\n            emit WhitelistedAddressRemoved(addr);\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev remove addresses from the whitelist\r\n    * @param addrs addresses\r\n    * @return true if at least one address was removed from the whitelist,\r\n    * false if all addresses weren't in the whitelist in the first place\r\n    */\r\n    function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            if (removeAddressFromWhitelist(addrs[i])) {\r\n                success = true;\r\n            }\r\n        }\r\n    }\r\n} \r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n  \r\n}\r\n \r\n/// @title Interface new rabbits address\r\ncontract PublicInterface { \r\n    function transferFrom(address _from, address _to, uint32 _tokenId) public returns (bool);\r\n    function ownerOf(uint32 _tokenId) public view returns (address owner);\r\n    function isUIntPublic() public view returns(bool);// check pause\r\n    function getRabbitMother( uint32 mother) public view returns(uint32[5]);\r\n    function getRabbitMotherSumm(uint32 mother) public view returns(uint count);\r\n}\r\n\r\ncontract Market  is Whitelist { \r\n           \r\n    using SafeMath for uint256;\r\n    \r\n    event StopMarket(uint32 bunnyId);\r\n    event StartMarket(uint32 bunnyId, uint money, uint timeStart, uint stepTimeSale);\r\n    event BunnyBuy(uint32 bunnyId, uint money);  \r\n    event Tournament(address who, uint bank, uint timeLeft, uint timeRange);\r\n    event AddBank(uint bankMoney, uint countInvestor, address lastOwner, uint addTime, uint stepTime);\r\n\r\n    event MotherMoney(uint32 motherId, uint32 bunnyId, uint money);\r\n     \r\n\r\n\r\n    bool public pause = false; \r\n    \r\n    uint stepTimeBank = 50*60; \r\n    uint stepTimeSale = (stepTimeBank/10)+stepTimeBank;\r\n\r\n  //  uint stepTimeBank = 1; \r\n  //  uint stepTimeSale = (stepTimeBank/10)+stepTimeBank;\r\n\r\n\r\n    uint minPrice = 0.001 ether;\r\n    uint reallyPrice = 0.001 ether;\r\n    uint rangePrice = 2;\r\n\r\n    uint minTimeBank = 300;\r\n    uint coefficientTimeStep = 5;\r\n \r\n    uint public commission = 5;\r\n    uint public commission_mom = 5;\r\n    uint public percentBank = 10;\r\n\r\n    // how many times have the bank been increased\r\n \r\n    uint added_to_the_bank = 0;\r\n\r\n    uint marketCount = 0; \r\n    uint numberOfWins = 0;  \r\n    uint getMoneyCount = 0;\r\n\r\n    string public advertising = \"Your advertisement here!\";\r\n\r\n     uint sec = 1;\r\n    // how many last sales to take into account in the contract before the formation of the price\r\n  //  uint8 middlelast = 20;\r\n     \r\n     \r\n \r\n    // the last cost of a sold seal\r\n    uint lastmoney = 0;   \r\n    uint totalClosedBID = 0;\r\n\r\n    // how many a bunny\r\n    mapping (uint32 => uint) public bunnyCost;\r\n    mapping (uint32 => uint) public timeCost;\r\n\r\n    \r\n    address public lastOwner;\r\n    uint bankMoney;\r\n    uint lastSaleTime;\r\n\r\n    address public pubAddress;\r\n    PublicInterface publicContract; \r\n\r\n\r\n    /**\r\n    * For convenience in the client interface\r\n     */\r\n    function getProperty() public view \r\n    returns(\r\n            uint tmp_stepTimeBank,\r\n            uint tmp_stepTimeSale,\r\n            uint tmp_minPrice,\r\n            uint tmp_reallyPrice,\r\n          //  uint tmp_rangePrice,\r\n          //  uint tmp_commission,\r\n          //  uint tmp_percentBank,\r\n            uint tmp_added_to_the_bank,\r\n            uint tmp_marketCount, \r\n            uint tmp_numberOfWins,\r\n            uint tmp_getMoneyCount,\r\n            uint tmp_lastmoney,   \r\n            uint tmp_totalClosedBID,\r\n            uint tmp_bankMoney,\r\n            uint tmp_lastSaleTime\r\n            )\r\n            {\r\n                tmp_stepTimeBank = stepTimeBank;\r\n                tmp_stepTimeSale = stepTimeSale;\r\n                tmp_minPrice = minPrice;\r\n                tmp_reallyPrice = reallyPrice;\r\n              //  tmp_rangePrice = rangePrice;\r\n             //   tmp_commission = commission;\r\n             //   tmp_percentBank = percentBank;\r\n                tmp_added_to_the_bank = added_to_the_bank;\r\n                tmp_marketCount = marketCount; \r\n                tmp_numberOfWins = numberOfWins;\r\n                tmp_getMoneyCount = getMoneyCount;\r\n\r\n                tmp_lastmoney = lastmoney;   \r\n                tmp_totalClosedBID = totalClosedBID;\r\n                tmp_bankMoney = bankMoney;\r\n                tmp_lastSaleTime = lastSaleTime;\r\n    }\r\n\r\n\r\n    constructor() public { \r\n        transferContract(0x434f0DCF2fE5Cb51d888850e7C77C4551725F2Ff);\r\n    }\r\n\r\n    function setRangePrice(uint _rangePrice) public onlyWhitelisted {\r\n        require(_rangePrice > 0);\r\n        rangePrice = _rangePrice;\r\n    }\r\n    // minimum time step\r\n    function setMinTimeBank(uint _minTimeBank) public onlyWhitelisted {\r\n        require(_minTimeBank > 0);\r\n        minTimeBank = _minTimeBank;\r\n    }\r\n\r\n    // time increment change rate\r\n    function setCoefficientTimeStep(uint _coefficientTimeStep) public onlyWhitelisted {\r\n        require(_coefficientTimeStep > 0);\r\n        coefficientTimeStep = _coefficientTimeStep;\r\n    }\r\n\r\n \r\n\r\n    function setPercentCommission(uint _commission) public onlyWhitelisted {\r\n        require(_commission > 0);\r\n        commission = _commission;\r\n    }\r\n\r\n    function setPercentBank(uint _percentBank) public onlyWhitelisted {\r\n        require(_percentBank > 0);\r\n        percentBank = _percentBank; \r\n    }\r\n    /**\r\n    * @dev change min price a bunny\r\n     */\r\n    function setMinPrice(uint _minPrice) public onlyWhitelisted {\r\n        require(_minPrice > (10**15));\r\n        minPrice = _minPrice;\r\n        \r\n    }\r\n\r\n    function setStepTime(uint _stepTimeBank) public onlyWhitelisted {\r\n        require(_stepTimeBank > 0);\r\n        stepTimeBank = _stepTimeBank;\r\n        stepTimeSale = _stepTimeBank+1;\r\n    }\r\n \r\n \r\n \r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _pubAddress  public address of the main contract\r\n    */\r\n    function transferContract(address _pubAddress) public onlyWhitelisted {\r\n        require(_pubAddress != address(0)); \r\n        pubAddress = _pubAddress;\r\n        publicContract = PublicInterface(_pubAddress);\r\n    } \r\n \r\n    function setPause() public onlyWhitelisted {\r\n        pause = !pause;\r\n    }\r\n\r\n    function isPauseSave() public  view returns(bool){\r\n        return !pause;\r\n    }\r\n\r\n    /**\r\n    * @dev get rabbit price\r\n    */\r\n    function currentPrice(uint32 _bunnyid) public view returns(uint) { \r\n        uint money = bunnyCost[_bunnyid];\r\n        if (money > 0) {\r\n            //commission_mom\r\n            uint percOne = money.div(100);\r\n            // commision\r\n            \r\n            uint commissionMoney = percOne.mul(commission);\r\n            money = money.add(commissionMoney); \r\n\r\n            uint commissionMom = percOne.mul(commission_mom);\r\n            money = money.add(commissionMom); \r\n\r\n            uint percBank = percOne.mul(percentBank);\r\n            money = money.add(percBank); \r\n\r\n            return money;\r\n        }\r\n    } \r\n\r\n    /**\r\n    * @dev We are selling rabbit for sale\r\n    * @param _bunnyId - whose rabbit we exhibit \r\n    * @param _money - sale amount \r\n    */\r\n  function startMarket(uint32 _bunnyId, uint _money) public returns (uint) {\r\n        require(checkContract());\r\n        require(isPauseSave());\r\n        require(_money >= reallyPrice);\r\n        require(publicContract.ownerOf(_bunnyId) == msg.sender);\r\n        bunnyCost[_bunnyId] = _money;\r\n        timeCost[_bunnyId] = block.timestamp;\r\n        \r\n        emit StartMarket(_bunnyId, currentPrice(_bunnyId), block.timestamp, stepTimeSale);\r\n        return marketCount++;\r\n    }\r\n\r\n    /**\r\n    * @dev remove from sale rabbit\r\n    * @param _bunnyId - a rabbit that is removed from sale \r\n    */\r\n    function stopMarket(uint32 _bunnyId) public returns(uint) {\r\n        require(checkContract());\r\n        require(isPauseSave());\r\n        require(publicContract.ownerOf(_bunnyId) == msg.sender);\r\n        bunnyCost[_bunnyId] = 0;\r\n        emit StopMarket(_bunnyId);\r\n        return marketCount--;\r\n    }\r\n \r\n \r\n    function changeReallyPrice() internal {\r\n        if (added_to_the_bank > 0 && rangePrice > 0) {\r\n            uint tmp = added_to_the_bank.div(rangePrice);\r\n            reallyPrice = tmp * (10**15)+reallyPrice; \r\n\r\n\r\n            uint tmpTime = added_to_the_bank.div(coefficientTimeStep);\r\n            if (tmpTime <= minTimeBank) {\r\n                stepTimeBank = minTimeBank;\r\n            } else {\r\n                stepTimeBank = tmpTime;\r\n            }\r\n        } \r\n    }\r\n \r\n     \r\n\r\n\r\n    function timeBunny(uint32 _bunnyId) public view returns(bool can, uint timeleft) {\r\n        uint _tmp = timeCost[_bunnyId].add(stepTimeSale);\r\n        if (timeCost[_bunnyId] > 0 && block.timestamp >= _tmp) {\r\n            can = true;\r\n            timeleft = 0;\r\n        } else { \r\n            can = false; \r\n            _tmp = _tmp.sub(block.timestamp);\r\n            if (_tmp > 0) {\r\n                timeleft = _tmp;\r\n            } else {\r\n                timeleft = 0;\r\n            }\r\n        } \r\n    }\r\n\r\n    function transferFromBunny(uint32 _bunnyId) public {\r\n        require(checkContract());\r\n        publicContract.transferFrom(publicContract.ownerOf(_bunnyId), msg.sender, _bunnyId); \r\n    }\r\n\r\n\r\n// https://rinkeby.etherscan.io/address/0xc7984712b3d0fac8e965dd17a995db5007fe08f2#writeContract\r\n    /**\r\n    * @dev Acquisition of a rabbit from another user\r\n    * @param _bunnyId  Bunny\r\n     */\r\n    function buyBunny(uint32 _bunnyId) public payable {\r\n        require(isPauseSave());\r\n        require(checkContract());\r\n        require(publicContract.ownerOf(_bunnyId) != msg.sender);\r\n        lastmoney = currentPrice(_bunnyId);\r\n        require(msg.value >= lastmoney && 0 != lastmoney);\r\n\r\n        bool can;\r\n        (can,) = timeBunny(_bunnyId);\r\n        require(can); \r\n        // stop trading on the current rabbit\r\n        totalClosedBID++;\r\n        // Sending money to the old user \r\n        // is sent to the new owner of the bought rabbit\r\n \r\n        checkTimeWin();\r\n        \r\n        sendMoney(publicContract.ownerOf(_bunnyId), lastmoney);\r\n        \r\n        publicContract.transferFrom(publicContract.ownerOf(_bunnyId), msg.sender, _bunnyId); \r\n        \r\n        sendMoneyMother(_bunnyId);\r\n\r\n        stopMarket(_bunnyId);\r\n\r\n        changeReallyPrice();\r\n        lastOwner = msg.sender; \r\n        lastSaleTime = block.timestamp; \r\n\r\n        emit BunnyBuy(_bunnyId, lastmoney);\r\n    } \r\n     \r\n    function sendMoneyMother(uint32 _bunnyId) internal {\r\n        if (bunnyCost[_bunnyId] > 0) { \r\n            uint procentOne = (bunnyCost[_bunnyId].div(100)); \r\n            // commission_mom\r\n            uint32[5] memory mother;\r\n            mother = publicContract.getRabbitMother(_bunnyId);\r\n\r\n            uint motherCount = publicContract.getRabbitMotherSumm(_bunnyId);\r\n            if (motherCount > 0) {\r\n                uint motherMoney = (procentOne*commission_mom).div(motherCount);\r\n                    for (uint m = 0; m < 5; m++) {\r\n                        if (mother[m] != 0) {\r\n                            publicContract.ownerOf(mother[m]).transfer(motherMoney);\r\n                            emit MotherMoney(mother[m], _bunnyId, motherMoney);\r\n                        }\r\n                    }\r\n                } \r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * @param _to to whom money is sent\r\n    * @param _money the amount of money is being distributed at the moment\r\n     */\r\n    function sendMoney(address _to, uint256 _money) internal { \r\n        if (_money > 0) { \r\n            uint procentOne = (_money/100); \r\n            _to.transfer(procentOne * (100-(commission+percentBank+commission_mom)));\r\n            addBank(procentOne*percentBank);\r\n            ownerMoney.transfer(procentOne*commission);  \r\n        }\r\n    }\r\n\r\n\r\n\r\n    function checkTimeWin() internal {\r\n        if (lastSaleTime + stepTimeBank < block.timestamp) {\r\n            win(); \r\n        }\r\n        lastSaleTime = block.timestamp;\r\n    }\r\n    function win() internal {\r\n        // ####### WIN ##############\r\n        // send money\r\n        if (address(this).balance > 0 && address(this).balance >= bankMoney && lastOwner != address(0)) { \r\n            advertising = \"\";\r\n            added_to_the_bank = 0;\r\n            reallyPrice = minPrice;\r\n            lastOwner.transfer(bankMoney);\r\n            numberOfWins = numberOfWins.add(1); \r\n            emit Tournament (lastOwner, bankMoney, lastSaleTime, block.timestamp);\r\n            bankMoney = 0;\r\n        }\r\n    }    \r\n    \r\n        /**\r\n    * @dev add money of bank\r\n    */\r\n    function addBank(uint _money) internal { \r\n        bankMoney = bankMoney.add(_money);\r\n        added_to_the_bank = added_to_the_bank.add(1);\r\n\r\n        emit AddBank(bankMoney, added_to_the_bank, lastOwner, block.timestamp, stepTimeBank);\r\n\r\n    }  \r\n     \r\n \r\n    function ownerOf(uint32 _bunnyId) public  view returns(address) {\r\n        return publicContract.ownerOf(_bunnyId);\r\n    } \r\n    \r\n    /**\r\n    * Check\r\n     */\r\n    function checkContract() public view returns(bool) {\r\n        return publicContract.isUIntPublic(); \r\n    }\r\n\r\n    function buyAdvert(string _text)  public payable { \r\n        require(msg.value > (reallyPrice*2));\r\n        require(checkContract());\r\n        advertising = _text;\r\n        addBank(msg.value); \r\n    }\r\n \r\n    /**\r\n    * Only if the user has violated the advertising rules\r\n     */\r\n    function noAdvert() public onlyWhitelisted {\r\n        advertising = \"\";\r\n    } \r\n \r\n    /**\r\n    * Only unforeseen situations\r\n     */\r\n    function getMoney(uint _value) public onlyOwner {\r\n        require(address(this).balance >= _value); \r\n        ownerMoney.transfer(_value);\r\n        // for public, no scam\r\n        getMoneyCount = getMoneyCount.add(_value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getProperty\",\"outputs\":[{\"name\":\"tmp_stepTimeBank\",\"type\":\"uint256\"},{\"name\":\"tmp_stepTimeSale\",\"type\":\"uint256\"},{\"name\":\"tmp_minPrice\",\"type\":\"uint256\"},{\"name\":\"tmp_reallyPrice\",\"type\":\"uint256\"},{\"name\":\"tmp_added_to_the_bank\",\"type\":\"uint256\"},{\"name\":\"tmp_marketCount\",\"type\":\"uint256\"},{\"name\":\"tmp_numberOfWins\",\"type\":\"uint256\"},{\"name\":\"tmp_getMoneyCount\",\"type\":\"uint256\"},{\"name\":\"tmp_lastmoney\",\"type\":\"uint256\"},{\"name\":\"tmp_totalClosedBID\",\"type\":\"uint256\"},{\"name\":\"tmp_bankMoney\",\"type\":\"uint256\"},{\"name\":\"tmp_lastSaleTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"bunnyCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunnyId\",\"type\":\"uint32\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"buyAdvert\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunnyid\",\"type\":\"uint32\"}],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentBank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunnyId\",\"type\":\"uint32\"}],\"name\":\"transferFromBunny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pubAddress\",\"type\":\"address\"}],\"name\":\"transferContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coefficientTimeStep\",\"type\":\"uint256\"}],\"name\":\"setCoefficientTimeStep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stepTimeBank\",\"type\":\"uint256\"}],\"name\":\"setStepTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertising\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunnyId\",\"type\":\"uint32\"},{\"name\":\"_money\",\"type\":\"uint256\"}],\"name\":\"startMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPrice\",\"type\":\"uint256\"}],\"name\":\"setMinPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"noAdvert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"timeCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPauseSave\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"transferMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"setPercentCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunnyId\",\"type\":\"uint32\"}],\"name\":\"buyBunny\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commission_mom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rangePrice\",\"type\":\"uint256\"}],\"name\":\"setRangePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunnyId\",\"type\":\"uint32\"}],\"name\":\"timeBunny\",\"outputs\":[{\"name\":\"can\",\"type\":\"bool\"},{\"name\":\"timeleft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minTimeBank\",\"type\":\"uint256\"}],\"name\":\"setMinTimeBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pubAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentBank\",\"type\":\"uint256\"}],\"name\":\"setPercentBank\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunnyId\",\"type\":\"uint32\"}],\"name\":\"stopMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"}],\"name\":\"StopMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStart\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stepTimeSale\",\"type\":\"uint256\"}],\"name\":\"StartMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"uint256\"}],\"name\":\"BunnyBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bank\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeLeft\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeRange\",\"type\":\"uint256\"}],\"name\":\"Tournament\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bankMoney\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"countInvestor\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lastOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"addTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stepTime\",\"type\":\"uint256\"}],\"name\":\"AddBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"motherId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"uint256\"}],\"name\":\"MotherMoney\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Market","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3b355680decf7f9160a8db722e3a55bc7978acaa168ce42cda509cfb3819e464"}]}