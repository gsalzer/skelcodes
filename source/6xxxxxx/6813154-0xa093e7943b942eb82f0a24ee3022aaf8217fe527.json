{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address public admin;\r\n  uint256 public lockedIn;\r\n  uint256 public OWNER_AMOUNT;\r\n  uint256 public OWNER_PERCENT = 2;\r\n  uint256 public OWNER_MIN = 0.0001 ether;\r\n  \r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor(address addr, uint256 percent, uint256 min) public {\r\n    require(addr != address(0), 'invalid addr');\r\n    owner = msg.sender;\r\n    admin = addr;\r\n    OWNER_PERCENT = percent;\r\n    OWNER_MIN = min;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender==owner || msg.sender==admin);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n  function _cash() public view returns(uint256){\r\n      return address(this).balance;\r\n  }\r\n\r\n  function kill() onlyOwner public{\r\n    require(lockedIn == 0, \"invalid lockedIn\");\r\n    selfdestruct(owner);\r\n  }\r\n  \r\n  function setAdmin(address addr) onlyOwner public{\r\n      require(addr != address(0), 'invalid addr');\r\n      admin = addr;\r\n  }\r\n  \r\n  function setOwnerPercent(uint256 percent) onlyOwner public{\r\n      OWNER_PERCENT = percent;\r\n  }\r\n  \r\n  function setOwnerMin(uint256 min) onlyOwner public{\r\n      OWNER_MIN = min;\r\n  }\r\n  \r\n  function _fee() internal returns(uint256){\r\n      uint256 fe = msg.value*OWNER_PERCENT/100;\r\n      if(fe < OWNER_MIN){\r\n          fe = OWNER_MIN;\r\n      }\r\n      OWNER_AMOUNT += fe;\r\n      return fe;\r\n  }\r\n  \r\n  function cashOut() onlyOwner public{\r\n    require(OWNER_AMOUNT > 0, 'invalid OWNER_AMOUNT');\r\n    owner.send(OWNER_AMOUNT);\r\n  }\r\n\r\n  modifier isHuman() {\r\n      address _addr = msg.sender;\r\n      uint256 _codeLength;\r\n      assembly {_codeLength := extcodesize(_addr)}\r\n      require(_codeLength == 0, \"sorry humans only\");\r\n      _;\r\n  }\r\n\r\n  modifier isContract() {\r\n      address _addr = msg.sender;\r\n      uint256 _codeLength;\r\n      assembly {_codeLength := extcodesize(_addr)}\r\n      require(_codeLength > 0, \"sorry contract only\");\r\n      _;\r\n  }\r\n}\r\n\r\n/**\r\n * luck100.win - Fair Ethereum game platform\r\n * \r\n * Multiple dice\r\n * \r\n * Winning rules:\r\n * \r\n * result = sha3(txhashA + txhashB + blockhash(startN+n*10)) % 6 + 1\r\n * \r\n * 1.After the contract is created, the starting block startN is obtained. \r\n * After that, each new 10 blocks in Ethereum automatically generates one game;\r\n * \r\n * 2.The player chooses a bet of 1-6 and bets up to 5 digits at the same time;\r\n * \r\n * 3.In the same game, player A gets the transaction hash txhashA after successful bet, \r\n * and player B gets the transaction hash txhashB after successful bet...;\r\n * \r\n * 4.Take the last block of the board, hash blockhash;\r\n * \r\n * 5.TxhashA, txhashB... and blockhash are subjected to sha3 encryption operation, \r\n * and then modulo with 6 to get the result of the lottery.\r\n */\r\n\r\ncontract DiceLuck100 is Ownable{\r\n    event betEvent(uint256 indexed gameIdx, uint256 betIdx, address addr, uint256 betBlockNumber, uint256 betMask, uint256 amount);\r\n    event openEvent(uint256 indexed gameIdx, uint256 openBlockNumber, uint256 openNumber, bytes32 txhash, uint256 winNum);\r\n    struct Bet{\r\n        address addr;\r\n        uint256 betBlockNumber;\r\n        uint256 betMask;\r\n        uint256 amount;\r\n        uint256 winAmount;\r\n        bool isWin;\r\n    }\r\n    struct Game{\r\n        uint256 openBlockNumber;\r\n        uint256 openNumber;\r\n        uint256 locked;\r\n        bytes32 txhash;\r\n        bytes32 openHash;\r\n        Bet[] bets;\r\n    }\r\n    mapping(uint256=>Game) gameList;\r\n    Game _eg;\r\n    uint256 public firstBN;\r\n    uint256 constant MIN_BET = 0.01 ether;\r\n    uint8 public N = 10;\r\n    uint8 constant M = 6;\r\n    uint16[M] public MASKS = [0, 32, 48, 56, 60, 62];\r\n    uint16[M] public AMOUNTS = [0, 101, 253, 510, 1031, 2660];\r\n    uint16[M] public ODDS = [0, 600, 300, 200, 150, 120];\r\n    \r\n    constructor(address addr, uint256 percent, uint256 min) Ownable(addr, percent, min) public{\r\n        firstBN = block.number;\r\n    }\r\n    \r\n    function() public payable{\r\n        uint8 diceNum = uint8(msg.data.length);\r\n        uint256 betMask = 0;\r\n        uint256 t = 0;\r\n        for(uint8 i=0;i<diceNum;i++){\r\n            t = uint256(msg.data[i]);\r\n            if(t==0 || t>M){\r\n                diceNum--;\r\n                continue;\r\n            }\r\n            betMask += 2**(t-1);\r\n        }\r\n        if(diceNum==0) return ;\r\n        _placeBet(betMask, diceNum);\r\n    }\r\n    \r\n    function placeBet(uint256 betMask, uint8 diceNum) public payable{\r\n        _placeBet(betMask, diceNum);\r\n    }\r\n    \r\n    function _placeBet(uint256 betMask, uint8 diceNum) private{\r\n        require(diceNum>0 && diceNum<M, 'invalid diceNum');\r\n        uint256 MAX_BET = AMOUNTS[diceNum]/100*(10**18);\r\n        require(msg.value>=MIN_BET && msg.value<=MAX_BET, 'invalid amount');\r\n        require(betMask>0 && betMask<=MASKS[diceNum], 'invalid betMask');\r\n        uint256 fee = _fee();\r\n        uint256 winAmount = (msg.value-fee)*ODDS[diceNum]/100;\r\n        lockedIn += winAmount;\r\n        uint256 gameIdx = (block.number-firstBN-1)/N;\r\n        if(gameList[gameIdx].openBlockNumber == 0){\r\n            gameList[gameIdx] = _eg;\r\n            gameList[gameIdx].openBlockNumber = firstBN + (gameIdx+1)*N;\r\n        }\r\n        gameList[gameIdx].locked += winAmount;\r\n        gameList[gameIdx].bets.push(Bet({\r\n            addr:msg.sender,\r\n            betBlockNumber:block.number,\r\n            betMask:betMask,\r\n            amount:msg.value,\r\n            winAmount:winAmount,\r\n            isWin:false\r\n        }));\r\n        emit betEvent(gameIdx, gameList[gameIdx].bets.length-1, msg.sender, block.number, betMask, msg.value);\r\n    }\r\n    \r\n    function setN(uint8 n) onlyOwner public{\r\n        uint256 gameIdx = (block.number-firstBN-1)/N;\r\n        firstBN = firstBN + (gameIdx+1)*N;\r\n        N = n;\r\n    }\r\n    \r\n    function open(uint256 gameIdx, bytes32 txhash, uint256 txNum) onlyOwner public{\r\n        uint256 openBlockNumber = gameList[gameIdx].openBlockNumber;\r\n        bytes32 openBlockHash = blockhash(openBlockNumber);\r\n        require(uint256(openBlockHash)>0, 'invalid openBlockNumber');\r\n        _open(gameIdx, txhash, openBlockHash, txNum);\r\n    }\r\n    \r\n    function open2(uint256 gameIdx, bytes32 txhash, bytes32 openBlockHash, uint256 txNum) onlyOwner public{\r\n        _open(gameIdx, txhash, openBlockHash, txNum);\r\n    }\r\n    \r\n    function _open(uint256 gameIdx, bytes32 txhash, bytes32 openBlockHash, uint256 txNum) private{\r\n        Game storage game = gameList[gameIdx];\r\n        uint256 betNum = game.bets.length;\r\n        uint256 openBN = firstBN + (gameIdx+1)*N;\r\n        require(openBN==game.openBlockNumber && game.openNumber==0 && betNum==txNum, 'invalid bet');\r\n        lockedIn -= game.locked;\r\n        bytes32 openHash = keccak256(abi.encodePacked(txhash, openBlockHash));\r\n        uint256 r = uint256(openHash) % M;\r\n        uint256 R = 2**r;\r\n        game.openNumber = r+1;\r\n        game.txhash = txhash;\r\n        game.openHash = openHash;\r\n        uint256 t = 0;\r\n        uint256 winNum = 0;\r\n        for(uint256 i=0;i<betNum;i++){\r\n            t = game.bets[i].betMask & R;\r\n            if(t > 0){\r\n                game.bets[i].isWin = true;\r\n                (game.bets[i].addr).send(game.bets[i].winAmount);\r\n                winNum++;\r\n            }\r\n        }\r\n        emit openEvent(gameIdx, game.openBlockNumber, game.openNumber, txhash, winNum);\r\n    }\r\n    \r\n    function getGame(uint256 gameIdx) view public returns(uint256,uint256,uint256,uint256,uint256,uint256,bytes32,bytes32){\r\n        Game memory g = gameList[gameIdx];\r\n        uint256 amount = 0;\r\n        uint256 winAmount = 0;\r\n        uint256 winNum = 0;\r\n        for(uint256 i=0;i<g.bets.length;i++){\r\n            amount += g.bets[i].amount;\r\n            if(g.bets[i].isWin){\r\n                winNum++;\r\n                winAmount += g.bets[i].winAmount;\r\n            }\r\n        }\r\n        return (g.openBlockNumber, g.openNumber, g.bets.length, winNum, amount, winAmount, g.txhash, g.openHash);\r\n    }\r\n    \r\n    function getBets(uint256 gameIdx) view public returns(address[] addrs,uint256[] bns,uint256[] masks,uint256[] amounts,uint256[] winAmounts,bool[] isWins){\r\n        uint256 betNum = gameList[gameIdx].bets.length;\r\n        addrs = new address[](betNum);\r\n        bns = new uint256[](betNum);\r\n        masks = new uint256[](betNum);\r\n        amounts = new uint256[](betNum);\r\n        winAmounts = new uint256[](betNum);\r\n        isWins = new bool[](betNum);\r\n        for(uint256 i=0;i<betNum;i++){\r\n            Bet memory b = gameList[gameIdx].bets[i];\r\n            addrs[i] = b.addr;\r\n            bns[i] = b.betBlockNumber;\r\n            masks[i] = b.betMask;\r\n            amounts[i] = b.amount;\r\n            winAmounts[i] = b.winAmount;\r\n            isWins[i] = b.isWin;\r\n        }\r\n    }\r\n    \r\n    \r\n    function withdraw() onlyOwner public{\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    function output() view public returns(uint256, uint8,uint256,uint256,uint16[M],uint16[M],uint16[M]){\r\n        return (firstBN, N, OWNER_PERCENT, OWNER_MIN, MASKS, AMOUNTS, ODDS);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"betMask\",\"type\":\"uint256\"},{\"name\":\"diceNum\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameIdx\",\"type\":\"uint256\"}],\"name\":\"getBets\",\"outputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"},{\"name\":\"bns\",\"type\":\"uint256[]\"},{\"name\":\"masks\",\"type\":\"uint256[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"winAmounts\",\"type\":\"uint256[]\"},{\"name\":\"isWins\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_cash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"setOwnerMin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstBN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ODDS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameIdx\",\"type\":\"uint256\"},{\"name\":\"txhash\",\"type\":\"bytes32\"},{\"name\":\"txNum\",\"type\":\"uint256\"}],\"name\":\"open\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"MASKS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cashOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"uint8\"}],\"name\":\"setN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameIdx\",\"type\":\"uint256\"}],\"name\":\"getGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setOwnerPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"N\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AMOUNTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"output\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint16[6]\"},{\"name\":\"\",\"type\":\"uint16[6]\"},{\"name\":\"\",\"type\":\"uint16[6]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameIdx\",\"type\":\"uint256\"},{\"name\":\"txhash\",\"type\":\"bytes32\"},{\"name\":\"openBlockHash\",\"type\":\"bytes32\"},{\"name\":\"txNum\",\"type\":\"uint256\"}],\"name\":\"open2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"min\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"betBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"betMask\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"betEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"openBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"openNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txhash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"winNum\",\"type\":\"uint256\"}],\"name\":\"openEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DiceLuck100","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000071804a0eb5df165935bfb2547b1dbca0018f7d9700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://5931441e160132d58815412bbeaaf8e7fdcac2543604d1bd18a121084b5fa3a3"}]}