{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Ownable{\r\n\r\n address public owner;\r\n \r\n event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n   constructor() public {\r\n     owner = msg.sender;\r\n   }\r\n\r\n   modifier onlyOwner() {\r\n     require(msg.sender == owner);\r\n    _;\r\n   }\r\n    \r\n   function transferOwnership(address newOwner) public onlyOwner {\r\n     require(newOwner != address(0));\r\n     emit OwnershipTransferred(owner, newOwner);\r\n     owner = newOwner;\r\n   }\r\n }\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n} \r\n    \r\ncontract MintableToken is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public totalSupply;\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n  \r\n  address public saleAgent;\r\n\r\n  mapping (address => uint256) balances;\r\n  \r\n  function setSaleAgent(address newSaleAgnet) public onlyOwner {\r\n    saleAgent = newSaleAgnet;\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(msg.sender == saleAgent);\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n  function mint(address _to, uint256 _amount) public returns (bool) {\r\n    require(msg.sender == saleAgent && !mintingFinished);\r\n    \r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() public returns (bool) {\r\n    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract TokenSale is Ownable {\r\n\r\n  using SafeMath for uint;\r\n  uint public period;\r\n  uint public price = 1000000000000000000;\r\n  uint public start;\r\n  uint public minInvestedLimit = 100000000000000000;\r\n  uint public hardcap = 25000000000000000000000;\r\n  uint public invested;\r\n\r\n  MintableToken public token;\r\n\r\n  bool public PreICO = true;\r\n\r\n  address public wallet;\r\n\r\n  mapping(address => bool) public whiteList;\r\n  \r\n  modifier isUnderHardcap() {\r\n    require(invested < hardcap);\r\n    _;\r\n  }\r\n\r\n  modifier PhaseCheck() {\r\n    if(PreICO == true)\r\n    require(whiteList[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  modifier minInvestLimited(uint value) {\r\n    require(value >= minInvestedLimit);\r\n    _;\r\n  }\r\n\r\n  function addToWhiteList(address _address) public onlyOwner {\r\n    whiteList[_address] = true;\r\n  }\r\n  \r\n  function deleteFromWhiteList(address _address) public onlyOwner {\r\n    whiteList[_address] = false;\r\n  }\r\n\r\n  function preicofinish() public onlyOwner {\r\n    PreICO = false;\r\n  }\r\n  \r\n  function icofinish() public onlyOwner {\r\n    token.finishMinting();\r\n  }\r\n\r\n  function GRW() public onlyOwner {\r\n    PreICO = true;\r\n  }\r\n\r\n  function setToken(address newToken) public onlyOwner {\r\n    token = MintableToken(newToken);\r\n  }\r\n\r\n  function setWallet(address newWallet) public onlyOwner {\r\n    wallet = newWallet;\r\n  }\r\n\r\n  function setStart(uint newStart) public onlyOwner {\r\n    start = newStart;\r\n  }\r\n  \r\n  function setPeriod(uint newPeriod) public onlyOwner {\r\n    period = newPeriod;\r\n  }\r\n  \r\n  function endSaleDate() public view returns(uint) {\r\n    return start.add(period * 1 days);\r\n  }\r\n  \r\n  function calculateTokens(uint _invested) internal view returns(uint) {\r\n    return _invested.mul(price).div(1 ether);\r\n  }\r\n\r\n  function mintTokens(address to, uint tokens) internal {\r\n    token.mint(this, tokens);\r\n    token.transfer(to, tokens);\r\n  }\r\n\r\n  function mintTokensByETH(address to, uint _invested) internal isUnderHardcap returns(uint) {\r\n    invested = invested.add(_invested);\r\n    uint tokens = calculateTokens(_invested);\r\n    mintTokens(to, tokens);\r\n    return tokens;\r\n  }\r\n\r\n  function fallback() internal minInvestLimited(msg.value) PhaseCheck returns(uint) {\r\n    require(now >= start && now < endSaleDate());\r\n    wallet.transfer(msg.value);\r\n    return mintTokensByETH(msg.sender, msg.value);\r\n  }\r\n\r\n  function () public payable {\r\n    fallback();\r\n  }\r\n\r\n}\r\n\r\ncontract GrowUpToken is MintableToken {\r\n\r\n  string public constant name = \"GrowUpToken\";\r\n\r\n  string public constant symbol = \"GRW\";\r\n\r\n  uint32 public constant decimals = 0;\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSaleAgnet\",\"type\":\"address\"}],\"name\":\"setSaleAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GrowUpToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://607a9bf4355be9b277a34b9c6ada4fdb2e16c962e9bffde005f2d46e4e5f3bfa"}]}