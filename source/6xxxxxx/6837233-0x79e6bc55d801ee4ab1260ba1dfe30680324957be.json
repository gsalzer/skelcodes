{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    hasMintPermission\r\n    canMint\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n * behavior.\r\n * @dev part of Daonomic platform\r\n */\r\ncontract QashbackCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  /**\r\n   * @dev This event should be emitted when user buys something\r\n   */\r\n  event Purchase(address indexed buyer, address token, uint256 value, uint256 sold, uint256 bonus, bytes txId);\r\n  /**\r\n   * @dev Should be emitted if new payment method added\r\n   */\r\n  event RateAdd(address token);\r\n  /**\r\n   * @dev Should be emitted if payment method removed\r\n   */\r\n  event RateRemove(address token);\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    (uint256 tokens, uint256 left) = _getTokenAmount(weiAmount);\r\n    uint256 weiEarned = weiAmount.sub(left);\r\n    uint256 bonus = _getBonus(tokens);\r\n    uint256 withBonus = tokens.add(bonus);\r\n\r\n    _preValidatePurchase(_beneficiary, weiAmount, tokens, bonus);\r\n\r\n    _processPurchase(_beneficiary, withBonus);\r\n    emit Purchase(\r\n      _beneficiary,\r\n      address(0),\r\n        weiEarned,\r\n      tokens,\r\n      bonus,\r\n      \"\"\r\n    );\r\n\r\n    _updatePurchasingState(_beneficiary, weiEarned, withBonus);\r\n    _postValidatePurchase(_beneficiary, weiEarned);\r\n\r\n    if (left > 0) {\r\n      _beneficiary.transfer(left);\r\n    }\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount,\r\n    uint256 _tokens,\r\n    uint256 _bonus\r\n  )\r\n    internal\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n    require(_tokens != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  ) internal;\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(\r\n    address _beneficiary,\r\n    uint256 _weiAmount,\r\n    uint256 _tokens\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   *         and wei left (if no more tokens can be sold)\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256 tokens, uint256 weiLeft);\r\n\r\n  function _getBonus(uint256 _tokens) internal view returns (uint256);\r\n}\r\n\r\ncontract MintingQashbackCrowdsale is QashbackCrowdsale {\r\n    MintableToken public token;\r\n\r\n    constructor(MintableToken _token) public {\r\n        token = _token;\r\n    }\r\n\r\n    function _deliverTokens(\r\n        address _beneficiary,\r\n        uint256 _tokenAmount\r\n    ) internal {\r\n        token.mint(_beneficiary, _tokenAmount);\r\n    }\r\n}\r\n\r\ncontract Whitelist {\r\n  function isInWhitelist(address addr) public view returns (bool);\r\n}\r\n\r\ncontract WhitelistQashbackCrowdsale is QashbackCrowdsale {\r\n  Whitelist public whitelist;\r\n\r\n  constructor (Whitelist _whitelist) public {\r\n    whitelist = _whitelist;\r\n  }\r\n\r\n  function getWhitelists() view public returns (Whitelist[]) {\r\n    Whitelist[] memory result = new Whitelist[](1);\r\n    result[0] = whitelist;\r\n    return result;\r\n  }\r\n\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount,\r\n    uint256 _tokens,\r\n    uint256 _bonus\r\n  ) internal {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount, _tokens, _bonus);\r\n    require(canBuy(_beneficiary), \"investor is not verified by Whitelist\");\r\n  }\r\n\r\n  function canBuy(address _beneficiary) view public returns (bool) {\r\n    return whitelist.isInWhitelist(_beneficiary);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Counting Crowdsale\r\n * @dev calculates amount of sold tokens\r\n */\r\ncontract CountingQashbackCrowdsale is QashbackCrowdsale {\r\n    uint256 public sold;\r\n\r\n    function _updatePurchasingState(\r\n        address _beneficiary,\r\n        uint256 _weiAmount,\r\n        uint256 _tokens\r\n    ) internal {\r\n        super._updatePurchasingState(_beneficiary, _weiAmount, _tokens);\r\n\r\n        sold = sold.add(_tokens);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract QBKToken is BurnableToken, PausableToken, MintableToken {\r\n  string public constant name = \"QashBack\";\r\n  string public constant symbol = \"QBK\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  uint256 public constant MAX_TOTAL_SUPPLY = 1000000000 * 10 ** 18;\r\n\r\n  function mint(address _to, uint256 _amount) public returns (bool) {\r\n    require(totalSupply_.add(_amount) <= MAX_TOTAL_SUPPLY);\r\n    return super.mint(_to, _amount);\r\n  }\r\n}\r\n\r\ncontract PausingQashbackSale is Ownable {\r\n    Pausable public pausableToken;\r\n\r\n    constructor(Pausable _pausableToken) public {\r\n        pausableToken = _pausableToken;\r\n    }\r\n\r\n    function pauseToken() onlyOwner public {\r\n        pausableToken.pause();\r\n    }\r\n\r\n    function unpauseToken() onlyOwner public {\r\n        pausableToken.unpause();\r\n    }\r\n}\r\n\r\n/**\r\n * @title Token Holder with vesting period\r\n * @dev holds any amount of tokens and allows to release selected number of tokens after every vestingInterval seconds\r\n */\r\ncontract TokenHolder is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    event Released(uint amount);\r\n\r\n    /**\r\n     * @dev start of the vesting period\r\n     */\r\n    uint public start;\r\n    /**\r\n     * @dev interval between token releases\r\n     */\r\n    uint public vestingInterval;\r\n    /**\r\n     * @dev already released value\r\n     */\r\n    uint public released;\r\n    /**\r\n     * @dev value can be released every period\r\n     */\r\n    uint public value;\r\n    /**\r\n     * @dev holding token\r\n     */\r\n    ERC20Basic public token;\r\n\r\n    constructor(uint _start, uint _vestingInterval, uint _value, ERC20Basic _token) public {\r\n        start = _start;\r\n        vestingInterval = _vestingInterval;\r\n        value = _value;\r\n        token = _token;\r\n    }\r\n\r\n    /**\r\n     * @dev transfers vested tokens to beneficiary (to the owner of the contract)\r\n     * @dev automatically calculates amount to release\r\n     */\r\n    function release() onlyOwner public {\r\n        uint toRelease = calculateVestedAmount().sub(released);\r\n        uint left = token.balanceOf(this);\r\n        if (left < toRelease) {\r\n            toRelease = left;\r\n        }\r\n        require(toRelease > 0, \"nothing to release\");\r\n        released = released.add(toRelease);\r\n        require(token.transfer(msg.sender, toRelease));\r\n        emit Released(toRelease);\r\n    }\r\n\r\n    function calculateVestedAmount() view internal returns (uint) {\r\n        return now.sub(start).div(vestingInterval).mul(value);\r\n    }\r\n}\r\n\r\n/**\r\n * @title PoolDaonomicCrowdsale\r\n * @dev can create TokenHolders\r\n */\r\ncontract PoolQashbackCrowdsale is Ownable, MintingQashbackCrowdsale {\r\n    enum StartType { Fixed, Floating }\r\n\r\n    event PoolCreatedEvent(string name, uint maxAmount, uint start, uint vestingInterval, uint value, StartType startType);\r\n    event TokenHolderCreatedEvent(string name, address addr, uint amount);\r\n\r\n    mapping(string => PoolDescription) pools;\r\n\r\n    struct PoolDescription {\r\n        /**\r\n         * @dev maximal amount of tokens in this pool\r\n         */\r\n        uint maxAmount;\r\n        /**\r\n         * @dev amount of tokens already released\r\n         */\r\n        uint releasedAmount;\r\n        /**\r\n         * @dev start of the vesting period\r\n         */\r\n        uint start;\r\n        /**\r\n         * @dev interval between token releases\r\n         */\r\n        uint vestingInterval;\r\n        /**\r\n         * @dev value which is released every vestingInterval (in percent)\r\n         */\r\n        uint value;\r\n        /**\r\n         * @dev start type of the holder (fixed - date is set in seconds since 01.01.1970, floating - date is set in seconds since holder creation)\r\n         */\r\n        StartType startType;\r\n    }\r\n\r\n    constructor(MintableToken _token) MintingQashbackCrowdsale(_token) public {\r\n\r\n    }\r\n\r\n    function registerPool(string _name, uint _maxAmount, uint _start, uint _vestingInterval, uint _value, StartType _startType) internal {\r\n        require(_maxAmount > 0, \"maxAmount should be greater than 0\");\r\n        require(_vestingInterval > 0, \"vestingInterval should be greater than 0\");\r\n        require(_value > 0 && _value <= 100, \"value should be >0 and <=100\");\r\n        pools[_name] = PoolDescription(_maxAmount, 0, _start, _vestingInterval, _value, _startType);\r\n        emit PoolCreatedEvent(_name, _maxAmount, _start, _vestingInterval, _value, _startType);\r\n    }\r\n\r\n    function createHolder(string _name, address _beneficiary, uint _amount) onlyOwner public returns (TokenHolder) {\r\n        PoolDescription storage pool = pools[_name];\r\n        require(pool.maxAmount != 0, \"pool is not defined\");\r\n        require(_amount.add(pool.releasedAmount) <= pool.maxAmount, \"pool is depleted\");\r\n        pool.releasedAmount = _amount.add(pool.releasedAmount);\r\n        uint start;\r\n        if (pool.startType == StartType.Fixed) {\r\n            start = pool.start;\r\n        } else {\r\n            start = now + pool.start;\r\n        }\r\n        TokenHolder created = new TokenHolder(start, pool.vestingInterval, _amount.mul(pool.value).div(100), token);\r\n        created.transferOwnership(_beneficiary);\r\n        token.mint(created, _amount);\r\n        emit TokenHolderCreatedEvent(_name, created, _amount);\r\n        return created;\r\n    }\r\n\r\n    function getTokensLeft(string _name) view public returns (uint) {\r\n        PoolDescription storage pool = pools[_name];\r\n        require(pool.maxAmount != 0, \"pool is not defined\");\r\n        return pool.maxAmount.sub(pool.releasedAmount);\r\n    }\r\n}\r\n\r\n/*\r\n   token:\r\n     burnable\r\n     pausable\r\n     mintable\r\n     with max total supply\r\n     paused at start\r\n   sale:\r\n     with hard cap\r\n     single eth rate (set via setUsdEthRate)\r\n     no bonus\r\n     start immediately, end on 12/21/2018 @ 12:00pm (UTC)\r\n     with direct transfer (capped with 100M tokens)\r\n     with timelocks (for Category_2 .. Category_10)\r\n     owner can withdraw eth immediately\r\n*/\r\ncontract QBKSale is PausingQashbackSale, PoolQashbackCrowdsale, CountingQashbackCrowdsale, WhitelistQashbackCrowdsale {\r\n    uint constant public HARD_CAP = 30000000 * 10 ** 18;\r\n    uint constant public TRANSFER_HARD_CAP = 100000000 * 10 ** 18;\r\n    uint constant public SUPPLY_HARD_CAP = 1000000000 * 10 ** 18;\r\n    uint256 constant public START = 1541073600; // 11/01/2018 @ 12:00pm (UTC)\r\n    uint256 constant public END = 1545393600; // 12/21/2018 @ 12:00pm (UTC)\r\n\r\n    uint256 public rate;\r\n    uint256 public transferred;\r\n    address public operator;\r\n\r\n    event UsdEthRateChange(uint256 rate);\r\n    event Withdraw(address to, uint256 value);\r\n\r\n    constructor(QBKToken _token, Whitelist _whitelist, uint256 _usdEthRate)\r\n        PausingQashbackSale(_token)\r\n        PoolQashbackCrowdsale(_token)\r\n        WhitelistQashbackCrowdsale(_whitelist)\r\n        public {\r\n\r\n        operator = owner;\r\n        //needed for Daonomic UI\r\n        emit RateAdd(address(0));\r\n        setUsdEthRate(_usdEthRate);\r\n        registerPool(\"Category_2\", SUPPLY_HARD_CAP, 86400 * 365 * 10, 1, 100, StartType.Floating); //10 Years\r\n        registerPool(\"Category_3\", SUPPLY_HARD_CAP, 86400, 1, 100, StartType.Floating); //1 day\r\n        registerPool(\"Category_4\", SUPPLY_HARD_CAP, 86400 * 7, 1, 100, StartType.Floating); //7 days\r\n        registerPool(\"Category_5\", SUPPLY_HARD_CAP, 86400 * 30, 1, 100, StartType.Floating); //30 days\r\n        registerPool(\"Category_6\", SUPPLY_HARD_CAP, 86400 * 90, 1, 100, StartType.Floating); //90 days\r\n        registerPool(\"Category_7\", SUPPLY_HARD_CAP, 86400 * 180, 1, 100, StartType.Floating); //180 days\r\n        registerPool(\"Category_8\", SUPPLY_HARD_CAP, 86400 * 270, 1, 100, StartType.Floating); //270 days\r\n        registerPool(\"Category_9\", SUPPLY_HARD_CAP, 86400 * 365, 1, 100, StartType.Floating); //365 days\r\n    }\r\n\r\n    function _preValidatePurchase(\r\n        address _beneficiary,\r\n        uint256 _weiAmount,\r\n        uint256 _tokens,\r\n        uint256 _bonus\r\n    ) internal {\r\n        super._preValidatePurchase(_beneficiary, _weiAmount, _tokens, _bonus);\r\n        require(now >= START);\r\n        require(now < END);\r\n    }\r\n\r\n    function setUsdEthRate(uint256 _usdEthRate) onlyOperatorOrOwner public {\r\n        rate = _usdEthRate.mul(10).div(4);\r\n        emit UsdEthRateChange(_usdEthRate);\r\n    }\r\n\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256 tokens, uint256 weiLeft) {\r\n        tokens = _weiAmount.mul(rate);\r\n        if (sold.add(tokens) > HARD_CAP) {\r\n            tokens = HARD_CAP.sub(sold);\r\n            //alternative to Math.ceil(tokens / rate)\r\n            uint256 weiSpent = (tokens.add(rate).sub(1)).div(rate);\r\n            weiLeft =_weiAmount.sub(weiSpent);\r\n        } else {\r\n            weiLeft = 0;\r\n        }\r\n    }\r\n\r\n    function directTransfer(address _beneficiary, uint _amount) onlyOwner public {\r\n        require(transferred.add(_amount) <= TRANSFER_HARD_CAP);\r\n        token.mint(_beneficiary, _amount);\r\n        transferred = transferred.add(_amount);\r\n    }\r\n\r\n    function withdrawEth(address _to, uint256 _value) onlyOwner public {\r\n        _to.transfer(_value);\r\n        emit Withdraw(_to, _value);\r\n    }\r\n\r\n    function _getBonus(uint256) internal view returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev function for Daonomic UI\r\n     */\r\n    function getRate(address _token) public view returns (uint256) {\r\n        if (_token == address(0)) {\r\n            return rate * 10 ** 18;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev function for Daonomic UI\r\n     */\r\n    function start() public pure returns (uint256) {\r\n        return START;\r\n    }\r\n\r\n    /**\r\n     * @dev function for Daonomic UI\r\n     */\r\n    function end() public pure returns (uint256) {\r\n        return END;\r\n    }\r\n\r\n    /**\r\n      * @dev function for Daonomic UI\r\n      */\r\n    function initialCap() public pure returns (uint256) {\r\n        return HARD_CAP;\r\n    }\r\n\r\n    function setOperator(address _operator) onlyOwner public {\r\n        operator = _operator;\r\n    }\r\n\r\n    modifier onlyOperatorOrOwner() {\r\n        require(msg.sender == operator || msg.sender == owner);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"canBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TRANSFER_HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_usdEthRate\",\"type\":\"uint256\"}],\"name\":\"setUsdEthRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"directTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferred\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUPPLY_HARD_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhitelists\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getTokensLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"END\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_whitelist\",\"type\":\"address\"},{\"name\":\"_usdEthRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"UsdEthRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"vestingInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startType\",\"type\":\"uint8\"}],\"name\":\"PoolCreatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenHolderCreatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"txId\",\"type\":\"bytes\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RateAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RateRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"QBKSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001582db549afe91a1b764e0b50028028e4289b5a1000000000000000000000000588bb9c52a3acc5e22921944ca6b22a24f1694920000000000000000000000000000000000000000000000000000000000000062","Library":"","SwarmSource":"bzzr://da0e2898162d56c39ef620d1cf3ecb36d9478cc8362dcb1c0477eeed92cb0ff1"}]}