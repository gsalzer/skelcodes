{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * Smartolution.org!\r\n *\r\n * Hey, \r\n * \r\n * You know the rules of ponzi already,\r\n * but let me briefly explain how this one works ;)\r\n * \r\n * This is your personal 45 days magic piggy bank!\r\n * \r\n * 1. Send fixed amount of ether every 24 hours (5900 blocks).\r\n * 2. With every new transaction collect exponentially greater return!\r\n * 3. Keep sending the same amount of ether! (can't trick the code, bro)\r\n * 4. Don't send too often (early transactions will be rejected, uh oh)\r\n * 5. Don't be late, you won't loose your %, but who wants to be the last?\r\n *  \r\n * Play by the rules and save up to 170%!\r\n *\r\n * Gas limit: 150 000 (only the first time, average ~ 50 000)\r\n * Gas price: https://ethgasstation.info/\r\n *\r\n */\r\ncontract Smartolution {\r\n\r\n    struct User {\r\n        uint value;\r\n        uint index;\r\n        uint atBlock;\r\n    }\r\n\r\n    mapping (address => User) public users;\r\n    \r\n    uint public total;\r\n    uint public advertisement;\r\n    uint public team;\r\n   \r\n    address public teamAddress;\r\n    address public advertisementAddress;\r\n\r\n    constructor(address _advertisementAddress, address _teamAddress) public {\r\n        advertisementAddress = _advertisementAddress;\r\n        teamAddress = _teamAddress;\r\n    }\r\n\r\n    function () public payable {\r\n        require(msg.value == 0.00001111 ether || (msg.value >= 0.01 ether && msg.value <= 5 ether), \"Min: 0.01 ether, Max: 5 ether, Exit: 0.00001111 eth\");\r\n\r\n        User storage user = users[msg.sender]; // this is you\r\n\r\n        if (msg.value != 0.00001111 ether) {\r\n            total += msg.value;                 // total \r\n            advertisement += msg.value / 30;    // 3.3% advertisement\r\n            team += msg.value / 200;            // 0.5% team\r\n            \r\n            if (user.value == 0) { \r\n                user.value = msg.value;\r\n                user.atBlock = block.number;\r\n                user.index = 1;     \r\n            } else {\r\n                require(block.number - user.atBlock >= 5900, \"Too soon, try again later\");\r\n\r\n                uint idx = ++user.index;\r\n                uint amount = msg.value > user.value ? user.value : msg.value;\r\n                \r\n                if (idx == 45) {\r\n                    user.value = 0; // game over for you, my friend!\r\n                } else {\r\n                    // if you are late for more than 4 hours (984 blocks)\r\n                    // then next deposit/payment will be delayed accordingly\r\n                    if (block.number - user.atBlock - 5900 < 984) { \r\n                        user.atBlock += 5900;\r\n                    } else {\r\n                        user.atBlock = block.number - 984;\r\n                    }\r\n                }\r\n\r\n                // sprinkle that with some magic numbers and voila\r\n                msg.sender.transfer(amount * idx * idx * (24400 - 500 * amount / 1 ether) / 10000000);\r\n            }\r\n        } else {\r\n            require(user.index <= 10, \"It's too late to request a refund at this point\");\r\n\r\n            msg.sender.transfer(user.index * user.value * 70 / 100);\r\n            user.value = 0;\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * This one is easy, claim reserved ether for the team or advertisement\r\n     */ \r\n    function claim(uint amount) public {\r\n        if (msg.sender == advertisementAddress) {\r\n            require(amount > 0 && amount <= advertisement, \"Can't claim more than was reserved\");\r\n\r\n            advertisement -= amount;\r\n            msg.sender.transfer(amount);\r\n        } else \r\n        if (msg.sender == teamAddress) {\r\n            require(amount > 0 && amount <= team, \"Can't claim more than was reserved\");\r\n\r\n            team -= amount;\r\n            msg.sender.transfer(amount);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertisementAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertisement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"atBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_advertisementAddress\",\"type\":\"address\"},{\"name\":\"_teamAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Smartolution","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e1f3294e25bb72a2fb53addb82aa1a033797e6e3000000000000000000000000fef4c8d00521696871857c12a098f86c6bc5340e","Library":"","SwarmSource":"bzzr://c3bc0ac7f863e301d36021f0273d6928ad417f31c109d15d21e72fb04b38bef6"}]}