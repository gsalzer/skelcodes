{"status":"1","message":"OK","result":[{"SourceCode":"/* file: ./node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol */\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/* eof (./node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol) */\r\n/* file: ./node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol */\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/* eof (./node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol) */\r\n/* file: ./node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol */\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/* eof (./node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol) */\r\n/* file: ./node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol */\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n/* eof (./node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol) */\r\n/* file: ./contracts/vault/TokenVault.sol */\r\n/**\r\n * @title Token Vault contract.\r\n * @dev Vault contract that will allow a beneficiary to release his/her #MIO tokens\r\n * after the release time.\r\n * @version 1.0\r\n * @author Validity Labs AG <info@validitylabs.org>\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\ncontract TokenVault {\r\n    using SafeERC20 for ERC20;\r\n    using SafeMath for uint256;\r\n\r\n    ERC20 public token;\r\n    uint256 public releaseTime;\r\n\r\n    mapping(address => uint256) public lockedBalances;\r\n\r\n    /**\r\n     * @param _token Address of the MioToken to be held.\r\n     * @param _releaseTime Epoch timestamp from which token release is enabled.\r\n     */\r\n    constructor(address _token, uint256 _releaseTime) public {\r\n        require(block.timestamp < _releaseTime);\r\n        token = ERC20(_token);\r\n        releaseTime = _releaseTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the transfer of unlocked tokens to a set of beneficiaries' addresses.\r\n     * @param beneficiaries Array of beneficiaries' addresses that will receive the unlocked tokens.\r\n     */\r\n    function batchRelease(address[] beneficiaries) external {\r\n        uint256 length = beneficiaries.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            releaseFor(beneficiaries[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the caller to transfer unlocked tokens to his/her account.\r\n     */\r\n    function release() public {\r\n        releaseFor(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the caller to transfer unlocked tokens to the beneficiary's address.\r\n     * @param beneficiary The address that will receive the unlocked tokens.\r\n     */\r\n    function releaseFor(address beneficiary) public {\r\n        require(block.timestamp >= releaseTime);\r\n        uint256 amount = lockedBalances[beneficiary];\r\n        require(amount > 0);\r\n        lockedBalances[beneficiary] = 0;\r\n        token.safeTransfer(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows a token holder to add to his/her balance of locked tokens.\r\n     * @param value Amount of tokens to be locked in this vault.\r\n     */\r\n    function addBalance(uint256 value) public {\r\n        addBalanceFor(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * @notice To be called by the account that holds Mio tokens. The caller needs to first approve this vault to\r\n     * transfer tokens on its behalf.\r\n     * The tokens to be locked will be transfered from the caller's account to this vault.\r\n     * The 'value' will be added to the balance of 'account' in this contract.\r\n     * @dev Allows a token holder to add to a another account's balance of locked tokens.\r\n     * @param account Address that will have a balance of locked tokens.\r\n     * @param value Amount of tokens to be locked in this vault.\r\n     */\r\n    function addBalanceFor(address account, uint256 value) public {\r\n        lockedBalances[account] = lockedBalances[account].add(value);\r\n        token.safeTransferFrom(msg.sender, address(this), value);\r\n    }\r\n\r\n     /**\r\n    * @dev Gets the beneficiary's locked token balance\r\n    * @param account Address of the beneficiary\r\n    */\r\n    function getLockedBalance(address account) public view returns (uint256) {\r\n        return lockedBalances[account];\r\n    }\r\n}\r\n\r\n\r\n\r\n/* eof (./contracts/vault/TokenVault.sol) */","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addBalanceFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaries\",\"type\":\"address[]\"}],\"name\":\"batchRelease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"releaseFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TokenVault","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004aae95b78dd81bd3758caac5bded0d554a81d1c5000000000000000000000000000000000000000000000000000000005f71b420","Library":"","SwarmSource":"bzzr://c279630394ee0f48ca509fe681e646cf9bb24f3a42f91f3bf8276a4bb43886cb"}]}