{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n* https://12hourfasttrain.github.io\r\n*/\r\n// MULTIPLIER: 120%\r\n// THT Token Owners: 10%\r\n// Referral: 3%\r\n// Marketing: 3%\r\n// Last Investor: 10%\r\n// Min: 0.05 ETH\r\n// Max: 1 ETH\r\n\r\ninterface TwelveHourTokenInterface {\r\n     function fallback() external payable; \r\n     function buy(address _referredBy) external payable returns (uint256);\r\n     function exit() external;\r\n}\r\n\r\ncontract TwelveHourFastTrain {\r\n\taddress public owner;\r\n\taddress public twelveHourTokenAddress;\r\n    TwelveHourTokenInterface public TwelveHourToken; \r\n\tuint256 constant private THT_TOKEN_OWNERS     = 10;\r\n    address constant private PROMO = 0x31778364A4000F785c59D42Bb80e7E6E60b8457b;\r\n    uint constant public PROMO_PERCENT = 1;\r\n    uint constant public MULTIPLIER = 120;\r\n    uint constant public MAX_DEPOSIT = 1 ether;\r\n    uint constant public MIN_DEPOSIT = 0.05 ether;\r\n\tuint256 constant public VERIFY_REFERRAL_PRICE = 0.01 ether;\r\n\tuint256 constant public REFERRAL             = 3;\r\n\r\n    uint constant public LAST_DEPOSIT_PERCENT = 10;\r\n    \r\n    LastDeposit public last;\r\n\r\n\tmapping(address => bool) public referrals;\r\n\r\n    struct Deposit {\r\n        address depositor; \r\n        uint128 deposit;   \r\n        uint128 expect;    \r\n    }\r\n\r\n    struct LastDeposit {\r\n        address depositor;\r\n        uint expect;\r\n        uint depositTime;\r\n    }\r\n\r\n    Deposit[] public queue;\r\n    uint public currentReceiverIndex = 0; \r\n\r\n\tmodifier onlyOwner() \r\n    {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n    modifier disableContract()\r\n    {\r\n      require(tx.origin == msg.sender);\r\n      _;\r\n    }\r\n\r\n\t/**\r\n    * @dev set TwelveHourToken contract\r\n    * @param _addr TwelveHourToken address\r\n    */\r\n    function setTwelveHourToken(address _addr) public onlyOwner\r\n    {\r\n      twelveHourTokenAddress = _addr;\r\n      TwelveHourToken = TwelveHourTokenInterface(twelveHourTokenAddress);  \r\n    }\r\n\r\n\tconstructor() public \r\n    {\r\n      owner = msg.sender;\r\n    }\r\n\r\n    function () public payable {\r\n        if (msg.sender != twelveHourTokenAddress) invest(0x0);\r\n    }\r\n\r\n    function invest(address _referral) public payable disableContract\r\n    {\r\n\t\tif(msg.value == 0 && msg.sender == last.depositor) {\r\n            require(gasleft() >= 220000, \"We require more gas!\");\r\n            require(last.depositTime + 12 hours < now, \"Last depositor should wait 12 hours to claim reward\");\r\n            \r\n            uint128 money = uint128((address(this).balance));\r\n            if(money >= last.expect){\r\n                last.depositor.transfer(last.expect);\r\n            } else {\r\n                last.depositor.transfer(money);\r\n            }\r\n            \r\n            delete last;\r\n        }\r\n        else if(msg.value > 0){\r\n            require(gasleft() >= 220000, \"We require more gas!\");\r\n            require(msg.value >= MIN_DEPOSIT, \"Deposit must be >= 0.01 ETH and <= 1 ETH\"); \r\n            uint256 valueDeposit = msg.value;\r\n            if(valueDeposit > MAX_DEPOSIT) {\r\n                msg.sender.transfer(valueDeposit - MAX_DEPOSIT);\r\n                valueDeposit = MAX_DEPOSIT;\r\n            }\r\n\t\t\tuint256 _profitTHT     = valueDeposit * THT_TOKEN_OWNERS / 100;\r\n\t\t\tsendProfitTHT(_profitTHT);\r\n            queue.push(Deposit(msg.sender, uint128(valueDeposit), uint128(valueDeposit*MULTIPLIER/100)));\r\n\r\n            last.depositor = msg.sender;\r\n            last.expect += valueDeposit*LAST_DEPOSIT_PERCENT/100;\r\n            last.depositTime = now;\r\n\r\n            uint promo = valueDeposit*PROMO_PERCENT/100;\r\n            PROMO.transfer(promo);\r\n\t\t\tuint devFee = valueDeposit*2/100;\r\n            owner.transfer(devFee);\r\n\t\t\t\r\n\t\t\tuint256 _referralBonus = valueDeposit * REFERRAL/100;\r\n\t\t\tif (_referral != 0x0 && _referral != msg.sender && referrals[_referral] == true) address(_referral).transfer(_referralBonus);\r\n\t\t\telse owner.transfer(_referralBonus);\r\n\r\n            pay();\r\n        }\r\n    }\r\n\r\n\tfunction pay() private {\r\n        uint128 money = uint128((address(this).balance)-last.expect);\r\n        for(uint i=0; i<queue.length; i++){\r\n            uint idx = currentReceiverIndex + i;  \r\n            Deposit storage dep = queue[idx]; \r\n            if(money >= dep.expect){  \r\n                dep.depositor.transfer(dep.expect); \r\n                money -= dep.expect;            \r\n                delete queue[idx];\r\n            }else{\r\n                dep.depositor.transfer(money); \r\n                dep.expect -= money;       \r\n                break;\r\n            }\r\n            if(gasleft() <= 50000)        \r\n                break;\r\n        }\r\n        currentReceiverIndex += i; \r\n    }\r\n\r\n\tfunction sendProfitTHT(uint256 profitTHT) private\r\n    {\r\n        buyTHT(calEthSendToTHT(profitTHT));\r\n        exitTHT();\r\n    }\r\n\t\r\n\tfunction exitTHT() private\r\n    {\r\n      TwelveHourToken.exit();\r\n    }\r\n\t\r\n\t/**\r\n    * @dev calculate dividend eth for THT owner\r\n    * @param _eth value want share\r\n    * value = _eth * 100 / 64\r\n    */\r\n    function calEthSendToTHT(uint256 _eth) private pure returns(uint256 _value)\r\n    {\r\n      _value = _eth * 100 / 64;\r\n    }\r\n\r\n\tfunction buyTHT(uint256 _value) private\r\n    {\r\n      TwelveHourToken.fallback.value(_value)();\r\n    }\r\n\r\n\tfunction totalEthereumBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){\r\n        Deposit storage dep = queue[idx];\r\n        return (dep.depositor, dep.deposit, dep.expect);\r\n    }\r\n\r\n\r\n\tfunction verifyReferrals() public payable disableContract\r\n    {\r\n      require(msg.value >= VERIFY_REFERRAL_PRICE);\r\n      referrals[msg.sender] = true;\r\n      owner.transfer(msg.value);\r\n    }\r\n    \r\n    function getDepositByAddress(address depositor) public view returns (uint256 index, uint256 deposit, uint256 expect) {\r\n        for(uint i=currentReceiverIndex; i<queue.length; ++i){\r\n            Deposit storage dep = queue[i];\r\n            if(dep.depositor == depositor){\r\n                index = i;\r\n                deposit = dep.deposit;\r\n                expect = dep.expect;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function getData()public view returns(uint256 _lastDepositBonus, uint256 _endTime, uint256 _currentlyServing, uint256 _queueLength, address _lastAddress) {\r\n        _lastDepositBonus = address(this).balance;\r\n        _endTime = last.depositTime + 12 hours;\r\n        _currentlyServing = currentReceiverIndex;\r\n        _queueLength = queue.length;\r\n        _lastAddress = last.depositor;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentReceiverIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getData\",\"outputs\":[{\"name\":\"_lastDepositBonus\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_currentlyServing\",\"type\":\"uint256\"},{\"name\":\"_queueLength\",\"type\":\"uint256\"},{\"name\":\"_lastAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDepositByAddress\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"expect\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"expect\",\"type\":\"uint256\"},{\"name\":\"depositTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERIFY_REFERRAL_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"twelveHourTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_DEPOSIT_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"expect\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TwelveHourToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMO_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRAL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DEPOSIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint128\"},{\"name\":\"expect\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_DEPOSIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setTwelveHourToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"verifyReferrals\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TwelveHourFastTrain","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://387b6e9303a75b7f6aac4e0b6d17ef53b807013a0e87b99a8dbe6fb656fdf839"}]}