{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner) onlyOwner {\r\n\t if(_newOwner == 0x0)revert();\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function toUINT112(uint256 a) internal constant returns(uint112) {\r\n    assert(uint112(a) == a);\r\n    return uint112(a);\r\n  }\r\n\r\n  function toUINT120(uint256 a) internal constant returns(uint120) {\r\n    assert(uint120(a) == a);\r\n    return uint120(a);\r\n  }\r\n\r\n  function toUINT128(uint256 a) internal constant returns(uint128) {\r\n    assert(uint128(a) == a);\r\n    return uint128(a);\r\n  }\r\n}\r\n\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\ncontract Token {\r\n \r\n    function totalSupply() public  returns (uint256 supply);\r\n\t \r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n  \r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n  \r\n    function burn( uint256 _value) public returns (bool success);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n  \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  \r\n    event Burn(address indexed from, uint256 value);\r\n}\r\n\r\n\r\n\r\ncontract HealthyCoins is Token, Owned {\r\n    using SafeMath for uint256;\r\n  \r\n    uint public  _totalSupply;\r\n  \r\n    string public   name;         //The Token's name\r\n  \r\n    uint8 public constant decimals = 4;    //Number of decimals of the smallest unit\r\n  \r\n    string public  symbol;    //The Token's symbol \r\n  \r\n    uint256 public mintCount;\r\n  \r\n    uint256 public deleteToken;\r\n  \r\n    uint256 public soldToken;\r\n\r\n   \r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n  \r\n\r\n    // Constructor\r\n    function HealthyCoins(string coinName,string coinSymbol,uint initialSupply) {\r\n        _totalSupply = initialSupply *10**uint256(decimals);                        // Update total supply\r\n        balanceOf[msg.sender] = _totalSupply; \r\n        name = coinName;                                   // Set the name for display purposes\r\n        symbol =coinSymbol;   \r\n        \r\n    }\r\n\r\n   function totalSupply()  public  returns (uint256 totalSupply) {\r\n        return _totalSupply;\r\n    }\r\n\t\r\n    // Send back ether sent to me\r\n    function () {\r\n        revert();\r\n    }\r\n\r\n    // Transfer the balance from owner's account to another account\r\n    function transfer(address _to, uint256 _amount) returns (bool success) {\r\n        // according to AssetToken's total supply, never overflow here\r\n        if (balanceOf[msg.sender] >= _amount\r\n            && _amount > 0) {            \r\n            balanceOf[msg.sender] -= uint112(_amount);\r\n            balanceOf[_to] = _amount.add(balanceOf[_to]).toUINT112();\r\n            soldToken = _amount.add(soldToken).toUINT112();\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n   \r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) returns (bool success) {\r\n        // according to AssetToken's total supply, never overflow here\r\n        if (balanceOf[_from] >= _amount\r\n            && allowed[_from][msg.sender] >= _amount\r\n            && _amount > 0) {\r\n            balanceOf[_from] = balanceOf[_from].sub(_amount).toUINT112();\r\n            allowed[_from][msg.sender] -= _amount;\r\n            balanceOf[_to] = _amount.add(balanceOf[_to]).toUINT112();\r\n            Transfer(_from, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n   \r\n    function approve(address _spender, uint256 _amount) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    //Mint tokens and assign to some one\r\n    function mint(address _owner, uint256 _amount) onlyOwner{\r\n     \r\n            balanceOf[_owner] = _amount.add(balanceOf[_owner]).toUINT112();\r\n            mintCount =  _amount.add(mintCount).toUINT112();\r\n            _totalSupply = _totalSupply.add(_amount).toUINT112();\r\n    }\r\n  //Burn tokens from owner account\r\n  function burn(uint256 _count) public returns (bool success)\r\n  {\r\n          balanceOf[msg.sender] -=uint112( _count);\r\n          deleteToken = _count.add(deleteToken).toUINT112();\r\n         _totalSupply = _totalSupply.sub(_count).toUINT112();\r\n          Burn(msg.sender, _count);\r\n\t\t  return true;\r\n    }\r\n    \r\n  }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deleteToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"coinName\",\"type\":\"string\"},{\"name\":\"coinSymbol\",\"type\":\"string\"},{\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"HealthyCoins","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000017d7840000000000000000000000000000000000000000000000000000000000000000c4865616c746879436f696e7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004484c545900000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://70a745393102c85b8577877c1950c0bba95f82a7d947184c2f0aa0f9d155e8fe"}]}