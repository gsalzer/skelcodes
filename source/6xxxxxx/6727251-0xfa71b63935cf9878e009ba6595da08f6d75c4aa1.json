{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// File: contracts/ERC20Interface.sol\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n// File: contracts/ReentrancyGuard.sol\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n */\r\ncontract ReentrancyGuard {\r\n\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private guardCounter = 1;\r\n\r\n    /**\r\n     * @dev Prevents a function from calling itself, directly or indirectly.\r\n     * Calling one `nonReentrant` function from\r\n     * another is not supported. Instead, you can implement a\r\n     * `private` function doing the actual work, and an `external`\r\n     * wrapper marked as `nonReentrant`.\r\n     */\r\n    modifier nonReentrant() {\r\n        guardCounter += 1;\r\n        uint256 localCounter = guardCounter;\r\n        _;\r\n        require(localCounter == guardCounter);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/PermissionGroups.sol\r\n\r\ncontract PermissionGroups {\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    mapping(address=>bool) internal operators;\r\n    mapping(address=>bool) internal alerters;\r\n    address[] internal operatorsGroup;\r\n    address[] internal alertersGroup;\r\n    uint constant internal MAX_GROUP_SIZE = 50;\r\n\r\n    function PermissionGroups() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAlerter() {\r\n        require(alerters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function getOperators () external view returns(address[]) {\r\n        return operatorsGroup;\r\n    }\r\n\r\n    function getAlerters () external view returns(address[]) {\r\n        return alertersGroup;\r\n    }\r\n\r\n    event TransferAdminPending(address pendingAdmin);\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the pendingAdmin address.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdmin(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(pendingAdmin);\r\n        pendingAdmin = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(newAdmin);\r\n        AdminClaimed(newAdmin, admin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    event AdminClaimed( address newAdmin, address previousAdmin);\r\n\r\n    /**\r\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\r\n     */\r\n    function claimAdmin() public {\r\n        require(pendingAdmin == msg.sender);\r\n        AdminClaimed(pendingAdmin, admin);\r\n        admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n\r\n    event AlerterAdded (address newAlerter, bool isAdd);\r\n\r\n    function addAlerter(address newAlerter) public onlyAdmin {\r\n        require(!alerters[newAlerter]); // prevent duplicates.\r\n        require(alertersGroup.length < MAX_GROUP_SIZE);\r\n\r\n        AlerterAdded(newAlerter, true);\r\n        alerters[newAlerter] = true;\r\n        alertersGroup.push(newAlerter);\r\n    }\r\n\r\n    function removeAlerter (address alerter) public onlyAdmin {\r\n        require(alerters[alerter]);\r\n        alerters[alerter] = false;\r\n\r\n        for (uint i = 0; i < alertersGroup.length; ++i) {\r\n            if (alertersGroup[i] == alerter) {\r\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\r\n                alertersGroup.length--;\r\n                AlerterAdded(alerter, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    event OperatorAdded(address newOperator, bool isAdd);\r\n\r\n    function addOperator(address newOperator) public onlyAdmin {\r\n        require(!operators[newOperator]); // prevent duplicates.\r\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\r\n\r\n        OperatorAdded(newOperator, true);\r\n        operators[newOperator] = true;\r\n        operatorsGroup.push(newOperator);\r\n    }\r\n\r\n    function removeOperator (address operator) public onlyAdmin {\r\n        require(operators[operator]);\r\n        operators[operator] = false;\r\n\r\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\r\n            if (operatorsGroup[i] == operator) {\r\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\r\n                operatorsGroup.length -= 1;\r\n                OperatorAdded(operator, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Withdrawable.sol\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens or ethers\r\n * @author Ilan Doron\r\n * @dev This allows to recover any tokens or Ethers received in a contract.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract Withdrawable is PermissionGroups {\r\n\r\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw all ERC20 compatible tokens\r\n     * @param token ERC20 The address of the token contract\r\n     */\r\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\r\n        require(token.transfer(sendTo, amount));\r\n        TokenWithdraw(token, amount, sendTo);\r\n    }\r\n\r\n    event EtherWithdraw(uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw Ethers\r\n     */\r\n    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\r\n        sendTo.transfer(amount);\r\n        EtherWithdraw(amount, sendTo);\r\n    }\r\n}\r\n\r\n// File: contracts/KyberPayWrapper.sol\r\n\r\ninterface KyberNetwork {\r\n    function tradeWithHint(\r\n        ERC20 src,\r\n        uint srcAmount,\r\n        ERC20 dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId,\r\n        bytes hint)\r\n    external\r\n    payable\r\n    returns(uint);\r\n}\r\n\r\n\r\ncontract KyberPayWrapper is Withdrawable, ReentrancyGuard {\r\n    ERC20 constant public ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n\r\n    struct PayData {\r\n        ERC20 src;\r\n        uint srcAmount;\r\n        ERC20 dest;\r\n        address destAddress;\r\n        uint maxDestAmount;\r\n        uint minConversionRate;\r\n        address walletId;\r\n        bytes paymentData;\r\n        bytes hint;\r\n        KyberNetwork kyberNetworkProxy;\r\n    }\r\n\r\n    function () public payable {} /* solhint-disable-line no-empty-blocks */\r\n\r\n    event ProofOfPayment(address indexed _payer, address indexed _payee, address _token, uint _amount, bytes _data);\r\n\r\n    function pay(\r\n        ERC20 src,\r\n        uint srcAmount,\r\n        ERC20 dest,\r\n        address destAddress,\r\n        uint maxDestAmount,\r\n        uint minConversionRate,\r\n        address walletId,\r\n        bytes paymentData,\r\n        bytes hint,\r\n        KyberNetwork kyberNetworkProxy\r\n    ) public nonReentrant payable\r\n    {\r\n\r\n        require(src != address(0));\r\n        require(dest != address(0));\r\n        require(destAddress != address(0));\r\n\r\n        if (src == ETH_TOKEN_ADDRESS) require(srcAmount == msg.value);\r\n\r\n        PayData memory payData = PayData({\r\n            src:src,\r\n            srcAmount:srcAmount,\r\n            dest:dest,\r\n            destAddress:destAddress,\r\n            maxDestAmount:maxDestAmount,\r\n            minConversionRate:minConversionRate,\r\n            walletId:walletId,\r\n            paymentData:paymentData,\r\n            hint:hint,\r\n            kyberNetworkProxy:kyberNetworkProxy\r\n        });\r\n\r\n        uint paidAmount = (src == dest) ? doPayWithoutKyber(payData) : doPayWithKyber(payData);\r\n\r\n        // log as event\r\n        ProofOfPayment(msg.sender ,destAddress, dest, paidAmount, paymentData);\r\n    }\r\n\r\n    function doPayWithoutKyber(PayData memory payData) internal returns (uint paidAmount) {\r\n\r\n        uint returnAmount;\r\n\r\n        if (payData.srcAmount > payData.maxDestAmount) {\r\n            paidAmount = payData.maxDestAmount;\r\n            returnAmount = payData.srcAmount - payData.maxDestAmount;\r\n        } else {\r\n            paidAmount = payData.srcAmount;\r\n            returnAmount = 0;\r\n        }\r\n\r\n        if (payData.src == ETH_TOKEN_ADDRESS) {\r\n            payData.destAddress.transfer(paidAmount);\r\n\r\n            // return change\r\n            if (returnAmount > 0) msg.sender.transfer(returnAmount);\r\n        } else {\r\n            require(payData.src.transferFrom(msg.sender, payData.destAddress, paidAmount));\r\n        }\r\n    }\r\n\r\n    function doPayWithKyber(PayData memory payData) internal returns (uint paidAmount) {\r\n\r\n        uint returnAmount;\r\n        uint wrapperSrcBalanceBefore;\r\n        uint destAddressBalanceBefore;\r\n        uint wrapperSrcBalanceAfter;\r\n        uint destAddressBalanceAfter;\r\n        uint srcAmountUsed;\r\n\r\n        if (payData.src != ETH_TOKEN_ADDRESS) {\r\n            require(payData.src.transferFrom(msg.sender, address(this), payData.srcAmount));\r\n            require(payData.src.approve(payData.kyberNetworkProxy, 0));\r\n            require(payData.src.approve(payData.kyberNetworkProxy, payData.srcAmount));\r\n        }\r\n\r\n        (wrapperSrcBalanceBefore, destAddressBalanceBefore) = getBalances(\r\n            payData.src,\r\n            payData.dest,\r\n            payData.destAddress\r\n        );\r\n\r\n        paidAmount = doTradeWithHint(payData);\r\n        if (payData.src != ETH_TOKEN_ADDRESS) require(payData.src.approve(payData.kyberNetworkProxy, 0));\r\n\r\n        (wrapperSrcBalanceAfter, destAddressBalanceAfter) = getBalances(payData.src, payData.dest, payData.destAddress);\r\n\r\n        // verify the amount the user got is same as returned from Kyber Network\r\n        require(destAddressBalanceAfter > destAddressBalanceBefore);\r\n        require(paidAmount == (destAddressBalanceAfter - destAddressBalanceBefore));\r\n\r\n        // calculate the returned change amount\r\n        require(wrapperSrcBalanceBefore >= wrapperSrcBalanceAfter);\r\n        srcAmountUsed = wrapperSrcBalanceBefore - wrapperSrcBalanceAfter;\r\n\r\n        require(payData.srcAmount >= srcAmountUsed);\r\n        returnAmount = payData.srcAmount - srcAmountUsed;\r\n\r\n        // return to sender the returned change\r\n        if (returnAmount > 0) {\r\n            if (payData.src == ETH_TOKEN_ADDRESS) {\r\n                msg.sender.transfer(returnAmount);\r\n            } else {\r\n                require(payData.src.transfer(msg.sender, returnAmount));\r\n            }\r\n        }\r\n    }\r\n\r\n    function doTradeWithHint(PayData memory payData) internal returns (uint paidAmount) {\r\n        paidAmount = payData.kyberNetworkProxy.tradeWithHint.value(msg.value)({\r\n            src:payData.src,\r\n            srcAmount:payData.srcAmount,\r\n            dest:payData.dest,\r\n            destAddress:payData.destAddress,\r\n            maxDestAmount:payData.maxDestAmount,\r\n            minConversionRate:payData.minConversionRate,\r\n            walletId:payData.walletId,\r\n            hint:payData.hint\r\n        });\r\n    }\r\n\r\n    function getBalances (ERC20 src, ERC20 dest, address destAddress)\r\n        internal\r\n        view\r\n        returns (uint wrapperSrcBalance, uint destAddressBalance)\r\n    {\r\n        if (src == ETH_TOKEN_ADDRESS) {\r\n            wrapperSrcBalance = address(this).balance;\r\n        } else {\r\n            wrapperSrcBalance = src.balanceOf(address(this));\r\n        }\r\n\r\n        if (dest == ETH_TOKEN_ADDRESS) {\r\n            destAddressBalance = destAddress.balance;\r\n        } else {\r\n            destAddressBalance = dest.balanceOf(destAddress);\r\n        }\r\n    } \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"alerter\",\"type\":\"address\"}],\"name\":\"removeAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_TOKEN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAlerter\",\"type\":\"address\"}],\"name\":\"addAlerter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminQuickly\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAlerters\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"src\",\"type\":\"address\"},{\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"name\":\"dest\",\"type\":\"address\"},{\"name\":\"destAddress\",\"type\":\"address\"},{\"name\":\"maxDestAmount\",\"type\":\"uint256\"},{\"name\":\"minConversionRate\",\"type\":\"uint256\"},{\"name\":\"walletId\",\"type\":\"address\"},{\"name\":\"paymentData\",\"type\":\"bytes\"},{\"name\":\"hint\",\"type\":\"bytes\"},{\"name\":\"kyberNetworkProxy\",\"type\":\"address\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_payer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_payee\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ProofOfPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pendingAdmin\",\"type\":\"address\"}],\"name\":\"TransferAdminPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousAdmin\",\"type\":\"address\"}],\"name\":\"AdminClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAlerter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"AlerterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOperator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"}]","ContractName":"KyberPayWrapper","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://717b2647d52feff9be7c46f45c145ca20bfacf2a5c11a39d1522e9859276e422"}]}