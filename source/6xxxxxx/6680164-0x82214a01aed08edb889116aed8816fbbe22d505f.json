{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract StandardToken  {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n\r\n}\r\n\r\ncontract usingTokenContract {\r\n\r\n     StandardToken token;\r\n     mapping(bytes32 => bool) public administrators;\r\n     uint256 public stakingRequirement = 5e18;\r\n     uint256 public messagingRequirement = 5e18;\r\n     \r\n     modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[keccak256(_customerAddress)]);\r\n        _;\r\n    }\r\n     \r\n\r\n     function usingTokenContract() {\r\n         token = StandardToken(0x07d9e49ea402194bf48a8276dafb16e4ed633317);\r\n         administrators[0x7f5be223ca67e25627c96e839775b3401c1ba4d617afc27a77a866e071ed401d] = true; \r\n     }\r\n     \r\n     function setStakingRequirement(uint256 _amountOfTokens)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        stakingRequirement = _amountOfTokens;\r\n    }\r\n\r\n    function setMessagingRequirement(uint256 _amountOfTokens)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        messagingRequirement = _amountOfTokens;\r\n    }\r\n     \r\n  \r\n    function userTokenBalance(address _userAddress) constant returns(uint256 balance) {\r\n         return token.balanceOf(_userAddress);\r\n     }\r\n     \r\n    \r\n    function validateUser(address _userAddress) public constant returns(bool) {\r\n        if(userTokenBalance(_userAddress)>=stakingRequirement) {\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function validateUserForMessaging(address _userAddress) public constant returns(bool) {\r\n        if(userTokenBalance(_userAddress)>=messagingRequirement) {\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"setMessagingRequirement\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"userTokenBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"validateUserForMessaging\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"setStakingRequirement\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"validateUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"messagingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"}]","ContractName":"usingTokenContract","CompilerVersion":"v0.4.11+commit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ea25012f444e1c8da3430622eb8b43e6ef3b74209af8fea58ef9781f9f29c87b"}]}