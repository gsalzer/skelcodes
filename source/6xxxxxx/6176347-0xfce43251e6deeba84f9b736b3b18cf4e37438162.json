{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface tokenRecipient {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n\r\ncontract braggerContract {\r\n\r\n/*********************************/\r\n/*********** MAPPINGS ************/\r\n/*********************************/\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    mapping (address => bool) private isUser;\r\n    mapping (address => bool) private hasPicture;\r\n    mapping (address => string) private userWalletToUserName;\r\n    mapping (string => address) private userNameToUserWallet;\r\n    mapping (string => string) private userNameToPicture;\r\n    mapping (address => string) private userWalletToPicture;\r\n    mapping (address => uint256) private fineLevel;\r\n\r\n/*********************************/\r\n/************* EVENTS ************/\r\n/*********************************/\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n/*********************************/\r\n/******** FREE VARIABLES *********/\r\n/*********************************/\r\n\r\n    address public ownerAddress = 0x000;\r\n    address private bragAddress = 0x845EC9f9C0650b98f70E05fc259F4A04f6AC366e;\r\n\r\n    string private initialQuote = \"Teach your people with your wisdom.\";\r\n    /******SET PICTURE*/\r\n    string private initialPicture = \"https://cdn2.iconfinder.com/data/icons/ios-7-icons/50/user_male2-512.png\";\r\n\r\n    uint256 basicFine = 25000000000000000;\r\n\r\n    uint256 blocks;\r\n    uint256 totalBraggedValue = 0;\r\n    \r\n    uint256 winningpot = 0;\r\n    \r\n    uint256 totalbrags = 0;\r\n\r\n/*********************************/\r\n/*********** DATA TYPES **********/\r\n/*********************************/\r\n\r\n    struct Bragger{\r\n        address braggerAddress;\r\n        uint256 braggedAmount;\r\n        string braggerQuote;\r\n    }\r\n\r\n    Bragger[] private braggers;\r\n\r\n    struct User{\r\n        address userAddress;\r\n        string userName;\r\n    }\r\n\r\n    User[] private users;\r\n\r\n/*********************************/\r\n/*********** MODIFIER ************/\r\n/*********************************/\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCreator() {\r\n        require(msg.sender == ownerAddress);\r\n        _;\r\n    }\r\n\r\n\r\n/*********************************/\r\n/********** CONSTRUCTOR **********/\r\n/*********************************/\r\n\r\n    constructor() public {\r\n        blocks=0;\r\n        ownerAddress = msg.sender;\r\n    }\r\n\r\n    function random() private view returns (uint8) {\r\n        return uint8(uint256(keccak256(block.timestamp, block.difficulty))%251);\r\n    }\r\n\r\n    function random2() private view returns (uint8) {\r\n        return uint8(uint256(keccak256(blocks, block.difficulty))%251);\r\n    }\r\n\r\n    function random3() private view returns (uint8) {\r\n        return uint8(uint256(keccak256(blocks, block.difficulty))%braggers.length);\r\n    }\r\n\r\n/*********************************/\r\n/************ GETTERS ************/\r\n/*********************************/\r\n\r\n    function getTotalBraggedVolume() public view returns (uint256 _amount){\r\n        return totalBraggedValue;\r\n    }\r\n\r\n    function getCurrentBragKing() public view returns(address _bragger, uint256 _amount, string _quote, string _username, string _picture){\r\n        _bragger = braggers[braggers.length-1].braggerAddress;\r\n        _amount = braggers[braggers.length-1].braggedAmount;\r\n        _quote = braggers[braggers.length-1].braggerQuote;\r\n        if(isAlreadyUser(_bragger)){\r\n            _username = getUserNameByWallet(_bragger);\r\n        } else {\r\n            _username = \"\";\r\n        }\r\n\r\n        if(hasPicture[_bragger]){\r\n            _picture = userWalletToPicture[_bragger];\r\n        } else {\r\n            _picture = initialPicture;\r\n        }\r\n\r\n        return (_bragger, _amount, _quote, _username, _picture);\r\n    }\r\n\r\n    function arrayLength()public view returns(uint256 length){\r\n        length = braggers.length;\r\n        return length;\r\n    }\r\n\r\n    function getBraggerAtIndex(uint256 _index) public view returns(address _bragger, uint256 _brag, string _username, string _picture){\r\n        _bragger = braggers[_index].braggerAddress;\r\n        _brag = braggers[_index].braggedAmount;\r\n\r\n        if(isAlreadyUser(_bragger)){\r\n            _username = getUserNameByWallet(_bragger);\r\n        } else {\r\n            _username = \"\";\r\n        }\r\n\r\n         if(hasPicture[_bragger]){\r\n            _picture = userWalletToPicture[_bragger];\r\n        } else {\r\n            _picture = initialPicture;\r\n        }\r\n\r\n        return (_bragger, _brag, _username, _picture);\r\n    }\r\n\r\n    function getUserNameByWallet(address _wallet) public view returns (string _username){\r\n        require(isAlreadyUser(_wallet));\r\n        _username = userWalletToUserName[_wallet];\r\n        return _username;\r\n    }\r\n\r\n     function getUserPictureByWallet(address _wallet) public view returns (string _url){\r\n        require(isAlreadyUser(_wallet));\r\n        _url = userWalletToPicture[_wallet];\r\n        return _url;\r\n    }\r\n\r\n    function getUserWalletByUsername(string _username) public view returns(address _address){\r\n        address _user = userNameToUserWallet[_username];\r\n        return (_user);\r\n    }\r\n\r\n    function getUserPictureByUsername(string _username) public view returns(string _url){\r\n        _url = userNameToPicture[_username];\r\n        return (_url);\r\n    }\r\n\r\n    function getFineLevelOfAddress(address _user) public view returns(uint256 _fineLevel, uint256 _fineAmount){\r\n        _fineLevel = fineLevel[_user];\r\n        _fineAmount = _fineLevel * basicFine;\r\n        return (_fineLevel, _fineAmount);\r\n    }\r\n\r\n    function getFineLevelOfUsername(string _username) public view returns(uint256 _fineLevel, uint256 _fineAmount){\r\n        address _user = userNameToUserWallet[_username];\r\n        _fineLevel = fineLevel[_user];\r\n        _fineAmount = _fineLevel * basicFine;\r\n        return (_fineLevel, _fineAmount);\r\n    }\r\n    \r\n    function getTotalBrags() public view returns(uint256){\r\n        return totalbrags;\r\n    }\r\n    \r\n    function getWinnerPot() public view returns(uint256){\r\n        return winningpot;\r\n    }\r\n\r\n/*********************************/\r\n/****** BRAGING FUNCTIONS ********/\r\n/*********************************/\r\n\r\n    function getCurrentPot() public view returns (uint256 _amount){\r\n        return address(this).balance;\r\n    }\r\n\r\n\r\n    function brag() public payable{\r\n\r\n        uint256 shortage = SafeMath.mul(30,SafeMath.div(msg.value, 100));\r\n\r\n        if(braggers.length != 0){\r\n         require(braggers[braggers.length-1].braggedAmount < msg.value);\r\n        }\r\n\r\n        Bragger memory _bragger = Bragger({\r\n            braggerAddress: msg.sender,\r\n            braggedAmount: msg.value,\r\n            braggerQuote: initialQuote\r\n        });\r\n\r\n        braggers.push(_bragger);\r\n\r\n        totalBraggedValue = totalBraggedValue + msg.value;\r\n        \r\n        winningpot = winningpot + SafeMath.sub(msg.value, shortage);\r\n\r\n        bragAddress.transfer(shortage);\r\n\r\n        if(random() == random2()){\r\n            address sender = msg.sender;\r\n            sender.transfer(SafeMath.mul(SafeMath.div(address(this).balance,100), 70));\r\n            uint256 luckyIndex = random3();\r\n            address luckyGuy = braggers[luckyIndex].braggerAddress;\r\n            luckyGuy.transfer(address(this).balance);\r\n        }\r\n\r\n        blocks = SafeMath.add(blocks, random());\r\n        totalbrags += 1;\r\n    }\r\n\r\n/*********************************/\r\n/******* USER INTERACTION ********/\r\n/*********************************/\r\n\r\n    function setTheKingsQuote(string _message) public payable{\r\n        if(fineLevel[msg.sender] > 0){\r\n            require(msg.value > (basicFine * fineLevel[msg.sender]));\r\n        }\r\n        address currentKing = braggers[braggers.length-1].braggerAddress;\r\n        require(msg.sender == currentKing);\r\n        braggers[braggers.length-1].braggerQuote = _message;\r\n    }\r\n\r\n/*********************************/\r\n/********* USER CREATION *********/\r\n/*********************************/\r\n\r\n    function isAlreadyUser(address _address) public view returns (bool status){\r\n        if (isUser[_address]){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function hasProfilePicture(address _address) public view returns (bool status){\r\n        if (isUser[_address]){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function createNewUser(string _username, string _pictureUrl) public {\r\n\r\n        require(!isAlreadyUser(msg.sender));\r\n\r\n        User memory _user = User({\r\n            userAddress: msg.sender,\r\n            userName: _username\r\n        });\r\n\r\n        userWalletToUserName[msg.sender] = _username;\r\n        userNameToUserWallet[_username] = msg.sender;\r\n        userNameToPicture[_username] = _pictureUrl;\r\n        userWalletToPicture[msg.sender] = _pictureUrl;\r\n        fineLevel[msg.sender] = 0;\r\n\r\n        users.push(_user) - 1;\r\n        isUser[msg.sender] = true;\r\n        hasPicture[msg.sender] = true;\r\n    }\r\n\r\n/*********************************/\r\n/******** OWNER FUNCTIONS ********/\r\n/*********************************/\r\n\r\n    function resetQuote()public onlyCreator{\r\n        braggers[braggers.length-1].braggerQuote = initialQuote;\r\n        fineLevel[braggers[braggers.length-1].braggerAddress] = fineLevel[braggers[braggers.length-1].braggerAddress] + 1;\r\n    }\r\n\r\n    function resetUsername(string _username)public onlyCreator{\r\n        address user = userNameToUserWallet[_username];\r\n        userWalletToUserName[user] = \"Mick\";\r\n        fineLevel[user] = fineLevel[user] + 1;\r\n    }\r\n\r\n    function resetUserPicture(string _username)public onlyCreator{\r\n        address user = userNameToUserWallet[_username];\r\n        userWalletToPicture[user] = initialPicture;\r\n        fineLevel[user] = fineLevel[user] + 1;\r\n    }\r\n\r\n    /********** ResetUserPicture */\r\n\r\n/*********************************/\r\n/******** LEGACY FUNCIONS ********/\r\n/*********************************/\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function reset()public onlyCreator {\r\n        selfdestruct(ownerAddress);\r\n    }\r\n\r\n}\r\n\r\n/*********************************/\r\n/*********** CALC LIB ************/\r\n/*********************************/\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBraggerAtIndex\",\"outputs\":[{\"name\":\"_bragger\",\"type\":\"address\"},{\"name\":\"_brag\",\"type\":\"uint256\"},{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_picture\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"getUserWalletByUsername\",\"outputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_pictureUrl\",\"type\":\"string\"}],\"name\":\"createNewUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"getFineLevelOfUsername\",\"outputs\":[{\"name\":\"_fineLevel\",\"type\":\"uint256\"},{\"name\":\"_fineAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetQuote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBragKing\",\"outputs\":[{\"name\":\"_bragger\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_quote\",\"type\":\"string\"},{\"name\":\"_username\",\"type\":\"string\"},{\"name\":\"_picture\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasProfilePicture\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBrags\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getUserPictureByWallet\",\"outputs\":[{\"name\":\"_url\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAlreadyUser\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWinnerPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getUserNameByWallet\",\"outputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalBraggedVolume\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"resetUserPicture\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"getUserPictureByUsername\",\"outputs\":[{\"name\":\"_url\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"setTheKingsQuote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFineLevelOfAddress\",\"outputs\":[{\"name\":\"_fineLevel\",\"type\":\"uint256\"},{\"name\":\"_fineAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arrayLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentPot\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"brag\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"resetUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"braggerContract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7b21df31c80dccef0b622ddc0b8ac10f7f745e912c446da0ced191b823318bfb"}]}