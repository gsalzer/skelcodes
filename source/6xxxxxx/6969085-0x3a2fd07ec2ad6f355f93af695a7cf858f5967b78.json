{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/MTVote.sol\r\n\r\ncontract TVCrowdsale {\r\n    uint256 public currentRate;\r\n    function buyTokens(address _beneficiary) public payable;\r\n}\r\n\r\ncontract TVToken {\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function safeTransfer(address _to, uint256 _value, bytes _data) public;\r\n}\r\n\r\n\r\ncontract MTVote is Ownable {\r\n    address public TVTokenAddress;\r\n    address public TVCrowdsaleAddress;\r\n    address public manager;\r\n    address public wallet;\r\n    address internal checkAndBuySender;\r\n    bytes4 constant TOKEN_RECEIVED = bytes4(keccak256(\"onTokenReceived(address,uint256,bytes)\"));\r\n    bool pause = false;\r\n\r\n    mapping(uint => uint) public targets;\r\n    uint public targetIdsSize = 0;\r\n    uint[] public targetIds;\r\n\r\n    modifier onlyOwnerOrManager() {\r\n        require(msg.sender == owner || manager == msg.sender);\r\n        _;\r\n    }\r\n\r\n    event TokenReceived(address from, uint value, uint targetId);\r\n    event changeAndVoteEvent(address voter, uint rate, uint value, uint targetId);\r\n\r\n    constructor(\r\n        address _TVTokenAddress,\r\n        address _TVCrowdsaleAddress,\r\n        address _manager,\r\n        address _wallet) public {\r\n\r\n        manager = _manager;\r\n        wallet = _wallet;\r\n        TVTokenAddress = _TVTokenAddress;\r\n        TVCrowdsaleAddress = _TVCrowdsaleAddress;\r\n    }\r\n\r\n    function changeAndVote(uint targetId) public payable {\r\n        require(!pause);\r\n        uint rate = TVCrowdsale(TVCrowdsaleAddress).currentRate();\r\n\r\n        TVCrowdsale(TVCrowdsaleAddress).buyTokens.value(msg.value)(this);\r\n        bytes memory data = toBytes(targetId);\r\n        checkAndBuySender = msg.sender;\r\n        TVToken(TVTokenAddress).safeTransfer(this, msg.value * rate, data);\r\n\r\n        emit changeAndVoteEvent(msg.sender, rate, msg.value, targetId);\r\n    }\r\n\r\n    function onTokenReceived(address _from, uint256 _value, bytes _data) public returns (bytes4) {\r\n        require(msg.sender == TVTokenAddress);\r\n        require(!pause);\r\n        uint targetId = uint256(convertBytesToBytes32(_data));\r\n        targets[targetId] += _value;\r\n        TVToken(TVTokenAddress).transfer(wallet, _value);\r\n        _from = this == _from ? checkAndBuySender : _from;\r\n        checkAndBuySender = address(0);\r\n\r\n        bool inList = false;\r\n        for (uint i = 0; i < targetIdsSize; i++) {\r\n            if (targetIds[i] == targetId) {\r\n                inList = true;\r\n            }\r\n        }\r\n        if (!inList) {\r\n            targetIds.push(targetId);\r\n            targetIdsSize++;\r\n        }\r\n\r\n        emit TokenReceived(_from, _value, targetId);\r\n        return TOKEN_RECEIVED;\r\n    }\r\n\r\n    function setPause(bool isPaused) public onlyOwnerOrManager {\r\n        pause = isPaused;\r\n    }\r\n\r\n    function clear() public onlyOwnerOrManager {\r\n        targetIdsSize = 0;\r\n    }\r\n\r\n    function changeTVTokenAddress(address newAddress) public onlyOwnerOrManager {\r\n        TVTokenAddress = newAddress;\r\n    }\r\n\r\n    function changeTVCrowdsaleAddress(address newAddress) public onlyOwnerOrManager {\r\n        TVCrowdsaleAddress = newAddress;\r\n    }\r\n\r\n    function setManager(address _manager) public onlyOwner {\r\n        manager = _manager;\r\n    }\r\n\r\n    function convertBytesToBytes32(bytes inBytes) internal pure returns (bytes32 out) {\r\n        if (inBytes.length == 0) {\r\n            return 0x0;\r\n        }\r\n\r\n        assembly {\r\n            out := mload(add(inBytes, 32))\r\n        }\r\n    }\r\n\r\n    function bytesToUint(bytes32 b) internal pure returns (uint number){\r\n        for (uint i = 0; i < b.length; i++) {\r\n            number = number + uint(b[i]) * (2 ** (8 * (b.length - (i + 1))));\r\n        }\r\n    }\r\n\r\n    function toBytes(uint256 x) internal pure returns (bytes b) {\r\n        b = new bytes(32);\r\n        assembly {mstore(add(b, 32), x)}\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TVTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clear\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targetIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetIdsSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targetId\",\"type\":\"uint256\"}],\"name\":\"changeAndVote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeTVCrowdsaleAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeTVTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TVCrowdsaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_TVTokenAddress\",\"type\":\"address\"},{\"name\":\"_TVCrowdsaleAddress\",\"type\":\"address\"},{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"targetId\",\"type\":\"uint256\"}],\"name\":\"TokenReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"targetId\",\"type\":\"uint256\"}],\"name\":\"changeAndVoteEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MTVote","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f3e693175db47264c99eca0f1c1c4a2c1aed3bd7000000000000000000000000aae1be740222fb3f1125a7326fce947bbdb62b7e0000000000000000000000001fed8ba9a9fdd72ef9038046ad148beb413491b80000000000000000000000007141a5427d5a88bea817b6535650f784176fdd0f","Library":"","SwarmSource":"bzzr://b52972799759752c5d8742f6305d824335637676669eb1320b90ab353fa18830"}]}