{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n\r\ncontract POOHMOWHALE \r\n{\r\n    \r\n    /**\r\n     * Modifiers\r\n     */\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier notPOOH(address aContract)\r\n    {\r\n        require(aContract != address(poohContract));\r\n        _;\r\n    }\r\n   \r\n    /**\r\n     * Events\r\n     */\r\n    event Deposit(uint256 amount, address depositer);\r\n    event Purchase(uint256 amountSpent, uint256 tokensReceived);\r\n    event Sell();\r\n    event Payout(uint256 amount, address creditor);\r\n    event Transfer(uint256 amount, address paidTo);\r\n\r\n   /**\r\n     * Global Variables\r\n     */\r\n    address owner;\r\n    address game;\r\n    bool payDoublr;\r\n    uint256 tokenBalance;\r\n    POOH poohContract;\r\n    DOUBLR doublr;\r\n    \r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() \r\n    public \r\n    {\r\n        owner = msg.sender;\r\n        poohContract = POOH(address(0x4C29d75cc423E8Adaa3839892feb66977e295829));\r\n        doublr = DOUBLR(address(0xd69b75D5Dc270E4F6cD664Ac2354d12423C5AE9e));\r\n        tokenBalance = 0;\r\n        payDoublr = true;\r\n    }\r\n    \r\n    function() payable public \r\n    {\r\n        donate();\r\n    }\r\n     \r\n    /**\r\n     * Only way to give POOHMOWHALE ETH is via by using fallback\r\n     */\r\n    function donate() \r\n    internal \r\n    {\r\n        //You have to send more than 1000000 wei\r\n        require(msg.value > 1000000 wei);\r\n        uint256 ethToTransfer = address(this).balance;\r\n\r\n        //if we are in doublr-mode, pay the assigned doublr\r\n        if(payDoublr)\r\n        {\r\n            if(ethToTransfer > 0)\r\n            {\r\n                address(doublr).transfer(ethToTransfer - 1000000);\r\n                doublr.payout.gas(1000000)();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            uint256 PoohEthInContract = address(poohContract).balance;\r\n           \r\n            // if POOH contract balance is less than 5 ETH, POOH is dead and there's no use pumping it\r\n            if(PoohEthInContract < 5 ether)\r\n            {\r\n\r\n                poohContract.exit();\r\n                tokenBalance = 0;\r\n                \r\n                owner.transfer(ethToTransfer);\r\n                emit Transfer(ethToTransfer, address(owner));\r\n            }\r\n\r\n            //let's buy/sell tokens to give dividends to POOH tokenholders\r\n            else\r\n            {\r\n                tokenBalance = myTokens();\r\n                 //if token balance is greater than 0, sell and rebuy \r\n                if(tokenBalance > 0)\r\n                {\r\n                    poohContract.exit();\r\n                    tokenBalance = 0;\r\n\r\n                    if(ethToTransfer > 0)\r\n                    {\r\n                        poohContract.buy.value(ethToTransfer)(0x0);\r\n                    }\r\n                    else\r\n                    {\r\n                        poohContract.buy.value(msg.value)(0x0);\r\n\r\n                    }\r\n       \r\n                }\r\n                else\r\n                {   \r\n                    //we have no tokens, let's buy some if we have eth\r\n                    if(ethToTransfer > 0)\r\n                    {\r\n                        poohContract.buy.value(ethToTransfer)(0x0);\r\n                        tokenBalance = myTokens();\r\n                        //Emit a deposit event.\r\n                        emit Deposit(msg.value, msg.sender);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Number of tokens the contract owns.\r\n     */\r\n    function myTokens() \r\n    public \r\n    view \r\n    returns(uint256)\r\n    {\r\n        return poohContract.myTokens();\r\n    }\r\n    \r\n    /**\r\n     * Number of dividends owed to the contract.\r\n     */\r\n    function myDividends() \r\n    public \r\n    view \r\n    returns(uint256)\r\n    {\r\n        return poohContract.myDividends(true);\r\n    }\r\n\r\n    /**\r\n     * ETH balance of contract\r\n     */\r\n    function ethBalance() \r\n    public \r\n    view \r\n    returns (uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * Address of game contract that ETH gets sent to\r\n     */\r\n    function assignedDoublrContract() \r\n    public \r\n    view \r\n    returns (address)\r\n    {\r\n        return address(doublr);\r\n    }\r\n    \r\n    /**\r\n     * A trap door for when someone sends tokens other than the intended ones so the overseers can decide where to send them.\r\n     */\r\n    function transferAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens) \r\n    public \r\n    onlyOwner() \r\n    notPOOH(tokenAddress) \r\n    returns (bool success) \r\n    {\r\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\r\n    }\r\n    \r\n     /**\r\n     * Owner can update which Doublr the POOHMOWHALE pays to\r\n     */\r\n    function changeDoublr(address doublrAddress) \r\n    public\r\n    onlyOwner()\r\n    {\r\n        doublr = DOUBLR(doublrAddress);\r\n    }\r\n\r\n    /**\r\n     * Owner can update POOHMOWHALE to stop paying doublr and act as whale\r\n     */\r\n    function switchToWhaleMode(bool answer)\r\n    public\r\n    onlyOwner()\r\n    {\r\n        payDoublr = answer;\r\n    }\r\n}\r\n\r\n//Define the POOH token for the POOHMOWHALE\r\ncontract POOH \r\n{\r\n    function buy(address) public payable returns(uint256);\r\n    function sell(uint256) public;\r\n    function withdraw() public;\r\n    function myTokens() public view returns(uint256);\r\n    function myDividends(bool) public view returns(uint256);\r\n    function exit() public;\r\n    function totalEthereumBalance() public view returns(uint);\r\n}\r\n\r\n\r\n//Define the Doublr contract for the POOHMOWHALE\r\ncontract DOUBLR\r\n{\r\n    function payout() public; \r\n    function myDividends() public view returns(uint256);\r\n    function withdraw() public;\r\n}\r\n\r\n//Define ERC20Interface.transfer, so POOHMOWHALE can transfer tokens accidently sent to it.\r\ncontract ERC20Interface \r\n{\r\n    function transfer(address to, uint256 tokens) \r\n    public \r\n    returns (bool success);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"assignedDoublrContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"doublrAddress\",\"type\":\"address\"}],\"name\":\"changeDoublr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"answer\",\"type\":\"bool\"}],\"name\":\"switchToWhaleMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"depositer\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creditor\",\"type\":\"address\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paidTo\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"POOHMOWHALE","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7431daa6770d6b285117d184dae3f9c33030953f253e6033dac9762fd8fc7cba"}]}