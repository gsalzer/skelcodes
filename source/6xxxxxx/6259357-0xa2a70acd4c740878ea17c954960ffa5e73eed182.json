{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n*                                Stargate V1.0\r\n*\r\n* \r\n _______ _________ _______  _______  _______  _______ _________ _______ \r\n(  ____ \\\\__   __/(  ___  )(  ____ )(  ____ \\(  ___  )\\__   __/(  ____ \\\r\n| (    \\/   ) (   | (   ) || (    )|| (    \\/| (   ) |   ) (   | (    \\/\r\n| (_____    | |   | (___) || (____)|| |      | (___) |   | |   | (__    \r\n(_____  )   | |   |  ___  ||     __)| | ____ |  ___  |   | |   |  __)   \r\n      ) |   | |   | (   ) || (\\ (   | | \\_  )| (   ) |   | |   | (      \r\n/\\____) |   | |   | )   ( || ) \\ \\__| (___) || )   ( |   | |   | (____/\\\r\n\\_______)   )_(   |/     \\||/   \\__/(_______)|/     \\|   )_(   (_______/\r\n                                                                      \r\n*\r\n*\r\n*                       Website:  https://playstargate.com\r\n*\r\n*                       Discord:  https://discord.gg/PnbFSa2\r\n*\r\n*                       Support:  ethergamedev@gmail.com\r\n*\r\n*\r\n*\r\n*   Stargate is a unique game of chance where you can win 10X or more of you\r\n*   original wager.  Stargate features a progressive jackpot which grows with each bet.\r\n*\r\n*\r\n*\r\n*\r\n*\r\n*/\r\n\r\n\r\n// <ORACLIZE_API>\r\n/*\r\nCopyright (c) 2015-2016 Oraclize SRL\r\nCopyright (c) 2016 Oraclize LTD\r\n\r\n\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\n\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\n\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\r\n\r\npragma solidity ^0.4.0; //please import oraclizeAPI_pre0.4.sol when solidity < 0.4.0\r\n\r\ncontract OraclizeI {\r\n    address public cbAddress;\r\n    function query(uint _timestamp, string _datasource, string _arg) payable returns (bytes32 _id);\r\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) payable returns (bytes32 _id);\r\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) payable returns (bytes32 _id);\r\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) payable returns (bytes32 _id);\r\n    function getPrice(string _datasource) returns (uint _dsprice);\r\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\r\n    function useCoupon(string _coupon);\r\n    function setProofType(byte _proofType);\r\n    function setConfig(bytes32 _config);\r\n    function setCustomGasPrice(uint _gasPrice);\r\n}\r\ncontract OraclizeAddrResolverI {\r\n    function getAddress() returns (address _addr);\r\n}\r\ncontract usingOraclize {\r\n    uint constant day = 60*60*24;\r\n    uint constant week = 60*60*24*7;\r\n    uint constant month = 60*60*24*30;\r\n    byte constant proofType_NONE = 0x00;\r\n    byte constant proofType_TLSNotary = 0x10;\r\n    byte constant proofStorage_IPFS = 0x01;\r\n    uint8 constant networkID_auto = 0;\r\n    uint8 constant networkID_mainnet = 1;\r\n    uint8 constant networkID_testnet = 2;\r\n    uint8 constant networkID_morden = 2;\r\n    uint8 constant networkID_consensys = 161;\r\n\r\n    OraclizeAddrResolverI OAR;\r\n    \r\n    OraclizeI oraclize;\r\n    modifier oraclizeAPI {\r\n        if(address(OAR)==0) oraclize_setNetwork(networkID_auto);\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        _;\r\n    }\r\n    modifier coupon(string code){\r\n        oraclize = OraclizeI(OAR.getAddress());\r\n        oraclize.useCoupon(code);\r\n        _;\r\n    }\r\n\r\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\r\n        if (getCodeSize(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed)>0){ //mainnet\r\n            OAR = OraclizeAddrResolverI(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1)>0){ //ropsten testnet\r\n            OAR = OraclizeAddrResolverI(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1);\r\n            return true;\r\n        }\r\n        if (getCodeSize(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa)>0){ //browser-solidity\r\n            OAR = OraclizeAddrResolverI(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function __callback(bytes32 myid, string result) {\r\n        __callback(myid, result, new bytes(0));\r\n    }\r\n    function __callback(bytes32 myid, string result, bytes proof) {\r\n    }\r\n    \r\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource);\r\n    }\r\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\r\n        return oraclize.getPrice(datasource, gaslimit);\r\n    }\r\n    \r\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(0, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query.value(price)(timestamp, datasource, arg);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource);\r\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\r\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\r\n    }\r\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\r\n        uint price = oraclize.getPrice(datasource, gaslimit);\r\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\r\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\r\n    }\r\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\r\n        return oraclize.cbAddress();\r\n    }\r\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\r\n        return oraclize.setProofType(proofP);\r\n    }\r\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\r\n        return oraclize.setCustomGasPrice(gasPrice);\r\n    }    \r\n    function oraclize_setConfig(bytes32 config) oraclizeAPI internal {\r\n        return oraclize.setConfig(config);\r\n    }\r\n\r\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\r\n        assembly {\r\n            _size := extcodesize(_addr)\r\n        }\r\n    }\r\n\r\n\r\n    function parseAddr(string _a) internal returns (address){\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i=2; i<2+2*20; i+=2){\r\n            iaddr *= 256;\r\n            b1 = uint160(tmp[i]);\r\n            b2 = uint160(tmp[i+1]);\r\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\r\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\r\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\r\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\r\n            iaddr += (b1*16+b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n\r\n\r\n    function strCompare(string _a, string _b) internal returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n   } \r\n\r\n    function indexOf(string _haystack, string _needle) internal returns (int)\r\n    {\r\n        bytes memory h = bytes(_haystack);\r\n        bytes memory n = bytes(_needle);\r\n        if(h.length < 1 || n.length < 1 || (n.length > h.length)) \r\n            return -1;\r\n        else if(h.length > (2**128 -1))\r\n            return -1;                                  \r\n        else\r\n        {\r\n            uint subindex = 0;\r\n            for (uint i = 0; i < h.length; i ++)\r\n            {\r\n                if (h[i] == n[0])\r\n                {\r\n                    subindex = 1;\r\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\r\n                    {\r\n                        subindex++;\r\n                    }   \r\n                    if(subindex == n.length)\r\n                        return int(i);\r\n                }\r\n            }\r\n            return -1;\r\n        }   \r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    // parseInt\r\n    function parseInt(string _a) internal returns (uint) {\r\n        return parseInt(_a, 0);\r\n    }\r\n\r\n    // parseInt(parseFloat*10^_b)\r\n    function parseInt(string _a, uint _b) internal returns (uint) {\r\n        bytes memory bresult = bytes(_a);\r\n        uint mint = 0;\r\n        bool decimals = false;\r\n        for (uint i=0; i<bresult.length; i++){\r\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\r\n                if (decimals){\r\n                   if (_b == 0) break;\r\n                    else _b--;\r\n                }\r\n                mint *= 10;\r\n                mint += uint(bresult[i]) - 48;\r\n            } else if (bresult[i] == 46) decimals = true;\r\n        }\r\n        if (_b > 0) mint *= 10**_b;\r\n        return mint;\r\n    }\r\n    \r\n    function uint2str(uint i) internal returns (string){\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint len;\r\n        while (j != 0){\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n    \r\n    \r\n\r\n}\r\n// </ORACLIZE_API>\r\n\r\n\r\n\r\n// Stargate game data setup\r\ncontract Stargate is usingOraclize {\r\n    using SafeMath for uint;\r\n\r\n    // ---------------------- Events\r\n\r\n    event LogResult(\r\n        address _wagerer,\r\n        uint _result,\r\n        uint _profit,\r\n        uint _wagered,\r\n        uint _category,\r\n        bool _win,\r\n        uint _originalBet\r\n    );\r\n\r\n    event onWithdraw(\r\n        address customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n\r\n    event betError(\r\n        address indexed _wagerer,\r\n        uint _result\r\n    );\r\n\r\n    event modError(\r\n        address indexed _wagerer,\r\n        uint _result\r\n    );\r\n\r\n     // Result announcement events\r\n    event LOG_NewBet(address _wagerer, uint amount);\r\n    event Deposit(address indexed sender, uint value);\r\n    event Loss(address _wagerer, uint _block);                  // Category 0\r\n    event Cat1(address _wagerer, uint _block);                  // Category 1\r\n    event Cat2(address _wagerer, uint _block);                  // Category 2\r\n    event Cat3(address _wagerer, uint _block);                  // Category 3\r\n    event Cat4(address _wagerer, uint _block);                  // Category 4\r\n    event Cat5(address _wagerer, uint _block);                  // Category 5\r\n    event Cat6(address _wagerer, uint _block);                  // Category 6\r\n    event Cat7(address _wagerer, uint _block);                  // Category 7\r\n    event Cat8(address _wagerer, uint _block);                  // Category 8\r\n    event Cat9(address _wagerer, uint _block);                  // Category 9\r\n    event Cat10(address _wagerer, uint _block);                 // Category 10\r\n    event Cat11(address _wagerer, uint _block);                 // Category 11\r\n    event Cat12(address _wagerer, uint _block);                 // Category 12\r\n    event Cat13(address _wagerer, uint _block);                 // Category 13\r\n    event Cat14(address _wagerer, uint _block);                 // Category 14\r\n    event Cat15(address _wagerer, uint _block);                 // Category 15\r\n    event Cat16(address _wagerer, uint _block);                 // Category 16\r\n    event Cat17(address _wagerer, uint _block);                 // Category 17\r\n    event Cat18(address _wagerer, uint _block);                 // Category 18\r\n    event Cat19(address _wagerer, uint _block);                 // Category 19    \r\n    event BetConcluded(address _wagerer, uint _block);          // Debug event\r\n\r\n    event LogConstructorInitiated(string nextStep);\r\n    event LogPriceUpdated(string price);\r\n    event LogNewOraclizeQuery(string description);\r\n\r\n   \r\n    // ---------------------- Modifiers\r\n\r\n    // Makes sure bet is within Min and Max Range\r\n    modifier betIsValid(uint _betSize) {\r\n        require(_betSize <= maxBet);\r\n        require(_betSize >= minBet);\r\n      _;\r\n    }\r\n\r\n      // only people with winnings\r\n    modifier onlyPlayers(address _player) {\r\n        require(playerAccount[_player] > 0);\r\n        _;\r\n    }\r\n\r\n    // Requires the game to be currently active\r\n    modifier gameIsActive {\r\n      require(gamePaused == false);\r\n      _;\r\n    }\r\n\r\n    // Require msg.sender to be owner\r\n    modifier onlyOwner {\r\n      require(msg.sender == owner); \r\n      _;\r\n    }\r\n\r\n    modifier onlyOraclize {\r\n        if (msg.sender != oraclize_cbAddress()) throw; \r\n        _;\r\n    }\r\n\r\n    modifier onlyIfBetExist(bytes32 myid) {\r\n        if(bets[myid].playerAddress == address(0x0)) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfValidGas(uint newGasLimit) {\r\n        if (ORACLIZE_GAS_LIMIT + newGasLimit < ORACLIZE_GAS_LIMIT) throw;\r\n        if (newGasLimit < 25000) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyIfNotProcessed(bytes32 myid) {\r\n        if (bets[myid].numberRolled > 0) throw;\r\n        _;\r\n    }\r\n\r\n    struct Bet {\r\n        address playerAddress;\r\n        uint amountBet;\r\n        uint numberRolled;\r\n        uint originalBet;\r\n        bool instaPay;\r\n    }\r\n\r\n    // ---------------------- Variables\r\n\r\n    // Configurables\r\n    uint maxProfit;\r\n\r\n    mapping (address => uint256) public playerAccount;\r\n    uint public maxProfitAsPercentOfHouse;\r\n    uint public minBet = 5e16;  //0.05ETH\r\n    uint public maxBet = 2e17;  //0.20ETH  This will increase with contract value\r\n\r\n    mapping (address => uint256) public playerETHWagered;\r\n    mapping (address => uint256) public playerETHWon;\r\n \r\n    address private owner;\r\n    address private bankroll;\r\n    bool gamePaused;\r\n    bool boolJackpotFee;\r\n    uint jackpotDivisor;\r\n\r\n    //Random Number Functions\r\n    uint public randN = 3;          //numberof random bytes to be returned\r\n    uint public randDelay = 0;      //number of seconds to delay result\r\n    uint public maxRange = 1000000; //Max Random Number\r\n\r\n    // Trackers\r\n    //uint  public totalSpins;\r\n    uint  public totalBets;\r\n     uint  public totalCalls;\r\n    uint  public totalETHWagered;\r\n    //mapping (uint => uint) public contractBalance;\r\n    \r\n    // Is betting allowed? (Administrative function, in the event of unforeseen bugs)\r\n    bool public gameActive;\r\n\r\n\r\n    uint256 public jackpot;\r\n    uint256 private houseAccount;\r\n    uint256 public bankAccount;\r\n    uint256 public contractBalance;\r\n    uint private maxPayoutMultiple;\r\n    uint256 public totalPlayerBalance;\r\n    uint public lastResult;\r\n    uint256 private lastBlock;\r\n    uint48 private lastSpinBlock; \r\n    uint lastCategory;\r\n    uint public lastProfit;\r\n    uint public numBets;\r\n\r\n    mapping(uint => uint256) winThreshold;\r\n    mapping(uint => uint) winPercentage;\r\n\r\n    \r\n\r\n    mapping (bytes32 => Bet) public bets;\r\n    bytes32[] public betsKeys;\r\n\r\n    uint[] public arrResult;\r\n\r\n    uint ORACLIZE_GAS_LIMIT = 400000;   //250000;\r\n    uint safeGas = 2300;\r\n    uint public customGasPrice = 7000000000;  //7GWEI\r\n\r\n    uint public oracleFee = 0;\r\n\r\n    \r\n\r\n    \r\n    uint256 public lastOraclePrice;\r\n    //uint256 public contractBalance;\r\n    uint public lastOracleFee;\r\n\r\n    bool public allowReferrals;\r\n    uint public referralPercent;\r\n    uint public minReferAmount = 100000000000000000;    //0.1 ETH min wagered to qualify for a masternode\r\n\r\n    // ---------------------- Functions \r\n\r\n    constructor() public  {\r\n\r\n        owner = msg.sender;\r\n\r\n        //oraclize_setProof(proofType_Ledger);\r\n\r\n        // Set starting variables\r\n        gameActive  = true;\r\n\r\n        allowReferrals = false;\r\n        referralPercent = 1;\r\n\r\n        jackpot = 0;\r\n        totalPlayerBalance = 0;\r\n        houseAccount = 0;\r\n        bankAccount = 0;\r\n        maxPayoutMultiple = 15;\r\n\r\n        boolJackpotFee = false;\r\n        jackpotDivisor = 100;\r\n\r\n        winThreshold[0] = 900000;\r\n        winThreshold[1] = 2;\r\n        winThreshold[2] = 299;\r\n        winThreshold[3] = 3128;\r\n        winThreshold[4] = 16961;\r\n        winThreshold[5] = 30794;\r\n        winThreshold[6] = 44627;\r\n        winThreshold[7] = 46627;\r\n        winThreshold[8] = 49627;\r\n        winThreshold[9] = 51627;\r\n        winThreshold[10] = 53127;\r\n        winThreshold[11] = 82530;\r\n        winThreshold[12] = 150423;\r\n        winThreshold[13] = 203888;\r\n        winThreshold[14] = 257353;\r\n        winThreshold[15] = 310818;\r\n        winThreshold[16] = 364283;\r\n        winThreshold[17] = 417748;\r\n        winThreshold[18] = 471213;\r\n\r\n        winPercentage[2] = 1000;        \r\n        winPercentage[3] = 500;        \r\n        winPercentage[4] = 200;         \r\n        winPercentage[5] = 200;         \r\n        winPercentage[6] = 200;         \r\n        winPercentage[7] = 500;        \r\n        winPercentage[8] = 750;         \r\n        winPercentage[9] = 400;         \r\n        winPercentage[10] = 400;       \r\n        winPercentage[11] = 250;        \r\n        winPercentage[12] = 150;        \r\n        winPercentage[13] = 75;         \r\n        winPercentage[14] = 75;         \r\n        winPercentage[15] = 75;         \r\n        winPercentage[16] = 100;        \r\n        winPercentage[17] = 75;        \r\n        winPercentage[18] = 75;        \r\n        winPercentage[19] = 33;        \r\n\r\n    }\r\n\r\n     function deposit()\r\n        public\r\n        payable\r\n    {\r\n        addContractBalance(msg.value);\r\n        bankAccount = SafeMath.add(bankAccount, msg.value);\r\n    }\r\n\r\n\r\n    function withdrawWinnings()\r\n        onlyPlayers(msg.sender)\r\n        public\r\n    {\r\n        // setup data\r\n        uint256 _winnings = playerAccount[msg.sender]; \r\n        require( _winnings < address(this).balance - jackpot);\r\n        playerAccount[msg.sender] = 0;\r\n        totalPlayerBalance = SafeMath.sub(totalPlayerBalance, _winnings);\r\n        msg.sender.transfer(_winnings);\r\n        subContractBalance(_winnings);\r\n            \r\n        // fire event\r\n        emit onWithdraw(msg.sender, _winnings);\r\n\r\n    }\r\n\r\n     function()\r\n        payable {\r\n\r\n        bet(true, 0x0000000000000000000000000000000000000000);\r\n    }\r\n\r\n  // Execute bet.\r\n    function bet(bool _instaPay, address _referrer) \r\n      public\r\n      payable\r\n      betIsValid(msg.value)   \r\n    {\r\n        require(msg.value > 0);\r\n        require(gameActive);\r\n\r\n\r\n        totalETHWagered += msg.value;\r\n        playerETHWagered[msg.sender] = SafeMath.add(playerETHWagered[msg.sender], msg.value);\r\n\r\n        addContractBalance(msg.value);\r\n\r\n        uint betValue = msg.value - oracleFee;\r\n\r\n        if (allowReferrals && _referrer != 0x0000000000000000000000000000000000000000 && (_referrer != msg.sender) && (playerETHWagered[_referrer] >= minReferAmount)){\r\n            \r\n            uint refererAmount = SafeMath.div(SafeMath.mul(betValue,referralPercent),100);\r\n            betValue = SafeMath.sub(betValue,refererAmount);\r\n            playerAccount[_referrer] = SafeMath.add(playerAccount[_referrer], refererAmount);\r\n            totalPlayerBalance = SafeMath.add(totalPlayerBalance, refererAmount);\r\n        }\r\n\r\n        \r\n       \r\n        LOG_NewBet(msg.sender, msg.value);\r\n\r\n        // Increment total number of bets\r\n        totalBets += 1;\r\n\r\n        oraclize_setCustomGasPrice(customGasPrice);\r\n\r\n        //bytes32 myid = oraclize_newRandomDSQuery(randDelay, randN, ORACLIZE_GAS_LIMIT + safeGas);\r\n\r\n        bytes32 myid = oraclize_query(\"WolframAlpha\", \"random number between 1 and 1000000\", ORACLIZE_GAS_LIMIT + safeGas);\r\n\r\n        bets[myid] = Bet(msg.sender, betValue, 0, msg.value, _instaPay);\r\n        betsKeys.push(myid);\r\n\r\n  \r\n    }\r\n\r\n     function __callback(bytes32 myid, string strResult)\r\n        onlyOraclize \r\n        onlyIfBetExist(myid)\r\n        onlyIfNotProcessed(myid)\r\n      {\r\n         \r\n        totalCalls = totalCalls + 1;\r\n        uint result = parseInt(strResult);\r\n        bets[myid].numberRolled = result;\r\n        arrResult.push(result);\r\n\r\n        //uint result = parseInt(strResult);\r\n\r\n        bets[myid].numberRolled = result;\r\n        arrResult.push(result);\r\n\r\n\r\n        uint256 betAmount = bets[myid].amountBet;\r\n       \r\n        jackpot = SafeMath.add(jackpot,SafeMath.div(betAmount,jackpotDivisor));\r\n        \r\n        if (boolJackpotFee){\r\n            betAmount = SafeMath.sub(betAmount,SafeMath.div(betAmount,jackpotDivisor));\r\n        }\r\n\r\n        uint profit = 0;\r\n        uint category = 0;\r\n\r\n        lastResult = result;\r\n\r\n        checkResult(bets[myid].playerAddress, betAmount, category, result, myid);\r\n       \r\n        emit BetConcluded(bets[myid].playerAddress, result);\r\n    \r\n        }\r\n    \r\n\r\n\r\nfunction checkResult(address target, uint256 betAmount, uint category, uint _result, bytes32 myid) internal {\r\n  \r\n  uint _originalBet = bets[myid].amountBet;\r\n  bool _instaPay = bets[myid].instaPay;\r\n\r\n  uint profit = 0; \r\n\r\n   if (_result > winThreshold[0]) {   \r\n            // Player has lost. \r\n\r\n            category = 0;\r\n            emit Loss(target, _result);\r\n           \r\n        \r\n        } else if (_result < winThreshold[1]) {  //2\r\n            // Player has won the jackpot!\r\n      \r\n            // Get profit amount via jackpot\r\n            profit = jackpot;    \r\n            category = 1;\r\n            jackpot = 0;\r\n            // Emit events\r\n            emit Cat1(target, _result);\r\n          \r\n\r\n           if (_instaPay){\r\n                if(profit > 0){\r\n                    if (profit <= (address(this).balance - jackpot - totalPlayerBalance)){\r\n                        target.transfer(profit);\r\n                        subContractBalance(profit);\r\n                        playerETHWon[target] = SafeMath.add(playerETHWon[target], profit);\r\n                    }else\r\n                        {\r\n                        playerAccount[target] = SafeMath.add(playerAccount[target],profit);\r\n                        totalPlayerBalance = SafeMath.add(totalPlayerBalance, profit);\r\n                        playerETHWon[target] = SafeMath.add(playerETHWon[target], profit);\r\n                        }\r\n\r\n                    }\r\n                }else{\r\n                    playerAccount[target] = SafeMath.add(playerAccount[target], profit);\r\n                    totalPlayerBalance = SafeMath.add(totalPlayerBalance, profit);\r\n                    playerETHWon[target] = SafeMath.add(playerETHWon[target], profit);\r\n                }\r\n\r\n\r\n            } else {\r\n                if (_result < winThreshold[2]) {  //299\r\n                    category = 2;\r\n                    emit Cat2(target, _result);\r\n                } else if (_result < winThreshold[3]) {  //3128\r\n                    category = 3;\r\n                    emit Cat3(target, _result);\r\n                } else if (_result < winThreshold[4]) {  //16961\r\n                    category = 4;\r\n                    emit Cat4(target, _result);\r\n                } else if (_result < winThreshold[5]) {  //30794\r\n                    category = 5;\r\n                    emit Cat5(target, _result);\r\n                } else if (_result < winThreshold[6]) {  //44627\r\n                    category = 6;\r\n                    emit Cat6(target, _result);\r\n                } else if (_result < winThreshold[7]) {  //46627\r\n                    category = 7;\r\n                    emit Cat7(target, _result);\r\n                } else if (_result < winThreshold[8]) {  //49127\r\n                    category = 8;\r\n                    emit Cat8(target, _result);\r\n                } else if (_result < winThreshold[9]) {  //51627\r\n                    category = 9;\r\n                    emit Cat9(target, _result);\r\n                } else if (_result < winThreshold[10]) {  //53127\r\n                    category = 10;\r\n                    emit Cat10(target, _result);\r\n                } else if (_result < winThreshold[11]) {  //82530\r\n                    category = 11;\r\n                    emit Cat11(target, _result);\r\n                } else if (_result < winThreshold[12]) {  //150423\r\n                    category = 12;\r\n                    emit Cat12(target, _result);\r\n                } else if (_result < winThreshold[13]) {  //203888\r\n                    category = 13;\r\n                    emit Cat13(target, _result);\r\n                } else if (_result < winThreshold[14]) {  //257353\r\n                    category = 14;\r\n                    emit Cat14(target, _result);\r\n                } else if (_result < winThreshold[15]) {  //310818\r\n                    category = 15;\r\n                    emit Cat15(target, _result);\r\n                } else if (_result < winThreshold[16]) {  //364283\r\n                    category = 16;\r\n                    emit Cat16(target, _result);\r\n                } else if (_result < winThreshold[17]) {  //417748\r\n                    category = 17;\r\n                    emit Cat17(target, _result);\r\n                } else if (_result < winThreshold[18]) {  //471213\r\n                    category = 18;\r\n                    emit Cat18(target, _result);\r\n                } else {\r\n                    category = 19;\r\n                    emit Cat19(target, _result);\r\n                }\r\n                lastCategory = category;\r\n            }\r\n\r\n            distributePrize(target, betAmount, category, _result, _originalBet, _instaPay);\r\n\r\n        }\r\n\r\n    \r\n\r\n    //Distribute Prize\r\n    function distributePrize(address target, uint256 betAmount, uint category, uint _result, uint _originalBet, bool _instaPay) internal {\r\n        \r\n        uint256 profit = 0;\r\n     \r\n        if (category >= 2 && category <= 19){\r\n            profit = SafeMath.div(SafeMath.mul(betAmount,winPercentage[category]),100);\r\n        }\r\n\r\n        if (_instaPay){\r\n            if(profit>0){\r\n\r\n                uint256 _maxWithdraw = address(this).balance;\r\n                if (profit <= _maxWithdraw){\r\n                    target.transfer(profit);\r\n                    subContractBalance(profit);\r\n                } else {\r\n                    playerAccount[target] = SafeMath.add(playerAccount[target],profit);\r\n                    totalPlayerBalance = SafeMath.add(totalPlayerBalance, profit);\r\n                    playerETHWon[target] = SafeMath.add(playerETHWon[target], profit);\r\n                }\r\n\r\n\r\n            }\r\n        }else{\r\n            playerAccount[target] = SafeMath.add(playerAccount[target], profit);\r\n            totalPlayerBalance = SafeMath.add(totalPlayerBalance, profit);\r\n        }\r\n\r\n        lastProfit = profit;\r\n        playerETHWon[target] = SafeMath.add(playerETHWon[target], profit);\r\n\r\n\r\n        emit LogResult(target, _result, profit, betAmount, category, true, _originalBet);\r\n   \r\n        \r\n    }\r\n\r\n\r\n     function setWinPercentage(uint _category, uint _percentage) public onlyOwner {\r\n        winPercentage[_category] = _percentage;\r\n    }\r\n\r\n     function setWinThreshold(uint _category, uint _threshold) public onlyOwner {\r\n        winThreshold[_category] = _threshold;\r\n    }\r\n\r\n     function getWinPercentage(uint _category) public view returns(uint){\r\n        return(winPercentage[_category]);\r\n    }\r\n\r\n    function getWinThreshold(uint _category) public view returns(uint){\r\n        return(winThreshold[_category]);\r\n    }\r\n\r\n    // Subtracts from the contract balance tracking var\r\n    function subContractBalance(uint256 sub) internal {\r\n      contractBalance = contractBalance.sub(sub);\r\n\r\n    }\r\n\r\n    // Adds to the contract balance tracking var\r\n    function addContractBalance(uint add) internal {\r\n      contractBalance = contractBalance.add(add);\r\n    }\r\n\r\n    // Only owner can set minBet   \r\n    function ownerSetMinBet(uint newMinimumBet) public\r\n    onlyOwner\r\n    {\r\n      minBet = newMinimumBet;\r\n    }\r\n\r\n    // Only owner can set maxBet   \r\n    function ownerSetMaxBet(uint newMaximumBet) public\r\n    onlyOwner\r\n    {\r\n      maxBet = newMaximumBet;\r\n    }\r\n\r\n    function setGasLimit(uint _gas) public onlyOwner   {\r\n        ORACLIZE_GAS_LIMIT = _gas;\r\n    }\r\n\r\n    function getGasLimit() public view returns(uint){\r\n        return(ORACLIZE_GAS_LIMIT);\r\n    }\r\n\r\n\r\n    // If, for any reason, betting needs to be paused (very unlikely), this will freeze all bets.\r\n    function pauseGame() public onlyOwner {\r\n        gameActive = false;\r\n    }\r\n\r\n    // The converse of the above, resuming betting if a freeze had been put in place.\r\n    function resumeGame() public onlyOwner {\r\n        gameActive = true;\r\n    }\r\n\r\n    // Administrative function to change the owner of the contract.\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function setOracleFee(uint256 _newFee) public onlyOwner {\r\n        oracleFee = _newFee;\r\n    }\r\n\r\n    function setAllowReferral(bool _allow) public onlyOwner {\r\n        allowReferrals = _allow;\r\n    }\r\n\r\n    function setReferralPercent(uint _percent) public onlyOwner {\r\n        referralPercent = _percent;\r\n    }\r\n\r\n    function setMaxRange(uint _newRange) public onlyOwner {\r\n        maxRange = _newRange;\r\n    }\r\n\r\n    function setRandN(uint _newN) public onlyOwner {\r\n        randN = _newN;\r\n    }\r\n\r\n    function setRandDelay(uint _newDelay) public onlyOwner {\r\n        randDelay = _newDelay;\r\n    }\r\n\r\n    function setMinReferer(uint _newAmount) public onlyOwner {\r\n        minReferAmount = _newAmount;\r\n    }\r\n\r\n    function setStargateCustomGasPrice(uint _newPrice) public onlyOwner {\r\n        customGasPrice = _newPrice;\r\n    }\r\n    \r\n    function getContractBalance() public view returns(uint256) {\r\n        return(address(this).balance);\r\n    }\r\n\r\n    function getMyBalance() public view returns(uint256) {\r\n        return(playerAccount[msg.sender]);\r\n    }\r\n\r\n    function getJackpot() public view returns(uint256){\r\n        return(jackpot);\r\n    }\r\n\r\n    function getBankAccount() public view returns(uint256){\r\n        return(bankAccount);\r\n    }\r\n\r\n    function getLastBlock() public view returns(uint256){\r\n        return(lastBlock);\r\n    }\r\n\r\n    function getLastResult() public view returns(uint){\r\n        return(lastResult);\r\n    }\r\n\r\n    function getLastCategory() public view returns(uint){\r\n        return(lastCategory);\r\n    }\r\n    function getLastProfit() public view returns(uint){\r\n        return(lastProfit);\r\n    }\r\n\r\n    function refund(address _to, uint256 _Amount) public onlyOwner \r\n    \r\n    {\r\n        uint256 _maxRefund = address(this).balance - jackpot - totalPlayerBalance;\r\n\r\n       require(_Amount <= _maxRefund);\r\n        _to.transfer(_Amount);\r\n        subContractBalance(_Amount);\r\n\r\n        \r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_category\",\"type\":\"uint256\"},{\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setWinThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBankAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGasLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setStargateCustomGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxProfitAsPercentOfHouse\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"strResult\",\"type\":\"string\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastOraclePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newN\",\"type\":\"uint256\"}],\"name\":\"setRandN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"myid\",\"type\":\"bytes32\"},{\"name\":\"result\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"__callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCalls\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_Amount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"customGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_instaPay\",\"type\":\"bool\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"bet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerETHWon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastOracleFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setReferralPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_category\",\"type\":\"uint256\"}],\"name\":\"getWinPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumBet\",\"type\":\"uint256\"}],\"name\":\"ownerSetMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betsKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalETHWagered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setMinReferer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setAllowReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastCategory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRange\",\"type\":\"uint256\"}],\"name\":\"setMaxRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randDelay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxRange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_category\",\"type\":\"uint256\"}],\"name\":\"getWinThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerETHWagered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setOracleFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaximumBet\",\"type\":\"uint256\"}],\"name\":\"ownerSetMaxBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"playerAddress\",\"type\":\"address\"},{\"name\":\"amountBet\",\"type\":\"uint256\"},{\"name\":\"numberRolled\",\"type\":\"uint256\"},{\"name\":\"originalBet\",\"type\":\"uint256\"},{\"name\":\"instaPay\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"randN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDelay\",\"type\":\"uint256\"}],\"name\":\"setRandDelay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawWinnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minReferAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setGasLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracleFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_category\",\"type\":\"uint256\"},{\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setWinPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_profit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_wagered\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_category\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_win\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_originalBet\",\"type\":\"uint256\"}],\"name\":\"LogResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"uint256\"}],\"name\":\"betError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"uint256\"}],\"name\":\"modError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LOG_NewBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Loss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat4\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat5\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat6\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat7\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat8\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat9\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat10\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat11\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat12\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat13\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat14\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat15\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat16\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat17\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat18\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"Cat19\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"BetConcluded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"nextStep\",\"type\":\"string\"}],\"name\":\"LogConstructorInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"string\"}],\"name\":\"LogPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"description\",\"type\":\"string\"}],\"name\":\"LogNewOraclizeQuery\",\"type\":\"event\"}]","ContractName":"Stargate","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://93962c7cd10a10384ff2b9b0bcba0fce98ec1171f1bdd090bfe003e014ed02fd"}]}