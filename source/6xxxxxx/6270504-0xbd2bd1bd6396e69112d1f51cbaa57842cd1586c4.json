{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract GameEthContractV1{\r\n\r\naddress owner;\r\nmapping (address => uint256) deposits;\r\nmapping (address => uint256) totalPaid;\r\nmapping (address => uint256) paydates;\r\nmapping (address => uint256) notToPay;\r\n\r\nuint minWei = 40000000000000000; // default 0.04 ether\r\nuint secInDay = 86400; // min payment step 1 day (in seconds)\r\nuint gasForPayout = 50000; // gas used for payout\r\nuint lastBlockTime;\r\nuint inCommission = 3; // deposit commission 3%\r\n\r\nevent DepositIn(\r\n        address indexed _from,\r\n        uint256 _value,\r\n        uint256 _date\r\n    );\r\n    \r\nevent PayOut(\r\n        address indexed _from,\r\n        uint256 _value,\r\n        uint256 _date\r\n    );\r\n    \r\n\r\nconstructor(address _owner) public {\r\n\towner = _owner; \r\n\tlastBlockTime = now;\r\n}\r\n\r\n// Payable method, payouts for message sender\r\nfunction () public payable{\r\n \trequire(now >= lastBlockTime && msg.value >= minWei); // last block time < block.timestamp, check min deposit\r\n \tlastBlockTime = now; // set last block time to block.timestamp\r\n \tuint256 com = msg.value/100*inCommission; // 3% commission\r\n \tuint256 amount = msg.value - com; // deposit amount is amount - commission\r\n \tif (deposits[msg.sender] > 0){\r\n \t\t// repeating payment\r\n \t\tuint256 daysGone = (now - paydates[msg.sender]) / secInDay;\t// days gone before this payment, and not included in next payout\r\n \t\tnotToPay[msg.sender] += amount/100*daysGone; // keep amount that does not have to be paid \r\n \t}else{\r\n \t\t// new payment \r\n \t\tpaydates[msg.sender] = now; // set paydate to block.timestamp\r\n \t}\r\n    deposits[msg.sender] += amount; // update deposit amount\r\n    emit DepositIn(msg.sender, msg.value, now); // emit deposit in event\r\n    owner.transfer(com); // transfer commission to contract owner\r\n}\r\n\r\n// Payable method, payout will be paid to specific address\r\nfunction  depositForRecipent(address payoutAddress) public  payable{\r\n \trequire(now >= lastBlockTime && msg.value >= minWei); // last block time < block.timestamp, check min deposit\r\n \tlastBlockTime = now; // set last block time to block.timestamp\r\n \tuint256 com = msg.value/100*inCommission; // 3% commission\r\n \tuint256 amount = msg.value - com; // deposit amount is amount - commission\r\n \tif (deposits[payoutAddress] > 0){\r\n \t\t// repeating payment\r\n \t\tuint256 daysGone = (now - paydates[payoutAddress]) / secInDay;\t// days gone before this payment, and not included in next payout\r\n \t\tnotToPay[payoutAddress] += amount/100*daysGone; // keep amount that does not have to be paid \r\n \t}else{\r\n \t\t// new payment\r\n \t\tpaydates[payoutAddress] = now; // set paydate to block.timestamp\r\n \t}\r\n    deposits[payoutAddress] += amount; // update deposit amount\r\n    emit DepositIn(payoutAddress, msg.value, now); // emit deposit in event\r\n    owner.transfer(com); // transfer commission to contract owner\r\n}\r\n\r\n// transfer ownership\r\nfunction transferOwnership(address newOwnerAddress) public {\r\n\trequire (msg.sender == owner); // check function called by contract owner\r\n\towner = newOwnerAddress;\r\n}\r\n\r\n\r\n// function used by client direct calls, for direct contract interaction, gas paid by function caller in this case\r\nfunction payOut() public {\r\n\t\trequire(deposits[msg.sender] > 0); // check is message sender deposited an funds\r\n\t\trequire(paydates[msg.sender] < now); // check is lastPayDate < block.timestamp \r\n\t\tuint256 payForDays = (now - paydates[msg.sender]) / secInDay; // days from last payment\r\n        require(payForDays >= 30);\r\n\t\tpay(msg.sender,false,payForDays); // don't withdraw tx gass fee, because fee paid by function caller\r\n}\r\n\r\n// function used by contrcat owner for automatic payouts from representative site\r\n// gas price paid by contract owner and because of that gasPrice will be withdrawn from payout amount\r\nfunction payOutFor(address _recipient) public {\r\n\t\trequire(msg.sender == owner && deposits[_recipient] > 0); // check is message sender is contract owner and recipients was deposited funds\r\n\t\trequire(paydates[_recipient] < now); // check is lastPayDate < block.timestamp\r\n\t\tuint256 payForDays = (now - paydates[_recipient]) / secInDay; // days from last payment\r\n        require(payForDays >= 30); \r\n\t\tpay(_recipient, true,payForDays); // pay with withdraw tx gas fee because fee paid by contract owner\r\n}\r\n\r\n\r\nfunction pay(address _recipient, bool calcGasPrice,uint256 payForDays) private {\r\n        uint256 payAmount = 0;\r\n        payAmount = deposits[_recipient]/100*payForDays - notToPay[_recipient]; // calculate payout one percent per day - amount that does not have to be paid\r\n        if (payAmount >= address(this).balance){\r\n        \tpayAmount = address(this).balance;\r\n        }\r\n        assert(payAmount > 0); // check is pay amount > 0 and payAmount <= contract balance \r\n        if (calcGasPrice){\r\n        \t// if calcGasPrice calculate tx gas price to cover transaction fee\r\n        \tuint256 com = gasForPayout * tx.gasprice; // fixed gas per tx * tx.gasprice\r\n        \tassert(com < payAmount);   // commission must be < pay amount\r\n        \tpayAmount = payAmount - com; // remaining pay amount = pay amount - commission\r\n        \towner.transfer(com); // withdraw tx gas fee to contract owner\r\n        }\r\n        paydates[_recipient] = now; // update last pay date to block.timestamp\r\n        _recipient.transfer(payAmount); // transfer funds to recipient\r\n        totalPaid[_recipient] += payAmount; // update total paid amount\r\n        notToPay[_recipient] = 0; // clear not to pay amount\r\n        emit PayOut(_recipient, payAmount, now);  // emit event\r\n}\r\n\r\n\r\n\r\nfunction totalDepositOf(address _sender) public constant returns (uint256 deposit) {\r\n        return deposits[_sender];\r\n}\r\n\r\nfunction lastPayDateOf(address _sender) public constant returns (uint256 secFromEpoch) {\r\n        return paydates[_sender];\r\n}\r\n\r\nfunction totalPaidOf(address _sender) public constant returns (uint256 paid) {\r\n        return totalPaid[_sender];\r\n}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"totalPaidOf\",\"outputs\":[{\"name\":\"paid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"lastPayDateOf\",\"outputs\":[{\"name\":\"secFromEpoch\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"payOutFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"totalDepositOf\",\"outputs\":[{\"name\":\"deposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payoutAddress\",\"type\":\"address\"}],\"name\":\"depositForRecipent\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwnerAddress\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"DepositIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"PayOut\",\"type\":\"event\"}]","ContractName":"GameEthContractV1","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ebc8ec4e89730c41995f57b7fe497a6032f7917a","Library":"","SwarmSource":"bzzr://7b6c55959d3c8e975790f679234f982785bc966cf8a408fbb42e8d82151749e8"}]}