{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    return _a / _b;\r\n  }\r\n\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Lottery{\r\n    using SafeMath for uint256;\r\n\r\n    address public lastWinner;\r\n    address public owner;\r\n    uint256 public jackpot;\r\n    uint256 public MaxPlayers;\r\n    uint256 public completedGames;\r\n    address[] public players;\r\n    \r\n    constructor() public {\r\n         owner = msg.sender;\r\n         MaxPlayers = 10;\r\n    }\r\n\r\n    function UpdateNumPlayers (uint256 num) public {\r\n        if (owner != msg.sender || num < 3 || num >= 1000) revert();\r\n        MaxPlayers = num;\r\n    }\r\n    \r\n     function () payable public  {\r\n        if(msg.value < .01 ether) revert();\r\n        players.push(msg.sender);\r\n        jackpot += msg.value;\r\n        if (players.length >= MaxPlayers) RandomWinner();\r\n    }\r\n\r\n    function getPlayers() public view returns(address[]) {\r\n        return players;\r\n    }\r\n    \r\n    function random() private view returns (uint){\r\n        return uint(keccak256(abi.encodePacked(block.difficulty, now, msg.sender, players)));\r\n    }\r\n\r\n    function RandomWinner()  private {\r\n        if (players.length < MaxPlayers) revert();\r\n        uint256 fee = SafeMath.div(address(this).balance, 100);\r\n        lastWinner = players[random() % players.length];\r\n        \r\n        lastWinner.transfer(address(this).balance - fee);\r\n        owner.transfer(fee);\r\n        delete players;\r\n        jackpot = 0;\r\n        \r\n        completedGames++;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"UpdateNumPlayers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedGames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MaxPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastWinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Lottery","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://22364398e1d80d8de2d5c7f6f1f37b8da0210406b98eb59d45f4e017afaed9db"}]}