{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// Project: alehub.io\r\n// v11, 2018-07-17\r\n// This code is the property of CryptoB2B.io\r\n// Copying in whole or in part is prohibited.\r\n// Authors: Ivan Fedorov and Dmitry Borodin\r\n// Do you want the same TokenSale platform? www.cryptob2b.io\r\n\r\ncontract IFinancialStrategy{\r\n\r\n    enum State { Active, Refunding, Closed }\r\n    State public state = State.Active;\r\n\r\n    event Deposited(address indexed beneficiary, uint256 weiAmount);\r\n    event Receive(address indexed beneficiary, uint256 weiAmount);\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n    event Started();\r\n    event Closed();\r\n    event RefundsEnabled();\r\n    function freeCash() view public returns(uint256);\r\n    function deposit(address _beneficiary) external payable;\r\n    function refund(address _investor) external;\r\n    function setup(uint8 _state, bytes32[] _params) external;\r\n    function getBeneficiaryCash() external;\r\n    function getPartnerCash(uint8 _user, address _msgsender) external;\r\n}\r\n\r\ncontract ICreator{\r\n    IRightAndRoles public rightAndRoles;\r\n    function createAllocation(IToken _token, uint256 _unlockPart1, uint256 _unlockPart2) external returns (IAllocation);\r\n    function createFinancialStrategy() external returns(IFinancialStrategy);\r\n    function getRightAndRoles() external returns(IRightAndRoles);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    function minus(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b>=a) return 0;\r\n        return a - b;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract IAllocation {\r\n    function addShare(address _beneficiary, uint256 _proportion, uint256 _percenForFirstPart) external;\r\n}\r\n\r\ncontract IToken{\r\n    function setUnpausedWallet(address _wallet, bool mode) public;\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n    function totalSupply() public view returns (uint256);\r\n    function setPause(bool mode) public;\r\n    function setMigrationAgent(address _migrationAgent) public;\r\n    function migrateAll(address[] _holders) public;\r\n    function rejectTokens(address _beneficiary, uint256 _value) public;\r\n    function freezedTokenOf(address _beneficiary) public view returns (uint256 amount);\r\n    function defrostDate(address _beneficiary) public view returns (uint256 Date);\r\n    function freezeTokens(address _beneficiary, uint256 _amount, uint256 _when) public;\r\n}\r\n\r\ncontract Creator is ICreator{\r\n\r\n    function Creator() public{\r\n        address[] memory tmp = new address[](8);\r\n        //Crowdsale.\r\n        tmp[0] = address(this);\r\n        //manager\r\n        tmp[1] = msg.sender;\r\n        //beneficiary\r\n        tmp[2] = 0xd228DF77aF3df82cB7580D48FD0b33Fe43A70F0e;\r\n        // Accountant\r\n        // Receives all the tokens for non-ETH investors (when finalizing Round1 & Round2)\r\n        tmp[3] = 0xcDd417d7f260B08CD10a3810321dF7A40D65bA40;\r\n        // Observer\r\n        // Has only the right to call paymentsInOtherCurrency (please read the document)\r\n        tmp[4] = 0x8a91aC199440Da0B45B2E278f3fE616b1bCcC494;\r\n        // Bounty - 2% tokens\r\n        tmp[5] = 0x903b15589855B8c944e9b865A5814D656dA16544;\r\n        // Company - 10% tokens\r\n        tmp[6] = 0xcA2d7C0147fCE138736981fb1Aa273d89cC9A3BF;\r\n        // Team - 11% tokens, freeze 1 year\r\n        tmp[7] = 0x7767B19420c89Bb79908820f4a5E55dc65ca7658;\r\n        rightAndRoles = new RightAndRoles(tmp);\r\n    }\r\n\r\n    function createAllocation(IToken _token, uint256 _unlockPart1, uint256 _unlockPart2) external returns (IAllocation) {\r\n        Allocation allocation = new Allocation(rightAndRoles,ERC20Basic(_token),_unlockPart1,_unlockPart2);\r\n        return allocation;\r\n    }\r\n\r\n    function createFinancialStrategy() external returns(IFinancialStrategy) {\r\n        return new FinancialStrategy(rightAndRoles);\r\n    }\r\n\r\n    function getRightAndRoles() external returns(IRightAndRoles){\r\n        rightAndRoles.changeWallet(msg.sender,0);\r\n        return rightAndRoles;\r\n    }\r\n}\r\n\r\ncontract GuidedByRoles {\r\n    IRightAndRoles public rightAndRoles;\r\n    function GuidedByRoles(IRightAndRoles _rightAndRoles) public {\r\n        rightAndRoles = _rightAndRoles;\r\n    }\r\n}\r\n\r\ncontract Allocation is GuidedByRoles, IAllocation {\r\n    using SafeMath for uint256;\r\n\r\n    struct Share {\r\n        uint256 proportion;\r\n        uint256 forPart;\r\n    }\r\n\r\n    // How many days to freeze from the moment of finalizing ICO\r\n    uint256 public unlockPart1;\r\n    uint256 public unlockPart2;\r\n    uint256 public totalShare;\r\n\r\n    mapping(address => Share) public shares;\r\n\r\n    ERC20Basic public token;\r\n\r\n    // The contract takes the ERC20 coin address from which this contract will work and from the\r\n    // owner (Team wallet) who owns the funds.\r\n    function Allocation(IRightAndRoles _rightAndRoles,ERC20Basic _token, uint256 _unlockPart1, uint256 _unlockPart2) GuidedByRoles(_rightAndRoles) public{\r\n        unlockPart1 = _unlockPart1;\r\n        unlockPart2 = _unlockPart2;\r\n        token = _token;\r\n    }\r\n\r\n    function addShare(address _beneficiary, uint256 _proportion, uint256 _percenForFirstPart) external {\r\n        require(rightAndRoles.onlyRoles(msg.sender,1));\r\n        shares[_beneficiary] = Share(shares[_beneficiary].proportion.add(_proportion),_percenForFirstPart);\r\n        totalShare = totalShare.add(_proportion);\r\n    }\r\n\r\n    //    function unlock() external {\r\n    //        unlockFor(msg.sender);\r\n    //    }\r\n\r\n    // If the time of freezing expired will return the funds to the owner.\r\n    function unlockFor(address _owner) public {\r\n        require(now >= unlockPart1);\r\n        uint256 share = shares[_owner].proportion;\r\n        if (now < unlockPart2) {\r\n            share = share.mul(shares[_owner].forPart)/100;\r\n            shares[_owner].forPart = 0;\r\n        }\r\n        if (share > 0) {\r\n            uint256 unlockedToken = token.balanceOf(this).mul(share).div(totalShare);\r\n            shares[_owner].proportion = shares[_owner].proportion.sub(share);\r\n            totalShare = totalShare.sub(share);\r\n            token.transfer(_owner,unlockedToken);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Pausable is GuidedByRoles {\r\n\r\n    mapping (address => bool) public unpausedWallet;\r\n\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = true;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused(address _to) {\r\n        require(!paused||unpausedWallet[msg.sender]||unpausedWallet[_to]);\r\n        _;\r\n    }\r\n\r\n    function onlyAdmin() internal view {\r\n        require(rightAndRoles.onlyRoles(msg.sender,3));\r\n    }\r\n\r\n    // Add a wallet ignoring the \"Exchange pause\". Available to the owner of the contract.\r\n    function setUnpausedWallet(address _wallet, bool mode) public {\r\n        onlyAdmin();\r\n        unpausedWallet[_wallet] = mode;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function setPause(bool mode)  public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,1));\r\n        if (!paused && mode) {\r\n            paused = true;\r\n            emit Pause();\r\n        }else\r\n        if (paused && !mode) {\r\n            paused = false;\r\n            emit Unpause();\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract MigratableToken is BasicToken,GuidedByRoles {\r\n\r\n    uint256 public totalMigrated;\r\n    address public migrationAgent;\r\n\r\n    event Migrate(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    function setMigrationAgent(address _migrationAgent) public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,1));\r\n        require(totalMigrated == 0);\r\n        migrationAgent = _migrationAgent;\r\n    }\r\n\r\n\r\n    function migrateInternal(address _holder) internal{\r\n        require(migrationAgent != 0x0);\r\n\r\n        uint256 value = balances[_holder];\r\n        balances[_holder] = 0;\r\n\r\n        totalSupply_ = totalSupply_.sub(value);\r\n        totalMigrated = totalMigrated.add(value);\r\n\r\n        MigrationAgent(migrationAgent).migrateFrom(_holder, value);\r\n        emit Migrate(_holder,migrationAgent,value);\r\n    }\r\n\r\n    function migrateAll(address[] _holders) public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,1));\r\n        for(uint i = 0; i < _holders.length; i++){\r\n            migrateInternal(_holders[i]);\r\n        }\r\n    }\r\n\r\n    // Reissue your tokens.\r\n    function migrate() public\r\n    {\r\n        require(balances[msg.sender] > 0);\r\n        migrateInternal(msg.sender);\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Provider is GuidedByRoles {\r\n    function transferTokens(ERC20Basic _token, address _to, uint256 _value) public returns (bool){\r\n        require(rightAndRoles.onlyRoles(msg.sender,2));\r\n        return _token.transfer(_to,_value);\r\n    }\r\n}\r\n\r\ncontract FinancialStrategy is IFinancialStrategy, GuidedByRoles,ERC20Provider{\r\n    using SafeMath for uint256;\r\n\r\n    uint8 public step;\r\n\r\n    mapping (uint8 => mapping (address => uint256)) public deposited;\r\n\r\n                             // Partner 0   Partner 1    Partner 2\r\n    uint256[0] public percent;\r\n    uint256[0] public cap; // QUINTILLIONS\r\n    uint256[0] public debt;\r\n    uint256[0] public total;                                 // QUINTILLIONS\r\n    uint256[0] public took;\r\n    uint256[0] public ready;\r\n\r\n    address[0] public wallets;\r\n\r\n    uint256 public benTook=0;\r\n    uint256 public benReady=0;\r\n    uint256 public newCash=0;\r\n    uint256 public cashHistory=0;\r\n\r\n    address public benWallet=0;\r\n\r\n    modifier canGetCash(){\r\n        require(state == State.Closed);\r\n        _;\r\n    }\r\n\r\n    function FinancialStrategy(IRightAndRoles _rightAndRoles) GuidedByRoles(_rightAndRoles) public {\r\n        emit Started();\r\n    }\r\n\r\n    function balance() external view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    \r\n    function deposit(address _investor) external payable {\r\n        require(rightAndRoles.onlyRoles(msg.sender,1));\r\n        require(state == State.Active);\r\n        deposited[step][_investor] = deposited[step][_investor].add(msg.value);\r\n        newCash = newCash.add(msg.value);\r\n        cashHistory += msg.value;\r\n        emit Deposited(_investor,msg.value);\r\n    }\r\n\r\n\r\n    // 0 - destruct\r\n    // 1 - close\r\n    // 2 - restart\r\n    // 3 - refund\r\n    // 4 - calc\r\n    // 5 - update Exchange                                                                      \r\n    function setup(uint8 _state, bytes32[] _params) external {\r\n        require(rightAndRoles.onlyRoles(msg.sender,1));\r\n\r\n        if (_state == 0)  {\r\n            require(_params.length == 1);\r\n            // call from Crowdsale.distructVault(true) for exit\r\n            // arg1 - nothing\r\n            // arg2 - nothing\r\n            selfdestruct(address(_params[0]));\r\n\r\n        }\r\n        else if (_state == 1 ) {\r\n            require(_params.length == 0);\r\n            // Call from Crowdsale.finalization()\r\n            //   [1] - successfull round (goalReach)\r\n            //   [3] - failed round (not enough money)\r\n            // arg1 = weiTotalRaised();\r\n            // arg2 = nothing;\r\n        \r\n            require(state == State.Active);\r\n            //internalCalc(_arg1);\r\n            state = State.Closed;\r\n            emit Closed();\r\n        \r\n        }\r\n        else if (_state == 2) {\r\n            require(_params.length == 0);\r\n            // Call from Crowdsale.initialization()\r\n            // arg1 = weiTotalRaised();\r\n            // arg2 = nothing;\r\n            require(state == State.Closed);\r\n            require(address(this).balance == 0);\r\n            state = State.Active;\r\n            step++;\r\n            emit Started();\r\n        \r\n        }\r\n        else if (_state == 3 ) {\r\n            require(_params.length == 0);\r\n            require(state == State.Active);\r\n            state = State.Refunding;\r\n            emit RefundsEnabled();\r\n        }\r\n        else if (_state == 4) {\r\n            require(_params.length == 2);\r\n            //onlyPartnersOrAdmin(address(_params[1]));\r\n            internalCalc(uint256(_params[0]));\r\n        }\r\n        else if (_state == 5) {\r\n            // arg1 = old ETH/USD (exchange)\r\n            // arg2 = new ETH/USD (_ETHUSD)\r\n            require(_params.length == 2);\r\n            for (uint8 user=0; user<cap.length; user++) cap[user]=cap[user].mul(uint256(_params[0])).div(uint256(_params[1]));\r\n        }\r\n\r\n    }\r\n\r\n    function freeCash() view public returns(uint256){\r\n        return newCash+benReady;\r\n    }\r\n\r\n    function internalCalc(uint256 _allValue) internal {\r\n\r\n        uint256 free=newCash+benReady;\r\n        uint256 common=0;\r\n        uint256 prcSum=0;\r\n        uint256 plan=0;\r\n        uint8[] memory indexes = new uint8[](percent.length);\r\n        uint8 count = 0;\r\n\r\n        if (free==0) return;\r\n\r\n        uint8 i;\r\n\r\n        for (i =0; i <percent.length; i++) {\r\n            plan=_allValue*percent[i]/100;\r\n\r\n            if(cap[i] != 0 && plan > cap[i]) plan = cap[i];\r\n\r\n            if (total[i] >= plan) {\r\n                debt[i]=0;\r\n                continue;\r\n            }\r\n\r\n            plan -= total[i];\r\n            debt[i] = plan;\r\n            common += plan;\r\n            indexes[count++] = i;\r\n            prcSum += percent[i];\r\n        }\r\n        if(common > free){\r\n            benReady = 0;\r\n            uint8 j = 0;\r\n            while (j < count){\r\n                i = indexes[j++];\r\n                plan = free*percent[i]/prcSum;\r\n                if(plan + total[i] <= cap[i] || cap[i] ==0){\r\n                    debt[i] = plan;\r\n                    continue;\r\n                }\r\n                debt[i] = cap[i] - total[i]; //'total' is always less than 'cap'\r\n                free -= debt[i];\r\n                prcSum -= percent[i];\r\n                indexes[j-1] = indexes[--count];\r\n                j = 0;\r\n            }\r\n        }\r\n        common = 0;\r\n        for(i = 0; i < debt.length; i++){\r\n            total[i] += debt[i];\r\n            ready[i] += debt[i];\r\n            common += ready[i];\r\n        }\r\n        benReady = address(this).balance - common;\r\n        newCash = 0;\r\n    }\r\n\r\n    function refund(address _investor) external {\r\n        require(state == State.Refunding);\r\n        uint256 depositedValue = deposited[step][_investor];\r\n        require(depositedValue > 0);\r\n        deposited[step][_investor] = 0;\r\n        _investor.transfer(depositedValue);\r\n        emit Refunded(_investor, depositedValue);\r\n    }\r\n\r\n    // Call from Crowdsale:\r\n    function getBeneficiaryCash() external canGetCash {\r\n        require(rightAndRoles.onlyRoles(msg.sender,1));\r\n        address _beneficiary = rightAndRoles.wallets(2,0);\r\n        uint256 move=benReady;\r\n        benWallet=_beneficiary;\r\n        if (move == 0) return;\r\n\r\n        emit Receive(_beneficiary, move);\r\n        benReady = 0;\r\n        benTook += move;\r\n        \r\n        _beneficiary.transfer(move);\r\n    \r\n    }\r\n\r\n\r\n    // Call from Crowdsale:\r\n    function getPartnerCash(uint8 _user, address _msgsender) external canGetCash {\r\n        require(rightAndRoles.onlyRoles(msg.sender,1));\r\n        require(_user<wallets.length);\r\n\r\n        onlyPartnersOrAdmin(_msgsender);\r\n\r\n        uint256 move=ready[_user];\r\n        if (move==0) return;\r\n\r\n        emit Receive(wallets[_user], move);\r\n        ready[_user]=0;\r\n        took[_user]+=move;\r\n\r\n        wallets[_user].transfer(move);\r\n    \r\n    }\r\n\r\n    function onlyPartnersOrAdmin(address _sender) internal view {\r\n        if (!rightAndRoles.onlyRoles(_sender,65535)) {\r\n            for (uint8 i=0; i<wallets.length; i++) {\r\n                if (wallets[i]==_sender) break;\r\n            }\r\n            if (i>=wallets.length) {\r\n                revert();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused(_to) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused(_to) returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\ncontract KycToken is BasicToken, GuidedByRoles {\r\n\r\n    event TokensRejected(address indexed beneficiary, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function rejectTokens(address _beneficiary, uint256 _value) public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,1));\r\n        require(_value <= balances[_beneficiary]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[_beneficiary] = balances[_beneficiary].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit TokensRejected(_beneficiary, _value);\r\n        emit Transfer(_beneficiary, address(0), _value);\r\n    }\r\n}\r\n\r\ncontract MintableToken is StandardToken, GuidedByRoles {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) public returns (bool) {\r\n        require(rightAndRoles.onlyRoles(msg.sender,1));\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MigrationAgent\r\n{\r\n    function migrateFrom(address _from, uint256 _value) public;\r\n}\r\n\r\ncontract FreezingToken is PausableToken {\r\n    struct freeze {\r\n    uint256 amount;\r\n    uint256 when;\r\n    }\r\n\r\n\r\n    mapping (address => freeze) freezedTokens;\r\n\r\n    function freezedTokenOf(address _beneficiary) public view returns (uint256 amount){\r\n        freeze storage _freeze = freezedTokens[_beneficiary];\r\n        if(_freeze.when < now) return 0;\r\n        return _freeze.amount;\r\n    }\r\n\r\n    function defrostDate(address _beneficiary) public view returns (uint256 Date) {\r\n        freeze storage _freeze = freezedTokens[_beneficiary];\r\n        if(_freeze.when < now) return 0;\r\n        return _freeze.when;\r\n    }\r\n\r\n    function freezeTokens(address _beneficiary, uint256 _amount, uint256 _when) public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,1));\r\n        freeze storage _freeze = freezedTokens[_beneficiary];\r\n        _freeze.amount = _amount;\r\n        _freeze.when = _when;\r\n    }\r\n\r\n    function masFreezedTokens(address[] _beneficiary, uint256[] _amount, uint256[] _when) public {\r\n        onlyAdmin();\r\n        require(_beneficiary.length == _amount.length && _beneficiary.length == _when.length);\r\n        for(uint16 i = 0; i < _beneficiary.length; i++){\r\n            freeze storage _freeze = freezedTokens[_beneficiary[i]];\r\n            _freeze.amount = _amount[i];\r\n            _freeze.when = _when[i];\r\n        }\r\n    }\r\n\r\n\r\n    function transferAndFreeze(address _to, uint256 _value, uint256 _when) external {\r\n        require(unpausedWallet[msg.sender]);\r\n        require(freezedTokenOf(_to) == 0);\r\n        if(_when > 0){\r\n            freeze storage _freeze = freezedTokens[_to];\r\n            _freeze.amount = _value;\r\n            _freeze.when = _when;\r\n        }\r\n        transfer(_to,_value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(balanceOf(msg.sender) >= freezedTokenOf(msg.sender).add(_value));\r\n        return super.transfer(_to,_value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(balanceOf(_from) >= freezedTokenOf(_from).add(_value));\r\n        return super.transferFrom( _from,_to,_value);\r\n    }\r\n}\r\n\r\ncontract Token is IToken, FreezingToken, MintableToken, MigratableToken, KycToken,ERC20Provider {\r\n    function Token(ICreator _creator) GuidedByRoles(_creator.rightAndRoles()) public {}\r\n    string public constant name = \"Ale Coin\";\r\n    string public constant symbol = \"ALE\";\r\n    uint8 public constant decimals = 18;\r\n}\r\n\r\ncontract IRightAndRoles {\r\n    address[][] public wallets;\r\n    mapping(address => uint16) public roles;\r\n\r\n    event WalletChanged(address indexed newWallet, address indexed oldWallet, uint8 indexed role);\r\n    event CloneChanged(address indexed wallet, uint8 indexed role, bool indexed mod);\r\n\r\n    function changeWallet(address _wallet, uint8 _role) external;\r\n    function setManagerPowerful(bool _mode) external;\r\n    function onlyRoles(address _sender, uint16 _roleMask) view external returns(bool);\r\n}\r\n\r\ncontract RightAndRoles is IRightAndRoles {\r\n    bool managerPowerful = true;\r\n\r\n    function RightAndRoles(address[] _roles) public {\r\n        uint8 len = uint8(_roles.length);\r\n        require(len > 0&&len <16);\r\n        wallets.length = len;\r\n\r\n        for(uint8 i = 0; i < len; i++){\r\n            wallets[i].push(_roles[i]);\r\n            roles[_roles[i]] += uint16(2)**i;\r\n            emit WalletChanged(_roles[i], address(0),i);\r\n        }\r\n    }\r\n\r\n    function changeClons(address _clon, uint8 _role, bool _mod) external {\r\n        require(wallets[_role][0] == msg.sender&&_clon != msg.sender);\r\n        emit CloneChanged(_clon,_role,_mod);\r\n        uint16 roleMask = uint16(2)**_role;\r\n        if(_mod){\r\n            require(roles[_clon]&roleMask == 0);\r\n            wallets[_role].push(_clon);\r\n        }else{\r\n            address[] storage tmp = wallets[_role];\r\n            uint8 i = 1;\r\n            for(i; i < tmp.length; i++){\r\n                if(tmp[i] == _clon) break;\r\n            }\r\n            require(i > tmp.length);\r\n            tmp[i] = tmp[tmp.length];\r\n            delete tmp[tmp.length];\r\n        }\r\n        roles[_clon] = _mod?roles[_clon]|roleMask:roles[_clon]&~roleMask;\r\n    }\r\n\r\n    // Change the address for the specified role.\r\n    // Available to any wallet owner except the observer.\r\n    // Available to the manager until the round is initialized.\r\n    // The Observer's wallet or his own manager can change at any time.\r\n    // @ Do I have to use the function      no\r\n    // @ When it is possible to call        depend...\r\n    // @ When it is launched automatically  -\r\n    // @ Who can call the function          staff (all 7+ roles)\r\n    function changeWallet(address _wallet, uint8 _role) external {\r\n        require(wallets[_role][0] == msg.sender || wallets[0][0] == msg.sender || (wallets[1][0] == msg.sender && (managerPowerful || _role == 0)));\r\n        emit WalletChanged(wallets[_role][0],_wallet,_role);\r\n        uint16 roleMask = uint16(2)**_role;\r\n        address[] storage tmp = wallets[_role];\r\n        for(uint8 i = 0; i < tmp.length; i++){\r\n            roles[tmp[i]] = roles[tmp[i]]&~roleMask;\r\n        }\r\n        delete  wallets[_role];\r\n        tmp.push(_wallet);\r\n        roles[_wallet] = roles[_wallet]|roleMask;\r\n    }\r\n\r\n    function setManagerPowerful(bool _mode) external {\r\n        require(wallets[0][0] == msg.sender);\r\n        managerPowerful = _mode;\r\n    }\r\n\r\n    function onlyRoles(address _sender, uint16 _roleMask) view external returns(bool) {\r\n        return roles[_sender]&_roleMask != 0;\r\n    }\r\n\r\n    function getMainWallets() view external returns(address[]){\r\n        address[] memory _wallets = new address[](wallets.length);\r\n        for(uint8 i = 0; i<wallets.length; i++){\r\n            _wallets[i] = wallets[i][0];\r\n        }\r\n        return _wallets;\r\n    }\r\n\r\n    function getCloneWallets(uint8 _role) view external returns(address[]){\r\n        return wallets[_role];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rightAndRoles\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_unlockPart1\",\"type\":\"uint256\"},{\"name\":\"_unlockPart2\",\"type\":\"uint256\"}],\"name\":\"createAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createFinancialStrategy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRightAndRoles\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Creator","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ea172c995f97d6b7e87285bcd50f87f557a8bb236b0bc92c16917a008913fa7b"}]}