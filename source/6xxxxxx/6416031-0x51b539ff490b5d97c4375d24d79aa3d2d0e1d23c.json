{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ETH666{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) investments;\r\n    mapping(address => uint256) joined;\r\n    mapping(address => uint256) withdrawals;\r\n\r\n    uint256 public minimum = 10000000000000000;\r\n    uint256 public step = 666;\r\n    address public ownerWallet;\r\n    address public owner;\r\n\r\n    event Invest(address investor, uint256 amount);\r\n    event Withdraw(address investor, uint256 amount);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Ð¡onstructor Sets the original roles of the contract\r\n     */\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        ownerWallet = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifiers\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     * @param newOwnerWallet The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner, address newOwnerWallet) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        ownerWallet = newOwnerWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Investments\r\n     */\r\n    function () external payable {\r\n        require(msg.value >= minimum);\r\n        if (investments[msg.sender] > 0){\r\n            if (withdraw()){\r\n                withdrawals[msg.sender] = 0;\r\n            }\r\n        }\r\n        investments[msg.sender] = investments[msg.sender].add(msg.value);\r\n        joined[msg.sender] = block.timestamp;\r\n        ownerWallet.transfer(msg.value.div(100).mul(10));\r\n        emit Invest(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev Evaluate current balance\r\n    * @param _address Address of investor\r\n    */\r\n    function getBalance(address _address) view public returns (uint256) {\r\n        uint256 minutesCount = now.sub(joined[_address]).div(1 minutes);\r\n        uint256 percent = investments[_address].mul(step).div(10000);\r\n        uint256 different = percent.mul(minutesCount).div(1440);\r\n        uint256 balance = different.sub(withdrawals[_address]);\r\n\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n    * @dev Withdraw dividends from contract\r\n    */\r\n    function withdraw() public returns (bool){\r\n        require(joined[msg.sender] > 0);\r\n        uint256 balance = getBalance(msg.sender);\r\n        if (address(this).balance > balance){\r\n            if (balance > 0){\r\n                withdrawals[msg.sender] = withdrawals[msg.sender].add(balance);\r\n                msg.sender.transfer(balance);\r\n                emit Withdraw(msg.sender, balance);\r\n            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Gets balance of the sender address.\r\n    * @return An uint256 representing the amount owned by the msg.sender.\r\n    */\r\n    function checkBalance() public view returns (uint256) {\r\n        return getBalance(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets withdrawals of the specified address.\r\n    * @param _investor The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function checkWithdrawals(address _investor) public view returns (uint256) {\r\n        return withdrawals[_investor];\r\n    }\r\n\r\n    /**\r\n    * @dev Gets investments of the specified address.\r\n    * @param _investor The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function checkInvestments(address _investor) public view returns (uint256) {\r\n        return investments[_investor];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"newOwnerWallet\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"checkInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"checkWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ETH666","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b4001b260a12a69b2ce8706c54250ff7bd2891a48310491b946f21427c22fc62"}]}