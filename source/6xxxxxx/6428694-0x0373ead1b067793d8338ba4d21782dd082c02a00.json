{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract SuperHeroes is Pausable {\r\n    \r\n  /*** CONSTANTS ***/\r\n\r\n  string public constant name = \"SuperHero\";\r\n  string public constant symbol = \"SH\";\r\n  \r\n  /** VARIABLES **/\r\n  uint256 public fee = 2;\r\n  uint256 public snatch = 24 hours;\r\n\r\n  /*** DATA TYPES ***/\r\n\r\n  struct Token {\r\n    string name;\r\n    uint256 price;\r\n    uint256 purchased;\r\n  }\r\n\r\n  /*** STORAGE ***/\r\n\r\n  Token[] tokens;\r\n\r\n  mapping (uint256 => address) public tokenIndexToOwner;\r\n  mapping (address => uint256) ownershipTokenCount;\r\n  mapping (uint256 => address) public tokenIndexToApproved;\r\n  mapping (uint256 => Token) public herosForSale;\r\n\r\n  /*** INTERNAL FUNCTIONS ***/\r\n\r\n  function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n    return tokenIndexToOwner[_tokenId] == _claimant;\r\n  }\r\n\r\n  function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n    return tokenIndexToApproved[_tokenId] == _claimant;\r\n  }\r\n\r\n  function _approve(address _to, uint256 _tokenId) internal {\r\n    tokenIndexToApproved[_tokenId] = _to;\r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint256 _tokenId) internal whenNotPaused {\r\n    ownershipTokenCount[_to]++;\r\n    tokenIndexToOwner[_tokenId] = _to;\r\n\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      delete tokenIndexToApproved[_tokenId];\r\n    }\r\n  }\r\n\r\n  function _mint(string _name, uint256 _price) internal returns (uint256 tokenId) {\r\n    require(tokens.length < 250, \"Max amount of superheroes is reached\");  \r\n    Token memory token = Token({\r\n      name: _name,\r\n      price: _price,\r\n      purchased: now\r\n    });\r\n    tokenId = tokens.push(token) - 1;\r\n    \r\n    _transfer(0, owner, tokenId);\r\n  }\r\n\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return tokens.length;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  function ownerOf(uint256 _tokenId) external view returns (address owner) {\r\n    owner = tokenIndexToOwner[_tokenId];\r\n\r\n    require(owner != address(0));\r\n  }\r\n\r\n  function approve(address _to, uint256 _tokenId) external {\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    _approve(_to, _tokenId);\r\n  }\r\n\r\n  function transfer(address _to, uint256 _tokenId) external {\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) external {\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n    require(_approvedFor(msg.sender, _tokenId));\r\n    require(_owns(_from, _tokenId));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  function tokensOfOwner(address _owner) external view returns (uint256[]) {\r\n    uint256 balance = balanceOf(_owner);\r\n\r\n    if (balance == 0) {\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](balance);\r\n      uint256 maxTokenId = totalSupply();\r\n      uint256 idx = 0;\r\n\r\n      uint256 tokenId;\r\n      for (tokenId = 1; tokenId <= maxTokenId; tokenId++) {\r\n        if (tokenIndexToOwner[tokenId] == _owner) {\r\n          result[idx] = tokenId;\r\n          idx++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n\r\n  /*** EXTERNAL FUNCTIONS ***/\r\n\r\n  function mint(string _name, uint256 _price) external onlyOwner returns (uint256) {\r\n    uint256 pricerecalc = _price;\r\n    return _mint(_name, pricerecalc);\r\n  }\r\n\r\n  function getToken(uint256 _tokenId) external view returns (string _name, uint256 _price, uint256 _purchased) {\r\n    Token memory token = tokens[_tokenId];\r\n\r\n    _name = token.name;\r\n    _price = token.price;\r\n    _purchased = token.purchased;\r\n  }\r\n  \r\n  function snatchHero(uint256 _id) external payable whenNotPaused {\r\n      require(now - tokens[_id].purchased <= snatch);\r\n      uint256 pricerecalc = tokens[_id].price;\r\n      require(pricerecalc <= msg.value);\r\n      address previos = tokenIndexToOwner[_id];\r\n      uint256 realPriceFee = msg.value * fee / 100;\r\n      uint256 realPrice = msg.value - realPriceFee;\r\n      uint256 newPriceRise = pricerecalc * 120 / 100;\r\n      // owner.transfer(realPriceFee);\r\n      previos.transfer(realPrice);\r\n      _transfer(previos, msg.sender, _id);\r\n      tokens[_id].purchased = now;\r\n      tokens[_id].price = newPriceRise;\r\n  }\r\n  \r\n  function buyHero(uint256 _id) external payable whenNotPaused {\r\n      require(herosForSale[_id].price != 0);\r\n      uint256 pricerecalc = herosForSale[_id].price;\r\n      require(msg.value >= pricerecalc);\r\n      // owner.transfer(msg.value);\r\n      _transfer(owner, msg.sender, _id);\r\n      uint256 newPriceRise = pricerecalc * 120 / 100;\r\n      tokens[_id].purchased = now;\r\n      tokens[_id].price = newPriceRise;\r\n      \r\n      delete herosForSale[_id];\r\n  }\r\n  \r\n  function saleHero(uint256 _id) external onlyOwner whenNotPaused {\r\n      require(msg.sender == tokenIndexToOwner[_id]);\r\n      herosForSale[_id] = tokens[_id];\r\n  }\r\n\r\n  function changePrice(uint256 _id, uint256 _price) external whenNotPaused {\r\n      require(msg.sender == tokenIndexToOwner[_id]);\r\n      tokens[_id].price = _price;\r\n  }\r\n  \r\n  function withdraw(address to, uint256 amount) external onlyOwner {\r\n      to.transfer(amount);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"buyHero\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"saleHero\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"snatchHero\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"herosForSale\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"purchased\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_purchased\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SuperHeroes","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://57caac5b8f09bacb2209aab3635d7f1477ecaa53cb3fd89ed9750769d7d46022"}]}