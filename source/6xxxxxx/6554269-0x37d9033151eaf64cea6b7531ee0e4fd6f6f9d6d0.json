{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract EthCrystal\r\n{\r\n\r\n    /*\r\n        EthCrystal.com\r\n        Thanks for choosing us!\r\n\r\n        ███████╗████████╗██╗  ██╗ ██████╗██████╗ ██╗   ██╗███████╗████████╗ █████╗ ██╗         ██████╗ ██████╗ ███╗   ███╗\r\n        ██╔════╝╚══██╔══╝██║  ██║██╔════╝██╔══██╗╚██╗ ██╔╝██╔════╝╚══██╔══╝██╔══██╗██║        ██╔════╝██╔═══██╗████╗ ████║\r\n        █████╗     ██║   ███████║██║     ██████╔╝ ╚████╔╝ ███████╗   ██║   ███████║██║        ██║     ██║   ██║██╔████╔██║\r\n        ██╔══╝     ██║   ██╔══██║██║     ██╔══██╗  ╚██╔╝  ╚════██║   ██║   ██╔══██║██║        ██║     ██║   ██║██║╚██╔╝██║\r\n        ███████╗   ██║   ██║  ██║╚██████╗██║  ██║   ██║   ███████║   ██║   ██║  ██║███████╗██╗╚██████╗╚██████╔╝██║ ╚═╝ ██║\r\n        ╚══════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝ ╚═════╝ ╚═════╝ ╚═╝     ╚═╝\r\n\r\n        #######               #####\r\n        #       ##### #    # #     # #####  #   #  ####  #####   ##   #           ####   ####  #    #\r\n        #         #   #    # #       #    #  # #  #        #    #  #  #          #    # #    # ##  ##\r\n        #####     #   ###### #       #    #   #    ####    #   #    # #          #      #    # # ## #\r\n        #         #   #    # #       #####    #        #   #   ###### #      ### #      #    # #    #\r\n        #         #   #    # #     # #   #    #   #    #   #   #    # #      ### #    # #    # #    #\r\n        #######   #   #    #  #####  #    #   #    ####    #   #    # ###### ###  ####   ####  #    #\r\n\r\n        Telegram: t.me/EthCrystalGame\r\n        \r\n        This is the second versoin of our smart-contract.\r\n        We have fixed all bugs and set the new speed values for Rounds so it is easier for users to play.\r\n        The first smart-contract address is: 0x5c6d8bb345f4299c76f24fc771ef04dd160c4d36\r\n        \r\n        There is no code which can be only executed by the contract creators.\r\n\r\n    */\r\n    using SafeMath for *;\r\n\r\n    // Tower Type details\r\n    struct TowersInfoList {\r\n        string name; // Tower name\r\n        uint256 timeLimit; // Maximum time increasement\r\n        uint256 warriorToTime; // Amount of seconds each warrior adds\r\n        uint256 currentRoundID; // Current Round ID\r\n        uint256 growthCoefficient; // Each warrior being bought increases the price of the next warrior. \r\n        uint256 winnerShare; // % to winner after the round [Active Fond]\r\n        uint256 nextRound; // % to next round pot\r\n        uint256 dividendShare; // % as dividends to holders after the round\r\n\r\n        mapping (uint256 => TowersInfo) RoundList; // Here the Rounds for each Tower are stored\r\n    }\r\n    \r\n    // Round details\r\n    struct TowersInfo {\r\n        uint256 roundID; // The Current Round ID\r\n        uint256 towerBalance; // Balance for distribution in the end\r\n        uint256 totalBalance; // Total balance with referrer or dev %\r\n        uint256 totalWarriors; // Total warriors being bought\r\n        uint256 timeToFinish; // The time when the round will be finished\r\n        uint256 timeLimit; // The maximum increasement\r\n        uint256 warriorToTime; // Amount of seconds each warrior adds\r\n        uint256 bonusPot; // % of tower balance from the previous round\r\n        address lastPlayer; // The last player bought warriors\r\n    }\r\n\r\n    // Player Details\r\n    struct PlayerInfo {\r\n        uint256 playerID; // Player's Unique Identifier\r\n        address playerAddress; // Player's Ethereum Address\r\n        address referralAddress; // Store the Ethereum Address of the referrer\r\n        string nickname; // Player's Nickname\r\n        mapping (uint256 => TowersRoundInfo) TowersList;\r\n    }\r\n\r\n    \r\n    struct TowersRoundInfo {\r\n        uint256 _TowerType;\r\n        mapping (uint256 => PlayerRoundInfo) RoundList;\r\n    }\r\n    \r\n    // All player's warriors for a particular Round\r\n    struct PlayerRoundInfo {\r\n        uint256 warriors;\r\n        uint256 cashedOut; // To Allow cashing out before the game finished\r\n    }\r\n    \r\n    // In-Game balance (Returnings + Referral Payings)\r\n    struct ReferralInfo {\r\n        uint256 balance;\r\n    }\r\n\r\n    uint256 public playerID_counter = 1; // The Unique Identifier for the next created player\r\n\r\n    uint256 public devShare = 5; // % to devs\r\n    uint256 public affShare = 10; // bounty % to reffers\r\n\r\n    mapping (address => PlayerInfo) public players; // Storage for players\r\n    mapping (uint256 => PlayerInfo) public playersByID; // Duplicate of the storage for players\r\n\r\n    mapping (address => ReferralInfo) public aff; // Storage for player refferal and returnings balances.\r\n\r\n    mapping (uint256 => TowersInfoList) public GameRounds; // Storage for Tower Rounds\r\n\r\n    address public ownerAddress; // The address of the contract creator\r\n    \r\n    event BuyEvent(address player, uint256 TowerID, uint256 RoundID, uint256 TotalWarriors, uint256 WarriorPrice, uint256 TimeLeft);\r\n\r\n    constructor() public {\r\n        ownerAddress = msg.sender; // Setting the address of the contact creator\r\n\r\n        // Creating Tower Types\r\n        GameRounds[0] = TowersInfoList(\"Crystal Tower\", 60*60*3,  60*3, 0,      10000000000000,     35, 15, 50);\r\n        GameRounds[1] = TowersInfoList(\"Red Tower\",     60*60*3,  60*3, 0,      20000000000000,     25,  5, 70);\r\n        GameRounds[2] = TowersInfoList(\"Gold Tower\",    60*60*3,  60*3, 0,     250000000000000,     40, 10, 50);\r\n        GameRounds[3] = TowersInfoList(\"Purple Tower\",  60*60*6,  60*3, 0,    5000000000000000,     30, 10, 60);\r\n        GameRounds[4] = TowersInfoList(\"Silver Tower\",  60*60*6,  60*3, 0,    1000000000000000,     35, 15, 50);\r\n        GameRounds[5] = TowersInfoList(\"Black Tower\",   60*60*6,  60*3, 0,    1000000000000000,     65, 10, 25);\r\n        GameRounds[6] = TowersInfoList(\"Toxic Tower\",   60*60*6,  60*3, 0,    2000000000000000,     65, 10, 25);\r\n\r\n        // Creating first Rounds for each Tower Type\r\n        newRound(0);\r\n        newRound(1);\r\n        newRound(2);\r\n        newRound(3);\r\n        newRound(4);\r\n        newRound(5);\r\n        newRound(6);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new Round of a paricular Tower\r\n     * @param _TowerType the tower type (0 to 6)\r\n     */\r\n    function newRound (uint256 _TowerType) private {\r\n        GameRounds[_TowerType].currentRoundID++;\r\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID] = TowersInfo(GameRounds[_TowerType].currentRoundID, 0, 0, 0, now+GameRounds[_TowerType].timeLimit, GameRounds[_TowerType].timeLimit, GameRounds[_TowerType].warriorToTime,\r\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID-1].towerBalance*GameRounds[_TowerType].nextRound/100, // Moving nextRound% of the finished round balance to the next round\r\n        0x0); // New round\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Use to buy warriors for the current round of a particular Tower\r\n     * When the Round ends, somebody have to buy 1 warrior to start the new round.\r\n     * All ETH the player overpaid will be sent back to his balance (\"referralBalance\").\r\n     * @param _TowerType the tower type (0 to 6)\r\n     * @param _WarriorsAmount the amoun of warriors player would like to buy (at least 1)\r\n     * @param _referralID Default Value: 0. The ID of the player which will receive the 10% of the warriors cost.\r\n     */\r\n    function buyWarriors (uint256 _TowerType, uint _WarriorsAmount, uint256 _referralID) public payable {\r\n        require (msg.value > 10000000); // To prevent % abusing\r\n        require (_WarriorsAmount >= 1 && _WarriorsAmount < 1000000000); // The limitation of the amount of warriors being bought in 1 time\r\n        require (GameRounds[_TowerType].timeLimit > 0); // Checking if the _TowerType exists\r\n\r\n        if (players[msg.sender].playerID == 0){ // this is the new player\r\n            if (_referralID > 0 && _referralID != players[msg.sender].playerID && _referralID == playersByID[_referralID].playerID){\r\n                setNickname(\"\", playersByID[_referralID].playerAddress);  // Creating a new player...\r\n            }else{\r\n                setNickname(\"\", ownerAddress);\r\n            }\r\n        }\r\n\r\n        if (GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeToFinish < now){\r\n            // The game was ended. Starting the new game...\r\n\r\n            // Sending pot to the winner\r\n            aff[GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].lastPlayer].balance += GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].towerBalance*GameRounds[_TowerType].winnerShare/100;\r\n\r\n            // Sending the bonus pot to the winner\r\n            aff[GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].lastPlayer].balance += GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].bonusPot;\r\n\r\n            newRound(_TowerType);\r\n            //Event Winner and the new round\r\n            //return;\r\n        }\r\n\r\n        // Getting the price of the current warrior\r\n        uint256 _totalWarriors = GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].totalWarriors;\r\n        uint256 _warriorPrice = (_totalWarriors+1)*GameRounds[_TowerType].growthCoefficient; // Warrior Price\r\n\r\n        uint256 _value = (_WarriorsAmount*_warriorPrice)+(((_WarriorsAmount-1)*(_WarriorsAmount-1)+_WarriorsAmount-1)/2)*GameRounds[_TowerType].growthCoefficient;\r\n\r\n        require (msg.value >= _value); // Player pays enough\r\n\r\n        uint256 _ethToTake = affShare+devShare; // 15%\r\n\r\n\r\n        players[msg.sender].TowersList[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].warriors += _WarriorsAmount;\r\n\r\n        if (players[players[msg.sender].referralAddress].playerID > 0 && players[msg.sender].referralAddress != ownerAddress){\r\n            // To referrer and devs. In this case, referrer gets 10%, devs get 5%\r\n            aff[players[msg.sender].referralAddress].balance += _value*affShare/100; // 10%\r\n            aff[ownerAddress].balance += _value*devShare/100; // 5%\r\n        } else {\r\n            // To devs only. In this case, devs get 10%\r\n            _ethToTake = affShare;\r\n            aff[ownerAddress].balance += _value*_ethToTake/100; // 10%\r\n        }\r\n\r\n        if (msg.value-_value > 0){\r\n            aff[msg.sender].balance += msg.value-_value; // Returning to player the rest of eth\r\n        }\r\n\r\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].towerBalance += _value*(100-_ethToTake)/100; // 10-15%\r\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].totalBalance += _value;\r\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].totalWarriors += _WarriorsAmount;\r\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].lastPlayer = msg.sender;\r\n\r\n        // Timer increasement\r\n        GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeToFinish += (_WarriorsAmount).mul(GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].warriorToTime);\r\n\r\n        // if the finish time is longer than the finish\r\n        if (GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeToFinish > now+GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeLimit){\r\n            GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeToFinish = now+GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeLimit;\r\n        }\r\n        \r\n        uint256 TotalWarriors = GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].totalWarriors;\r\n        uint256 TimeLeft = GameRounds[_TowerType].RoundList[GameRounds[_TowerType].currentRoundID].timeToFinish;\r\n        \r\n        // Event about the new potential winner and some Tower Details\r\n        emit BuyEvent(msg.sender,\r\n        _TowerType,\r\n        GameRounds[_TowerType].currentRoundID,\r\n        TotalWarriors,\r\n        (TotalWarriors+1)*GameRounds[_TowerType].growthCoefficient,\r\n        TimeLeft);\r\n        \r\n        return;\r\n    }\r\n\r\n    /**\r\n     * @dev Claim the player's dividends of any round.\r\n     * @param _TowerType the tower type (0 to 6)\r\n     * @param _RoundID the round ID\r\n     */\r\n    function dividendCashout (uint256 _TowerType, uint256 _RoundID) public {\r\n        require (GameRounds[_TowerType].timeLimit > 0);\r\n\r\n        uint256 _warriors = players[msg.sender].TowersList[_TowerType].RoundList[_RoundID].warriors;\r\n        require (_warriors > 0);\r\n        uint256 _totalEarned = _warriors*GameRounds[_TowerType].RoundList[_RoundID].towerBalance*GameRounds[_TowerType].dividendShare/GameRounds[_TowerType].RoundList[_RoundID].totalWarriors/100;\r\n        uint256 _alreadyCashedOut = players[msg.sender].TowersList[_TowerType].RoundList[_RoundID].cashedOut;\r\n        uint256 _earnedNow = _totalEarned-_alreadyCashedOut;\r\n        require (_earnedNow > 0); // The total amount of dividends haven't been received by the player yet\r\n\r\n        players[msg.sender].TowersList[_TowerType].RoundList[_RoundID].cashedOut = _totalEarned;\r\n\r\n        if (!msg.sender.send(_earnedNow)){\r\n            players[msg.sender].TowersList[_TowerType].RoundList[_RoundID].cashedOut = _alreadyCashedOut;\r\n        }\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * @dev Claim the player's In-Game balance such as returnings and referral payings.\r\n     */\r\n    function referralCashout () public {\r\n        require (aff[msg.sender].balance > 0);\r\n\r\n        uint256 _balance = aff[msg.sender].balance;\r\n\r\n        aff[msg.sender].balance = 0;\r\n\r\n        if (!msg.sender.send(_balance)){\r\n            aff[msg.sender].balance = _balance;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Creates the new account\r\n     * @param nickname the nickname player would like to use (better to leave it empty)\r\n     * @param _referralAddress (the address of the player who invited the user)\r\n     */\r\n    function setNickname (string nickname, address _referralAddress)\r\n    public {\r\n        if (players[msg.sender].playerID == 0){\r\n            players[msg.sender] = PlayerInfo (playerID_counter, msg.sender, _referralAddress, nickname);\r\n            playersByID[playerID_counter] = PlayerInfo (playerID_counter, msg.sender, _referralAddress, nickname);\r\n            playerID_counter++;\r\n        }else{\r\n            players[msg.sender].nickname = nickname;\r\n            playersByID[players[msg.sender].playerID].nickname = nickname;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev The following functions are for the web-site implementation to get details about Towers, Rounds and Players\r\n     */\r\n     \r\n    function _playerRoundsInfo (address _playerAddress, uint256 _TowerType, uint256 _RoundID)\r\n    public\r\n    view\r\n    returns (uint256, uint256, uint256, uint256, bool, address) {\r\n        uint256 _warriors = players[_playerAddress].TowersList[_TowerType].RoundList[_RoundID].warriors;\r\n        TowersInfo memory r = GameRounds[_TowerType].RoundList[_RoundID];\r\n        bool isFinished = true;\r\n        if (r.timeToFinish > now){\r\n            isFinished = false;\r\n        }\r\n        return (\r\n        r.towerBalance*GameRounds[_TowerType].winnerShare/100,\r\n        _currentPlayerAmountUnclaimed(_playerAddress, _TowerType, _RoundID),\r\n        _warriors,\r\n        r.totalWarriors,\r\n        isFinished,\r\n        r.lastPlayer);\r\n    }\r\n\r\n\r\n    function _currentPlayerAmountUnclaimed (address _playerAddress, uint256 _TowerType, uint256 _RoundID)\r\n    public\r\n    view\r\n    returns (uint256) {\r\n        if (_RoundID == 0){\r\n            _RoundID = GameRounds[_TowerType].currentRoundID;\r\n        }\r\n        uint256 _warriors = players[_playerAddress].TowersList[_TowerType].RoundList[_RoundID].warriors;\r\n        uint256 _totalForCashOut = (_warriors*GameRounds[_TowerType].RoundList[_RoundID].towerBalance*GameRounds[_TowerType].dividendShare/GameRounds[_TowerType].RoundList[_RoundID].totalWarriors/100);\r\n        uint256 _unclaimedAmount = _totalForCashOut-players[_playerAddress].TowersList[_TowerType].RoundList[_RoundID].cashedOut;\r\n        return (_unclaimedAmount);\r\n    }\r\n    \r\n    function _playerInfo (uint256 _playerID)\r\n    public\r\n    view\r\n    returns (uint256, address, string, uint256) {\r\n        return (playersByID[_playerID].playerID,\r\n        playersByID[_playerID].playerAddress,\r\n        playersByID[_playerID].nickname,\r\n        aff[playersByID[_playerID].playerAddress].balance);\r\n    }\r\n\r\n    function _playerBalance (address _playerAddress)\r\n    public\r\n    view\r\n    returns (uint256) {\r\n        return aff[_playerAddress].balance;\r\n    }\r\n\r\n    function _TowerRoundDetails (uint256 _TowerType, uint256 _RoundID)\r\n    public\r\n    view\r\n    returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, address) {\r\n        TowersInfo memory r = GameRounds[_TowerType].RoundList[_RoundID];\r\n        return (\r\n        r.roundID,\r\n        r.towerBalance,\r\n        r.totalBalance,\r\n        r.totalWarriors,\r\n        r.timeToFinish,\r\n        r.timeLimit,\r\n        r.warriorToTime,\r\n        r.bonusPot,\r\n        r.lastPlayer\r\n        );\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y)\r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n    /**\r\n     * @dev x to the power of y\r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else\r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_TowerType\",\"type\":\"uint256\"},{\"name\":\"_RoundID\",\"type\":\"uint256\"}],\"name\":\"_playerRoundsInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_TowerType\",\"type\":\"uint256\"},{\"name\":\"_WarriorsAmount\",\"type\":\"uint256\"},{\"name\":\"_referralID\",\"type\":\"uint256\"}],\"name\":\"buyWarriors\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"aff\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nickname\",\"type\":\"string\"},{\"name\":\"_referralAddress\",\"type\":\"address\"}],\"name\":\"setNickname\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GameRounds\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"timeLimit\",\"type\":\"uint256\"},{\"name\":\"warriorToTime\",\"type\":\"uint256\"},{\"name\":\"currentRoundID\",\"type\":\"uint256\"},{\"name\":\"growthCoefficient\",\"type\":\"uint256\"},{\"name\":\"winnerShare\",\"type\":\"uint256\"},{\"name\":\"nextRound\",\"type\":\"uint256\"},{\"name\":\"dividendShare\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerID\",\"type\":\"uint256\"}],\"name\":\"_playerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"referralCashout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playerID_counter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playersByID\",\"outputs\":[{\"name\":\"playerID\",\"type\":\"uint256\"},{\"name\":\"playerAddress\",\"type\":\"address\"},{\"name\":\"referralAddress\",\"type\":\"address\"},{\"name\":\"nickname\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"_playerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_TowerType\",\"type\":\"uint256\"},{\"name\":\"_RoundID\",\"type\":\"uint256\"}],\"name\":\"_TowerRoundDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"playerID\",\"type\":\"uint256\"},{\"name\":\"playerAddress\",\"type\":\"address\"},{\"name\":\"referralAddress\",\"type\":\"address\"},{\"name\":\"nickname\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_TowerType\",\"type\":\"uint256\"},{\"name\":\"_RoundID\",\"type\":\"uint256\"}],\"name\":\"_currentPlayerAmountUnclaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_TowerType\",\"type\":\"uint256\"},{\"name\":\"_RoundID\",\"type\":\"uint256\"}],\"name\":\"dividendCashout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"TowerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"RoundID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TotalWarriors\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"WarriorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TimeLeft\",\"type\":\"uint256\"}],\"name\":\"BuyEvent\",\"type\":\"event\"}]","ContractName":"EthCrystal","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6196357152c0c947fe02f12015f23190da96fae8cc2ec66a35ed58cbdd6fd22f"}]}