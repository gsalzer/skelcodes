{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n   contract TCallee {\r\n\r\n// Connection to other ERC20 smart contracts\r\n function transferFrom(address _from, address _to, uint256 _value) external returns (bool success){}\r\n\r\n}\r\n \r\ninterface  ptopinterface  {\r\n       //new exchange function\r\n       function newExchange (address smart1, uint256 amount1, address two2, address smart2, uint256 amount2) external payable returns(uint exchangeId);\r\n       //new exchange event\r\n       event NewExchange (uint exchangeId, address one1, address indexed smart1, uint256 amount1, address two2, address indexed smart2, uint256 amount2);\r\n      //get the exchange details\r\n       function getExchange (uint _Id) external view returns (address _one1,address _smart1,uint256 _amount1, address _two2, address _smart2, uint256 _amount2, bool); \r\n       //cancek an exchange by one of the parties\r\n       function cancelExchange (uint exchangeId) external payable returns (bool success);\r\n       //cancel exchange event\r\n       event CancelExchange (uint exchangeId);\r\n       // do exchange function\r\n       function doExchange (uint exchangeId) external payable returns (bool success);\r\n       //do exchange event\r\n       event DoExchange (uint exchangeId);\r\n    \r\n}\r\n\r\ncontract p2ptokenexchange is ptopinterface{\r\n    \r\n     address constant atokenaddress=0xf0B3BA2Dd4B2ef75d727A4045d7fBcc415B77bF0;//mainnet\r\n    \r\n    struct exchange {\r\n        address one1;\r\n        address smart1;\r\n        uint256 amount1;\r\n        address two2;\r\n        address smart2;\r\n        uint256 amount2;\r\n        bool DealDone;\r\n    }\r\n    \r\n    uint counter= 0;\r\n    //mapping by counter \r\n    mapping (uint => exchange) exchanges;\r\n    \r\n    event NewExchange (uint exchangeId, address one1, address indexed smart1, uint256 amount1, address two2, address indexed smart2, uint256 amount2);\r\n    event CancelExchange (uint exchangeId);\r\n    event DoExchange (uint exchangeId);\r\n    \r\n    function newExchange (address smart1, uint256 amount1, address two2, address smart2, uint256 amount2) external payable returns(uint exchangeId) {\r\n        require(msg.value>=206000000);\r\n        exchangeId = counter;\r\n        exchanges[exchangeId]=exchange(msg.sender,smart1,amount1,two2,smart2,amount2,false);\r\n        counter +=1;\r\n        if (exchanges[exchangeId].smart1==address(0)) {\r\n        require(msg.value>=exchanges[exchangeId].amount1+206000000);\r\n        uint256 amountTosend=(msg.value-exchanges[exchangeId].amount1);\r\n        payether(atokenaddress, amountTosend);\r\n        } else {\r\n           require(payether(atokenaddress, msg.value)==true);   \r\n        }\r\n        emit NewExchange (exchangeId,msg.sender,smart1,amount1,two2,smart2,amount2);\r\n        return exchangeId;\r\n    }\r\n    \r\n    function getExchange (uint _Id) external view returns (address _one1,address _smart1,uint256 _amount1, address _two2, address _smart2, uint256 _amount2, bool){\r\n        return (exchanges[_Id].one1, exchanges[_Id].smart1, exchanges[_Id].amount1, exchanges[_Id].two2, exchanges[_Id].smart2, exchanges[_Id].amount2, exchanges[_Id].DealDone);\r\n    }\r\n    \r\n    function cancelExchange (uint exchangeId) external payable returns (bool success) {\r\n         //re-entry defense\r\n        bool locked;\r\n        require(!locked);\r\n        locked = true;\r\n        require(msg.value>=206000000);\r\n        if (msg.sender==exchanges[exchangeId].one1) {\r\n        } else {\r\n        require(msg.sender==exchanges[exchangeId].two2);\r\n        require(msg.sender!=0x1111111111111111111111111111111111111111);    \r\n        }\r\n        \r\n        exchanges[exchangeId].DealDone=true;\r\n        if (exchanges[exchangeId].smart1==address(0)) {\r\n            require(payether(exchanges[exchangeId].one1, exchanges[exchangeId].amount1)==true);\r\n        }\r\n         require(payether(atokenaddress, msg.value)==true);\r\n         emit CancelExchange(exchangeId);\r\n         locked=false;\r\n            return true;\r\n                }\r\n    \r\n    function doExchange (uint exchangeId) external payable returns (bool success) {\r\n         //re-entry defense\r\n        bool _locked;\r\n        require(!_locked);\r\n        _locked = true;\r\n        require(msg.value>=206000000);\r\n        if (exchanges[exchangeId].two2!=0x1111111111111111111111111111111111111111){\r\n        require(msg.sender==exchanges[exchangeId].two2);\r\n        } else {\r\n        exchanges[exchangeId].two2=msg.sender;    \r\n        }\r\n   \r\n        require(exchanges[exchangeId].DealDone==false);\r\n        require(exchanges[exchangeId].amount2>0);\r\n       \r\n        if (exchanges[exchangeId].smart2==address(0)) {\r\n            \r\n            require(msg.value >=206000000 + exchanges[exchangeId].amount2);\r\n            require(payether(atokenaddress, msg.value - exchanges[exchangeId].amount2)==true);\r\n        } else {\r\n            require(payether(atokenaddress, msg.value)==true);\r\n        }\r\n       //party 2 move tokens to party 1\r\n        if (exchanges[exchangeId].smart2==address(0)) {\r\n            require(payether(exchanges[exchangeId].one1,exchanges[exchangeId].amount2)==true);\r\n        } else {\r\n            TCallee c= TCallee(exchanges[exchangeId].smart2);\r\n            bool x=c.transferFrom(exchanges[exchangeId].two2, exchanges[exchangeId].one1, exchanges[exchangeId].amount2);\r\n             require(x==true);\r\n        }\r\n      \r\n      //party 1 moves tokens to party 2\r\n      if (exchanges[exchangeId].smart1==address(0)) {\r\n         require(payether(exchanges[exchangeId].two2, exchanges[exchangeId].amount1)==true);\r\n         \r\n    } else {\r\n         TCallee d= TCallee(exchanges[exchangeId].smart1);\r\n            bool y=d.transferFrom(exchanges[exchangeId].one1, exchanges[exchangeId].two2, exchanges[exchangeId].amount1);\r\n             require(y==true);\r\n      \r\n      \r\n    }\r\n    exchanges[exchangeId].DealDone=true;\r\n    emit DoExchange (exchangeId); \r\n    _locked=false;\r\n    return true;\r\n}\r\n\r\nfunction payether(address payto, uint256 amountTo) internal returns(bool){\r\n    payto.transfer(amountTo);\r\n    return true;\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_Id\",\"type\":\"uint256\"}],\"name\":\"getExchange\",\"outputs\":[{\"name\":\"_one1\",\"type\":\"address\"},{\"name\":\"_smart1\",\"type\":\"address\"},{\"name\":\"_amount1\",\"type\":\"uint256\"},{\"name\":\"_two2\",\"type\":\"address\"},{\"name\":\"_smart2\",\"type\":\"address\"},{\"name\":\"_amount2\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"exchangeId\",\"type\":\"uint256\"}],\"name\":\"cancelExchange\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"smart1\",\"type\":\"address\"},{\"name\":\"amount1\",\"type\":\"uint256\"},{\"name\":\"two2\",\"type\":\"address\"},{\"name\":\"smart2\",\"type\":\"address\"},{\"name\":\"amount2\",\"type\":\"uint256\"}],\"name\":\"newExchange\",\"outputs\":[{\"name\":\"exchangeId\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"exchangeId\",\"type\":\"uint256\"}],\"name\":\"doExchange\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"exchangeId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"one1\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"smart1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"two2\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"smart2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount2\",\"type\":\"uint256\"}],\"name\":\"NewExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"exchangeId\",\"type\":\"uint256\"}],\"name\":\"CancelExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"exchangeId\",\"type\":\"uint256\"}],\"name\":\"DoExchange\",\"type\":\"event\"}]","ContractName":"p2ptokenexchange","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://621769ccbd3e041fcf0efab92d63c152ab414219470e87e0c6d1bd7ceb3fb926"}]}