{"status":"1","message":"OK","result":[{"SourceCode":"// Ethertote - TeamEth time-locked smart contract\r\n//\r\n// The following contract offers peace of mind to investors as the\r\n// Eth that will go to the members of the Ethertote team\r\n// will be time-locked whereby a maximum of 25% of the Eth can be withdrawn\r\n// from the smart contract every 3 months, starting from December 1st 2018\r\n//\r\n// Withdraw functions can only be called when the current timestamp is \r\n// greater than the time specified in each functions\r\n// ----------------------------------------------------------------------------\r\n\r\npragma solidity 0.4.24;\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// SafeMath Library \r\n///////////////////////////////////////////////////////////////////////////////\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Main contract\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract TeamEth {\r\n    using SafeMath for uint256;\r\n\r\n    address public thisContractAddress;\r\n    address public admin;\r\n    \r\n\r\n    // the first team withdrawal can be made after:\r\n    // GMT: Saturday, 1 December 2018 00:00:00\r\n    // expressed as Unix epoch time \r\n    // https://www.epochconverter.com/\r\n    uint256 public unlockDate1 = 1543622400;\r\n    \r\n    // the second team withdrawal can be made after:\r\n    // GMT: Friday, 1 March 2019 00:00:00\r\n    // expressed as Unix epoch time \r\n    // https://www.epochconverter.com/\r\n    uint256 public unlockDate2 = 1551398400;\r\n    \r\n    // the third team withdrawal can be made after:\r\n    // GMT: Saturday, 1 June 2019 00:00:00\r\n    // expressed as Unix epoch time \r\n    // https://www.epochconverter.com/\r\n    uint256 public unlockDate3 = 1559347200;\r\n    \r\n    // the final team withdrawal can be made after:\r\n    // GMT: Sunday, 1 September 2019 00:00:00\r\n    // expressed as Unix epoch time \r\n    // https://www.epochconverter.com/\r\n    uint256 public unlockDate4 = 1567296000;\r\n    \r\n    // time of the contract creation\r\n    uint256 public createdAt;\r\n    \r\n    // amount of eth that will be claimed\r\n    uint public ethToBeClaimed;\r\n    \r\n    // ensure the function is only called once\r\n    bool public claimAmountSet;\r\n    \r\n    // percentage that the team can withdraw Eth\r\n    // it can naturally be inferred that quarter4 will also be 25%\r\n    uint public percentageQuarter1 = 25;\r\n    uint public percentageQuarter2 = 25;\r\n    uint public percentageQuarter3 = 25;\r\n    \r\n    // 100%\r\n    uint public hundredPercent = 100;\r\n    \r\n    // calculating the number used as the divider\r\n    uint public quarter1 = hundredPercent.div(percentageQuarter1);\r\n    uint public quarter2 = hundredPercent.div(percentageQuarter2);\r\n    uint public quarter3 = hundredPercent.div(percentageQuarter3);\r\n    \r\n    bool public withdraw_1Completed;\r\n    bool public withdraw_2Completed;\r\n    bool public withdraw_3Completed;\r\n\r\n    event Received(address from, uint256 amount);\r\n    event Withdrew(address to, uint256 amount);\r\n    \r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    constructor () public {\r\n        admin = msg.sender;\r\n        thisContractAddress = address(this);\r\n        createdAt = now;\r\n    }\r\n\r\n    // fallback to store all the ether sent to this address\r\n    function() payable public { \r\n    }\r\n    \r\n    function thisContractBalance() public view returns(uint) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function setEthToBeClaimed() onlyAdmin public {\r\n        require(claimAmountSet == false);\r\n        ethToBeClaimed = address(this).balance;\r\n        claimAmountSet = true;\r\n    }\r\n\r\n    // team withdrawal after specified time\r\n    function withdraw_1() onlyAdmin public {\r\n       require(ethToBeClaimed > 0);\r\n       require(withdraw_1Completed == false);\r\n       // ensure current time is later than time set\r\n       require(now >= unlockDate1);\r\n       // now allow a percentage of the balance to be claimed\r\n       admin.transfer(ethToBeClaimed.div(quarter1));\r\n       emit Withdrew(admin, ethToBeClaimed.div(quarter1));    // 25%\r\n       withdraw_1Completed = true;\r\n    }\r\n    \r\n    // team withdrawal after specified time\r\n    function withdraw_2() onlyAdmin public {\r\n       require(ethToBeClaimed > 0);\r\n       require(withdraw_2Completed == false);\r\n       // ensure current time is later than time set\r\n       require(now >= unlockDate2);\r\n       // now allow a percentage of the balance to be claimed\r\n       admin.transfer(ethToBeClaimed.div(quarter2));\r\n       emit Withdrew(admin, ethToBeClaimed.div(quarter2));    // 25%\r\n       withdraw_2Completed = true;\r\n    }\r\n    \r\n    // team withdrawal after specified time\r\n    function withdraw_3() onlyAdmin public {\r\n       require(ethToBeClaimed > 0);\r\n       require(withdraw_3Completed == false);\r\n       // ensure current time is later than time set\r\n       require(now >= unlockDate3);\r\n       // now allow a percentage of the balance to be claimed\r\n       admin.transfer(ethToBeClaimed.div(quarter3));\r\n       emit Withdrew(admin, ethToBeClaimed.div(quarter3));    // 25%\r\n       withdraw_3Completed = true;\r\n    }\r\n    \r\n    // team withdrawal after specified time\r\n    function withdraw_4() onlyAdmin public {\r\n       // ensure current time is later than time set\r\n       require(now >= unlockDate4);\r\n       // now allow all remaining balance to be claimed\r\n       admin.transfer(address(this).balance);\r\n       emit Withdrew(admin, address(this).balance);    // all remaining balance\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"thisContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockDate2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"claimAmountSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thisContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageQuarter3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdraw_2Completed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quarter1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quarter2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setEthToBeClaimed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"quarter3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hundredPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageQuarter2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdraw_1Completed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockDate3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw_1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockDate1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageQuarter1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethToBeClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdraw_3Completed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlockDate4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"}]","ContractName":"TeamEth","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cb8c0ff9b3147819c8e77e71898a3298eb08fd73b5cc89b97d5feb6da560fbe9"}]}