{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract ERC20TokenInterface {\r\n\r\n    function totalSupply () external constant returns (uint);\r\n    function balanceOf (address tokenOwner) external constant returns (uint balance);\r\n    function transfer (address to, uint tokens) external returns (bool success);\r\n    function transferFrom (address from, address to, uint tokens) external returns (bool success);\r\n\r\n}\r\n\r\n/**\r\n * Math operations with safety checks that throw on overflows.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul (uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div (uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    function sub (uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add (uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * DreamTeam tokens vesting smart contract. \r\n * This vesting smart contracts releases 25% of tokens 6 months after the smart contract was initialized,\r\n * 50% of tokens after 1 year, 75% of tokens after 1 year 6 months and 100% tokens are available after 2 years.\r\n * The withdrawal address is set during the initialization (initializeVestingFor function).\r\n * To withdraw tokens, send an empty transaction to this smart contract address.\r\n * Once vesting period (2 year) ends and after all tokens are withdrawn, this smart contract self-destructs.\r\n */\r\ncontract TwoYearDreamTokensVesting {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * Address of DREAM token.\r\n     */\r\n    ERC20TokenInterface public dreamToken;\r\n\r\n    /**\r\n     * Address which will receive tokens. This address is set during initialization.\r\n     */\r\n    address public withdrawalAddress = 0x0;\r\n\r\n    /**\r\n     * Tokens vesting stage structure with vesting date and tokens allowed to unlock.\r\n     */\r\n    struct VestingStage {\r\n        uint256 date;\r\n        uint256 tokensUnlockedPercentage;\r\n    }\r\n\r\n    /**\r\n     * Array for storing all vesting stages with structure defined above.\r\n     */\r\n    VestingStage[4] public stages;\r\n\r\n    /**\r\n     * Total amount of tokens to send.\r\n     */\r\n    uint256 public initialTokensBalance;\r\n\r\n    /**\r\n     * Amount of tokens already sent.\r\n     */\r\n    uint256 public tokensSent;\r\n\r\n    /**\r\n     * Unix timestamp at when the vesting has begun.\r\n     */\r\n    uint256 public vestingStartUnixTimestamp;\r\n\r\n    /**\r\n     * Account that deployed this smart contract, which is authorized to initialize vesting.\r\n     */\r\n    address public deployer;\r\n\r\n    modifier deployerOnly { require(msg.sender == deployer); _; }\r\n    modifier whenInitialized { require(withdrawalAddress != 0x0); _; }\r\n    modifier whenNotInitialized { require(withdrawalAddress == 0x0); _; }\r\n\r\n    /**\r\n     * Event raised on each successful withdraw.\r\n     */\r\n    event Withdraw(uint256 amount, uint256 timestamp);\r\n\r\n    /**\r\n     * Dedicate vesting smart contract for a particular token during deployment.\r\n     * @param token Address of DreamToken that will be locked on contract.\r\n     */\r\n    constructor (ERC20TokenInterface token) public {\r\n        dreamToken = token;\r\n        deployer = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Fallback: function that releases locked tokens within schedule. Send an empty transaction to this\r\n     * smart contract for withdrawalAddress to receive tokens.\r\n     */\r\n    function () external {\r\n        withdrawTokens();\r\n    }\r\n\r\n    /**\r\n     * Vesting initialization function. Contract deployer has to trigger this function after vesting amount\r\n     * was sent to this smart contract.\r\n     * @param account Account to initialize vesting for.\r\n     */\r\n    function initializeVestingFor (address account) external deployerOnly whenNotInitialized {\r\n        initialTokensBalance = dreamToken.balanceOf(this);\r\n        require(initialTokensBalance != 0);\r\n        withdrawalAddress = account;\r\n        vestingStartUnixTimestamp = block.timestamp;\r\n        vestingRules();\r\n    }\r\n\r\n    /**\r\n     * Calculate tokens amount that is sent to withdrawalAddress.\r\n     * @return Amount of tokens that can be sent.\r\n     */\r\n    function getAvailableTokensToWithdraw () public view returns (uint256) {\r\n        uint256 tokensUnlockedPercentage = getTokensUnlockedPercentage();\r\n        // withdrawalAddress will only be able to get all additional tokens sent to this smart contract\r\n        // at the end of the vesting period\r\n        if (tokensUnlockedPercentage >= 100) {\r\n            return dreamToken.balanceOf(this);\r\n        } else {\r\n            return getTokensAmountAllowedToWithdraw(tokensUnlockedPercentage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup array with vesting stages dates and percentages.\r\n     */\r\n    function vestingRules () internal {\r\n\r\n        uint256 halfOfYear = 183 days;\r\n        uint256 year = halfOfYear * 2;\r\n\r\n        stages[0].date = vestingStartUnixTimestamp + halfOfYear;\r\n        stages[1].date = vestingStartUnixTimestamp + year;\r\n        stages[2].date = vestingStartUnixTimestamp + year + halfOfYear;\r\n        stages[3].date = vestingStartUnixTimestamp + (year * 2);\r\n\r\n        stages[0].tokensUnlockedPercentage = 25;\r\n        stages[1].tokensUnlockedPercentage = 50;\r\n        stages[2].tokensUnlockedPercentage = 75;\r\n        stages[3].tokensUnlockedPercentage = 100;\r\n\r\n    }\r\n\r\n    /**\r\n     * Function for tokens withdrawal from the vesting smart contract. Triggered from the fallback function.\r\n     */\r\n    function withdrawTokens () private whenInitialized {\r\n        uint256 tokensToSend = getAvailableTokensToWithdraw();\r\n        sendTokens(tokensToSend);\r\n        if (dreamToken.balanceOf(this) == 0) { // When all tokens were sent, destroy this smart contract\r\n            selfdestruct(withdrawalAddress);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send tokens to withdrawalAddress.\r\n     * @param tokensToSend Amount of tokens will be sent.\r\n     */\r\n    function sendTokens (uint256 tokensToSend) private {\r\n        if (tokensToSend == 0) {\r\n            return;\r\n        }\r\n        tokensSent = tokensSent.add(tokensToSend); // Update tokensSent variable to send correct amount later\r\n        dreamToken.transfer(withdrawalAddress, tokensToSend); // Send allowed number of tokens\r\n        emit Withdraw(tokensToSend, now); // Emitting a notification that tokens were withdrawn\r\n    }\r\n\r\n    /**\r\n     * Calculate tokens available for withdrawal.\r\n     * @param tokensUnlockedPercentage Percent of tokens that are allowed to be sent.\r\n     * @return Amount of tokens that can be sent according to provided percentage.\r\n     */\r\n    function getTokensAmountAllowedToWithdraw (uint256 tokensUnlockedPercentage) private view returns (uint256) {\r\n        uint256 totalTokensAllowedToWithdraw = initialTokensBalance.mul(tokensUnlockedPercentage).div(100);\r\n        uint256 unsentTokensAmount = totalTokensAllowedToWithdraw.sub(tokensSent);\r\n        return unsentTokensAmount;\r\n    }\r\n\r\n    /**\r\n     * Get tokens unlocked percentage on current stage.\r\n     * @return Percent of tokens allowed to be sent.\r\n     */\r\n    function getTokensUnlockedPercentage () private view returns (uint256) {\r\n\r\n        uint256 allowedPercent;\r\n\r\n        for (uint8 i = 0; i < stages.length; i++) {\r\n            if (now >= stages[i].date) {\r\n                allowedPercent = stages[i].tokensUnlockedPercentage;\r\n            }\r\n        }\r\n\r\n        return allowedPercent;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableTokensToWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialTokensBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dreamToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"initializeVestingFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"tokensUnlockedPercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingStartUnixTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"TwoYearDreamTokensVesting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000082f4ded9cec9b5750fbff5c2185aee35afc16587","Library":"","SwarmSource":"bzzr://da4ce9c38328a3feddc225fc21196b0092470a0ddb45c523ab81ee043c2cc70b"}]}