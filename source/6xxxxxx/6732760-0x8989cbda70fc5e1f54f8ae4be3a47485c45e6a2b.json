{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract MyEthLab {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public PERCENT_PER_DAY = 5;                        // 0.05%\r\n    uint256 constant public ONE_HUNDRED_PERCENTS = 10000;               // 100%\r\n    uint256 constant public MARKETING_FEE = 700;                        // 7%\r\n    uint256 constant public TEAM_FEE = 300;                             // 3%\r\n    uint256 constant public REFERRAL_PERCENTS = 300;                    // 3%\r\n    uint256 constant public MAX_RATE = 330;                             // 3.3%\r\n    uint256 constant public MAX_DAILY_LIMIT = 150 ether;                // 150 ETH\r\n    uint256 constant public MAX_DEPOSIT = 25 ether;                     // 25 ETH\r\n    uint256 constant public MIN_DEPOSIT = 50 finney;                    // 0.05 ETH\r\n    uint256 constant public MAX_USER_DEPOSITS_COUNT = 50;\r\n\r\n    struct Deposit {\r\n        uint256 time;\r\n        uint256 amount;\r\n        uint256 rate;\r\n    }\r\n\r\n    struct User {\r\n        address referrer;\r\n        uint256 firstTime;\r\n        uint256 lastPayment;\r\n        uint256 totalAmount;\r\n        uint256 lastInvestment;\r\n        uint256 depositAdditionalRate;\r\n        Deposit[] deposits;\r\n    }\r\n\r\n    address public marketing = 0x270ff8c154d4d738B78bEd52a6885b493A2EDdA3;\r\n    address public team = 0x69B18e895F2D9438d2128DB8151EB6e9bB02136d;\r\n\r\n    uint256 public totalDeposits;\r\n    uint256 public dailyTime;\r\n    uint256 public dailyLimit;\r\n    bool public running = true;\r\n    mapping(address => User) public users;\r\n\r\n    event InvestorAdded(address indexed investor);\r\n    event ReferrerAdded(address indexed investor, address indexed referrer);\r\n    event DepositAdded(address indexed investor, uint256 indexed depositsCount, uint256 amount);\r\n    event UserDividendPayed(address indexed investor, uint256 dividend);\r\n    event ReferrerPayed(address indexed investor, address indexed referrer, uint256 amount, uint256 refAmount);\r\n    event FeePayed(address indexed investor, uint256 amount);\r\n    event TotalDepositsChanged(uint256 totalDeposits);\r\n    event BalanceChanged(uint256 balance);\r\n    event DepositDividendPayed(address indexed investor, uint256 indexed index, uint256 deposit, uint256 rate, uint256 dividend);\r\n    \r\n    constructor() public {\r\n        dailyTime = now.add(1 days);\r\n    }\r\n    \r\n    function() public payable {\r\n        require(running, \"MyEthLab is not running\");\r\n        User storage user = users[msg.sender];\r\n\r\n        if (now > dailyTime) {\r\n            dailyTime = now.add(1 days);\r\n            dailyLimit = 0;\r\n        }\r\n\r\n        // Dividends\r\n        uint256[] memory dividends = dividendsForUser(msg.sender);\r\n        uint256 dividendsSum = _dividendsSum(dividends);\r\n        if (dividendsSum > 0) {\r\n\r\n            // One payment per hour and first payment will be after 24 hours\r\n            if ((now.sub(user.lastPayment)) > 1 hours && (now.sub(user.firstTime)) > 1 days) {\r\n                if (dividendsSum >= address(this).balance) {\r\n                \tdividendsSum = address(this).balance;\r\n                \trunning = false;\r\n            \t}\r\n                msg.sender.transfer(dividendsSum);\r\n                user.lastPayment = now;\r\n                emit UserDividendPayed(msg.sender, dividendsSum);\r\n                for (uint i = 0; i < dividends.length; i++) {\r\n                    emit DepositDividendPayed(\r\n                        msg.sender,\r\n                        i,\r\n                        user.deposits[i].amount,\r\n                        user.deposits[i].rate,\r\n                        dividends[i]\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        // Deposit\r\n        if (msg.value > 0) {\r\n            require(msg.value >= MIN_DEPOSIT, \"You dont have enough ethers\");\r\n\r\n            uint256 userTotalDeposit = user.totalAmount.add(msg.value);\r\n            require(userTotalDeposit <= MAX_DEPOSIT, \"You have enough invesments\");\r\n\r\n            if (user.firstTime != 0 && (now.sub(user.lastInvestment)) > 1 days) {\r\n                user.depositAdditionalRate = user.depositAdditionalRate.add(5);\r\n            }\r\n\r\n            if (user.firstTime == 0) {\r\n                user.firstTime = now;\r\n                emit InvestorAdded(msg.sender);\r\n            }\r\n\r\n            user.lastInvestment = now;\r\n            user.totalAmount = userTotalDeposit;\r\n\r\n            uint currentRate = getRate(userTotalDeposit).add(user.depositAdditionalRate).add(balanceAdditionalRate());\r\n            if (currentRate > MAX_RATE) {\r\n                currentRate = MAX_RATE;\r\n            }\r\n\r\n            // Create deposit\r\n            user.deposits.push(Deposit({\r\n                time: now,\r\n                amount: msg.value,\r\n                rate: currentRate\r\n            }));\r\n\r\n            require(user.deposits.length <= MAX_USER_DEPOSITS_COUNT, \"Too many deposits per user\");\r\n            emit DepositAdded(msg.sender, user.deposits.length, msg.value);\r\n\r\n            // Check daily limit and Add daily amount of etheres\r\n            dailyLimit = dailyLimit.add(msg.value);\r\n            require(dailyLimit < MAX_DAILY_LIMIT, \"Please wait one more day too invest\");\r\n\r\n            // Add to total deposits\r\n            totalDeposits = totalDeposits.add(msg.value);\r\n            emit TotalDepositsChanged(totalDeposits);\r\n\r\n            // Add referral if possible\r\n            if (user.referrer == address(0) && msg.data.length == 20) {\r\n                address referrer = _bytesToAddress(msg.data);\r\n                if (referrer != address(0) && referrer != msg.sender && now >= users[referrer].firstTime) {\r\n                    user.referrer = referrer;\r\n                    emit ReferrerAdded(msg.sender, referrer);\r\n                }\r\n            }\r\n\r\n            // Referrers fees\r\n            if (users[msg.sender].referrer != address(0)) {\r\n                address referrerAddress = users[msg.sender].referrer;\r\n                uint256 refAmount = msg.value.mul(REFERRAL_PERCENTS).div(ONE_HUNDRED_PERCENTS);\r\n                referrerAddress.send(refAmount); // solium-disable-line security/no-send\r\n                emit ReferrerPayed(msg.sender, referrerAddress, msg.value, refAmount);\r\n            }\r\n\r\n            // Marketing and team fees\r\n            uint256 marketingFee = msg.value.mul(MARKETING_FEE).div(ONE_HUNDRED_PERCENTS);\r\n            uint256 teamFee = msg.value.mul(TEAM_FEE).div(ONE_HUNDRED_PERCENTS);\r\n            marketing.send(marketingFee); // solium-disable-line security/no-send\r\n            team.send(teamFee); // solium-disable-line security/no-send\r\n            emit FeePayed(msg.sender, marketingFee.add(teamFee));            \r\n        }\r\n\r\n        emit BalanceChanged(address(this).balance);\r\n    }\r\n\r\n    function depositsCountForUser(address wallet) public view returns(uint256) {\r\n        return users[wallet].deposits.length;\r\n    }\r\n\r\n    function depositForUser(address wallet, uint256 index) public view returns(uint256 time, uint256 amount, uint256 rate) {\r\n        time = users[wallet].deposits[index].time;\r\n        amount = users[wallet].deposits[index].amount;\r\n        rate = users[wallet].deposits[index].rate;\r\n    }\r\n\r\n    function dividendsSumForUser(address wallet) public view returns(uint256 dividendsSum) {\r\n        return _dividendsSum(dividendsForUser(wallet));\r\n    }\r\n\r\n    function dividendsForUser(address wallet) public view returns(uint256[] dividends) {\r\n        User storage user = users[wallet];\r\n        dividends = new uint256[](user.deposits.length);\r\n\r\n        for (uint i = 0; i < user.deposits.length; i++) {\r\n            uint256 duration = now.sub(user.lastPayment);\r\n            dividends[i] = dividendsForAmountAndTime(user.deposits[i].rate, user.deposits[i].amount, duration);\r\n        }\r\n    }\r\n\r\n    function dividendsForAmountAndTime(uint256 rate, uint256 amount, uint256 duration) public pure returns(uint256) {\r\n        return amount\r\n            .mul(rate).div(ONE_HUNDRED_PERCENTS)\r\n            .mul(duration).div(1 days);\r\n    }\r\n\r\n    function _bytesToAddress(bytes data) private pure returns(address addr) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            addr := mload(add(data, 20)) \r\n        }\r\n    }\r\n\r\n    function _dividendsSum(uint256[] dividends) private pure returns(uint256 dividendsSum) {\r\n        for (uint i = 0; i < dividends.length; i++) {\r\n            dividendsSum = dividendsSum.add(dividends[i]);\r\n        }\r\n    }\r\n    \r\n    function getRate(uint256 userTotalDeposit) private pure returns(uint256) {\r\n        if (userTotalDeposit < 5 ether) {\r\n            return 180;\r\n        } else if (userTotalDeposit < 10 ether) {\r\n            return 200;\r\n        } else {\r\n            return 220;\r\n        }\r\n    }\r\n    \r\n    function balanceAdditionalRate() public view returns(uint256) {\r\n        if (address(this).balance < 600 ether) {\r\n            return 0;\r\n        } else if (address(this).balance < 1200 ether) {\r\n            return 10;\r\n        } else if (address(this).balance < 1800 ether) {\r\n            return 20;\r\n        } else if (address(this).balance < 2400 ether) {\r\n            return 30;\r\n        } else if (address(this).balance < 3000 ether) {\r\n            return 40;\r\n        } else {\r\n            return 50;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"depositsCountForUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"dividendsForUser\",\"outputs\":[{\"name\":\"dividends\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_PER_DAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"firstTime\",\"type\":\"uint256\"},{\"name\":\"lastPayment\",\"type\":\"uint256\"},{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"lastInvestment\",\"type\":\"uint256\"},{\"name\":\"depositAdditionalRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKETING_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_USER_DEPOSITS_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"dividendsForAmountAndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"depositForUser\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEAM_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"running\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DEPOSIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_DEPOSIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DAILY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"dividendsSumForUser\",\"outputs\":[{\"name\":\"dividendsSum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceAdditionalRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"InvestorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"depositsCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dividend\",\"type\":\"uint256\"}],\"name\":\"UserDividendPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refAmount\",\"type\":\"uint256\"}],\"name\":\"ReferrerPayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalDeposits\",\"type\":\"uint256\"}],\"name\":\"TotalDepositsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dividend\",\"type\":\"uint256\"}],\"name\":\"DepositDividendPayed\",\"type\":\"event\"}]","ContractName":"MyEthLab","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c67428a779f49359be4a80553d43dcb4f59afac41bb05b74b95808e7fc4ad986"}]}