{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// Based on the final ERC20 specification at:\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function decimals() public view returns (uint8);\r\n    function totalSupply() public view returns (uint256);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract ERC20Token is ERC20Interface {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string  private tokenName;\r\n    string  private tokenSymbol;\r\n    uint8   private tokenDecimals;\r\n    uint256 internal tokenTotalSupply;\r\n    uint256 public publicReservedToken;\r\n    uint256 public tokenConversionFactor = 10**4;\r\n    mapping(address => uint256) internal balances;\r\n\r\n    // Owner of account approves the transfer of an amount to another account\r\n    mapping(address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply,address _publicReserved,uint256 _publicReservedPersentage/*,address[] boardReserved,uint256[] boardReservedPersentage*/) public {\r\n        tokenName = _name;\r\n        tokenSymbol = _symbol;\r\n        tokenDecimals = _decimals;\r\n        tokenTotalSupply = _totalSupply;\r\n\r\n        // The initial Public Reserved balance of tokens is assigned to the given token holder address.\r\n        // from total supple 90% tokens assign to public reserved  holder\r\n        publicReservedToken = _totalSupply.mul(_publicReservedPersentage).div(tokenConversionFactor);\r\n        balances[_publicReserved] = publicReservedToken;\r\n\r\n        //10 persentage token available for board members\r\n        //uint256 boardReservedToken = _totalSupply.sub(publicReservedToken);\r\n\r\n        // Per EIP20, the constructor should fire a Transfer event if tokens are assigned to an account.\r\n        emit Transfer(0x0, _publicReserved, publicReservedToken);\r\n\r\n\t\t/*\r\n        // The initial Board Reserved balance of tokens is assigned to the given token holder address.\r\n        uint256 persentageSum = 0;\r\n        for(uint i=0; i<boardReserved.length; i++){\r\n            //\r\n            persentageSum = persentageSum.add(boardReservedPersentage[i]);\r\n            require(persentageSum <= 10000);\r\n            //assigning board members persentage tokens to particular board member address.\r\n            uint256 token = boardReservedToken.mul(boardReservedPersentage[i]).div(tokenConversionFactor);\r\n            balances[boardReserved[i]] = token;\r\n            Transfer(0x0, boardReserved[i], token);\r\n        }\r\n\t\t*/\r\n\r\n    }\r\n\r\n\r\n    function name() public view returns (string) {\r\n        return tokenName;\r\n    }\r\n\r\n\r\n    function symbol() public view returns (string) {\r\n        return tokenSymbol;\r\n    }\r\n\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return tokenDecimals;\r\n    }\r\n\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokenTotalSupply;\r\n    }\r\n\r\n    // Get the token balance for account `tokenOwner`\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        uint256 fromBalance = balances[msg.sender];\r\n        if (fromBalance < _value) return false;\r\n        if (_value > 0 && msg.sender != _to) {\r\n          balances[msg.sender] = fromBalance.sub(_value);\r\n          balances[_to] = balances[_to].add(_value);\r\n        }\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Send `tokens` amount of tokens from address `from` to address `to`\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        \r\n        uint256 spenderAllowance = allowed [_from][msg.sender];\r\n        if (spenderAllowance < _value) return false;\r\n        uint256 fromBalance = balances [_from];\r\n        if (fromBalance < _value) return false;\r\n    \r\n        allowed [_from][msg.sender] = spenderAllowance.sub(_value);\r\n    \r\n        if (_value > 0 && _from != _to) {\r\n          balances [_from] = fromBalance.sub(_value);\r\n          balances [_to] = balances[_to].add(_value);\r\n        }\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Allow `spender` to withdraw from your account, multiple times, up to the `tokens` amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public proposedOwner = address(0);\r\n\r\n    event OwnershipTransferInitiated(address indexed _proposedOwner);\r\n    event OwnershipTransferCompleted(address indexed _newOwner);\r\n    event OwnershipTransferCanceled();\r\n\r\n\r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n\r\n    function isOwner(address _address) public view returns (bool) {\r\n        return (_address == owner);\r\n    }\r\n\r\n\r\n    function initiateOwnershipTransfer(address _proposedOwner) public onlyOwner returns (bool) {\r\n        require(_proposedOwner != address(0));\r\n        require(_proposedOwner != address(this));\r\n        require(_proposedOwner != owner);\r\n\r\n        proposedOwner = _proposedOwner;\r\n\r\n        emit OwnershipTransferInitiated(proposedOwner);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function cancelOwnershipTransfer() public onlyOwner returns (bool) {\r\n        //if proposedOwner address already address(0) then it will return true.\r\n        if (proposedOwner == address(0)) {\r\n            return true;\r\n        }\r\n        //if not then first it will do address(0) then it will return true.\r\n        proposedOwner = address(0);\r\n\r\n        emit OwnershipTransferCanceled();\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function completeOwnershipTransfer() public returns (bool) {\r\n\r\n        require(msg.sender == proposedOwner);\r\n\r\n        owner = msg.sender;\r\n        proposedOwner = address(0);\r\n\r\n        emit OwnershipTransferCompleted(owner);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract FinalizableToken is ERC20Token, Owned {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n    /**\r\n         * @dev Call publicReservedAddress - library function exposed for testing.\r\n    */\r\n    address public publicReservedAddress;\r\n\r\n\r\n    event Burn(address indexed burner,uint256 value);\r\n\r\n    // The constructor will assign the initial token supply to the owner (msg.sender).\r\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply,address _publicReserved,uint256 _publicReservedPersentage) public\r\n    ERC20Token(_name, _symbol, _decimals, _totalSupply, _publicReserved, _publicReservedPersentage)\r\n    Owned(){\r\n        publicReservedAddress = _publicReserved;\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        tokenTotalSupply = tokenTotalSupply.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n    \r\n     //get current time\r\n    function currentTime() public constant returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n}\r\n\r\ncontract HCXTokenConfig {\r\n\r\n    string  public constant TOKEN_SYMBOL      = \"HCX\";\r\n    string  public constant TOKEN_NAME        = \"HOLIDAY CAPITAL Token\";\r\n    uint8   public constant TOKEN_DECIMALS    = 18;\r\n\r\n    uint256 public constant DECIMALSFACTOR    = 10**uint256(TOKEN_DECIMALS);\r\n    uint256 public constant TOKEN_TOTALSUPPLY = 1000000000 * DECIMALSFACTOR;\r\n\r\n    address public constant PUBLIC_RESERVED = 0x6E22277b9A32a88cba52d5108ca7E836d994859f;\r\n    uint256 public constant PUBLIC_RESERVED_PERSENTAGE = 10000;\r\n\r\n}\r\n\r\n// Holiday Capital issues vouchers in the form of blockchain tokens to spend in all of its apartments around the world.\r\ncontract HCXToken is FinalizableToken, HCXTokenConfig {\r\n\r\n    using SafeMath for uint256;\r\n    event TokensReclaimed(uint256 _amount);\r\n\r\n    constructor() public\r\n    FinalizableToken(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS, TOKEN_TOTALSUPPLY, PUBLIC_RESERVED, PUBLIC_RESERVED_PERSENTAGE)\r\n    {\r\n\r\n    }\r\n\r\n\r\n    // Allows the owner to reclaim tokens that have been sent to the token address itself.\r\n    function reclaimTokens() public onlyOwner returns (bool) {\r\n\r\n        address account = address(this);\r\n        uint256 amount  = balanceOf(account);\r\n\r\n        if (amount == 0) {\r\n            return false;\r\n        }\r\n\r\n        balances[account] = balances[account].sub(amount);\r\n        balances[owner] = balances[owner].add(amount);\r\n\r\n        emit Transfer(account, owner, amount);\r\n\r\n        emit TokensReclaimed(amount);\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUBLIC_RESERVED_PERSENTAGE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenConversionFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_TOTALSUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALSFACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PUBLIC_RESERVED\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"initiateOwnershipTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicReservedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicReservedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeOwnershipTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokensReclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipTransferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HCXToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ff1e3b4a87974c455f9cc42e5323e23e9058bad2c5099634932e36350ee6d975"}]}