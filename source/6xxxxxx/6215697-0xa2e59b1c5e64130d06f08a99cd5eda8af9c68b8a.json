{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n//----------------------------------------------------------------------------\r\n//Welcome to Dissidia of Contract PreSale\r\n//欢迎来到契约纷争预售\r\n//----------------------------------------------------------------------------\r\n\r\ncontract SafeMath{\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) public pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract Administration is SafeMath{\r\n    event Pause();\r\n    event Unpause();\r\n    event PriceRaise();\r\n    event PriceStop();\r\n\r\n    address public CEOAddress;\r\n    address public CTOAddress;\r\n    \r\n    uint oneEth = 1 ether;\r\n    uint public feeUnit = 1 finney;\r\n    uint public preSaleDurance = 45 days;\r\n\r\n    bool public paused = false;\r\n    bool public pricePause = true;\r\n    \r\n    uint public startTime;\r\n    uint public endTime;\r\n    \r\n    uint[3] raiseIndex = [\r\n        3,\r\n        7,\r\n        5\r\n    ];\r\n    \r\n    uint[3] rewardPercent = [\r\n        15,\r\n        25,\r\n        30\r\n    ];\r\n\r\n    modifier onlyCEO() {\r\n        require(msg.sender == CEOAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == CEOAddress || msg.sender == CTOAddress);\r\n        _;\r\n    }\r\n\r\n    function setCTO(address _newAdmin) public onlyCEO {\r\n        require(_newAdmin != address(0));\r\n        CTOAddress = _newAdmin;\r\n    }\r\n\r\n    function withdrawBalanceAll() external onlyAdmin {\r\n        CEOAddress.transfer(address(this).balance);\r\n    }\r\n    \r\n    function withdrawBalance(uint _amount) external onlyAdmin {\r\n        CEOAddress.transfer(_amount);\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyCEO whenNotPaused returns(bool) {\r\n        paused = true;\r\n        emit Pause();\r\n        return true;\r\n    }\r\n\r\n    function unpause() public onlyCEO whenPaused returns(bool) {\r\n        paused = false;\r\n        emit Unpause();\r\n        return true;\r\n    }\r\n\r\n    function _random(uint _lower, uint _range, uint _jump) internal view returns (uint) {\r\n        uint number = uint(blockhash(block.number - _jump)) % _range;\r\n        if (number < _lower) {\r\n            number = _lower;\r\n        }\r\n        return number;\r\n    }\r\n\r\n    function setFeeUnit(uint _fee) public onlyCEO {\r\n        feeUnit = _fee;\r\n    }\r\n    \r\n    function setPreSaleDurance(uint _durance) public onlyCEO {\r\n        preSaleDurance = _durance;\r\n    }\r\n    \r\n    function unPausePriceRaise() public onlyCEO {\r\n        require(pricePause == true);\r\n        pricePause = false;\r\n        startTime = uint(now);\r\n        emit PriceRaise();\r\n    }\r\n    \r\n    function pausePriceRaise() public onlyCEO {\r\n        require(pricePause == false);\r\n        pricePause = true;\r\n        endTime = uint(now);\r\n        emit PriceStop();\r\n    }\r\n    \r\n    function _computePrice(uint _startPrice, uint _endPrice, uint _totalDurance, uint _timePass) internal pure returns (uint) {\r\n        if (_timePass >= _totalDurance) {\r\n            return _endPrice;\r\n        } else {\r\n            uint totalPriceChange = safeSub(_endPrice, _startPrice);\r\n            uint currentPriceChange = totalPriceChange * uint(_timePass) / uint(_totalDurance);\r\n            uint currentPrice = uint(_startPrice) + currentPriceChange;\r\n\r\n            return uint(currentPrice);\r\n        }\r\n    }\r\n    \r\n    function computePrice(uint _startPrice, uint _raiseIndex) public view returns (uint) {\r\n        if(pricePause == false) {\r\n            uint timePass = safeSub(uint(now), startTime);\r\n            return _computePrice(_startPrice, _startPrice*raiseIndex[_raiseIndex], preSaleDurance, timePass);\r\n        } else {\r\n            return _startPrice;\r\n        }\r\n    }\r\n    \r\n    function WhoIsTheContractMaster() public pure returns (string) {\r\n        return \"Alexander The Exlosion\";\r\n    }\r\n}\r\n\r\ncontract Broker is Administration {\r\n    // ----------------------------------------------------------------------------\r\n    // Events\r\n    // ----------------------------------------------------------------------------\r\n    event BrokerRegistered(uint indexed brokerId, address indexed broker);\r\n    event AppendSubBroker(uint indexed brokerId, uint indexed subBrokerId, address indexed subBroker);\r\n    event BrokerTransfer(address indexed newBroker, uint indexed brokerId, uint indexed subBrokerId);\r\n    event BrokerFeeDistrubution(address indexed vipBroker, uint indexed vipShare, address indexed broker, uint share);\r\n    event BrokerFeeClaim(address indexed broker, uint indexed fee);\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Mappings\r\n    // ----------------------------------------------------------------------------\r\n    mapping (uint => address[]) BrokerIdToBrokers;\r\n    mapping (uint => uint) BrokerIdToSpots;\r\n    mapping (address => uint) BrokerIncoming;\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Variables\r\n    // ----------------------------------------------------------------------------\r\n    uint public vipBrokerFee = 5 ether;\r\n    uint public brokerFee = 1.5 ether;\r\n    uint public vipBrokerNum = 1000;\r\n    uint public subBrokerNum = 5;\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Modifier\r\n    // ----------------------------------------------------------------------------\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Internal Function\r\n    // ----------------------------------------------------------------------------\r\n    function _brokerFeeDistribute(uint _price, uint _type, uint _brokerId, uint _subBrokerId) internal {\r\n        address vipBroker = getBrokerAddress(_brokerId, 0);\r\n        address broker = getBrokerAddress(_brokerId, _subBrokerId);\r\n        require(vipBroker != address(0) && broker != address(0));\r\n        uint totalShare = _price*rewardPercent[_type]/100;\r\n        BrokerIncoming[vipBroker] = BrokerIncoming[vipBroker] + totalShare*15/100;\r\n        BrokerIncoming[broker] = BrokerIncoming[broker] + totalShare*85/100;\r\n        \r\n        emit BrokerFeeDistrubution(vipBroker, totalShare*15/100, broker, totalShare*85/100);\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Public Function\r\n    // ----------------------------------------------------------------------------\r\n    function registerBroker() public payable returns (uint) {\r\n        require(vipBrokerNum > 0);\r\n        require(msg.value >= vipBrokerFee);\r\n        vipBrokerNum--;\r\n        uint brokerId = 1000 - vipBrokerNum;\r\n        BrokerIdToBrokers[brokerId].push(msg.sender);\r\n        BrokerIdToSpots[brokerId] = subBrokerNum;\r\n        emit BrokerRegistered(brokerId, msg.sender);\r\n        return brokerId;\r\n    }\r\n    \r\n    function assignSubBroker(uint _brokerId, address _broker) public payable {\r\n        require(msg.sender == BrokerIdToBrokers[_brokerId][0]);\r\n        require(msg.value >= brokerFee);\r\n        require(BrokerIdToSpots[_brokerId] > 0);\r\n        uint newSubBrokerId = BrokerIdToBrokers[_brokerId].push(_broker) - 1;\r\n        BrokerIdToSpots[_brokerId]--;\r\n        \r\n        emit AppendSubBroker(_brokerId, newSubBrokerId, _broker);\r\n    }\r\n    \r\n    function transferBroker(address _newBroker, uint _brokerId, uint _subBrokerId) public whenNotPaused {\r\n        require(_brokerId > 0 && _brokerId <= 1000);\r\n        require(_subBrokerId >= 0 && _subBrokerId <= 5);\r\n        require(BrokerIdToBrokers[_brokerId][_subBrokerId] == msg.sender);\r\n        BrokerIdToBrokers[_brokerId][_subBrokerId] = _newBroker;\r\n        \r\n        emit BrokerTransfer(_newBroker, _brokerId, _subBrokerId);\r\n    }\r\n\r\n    function claimBrokerFee() public whenNotPaused {\r\n        uint fee = BrokerIncoming[msg.sender];\r\n        require(fee > 0);\r\n        msg.sender.transfer(fee);\r\n        BrokerIncoming[msg.sender] = 0;\r\n        emit BrokerFeeClaim(msg.sender, fee);\r\n    }\r\n    \r\n    function getBrokerIncoming(address _broker) public view returns (uint) {\r\n        return BrokerIncoming[_broker];\r\n    } \r\n    \r\n    function getBrokerInfo(uint _brokerId) public view returns (\r\n        address broker,\r\n        uint subSpot\r\n    ) { \r\n        broker = BrokerIdToBrokers[_brokerId][0];\r\n        subSpot = BrokerIdToSpots[_brokerId];\r\n    }\r\n    \r\n    function getBrokerAddress(uint _brokerId, uint _subBrokerId) public view returns (address) {\r\n        return BrokerIdToBrokers[_brokerId][_subBrokerId];\r\n    }\r\n    \r\n    function getVipBrokerNum() public view returns (uint) {\r\n        return safeSub(1000, vipBrokerNum);\r\n    }\r\n}\r\n\r\ncontract PreSaleRealm is Broker {\r\n    // ----------------------------------------------------------------------------\r\n    // Events\r\n    // ----------------------------------------------------------------------------\r\n    event RealmSaleCreate(uint indexed saleId, uint indexed realmId, uint indexed price);\r\n    event BuyRealm(uint indexed saleId, uint realmId, address indexed buyer, uint indexed currentPrice);\r\n    event RealmOfferSubmit(uint indexed saleId, uint realmId, address indexed bidder, uint indexed price);\r\n    event RealmOfferAccept(uint indexed saleId, uint realmId, address indexed newOwner, uint indexed newPrice);\r\n    event SetRealmSale(uint indexed saleId, uint indexed price);\r\n    \r\n    event RealmAuctionCreate(uint indexed auctionId, uint indexed realmId, uint indexed startPrice);\r\n    event RealmAuctionBid(uint indexed auctionId, address indexed bidder, uint indexed offer);\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Mappings\r\n    // ----------------------------------------------------------------------------\r\n    mapping (uint => address) public RealmSaleToBuyer;\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Variables\r\n    // ----------------------------------------------------------------------------\r\n    struct RealmSale {\r\n        uint realmId;\r\n        uint price;\r\n        bool ifSold;\r\n        address bidder;\r\n        uint offerPrice;\r\n        uint timestamp;\r\n    }\r\n    \r\n    RealmSale[] realmSales;\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Modifier\r\n    // ----------------------------------------------------------------------------\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Internal Function\r\n    // ----------------------------------------------------------------------------\r\n    function _generateRealmSale(uint _realmId, uint _price) internal returns (uint) {\r\n        RealmSale memory _RealmSale = RealmSale({\r\n            realmId: _realmId,\r\n            price: _price,\r\n            ifSold: false,\r\n            bidder: address(0),\r\n            offerPrice: 0,\r\n            timestamp: 0\r\n        });\r\n        uint realmSaleId = realmSales.push(_RealmSale) - 1;\r\n        emit RealmSaleCreate(realmSaleId, _realmId, _price);\r\n        \r\n        return realmSaleId;\r\n    }\r\n    // ----------------------------------------------------------------------------\r\n    // Public Function\r\n    // ----------------------------------------------------------------------------\r\n    function createRealmSale(uint _num, uint _startId, uint _price) public onlyAdmin {\r\n        for(uint i = 0; i<_num; i++) {\r\n            _generateRealmSale(_startId + i, _price);\r\n        }\r\n    }\r\n    \r\n    function buyRealm(uint _realmSaleId, uint _brokerId, uint _subBrokerId) public payable whenNotPaused {\r\n        RealmSale storage _realmSale = realmSales[_realmSaleId];\r\n        require(RealmSaleToBuyer[_realmSale.realmId] == address(0));\r\n        require(_realmSale.ifSold == false);\r\n        uint currentPrice;\r\n        if(pricePause == true) {\r\n            if(_realmSale.timestamp != 0 && _realmSale.timestamp != endTime) {\r\n                uint timePass = safeSub(endTime, startTime);\r\n                _realmSale.price = _computePrice(_realmSale.price, _realmSale.price*raiseIndex[0], preSaleDurance, timePass);\r\n                _realmSale.timestamp = endTime;\r\n            }\r\n            _brokerFeeDistribute(_realmSale.price, 0, _brokerId, _subBrokerId);\r\n            require(msg.value >= _realmSale.price);\r\n            currentPrice = _realmSale.price;\r\n        } else {\r\n            if(_realmSale.timestamp == 0) {\r\n                _realmSale.timestamp = uint(now);\r\n            }\r\n            currentPrice = _computePrice(_realmSale.price, _realmSale.price*raiseIndex[0], preSaleDurance, safeSub(uint(now), startTime));\r\n            _brokerFeeDistribute(currentPrice, 0, _brokerId, _subBrokerId);\r\n            require(msg.value >= currentPrice);\r\n            _realmSale.price = currentPrice;\r\n        }\r\n        RealmSaleToBuyer[_realmSale.realmId] = msg.sender;\r\n        _realmSale.ifSold = true;\r\n        emit BuyRealm(_realmSaleId, _realmSale.realmId, msg.sender, currentPrice);\r\n    }\r\n    \r\n    function offlineRealmSold(uint _realmSaleId, address _buyer, uint _price) public onlyAdmin {\r\n        RealmSale storage _realmSale = realmSales[_realmSaleId];\r\n        require(_realmSale.ifSold == false);\r\n        RealmSaleToBuyer[_realmSale.realmId] = _buyer;\r\n        _realmSale.ifSold = true;\r\n        emit BuyRealm(_realmSaleId, _realmSale.realmId, _buyer, _price);\r\n    }\r\n    \r\n    function OfferToRealm(uint _realmSaleId, uint _price) public payable whenNotPaused {\r\n        RealmSale storage _realmSale = realmSales[_realmSaleId];\r\n        require(_realmSale.ifSold == true);\r\n        require(_price >= _realmSale.offerPrice*11/10);\r\n        require(msg.value >= _price);\r\n        \r\n        if(_realmSale.bidder == address(0)) {\r\n            _realmSale.bidder = msg.sender;\r\n            _realmSale.offerPrice = _price;\r\n        } else {\r\n            address lastBidder = _realmSale.bidder;\r\n            uint lastOffer = _realmSale.price;\r\n            lastBidder.transfer(lastOffer);\r\n            \r\n            _realmSale.bidder = msg.sender;\r\n            _realmSale.offerPrice = _price;\r\n        }\r\n        \r\n        emit RealmOfferSubmit(_realmSaleId, _realmSale.realmId, msg.sender, _price);\r\n    }\r\n    \r\n    function AcceptRealmOffer(uint _realmSaleId) public whenNotPaused {\r\n        RealmSale storage _realmSale = realmSales[_realmSaleId];\r\n        require(RealmSaleToBuyer[_realmSale.realmId] == msg.sender);\r\n        require(_realmSale.bidder != address(0) && _realmSale.offerPrice > 0);\r\n        msg.sender.transfer(_realmSale.offerPrice);\r\n        RealmSaleToBuyer[_realmSale.realmId] = _realmSale.bidder;\r\n        _realmSale.price = _realmSale.offerPrice;\r\n        \r\n        emit RealmOfferAccept(_realmSaleId, _realmSale.realmId, _realmSale.bidder, _realmSale.offerPrice);\r\n        \r\n        _realmSale.bidder = address(0);\r\n        _realmSale.offerPrice = 0;\r\n    }\r\n    \r\n    function setRealmSale(uint _realmSaleId, uint _price) public onlyAdmin {\r\n        RealmSale storage _realmSale = realmSales[_realmSaleId];\r\n        require(_realmSale.ifSold == false);\r\n        _realmSale.price = _price;\r\n        emit SetRealmSale(_realmSaleId, _price);\r\n    }\r\n    \r\n    function getRealmSale(uint _realmSaleId) public view returns (\r\n        address owner,\r\n        uint realmId,\r\n        uint price,\r\n        bool ifSold,\r\n        address bidder,\r\n        uint offerPrice,\r\n        uint timestamp\r\n    ) {\r\n        RealmSale memory _RealmSale = realmSales[_realmSaleId];\r\n        owner = RealmSaleToBuyer[_RealmSale.realmId];\r\n        realmId = _RealmSale.realmId;\r\n        price = _RealmSale.price;\r\n        ifSold =_RealmSale.ifSold;\r\n        bidder = _RealmSale.bidder;\r\n        offerPrice = _RealmSale.offerPrice;\r\n        timestamp = _RealmSale.timestamp;\r\n    }\r\n    \r\n    function getRealmNum() public view returns (uint) {\r\n        return realmSales.length;\r\n    }\r\n}\r\n\r\ncontract PreSaleCastle is PreSaleRealm {\r\n    // ----------------------------------------------------------------------------\r\n    // Events\r\n    // ----------------------------------------------------------------------------\r\n    event CastleSaleCreate(uint indexed saleId, uint indexed castleId, uint indexed price, uint realmId, uint rarity);\r\n    event BuyCastle(uint indexed saleId, uint castleId, address indexed buyer, uint indexed currentPrice);\r\n    event CastleOfferSubmit(uint indexed saleId, uint castleId, address indexed bidder, uint indexed price);\r\n    event CastleOfferAccept(uint indexed saleId, uint castleId, address indexed newOwner, uint indexed newPrice);\r\n    event SetCastleSale(uint indexed saleId, uint indexed price);\r\n    \r\n    event CastleAuctionCreate(uint indexed auctionId, uint indexed castleId, uint indexed startPrice, uint realmId, uint rarity);\r\n    event CastleAuctionBid(uint indexed auctionId, address indexed bidder, uint indexed offer);\r\n    \r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Mappings\r\n    // ----------------------------------------------------------------------------\r\n    mapping (uint => address) public CastleSaleToBuyer;\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Variables\r\n    // ----------------------------------------------------------------------------\r\n    struct CastleSale {\r\n        uint castleId;\r\n        uint realmId;\r\n        uint rarity;\r\n        uint price;\r\n        bool ifSold;\r\n        address bidder;\r\n        uint offerPrice;\r\n        uint timestamp;\r\n    }\r\n\r\n    CastleSale[] castleSales;\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Modifier\r\n    // ----------------------------------------------------------------------------\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Internal Function\r\n    // ----------------------------------------------------------------------------\r\n    function _generateCastleSale(uint _castleId, uint _realmId, uint _rarity, uint _price) internal returns (uint) {\r\n        CastleSale memory _CastleSale = CastleSale({\r\n            castleId: _castleId,\r\n            realmId: _realmId,\r\n            rarity: _rarity,\r\n            price: _price,\r\n            ifSold: false,\r\n            bidder: address(0),\r\n            offerPrice: 0,\r\n            timestamp: 0\r\n        });\r\n        uint castleSaleId = castleSales.push(_CastleSale) - 1;\r\n        emit CastleSaleCreate(castleSaleId, _castleId, _price, _realmId, _rarity);\r\n        \r\n        return castleSaleId;\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Public Function\r\n    // ----------------------------------------------------------------------------\r\n    function createCastleSale(uint _num, uint _startId, uint _realmId, uint _rarity, uint _price) public onlyAdmin {\r\n        for(uint i = 0; i<_num; i++) {\r\n            _generateCastleSale(_startId + i, _realmId, _rarity, _price);\r\n        }\r\n    }\r\n    \r\n    function buyCastle(uint _castleSaleId, uint _brokerId, uint _subBrokerId) public payable whenNotPaused {\r\n        CastleSale storage _castleSale = castleSales[_castleSaleId];\r\n        require(CastleSaleToBuyer[_castleSale.castleId] == address(0));\r\n        require(_castleSale.ifSold == false);\r\n        uint currentPrice;\r\n        if(pricePause == true) {\r\n            if(_castleSale.timestamp != 0 && _castleSale.timestamp != endTime) {\r\n                uint timePass = safeSub(endTime, startTime);\r\n                _castleSale.price = _computePrice(_castleSale.price, _castleSale.price*raiseIndex[0], preSaleDurance, timePass);\r\n                _castleSale.timestamp = endTime;\r\n            }\r\n            _brokerFeeDistribute(_castleSale.price, 0, _brokerId, _subBrokerId);\r\n            require(msg.value >= _castleSale.price);\r\n            currentPrice = _castleSale.price;\r\n        } else {\r\n            if(_castleSale.timestamp == 0) {\r\n                _castleSale.timestamp = uint(now);\r\n            }\r\n            currentPrice = _computePrice(_castleSale.price, _castleSale.price*raiseIndex[0], preSaleDurance, safeSub(uint(now), startTime));\r\n            _brokerFeeDistribute(currentPrice, 0, _brokerId, _subBrokerId);\r\n            require(msg.value >= currentPrice);\r\n            _castleSale.price = currentPrice;\r\n        }\r\n        CastleSaleToBuyer[_castleSale.castleId] = msg.sender;\r\n        _castleSale.ifSold = true;\r\n        emit BuyCastle(_castleSaleId, _castleSale.castleId, msg.sender, currentPrice);\r\n    }\r\n    \r\n    function OfflineCastleSold(uint _castleSaleId, address _buyer, uint _price) public onlyAdmin {\r\n        CastleSale storage _castleSale = castleSales[_castleSaleId];\r\n        require(_castleSale.ifSold == false);\r\n        CastleSaleToBuyer[_castleSale.castleId] = _buyer;\r\n        _castleSale.ifSold = true;\r\n        emit BuyCastle(_castleSaleId, _castleSale.castleId, _buyer, _price);\r\n    }\r\n    \r\n    function OfferToCastle(uint _castleSaleId, uint _price) public payable whenNotPaused {\r\n        CastleSale storage _castleSale = castleSales[_castleSaleId];\r\n        require(_castleSale.ifSold == true);\r\n        require(_price >= _castleSale.offerPrice*11/10);\r\n        require(msg.value >= _price);\r\n        \r\n        if(_castleSale.bidder == address(0)) {\r\n            _castleSale.bidder = msg.sender;\r\n            _castleSale.offerPrice = _price;\r\n        } else {\r\n            address lastBidder = _castleSale.bidder;\r\n            uint lastOffer = _castleSale.price;\r\n            lastBidder.transfer(lastOffer);\r\n            \r\n            _castleSale.bidder = msg.sender;\r\n            _castleSale.offerPrice = _price;\r\n        }\r\n        \r\n        emit CastleOfferSubmit(_castleSaleId, _castleSale.castleId, msg.sender, _price);\r\n    }\r\n    \r\n    function AcceptCastleOffer(uint _castleSaleId) public whenNotPaused {\r\n        CastleSale storage _castleSale = castleSales[_castleSaleId];\r\n        require(CastleSaleToBuyer[_castleSale.castleId] == msg.sender);\r\n        require(_castleSale.bidder != address(0) && _castleSale.offerPrice > 0);\r\n        msg.sender.transfer(_castleSale.offerPrice);\r\n        CastleSaleToBuyer[_castleSale.castleId] = _castleSale.bidder;\r\n        _castleSale.price = _castleSale.offerPrice;\r\n        \r\n        emit CastleOfferAccept(_castleSaleId, _castleSale.castleId, _castleSale.bidder, _castleSale.offerPrice);\r\n        \r\n        _castleSale.bidder = address(0);\r\n        _castleSale.offerPrice = 0;\r\n    }\r\n    \r\n    function setCastleSale(uint _castleSaleId, uint _price) public onlyAdmin {\r\n        CastleSale storage _castleSale = castleSales[_castleSaleId];\r\n        require(_castleSale.ifSold == false);\r\n        _castleSale.price = _price;\r\n        emit SetCastleSale(_castleSaleId, _price);\r\n    }\r\n    \r\n    function getCastleSale(uint _castleSaleId) public view returns (\r\n        address owner,\r\n        uint castleId,\r\n        uint realmId,\r\n        uint rarity,\r\n        uint price,\r\n        bool ifSold,\r\n        address bidder,\r\n        uint offerPrice,\r\n        uint timestamp\r\n    ) {\r\n        CastleSale memory _CastleSale = castleSales[_castleSaleId];\r\n        owner = CastleSaleToBuyer[_CastleSale.castleId];\r\n        castleId = _CastleSale.castleId;\r\n        realmId = _CastleSale.realmId;\r\n        rarity = _CastleSale.rarity;\r\n        price = _CastleSale.price;\r\n        ifSold =_CastleSale.ifSold;\r\n        bidder = _CastleSale.bidder;\r\n        offerPrice = _CastleSale.offerPrice;\r\n        timestamp = _CastleSale.timestamp;\r\n    }\r\n    \r\n    function getCastleNum() public view returns (uint) {\r\n        return castleSales.length;\r\n    }\r\n}\r\n\r\ncontract PreSaleGuardian is PreSaleCastle {\r\n    // ----------------------------------------------------------------------------\r\n    // Events\r\n    // ----------------------------------------------------------------------------\r\n    event GuardianSaleCreate(uint indexed saleId, uint indexed guardianId, uint indexed price, uint race, uint level, uint starRate);\r\n    event BuyGuardian(uint indexed saleId, uint guardianId, address indexed buyer, uint indexed currentPrice);\r\n    event GuardianOfferSubmit(uint indexed saleId, uint guardianId, address indexed bidder, uint indexed price);\r\n    event GuardianOfferAccept(uint indexed saleId, uint guardianId, address indexed newOwner, uint indexed newPrice);\r\n    event SetGuardianSale(uint indexed saleId, uint indexed price);\r\n    \r\n    event GuardianAuctionCreate(uint indexed auctionId, uint indexed guardianId, uint indexed startPrice, uint race, uint level, uint starRate);\r\n    event GuardianAuctionBid(uint indexed auctionId, address indexed bidder, uint indexed offer);\r\n    \r\n    event VendingGuardian(uint indexed vendingId, address indexed buyer);\r\n    event GuardianVendOffer(uint indexed vendingId, address indexed bidder, uint indexed offer);\r\n    event GuardianVendAccept(uint indexed vendingId, address indexed newOwner, uint indexed newPrice);\r\n    event SetGuardianVend(uint indexed priceId, uint indexed price);\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Mappings\r\n    // ----------------------------------------------------------------------------\r\n    mapping (uint => address) public GuardianSaleToBuyer;\r\n    \r\n    mapping (uint => uint) public GuardianVendToOffer;\r\n    mapping (uint => address) public GuardianVendToBidder;\r\n    mapping (uint => uint) public GuardianVendToTime;\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Variables\r\n    // ----------------------------------------------------------------------------\r\n    struct GuardianSale {\r\n        uint guardianId;\r\n        uint race;\r\n        uint starRate;\r\n        uint level;\r\n        uint price;\r\n        bool ifSold;\r\n        address bidder;\r\n        uint offerPrice;\r\n        uint timestamp;\r\n    }\r\n    \r\n    GuardianSale[] guardianSales;\r\n\r\n    uint[5] GuardianVending = [\r\n        0.5 ether,\r\n        0.35 ether,\r\n        0.20 ether,\r\n        0.15 ether,\r\n        0.1 ether\r\n    ];\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Modifier\r\n    // ----------------------------------------------------------------------------\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Internal Function\r\n    // ----------------------------------------------------------------------------\r\n    function _generateGuardianSale(uint _guardianId, uint _race, uint _starRate, uint _level, uint _price) internal returns (uint) {\r\n        GuardianSale memory _GuardianSale = GuardianSale({\r\n            guardianId: _guardianId,\r\n            race: _race,\r\n            starRate: _starRate,\r\n            level: _level,\r\n            price: _price,\r\n            ifSold: false,\r\n            bidder: address(0),\r\n            offerPrice: 0,\r\n            timestamp: 0\r\n        });\r\n        uint guardianSaleId = guardianSales.push(_GuardianSale) - 1;\r\n        emit GuardianSaleCreate(guardianSaleId, _guardianId, _price, _race, _level, _starRate);\r\n        \r\n        return guardianSaleId;\r\n    }\r\n    \r\n    function _guardianVendPrice(uint _guardianId , uint _level) internal returns (uint) {\r\n        if(pricePause == true) {\r\n            if(GuardianVendToTime[_guardianId] != 0 && GuardianVendToTime[_guardianId] != endTime) {\r\n                uint timePass = safeSub(endTime, startTime);\r\n                GuardianVending[_level] = _computePrice(GuardianVending[_level], GuardianVending[_level]*raiseIndex[1], preSaleDurance, timePass);\r\n                GuardianVendToTime[_guardianId] = endTime;\r\n            }\r\n            return GuardianVending[_level];\r\n        } else {\r\n            if(GuardianVendToTime[_guardianId] == 0) {\r\n                GuardianVendToTime[_guardianId] = uint(now);\r\n            }\r\n            uint currentPrice = _computePrice(GuardianVending[_level], GuardianVending[_level]*raiseIndex[1], preSaleDurance, safeSub(uint(now), startTime));\r\n            return currentPrice;\r\n        }\r\n    }\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Public Function\r\n    // ----------------------------------------------------------------------------\r\n    function createGuardianSale(uint _num, uint _startId, uint _race, uint _starRate, uint _level, uint _price) public onlyAdmin {\r\n        for(uint i = 0; i<_num; i++) {\r\n            _generateGuardianSale(_startId + i, _race, _starRate, _level, _price);\r\n        }\r\n    }\r\n    \r\n    function buyGuardian(uint _guardianSaleId, uint _brokerId, uint _subBrokerId) public payable whenNotPaused {\r\n        GuardianSale storage _guardianSale = guardianSales[_guardianSaleId];\r\n        require(GuardianSaleToBuyer[_guardianSale.guardianId] == address(0));\r\n        require(_guardianSale.ifSold == false);\r\n        uint currentPrice;\r\n        if(pricePause == true) {\r\n            if(_guardianSale.timestamp != 0 && _guardianSale.timestamp != endTime) {\r\n                uint timePass = safeSub(endTime, startTime);\r\n                _guardianSale.price = _computePrice(_guardianSale.price, _guardianSale.price*raiseIndex[1], preSaleDurance, timePass);\r\n                _guardianSale.timestamp = endTime;\r\n            }\r\n            _brokerFeeDistribute(_guardianSale.price, 1, _brokerId, _subBrokerId);\r\n            require(msg.value >= _guardianSale.price);\r\n            currentPrice = _guardianSale.price;\r\n        } else {\r\n            if(_guardianSale.timestamp == 0) {\r\n                _guardianSale.timestamp = uint(now);\r\n            }\r\n            currentPrice = _computePrice(_guardianSale.price, _guardianSale.price*raiseIndex[1], preSaleDurance, safeSub(uint(now), startTime));\r\n            _brokerFeeDistribute(currentPrice, 1, _brokerId, _subBrokerId);\r\n            require(msg.value >= currentPrice);\r\n            _guardianSale.price = currentPrice;\r\n        }\r\n        GuardianSaleToBuyer[_guardianSale.guardianId] = msg.sender;\r\n        _guardianSale.ifSold = true;\r\n        emit BuyGuardian(_guardianSaleId, _guardianSale.guardianId, msg.sender, currentPrice);\r\n    }\r\n    \r\n    function offlineGuardianSold(uint _guardianSaleId, address _buyer, uint _price) public onlyAdmin {\r\n        GuardianSale storage _guardianSale = guardianSales[_guardianSaleId];\r\n        require(_guardianSale.ifSold == false);\r\n        GuardianSaleToBuyer[_guardianSale.guardianId] = _buyer;\r\n        _guardianSale.ifSold = true;\r\n        emit BuyGuardian(_guardianSaleId, _guardianSale.guardianId, _buyer, _price);\r\n    }\r\n    \r\n    function OfferToGuardian(uint _guardianSaleId, uint _price) public payable whenNotPaused {\r\n        GuardianSale storage _guardianSale = guardianSales[_guardianSaleId];\r\n        require(_guardianSale.ifSold == true);\r\n        require(_price > _guardianSale.offerPrice*11/10);\r\n        require(msg.value >= _price);\r\n        \r\n        if(_guardianSale.bidder == address(0)) {\r\n            _guardianSale.bidder = msg.sender;\r\n            _guardianSale.offerPrice = _price;\r\n        } else {\r\n            address lastBidder = _guardianSale.bidder;\r\n            uint lastOffer = _guardianSale.price;\r\n            lastBidder.transfer(lastOffer);\r\n            \r\n            _guardianSale.bidder = msg.sender;\r\n            _guardianSale.offerPrice = _price;\r\n        }\r\n        \r\n        emit GuardianOfferSubmit(_guardianSaleId, _guardianSale.guardianId, msg.sender, _price);\r\n    }\r\n    \r\n    function AcceptGuardianOffer(uint _guardianSaleId) public whenNotPaused {\r\n        GuardianSale storage _guardianSale = guardianSales[_guardianSaleId];\r\n        require(GuardianSaleToBuyer[_guardianSale.guardianId] == msg.sender);\r\n        require(_guardianSale.bidder != address(0) && _guardianSale.offerPrice > 0);\r\n        msg.sender.transfer(_guardianSale.offerPrice);\r\n        GuardianSaleToBuyer[_guardianSale.guardianId] = _guardianSale.bidder;\r\n        _guardianSale.price = _guardianSale.offerPrice;\r\n        \r\n        emit GuardianOfferAccept(_guardianSaleId, _guardianSale.guardianId, _guardianSale.bidder, _guardianSale.price);\r\n        \r\n        _guardianSale.bidder = address(0);\r\n        _guardianSale.offerPrice = 0;\r\n    }\r\n    \r\n    function setGuardianSale(uint _guardianSaleId, uint _price) public onlyAdmin {\r\n        GuardianSale storage _guardianSale = guardianSales[_guardianSaleId];\r\n        require(_guardianSale.ifSold == false);\r\n        _guardianSale.price = _price;\r\n        emit SetGuardianSale(_guardianSaleId, _price);\r\n    }\r\n    \r\n    function getGuardianSale(uint _guardianSaleId) public view returns (\r\n        address owner,\r\n        uint guardianId,\r\n        uint race,\r\n        uint starRate,\r\n        uint level,\r\n        uint price,\r\n        bool ifSold,\r\n        address bidder,\r\n        uint offerPrice,\r\n        uint timestamp\r\n    ) {\r\n        GuardianSale memory _GuardianSale = guardianSales[_guardianSaleId];\r\n        owner = GuardianSaleToBuyer[_GuardianSale.guardianId];\r\n        guardianId = _GuardianSale.guardianId;\r\n        race = _GuardianSale.race;\r\n        starRate = _GuardianSale.starRate;\r\n        level = _GuardianSale.level;\r\n        price = _GuardianSale.price;\r\n        ifSold =_GuardianSale.ifSold;\r\n        bidder = _GuardianSale.bidder;\r\n        offerPrice = _GuardianSale.offerPrice;\r\n        timestamp = _GuardianSale.timestamp;\r\n    }\r\n    \r\n    function getGuardianNum() public view returns (uint) {\r\n        return guardianSales.length;\r\n    }\r\n\r\n    function vendGuardian(uint _guardianId) public payable whenNotPaused {\r\n        require(_guardianId > 1000 && _guardianId <= 6000);\r\n        if(_guardianId > 1000 && _guardianId <= 2000) {\r\n            require(GuardianSaleToBuyer[_guardianId] == address(0));\r\n            require(msg.value >= _guardianVendPrice(_guardianId, 0));\r\n            GuardianSaleToBuyer[_guardianId] = msg.sender;\r\n            GuardianVendToOffer[_guardianId] = GuardianVending[0];\r\n        } else if (_guardianId > 2000 && _guardianId <= 3000) {\r\n            require(GuardianSaleToBuyer[_guardianId] == address(0));\r\n            require(msg.value >= _guardianVendPrice(_guardianId, 1));\r\n            GuardianSaleToBuyer[_guardianId] = msg.sender;\r\n            GuardianVendToOffer[_guardianId] = GuardianVending[1];\r\n        } else if (_guardianId > 3000 && _guardianId <= 4000) {\r\n            require(GuardianSaleToBuyer[_guardianId] == address(0));\r\n            require(msg.value >= _guardianVendPrice(_guardianId, 2));\r\n            GuardianSaleToBuyer[_guardianId] = msg.sender;\r\n            GuardianVendToOffer[_guardianId] = GuardianVending[2];\r\n        } else if (_guardianId > 4000 && _guardianId <= 5000) {\r\n            require(GuardianSaleToBuyer[_guardianId] == address(0));\r\n            require(msg.value >= _guardianVendPrice(_guardianId, 3));\r\n            GuardianSaleToBuyer[_guardianId] = msg.sender;\r\n            GuardianVendToOffer[_guardianId] = GuardianVending[3];\r\n        } else if (_guardianId > 5000 && _guardianId <= 6000) {\r\n            require(GuardianSaleToBuyer[_guardianId] == address(0));\r\n            require(msg.value >= _guardianVendPrice(_guardianId, 4));\r\n            GuardianSaleToBuyer[_guardianId] = msg.sender;\r\n            GuardianVendToOffer[_guardianId] = GuardianVending[4];\r\n        }\r\n        emit VendingGuardian(_guardianId, msg.sender);\r\n    }\r\n    \r\n    function offerGuardianVend(uint _guardianId, uint _offer) public payable whenNotPaused {\r\n        require(GuardianSaleToBuyer[_guardianId] != address(0));\r\n        require(_offer >= GuardianVendToOffer[_guardianId]*11/10);\r\n        require(msg.value >= _offer);\r\n        address lastBidder = GuardianVendToBidder[_guardianId];\r\n        if(lastBidder != address(0)){\r\n            lastBidder.transfer(GuardianVendToOffer[_guardianId]);\r\n        }\r\n        GuardianVendToBidder[_guardianId] = msg.sender;\r\n        GuardianVendToOffer[_guardianId] = _offer;\r\n        emit GuardianVendOffer(_guardianId, msg.sender, _offer);\r\n    }\r\n    \r\n    function acceptGuardianVend(uint _guardianId) public whenNotPaused {\r\n        require(GuardianSaleToBuyer[_guardianId] == msg.sender);\r\n        address bidder = GuardianVendToBidder[_guardianId];\r\n        uint offer = GuardianVendToOffer[_guardianId];\r\n        require(bidder != address(0) && offer > 0);\r\n        msg.sender.transfer(offer);\r\n        GuardianSaleToBuyer[_guardianId] = bidder;\r\n        GuardianVendToBidder[_guardianId] = address(0);\r\n        GuardianVendToOffer[_guardianId] = 0;\r\n        emit GuardianVendAccept(_guardianId, bidder, offer);\r\n    }\r\n    \r\n    function setGuardianVend(uint _num, uint _price) public onlyAdmin {\r\n        GuardianVending[_num] = _price;\r\n        emit SetGuardianVend(_num, _price);\r\n    }\r\n    \r\n    function getGuardianVend(uint _guardianId) public view returns (\r\n        address owner,\r\n        address bidder,\r\n        uint offer\r\n    ) {\r\n        owner = GuardianSaleToBuyer[_guardianId];\r\n        bidder = GuardianVendToBidder[_guardianId];\r\n        offer = GuardianVendToOffer[_guardianId];\r\n    }\r\n}\r\n\r\ncontract PreSaleDisciple is PreSaleGuardian {\r\n    // ----------------------------------------------------------------------------\r\n    // Events\r\n    // ----------------------------------------------------------------------------\r\n    event DiscipleSaleCreate(uint indexed saleId, uint indexed discipleId, uint indexed price, uint occupation, uint level);\r\n    event BuyDisciple(uint indexed saleId, uint discipleId, address indexed buyer, uint indexed currentPrice);\r\n    event DiscipleOfferSubmit(uint indexed saleId, uint discipleId, address indexed bidder, uint indexed price);\r\n    event DiscipleOfferAccept(uint indexed saleId, uint discipleId, address indexed newOwner, uint indexed newPrice);\r\n    event SetDiscipleSale(uint indexed saleId, uint indexed price);\r\n    \r\n    event DiscipleAuctionCreate(uint indexed auctionId, uint indexed discipleId, uint indexed startPrice, uint occupation, uint level);\r\n    event DiscipleAuctionBid(uint indexed auctionId, address indexed bidder, uint indexed offer);\r\n    \r\n    event VendingDisciple(uint indexed vendingId, address indexed buyer);\r\n    event DiscipleVendOffer(uint indexed vendingId, address indexed bidder, uint indexed offer);\r\n    event DiscipleVendAccept(uint indexed vendingId, address indexed newOwner, uint indexed newPrice);\r\n    event SetDiscipleVend(uint indexed priceId, uint indexed price);\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Mappings\r\n    // ----------------------------------------------------------------------------\r\n    mapping (uint => address) public DiscipleSaleToBuyer;\r\n    \r\n    mapping (uint => uint) public DiscipleVendToOffer;\r\n    mapping (uint => address) public DiscipleVendToBidder;\r\n    mapping (uint => uint) public DiscipleVendToTime;\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Variables\r\n    // ----------------------------------------------------------------------------\r\n    struct DiscipleSale {\r\n        uint discipleId;\r\n        uint occupation;\r\n        uint level;\r\n        uint price;\r\n        bool ifSold;\r\n        address bidder;\r\n        uint offerPrice;\r\n        uint timestamp;\r\n    }\r\n    \r\n    DiscipleSale[] discipleSales;\r\n\r\n    uint[5] DiscipleVending = [\r\n        0.8 ether,\r\n        0.65 ether,\r\n        0.45 ether,\r\n        0.35 ether,\r\n        0.2 ether\r\n    ];\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Modifier\r\n    // ----------------------------------------------------------------------------\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Internal Function\r\n    // ----------------------------------------------------------------------------\r\n    function _generateDiscipleSale(uint _discipleId, uint _occupation, uint _level, uint _price) internal returns (uint) {\r\n        DiscipleSale memory _DiscipleSale = DiscipleSale({\r\n            discipleId: _discipleId,\r\n            occupation: _occupation,\r\n            level: _level,\r\n            price: _price,\r\n            ifSold: false,\r\n            bidder: address(0),\r\n            offerPrice: 0,\r\n            timestamp: 0\r\n        });\r\n        uint discipleSaleId = discipleSales.push(_DiscipleSale) - 1;\r\n        emit DiscipleSaleCreate(discipleSaleId, _discipleId, _price, _occupation, _level);\r\n        \r\n        return discipleSaleId;\r\n    }\r\n    \r\n    function _discipleVendPrice(uint _discipleId , uint _level) internal returns (uint) {\r\n        if(pricePause == true) {\r\n            if(DiscipleVendToTime[_discipleId] != 0 && DiscipleVendToTime[_discipleId] != endTime) {\r\n                uint timePass = safeSub(endTime, startTime);\r\n                DiscipleVending[_level] = _computePrice(DiscipleVending[_level], DiscipleVending[_level]*raiseIndex[1], preSaleDurance, timePass);\r\n                DiscipleVendToTime[_discipleId] = endTime;\r\n            }\r\n            return DiscipleVending[_level];\r\n        } else {\r\n            if(DiscipleVendToTime[_discipleId] == 0) {\r\n                DiscipleVendToTime[_discipleId] = uint(now);\r\n            }\r\n            uint currentPrice = _computePrice(DiscipleVending[_level], DiscipleVending[_level]*raiseIndex[1], preSaleDurance, safeSub(uint(now), startTime));\r\n            return currentPrice;\r\n        }\r\n    }\r\n    // ----------------------------------------------------------------------------\r\n    // Public Function\r\n    // ----------------------------------------------------------------------------\r\n    function createDiscipleSale(uint _num, uint _startId, uint _occupation, uint _level, uint _price) public onlyAdmin {\r\n        for(uint i = 0; i<_num; i++) {\r\n            _generateDiscipleSale(_startId + i, _occupation, _level, _price);\r\n        }\r\n    }\r\n    \r\n    function buyDisciple(uint _discipleSaleId, uint _brokerId, uint _subBrokerId) public payable whenNotPaused {\r\n        DiscipleSale storage _discipleSale = discipleSales[_discipleSaleId];\r\n        require(DiscipleSaleToBuyer[_discipleSale.discipleId] == address(0));\r\n        require(_discipleSale.ifSold == false);\r\n        uint currentPrice;\r\n        if(pricePause == true) {\r\n            if(_discipleSale.timestamp != 0 && _discipleSale.timestamp != endTime) {\r\n                uint timePass = safeSub(endTime, startTime);\r\n                _discipleSale.price = _computePrice(_discipleSale.price, _discipleSale.price*raiseIndex[1], preSaleDurance, timePass);\r\n                _discipleSale.timestamp = endTime;\r\n            }\r\n            _brokerFeeDistribute(_discipleSale.price, 1, _brokerId, _subBrokerId);\r\n            require(msg.value >= _discipleSale.price);\r\n            currentPrice = _discipleSale.price;\r\n        } else {\r\n            if(_discipleSale.timestamp == 0) {\r\n                _discipleSale.timestamp = uint(now);\r\n            }\r\n            currentPrice = _computePrice(_discipleSale.price, _discipleSale.price*raiseIndex[1], preSaleDurance, safeSub(uint(now), startTime));\r\n            _brokerFeeDistribute(currentPrice, 1, _brokerId, _subBrokerId);\r\n            require(msg.value >= currentPrice);\r\n            _discipleSale.price = currentPrice;\r\n        }\r\n        DiscipleSaleToBuyer[_discipleSale.discipleId] = msg.sender;\r\n        _discipleSale.ifSold = true;\r\n        emit BuyDisciple(_discipleSaleId, _discipleSale.discipleId, msg.sender, currentPrice);\r\n    }\r\n    \r\n    function offlineDiscipleSold(uint _discipleSaleId, address _buyer, uint _price) public onlyAdmin {\r\n        DiscipleSale storage _discipleSale = discipleSales[_discipleSaleId];\r\n        require(_discipleSale.ifSold == false);\r\n        DiscipleSaleToBuyer[_discipleSale.discipleId] = _buyer;\r\n        _discipleSale.ifSold = true;\r\n        emit BuyDisciple(_discipleSaleId, _discipleSale.discipleId, _buyer, _price);\r\n    }\r\n    \r\n    function OfferToDisciple(uint _discipleSaleId, uint _price) public payable whenNotPaused {\r\n        DiscipleSale storage _discipleSale = discipleSales[_discipleSaleId];\r\n        require(_discipleSale.ifSold == true);\r\n        require(_price > _discipleSale.offerPrice*11/10);\r\n        require(msg.value >= _price);\r\n        \r\n        if(_discipleSale.bidder == address(0)) {\r\n            _discipleSale.bidder = msg.sender;\r\n            _discipleSale.offerPrice = _price;\r\n        } else {\r\n            address lastBidder = _discipleSale.bidder;\r\n            uint lastOffer = _discipleSale.price;\r\n            lastBidder.transfer(lastOffer);\r\n            \r\n            _discipleSale.bidder = msg.sender;\r\n            _discipleSale.offerPrice = _price;\r\n        }\r\n        \r\n        emit DiscipleOfferSubmit(_discipleSaleId, _discipleSale.discipleId, msg.sender, _price);\r\n    }\r\n    \r\n    function AcceptDiscipleOffer(uint _discipleSaleId) public whenNotPaused {\r\n        DiscipleSale storage _discipleSale = discipleSales[_discipleSaleId];\r\n        require(DiscipleSaleToBuyer[_discipleSale.discipleId] == msg.sender);\r\n        require(_discipleSale.bidder != address(0) && _discipleSale.offerPrice > 0);\r\n        msg.sender.transfer(_discipleSale.offerPrice);\r\n        DiscipleSaleToBuyer[_discipleSale.discipleId] = _discipleSale.bidder;\r\n        _discipleSale.price = _discipleSale.offerPrice;\r\n        \r\n        emit DiscipleOfferAccept(_discipleSaleId, _discipleSale.discipleId, _discipleSale.bidder, _discipleSale.price);\r\n        \r\n        _discipleSale.bidder = address(0);\r\n        _discipleSale.offerPrice = 0;\r\n    }\r\n    \r\n    function setDiscipleSale(uint _discipleSaleId, uint _price) public onlyAdmin {\r\n        DiscipleSale storage _discipleSale = discipleSales[_discipleSaleId];\r\n        require(_discipleSale.ifSold == false);\r\n        _discipleSale.price = _price;\r\n        emit SetDiscipleSale(_discipleSaleId, _price);\r\n    }\r\n    \r\n    function getDiscipleSale(uint _discipleSaleId) public view returns (\r\n        address owner,\r\n        uint discipleId,\r\n        uint occupation,\r\n        uint level,\r\n        uint price,\r\n        bool ifSold,\r\n        address bidder,\r\n        uint offerPrice,\r\n        uint timestamp\r\n    ) {\r\n        DiscipleSale memory _DiscipleSale = discipleSales[_discipleSaleId];\r\n        owner = DiscipleSaleToBuyer[_DiscipleSale.discipleId];\r\n        discipleId = _DiscipleSale.discipleId;\r\n        occupation = _DiscipleSale.occupation;\r\n        level = _DiscipleSale.level;\r\n        price = _DiscipleSale.price;\r\n        ifSold =_DiscipleSale.ifSold;\r\n        bidder = _DiscipleSale.bidder;\r\n        offerPrice = _DiscipleSale.offerPrice;\r\n        timestamp = _DiscipleSale.timestamp;\r\n    }\r\n    \r\n    function getDiscipleNum() public view returns(uint) {\r\n        return discipleSales.length;\r\n    }\r\n    \r\n    function vendDisciple(uint _discipleId) public payable whenNotPaused {\r\n        require(_discipleId > 1000 && _discipleId <= 10000);\r\n        if(_discipleId > 1000 && _discipleId <= 2000) {\r\n            require(DiscipleSaleToBuyer[_discipleId] == address(0));\r\n            require(msg.value >= _discipleVendPrice(_discipleId, 0));\r\n            DiscipleSaleToBuyer[_discipleId] = msg.sender;\r\n            DiscipleVendToOffer[_discipleId] = DiscipleVending[0];\r\n        } else if (_discipleId > 2000 && _discipleId <= 4000) {\r\n            require(DiscipleSaleToBuyer[_discipleId] == address(0));\r\n            require(msg.value >= _discipleVendPrice(_discipleId, 1));\r\n            DiscipleSaleToBuyer[_discipleId] = msg.sender;\r\n            DiscipleVendToOffer[_discipleId] = DiscipleVending[1];\r\n        } else if (_discipleId > 4000 && _discipleId <= 6000) {\r\n            require(DiscipleSaleToBuyer[_discipleId] == address(0));\r\n            require(msg.value >= _discipleVendPrice(_discipleId, 2));\r\n            DiscipleSaleToBuyer[_discipleId] = msg.sender;\r\n            DiscipleVendToOffer[_discipleId] = DiscipleVending[2];\r\n        } else if (_discipleId > 6000 && _discipleId <= 8000) {\r\n            require(DiscipleSaleToBuyer[_discipleId] == address(0));\r\n            require(msg.value >= _discipleVendPrice(_discipleId, 3));\r\n            DiscipleSaleToBuyer[_discipleId] = msg.sender;\r\n            DiscipleVendToOffer[_discipleId] = DiscipleVending[3];\r\n        } else if (_discipleId > 8000 && _discipleId <= 10000) {\r\n            require(DiscipleSaleToBuyer[_discipleId] == address(0));\r\n            require(msg.value >= _discipleVendPrice(_discipleId, 4));\r\n            DiscipleSaleToBuyer[_discipleId] = msg.sender;\r\n            DiscipleVendToOffer[_discipleId] = DiscipleVending[4];\r\n        }\r\n        emit VendingDisciple(_discipleId, msg.sender);\r\n    }\r\n    \r\n    function offerDiscipleVend(uint _discipleId, uint _offer) public payable whenNotPaused {\r\n        require(DiscipleSaleToBuyer[_discipleId] != address(0));\r\n        require(_offer >= DiscipleVendToOffer[_discipleId]*11/10);\r\n        require(msg.value >= _offer);\r\n        address lastBidder = DiscipleVendToBidder[_discipleId];\r\n        if(lastBidder != address(0)){\r\n            lastBidder.transfer(DiscipleVendToOffer[_discipleId]);\r\n        }\r\n        DiscipleVendToBidder[_discipleId] = msg.sender;\r\n        DiscipleVendToOffer[_discipleId] = _offer;\r\n        emit DiscipleVendOffer(_discipleId, msg.sender, _offer);\r\n    }\r\n    \r\n    function acceptDiscipleVend(uint _discipleId) public whenNotPaused {\r\n        require(DiscipleSaleToBuyer[_discipleId] == msg.sender);\r\n        address bidder = DiscipleVendToBidder[_discipleId];\r\n        uint offer = DiscipleVendToOffer[_discipleId];\r\n        require(bidder != address(0) && offer > 0);\r\n        msg.sender.transfer(offer);\r\n        DiscipleSaleToBuyer[_discipleId] = bidder;\r\n        DiscipleVendToBidder[_discipleId] = address(0);\r\n        DiscipleVendToOffer[_discipleId] = 0;\r\n        emit DiscipleVendAccept(_discipleId, bidder, offer);\r\n    }\r\n    \r\n    function setDiscipleVend(uint _num, uint _price) public onlyAdmin {\r\n        DiscipleVending[_num] = _price;\r\n        emit SetDiscipleVend(_num, _price);\r\n    }\r\n    \r\n    function getDiscipleVend(uint _discipleId) public view returns (\r\n        address owner,\r\n        address bidder,\r\n        uint offer\r\n    ) {\r\n        owner = DiscipleSaleToBuyer[_discipleId];\r\n        bidder = DiscipleVendToBidder[_discipleId];\r\n        offer = DiscipleVendToOffer[_discipleId];\r\n    }\r\n}\r\n\r\ncontract PreSaleAssets is PreSaleDisciple {\r\n    // ----------------------------------------------------------------------------\r\n    // Events\r\n    // ----------------------------------------------------------------------------\r\n    event BuyDiscipleItem(address indexed buyer, uint indexed rarity, uint indexed number, uint currentPrice);\r\n    event BuyGuardianRune(address indexed buyer, uint indexed rarity, uint indexed number, uint currentPrice);\r\n    \r\n    event SetDiscipleItem(uint indexed rarity, uint indexed price);\r\n    event SetGuardianRune(uint indexed rarity, uint indexed price);\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Mappings\r\n    // ----------------------------------------------------------------------------\r\n    mapping (address => uint) PlayerOwnRareItem;\r\n    mapping (address => uint) PlayerOwnEpicItem;\r\n    mapping (address => uint) PlayerOwnLegendaryItem;\r\n    mapping (address => uint) PlayerOwnUniqueItem;\r\n    \r\n    mapping (address => uint) PlayerOwnRareRune;\r\n    mapping (address => uint) PlayerOwnEpicRune;\r\n    mapping (address => uint) PlayerOwnLegendaryRune;\r\n    mapping (address => uint) PlayerOwnUniqueRune;\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Variables\r\n    // ----------------------------------------------------------------------------\r\n    uint[4] public DiscipleItem = [\r\n        0.68 ether,\r\n        1.98 ether,\r\n        4.88 ether,\r\n        9.98 ether\r\n    ];\r\n    \r\n    uint[4] public GuardianRune = [\r\n        1.18 ether,\r\n        4.88 ether,\r\n        8.88 ether,\r\n        13.88 ether\r\n    ];\r\n    \r\n    uint itemTimeStamp;\r\n    uint runeTimeStamp;\r\n    // ----------------------------------------------------------------------------\r\n    // Modifier\r\n    // ----------------------------------------------------------------------------\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Internal Function\r\n    // ----------------------------------------------------------------------------\r\n    \r\n    // ----------------------------------------------------------------------------\r\n    // Public Function\r\n    // ----------------------------------------------------------------------------\r\n    function buyDiscipleItem(uint _rarity, uint _num, uint _brokerId, uint _subBrokerId) public payable whenNotPaused {\r\n        require(_rarity >= 0 && _rarity <= 4);\r\n        uint currentPrice;\r\n        if(pricePause == true) {\r\n            if(itemTimeStamp != 0 && itemTimeStamp != endTime) {\r\n                uint timePass = safeSub(endTime, startTime);\r\n                DiscipleItem[0] = _computePrice(DiscipleItem[0], DiscipleItem[0]*raiseIndex[2], preSaleDurance, timePass);\r\n                DiscipleItem[1] = _computePrice(DiscipleItem[1], DiscipleItem[1]*raiseIndex[2], preSaleDurance, timePass);\r\n                DiscipleItem[2] = _computePrice(DiscipleItem[2], DiscipleItem[2]*raiseIndex[2], preSaleDurance, timePass);\r\n                DiscipleItem[3] = _computePrice(DiscipleItem[3], DiscipleItem[3]*raiseIndex[2], preSaleDurance, timePass);\r\n                itemTimeStamp = endTime;\r\n            }\r\n            require(msg.value >= DiscipleItem[_rarity]*_num);\r\n            currentPrice = DiscipleItem[_rarity]*_num;\r\n            _brokerFeeDistribute(currentPrice, 2, _brokerId, _subBrokerId);\r\n        } else {\r\n            if(itemTimeStamp == 0) {\r\n                itemTimeStamp = uint(now);\r\n            }\r\n            currentPrice = _computePrice(DiscipleItem[_rarity], DiscipleItem[_rarity]*raiseIndex[2], preSaleDurance, safeSub(uint(now), startTime));\r\n            require(msg.value >= currentPrice*_num);\r\n            currentPrice = currentPrice*_num;\r\n            _brokerFeeDistribute(currentPrice, 2, _brokerId, _subBrokerId);\r\n        }\r\n        if(_rarity == 0) {\r\n            PlayerOwnRareItem[msg.sender] = safeAdd(PlayerOwnRareItem[msg.sender], _num);\r\n        } else if (_rarity == 1) {\r\n            PlayerOwnEpicItem[msg.sender] = safeAdd(PlayerOwnEpicItem[msg.sender], _num);\r\n        } else if (_rarity == 2) {\r\n            PlayerOwnLegendaryItem[msg.sender] = safeAdd(PlayerOwnLegendaryItem[msg.sender], _num);\r\n        } else if (_rarity == 3) {\r\n            PlayerOwnUniqueItem[msg.sender] = safeAdd(PlayerOwnUniqueItem[msg.sender], _num);\r\n        }\r\n        emit BuyDiscipleItem(msg.sender, _rarity, _num, currentPrice);\r\n    }   \r\n    \r\n    function buyGuardianRune(uint _rarity, uint _num, uint _brokerId, uint _subBrokerId) public payable whenNotPaused {\r\n        require(_rarity >= 0 && _rarity <= 4);\r\n        uint currentPrice;\r\n        if(pricePause == true) {\r\n            if(runeTimeStamp != 0 && runeTimeStamp != endTime) {\r\n                uint timePass = safeSub(endTime, startTime);\r\n                GuardianRune[0] = _computePrice(GuardianRune[0], GuardianRune[0]*raiseIndex[2], preSaleDurance, timePass);\r\n                GuardianRune[1] = _computePrice(GuardianRune[1], GuardianRune[1]*raiseIndex[2], preSaleDurance, timePass);\r\n                GuardianRune[2] = _computePrice(GuardianRune[2], GuardianRune[2]*raiseIndex[2], preSaleDurance, timePass);\r\n                GuardianRune[3] = _computePrice(GuardianRune[3], GuardianRune[3]*raiseIndex[2], preSaleDurance, timePass);\r\n                runeTimeStamp = endTime;\r\n            }\r\n            require(msg.value >= GuardianRune[_rarity]*_num);\r\n            currentPrice = GuardianRune[_rarity]*_num;\r\n            _brokerFeeDistribute(currentPrice, 2, _brokerId, _subBrokerId);\r\n        } else {\r\n            if(runeTimeStamp == 0) {\r\n                runeTimeStamp = uint(now);\r\n            }\r\n            currentPrice = _computePrice(GuardianRune[_rarity], GuardianRune[_rarity]*raiseIndex[2], preSaleDurance, safeSub(uint(now), startTime));\r\n            require(msg.value >= currentPrice*_num);\r\n            currentPrice = currentPrice*_num;\r\n            _brokerFeeDistribute(currentPrice, 2, _brokerId, _subBrokerId);\r\n        }\r\n        if(_rarity == 0) {\r\n            PlayerOwnRareRune[msg.sender] = safeAdd(PlayerOwnRareRune[msg.sender], _num);\r\n        } else if (_rarity == 1) {\r\n            PlayerOwnEpicRune[msg.sender] = safeAdd(PlayerOwnEpicRune[msg.sender], _num);\r\n        } else if (_rarity == 2) {\r\n            PlayerOwnLegendaryRune[msg.sender] = safeAdd(PlayerOwnLegendaryRune[msg.sender], _num);\r\n        } else if (_rarity == 3) {\r\n            PlayerOwnUniqueRune[msg.sender] = safeAdd(PlayerOwnUniqueRune[msg.sender], _num);\r\n        }\r\n        emit BuyGuardianRune(msg.sender, _rarity, _num, currentPrice);\r\n    }\r\n    \r\n    function setDiscipleItem(uint _rarity, uint _price) public onlyAdmin {\r\n        DiscipleItem[_rarity] = _price;\r\n        emit SetDiscipleItem(_rarity, _price);\r\n    }\r\n    \r\n    function setGuardianRune(uint _rarity, uint _price) public onlyAdmin {\r\n        GuardianRune[_rarity] = _price;\r\n        emit SetDiscipleItem(_rarity, _price);\r\n    }\r\n    \r\n    function getPlayerInventory(address _player) public view returns (\r\n        uint rareItem,\r\n        uint epicItem,\r\n        uint legendaryItem,\r\n        uint uniqueItem,\r\n        uint rareRune,\r\n        uint epicRune,\r\n        uint legendaryRune,\r\n        uint uniqueRune\r\n    ) {\r\n        rareItem = PlayerOwnRareItem[_player];\r\n        epicItem = PlayerOwnEpicItem[_player];\r\n        legendaryItem = PlayerOwnLegendaryItem[_player];\r\n        uniqueItem = PlayerOwnUniqueItem[_player];\r\n        rareRune = PlayerOwnRareRune[_player];\r\n        epicRune = PlayerOwnEpicRune[_player];\r\n        legendaryRune = PlayerOwnLegendaryRune[_player];\r\n        uniqueRune = PlayerOwnUniqueRune[_player];\r\n    }\r\n}\r\n\r\ncontract PreSale is PreSaleAssets {\r\n    constructor() public {\r\n        CEOAddress = msg.sender;\r\n        BrokerIdToBrokers[0].push(msg.sender);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_guardianSaleId\",\"type\":\"uint256\"}],\"name\":\"getGuardianSale\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"guardianId\",\"type\":\"uint256\"},{\"name\":\"race\",\"type\":\"uint256\"},{\"name\":\"starRate\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"ifSold\",\"type\":\"bool\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimBrokerFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_castleSaleId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setCastleSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_castleSaleId\",\"type\":\"uint256\"}],\"name\":\"getCastleSale\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"castleId\",\"type\":\"uint256\"},{\"name\":\"realmId\",\"type\":\"uint256\"},{\"name\":\"rarity\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"ifSold\",\"type\":\"bool\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DiscipleVendToBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_realmSaleId\",\"type\":\"uint256\"}],\"name\":\"getRealmSale\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"realmId\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"ifSold\",\"type\":\"bool\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalanceAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"CastleSaleToBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_discipleSaleId\",\"type\":\"uint256\"},{\"name\":\"_brokerId\",\"type\":\"uint256\"},{\"name\":\"_subBrokerId\",\"type\":\"uint256\"}],\"name\":\"buyDisciple\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rarity\",\"type\":\"uint256\"},{\"name\":\"_num\",\"type\":\"uint256\"},{\"name\":\"_brokerId\",\"type\":\"uint256\"},{\"name\":\"_subBrokerId\",\"type\":\"uint256\"}],\"name\":\"buyDiscipleItem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_brokerId\",\"type\":\"uint256\"},{\"name\":\"_subBrokerId\",\"type\":\"uint256\"}],\"name\":\"getBrokerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guardianSaleId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"OfferToGuardian\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DiscipleVendToOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint256\"},{\"name\":\"_startId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createRealmSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_discipleSaleId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setDiscipleSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setDiscipleVend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_castleSaleId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"OfferToCastle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRealmNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GuardianVendToTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unPausePriceRaise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guardianId\",\"type\":\"uint256\"}],\"name\":\"vendGuardian\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleDurance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBroker\",\"type\":\"address\"},{\"name\":\"_brokerId\",\"type\":\"uint256\"},{\"name\":\"_subBrokerId\",\"type\":\"uint256\"}],\"name\":\"transferBroker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEOAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setGuardianVend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"brokerFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"subBrokerNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_discipleSaleId\",\"type\":\"uint256\"}],\"name\":\"AcceptDiscipleOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint256\"},{\"name\":\"_startId\",\"type\":\"uint256\"},{\"name\":\"_occupation\",\"type\":\"uint256\"},{\"name\":\"_level\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createDiscipleSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_broker\",\"type\":\"address\"}],\"name\":\"getBrokerIncoming\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_realmSaleId\",\"type\":\"uint256\"},{\"name\":\"_brokerId\",\"type\":\"uint256\"},{\"name\":\"_subBrokerId\",\"type\":\"uint256\"}],\"name\":\"buyRealm\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_realmSaleId\",\"type\":\"uint256\"}],\"name\":\"AcceptRealmOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint256\"},{\"name\":\"_startId\",\"type\":\"uint256\"},{\"name\":\"_realmId\",\"type\":\"uint256\"},{\"name\":\"_rarity\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createCastleSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCastleNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_guardianId\",\"type\":\"uint256\"}],\"name\":\"getGuardianVend\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"offer\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricePause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WhoIsTheContractMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DiscipleSaleToBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DiscipleVendToTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GuardianRune\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_discipleSaleId\",\"type\":\"uint256\"}],\"name\":\"getDiscipleSale\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"discipleId\",\"type\":\"uint256\"},{\"name\":\"occupation\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"ifSold\",\"type\":\"bool\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGuardianNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_castleSaleId\",\"type\":\"uint256\"}],\"name\":\"AcceptCastleOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rarity\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setDiscipleItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFeeUnit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DiscipleItem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GuardianVendToBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GuardianSaleToBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guardianSaleId\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"offlineGuardianSold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rarity\",\"type\":\"uint256\"},{\"name\":\"_num\",\"type\":\"uint256\"},{\"name\":\"_brokerId\",\"type\":\"uint256\"},{\"name\":\"_subBrokerId\",\"type\":\"uint256\"}],\"name\":\"buyGuardianRune\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDiscipleNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rarity\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setGuardianRune\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_discipleId\",\"type\":\"uint256\"}],\"name\":\"getDiscipleVend\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"offer\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RealmSaleToBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_castleSaleId\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"OfflineCastleSold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_discipleId\",\"type\":\"uint256\"}],\"name\":\"vendDisciple\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pausePriceRaise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVipBrokerNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerBroker\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vipBrokerFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_raiseIndex\",\"type\":\"uint256\"}],\"name\":\"computePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_discipleSaleId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"OfferToDisciple\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_brokerId\",\"type\":\"uint256\"},{\"name\":\"_broker\",\"type\":\"address\"}],\"name\":\"assignSubBroker\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_discipleSaleId\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"offlineDiscipleSold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guardianSaleId\",\"type\":\"uint256\"}],\"name\":\"AcceptGuardianOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_realmSaleId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setRealmSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guardianSaleId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setGuardianSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_brokerId\",\"type\":\"uint256\"}],\"name\":\"getBrokerInfo\",\"outputs\":[{\"name\":\"broker\",\"type\":\"address\"},{\"name\":\"subSpot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vipBrokerNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guardianId\",\"type\":\"uint256\"}],\"name\":\"acceptGuardianVend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guardianId\",\"type\":\"uint256\"},{\"name\":\"_offer\",\"type\":\"uint256\"}],\"name\":\"offerGuardianVend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_realmSaleId\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"OfferToRealm\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_discipleId\",\"type\":\"uint256\"}],\"name\":\"acceptDiscipleVend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_durance\",\"type\":\"uint256\"}],\"name\":\"setPreSaleDurance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerInventory\",\"outputs\":[{\"name\":\"rareItem\",\"type\":\"uint256\"},{\"name\":\"epicItem\",\"type\":\"uint256\"},{\"name\":\"legendaryItem\",\"type\":\"uint256\"},{\"name\":\"uniqueItem\",\"type\":\"uint256\"},{\"name\":\"rareRune\",\"type\":\"uint256\"},{\"name\":\"epicRune\",\"type\":\"uint256\"},{\"name\":\"legendaryRune\",\"type\":\"uint256\"},{\"name\":\"uniqueRune\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_realmSaleId\",\"type\":\"uint256\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"offlineRealmSold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CTOAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_castleSaleId\",\"type\":\"uint256\"},{\"name\":\"_brokerId\",\"type\":\"uint256\"},{\"name\":\"_subBrokerId\",\"type\":\"uint256\"}],\"name\":\"buyCastle\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_guardianSaleId\",\"type\":\"uint256\"},{\"name\":\"_brokerId\",\"type\":\"uint256\"},{\"name\":\"_subBrokerId\",\"type\":\"uint256\"}],\"name\":\"buyGuardian\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_discipleId\",\"type\":\"uint256\"},{\"name\":\"_offer\",\"type\":\"uint256\"}],\"name\":\"offerDiscipleVend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GuardianVendToOffer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setCTO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_num\",\"type\":\"uint256\"},{\"name\":\"_startId\",\"type\":\"uint256\"},{\"name\":\"_race\",\"type\":\"uint256\"},{\"name\":\"_starRate\",\"type\":\"uint256\"},{\"name\":\"_level\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createGuardianSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"rarity\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"name\":\"BuyDiscipleItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"rarity\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"name\":\"BuyGuardianRune\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"rarity\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetDiscipleItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"rarity\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetGuardianRune\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"discipleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"occupation\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"DiscipleSaleCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"discipleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"name\":\"BuyDisciple\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"discipleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"DiscipleOfferSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"discipleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"DiscipleOfferAccept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetDiscipleSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"discipleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"occupation\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"DiscipleAuctionCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"offer\",\"type\":\"uint256\"}],\"name\":\"DiscipleAuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vendingId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"VendingDisciple\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vendingId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"offer\",\"type\":\"uint256\"}],\"name\":\"DiscipleVendOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vendingId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"DiscipleVendAccept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"priceId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetDiscipleVend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"guardianId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"race\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"starRate\",\"type\":\"uint256\"}],\"name\":\"GuardianSaleCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"guardianId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"name\":\"BuyGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"guardianId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"GuardianOfferSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"guardianId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"GuardianOfferAccept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetGuardianSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"guardianId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"race\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"starRate\",\"type\":\"uint256\"}],\"name\":\"GuardianAuctionCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"offer\",\"type\":\"uint256\"}],\"name\":\"GuardianAuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vendingId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"VendingGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vendingId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"offer\",\"type\":\"uint256\"}],\"name\":\"GuardianVendOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vendingId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"GuardianVendAccept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"priceId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetGuardianVend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"castleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"realmId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rarity\",\"type\":\"uint256\"}],\"name\":\"CastleSaleCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"castleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"name\":\"BuyCastle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"castleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CastleOfferSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"castleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"CastleOfferAccept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetCastleSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"castleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"realmId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rarity\",\"type\":\"uint256\"}],\"name\":\"CastleAuctionCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"offer\",\"type\":\"uint256\"}],\"name\":\"CastleAuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"realmId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"RealmSaleCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"realmId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"name\":\"BuyRealm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"realmId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"RealmOfferSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"realmId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"RealmOfferAccept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetRealmSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"realmId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"startPrice\",\"type\":\"uint256\"}],\"name\":\"RealmAuctionCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"offer\",\"type\":\"uint256\"}],\"name\":\"RealmAuctionBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"brokerId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"broker\",\"type\":\"address\"}],\"name\":\"BrokerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"brokerId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"subBrokerId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"subBroker\",\"type\":\"address\"}],\"name\":\"AppendSubBroker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newBroker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"brokerId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"subBrokerId\",\"type\":\"uint256\"}],\"name\":\"BrokerTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vipBroker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"vipShare\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"broker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"BrokerFeeDistrubution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"broker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"BrokerFeeClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PriceRaise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PriceStop\",\"type\":\"event\"}]","ContractName":"PreSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9a4a805a087a38be5fcfc1970cb1298a2930e3a86189700cc0d19e3ddd1db535"}]}