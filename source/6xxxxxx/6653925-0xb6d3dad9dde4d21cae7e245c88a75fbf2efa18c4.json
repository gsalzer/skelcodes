{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract fastum_1{\r\n    uint public start = 6655475;\r\n    modifier saleIsOn() {\r\n    \trequire(block.number > start);\r\n    \t_;\r\n    }\r\n    address constant private PROMO = 0xA93c13B3E3561e5e2A1a20239486D03A16d1Fc4b;\r\n    uint constant public MULTIPLIER = 115;\r\n    uint constant public MAX_DEPOSIT = 1 ether;\r\n    uint public currentReceiverIndex = 0; \r\n    uint public txnCount =0;\r\n    uint public MIN_DEPOSIT = 0.01 ether;\r\n    uint private PROMO_PERCENT = 15;\r\n    uint constant public LAST_DEPOSIT_PERCENT = 10;\r\n    \r\n    LastDeposit public last;\r\n\r\n    struct Deposit {\r\n        address depositor; \r\n        uint128 deposit;   \r\n        uint128 expect;    \r\n    }\r\n\r\n    struct LastDeposit {\r\n        address depositor;\r\n        uint expect;\r\n        uint blockNumber;\r\n    }\r\n\r\n    Deposit[] private queue;\r\n\r\n    function () saleIsOn private  payable {\r\n        if(msg.value == 0 && msg.sender == last.depositor) {\r\n            require(gasleft() >= 220000, \"We require more gas!\");\r\n            require(last.blockNumber + 45 < block.number, \"Last depositor should wait 45 blocks (~9-11 minutes) to claim reward\");\r\n            \r\n            uint128 money = uint128((address(this).balance));\r\n            if(money >= last.expect){\r\n                last.depositor.transfer(last.expect);\r\n            } else {\r\n                last.depositor.transfer(money);\r\n            }\r\n            \r\n            delete last;\r\n        }\r\n        else if(msg.value > 0){\r\n            require(gasleft() >= 220000, \"We require more gas!\");\r\n            require(msg.value <= MAX_DEPOSIT && msg.value >= MIN_DEPOSIT); \r\n\r\n            queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value*MULTIPLIER/100)));\r\n\r\n            last.depositor = msg.sender;\r\n            last.expect += msg.value*LAST_DEPOSIT_PERCENT/100;\r\n            last.blockNumber = block.number;\r\n            txnCount += 1;\r\n            \r\n            if(txnCount > 200) {\r\n                MIN_DEPOSIT = 0.05 ether;\r\n            } else if(txnCount > 150) {\r\n                MIN_DEPOSIT = 0.04 ether;\r\n            } else if(txnCount > 100) {\r\n                MIN_DEPOSIT = 0.03 ether;\r\n            }else if(txnCount > 50) {\r\n                MIN_DEPOSIT = 0.02 ether;\r\n            }else {\r\n                MIN_DEPOSIT = 0.01 ether;\r\n            }\r\n\r\n            uint promo = msg.value*PROMO_PERCENT/100;\r\n            uint128 contractBalance = uint128((address(this).balance));\r\n            if(contractBalance >= promo){\r\n                PROMO.transfer(promo);\r\n            } else {\r\n                PROMO.transfer(contractBalance);\r\n            }\r\n            pay();\r\n        }\r\n    }\r\n\r\n    function pay() private {\r\n        uint128 moneyCoefficient = uint128((address(this).balance)/last.expect);\r\n        uint128 money = uint128((address(this).balance)-last.expect);\r\n        if(moneyCoefficient < 1) {\r\n            return;\r\n        }\r\n\r\n        for(uint i=0; i<queue.length; i++){\r\n\r\n            uint idx = currentReceiverIndex + i;  \r\n\r\n            Deposit storage dep = queue[idx]; \r\n\r\n            if(money >= dep.expect){  \r\n                dep.depositor.transfer(dep.expect); \r\n                money -= dep.expect;            \r\n\r\n                \r\n                delete queue[idx];\r\n            }else{\r\n                dep.depositor.transfer(money); \r\n                dep.expect -= money;       \r\n                break;\r\n            }\r\n\r\n            if(gasleft() <= 50000)        \r\n                break;\r\n        }\r\n\r\n        currentReceiverIndex += i; \r\n    }\r\n\r\n    function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){\r\n        Deposit storage dep = queue[idx];\r\n        return (dep.depositor, dep.deposit, dep.expect);\r\n    }\r\n    \r\n    function getDepositsCount(address depositor) public view returns (uint) {\r\n        uint c = 0;\r\n        for(uint i=currentReceiverIndex; i<queue.length; ++i){\r\n            if(queue[i].depositor == depositor)\r\n                c++;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    function getDeposits(address depositor) public view returns (uint[] idxs, uint128[] deposits, uint128[] expects) {\r\n        uint c = getDepositsCount(depositor);\r\n\r\n        idxs = new uint[](c);\r\n        deposits = new uint128[](c);\r\n        expects = new uint128[](c);\r\n\r\n        if(c > 0) {\r\n            uint j = 0;\r\n            for(uint i=currentReceiverIndex; i<queue.length; ++i){\r\n                Deposit storage dep = queue[i];\r\n                if(dep.depositor == depositor){\r\n                    idxs[j] = i;\r\n                    deposits[j] = dep.deposit;\r\n                    expects[j] = dep.expect;\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentReceiverIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"expect\",\"type\":\"uint256\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_DEPOSIT_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txnCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"name\":\"idxs\",\"type\":\"uint256[]\"},{\"name\":\"deposits\",\"type\":\"uint128[]\"},{\"name\":\"expects\",\"type\":\"uint128[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"expect\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDepositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_DEPOSIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_DEPOSIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"fastum_1","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://26d813d3310391c35268d13f584e8f9043bbc856ec7d3c613a82448ce068cbe7"}]}