{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\ncontract owned {\r\n\r\n    address public owner;\r\n\t\r\n    function owned() payable { owner = msg.sender; }\r\n    \r\n    modifier onlyOwner { require(owner == msg.sender); _; }\r\n\r\n }\r\n\r\n\r\n\t\r\ncontract ARCEON is owned {\r\n\r\n    using SafeMath for uint256;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\taddress public owner;\r\n\t\r\n\r\n    /* Мэппинги */\r\n    mapping (address => uint256) public balanceOf; //балансы пользователей\r\n\tmapping (address => uint256) public freezeOf; // мэппинг замороженных токенов\r\n    mapping (address => mapping (address => uint256)) public allowance; // мэппинг делегированных токенов\r\n\r\n    /* Событие при успешном выполнении функции transfer */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /* Событие при выполнении функции сжигания токенов Овнера */\r\n    event Burn(address indexed from, uint256 value);\r\n\t\r\n\t\r\n\t/* Событие при выполнении функции заморозки токенов */\r\n    event Freeze(address indexed from, uint256 value);\r\n\t\r\n\t/* Событие при выполнении функции разморозки токенов */\r\n    event Unfreeze(address indexed from, uint256 value);\r\n\t\r\n\r\n    /* Конструктор */\r\n\t\r\n    function ArCoin (\r\n    \r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        uint8 decimalUnits,\r\n        string tokenSymbol\r\n        \r\n        \r\n        ) onlyOwner {\r\n\t\t\r\n\t\t\r\n\r\n\t\t\r\n\t\towner = msg.sender; // Владелец == отправитель\r\n\t\tname = tokenName; // Устанавливается имя токена\r\n        symbol = tokenSymbol; // Устанавливается символ токена\r\n        decimals = decimalUnits; // Кол-во нулей\r\n\t\t\r\n        balanceOf[owner] = initialSupply.safeDiv(2); // Эти токены принадлежат создателю\r\n\t\tbalanceOf[this]  = initialSupply.safeDiv(2); // Эти токены принадлежат контракту\r\n        totalSupply = initialSupply; // Устанавливается общая эмиссия токенов\r\n\t\tTransfer(this, owner, balanceOf[owner]); //Посылаем контракту половину\r\n\t\t\r\n\t\t\r\n        \r\n\t\t\r\n    }  \r\n\t\r\n\r\n    /* Функция для отправки токенов */\r\n    function transfer(address _to, uint256 _value) {\r\n\t    \r\n        require (_to != 0x0); // Запрет на передачу на адрес 0x0. Проверка что соответствует ETH-адресу\r\n\t\trequire (_value > 0); \r\n        require (balanceOf[msg.sender] > _value); // Проверка что у отправителя <= кол-ву токенов\r\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Проверка на переполнение\r\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);// Вычитает токены у отправителя\r\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);//Прибавляет токены получателю\r\n        Transfer(msg.sender, _to, _value);// Запускается событие Transfer\r\n    }\r\n\r\n    /* Функция для одобрения делегирования токенов */\r\n    function approve(address _spender, uint256 _value)\r\n        returns (bool success) {\r\n\t\t\r\n\t\trequire (_value > 0); \r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }   \r\n\r\n    /* Функция для отправки делегированных токенов */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n\t    \r\n        require(_to != 0x0);\r\n\t\trequire (_value > 0); \r\n        require (balanceOf[_from] > _value);\r\n        require (balanceOf[_to] + _value > balanceOf[_to]);\r\n        require (_value < allowance[_from][msg.sender]);\r\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);\r\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\r\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\t/* Функция для сжигания токенов */\r\n    function burn(uint256 _value) onlyOwner returns (bool success) {\r\n\t    \r\n        require (balanceOf[msg.sender] > _value); //проверка что на балансе есть нужное кол-во токенов\r\n\t\trequire (_value > 0); \r\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);// вычитание\r\n        totalSupply = SafeMath.safeSub(totalSupply,_value);// Новое значение totalSupply\r\n        Burn(msg.sender, _value);// Запуск события Burn\r\n        return true;\r\n    \r\n    }\r\n\t\r\n\t /* Функция заморозки токенов */\r\n\tfunction freeze(uint256 _value) onlyOwner returns (bool success)   {\r\n\t    \r\n        require (balanceOf[msg.sender] > _value); //проверка что на балансе есть нужное кол-во токенов\r\n\t\trequire (_value > 0); \r\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value); // Уменьшаем в мэппинге balanceOf\r\n        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value); // Прибавляем в мэппинг freezeOf\r\n        Freeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\t\r\n\t/* Функция разморозки токенов */\r\n\tfunction unfreeze(uint256 _value) onlyOwner returns (bool success) {\r\n\t   \r\n        require(freezeOf[msg.sender] > _value);\r\n\t\trequire (_value > 0);\r\n        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);\r\n\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\r\n        Unfreeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\t\r\n\t\r\n\t            function  BalanceContract() public constant returns (uint256 BalanceContract) {\r\n        BalanceContract = balanceOf[this];\r\n                return BalanceContract;\r\n\t            }\r\n\t\t\t\t\r\n\t\t\t\tfunction  BalanceOwner() public constant returns (uint256 BalanceOwner) {\r\n        BalanceOwner = balanceOf[msg.sender];\r\n                return BalanceOwner;\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\r\n\t//Позволяет создателю выводить хранящиеся на адрес контракта Эфиры и токены\r\n\t\r\n\t\r\n\tfunction withdrawEther () public onlyOwner {\r\n\t    \r\n        owner.transfer(this.balance);\r\n    }\r\n\t\r\n\tfunction () payable {\r\n        require(balanceOf[this] > 0);\r\n       uint256 tokensPerOneEther = 20000;\r\n        uint256 tokens = tokensPerOneEther * msg.value / 1000000000000000000;\r\n        if (tokens > balanceOf[this]) {\r\n            tokens = balanceOf[this];\r\n            uint valueWei = tokens * 1000000000000000000 / tokensPerOneEther;\r\n            msg.sender.transfer(msg.value - valueWei);\r\n        }\r\n        require(tokens > 0);\r\n        balanceOf[msg.sender] += tokens;\r\n        balanceOf[this] -= tokens;\r\n        Transfer(this, msg.sender, tokens);\r\n    }\r\n}\r\n\r\n/**\r\n * Безопасные математические операции\r\n */\r\n \r\n\t\r\nlibrary  SafeMath {\r\n\t// умножение\r\n  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\t//деление\r\n  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b > 0);\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\t//вычитание\r\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\t//сложение\r\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BalanceOwner\",\"outputs\":[{\"name\":\"BalanceOwner\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BalanceContract\",\"outputs\":[{\"name\":\"BalanceContract\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"ArCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"}]","ContractName":"ARCEON","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cf61afb450cba600fcfc69994cd77622eb9d4b1189fc51867e18ff960922cc52"}]}