{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\ncontract UpfiringStore is Ownable {\r\n  using SafeMath for uint;\r\n  mapping(bytes32 => mapping(address => uint)) private payments;\r\n  mapping(bytes32 => mapping(address => uint)) private paymentDates;\r\n  mapping(address => uint) private balances;\r\n  mapping(address => uint) private totalReceiving;\r\n  mapping(address => uint) private totalSpending;\r\n  function UpfiringStore() public {}\r\n  function balanceOf(address _owner) public view returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n  function totalReceivingOf(address _owner) public view returns (uint balance) {\r\n    return totalReceiving[_owner];\r\n  }\r\n  function totalSpendingOf(address _owner) public view returns (uint balance) {\r\n    return totalSpending[_owner];\r\n  }\r\n  function check(bytes32 _hash, address _from, uint _availablePaymentTime) public view returns (uint amount) {\r\n    uint _amount = payments[_hash][_from];\r\n    uint _date = paymentDates[_hash][_from];\r\n    if (_amount > 0 && (_date + _availablePaymentTime) > now) {\r\n      return _amount;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n  function payment(bytes32 _hash, address _from, uint _amount) onlyOwner public returns (bool result) {\r\n    payments[_hash][_from] = payments[_hash][_from].add(_amount);\r\n    paymentDates[_hash][_from] = now;\r\n    return true;\r\n  }\r\n  function subBalance(address _owner, uint _amount) onlyOwner public returns (bool result) {\r\n    require(balances[_owner] >= _amount);\r\n    balances[_owner] = balances[_owner].sub(_amount);\r\n    totalSpending[_owner] = totalSpending[_owner].add(_amount);\r\n    return true;\r\n  }\r\n  function addBalance(address _owner, uint _amount) onlyOwner public returns (bool result) {\r\n    balances[_owner] = balances[_owner].add(_amount);\r\n    totalReceiving[_owner] = totalReceiving[_owner].add(_amount);\r\n    return true;\r\n  }\r\n}\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract Upfiring is Ownable {\r\n  using SafeMath for uint;\r\n  ERC20 public token;\r\n  UpfiringStore public store;\r\n  uint8 public torrentOwnerPercent = 50;\r\n  uint8 public seedersProfitMargin = 3;\r\n  uint public availablePaymentTime = 86400; //seconds\r\n  uint public minWithdraw = 0;\r\n  event Payment(string _torrent, uint _amount, address indexed _from);\r\n  event Refill(address indexed _to, uint _amount);\r\n  event Withdraw(address indexed _to, uint _amount);\r\n  event Pay(address indexed _to, uint _amount, bytes32 _hash);\r\n  event ChangeBalance(address indexed _to, uint _balance);\r\n  event LogEvent(string _log);\r\n  function Upfiring(UpfiringStore _store, ERC20 _token, uint8 _torrentOwnerPercent, uint8 _seedersProfitMargin, uint _minWithdraw) public {\r\n    require(_store != address(0));\r\n    require(_token != address(0));\r\n    require(_torrentOwnerPercent != 0);\r\n    require(_seedersProfitMargin != 0);\r\n    store = _store;\r\n    token = _token;\r\n    torrentOwnerPercent = _torrentOwnerPercent;\r\n    seedersProfitMargin = _seedersProfitMargin;\r\n    minWithdraw = _minWithdraw;\r\n  }\r\n  function() external payable {\r\n    revert();\r\n  }\r\n  function balanceOf(address _owner) public view returns (uint balance) {\r\n    return store.balanceOf(_owner);\r\n  }\r\n  function totalReceivingOf(address _owner) public view returns (uint balance) {\r\n    return store.totalReceivingOf(_owner);\r\n  }\r\n  function totalSpendingOf(address _owner) public view returns (uint balance) {\r\n    return store.totalSpendingOf(_owner);\r\n  }\r\n  function check(string _torrent, address _from) public view returns (uint amount) {\r\n    return store.check(torrentToHash(_torrent), _from, availablePaymentTime);\r\n  }\r\n  function torrentToHash(string _torrent) internal pure returns (bytes32 _hash)  {\r\n    return sha256(_torrent);\r\n  }\r\n  function refill(uint _amount) external {\r\n    require(_amount != uint(0));\r\n    require(token.transferFrom(msg.sender, address(this), _amount));\r\n    store.addBalance(msg.sender, _amount);\r\n    ChangeBalance(msg.sender, store.balanceOf(msg.sender));\r\n    Refill(msg.sender, _amount);\r\n  }\r\n  function withdraw(uint _amount) external {\r\n    require(_amount >= minWithdraw);\r\n    require(token.balanceOf(address(this)) >= _amount);\r\n    require(token.transfer(msg.sender, _amount));\r\n    require(store.subBalance(msg.sender, _amount));\r\n    ChangeBalance(msg.sender, store.balanceOf(msg.sender));\r\n    Withdraw(msg.sender, _amount);\r\n  }\r\n  function pay(string _torrent, uint _amount, address _owner, address[] _seeders, address[] _freeSeeders) external {\r\n    require(_amount != uint(0));\r\n    require(_owner != address(0));\r\n    bytes32 _hash = torrentToHash(_torrent);\r\n    require(store.subBalance(msg.sender, _amount));\r\n    store.payment(_hash, msg.sender, _amount);\r\n    Payment(_torrent, _amount, msg.sender);\r\n    ChangeBalance(msg.sender, store.balanceOf(msg.sender));\r\n    sharePayment(_hash, _amount, _owner, _seeders, _freeSeeders);\r\n  }\r\n  function sharePayment(bytes32 _hash, uint _amount, address _owner, address[] _seeders, address[] _freeSeeders) internal {\r\n    if ((_seeders.length + _freeSeeders.length) == 0) {\r\n      payTo(_owner, _amount, _hash);\r\n    } else {\r\n      uint _ownerAmount = _amount.mul(torrentOwnerPercent).div(100);\r\n      uint _otherAmount = _amount.sub(_ownerAmount);\r\n      uint _realOtherAmount = shareSeeders(_seeders, _freeSeeders, _otherAmount, _hash);\r\n      payTo(_owner, _amount.sub(_realOtherAmount), _hash);\r\n    }\r\n  }\r\n  function shareSeeders(address[] _seeders, address[] _freeSeeders, uint _amount, bytes32 _hash) internal returns (uint){\r\n    uint _dLength = _freeSeeders.length.add(_seeders.length.mul(seedersProfitMargin));\r\n    uint _dAmount = _amount.div(_dLength);\r\n    payToList(_seeders, _dAmount.mul(seedersProfitMargin), _hash);\r\n    payToList(_freeSeeders, _dAmount, _hash);\r\n    return _dLength.mul(_dAmount);\r\n  }\r\n  function payToList(address[] _seeders, uint _amount, bytes32 _hash) internal {\r\n    if (_seeders.length > 0) {\r\n      for (uint i = 0; i < _seeders.length; i++) {\r\n        address _seeder = _seeders[i];\r\n        payTo(_seeder, _amount, _hash);\r\n      }\r\n    }\r\n  }\r\n  function payTo(address _to, uint _amount, bytes32 _hash) internal {\r\n    require(store.addBalance(_to, _amount));\r\n    Pay(_to, _amount, _hash);\r\n    ChangeBalance(_to, store.balanceOf(_to));\r\n  }\r\n  function migrateStore(address _to) onlyOwner public {\r\n    store.transferOwnership(_to);\r\n  }\r\n  function setAvailablePaymentTime(uint _availablePaymentTime) onlyOwner public {\r\n    availablePaymentTime = _availablePaymentTime;\r\n  }\r\n  function setSeedersProfitMargin(uint8 _seedersProfitMargin) onlyOwner public {\r\n    seedersProfitMargin = _seedersProfitMargin;\r\n  }\r\n  function setTorrentOwnerPercent(uint8 _torrentOwnerPercent) onlyOwner public {\r\n    torrentOwnerPercent = _torrentOwnerPercent;\r\n  }\r\n  function setMinWithdraw(uint _minWithdraw) onlyOwner public {\r\n    minWithdraw = _minWithdraw;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_seedersProfitMargin\",\"type\":\"uint8\"}],\"name\":\"setSeedersProfitMargin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minWithdraw\",\"type\":\"uint256\"}],\"name\":\"setMinWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_torrentOwnerPercent\",\"type\":\"uint8\"}],\"name\":\"setTorrentOwnerPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_torrent\",\"type\":\"string\"},{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"availablePaymentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seedersProfitMargin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_torrent\",\"type\":\"string\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_seeders\",\"type\":\"address[]\"},{\"name\":\"_freeSeeders\",\"type\":\"address[]\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"totalSpendingOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"totalReceivingOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_availablePaymentTime\",\"type\":\"uint256\"}],\"name\":\"setAvailablePaymentTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"torrentOwnerPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrateStore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_store\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_torrentOwnerPercent\",\"type\":\"uint8\"},{\"name\":\"_seedersProfitMargin\",\"type\":\"uint8\"},{\"name\":\"_minWithdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_torrent\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Refill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"Pay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"ChangeBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_log\",\"type\":\"string\"}],\"name\":\"LogEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Upfiring","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b27a380a00b3f1be3eb5fb3d4c65505a51f1c52d000000000000000000000000ea097a2b1db00627b2fa17460ad260c016016977000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://e4df397dab1b2690c7ab5bfa837a828e52e6a3e119842aee6f6420729fb54bc1"}]}