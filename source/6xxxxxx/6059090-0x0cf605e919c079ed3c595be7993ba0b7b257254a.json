{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract FamilienSpardose {\r\n    \r\n    // Created by N. Fuchs\r\n    \r\n    // Name der Familienspardose\r\n    string public spardosenName;\r\n    \r\n    //weist einer Addresse ein Guthaben zu\r\n    mapping (address => uint) public guthaben;\r\n    \r\n    // zeigt im smart contract an, wieviel Ether alle Sparer insgesamt halten\r\n    // \".balance\" ist eine Objektattribut des Datentyps address, das für jede wallet und jeden smart contract das entsprechende \r\n    //  Ether-Guthaben darstellt.\r\n    uint public gesamtGuthaben = address(this).balance;\r\n    \r\n    // Konstruktorfunktion: Wird einmalig beim deployment des smart contracts ausgeführt\r\n    // Wenn Transaktionen, die Funktionen auszuführen beabsichtigen, Ether mitgesendet wird (TXvalue > 0), so muss die\r\n    //  ausgeführte Transaktion mit \"payable\" gekennzeichnet sein. Sicherheitsfeature im Interesse der Nutzer\r\n    constructor(string _name, address _sparer) payable {\r\n        \r\n        \r\n        // Weist der Variablen spardosenName den String _name zu, welcher vom Ersteller\r\n        // des smart contracts als Parameter in der Transaktion übergeben wird:\r\n        spardosenName = _name;\r\n        \r\n        \r\n        // Erstellt einen unsignierten integer, der mit der Menge Ether definiert wird, die der \r\n        // Transaktion mitgeliefert wird:\r\n        uint startGuthaben = msg.value;\r\n        \r\n        // Wenn der ersteller des smart contracts in der transaktion einen Begünstigten angegeben hat, soll ihm \r\n        // der zuvor als Startguthaben definierte Wert als Guthaben gutgeschrieben werden.\r\n        // Das mitgesendete Ether wird dabei dem smart contract gutgeschrieben, er war der Empfänger der Transaktion.\r\n        if (_sparer != 0x0) guthaben[_sparer] = startGuthaben;\r\n        else guthaben[msg.sender] = startGuthaben;\r\n    }\r\n    \r\n    \r\n    // Schreibt dem Absender der Transaktion (TXfrom) ihren Wert (TXvalue) als Guthaben zu\r\n    function einzahlen() public payable{\r\n        guthaben[msg.sender] = msg.value;\r\n    }\r\n    \r\n    // Ermöglicht jemandem, so viel Ether aus dem smart contract abzubuchen, wie ihm an Guthaben zur Verfügung steht\r\n    function abbuchen(uint _betrag) public {\r\n        \r\n        // Zunächst prüfen, ob dieser jemand über ausreichend Guthaben verfügt.\r\n        // Wird diese Bedingung nicht erfüllt, wird die Ausführung der Funktion abgebrochen.\r\n        require(guthaben[msg.sender] >= _betrag);\r\n        \r\n        // Subtrahieren des abzuhebenden Guthabens \r\n        guthaben [msg.sender] = guthaben [msg.sender] - _betrag;\r\n        \r\n        // Überweisung des Ethers\r\n        // \".transfer\" ist eine Objektmethode des Datentyps address, die an die gegebene Addresse \r\n        // die gewünschte Menge Ether zu transferieren versucht. Schlägt dies fehl, wird die\r\n        // Ausführung der Funktion abgebrochen und bisherige Änderungen rückgängig gemacht.\r\n        msg.sender.transfer(_betrag);\r\n    }\r\n    \r\n    // Getter-Funktion; Gibt das Guthaben einer Addresse zurück.\r\n    // Dient der Veranschaulichung von Funktionen, die den state nicht verändern.\r\n    // Nicht explizit notwendig, da jede als public Variable, so auch das mapping guthaben,\r\n    // vom compiler eine automatische, gleichnamige Getter-Funktion erhalten, wenn sie als public\r\n    // deklariert sind.\r\n    function guthabenAnzeigen(address _sparer) view returns (uint) {\r\n        return guthaben[_sparer];\r\n    }\r\n    \r\n    // Eine weitere Veranschaulichung eines Funktionstyps, der den state nicht ändert. \r\n    // Weil mit pure gekennzeichnete Funktionen auf den state sogar garnicht nicht zugreifen können,\r\n    // werden entsprechende opcodes nicht benötigt und der smart contract kostet weniger Guthabens\r\n    // beim deployment benötigt. \r\n    function addieren(uint _menge1, uint _menge2) pure returns (uint) {\r\n        return _menge1 + _menge2;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"guthaben\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betrag\",\"type\":\"uint256\"}],\"name\":\"abbuchen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_menge1\",\"type\":\"uint256\"},{\"name\":\"_menge2\",\"type\":\"uint256\"}],\"name\":\"addieren\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sparer\",\"type\":\"address\"}],\"name\":\"guthabenAnzeigen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"einzahlen\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gesamtGuthaben\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spardosenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_sparer\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]","ContractName":"FamilienSpardose","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000002e51fe4836db5f23c85be173c5f7417507d82982000000000000000000000000000000000000000000000000000000000000001046616d696c69656e73706172646f736500000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f5a40cd1f8bb1e34efec64a38d3c1d6eb7b297c332e029b2a9f4a910e42b7170"}]}