{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n/**\r\n *\r\n * EthFastDotHost - profitable financial game\r\n * Honest, fully automated smart quick turn contract with a jackpot system\r\n *\r\n * Web              - http://ethfast.host/\r\n * Telegram chat    - https://t.me/ethfastx\r\n *\r\n *  - Contribution allocation schemes:\r\n *    -- 90% players\r\n *    -- 5% jackpot\r\n *    -- 3.25% promotion\r\n *    -- 1.75% support\r\n *\r\n *  - Limits:\r\n *    -- Min deposit: 0.01 ETH\r\n *    -- Min deposit for jackpot: 0.05 ETH\r\n *    -- Max deposit: 7 ETH\r\n *    -- Max gas price: 50 GWEI\r\n *\r\n * Recommended gas limit: 300000\r\n * Recommended gas price: https://ethgasstation.info/\r\n *\r\n */\r\n \r\n \r\ncontract EthFastDotHost {\r\n\r\n    uint constant MINIMAL_DEPOSIT = 0.01 ether; // minimum deposit for participation in the game\r\n    uint constant MAX_DEPOSIT = 7 ether; // maximum possible deposit\r\n\r\n    uint constant JACKPOT_MINIMAL_DEPOSIT = 0.05 ether; // minimum deposit for jackpot\r\n    uint constant JACKPOT_DURATION = 20 minutes; // the duration of the jackpot after which the winner will be determined\r\n\r\n    uint constant JACKPOT_PERCENTAGE = 500; // jackpot winner gets 5% of all deposits\r\n    uint constant PROMOTION_PERCENTAGE = 325; // 3.25% will be sent to the promotion of the project\r\n    uint constant PAYROLL_PERCENTAGE = 175; // 1.75% will be sent to support the project\r\n\r\n    uint constant MAX_GAS_PRICE = 50; // maximum price for gas in gwei\r\n\r\n    // This address, can set a new block number to start the game.\r\n    address constant MANAGER = 0x490429e7C4C343B3B069c30625404888Bcc8Eb7b;\r\n\r\n    // Address where ETH will be sent for project promotion\r\n    address constant SUPPORT_AND_PROMOTION_FUND = 0x490429e7C4C343B3B069c30625404888Bcc8Eb7b;\r\n\r\n    struct Deposit {\r\n        address member;\r\n        uint amount;\r\n    }\r\n\r\n    struct Jackpot {\r\n        address lastMember;\r\n        uint time;\r\n        uint amount;\r\n    }\r\n\r\n    Deposit[] public deposits; // keeps a history of all deposits\r\n    Jackpot public jackpot; // stores the data for the current jackpot\r\n\r\n    uint public totalInvested; // how many ETH were collected for this game\r\n    uint public currentIndex; // current deposit index\r\n    uint public startBlockNumber; // start block number game. If this value is 0, the contract is temporarily stopped\r\n\r\n    // this function called every time anyone sends a transaction to this contract\r\n    function () public payable {\r\n\r\n        // the contract can only take ETH when the game is running\r\n        require(isRunning());\r\n\r\n        // gas price check\r\n        require(tx.gasprice <= MAX_GAS_PRICE * 1000000000);\r\n\r\n        address member = msg.sender; // address of the current player who sent the ETH\r\n        uint amount = msg.value; // the amount sent by this player\r\n\r\n        // ckeck to jackpot winner\r\n        if (now - jackpot.time >= JACKPOT_DURATION && jackpot.time > 0) {\r\n\r\n            send(member, amount); // return this deposit to the sender\r\n\r\n            if (!payouts()) { // send remaining payouts\r\n                return;\r\n            }\r\n\r\n            send(jackpot.lastMember, jackpot.amount); // send jackpot to winner\r\n            startBlockNumber = 0; // stop queue\r\n            return;\r\n        }\r\n\r\n        // deposit check\r\n        require(amount >= MINIMAL_DEPOSIT && amount <= MAX_DEPOSIT);\r\n\r\n        // add member to jackpot\r\n        if (amount >= JACKPOT_MINIMAL_DEPOSIT) {\r\n            jackpot.lastMember = member;\r\n            jackpot.time = now;\r\n        }\r\n\r\n        // update variables in storage\r\n        deposits.push( Deposit(member, amount * calcMultiplier() / 100) );\r\n        totalInvested += amount;\r\n        jackpot.amount += amount * JACKPOT_PERCENTAGE / 10000;\r\n\r\n        // send fee\r\n        send(SUPPORT_AND_PROMOTION_FUND, amount * (PROMOTION_PERCENTAGE + PAYROLL_PERCENTAGE) / 10000);\r\n\r\n        // send payouts\r\n        payouts();\r\n\r\n    }\r\n\r\n    // This function sends amounts to players who are in the current queue\r\n    // Returns true if all available ETH is sent\r\n    function payouts() internal returns(bool complete) {\r\n\r\n        uint balance = address(this).balance;\r\n\r\n        // impossible but better to check\r\n        balance = balance >= jackpot.amount ? balance - jackpot.amount : 0;\r\n\r\n        uint countPayouts;\r\n\r\n        for (uint i = currentIndex; i < deposits.length; i++) {\r\n\r\n            Deposit storage deposit = deposits[currentIndex];\r\n\r\n            if (balance >= deposit.amount) {\r\n\r\n                send(deposit.member, deposit.amount);\r\n                balance -= deposit.amount;\r\n                delete deposits[currentIndex];\r\n                currentIndex++;\r\n                countPayouts++;\r\n\r\n                // Maximum of one request can send no more than 15 payments\r\n                // This was done so that players could not spend too much gas in 1 transaction\r\n                if (countPayouts >= 15) {\r\n                    break;\r\n                }\r\n\r\n            } else {\r\n\r\n                send(deposit.member, balance);\r\n                deposit.amount -= balance;\r\n                complete = true;\r\n                break;\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // This function safely sends the ETH by the passed parameters\r\n    function send(address _receiver, uint _amount) internal {\r\n\r\n        if (_amount > 0 && address(_receiver) != 0) {\r\n            _receiver.transfer(msg.value);\r\n        }\r\n\r\n    }\r\n\r\n    // This function makes the game restart on a specific date when it is stopped or in waiting mode\r\n    // (Available only to managers)\r\n    function restart(uint _blockNumber) public {\r\n\r\n        require(MANAGER == msg.sender);\r\n        require(!isRunning());\r\n        require(_blockNumber >= block.number);\r\n\r\n        currentIndex = deposits.length; // skip investors from old queue\r\n        startBlockNumber = _blockNumber; // set the block number to start the project\r\n        totalInvested = 0;\r\n\r\n        delete jackpot;\r\n\r\n    }\r\n\r\n    // Returns true if the game is in stopped mode\r\n    function isStopped() public view returns(bool) {\r\n        return startBlockNumber == 0;\r\n    }\r\n\r\n    // Returns true if the game is in waiting mode\r\n    function isWaiting() public view returns(bool) {\r\n        return startBlockNumber > block.number;\r\n    }\r\n\r\n    // Returns true if the game is in running mode\r\n    function isRunning() public view returns(bool) {\r\n        return !isWaiting() && !isStopped();\r\n    }\r\n\r\n    // How many percent for your deposit to be multiplied at now\r\n    function calcMultiplier() public view returns (uint) {\r\n\r\n        if (totalInvested <= 75 ether) return 120;\r\n        if (totalInvested <= 200 ether) return 130;\r\n        if (totalInvested <= 350 ether) return 135;\r\n\r\n        return 140; // max value\r\n    }\r\n\r\n    // This function returns all active player deposits in the current queue\r\n    function depositsOfMember(address _member) public view returns(uint[] amounts, uint[] places) {\r\n\r\n        uint count;\r\n        for (uint i = currentIndex; i < deposits.length; i++) {\r\n            if (deposits[i].member == _member) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        amounts = new uint[](count);\r\n        places = new uint[](count);\r\n\r\n        uint id;\r\n        for (i = currentIndex; i < deposits.length; i++) {\r\n\r\n            if (deposits[i].member == _member) {\r\n                amounts[id] = deposits[i].amount;\r\n                places[id] = i - currentIndex + 1;\r\n                id++;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // This function returns detailed information about the current game\r\n    function stats() public view returns(\r\n        string status,\r\n        uint timestamp,\r\n        uint blockStart,\r\n        uint timeJackpot,\r\n        uint queueLength,\r\n        uint invested,\r\n        uint multiplier,\r\n        uint jackpotAmount,\r\n        address jackpotMember\r\n    ) {\r\n\r\n        if (isStopped()) {\r\n            status = \"stopped\";\r\n        } else if (isWaiting()) {\r\n            status = \"waiting\";\r\n        } else {\r\n            status = \"running\";\r\n        }\r\n\r\n        if (isWaiting()) {\r\n            blockStart = startBlockNumber - block.number;\r\n        }\r\n\r\n        if (now - jackpot.time < JACKPOT_DURATION) {\r\n            timeJackpot = JACKPOT_DURATION - (now - jackpot.time);\r\n        }\r\n\r\n        timestamp = now;\r\n        queueLength = deposits.length - currentIndex;\r\n        invested = totalInvested;\r\n        jackpotAmount = jackpot.amount;\r\n        jackpotMember = jackpot.lastMember;\r\n        multiplier = calcMultiplier();\r\n\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"restart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"lastMember\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isWaiting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calcMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"depositsOfMember\",\"outputs\":[{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"places\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"member\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stats\",\"outputs\":[{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"blockStart\",\"type\":\"uint256\"},{\"name\":\"timeJackpot\",\"type\":\"uint256\"},{\"name\":\"queueLength\",\"type\":\"uint256\"},{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"multiplier\",\"type\":\"uint256\"},{\"name\":\"jackpotAmount\",\"type\":\"uint256\"},{\"name\":\"jackpotMember\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EthFastDotHost","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d57c681d535a44043e90f45ab92939db28f1bbc269cdba08f4054c24d2c59396"}]}