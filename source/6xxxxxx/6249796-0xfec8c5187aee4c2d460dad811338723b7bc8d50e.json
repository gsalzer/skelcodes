{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n    Sale(address ethwallet)   // this will send the received ETH funds to this address\r\n  @author Yumerium Ltd\r\n*/\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract YumeriumManager {\r\n    function getYumerium(address sender) external payable returns (uint256);\r\n}\r\n\r\ncontract Sale {\r\n    uint public saleEnd1 = 1535846400 + 1 days; //9/3/2018 @ 12:00am (UTC)\r\n    uint public saleEnd2 = saleEnd1 + 1 days; //9/4/2018 @ 12:00am (UTC)\r\n    uint public saleEnd3 = saleEnd2 + 1 days; //9/5/2018 @ 12:00am (UTC)\r\n    uint public saleEnd4 = 1539129600; //10/10/2018 @ 12:00am (UTC)\r\n    uint256 public minEthValue = 10 ** 15; // 0.001 eth\r\n    \r\n    using SafeMath for uint256;\r\n    uint256 public maxSale;\r\n    uint256 public totalSaled;\r\n    mapping(uint256 => mapping(address => uint256)) public ticketsEarned;   // tickets earned for each user each day\r\n                                                                            // (day => (user address => # tickets))\r\n    mapping(uint256 => uint256) public totalTickets; // (day => # total tickets)\r\n    mapping(uint256 => uint256) public eachDaySold; // how many ethereum sold for each day\r\n    uint256 public currentDay;  // shows what day current day is for event sale (0 = event sale ended)\r\n                                // 1 = day 1, 2 = day 2, 3 = day 3\r\n    mapping(uint256 => address[]) public eventSaleParticipants; // participants for event sale for each day\r\n    \r\n    YumeriumManager public manager;\r\n\r\n    address public creator;\r\n\r\n    event Contribution(address from, uint256 amount);\r\n\r\n    constructor(address _manager_address) public {\r\n        maxSale = 316906850 * 10 ** 8; \r\n        manager = YumeriumManager(_manager_address);\r\n        creator = msg.sender;\r\n        currentDay = 1;\r\n    }\r\n\r\n    function () external payable {\r\n        buy();\r\n    }\r\n\r\n    // CONTRIBUTE FUNCTION\r\n    // converts ETH to TOKEN and sends new TOKEN to the sender\r\n    function contribute() external payable {\r\n        buy();\r\n    }\r\n    \r\n    function getNumParticipants(uint256 whichDay) public view returns (uint256) {\r\n        return eventSaleParticipants[whichDay].length;\r\n    }\r\n    \r\n    function buy() internal {\r\n        require(msg.value>=minEthValue);\r\n        require(now < saleEnd4); // main sale postponed\r\n        \r\n        uint256 amount = manager.getYumerium.value(msg.value)(msg.sender);\r\n        uint256 total = totalSaled.add(amount);\r\n        \r\n        require(total<=maxSale);\r\n        \r\n        totalSaled = total;\r\n        if (currentDay > 0) {\r\n            eachDaySold[currentDay] = eachDaySold[currentDay].add(msg.value);\r\n            uint256 tickets = msg.value.div(10 ** 17);\r\n            if (ticketsEarned[currentDay][msg.sender] == 0) {\r\n                eventSaleParticipants[currentDay].push(msg.sender);\r\n            }\r\n            ticketsEarned[currentDay][msg.sender] = ticketsEarned[currentDay][msg.sender].add(tickets);\r\n            totalTickets[currentDay] = totalTickets[currentDay].add(tickets);\r\n            if (now >= saleEnd3)\r\n            {\r\n                currentDay = 0;\r\n            }\r\n            else if (now >= saleEnd2)\r\n            {\r\n                currentDay = 3;\r\n            }\r\n            else if (now >= saleEnd1)\r\n            {\r\n                currentDay = 2;\r\n            }\r\n        }\r\n        \r\n        emit Contribution(msg.sender, amount);\r\n    }\r\n\r\n    // change yumo address\r\n    function changeManagerAddress(address _manager_address) external {\r\n        require(msg.sender==creator, \"You are not a creator!\");\r\n        manager = YumeriumManager(_manager_address);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnd4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eachDaySold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventSaleParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnd3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minEthValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSaled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"whichDay\",\"type\":\"uint256\"}],\"name\":\"getNumParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalTickets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager_address\",\"type\":\"address\"}],\"name\":\"changeManagerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ticketsEarned\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnd2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleEnd1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"}]","ContractName":"Sale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005eb4b436104680835f7e2ed3806467beb82fe3c5","Library":"","SwarmSource":"bzzr://3b4c711a7520e06198710a7872b9ec215b8b819531761bad7e1a98c80abb6ca5"}]}