{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// TokenLoot v2.0 2e59d4\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/TokenLoot.sol\r\n\r\n/// @title Token Loot Contract\r\n/// @author Julia Altenried, Yuriy Kashnikov\r\n\r\ncontract TokenLoot is Ownable {\r\n\r\n  // FIELDS\r\n  /* signer address, verified in 'receiveTokenLoot' method, can be set by owner only */\r\n  address public neverdieSigner;\r\n  /* Nonces */\r\n  mapping (address => uint256) public nonces;\r\n  /* Tokens */\r\n  address[] public tokens;\r\n\r\n  // EVENTS\r\n  event ReceiveLoot(address indexed sender,\r\n                    uint256 nonce,\r\n                    address[] tokens,\r\n                    uint256[] amounts);\r\n \r\n\r\n  // SETTERS\r\n  function setNeverdieSignerAddress(address _to) public onlyOwner {\r\n    neverdieSigner = _to;\r\n  }\r\n\r\n  function setTokens(address[] _tokens) public onlyOwner {\r\n    for (uint256 i = 0; i < tokens.length; i++) {\r\n      tokens[i] = _tokens[i];\r\n    }\r\n    for (uint256 j = _tokens.length; j < _tokens.length; j++) {\r\n      tokens.push(_tokens[j]);\r\n    }\r\n  }\r\n\r\n  /// @param _tokens tokens addresses\r\n  /// @param _signer signer address, verified further in swap functions\r\n  constructor(address[] _tokens, address _signer) {\r\n    for (uint256 i = 0; i < _tokens.length; i++) {\r\n      tokens.push(_tokens[i]);\r\n    }\r\n    neverdieSigner = _signer;\r\n  }\r\n\r\n  function receiveTokenLoot(uint256[] _amounts, \r\n                            uint256 _nonce, \r\n                            uint8 _v, \r\n                            bytes32 _r, \r\n                            bytes32 _s) {\r\n\r\n    // reject if the new nonce is lower or equal to the current one\r\n    require(_nonce > nonces[msg.sender],\r\n            \"wrong nonce\");\r\n    nonces[msg.sender] = _nonce;\r\n\r\n    // verify signature\r\n    address signer = ecrecover(keccak256(msg.sender, \r\n                                         _nonce,\r\n                                         _amounts), _v, _r, _s);\r\n    require(signer == neverdieSigner,\r\n            \"signature verification failed\");\r\n\r\n    // transer tokens\r\n    \r\n    for (uint256 i = 0; i < _amounts.length; i++) {\r\n      if (_amounts[i] > 0) {\r\n        assert(ERC20(tokens[i]).transfer(msg.sender, _amounts[i]));\r\n      }\r\n    }\r\n    \r\n\r\n    // emit event\r\n    ReceiveLoot(msg.sender, _nonce, tokens, _amounts);\r\n  }\r\n\r\n  /// @dev fallback function to reject any ether coming directly to the contract\r\n  function () payable public { \r\n      revert(); \r\n  }\r\n\r\n  /// @dev withdraw all SKL and XP tokens\r\n  function withdraw() public onlyOwner {\r\n    for (uint256 i = 0; i < tokens.length; i++) {\r\n      uint256 amount = ERC20(tokens[i]).balanceOf(this);\r\n      if (amount > 0) ERC20(tokens[i]).transfer(msg.sender, amount);\r\n    }\r\n  }\r\n\r\n  /// @dev kill contract, but before transfer all SKL and XP tokens \r\n  function kill() onlyOwner public {\r\n    withdraw();\r\n    selfdestruct(owner);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"neverdieSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"setNeverdieSignerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"receiveTokenLoot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"setTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"},{\"name\":\"_signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ReceiveLoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenLoot","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000ec7d692198556d4f6b8bd611ad28ef0ec3c28b5f000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000a7bd9d58d22d5e35ec4a08083141e0340ea2ca93000000000000000000000000d28525ad63f337c86843d720dae921228e44f0ac000000000000000000000000b6f09f221d7a93390235d427c72fffc4f3856a9f0000000000000000000000002498aa67cd08ac321085734a8570137ec2001731000000000000000000000000106734655a3c75b92c154a7f827c4ab7d91118540000000000000000000000006efa7c3d995572b5fb1c4cee780f2b101ef635f50000000000000000000000006da2b0b95659f89c2332953fa84bc97633eb73ae000000000000000000000000ca1c217a2200b60dbd52e33c7cb1758db2b30a0e000000000000000000000000e7d9742fb323f0493de454478049b9619b1711a6000000000000000000000000a54ddc7b3cce7fc8b1e3fa0256d0db80d2c10970000000000000000000000000c596bd09d652827b0106292d3e378d5938df4b12","Library":"","SwarmSource":"bzzr://0f72eb360edee4ab171260900510a49477f13a4c1e8c9756e3087b1dfd319535"}]}