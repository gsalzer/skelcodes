{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Controlled {\r\n    address public controller;\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController { require(msg.sender == controller); _; }\r\n    // @notice Constructor\r\n    constructor() public { controller = msg.sender;}\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) public onlyController {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\n// ERC Token Standard #20 Interface\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract SofiaToken is ERC20Interface,Controlled {\r\n\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    /*\r\n     * @notice 'constructor()' initiates the Token by setting its funding\r\n       parameters\r\n     * @param _totalSupply Total supply of tokens\r\n     */\r\n    constructor(uint _totalSupply) public {\r\n      symbol = \"SFX\";\r\n      name = \"Sofia Token\";\r\n      decimals = 18;\r\n      totalSupply = _totalSupply  * (1 ether);\r\n      balances[msg.sender] = totalSupply; //transfer all Tokens to contract creator\r\n      emit Transfer(address(0),controller,totalSupply);\r\n    }\r\n\r\n    /*\r\n     * @notice ERC20 Standard method to return total number of tokens\r\n     */\r\n    function totalSupply() public view returns (uint){\r\n      return totalSupply;\r\n    }\r\n\r\n    /*\r\n     * @notice ERC20 Standard method to return the token balance of an address\r\n     * @param tokenOwner Address to query\r\n     */\r\n    function balanceOf(address tokenOwner) public view returns (uint balance){\r\n       return balances[tokenOwner];\r\n    }\r\n\r\n    /*\r\n     * @notice ERC20 Standard method to return spending allowance\r\n     * @param tokenOwner Owner of the tokens, who allows\r\n     * @param spender Token spender\r\n     */\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining){\r\n      if (allowed[tokenOwner][spender] < balances[tokenOwner]) {\r\n        return allowed[tokenOwner][spender];\r\n      }\r\n      return balances[tokenOwner];\r\n    }\r\n\r\n    /*\r\n     * @notice ERC20 Standard method to tranfer tokens\r\n     * @param to Address where the tokens will be transfered to\r\n     * @param tokens Number of tokens to be transfered\r\n     */\r\n    function transfer(address to, uint tokens) public  returns (bool success){\r\n      return doTransfer(msg.sender,to,tokens);\r\n    }\r\n\r\n    /*\r\n     * @notice ERC20 Standard method to transfer tokens on someone elses behalf\r\n     * @param from Address where the tokens are held\r\n     * @param to Address where the tokens will be transfered to\r\n     * @param tokens Number of tokens to be transfered\r\n     */\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success){\r\n      if(allowed[from][msg.sender] > 0 && allowed[from][msg.sender] >= tokens)\r\n      {\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        return doTransfer(from,to,tokens);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /*\r\n     * @notice method that does the actual transfer of the tokens, to be used by both transfer and transferFrom methods\r\n     * @param from Address where the tokens are held\r\n     * @param to Address where the tokens will be transfered to\r\n     * @param tokens Number of tokens to be transfered\r\n     */\r\n    function doTransfer(address from,address to, uint tokens) internal returns (bool success){\r\n        if( tokens > 0 && balances[from] >= tokens){\r\n            balances[from] = balances[from].sub(tokens);\r\n            balances[to] = balances[to].add(tokens);\r\n            emit Transfer(from,to,tokens);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     * @notice ERC20 Standard method to give a spender an allowance\r\n     * @param spender Address that wil receive the allowance\r\n     * @param tokens Number of tokens in the allowance\r\n     */\r\n    function approve(address spender, uint tokens) public returns (bool success){\r\n      if(balances[msg.sender] >= tokens){\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender,spender,tokens);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /*\r\n     * @notice revert any incoming ether\r\n     */\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n  /*\r\n   * @notice a specific amount of tokens. Only controller can burn tokens\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint _value) public onlyController{\r\n    require(_value <= balances[msg.sender]);\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    emit Burn(msg.sender, _value);\r\n    emit Transfer(msg.sender, address(0), _value);\r\n  }\r\n\r\n  /*\r\n   * Events\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n  event Burn(address indexed burner, uint value);\r\n}\r\n\r\ncontract Extollet is Controlled {\r\n\r\n    using SafeMath for uint;\r\n\r\n    string public name;                     //Campaign name\r\n    uint256 public startFundingTime;        //In UNIX Time Format\r\n    uint256 public endFundingTime;          //In UNIX Time Format\r\n    uint public volume;                     //Total volume of tokens in this Campaign\r\n    uint public totalCollected;             //In WEI\r\n    uint public totalTokensSold;            //Number of tokens sold so far\r\n    uint public rate;                       //Rate in WEI\r\n    SofiaToken public tokenContract;        //The token for this Campaign\r\n    address public vaultAddress;           //The address to hold the funds donated\r\n\r\n  /*\r\n   * @notice 'constructor()' initiates the Campaign by setting its funding parameters\r\n   * @param _startFundingTime The time that the Campaign will be able to start receiving funds\r\n   * @param _endFundingTime The time that the Campaign will stop being able to receive funds\r\n   * @param _volume Total volume\r\n   * @param _rate Rate in wei\r\n   * @param _vaultAddress The address that will store the donated funds\r\n   * @param _tokenAddress Address of the token contract this contract controls\r\n   */\r\n  constructor(\r\n      uint256 _startFundingTime,\r\n      uint256 _endFundingTime,\r\n      uint _volume,\r\n      uint _rate,\r\n      address _vaultAddress,\r\n      address _tokenAddress\r\n    ) public {\r\n     require ((_endFundingTime >= now) &&            //Cannot end in the past\r\n              (_endFundingTime > _startFundingTime) &&\r\n              (_volume > 0) &&\r\n              (_rate > 0) &&\r\n              (_vaultAddress != 0));                 //To prevent burning ETH\r\n      startFundingTime = _startFundingTime;\r\n      endFundingTime = _endFundingTime;\r\n      volume = _volume.mul(1 ether);\r\n      rate = _rate;\r\n      vaultAddress = _vaultAddress;\r\n      totalCollected = 0;\r\n      totalTokensSold = 0;\r\n      tokenContract = SofiaToken(_tokenAddress); //The Deployed Token Contract\r\n      name = \"Extollet\";\r\n      }\r\n\r\n  /*\r\n   * @notice The fallback function is called when ether is sent to the contract, it\r\n     simply calls `doPayment()` with the address that sent the ether as the\r\n     `_owner`. Payable is a required solidity modifier for functions to receive\r\n     ether, without this modifier functions will throw if ether is sent to them\r\n   */\r\n  function () public payable{\r\n    doPayment(msg.sender);\r\n  }\r\n\r\n  /*\r\n   * @notice `proxyPayment()` allows the caller to send ether to the Campaign and\r\n     have the tokens created in an address of their choosing\r\n   * @param _owner The address that will hold the newly created tokens\r\n   */\r\n  function proxyPayment(address _owner) public payable returns(bool) {\r\n      doPayment(_owner);\r\n      return true;\r\n  }\r\n\r\n  /*\r\n   * @notice `doPayment()` is an internal function that sends the ether that this\r\n     contract receives to the `vault` and creates tokens in the address of the\r\n     `_owner` assuming the Campaign is still accepting funds\r\n   * @param _owner The address that will hold the newly created tokens\r\n   */\r\n  function doPayment(address _owner) internal {\r\n//   Calculate token amount\r\n    uint tokenAmount = getTokenAmount(msg.value);\r\n//   Check that the Campaign is allowed to receive this donation\r\n    require ((now >= startFundingTime) &&\r\n            (now <= endFundingTime) &&\r\n            (tokenContract.controller() != 0) &&            //Extra check\r\n            (msg.value != 0) &&\r\n            ((totalTokensSold + tokenAmount) <= volume)\r\n            );\r\n  //Send the ether to the vault\r\n    preValidatePurchase(_owner,msg.value);\r\n    require (vaultAddress.send(msg.value));\r\n    require (tokenContract.transfer(_owner,tokenAmount));\r\n//  Track how much the Campaign has collected\r\n    totalCollected += msg.value;\r\n    totalTokensSold += tokenAmount;\r\n    emit FundTransfer(msg.sender,tokenAmount,true);\r\n    return;\r\n    }\r\n\r\n    /*\r\n     * @notice Validation of an incoming purchase. Use require statemens to revert state when conditions are not met.\r\n     * @param _beneficiary Address performing the token purchase\r\n     * @param _weiAmount Value in wei involved in the purchase\r\n     */\r\n    function preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal pure{\r\n      require(_beneficiary != address(0));\r\n      require(_weiAmount != 0);\r\n    }\r\n\r\n    /*\r\n     * @param _weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified _weiAmount\r\n     */\r\n    function getTokenAmount(uint _weiAmount) internal view returns (uint) {\r\n      uint preDecimalAmount = _weiAmount.div(rate);\r\n      uint postDecimalAmount = preDecimalAmount.mul(1 ether);\r\n      return postDecimalAmount;\r\n    }\r\n\r\n    /*\r\n     * @notice `onlyController` changes the location that ether is sent\r\n     * @param _newVaultAddress The address that will receive the ether sent to this\r\n     */\r\n    function setVault(address _newVaultAddress) public onlyController {\r\n        vaultAddress = _newVaultAddress;\r\n    }\r\n\r\n    /*\r\n     * @notice `onlyController` changes the campaing ending time\r\n     * @param newEndingTime The new campaign end time in UNIX time format\r\n     */\r\n    function modifyEndFundingTime(uint256 newEndingTime) public onlyController{\r\n      require((now < endFundingTime) && (now < newEndingTime));\r\n      endFundingTime = newEndingTime;\r\n    }\r\n\r\n    /*\r\n     * @dev `finalizeFunding()` can only be called after the end of the funding period.\r\n     */\r\n      function finalizeFunding(address to) public onlyController{\r\n        require(now >= endFundingTime);\r\n        uint tokensLeft = tokenContract.balanceOf(this);\r\n        require(tokensLeft > 0);\r\n        require(tokenContract.transfer(to,tokensLeft));\r\n      }\r\n\r\n    /*\r\n     *Events\r\n     */\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVaultAddress\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEndingTime\",\"type\":\"uint256\"}],\"name\":\"modifyEndFundingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startFundingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"finalizeFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"volume\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endFundingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startFundingTime\",\"type\":\"uint256\"},{\"name\":\"_endFundingTime\",\"type\":\"uint256\"},{\"name\":\"_volume\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Extollet","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b624980000000000000000000000000000000000000000000000000000000005b89d67f00000000000000000000000000000000000000000000000000000000042c1d8000000000000000000000000000000000000000000000000000001eb904e68800000000000000000000000000d5a7c9b4b67845576f1bdfcf69a57bec3d178f5700000000000000000000000057de9d1712efade1ceb18db97831a5359dfe0f82","Library":"","SwarmSource":"bzzr://bdb92ab9c8fcd9c2e1df4024e0001d1fb92b213bbe593fc8d97a5c4af26767f3"}]}