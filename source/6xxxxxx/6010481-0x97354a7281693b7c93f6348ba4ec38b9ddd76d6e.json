{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface ProForwarderInterface {\r\n    function deposit(address _addr) external payable returns (bool);\r\n    function migrationReceiver_setup() external returns (bool);\r\n}\r\n\r\ncontract ProForwarder {\r\n    string public name = \"ProForwarder\";\r\n    ProForwarderInterface private currentCorpBank_;\r\n    address private newCorpBank_;\r\n    bool needsBank_ = true;\r\n    \r\n    constructor() public {\r\n        //constructor does nothing.\r\n    }\r\n    \r\n    function() public payable {\r\n        // done so that if any one tries to dump eth into this contract, we can\r\n        // just forward it to corp bank.\r\n        currentCorpBank_.deposit.value(address(this).balance)(address(currentCorpBank_));\r\n    }\r\n    \r\n    function deposit() public payable returns(bool) {\r\n        require(msg.value > 0, \"Forwarder Deposit failed - zero deposits not allowed\");\r\n        require(needsBank_ == false, \"Forwarder Deposit failed - no registered bank\");\r\n        if (currentCorpBank_.deposit.value(msg.value)(msg.sender) == true)\r\n            return(true);\r\n        else\r\n            return(false);\r\n    }\r\n\r\n    function status() public view returns(address, address, bool) {\r\n        return(address(currentCorpBank_), address(newCorpBank_), needsBank_);\r\n    }\r\n\r\n    function startMigration(address _newCorpBank) external returns(bool) {\r\n        // make sure this is coming from current corp bank\r\n        require(msg.sender == address(currentCorpBank_), \"Forwarder startMigration failed - msg.sender must be current corp bank\");\r\n        \r\n        // communicate with the new corp bank and make sure it has the forwarder \r\n        // registered \r\n        if(ProForwarderInterface(_newCorpBank).migrationReceiver_setup() == true)\r\n        {\r\n            // save our new corp bank address\r\n            newCorpBank_ = _newCorpBank;\r\n            return (true);\r\n        } else \r\n            return (false);\r\n    }\r\n    \r\n    function cancelMigration() external returns(bool) {\r\n        // make sure this is coming from the current corp bank (also lets us know \r\n        // that current corp bank has not been killed)\r\n        require(msg.sender == address(currentCorpBank_), \"Forwarder cancelMigration failed - msg.sender must be current corp bank\");\r\n        \r\n        // erase stored new corp bank address;\r\n        newCorpBank_ = address(0x0);\r\n        \r\n        return (true);\r\n    }\r\n    \r\n    function finishMigration() external returns(bool) {\r\n        // make sure its coming from new corp bank\r\n        require(msg.sender == newCorpBank_, \"Forwarder finishMigration failed - msg.sender must be new corp bank\");\r\n\r\n        // update corp bank address        \r\n        currentCorpBank_ = (ProForwarderInterface(newCorpBank_));\r\n        \r\n        // erase new corp bank address\r\n        newCorpBank_ = address(0x0);\r\n        \r\n        return (true);\r\n    }\r\n\r\n    // this only runs once ever\r\n    function setup(address _firstCorpBank) external {\r\n        require(needsBank_ == true, \"Forwarder setup failed - corp bank already registered\");\r\n        currentCorpBank_ = ProForwarderInterface(_firstCorpBank);\r\n        needsBank_ = false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelMigration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_firstCorpBank\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMigration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCorpBank\",\"type\":\"address\"}],\"name\":\"startMigration\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"ProForwarder","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://704bd39be1d412244c96874809aa6a59f367e6df41ec01a32e9569b3c428e5be"}]}