{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n}\r\n\r\ncontract Payout {\r\n    ERC20Basic HorseToken;\r\n    address payoutPoolAddress;\r\n    address owner;\r\n    address dev;\r\n    address devTokensVestingAddress;\r\n    bool payoutPaused;\r\n    bool payoutSetup;\r\n    uint256 public payoutPoolAmount;\r\n    mapping(address => bool) public hasClaimed;\r\n\r\n    constructor() public {\r\n        HorseToken = ERC20Basic(0x5B0751713b2527d7f002c0c4e2a37e1219610A6B);        // Horse Token Address\r\n        payoutPoolAddress = address(0xf783A81F046448c38f3c863885D9e99D10209779);    // takeout pool\r\n        dev = address(0x1F92771237Bd5eae04e91B4B6F1d1a78D41565a2);                  // dev wallet\r\n        devTokensVestingAddress = address(0x44935883932b0260C6B1018Cf6436650BD52a257); // vesting contract\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier isPayoutPaused {\r\n        require(!payoutPaused);\r\n        _;\r\n    }\r\n    \r\n    modifier hasNotClaimed {\r\n        require(!hasClaimed[msg.sender]);\r\n        _;\r\n    }\r\n     modifier isPayoutSetup {\r\n         require(payoutSetup);\r\n         _;\r\n     }\r\n    \r\n    function setupPayout() external payable {\r\n        require(!payoutSetup);\r\n        require(msg.sender == payoutPoolAddress);\r\n        payoutPoolAmount = msg.value;\r\n        payoutSetup = true;\r\n        payoutPaused = true;\r\n    }\r\n    \r\n    function getTokenBalance() public view returns (uint256) {\r\n        if (msg.sender == dev) {\r\n            return (HorseToken.balanceOf(devTokensVestingAddress));\r\n        } else {\r\n            return (HorseToken.balanceOf(msg.sender));\r\n        }\r\n    }\r\n    \r\n    function getRewardEstimate() public view isPayoutSetup returns(uint256 rewardEstimate) {\r\n        uint factor = getTokenBalance();\r\n        uint totalSupply = HorseToken.totalSupply();\r\n        factor = factor*(10**18);   // 18 decimal precision\r\n        factor = (factor/(totalSupply));\r\n        rewardEstimate = (payoutPoolAmount*factor)/(10**18); // 18 decimal correction\r\n    }\r\n    \r\n    function claim() external isPayoutPaused hasNotClaimed isPayoutSetup {\r\n        uint rewardAmount = getRewardEstimate();\r\n        hasClaimed[msg.sender] = true;\r\n        require(rewardAmount <= address(this).balance);\r\n        msg.sender.transfer(rewardAmount);\r\n    }\r\n    \r\n    function payoutControlSwitch(bool status) external onlyOwner {\r\n        payoutPaused = status;\r\n    }\r\n    \r\n    function extractFund(uint256 _amount) external onlyOwner {\r\n        if (_amount == 0) {\r\n            owner.transfer(address(this).balance);\r\n        } else {\r\n            require(_amount <= address(this).balance);\r\n            owner.transfer(_amount);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"payoutControlSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRewardEstimate\",\"outputs\":[{\"name\":\"rewardEstimate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutPoolAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setupPayout\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"extractFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Payout","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9aff67764851f63b014f099949deae242e0d15989855f23ee06a635c5b9bf275"}]}