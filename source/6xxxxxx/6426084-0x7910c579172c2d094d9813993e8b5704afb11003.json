{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract IERC20Token {\r\n    function name() public view returns (string) ;\r\n    function symbol() public view returns (string); \r\n    function decimals() public view returns (uint8); \r\n    function totalSupply() public view returns (uint256); \r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\ncontract IInviteData{\r\n    function GetAddressByName(bytes32 name) public view returns (address);\r\n}\r\ncontract IRandomUtil {\r\n     function getBaseRandom() public view returns (bytes32);\r\n     function addContractAddr() public;\r\n}\r\n\r\ncontract MobaBase {\r\n    address public owner = 0x0;\r\n    bool public isLock = false;\r\n    constructor ()  public  {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    event transferToOwnerEvent(uint256 price);\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"only owner can call this function\");\r\n        _;\r\n    }\r\n    \r\n    modifier notLock {\r\n        require(isLock == false,\"contract current is lock status\");\r\n        _;\r\n    }\r\n    \r\n    modifier msgSendFilter() {\r\n        address addr = msg.sender;\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        require(size <= 0,\"address must is not contract\");\r\n        require(msg.sender == tx.origin, \"msg.sender must equipt tx.origin\");\r\n        _;\r\n    }\r\n    \r\n    function isNotContract(address addr) returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        require(size <= 0,\"address must is not contract\");\r\n        \r\n        if(size <= 0)\r\n            return true;\r\n        return false;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract BREBuy_ERC20 is MobaBase  {\r\n    \r\n    struct ContractParam {\r\n        uint32  totalSize ; \r\n        uint256 singlePrice;\r\n        uint8  pumpRate;\r\n        bool hasChange;\r\n    }\r\n\r\n    uint32  gameIndex = 0;\r\n    uint256 totalPrice= 0;\r\n    uint8 inviteRate = 10;\r\n    ContractParam public setConfig;\r\n    ContractParam public curConfig;\r\n    address[] public addressArray = new address[](0);\r\n    \r\n    IRandomUtil public baseRandom =  IRandomUtil(0x00df567284e9c076eb207cb64fcdc14ae89199c44d);\r\n    IERC20Token public token      =  IERC20Token(0x007a6eBE5Cc20DA8655640fC1112522367569F2114);\r\n    IInviteData public invite     =  IInviteData(0x008796E9e3b15869D444B8AabdA0d3ea7eEafDEa96);\r\n\r\n    event openLockEvent();\r\n    event addPlayerEvent(uint32 gameIndex,address player);\r\n    event gameOverEvent(uint32 gameIndex,uint32 totalSize,uint256 singlePrice,uint8 pumpRate,address winAddr,uint overTime);\r\n    event stopGameEvent(uint totalBalace,uint totalSize,uint price);\r\n \r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor ()  public payable  {\r\n        uint32 _totalSize = 3;\r\n        uint256  _singlePrice = 10;\r\n        owner = msg.sender;\r\n        setConfig = ContractParam(_totalSize,_singlePrice  ,5,false);\r\n        curConfig = ContractParam(_totalSize,_singlePrice  ,5,false);\r\n        baseRandom.addContractAddr();\r\n        startNewGame();\r\n    }\r\n   \r\n    \r\n    ////////////////////////////////////////////////////////\r\n    // onlyOwner or private method\r\n    ////////////////////////////////////////////////////////\r\n    function updateLock(bool b) onlyOwner public {\r\n        \r\n        require(isLock != b,\" updateLock new status == old status\");\r\n       \r\n        isLock = b;\r\n       \r\n        if(isLock) {\r\n            stopGame();\r\n        }else{\r\n            startNewGame();\r\n            emit openLockEvent();\r\n        }\r\n    }\r\n    \r\n    function changeConfig( uint32 _totalSize,uint256 _singlePrice,uint8 _pumpRate) onlyOwner public  {\r\n    \r\n        curConfig.hasChange = true;\r\n        setConfig.totalSize = _totalSize;\r\n        setConfig.pumpRate  = _pumpRate;\r\n        setConfig.singlePrice = _singlePrice;\r\n    }\r\n    \r\n     function updateInviteInfo(address _addr,uint8 _rate) onlyOwner public  {\r\n        invite = IInviteData(_addr);\r\n        inviteRate = _rate;\r\n    }\r\n    \r\n    function stopGame() onlyOwner private {\r\n      \r\n      if(addressArray.length <= 0) {\r\n          return;\r\n      }  \r\n      uint256 totalBalace = token.balanceOf(this);\r\n      uint price = totalBalace / addressArray.length;\r\n      for(uint i = 0; i < addressArray.length; i++) {\r\n          address curPlayer =  addressArray[i];\r\n           token.transfer(curPlayer,price);\r\n      }\r\n      emit stopGameEvent(totalBalace,addressArray.length,price);\r\n      addressArray.length=0;\r\n    }\r\n    \r\n    function startNewGame() private {\r\n        gameIndex++;\r\n        if(curConfig.hasChange) {\r\n            if(curConfig.totalSize   != setConfig.totalSize) {\r\n                curConfig.totalSize   = setConfig.totalSize;\r\n            }\r\n            if(curConfig.singlePrice != setConfig.singlePrice){\r\n               curConfig.singlePrice = setConfig.singlePrice; \r\n            }\r\n            if( curConfig.pumpRate    != setConfig.pumpRate) {\r\n                curConfig.pumpRate    = setConfig.pumpRate;\r\n            }\r\n            curConfig.hasChange = false;\r\n        }\r\n        addressArray.length=0;\r\n    }\r\n    \r\n    function addPlayer(address player) private {\r\n    \r\n        totalPrice = totalPrice + curConfig.singlePrice;\r\n        addressArray.push(player);\r\n       \r\n        emit addPlayerEvent(gameIndex,player);\r\n        if(addressArray.length >= curConfig.totalSize) {\r\n            gameResult();\r\n            startNewGame();\r\n        }\r\n    } \r\n    function gameResult() private {\r\n            \r\n      uint index  = getRamdon();\r\n      address winAddress = addressArray[index];\r\n      uint256 totalBalace = token.balanceOf(this);\r\n      uint256 giveToOwn   = totalBalace * curConfig.pumpRate / 100;\r\n      uint256 giveToWin = totalBalace - giveToOwn;\r\n      \r\n      token.transfer(owner,giveToOwn);\r\n      token.transfer(winAddress,giveToWin);\r\n \r\n      emit gameOverEvent(\r\n                    gameIndex,\r\n                    curConfig.totalSize,\r\n                    curConfig.singlePrice,\r\n                    curConfig.pumpRate,\r\n                    winAddress,\r\n                    now);\r\n    }\r\n    function getRamdon() private view returns (uint) {\r\n      \r\n      bytes32 ramdon = baseRandom.getBaseRandom();\r\n      require(ramdon !=0,\"baseRandom error!\");\r\n      ramdon = keccak256(abi.encodePacked(ramdon,now,blockhash(block.number-1)));\r\n      for(uint i = 0; i < addressArray.length; i++) {\r\n         ramdon = keccak256(abi.encodePacked(ramdon,now, addressArray[i]));\r\n      }\r\n      uint index  = uint(ramdon) % addressArray.length;\r\n      return index;\r\n    }\r\n    \r\n    ////////////////////////////////////////////////////////\r\n    // handle logic gate after receive Token\r\n    ////////////////////////////////////////////////////////\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public {\r\n       \r\n        IERC20Token t = IERC20Token(_token);\r\n        require(_token == address(token) );\r\n        require(_from == tx.origin,  \"token from must equal tx.origin\");\r\n        require(isNotContract(_from),\"token from  is not Contract\");\r\n        require(_value == curConfig.singlePrice );\r\n        require(t.transferFrom(_from, this, _value));\r\n        addPlayer(_from);\r\n        \r\n        bytes32 inviteName = stringToBytes32(_extraData);\r\n        inviteHandler(inviteName);\r\n    }\r\n    \r\n        \r\n    function inviteHandler(bytes32 inviteName) private {\r\n        \r\n        if(invite == address(0)) {\r\n          return ;\r\n        }\r\n        address inviteAddr = invite.GetAddressByName(inviteName);\r\n        if(inviteAddr != address(0)) {\r\n           uint giveToken   =  curConfig.singlePrice * inviteRate / 100;\r\n           token.transfer(inviteAddr,giveToken);\r\n        }\r\n    }\r\n    \r\n    function stringToBytes32( bytes source) returns (bytes32 result) {\r\n  \r\n        if (source.length == 0) {\r\n            return 0x0;\r\n        }\r\n    \r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    function getGameInfo() public view returns  (uint256,uint32,uint256,uint8,address[],uint256,bool)  {\r\n        return (gameIndex,\r\n                curConfig.totalSize,\r\n                curConfig.singlePrice,\r\n                curConfig.pumpRate,\r\n                addressArray,\r\n                totalPrice,\r\n                isLock);\r\n    }\r\n    \r\n    function () payable public {\r\n        require(msg.value == 0 );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"source\",\"type\":\"bytes\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curConfig\",\"outputs\":[{\"name\":\"totalSize\",\"type\":\"uint32\"},{\"name\":\"singlePrice\",\"type\":\"uint256\"},{\"name\":\"pumpRate\",\"type\":\"uint8\"},{\"name\":\"hasChange\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint8\"}],\"name\":\"updateInviteInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalSize\",\"type\":\"uint32\"},{\"name\":\"_singlePrice\",\"type\":\"uint256\"},{\"name\":\"_pumpRate\",\"type\":\"uint8\"}],\"name\":\"changeConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"setConfig\",\"outputs\":[{\"name\":\"totalSize\",\"type\":\"uint32\"},{\"name\":\"singlePrice\",\"type\":\"uint256\"},{\"name\":\"pumpRate\",\"type\":\"uint8\"},{\"name\":\"hasChange\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"updateLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isNotContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invite\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"openLockEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"}],\"name\":\"addPlayerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"totalSize\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"singlePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pumpRate\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"winAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"overTime\",\"type\":\"uint256\"}],\"name\":\"gameOverEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalBalace\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSize\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"stopGameEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"transferToOwnerEvent\",\"type\":\"event\"}]","ContractName":"BREBuy_ERC20","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://707f89d9290b7b311c84b20d559b035c73c2f7faabf5accc24a3b397f4d8173c"}]}