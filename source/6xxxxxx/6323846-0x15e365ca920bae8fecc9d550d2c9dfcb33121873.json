{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n \r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n \r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n \r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n  using SafeMath for uint256;\r\n \r\n  mapping(address => uint256) balances;\r\n  \r\n  Crowdsale crowdsale;\r\n  \r\n    modifier crowdsaleIsOverOrThisIsContract(){\r\n      require(crowdsale.isCrowdsaleOver() || msg.sender == crowdsale.getContractAddress());\r\n      _;\r\n  }\r\n \r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) crowdsaleIsOverOrThisIsContract returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n \r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n \r\n}\r\n \r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n \r\n  mapping (address => mapping (address => uint256)) allowed;\r\n  \r\n  \r\n  \r\n  function StandardToken(Crowdsale x){\r\n      crowdsale =x;\r\n  }\r\n  \r\n\r\n \r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n \r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n \r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n \r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n \r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n \r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n \r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n \r\n}\r\n \r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n \r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n \r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n \r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n \r\n}\r\n \r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n \r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n     function MintableToken(Crowdsale x) StandardToken(x){\r\n        \r\n    }\r\n    \r\n  event Mint(address indexed to, uint256 amount);\r\n  \r\n  event MintFinished();\r\n \r\n  bool public mintingFinished = false;\r\n \r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n \r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    allowed[_to][_to] =  allowed[_to][_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    return true;\r\n  }\r\n \r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n  \r\n}\r\n \r\ncontract DjohniKrasavchickToken is MintableToken {\r\n    \r\n    string public constant name = \"DjohniKrasavchickToken\";\r\n    \r\n    string public constant symbol = \"DJKR\";\r\n    \r\n    uint32 public constant decimals = 2;\r\n    \r\n    function DjohniKrasavchickToken(Crowdsale x) MintableToken(x){\r\n        \r\n    } \r\n    \r\n}\r\n \r\n \r\ncontract Crowdsale is Ownable {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    address public myWalletForETH;\r\n    \r\n    uint public bountyPercent;\r\n    \r\n    uint public djonniPercent;\r\n    \r\n    uint public developerPercent;\r\n    \r\n    uint public bountyTokens;\r\n    \r\n    uint public djonniTokens;\r\n    \r\n    uint public developerTokens;\r\n    \r\n    address[] public bountyAdresses;\r\n \r\n    DjohniKrasavchickToken public token = new DjohniKrasavchickToken(this);\r\n \r\n    uint public start;\r\n    \r\n    uint public period;\r\n \r\n    uint public hardcap;\r\n \r\n    uint public rate;\r\n    \r\n    uint public softcap;\r\n    \r\n    bool private isHardCapWasReached = false;\r\n    \r\n    bool private isCrowdsaleStoped = false;\r\n    \r\n    mapping(address => uint) public balances;\r\n \r\n    function Crowdsale() {\r\n      myWalletForETH = 0xe4D5b0aECfeFf1A39235f49254a0f37AaA7F6cC0;\r\n      bountyPercent = 10;\r\n      djonniPercent = 50;\r\n      developerPercent = 20;\r\n      rate = 100000000;\r\n      start = 1536858000;\r\n      period = 14;\r\n      hardcap = 200000000000000000;\r\n      softcap = 50000000000000000;\r\n    }\r\n     \r\n    function getContractAddress() public returns(address){\r\n        return this;\r\n    }\r\n    \r\n    function isCrowdsaleOver() public returns(bool){\r\n        if( isCrowsdaleTimeFinished() || isHardCapReached() || isCrowdsaleStoped){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function isCrowsdaleTimeFinished() internal returns(bool){\r\n        if(now > start + period * 1 hours){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function isHardCapReached() internal returns (bool){\r\n        if(hardcap==this.balance){\r\n            isHardCapWasReached = true;\r\n        }\r\n        return isHardCapWasReached;\r\n    }\r\n    \r\n    function stopCrowdSaleOnlyForOwner() onlyOwner{\r\n        if(!isCrowdsaleStoped){\r\n         stopCrowdSale();\r\n        }\r\n    }\r\n    \r\n    function stopCrowdSale() internal{\r\n        if(token.mintingFinished() == false){\r\n              finishMinting();\r\n        }\r\n        isCrowdsaleStoped = true;\r\n    }\r\n \r\n    modifier saleIsOn() {\r\n      require(now > start && now < start + period * 1 hours);\r\n      _;\r\n    }\r\n    \r\n    modifier crowdsaleIsOver() {\r\n      require(isCrowdsaleOver());\r\n      _;\r\n    }\r\n\r\n    modifier isUnderHardCap() {\r\n      require(this.balance <= hardcap && !isHardCapWasReached );\r\n      _;\r\n    }\r\n    \r\n    modifier onlyOwnerOrSaleIsOver(){\r\n        require(owner==msg.sender || isCrowdsaleOver() );\r\n        _;\r\n    }\r\n \r\n    function refund() {\r\n      require(this.balance < softcap && now > start + period * 1 hours);\r\n      uint value = balances[msg.sender]; \r\n      balances[msg.sender] = 0; \r\n      msg.sender.transfer(value); \r\n    }\r\n \r\n    function finishMinting() public onlyOwnerOrSaleIsOver  {\r\n      if(this.balance > softcap) {\r\n        myWalletForETH.transfer(this.balance);\r\n        uint issuedTokenSupply = token.totalSupply();\r\n        uint additionalTokens = bountyPercent+developerPercent+djonniPercent;\r\n        uint tokens = issuedTokenSupply.mul(additionalTokens).div(100 - additionalTokens);\r\n        token.mint(this, tokens);\r\n        token.finishMinting();\r\n        issuedTokenSupply = token.totalSupply();\r\n        bountyTokens = issuedTokenSupply.div(100).mul(bountyPercent);\r\n        developerTokens = issuedTokenSupply.div(100).mul(developerPercent);\r\n        djonniTokens = issuedTokenSupply.div(100).mul(djonniPercent);\r\n        token.transfer(myWalletForETH, developerTokens);\r\n      }\r\n    }\r\n    \r\n    function showThisBallance() public returns (uint){\r\n        return this.balance;\r\n    }\r\n\r\n \r\n   function createTokens() isUnderHardCap saleIsOn payable {\r\n      uint tokens = rate.mul(msg.value).div(1 ether);\r\n      token.mint(this, tokens);\r\n      token.transfer(msg.sender, tokens);\r\n      balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n    }\r\n    \r\n\r\n \r\n    function() external payable {\r\n     if(isCrowsdaleTimeFinished() && !isCrowdsaleStoped){\r\n       stopCrowdSale();    \r\n     }\r\n     createTokens();\r\n     if(isCrowdsaleOver() && !isCrowdsaleStoped){\r\n      stopCrowdSale();\r\n     }\r\n    }\r\n    \r\n    function addBountyAdresses(address[] array) onlyOwner{\r\n               for (uint i = 0; i < array.length; i++){\r\n                  bountyAdresses.push(array[i]);\r\n               }\r\n    }\r\n    \r\n    function distributeBountyTokens() onlyOwner crowdsaleIsOver{\r\n               uint amountofTokens = bountyTokens/bountyAdresses.length;\r\n               for (uint i = 0; i < bountyAdresses.length; i++){\r\n                  token.transfer(bountyAdresses[i], amountofTokens);\r\n               }\r\n               bountyTokens = 0;\r\n    }\r\n    \r\n        function distributeDjonniTokens(address addr) onlyOwner crowdsaleIsOver{\r\n                  token.transfer(addr, djonniTokens);\r\n                  djonniTokens = 0;\r\n              \r\n    }\r\n    \r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"djonniTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopCrowdSaleOnlyForOwner\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"array\",\"type\":\"address[]\"}],\"name\":\"addBountyAdresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distributeBountyTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myWalletForETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"distributeDjonniTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"djonniPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"isCrowdsaleOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bountyAdresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"showThisBallance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b6843bd87054da1d38356d4f2116d8b34b0349ee610c181eb6eec42d715b0f01"}]}