{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Burnable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract Burnable is StandardToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is Burnable {\r\n\r\n  address public owner;\r\n  address public ownerCandidate;\r\n\r\n  /**\r\n   * @dev Fired whenever ownership is successfully transferred.\r\n   */\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a new owner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a new owner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    ownerCandidate = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev New ownerschip Confirmation.\r\n   */\r\n  function acceptOwnership() public {\r\n    _acceptOwnership();\r\n  }\r\n\r\n  /**\r\n   * @dev New ownerschip confirmation internal.\r\n   */\r\n  function _acceptOwnership() internal {\r\n    require(msg.sender == ownerCandidate);\r\n    emit OwnershipTransferred(owner, ownerCandidate);\r\n    owner = ownerCandidate;\r\n    ownerCandidate = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   * In case stuff goes bad.\r\n   */\r\n  function destroy() public onlyOwner {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) public onlyOwner {\r\n    selfdestruct(_recipient);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Administrable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The authentication manager details user accounts that have access to certain priviledges.\r\n */\r\ncontract Administrable is Ownable {\r\n\r\n  using SafeERC20 for ERC20Basic;\r\n  \r\n  /**\r\n   * @dev Map addresses to admins.\r\n   */\r\n  mapping (address => bool) admins;\r\n\r\n  /**\r\n   * @dev All admins that have ever existed.\r\n   */\r\n  address[] adminAudit;\r\n\r\n  /**\r\n   * @dev Globally enable or disable admin access.\r\n   */\r\n  bool allowAdmins = true;\r\n\r\n   /**\r\n   * @dev Fired whenever an admin is added to the contract.\r\n   */\r\n  event AdminAdded(address addedBy, address admin);\r\n\r\n  /**\r\n   * @dev Fired whenever an admin is removed from the contracts.\r\n   */\r\n  event AdminRemoved(address removedBy, address admin);\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the active admin or owner.\r\n   */\r\n  modifier onlyAdmin {\r\n    require(isCurrentAciveAdmin(msg.sender));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Turn on admin role\r\n   */\r\n  function enableAdmins() public onlyOwner {\r\n    require(allowAdmins == false);\r\n    allowAdmins = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Turn off admin role\r\n   */\r\n  function disableAdmins() public onlyOwner {\r\n    require(allowAdmins);\r\n    allowAdmins = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets whether or not the specified address is currently an admin.\r\n   */\r\n  function isCurrentAdmin(address _address) public view returns (bool) {\r\n    if(_address == owner)\r\n      return true;\r\n    else\r\n      return admins[_address];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets whether or not the specified address is currently an active admin.\r\n   */\r\n  function isCurrentAciveAdmin(address _address) public view returns (bool) {\r\n    if(_address == owner)\r\n      return true;\r\n    else\r\n      return allowAdmins && admins[_address];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets whether or not the specified address has ever been an admin.\r\n   */\r\n  function isCurrentOrPastAdmin(address _address) public view returns (bool) {\r\n    for (uint256 i = 0; i < adminAudit.length; i++)\r\n      if (adminAudit[i] == _address)\r\n        return true;\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds a user to our list of admins.\r\n   */\r\n  function addAdmin(address _address) public onlyOwner {\r\n    require(admins[_address] == false);\r\n    admins[_address] = true;\r\n    emit AdminAdded(msg.sender, _address);\r\n    adminAudit.length++;\r\n    adminAudit[adminAudit.length - 1] = _address;\r\n  }\r\n\r\n  /**\r\n   * @dev Removes a user from our list of admins but keeps them in the history.\r\n   */\r\n  function removeAdmin(address _address) public onlyOwner {\r\n    require(_address != msg.sender);\r\n    require(admins[_address]);\r\n    admins[_address] = false;\r\n    emit AdminRemoved(msg.sender, _address);\r\n  }\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param _token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic _token) external onlyAdmin {\r\n    uint256 balance = _token.balanceOf(this);\r\n    _token.safeTransfer(msg.sender, balance);\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Pausable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Administrable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyAdmin whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyAdmin whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Rento.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract Rento is Pausable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  string public name = \"Rento\";\r\n  string public symbol = \"RTO\";\r\n  uint8 public decimals = 8;\r\n\r\n  /**\r\n   * @dev representing 1.0.\r\n   */\r\n  uint256 public constant UNIT      = 100000000;\r\n\r\n  uint256 constant INITIAL_SUPPLY   = 600000000 * UNIT;\r\n\r\n  uint256 constant SALE_SUPPLY      = 264000000 * UNIT;\r\n  uint256 internal SALE_SENT        = 0;\r\n\r\n  uint256 constant OWNER_SUPPLY     = 305000000 * UNIT;\r\n  uint256 internal OWNER_SENT       = 0;\r\n\r\n  uint256 constant BOUNTY_SUPPLY    = 6000000 * UNIT;\r\n  uint256 internal BOUNTY_SENT      = 0;\r\n\r\n  uint256 constant ADVISORS_SUPPLY  = 25000000 * UNIT;\r\n  uint256 internal ADVISORS_SENT    = 0;\r\n\r\n  struct Stage {\r\n     uint8 cents;\r\n     uint256 limit;\r\n  } \r\n\r\n  Stage[] stages;\r\n\r\n  /**\r\n   * @dev Stages prices in cents\r\n   */\r\n  mapping(uint => uint256) rates;\r\n\r\n  constructor() public {\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    stages.push(Stage( 2, 0));\r\n    stages.push(Stage( 6, 26400000 * UNIT));\r\n    stages.push(Stage( 6, 52800000 * UNIT));\r\n    stages.push(Stage(12, 158400000 * UNIT));\r\n    stages.push(Stage(12, SALE_SUPPLY));\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Sell tokens to address based on USD cents value.\r\n   * @param _to Buyer address.\r\n   * @param _value USC cents value.\r\n   */\r\n  function sellWithCents(address _to, uint256 _value) public\r\n    onlyAdmin whenNotPaused\r\n    returns (bool success) {\r\n      return _sellWithCents(_to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Sell tokens to address array based on USD cents array values.\r\n   */\r\n  function sellWithCentsArray(address[] _dests, uint256[] _values) public\r\n    onlyAdmin whenNotPaused\r\n    returns (bool success) {\r\n      require(_dests.length == _values.length);\r\n      for (uint32 i = 0; i < _dests.length; i++)\r\n        if(!_sellWithCents(_dests[i], _values[i])) {\r\n          revert();\r\n          return false;\r\n        }\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Sell tokens to address based on USD cents value.\r\n   * @param _to Buyer address.\r\n   * @param _value USC cents value.\r\n   */\r\n  function _sellWithCents(address _to, uint256 _value) internal\r\n    onlyAdmin whenNotPaused\r\n    returns (bool) {\r\n      require(_to != address(0) && _value > 0);\r\n      uint256 tokens_left = 0;\r\n      uint256 tokens_right = 0;\r\n      uint256 price_left = 0;\r\n      uint256 price_right = 0;\r\n      uint256 tokens;\r\n      uint256 i_r = 0;\r\n      uint256 i = 0;\r\n      while (i < stages.length) {\r\n        if(SALE_SENT >= stages[i].limit) {\r\n          if(i == stages.length-1) {\r\n            i_r = i;\r\n          } else {\r\n            i_r = i + 1;\r\n          }\r\n          price_left = uint(stages[i].cents);\r\n          price_right = uint(stages[i_r].cents);\r\n        }\r\n        i += 1;\r\n      }\r\n      if(price_left <= 0) {\r\n        revert();\r\n        return false;\r\n      }\r\n      tokens_left = _value.mul(UNIT).div(price_left);\r\n      if(SALE_SENT.add(tokens_left) <= stages[i_r].limit) {\r\n        tokens = tokens_left;\r\n      } else {\r\n        tokens_left = stages[i_r].limit.sub(SALE_SENT);\r\n        tokens_right = UNIT.mul(_value.sub((tokens_left.mul(price_left)).div(UNIT))).div(price_right);\r\n      }\r\n      tokens = tokens_left.add(tokens_right);\r\n      if(SALE_SENT.add(tokens) > SALE_SUPPLY) {\r\n        revert();\r\n        return false;\r\n      }\r\n      balances[_to] = balances[_to].add(tokens);\r\n      SALE_SENT = SALE_SENT.add(tokens);\r\n      emit Transfer(this, _to, tokens);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from contract directy to address.\r\n   * @param _to Buyer address.\r\n   * @param _value Tokens value.\r\n   */\r\n  function sellDirect(address _to, uint256 _value) public\r\n    onlyAdmin whenNotPaused\r\n      returns (bool success) {\r\n        require(_to != address(0) && _value > 0 && SALE_SENT.add(_value) <= SALE_SUPPLY);\r\n        balances[_to] = balances[_to].add(_value);\r\n        SALE_SENT = SALE_SENT.add(_value);\r\n        emit Transfer(this, _to, _value);\r\n        return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Sell tokens to address array based on USD cents array values.\r\n   */\r\n  function sellDirectArray(address[] _dests, uint256[] _values) public\r\n    onlyAdmin whenNotPaused returns (bool success) {\r\n      require(_dests.length == _values.length);\r\n      for (uint32 i = 0; i < _dests.length; i++) {\r\n         if(_values[i] <= 0 || !sellDirect(_dests[i], _values[i])) {\r\n            revert();\r\n            return false;\r\n         }\r\n      }\r\n      return true;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from contract directy to owner.\r\n   * @param _value Tokens value.\r\n   */\r\n  function transferOwnerTokens(uint256 _value) public\r\n    onlyAdmin whenNotPaused returns (bool success) {\r\n      require(_value > 0 && OWNER_SENT.add(_value) <= OWNER_SUPPLY);\r\n      balances[owner] = balances[owner].add(_value);\r\n      OWNER_SENT = OWNER_SENT.add(_value);\r\n      emit Transfer(this, owner, _value);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer Bounty Tokens from contract.\r\n   * @param _to Bounty recipient address.\r\n   * @param _value Tokens value.\r\n   */\r\n  function transferBountyTokens(address _to, uint256 _value) public\r\n    onlyAdmin whenNotPaused returns (bool success) {\r\n      require(_to != address(0) && _value > 0 && BOUNTY_SENT.add(_value) <= BOUNTY_SUPPLY);\r\n      balances[_to] = balances[_to].add(_value);\r\n      BOUNTY_SENT = BOUNTY_SENT.add(_value);\r\n      emit Transfer(this, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer Bounty Tokens from contract to multiple recipients ant once.\r\n   * @param _to Bounty recipient addresses.\r\n   * @param _values Tokens values.\r\n   */\r\n  function transferBountyTokensArray(address[] _to, uint256[] _values) public\r\n    onlyAdmin whenNotPaused returns (bool success) {\r\n      require(_to.length == _values.length);\r\n      for (uint32 i = 0; i < _to.length; i++)\r\n        if(!transferBountyTokens(_to[i], _values[i])) {\r\n          revert();\r\n          return false;\r\n        }\r\n      return true;\r\n  }\r\n    \r\n  /**\r\n   * @dev Transfer Advisors Tokens from contract.\r\n   * @param _to Advisors recipient address.\r\n   * @param _value Tokens value.\r\n   */\r\n  function transferAdvisorsTokens(address _to, uint256 _value) public\r\n    onlyAdmin whenNotPaused returns (bool success) {\r\n      require(_to != address(0) && _value > 0 && ADVISORS_SENT.add(_value) <= ADVISORS_SUPPLY);\r\n      balances[_to] = balances[_to].add(_value);\r\n      ADVISORS_SENT = ADVISORS_SENT.add(_value);\r\n      emit Transfer(this, _to, _value);\r\n      return true;\r\n  }\r\n    \r\n  /**\r\n   * @dev Transfer Advisors Tokens from contract for multiple advisors.\r\n   * @param _to Advisors recipient addresses.\r\n   * @param _values Tokens valuees.\r\n   */\r\n  function transferAdvisorsTokensArray(address[] _to, uint256[] _values) public\r\n    onlyAdmin whenNotPaused returns (bool success) {\r\n      require(_to.length == _values.length);\r\n      for (uint32 i = 0; i < _to.length; i++)\r\n        if(!transferAdvisorsTokens(_to[i], _values[i])) {\r\n          revert();\r\n          return false;\r\n        }\r\n      return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Current Sale states methods.\r\n   */\r\n  function soldTokensSent() external view returns (uint256) {\r\n    return SALE_SENT;\r\n  }\r\n  function soldTokensAvailable() external view returns (uint256) {\r\n    return SALE_SUPPLY.sub(SALE_SENT);\r\n  }\r\n\r\n  function ownerTokensSent() external view returns (uint256) {\r\n    return OWNER_SENT;\r\n  }\r\n  function ownerTokensAvailable() external view returns (uint256) {\r\n    return OWNER_SUPPLY.sub(OWNER_SENT);\r\n  }\r\n\r\n  function bountyTokensSent() external view returns (uint256) {\r\n    return BOUNTY_SENT;\r\n  }\r\n  function bountyTokensAvailable() external view returns (uint256) {\r\n    return BOUNTY_SUPPLY.sub(BOUNTY_SENT);\r\n  }\r\n\r\n  function advisorsTokensSent() external view returns (uint256) {\r\n    return ADVISORS_SENT;\r\n  }\r\n  function advisorsTokensAvailable() external view returns (uint256) {\r\n    return ADVISORS_SUPPLY.sub(ADVISORS_SENT);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from msg.sender account directy to address array with values array.\r\n   * param _dests  recipients.\r\n   * @param _values Tokens values.\r\n   */\r\n  function transferArray(address[] _dests, uint256[] _values) public returns (bool success) {\r\n      require(_dests.length == _values.length);\r\n      for (uint32 i = 0; i < _dests.length; i++) {\r\n        if(_values[i] > balances[msg.sender] || msg.sender == _dests[i] || _dests[i] == address(0)) {\r\n          revert();\r\n          return false;\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(_values[i]);\r\n        balances[_dests[i]] = balances[_dests[i]].add(_values[i]);\r\n        emit Transfer(msg.sender, _dests[i], _values[i]);\r\n      }\r\n      return true;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"transferBountyTokensArray\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"transferAdvisorsTokensArray\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTokensSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsTokensSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sellWithCents\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dests\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"sellWithCentsArray\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isCurrentAciveAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dests\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"transferArray\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTokensAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokensSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferOwnerTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAdvisorsTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferBountyTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isCurrentAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableAdmins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isCurrentOrPastAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dests\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"sellDirectArray\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableAdmins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokensSent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sellDirect\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"removedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Rento","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://07bac203696ee642ace6eccf44d4952de6275566478c971b0552bd2b11be7cf5"}]}