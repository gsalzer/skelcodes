{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ninterface tribe\r\n{\r\n\tfunction activate (address _owner, address _wallets, uint256 _total_supply, uint256 _remains) external returns (bool changed);\r\n}\r\n\r\ncontract extended\r\n{\r\n\tenum\tstage {prepare, private_sale, redemption, public_sale, complete}\r\n\tbool\tprivate locker = false;\r\n\t\r\n\tmodifier reentrancy {require (locker == false); locker = true; _; locker = false;}\r\n\t\r\n\tfunction is_contract (address _address) internal view returns (bool)\r\n\t{\r\n\t\tuint codeLength;\r\n\t\t\r\n\t\tif (_address == 0x0) return false;\r\n\t\t\r\n\t\tassembly {codeLength := extcodesize (_address)}\r\n\t\t\r\n\t\tif (codeLength > 0) return true;\r\n\t\telse return false;\r\n\t}\r\n\t\r\n\tfunction mmul (uint256 _a, uint256 _b) internal pure returns (uint256)\r\n\t{\r\n\t\tif (_a == 0) return 0;\r\n\t\t\r\n\t\tuint256 c = _a * _b;\r\n\t\trequire (c / _a == _b);\r\n\t\t\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction mdiv (uint256 _a, uint256 _b) internal pure returns (uint256)\r\n\t{\r\n\t\trequire (_b > 0);\r\n\t\tuint256 c = _a / _b;\r\n\t\t\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction msub (uint256 _a, uint256 _b) internal pure returns (uint256)\r\n\t{\r\n\t\tif (_b > _a) _b = 0;\r\n\t\t\r\n\t\tuint256 c = _a - _b;\r\n\t\t\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction madd (uint256 _a, uint256 _b) internal pure returns (uint256)\r\n\t{\r\n\t\tuint256 c = _a + _b;\r\n\t\trequire (c >= _a);\r\n\t\t\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract purse is extended\r\n{\r\n\taddress\tpublic owner = address (0);\r\n\taddress public trust = address (0);\r\n\t\r\n\tmapping (address => wallet_t) private account;\r\n\t\r\n\tevent AccountCreated (address AccountAddress);\r\n\tevent AccountTokensBalanceUpdated (address AccountAddress, uint256 TokensAmount, uint256 TokensFreeze);\r\n\tevent AccountDepositBalanceUpdated (address AccountAddress, uint256 DepositAmount, uint256 DepositFreeze);\r\n\tevent AccountFlagsUpdated (address AccountAddress, uint256 Flags);\r\n\tevent ContractOwnerChanged (address NewOwnerAddress);\r\n\tevent AccountDiscountPercentUpdated (address AccountAddress, uint256 Percent);\r\n\tevent AccountDiscountAmountUpdated (address AccountAddress, uint256 Amount);\r\n\tevent EmergencySituation (address RecieverAddress, string Reason, address Initiator);\r\n\t\r\n\tconstructor (address _trust) public\r\n\t{\r\n\t\towner = msg.sender;\r\n\t\t\r\n\t\taccount [address (this)].wallet = address (this);\r\n\t\taccount [address (this)].tokens = value_t (0, 0);\r\n\t\taccount [address (this)].deposit = value_t (0, 0);\r\n\t\taccount [address (this)].discount = vdisc_t (0, 0);\r\n\t\taccount [address (this)].flags = 3;\r\n\t\t\r\n\t\ttrust = _trust;\r\n\t}\r\n\t\r\n\tfunction reset_owner (address _owner) public reentrancy returns (bool is_changed)\r\n\t{\r\n\t\tif (msg.sender != owner && (account [msg.sender].flags & 3) != 3) return false;\r\n\t\tif (_owner == address (0)) return false;\r\n\t\tif (_owner == owner) return true;\r\n\t\t\r\n\t\towner = _owner;\r\n\t\t\r\n\t\temit ContractOwnerChanged (_owner);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction urgently (address _reciever, string _reason) public payable reentrancy\r\n\t{\r\n\t    if (address (this).balance > 0 && (msg.sender == owner || msg.sender == trust))\r\n\t    {\r\n\t        _reciever.transfer (address (this).balance);\r\n\t        \r\n\t        emit EmergencySituation (_reciever, _reason, msg.sender);\r\n\t    }\r\n\t}\r\n\t\r\n\tfunction access_allowed (address _wallet) public view returns (bool is_allowed)\r\n\t{\r\n\t\tif (_wallet != owner && (account [_wallet].flags & 3) != 3) return false;\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction total_deposited () public view returns (uint256 deposited)\r\n\t{\r\n\t    return address (this).balance;\r\n\t}\r\n\t\r\n\tfunction balance_of (address _wallet) public view returns (uint256 account_balance)\r\n\t{\r\n\t\treturn account [_wallet].tokens.amount;\r\n\t}\r\n\t\r\n\tfunction available_balance_of (address _wallet) public view returns (uint256 available_balance)\r\n\t{\r\n\t\treturn msub (account [_wallet].tokens.amount, account [_wallet].tokens.freeze);\r\n\t}\r\n\t\r\n\tfunction exists (address _wallet, bool _create) public returns (bool account_exists)\r\n\t{\r\n\t\tif (_wallet == address (0) || (account [_wallet].wallet != _wallet && _create == false)) return false;\r\n\t\tif (account [_wallet].wallet == _wallet) return true;\r\n\t\t\r\n\t\tif (msg.sender != owner && (account [msg.sender].flags & 3) != 3) return false;\r\n\t\t\r\n\t\taccount [_wallet].wallet = _wallet;\r\n\t\taccount [_wallet].tokens = value_t (0, 0);\r\n\t\taccount [_wallet].deposit = value_t (0, 0);\r\n\t\taccount [_wallet].discount = vdisc_t (0, 0);\r\n\t\taccount [_wallet].flags = 1;\r\n\t\t\r\n\t\temit AccountCreated (_wallet);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction get_wallet_tokens (address _wallet) public view returns (uint256 tokens, uint256 freeze)\r\n\t{\r\n\t\treturn (account [_wallet].tokens.amount, account [_wallet].tokens.freeze);\r\n\t}\r\n\t\r\n\tfunction set_wallet_tokens (address _wallet, uint256 _amount, uint256 _freeze) public reentrancy returns (bool success)\r\n\t{\r\n\t\tif (msg.sender != owner && (account [msg.sender].flags & 3) != 3) return false;\r\n\t\tif (_wallet == address (0) || account [_wallet].wallet != _wallet) return false;\r\n\t\tif (account [_wallet].tokens.amount == _amount && account [_wallet].tokens.freeze == _freeze) return true;\r\n\t\t\r\n\t\taccount [_wallet].tokens.amount = _amount;\r\n\t\t\r\n\t\tif (_freeze <= account [_wallet].tokens.amount) account [_wallet].tokens.freeze = _freeze;\r\n\t\telse account [_wallet].tokens.freeze = account [_wallet].tokens.amount;\r\n\t\t\r\n\t\temit AccountTokensBalanceUpdated (_wallet, account [_wallet].tokens.amount, account [_wallet].tokens.freeze);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction get_wallet_deposit (address _wallet) public view returns (uint256 deposited, uint256 freeze)\r\n\t{\r\n\t\treturn (account [_wallet].deposit.amount, account [_wallet].deposit.freeze);\r\n\t}\r\n\t\r\n\tfunction set_wallet_deposit (address _wallet, address _recipient, uint256 _amount, uint256 _freeze) public payable reentrancy returns (bool success)\r\n\t{\r\n\t\tif (msg.sender != owner && (account [msg.sender].flags & 3) != 3) revert ();\r\n\t\tif (_wallet == address (0) || account [_wallet].wallet != _wallet) revert ();\r\n\t\tif (account [_wallet].deposit.amount == _amount && account [_wallet].deposit.freeze == _freeze) return true;\r\n\t\t\r\n\t\tuint256 odds = 0;\r\n\t\t\r\n\t\tif (account [_wallet].deposit.amount > _amount)\r\n\t\t{\r\n\t\t\todds = msub (account [_wallet].deposit.amount, _amount);\r\n\t\t\t\r\n\t\t\tif (address (this).balance < odds || _recipient == address (0)) revert ();\r\n\t\t\t\r\n\t\t\t_recipient.transfer (odds);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\todds = msub (_amount, account [_wallet].deposit.amount);\r\n\t\t\t\r\n\t\t\tif (msg.value < odds) revert ();\r\n\t\t\tif (msg.value > odds) msg.sender.transfer (msub (msg.value, odds));\r\n\t\t}\r\n\t\t\r\n\t\taccount [_wallet].deposit.amount = _amount;\r\n\t\t\r\n\t\tif (_freeze <= account [_wallet].deposit.amount) account [_wallet].deposit.freeze = _freeze;\r\n\t\telse account [_wallet].deposit.freeze = account [_wallet].deposit.amount;\r\n\t\t\r\n\t\temit AccountDepositBalanceUpdated (_wallet, account [_wallet].deposit.amount, account [_wallet].deposit.freeze);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction get_wallet_flags (address _wallet) public view returns (uint256 flags)\r\n\t{\r\n\t\treturn account [_wallet].flags;\r\n\t}\r\n\t\r\n\tfunction set_wallet_flags (address _wallet, uint256 _flags) public reentrancy returns (bool success)\r\n\t{\r\n\t\tif (msg.sender != owner && (account [msg.sender].flags & 3) != 3) return false;\r\n\t\tif (_wallet == address (0) || account [_wallet].wallet != _wallet) return false;\r\n\t\t\r\n\t\taccount [_wallet].flags = _flags;\r\n\t\t\r\n\t\temit AccountFlagsUpdated (_wallet, _flags);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction get_wallet_discount_percent (address _wallet) public view returns (uint256)\r\n\t{\r\n\t\treturn account [_wallet].discount.percent;\r\n\t}\r\n\t\r\n\tfunction set_wallet_discount_percent (address _wallet, uint256 _percent) public reentrancy returns (bool)\r\n\t{\r\n\t\tif (msg.sender != owner && (account [msg.sender].flags & 3) != 3) return false;\r\n\t\tif (_wallet == address (0) || account [_wallet].wallet != _wallet || _percent > 10000) return false;\r\n\t\t\r\n\t\taccount [_wallet].discount.percent = _percent;\r\n\t\t\r\n\t\temit AccountDiscountPercentUpdated (_wallet, _percent);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction get_wallet_discount_amount (address _wallet) public view returns (uint256)\r\n\t{\r\n\t\treturn account [_wallet].discount.amount;\r\n\t}\r\n\t\r\n\tfunction set_wallet_discount_amount (address _wallet, uint256 _amount) public reentrancy returns (bool)\r\n\t{\r\n\t\tif (msg.sender != owner && (account [msg.sender].flags & 3) != 3) return false;\r\n\t\tif (_wallet == address (0) || account [_wallet].wallet != _wallet) return false;\r\n\t\t\r\n\t\taccount [_wallet].discount.amount = _amount;\r\n\t\t\r\n\t\temit AccountDiscountAmountUpdated (_wallet, _amount);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction () public payable\r\n\t{\r\n\t\trequire (msg.value > 0);\r\n\t\t\r\n\t\taccount [address (this)].deposit.amount = madd (account [address (this)].deposit.amount, msg.value);\r\n\t\t\r\n\t\temit AccountDepositBalanceUpdated (address (this), account [address (this)].deposit.amount, account [address (this)].deposit.freeze);\r\n\t}\r\n\t\r\n\tstruct value_t\r\n\t{\r\n\t\tuint256\tamount;\r\n\t\tuint256\tfreeze;\r\n\t}\r\n\t\r\n\tstruct vdisc_t\r\n\t{\r\n\t\tuint256\tpercent;\r\n\t\tuint256\tamount;\r\n\t}\r\n\t\r\n\tstruct wallet_t\r\n\t{\r\n\t\taddress\twallet;\r\n\t\t\r\n\t\tvalue_t\ttokens;\r\n\t\tvalue_t\tdeposit;\r\n\t\tvdisc_t\tdiscount;\r\n\t\t\r\n\t\tuint256\tflags;\r\n\t}\r\n}\r\n\r\ncontract cashbox is extended\r\n{\r\n\tstring\tpublic name = \"Corporate Integrated Ecosystems - CoinECO Inc.\";\r\n\tstring\tpublic symbol = \"CES\";\r\n\tuint8\tpublic decimals = 0;\r\n\tstring\tpublic version = \"1.0\";\r\n\tstring\tpublic description = \"https://bitcointalk.org/index.php?topic=5064353\";\r\n\t\r\n\taddress\tpublic owner = address (0);\r\n\taddress\tpublic author = address (0);\r\n\t\r\n\tpurse\tpublic wallets = purse (address (0));\r\n\ttribe\tpublic company = tribe (address (0));\r\n\t\r\n\tbool\tpublic redeemable = true;\r\n\t\r\n\tuint256\tpublic limits = 224000000;\r\n\tuint256\tpublic issued = 0;\r\n\tuint256\tpublic supply = 0;\r\n\t\r\n\tuint256\tpublic public_price = 41666666666666700;\r\n\t\r\n\tstage\tpublic milestone = stage.private_sale;\r\n\t\r\n\toption_t [4] public option;\r\n\t\r\n\tuint256\tpublic options_count = 4;\r\n\t\r\n\tmapping (address => buyer_t) public buyer;\r\n\t\r\n\tmodifier owneronly {require (msg.sender == owner); _;}\r\n\tmodifier allowonly {require (msg.sender == owner || msg.sender == author); _;}\r\n\t\r\n\tevent PackageSold (uint256 OptionId, uint256 PackagesCount, uint256 TotalPrice, address Purchaser);\r\n\tevent TokensRedeemed (uint256 OptionId, uint256 TokensCount, uint256 TokensRemains, address Purchaser);\r\n\tevent TokensSold (uint256 TokensCount, uint256 TokensPrice, address Purchaser);\r\n\tevent OptionStageChanged (stage CurrentStage);\r\n\tevent OptionSaleComplete ();\r\n\tevent DescriptionChanged (string DescriptionURL);\r\n\tevent OwnerChanged (address NewOwnerAddress);\r\n\tevent CompanyActivated (address CompanyAddress);\r\n\tevent CompanyAddressUpdated (address CompanyAddress);\r\n\tevent CompanyInfoUpdated (string TokenName, string TokenSymbol, uint8 TokenDecimals);\r\n\tevent RedeemableStateChanged (bool Allowed);\r\n\tevent TokenSaleLimitsUpdated (uint256 NewLimits);\r\n\tevent TokenSalePublicPriceUpdated (uint256 TokenPublicSalePrice);\r\n\tevent TokenSaleTimeoutUpdated (uint256 Stage, uint256 TimeoutValue);\r\n\tevent OptionPackageUpdated (uint256 OptionIndex, uint256 OptionId, uint256 PackagesCount, uint256 TokensPerPackage, uint256 PackagePrice, uint256 PackageRedemptionPrice);\r\n\t\r\n\tconstructor () public\r\n\t{\r\n\t    owner = msg.sender;\r\n\t    author = msg.sender;\r\n\t    \r\n\t    require (address (wallets = new purse (msg.sender)) != address (0) && is_contract (address (wallets)) == true);\r\n\t    \r\n\t    option [0] = option_t (0, 5600, 10000, 6510416666666670000, 26041666666666700000);\r\n\t\toption [1] = option_t (1, 56000, 1000, 1302083333333330000,  5208333333333330000);\r\n\t\toption [2] = option_t (2, 560000, 100,  260416666666667000,  1041666666666670000);\r\n\t\toption [3] = option_t (3, 5600000, 10,   52083333333333300,   208333333333333000);\r\n\t}\r\n\t\r\n\tfunction get_buyer_package_info (address _buyer, uint256 _index) public view returns (uint256 remains_tokens, uint256 price_per_token)\r\n\t{\r\n\t    return (buyer [_buyer].deals [_index].tokens, buyer [_buyer].deals [_index].price);\r\n\t}\r\n\t\r\n\tfunction package (uint256 _option_id) public payable reentrancy returns (bool success)\r\n\t{\r\n\t    if ((milestone == stage.private_sale || milestone == stage.redemption) && msg.value > 0 && issued < limits)\r\n\t    {\r\n\t        uint256 index = _option_id;\r\n\t        uint256 count = 0;\r\n\t        uint256 price = 0;\r\n\t        uint256 token = 0;\r\n\t        \r\n\t        if (_option_id > 3) index = 3;\r\n\t        \r\n\t        count = mdiv (msg.value, option [index].price);\r\n\t        \r\n\t        if (count == 0)\r\n\t        {\r\n\t            msg.sender.transfer (msg.value);\r\n\t            \r\n\t            return false;\r\n\t        }\r\n\t        \r\n\t        if (count > option [index].count) count = option [index].count;\r\n\t        \r\n\t        price = mmul (count, option [index].price);\r\n\t        token = mmul (count, option [index].package);\r\n\t        \r\n\t        if (buyer [msg.sender].wallet != msg.sender)\r\n\t        {\r\n\t            buyer [msg.sender].wallet = msg.sender;\r\n\t            buyer [msg.sender].deals.length = 4;\r\n\t        }\r\n\t        \r\n\t        buyer [msg.sender].deals [index].tokens = madd (buyer [msg.sender].deals [index].tokens, token);\r\n\t        buyer [msg.sender].deals [index].price = mdiv (option [index].redemption, option [index].package);\r\n\t        \r\n\t        issued = madd (issued, token);\r\n\t        \r\n\t        owner.transfer (price);\r\n\t        \r\n\t        option [index].count = msub (option [index].count, count);\r\n\t        \r\n\t        emit PackageSold (index, count, price, msg.sender);\r\n\t        \r\n\t        return true;\r\n\t    }\r\n\t    \r\n\t    revert ();\r\n\t}\r\n\t\r\n\tfunction redemption (uint256 _id) public payable reentrancy returns (bool success)\r\n\t{\r\n\t    if ((milestone == stage.redemption || redeemable == true) && msg.value > 0 && buyer [msg.sender].wallet == msg.sender && wallets.exists (msg.sender, true) == true)\r\n\t    {\r\n\t        uint256 index = _id;\r\n\t        uint256 limit = 0;\r\n\t        uint256 price = 0;\r\n\t        \r\n\t        if (index >= options_count) index = msub (options_count, 1);\r\n\t        \r\n\t        if (buyer [msg.sender].deals [index].tokens > 0)\r\n\t        {\r\n\t            limit = mdiv (msg.value, buyer [msg.sender].deals [index].price);\r\n\t            \r\n\t            if (limit > 0)\r\n\t            {\r\n\t                if (limit > buyer [msg.sender].deals [index].tokens) limit = buyer [msg.sender].deals [index].tokens;\r\n\t                \r\n\t                price = mmul (limit, buyer [msg.sender].deals [index].price);\r\n\t                \r\n\t                if (msg.value > price) msg.sender.transfer (msub (msg.value, price));\r\n\t                \r\n\t                //uint256 old = buyer [msg.sender].deals [index].tokens;\r\n\t                \r\n\t                buyer [msg.sender].deals [index].tokens = msub (buyer [msg.sender].deals [index].tokens, limit);\r\n\t                \r\n\t                supply = madd (supply, limit);\r\n\t                \r\n    \t            uint256 amount = 0;\r\n    \t            uint256 freeze = 0;\r\n    \t            \r\n    \t            (amount, freeze) = wallets.get_wallet_tokens (msg.sender);\r\n    \t            \r\n    \t            amount = madd (amount, limit);\r\n    \t            \r\n    \t            if (wallets.set_wallet_tokens (msg.sender, amount, freeze) == false) revert ();\r\n\t                \r\n\t                //emit TokensRedeemed (index, old, buyer [msg.sender].deals [index].tokens, msg.sender);\r\n\t                emit TokensRedeemed (index, limit, buyer [msg.sender].deals [index].tokens, msg.sender);\r\n\t                \r\n\t                return true;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    \r\n\t    revert ();\r\n\t}\r\n\t\r\n\tfunction purchase () public payable reentrancy returns (bool success)\r\n\t{\r\n\t    if (milestone == stage.public_sale && msg.value > 0 && limits > supply && wallets.exists (msg.sender, true) == true)\r\n\t    {\r\n\t        uint256 limit = mdiv (msg.value, public_price);\r\n\t        uint256 token = msub (limits, supply);\r\n\t        uint256 price = 0;\r\n\t        \r\n\t        if (limit > 0)\r\n\t        {\r\n\t            if (limit > token) limit = token;\r\n\t            \r\n\t            price = mmul (limit, public_price);\r\n\t            \r\n\t            if (msg.value > price) msg.sender.transfer (msub (msg.value, price));\r\n\t            \r\n\t            supply = madd (supply, limit);\r\n\t            \r\n\t            uint256 amount = 0;\r\n\t            uint256 freeze = 0;\r\n\t            \r\n\t            (amount, freeze) = wallets.get_wallet_tokens (msg.sender);\r\n\t            \r\n\t            amount = madd (amount, limit);\r\n\t            \r\n\t            if (wallets.set_wallet_tokens (msg.sender, amount, freeze) == false) revert ();\r\n\t            \r\n\t            emit TokensSold (limit, price, msg.sender);\r\n\t            \r\n\t            return true;\r\n\t        }\r\n\t    }\r\n\t    \r\n\t    revert ();\r\n\t}\r\n\t\r\n\tfunction update_description_url (string _url) public\r\n\t{\r\n\t    if (msg.sender == owner || msg.sender == author)\r\n\t    {\r\n\t        description = _url;\r\n\t        \r\n\t        emit DescriptionChanged (_url);\r\n\t    }\r\n\t}\r\n\t\r\n\tfunction activate_company (address _company) public returns (bool activated)\r\n\t{\r\n\t    if (msg.sender == owner && _company != address (0) && is_contract (_company) == true && address (company) == address (0) && milestone == stage.complete)\r\n\t    {\r\n\t        company = tribe (_company);\r\n\t\t\t\r\n\t\t\treturn run_activate_company ();\r\n\t    }\r\n\t    \r\n\t    return false;\r\n\t}\r\n\t\r\n\tfunction next_stage () public reentrancy returns (bool success)\r\n\t{\r\n\t    if (msg.sender == owner || msg.sender == author) return set_next_stage ();\r\n\t    else return false;\r\n\t}\r\n\t\r\n\tfunction run_activate_company () internal returns (bool)\r\n\t{\r\n\t\tif (address (company) != address (0) && company.activate (author, address (wallets), supply, msub (limits, supply)) == true && milestone == stage.complete)\r\n\t\t{\r\n\t\t\tif (wallets.reset_owner (address (company)) == false) revert ();\r\n\r\n\t\t\temit CompanyActivated (address (company));\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tfunction set_next_stage () internal returns (bool is_set)\r\n\t{\r\n        if (milestone == stage.private_sale)\r\n        {\r\n            redeemable == true;\r\n            milestone = stage.redemption;\r\n            \r\n            if (address (this).balance > 0) owner.transfer (address (this).balance);\r\n        }\r\n        else if (milestone == stage.redemption)\r\n        {\r\n            redeemable = false;\r\n            milestone = stage.public_sale;\r\n        }\r\n        else if (milestone == stage.public_sale)\r\n        {\r\n            redeemable = false;\r\n            milestone = stage.complete;\r\n            \r\n            if (address (this).balance > 0) address (wallets).transfer (address (this).balance);\r\n            \r\n            run_activate_company ();\r\n            \r\n            emit OptionSaleComplete ();\r\n        }\r\n        else return false;\r\n        \r\n        emit OptionStageChanged (milestone);\r\n        emit RedeemableStateChanged (redeemable);\r\n        \r\n        return true;\r\n    }\r\n\t\r\n\tstruct option_t\r\n\t{\r\n\t    uint256 id;\r\n\t    \r\n\t    uint256 count;\r\n\t    uint256 package;\r\n\t    uint256 price;\r\n\t    uint256 redemption;\r\n\t}\r\n\t\r\n\tstruct optinfo\r\n\t{\r\n\t    uint256 tokens;\r\n\t    uint256 price;\r\n\t}\r\n\t\r\n\tstruct buyer_t\r\n\t{\r\n\t    address wallet;\r\n\t    \r\n\t    optinfo [] deals;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"redemption\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issued\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"option\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"package\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"redemption\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purchase\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"company\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"next_stage\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_option_id\",\"type\":\"uint256\"}],\"name\":\"package\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"get_buyer_package_info\",\"outputs\":[{\"name\":\"remains_tokens\",\"type\":\"uint256\"},{\"name\":\"price_per_token\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"options_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"public_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyer\",\"outputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"milestone\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"update_description_url\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_company\",\"type\":\"address\"}],\"name\":\"activate_company\",\"outputs\":[{\"name\":\"activated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"OptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"PackagesCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TotalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Purchaser\",\"type\":\"address\"}],\"name\":\"PackageSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"OptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TokensCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TokensRemains\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Purchaser\",\"type\":\"address\"}],\"name\":\"TokensRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"TokensCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TokensPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Purchaser\",\"type\":\"address\"}],\"name\":\"TokensSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"CurrentStage\",\"type\":\"uint8\"}],\"name\":\"OptionStageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OptionSaleComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"DescriptionURL\",\"type\":\"string\"}],\"name\":\"DescriptionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"NewOwnerAddress\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"CompanyAddress\",\"type\":\"address\"}],\"name\":\"CompanyActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"CompanyAddress\",\"type\":\"address\"}],\"name\":\"CompanyAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"TokenName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"TokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"TokenDecimals\",\"type\":\"uint8\"}],\"name\":\"CompanyInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Allowed\",\"type\":\"bool\"}],\"name\":\"RedeemableStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"NewLimits\",\"type\":\"uint256\"}],\"name\":\"TokenSaleLimitsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"TokenPublicSalePrice\",\"type\":\"uint256\"}],\"name\":\"TokenSalePublicPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TimeoutValue\",\"type\":\"uint256\"}],\"name\":\"TokenSaleTimeoutUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"OptionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"OptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"PackagesCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"TokensPerPackage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"PackagePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"PackageRedemptionPrice\",\"type\":\"uint256\"}],\"name\":\"OptionPackageUpdated\",\"type\":\"event\"}]","ContractName":"cashbox","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4e2228a1109d9b62e5bd62e8a19ccb81696ebeacb89dd2b5d8f807583a43a27f"}]}