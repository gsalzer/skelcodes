{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n* 911ETH - Financial Ambulance\r\n*\r\n* INVEST AND GAIN UP TO 9.11% DAILY\r\n*\r\n* For detailed information go to 911eth.finance\r\n*/\r\n\r\ncontract ETH911 {\r\n\r\n    using SafeMath for uint;\r\n    //Total deposit of every participant\r\n    mapping(address => uint) public balance;\r\n    //Time since last deposit\r\n    mapping(address => uint) public time;\r\n    //Current withdrawal amount\r\n    mapping(address => uint) public percentWithdraw;\r\n    //Overall withdrawal amount\r\n    mapping(address => uint) public allPercentWithdraw;\r\n    //interest rates of participants\r\n    mapping(address => uint) public interestRate;\r\n    //bonus rates of participants\r\n    mapping(address => uint) public bonusRate;\r\n    //checks whether participant has referrer or not\r\n    mapping (address => uint) public referrers;\r\n    //minimal amount of time since payment to request withdraw\r\n    uint public stepTime = 1 hours;\r\n    //Total count of participants\r\n    uint public countOfInvestors = 0;\r\n    //Advertising address\r\n    address public advertising = 0x6bD679Be133eD01262E206768734Ba20823fCa43;\r\n    //Address for support service\r\n    address public support = 0xDDd7eC52FAdB9f3673220e88EC72D0783E2E9d0f;\r\n    //Overall project(support and ads) rate = 9.11%\r\n    uint projectPercent = 911;\r\n    //Data of DATA field\r\n    bytes msg_data;\r\n\r\n    event Invest(address investor, uint256 amount);\r\n    event Withdraw(address investor, uint256 amount);\r\n\r\n    modifier userExist() {\r\n        require(balance[msg.sender] > 0, \"Address not found\");\r\n        _;\r\n    }\r\n    \r\n    //Sending payout by request\r\n\r\n    function collectPercent() userExist internal {\r\n            uint payout = payoutAmount();\r\n            if (payout > address(this).balance) \r\n                payout = address(this).balance;\r\n            percentWithdraw[msg.sender] = percentWithdraw[msg.sender].add(payout);\r\n            allPercentWithdraw[msg.sender] = allPercentWithdraw[msg.sender].add(payout);\r\n            msg.sender.transfer(payout);\r\n            emit Withdraw(msg.sender, payout);\r\n    }\r\n    \r\n    //Setting interest rate for participant depending on overall count of participants\r\n    \r\n    function setInterestRate() private {\r\n        if (interestRate[msg.sender]<100)\r\n            if (countOfInvestors <= 100)\r\n                interestRate[msg.sender]=911;\r\n            else if (countOfInvestors > 100 && countOfInvestors <= 500)\r\n                interestRate[msg.sender]=611;\r\n            else if (countOfInvestors > 500) \r\n                interestRate[msg.sender]=311;\r\n    }\r\n    \r\n    //Setting bonus rate for participant depending on overall count of participants\r\n    \r\n    function setBonusRate() private {\r\n        if (countOfInvestors <= 100)\r\n            bonusRate[msg.sender]=31;\r\n        else if (countOfInvestors > 100 && countOfInvestors <= 500)\r\n            bonusRate[msg.sender]=61;\r\n        else if (countOfInvestors > 500 && countOfInvestors <= 1000) \r\n            bonusRate[msg.sender]=91;\r\n    }\r\n    \r\n    //Sending bonuses to referrers and referrals\r\n    \r\n    function sendRefBonuses() private{\r\n        if(msg_data.length == 20 && referrers[msg.sender] == 0) {\r\n            address referrer = bytesToAddress(msg_data);\r\n            if(referrer != msg.sender && balance[referrer]>0){\r\n                referrers[msg.sender] = 1;\r\n                uint bonus = msg.value.mul(311).div(10000);\r\n                referrer.transfer(bonus); \r\n                msg.sender.transfer(bonus);\r\n            }\r\n        }    \r\n    }\r\n    \r\n    //Transmits bytes to address\r\n    \r\n    function bytesToAddress(bytes source) internal pure returns(address) {\r\n        uint result;\r\n        uint mul = 1;\r\n        for(uint i = 20; i > 0; i--) {\r\n            result += uint8(source[i-1])*mul;\r\n            mul = mul*256;\r\n        }\r\n        return address(result);\r\n    }\r\n    \r\n    //Calculating amount of payout\r\n\r\n    function payoutAmount() public view returns(uint256) {\r\n        if ((balance[msg.sender].mul(2)) <= allPercentWithdraw[msg.sender])\r\n            interestRate[msg.sender] = 100;\r\n        uint256 percent = interestRate[msg.sender]; \r\n        uint256 different = now.sub(time[msg.sender]).div(stepTime); \r\n        if (different>264)\r\n            different=different.mul(bonusRate[msg.sender]).div(100).add(different);\r\n        uint256 rate = balance[msg.sender].mul(percent).div(10000);\r\n        uint256 withdrawalAmount = rate.mul(different).div(24).sub(percentWithdraw[msg.sender]);\r\n        return withdrawalAmount;\r\n    }\r\n    \r\n    //Deposit processing\r\n\r\n    function deposit() private {\r\n        if (msg.value > 0) {\r\n            if (balance[msg.sender] == 0){\r\n                countOfInvestors += 1;\r\n                setInterestRate();\r\n                setBonusRate();\r\n            }\r\n            if (balance[msg.sender] > 0 && now > time[msg.sender].add(stepTime)) {\r\n                collectPercent();\r\n                percentWithdraw[msg.sender] = 0;\r\n            }\r\n            balance[msg.sender] = balance[msg.sender].add(msg.value);\r\n            time[msg.sender] = now;\r\n            advertising.transfer(msg.value.mul(projectPercent).div(20000));\r\n            support.transfer(msg.value.mul(projectPercent).div(20000));\r\n            msg_data = bytes(msg.data);\r\n            sendRefBonuses();\r\n            emit Invest(msg.sender, msg.value);\r\n        } else {\r\n            collectPercent();\r\n        }\r\n    }\r\n    \r\n    //Refund by request\r\n    \r\n    function returnDeposit() userExist private {\r\n        if (balance[msg.sender] > allPercentWithdraw[msg.sender]) {\r\n            uint256 payout = balance[msg.sender].sub(allPercentWithdraw[msg.sender]);\r\n            if (payout > address(this).balance) \r\n                payout = address(this).balance;\r\n            interestRate[msg.sender] = 0;    \r\n            bonusRate[msg.sender] = 0;    \r\n            time[msg.sender] = 0;\r\n            percentWithdraw[msg.sender] = 0;\r\n            allPercentWithdraw[msg.sender] = 0;\r\n            balance[msg.sender] = 0;\r\n            referrers[msg.sender] = 0;\r\n            msg.sender.transfer(payout.mul(40).div(100));\r\n            advertising.transfer(payout.mul(25).div(100));\r\n            support.transfer(payout.mul(25).div(100));\r\n        } \r\n    }\r\n    \r\n    function() external payable {\r\n        if (msg.value == 0.000911 ether) {\r\n            returnDeposit();\r\n        } else {\r\n            deposit();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"support\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allPercentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertising\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"interestRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"ETH911","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e0bd65cec0ead6b750b2a5d8496f281621d91826d2d0526c2edad84fb8ad07ac"}]}