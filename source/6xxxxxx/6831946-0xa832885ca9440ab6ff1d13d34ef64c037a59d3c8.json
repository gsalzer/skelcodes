{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\". This adds two-phase\r\n * ownership control to OpenZeppelin's Ownable class. In this model, the original owner \r\n * designates a new owner but does not actually transfer ownership. The new owner then accepts \r\n * ownership and completes the transfer.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  address public pendingOwner;\r\n\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    pendingOwner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    pendingOwner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n\r\n\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n* @title PermissionedTokenStorage\r\n* @notice a PermissionedTokenStorage is constructed by setting Regulator, BalanceSheet, and AllowanceSheet locations.\r\n* Once the storages are set, they cannot be changed.\r\n*/\r\ncontract PermissionedTokenStorage is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n        Storage\r\n    */\r\n    mapping (address => mapping (address => uint256)) public allowances;\r\n    mapping (address => uint256) public balances;\r\n    uint256 public totalSupply;\r\n\r\n    function addAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowances[_tokenHolder][_spender] = allowances[_tokenHolder][_spender].add(_value);\r\n    }\r\n\r\n    function subAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowances[_tokenHolder][_spender] = allowances[_tokenHolder][_spender].sub(_value);\r\n    }\r\n\r\n    function setAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {\r\n        allowances[_tokenHolder][_spender] = _value;\r\n    }\r\n\r\n    function addBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balances[_addr] = balances[_addr].add(_value);\r\n    }\r\n\r\n    function subBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balances[_addr] = balances[_addr].sub(_value);\r\n    }\r\n\r\n    function setBalance(address _addr, uint256 _value) public onlyOwner {\r\n        balances[_addr] = _value;\r\n    }\r\n\r\n    function addTotalSupply(uint256 _value) public onlyOwner {\r\n        totalSupply = totalSupply.add(_value);\r\n    }\r\n\r\n    function subTotalSupply(uint256 _value) public onlyOwner {\r\n        totalSupply = totalSupply.sub(_value);\r\n    }\r\n\r\n    function setTotalSupply(uint256 _value) public onlyOwner {\r\n        totalSupply = _value;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n* @title Lockable\r\n* @dev Base contract which allows children to lock certain methods from being called by clients.\r\n* Locked methods are deemed unsafe by default, but must be implemented in children functionality to adhere by\r\n* some inherited standard, for example. \r\n*/\r\n\r\ncontract Lockable is Ownable {\r\n\r\n\t// Events\r\n\tevent Unlocked();\r\n\tevent Locked();\r\n\r\n\t// Fields\r\n\tbool public isMethodEnabled = false;\r\n\r\n\t// Modifiers\r\n\t/**\r\n\t* @dev Modifier that disables functions by default unless they are explicitly enabled\r\n\t*/\r\n\tmodifier whenUnlocked() {\r\n\t\trequire(isMethodEnabled);\r\n\t\t_;\r\n\t}\r\n\r\n\t// Methods\r\n\t/**\r\n\t* @dev called by the owner to enable method\r\n\t*/\r\n\tfunction unlock() onlyOwner public {\r\n\t\tisMethodEnabled = true;\r\n\t\temit Unlocked();\r\n\t}\r\n\r\n\t/**\r\n\t* @dev called by the owner to disable method, back to normal state\r\n\t*/\r\n\tfunction lock() onlyOwner public {\r\n\t\tisMethodEnabled = false;\r\n\t\temit Locked();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism. Identical to OpenZeppelin version\r\n * except that it uses local Ownable contract\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n*\r\n* @dev Stores permissions and validators and provides setter and getter methods. \r\n* Permissions determine which methods users have access to call. Validators\r\n* are able to mutate permissions at the Regulator level.\r\n*\r\n*/\r\ncontract RegulatorStorage is Ownable {\r\n    \r\n    /** \r\n        Structs \r\n    */\r\n\r\n    /* Contains metadata about a permission to execute a particular method signature. */\r\n    struct Permission {\r\n        string name; // A one-word description for the permission. e.g. \"canMint\"\r\n        string description; // A longer description for the permission. e.g. \"Allows user to mint tokens.\"\r\n        string contract_name; // e.g. \"PermissionedToken\"\r\n        bool active; // Permissions can be turned on or off by regulator\r\n    }\r\n\r\n    /** \r\n        Constants: stores method signatures. These are potential permissions that a user can have, \r\n        and each permission gives the user the ability to call the associated PermissionedToken method signature\r\n    */\r\n    bytes4 public constant MINT_SIG = bytes4(keccak256(\"mint(address,uint256)\"));\r\n    bytes4 public constant MINT_CUSD_SIG = bytes4(keccak256(\"mintCUSD(address,uint256)\"));\r\n    bytes4 public constant DESTROY_BLACKLISTED_TOKENS_SIG = bytes4(keccak256(\"destroyBlacklistedTokens(address,uint256)\"));\r\n    bytes4 public constant APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG = bytes4(keccak256(\"approveBlacklistedAddressSpender(address)\"));\r\n    bytes4 public constant BLACKLISTED_SIG = bytes4(keccak256(\"blacklisted()\"));\r\n\r\n    /** \r\n        Mappings \r\n    */\r\n\r\n    /* each method signature maps to a Permission */\r\n    mapping (bytes4 => Permission) public permissions;\r\n    /* list of validators, either active or inactive */\r\n    mapping (address => bool) public validators;\r\n    /* each user can be given access to a given method signature */\r\n    mapping (address => mapping (bytes4 => bool)) public userPermissions;\r\n\r\n    /** \r\n        Events \r\n    */\r\n    event PermissionAdded(bytes4 methodsignature);\r\n    event PermissionRemoved(bytes4 methodsignature);\r\n    event ValidatorAdded(address indexed validator);\r\n    event ValidatorRemoved(address indexed validator);\r\n\r\n    /** \r\n        Modifiers \r\n    */\r\n    /**\r\n    * @notice Throws if called by any account that does not have access to set attributes\r\n    */\r\n    modifier onlyValidator() {\r\n        require (isValidator(msg.sender), \"Sender must be validator\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice Sets a permission within the list of permissions.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    * @param _permissionName A \"slug\" name for this permission (e.g. \"canMint\").\r\n    * @param _permissionDescription A lengthier description for this permission (e.g. \"Allows user to mint tokens\").\r\n    * @param _contractName Name of the contract that the method belongs to.\r\n    */\r\n    function addPermission(\r\n        bytes4 _methodsignature, \r\n        string _permissionName, \r\n        string _permissionDescription, \r\n        string _contractName) public onlyValidator { \r\n        Permission memory p = Permission(_permissionName, _permissionDescription, _contractName, true);\r\n        permissions[_methodsignature] = p;\r\n        emit PermissionAdded(_methodsignature);\r\n    }\r\n\r\n    /**\r\n    * @notice Removes a permission the list of permissions.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    */\r\n    function removePermission(bytes4 _methodsignature) public onlyValidator {\r\n        permissions[_methodsignature].active = false;\r\n        emit PermissionRemoved(_methodsignature);\r\n    }\r\n    \r\n    /**\r\n    * @notice Sets a permission in the list of permissions that a user has.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    */\r\n    function setUserPermission(address _who, bytes4 _methodsignature) public onlyValidator {\r\n        require(permissions[_methodsignature].active, \"Permission being set must be for a valid method signature\");\r\n        userPermissions[_who][_methodsignature] = true;\r\n    }\r\n\r\n    /**\r\n    * @notice Removes a permission from the list of permissions that a user has.\r\n    * @param _methodsignature Signature of the method that this permission controls.\r\n    */\r\n    function removeUserPermission(address _who, bytes4 _methodsignature) public onlyValidator {\r\n        require(permissions[_methodsignature].active, \"Permission being removed must be for a valid method signature\");\r\n        userPermissions[_who][_methodsignature] = false;\r\n    }\r\n\r\n    /**\r\n    * @notice add a Validator\r\n    * @param _validator Address of validator to add\r\n    */\r\n    function addValidator(address _validator) public onlyOwner {\r\n        validators[_validator] = true;\r\n        emit ValidatorAdded(_validator);\r\n    }\r\n\r\n    /**\r\n    * @notice remove a Validator\r\n    * @param _validator Address of validator to remove\r\n    */\r\n    function removeValidator(address _validator) public onlyOwner {\r\n        validators[_validator] = false;\r\n        emit ValidatorRemoved(_validator);\r\n    }\r\n\r\n    /**\r\n    * @notice does validator exist?\r\n    * @return true if yes, false if no\r\n    **/\r\n    function isValidator(address _validator) public view returns (bool) {\r\n        return validators[_validator];\r\n    }\r\n\r\n    /**\r\n    * @notice does permission exist?\r\n    * @return true if yes, false if no\r\n    **/\r\n    function isPermission(bytes4 _methodsignature) public view returns (bool) {\r\n        return permissions[_methodsignature].active;\r\n    }\r\n\r\n    /**\r\n    * @notice get Permission structure\r\n    * @param _methodsignature request to retrieve the Permission struct for this methodsignature\r\n    * @return Permission\r\n    **/\r\n    function getPermission(bytes4 _methodsignature) public view returns \r\n        (string name, \r\n         string description, \r\n         string contract_name,\r\n         bool active) {\r\n        return (permissions[_methodsignature].name,\r\n                permissions[_methodsignature].description,\r\n                permissions[_methodsignature].contract_name,\r\n                permissions[_methodsignature].active);\r\n    }\r\n\r\n    /**\r\n    * @notice does permission exist?\r\n    * @return true if yes, false if no\r\n    **/\r\n    function hasUserPermission(address _who, bytes4 _methodsignature) public view returns (bool) {\r\n        return userPermissions[_who][_methodsignature];\r\n    }\r\n}\r\n\r\n/**\r\n * @title Regulator\r\n * @dev Regulator can be configured to meet relevant securities regulations, KYC policies\r\n * AML requirements, tax laws, and more. The Regulator ensures that the PermissionedToken\r\n * makes compliant transfers possible. Contains the userPermissions necessary\r\n * for regulatory compliance.\r\n *\r\n */\r\ncontract Regulator is RegulatorStorage {\r\n    \r\n    /** \r\n        Modifiers \r\n    */\r\n    /**\r\n    * @notice Throws if called by any account that does not have access to set attributes\r\n    */\r\n    modifier onlyValidator() {\r\n        require (isValidator(msg.sender), \"Sender must be validator\");\r\n        _;\r\n    }\r\n\r\n    /** \r\n        Events \r\n    */\r\n    event LogBlacklistedUser(address indexed who);\r\n    event LogRemovedBlacklistedUser(address indexed who);\r\n    event LogSetMinter(address indexed who);\r\n    event LogRemovedMinter(address indexed who);\r\n    event LogSetBlacklistDestroyer(address indexed who);\r\n    event LogRemovedBlacklistDestroyer(address indexed who);\r\n    event LogSetBlacklistSpender(address indexed who);\r\n    event LogRemovedBlacklistSpender(address indexed who);\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a user to mint tokens.\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setMinter(address _who) public onlyValidator {\r\n        _setMinter(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Removes the necessary permissions for a user to mint tokens.\r\n    * @param _who The address of the account that we are removing permissions for.\r\n    */\r\n    function removeMinter(address _who) public onlyValidator {\r\n        _removeMinter(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a user to spend tokens from a blacklisted account.\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setBlacklistSpender(address _who) public onlyValidator {\r\n        require(isPermission(APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG), \"Blacklist spending not supported by token\");\r\n        setUserPermission(_who, APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG);\r\n        emit LogSetBlacklistSpender(_who);\r\n    }\r\n    \r\n    /**\r\n    * @notice Removes the necessary permissions for a user to spend tokens from a blacklisted account.\r\n    * @param _who The address of the account that we are removing permissions for.\r\n    */\r\n    function removeBlacklistSpender(address _who) public onlyValidator {\r\n        require(isPermission(APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG), \"Blacklist spending not supported by token\");\r\n        removeUserPermission(_who, APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG);\r\n        emit LogRemovedBlacklistSpender(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a user to destroy tokens from a blacklisted account.\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setBlacklistDestroyer(address _who) public onlyValidator {\r\n        require(isPermission(DESTROY_BLACKLISTED_TOKENS_SIG), \"Blacklist token destruction not supported by token\");\r\n        setUserPermission(_who, DESTROY_BLACKLISTED_TOKENS_SIG);\r\n        emit LogSetBlacklistDestroyer(_who);\r\n    }\r\n    \r\n\r\n    /**\r\n    * @notice Removes the necessary permissions for a user to destroy tokens from a blacklisted account.\r\n    * @param _who The address of the account that we are removing permissions for.\r\n    */\r\n    function removeBlacklistDestroyer(address _who) public onlyValidator {\r\n        require(isPermission(DESTROY_BLACKLISTED_TOKENS_SIG), \"Blacklist token destruction not supported by token\");\r\n        removeUserPermission(_who, DESTROY_BLACKLISTED_TOKENS_SIG);\r\n        emit LogRemovedBlacklistDestroyer(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Sets the necessary permissions for a \"blacklisted\" user. A blacklisted user has their accounts\r\n    * frozen; they cannot transfer, burn, or withdraw any tokens.\r\n    * @param _who The address of the account that we are setting permissions for.\r\n    */\r\n    function setBlacklistedUser(address _who) public onlyValidator {\r\n        _setBlacklistedUser(_who);\r\n    }\r\n\r\n    /**\r\n    * @notice Removes the necessary permissions for a \"blacklisted\" user. A blacklisted user has their accounts\r\n    * frozen; they cannot transfer, burn, or withdraw any tokens.\r\n    * @param _who The address of the account that we are changing permissions for.\r\n    */\r\n    function removeBlacklistedUser(address _who) public onlyValidator {\r\n        _removeBlacklistedUser(_who);\r\n    }\r\n\r\n    /** Returns whether or not a user is blacklisted.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is blacklisted, `false` otherwise.\r\n     */\r\n    function isBlacklistedUser(address _who) public view returns (bool) {\r\n        return (hasUserPermission(_who, BLACKLISTED_SIG));\r\n    }\r\n\r\n\r\n    /** Returns whether or not a user is a blacklist spender.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is a blacklist spender, `false` otherwise.\r\n     */\r\n    function isBlacklistSpender(address _who) public view returns (bool) {\r\n        return hasUserPermission(_who, APPROVE_BLACKLISTED_ADDRESS_SPENDER_SIG);\r\n    }\r\n\r\n    /** Returns whether or not a user is a blacklist destroyer.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is a blacklist destroyer, `false` otherwise.\r\n     */\r\n    function isBlacklistDestroyer(address _who) public view returns (bool) {\r\n        return hasUserPermission(_who, DESTROY_BLACKLISTED_TOKENS_SIG);\r\n    }\r\n\r\n    /** Returns whether or not a user is a minter.\r\n     * @param _who The address of the account in question.\r\n     * @return `true` if the user is a minter, `false` otherwise.\r\n     */\r\n    function isMinter(address _who) public view returns (bool) {\r\n        return (hasUserPermission(_who, MINT_SIG) && hasUserPermission(_who, MINT_CUSD_SIG));\r\n    }\r\n\r\n    /** Internal Functions **/\r\n\r\n    function _setMinter(address _who) internal {\r\n        require(isPermission(MINT_SIG), \"Minting not supported by token\");\r\n        require(isPermission(MINT_CUSD_SIG), \"Minting to CUSD not supported by token\");\r\n        setUserPermission(_who, MINT_SIG);\r\n        setUserPermission(_who, MINT_CUSD_SIG);\r\n        emit LogSetMinter(_who);\r\n    }\r\n\r\n    function _removeMinter(address _who) internal {\r\n        require(isPermission(MINT_SIG), \"Minting not supported by token\");\r\n        require(isPermission(MINT_CUSD_SIG), \"Minting to CUSD not supported by token\");\r\n        removeUserPermission(_who, MINT_CUSD_SIG);\r\n        removeUserPermission(_who, MINT_SIG);\r\n        emit LogRemovedMinter(_who);\r\n    }\r\n\r\n    function _setBlacklistedUser(address _who) internal {\r\n        require(isPermission(BLACKLISTED_SIG), \"Self-destruct method not supported by token\");\r\n        setUserPermission(_who, BLACKLISTED_SIG);\r\n        emit LogBlacklistedUser(_who);\r\n    }\r\n\r\n    function _removeBlacklistedUser(address _who) internal {\r\n        require(isPermission(BLACKLISTED_SIG), \"Self-destruct method not supported by token\");\r\n        removeUserPermission(_who, BLACKLISTED_SIG);\r\n        emit LogRemovedBlacklistedUser(_who);\r\n    }\r\n}\r\n\r\n/**\r\n* @title PermissionedToken\r\n* @notice A permissioned token that enables transfers, withdrawals, and deposits to occur \r\n* if and only if it is approved by an on-chain Regulator service. PermissionedToken is an\r\n* ERC-20 smart contract representing ownership of securities and overrides the\r\n* transfer, burn, and mint methods to check with the Regulator.\r\n*/\r\ncontract PermissionedToken is ERC20, Pausable, Lockable {\r\n    using SafeMath for uint256;\r\n\r\n    /** Events */\r\n    event DestroyedBlacklistedTokens(address indexed account, uint256 amount);\r\n    event ApprovedBlacklistedAddressSpender(address indexed owner, address indexed spender, uint256 value);\r\n    event Mint(address indexed to, uint256 value);\r\n    event Burn(address indexed burner, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event ChangedRegulator(address indexed oldRegulator, address indexed newRegulator );\r\n\r\n    PermissionedTokenStorage public tokenStorage;\r\n    Regulator public regulator;\r\n\r\n    /**\r\n    * @dev create a new PermissionedToken with a brand new data storage\r\n    **/\r\n    constructor (address _regulator) public {\r\n        regulator = Regulator(_regulator);\r\n        tokenStorage = new PermissionedTokenStorage();\r\n    }\r\n\r\n    /** Modifiers **/\r\n\r\n    /** @notice Modifier that allows function access to be restricted based on\r\n    * whether the regulator allows the message sender to execute that function.\r\n    **/\r\n    modifier requiresPermission() {\r\n        require (regulator.hasUserPermission(msg.sender, msg.sig), \"User does not have permission to execute function\");\r\n        _;\r\n    }\r\n\r\n    /** @notice Modifier that checks whether or not a transferFrom operation can\r\n    * succeed with the given _from and _to address. See transferFrom()'s documentation for\r\n    * more details.\r\n    **/\r\n    modifier transferFromConditionsRequired(address _from, address _to) {\r\n        require(!regulator.isBlacklistedUser(_to), \"Recipient cannot be blacklisted\");\r\n        \r\n        // If the origin user is blacklisted, the transaction can only succeed if \r\n        // the message sender is a user that has been approved to transfer \r\n        // blacklisted tokens out of this address.\r\n        bool is_origin_blacklisted = regulator.isBlacklistedUser(_from);\r\n\r\n        // Is the message sender a person with the ability to transfer tokens out of a blacklisted account?\r\n        bool sender_can_spend_from_blacklisted_address = regulator.isBlacklistSpender(msg.sender);\r\n        require(!is_origin_blacklisted || sender_can_spend_from_blacklisted_address, \"Origin cannot be blacklisted if spender is not an approved blacklist spender\");\r\n        _;\r\n    }\r\n\r\n    /** @notice Modifier that checks whether a user is blacklisted.\r\n     * @param _user The address of the user to check.\r\n    **/\r\n    modifier userBlacklisted(address _user) {\r\n        require(regulator.isBlacklistedUser(_user), \"User must be blacklisted\");\r\n        _;\r\n    }\r\n\r\n    /** @notice Modifier that checks whether a user is not blacklisted.\r\n     * @param _user The address of the user to check.\r\n    **/\r\n    modifier userNotBlacklisted(address _user) {\r\n        require(!regulator.isBlacklistedUser(_user), \"User must not be blacklisted\");\r\n        _;\r\n    }\r\n\r\n    /** Functions **/\r\n\r\n    /**\r\n    * @notice Allows user to mint if they have the appropriate permissions. User generally\r\n    * must have minting authority.\r\n    * @dev Should be access-restricted with the 'requiresPermission' modifier when implementing.\r\n    * @param _to The address of the receiver\r\n    * @param _amount The number of tokens to mint\r\n    */\r\n    function mint(address _to, uint256 _amount) public userNotBlacklisted(_to) requiresPermission whenNotPaused {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Remove CUSD from supply\r\n    * @param _amount The number of tokens to burn\r\n    * @return `true` if successful and `false` if unsuccessful\r\n    */\r\n    function burn(uint256 _amount) userNotBlacklisted(msg.sender) public whenNotPaused {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Implements ERC-20 standard approve function. Locked or disabled by default to protect against\r\n    * double spend attacks. To modify allowances, clients should call safer increase/decreaseApproval methods.\r\n    * Upon construction, all calls to approve() will revert unless this contract owner explicitly unlocks approve()\r\n    */\r\n    function approve(address _spender, uint256 _value) \r\n    public userNotBlacklisted(_spender) userNotBlacklisted(msg.sender) whenNotPaused whenUnlocked returns (bool) {\r\n        tokenStorage.setAllowance(msg.sender, _spender, _value);\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * @notice increaseApproval should be used instead of approve when the user's allowance\r\n     * is greater than 0. Using increaseApproval protects against potential double-spend attacks\r\n     * by moving the check of whether the user has spent their allowance to the time that the transaction \r\n     * is mined, removing the user's ability to double-spend\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint256 _addedValue) \r\n    public userNotBlacklisted(_spender) userNotBlacklisted(msg.sender) whenNotPaused returns (bool) {\r\n        _increaseApproval(_spender, _addedValue, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * @notice decreaseApproval should be used instead of approve when the user's allowance\r\n     * is greater than 0. Using decreaseApproval protects against potential double-spend attacks\r\n     * by moving the check of whether the user has spent their allowance to the time that the transaction \r\n     * is mined, removing the user's ability to double-spend\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) \r\n    public userNotBlacklisted(_spender) userNotBlacklisted(msg.sender) whenNotPaused returns (bool) {\r\n        _decreaseApproval(_spender, _subtractedValue, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Destroy the tokens owned by a blacklisted account. This function can generally\r\n    * only be called by a central authority.\r\n    * @dev Should be access-restricted with the 'requiresPermission' modifier when implementing.\r\n    * @param _who Account to destroy tokens from. Must be a blacklisted account.\r\n    */\r\n    function destroyBlacklistedTokens(address _who, uint256 _amount) public userBlacklisted(_who) whenNotPaused requiresPermission {\r\n        tokenStorage.subBalance(_who, _amount);\r\n        tokenStorage.subTotalSupply(_amount);\r\n        emit DestroyedBlacklistedTokens(_who, _amount);\r\n    }\r\n    /**\r\n    * @notice Allows a central authority to approve themselves as a spender on a blacklisted account.\r\n    * By default, the allowance is set to the balance of the blacklisted account, so that the\r\n    * authority has full control over the account balance.\r\n    * @dev Should be access-restricted with the 'requiresPermission' modifier when implementing.\r\n    * @param _blacklistedAccount The blacklisted account.\r\n    */\r\n    function approveBlacklistedAddressSpender(address _blacklistedAccount) \r\n    public userBlacklisted(_blacklistedAccount) whenNotPaused requiresPermission {\r\n        tokenStorage.setAllowance(_blacklistedAccount, msg.sender, balanceOf(_blacklistedAccount));\r\n        emit ApprovedBlacklistedAddressSpender(_blacklistedAccount, msg.sender, balanceOf(_blacklistedAccount));\r\n    }\r\n\r\n    /**\r\n    * @notice Initiates a \"send\" operation towards another user. See `transferFrom` for details.\r\n    * @param _to The address of the receiver. This user must not be blacklisted, or else the tranfer\r\n    * will fail.\r\n    * @param _amount The number of tokens to transfer\r\n    *\r\n    * @return `true` if successful \r\n    */\r\n    function transfer(address _to, uint256 _amount) public userNotBlacklisted(_to) userNotBlacklisted(msg.sender) whenNotPaused returns (bool) {\r\n        _transfer(_to, msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Initiates a transfer operation between address `_from` and `_to`. Requires that the\r\n    * message sender is an approved spender on the _from account.\r\n    * @dev When implemented, it should use the transferFromConditionsRequired() modifier.\r\n    * @param _to The address of the recipient. This address must not be blacklisted.\r\n    * @param _from The address of the origin of funds. This address _could_ be blacklisted, because\r\n    * a regulator may want to transfer tokens out of a blacklisted account, for example.\r\n    * In order to do so, the regulator would have to add themselves as an approved spender\r\n    * on the account via `addBlacklistAddressSpender()`, and would then be able to transfer tokens out of it.\r\n    * @param _amount The number of tokens to transfer\r\n    * @return `true` if successful \r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _amount) \r\n    public whenNotPaused transferFromConditionsRequired(_from, _to) returns (bool) {\r\n        require(_amount <= allowance(_from, msg.sender),\"not enough allowance to transfer\");\r\n        _transfer(_to, _from, _amount);\r\n        tokenStorage.subAllowance(_from, msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    *\r\n    * @dev Only the token owner can change its regulator\r\n    * @param _newRegulator the new Regulator for this token\r\n    *\r\n    */\r\n    function setRegulator(address _newRegulator) public onlyOwner {\r\n        require(_newRegulator != address(regulator), \"Must be a new regulator\");\r\n        require(AddressUtils.isContract(_newRegulator), \"Cannot set a regulator storage to a non-contract address\");\r\n        address old = address(regulator);\r\n        regulator = Regulator(_newRegulator);\r\n        emit ChangedRegulator(old, _newRegulator);\r\n    }\r\n\r\n    /**\r\n    * @notice If a user is blacklisted, they will have the permission to \r\n    * execute this dummy function. This function effectively acts as a marker \r\n    * to indicate that a user is blacklisted. We include this function to be consistent with our\r\n    * invariant that every possible userPermission (listed in Regulator) enables access to a single \r\n    * PermissionedToken function. Thus, the 'BLACKLISTED' permission gives access to this function\r\n    * @return `true` if successful\r\n    */\r\n    function blacklisted() public view requiresPermission returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * ERC20 standard functions\r\n    */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return tokenStorage.allowances(owner, spender);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokenStorage.totalSupply();\r\n    }\r\n\r\n    function balanceOf(address _addr) public view returns (uint256) {\r\n        return tokenStorage.balances(_addr);\r\n    }\r\n\r\n\r\n    /** Internal functions **/\r\n    \r\n    function _decreaseApproval(address _spender, uint256 _subtractedValue, address _tokenHolder) internal {\r\n        uint256 oldValue = allowance(_tokenHolder, _spender);\r\n        if (_subtractedValue > oldValue) {\r\n            tokenStorage.setAllowance(_tokenHolder, _spender, 0);\r\n        } else {\r\n            tokenStorage.subAllowance(_tokenHolder, _spender, _subtractedValue);\r\n        }\r\n        emit Approval(_tokenHolder, _spender, allowance(_tokenHolder, _spender));\r\n    }\r\n\r\n    function _increaseApproval(address _spender, uint256 _addedValue, address _tokenHolder) internal {\r\n        tokenStorage.addAllowance(_tokenHolder, _spender, _addedValue);\r\n        emit Approval(_tokenHolder, _spender, allowance(_tokenHolder, _spender));\r\n    }\r\n\r\n    function _burn(address _tokensOf, uint256 _amount) internal {\r\n        require(_tokensOf != address(0),\"burner address cannot be 0x0\");\r\n        require(_amount <= balanceOf(_tokensOf),\"not enough balance to burn\");\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n        tokenStorage.subBalance(_tokensOf, _amount);\r\n        tokenStorage.subTotalSupply(_amount);\r\n        emit Burn(_tokensOf, _amount);\r\n        emit Transfer(_tokensOf, address(0), _amount);\r\n    }\r\n\r\n    function _mint(address _to, uint256 _amount) internal {\r\n        require(_to != address(0),\"to address cannot be 0x0\");\r\n        tokenStorage.addTotalSupply(_amount);\r\n        tokenStorage.addBalance(_to, _amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n    }\r\n\r\n    function _transfer(address _to, address _from, uint256 _amount) internal {\r\n        require(_to != address(0),\"to address cannot be 0x0\");\r\n        require(_amount <= balanceOf(_from),\"not enough balance to transfer\");\r\n\r\n        tokenStorage.addBalance(_to, _amount);\r\n        tokenStorage.subBalance(_from, _amount);\r\n        emit Transfer(_from, _to, _amount);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n* @title CarbonDollarStorage\r\n* @notice Contains necessary storage contracts for CarbonDollar (FeeSheet and StablecoinWhitelist).\r\n*/\r\ncontract CarbonDollarStorage is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /** \r\n        Mappings\r\n    */\r\n    /* fees for withdrawing to stablecoin, in tenths of a percent) */\r\n    mapping (address => uint256) public fees;\r\n    /** @dev Units for fees are always in a tenth of a percent */\r\n    uint256 public defaultFee;\r\n    /* is the token address referring to a stablecoin/whitelisted token? */\r\n    mapping (address => bool) public whitelist;\r\n\r\n\r\n    /** \r\n        Events\r\n    */\r\n    event DefaultFeeChanged(uint256 oldFee, uint256 newFee);\r\n    event FeeChanged(address indexed stablecoin, uint256 oldFee, uint256 newFee);\r\n    event FeeRemoved(address indexed stablecoin, uint256 oldFee);\r\n    event StablecoinAdded(address indexed stablecoin);\r\n    event StablecoinRemoved(address indexed stablecoin);\r\n\r\n    /** @notice Sets the default fee for burning CarbonDollar into a whitelisted stablecoin.\r\n        @param _fee The default fee.\r\n    */\r\n    function setDefaultFee(uint256 _fee) public onlyOwner {\r\n        uint256 oldFee = defaultFee;\r\n        defaultFee = _fee;\r\n        if (oldFee != defaultFee)\r\n            emit DefaultFeeChanged(oldFee, _fee);\r\n    }\r\n    \r\n    /** @notice Set a fee for burning CarbonDollar into a stablecoin.\r\n        @param _stablecoin Address of a whitelisted stablecoin.\r\n        @param _fee the fee.\r\n    */\r\n    function setFee(address _stablecoin, uint256 _fee) public onlyOwner {\r\n        uint256 oldFee = fees[_stablecoin];\r\n        fees[_stablecoin] = _fee;\r\n        if (oldFee != _fee)\r\n            emit FeeChanged(_stablecoin, oldFee, _fee);\r\n    }\r\n\r\n    /** @notice Remove the fee for burning CarbonDollar into a particular kind of stablecoin.\r\n        @param _stablecoin Address of stablecoin.\r\n    */\r\n    function removeFee(address _stablecoin) public onlyOwner {\r\n        uint256 oldFee = fees[_stablecoin];\r\n        fees[_stablecoin] = 0;\r\n        if (oldFee != 0)\r\n            emit FeeRemoved(_stablecoin, oldFee);\r\n    }\r\n\r\n    /** @notice Add a token to the whitelist.\r\n        @param _stablecoin Address of the new stablecoin.\r\n    */\r\n    function addStablecoin(address _stablecoin) public onlyOwner {\r\n        whitelist[_stablecoin] = true;\r\n        emit StablecoinAdded(_stablecoin);\r\n    }\r\n\r\n    /** @notice Removes a token from the whitelist.\r\n        @param _stablecoin Address of the ex-stablecoin.\r\n    */\r\n    function removeStablecoin(address _stablecoin) public onlyOwner {\r\n        whitelist[_stablecoin] = false;\r\n        emit StablecoinRemoved(_stablecoin);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Compute the fee that will be charged on a \"burn\" operation.\r\n     * @param _amount The amount that will be traded.\r\n     * @param _stablecoin The stablecoin whose fee will be used.\r\n     */\r\n    function computeStablecoinFee(uint256 _amount, address _stablecoin) public view returns (uint256) {\r\n        uint256 fee = fees[_stablecoin];\r\n        return computeFee(_amount, fee);\r\n    }\r\n\r\n    /**\r\n     * @notice Compute the fee that will be charged on a \"burn\" operation.\r\n     * @param _amount The amount that will be traded.\r\n     * @param _fee The fee that will be charged, in tenths of a percent.\r\n     */\r\n    function computeFee(uint256 _amount, uint256 _fee) public pure returns (uint256) {\r\n        return _amount.mul(_fee).div(1000);\r\n    }\r\n}\r\n\r\n/**\r\n* @title CarbonDollar\r\n* @notice The main functionality for the CarbonUSD metatoken. (CarbonUSD is just a proxy\r\n* that implements this contract's functionality.) This is a permissioned token, so users have to be \r\n* whitelisted before they can do any mint/burn/convert operation. Every CarbonDollar token is backed by one\r\n* whitelisted stablecoin credited to the balance of this contract address.\r\n*/\r\ncontract CarbonDollar is PermissionedToken {\r\n    \r\n    // Events\r\n\r\n    event ConvertedToWT(address indexed user, uint256 amount);\r\n    event BurnedCUSD(address indexed user, uint256 feedAmount, uint256 chargedFee);\r\n    \r\n    /**\r\n        Modifiers\r\n    */\r\n    modifier requiresWhitelistedToken() {\r\n        require(isWhitelisted(msg.sender), \"Sender must be a whitelisted token contract\");\r\n        _;\r\n    }\r\n\r\n    CarbonDollarStorage public tokenStorage_CD;\r\n\r\n    /** CONSTRUCTOR\r\n    * @dev Passes along arguments to base class.\r\n    */\r\n    constructor(address _regulator) public PermissionedToken(_regulator) {\r\n\r\n        // base class override\r\n        regulator = Regulator(_regulator);\r\n\r\n        tokenStorage_CD = new CarbonDollarStorage();\r\n    }\r\n\r\n    /**\r\n     * @notice Add new stablecoin to whitelist.\r\n     * @param _stablecoin Address of stablecoin contract.\r\n     */\r\n    function listToken(address _stablecoin) public onlyOwner whenNotPaused {\r\n        tokenStorage_CD.addStablecoin(_stablecoin); \r\n    }\r\n\r\n    /**\r\n     * @notice Remove existing stablecoin from whitelist.\r\n     * @param _stablecoin Address of stablecoin contract.\r\n     */\r\n    function unlistToken(address _stablecoin) public onlyOwner whenNotPaused {\r\n        tokenStorage_CD.removeStablecoin(_stablecoin);\r\n    }\r\n\r\n    /**\r\n     * @notice Change fees associated with going from CarbonUSD to a particular stablecoin.\r\n     * @param stablecoin Address of the stablecoin contract.\r\n     * @param _newFee The new fee rate to set, in tenths of a percent. \r\n     */\r\n    function setFee(address stablecoin, uint256 _newFee) public onlyOwner whenNotPaused {\r\n        require(isWhitelisted(stablecoin), \"Stablecoin must be whitelisted prior to setting conversion fee\");\r\n        tokenStorage_CD.setFee(stablecoin, _newFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove fees associated with going from CarbonUSD to a particular stablecoin.\r\n     * The default fee still may apply.\r\n     * @param stablecoin Address of the stablecoin contract.\r\n     */\r\n    function removeFee(address stablecoin) public onlyOwner whenNotPaused {\r\n        require(isWhitelisted(stablecoin), \"Stablecoin must be whitelisted prior to setting conversion fee\");\r\n       tokenStorage_CD.removeFee(stablecoin);\r\n    }\r\n\r\n    /**\r\n     * @notice Change the default fee associated with going from CarbonUSD to a WhitelistedToken.\r\n     * This fee amount is used if the fee for a WhitelistedToken is not specified.\r\n     * @param _newFee The new fee rate to set, in tenths of a percent.\r\n     */\r\n    function setDefaultFee(uint256 _newFee) public onlyOwner whenNotPaused {\r\n        tokenStorage_CD.setDefaultFee(_newFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Mints CUSD on behalf of a user. Note the use of the \"requiresWhitelistedToken\"\r\n     * modifier; this means that minting authority does not belong to any personal account; \r\n     * only whitelisted token contracts can call this function. The intended functionality is that the only\r\n     * way to mint CUSD is for the user to actually burn a whitelisted token to convert into CUSD\r\n     * @param _to User to send CUSD to\r\n     * @param _amount Amount of CarbonUSD to mint.\r\n     */\r\n    function mint(address _to, uint256 _amount) public requiresWhitelistedToken whenNotPaused {\r\n        _mint(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice user can convert CarbonUSD umbrella token into a whitelisted stablecoin. \r\n     * @param stablecoin represents the type of coin the users wishes to receive for burning carbonUSD\r\n     * @param _amount Amount of CarbonUSD to convert.\r\n     * we credit the user's account at the sender address with the _amount minus the percentage fee we want to charge.\r\n     */\r\n    function convertCarbonDollar(address stablecoin, uint256 _amount) public userNotBlacklisted(msg.sender) whenNotPaused  {\r\n        require(isWhitelisted(stablecoin), \"Stablecoin must be whitelisted prior to setting conversion fee\");\r\n        WhitelistedToken whitelisted = WhitelistedToken(stablecoin);\r\n        require(whitelisted.balanceOf(address(this)) >= _amount, \"Carbon escrow account in WT0 doesn't have enough tokens for burning\");\r\n \r\n        // Send back WT0 to calling user, but with a fee reduction.\r\n        // Transfer this fee into the whitelisted token's CarbonDollar account (this contract's address)\r\n        uint256 chargedFee = tokenStorage_CD.computeFee(_amount, computeFeeRate(stablecoin));\r\n        uint256 feedAmount = _amount.sub(chargedFee);\r\n        _burn(msg.sender, _amount);\r\n        require(whitelisted.transfer(msg.sender, feedAmount));\r\n        whitelisted.burn(chargedFee);\r\n        _mint(address(this), chargedFee);\r\n        emit ConvertedToWT(msg.sender, _amount);\r\n    }\r\n\r\n     /**\r\n     * @notice burns CarbonDollar and an equal amount of whitelisted stablecoin from the CarbonDollar address\r\n     * @param stablecoin Represents the stablecoin whose fee will be charged.\r\n     * @param _amount Amount of CarbonUSD to burn.\r\n     */\r\n    function burnCarbonDollar(address stablecoin, uint256 _amount) public userNotBlacklisted(msg.sender) whenNotPaused {\r\n        _burnCarbonDollar(msg.sender, stablecoin, _amount);\r\n    }\r\n\r\n    /** \r\n    * @notice release collected CUSD fees to owner \r\n    * @param _amount Amount of CUSD to release\r\n    * @return `true` if successful \r\n    */\r\n    function releaseCarbonDollar(uint256 _amount) public onlyOwner returns (bool) {\r\n        require(_amount <= balanceOf(address(this)),\"not enough balance to transfer\");\r\n\r\n        tokenStorage.subBalance(address(this), _amount);\r\n        tokenStorage.addBalance(msg.sender, _amount);\r\n        emit Transfer(address(this), msg.sender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /** Computes fee percentage associated with burning into a particular stablecoin.\r\n     * @param stablecoin The stablecoin whose fee will be charged. Precondition: is a whitelisted\r\n     * stablecoin.\r\n     * @return The fee that will be charged. If the stablecoin's fee is not set, the default\r\n     * fee is returned.\r\n     */\r\n    function computeFeeRate(address stablecoin) public view returns (uint256 feeRate) {\r\n        if (getFee(stablecoin) > 0) \r\n            feeRate = getFee(stablecoin);\r\n        else\r\n            feeRate = getDefaultFee();\r\n    }\r\n\r\n    /**\r\n    * @notice Check if whitelisted token is whitelisted\r\n    * @return bool true if whitelisted, false if not\r\n    **/\r\n    function isWhitelisted(address _stablecoin) public view returns (bool) {\r\n        return tokenStorage_CD.whitelist(_stablecoin);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the fee associated with going from CarbonUSD to a specific WhitelistedToken.\r\n     * @param stablecoin The stablecoin whose fee is being checked.\r\n     * @return The fee associated with the stablecoin.\r\n     */\r\n    function getFee(address stablecoin) public view returns (uint256) {\r\n        return tokenStorage_CD.fees(stablecoin);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the default fee associated with going from CarbonUSD to a specific WhitelistedToken.\r\n     * @return The default fee for stablecoin trades.\r\n     */\r\n    function getDefaultFee() public view returns (uint256) {\r\n        return tokenStorage_CD.defaultFee();\r\n    }\r\n\r\n    function _burnCarbonDollar(address _tokensOf, address _stablecoin, uint256 _amount) internal {\r\n        require(isWhitelisted(_stablecoin), \"Stablecoin must be whitelisted prior to burning\");\r\n        WhitelistedToken whitelisted = WhitelistedToken(_stablecoin);\r\n        require(whitelisted.balanceOf(address(this)) >= _amount, \"Carbon escrow account in WT0 doesn't have enough tokens for burning\");\r\n\r\n        // Burn user's CUSD, but with a fee reduction.\r\n        uint256 chargedFee = tokenStorage_CD.computeFee(_amount, computeFeeRate(_stablecoin));\r\n        uint256 feedAmount = _amount.sub(chargedFee);\r\n        _burn(_tokensOf, _amount);\r\n        whitelisted.burn(_amount);\r\n        _mint(address(this), chargedFee);\r\n        emit BurnedCUSD(_tokensOf, feedAmount, chargedFee); // Whitelisted trust account should send user feedAmount USD\r\n    }\r\n\r\n}\r\n\r\n/**\r\n* @title WhitelistedToken\r\n* @notice A WhitelistedToken can be converted into CUSD and vice versa. Converting a WT into a CUSD\r\n* is the only way for a user to obtain CUSD. This is a permissioned token, so users have to be \r\n* whitelisted before they can do any mint/burn/convert operation.\r\n*/\r\ncontract WhitelistedToken is PermissionedToken {\r\n\r\n\r\n    address public cusdAddress;\r\n\r\n    /**\r\n        Events\r\n     */\r\n    event CUSDAddressChanged(address indexed oldCUSD, address indexed newCUSD);\r\n    event MintedToCUSD(address indexed user, uint256 amount);\r\n    event ConvertedToCUSD(address indexed user, uint256 amount);\r\n\r\n    /**\r\n    * @notice Constructor sets the regulator contract and the address of the\r\n    * CarbonUSD meta-token contract. The latter is necessary in order to make transactions\r\n    * with the CarbonDollar smart contract.\r\n    */\r\n    constructor(address _regulator, address _cusd) public PermissionedToken(_regulator) {\r\n\r\n        // base class fields\r\n        regulator = Regulator(_regulator);\r\n\r\n        cusdAddress = _cusd;\r\n\r\n    }\r\n\r\n    /**\r\n    * @notice Mints CarbonUSD for the user. Stores the WT0 that backs the CarbonUSD\r\n    * into the CarbonUSD contract's escrow account.\r\n    * @param _to The address of the receiver\r\n    * @param _amount The number of CarbonTokens to mint to user\r\n    */\r\n    function mintCUSD(address _to, uint256 _amount) public requiresPermission whenNotPaused userNotBlacklisted(_to) {\r\n        return _mintCUSD(_to, _amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Converts WT0 to CarbonUSD for the user. Stores the WT0 that backs the CarbonUSD\r\n    * into the CarbonUSD contract's escrow account.\r\n    * @param _amount The number of Whitelisted tokens to convert\r\n    */\r\n    function convertWT(uint256 _amount) public userNotBlacklisted(msg.sender) whenNotPaused {\r\n        require(balanceOf(msg.sender) >= _amount, \"Conversion amount should be less than balance\");\r\n        _burn(msg.sender, _amount);\r\n        _mintCUSD(msg.sender, _amount);\r\n        emit ConvertedToCUSD(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Change the cusd address.\r\n     * @param _cusd the cusd address.\r\n     */\r\n    function setCUSDAddress(address _cusd) public onlyOwner {\r\n        require(_cusd != address(cusdAddress), \"Must be a new cusd address\");\r\n        require(AddressUtils.isContract(_cusd), \"Must be an actual contract\");\r\n        address oldCUSD = address(cusdAddress);\r\n        cusdAddress = _cusd;\r\n        emit CUSDAddressChanged(oldCUSD, _cusd);\r\n    }\r\n\r\n    function _mintCUSD(address _to, uint256 _amount) internal {\r\n        require(_to != cusdAddress, \"Cannot mint to CarbonUSD contract\"); // This is to prevent Carbon Labs from printing money out of thin air!\r\n        CarbonDollar(cusdAddress).mint(_to, _amount);\r\n        _mint(cusdAddress, _amount);\r\n        emit MintedToCUSD(_to, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertWT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cusdAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blacklistedAccount\",\"type\":\"address\"}],\"name\":\"approveBlacklistedAddressSpender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMethodEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintCUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cusd\",\"type\":\"address\"}],\"name\":\"setCUSDAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyBlacklistedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRegulator\",\"type\":\"address\"}],\"name\":\"setRegulator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"regulator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_regulator\",\"type\":\"address\"},{\"name\":\"_cusd\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldCUSD\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newCUSD\",\"type\":\"address\"}],\"name\":\"CUSDAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintedToCUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ConvertedToCUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlacklistedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ApprovedBlacklistedAddressSpender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldRegulator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newRegulator\",\"type\":\"address\"}],\"name\":\"ChangedRegulator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WhitelistedToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001410d4ec3d276c0ebbf16ccbe88a4383ae734ed0","Library":"","SwarmSource":"bzzr://9ce37e142eb469d5458e53c26b7caab9d69cc233fd84908680ffe532f6e38920"}]}