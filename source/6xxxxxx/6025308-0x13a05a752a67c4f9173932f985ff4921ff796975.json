{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract Presale {\r\n\r\n  using SafeMath for uint256;\r\n  uint256 private weiRaised;\r\n  uint256 private startTime;\r\n  uint256 private endTime;\r\n  uint256 private rate;\r\n\r\n  uint256 private cap;\r\n\r\n  function Presale(uint256 _startTime, uint256 duration, uint256 _rate, uint256 _cap) public {\r\n    require(_rate > 0);\r\n    require(_cap > 0);\r\n    require(_startTime >= now);\r\n    require(duration > 0);\r\n\r\n    rate = _rate;\r\n    cap = _cap;\r\n    startTime = _startTime;\r\n    endTime = startTime + duration * 1 days;\r\n    weiRaised = 0;\r\n  }\r\n\r\n  function totalWei() public constant returns(uint256) {\r\n    return weiRaised;\r\n  }\r\n\r\n  function capRemaining() public constant returns(uint256) {\r\n    return cap.sub(weiRaised);\r\n  }\r\n\r\n  function totalCap() public constant returns(uint256) {\r\n    return cap;\r\n  }\r\n\r\n  function buyTokens(address purchaser, uint256 value) internal returns(uint256) {\r\n    require(validPurchase(value));\r\n    uint256 tokens = rate.mul(value);\r\n    weiRaised = weiRaised.add(value);\r\n    return tokens;\r\n  }\r\n\r\n  function hasEnded() internal constant returns(bool) {\r\n    return now > endTime || weiRaised >= cap;\r\n  }\r\n\r\n  function hasStarted() internal constant returns(bool) {\r\n    return now > startTime;\r\n  }\r\n\r\n  function validPurchase(uint256 value) internal view returns (bool) {\r\n    bool withinCap = weiRaised.add(value) <= cap;\r\n    return withinCap && withinPeriod();\r\n  }\r\n\r\n  function presaleRate() public view returns(uint256) {\r\n    return rate;\r\n  }\r\n\r\n  function withinPeriod () private constant returns(bool) {\r\n    return now >= startTime && now <= endTime;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic token) external onlyOwner {\r\n    uint256 balance = token.balanceOf(this);\r\n    token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n/// @title Vesting trustee contract for erc20 token.\r\ncontract VestingTrustee is Ownable, CanReclaimToken {\r\n    using SafeMath for uint256;\r\n\r\n    // erc20 token contract.\r\n    ERC20 public token;\r\n\r\n    // Vesting grant for a speicifc holder.\r\n    struct Grant {\r\n        uint256 value;\r\n        uint256 start;\r\n        uint256 cliff;\r\n        uint256 end;\r\n        uint256 installmentLength; // In seconds.\r\n        uint256 transferred;\r\n        bool revokable;\r\n        uint256 prevested;\r\n        uint256 vestingPercentage;\r\n    }\r\n\r\n    // Holder to grant information mapping.\r\n    mapping (address => Grant) public grants;\r\n\r\n    // Total tokens available for vesting.\r\n    uint256 public totalVesting;\r\n\r\n    event NewGrant(address indexed _from, address indexed _to, uint256 _value);\r\n    event TokensUnlocked(address indexed _to, uint256 _value);\r\n    event GrantRevoked(address indexed _holder, uint256 _refund);\r\n\r\n    /// @dev Constructor that initializes the address of the  token contract.\r\n    /// @param _token erc20 The address of the previously deployed token contract.\r\n    function VestingTrustee(address _token) {\r\n        require(_token != address(0));\r\n\r\n        token = ERC20(_token);\r\n    }\r\n\r\n    /// @dev Grant tokens to a specified address.\r\n    /// @param _to address The holder address.\r\n    /// @param _value uint256 The amount of tokens to be granted.\r\n    /// @param _start uint256 The beginning of the vesting period.\r\n    /// @param _cliff uint256 Duration of the cliff period (when the first installment is made).\r\n    /// @param _end uint256 The end of the vesting period.\r\n    /// @param _installmentLength uint256 The length of each vesting installment (in seconds).\r\n    /// @param _revokable bool Whether the grant is revokable or not.\r\n    function grant(address _to, uint256 _value, uint256 _start, uint256 _cliff, uint256 _end,\r\n        uint256 _installmentLength, uint256 vestingPercentage, uint256 prevested, bool _revokable)\r\n        external onlyOwner {\r\n\r\n        require(_to != address(0));\r\n        require(_to != address(this)); // Don't allow holder to be this contract.\r\n        require(_value > 0);\r\n        require(_value.sub(prevested) > 0);\r\n        require(vestingPercentage > 0);\r\n\r\n        // Require that every holder can be granted tokens only once.\r\n        require(grants[_to].value == 0);\r\n\r\n        // Require for time ranges to be consistent and valid.\r\n        require(_start <= _cliff && _cliff <= _end);\r\n\r\n        // Require installment length to be valid and no longer than (end - start).\r\n        require(_installmentLength > 0 && _installmentLength <= _end.sub(_start));\r\n\r\n        // Grant must not exceed the total amount of tokens currently available for vesting.\r\n        require(totalVesting.add(_value.sub(prevested)) <= token.balanceOf(address(this)));\r\n\r\n        // Assign a new grant.\r\n        grants[_to] = Grant({\r\n            value: _value,\r\n            start: _start,\r\n            cliff: _cliff,\r\n            end: _end,\r\n            installmentLength: _installmentLength,\r\n            transferred: prevested,\r\n            revokable: _revokable,\r\n            prevested: prevested,\r\n            vestingPercentage: vestingPercentage\r\n        });\r\n\r\n        totalVesting = totalVesting.add(_value.sub(prevested));\r\n        NewGrant(msg.sender, _to, _value);\r\n    }\r\n\r\n    /// @dev Revoke the grant of tokens of a specifed address.\r\n    /// @param _holder The address which will have its tokens revoked.\r\n    function revoke(address _holder) public onlyOwner {\r\n        Grant memory grant = grants[_holder];\r\n\r\n        // Grant must be revokable.\r\n        require(grant.revokable);\r\n\r\n        // Calculate amount of remaining tokens that are still available to be\r\n        // returned to owner.\r\n        uint256 refund = grant.value.sub(grant.transferred);\r\n\r\n        // Remove grant information.\r\n        delete grants[_holder];\r\n\r\n        // Update total vesting amount and transfer previously calculated tokens to owner.\r\n        totalVesting = totalVesting.sub(refund);\r\n        token.transfer(msg.sender, refund);\r\n\r\n        GrantRevoked(_holder, refund);\r\n    }\r\n\r\n    /// @dev Calculate the total amount of vested tokens of a holder at a given time.\r\n    /// @param _holder address The address of the holder.\r\n    /// @param _time uint256 The specific time to calculate against.\r\n    /// @return a uint256 Representing a holder's total amount of vested tokens.\r\n    function vestedTokens(address _holder, uint256 _time) external constant returns (uint256) {\r\n        Grant memory grant = grants[_holder];\r\n        if (grant.value == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return calculateVestedTokens(grant, _time);\r\n    }\r\n\r\n    /// @dev Calculate amount of vested tokens at a specifc time.\r\n    /// @param _grant Grant The vesting grant.\r\n    /// @param _time uint256 The time to be checked\r\n    /// @return a uint256 Representing the amount of vested tokens of a specific grant.\r\n    function calculateVestedTokens(Grant _grant, uint256 _time) private constant returns (uint256) {\r\n        // If we're before the cliff, then nothing is vested.\r\n        if (_time < _grant.cliff) {\r\n            return _grant.prevested;\r\n        }\r\n\r\n        // If we're after the end of the vesting period - everything is vested;\r\n        if (_time >= _grant.end) {\r\n            return _grant.value;\r\n        }\r\n\r\n        // Calculate amount of installments past until now.\r\n        uint256 installmentsPast = _time.sub(_grant.cliff).div(_grant.installmentLength) + 1;\r\n\r\n\r\n        // Calculate and return installments that have passed according to vesting days that have passed.\r\n        return _grant.prevested.add(_grant.value.mul(installmentsPast.mul(_grant.vestingPercentage)).div(100));\r\n    }\r\n\r\n    /// @dev Unlock vested tokens and transfer them to their holder.\r\n    /// @return a uint256 Representing the amount of vested tokens transferred to their holder.\r\n    function unlockVestedTokens() external {\r\n        Grant storage grant = grants[msg.sender];\r\n\r\n        // Require that there will be funds left in grant to tranfser to holder.\r\n        require(grant.value != 0);\r\n\r\n        // Get the total amount of vested tokens, acccording to grant.\r\n        uint256 vested = calculateVestedTokens(grant, now);\r\n        if (vested == 0) {\r\n            revert();\r\n        }\r\n\r\n        // Make sure the holder doesn't transfer more than what he already has.\r\n        uint256 transferable = vested.sub(grant.transferred);\r\n        if (transferable == 0) {\r\n            revert();\r\n        }\r\n\r\n        grant.transferred = grant.transferred.add(transferable);\r\n        totalVesting = totalVesting.sub(transferable);\r\n        token.transfer(msg.sender, transferable);\r\n        TokensUnlocked(msg.sender, transferable);\r\n    }\r\n\r\n    function reclaimEther() external onlyOwner {\r\n      assert(owner.send(this.balance));\r\n    }\r\n}\r\n\r\ncontract Controlled {\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController { require(msg.sender == controller); _; }\r\n\r\n    address public controller;\r\n\r\n    function Controlled() public { controller = msg.sender;}\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) public onlyController {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\n/// @dev The token controller contract must implement these functions\r\ncontract TokenController {\r\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\r\n    /// @param _owner The address that sent the ether to create tokens\r\n    /// @return True if the ether is accepted, false if it throws\r\n    function proxyPayment(address _owner) public payable returns(bool);\r\n\r\n    /// @notice Notifies the controller about a token transfer allowing the\r\n    ///  controller to react if desired\r\n    /// @param _from The origin of the transfer\r\n    /// @param _to The destination of the transfer\r\n    /// @param _amount The amount of the transfer\r\n    /// @return False if the controller does not authorize the transfer\r\n    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\r\n\r\n    /// @notice Notifies the controller about an approval allowing the\r\n    ///  controller to react if desired\r\n    /// @param _owner The address that calls `approve()`\r\n    /// @param _spender The spender in the `approve()` call\r\n    /// @param _amount The amount in the `approve()` call\r\n    /// @return False if the controller does not authorize the approval\r\n    function onApprove(address _owner, address _spender, uint _amount) public\r\n        returns(bool);\r\n}\r\n\r\n/*\r\n    Copyright 2016, Jordi Baylina\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n/// @title MiniMeToken Contract\r\n/// @author Jordi Baylina\r\n/// @dev This token contract's goal is to make it easy for anyone to clone this\r\n///  token using the token distribution at a given block, this will allow DAO's\r\n///  and DApps to upgrade their features in a decentralized manner without\r\n///  affecting the original token\r\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\r\n\r\n\r\n\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\r\n}\r\n\r\n/// @dev The actual token contract, the default controller is the msg.sender\r\n///  that deploys the contract, so usually this token will be deployed by a\r\n///  token controller contract, which Giveth will call a \"Campaign\"\r\ncontract MiniMeToken is Controlled {\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = 'MMT_0.2'; //An arbitrary versioning scheme\r\n\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct  Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n    ///  will create the Clone token contracts, the token factory needs to be\r\n    ///  deployed first\r\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n    ///  new token\r\n    /// @param _parentSnapShotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token, set to 0 if it\r\n    ///  is a new token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    function MiniMeToken(\r\n        address _tokenFactory,\r\n        address _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public {\r\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = MiniMeToken(_parentToken);\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n        doTransfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount\r\n    ) public returns (bool success) {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n        if (msg.sender != controller) {\r\n            require(transfersEnabled);\r\n\r\n            // The standard ERC 20 transferFrom functionality\r\n            require(allowed[_from][msg.sender] >= _amount);\r\n            allowed[_from][msg.sender] -= _amount;\r\n        }\r\n        doTransfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return True if the transfer was successful\r\n    function doTransfer(address _from, address _to, uint _amount\r\n    ) internal {\r\n\r\n           if (_amount == 0) {\r\n               Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\r\n               return;\r\n           }\r\n\r\n           require(parentSnapShotBlock < block.number);\r\n\r\n           // Do not allow transfer to 0x0 or the token contract itself\r\n           require((_to != 0) && (_to != address(this)));\r\n\r\n           // If the amount being transfered is more than the balance of the\r\n           //  account the transfer throws\r\n           var previousBalanceFrom = balanceOfAt(_from, block.number);\r\n\r\n           require(previousBalanceFrom >= _amount);\r\n\r\n           // Alerts the token controller of the transfer\r\n           if (isContract(controller)) {\r\n               require(TokenController(controller).onTransfer(_from, _to, _amount));\r\n           }\r\n\r\n           // First update the balance array with the new value for the address\r\n           //  sending the tokens\r\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n           // Then update the balance array with the new value for the address\r\n           //  receiving the tokens\r\n           var previousBalanceTo = balanceOfAt(_to, block.number);\r\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n           // An event to make the transfer easy to find on the blockchain\r\n           Transfer(_from, _to, _amount);\r\n\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        // Alerts the token controller of the approve function call\r\n        if (isContract(controller)) {\r\n            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender\r\n    ) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n    ///  its behalf, and then a function is triggered in the contract that is\r\n    ///  being approved, `_spender`. This allows users to use their tokens to\r\n    ///  interact with contracts in one function call instead of two\r\n    /// @param _spender The address of the contract able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return True if the function call was successful\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\r\n    ) public returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n\r\n        ApproveAndCallFallBack(_spender).receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() public constant returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) public constant\r\n        returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0)\r\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0)\r\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Clone Token Method\r\n////////////////\r\n\r\n    /// @notice Creates a new clone token with the initial distribution being\r\n    ///  this token at `_snapshotBlock`\r\n    /// @param _cloneTokenName Name of the clone token\r\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n    /// @param _cloneTokenSymbol Symbol of the clone token\r\n    /// @param _snapshotBlock Block when the distribution of the parent token is\r\n    ///  copied to set the initial distribution of the new clone token;\r\n    ///  if the block is zero than the actual block, the current block is used\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    /// @return The address of the new MiniMeToken Contract\r\n    function createCloneToken(\r\n        string _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n        ) public returns(address) {\r\n        if (_snapshotBlock == 0) _snapshotBlock = block.number;\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            this,\r\n            _snapshotBlock,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        cloneToken.changeController(msg.sender);\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        NewCloneToken(address(cloneToken), _snapshotBlock);\r\n        return address(cloneToken);\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function generateTokens(address _owner, uint _amount\r\n    ) public onlyController returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        Transfer(0, _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _owner The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function destroyTokens(address _owner, uint _amount\r\n    ) onlyController public returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(_owner);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        Transfer(_owner, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n\r\n    /// @notice Enables token holders to transfer their tokens freely if true\r\n    /// @param _transfersEnabled True if transfers are allowed in the clone\r\n    function enableTransfers(bool _transfersEnabled) public onlyController {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\r\n    ) constant internal returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1)/ 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\r\n    ) internal  {\r\n        if ((checkpoints.length == 0)\r\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\r\n               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n               newCheckPoint.fromBlock =  uint128(block.number);\r\n               newCheckPoint.value = uint128(_value);\r\n           } else {\r\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n               oldCheckPoint.value = uint128(_value);\r\n           }\r\n    }\r\n\r\n    /// @dev Internal function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) constant internal returns(bool) {\r\n        uint size;\r\n        if (_addr == 0) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) pure internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /// @notice The fallback function: If the contract's controller has not been\r\n    ///  set to 0, then the `proxyPayment` method is called which relays the\r\n    ///  ether and creates tokens as described in the token controller contract\r\n    function () public payable {\r\n        require(isContract(controller));\r\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\r\n    }\r\n\r\n//////////\r\n// Safety Methods\r\n//////////\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) public onlyController {\r\n        if (_token == 0x0) {\r\n            controller.transfer(this.balance);\r\n            return;\r\n        }\r\n\r\n        MiniMeToken token = MiniMeToken(_token);\r\n        uint balance = token.balanceOf(this);\r\n        token.transfer(controller, balance);\r\n        ClaimedTokens(_token, controller, balance);\r\n    }\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n}\r\n\r\n\r\n////////////////\r\n// MiniMeTokenFactory\r\n////////////////\r\n\r\n/// @dev This contract is used to generate clone contracts from a contract.\r\n///  In solidity this is the way to create a contract from a contract of the\r\n///  same class\r\ncontract MiniMeTokenFactory {\r\n\r\n    /// @notice Update the DApp by creating a new token with new functionalities\r\n    ///  the msg.sender becomes the controller of this clone token\r\n    /// @param _parentToken Address of the token being cloned\r\n    /// @param _snapshotBlock Block of the parent token that will\r\n    ///  determine the initial distribution of the clone token\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _decimalUnits Number of decimals of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\r\n    /// @return The address of the new token contract\r\n    function createCloneToken(\r\n        address _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public returns (MiniMeToken) {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        newToken.changeController(msg.sender);\r\n        return newToken;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * @dev This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Whitelist is Ownable {\r\n  mapping(address => bool) public whitelist;\r\n\r\n  event WhitelistedAddressAdded(address addr);\r\n  event WhitelistedAddressRemoved(address addr);\r\n\r\n  /**\r\n   * @dev Throws if called by any account that's not whitelisted.\r\n   */\r\n  modifier onlyWhitelisted() {\r\n    require(whitelist[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param addr address\r\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n   */\r\n  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\r\n    if (!whitelist[addr]) {\r\n      whitelist[addr] = true;\r\n      WhitelistedAddressAdded(addr);\r\n      success = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev add addresses to the whitelist\r\n   * @param addrs addresses\r\n   * @return true if at least one address was added to the whitelist,\r\n   * false if all addresses were already in the whitelist\r\n   */\r\n  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n    for (uint256 i = 0; i < addrs.length; i++) {\r\n      if (addAddressToWhitelist(addrs[i])) {\r\n        success = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address from the whitelist\r\n   * @param addr address\r\n   * @return true if the address was removed from the whitelist,\r\n   * false if the address wasn't in the whitelist in the first place\r\n   */\r\n  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\r\n    if (whitelist[addr]) {\r\n      whitelist[addr] = false;\r\n      WhitelistedAddressRemoved(addr);\r\n      success = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove addresses from the whitelist\r\n   * @param addrs addresses\r\n   * @return true if at least one address was removed from the whitelist,\r\n   * false if all addresses weren't in the whitelist in the first place\r\n   */\r\n  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n    for (uint256 i = 0; i < addrs.length; i++) {\r\n      if (removeAddressFromWhitelist(addrs[i])) {\r\n        success = true;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract Crowdsale is Presale, Pausable, CanReclaimToken, Whitelist {\r\n\r\n  using SafeMath for uint256;\r\n  address public whitelistAddress;\r\n  address public wallet; //wallet where the funds collected are transfered\r\n  MiniMeToken public token; //ERC20 Token\r\n  uint256 private weiRaised = 0; //WeiRaised during the public Sale\r\n  uint256 private cap = 0; //Cap of the public Sale in Wei\r\n  bool private publicSaleInitialized = false;\r\n  bool private finalized = false;\r\n  uint256 private tokensSold = 0; //tokens sold during the entire sale\r\n  uint256 private startTime; //start time of the public sale initialized after the presale is over\r\n  uint256 private endTime; //endtime of the public sale\r\n  uint256 public maxTokens;\r\n  mapping(address => uint256) public contributions; //contributions of each investor\r\n  mapping(address => uint256) public investorCaps; //for whitelisting\r\n  address[] public investors; //investor list who participate in the ICO\r\n  address[] public founders; //list of founders\r\n  address[] public advisors; //list of advisors\r\n  VestingTrustee public trustee;\r\n  address public reserveWallet; //reserveWallet where the unsold tokens will be sent to\r\n\r\n  //Rate for each tier (no of tokens for 1 ETH)\r\n  //Max wei for each tier\r\n  struct Tier {\r\n    uint256 rate;\r\n    uint256 max;\r\n  }\r\n\r\n  uint public privateSaleTokensAvailable;\r\n  uint public privateSaleTokensSold = 0;\r\n  uint public publicTokensAvailable;\r\n\r\n  uint8 public totalTiers = 0; //total Tiers in the public sale\r\n  bool public tiersInitialized = false;\r\n  uint256 public maxTiers = 6; //max tiers that can be in the publicsale\r\n  Tier[6] public tiers; //array of tiers\r\n\r\n  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n  enum Stage { Preparing, Presale, PresaleFinished, PublicSale, Success, Finalized }\r\n\r\n  function Crowdsale(\r\n    uint256 _presaleStartTime, //presale start time\r\n    uint256 _presaleDuration, //presale duration in days\r\n    uint256 _presaleRate, // presale rate. ie No of tokens per 1 ETH\r\n    uint256 _presaleCap, // max wei that can raised\r\n    address erc20Token, // Token used for the crowdsale\r\n    address _wallet,\r\n    uint8 _tiers,\r\n    uint256 _cap,\r\n    address _reserveWallet)\r\n    public\r\n    Presale(_presaleStartTime, _presaleDuration, _presaleRate, _presaleCap)\r\n    {\r\n      require(_wallet != address(0));\r\n      require(erc20Token != address(0));\r\n      require(_tiers > 0 && _tiers <= maxTiers);\r\n      require(_cap > 0);\r\n      require(_reserveWallet != address(0));\r\n      token = MiniMeToken(erc20Token);\r\n      wallet = _wallet;\r\n      totalTiers = _tiers;\r\n      cap = _cap;\r\n      reserveWallet = _reserveWallet;\r\n      trustee = new VestingTrustee(erc20Token);\r\n      maxTokens = 1000000000 * (10 ** 18); // 1 B tokens\r\n      privateSaleTokensAvailable = maxTokens.mul(22).div(100);\r\n      publicTokensAvailable = maxTokens.mul(28).div(100);\r\n      super.addAddressToWhitelist(msg.sender);\r\n\r\n    }\r\n\r\n  function() public payable {\r\n    buyTokens(msg.sender, msg.value);\r\n  }\r\n\r\n  function getStage() public constant returns(Stage) {\r\n    if (finalized) return Stage.Finalized;\r\n    if (!tiersInitialized || !Presale.hasStarted()) return Stage.Preparing;\r\n    if (!Presale.hasEnded()) return Stage.Presale;\r\n    if (Presale.hasEnded() && !hasStarted()) return Stage.PresaleFinished;\r\n    if (!hasEnded()) return Stage.PublicSale;\r\n    if (hasEnded()) return Stage.Success;\r\n    return Stage.Preparing;\r\n  }\r\n\r\n  modifier inStage(Stage _stage) {\r\n    require(getStage() == _stage);\r\n    _;\r\n  }\r\n\r\n  // rates for each tier and total wei in that tiers\r\n  // they are added up together\r\n  function initTiers(uint256[] rates, uint256[] totalWeis) public onlyWhitelisted returns(uint256) {\r\n    require(token.controller() == address(this));\r\n    require(!tiersInitialized);\r\n    require(rates.length == totalTiers && rates.length == totalWeis.length);\r\n    uint256 tierMax = 0;\r\n\r\n    for (uint8 i=0; i < totalTiers; i++) {\r\n\r\n      require(totalWeis[i] > 0 && rates[i] > 0);\r\n\r\n      tierMax = tierMax.add(totalWeis[i]);\r\n      tiers[i] = Tier({\r\n        rate: rates[i],\r\n        max: tierMax\r\n      });\r\n    }\r\n\r\n    require(tierMax == cap);\r\n    tiersInitialized = true;\r\n    return tierMax;\r\n  }\r\n\r\n  // function for whitelisting investors with caps\r\n  function setCapForParticipants(address[] participants, uint256[] caps) onlyWhitelisted public  {\r\n    require(participants.length <= 50 && participants.length == caps.length);\r\n    for (uint8 i=0; i < participants.length; i++) {\r\n      investorCaps[participants[i]] = caps[i];\r\n    }\r\n  }\r\n\r\n\r\n  function addGrant(address assignee, uint256 value, bool isFounder) public onlyWhitelisted whenNotPaused {\r\n    require(value > 0);\r\n    require(assignee != address(0));\r\n    uint256 start;\r\n    uint256 cliff;\r\n    uint256 vestingPercentage;\r\n    uint256 initialTokens;\r\n    if(isFounder) {\r\n      start = now;\r\n      cliff = start + 12*30 days; //12 months\r\n      vestingPercentage = 20; //20%\r\n      founders.push(assignee);\r\n    }\r\n    else {\r\n      // for advisors\r\n      // transfer 10% of the tokens at start\r\n      initialTokens = value.mul(10).div(100);\r\n      transferTokens(assignee, initialTokens);\r\n      start = now;\r\n      cliff = start + 6*30 days;  //6 months\r\n      vestingPercentage = 15; //15% for each installments\r\n      advisors.push(assignee);\r\n    }\r\n\r\n    uint256 end = now + 3 * 1 years; //3 years\r\n    uint256 installmentLength = 6 * 30 days; // 6 month installments\r\n    bool revokable = true;\r\n    transferTokens(trustee, value.sub(initialTokens));\r\n    trustee.grant(assignee, value, start, cliff, end, installmentLength, vestingPercentage, initialTokens, revokable);\r\n  }\r\n\r\n  // called by the owner to close the crowdsale\r\n  function finalize() public onlyWhitelisted inStage(Stage.Success) {\r\n    require(!finalized);\r\n    //trustee's ownership is transfered from the crowdsale to owner of the contract\r\n    trustee.transferOwnership(msg.sender);\r\n    //enable token transfer\r\n    token.enableTransfers(true);\r\n    //generate the unsold tokens to the reserve\r\n    uint256 unsold = maxTokens.sub(token.totalSupply());\r\n    transferTokens(reserveWallet, unsold);\r\n\r\n    // change the token's controller to a zero Address so that it cannot\r\n    // generate or destroy tokens\r\n    token.changeController(0x0);\r\n    finalized = true;\r\n  }\r\n\r\n  //start the public sale manually after the presale is over, duration is in days\r\n  function startPublicSale(uint _startTime, uint _duration) public onlyWhitelisted inStage(Stage.PresaleFinished) {\r\n    require(_startTime >= now);\r\n    require(_duration > 0);\r\n    startTime = _startTime;\r\n    endTime = _startTime + _duration * 1 days;\r\n    publicSaleInitialized = true;\r\n  }\r\n\r\n  // total wei raised in the presale and public sale\r\n  function totalWei() public constant returns(uint256) {\r\n    uint256 presaleWei = super.totalWei();\r\n    return presaleWei.add(weiRaised);\r\n  }\r\n\r\n  function totalPublicSaleWei() public constant returns(uint256) {\r\n    return weiRaised;\r\n  }\r\n  // total cap of the presale and public sale\r\n  function totalCap() public constant returns(uint256) {\r\n    uint256 presaleCap = super.totalCap();\r\n    return presaleCap.add(cap);\r\n  }\r\n\r\n  // Total tokens sold duing the presale and public sale.\r\n  // Total tokens has to divided by 10^18\r\n  function totalTokens() public constant returns(uint256) {\r\n    return tokensSold;\r\n  }\r\n\r\n  // MAIN BUYING Function\r\n  function buyTokens(address purchaser, uint256 value) internal  whenNotPaused returns(uint256) {\r\n    require(value > 0);\r\n    Stage stage = getStage();\r\n    require(stage == Stage.Presale || stage == Stage.PublicSale);\r\n\r\n    //the purchase amount cannot be more than the whitelisted cap\r\n    uint256 purchaseAmount = Math.min256(value, investorCaps[purchaser].sub(contributions[purchaser]));\r\n    require(purchaseAmount > 0);\r\n    uint256 numTokens;\r\n\r\n    //call the presale contract\r\n    if (stage == Stage.Presale) {\r\n      if (Presale.totalWei().add(purchaseAmount) > Presale.totalCap()) {\r\n        purchaseAmount = Presale.capRemaining();\r\n      }\r\n      numTokens = Presale.buyTokens(purchaser, purchaseAmount);\r\n    } else if (stage == Stage.PublicSale) {\r\n\r\n      uint totalWei = weiRaised.add(purchaseAmount);\r\n      uint8 currentTier = getTier(weiRaised); //get current tier\r\n      if (totalWei >= cap) { // will TOTAL_CAP(HARD_CAP) of the public sale be reached ?\r\n        totalWei = cap;\r\n        //purchase amount can be only be (CAP - WeiRaised)\r\n        purchaseAmount = cap.sub(weiRaised);\r\n      }\r\n\r\n      // if the totalWei( weiRaised + msg.value) fits within current cap\r\n      // number of tokens would be rate * purchaseAmount\r\n      if (totalWei <= tiers[currentTier].max) {\r\n        numTokens = purchaseAmount.mul(tiers[currentTier].rate);\r\n      } else {\r\n        //wei remaining in the current tier\r\n        uint remaining = tiers[currentTier].max.sub(weiRaised);\r\n        numTokens = remaining.mul(tiers[currentTier].rate);\r\n\r\n        //wei in the next tier\r\n        uint256 excess = totalWei.sub(tiers[currentTier].max);\r\n        //number of tokens  = wei remaining in the next tier * rate of the next tier\r\n        numTokens = numTokens.add(excess.mul(tiers[currentTier + 1].rate));\r\n      }\r\n\r\n      // update the total raised so far\r\n      weiRaised = weiRaised.add(purchaseAmount);\r\n    }\r\n\r\n    // total tokens sold in the entire sale\r\n    require(tokensSold.add(numTokens) <= publicTokensAvailable);\r\n    tokensSold = tokensSold.add(numTokens);\r\n\r\n    // forward funds to the wallet\r\n    forwardFunds(purchaser, purchaseAmount);\r\n    // transfer the tokens to the purchaser\r\n    transferTokens(purchaser, numTokens);\r\n\r\n    // return the remaining unused wei back\r\n    if (value.sub(purchaseAmount) > 0) {\r\n      msg.sender.transfer(value.sub(purchaseAmount));\r\n    }\r\n\r\n    //event\r\n    TokenPurchase(purchaser, numTokens, purchaseAmount);\r\n\r\n    return numTokens;\r\n  }\r\n\r\n\r\n\r\n  function forwardFunds(address purchaser, uint256 value) internal {\r\n    //new investor\r\n    if (contributions[purchaser] == 0) {\r\n      investors.push(purchaser);\r\n    }\r\n    //add contribution to the purchaser\r\n    contributions[purchaser] = contributions[purchaser].add(value);\r\n    wallet.transfer(value);\r\n  }\r\n\r\n  function changeEndTime(uint _endTime) public onlyWhitelisted {\r\n    endTime = _endTime;\r\n  }\r\n\r\n  function changeFundsWallet(address _newWallet) public onlyWhitelisted {\r\n    require(_newWallet != address(0));\r\n    wallet = _newWallet;\r\n  }\r\n\r\n  function changeTokenController() onlyWhitelisted public {\r\n    token.changeController(msg.sender);\r\n  }\r\n\r\n  function changeTrusteeOwner() onlyWhitelisted public {\r\n    trustee.transferOwnership(msg.sender);\r\n  }\r\n  function changeReserveWallet(address _reserve) public onlyWhitelisted {\r\n    require(_reserve != address(0));\r\n    reserveWallet = _reserve;\r\n  }\r\n\r\n  function setWhitelistAddress(address _whitelist) public onlyWhitelisted {\r\n    require(_whitelist != address(0));\r\n    whitelistAddress = _whitelist;\r\n  }\r\n\r\n  function transferTokens(address to, uint256 value) internal {\r\n    token.generateTokens(to, value);\r\n  }\r\n\r\n  function sendPrivateSaleTokens(address to, uint256 value) public whenNotPaused onlyWhitelisted {\r\n    require(privateSaleTokensSold.add(value) <= privateSaleTokensAvailable);\r\n    privateSaleTokensSold = privateSaleTokensSold.add(value);\r\n    transferTokens(to, value);\r\n  }\r\n\r\n  function hasEnded() internal constant returns(bool) {\r\n    return now > endTime || weiRaised >= cap;\r\n  }\r\n\r\n  function hasStarted() internal constant returns(bool) {\r\n    return publicSaleInitialized && now >= startTime;\r\n  }\r\n\r\n  function getTier(uint256 _weiRaised) internal constant returns(uint8) {\r\n    for (uint8 i = 0; i < totalTiers; i++) {\r\n      if (_weiRaised < tiers[i].max) {\r\n        return i;\r\n      }\r\n    }\r\n    //wont reach but for safety\r\n    return totalTiers + 1;\r\n  }\r\n\r\n\r\n\r\n  function getCurrentTier() public constant returns(uint8) {\r\n    return getTier(weiRaised);\r\n  }\r\n\r\n\r\n  // functions for the mini me token\r\n  function proxyPayment(address _owner) public payable returns(bool) {\r\n    return true;\r\n  }\r\n\r\n  function onApprove(address _owner, address _spender, uint _amount) public returns(bool) {\r\n    return true;\r\n  }\r\n\r\n  function onTransfer(address _from, address _to, uint _amount) public returns(bool) {\r\n    return true;\r\n  }\r\n\r\n  function getTokenSaleTime() public constant returns(uint256, uint256) {\r\n    return (startTime, endTime);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_parentToken\",\"type\":\"address\"},{\"name\":\"_snapshotBlock\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"createCloneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MiniMeTokenFactory","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8da3d9ab96dd5e3beca40e3d460081bffcc154a4eb8e7336a87a99f2a10e206d"}]}