{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Events {\r\n    event onActive();\r\n\r\n    event onOuterDividend\r\n    (\r\n        uint256 _dividends\r\n    );\r\n\r\n    event onBuyKey\r\n    (\r\n        address _address,\r\n        uint256 _pID,\r\n        uint256 _rID,\r\n        uint256 _eth,\r\n        uint256 _key,\r\n        bool _timeExtended\r\n    );\r\n\r\n    event onReload\r\n    (\r\n        address _address,\r\n        uint256 _pID,\r\n        uint256 _rID,\r\n        uint256 _eth,\r\n        uint256 _dividend,\r\n        uint256 _luckBonus,\r\n        uint256 _key,\r\n        bool _timeExtended\r\n    );\r\n\r\n    event onWithdraw\r\n    (\r\n        address _address,\r\n        uint256 _pID,\r\n        uint256 _rID,\r\n        uint256 _eth,\r\n        uint256 _dividend,\r\n        uint256 _luckBonus\r\n    );\r\n\r\n    event onSell\r\n    (\r\n        address _address,\r\n        uint256 _pID,\r\n        uint256 _rID,\r\n        uint256 _key,\r\n        uint256 _eth\r\n    );\r\n\r\n    event onWinLuckyPrize\r\n    (\r\n        uint256 _rID\r\n    );\r\n}\r\n\r\ncontract PT7D is Events {\r\n    using SafeMath for *;\r\n\r\n    ReferralInterface private Referralcontract_;\r\n//==============================================================================\r\n//   config\r\n//==============================================================================\r\n    string public name = \"PT7D\";\r\n    string public symbol = \"PT\";\r\n    uint256 constant internal magnitude = 1e18;\r\n//==============================================================================\r\n//   variable config\r\n//==============================================================================\r\n    uint16 public sellFee_ = 1500;\r\n    uint8 public luckyBonus_ = 5;\r\n    uint8 public attenuationFee_ = 1;\r\n    uint8 public luckyEdge_ = 70;\r\n    uint8 public extensionThreshold_ = 2;\r\n\r\n    uint256 public extensionMin_ = 0.1 ether;\r\n    uint256 public extensionMax_ = 10 ether;\r\n    uint256 public rndInit_ = 24 hours;\r\n    uint256 public rndInc_ = 1 hours;\r\n//==============================================================================\r\n//   datasets\r\n//============================================================================== \r\n    uint256 public pID_ = 0;\r\n    uint256 public rID_ = 0;\r\n    uint256 public keySupply_ = 0;\r\n    uint256 public totalInvestment_ = 0;\r\n    uint256 public pot_ = 0;\r\n    uint256 internal profitPerShare_ = 0;\r\n    uint256 public luckyRounds_ = 0;\r\n\r\n    mapping (address => uint256) public pIDxAddr_;\r\n    mapping (uint256 => Datasets.Player) public plyr_;\r\n    mapping (uint256 => Datasets.Round) public round_;\r\n    mapping (uint256 => mapping (uint256 => uint256)) public plyrRnds_;\r\n    mapping (bytes32 => bool) public administrators;\r\n\r\n    uint256 internal administratorBalance_ = 0;\r\n//==============================================================================\r\n//   modifier\r\n//==============================================================================\r\n    modifier isActivated() {\r\n        require(activated_ == true, \"its not ready yet.\"); \r\n        _;\r\n    }\r\n\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender; \r\n        require(administrators[keccak256(_customerAddress)]);\r\n        _;\r\n    }\r\n//==============================================================================\r\n//   public functions\r\n//==============================================================================\r\n    constructor()\r\n        public\r\n    {\r\n        administrators[0x14c319c3c982350b442e4074ec4736b3ac376ebdca548bdda0097040223e7bd6] = true;\r\n    }\r\n    \r\n    function()\r\n        public\r\n        payable\r\n        isActivated()\r\n    {\r\n        uint256 _curBalance = totalEthereumBalance();\r\n        if (_curBalance > 10 ether && _curBalance < 500 ether)\r\n            require(msg.value >= 10 ether);\r\n\r\n        uint256 _pID = getPlayerID();\r\n        endRoundAndGetEarnings(_pID);\r\n\r\n        uint256 _amountOfkeys;\r\n        bool _timeExtended;\r\n        (_amountOfkeys,_timeExtended) = purchaseKeys(_pID, msg.value);\r\n        \r\n        emit onBuyKey(msg.sender, _pID, rID_, msg.value, _amountOfkeys, _timeExtended);\r\n    }\r\n    \r\n    function outerDividend()\r\n        external\r\n        payable\r\n        isActivated()\r\n    {\r\n        uint256 _dividends = msg.value;\r\n        profitPerShare_ = profitPerShare_.add(_dividends.mul(magnitude).div(keySupply_));\r\n\r\n        emit onOuterDividend(_dividends);\r\n    }\r\n\r\n    function reLoad()\r\n        public\r\n        isActivated()\r\n    {\r\n        uint256 _pID = getPlayerID();\r\n        endRoundAndGetEarnings(_pID);\r\n\r\n        uint256 _dividends;\r\n        uint256 _luckBonus;\r\n        (_dividends,_luckBonus) = withdrawEarnings(_pID);\r\n        uint256 _earnings = _dividends.add(_luckBonus);\r\n\r\n        uint256 _curBalance = totalEthereumBalance();\r\n        if (_curBalance > 10 ether && _curBalance < 500 ether)\r\n            require(_earnings >= 10 ether);\r\n\r\n        uint256 _amountOfkeys;\r\n        bool _timeExtended;\r\n        (_amountOfkeys,_timeExtended) = purchaseKeys(_pID, _earnings);\r\n\r\n        emit onReload(msg.sender, _pID, rID_, _earnings, _dividends, _luckBonus, _amountOfkeys, _timeExtended);\r\n    }\r\n\r\n    function withdraw()\r\n        public\r\n        isActivated()\r\n    {\r\n        uint256 _pID = getPlayerID();\r\n        endRoundAndGetEarnings(_pID);\r\n\r\n        uint256 _dividends;\r\n        uint256 _luckBonus;\r\n        (_dividends,_luckBonus) = withdrawEarnings(_pID);\r\n        uint256 _earnings = _dividends.add(_luckBonus);\r\n        if (_earnings > 0)\r\n            plyr_[_pID].addr.transfer(_earnings);\r\n\r\n        emit onWithdraw(msg.sender, _pID, rID_, _earnings, _dividends, _luckBonus);\r\n    }\r\n    \r\n    function sell(uint256 _amountOfkeys)\r\n        public\r\n        isActivated()\r\n    {\r\n        uint256 _pID = getPlayerID();\r\n        endRoundAndGetEarnings(_pID);\r\n\r\n        Datasets.Player _plyr = plyr_[_pID];\r\n        Datasets.Round _round = round_[rID_];\r\n\r\n        require(_amountOfkeys <= _plyr.keys);\r\n\r\n        uint256 _eth = keysToEthereum(_amountOfkeys);\r\n        uint256 _sellFee = calcSellFee(_pID);\r\n        uint256 _dividends = _eth.mul(_sellFee).div(10000);\r\n        uint256 _taxedEthereum = _eth.sub(_dividends);\r\n        \r\n        keySupply_ = keySupply_.sub(_amountOfkeys);\r\n\r\n        _plyr.keys = _plyr.keys.sub(_amountOfkeys);\r\n        _plyr.mask = _plyr.mask - (int256)(_taxedEthereum.add(profitPerShare_.mul(_amountOfkeys).div(magnitude)));\r\n        \r\n        if (keySupply_ > 0) {\r\n            profitPerShare_ = profitPerShare_.add((_dividends.mul(magnitude)).div(keySupply_));\r\n        }\r\n        \r\n        emit onSell(msg.sender, _pID, rID_, _amountOfkeys, _eth);\r\n    }\r\n//==============================================================================\r\n//   private functions\r\n//==============================================================================\r\n    function getPlayerID()\r\n        private\r\n        returns (uint256)\r\n    {\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        if (_pID == 0)\r\n        {\r\n            pID_++;\r\n            _pID = pID_;\r\n            pIDxAddr_[msg.sender] = _pID;\r\n            plyr_[_pID].addr = msg.sender;\r\n        } \r\n        return (_pID);\r\n    }\r\n\r\n    function getExtensionValue()\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Datasets.Round _round = round_[rID_];\r\n        uint256 _extensionEth = _round.investment.mul(extensionThreshold_).div(1000);\r\n        _extensionEth = _extensionEth >= extensionMin_ ? _extensionEth : extensionMin_;\r\n        _extensionEth = _extensionEth >= extensionMax_ ? _extensionEth : extensionMax_;\r\n        return _extensionEth;\r\n    }\r\n\r\n    function getReferBonus()\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _investment = round_[rID_].investment;\r\n        uint256 _referBonus = 10;\r\n        if (_investment >= 25000 ether && _investment < 50000 ether)\r\n            _referBonus = 20;\r\n        else if (_investment >= 50000 ether && _investment < 75000 ether)\r\n            _referBonus = 30;\r\n        else if (_investment >= 75000 ether && _investment < 100000 ether)\r\n            _referBonus = 40;\r\n        else if (_investment >= 100000 ether)\r\n            _referBonus = 50;\r\n        return _referBonus;\r\n    }\r\n\r\n    function endRoundAndGetEarnings(uint256 _pID)\r\n        private\r\n    {\r\n        Datasets.Round _round = round_[rID_];\r\n        if (_round.investment > pot_.mul(luckyEdge_).div(100) || now > _round.end)\r\n            endRound();\r\n\r\n        Datasets.Player _plyr = plyr_[_pID];\r\n        if (_plyr.lrnd == 0)\r\n            _plyr.lrnd = rID_;\r\n        uint256 _lrnd = _plyr.lrnd;\r\n        if (rID_ > 1 && _lrnd != rID_)\r\n        {\r\n            uint256 _plyrRoundKeys = plyrRnds_[_pID][_lrnd];\r\n            if (_plyrRoundKeys > 0 && round_[_lrnd].ppk > 0)\r\n                _plyr.luck = _plyr.luck.add(_plyrRoundKeys.mul(round_[_lrnd].ppk).div(magnitude));\r\n\r\n            _plyr.lrnd = rID_;\r\n        }\r\n    }\r\n\r\n    function endRound()\r\n        private\r\n    {\r\n        Datasets.Round _round = round_[rID_];\r\n\r\n        if (_round.keys > 0 && _round.investment <= pot_.mul(luckyEdge_).div(100) && now > _round.end)\r\n        {\r\n            uint256 _referBonus = getReferBonus();\r\n            uint256 _ref = pot_.mul(_referBonus).div(100);\r\n            uint256 _luck = pot_.sub(_ref);\r\n            _round.ppk = _luck.mul(magnitude).div(_round.keys);\r\n            pot_ = 0;\r\n            luckyRounds_++;\r\n\r\n            Referralcontract_.outerDividend.value(_ref)();\r\n\r\n            emit onWinLuckyPrize(rID_);\r\n        }\r\n\r\n        rID_++;\r\n        round_[rID_].strt = now;\r\n        round_[rID_].end = now.add(rndInit_);\r\n    }\r\n\r\n    function purchaseKeys(uint256 _pID, uint256 _eth)\r\n        private\r\n        returns(uint256,bool)\r\n    {\r\n        Datasets.Player _plyr = plyr_[_pID];\r\n        Datasets.Round _round = round_[rID_];\r\n\r\n        if (_eth > 1000000000)\r\n        {\r\n            uint256 _luck = _eth.mul(luckyBonus_).div(100);\r\n            uint256 _amountOfkeys = ethereumTokeys(_eth.sub(_luck));\r\n            \r\n            bool _timeExtended = false;\r\n            if (_eth >= getExtensionValue())\r\n            {\r\n                _round.end = _round.end.add(rndInc_);\r\n                if (_round.end > now.add(rndInit_))\r\n                    _round.end = now.add(rndInit_);\r\n                _timeExtended = true;\r\n            }\r\n\r\n            uint256 _totalKeys = _plyr.keys.add(_amountOfkeys);\r\n            if (_plyr.keys == 0)\r\n                _plyr.keytime = now;\r\n            else\r\n                _plyr.keytime = now.sub(now.sub(_plyr.keytime).mul(_plyr.keys).div(_totalKeys));\r\n            _plyr.keys = _totalKeys;\r\n            _plyr.mask = _plyr.mask + (int256)(profitPerShare_.mul(_amountOfkeys).div(magnitude));\r\n\r\n            _round.keys = _round.keys.add(_amountOfkeys);\r\n            _round.investment = _round.investment.add(_eth);\r\n\r\n            plyrRnds_[_pID][rID_] = plyrRnds_[_pID][rID_].add(_amountOfkeys);\r\n\r\n            keySupply_ = keySupply_.add(_amountOfkeys);\r\n            totalInvestment_ = totalInvestment_.add(_eth);\r\n            pot_ = pot_.add(_luck);\r\n            \r\n            return (_amountOfkeys,_timeExtended);\r\n        }\r\n        return (0,false);\r\n    }\r\n\r\n    function withdrawEarnings(uint256 _pID)\r\n        private\r\n        returns(uint256,uint256)\r\n    {\r\n        uint256 _dividends = getPlayerDividends(_pID);\r\n        uint256 _luckBonus = getPlayerLuckyBonus(_pID);\r\n\r\n        if (_dividends > 0)\r\n            plyr_[_pID].mask = (int256)(plyr_[_pID].keys.mul(profitPerShare_).div(magnitude));\r\n        if (_luckBonus > 0)\r\n            plyr_[_pID].luck = 0;\r\n\r\n        return (_dividends,_luckBonus);\r\n    }\r\n//==============================================================================\r\n//   view only functions\r\n//==============================================================================\r\n    function getReferralContract()\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        return address(Referralcontract_);\r\n    }\r\n\r\n    function getBuyPrice(uint256 _keysToBuy)\r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        uint256 _amountOfkeys = ethereumTokeys(1e18);\r\n        return _keysToBuy.mul(magnitude).div(_amountOfkeys);\r\n    }\r\n\r\n    function getSellPrice(uint256 _keysToSell)\r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        require(_keysToSell <= keySupply_, \"exceeded the maximum\");\r\n        uint256 _ethereum = keysToEthereum(_keysToSell);\r\n        uint256 _dividends = _ethereum.mul(sellFee_).div(10000);\r\n        uint256 _taxedEthereum = _ethereum.sub(_dividends);\r\n        return _taxedEthereum;\r\n    }\r\n\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return this.balance;\r\n    }\r\n\r\n    function calcLuckEdge()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return pot_.mul(luckyEdge_).div(100);\r\n    }\r\n\r\n    function calcSellFee(uint256 _pID)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _attenuation = now.sub(plyr_[_pID].keytime).div(86400).mul(attenuationFee_);\r\n        if (_attenuation > 100)\r\n            _attenuation = 100;\r\n        uint256 _sellFee = sellFee_.sub(sellFee_.mul(_attenuation).div(100));\r\n        return _sellFee;\r\n    }\r\n\r\n    function getPlayerDividends(uint256 _pID)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        Datasets.Player _plyr = plyr_[_pID];\r\n        return (uint256)((int256)(_plyr.keys.mul(profitPerShare_).div(magnitude)) - _plyr.mask);\r\n    }\r\n\r\n    function getPlayerLuckyBonus(uint256 _pID)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        Datasets.Player _plyr = plyr_[_pID];\r\n        uint256 _lrnd = _plyr.lrnd;\r\n        Datasets.Round _round = round_[_lrnd];\r\n        uint256 _plyrRoundKeys = plyrRnds_[_pID][_lrnd];\r\n        uint256 _luckBonus = _plyr.luck;\r\n\r\n        if (_lrnd != rID_ && _lrnd > 0 && _plyrRoundKeys > 0 && _round.ppk > 0)\r\n            _luckBonus = _luckBonus.add(_plyrRoundKeys.mul(_round.ppk).div(magnitude));\r\n\r\n        return _luckBonus;\r\n    }\r\n\r\n    function calcRoundEarnings(uint256 _pID, uint256 _rID)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return plyrRnds_[_pID][_rID].mul(round_[_rID].ppk).div(magnitude);\r\n    }\r\n\r\n//==============================================================================\r\n//   key calculate\r\n//==============================================================================\r\n    uint256 constant internal keyPriceInitial_ = 0.0000001 ether;\r\n    uint256 constant internal keyPriceIncremental_ = 0.00000001 ether;\r\n\r\n    function ethereumTokeys(uint256 _ethereum)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _keyPriceInitial = keyPriceInitial_ * 1e18;\r\n        uint256 _keysReceived = \r\n         (\r\n            (\r\n                SafeMath.sub(\r\n                    (SafeMath.sqrt\r\n                        (\r\n                            (_keyPriceInitial**2)\r\n                            +\r\n                            (2*(keyPriceIncremental_ * 1e18)*(_ethereum * 1e18))\r\n                            +\r\n                            (((keyPriceIncremental_)**2)*(keySupply_**2))\r\n                            +\r\n                            (2*(keyPriceIncremental_)*_keyPriceInitial*keySupply_)\r\n                        )\r\n                    ), _keyPriceInitial\r\n                )\r\n            )/(keyPriceIncremental_)\r\n        )-(keySupply_)\r\n        ;\r\n  \r\n        return _keysReceived;\r\n    }\r\n    \r\n    function keysToEthereum(uint256 _keys)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 keys_ = (_keys + 1e18);\r\n        uint256 _keySupply = (keySupply_ + 1e18);\r\n        uint256 _etherReceived =\r\n        (\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            keyPriceInitial_ +(keyPriceIncremental_ * (_keySupply/1e18))\r\n                        )-keyPriceIncremental_\r\n                    )*(keys_ - 1e18)\r\n                ),(keyPriceIncremental_*((keys_**2-keys_)/1e18))/2\r\n            )\r\n        /1e18);\r\n        return _etherReceived;\r\n    }\r\n//==============================================================================\r\n//   administrator only functions\r\n//============================================================================== \r\n    function setAdministrator(bytes32 _identifier, bool _status)\r\n        public\r\n        onlyAdministrator()\r\n    {\r\n        administrators[_identifier] = _status;\r\n    }\r\n    \r\n    function setReferralContract(address _referral)\r\n        public\r\n        onlyAdministrator()\r\n    {\r\n        require(address(Referralcontract_) == address(0), \"silly dev, you already did that\");\r\n        Referralcontract_ = ReferralInterface(_referral);\r\n    }\r\n\r\n    bool public activated_ = false;\r\n    function activate()\r\n        public\r\n        onlyAdministrator()\r\n    {\r\n        require(address(Referralcontract_) != address(0), \"must link to Referral Contract\");\r\n        require(activated_ == false, \"already activated\");\r\n        \r\n        activated_ = true;\r\n        rID_ = 1;\r\n        round_[rID_].strt = now;\r\n        round_[rID_].end = now.add(rndInit_);\r\n\r\n        emit onActive();\r\n    }\r\n\r\n    function updateConfigs(\r\n        uint16 _sellFee,uint8 _luckyBonus,uint8 _attenuationFee,uint8 _luckyEdge,uint8 _extensionThreshold,\r\n        uint256 _extensionMin,uint256 _extensionMax,uint256 _rndInit,uint256 _rndInc)\r\n        public\r\n        onlyAdministrator()\r\n    {\r\n        require(_sellFee >= 0 && _sellFee <= 10000, \"out of range.\");\r\n        require(_luckyBonus >= 0 && _luckyBonus <= 100, \"out of range.\");\r\n        require(_attenuationFee >= 0 && _attenuationFee <= 100, \"out of range.\");\r\n        require(_luckyEdge >= 0 && _luckyEdge <= 100, \"out of range.\");\r\n        require(_extensionThreshold >= 0 && _extensionThreshold <= 1000, \"out of range.\");\r\n\r\n        sellFee_ = _sellFee == 0 ? sellFee_ : _sellFee;\r\n        luckyBonus_ = _luckyBonus == 0 ? luckyBonus_ : _luckyBonus;\r\n        attenuationFee_ = _attenuationFee == 0 ? attenuationFee_ : _attenuationFee;\r\n        luckyEdge_ = _luckyEdge == 0 ? luckyEdge_ : _luckyEdge;\r\n        extensionThreshold_ = _extensionThreshold == 0 ? extensionThreshold_ : _extensionThreshold;\r\n        \r\n        extensionMin_ = _extensionMin == 0 ? extensionMin_ : _extensionMin;\r\n        extensionMax_ = _extensionMax == 0 ? extensionMax_ : _extensionMax;\r\n        rndInit_ = _rndInit == 0 ? rndInit_ : _rndInit;\r\n        rndInc_ = _rndInc == 0 ? rndInc_ : _rndInc;\r\n    }\r\n\r\n    function administratorInvest()\r\n        public\r\n        payable\r\n        onlyAdministrator()\r\n    {\r\n        administratorBalance_ = administratorBalance_.add(msg.value);\r\n    }\r\n\r\n    function administratorWithdraw(uint256 _eth)\r\n        public\r\n        onlyAdministrator()\r\n    {\r\n        require(_eth <= administratorBalance_);\r\n        administratorBalance_ = administratorBalance_.sub(_eth);\r\n        msg.sender.transfer(_eth);\r\n    }\r\n}\r\n\r\ninterface ReferralInterface {\r\n    function outerDividend() external payable;\r\n}\r\n\r\nlibrary Datasets {\r\n    struct Player {\r\n        address addr;\r\n        uint256 keys;\r\n        int256 mask;\r\n        uint256 luck;\r\n        uint256 lrnd;\r\n        uint256 keytime;\r\n    }\r\n\r\n    struct Round {\r\n        uint256 strt;\r\n        uint256 end;\r\n        uint256 keys;\r\n        uint256 ppk;\r\n        uint256 investment;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rndInc_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"setReferralContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luckyRounds_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calcLuckEdge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_keysToBuy\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"administratorWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extensionMin_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReferralContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round_\",\"outputs\":[{\"name\":\"strt\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"ppk\",\"type\":\"uint256\"},{\"name\":\"investment\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_rID\",\"type\":\"uint256\"}],\"name\":\"calcRoundEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"attenuationFee_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellFee\",\"type\":\"uint16\"},{\"name\":\"_luckyBonus\",\"type\":\"uint8\"},{\"name\":\"_attenuationFee\",\"type\":\"uint8\"},{\"name\":\"_luckyEdge\",\"type\":\"uint8\"},{\"name\":\"_extensionThreshold\",\"type\":\"uint8\"},{\"name\":\"_extensionMin\",\"type\":\"uint256\"},{\"name\":\"_extensionMax\",\"type\":\"uint256\"},{\"name\":\"_rndInit\",\"type\":\"uint256\"},{\"name\":\"_rndInc\",\"type\":\"uint256\"}],\"name\":\"updateConfigs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luckyEdge_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rndInit_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luckyBonus_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pot_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extensionThreshold_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extensionMax_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keySupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"bytes32\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrRnds_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reLoad\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"administratorInvest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"outerDividend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_keysToSell\",\"type\":\"uint256\"}],\"name\":\"getSellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"calcSellFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerLuckyBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"int256\"},{\"name\":\"luck\",\"type\":\"uint256\"},{\"name\":\"lrnd\",\"type\":\"uint256\"},{\"name\":\"keytime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvestment_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfkeys\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellFee_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"onActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_dividends\",\"type\":\"uint256\"}],\"name\":\"onOuterDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_pID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_key\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timeExtended\",\"type\":\"bool\"}],\"name\":\"onBuyKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_pID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_dividend\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_luckBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_key\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timeExtended\",\"type\":\"bool\"}],\"name\":\"onReload\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_pID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_dividend\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_luckBonus\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_pID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_rID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_key\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"onSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_rID\",\"type\":\"uint256\"}],\"name\":\"onWinLuckyPrize\",\"type\":\"event\"}]","ContractName":"PT7D","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://99e17ce55eb95c3ff4da14016e0f224358679436062269bc63c2596dd1b619c0"}]}