{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\n/**\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n * Released under the MIT license.\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\r\n*/\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20Interface.sol\r\n\r\n/**\r\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n * Released under the MIT license.\r\n * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/LICENSE\r\n*/\r\n\r\n/**\r\n * @title \r\n * @dev \r\n */\r\ncontract ERC20Interface {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/DAICOVO/TimeLockPool.sol\r\n\r\n/// @title A token-pool that locks deposited tokens until their date of maturity.\r\n/// @author ICOVO AG\r\n/// @dev It regards the address \"0x0\" as ETH when you speficy a token.\r\ncontract TimeLockPool{\r\n    using SafeMath for uint256;\r\n\r\n    struct LockedBalance {\r\n      uint256 balance;\r\n      uint256 releaseTime;\r\n    }\r\n\r\n    /*\r\n      structure: lockedBalnces[owner][token] = LockedBalance(balance, releaseTime);\r\n      token address = '0x0' stands for ETH (unit = wei)\r\n    */\r\n    mapping (address => mapping (address => LockedBalance[])) public lockedBalances;\r\n\r\n    event Deposit(\r\n        address indexed owner,\r\n        address indexed tokenAddr,\r\n        uint256 amount,\r\n        uint256 releaseTime\r\n    );\r\n\r\n    event Withdraw(\r\n        address indexed owner,\r\n        address indexed tokenAddr,\r\n        uint256 amount\r\n    );\r\n\r\n    /// @dev Constructor. \r\n    /// @return \r\n    constructor() public {}\r\n\r\n    /// @dev Deposit tokens to specific account with time-lock.\r\n    /// @param tokenAddr The contract address of a ERC20/ERC223 token.\r\n    /// @param account The owner of deposited tokens.\r\n    /// @param amount Amount to deposit.\r\n    /// @param releaseTime Time-lock period.\r\n    /// @return True if it is successful, revert otherwise.\r\n    function depositERC20 (\r\n        address tokenAddr,\r\n        address account,\r\n        uint256 amount,\r\n        uint256 releaseTime\r\n    ) external returns (bool) {\r\n        require(account != address(0x0));\r\n        require(tokenAddr != 0x0);\r\n        require(msg.value == 0);\r\n        require(amount > 0);\r\n        require(ERC20Interface(tokenAddr).transferFrom(msg.sender, this, amount));\r\n\r\n        lockedBalances[account][tokenAddr].push(LockedBalance(amount, releaseTime));\r\n        emit Deposit(account, tokenAddr, amount, releaseTime);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Deposit ETH to specific account with time-lock.\r\n    /// @param account The owner of deposited tokens.\r\n    /// @param releaseTime Timestamp to release the fund.\r\n    /// @return True if it is successful, revert otherwise.\r\n    function depositETH (\r\n        address account,\r\n        uint256 releaseTime\r\n    ) external payable returns (bool) {\r\n        require(account != address(0x0));\r\n        address tokenAddr = address(0x0);\r\n        uint256 amount = msg.value;\r\n        require(amount > 0);\r\n\r\n        lockedBalances[account][tokenAddr].push(LockedBalance(amount, releaseTime));\r\n        emit Deposit(account, tokenAddr, amount, releaseTime);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Release the available balance of an account.\r\n    /// @param account An account to receive tokens.\r\n    /// @param tokenAddr An address of ERC20/ERC223 token.\r\n    /// @param max_count Max number of records to withdraw.\r\n    /// @return True if it is successful, revert otherwise.\r\n    function withdraw (address account, address tokenAddr, uint256 max_count) external returns (bool) {\r\n        require(account != address(0x0));\r\n\r\n        uint256 release_amount = 0;\r\n        for (uint256 i = 0; i < lockedBalances[account][tokenAddr].length && i < max_count; i++) {\r\n            if (lockedBalances[account][tokenAddr][i].balance > 0 &&\r\n                lockedBalances[account][tokenAddr][i].releaseTime <= block.timestamp) {\r\n\r\n                release_amount = release_amount.add(lockedBalances[account][tokenAddr][i].balance);\r\n                lockedBalances[account][tokenAddr][i].balance = 0;\r\n            }\r\n        }\r\n\r\n        require(release_amount > 0);\r\n\r\n        if (tokenAddr == 0x0) {\r\n            if (!account.send(release_amount)) {\r\n                revert();\r\n            }\r\n            emit Withdraw(account, tokenAddr, release_amount);\r\n            return true;\r\n        } else {\r\n            if (!ERC20Interface(tokenAddr).transfer(account, release_amount)) {\r\n                revert();\r\n            }\r\n            emit Withdraw(account, tokenAddr, release_amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns total amount of balances which already passed release time.\r\n    /// @param account An account to receive tokens.\r\n    /// @param tokenAddr An address of ERC20/ERC223 token.\r\n    /// @return Available balance of specified token.\r\n    function getAvailableBalanceOf (address account, address tokenAddr) \r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(account != address(0x0));\r\n\r\n        uint256 balance = 0;\r\n        for(uint256 i = 0; i < lockedBalances[account][tokenAddr].length; i++) {\r\n            if (lockedBalances[account][tokenAddr][i].releaseTime <= block.timestamp) {\r\n                balance = balance.add(lockedBalances[account][tokenAddr][i].balance);\r\n            }\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    /// @dev Returns total amount of balances which are still locked.\r\n    /// @param account An account to receive tokens.\r\n    /// @param tokenAddr An address of ERC20/ERC223 token.\r\n    /// @return Locked balance of specified token.\r\n    function getLockedBalanceOf (address account, address tokenAddr)\r\n        external\r\n        view\r\n        returns (uint256) \r\n    {\r\n        require(account != address(0x0));\r\n\r\n        uint256 balance = 0;\r\n        for(uint256 i = 0; i < lockedBalances[account][tokenAddr].length; i++) {\r\n            if(lockedBalances[account][tokenAddr][i].releaseTime > block.timestamp) {\r\n                balance = balance.add(lockedBalances[account][tokenAddr][i].balance);\r\n            }\r\n        }\r\n        return balance;\r\n    }\r\n\r\n    /// @dev Returns next release time of locked balances.\r\n    /// @param account An account to receive tokens.\r\n    /// @param tokenAddr An address of ERC20/ERC223 token.\r\n    /// @return Timestamp of next release.\r\n    function getNextReleaseTimeOf (address account, address tokenAddr)\r\n        external\r\n        view\r\n        returns (uint256) \r\n    {\r\n        require(account != address(0x0));\r\n\r\n        uint256 nextRelease = 2**256 - 1;\r\n        for (uint256 i = 0; i < lockedBalances[account][tokenAddr].length; i++) {\r\n            if (lockedBalances[account][tokenAddr][i].releaseTime > block.timestamp &&\r\n               lockedBalances[account][tokenAddr][i].releaseTime < nextRelease) {\r\n\r\n                nextRelease = lockedBalances[account][tokenAddr][i].releaseTime;\r\n            }\r\n        }\r\n\r\n        /* returns 0 if there are no more locked balances. */\r\n        if (nextRelease == 2**256 - 1) {\r\n            nextRelease = 0;\r\n        }\r\n        return nextRelease;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"depositETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"getNextReleaseTimeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"getLockedBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"getAvailableBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"max_count\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"TimeLockPool","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a3ba4af8047a348c4e1f2434853f94f4b33005a883f7b5efb3d5971d3d5bebf3"}]}