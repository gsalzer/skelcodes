{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract ERC820Registry {\r\n    function getManager(address addr) public view returns(address);\r\n    function setManager(address addr, address newManager) public;\r\n    function getInterfaceImplementer(address addr, bytes32 iHash) public constant returns (address);\r\n    function setInterfaceImplementer(address addr, bytes32 iHash, address implementer) public;\r\n}\r\n\r\ncontract ERC820Implementer {\r\n    ERC820Registry erc820Registry = ERC820Registry(0x991a1bcb077599290d7305493c9A630c20f8b798);\r\n\r\n    function setInterfaceImplementation(string ifaceLabel, address impl) internal {\r\n        bytes32 ifaceHash = keccak256(ifaceLabel);\r\n        erc820Registry.setInterfaceImplementer(this, ifaceHash, impl);\r\n    }\r\n\r\n    function interfaceAddr(address addr, string ifaceLabel) internal constant returns(address) {\r\n        bytes32 ifaceHash = keccak256(ifaceLabel);\r\n        return erc820Registry.getInterfaceImplementer(addr, ifaceHash);\r\n    }\r\n\r\n    function delegateManagement(address newManager) internal {\r\n        erc820Registry.setManager(this, newManager);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n/* This Source Code Form is subject to the terms of the Mozilla Public\r\n* License, v. 2.0. If a copy of the MPL was not distributed with this\r\n* file, You can obtain one at http://mozilla.org/MPL/2.0/. */\r\n\r\n\r\n/// @title ERC777 ReferenceToken Contract\r\n/// @author Jordi Baylina, Jacques Dafflon\r\n/// @dev This token contract's goal is to give an example implementation\r\n///  of ERC777 with ERC20 compatiblity using the base ERC777 and ERC20\r\n///  implementations provided with the erc777 package.\r\n///  This contract does not define any standard, but can be taken as a reference\r\n///  implementation in case of any ambiguity into the standard\r\n\r\n\r\n/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\r\n\r\n\r\n\r\n/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\r\n *\r\n * This code has not been reviewed.\r\n * Do not use or deploy this code before reviewing it personally first.\r\n */\r\n// solhint-disable-next-line compiler-fixed\r\n\r\n\r\n\r\ninterface ERC20Token {\r\n    function name() public constant returns (string);\r\n    function symbol() public constant returns (string);\r\n    function decimals() public constant returns (uint8);\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address owner) public constant returns (uint256);\r\n    function transfer(address to, uint256 amount) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) public returns (bool);\r\n    function approve(address spender, uint256 amount) public returns (bool);\r\n    function allowance(address owner, address spender) public constant returns (uint256);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n\r\n/* This Source Code Form is subject to the terms of the Mozilla Public\r\n* License, v. 2.0. If a copy of the MPL was not distributed with this\r\n* file, You can obtain one at http://mozilla.org/MPL/2.0/. */\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\r\n *\r\n * This code has not been reviewed.\r\n * Do not use or deploy this code before reviewing it personally first.\r\n */\r\n// solhint-disable-next-line compiler-fixed\r\n\r\n\r\n\r\ninterface ERC777Token {\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address owner) public view returns (uint256);\r\n    function granularity() public view returns (uint256);\r\n\r\n    function defaultOperators() public view returns (address[]);\r\n    function isOperatorFor(address operator, address tokenHolder) public view returns (bool);\r\n    function authorizeOperator(address operator) public;\r\n    function revokeOperator(address operator) public;\r\n\r\n    function send(address to, uint256 amount, bytes holderData) public;\r\n    function operatorSend(address from, address to, uint256 amount, bytes holderData, bytes operatorData) public;\r\n\r\n    function burn(uint256 amount, bytes holderData) public;\r\n    function operatorBurn(address from, uint256 amount, bytes holderData, bytes operatorData) public;\r\n\r\n    event Sent(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        bytes holderData,\r\n        bytes operatorData\r\n    ); // solhint-disable-next-line separate-by-one-line-in-contract\r\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes operatorData);\r\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes holderData, bytes operatorData);\r\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n}\r\n\r\n/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\r\n *\r\n * This code has not been reviewed.\r\n * Do not use or deploy this code before reviewing it personally first.\r\n */\r\n// solhint-disable-next-line compiler-fixed\r\n\r\n\r\n\r\ninterface ERC777TokensSender {\r\n    function tokensToSend(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint amount,\r\n        bytes userData,\r\n        bytes operatorData\r\n    ) public;\r\n}\r\n\r\n/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\r\n *\r\n * This code has not been reviewed.\r\n * Do not use or deploy this code before reviewing it personally first.\r\n */\r\n// solhint-disable-next-line compiler-fixed\r\n\r\n\r\n\r\ninterface ERC777TokensRecipient {\r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint amount,\r\n        bytes userData,\r\n        bytes operatorData\r\n    ) public;\r\n}\r\n\r\n\r\n\r\ncontract ERC777BaseToken is ERC777Token, ERC820Implementer {\r\n    using SafeMath for uint256;\r\n\r\n    string internal mName;\r\n    string internal mSymbol;\r\n    uint256 internal mGranularity;\r\n    uint256 internal mTotalSupply;\r\n\r\n\r\n    mapping(address => uint) internal mBalances;\r\n    mapping(address => mapping(address => bool)) internal mAuthorized;\r\n\r\n    address[] internal mDefaultOperators;\r\n    mapping(address => bool) internal mIsDefaultOperator;\r\n    mapping(address => mapping(address => bool)) internal mRevokedDefaultOperator;\r\n\r\n    /* -- Constructor -- */\r\n    //\r\n    /// @notice Constructor to create a ReferenceToken\r\n    /// @param _name Name of the new token\r\n    /// @param _symbol Symbol of the new token.\r\n    /// @param _granularity Minimum transferable chunk.\r\n    function ERC777BaseToken(string _name, string _symbol, uint256 _granularity, address[] _defaultOperators) internal {\r\n        mName = _name;\r\n        mSymbol = _symbol;\r\n        mTotalSupply = 0;\r\n        require(_granularity >= 1);\r\n        mGranularity = _granularity;\r\n\r\n        mDefaultOperators = _defaultOperators;\r\n        for (uint i = 0; i < mDefaultOperators.length; i++) { mIsDefaultOperator[mDefaultOperators[i]] = true; }\r\n\r\n        setInterfaceImplementation(\"ERC777Token\", this);\r\n    }\r\n\r\n    /* -- ERC777 Interface Implementation -- */\r\n    //\r\n    /// @return the name of the token\r\n    function name() public constant returns (string) { return mName; }\r\n\r\n    /// @return the symbol of the token\r\n    function symbol() public constant returns (string) { return mSymbol; }\r\n\r\n    /// @return the granularity of the token\r\n    function granularity() public constant returns (uint256) { return mGranularity; }\r\n\r\n    /// @return the total supply of the token\r\n    function totalSupply() public constant returns (uint256) { return mTotalSupply; }\r\n\r\n    /// @notice Return the account balance of some account\r\n    /// @param _tokenHolder Address for which the balance is returned\r\n    /// @return the balance of `_tokenAddress`.\r\n    function balanceOf(address _tokenHolder) public constant returns (uint256) { return mBalances[_tokenHolder]; }\r\n\r\n    /// @notice Return the list of default operators\r\n    /// @return the list of all the default operators\r\n    function defaultOperators() public view returns (address[]) { return mDefaultOperators; }\r\n\r\n    /// @notice Send `_amount` of tokens to address `_to` passing `_userData` to the recipient\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be sent\r\n    function send(address _to, uint256 _amount, bytes _userData) public {\r\n        doSend(msg.sender, msg.sender, _to, _amount, _userData, \"\", true);\r\n    }\r\n\r\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\r\n    /// @param _operator The operator that wants to be Authorized\r\n    function authorizeOperator(address _operator) public {\r\n        require(_operator != msg.sender);\r\n        if (mIsDefaultOperator[_operator]) {\r\n            mRevokedDefaultOperator[_operator][msg.sender] = false;\r\n        } else {\r\n            mAuthorized[_operator][msg.sender] = true;\r\n        }\r\n        AuthorizedOperator(_operator, msg.sender);\r\n    }\r\n\r\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\r\n    /// @param _operator The operator that wants to be Revoked\r\n    function revokeOperator(address _operator) public {\r\n        require(_operator != msg.sender);\r\n        if (mIsDefaultOperator[_operator]) {\r\n            mRevokedDefaultOperator[_operator][msg.sender] = true;\r\n        } else {\r\n            mAuthorized[_operator][msg.sender] = false;\r\n        }\r\n        RevokedOperator(_operator, msg.sender);\r\n    }\r\n\r\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\r\n    /// @param _operator address to check if it has the right to manage the tokens\r\n    /// @param _tokenHolder address which holds the tokens to be managed\r\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\r\n    function isOperatorFor(address _operator, address _tokenHolder) public constant returns (bool) {\r\n        return (_operator == _tokenHolder\r\n            || mAuthorized[_operator][_tokenHolder]\r\n            || (mIsDefaultOperator[_operator] && !mRevokedDefaultOperator[_operator][_tokenHolder]));\r\n    }\r\n\r\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\r\n    /// @param _from The address holding the tokens being sent\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be sent\r\n    /// @param _userData Data generated by the user to be sent to the recipient\r\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\r\n    function operatorSend(address _from, address _to, uint256 _amount, bytes _userData, bytes _operatorData) public {\r\n        require(isOperatorFor(msg.sender, _from));\r\n        doSend(msg.sender, _from, _to, _amount, _userData, _operatorData, true);\r\n    }\r\n\r\n    function burn(uint256 _amount, bytes _holderData) public {\r\n        doBurn(msg.sender, msg.sender, _amount, _holderData, \"\");\r\n    }\r\n\r\n    function operatorBurn(address _tokenHolder, uint256 _amount, bytes _holderData, bytes _operatorData) public {\r\n        require(isOperatorFor(msg.sender, _tokenHolder));\r\n        doBurn(msg.sender, _tokenHolder, _amount, _holderData, _operatorData);\r\n    }\r\n\r\n    /* -- Helper Functions -- */\r\n    //\r\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\r\n    /// @param _amount The quantity that want's to be checked\r\n    function requireMultiple(uint256 _amount) internal view {\r\n        require(_amount.div(mGranularity).mul(mGranularity) == _amount);\r\n    }\r\n\r\n    /// @notice Check whether an address is a regular address or not.\r\n    /// @param _addr Address of the contract that has to be checked\r\n    /// @return `true` if `_addr` is a regular address (not a contract)\r\n    function isRegularAddress(address _addr) internal constant returns(bool) {\r\n        if (_addr == 0) { return false; }\r\n        uint size;\r\n        assembly { size := extcodesize(_addr) } // solhint-disable-line no-inline-assembly\r\n        return size == 0;\r\n    }\r\n\r\n    /// @notice Helper function actually performing the sending of tokens.\r\n    /// @param _operator The address performing the send\r\n    /// @param _from The address holding the tokens being sent\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be sent\r\n    /// @param _userData Data generated by the user to be passed to the recipient\r\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\r\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\r\n    ///  implementing `erc777_tokenHolder`.\r\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\r\n    ///  functions SHOULD set this parameter to `false`.\r\n    function doSend(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes _userData,\r\n        bytes _operatorData,\r\n        bool _preventLocking\r\n    )\r\n        internal\r\n    {\r\n        requireMultiple(_amount);\r\n\r\n        callSender(_operator, _from, _to, _amount, _userData, _operatorData);\r\n\r\n        require(_to != address(0));          // forbid sending to 0x0 (=burning)\r\n        require(mBalances[_from] >= _amount); // ensure enough funds\r\n\r\n        mBalances[_from] = mBalances[_from].sub(_amount);\r\n        mBalances[_to] = mBalances[_to].add(_amount);\r\n\r\n        callRecipient(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\r\n\r\n        Sent(_operator, _from, _to, _amount, _userData, _operatorData);\r\n    }\r\n\r\n    /// @notice Helper function actually performing the burning of tokens.\r\n    /// @param _operator The address performing the burn\r\n    /// @param _tokenHolder The address holding the tokens being burn\r\n    /// @param _amount The number of tokens to be burnt\r\n    /// @param _holderData Data generated by the token holder\r\n    /// @param _operatorData Data generated by the operator\r\n    function doBurn(address _operator, address _tokenHolder, uint256 _amount, bytes _holderData, bytes _operatorData)\r\n        internal\r\n    {\r\n        requireMultiple(_amount);\r\n        require(balanceOf(_tokenHolder) >= _amount);\r\n\r\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\r\n        mTotalSupply = mTotalSupply.sub(_amount);\r\n\r\n        callSender(_operator, _tokenHolder, 0x0, _amount, _holderData, _operatorData);\r\n        Burned(_operator, _tokenHolder, _amount, _holderData, _operatorData);\r\n    }\r\n\r\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\r\n    ///  May throw according to `_preventLocking`\r\n    /// @param _operator The address performing the send or mint\r\n    /// @param _from The address holding the tokens being sent\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be sent\r\n    /// @param _userData Data generated by the user to be passed to the recipient\r\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\r\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\r\n    ///  implementing `ERC777TokensRecipient`.\r\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\r\n    ///  functions SHOULD set this parameter to `false`.\r\n    function callRecipient(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes _userData,\r\n        bytes _operatorData,\r\n        bool _preventLocking\r\n    )\r\n        internal\r\n    {\r\n        address recipientImplementation = interfaceAddr(_to, \"ERC777TokensRecipient\");\r\n        if (recipientImplementation != 0) {\r\n            ERC777TokensRecipient(recipientImplementation).tokensReceived(\r\n                _operator, _from, _to, _amount, _userData, _operatorData);\r\n        } else if (_preventLocking) {\r\n            require(isRegularAddress(_to));\r\n        }\r\n    }\r\n\r\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\r\n    ///  May throw according to `_preventLocking`\r\n    /// @param _from The address holding the tokens being sent\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be sent\r\n    /// @param _userData Data generated by the user to be passed to the recipient\r\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\r\n    ///  implementing `ERC777TokensSender`.\r\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\r\n    ///  functions SHOULD set this parameter to `false`.\r\n    function callSender(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes _userData,\r\n        bytes _operatorData\r\n    )\r\n        internal\r\n    {\r\n        address senderImplementation = interfaceAddr(_from, \"ERC777TokensSender\");\r\n        if (senderImplementation == 0) { return; }\r\n        ERC777TokensSender(senderImplementation).tokensToSend(_operator, _from, _to, _amount, _userData, _operatorData);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ERC777ERC20BaseToken is ERC20Token, ERC777BaseToken {\r\n    bool internal mErc20compatible;\r\n    bool public unlocked;\r\n\r\n    mapping(address => mapping(address => bool)) internal mAuthorized;\r\n    mapping(address => mapping(address => uint256)) internal mAllowed;\r\n\r\n    function ERC777ERC20BaseToken(\r\n        string _name,\r\n        string _symbol,\r\n        uint256 _granularity,\r\n        address[] _defaultOperators\r\n    )\r\n        internal ERC777BaseToken(_name, _symbol, _granularity, _defaultOperators)\r\n    {\r\n        mErc20compatible = true;\r\n        unlocked = true;\r\n        setInterfaceImplementation(\"ERC20Token\", this);\r\n    }\r\n\r\n    /// @notice This modifier is applied to erc20 obsolete methods that are\r\n    ///  implemented only to maintain backwards compatibility. When the erc20\r\n    ///  compatibility is disabled, this methods will fail.\r\n    modifier erc20 () {\r\n        require(mErc20compatible);\r\n        _;\r\n    }\r\n\r\n    /// @notice For Backwards compatibility\r\n    /// @return The decimls of the token. Forced to 18 in ERC777.\r\n    function decimals() public erc20 constant returns (uint8) { return uint8(18); }\r\n\r\n    /// @notice ERC20 backwards compatible transfer.\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be transferred\r\n    /// @return `true`, if the transfer can't be done, it should fail.\r\n    function transfer(address _to, uint256 _amount) public erc20 returns (bool success) {\r\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\r\n        return true;\r\n    }\r\n\r\n    /// @notice ERC20 backwards compatible transferFrom.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be transferred\r\n    /// @return `true`, if the transfer can't be done, it should fail.\r\n    function transferFrom(address _from, address _to, uint256 _amount) public erc20 returns (bool success) {\r\n        require(_amount <= mAllowed[_from][msg.sender]);\r\n\r\n        // Cannot be after doSend because of tokensReceived re-entry\r\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\r\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\r\n        return true;\r\n    }\r\n\r\n    /// @notice ERC20 backwards compatible approve.\r\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The number of tokens to be approved for transfer\r\n    /// @return `true`, if the approve can't be done, it should fail.\r\n    function approve(address _spender, uint256 _amount) public erc20 returns (bool success) {\r\n        mAllowed[msg.sender][_spender] = _amount;\r\n        Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice ERC20 backwards compatible allowance.\r\n    ///  This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender) public erc20 constant returns (uint256 remaining) {\r\n        return mAllowed[_owner][_spender];\r\n    }\r\n\r\n    function doSend(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes _userData,\r\n        bytes _operatorData,\r\n        bool _preventLocking\r\n    )\r\n        internal\r\n    {\r\n        require(unlocked);\r\n        super.doSend(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\r\n        if (mErc20compatible) { Transfer(_from, _to, _amount); }\r\n    }\r\n\r\n    function doBurn(address _operator, address _tokenHolder, uint256 _amount, bytes _holderData, bytes _operatorData)\r\n        internal\r\n    {\r\n        super.doBurn(_operator, _tokenHolder, _amount, _holderData, _operatorData);\r\n        if (mErc20compatible) { Transfer(_tokenHolder, 0x0, _amount); }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract ReferenceToken is ERC777ERC20BaseToken, Ownable {\r\n\r\n    address private mBurnOperator;\r\n\r\n    function ReferenceToken(\r\n        string _name,\r\n        string _symbol,\r\n        uint256 _granularity,\r\n        address[] _defaultOperators,\r\n        address _burnOperator\r\n    ) public ERC777ERC20BaseToken(_name, _symbol, _granularity, _defaultOperators) {\r\n        mBurnOperator = _burnOperator;\r\n    }\r\n\r\n    /// @notice Disables the ERC20 interface. This function can only be called\r\n    ///  by the owner.\r\n    function disableERC20() public onlyOwner {\r\n        mErc20compatible = false;\r\n        setInterfaceImplementation(\"ERC20Token\", 0x0);\r\n    }\r\n\r\n    /// @notice Re enables the ERC20 interface. This function can only be called\r\n    ///  by the owner.\r\n    function enableERC20() public onlyOwner {\r\n        mErc20compatible = true;\r\n        setInterfaceImplementation(\"ERC20Token\", this);\r\n    }\r\n\r\n    /// @notice Disables an interface. This function can only be called\r\n    ///  by the owner.\r\n    function disableInterface(string _interface) public onlyOwner {\r\n        // mErc20compatible = false;\r\n        setInterfaceImplementation(_interface, 0x0);\r\n    }\r\n\r\n    /// @notice Enables an interface. This function can only be called\r\n    ///  by the owner.\r\n    function enableInterface(string _interface, address _impl) public onlyOwner { setInterfaceImplementation(_interface, _impl); }\r\n\r\n    /// @notice sets the manager of register implementations of interfaces. This function can only be called\r\n    ///  by the owner.\r\n    function delegateERC820Management(address _newManager) public onlyOwner { delegateManagement(_newManager); }\r\n\r\n    /// @notice Locks the token. In later stage, this feature will be disabled. This function can only be called\r\n    ///  by the owner.\r\n    function lock() public onlyOwner { unlocked = false; }\r\n\r\n    /// @notice Unlocks the token. This function can only be called\r\n    ///  by the owner.\r\n    function unlock() public onlyOwner { unlocked = true;}\r\n\r\n\r\n    /* -- Mint And Burn Functions (not part of the ERC777 standard, only the Events/tokensReceived call are) -- */\r\n    //\r\n    /// @notice Generates `_amount` tokens to be assigned to `_tokenHolder`\r\n    ///  Sample mint function to showcase the use of the `Minted` event and the logic to notify the recipient.\r\n    /// @param _tokenHolder The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @param _operatorData Data that will be passed to the recipient as a first transfer\r\n    function mint(address _tokenHolder, uint256 _amount, bytes _operatorData) public onlyOwner {\r\n        requireMultiple(_amount);\r\n        mTotalSupply = mTotalSupply.add(_amount);\r\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].add(_amount);\r\n\r\n        callRecipient(msg.sender, 0x0, _tokenHolder, _amount, \"\", _operatorData, true);\r\n\r\n        Minted(msg.sender, _tokenHolder, _amount, _operatorData);\r\n        if (mErc20compatible) { Transfer(0x0, _tokenHolder, _amount); }\r\n    }\r\n\r\n    /// @notice Burns `_amount` tokens from `_tokenHolder`\r\n    ///  Silly example of overriding the `burn` function to only let the owner burn its tokens.\r\n    ///  Do not forget to override the `burn` function in your token contract if you want to prevent users from\r\n    ///  burning their tokens.\r\n    /// @param _amount The quantity of tokens to burn\r\n    function burn(uint256 _amount, bytes _holderData) public onlyOwner {\r\n        super.burn(_amount, _holderData);\r\n    }\r\n\r\n    /// @notice Burns `_amount` tokens from `_tokenHolder` by `_operator`\r\n    ///  Silly example of overriding the `operatorBurn` function to only let a specific operator burn tokens.\r\n    ///  Do not forget to override the `operatorBurn` function in your token contract if you want to prevent users from\r\n    ///  burning their tokens.\r\n    /// @param _tokenHolder The address that will lose the tokens\r\n    /// @param _amount The quantity of tokens to burn\r\n    function operatorBurn(address _tokenHolder, uint256 _amount, bytes _holderData, bytes _operatorData) public {\r\n        require(msg.sender == mBurnOperator);\r\n        super.operatorBurn(_tokenHolder, _amount, _holderData, _operatorData);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_interface\",\"type\":\"string\"},{\"name\":\"_impl\",\"type\":\"address\"}],\"name\":\"enableInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_interface\",\"type\":\"string\"}],\"name\":\"disableInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_userData\",\"type\":\"bytes\"},{\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"delegateERC820Management\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_userData\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_holderData\",\"type\":\"bytes\"},{\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_holderData\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_granularity\",\"type\":\"uint256\"},{\"name\":\"_defaultOperators\",\"type\":\"address[]\"},{\"name\":\"_burnOperator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"holderData\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"holderData\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ReferenceToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001200000000000000000000000008edaae1034762823c5ecfca283200adf221ce7dd00000000000000000000000000000000000000000000000000000000000000134461746166756e64205365656420546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003445354000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000008edaae1034762823c5ecfca283200adf221ce7dd00000000000000000000000061c231f170dc2578db68dc37624df3e899405ca8","Library":"","SwarmSource":"bzzr://bf7e71db285c0da8796f4c8c0500b76913fc39bf0ce119bc1f6711e1abd46e9d"}]}