{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n  Super Simple Token Subscriptions - https://tokensubscription.com\r\n\r\n  //// Breakinâ€™ Through @ University of Wyoming ////\r\n\r\n  Austin Thomas Griffith - https://austingriffith.com\r\n\r\n  Building on previous works:\r\n    https://github.com/austintgriffith/token-subscription\r\n    https://gist.github.com/androolloyd/0a62ef48887be00a5eff5c17f2be849a\r\n    https://media.consensys.net/subscription-services-on-the-blockchain-erc-948-6ef64b083a36\r\n    https://medium.com/gitcoin/technical-deep-dive-architecture-choices-for-subscriptions-on-the-blockchain-erc948-5fae89cabc7a\r\n    https://github.com/ethereum/EIPs/pull/1337\r\n    https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1077.md\r\n    https://github.com/gnosis/safe-contracts\r\n\r\n  Earlier Meta Transaction Demo:\r\n    https://github.com/austintgriffith/bouncer-proxy\r\n\r\n  Huge thanks, as always, to OpenZeppelin for the rad contracts:\r\n */\r\n\r\n\r\n\r\n/**\r\n * @title Elliptic curve signature operations\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n */\r\n\r\nlibrary ECDSA {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using their signature\r\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param signature bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 hash, bytes signature)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    // Check the signature length\r\n    if (signature.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    // ecrecover takes the signature parameters, and the only way to get them\r\n    // currently is to use assembly.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      r := mload(add(signature, 32))\r\n      s := mload(add(signature, 64))\r\n      v := byte(0, mload(add(signature, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      // solium-disable-next-line arg-overflow\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * toEthSignedMessageHash\r\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n   * and hash the result\r\n   */\r\n  function toEthSignedMessageHash(bytes32 hash)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    // 32 is the length in bytes of hash,\r\n    // enforced by the type signature above\r\n    return keccak256(\r\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    emit Transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param amount The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param amount The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(account != 0);\r\n    require(amount <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = _balances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param amount The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 amount) internal {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      amount);\r\n    _burn(account, amount);\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Subscription {\r\n    using ECDSA for bytes32;\r\n    using SafeMath for uint256;\r\n\r\n    //who deploys the contract\r\n    address public author;\r\n\r\n    // the publisher may optionally deploy requirements for the subscription\r\n    // so only meta transactions that match the requirements can be relayed\r\n    address public requiredToAddress;\r\n    address public requiredTokenAddress;\r\n    uint256 public requiredTokenAmount;\r\n    uint256 public requiredPeriodSeconds;\r\n    uint256 public requiredGasPrice;\r\n\r\n    // similar to a nonce that avoids replay attacks this allows a single execution\r\n    // every x seconds for a given subscription\r\n    // subscriptionHash  => next valid block number\r\n    mapping(bytes32 => uint256) public nextValidTimestamp;\r\n\r\n    //we'll use a nonce for each from but because transactions can go through\r\n    //multiple times, we allow anything but users can use this as a signal for\r\n    //uniqueness\r\n    mapping(address => uint256) public extraNonce;\r\n\r\n    event ExecuteSubscription(\r\n        address indexed from, //the subscriber\r\n        address indexed to, //the publisher\r\n        address tokenAddress, //the token address paid to the publisher\r\n        uint256 tokenAmount, //the token amount paid to the publisher\r\n        uint256 periodSeconds, //the period in seconds between payments\r\n        uint256 gasPrice, //the amount of tokens to pay relayer (0 for free)\r\n        uint256 nonce // to allow multiple subscriptions with the same parameters\r\n    );\r\n\r\n    constructor(\r\n        address _toAddress,\r\n        address _tokenAddress,\r\n        uint256 _tokenAmount,\r\n        uint256 _periodSeconds,\r\n        uint256 _gasPrice\r\n    ) public {\r\n        requiredToAddress=_toAddress;\r\n        requiredTokenAddress=_tokenAddress;\r\n        requiredTokenAmount=_tokenAmount;\r\n        requiredPeriodSeconds=_periodSeconds;\r\n        requiredGasPrice=_gasPrice;\r\n        author=msg.sender;\r\n    }\r\n\r\n    // this is used by external smart contracts to verify on-chain that a\r\n    // particular subscription is \"paid\" and \"active\"\r\n    // there must be a small grace period added to allow the publisher\r\n    // or desktop miner to execute\r\n    function isSubscriptionActive(\r\n        bytes32 subscriptionHash,\r\n        uint256 gracePeriodSeconds\r\n    )\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        if(nextValidTimestamp[subscriptionHash]==uint256(-1)){\r\n          return false;\r\n        }\r\n        return (block.timestamp <=\r\n                nextValidTimestamp[subscriptionHash].add(gracePeriodSeconds)\r\n        );\r\n    }\r\n\r\n    // given the subscription details, generate a hash and try to kind of follow\r\n    // the eip-191 standard and eip-1077 standard from my dude @avsa\r\n    function getSubscriptionHash(\r\n        address from, //the subscriber\r\n        address to, //the publisher\r\n        address tokenAddress, //the token address paid to the publisher\r\n        uint256 tokenAmount, //the token amount paid to the publisher\r\n        uint256 periodSeconds, //the period in seconds between payments\r\n        uint256 gasPrice, //the amount of tokens or eth to pay relayer (0 for free)\r\n        uint256 nonce // to allow multiple subscriptions with the same parameters\r\n    )\r\n        public\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                byte(0x19),\r\n                byte(0),\r\n                address(this),\r\n                from,\r\n                to,\r\n                tokenAddress,\r\n                tokenAmount,\r\n                periodSeconds,\r\n                gasPrice,\r\n                nonce\r\n        ));\r\n    }\r\n\r\n    //ecrecover the signer from hash and the signature\r\n    function getSubscriptionSigner(\r\n        bytes32 subscriptionHash, //hash of subscription\r\n        bytes signature //proof the subscriber signed the meta trasaction\r\n    )\r\n        public\r\n        pure\r\n        returns (address)\r\n    {\r\n        return subscriptionHash.toEthSignedMessageHash().recover(signature);\r\n    }\r\n\r\n    //check if a subscription is signed correctly and the timestamp is ready for\r\n    // the next execution to happen\r\n    function isSubscriptionReady(\r\n        address from, //the subscriber\r\n        address to, //the publisher\r\n        address tokenAddress, //the token address paid to the publisher\r\n        uint256 tokenAmount, //the token amount paid to the publisher\r\n        uint256 periodSeconds, //the period in seconds between payments\r\n        uint256 gasPrice, //the amount of the token to incentivize the relay network\r\n        uint256 nonce,// to allow multiple subscriptions with the same parameters\r\n        bytes signature //proof the subscriber signed the meta trasaction\r\n    )\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 subscriptionHash = getSubscriptionHash(\r\n            from, to, tokenAddress, tokenAmount, periodSeconds, gasPrice, nonce\r\n        );\r\n        address signer = getSubscriptionSigner(subscriptionHash, signature);\r\n        uint256 allowance = ERC20(tokenAddress).allowance(from, address(this));\r\n        uint256 balance = ERC20(tokenAddress).balanceOf(from);\r\n\r\n        return (\r\n            ( requiredToAddress == address(0) || to == requiredToAddress ) &&\r\n            ( requiredTokenAddress == address(0) || tokenAddress == requiredTokenAddress ) &&\r\n            ( requiredTokenAmount == 0 || tokenAmount == requiredTokenAmount ) &&\r\n            ( requiredPeriodSeconds == 0 || periodSeconds == requiredPeriodSeconds ) &&\r\n            ( requiredGasPrice == 0 || gasPrice == requiredGasPrice ) &&\r\n            signer == from &&\r\n            from != to &&\r\n            block.timestamp >= nextValidTimestamp[subscriptionHash] &&\r\n            allowance >= tokenAmount.add(gasPrice) &&\r\n            balance >= tokenAmount.add(gasPrice)\r\n        );\r\n    }\r\n\r\n    // you don't really need this if you are using the approve/transferFrom method\r\n    // because you control the flow of tokens by approving this contract address,\r\n    // but to make the contract an extensible example for later user I'll add this\r\n    function cancelSubscription(\r\n        address from, //the subscriber\r\n        address to, //the publisher\r\n        address tokenAddress, //the token address paid to the publisher\r\n        uint256 tokenAmount, //the token amount paid to the publisher\r\n        uint256 periodSeconds, //the period in seconds between payments\r\n        uint256 gasPrice, //the amount of tokens or eth to pay relayer (0 for free)\r\n        uint256 nonce, //to allow multiple subscriptions with the same parameters\r\n        bytes signature //proof the subscriber signed the meta trasaction\r\n    )\r\n        external\r\n        returns (bool success)\r\n    {\r\n        bytes32 subscriptionHash = getSubscriptionHash(\r\n            from, to, tokenAddress, tokenAmount, periodSeconds, gasPrice, nonce\r\n        );\r\n        address signer = getSubscriptionSigner(subscriptionHash, signature);\r\n\r\n        //the signature must be valid\r\n        require(signer == from, \"Invalid Signature for subscription cancellation\");\r\n\r\n        //make sure it's the subscriber \r\n        require(from == msg.sender, 'msg.sender is not the subscriber');\r\n\r\n        //nextValidTimestamp should be a timestamp that will never\r\n        //be reached during the brief window human existence\r\n        nextValidTimestamp[subscriptionHash]=uint256(-1);\r\n\r\n        return true;\r\n    }\r\n\r\n    // execute the transferFrom to pay the publisher from the subscriber\r\n    // the subscriber has full control by approving this contract an allowance\r\n    function executeSubscription(\r\n        address from, //the subscriber\r\n        address to, //the publisher\r\n        address tokenAddress, //the token address paid to the publisher\r\n        uint256 tokenAmount, //the token amount paid to the publisher\r\n        uint256 periodSeconds, //the period in seconds between payments\r\n        uint256 gasPrice, //the amount of tokens or eth to pay relayer (0 for free)\r\n        uint256 nonce, // to allow multiple subscriptions with the same parameters\r\n        bytes signature //proof the subscriber signed the meta trasaction\r\n    )\r\n        public\r\n        returns (bool success)\r\n    {\r\n        // make sure the subscription is valid and ready\r\n        // pulled this out so I have the hash, should be exact code as \"isSubscriptionReady\"\r\n        bytes32 subscriptionHash = getSubscriptionHash(\r\n            from, to, tokenAddress, tokenAmount, periodSeconds, gasPrice, nonce\r\n        );\r\n        address signer = getSubscriptionSigner(subscriptionHash, signature);\r\n\r\n        //make sure they aren't sending to themselves\r\n        require(to != from, \"Can not send to the from address\");\r\n        //the signature must be valid\r\n        require(signer == from, \"Invalid Signature\");\r\n        //timestamp must be equal to or past the next period\r\n        require(\r\n            block.timestamp >= nextValidTimestamp[subscriptionHash],\r\n            \"Subscription is not ready\"\r\n        );\r\n\r\n        // if there are requirements from the deployer, let's make sure\r\n        // those are met exactly\r\n        require( requiredToAddress == address(0) || to == requiredToAddress );\r\n        require( requiredTokenAddress == address(0) || tokenAddress == requiredTokenAddress );\r\n        require( requiredTokenAmount == 0 || tokenAmount == requiredTokenAmount );\r\n        require( requiredPeriodSeconds == 0 || periodSeconds == requiredPeriodSeconds );\r\n        require( requiredGasPrice == 0 || gasPrice == requiredGasPrice );\r\n\r\n        //increment the timestamp by the period so it wont be valid until then\r\n        nextValidTimestamp[subscriptionHash] = block.timestamp.add(periodSeconds);\r\n\r\n        //check to see if this nonce is larger than the current count and we'll set that for this 'from'\r\n        if(nonce > extraNonce[from]){\r\n          extraNonce[from] = nonce;\r\n        }\r\n\r\n        // now, let make the transfer from the subscriber to the publisher\r\n        uint256 startingBalance = ERC20(tokenAddress).balanceOf(to);\r\n        ERC20(tokenAddress).transferFrom(from,to,tokenAmount);\r\n        require(\r\n          (startingBalance+tokenAmount) == ERC20(tokenAddress).balanceOf(to),\r\n          \"ERC20 Balance did not change correctly\"\r\n        );\r\n\r\n\r\n        require(\r\n            checkSuccess(),\r\n            \"Subscription::executeSubscription TransferFrom failed\"\r\n        );\r\n\r\n        emit ExecuteSubscription(\r\n            from, to, tokenAddress, tokenAmount, periodSeconds, gasPrice, nonce\r\n        );\r\n\r\n        // it is possible for the subscription execution to be run by a third party\r\n        // incentivized in the terms of the subscription with a gasPrice of the tokens\r\n        //  - pay that out now...\r\n        if (gasPrice > 0) {\r\n            //the relayer is incentivized by a little of the same token from\r\n            // the subscriber ... as far as the subscriber knows, they are\r\n            // just sending X tokens to the publisher, but the publisher can\r\n            // choose to send Y of those X to a relayer to run their transactions\r\n            // the publisher will receive X - Y tokens\r\n            // this must all be setup in the constructor\r\n            // if not, the subscriber chooses all the params including what goes\r\n            // to the publisher and what goes to the relayer\r\n            ERC20(tokenAddress).transferFrom(from, msg.sender, gasPrice);\r\n            require(\r\n                checkSuccess(),\r\n                \"Subscription::executeSubscription Failed to pay gas as from account\"\r\n            );\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // because of issues with non-standard erc20s the transferFrom can always return false\r\n    // to fix this we run it and then check the return of the previous function:\r\n    //    https://github.com/ethereum/solidity/issues/4116\r\n    /**\r\n     * Checks the return value of the previous function. Returns true if the previous function\r\n     * function returned 32 non-zero bytes or returned zero bytes.\r\n     */\r\n    function checkSuccess(\r\n    )\r\n        private\r\n        pure\r\n        returns (bool)\r\n    {\r\n        uint256 returnValue = 0;\r\n\r\n        /* solium-disable-next-line security/no-inline-assembly */\r\n        assembly {\r\n            // check number of bytes returned from last function call\r\n            switch returndatasize\r\n\r\n            // no bytes returned: assume success\r\n            case 0x0 {\r\n                returnValue := 1\r\n            }\r\n\r\n            // 32 bytes returned: check if non-zero\r\n            case 0x20 {\r\n                // copy 32 bytes into scratch space\r\n                returndatacopy(0x0, 0x0, 0x20)\r\n\r\n                // load those bytes into returnValue\r\n                returnValue := mload(0x0)\r\n            }\r\n\r\n            // not sure what was returned: dont mark as success\r\n            default { }\r\n        }\r\n\r\n        return returnValue != 0;\r\n    }\r\n\r\n    //we would like a way for the author to completly destroy the subscription\r\n    // contract to prevent further transfers\r\n    function endContract()\r\n        external\r\n    {\r\n      require(msg.sender==author);\r\n      selfdestruct(author);\r\n    }\r\n\r\n    // let's go ahead and revert any ETH send directly to the contract too\r\n    function () public payable {\r\n       revert ();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"requiredGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriptionHash\",\"type\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"getSubscriptionSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredPeriodSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"periodSeconds\",\"type\":\"uint256\"},{\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancelSubscription\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"extraNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subscriptionHash\",\"type\":\"bytes32\"},{\"name\":\"gracePeriodSeconds\",\"type\":\"uint256\"}],\"name\":\"isSubscriptionActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"periodSeconds\",\"type\":\"uint256\"},{\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getSubscriptionHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"periodSeconds\",\"type\":\"uint256\"},{\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"executeSubscription\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"periodSeconds\",\"type\":\"uint256\"},{\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isSubscriptionReady\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextValidTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_periodSeconds\",\"type\":\"uint256\"},{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"periodSeconds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"ExecuteSubscription\",\"type\":\"event\"}]","ContractName":"Subscription","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://27b9df12a5eefa9650ece34d4ee4f7cef94e0d42e8bfe21d1dc994af19526210"}]}