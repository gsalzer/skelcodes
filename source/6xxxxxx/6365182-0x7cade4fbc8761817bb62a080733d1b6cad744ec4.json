{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/// @notice RenExTokens is a registry of tokens that can be traded on RenEx.\r\ncontract RenExTokens is Ownable {\r\n    string public VERSION; // Passed in as a constructor parameter.\r\n\r\n    struct TokenDetails {\r\n        address addr;\r\n        uint8 decimals;\r\n        bool registered;\r\n    }\r\n\r\n    // Storage\r\n    mapping(uint32 => TokenDetails) public tokens;\r\n    mapping(uint32 => bool) private detailsSubmitted;\r\n\r\n    // Events\r\n    event LogTokenRegistered(uint32 tokenCode, address tokenAddress, uint8 tokenDecimals);\r\n    event LogTokenDeregistered(uint32 tokenCode);\r\n\r\n    /// @notice The contract constructor.\r\n    ///\r\n    /// @param _VERSION A string defining the contract version.\r\n    constructor(string _VERSION) public {\r\n        VERSION = _VERSION;\r\n    }\r\n\r\n    /// @notice Allows the owner to register and the details for a token.\r\n    /// Once details have been submitted, they cannot be overwritten.\r\n    /// To re-register the same token with different details (e.g. if the address\r\n    /// has changed), a different token identifier should be used and the\r\n    /// previous token identifier should be deregistered.\r\n    /// If a token is not Ethereum-based, the address will be set to 0x0.\r\n    ///\r\n    /// @param _tokenCode A unique 32-bit token identifier.\r\n    /// @param _tokenAddress The address of the token.\r\n    /// @param _tokenDecimals The decimals to use for the token.\r\n    function registerToken(uint32 _tokenCode, address _tokenAddress, uint8 _tokenDecimals) public onlyOwner {\r\n        require(!tokens[_tokenCode].registered, \"already registered\");\r\n\r\n        // If a token is being re-registered, the same details must be provided.\r\n        if (detailsSubmitted[_tokenCode]) {\r\n            require(tokens[_tokenCode].addr == _tokenAddress, \"different address\");\r\n            require(tokens[_tokenCode].decimals == _tokenDecimals, \"different decimals\");\r\n        } else {\r\n            detailsSubmitted[_tokenCode] = true;\r\n        }\r\n\r\n        tokens[_tokenCode] = TokenDetails({\r\n            addr: _tokenAddress,\r\n            decimals: _tokenDecimals,\r\n            registered: true\r\n        });\r\n\r\n        emit LogTokenRegistered(_tokenCode, _tokenAddress, _tokenDecimals);\r\n    }\r\n\r\n    /// @notice Sets a token as being deregistered. The details are still stored\r\n    /// to prevent the token from being re-registered with different details.\r\n    ///\r\n    /// @param _tokenCode The unique 32-bit token identifier.\r\n    function deregisterToken(uint32 _tokenCode) external onlyOwner {\r\n        require(tokens[_tokenCode].registered, \"not registered\");\r\n\r\n        tokens[_tokenCode].registered = false;\r\n\r\n        emit LogTokenDeregistered(_tokenCode);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenCode\",\"type\":\"uint32\"}],\"name\":\"deregisterToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenCode\",\"type\":\"uint32\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_tokenDecimals\",\"type\":\"uint8\"}],\"name\":\"registerToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"registered\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_VERSION\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenCode\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"name\":\"LogTokenRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenCode\",\"type\":\"uint32\"}],\"name\":\"LogTokenDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RenExTokens","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000d6d61696e6e65742d312e302e3000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://7e03d87c117d0a81e1ec42fe5397ff566f29b541898eb0ecf9f2768fc2cd0acf"}]}