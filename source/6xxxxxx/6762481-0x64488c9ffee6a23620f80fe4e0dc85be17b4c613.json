{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n  MTWE - Mineable Token With Exchange\r\n*/\r\n\r\ncontract MTWE {\r\n    struct Order {\r\n        address creator;\r\n        bool buy;\r\n        uint price;\r\n        uint amount;\r\n    }\r\n    \r\n    string public name = 'MTWE';\r\n    string public symbol = 'MTWE';\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 10000000000000000000000000;\r\n    \r\n    uint private seed;\r\n    \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => uint256) public successesOf;\r\n    mapping (address => uint256) public failsOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n    Order[] public orders;\r\n    uint public orderCount;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event PlaceBuy(address indexed user, uint price, uint amount, uint id);\r\n    event PlaceSell(address indexed user, uint price, uint amount, uint id);\r\n    event FillOrder(uint indexed id, address indexed user, uint amount);\r\n    event CancelOrder(uint indexed id);\r\n    \r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor () public {\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n    \r\n    /*** Helpers */\r\n    \r\n    /* Converts uint256 to bytes32 */\r\n    function toBytes(uint256 x) internal pure returns (bytes b) {\r\n        b = new bytes(32);\r\n        assembly {\r\n            mstore(add(b, 32), x)\r\n        }\r\n    }\r\n    \r\n    function safeAdd(uint a, uint b) private pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function safeSub(uint a, uint b) private pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function safeMul(uint a, uint b) private pure returns (uint) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        \r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function safeIDiv(uint a, uint b) private pure returns (uint) {\r\n        uint c = a / b;\r\n        assert(b * c == a);\r\n        return c;\r\n    }\r\n    \r\n    /* Returns a pseudo-random number */\r\n    function random(uint lessThan) internal returns (uint) {\r\n        seed += block.timestamp + uint(msg.sender);\r\n        return uint(sha256(toBytes(uint(blockhash(block.number - 1)) + seed))) % lessThan;\r\n    }\r\n    \r\n    function calcAmountEther(uint price, uint amount) internal pure returns (uint) {\r\n        return safeIDiv(safeMul(price, amount), 1000000000000000000);\r\n    }\r\n    \r\n    /*** Token */\r\n    \r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    \r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    /* Transfer tokens from other address */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /* Set allowance for other address */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    \r\n    /*** Exchange */\r\n    \r\n    function placeBuy(uint price, uint amount) external payable {\r\n        require(price > 0 && amount > 0 && msg.value == calcAmountEther(price, amount));\r\n        orders.push(Order({\r\n            creator: msg.sender,\r\n            buy: true,\r\n            price: price,\r\n            amount: amount\r\n        }));\r\n        emit PlaceBuy(msg.sender, price, amount, orderCount);\r\n        orderCount++;\r\n    }\r\n    \r\n    function placeSell(uint price, uint amount) external {\r\n        require(price > 0 && amount > 0);\r\n        _transfer(msg.sender, this, amount);\r\n        orders.push(Order({\r\n            creator: msg.sender,\r\n            buy: false,\r\n            price: price,\r\n            amount: amount\r\n        }));\r\n        emit PlaceSell(msg.sender, price, amount, orderCount);\r\n        orderCount++;\r\n    }\r\n    \r\n    function fillOrder(uint id, uint amount) external payable {\r\n        require(id < orders.length);\r\n        require(amount > 0);\r\n        require(orders[id].creator != msg.sender);\r\n        require(orders[id].amount >= amount);\r\n        if (orders[id].buy) {\r\n            require(msg.value == 0);\r\n            \r\n            /* send tokens from sender to creator */\r\n            _transfer(msg.sender, orders[id].creator, amount);\r\n            \r\n            /* send Ether to sender */\r\n            msg.sender.transfer(calcAmountEther(orders[id].price, amount));\r\n        } else {\r\n            uint etherAmount = calcAmountEther(orders[id].price, amount);\r\n            require(msg.value == etherAmount);\r\n            \r\n            /* send tokens to sender */\r\n            _transfer(this, msg.sender, amount);\r\n            \r\n            /* send Ether from sender to creator */\r\n            orders[id].creator.transfer(etherAmount);\r\n        }\r\n        if (orders[id].amount == amount) {\r\n            delete orders[id];\r\n        } else {\r\n            orders[id].amount -= amount;\r\n        }\r\n        emit FillOrder(id, msg.sender, amount);\r\n    }\r\n    \r\n    function cancelOrder(uint id) external {\r\n        require(id < orders.length);\r\n        require(orders[id].creator == msg.sender);\r\n        require(orders[id].amount > 0);\r\n        if (orders[id].buy) {\r\n            /* return Ether */\r\n            msg.sender.transfer(calcAmountEther(orders[id].price, orders[id].amount));\r\n        } else {\r\n            /* return tokens */\r\n            _transfer(this, msg.sender, orders[id].amount);\r\n        }\r\n        delete orders[id];\r\n        emit CancelOrder(id);\r\n    }\r\n    \r\n    function () public payable {\r\n        if (msg.value == 0) {\r\n            uint minedHashRel = random(10000);\r\n            uint k = balanceOf[msg.sender] * 10000 / totalSupply;\r\n            if (k > 0) {\r\n                if (k > 19) {\r\n                    k = 19;\r\n                }\r\n                k = 2 ** k;\r\n                k = 5000 / k;\r\n                k = 5000 - k;\r\n                if (minedHashRel < k) {\r\n                    uint reward = minedHashRel * 10000000000000000;\r\n                    balanceOf[msg.sender] += reward;\r\n                    totalSupply += reward;\r\n                    emit Transfer(0, this, reward);\r\n                    emit Transfer(this, msg.sender, reward);\r\n                    successesOf[msg.sender]++;\r\n                } else {\r\n                    emit Transfer(this, msg.sender, 0);\r\n                    failsOf[msg.sender]++;\r\n                }\r\n            } else {\r\n                revert();\r\n            }\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"orderCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"placeBuy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"failsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"name\":\"creator\",\"type\":\"address\"},{\"name\":\"buy\",\"type\":\"bool\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"placeSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"successesOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PlaceBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PlaceSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FillOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CancelOrder\",\"type\":\"event\"}]","ContractName":"MTWE","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://877476a064ab1b59c1ec8e7d6473297757b8fea3782135e01015b7f163681d02"}]}