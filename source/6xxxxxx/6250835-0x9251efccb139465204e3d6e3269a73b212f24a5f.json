{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Pob{\r\n\r\n   using SafeMath for *;\r\n\r\n//==============================================================================\t\r\n//Structs\r\n//==============================================================================\t\r\n                                                                 \t\r\n\tstruct BetItem{\r\n\t\tuint256 id;\r\n\t\tuint256 betCount;\r\n\t}\r\n\tstruct Player {\r\n        address addr;   // player address\r\n        uint256 aff;    // affiliate vault\r\n\t\tuint256 withdraw;\r\n\t\tuint256[] purchases;\r\n\t\tuint256 totalPosition; // each player cannot have more than 3000 positions\r\n\t\tuint256 affId;\r\n    }\r\n\tstruct Purchase{\r\n\t\tuint256 id;\r\n\t\taddress fromAddress;\r\n\t\tuint256 amount;\r\n\t\tuint256 positionCount;\r\n\t\tuint256 betItemId;\r\n\t}\r\n\t\r\n//==============================================================================\t\r\n//Events\r\n//==============================================================================\t\r\n\tevent EndTx(address buyer, uint256 _eth, uint256 _positionCount);\r\n\t\r\n//==============================================================================\t\r\n//Constants\r\n//==============================================================================\t\r\n\tuint256 constant private MIN_BET = 0.1 ether;  \r\n\tuint256 constant private VOTE_AMOUNT = 0.05 ether;  \r\n\tuint256 constant private ITEM_COUNT = 16;  \r\n\tuint256 constant private MAX_POSITION_PER_PLAYER = 3000;  \r\n    uint256 constant private PRIZE_WAIT_TIME = 48 hours;     // the prize waiting time after stop receiving bets,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // used to vote on real result\r\n\taddress constant private DEV_ADDRESS = 0x6472B7931CB311907Df9229BcB3b3f3E2F413c9C;  \r\n\r\n\taddress private owner;\r\n\tuint256 private BET_END_TIME = 1538870400;  \r\n\tuint256 private PRIZE_END_TIME;\r\n\r\n\tuint256 private lastSumary;\r\n\r\n\tuint256 private purchase_id; // = new position number\r\n\tuint256 private aff_id = 100;\r\n\tuint256 public winner_pool_amount;\r\n\tuint256 public buyer_profit_pool_amount;\r\n\tuint256 public vote_reward_pool_amount; \r\n\tuint256 private result_vote_count;\r\n\t\r\n    mapping (uint256 => BetItem) public betItems;     // betItems ( betId)\r\n    mapping (uint256 => Purchase) public purchases;     // purchases record, id aligns to purchase (id=id+positionCount)\r\n    mapping (address => Player) public players;     //every buyers info \r\n\tmapping (uint256 => address) public aff_to_players; //use to find player\r\n\t\r\n    mapping (uint256 => uint256) public keyNumberToValue;     // store previous buyers divids, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  // keep sum(1/n) based on per position\r\n    mapping (address => uint256) public resultVotes;     //every address can only vote a ticket (address=>betItemId)\r\n    mapping (uint256 => uint256) public resultVoteCounts;     //every address can only vote a ticket (betItemId=>count)\r\n\r\n\r\n\tconstructor() \r\n\t\tpublic\r\n\t{\r\n\t\t//init items, item start from 1\r\n\t\tsetPrizeEndTime();\r\n\t\tfor(uint i=1;i<=ITEM_COUNT;i++){\r\n\t\t\tbetItems[i].id=i;\r\n\t\t}\r\n\t\towner = msg.sender;\r\n\t}\r\n\tfunction setPrizeEndTime()\r\n\t\tprivate\r\n\t{\r\n\t\tPRIZE_END_TIME = BET_END_TIME + PRIZE_WAIT_TIME;\r\n\t}\r\n\t\r\n\tfunction buyPosition(uint256 _aff_id,uint256 betItemId)\r\n\t\tisNotFinished()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n\t\tisValidItem(betItemId)\r\n\t\tpublic\r\n        payable\r\n\t{\r\n\t\t\r\n\t\tuint positionCount = uint(msg.value/MIN_BET);\t\r\n\t\t\r\n\t\trequire(positionCount>0);\r\n\t\t\r\n\t\tuint256 _totalPositionCount = players[msg.sender].totalPosition+positionCount;\r\n\t\trequire(_totalPositionCount<=MAX_POSITION_PER_PLAYER);\r\n\t\t\r\n\t\tpurchase_id = purchase_id.add(positionCount);\r\n\r\n\t\t\r\n\t\tuint256 eth = positionCount.mul(MIN_BET);\r\n\t\t\r\n\t\tpurchases[purchase_id].id = purchase_id;\r\n\t\tpurchases[purchase_id].fromAddress = msg.sender;\r\n\t\tpurchases[purchase_id].amount = eth;\r\n\t\tpurchases[purchase_id].betItemId = betItemId;\r\n\t\tpurchases[purchase_id].positionCount=positionCount;\r\n\t\t\r\n\t\tbetItems[betItemId].betCount = betItems[betItemId].betCount.add(positionCount);\r\n\t\t\r\n\t\tplayers[msg.sender].purchases.push(purchase_id);\r\n\t\tplayers[msg.sender].totalPosition = _totalPositionCount;\r\n\t\tif(players[msg.sender].affId==0){\r\n\t\t\t//create aff_id for player\r\n\t\t\tplayers[msg.sender].affId = aff_id;\r\n\t\t\taff_to_players[players[msg.sender].affId] = msg.sender;\r\n\t\t\taff_id = aff_id+1;\r\n\t\t}\r\n\t\t\r\n\t\t// 10% goes to affiliate\r\n\t\tuint256 affAmount = eth/10;\r\n\t\taddToAffiliate(_aff_id,affAmount);\r\n\t\t\r\n\t\t//2% goes to dev\r\n\t\tplayers[DEV_ADDRESS].aff = players[DEV_ADDRESS].aff.add(eth/50);\r\n\t\t\r\n\t\t//50% goes to final POOL\r\n\t\twinner_pool_amount=winner_pool_amount.add(eth/2);\r\n\t\t\r\n\t\t//33% goes to previous buyers\r\n\t\tbuyer_profit_pool_amount = buyer_profit_pool_amount.add(eth.mul(33)/100);\r\n\t\tupdateProfit(positionCount);\r\n\t\t\r\n\t\t//5% goes to reward pool\r\n\t\tvote_reward_pool_amount = vote_reward_pool_amount.add(eth/20);\t\t\r\n\t\t\t\r\n\t\temit EndTx(msg.sender,msg.value,positionCount);\r\n\t}\r\n\t\r\n\tfunction updateProfit(uint _positionCount) \r\n\t\tprivate\r\n\t{\r\n\t\trequire(purchase_id>0);\r\n\t\tuint _lastSumary = lastSumary;\r\n\t\tfor(uint i=0;i<_positionCount;i++){\r\n\t\t\tuint256 _purchase_id = purchase_id.sub(i);\r\n\t\t\tif(_purchase_id!=0){\r\n\t\t\t\t_lastSumary = _lastSumary.add(calculatePositionProfit(_purchase_id));\r\n\t\t\t}\r\n\t\t}\r\n\t\tlastSumary = _lastSumary;\r\n\t\tkeyNumberToValue[purchase_id] = lastSumary;\t\t\r\n\t}\r\n\t\r\n\tfunction calculatePositionProfit(uint256 currentPurchasedId) \r\n\t\tpublic \r\n\t\tpure \r\n\t\treturns (uint256)\r\n\t{\r\n\t\tif(currentPurchasedId==0)return 0;\r\n\t\treturn MIN_BET.mul(33)/100/(currentPurchasedId);\r\n\t}\r\n\t\r\n\tfunction addToAffiliate(uint256 _aff_id,uint256 affAmount) private{\r\n\t\taddress _aff_address = aff_to_players[_aff_id];\r\n\t\tif(_aff_address!= address(0) && _aff_address!=msg.sender){\r\n\t\t\tplayers[_aff_address].aff = players[_aff_address].aff.add(affAmount);\r\n\t\t}else{\r\n\t\t\twinner_pool_amount=winner_pool_amount.add(affAmount);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getPlayerProfit(address _player)\r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (uint256,uint256,uint256,uint256)\r\n\t{\r\n\t\tuint256 _profit = 0;\r\n\t\tfor(uint256 i = 0 ;i<players[_player].purchases.length;i++){\r\n\t\t\t_profit = _profit.add(getProfit(players[_player].purchases[i]));\r\n\t\t}\r\n\t\t\r\n\t\tuint256 _winning_number = getWinningNumber();\r\n\r\n\t\tuint256 _player_winning = getPlayerWinning(_player,_winning_number);\r\n\t\tuint256 _player_vote_rewards = getPlayerVoteRewards(_player,_winning_number);\r\n\t\t\r\n\t\treturn (_profit,players[_player].aff,_player_winning,_player_vote_rewards);\r\n\t}\r\n\t\r\n\tfunction getPlayerEarning(address _player)\r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (uint256)\r\n\t{\r\n\t\t(uint256 _profit, uint256 _aff, uint256 _winning, uint256 _vote_rewards) = getPlayerProfit(_player);\r\n\t\treturn _profit.add(_aff).add(_winning).add(_vote_rewards);\r\n\t}\r\n\t\r\n\t\r\n\tfunction getPlayerWinning(address _player,uint256 _winning_number) \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 _winning = 0;\r\n\t\tif(_winning_number==0){\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 _winningCount=0;\r\n\t\tfor(uint256 i = 0 ;i<players[_player].purchases.length;i++){\r\n\t\t\tif(purchases[players[_player].purchases[i]].betItemId==_winning_number){\r\n\t\t\t\t_winningCount=_winningCount.add(purchases[players[_player].purchases[i]].positionCount);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(_winningCount>0){\r\n\t\t\t_winning= _winningCount.mul(winner_pool_amount)/(betItems[_winning_number].betCount);\r\n\t\t}\r\n\t\t\r\n\t\treturn _winning;\r\n\t}\r\n\t\r\n\tfunction getPlayerVoteRewards(address _player,uint256 _winning_number) \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (uint256)\r\n\t{\r\n\t\tif(_winning_number==0){\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tif(resultVotes[_player]==0){\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t//wrong result\r\n\t\tif(resultVotes[_player]!=_winning_number){\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 _correct_vote_count = resultVoteCounts[_winning_number];\r\n\t\trequire(_correct_vote_count>0);\r\n\t\t\r\n\t\treturn vote_reward_pool_amount/_correct_vote_count;\r\n\t}\r\n\t\r\n\tfunction getProfit(uint256 currentpurchase_id)\r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 _positionCount= purchases[currentpurchase_id].positionCount;\r\n\t\tif(_positionCount==0) return 0;\r\n\t\tuint256 _currentPositionProfit=calculatePositionProfit(currentpurchase_id);\r\n\t\tuint256 currentPositionSum = keyNumberToValue[currentpurchase_id];\r\n\t\tuint256 _profit = _currentPositionProfit.add(keyNumberToValue[purchase_id].sub(currentPositionSum));\r\n\t\tfor(uint256 i=1;i<_positionCount;i++){\r\n\t\t\tcurrentPositionSum  = currentPositionSum.sub(_currentPositionProfit);\r\n\t\t\t_currentPositionProfit = calculatePositionProfit(currentpurchase_id.sub(i));\r\n\t\t\t_profit = _profit.add(keyNumberToValue[purchase_id].sub(currentPositionSum)).add(_currentPositionProfit);\r\n\t\t}\r\n\t\treturn _profit;\r\n\t}\r\n\t\r\n\tfunction getSystemInfo() \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns(uint256, uint256, uint256, uint256,uint256)\r\n\t{\r\n\t\treturn (winner_pool_amount,buyer_profit_pool_amount,vote_reward_pool_amount,BET_END_TIME\r\n\t\t,purchase_id);\r\n\t}\r\n\t\r\n\tfunction getSingleBetItemCount(uint256 _betItemId)\r\n\t\tpublic \r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn betItems[_betItemId].betCount;\r\n\t}\r\n\t\r\n\tfunction getBetItemCount() \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (uint256[ITEM_COUNT])\r\n\t{\r\n\t\tuint256[ITEM_COUNT] memory itemCounts;\r\n\t\tfor(uint i=0;i<ITEM_COUNT;i++){\r\n\t\t\titemCounts[i]=(betItems[i+1].betCount);\r\n\t\t}\r\n\t\treturn itemCounts;\r\n\t}\r\n\t\r\n\tfunction getPlayerInfo(address player) \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (uint256,uint256,uint256[],uint256,uint256)\r\n\t{\r\n\t\treturn (players[player].aff,players[player].withdraw,players[player].purchases,players[player].totalPosition,players[player].affId);\r\n\t}\r\n\t\r\n\tfunction withdraw()        \r\n\t\tisHuman()\r\n        public\r\n\t{\r\n\t\taddress _player = msg.sender;\r\n\t\tuint256 _earning = getPlayerEarning(_player);\r\n\t\t\r\n\t\tuint256 _leftEarning = _earning.sub(players[_player].withdraw);\r\n\t\t//still money to withdraw\r\n\t\trequire(_leftEarning>0);\r\n\t\t\r\n\t\tif(_leftEarning>0){\r\n\t\t\tplayers[_player].withdraw = players[_player].withdraw.add(_leftEarning);\r\n\t\t\t_player.transfer(_leftEarning);\r\n\t\t}\r\n\t}\r\n\t\r\n\t//only owner can change this, just in case, the game change the final date. \r\n\t//this won't change anything else beside the game end date\r\n\tfunction setBetEndTime(uint256 _newBetEndTime) \r\n\t\tisOwner()\r\n\t\tpublic\r\n\t{\r\n\t\tBET_END_TIME = _newBetEndTime;\r\n\t\tsetPrizeEndTime();\r\n\t}\r\n\t\r\n\tfunction voteToResult(uint256 betItemId)\r\n\t\tisNotEnded()\r\n        isHuman()\r\n\t\tisValidItem(betItemId)\r\n\t\tpublic\r\n        payable\r\n\t{\r\n\t\t\r\n\t\trequire(msg.value == VOTE_AMOUNT);\r\n\t\t\r\n\t\trequire(resultVotes[msg.sender]==0, \"only allow vote once\");\r\n\t\t\r\n\t\tvote_reward_pool_amount = vote_reward_pool_amount.add(VOTE_AMOUNT);\r\n\t\tresult_vote_count = result_vote_count.add(1);\r\n\t\tresultVotes[msg.sender] = betItemId;\r\n\t\tresultVoteCounts[betItemId] = resultVoteCounts[betItemId].add(1);\r\n\t}\r\n\t\r\n\tfunction getWinningNumber() \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (uint256)\r\n\t{\r\n\t\t//don't show it until the vote finish\r\n\t\tif(now < PRIZE_END_TIME){\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 _winningNumber = 0;\r\n\t\tuint256 _max_vote_count=0;\r\n\t\tfor(uint256 i=1;i< ITEM_COUNT ; i++){\r\n\t\t\tif(_max_vote_count<resultVoteCounts[i]){\r\n\t\t\t\t_winningNumber = i;\r\n\t\t\t\t_max_vote_count = resultVoteCounts[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn _winningNumber;\r\n\t}\r\n\t\r\n    modifier isNotFinished() {\r\n        require(now < BET_END_TIME, \"The voting has finished.\"); \r\n        _;\r\n    }\r\n\t\r\n\tmodifier isValidItem(uint256 _itemId) {\r\n        require(_itemId > 0, \"Invalid item id\"); \r\n\t\trequire(_itemId <= ITEM_COUNT, \"Invalid item id\"); \r\n        _;\r\n    }\r\n\t\r\n    modifier isNotEnded() {\r\n        require(now < PRIZE_END_TIME, \"The contract has finished.\"); \r\n        _;\r\n    }\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"human only\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev sets boundaries for incoming tx \r\n     */\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= MIN_BET, \"has to be greater than min bet\");\r\n        require(_eth <= 100000000000000000000000, \"too much\");\r\n        _;\r\n    }\r\n\t\r\n\tmodifier isOwner() {\r\n\t\trequire(msg.sender == owner) ;\r\n\t\t_;\r\n\t}\r\n}\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr \r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betItems\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"betCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"resultVotes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betItemId\",\"type\":\"uint256\"}],\"name\":\"voteToResult\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_winning_number\",\"type\":\"uint256\"}],\"name\":\"getPlayerWinning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_winning_number\",\"type\":\"uint256\"}],\"name\":\"getPlayerVoteRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_aff_id\",\"type\":\"uint256\"},{\"name\":\"betItemId\",\"type\":\"uint256\"}],\"name\":\"buyPosition\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyer_profit_pool_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resultVoteCounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winner_pool_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlayerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentPurchasedId\",\"type\":\"uint256\"}],\"name\":\"calculatePositionProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSystemInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vote_reward_pool_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchases\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"fromAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"positionCount\",\"type\":\"uint256\"},{\"name\":\"betItemId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWinningNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"currentpurchase_id\",\"type\":\"uint256\"}],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerEarning\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keyNumberToValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBetEndTime\",\"type\":\"uint256\"}],\"name\":\"setBetEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_betItemId\",\"type\":\"uint256\"}],\"name\":\"getSingleBetItemCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aff_to_players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"aff\",\"type\":\"uint256\"},{\"name\":\"withdraw\",\"type\":\"uint256\"},{\"name\":\"totalPosition\",\"type\":\"uint256\"},{\"name\":\"affId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBetItemCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[16]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_positionCount\",\"type\":\"uint256\"}],\"name\":\"EndTx\",\"type\":\"event\"}]","ContractName":"Pob","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c2f9ba581bba90529e3d7d25c29f47718935fc9ffd05d7179ccfbc0ecf270950"}]}