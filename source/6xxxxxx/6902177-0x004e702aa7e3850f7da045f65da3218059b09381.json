{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n//import \"../node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\";\r\n\r\ncontract PixelStorage is Ownable{\r\n\r\n    uint32[] coordinates;\r\n    uint32[] rgba;\r\n    address[] owners;\r\n    uint256[] prices;\r\n\r\n    // simple counter used for indexing\r\n    uint32 public pixelCount;\r\n\r\n    // maps (x | y) to index in the flat arrays\r\n    // Example for first pixel at (5,3)\r\n    // (5|3) =>  (5 << 16 | 3) => (327680 | 3) => 327683  \r\n    // stores 1 as index the first index\r\n    // since 0 is default mapping value\r\n    // coordinatesToIndex[327683] -> 1;\r\n\r\n    mapping(uint32 => uint32) coordinatesToIndex;\r\n\r\n    constructor () public\r\n    {\r\n        pixelCount = 0;\r\n    }\r\n    \r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function withdraw() onlyOwner public {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    function buyPixel(uint16 _x, uint16 _y, uint32 _rgba) public payable {\r\n\r\n        require(0 <= _x && _x < 0x200, \"X should be in range 0-511\");\r\n        require(0 <= _y && _y < 0x200, \"Y should be in range 0-511\");\r\n\r\n        uint32 coordinate = uint32(_x) << 16 | _y;\r\n        uint32 index = coordinatesToIndex[coordinate];\r\n        if(index == 0)\r\n        {\r\n            // pixel not owned yet\r\n            // check funds\r\n            require(msg.value >= 1 finney, \"Send atleast one finney!\");\r\n            \r\n            // bump the pixelCount before usage so it starts with 1 and not the default array value 0\r\n            pixelCount += 1;\r\n            // store the index in mapping\r\n            coordinatesToIndex[coordinate] = pixelCount;\r\n            \r\n            // push values to flat-arrays\r\n            coordinates.push(coordinate);\r\n            rgba.push(_rgba);\r\n            prices.push(msg.value);\r\n            owners.push(msg.sender);\r\n        }\r\n        else\r\n        {\r\n            // pixel is already owned\r\n            require(msg.value >= prices[index-1] + 1 finney , \"Insufficient funds send(atleast price + 1 finney)!\");\r\n            prices[index-1] = msg.value;\r\n            owners[index-1] = msg.sender;\r\n            rgba[index-1] = _rgba;\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    function getPixels() public view returns (uint32[],  uint32[], address[],uint256[]) {\r\n        return (coordinates,rgba,owners,prices);\r\n    }\r\n    \r\n    function getPixel(uint16 _x, uint16 _y) public view returns (uint32, address, uint256){\r\n        uint32 coordinate = uint32(_x) << 16 | _y;\r\n        uint32 index = coordinatesToIndex[coordinate];\r\n        if(index == 0){\r\n            return (0, address(0x0), 0);\r\n        }else{\r\n            return (\r\n                rgba[index-1], \r\n                owners[index-1],\r\n                prices[index-1]\r\n            );\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint16\"},{\"name\":\"_y\",\"type\":\"uint16\"},{\"name\":\"_rgba\",\"type\":\"uint32\"}],\"name\":\"buyPixel\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint16\"},{\"name\":\"_y\",\"type\":\"uint16\"}],\"name\":\"getPixel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pixelCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPixels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\"},{\"name\":\"\",\"type\":\"uint32[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PixelStorage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://12e7a71e9e0b1071c1d3f9a942e4251b735a4116aca0c122c318021cb5ed9676"}]}