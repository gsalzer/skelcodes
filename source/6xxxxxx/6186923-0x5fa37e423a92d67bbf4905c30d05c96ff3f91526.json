{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface token {\r\n  function mint(address _to, uint256 _amount) external;\r\n  function balanceOf(address _owner) external returns (uint256);\r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address multisig;\r\n    address marketing;\r\n\r\n    uint256 restrictedPercent;\r\n\r\n    address restricted;\r\n\r\n    uint256 minBuy;\r\n    uint256 maxOwnerHas;\r\n\r\n    token public tokenReward;\r\n\r\n    uint256 rate;\r\n    \r\n    uint256 startPrivateSale;\r\n    uint256 endPrivateSale;\r\n    uint256 startPreICO;\r\n    uint256 endPreICO;\r\n    uint256 startICO;\r\n    uint256 endICO;\r\n\r\n    constructor() public {\r\n      multisig = owner;\r\n      marketing = 0x4000ED538DB994ae3d502b0CeF54ca6871550d12;\r\n      restricted = owner;\r\n      restrictedPercent = 25;\r\n      rate = 2500;\r\n      minBuy = 100 * 1 ether;\r\n      maxOwnerHas = 30937500 * 1 ether;\r\n      tokenReward = token(0x586effe896ec06f4a5b5bac7f04b84a6f737bad1);\r\n\r\n      startPrivateSale = now;\r\n      endPrivateSale = now + 25 * 1 minutes;  // 1536624000; // (2018-09-11 00:00:00)\r\n      startPreICO = now + 30 * 1 minutes;     // 1539129600; // (2018-10-10 00:00:00)\r\n      endPreICO = now + 55 * 1 minutes;       // 1541894400; // (2018-11-11 00:00:00)\r\n      startICO = now + 60 * 1 minutes;        // 1543622400; // (2018-12-01 00:00:00)\r\n      endICO = now + 90 * 1 minutes;          // 1545436800; // (2018-12-22 00:00:00)\r\n    }\r\n\r\n    modifier saleIsOn() {\r\n      require(now > startPrivateSale && now < endICO);\r\n      _;\r\n    }\r\n    \r\n    function init() saleIsOn public {\r\n        tokenReward.mint(owner, 1000000 * 1 ether);\r\n    }\r\n\r\n   function createTokens() saleIsOn public payable {\r\n        uint256 tokens = rate.mul(msg.value);\r\n        uint256 bonusTokens = 0;\r\n        uint256 period = 0;\r\n\r\n        require(tokens >= minBuy);\r\n        uint256 tokensTotal = tokens.add(tokenReward.balanceOf(msg.sender));\r\n        require(tokensTotal <= maxOwnerHas);\r\n\r\n        multisig.transfer(msg.value.div(2));\r\n        marketing.transfer(msg.value.div(2));\r\n        \r\n        // bonus for private sales\r\n        if (now > startPrivateSale && now < endPrivateSale) {\r\n            if (msg.value > 160 * 1 ether) {\r\n                bonusTokens = tokens.div(100).mul(35); // 35/100 = 35%\r\n            } else if (msg.value > 245 * 1 ether) {\r\n                bonusTokens = tokens.div(10).mul(4); // 4/10 = 40/100 = 40%\r\n            } else if (msg.value > 160 * 1 ether) {\r\n                bonusTokens = tokens.div(2); // 1/2 = 50%\r\n            }\r\n        }\r\n        // bonuses for pre-ICO\r\n        if (now > startPreICO && now < endPreICO) {\r\n            period = endPreICO - startPreICO;\r\n            if (now < startPreICO + period.div(4)) {\r\n              bonusTokens = tokens.div(10).mul(3); // 3/10 = 30/100 = 30%\r\n            } else if(now >= startPreICO + period.div(4) && now < startPreICO + period.div(4).mul(2)) {\r\n              bonusTokens = tokens.div(4); // 1/4 = 25/100 = 25%\r\n            } else if(now >= startPreICO + period.div(4).mul(2) && now < startPreICO + period.div(4).mul(3)) {\r\n              bonusTokens = tokens.div(5); // 1/5 = 20/100 = 20%\r\n            } else if(now >= startPreICO + (period * 1 days).div(4).mul(3)) {\r\n                bonusTokens = tokens.div(100).mul(15); // 15/100 = 15%\r\n            }\r\n        }\r\n        // bonuses for ICO\r\n        if (now > startICO && now < endICO) {\r\n            period = endICO - startICO;\r\n            if (now < startICO + (period * 1 days).div(3)) {\r\n              bonusTokens = tokens.div(10); // 1/10 = 10/100 = 10%\r\n            } else if(now >= startICO + (period * 1 days).div(3) && now < startICO + (period * 1 days).div(3).mul(2)) {\r\n              bonusTokens = tokens.div(1000).mul(75); // 75/1000 = 7.5/100 =7.5%\r\n            } else if(now >= startICO + (period * 1 days).div(3).mul(2)) {\r\n              bonusTokens = tokens.div(20); // 1/20 = 5/100 = 5%\r\n            }\r\n        }\r\n        tokens = tokens.add(bonusTokens);\r\n        tokenReward.mint(msg.sender, tokens);\r\n\r\n        uint256 restrictedTokens = tokens.mul(restrictedPercent).div(100 - restrictedPercent);\r\n        tokenReward.mint(restricted, restrictedTokens);\r\n    }\r\n\r\n    function() external payable {\r\n        createTokens();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e38df1e86d8f79eda5be8ddf5af2079dc190730ab96a851003579b050133fae5"}]}