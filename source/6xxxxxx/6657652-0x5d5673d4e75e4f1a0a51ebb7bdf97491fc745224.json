{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/// @title BibBom Token Holding Incentive Program\r\n/// @author TranTho - <thoff@bigbom.com>.\r\n/// For more information, please visit https://bigbom.com.\r\ncontract BBOHoldingContract {\r\n    using SafeMath for uint;\r\n    using Math for uint;\r\n   \r\n    // During the first 60 days of deployment, this contract opens for deposit of BBO.\r\n    uint public constant DEPOSIT_PERIOD             = 60 days; // = 2 months\r\n\r\n    // 18 months after deposit, user can withdrawal all or part of his/her BBO with bonus.\r\n    // The bonus is this contract's initial BBO balance.\r\n    uint public constant WITHDRAWAL_DELAY           = 360 days; // = 1 year \r\n\r\n    // Send 0.001ETH per 10000 BBO partial withdrawal, or 0 for a once-for-all withdrawal.\r\n    // All ETH will be returned.\r\n    uint public constant WITHDRAWAL_SCALE           = 1E7; // 1ETH for withdrawal of 10,000,000 BBO.\r\n\r\n    // Ower can drain all remaining BBO after 3 years.\r\n    uint public constant DRAIN_DELAY                = 720 days; // = 2 years.\r\n    \r\n    address public bboTokenAddress  = 0x0;\r\n    address public owner            = 0x0;\r\n\r\n    uint public bboDeposited        = 0;\r\n    uint public depositStartTime    = 0;\r\n    uint public depositStopTime     = 0;\r\n\r\n    struct Record {\r\n        uint bboAmount;\r\n        uint timestamp;\r\n    }\r\n\r\n    mapping (address => Record) records;\r\n    \r\n    /* \r\n     * EVENTS\r\n     */\r\n\r\n    /// Emitted when program starts.\r\n    event Started(uint _time);\r\n\r\n    /// Emitted when all BBO are drained.\r\n    event Drained(uint _bboAmount);\r\n\r\n    /// Emitted for each sucuessful deposit.\r\n    uint public depositId = 0;\r\n    event Deposit(uint _depositId, address indexed _addr, uint _bboAmount);\r\n\r\n    /// Emitted for each sucuessful deposit.\r\n    uint public withdrawId = 0;\r\n    event Withdrawal(uint _withdrawId, address indexed _addr, uint _bboAmount);\r\n\r\n    /// @dev Initialize the contract\r\n    /// @param _bboTokenAddress BBO ERC20 token address\r\n    constructor (address _bboTokenAddress, address _owner) public {\r\n        require(_bboTokenAddress != address(0));\r\n        require(_owner != address(0));\r\n\r\n        bboTokenAddress = _bboTokenAddress;\r\n        owner = _owner;\r\n    }\r\n\r\n    /*\r\n     * PUBLIC FUNCTIONS\r\n     */\r\n\r\n    /// @dev start the program.\r\n    function start() public {\r\n        require(msg.sender == owner);\r\n        require(depositStartTime == 0);\r\n\r\n        depositStartTime = now;\r\n        depositStopTime  = depositStartTime + DEPOSIT_PERIOD;\r\n\r\n        emit Started(depositStartTime);\r\n    }\r\n\r\n\r\n    /// @dev drain BBO.\r\n    function drain() public {\r\n        require(msg.sender == owner);\r\n        require(depositStartTime > 0 && now >= depositStartTime + DRAIN_DELAY);\r\n\r\n        uint balance = bboBalance();\r\n        require(balance > 0);\r\n\r\n        require(ERC20(bboTokenAddress).transfer(owner, balance));\r\n\r\n        emit Drained(balance);\r\n    }\r\n\r\n    function () payable {\r\n        require(depositStartTime > 0);\r\n\r\n        if (now >= depositStartTime && now <= depositStopTime) {\r\n            depositBBO();\r\n        } else if (now > depositStopTime){\r\n            withdrawBBO();\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /// @return Current BBO balance.\r\n    function bboBalance() public constant returns (uint) {\r\n        return ERC20(bboTokenAddress).balanceOf(address(this));\r\n    }\r\n    function holdBalance() public constant returns (uint) {\r\n        return records[msg.sender].bboAmount;\r\n    }\r\n    function lastDeposit() public constant returns (uint) {\r\n        return records[msg.sender].timestamp;\r\n    }\r\n    /// @dev Deposit BBO.\r\n    function depositBBO() payable {\r\n        require(depositStartTime > 0);\r\n        require(msg.value == 0);\r\n        require(now >= depositStartTime && now <= depositStopTime);\r\n        \r\n        ERC20 bboToken = ERC20(bboTokenAddress);\r\n        uint bboAmount = bboToken\r\n            .balanceOf(msg.sender)\r\n            .min256(bboToken.allowance(msg.sender, address(this)));\r\n\r\n        if(bboAmount > 0){\r\n            require(bboToken.transferFrom(msg.sender, address(this), bboAmount));\r\n            Record storage record = records[msg.sender];\r\n            record.bboAmount = record.bboAmount.add(bboAmount);\r\n            record.timestamp = now;\r\n            records[msg.sender] = record;\r\n\r\n            bboDeposited = bboDeposited.add(bboAmount);\r\n            emit Deposit(depositId++, msg.sender, bboAmount);\r\n        }\r\n    }\r\n\r\n    /// @dev Withdrawal BBO.\r\n    function withdrawBBO() payable {\r\n        require(depositStartTime > 0);\r\n        require(bboDeposited > 0);\r\n\r\n        Record storage record = records[msg.sender];\r\n        require(now >= record.timestamp + WITHDRAWAL_DELAY);\r\n        require(record.bboAmount > 0);\r\n\r\n        uint bboWithdrawalBase = record.bboAmount;\r\n        if (msg.value > 0) {\r\n            bboWithdrawalBase = bboWithdrawalBase\r\n                .min256(msg.value.mul(WITHDRAWAL_SCALE));\r\n        }\r\n\r\n        uint bboBonus = getBonus(bboWithdrawalBase);\r\n        uint balance = bboBalance();\r\n        uint bboAmount = balance.min256(bboWithdrawalBase + bboBonus);\r\n        \r\n        bboDeposited = bboDeposited.sub(bboWithdrawalBase);\r\n        record.bboAmount = record.bboAmount.sub(bboWithdrawalBase);\r\n\r\n        if (record.bboAmount == 0) {\r\n            delete records[msg.sender];\r\n        } else {\r\n            records[msg.sender] = record;\r\n        }\r\n\r\n        emit Withdrawal(withdrawId++, msg.sender, bboAmount);\r\n\r\n        require(ERC20(bboTokenAddress).transfer(msg.sender, bboAmount));\r\n        if (msg.value > 0) {\r\n            msg.sender.transfer(msg.value);\r\n        }\r\n    }\r\n\r\n    function getBonus(uint _bboWithdrawalBase) constant returns (uint) {\r\n        return internalCalculateBonus(bboBalance() - bboDeposited,bboDeposited, _bboWithdrawalBase);\r\n    }\r\n\r\n    function internalCalculateBonus(uint _totalBonusRemaining, uint _bboDeposited, uint _bboWithdrawalBase) constant returns (uint) {\r\n        require(_bboDeposited > 0);\r\n        require(_totalBonusRemaining >= 0);\r\n\r\n        // The bonus is non-linear function to incentivize later withdrawal.\r\n        // bonus = _totalBonusRemaining * power(_bboWithdrawalBase/_bboDeposited, 1.0625)\r\n        return _totalBonusRemaining\r\n            .mul(_bboWithdrawalBase.mul(sqrt(sqrt(sqrt(sqrt(_bboWithdrawalBase))))))\r\n            .div(_bboDeposited.mul(sqrt(sqrt(sqrt(sqrt(_bboDeposited))))));\r\n    }\r\n\r\n    function sqrt(uint x) internal constant returns (uint) {\r\n        uint y = x;\r\n        while (true) {\r\n            uint z = (y + (x / y)) / 2;\r\n            uint w = (z + (x / z)) / 2;\r\n            if (w == y) {\r\n                if (w < y) return w;\r\n                else return y;\r\n            }\r\n            y = w;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"WITHDRAWAL_DELAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bboBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositBBO\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bboWithdrawalBase\",\"type\":\"uint256\"}],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bboDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositStopTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WITHDRAWAL_SCALE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DRAIN_DELAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBBO\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_totalBonusRemaining\",\"type\":\"uint256\"},{\"name\":\"_bboDeposited\",\"type\":\"uint256\"},{\"name\":\"_bboWithdrawalBase\",\"type\":\"uint256\"}],\"name\":\"internalCalculateBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bboTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_bboTokenAddress\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_bboAmount\",\"type\":\"uint256\"}],\"name\":\"Drained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_depositId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_bboAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_withdrawId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_bboAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"}]","ContractName":"BBOHoldingContract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"00000000000000000000000084f7c44b6fed1080f647e354d552595be2cc602f00000000000000000000000005457b3d791f1449319ba6ff27c2a2f36d5a565d","Library":"","SwarmSource":"bzzr://0d2c67ef6b1de9674df8be96bc4fb6bc1d9ea9aaa91d46ba41e34187ecf1d0ee"}]}