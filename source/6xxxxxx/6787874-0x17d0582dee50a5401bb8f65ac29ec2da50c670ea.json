{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\ncontract Slot {\r\n    uint constant BET_EXPIRATION_BLOCKS = 250;\r\n    uint constant MIN_BET = 0.01 ether;\r\n    uint constant MAX_BET = 300000 ether;\r\n    uint constant JACKPOT_PERCENT = 10;\r\n    uint constant MINIPOT_PERCENT = 10;\r\n\r\n    uint[][] REELS = [\r\n                      [1,2,1,3,1,4,5,3,5,6],\r\n                      [1,2,1,3,1,4,1,3,1,6],\r\n                      [4,5,3,5,4,2,4,3,5,6]\r\n                      ];\r\n\r\n    uint[] SYMBOL_MASK = [0, 1, 2, 4, 8, 16, 32];\r\n\r\n    uint[][] PAYTABLE = [\r\n                         [0x010100, 2],\r\n                         [0x010120, 4],\r\n                         [0x010110, 4],\r\n                         [0x040402, 8],\r\n                         [0x040404, 8],\r\n                         [0x080802, 12],\r\n                         [0x080808, 12],\r\n                         [0x202002, 16],\r\n                         [0x020220, 16],\r\n                         [0x202020, 100],\r\n                         [0x020202, 9999]\r\n                         ];\r\n\r\n    address owner;\r\n    address pendingOwner;\r\n    uint acceptPrice;\r\n\r\n    uint public pendingBetAmount;\r\n    uint public jackpotPool;\r\n    uint public minipotPool;\r\n    uint public rollTimes;\r\n    uint public minipotTimes;\r\n\r\n    struct Roll {\r\n        uint bet;\r\n        uint8 lines;\r\n        uint8 rollCount;\r\n        uint blocknum;\r\n        address next;\r\n    }\r\n\r\n    struct PartnerShare {\r\n        address from;\r\n        uint share;\r\n    }\r\n\r\n    event RollBegin(address indexed from, uint bet, uint8 lines, uint count);\r\n    event RollEnd(address indexed from, uint bet, uint8 lines, uint32 wheel, uint win, uint minipot);\r\n\r\n    mapping(address => Roll[]) public rolls;\r\n    address public rollHead;\r\n    address public rollTail;\r\n\r\n    PartnerShare[] public partners;\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setOwner(address newOwner, uint price) public {\r\n        require (msg.sender == owner, \"Only owner can set new owner.\");\r\n        require (newOwner != owner, \"No need to set again.\");\r\n        pendingOwner = newOwner;\r\n        acceptPrice = price;\r\n    }\r\n\r\n    function acceptOwner() payable public {\r\n        require (msg.sender == pendingOwner, \"You are not pending owner.\");\r\n        require (msg.value >= acceptPrice, \"Amount not enough.\");\r\n        owner.transfer(acceptPrice);\r\n        owner = pendingOwner;\r\n    }\r\n\r\n    // enable direct transfer ether to contract\r\n    function() public payable {\r\n        require (msg.value > 200 finney, 'Min investment required.');\r\n        if (owner != msg.sender) {\r\n            partners.push(PartnerShare(msg.sender, msg.value / 1 finney));\r\n        }\r\n    }\r\n\r\n    function kill() external {\r\n        require (msg.sender == owner, \"Only owner can kill.\");\r\n        require (pendingBetAmount == 0, \"All spins need processed befor self-destruct.\");\r\n        distribute();\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function rollBlockNumber(address addr) public view returns (uint) {\r\n        if (rolls[addr].length > 0) {\r\n            return rolls[addr][0].blocknum;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getPartnersCount() public view returns (uint) {\r\n        return partners.length;\r\n    }\r\n\r\n    function jackpot() public view returns (uint) {\r\n        return jackpotPool / 2;\r\n    }\r\n\r\n    function minipot() public view returns (uint) {\r\n        return minipotPool / 2;\r\n    }\r\n\r\n    function roll(uint8 lines, uint8 count) public payable {\r\n        require (rolls[msg.sender].length == 0, \"Can't roll mutiple times.\");\r\n\r\n        uint betValue = msg.value / count;\r\n        require (betValue >= MIN_BET && betValue <= MAX_BET, \"Bet amount should be within range.\");\r\n        rolls[msg.sender].push(Roll(betValue, lines, count, block.number, address(0)));\r\n\r\n        // append to roll linked list\r\n        if (rollHead == address(0)) {\r\n            rollHead = msg.sender;\r\n        } else {\r\n            rolls[rollTail][0].next = msg.sender;\r\n        }\r\n        rollTail = msg.sender;\r\n\r\n        pendingBetAmount += msg.value;\r\n        jackpotPool += msg.value * JACKPOT_PERCENT / 100;\r\n        minipotPool += msg.value * MINIPOT_PERCENT / 100;\r\n\r\n        emit RollBegin(msg.sender, betValue, lines, count);\r\n    }\r\n\r\n    function check(uint maxCount) public {\r\n        require (maxCount > 0, 'No reason for check nothing');\r\n\r\n        uint i = 0;\r\n        address currentAddr = rollHead;\r\n\r\n        while (i < maxCount && currentAddr != address(0)) {\r\n            Roll storage rollReq = rolls[currentAddr][0];\r\n\r\n            if (rollReq.blocknum >= block.number) {\r\n                return;\r\n            }\r\n\r\n            checkRoll(currentAddr, rollReq);\r\n\r\n            rollHead = rollReq.next;\r\n            if (currentAddr == rollTail) {\r\n                rollTail = address(0);\r\n            }\r\n\r\n            delete rolls[currentAddr];\r\n\r\n            currentAddr = rollHead;\r\n            i++;\r\n        }\r\n    }\r\n\r\n    function checkRoll(address addr, Roll storage rollReq) private {\r\n        uint totalWin = 0;\r\n\r\n        if (block.number <= rollReq.blocknum + BET_EXPIRATION_BLOCKS) {\r\n            for (uint x = 0; x < rollReq.rollCount; x++) {\r\n                totalWin += doRoll(addr, rollReq.bet, rollReq.lines, rollReq.blocknum, pendingBetAmount + rollTimes + x);\r\n            }\r\n        } else {\r\n            totalWin = rollReq.bet * rollReq.rollCount - 2300;\r\n        }\r\n\r\n        pendingBetAmount -= rollReq.bet * rollReq.rollCount;\r\n\r\n        if (totalWin > 0) {\r\n            if (address(this).balance > totalWin + 2300) {\r\n                addr.transfer(totalWin);\r\n            } else {\r\n                partners.push(PartnerShare(addr, totalWin / 1 finney));\r\n            }\r\n        }\r\n    }\r\n\r\n    function doRoll(address addr, uint bet, uint8 lines, uint blocknum, uint seed) private returns (uint) {\r\n        uint[3] memory stops;\r\n        uint winRate;\r\n        uint entropy;\r\n        (stops, winRate, entropy) = calcRoll(addr, blocknum, seed);\r\n\r\n        uint wheel = stops[0]<<16 | stops[1]<<8 | stops[2];\r\n        uint win = bet * winRate;\r\n\r\n        // Jackpot\r\n        if (winRate == 9999) {\r\n            win = jackpotPool / 2;\r\n            jackpotPool -= win;\r\n        }\r\n\r\n\r\n        rollTimes++;\r\n\r\n        uint minipotWin = 0;\r\n        // Check minipot\r\n        if (0xffff / (entropy >> 32 & 0xffff) > (100 * (minipotTimes + 1)) - rollTimes) {\r\n            minipotTimes++;\r\n            minipotWin = minipotPool / 2;\r\n            minipotPool -= minipotWin;\r\n        }\r\n\r\n        emit RollEnd(addr, bet, lines, uint32(wheel), win, minipotWin);\r\n\r\n        return win + minipotWin;\r\n    }\r\n\r\n    function calcRoll(address addr, uint blocknum, uint seed) public view returns (uint[3] memory stops, uint winValue, uint entropy) {\r\n        require (block.number > blocknum, \"Can't check in the same block or before.\");\r\n        require (block.number <= blocknum + BET_EXPIRATION_BLOCKS, \"Can't check for too old block.\");\r\n        entropy = uint(keccak256(abi.encodePacked(addr, blockhash(blocknum), seed)));\r\n        stops = [REELS[0][entropy % REELS[0].length],\r\n                 REELS[1][(entropy >> 8) % REELS[1].length],\r\n                 REELS[2][(entropy >> 16) % REELS[2].length]];\r\n        winValue = calcPayout(stops[0], stops[1], stops[2]);\r\n    }\r\n\r\n    function calcPayout(uint p1, uint p2, uint p3) public view returns (uint) {\r\n        uint line = SYMBOL_MASK[p1] << 16 | SYMBOL_MASK[p2] << 8 | SYMBOL_MASK[p3];\r\n        uint pay = 0;\r\n\r\n        for (uint i = 0; i < PAYTABLE.length; i++) {\r\n            if (PAYTABLE[i][0] == line & PAYTABLE[i][0]) {\r\n                pay = PAYTABLE[i][1];\r\n            }\r\n        }\r\n\r\n        return pay;\r\n    }\r\n\r\n    function getBonus() public view returns (uint) {\r\n        return address(this).balance - pendingBetAmount - jackpotPool - minipotPool;\r\n    }\r\n\r\n    function distribute() public returns (uint result) {\r\n        bool isPartner = (owner == msg.sender);\r\n        uint totalShare = 0;\r\n\r\n        for (uint i = 0; i < partners.length; i++) {\r\n            if (partners[i].from == msg.sender) {\r\n                isPartner = true;\r\n            }\r\n\r\n            totalShare += partners[i].share;\r\n        }\r\n\r\n        require(isPartner, 'Only partner can distrubute bonus.');\r\n\r\n        uint bonus = getBonus();\r\n\r\n        if (totalShare > 0) {\r\n            uint price = ((bonus / 10) * 6) / totalShare;\r\n\r\n            if (price > 0) {\r\n                for (uint j = 0; j < partners.length; j++) {\r\n                    uint share = partners[j].share * price;\r\n                    partners[j].from.transfer(share);\r\n                    if (partners[j].from == msg.sender) {\r\n                        result += share;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (price > 2 * 1 finney) {\r\n                delete partners;\r\n            }\r\n        }\r\n\r\n        uint ownerShare = (bonus / 10) * 4;\r\n        owner.transfer(ownerShare);\r\n        if (owner == msg.sender) {\r\n            result += ownerShare;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minipotTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rolls\",\"outputs\":[{\"name\":\"bet\",\"type\":\"uint256\"},{\"name\":\"lines\",\"type\":\"uint8\"},{\"name\":\"rollCount\",\"type\":\"uint8\"},{\"name\":\"blocknum\",\"type\":\"uint256\"},{\"name\":\"next\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rollTail\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minipotPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxCount\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rollHead\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minipot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rollTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPartnersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partners\",\"outputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"share\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lines\",\"type\":\"uint8\"},{\"name\":\"count\",\"type\":\"uint8\"}],\"name\":\"roll\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"rollBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"distribute\",\"outputs\":[{\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"p1\",\"type\":\"uint256\"},{\"name\":\"p2\",\"type\":\"uint256\"},{\"name\":\"p3\",\"type\":\"uint256\"}],\"name\":\"calcPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"blocknum\",\"type\":\"uint256\"},{\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"calcRoll\",\"outputs\":[{\"name\":\"stops\",\"type\":\"uint256[3]\"},{\"name\":\"winValue\",\"type\":\"uint256\"},{\"name\":\"entropy\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lines\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"RollBegin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lines\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"wheel\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"win\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minipot\",\"type\":\"uint256\"}],\"name\":\"RollEnd\",\"type\":\"event\"}]","ContractName":"Slot","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a8dc814b1d14f8ad8f5016115fe8621feb54e3616f00ec18fd0b141f008e8dc0"}]}