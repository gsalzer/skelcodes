{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/TxRegistry.sol\r\n\r\n/**\r\n* @title Transaction Registry for Customer\r\n* @dev Registry of customer's payments for MCW and payments for KWh.\r\n*/\r\ncontract TxRegistry is Ownable {\r\n    address public customer;\r\n\r\n    // @dev Structure for TX data\r\n    struct TxData {\r\n        bytes32 txOrigMcwTransfer;\r\n        uint256 amountMCW;\r\n        uint256 amountKWh;\r\n        uint256 timestampPaymentMCW;\r\n        bytes32 txPaymentKWh;\r\n        uint256 timestampPaymentKWh;\r\n    }\r\n\r\n    // @dev Customer's Tx of payment for MCW registry    \r\n    mapping (bytes32 => TxData) private txRegistry;\r\n\r\n    // @dev Customer's list of Tx   \r\n    bytes32[] private txIndex;\r\n\r\n    /**\r\n    * @dev Constructor\r\n    * @param _customer the address of a customer for whom the TxRegistry contract is creating\r\n    */    \r\n    constructor(address _customer) public {\r\n        customer = _customer;\r\n    }\r\n\r\n    /**\r\n    * @dev Owner can add a new Tx of payment for MCW to the customer's TxRegistry\r\n    * @param _txPaymentForMCW the Tx of payment for MCW which will be added\r\n    * @param _txOrigMcwTransfer the Tx of original MCW transfer in Ethereum network which acts as source for this Tx of payment for MCW\r\n    * @param _amountMCW the amount of MCW tokens which will be recorded to the new Tx\r\n    * @param _amountKWh the amount of KWh which will be recorded to the new Tx\r\n    * @param _timestamp the timestamp of payment for MCW which will be recorded to the new Tx\r\n    */\r\n    function addTxToRegistry(\r\n        bytes32 _txPaymentForMCW,\r\n        bytes32 _txOrigMcwTransfer,\r\n        uint256 _amountMCW,\r\n        uint256 _amountKWh,\r\n        uint256 _timestamp\r\n        ) public onlyOwner returns(bool)\r\n    {\r\n        require(\r\n            _txPaymentForMCW != 0 && _txOrigMcwTransfer != 0 && _amountMCW != 0 && _amountKWh != 0 && _timestamp != 0,\r\n            \"All parameters must be not empty.\"\r\n        );\r\n        require(\r\n            txRegistry[_txPaymentForMCW].timestampPaymentMCW == 0,\r\n            \"Tx with such hash is already exist.\"\r\n        );\r\n\r\n        txRegistry[_txPaymentForMCW].txOrigMcwTransfer = _txOrigMcwTransfer;\r\n        txRegistry[_txPaymentForMCW].amountMCW = _amountMCW;\r\n        txRegistry[_txPaymentForMCW].amountKWh = _amountKWh;\r\n        txRegistry[_txPaymentForMCW].timestampPaymentMCW = _timestamp;\r\n        txIndex.push(_txPaymentForMCW);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Owner can mark a customer's Tx of payment for MCW as spent\r\n    * @param _txPaymentForMCW the Tx of payment for MCW which will be marked as spent\r\n    * @param _txPaymentForKWh the additional Tx of payment for KWh which will be recorded to the original Tx as proof of spend\r\n    * @param _timestamp the timestamp of payment for KWh which will be recorded to the Tx\r\n    */\r\n    function setTxAsSpent(bytes32 _txPaymentForMCW, bytes32 _txPaymentForKWh, uint256 _timestamp) public onlyOwner returns(bool) {\r\n        require(\r\n            _txPaymentForMCW != 0 && _txPaymentForKWh != 0 && _timestamp != 0,\r\n            \"All parameters must be not empty.\"\r\n        );\r\n        require(\r\n            txRegistry[_txPaymentForMCW].timestampPaymentMCW != 0,\r\n            \"Tx with such hash doesn't exist.\"\r\n        );\r\n        require(\r\n            txRegistry[_txPaymentForMCW].timestampPaymentKWh == 0,\r\n            \"Tx with such hash is already spent.\"\r\n        );\r\n\r\n        txRegistry[_txPaymentForMCW].txPaymentKWh = _txPaymentForKWh;\r\n        txRegistry[_txPaymentForMCW].timestampPaymentKWh = _timestamp;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW amount\r\n    */   \r\n    function getTxCount() public view returns(uint256) {\r\n        return txIndex.length;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW from customer's Tx list by index\r\n    * @param _index the index of a customer's Tx of payment for MCW in the customer's Tx list\r\n    */  \r\n    function getTxAtIndex(uint256 _index) public view returns(bytes32) {\r\n        return txIndex[_index];\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW data - Tx of original MCW transfer in Ethereum network which is recorded in the Tx\r\n    * @param _txPaymentForMCW the Tx of payment for MCW for which to get data\r\n    */  \r\n    function getTxOrigMcwTransfer(bytes32 _txPaymentForMCW) public view returns(bytes32) {\r\n        return txRegistry[_txPaymentForMCW].txOrigMcwTransfer;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW data - amount of MCW tokens which is recorded in the Tx\r\n    * @param _txPaymentForMCW the Tx of payment for MCW for which to get data\r\n    */  \r\n    function getTxAmountMCW(bytes32 _txPaymentForMCW) public view returns(uint256) {\r\n        return txRegistry[_txPaymentForMCW].amountMCW;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW data - amount of KWh which is recorded in the Tx\r\n    * @param _txPaymentForMCW the Tx of payment for MCW for which to get data\r\n    */  \r\n    function getTxAmountKWh(bytes32 _txPaymentForMCW) public view returns(uint256) {\r\n        return txRegistry[_txPaymentForMCW].amountKWh;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW data - timestamp of payment for MCW which is recorded in the Tx\r\n    * @param _txPaymentForMCW the Tx of payment for MCW for which to get data\r\n    */  \r\n    function getTxTimestampPaymentMCW(bytes32 _txPaymentForMCW) public view returns(uint256) {\r\n        return txRegistry[_txPaymentForMCW].timestampPaymentMCW;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW data - Tx of payment for KWh which is recorded in the Tx\r\n    * @param _txPaymentForMCW the Tx of payment for MCW for which to get data\r\n    */  \r\n    function getTxPaymentKWh(bytes32 _txPaymentForMCW) public view returns(bytes32) {\r\n        return txRegistry[_txPaymentForMCW].txPaymentKWh;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW data - timestamp of payment for KWh which is recorded in the Tx\r\n    * @param _txPaymentForMCW the Tx of payment for MCW for which to get data\r\n    */  \r\n    function getTxTimestampPaymentKWh(bytes32 _txPaymentForMCW) public view returns(uint256) {\r\n        return txRegistry[_txPaymentForMCW].timestampPaymentKWh;\r\n    }\r\n\r\n    /**\r\n    * @dev Check the customer's Tx of payment for MCW\r\n    * @param _txPaymentForMCW the Tx of payment for MCW which need to be checked\r\n    */  \r\n    function isValidTxPaymentForMCW(bytes32 _txPaymentForMCW) public view returns(bool) {\r\n        bool isValid = false;\r\n        if (txRegistry[_txPaymentForMCW].timestampPaymentMCW != 0) {\r\n            isValid = true;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    /**\r\n    * @dev Check if the customer's Tx of payment for MCW is spent\r\n    * @param _txPaymentForMCW the Tx of payment for MCW which need to be checked\r\n    */\r\n    function isSpentTxPaymentForMCW(bytes32 _txPaymentForMCW) public view returns(bool) {\r\n        bool isSpent = false;\r\n        if (txRegistry[_txPaymentForMCW].timestampPaymentKWh != 0) {\r\n            isSpent = true;\r\n        }\r\n        return isSpent;\r\n    }\r\n\r\n    /**\r\n    * @dev Check the customer's Tx of payment for KWh\r\n    * @param _txPaymentForKWh the Tx of payment for KWh which need to be checked\r\n    */\r\n    function isValidTxPaymentForKWh(bytes32 _txPaymentForKWh) public view returns(bool) {\r\n        bool isValid = false;\r\n        for (uint256 i = 0; i < getTxCount(); i++) {\r\n            if (txRegistry[getTxAtIndex(i)].txPaymentKWh == _txPaymentForKWh) {\r\n                isValid = true;\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW by Tx payment for KWh \r\n    * @param _txPaymentForKWh the Tx of payment for KWh\r\n    */\r\n    function getTxPaymentMCW(bytes32 _txPaymentForKWh) public view returns(bytes32) {\r\n        bytes32 txMCW = 0;\r\n        for (uint256 i = 0; i < getTxCount(); i++) {\r\n            if (txRegistry[getTxAtIndex(i)].txPaymentKWh == _txPaymentForKWh) {\r\n                txMCW = getTxAtIndex(i);\r\n                break;\r\n            }\r\n        }\r\n        return txMCW;\r\n    }\r\n}\r\n\r\n// File: contracts/McwCustomerRegistry.sol\r\n\r\n/**\r\n* @title Customers Registry\r\n* @dev Registry of all customers\r\n*/\r\ncontract McwCustomerRegistry is Ownable {\r\n    // @dev Key: address of customer wallet, Value: address of customer TxRegistry contract\r\n    mapping (address => address) private registry;\r\n\r\n    // @dev Customers list\r\n    address[] private customerIndex;\r\n\r\n    // @dev Events for dashboard\r\n    event NewCustomer(address indexed customer, address indexed txRegistry);\r\n    event NewCustomerTx(\r\n        address indexed customer,\r\n        bytes32 txPaymentForMCW,\r\n        bytes32 txOrigMcwTransfer,\r\n        uint256 amountMCW,\r\n        uint256 amountKWh,\r\n        uint256 timestamp\r\n    );\r\n    event SpendCustomerTx(address indexed customer, bytes32 txPaymentForMCW, bytes32 txPaymentForKWh, uint256 timestamp);\r\n\r\n    // @dev Constructor\r\n    constructor() public {}\r\n\r\n    /**\r\n    * @dev Owner can add a new customer to registry\r\n    * @dev Creates a related TxRegistry contract for the new customer\r\n    * @dev Related event will be generated\r\n    * @param _customer the address of a new customer to add\r\n    */\r\n    function addCustomerToRegistry(address _customer) public onlyOwner returns(bool) {\r\n        require(\r\n            _customer != address(0),\r\n            \"Parameter must be not empty.\"\r\n        );\r\n        require(\r\n            registry[_customer] == address(0),\r\n            \"Customer is already in the registry.\"\r\n        );\r\n\r\n        address txRegistry = new TxRegistry(_customer);\r\n        registry[_customer] = txRegistry;\r\n        customerIndex.push(_customer);\r\n        emit NewCustomer(_customer, txRegistry);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Owner can add a new Tx of payment for MCW to the customer's TxRegistry\r\n    * @dev Generates the Tx of payment for MCW (hash as proof of payment) and writes the Tx data to the customer's TxRegistry\r\n    * @dev Related event will be generated\r\n    * @param _customer the address of a customer to whom to add a new Tx\r\n    * @param _txOrigMcwTransfer the Tx of original MCW transfer in Ethereum network which acts as source for a new Tx of payment for MCW\r\n    * @param _amountMCW the amount of MCW tokens which will be recorded to the new Tx\r\n    * @param _amountKWh the amount of KWh which will be recorded to the new Tx\r\n    */\r\n    function addTxToCustomerRegistry(\r\n        address _customer,\r\n        bytes32 _txOrigMcwTransfer,\r\n        uint256 _amountMCW,\r\n        uint256 _amountKWh\r\n        ) public onlyOwner returns(bool)\r\n    {\r\n        require(\r\n            isValidCustomer(_customer),\r\n            \"Customer is not in the registry.\"\r\n        );\r\n        require(\r\n            _txOrigMcwTransfer != 0 && _amountMCW != 0 && _amountKWh != 0,\r\n            \"All parameters must be not empty.\"\r\n        );\r\n\r\n        uint256 timestamp = now;\r\n        bytes32 txPaymentForMCW = keccak256(\r\n            abi.encodePacked(\r\n                _customer,\r\n                _amountMCW,\r\n                _amountKWh,\r\n                timestamp)\r\n            );\r\n\r\n        TxRegistry txRegistry = TxRegistry(registry[_customer]);\r\n        require(\r\n            txRegistry.getTxTimestampPaymentMCW(txPaymentForMCW) == 0,\r\n            \"Tx with such hash is already exist.\"\r\n        );\r\n\r\n        if (!txRegistry.addTxToRegistry(\r\n            txPaymentForMCW,\r\n            _txOrigMcwTransfer,\r\n            _amountMCW,\r\n            _amountKWh,\r\n            timestamp))\r\n            revert (\"Something went wrong.\");\r\n        emit NewCustomerTx(\r\n            _customer,\r\n            txPaymentForMCW,\r\n            _txOrigMcwTransfer,\r\n            _amountMCW,\r\n            _amountKWh,\r\n            timestamp);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Owner can mark a customer's Tx of payment for MCW as spent\r\n    * @dev Generates an additional Tx of paymant for KWh (hash as proof of spend), which connected to the original Tx.\r\n    * @dev Related event will be generated\r\n    * @param _customer the address of a customer to whom to spend a Tx\r\n    * @param _txPaymentForMCW the Tx of payment for MCW which will be marked as spent\r\n    */\r\n    function setCustomerTxAsSpent(address _customer, bytes32 _txPaymentForMCW) public onlyOwner returns(bool) {\r\n        require(\r\n            isValidCustomer(_customer),\r\n            \"Customer is not in the registry.\"\r\n        );\r\n\r\n        TxRegistry txRegistry = TxRegistry(registry[_customer]);\r\n        require(\r\n            txRegistry.getTxTimestampPaymentMCW(_txPaymentForMCW) != 0,\r\n            \"Tx with such hash doesn't exist.\"\r\n        );\r\n        require(\r\n            txRegistry.getTxTimestampPaymentKWh(_txPaymentForMCW) == 0,\r\n            \"Tx with such hash is already spent.\"\r\n        );\r\n\r\n        uint256 timestamp = now;\r\n        bytes32 txPaymentForKWh = keccak256(\r\n            abi.encodePacked(\r\n                _txPaymentForMCW,\r\n                timestamp)\r\n            );\r\n\r\n        if (!txRegistry.setTxAsSpent(_txPaymentForMCW, txPaymentForKWh, timestamp))\r\n            revert (\"Something went wrong.\");\r\n        emit SpendCustomerTx(\r\n            _customer,\r\n            _txPaymentForMCW,\r\n            txPaymentForKWh,\r\n            timestamp);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the current amount of customers\r\n    */\r\n    function getCustomerCount() public view returns(uint256) {\r\n        return customerIndex.length;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's address from customers list by index\r\n    * @param _index the index of a customer in the customers list\r\n    */    \r\n    function getCustomerAtIndex(uint256 _index) public view returns(address) {\r\n        return customerIndex[_index];\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's TxRegistry contract\r\n    * @param _customer the address of a customer for whom to get TxRegistry contract \r\n    */   \r\n    function getCustomerTxRegistry(address _customer) public view returns(address) {\r\n        return registry[_customer];\r\n    }\r\n\r\n    /**\r\n    * @dev Check the customer's address\r\n    * @param _customer the address of a customer which need to be checked\r\n    */   \r\n    function isValidCustomer(address _customer) public view returns(bool) {\r\n        require(\r\n            _customer != address(0),\r\n            \"Parameter must be not empty.\"\r\n        );\r\n\r\n        bool isValid = false;\r\n        address txRegistry = registry[_customer];\r\n        if (txRegistry != address(0)) {\r\n            isValid = true;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    // wrappers on TxRegistry contract\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW amount\r\n    * @param _customer the address of a customer for whom to get\r\n    */   \r\n    function getCustomerTxCount(address _customer) public view returns(uint256) {\r\n        require(\r\n            isValidCustomer(_customer),\r\n            \"Customer is not in the registry.\"\r\n        );\r\n\r\n        TxRegistry txRegistry = TxRegistry(registry[_customer]);\r\n        uint256 txCount = txRegistry.getTxCount();\r\n        return txCount;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW from customer's Tx list by index\r\n    * @param _customer the address of a customer for whom to get\r\n    * @param _index the index of a customer's Tx of payment for MCW in the customer's Tx list\r\n    */       \r\n    function getCustomerTxAtIndex(address _customer, uint256 _index) public view returns(bytes32) {\r\n        require(\r\n            isValidCustomer(_customer),\r\n            \"Customer is not in the registry.\"\r\n        );\r\n\r\n        TxRegistry txRegistry = TxRegistry(registry[_customer]);\r\n        bytes32 txIndex = txRegistry.getTxAtIndex(_index);\r\n        return txIndex;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW data - Tx of original MCW transfer in Ethereum network which is recorded in the Tx\r\n    * @param _customer the address of a customer for whom to get\r\n    * @param _txPaymentForMCW the Tx of payment for MCW for which to get data\r\n    */  \r\n    function getCustomerTxOrigMcwTransfer(address _customer, bytes32 _txPaymentForMCW) public view returns(bytes32) {\r\n        require(\r\n            isValidCustomer(_customer),\r\n            \"Customer is not in the registry.\"\r\n        );\r\n        require(\r\n            _txPaymentForMCW != bytes32(0),\r\n            \"Parameter must be not empty.\"\r\n        );\r\n\r\n        TxRegistry txRegistry = TxRegistry(registry[_customer]);\r\n        bytes32 txOrigMcwTransfer = txRegistry.getTxOrigMcwTransfer(_txPaymentForMCW);\r\n        return txOrigMcwTransfer;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW data - amount of MCW tokens which is recorded in the Tx\r\n    * @param _customer the address of a customer for whom to get\r\n    * @param _txPaymentForMCW the Tx of payment for MCW for which to get data\r\n    */  \r\n    function getCustomerTxAmountMCW(address _customer, bytes32 _txPaymentForMCW) public view returns(uint256) {\r\n        require(\r\n            isValidCustomer(_customer),\r\n            \"Customer is not in the registry.\"\r\n        );\r\n        require(\r\n            _txPaymentForMCW != bytes32(0),\r\n            \"Parameter must be not empty.\"\r\n        );\r\n\r\n        TxRegistry txRegistry = TxRegistry(registry[_customer]);\r\n        uint256 amountMCW = txRegistry.getTxAmountMCW(_txPaymentForMCW);\r\n        return amountMCW;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW data - amount of KWh which is recorded in the Tx\r\n    * @param _customer the address of a customer for whom to get\r\n    * @param _txPaymentForMCW the Tx of payment for MCW for which to get data\r\n    */  \r\n    function getCustomerTxAmountKWh(address _customer, bytes32 _txPaymentForMCW) public view returns(uint256) {\r\n        require(\r\n            isValidCustomer(_customer),\r\n            \"Customer is not in the registry.\"\r\n        );\r\n        require(\r\n            _txPaymentForMCW != bytes32(0),\r\n            \"Parameter must be not empty.\"\r\n        );\r\n\r\n        TxRegistry txRegistry = TxRegistry(registry[_customer]);\r\n        uint256 amountKWh = txRegistry.getTxAmountKWh(_txPaymentForMCW);\r\n        return amountKWh;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW data - timestamp of payment for MCW which is recorded in the Tx\r\n    * @param _customer the address of a customer for whom to get\r\n    * @param _txPaymentForMCW the Tx of payment for MCW for which to get data\r\n    */  \r\n    function getCustomerTxTimestampPaymentMCW(address _customer, bytes32 _txPaymentForMCW) public view returns(uint256) {\r\n        require(\r\n            isValidCustomer(_customer),\r\n            \"Customer is not in the registry.\"\r\n        );\r\n        require(\r\n            _txPaymentForMCW != bytes32(0),\r\n            \"Parameter must be not empty.\"\r\n        );\r\n\r\n        TxRegistry txRegistry = TxRegistry(registry[_customer]);\r\n        uint256 timestampPaymentMCW = txRegistry.getTxTimestampPaymentMCW(_txPaymentForMCW);\r\n        return timestampPaymentMCW;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW data - Tx of payment for KWh which is recorded in the Tx\r\n    * @param _customer the address of a customer for whom to get\r\n    * @param _txPaymentForMCW the Tx of payment for MCW for which to get data\r\n    */  \r\n    function getCustomerTxPaymentKWh(address _customer, bytes32 _txPaymentForMCW) public view returns(bytes32) {\r\n        require(\r\n            isValidCustomer(_customer),\r\n            \"Customer is not in the registry.\"\r\n        );\r\n        require(\r\n            _txPaymentForMCW != bytes32(0),\r\n            \"Parameter must be not empty.\"\r\n        );\r\n\r\n        TxRegistry txRegistry = TxRegistry(registry[_customer]);\r\n        bytes32 txPaymentKWh = txRegistry.getTxPaymentKWh(_txPaymentForMCW);\r\n        return txPaymentKWh;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW data - timestamp of payment for KWh which is recorded in the Tx\r\n    * @param _customer the address of a customer for whom to get\r\n    * @param _txPaymentForMCW the Tx of payment for MCW for which to get data\r\n    */  \r\n    function getCustomerTxTimestampPaymentKWh(address _customer, bytes32 _txPaymentForMCW) public view returns(uint256) {\r\n        require(\r\n            isValidCustomer(_customer),\r\n            \"Customer is not in the registry.\"\r\n        );\r\n        require(\r\n            _txPaymentForMCW != bytes32(0),\r\n            \"Parameter must be not empty.\"\r\n        );\r\n\r\n        TxRegistry txRegistry = TxRegistry(registry[_customer]);\r\n        uint256 timestampPaymentKWh = txRegistry.getTxTimestampPaymentKWh(_txPaymentForMCW);\r\n        return timestampPaymentKWh;\r\n    }\r\n\r\n    /**\r\n    * @dev Check the customer's Tx of payment for MCW\r\n    * @param _customer the address of a customer for whom to check\r\n    * @param _txPaymentForMCW the Tx of payment for MCW which need to be checked\r\n    */  \r\n    function isValidCustomerTxPaymentForMCW(address _customer, bytes32 _txPaymentForMCW) public view returns(bool) {\r\n        require(\r\n            isValidCustomer(_customer),\r\n            \"Customer is not in the registry.\"\r\n        );\r\n        require(\r\n            _txPaymentForMCW != bytes32(0),\r\n            \"Parameter must be not empty.\"\r\n        );\r\n\r\n        TxRegistry txRegistry = TxRegistry(registry[_customer]);\r\n        bool isValid = txRegistry.isValidTxPaymentForMCW(_txPaymentForMCW);\r\n        return isValid;\r\n    }\r\n\r\n    /**\r\n    * @dev Check if the customer's Tx of payment for MCW is spent\r\n    * @param _customer the address of a customer for whom to check\r\n    * @param _txPaymentForMCW the Tx of payment for MCW which need to be checked\r\n    */\r\n    function isSpentCustomerTxPaymentForMCW(address _customer, bytes32 _txPaymentForMCW) public view returns(bool) {\r\n        require(\r\n            isValidCustomer(_customer),\r\n            \"Customer is not in the registry.\"\r\n        );\r\n        require(\r\n            _txPaymentForMCW != bytes32(0),\r\n            \"Parameter must be not empty.\"\r\n        );\r\n\r\n        TxRegistry txRegistry = TxRegistry(registry[_customer]);\r\n        bool isSpent = txRegistry.isSpentTxPaymentForMCW(_txPaymentForMCW);\r\n        return isSpent;\r\n    }\r\n\r\n    /**\r\n    * @dev Check the customer's Tx of payment for KWh\r\n    * @param _customer the address of a customer for whom to check\r\n    * @param _txPaymentForKWh the Tx of payment for KWh which need to be checked\r\n    */\r\n    function isValidCustomerTxPaymentForKWh(address _customer, bytes32 _txPaymentForKWh) public view returns(bool) {\r\n        require(\r\n            isValidCustomer(_customer),\r\n            \"Customer is not in the registry.\"\r\n        );\r\n        require(\r\n            _txPaymentForKWh != bytes32(0),\r\n            \"Parameter must be not empty.\"\r\n        );\r\n\r\n        TxRegistry txRegistry = TxRegistry(registry[_customer]);\r\n        bool isValid = txRegistry.isValidTxPaymentForKWh(_txPaymentForKWh);\r\n        return isValid;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the customer's Tx of payment for MCW by Tx payment for KWh \r\n    * @param _customer the address of a customer for whom to get\r\n    * @param _txPaymentForKWh the Tx of payment for KWh\r\n    */\r\n    function getCustomerTxPaymentMCW(address _customer, bytes32 _txPaymentForKWh) public view returns(bytes32) {\r\n        require(\r\n            isValidCustomer(_customer),\r\n            \"Customer is not in the registry.\"\r\n        );\r\n        require(\r\n            _txPaymentForKWh != bytes32(0),\r\n            \"Parameter must be not empty.\"\r\n        );\r\n\r\n        TxRegistry txRegistry = TxRegistry(registry[_customer]);\r\n        bytes32 txMCW = txRegistry.getTxPaymentMCW(_txPaymentForKWh);\r\n        return txMCW;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCustomerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_txPaymentForMCW\",\"type\":\"bytes32\"}],\"name\":\"getCustomerTxTimestampPaymentMCW\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_txPaymentForMCW\",\"type\":\"bytes32\"}],\"name\":\"getCustomerTxAmountMCW\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_txPaymentForMCW\",\"type\":\"bytes32\"}],\"name\":\"isSpentCustomerTxPaymentForMCW\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_txPaymentForMCW\",\"type\":\"bytes32\"}],\"name\":\"setCustomerTxAsSpent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_txPaymentForMCW\",\"type\":\"bytes32\"}],\"name\":\"getCustomerTxAmountKWh\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_txPaymentForMCW\",\"type\":\"bytes32\"}],\"name\":\"getCustomerTxOrigMcwTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCustomerTxAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_txPaymentForKWh\",\"type\":\"bytes32\"}],\"name\":\"isValidCustomerTxPaymentForKWh\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"addCustomerToRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"isValidCustomer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCustomerAtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"getCustomerTxRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_txPaymentForKWh\",\"type\":\"bytes32\"}],\"name\":\"getCustomerTxPaymentMCW\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"getCustomerTxCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_txPaymentForMCW\",\"type\":\"bytes32\"}],\"name\":\"getCustomerTxTimestampPaymentKWh\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_txPaymentForMCW\",\"type\":\"bytes32\"}],\"name\":\"isValidCustomerTxPaymentForMCW\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_txOrigMcwTransfer\",\"type\":\"bytes32\"},{\"name\":\"_amountMCW\",\"type\":\"uint256\"},{\"name\":\"_amountKWh\",\"type\":\"uint256\"}],\"name\":\"addTxToCustomerRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"},{\"name\":\"_txPaymentForMCW\",\"type\":\"bytes32\"}],\"name\":\"getCustomerTxPaymentKWh\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"txRegistry\",\"type\":\"address\"}],\"name\":\"NewCustomer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"txPaymentForMCW\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"txOrigMcwTransfer\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountMCW\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountKWh\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewCustomerTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"txPaymentForMCW\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"txPaymentForKWh\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SpendCustomerTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"McwCustomerRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6da21458082fbe4e2d63f3ae0f67cea3faf3f5f7ae7c0434037c5543c6252ea5"}]}