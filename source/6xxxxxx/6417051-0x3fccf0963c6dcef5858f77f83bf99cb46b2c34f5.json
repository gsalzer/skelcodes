{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n     OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n     OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n    address public pendingOwner;\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n         OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n     Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title LimitedTransferToken\r\n * @dev LimitedTransferToken defines the generic interface and the implementation to limit token\r\n * transferability for different events. It is intended to be used as a base class for other token\r\n * contracts.\r\n * LimitedTransferToken has been designed to allow for different limiting factors,\r\n * this can be achieved by recursively calling super.transferableTokens() until the base class is\r\n * hit. For example:\r\n *     function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\r\n *       return min256(unlockedTokens, super.transferableTokens(holder, time));\r\n *     }\r\n * A working example is VestedToken.sol:\r\n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/VestedToken.sol\r\n */\r\n\r\ncontract LimitedTransferToken is ERC20 {\r\n\r\n  /**\r\n   * @dev Checks whether it can transfer or otherwise throws.\r\n   */\r\n  modifier canTransfer(address _sender, uint256 _value) {\r\n   require(_value <= transferableTokens(_sender, uint64(block.timestamp)));\r\n   _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks modifier and allows transfer if tokens are not locked.\r\n   * @param _to The address that will receive the tokens.\r\n   * @param _value The amount of tokens to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) public returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /**\r\n  * @dev Checks modifier and allows transfer if tokens are not locked.\r\n  * @param _from The address that will send the tokens.\r\n  * @param _to The address that will receive the tokens.\r\n  * @param _value The amount of tokens to be transferred.\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) public returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\r\n   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\r\n   * specific logic for limiting token transferability for a holder over time.\r\n   */\r\n  function transferableTokens(address holder, uint64 time) public view returns (uint256) {\r\n    return balanceOf(holder);\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n  )\r\n  public\r\n  view\r\n  returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n     Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n     Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n  public\r\n  returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n     Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n  public\r\n  returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n    allowed[msg.sender][_spender].add(_addedValue));\r\n     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n  public\r\n  returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Claimable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n  public\r\n  hasMintPermission\r\n  canMint\r\n  returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n     Mint(_to, _amount);\r\n     Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n     MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/*\r\n    Smart Token interface\r\n*/\r\ncontract ISmartToken {\r\n\r\n    // =================================================================================================================\r\n    //                                      Members\r\n    // =================================================================================================================\r\n\r\n    bool public transfersEnabled = false;\r\n\r\n    // =================================================================================================================\r\n    //                                      Event\r\n    // =================================================================================================================\r\n\r\n    // triggered when a smart token is deployed - the _token address is defined for forward compatibility, in case we want to trigger the event from a factory\r\n    event NewSmartToken(address _token);\r\n    // triggered when the total supply is increased\r\n    event Issuance(uint256 _amount);\r\n    // triggered when the total supply is decreased\r\n    event Destruction(uint256 _amount);\r\n\r\n    // =================================================================================================================\r\n    //                                      Functions\r\n    // =================================================================================================================\r\n\r\n    function disableTransfers(bool _disable) public;\r\n    function issue(address _to, uint256 _amount) public;\r\n    function destroy(address _from, uint256 _amount) public;\r\n}\r\n\r\n\r\n/**\r\n    BancorSmartToken\r\n*/\r\ncontract LimitedTransferBancorSmartToken is MintableToken, ISmartToken, LimitedTransferToken {\r\n\r\n    // =================================================================================================================\r\n    //                                      Modifiers\r\n    // =================================================================================================================\r\n\r\n    /**\r\n     * @dev Throws if destroy flag is not enabled.\r\n     */\r\n    modifier canDestroy() {\r\n        require(destroyEnabled);\r\n        _;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    //                                      Members\r\n    // =================================================================================================================\r\n\r\n    // We add this flag to avoid users and owner from destroy tokens during crowdsale,\r\n    // This flag is set to false by default and blocks destroy function,\r\n    // We enable destroy option on finalize, so destroy will be possible after the crowdsale.\r\n    bool public destroyEnabled = false;\r\n\r\n    // =================================================================================================================\r\n    //                                      Public Functions\r\n    // =================================================================================================================\r\n\r\n    function setDestroyEnabled(bool _enable) onlyOwner public {\r\n        destroyEnabled = _enable;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    //                                      Impl ISmartToken\r\n    // =================================================================================================================\r\n\r\n    //@Override\r\n    function disableTransfers(bool _disable) onlyOwner public {\r\n        transfersEnabled = !_disable;\r\n    }\r\n\r\n    //@Override\r\n    function issue(address _to, uint256 _amount) onlyOwner public {\r\n        require(super.mint(_to, _amount));\r\n         Issuance(_amount);\r\n    }\r\n\r\n    //@Override\r\n    function destroy(address _from, uint256 _amount) canDestroy public {\r\n\r\n        require(msg.sender == _from || msg.sender == owner); // validate input\r\n\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        totalSupply_ = totalSupply_.sub(_amount);\r\n\r\n         Destruction(_amount);\r\n         Transfer(_from, 0x0, _amount);\r\n    }\r\n\r\n    // =================================================================================================================\r\n    //                                      Impl LimitedTransferToken\r\n    // =================================================================================================================\r\n\r\n\r\n    // Enable/Disable token transfer\r\n    // Tokens will be locked in their wallets until the end of the Crowdsale.\r\n    // @holder - token`s owner\r\n    // @time - not used (framework unneeded functionality)\r\n    //\r\n    // @Override\r\n    function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\r\n        require(transfersEnabled);\r\n        return super.transferableTokens(holder, time);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n  A Token which is 'Bancor' compatible and can mint new tokens and pause token-transfer functionality\r\n*/\r\ncontract BitMEDSmartToken is LimitedTransferBancorSmartToken {\r\n\r\n    // =================================================================================================================\r\n    //                                         Members\r\n    // =================================================================================================================\r\n\r\n    string public constant name = \"BitMED\";\r\n\r\n    string public constant symbol = \"BXM\";\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    // =================================================================================================================\r\n    //                                         Constructor\r\n    // =================================================================================================================\r\n\r\n    function BitMEDSmartToken() public {\r\n        //Apart of 'Bancor' computability - triggered when a smart token is deployed\r\n         NewSmartToken(address(this));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Vault\r\n * @dev This wallet is used to\r\n */\r\ncontract Vault is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    // =================================================================================================================\r\n    //                                      Enums\r\n    // =================================================================================================================\r\n\r\n    enum State { KycPending, KycComplete }\r\n\r\n    // =================================================================================================================\r\n    //                                      Members\r\n    // =================================================================================================================\r\n    mapping (address => uint256) public depositedETH;\r\n    mapping (address => uint256) public depositedToken;\r\n\r\n    BitMEDSmartToken public token;\r\n    State public state;\r\n\r\n    // =================================================================================================================\r\n    //                                      Events\r\n    // =================================================================================================================\r\n\r\n    event KycPending();\r\n    event KycComplete();\r\n    event Deposit(address indexed beneficiary, uint256 etherWeiAmount, uint256 tokenWeiAmount);\r\n    event RemoveSupporter(address beneficiary);\r\n    event TokensClaimed(address indexed beneficiary, uint256 weiAmount);\r\n    // =================================================================================================================\r\n    //                                      Modifiers\r\n    // =================================================================================================================\r\n\r\n    modifier isKycPending() {\r\n        require(state == State.KycPending);\r\n        _;\r\n    }\r\n\r\n    modifier isKycComplete() {\r\n        require(state == State.KycComplete);\r\n        _;\r\n    }\r\n\r\n\r\n    // =================================================================================================================\r\n    //                                      Ctors\r\n    // =================================================================================================================\r\n\r\n    function Vault(BitMEDSmartToken _token) public {\r\n        require(_token != address(0));\r\n\r\n        token = _token;\r\n        state = State.KycPending;\r\n         KycPending();\r\n    }\r\n\r\n    // =================================================================================================================\r\n    //                                      Public Functions\r\n    // =================================================================================================================\r\n\r\n    function deposit(address supporter, uint256 tokensAmount, uint256 value) isKycPending onlyOwner public{\r\n\r\n        depositedETH[supporter] = depositedETH[supporter].add(value);\r\n        depositedToken[supporter] = depositedToken[supporter].add(tokensAmount);\r\n\r\n         Deposit(supporter, value, tokensAmount);\r\n    }\r\n\r\n    function kycComplete() isKycPending onlyOwner public {\r\n        state = State.KycComplete;\r\n         KycComplete();\r\n    }\r\n\r\n    //@dev Remove a supporter and refund ether back to the supporter in returns of proportional amount of BXM back to the BitMED`s wallet\r\n    function removeSupporter(address supporter) isKycPending onlyOwner public {\r\n        require(supporter != address(0));\r\n        require(depositedETH[supporter] > 0);\r\n        require(depositedToken[supporter] > 0);\r\n\r\n        uint256 depositedTokenValue = depositedToken[supporter];\r\n        uint256 depositedETHValue = depositedETH[supporter];\r\n\r\n        //zero out the user\r\n        depositedETH[supporter] = 0;\r\n        depositedToken[supporter] = 0;\r\n\r\n        token.destroy(address(this),depositedTokenValue);\r\n        // We will manually refund the money. Checking against OFAC sanction list\r\n        // https://sanctionssearch.ofac.treas.gov/\r\n        //supporter.transfer(depositedETHValue - 21000);\r\n\r\n         RemoveSupporter(supporter);\r\n    }\r\n\r\n    //@dev Transfer tokens from the vault to the supporter while releasing proportional amount of ether to BitMED`s wallet.\r\n    //Can be triggerd by the supporter only\r\n    function claimTokens(uint256 tokensToClaim) isKycComplete public {\r\n        require(tokensToClaim != 0);\r\n\r\n        address supporter = msg.sender;\r\n        require(depositedToken[supporter] > 0);\r\n\r\n        uint256 depositedTokenValue = depositedToken[supporter];\r\n        uint256 depositedETHValue = depositedETH[supporter];\r\n\r\n        require(tokensToClaim <= depositedTokenValue);\r\n\r\n        uint256 claimedETH = tokensToClaim.mul(depositedETHValue).div(depositedTokenValue);\r\n\r\n        assert(claimedETH > 0);\r\n\r\n        depositedETH[supporter] = depositedETHValue.sub(claimedETH);\r\n        depositedToken[supporter] = depositedTokenValue.sub(tokensToClaim);\r\n\r\n        token.transfer(supporter, tokensToClaim);\r\n\r\n         TokensClaimed(supporter, tokensToClaim);\r\n    }\r\n\r\n    //@dev Transfer tokens from the vault to the supporter\r\n    //Can be triggerd by the owner of the vault\r\n    function claimAllSupporterTokensByOwner(address supporter) isKycComplete onlyOwner public {\r\n        uint256 depositedTokenValue = depositedToken[supporter];\r\n        require(depositedTokenValue > 0);\r\n        token.transfer(supporter, depositedTokenValue);\r\n         TokensClaimed(supporter, depositedTokenValue);\r\n    }\r\n\r\n    // @dev supporter can claim tokens by calling the function\r\n    // @param tokenToClaimAmount - amount of the token to claim\r\n    function claimAllTokens() isKycComplete public  {\r\n        uint256 depositedTokenValue = depositedToken[msg.sender];\r\n        claimTokens(depositedTokenValue);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title RefundVault\r\n * @dev This contract is used for storing TOKENS AND ETHER while a crowd sale is in progress for a period of 3 DAYS.\r\n * Supporter can ask for a full/part refund for his/her ether against token. Once tokens are Claimed by the supporter, they cannot be refunded.\r\n * After 3 days, all ether will be withdrawn from the vault`s wallet, leaving all tokens to be claimed by the their owners.\r\n **/\r\ncontract RefundVault is Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    // =================================================================================================================\r\n    //                                      Enums\r\n    // =================================================================================================================\r\n\r\n    enum State { Active, Refunding, Closed }\r\n\r\n    // =================================================================================================================\r\n    //                                      Members\r\n    // =================================================================================================================\r\n\r\n    // Refund time frame\r\n    uint256 public constant REFUND_TIME_FRAME = 3 days;\r\n\r\n    mapping (address => uint256) public depositedETH;\r\n    mapping (address => uint256) public depositedToken;\r\n\r\n    address public etherWallet;\r\n    BitMEDSmartToken public token;\r\n    State public state;\r\n    uint256 public refundStartTime;\r\n\r\n    // =================================================================================================================\r\n    //                                      Events\r\n    // =================================================================================================================\r\n\r\n    event Active();\r\n    event Closed();\r\n    event Deposit(address indexed beneficiary, uint256 etherWeiAmount, uint256 tokenWeiAmount);\r\n    event RefundsEnabled();\r\n    event RefundedETH(address beneficiary, uint256 weiAmount);\r\n    event TokensClaimed(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    // =================================================================================================================\r\n    //                                      Modifiers\r\n    // =================================================================================================================\r\n\r\n    modifier isActiveState() {\r\n        require(state == State.Active);\r\n        _;\r\n    }\r\n\r\n    modifier isRefundingState() {\r\n        require(state == State.Refunding);\r\n        _;\r\n    }\r\n\r\n    modifier isCloseState() {\r\n        require(state == State.Closed);\r\n        _;\r\n    }\r\n\r\n    modifier isRefundingOrCloseState() {\r\n        require(state == State.Refunding || state == State.Closed);\r\n        _;\r\n    }\r\n\r\n    modifier  isInRefundTimeFrame() {\r\n        require(refundStartTime <= block.timestamp && refundStartTime + REFUND_TIME_FRAME > block.timestamp);\r\n        _;\r\n    }\r\n\r\n    modifier isRefundTimeFrameExceeded() {\r\n        require(refundStartTime + REFUND_TIME_FRAME < block.timestamp);\r\n        _;\r\n    }\r\n\r\n\r\n    // =================================================================================================================\r\n    //                                      Ctors\r\n    // =================================================================================================================\r\n\r\n    function RefundVault(address _etherWallet, BitMEDSmartToken _token) public {\r\n        require(_etherWallet != address(0));\r\n        require(_token != address(0));\r\n\r\n        etherWallet = _etherWallet;\r\n        token = _token;\r\n        state = State.Active;\r\n         Active();\r\n    }\r\n\r\n    // =================================================================================================================\r\n    //                                      Public Functions\r\n    // =================================================================================================================\r\n\r\n    function deposit(address supporter, uint256 tokensAmount) isActiveState onlyOwner public payable {\r\n\r\n        depositedETH[supporter] = depositedETH[supporter].add(msg.value);\r\n        depositedToken[supporter] = depositedToken[supporter].add(tokensAmount);\r\n\r\n         Deposit(supporter, msg.value, tokensAmount);\r\n    }\r\n\r\n    function close() isRefundingState onlyOwner isRefundTimeFrameExceeded public {\r\n        state = State.Closed;\r\n         Closed();\r\n        etherWallet.transfer(address(this).balance);\r\n    }\r\n\r\n    function enableRefunds() isActiveState onlyOwner public {\r\n        state = State.Refunding;\r\n        refundStartTime = block.timestamp;\r\n\r\n         RefundsEnabled();\r\n    }\r\n\r\n    //@dev Refund ether back to the supporter in returns of proportional amount of BXM back to the BitMED`s wallet\r\n    function refundETH(uint256 ETHToRefundAmountWei) isInRefundTimeFrame isRefundingState public {\r\n        require(ETHToRefundAmountWei != 0);\r\n\r\n        uint256 depositedTokenValue = depositedToken[msg.sender];\r\n        uint256 depositedETHValue = depositedETH[msg.sender];\r\n\r\n        require(ETHToRefundAmountWei <= depositedETHValue);\r\n\r\n        uint256 refundTokens = ETHToRefundAmountWei.mul(depositedTokenValue).div(depositedETHValue);\r\n\r\n        assert(refundTokens > 0);\r\n\r\n        depositedETH[msg.sender] = depositedETHValue.sub(ETHToRefundAmountWei);\r\n        depositedToken[msg.sender] = depositedTokenValue.sub(refundTokens);\r\n\r\n        token.destroy(address(this),refundTokens);\r\n        msg.sender.transfer(ETHToRefundAmountWei);\r\n\r\n         RefundedETH(msg.sender, ETHToRefundAmountWei);\r\n    }\r\n\r\n    //@dev Transfer tokens from the vault to the supporter while releasing proportional amount of ether to BitMED`s wallet.\r\n    //Can be triggerd by the supporter only\r\n    function claimTokens(uint256 tokensToClaim) isRefundingOrCloseState public {\r\n        require(tokensToClaim != 0);\r\n\r\n        address supporter = msg.sender;\r\n        require(depositedToken[supporter] > 0);\r\n\r\n        uint256 depositedTokenValue = depositedToken[supporter];\r\n        uint256 depositedETHValue = depositedETH[supporter];\r\n\r\n        require(tokensToClaim <= depositedTokenValue);\r\n\r\n        uint256 claimedETH = tokensToClaim.mul(depositedETHValue).div(depositedTokenValue);\r\n\r\n        assert(claimedETH > 0);\r\n\r\n        depositedETH[supporter] = depositedETHValue.sub(claimedETH);\r\n        depositedToken[supporter] = depositedTokenValue.sub(tokensToClaim);\r\n\r\n        token.transfer(supporter, tokensToClaim);\r\n        if(state != State.Closed) {\r\n            etherWallet.transfer(claimedETH);\r\n        }\r\n\r\n         TokensClaimed(supporter, tokensToClaim);\r\n    }\r\n\r\n    //@dev Transfer tokens from the vault to the supporter while releasing proportional amount of ether to BitMED`s wallet.\r\n    //Can be triggerd by the owner of the vault (in our case - BitMED`s owner after 3 days)\r\n    function claimAllSupporterTokensByOwner(address supporter) isCloseState onlyOwner public {\r\n        uint256 depositedTokenValue = depositedToken[supporter];\r\n        require(depositedTokenValue > 0);\r\n\r\n\r\n        token.transfer(supporter, depositedTokenValue);\r\n\r\n         TokensClaimed(supporter, depositedTokenValue);\r\n    }\r\n\r\n    // @dev supporter can claim tokens by calling the function\r\n    // @param tokenToClaimAmount - amount of the token to claim\r\n    function claimAllTokens() isRefundingOrCloseState public  {\r\n        uint256 depositedTokenValue = depositedToken[msg.sender];\r\n        claimTokens(depositedTokenValue);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    BitMEDSmartToken public token;\r\n\r\n    // start and end timestamps where investments are allowed (both inclusive)\r\n    uint256 public startTime;\r\n\r\n    uint256 public endTime;\r\n\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public rate;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n\r\n    // holding vault for all tokens pending KYC\r\n    Vault public vault;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, BitMEDSmartToken _token, Vault _vault) public {\r\n        require(_startTime >= block.timestamp);\r\n        require(_endTime >= _startTime);\r\n        require(_rate > 0);\r\n        require(_wallet != address(0));\r\n        require(_token != address(0));\r\n        require(_vault != address(0));\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n        token = _token;\r\n        vault = _vault;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public payable {\r\n        require(beneficiary != address(0));\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        require(weiAmount>500000000000000000);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(getRate());\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        //send tokens to KYC Vault\r\n        token.issue(address(vault), tokens);\r\n\r\n        // Updating arrays in the Vault\r\n        vault.deposit(beneficiary, tokens, msg.value);\r\n\r\n         TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        // Transferring funds to wallet\r\n        forwardFunds();\r\n    }\r\n\r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal view returns (bool) {\r\n        bool withinPeriod = block.timestamp >= startTime && block.timestamp <= endTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return block.timestamp > endTime;\r\n    }\r\n\r\n    // @return the crowdsale rate\r\n    function getRate() public view returns (uint256) {\r\n        return rate;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Claimable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() public onlyOwner  {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n     Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract BitMEDCrowdsale is FinalizableCrowdsale {\r\n\r\n    // =================================================================================================================\r\n    //                                      Constants\r\n    // =================================================================================================================\r\n    // Max amount of known addresses of which will get BXM by 'Grant' method.\r\n    //\r\n    // grantees addresses will be BitMED wallets addresses.\r\n    // these wallets will contain BXM tokens that will be used for one purposes only -\r\n    // 1. BXM tokens against raised fiat money\r\n    // we set the value to 10 (and not to 2) because we want to allow some flexibility for cases like fiat money that is raised close\r\n    // to the crowdsale. we limit the value to 10 (and not larger) to limit the run time of the function that process the grantees array.\r\n    uint8 public constant MAX_TOKEN_GRANTEES = 10;\r\n\r\n    // BXM to ETH base rate\r\n    uint256 public constant EXCHANGE_RATE = 210;\r\n\r\n    // Refund division rate\r\n    uint256 public constant REFUND_DIVISION_RATE = 2;\r\n\r\n    // The min BXM tokens that should be minted for the public sale\r\n    uint256 public constant MIN_TOKEN_SALE = 125000000000000000000000000;\r\n\r\n\r\n    // =================================================================================================================\r\n    //                                      Modifiers\r\n    // =================================================================================================================\r\n\r\n    /**\r\n     * @dev Throws if called not during the crowdsale time frame\r\n     */\r\n    modifier onlyWhileSale() {\r\n        require(isActive());\r\n        _;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    //                                      Members\r\n    // =================================================================================================================\r\n\r\n    // wallets address for 75% of BXM allocation\r\n    address public walletTeam;      //10% of the total number of BXM tokens will be allocated to the team\r\n    address public walletReserve;   //35% of the total number of BXM tokens will be allocated to BitMED  and as a reserve for the company to be used for future strategic plans for the created ecosystem\r\n    address public walletCommunity; //30% of the total number of BXM tokens will be allocated to Community\r\n\r\n    // Funds collected outside the crowdsale in wei\r\n    uint256 public fiatRaisedConvertedToWei;\r\n\r\n    //Grantees - used for non-ether and presale bonus token generation\r\n    address[] public presaleGranteesMapKeys;\r\n    mapping (address => uint256) public presaleGranteesMap;  //address=>wei token amount\r\n\r\n    // The refund vault\r\n    RefundVault public refundVault;\r\n\r\n    // =================================================================================================================\r\n    //                                      Events\r\n    // =================================================================================================================\r\n    event GrantAdded(address indexed _grantee, uint256 _amount);\r\n\r\n    event GrantUpdated(address indexed _grantee, uint256 _oldAmount, uint256 _newAmount);\r\n\r\n    event GrantDeleted(address indexed _grantee, uint256 _hadAmount);\r\n\r\n    event FiatRaisedUpdated(address indexed _address, uint256 _fiatRaised);\r\n\r\n    event TokenPurchaseWithGuarantee(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    // =================================================================================================================\r\n    //                                      Constructors\r\n    // =================================================================================================================\r\n\r\n    function BitMEDCrowdsale(uint256 _startTime,\r\n    uint256 _endTime,\r\n    address _wallet,\r\n    address _walletTeam,\r\n    address _walletCommunity,\r\n    address _walletReserve,\r\n    BitMEDSmartToken _BitMEDSmartToken,\r\n    RefundVault _refundVault,\r\n    Vault _vault)\r\n\r\n    public Crowdsale(_startTime, _endTime, EXCHANGE_RATE, _wallet, _BitMEDSmartToken, _vault) {\r\n        require(_walletTeam != address(0));\r\n        require(_walletCommunity != address(0));\r\n        require(_walletReserve != address(0));\r\n        require(_BitMEDSmartToken != address(0));\r\n        require(_refundVault != address(0));\r\n        require(_vault != address(0));\r\n\r\n        walletTeam = _walletTeam;\r\n        walletCommunity = _walletCommunity;\r\n        walletReserve = _walletReserve;\r\n\r\n        token = _BitMEDSmartToken;\r\n        refundVault  = _refundVault;\r\n\r\n        vault = _vault;\r\n\r\n    }\r\n\r\n    // =================================================================================================================\r\n    //                                      Impl Crowdsale\r\n    // =================================================================================================================\r\n\r\n    // @return the rate in BXM per 1 ETH according to the time of the tx and the BXM pricing program.\r\n    // @Override\r\n    function getRate() public view returns (uint256) {\r\n        if (block.timestamp < (startTime.add(24 hours))) {return 700;}\r\n        if (block.timestamp < (startTime.add(3 days))) {return 600;}\r\n        if (block.timestamp < (startTime.add(5 days))) {return 500;}\r\n        if (block.timestamp < (startTime.add(7 days))) {return 400;}\r\n        if (block.timestamp < (startTime.add(10 days))) {return 350;}\r\n        if (block.timestamp < (startTime.add(13 days))) {return 300;}\r\n        if (block.timestamp < (startTime.add(16 days))) {return 285;}\r\n        if (block.timestamp < (startTime.add(19 days))) {return 270;}\r\n        if (block.timestamp < (startTime.add(22 days))) {return 260;}\r\n        if (block.timestamp < (startTime.add(25 days))) {return 250;}\r\n        if (block.timestamp < (startTime.add(28 days))) {return 240;}\r\n        if (block.timestamp < (startTime.add(31 days))) {return 230;}\r\n        if (block.timestamp < (startTime.add(34 days))) {return 225;}\r\n        if (block.timestamp < (startTime.add(37 days))) {return 220;}\r\n        if (block.timestamp < (startTime.add(40 days))) {return 215;}\r\n\r\n        return rate;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    //                                      Impl FinalizableCrowdsale\r\n    // =================================================================================================================\r\n\r\n    //@Override\r\n    function finalization() internal {\r\n\r\n        super.finalization();\r\n\r\n        // granting bonuses for the pre crowdsale grantees:\r\n        for (uint256 i = 0; i < presaleGranteesMapKeys.length; i++) {\r\n            token.issue(presaleGranteesMapKeys[i], presaleGranteesMap[presaleGranteesMapKeys[i]]);\r\n        }\r\n\r\n        //we want to make sure a min of 125M tokens are generated which equals the 25% of the crowdsale\r\n        if(token.totalSupply() <= MIN_TOKEN_SALE){\r\n            uint256 missingTokens = MIN_TOKEN_SALE - token.totalSupply();\r\n            token.issue(walletCommunity, missingTokens);\r\n        }\r\n\r\n        // Adding 75% of the total token supply (25% were generated during the crowdsale)\r\n        // 25 * 4 = 100\r\n        uint256 newTotalSupply = token.totalSupply().mul(400).div(100);\r\n\r\n        // 10% of the total number of BXM tokens will be allocated to the team\r\n        token.issue(walletTeam, newTotalSupply.mul(10).div(100));\r\n\r\n        // 30% of the total number of BXM tokens will be allocated to community\r\n        token.issue(walletCommunity, newTotalSupply.mul(30).div(100));\r\n\r\n        // 35% of the total number of BXM tokens will be allocated to BitMED ,\r\n        // and as a reserve for the company to be used for future strategic plans for the created ecosystem\r\n        token.issue(walletReserve, newTotalSupply.mul(35).div(100));\r\n\r\n        // Re-enable transfers after the token sale.\r\n        token.disableTransfers(false);\r\n\r\n        // Re-enable destroy function after the token sale.\r\n        token.setDestroyEnabled(true);\r\n\r\n        // Enable ETH refunds and token claim.\r\n        refundVault.enableRefunds();\r\n\r\n        // transfer token ownership to crowdsale owner\r\n        token.transferOwnership(owner);\r\n\r\n        // transfer refundVault ownership to crowdsale owner\r\n        refundVault.transferOwnership(owner);\r\n\r\n        vault.transferOwnership(owner);\r\n\r\n    }\r\n\r\n    // =================================================================================================================\r\n    //                                      Public Methods\r\n    // =================================================================================================================\r\n    // @return the total funds collected in wei(ETH and none ETH).\r\n    function getTotalFundsRaised() public view returns (uint256) {\r\n        return fiatRaisedConvertedToWei.add(weiRaised);\r\n    }\r\n\r\n    // @return true if the crowdsale is active, hence users can buy tokens\r\n    function isActive() public view returns (bool) {\r\n        return block.timestamp >= startTime && block.timestamp < endTime;\r\n    }\r\n\r\n    // =================================================================================================================\r\n    //                                      External Methods\r\n    // =================================================================================================================\r\n    // @dev Adds/Updates address and token allocation for token grants.\r\n    // Granted tokens are allocated to non-ether, presale, buyers.\r\n    // @param _grantee address The address of the token grantee.\r\n    // @param _value uint256 The value of the grant in wei token.\r\n    function addUpdateGrantee(address _grantee, uint256 _value) external onlyOwner onlyWhileSale{\r\n        require(_grantee != address(0));\r\n        require(_value > 0);\r\n\r\n        // Adding new key if not present:\r\n        if (presaleGranteesMap[_grantee] == 0) {\r\n            require(presaleGranteesMapKeys.length < MAX_TOKEN_GRANTEES);\r\n            presaleGranteesMapKeys.push(_grantee);\r\n            GrantAdded(_grantee, _value);\r\n        }\r\n        else {\r\n            GrantUpdated(_grantee, presaleGranteesMap[_grantee], _value);\r\n        }\r\n\r\n        presaleGranteesMap[_grantee] = _value;\r\n    }\r\n\r\n    // @dev deletes entries from the grants list.\r\n    // @param _grantee address The address of the token grantee.\r\n    function deleteGrantee(address _grantee) external onlyOwner onlyWhileSale {\r\n    require(_grantee != address(0));\r\n        require(presaleGranteesMap[_grantee] != 0);\r\n\r\n        //delete from the map:\r\n        delete presaleGranteesMap[_grantee];\r\n\r\n        //delete from the array (keys):\r\n        uint256 index;\r\n        for (uint256 i = 0; i < presaleGranteesMapKeys.length; i++) {\r\n            if (presaleGranteesMapKeys[i] == _grantee) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        presaleGranteesMapKeys[index] = presaleGranteesMapKeys[presaleGranteesMapKeys.length - 1];\r\n        delete presaleGranteesMapKeys[presaleGranteesMapKeys.length - 1];\r\n        presaleGranteesMapKeys.length--;\r\n\r\n        GrantDeleted(_grantee, presaleGranteesMap[_grantee]);\r\n    }\r\n\r\n    // @dev Set funds collected outside the crowdsale in wei.\r\n    //  note: we not to use accumulator to allow flexibility in case of humane mistakes.\r\n    // funds are converted to wei using the market conversion rate of USD\\ETH on the day on the purchase.\r\n    // @param _fiatRaisedConvertedToWei number of none eth raised.\r\n    function setFiatRaisedConvertedToWei(uint256 _fiatRaisedConvertedToWei) external onlyOwner onlyWhileSale {\r\n        fiatRaisedConvertedToWei = _fiatRaisedConvertedToWei;\r\n        FiatRaisedUpdated(msg.sender, fiatRaisedConvertedToWei);\r\n    }\r\n\r\n    /// @dev Accepts new ownership on behalf of the BitMEDCrowdsale contract. This can be used, by the token sale\r\n    /// contract itself to claim back ownership of the BitMEDSmartToken contract.\r\n    function claimTokenOwnership() external onlyOwner {\r\n        token.claimOwnership();\r\n    }\r\n\r\n    /// @dev Accepts new ownership on behalf of the BitMEDCrowdsale contract. This can be used, by the token sale\r\n    /// contract itself to claim back ownership of the refundVault contract.\r\n    function claimRefundVaultOwnership() external onlyOwner {\r\n        refundVault.claimOwnership();\r\n    }\r\n\r\n    /// @dev Accepts new ownership on behalf of the BitMEDCrowdsale contract. This can be used, by the token sale\r\n    /// contract itself to claim back ownership of the refundVault contract.\r\n    function claimVaultOwnership() external onlyOwner {\r\n        vault.claimOwnership();\r\n    }\r\n\r\n    // @dev Buy tokes with guarantee\r\n    function buyTokensWithGuarantee() public payable {\r\n        require(validPurchase());\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        require(weiAmount>500000000000000000);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(getRate());\r\n        tokens = tokens.div(REFUND_DIVISION_RATE);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n\r\n        token.issue(address(refundVault), tokens);\r\n        refundVault.deposit.value(msg.value)(msg.sender, tokens);\r\n\r\n        TokenPurchaseWithGuarantee(msg.sender, address(refundVault), weiAmount, tokens);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"supporter\",\"type\":\"address\"},{\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAllTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"supporter\",\"type\":\"address\"}],\"name\":\"removeSupporter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokensToClaim\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kycComplete\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"supporter\",\"type\":\"address\"}],\"name\":\"claimAllSupporterTokensByOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"KycPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"KycComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherWeiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenWeiAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"RemoveSupporter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Vault","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001b53d25fd98511b02ab71d2e4638d897e65b178c","Library":"","SwarmSource":"bzzr://f0defb44b29e4011ad97d06da9c2fe739f8409ea84dbdda880a16b789c3bea24"}]}