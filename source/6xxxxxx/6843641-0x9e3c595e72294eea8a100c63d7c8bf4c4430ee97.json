{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner = 0x0;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n     modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract CryptoSoulPresale is Ownable{\r\n    struct DataBase{\r\n        uint256 deposit;\r\n        uint256 soulValue;\r\n    }\r\n    \r\n    event Deposit(address indexed _from, uint256 _value);\r\n    \r\n    mapping(address => DataBase) walletsData;\r\n    address[] internal wallets;\r\n    \r\n    uint24 public depositsCount = 0;\r\n    \r\n    uint256 public soulCap = 83300000;\r\n    \r\n    uint256 public collectedFunds = 0;\r\n    uint256 public distributedTokens = 0;\r\n    \r\n    uint256 public soulReward0 = 125000;\r\n    uint256 public soulReward1 = 142800;\r\n    uint256 public soulReward2 = 166600;\r\n    \r\n    uint256 public minDeposit = 0.01 ether;\r\n    uint256 public ethPriceLvl0 = 0.99 ether;\r\n    uint256 public ethPriceLvl1 = 6.99 ether;\r\n    \r\n    function() external payable{\r\n        require(msg.value >= minDeposit &&\r\n        distributedTokens < soulCap);\r\n        uint256 ethValue = msg.value;\r\n        uint256 soulValue = getSoulByEth(ethValue);     \r\n        uint256 totalSoulValue = distributedTokens + soulValue;\r\n        if (totalSoulValue > soulCap){\r\n            soulValue = soulCap - distributedTokens;\r\n            ethValue = getResidualEtherAmount(ethValue, soulValue);\r\n            uint256 etherNickel = msg.value - ethValue;\r\n            msg.sender.transfer(etherNickel);\r\n        }\r\n        owner.transfer(ethValue);\r\n        depositsCount++;\r\n        countUser(msg.sender);\r\n        walletsData[msg.sender].deposit += ethValue;\r\n        walletsData[msg.sender].soulValue += soulValue;\r\n        collectedFunds += ethValue;\r\n        distributedTokens += soulValue;\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n  \r\n  function getDepositValue(address _owner) public view returns(uint256){\r\n      return walletsData[_owner].deposit;\r\n  }\r\n  \r\n  function balanceOf(address _owner) public view returns(uint256){\r\n      return walletsData[_owner].soulValue;\r\n  }\r\n   \r\n   function changeSoulReward(uint256 _value0, uint256 _value1, uint256 _value2) public onlyOwner{\r\n      soulReward0 = _value0;\r\n      soulReward1 = _value1;\r\n      soulReward2 = _value2;\r\n      recountUsersBalance();\r\n   }\r\n   \r\n   function changeMinDeposit(uint256 _value) public onlyOwner{\r\n       minDeposit = _value;\r\n   }\r\n   \r\n   function changeSoulCap(uint256 _value) public onlyOwner{\r\n       soulCap = _value;\r\n   }\r\n   \r\n   function addUser(address _wallet, uint256 _depositValue) public onlyOwner{\r\n       require(walletsData[_wallet].deposit == 0);\r\n       saveUserWallet(_wallet);\r\n       walletsData[_wallet].deposit = _depositValue;\r\n       uint256 soulValue = getSoulByEth(_depositValue);\r\n       walletsData[_wallet].soulValue = soulValue;\r\n       distributedTokens += soulValue;\r\n       collectedFunds += _depositValue;\r\n   }\r\n   \r\n   function recountUsersBalance() internal{\r\n       int256 distributeDiff = 0; \r\n       for(uint24 i = 0; i < wallets.length; i++){\r\n           address wallet = wallets[i];\r\n           uint256 originalValue = walletsData[wallet].soulValue;\r\n           walletsData[wallet].soulValue = getSoulByEth(walletsData[wallet].deposit);\r\n           distributeDiff += int256(walletsData[wallet].soulValue - originalValue);\r\n       }\r\n       if(distributeDiff < 0){\r\n           uint256 uDistrributeDiff = uint256(-distributeDiff);\r\n           require(distributedTokens >= uDistrributeDiff);\r\n           distributedTokens -= uDistrributeDiff;\r\n       }else{\r\n            uint256 totalSoul = distributedTokens + uint256(distributeDiff);\r\n            require(totalSoul <= soulCap);\r\n            distributedTokens = totalSoul;\r\n       }\r\n   }\r\n   \r\n   function assignOldUserFunds(address[] _oldUsersWallets, uint256[] _values) public onlyOwner{\r\n       wallets = _oldUsersWallets;\r\n       for(uint24 i = 0; i < wallets.length; i++){\r\n           uint256 depositValue = _values[i];\r\n           uint256 soulValue = getSoulByEth(_values[i]);\r\n           walletsData[wallets[i]].deposit = depositValue;\r\n           walletsData[wallets[i]].soulValue = soulValue;\r\n           collectedFunds += depositValue;\r\n           distributedTokens += soulValue;\r\n       }\r\n   }\r\n   \r\n   function saveUserWallet(address _address) internal{\r\n       wallets.push(_address);\r\n   }\r\n   \r\n   function getResidualEtherAmount(uint256 _ethValue, uint256 _soulResidual) internal view returns(uint256){\r\n      return _soulResidual * 10 ** 18 / getRewardLevel(_ethValue);\r\n  }\r\n  \r\n   function getSoulByEth(uint256 _ethValue) internal view returns(uint256){\r\n       return (_ethValue * getRewardLevel(_ethValue)) / 10 ** 18;\r\n   }\r\n   \r\n   function getRewardLevel(uint256 _ethValue) internal view returns(uint256){\r\n        if (_ethValue <= ethPriceLvl0){\r\n           return soulReward0;\r\n       } else if (_ethValue > ethPriceLvl0 && _ethValue <= ethPriceLvl1){\r\n           return soulReward1;\r\n       } else if (_ethValue > ethPriceLvl1){\r\n           return soulReward2;\r\n       }\r\n   }\r\n   \r\n   function countUser(address _owner) internal{\r\n       if (walletsData[_owner].deposit == 0){\r\n           saveUserWallet(_owner);\r\n       }\r\n   }\r\n   \r\n   function getUsersCount() public view returns(uint256){\r\n       return wallets.length;\r\n   }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_oldUsersWallets\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"assignOldUserFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPriceLvl1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getDepositValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint24\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeMinDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value0\",\"type\":\"uint256\"},{\"name\":\"_value1\",\"type\":\"uint256\"},{\"name\":\"_value2\",\"type\":\"uint256\"}],\"name\":\"changeSoulReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPriceLvl0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soulReward0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soulCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soulReward2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_depositValue\",\"type\":\"uint256\"}],\"name\":\"addUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeSoulCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soulReward1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"}]","ContractName":"CryptoSoulPresale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6e64ea924d7d7e40e5932bd7d0f6f799b03ea00811daab647c8b811ca3714a26"}]}