{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Crowdfund is Owned {\r\n     using SafeMath for uint;\r\n     \r\n    //mapping\r\n    mapping(address => uint256) public Holdings;\r\n    mapping(uint256 => address) public ContributorsList;\r\n    uint256 listPointer;\r\n    uint256 totalethfunded;\r\n    mapping(address => bool) public isInList;\r\n    bool crowdSaleOpen;\r\n    bool crowdSaleFail;\r\n    uint256 CFTsToSend;\r\n    \r\n    constructor() public{\r\n        crowdSaleOpen = true;\r\n    }\r\n    \r\n    modifier onlyWhenOpen() {\r\n        require(crowdSaleOpen == true);\r\n        _;\r\n    }\r\n    function amountOfCFTtoSend(address Holder)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        uint256 amount = CFTsToSend.mul( Holdings[Holder]).div(1 ether).div(totalethfunded);\r\n        return ( amount)  ;\r\n    }\r\n    function setAmountCFTsBought(uint256 amount) onlyOwner public{\r\n        CFTsToSend = amount;\r\n    }\r\n    function() external payable onlyWhenOpen {\r\n        require(msg.value > 0);\r\n        Holdings[msg.sender].add(msg.value);\r\n        if(isInList[msg.sender] == false){\r\n            ContributorsList[listPointer] = msg.sender;\r\n            listPointer++;\r\n            isInList[msg.sender] = true;\r\n        }\r\n    }\r\n    function balanceToOwner() onlyOwner public{\r\n        require(crowdSaleOpen == false);\r\n        totalethfunded = address(this).balance;\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    function CloseCrowdfund() onlyOwner public{\r\n        crowdSaleOpen = false;\r\n    }\r\n    function failCrowdfund() onlyOwner public{\r\n        crowdSaleFail = true;\r\n    }\r\n    function retreiveEthuponFail () public {\r\n        require(crowdSaleFail == true);\r\n        require(Holdings[msg.sender] > 0);\r\n        uint256 getEthback = Holdings[msg.sender];\r\n        Holdings[msg.sender] = 0;\r\n        msg.sender.transfer(getEthback);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"Holder\",\"type\":\"address\"}],\"name\":\"amountOfCFTtoSend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"failCrowdfund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAmountCFTsBought\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retreiveEthuponFail\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"CloseCrowdfund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"balanceToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ContributorsList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Holdings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdfund","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e6c4a176d00f08bcc4c49f379203abf99a49beb8ee76f84677797328b1a7406b"}]}