{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n/*\r\n*\r\n*  /$$       /$$$$$$$$ /$$   /$$ /$$$$$$$  /$$   /$$  /$$$$$$   /$$$$$$  /$$$$$$ /$$   /$$\r\n* | $$      | $$_____/| $$$ | $$| $$__  $$| $$  / $$ /$$__  $$ /$$__  $$|_  $$_/| $$$ | $$\r\n* | $$      | $$      | $$$$| $$| $$  \\ $$|  $$/ $$/| $$  \\__/| $$  \\ $$  | $$  | $$$$| $$\r\n* | $$      | $$$$$   | $$ $$ $$| $$  | $$ \\  $$$$/ | $$      | $$  | $$  | $$  | $$ $$ $$\r\n* | $$      | $$__/   | $$  $$$$| $$  | $$  >$$  $$ | $$      | $$  | $$  | $$  | $$  $$$$\r\n* | $$      | $$      | $$\\  $$$| $$  | $$ /$$/\\  $$| $$    $$| $$  | $$  | $$  | $$\\  $$$\r\n* | $$$$$$$$| $$$$$$$$| $$ \\  $$| $$$$$$$/| $$  \\ $$|  $$$$$$/|  $$$$$$/ /$$$$$$| $$ \\  $$\r\n* |________/|________/|__/  \\__/|_______/ |__/  |__/ \\______/  \\______/ |______/|__/  \\__/\r\n*/\r\n\r\n\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20;\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // How many token units a buyer gets per wei.\r\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\r\n  // 1 wei will give you 1 unit, or 0.001 TOK.\r\n  uint256 public rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @param _rate Number of token units a buyer gets per wei\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   * @param _token Address of the token being sold\r\n   */\r\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = _token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(_beneficiary, tokens);\r\n    emit TokenPurchase(\r\n      msg.sender,\r\n      _beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n    _forwardFunds();\r\n    _postValidatePurchase(_beneficiary, weiAmount);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method: \r\n   *   super._preValidatePurchase(_beneficiary, _weiAmount);\r\n   *   require(weiRaised.add(_weiAmount) <= cap);\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    token.safeTransfer(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    return _weiAmount.mul(rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\ncontract MintedCrowdsale is Crowdsale {\r\n\r\n  /**\r\n   * @dev Overrides delivery by minting tokens upon purchase.\r\n   * @param _beneficiary Token purchaser\r\n   * @param _tokenAmount Number of tokens to be minted\r\n   */\r\n  function _deliverTokens(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    // Potentially dangerous assumption about the type of the token.\r\n    require(MintableToken(address(token)).mint(_beneficiary, _tokenAmount));\r\n  }\r\n}\r\n\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  /**\r\n   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\r\n   * @param _cap Max amount of wei to be contributed\r\n   */\r\n  constructor(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the cap has been reached.\r\n   * @return Whether the cap was reached\r\n   */\r\n  function capReached() public view returns (bool) {\r\n    return weiRaised >= cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring purchase to respect the funding cap.\r\n   * @param _beneficiary Token purchaser\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    require(weiRaised.add(_weiAmount) <= cap);\r\n  }\r\n\r\n}\r\n\r\ncontract TimedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public openingTime;\r\n  uint256 public closingTime;\r\n\r\n  /**\r\n   * @dev Reverts if not in crowdsale time range.\r\n   */\r\n  modifier onlyWhileOpen {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor, takes crowdsale opening and closing times.\r\n   * @param _openingTime Crowdsale opening time\r\n   * @param _closingTime Crowdsale closing time\r\n   */\r\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(_openingTime >= block.timestamp);\r\n    require(_closingTime >= _openingTime);\r\n\r\n    openingTime = _openingTime;\r\n    closingTime = _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n   * @return Whether crowdsale period has elapsed\r\n   */\r\n  function hasClosed() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp > closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring to be within contributing period\r\n   * @param _beneficiary Token purchaser\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n    onlyWhileOpen\r\n  {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract DailyLimitCrowdsale is TimedCrowdsale, Ownable {\r\n\r\n    uint256 public dailyLimit; // all users\r\n    uint256 public stageLimit; // all users\r\n    uint256 public minDailyPerUser;\r\n    uint256 public maxDailyPerUser;\r\n\r\n    // today's index => who => value\r\n    mapping(uint256 => mapping(address => uint256)) public userSpending;\r\n    // all users\r\n    mapping(uint256 => uint256) public totalSpending;\r\n\r\n    uint256 public stageSpending;\r\n    /**\r\n     * @dev Constructor that sets the passed value as a dailyLimit.\r\n     * @param _minDailyPerUser uint256 to represent the min cap / day / user.\r\n     * @param _maxDailyPerUser uint256 to represent the max cap / day/ user.\r\n     * @param _dailyLimit uint256 to represent the daily limit of all users.\r\n     * @param _stageLimit uint256 to represent the stage limit of all users.\r\n     */\r\n    constructor(uint256 _minDailyPerUser, uint256 _maxDailyPerUser, uint256 _dailyLimit, uint256 _stageLimit)\r\n    public {\r\n        minDailyPerUser = _minDailyPerUser;\r\n        maxDailyPerUser = _maxDailyPerUser;\r\n        dailyLimit = _dailyLimit;\r\n        stageLimit = _stageLimit;\r\n        stageSpending = 0;\r\n    }\r\n\r\n    function setTime(uint256 _openingTime, uint256 _closingTime)\r\n    onlyOwner\r\n    public {\r\n        require(_closingTime >= _openingTime);\r\n        openingTime = _openingTime;\r\n        closingTime = _closingTime;\r\n    }\r\n\r\n    /**\r\n     * @dev sets the daily limit. Does not alter the amount already spent today.\r\n     * @param _value uint256 to represent the new limit.\r\n     */\r\n    function _setDailyLimit(uint256 _value) internal {\r\n        dailyLimit = _value;\r\n    }\r\n\r\n    function _setMinDailyPerUser(uint256 _value) internal {\r\n        minDailyPerUser = _value;\r\n    }\r\n\r\n    function _setMaxDailyPerUser(uint256 _value) internal {\r\n        maxDailyPerUser = _value;\r\n    }\r\n\r\n    function _setStageLimit(uint256 _value) internal {\r\n        stageLimit = _value;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Checks to see if there is enough resource to spend today. If true, the resource may be expended.\r\n     * @param _value uint256 representing the amount of resource to spend.\r\n     * @return A boolean that is True if the resource was spent and false otherwise.\r\n     */\r\n\r\n    function underLimit(address who, uint256 _value) internal returns (bool) {\r\n        require(stageLimit > 0);\r\n        require(minDailyPerUser > 0);\r\n        require(maxDailyPerUser > 0);\r\n        require(_value >= minDailyPerUser);\r\n        require(_value <= maxDailyPerUser);\r\n        uint256 _key = today();\r\n        require(userSpending[_key][who] + _value >= userSpending[_key][who] && userSpending[_key][who] + _value <= maxDailyPerUser);\r\n        if (dailyLimit > 0) {\r\n            require(totalSpending[_key] + _value >= totalSpending[_key] && totalSpending[_key] + _value <= dailyLimit);\r\n        }\r\n        require(stageSpending + _value >= stageSpending && stageSpending + _value <= stageLimit);\r\n        totalSpending[_key] += _value;\r\n        userSpending[_key][who] += _value;\r\n        stageSpending += _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to determine today's index\r\n     * @return uint256 of today's index.\r\n     */\r\n    function today() private view returns (uint256) {\r\n        return now / 1 days;\r\n    }\r\n\r\n    modifier limitedDaily(address who, uint256 _value) {\r\n        require(underLimit(who, _value));\r\n        _;\r\n    }\r\n    // ===============================\r\n    function _preValidatePurchase(\r\n        address _beneficiary,\r\n        uint256 _weiAmount\r\n    )\r\n    limitedDaily(_beneficiary, _weiAmount)\r\n    internal\r\n    {\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    }\r\n\r\n    function _deliverTokens(\r\n        address _beneficiary,\r\n        uint256 _tokenAmount\r\n    )\r\n    internal\r\n    {\r\n        require(LendToken(token).deliver(_beneficiary, _tokenAmount));\r\n    }\r\n}\r\n\r\ncontract LendContract is MintedCrowdsale, DailyLimitCrowdsale {\r\n\r\n    // Fields:\r\n    enum CrowdsaleStage {\r\n        BT,         // Bounty\r\n        PS,         // Pre sale\r\n        TS_R1,      // Token sale round 1\r\n        TS_R2,      // Token sale round 2\r\n        TS_R3,      // Token sale round 3\r\n        EX,         // Exchange\r\n        P2P_EX      // P2P Exchange\r\n    }\r\n\r\n    CrowdsaleStage public stage = CrowdsaleStage.PS; // By default it's Presale\r\n    // =============\r\n\r\n    // Token Distribution\r\n    // =============================\r\n    uint256 public maxTokens = 120 * 1e6 * 1e18; // There will be total 120 million Tokens available for sale\r\n    uint256 public tokensForReserve = 50 * 1e6 * 1e18; // 50 million for the eco system reserve\r\n    uint256 public tokensForBounty = 1 * 1e6 * 1e18; // 1 million for token bounty will send from fund deposit address\r\n    uint256 public totalTokensForTokenSale = 49 * 1e6 * 1e18; // 49 million Tokens will be sold in Crowdsale\r\n    uint256 public totalTokensForSaleDuringPreSale = 20 * 1e6 * 1e18; // 20 million out of 6 million will be sold during PreSale\r\n    // ==============================\r\n    // Token Funding Rates\r\n    // ==============================\r\n    uint256 public constant PRESALE_RATE = 1070; // 1 ETH = 1070 xcoin\r\n    uint256 public constant ROUND_1_TOKENSALE_RATE = 535; // 1 ETH = 535 xcoin\r\n    uint256 public constant ROUND_2_TOKENSALE_RATE = 389; // 1 ETH = 389 xcoin\r\n    uint256 public constant ROUND_3_TOKENSALE_RATE = 306; // 1 ETH = 306 xcoin\r\n\r\n    // ==============================\r\n    // Token Limit\r\n    // ==============================\r\n\r\n    uint256 public constant PRESALE_MIN_DAILY_PER_USER = 5 * 1e18; // 5 ETH / user / day\r\n    uint256 public constant PRESALE_MAX_DAILY_PER_USER = 100 * 1e18; // 100 ETH / user / day\r\n\r\n    uint256 public constant TOKENSALE_MIN_DAILY_PER_USER = 0.1 * 1e18; // 0.1 ETH / user / day\r\n    uint256 public constant TOKENSALE_MAX_DAILY_PER_USER = 10 * 1e18; // 10 ETH / user / day\r\n\r\n\r\n    uint256 public constant ROUND_1_TOKENSALE_LIMIT_PER_DAY = 1.5 * 1e6 * 1e18; //1.5M xcoin all users\r\n    uint256 public constant ROUND_1_TOKENSALE_LIMIT = 15 * 1e6 * 1e18; //15M xcoin all users\r\n\r\n    uint256 public constant ROUND_2_TOKENSALE_LIMIT_PER_DAY = 1.5 * 1e6 * 1e18; //1.5M xcoin all users\r\n    uint256 public constant ROUND_2_TOKENSALE_LIMIT = 15 * 1e6 * 1e18; //15M xcoin all users\r\n\r\n    uint256 public constant ROUND_3_TOKENSALE_LIMIT_PER_DAY = 1.9 * 1e6 * 1e18; //1.9M xcoin all users\r\n    uint256 public constant ROUND_3_TOKENSALE_LIMIT = 19 * 1e6 * 1e18; //19M xcoin all users\r\n\r\n    // ===================\r\n    bool public crowdsaleStarted = true;\r\n    bool public crowdsalePaused = false;\r\n    // Events\r\n    event EthTransferred(string text);\r\n    event EthRefunded(string text);\r\n\r\n    function LendContract\r\n    (\r\n        uint256 _openingTime,\r\n        uint256 _closingTime,\r\n        uint256 _rate,\r\n        address _wallet,\r\n        uint256 _minDailyPerUser,\r\n        uint256 _maxDailyPerUser,\r\n        uint256 _dailyLimit,\r\n        uint256 _stageLimit,\r\n        MintableToken _token\r\n    )\r\n    public\r\n    DailyLimitCrowdsale(_minDailyPerUser, _maxDailyPerUser, _dailyLimit, _stageLimit)\r\n    Crowdsale(_rate, _wallet, _token)\r\n    TimedCrowdsale(_openingTime, _closingTime) {\r\n\r\n    }\r\n    function setCrowdsaleStage(uint value) public onlyOwner {\r\n        require(value > uint(CrowdsaleStage.BT) && value < uint(CrowdsaleStage.EX));\r\n        CrowdsaleStage _stage;\r\n        if (uint(CrowdsaleStage.PS) == value) {\r\n            _stage = CrowdsaleStage.PS;\r\n            setCurrentRate(PRESALE_RATE);\r\n            setMinDailyPerUser(PRESALE_MIN_DAILY_PER_USER);\r\n            setMaxDailyPerUser(PRESALE_MAX_DAILY_PER_USER);\r\n            setStageLimit(totalTokensForSaleDuringPreSale);\r\n        } else if (uint(CrowdsaleStage.TS_R1) == value) {\r\n            _stage = CrowdsaleStage.TS_R2;\r\n            setCurrentRate(ROUND_1_TOKENSALE_RATE);\r\n            // update limit\r\n            setDailyLimit(ROUND_1_TOKENSALE_LIMIT_PER_DAY);\r\n            setMinDailyPerUser(TOKENSALE_MIN_DAILY_PER_USER);\r\n            setMaxDailyPerUser(TOKENSALE_MAX_DAILY_PER_USER);\r\n            setStageLimit(ROUND_1_TOKENSALE_LIMIT);\r\n        } else if (uint(CrowdsaleStage.TS_R2) == value) {\r\n            _stage = CrowdsaleStage.TS_R2;\r\n            setCurrentRate(ROUND_2_TOKENSALE_RATE);\r\n            // update limit\r\n            setDailyLimit(ROUND_2_TOKENSALE_LIMIT_PER_DAY);\r\n            setMinDailyPerUser(TOKENSALE_MIN_DAILY_PER_USER);\r\n            setMaxDailyPerUser(TOKENSALE_MAX_DAILY_PER_USER);\r\n            setStageLimit(ROUND_2_TOKENSALE_LIMIT);\r\n        } else if (uint(CrowdsaleStage.TS_R3) == value) {\r\n            _stage = CrowdsaleStage.TS_R3;\r\n            setCurrentRate(ROUND_2_TOKENSALE_RATE);\r\n            // update limit\r\n            setDailyLimit(ROUND_2_TOKENSALE_LIMIT_PER_DAY);\r\n            setMinDailyPerUser(TOKENSALE_MIN_DAILY_PER_USER);\r\n            setMaxDailyPerUser(TOKENSALE_MAX_DAILY_PER_USER);\r\n            setStageLimit(ROUND_3_TOKENSALE_LIMIT);\r\n        }\r\n        stage = _stage;\r\n    }\r\n\r\n    // Change the current rate\r\n    function setCurrentRate(uint256 _rate) private {\r\n        rate = _rate;\r\n    }\r\n\r\n    function setRate(uint256 _rate) public onlyOwner {\r\n        setCurrentRate(_rate);\r\n    }\r\n\r\n    function setCrowdSale(bool _started) public onlyOwner {\r\n        crowdsaleStarted = _started;\r\n    }\r\n    // limit by user\r\n    function setDailyLimit(uint256 _value) public onlyOwner {\r\n        _setDailyLimit(_value);\r\n    }\r\n    function setMinDailyPerUser(uint256 _value) public onlyOwner {\r\n        _setMinDailyPerUser(_value);\r\n    }\r\n\r\n    function setMaxDailyPerUser(uint256 _value) public onlyOwner {\r\n        _setMaxDailyPerUser(_value);\r\n    }\r\n    function setStageLimit(uint256 _value) public onlyOwner {\r\n        _setStageLimit(_value);\r\n    }\r\n    function pauseCrowdsale() public onlyOwner {\r\n        crowdsalePaused = true;\r\n    }\r\n\r\n    function unPauseCrowdsale() public onlyOwner {\r\n        crowdsalePaused = false;\r\n    }\r\n    // ===========================\r\n    // Finish: Mint Extra Tokens as needed before finalizing the Crowdsale.\r\n    // ====================================================================\r\n\r\n    function finish(address _reserveFund) public onlyOwner {\r\n        if (crowdsaleStarted) {\r\n            uint256 alreadyMinted = token.totalSupply();\r\n            require(alreadyMinted < maxTokens);\r\n\r\n            uint256 unsoldTokens = totalTokensForTokenSale - alreadyMinted;\r\n            if (unsoldTokens > 0) {\r\n                tokensForReserve = tokensForReserve + unsoldTokens;\r\n            }\r\n            MintableToken(token).mint(_reserveFund, tokensForReserve);\r\n            crowdsaleStarted = false;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    hasMintPermission\r\n    canMint\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract LendToken is MintableToken {\r\n    string public name = \"LENDXCOIN\";\r\n    string public symbol = \"XCOIN\";\r\n    uint8 public decimals = 18;\r\n    address public contractAddress;\r\n    uint256 public fee;\r\n\r\n    uint256 public constant FEE_TRANSFER = 5 * 1e15; // 0.005 xcoin\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 51 * 1e6 * (10 ** uint256(decimals)); // 50M + 1M bounty\r\n\r\n    // Events\r\n    event ChangedFee(address who, uint256 newFee);\r\n\r\n    /**\r\n     * @dev Constructor that gives msg.sender all of existing tokens.\r\n     */\r\n    function LendToken() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        fee = FEE_TRANSFER;\r\n    }\r\n\r\n    function setContractAddress(address _contractAddress) external onlyOwner {\r\n        if (_contractAddress != address(0)) {\r\n            contractAddress = _contractAddress;\r\n        }\r\n    }\r\n\r\n    function deliver(\r\n        address _beneficiary,\r\n        uint256 _tokenAmount\r\n    )\r\n    public\r\n    returns (bool success)\r\n    {\r\n        require(_tokenAmount > 0);\r\n        require(msg.sender == contractAddress);\r\n        balances[_beneficiary] += _tokenAmount;\r\n        totalSupply_ += _tokenAmount;\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if (msg.sender == owner) {\r\n            return super.transfer(_to, _value);\r\n        } else {\r\n            require(fee <= balances[msg.sender]);\r\n            balances[owner] = balances[owner].add(fee);\r\n            balances[msg.sender] = balances[msg.sender].sub(fee);\r\n            return super.transfer(_to, _value - fee);\r\n        }\r\n    }\r\n\r\n    function setFee(uint256 _fee)\r\n    onlyOwner\r\n    public\r\n    {\r\n        fee = _fee;\r\n        emit ChangedFee(msg.sender, _fee);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxDailyPerUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROUND_3_TOKENSALE_LIMIT_PER_DAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unPauseCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setStageLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENSALE_MIN_DAILY_PER_USER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSpending\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reserveFund\",\"type\":\"address\"}],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsalePaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_MAX_DAILY_PER_USER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageSpending\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensForTokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_MIN_DAILY_PER_USER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROUND_3_TOKENSALE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROUND_2_TOKENSALE_LIMIT_PER_DAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKENSALE_MAX_DAILY_PER_USER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROUND_1_TOKENSALE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxDailyPerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROUND_2_TOKENSALE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROUND_2_TOKENSALE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROUND_1_TOKENSALE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"name\":\"setTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minDailyPerUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinDailyPerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_started\",\"type\":\"bool\"}],\"name\":\"setCrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userSpending\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROUND_3_TOKENSALE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensForSaleDuringPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROUND_1_TOKENSALE_LIMIT_PER_DAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_minDailyPerUser\",\"type\":\"uint256\"},{\"name\":\"_maxDailyPerUser\",\"type\":\"uint256\"},{\"name\":\"_dailyLimit\",\"type\":\"uint256\"},{\"name\":\"_stageLimit\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"}],\"name\":\"EthTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"}],\"name\":\"EthRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"LendContract","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005bcdd7e0000000000000000000000000000000000000000000000000000000005bdda9e0000000000000000000000000000000000000000000000000000000000000042e0000000000000000000000002958571fde567903b3299384d8d013294409a8fe0000000000000000000000000000000000000000000000004563918244f400000000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000108b2a2c28029094000000000000000000000000000000294adfa61038c0e1e968507d7ada6be5e6562629","Library":"","SwarmSource":"bzzr://475c91fbbb594cf4ac1cfdf91fa5fe10d7d6037c32296a718496305c27fd894d"}]}