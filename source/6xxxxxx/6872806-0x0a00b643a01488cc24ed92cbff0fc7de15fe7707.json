{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract LibSignatureValidation {\r\n\r\n  using LibBytes for bytes;\r\n\r\n  function isValidSignature(bytes32 hash, address signerAddress, bytes memory signature) internal pure returns (bool) {\r\n    require(signature.length == 65, \"LENGTH_65_REQUIRED\");\r\n    uint8 v = uint8(signature[64]);\r\n    bytes32 r = signature.readBytes32(0);\r\n    bytes32 s = signature.readBytes32(32);\r\n    address recovered = ecrecover(hash, v, r, s);\r\n    return signerAddress == recovered;\r\n  }\r\n}\r\n\r\ncontract LibTransferRequest {\r\n\r\n  // EIP191 header for EIP712 prefix\r\n  string constant internal EIP191_HEADER = \"\\x19\\x01\";\r\n  // EIP712 Domain Name value\r\n  string constant internal EIP712_DOMAIN_NAME = \"Dola Core\";\r\n  // EIP712 Domain Version value\r\n  string constant internal EIP712_DOMAIN_VERSION = \"1\";\r\n  // Hash of the EIP712 Domain Separator Schema\r\n  bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\r\n    \"EIP712Domain(\",\r\n    \"string name,\",\r\n    \"string version,\",\r\n    \"address verifyingContract\",\r\n    \")\"\r\n  ));\r\n\r\n  // Hash of the EIP712 Domain Separator data\r\n  bytes32 public EIP712_DOMAIN_HASH;\r\n\r\n  bytes32 constant internal EIP712_TRANSFER_REQUEST_TYPE_HASH = keccak256(abi.encodePacked(\r\n    \"TransferRequest(\",\r\n    \"address senderAddress,\",\r\n    \"address receiverAddress,\",\r\n    \"uint256 value,\",\r\n    \"address relayerAddress,\",\r\n    \"uint256 relayerFee,\",\r\n    \"uint256 salt,\",\r\n    \")\"\r\n  ));\r\n\r\n  struct TransferRequest {\r\n    address senderAddress;\r\n    address receiverAddress;\r\n    uint256 value;\r\n    address relayerAddress;\r\n    uint256 relayerFee;\r\n    uint256 salt;\r\n  }\r\n\r\n  constructor() public {\r\n    EIP712_DOMAIN_HASH = keccak256(abi.encode(\r\n        EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\r\n        keccak256(bytes(EIP712_DOMAIN_NAME)),\r\n        keccak256(bytes(EIP712_DOMAIN_VERSION)),\r\n        address(this)\r\n      ));\r\n  }\r\n\r\n  function hashTransferRequest(TransferRequest memory request) internal view returns (bytes32) {\r\n    bytes32 typeHash = EIP712_TRANSFER_REQUEST_TYPE_HASH;\r\n    bytes32 hashStruct;\r\n\r\n    // assembly shorthand for:\r\n    // bytes32 hashStruct = keccak256(abi.encode(\r\n    //    EIP712_TRANSFER_REQUEST_TYPE_HASH,\r\n    //    request.senderAddress,\r\n    //    request.receiverAddress,\r\n    //    request.value,\r\n    //    request.relayerAddress,\r\n    //    request.relayerFee,\r\n    //    request.salt));\r\n    assembly {\r\n      // Back up select memory\r\n      let temp1 := mload(sub(request, 32))\r\n\r\n      mstore(sub(request, 32), typeHash)\r\n      hashStruct := keccak256(sub(request, 32), 224)\r\n\r\n      mstore(sub(request, 32), temp1)\r\n    }\r\n    return keccak256(abi.encodePacked(EIP191_HEADER, EIP712_DOMAIN_HASH, hashStruct));\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\ncontract DolaCore is LibTransferRequest, LibSignatureValidation {\r\n\r\n  using LibBytes for bytes;\r\n\r\n  address public TOKEN_ADDRESS;\r\n  mapping (address => mapping (address => uint256)) public requestEpoch;\r\n\r\n  event TransferRequestFilled(address indexed from, address indexed to);\r\n\r\n  constructor (address _tokenAddress) public LibTransferRequest() {\r\n    TOKEN_ADDRESS = _tokenAddress;\r\n  }\r\n\r\n  function executeTransfer(TransferRequest memory request, bytes memory signature) public {\r\n    // make sure the request hasn't been sent already\r\n    require(requestEpoch[request.senderAddress][request.relayerAddress] <= request.salt, \"REQUEST_INVALID\");\r\n    // Validate the sender is allowed to execute this transfer\r\n    require(request.relayerAddress == msg.sender, \"REQUEST_INVALID\");\r\n    // Validate the sender's signature\r\n    bytes32 requestHash = hashTransferRequest(request);\r\n    require(isValidSignature(requestHash, request.senderAddress, signature), \"INVALID_REQUEST_SIGNATURE\");\r\n\r\n    address tokenAddress = TOKEN_ADDRESS;\r\n    assembly {\r\n      mstore(32, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\r\n      calldatacopy(36, 4, 96)\r\n      let success := call(\r\n        gas,            // forward all gas\r\n        tokenAddress,   // call address of token contract\r\n        0,              // don't send any ETH\r\n        32,              // pointer to start of input\r\n        100,            // length of input\r\n        0,            // write output to far position\r\n        32              // output size should be 32 bytes\r\n      )\r\n      success := and(success, or(\r\n          iszero(returndatasize),\r\n          and(\r\n            eq(returndatasize, 32),\r\n            gt(mload(0), 0)\r\n          )\r\n        ))\r\n      if iszero(success) {\r\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\r\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\r\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\r\n        mstore(96, 0)\r\n        revert(0, 100)\r\n      }\r\n      calldatacopy(68, 100, 64)\r\n      success := call(\r\n        gas,            // forward all gas\r\n        tokenAddress,   // call address of token contract\r\n        0,              // don't send any ETH\r\n        32,              // pointer to start of input\r\n        100,            // length of input\r\n        0,            // write output over input\r\n        32              // output size should be 32 bytes\r\n      )\r\n      success := and(success, or(\r\n          iszero(returndatasize),\r\n          and(\r\n            eq(returndatasize, 32),\r\n            gt(mload(0), 0)\r\n          )\r\n        ))\r\n      if iszero(success) {\r\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\r\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\r\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\r\n        mstore(96, 0)\r\n        revert(0, 100)\r\n      }\r\n    }\r\n\r\n    requestEpoch[request.senderAddress][request.relayerAddress] = request.salt + 1;\r\n  }\r\n}\r\n\r\nlibrary LibBytes {\r\n\r\n    using LibBytes for bytes;\r\n\r\n    /// @dev Gets the memory address for a byte array.\r\n    /// @param input Byte array to lookup.\r\n    /// @return memoryAddress Memory address of byte array. This\r\n    ///         points to the header of the byte array which contains\r\n    ///         the length.\r\n    function rawAddress(bytes memory input)\r\n        internal\r\n        pure\r\n        returns (uint256 memoryAddress)\r\n    {\r\n        assembly {\r\n            memoryAddress := input\r\n        }\r\n        return memoryAddress;\r\n    }\r\n\r\n    /// @dev Gets the memory address for the contents of a byte array.\r\n    /// @param input Byte array to lookup.\r\n    /// @return memoryAddress Memory address of the contents of the byte array.\r\n    function contentAddress(bytes memory input)\r\n        internal\r\n        pure\r\n        returns (uint256 memoryAddress)\r\n    {\r\n        assembly {\r\n            memoryAddress := add(input, 32)\r\n        }\r\n        return memoryAddress;\r\n    }\r\n\r\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\r\n    /// @param dest memory address to copy bytes to.\r\n    /// @param source memory address to copy bytes from.\r\n    /// @param length number of bytes to copy.\r\n    function memCopy(\r\n        uint256 dest,\r\n        uint256 source,\r\n        uint256 length\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        if (length < 32) {\r\n            // Handle a partial word by reading destination and masking\r\n            // off the bits we are interested in.\r\n            // This correctly handles overlap, zero lengths and source == dest\r\n            assembly {\r\n                let mask := sub(exp(256, sub(32, length)), 1)\r\n                let s := and(mload(source), not(mask))\r\n                let d := and(mload(dest), mask)\r\n                mstore(dest, or(s, d))\r\n            }\r\n        } else {\r\n            // Skip the O(length) loop when source == dest.\r\n            if (source == dest) {\r\n                return;\r\n            }\r\n\r\n            // For large copies we copy whole words at a time. The final\r\n            // word is aligned to the end of the range (instead of after the\r\n            // previous) to handle partial words. So a copy will look like this:\r\n            //\r\n            //  ####\r\n            //      ####\r\n            //          ####\r\n            //            ####\r\n            //\r\n            // We handle overlap in the source and destination range by\r\n            // changing the copying direction. This prevents us from\r\n            // overwriting parts of source that we still need to copy.\r\n            //\r\n            // This correctly handles source == dest\r\n            //\r\n            if (source > dest) {\r\n                assembly {\r\n                    // We subtract 32 from `sEnd` and `dEnd` because it\r\n                    // is easier to compare with in the loop, and these\r\n                    // are also the addresses we need for copying the\r\n                    // last bytes.\r\n                    length := sub(length, 32)\r\n                    let sEnd := add(source, length)\r\n                    let dEnd := add(dest, length)\r\n\r\n                    // Remember the last 32 bytes of source\r\n                    // This needs to be done here and not after the loop\r\n                    // because we may have overwritten the last bytes in\r\n                    // source already due to overlap.\r\n                    let last := mload(sEnd)\r\n\r\n                    // Copy whole words front to back\r\n                    // Note: the first check is always true,\r\n                    // this could have been a do-while loop.\r\n                    // solhint-disable-next-line no-empty-blocks\r\n                    for {} lt(source, sEnd) {} {\r\n                        mstore(dest, mload(source))\r\n                        source := add(source, 32)\r\n                        dest := add(dest, 32)\r\n                    }\r\n\r\n                    // Write the last 32 bytes\r\n                    mstore(dEnd, last)\r\n                }\r\n            } else {\r\n                assembly {\r\n                    // We subtract 32 from `sEnd` and `dEnd` because those\r\n                    // are the starting points when copying a word at the end.\r\n                    length := sub(length, 32)\r\n                    let sEnd := add(source, length)\r\n                    let dEnd := add(dest, length)\r\n\r\n                    // Remember the first 32 bytes of source\r\n                    // This needs to be done here and not after the loop\r\n                    // because we may have overwritten the first bytes in\r\n                    // source already due to overlap.\r\n                    let first := mload(source)\r\n\r\n                    // Copy whole words back to front\r\n                    // We use a signed comparisson here to allow dEnd to become\r\n                    // negative (happens when source and dest < 32). Valid\r\n                    // addresses in local memory will never be larger than\r\n                    // 2**255, so they can be safely re-interpreted as signed.\r\n                    // Note: the first check is always true,\r\n                    // this could have been a do-while loop.\r\n                    // solhint-disable-next-line no-empty-blocks\r\n                    for {} slt(dest, dEnd) {} {\r\n                        mstore(dEnd, mload(sEnd))\r\n                        sEnd := sub(sEnd, 32)\r\n                        dEnd := sub(dEnd, 32)\r\n                    }\r\n\r\n                    // Write the first 32 bytes\r\n                    mstore(dest, first)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns a slices from a byte array.\r\n    /// @param b The byte array to take a slice from.\r\n    /// @param from The starting index for the slice (inclusive).\r\n    /// @param to The final index for the slice (exclusive).\r\n    /// @return result The slice containing bytes at indices [from, to)\r\n    function slice(\r\n        bytes memory b,\r\n        uint256 from,\r\n        uint256 to\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes memory result)\r\n    {\r\n        require(\r\n            from <= to,\r\n            \"FROM_LESS_THAN_TO_REQUIRED\"\r\n        );\r\n        require(\r\n            to < b.length,\r\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Create a new bytes structure and copy contents\r\n        result = new bytes(to - from);\r\n        memCopy(\r\n            result.contentAddress(),\r\n            b.contentAddress() + from,\r\n            result.length);\r\n        return result;\r\n    }\r\n\r\n    /// @dev Returns a slice from a byte array without preserving the input.\r\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\r\n    /// @param from The starting index for the slice (inclusive).\r\n    /// @param to The final index for the slice (exclusive).\r\n    /// @return result The slice containing bytes at indices [from, to)\r\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\r\n    function sliceDestructive(\r\n        bytes memory b,\r\n        uint256 from,\r\n        uint256 to\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes memory result)\r\n    {\r\n        require(\r\n            from <= to,\r\n            \"FROM_LESS_THAN_TO_REQUIRED\"\r\n        );\r\n        require(\r\n            to < b.length,\r\n            \"TO_LESS_THAN_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Create a new bytes structure around [from, to) in-place.\r\n        assembly {\r\n            result := add(b, from)\r\n            mstore(result, sub(to, from))\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Pops the last byte off of a byte array by modifying its length.\r\n    /// @param b Byte array that will be modified.\r\n    /// @return The byte that was popped off.\r\n    function popLastByte(bytes memory b)\r\n        internal\r\n        pure\r\n        returns (bytes1 result)\r\n    {\r\n        require(\r\n            b.length > 0,\r\n            \"GREATER_THAN_ZERO_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Store last byte.\r\n        result = b[b.length - 1];\r\n\r\n        assembly {\r\n            // Decrement length of byte array.\r\n            let newLen := sub(mload(b), 1)\r\n            mstore(b, newLen)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\r\n    /// @param b Byte array that will be modified.\r\n    /// @return The 20 byte address that was popped off.\r\n    function popLast20Bytes(bytes memory b)\r\n        internal\r\n        pure\r\n        returns (address result)\r\n    {\r\n        require(\r\n            b.length >= 20,\r\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Store last 20 bytes.\r\n        result = readAddress(b, b.length - 20);\r\n\r\n        assembly {\r\n            // Subtract 20 from byte array length.\r\n            let newLen := sub(mload(b), 20)\r\n            mstore(b, newLen)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Tests equality of two byte arrays.\r\n    /// @param lhs First byte array to compare.\r\n    /// @param rhs Second byte array to compare.\r\n    /// @return True if arrays are the same. False otherwise.\r\n    function equals(\r\n        bytes memory lhs,\r\n        bytes memory rhs\r\n    )\r\n        internal\r\n        pure\r\n        returns (bool equal)\r\n    {\r\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\r\n        // We early exit on unequal lengths, but keccak would also correctly\r\n        // handle this.\r\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\r\n    }\r\n\r\n    /// @dev Reads an address from a position in a byte array.\r\n    /// @param b Byte array containing an address.\r\n    /// @param index Index in byte array of address.\r\n    /// @return address from byte array.\r\n    function readAddress(\r\n        bytes memory b,\r\n        uint256 index\r\n    )\r\n        internal\r\n        pure\r\n        returns (address result)\r\n    {\r\n        require(\r\n            b.length >= index + 20,  // 20 is length of address\r\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Add offset to index:\r\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\r\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\r\n        index += 20;\r\n\r\n        // Read address from array memory\r\n        assembly {\r\n            // 1. Add index to address of bytes array\r\n            // 2. Load 32-byte word from memory\r\n            // 3. Apply 20-byte mask to obtain address\r\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Writes an address into a specific position in a byte array.\r\n    /// @param b Byte array to insert address into.\r\n    /// @param index Index in byte array of address.\r\n    /// @param input Address to put into byte array.\r\n    function writeAddress(\r\n        bytes memory b,\r\n        uint256 index,\r\n        address input\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        require(\r\n            b.length >= index + 20,  // 20 is length of address\r\n            \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Add offset to index:\r\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\r\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\r\n        index += 20;\r\n\r\n        // Store address into array memory\r\n        assembly {\r\n            // The address occupies 20 bytes and mstore stores 32 bytes.\r\n            // First fetch the 32-byte word where we'll be storing the address, then\r\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\r\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\r\n\r\n            // 1. Add index to address of bytes array\r\n            // 2. Load 32-byte word from memory\r\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\r\n            let neighbors := and(\r\n                mload(add(b, index)),\r\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\r\n            )\r\n\r\n            // Make sure input address is clean.\r\n            // (Solidity does not guarantee this)\r\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\r\n\r\n            // Store the neighbors and address into memory\r\n            mstore(add(b, index), xor(input, neighbors))\r\n        }\r\n    }\r\n\r\n    /// @dev Reads a bytes32 value from a position in a byte array.\r\n    /// @param b Byte array containing a bytes32 value.\r\n    /// @param index Index in byte array of bytes32 value.\r\n    /// @return bytes32 value from byte array.\r\n    function readBytes32(\r\n        bytes memory b,\r\n        uint256 index\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes32 result)\r\n    {\r\n        require(\r\n            b.length >= index + 32,\r\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Arrays are prefixed by a 256 bit length parameter\r\n        index += 32;\r\n\r\n        // Read the bytes32 from array memory\r\n        assembly {\r\n            result := mload(add(b, index))\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Writes a bytes32 into a specific position in a byte array.\r\n    /// @param b Byte array to insert <input> into.\r\n    /// @param index Index in byte array of <input>.\r\n    /// @param input bytes32 to put into byte array.\r\n    function writeBytes32(\r\n        bytes memory b,\r\n        uint256 index,\r\n        bytes32 input\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        require(\r\n            b.length >= index + 32,\r\n            \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Arrays are prefixed by a 256 bit length parameter\r\n        index += 32;\r\n\r\n        // Read the bytes32 from array memory\r\n        assembly {\r\n            mstore(add(b, index), input)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads a uint256 value from a position in a byte array.\r\n    /// @param b Byte array containing a uint256 value.\r\n    /// @param index Index in byte array of uint256 value.\r\n    /// @return uint256 value from byte array.\r\n    function readUint256(\r\n        bytes memory b,\r\n        uint256 index\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256 result)\r\n    {\r\n        return uint256(readBytes32(b, index));\r\n    }\r\n\r\n    /// @dev Writes a uint256 into a specific position in a byte array.\r\n    /// @param b Byte array to insert <input> into.\r\n    /// @param index Index in byte array of <input>.\r\n    /// @param input uint256 to put into byte array.\r\n    function writeUint256(\r\n        bytes memory b,\r\n        uint256 index,\r\n        uint256 input\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        writeBytes32(b, index, bytes32(input));\r\n    }\r\n\r\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\r\n    /// @param b Byte array containing a bytes4 value.\r\n    /// @param index Index in byte array of bytes4 value.\r\n    /// @return bytes4 value from byte array.\r\n    function readBytes4(\r\n        bytes memory b,\r\n        uint256 index\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes4 result)\r\n    {\r\n        require(\r\n            b.length >= index + 4,\r\n            \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\"\r\n        );\r\n        assembly {\r\n            result := mload(add(b, 32))\r\n            // Solidity does not require us to clean the trailing bytes.\r\n            // We do it anyway\r\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Reads nested bytes from a specific position.\r\n    /// @dev NOTE: the returned value overlaps with the input value.\r\n    ///            Both should be treated as immutable.\r\n    /// @param b Byte array containing nested bytes.\r\n    /// @param index Index of nested bytes.\r\n    /// @return result Nested bytes.\r\n    function readBytesWithLength(\r\n        bytes memory b,\r\n        uint256 index\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes memory result)\r\n    {\r\n        // Read length of nested bytes\r\n        uint256 nestedBytesLength = readUint256(b, index);\r\n        index += 32;\r\n\r\n        // Assert length of <b> is valid, given\r\n        // length of nested bytes\r\n        require(\r\n            b.length >= index + nestedBytesLength,\r\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Return a pointer to the byte array as it exists inside `b`\r\n        assembly {\r\n            result := add(b, index)\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Inserts bytes at a specific position in a byte array.\r\n    /// @param b Byte array to insert <input> into.\r\n    /// @param index Index in byte array of <input>.\r\n    /// @param input bytes to insert.\r\n    function writeBytesWithLength(\r\n        bytes memory b,\r\n        uint256 index,\r\n        bytes memory input\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        // Assert length of <b> is valid, given\r\n        // length of input\r\n        require(\r\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\r\n            \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\"\r\n        );\r\n\r\n        // Copy <input> into <b>\r\n        memCopy(\r\n            b.contentAddress() + index,\r\n            input.rawAddress(), // includes length of <input>\r\n            input.length + 32   // +32 bytes to store <input> length\r\n        );\r\n    }\r\n\r\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\r\n    /// @param dest Byte array that will be overwritten with source bytes.\r\n    /// @param source Byte array to copy onto dest bytes.\r\n    function deepCopyBytes(\r\n        bytes memory dest,\r\n        bytes memory source\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        uint256 sourceLen = source.length;\r\n        // Dest length must be >= source length, or some bytes would not be copied.\r\n        require(\r\n            dest.length >= sourceLen,\r\n            \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\"\r\n        );\r\n        memCopy(\r\n            dest.contentAddress(),\r\n            source.contentAddress(),\r\n            sourceLen\r\n        );\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"senderAddress\",\"type\":\"address\"},{\"name\":\"receiverAddress\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"relayerAddress\",\"type\":\"address\"},{\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"request\",\"type\":\"tuple\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"executeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EIP712_DOMAIN_HASH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferRequestFilled\",\"type\":\"event\"}]","ContractName":"DolaCore","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"1000000000","ConstructorArguments":"00000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359","Library":"","SwarmSource":"bzzr://54b69286dd06f13705c04e745737995c94bb6b9a2593b0ed903ce96153d4ffdc"}]}