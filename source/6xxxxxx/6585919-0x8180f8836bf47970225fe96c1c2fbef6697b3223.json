{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n     constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"You are not the owner of this contract.\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Destructible.sol\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n  constructor() public payable { }\r\n\r\n  /**\r\n   * @dev Transfers the current balance to the owner and terminates the contract.\r\n   */\r\n  function destroy() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) onlyOwner public {\r\n    selfdestruct(_recipient);\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused, \"this contract is paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/marketplace/Marketplace.sol\r\n\r\n/**\r\n * @title Interface for contracts conforming to ERC-20\r\n */\r\ncontract ERC20Interface {\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\n/**\r\n * @title Interface for contracts conforming to ERC-721\r\n */\r\ncontract ERC721Interface {\r\n    function ownerOf(uint256 assetId) public view returns (address);\r\n    function safeTransferFrom(address from, address to, uint256 assetId) public;\r\n    function isAuthorized(address operator, uint256 assetId) public view returns (bool);\r\n    function exists(uint256 assetId) public view returns (bool);\r\n}\r\n\r\ncontract DCLEscrow is Ownable, Pausable, Destructible {\r\n    using SafeMath for uint256;\r\n\r\n    ERC20Interface public acceptedToken;\r\n    ERC721Interface public nonFungibleRegistry;\r\n\r\n    struct Escrow {\r\n        bytes32 id;\r\n        address seller;\r\n        address buyer;\r\n        uint256 price;\r\n        uint256 offer;\r\n        bool acceptsOffers;\r\n        bool publicE;\r\n        uint256 escrowByOwnerIdPos;\r\n        uint256 parcelCount;\r\n        address highestBidder;\r\n        uint256 lastOfferPrice;\r\n    }\r\n    \r\n    struct Offer {\r\n        address highestOffer;\r\n        uint256 highestOfferPrice;\r\n        address previousOffer;\r\n    }\r\n    \r\n\r\n    mapping (uint256 => Escrow) public escrowByAssetId;\r\n    mapping (bytes32 => Escrow) public escrowByEscrowId;\r\n    mapping (bytes32 => Offer) public offersByEscrowId;\r\n    \r\n    mapping (address => Escrow[]) public escrowByOwnerId;\r\n    \r\n    mapping(address => uint256) public openedEscrowsByOwnerId;\r\n    mapping(address => uint256) public ownerEscrowsCounter;\r\n    \r\n    mapping(address => uint256[]) public allOwnerParcelsOnEscrow;\r\n    mapping(bytes32 => uint256[]) public assetIdByEscrowId;\r\n    mapping(address => bool) public whitelistAddresses;\r\n\r\n    uint256 public whitelistCounter;\r\n    uint256 public publicationFeeInWei;\r\n    //15000000000000000000\r\n    \r\n    uint256 private publicationFeeTotal;\r\n    bytes32[] public allEscrowIds;\r\n    //address[] public whitelistAddressGetter;\r\n\r\n    /* EVENTS */\r\n    event EscrowCreated(\r\n        bytes32 id,\r\n        address indexed seller, \r\n        address indexed buyer,\r\n        uint256 priceInWei,\r\n        bool acceptsOffers,\r\n        bool publicE,\r\n        uint256 parcels\r\n    );\r\n    \r\n\r\n    event EscrowSuccessful(\r\n        bytes32 id,\r\n        address indexed seller, \r\n        uint256 totalPrice, \r\n        address indexed winner\r\n    );\r\n    \r\n    event EscrowCancelled(\r\n        bytes32 id,\r\n        address indexed seller\r\n    );\r\n    \r\n    function addAddressWhitelist(address toWhitelist) public onlyOwner\r\n    {\r\n        require(toWhitelist != address(0), \"Address cannot be empty.\");\r\n        whitelistAddresses[toWhitelist] = true;\r\n    }\r\n    \r\n    /*\r\n    function getwhitelistCounter() public onlyOwner view returns(uint256)\r\n    {\r\n        return whitelistCounter;\r\n    }\r\n    \r\n    function getwhitelistAddress(uint256 index) public onlyOwner view returns(address)\r\n    {\r\n        return whitelistAddressGetter[index];\r\n    }\r\n    \r\n    \r\n    function deleteWhitelistAddress(address toDelete, uint256 index) public onlyOwner\r\n    {\r\n        require(toDelete != address(0), \"Address cannot be blank.\");\r\n        require(index > 0, \"index needs to be greater than zero.\");\r\n       delete whitelistAddresses[toDelete];\r\n       delete whitelistAddressGetter[index];\r\n    }\r\n    */\r\n    \r\n    function updateEscrow(address _acceptedToken, address _nonFungibleRegistry) public onlyOwner {\r\n        acceptedToken = ERC20Interface(_acceptedToken);\r\n        nonFungibleRegistry = ERC721Interface(_nonFungibleRegistry);\r\n    }\r\n    \r\n    constructor (address _acceptedToken, address _nonFungibleRegistry) public {\r\n        \r\n        acceptedToken = ERC20Interface(_acceptedToken);\r\n        nonFungibleRegistry = ERC721Interface(_nonFungibleRegistry);\r\n    }\r\n\r\n    function setPublicationFee(uint256 publicationFee) onlyOwner public {\r\n        publicationFeeInWei = publicationFee;\r\n    }\r\n    \r\n    function getPublicationFeeTotal() public onlyOwner view returns(uint256)\r\n    {\r\n        return publicationFeeTotal;\r\n    }\r\n    \r\n    function getTotalEscrowCount() public view returns(uint256)\r\n    {\r\n        return allEscrowIds.length;\r\n    }\r\n    \r\n    function getSingleEscrowAdmin(bytes32 index) public view returns (bytes32, address, address,uint256, uint256, bool, bool, uint256, uint256, address, uint256) {\r\n    Escrow storage tempEscrow = escrowByEscrowId[index];\r\n\r\n    return (\r\n    tempEscrow.id,\r\n    tempEscrow.seller, \r\n    tempEscrow.buyer, \r\n    tempEscrow.price, \r\n    tempEscrow.offer, \r\n    tempEscrow.publicE,\r\n    tempEscrow.acceptsOffers,\r\n    tempEscrow.escrowByOwnerIdPos,\r\n    tempEscrow.parcelCount,\r\n    tempEscrow.highestBidder,\r\n    tempEscrow.lastOfferPrice);\r\n}\r\n    \r\n    function getAssetByEscrowIdLength(bytes32 escrowId) public view returns (uint256) {\r\n    return assetIdByEscrowId[escrowId].length;\r\n    }\r\n    \r\n    function getSingleAssetByEscrowIdLength(bytes32 escrowId, uint index) public view returns (uint256) {\r\n    return assetIdByEscrowId[escrowId][index];\r\n    }\r\n    \r\n    function getEscrowCountByAssetIdArray(address ownerAddress) public view returns (uint256) {\r\n    return ownerEscrowsCounter[ownerAddress];\r\n    }\r\n    \r\n    function getAllOwnedParcelsOnEscrow(address ownerAddress) public view returns (uint256) {\r\n    return allOwnerParcelsOnEscrow[ownerAddress].length;\r\n    }\r\n    \r\n    function getParcelAssetIdOnEscrow(address ownerAddress,uint index) public view returns (uint256) {\r\n    return allOwnerParcelsOnEscrow[ownerAddress][index];\r\n    }\r\n    \r\n    function getEscrowCountById(address ownerAddress) public view returns (uint) {\r\n    return escrowByOwnerId[ownerAddress].length;\r\n    }\r\n    \r\n    function getEscrowInfo(address ownerAddress, uint index) public view returns (bytes32, address, address,uint256, uint256, bool, bool, uint256, uint256, address, uint256) {\r\n    Escrow storage tempEscrow = escrowByOwnerId[ownerAddress][index];\r\n\r\n    return (\r\n    tempEscrow.id,\r\n    tempEscrow.seller, \r\n    tempEscrow.buyer, \r\n    tempEscrow.price, \r\n    tempEscrow.offer, \r\n    tempEscrow.publicE,\r\n    tempEscrow.acceptsOffers,\r\n    tempEscrow.escrowByOwnerIdPos,\r\n    tempEscrow.parcelCount,\r\n    tempEscrow.highestBidder,\r\n    tempEscrow.lastOfferPrice);\r\n}\r\n\r\n   \r\n    function placeOffer(bytes32 escrowId, uint256 offerPrice) public whenNotPaused\r\n    {\r\n        address seller = escrowByEscrowId[escrowId].seller;\r\n        require(seller != msg.sender, \"You are the owner of this escrow.\");\r\n        require(seller != address(0));\r\n        require(offerPrice > 0, \"Offer Price needs to be greater than zero\");\r\n        require(escrowByEscrowId[escrowId].id != '0x0', \"That escrow ID is no longer valid.\");\r\n\r\n        \r\n        bool acceptsOffers = escrowByEscrowId[escrowId].acceptsOffers;\r\n        require(acceptsOffers, \"This escrow does not accept offers.\");\r\n\r\n        //address buyer = escrowByEscrowId[escrowId].buyer;\r\n        bool isPublic = escrowByEscrowId[escrowId].publicE;\r\n        if(!isPublic)\r\n        {\r\n            require(msg.sender == escrowByEscrowId[escrowId].buyer, \"You are not authorized for this escrow.\");\r\n        }\r\n        \r\n        Escrow memory tempEscrow = escrowByEscrowId[escrowId];\r\n        tempEscrow.lastOfferPrice = tempEscrow.offer;\r\n        tempEscrow.offer = offerPrice;\r\n        tempEscrow.highestBidder = msg.sender;\r\n        escrowByEscrowId[escrowId] = tempEscrow;\r\n        \r\n  \r\n    }\r\n    \r\n    function createNewEscrow(uint256[] memory assedIds, uint256 escrowPrice, bool doesAcceptOffers, bool isPublic, address buyer) public whenNotPaused{\r\n        //address tempAssetOwner = msg.sender;\r\n        uint256 tempParcelCount = assedIds.length;\r\n        \r\n        for(uint i = 0; i < tempParcelCount; i++)\r\n        {\r\n            address assetOwner = nonFungibleRegistry.ownerOf(assedIds[i]);\r\n            require(msg.sender == assetOwner, \"You are not the owner of this parcel.\");\r\n            require(nonFungibleRegistry.exists(assedIds[i]), \"This parcel does not exist.\");\r\n            require(nonFungibleRegistry.isAuthorized(address(this), assedIds[i]), \"You have not authorized DCL Escrow to manage your LAND tokens.\");\r\n            allOwnerParcelsOnEscrow[assetOwner].push(assedIds[i]);\r\n        }\r\n        \r\n        require(escrowPrice > 0, \"Please pass a price greater than zero.\");\r\n        \r\n        bytes32 escrowId = keccak256(abi.encodePacked(\r\n            block.timestamp, \r\n            msg.sender,\r\n            assedIds[0], \r\n            escrowPrice\r\n        ));\r\n        \r\n         assetIdByEscrowId[escrowId] = assedIds;\r\n        \r\n        //uint256 memEscrowByOwnerIdPos = openedEscrowsByOwnerId[assetOwner];\r\n        \r\n        Escrow memory memEscrow = Escrow({\r\n            id: escrowId,\r\n            seller: msg.sender,\r\n            buyer: buyer,\r\n            price: escrowPrice,\r\n            offer:0,\r\n            publicE:isPublic,\r\n            acceptsOffers: doesAcceptOffers,\r\n            escrowByOwnerIdPos: 0,\r\n            parcelCount: tempParcelCount,\r\n            highestBidder: address(0),\r\n            lastOfferPrice: 0\r\n            });\r\n            \r\n        escrowByEscrowId[escrowId] = memEscrow;\r\n        escrowByOwnerId[msg.sender].push(memEscrow);\r\n        //ownerEscrowsCounter[msg.sender] = getEscrowCountByAssetIdArray(msg.sender) + 1;\r\n        \r\n        \r\n           allEscrowIds.push(escrowId);\r\n        \r\n        \r\n            emit EscrowCreated(\r\n            escrowId,\r\n            msg.sender,\r\n            buyer,\r\n            escrowPrice,\r\n            doesAcceptOffers,\r\n            isPublic,\r\n            tempParcelCount\r\n        );\r\n        \r\n    }\r\n    \r\n    function cancelAllEscrows() public onlyOwner\r\n        {\r\n            \r\n        //need to delete each escrow by escrow id\r\n        pause();\r\n         for(uint e = 0; e < getTotalEscrowCount(); e++)\r\n        {\r\n             adminRemoveEscrow(allEscrowIds[e]);\r\n        }\r\n        delete allEscrowIds;\r\n       unpause();\r\n    }\r\n    \r\n    function adminRemoveEscrow(bytes32 escrowId) public onlyOwner\r\n    {\r\n        address seller = escrowByEscrowId[escrowId].seller;\r\n        //require(seller == msg.sender || msg.sender == owner);\r\n    \r\n        //uint256 escrowOwnerPos = escrowByEscrowId[escrowId].escrowByOwnerIdPos;\r\n        \r\n        delete escrowByEscrowId[escrowId];\r\n\r\n        for(uint t = 0; t < escrowByOwnerId[seller].length; t++)\r\n        {\r\n            if(escrowByOwnerId[seller][t].id == escrowId)\r\n            {\r\n                delete escrowByOwnerId[seller][t];\r\n            }\r\n        }\r\n        \r\n        //escrowByOwnerId[seller].splice\r\n        //ownerEscrowsCounter[seller] = getEscrowCountByAssetIdArray(seller) - 1;\r\n        \r\n        uint256[] memory assetIds = assetIdByEscrowId[escrowId];\r\n        \r\n        for(uint i = 0; i < assetIds.length; i++)\r\n        {\r\n            for(uint j = 0; j < allOwnerParcelsOnEscrow[seller].length; j++)\r\n            {\r\n                if(assetIds[i] == allOwnerParcelsOnEscrow[seller][j])\r\n                {\r\n                    delete allOwnerParcelsOnEscrow[seller][j];\r\n                }\r\n            }\r\n        }\r\n        \r\n        emit EscrowCancelled(escrowId, seller);\r\n    }\r\n    \r\n    function removeEscrow(bytes32 escrowId) public whenNotPaused\r\n    {\r\n        address seller = escrowByEscrowId[escrowId].seller;\r\n        require(seller == msg.sender || msg.sender == owner);\r\n    \r\n        //uint256 escrowOwnerPos = escrowByEscrowId[escrowId].escrowByOwnerIdPos;\r\n        \r\n        delete escrowByEscrowId[escrowId];\r\n\r\n        for(uint t = 0; t < escrowByOwnerId[seller].length; t++)\r\n        {\r\n            if(escrowByOwnerId[seller][t].id == escrowId)\r\n            {\r\n                delete escrowByOwnerId[seller][t];\r\n            }\r\n        }\r\n        \r\n        //escrowByOwnerId[seller].splice\r\n        //ownerEscrowsCounter[seller] = getEscrowCountByAssetIdArray(seller) - 1;\r\n        \r\n        uint256[] memory assetIds = assetIdByEscrowId[escrowId];\r\n        \r\n        for(uint i = 0; i < assetIds.length; i++)\r\n        {\r\n            for(uint j = 0; j < allOwnerParcelsOnEscrow[seller].length; j++)\r\n            {\r\n                if(assetIds[i] == allOwnerParcelsOnEscrow[seller][j])\r\n                {\r\n                    delete allOwnerParcelsOnEscrow[seller][j];\r\n                }\r\n            }\r\n        }\r\n        \r\n        delete allEscrowIds;\r\n\r\n        \r\n        emit EscrowCancelled(escrowId, seller);\r\n    }\r\n \r\n \r\n    function acceptEscrow(bytes32 escrowId) public whenNotPaused {\r\n        address seller = escrowByEscrowId[escrowId].seller;\r\n        require(seller != msg.sender);\r\n        require(seller != address(0));\r\n\r\n        address buyer = escrowByEscrowId[escrowId].buyer;\r\n        bool isPublic = escrowByEscrowId[escrowId].publicE;\r\n        if(!isPublic)\r\n        {\r\n            require(msg.sender == escrowByEscrowId[escrowId].buyer, \"You are not authorized for this escrow.\");\r\n        }\r\n\r\n        //need to add check that offer price is accepted\r\n\r\n\r\n        uint256[] memory assetIds = assetIdByEscrowId[escrowId];\r\n        \r\n        for(uint a = 0; a < assetIds.length; a++)\r\n        {\r\n            require(seller == nonFungibleRegistry.ownerOf(assetIds[a]));\r\n        }\r\n        \r\n        uint escrowPrice = escrowByEscrowId[escrowId].price;\r\n        \r\n        if (publicationFeeInWei > 0) {\r\n            if(!whitelistAddresses[msg.sender])\r\n            {\r\n                acceptedToken.transferFrom(\r\n                msg.sender,\r\n                owner,\r\n                publicationFeeInWei\r\n            );\r\n            }\r\n            \r\n            if(!whitelistAddresses[seller])\r\n            {\r\n                acceptedToken.transferFrom(\r\n                seller,\r\n                owner,\r\n                publicationFeeInWei\r\n            );\r\n            }\r\n            \r\n        }\r\n        \r\n        // Transfer sale amount to seller\r\n        acceptedToken.transferFrom(\r\n            msg.sender,\r\n            seller,\r\n            escrowPrice\r\n        );\r\n        \r\n        for(uint counter = 0; counter < assetIds.length; counter++)\r\n        {\r\n            uint256 tempId = assetIds[counter];\r\n            nonFungibleRegistry.safeTransferFrom(\r\n            seller,\r\n            msg.sender,\r\n            tempId\r\n            ); \r\n            \r\n        }\r\n\r\n        \r\n        for(uint t = 0; t < escrowByOwnerId[seller].length; t++)\r\n        {\r\n            if(escrowByOwnerId[seller][t].id == escrowId)\r\n            {\r\n                delete escrowByOwnerId[seller][t];\r\n            }\r\n        }\r\n        \r\n        \r\n        for(uint i = 0; i < assetIds.length; i++)\r\n        {\r\n            for(uint j = 0; j < allOwnerParcelsOnEscrow[seller].length; j++)\r\n            {\r\n                if(assetIds[i] == allOwnerParcelsOnEscrow[seller][j])\r\n                {\r\n                    delete allOwnerParcelsOnEscrow[seller][j];\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        delete escrowByEscrowId[escrowId]; \r\n        delete assetIdByEscrowId[escrowId];\r\n\r\n            emit EscrowSuccessful(\r\n            escrowId,\r\n            seller,\r\n            escrowPrice,\r\n            buyer\r\n        );\r\n\r\n    }\r\n }","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getEscrowCountById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetIdByEscrowId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalEscrowCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_acceptedToken\",\"type\":\"address\"},{\"name\":\"_nonFungibleRegistry\",\"type\":\"address\"}],\"name\":\"updateEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonFungibleRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"openedEscrowsByOwnerId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"escrowId\",\"type\":\"bytes32\"}],\"name\":\"adminRemoveEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"offersByEscrowId\",\"outputs\":[{\"name\":\"highestOffer\",\"type\":\"address\"},{\"name\":\"highestOfferPrice\",\"type\":\"uint256\"},{\"name\":\"previousOffer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getParcelAssetIdOnEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"escrowByEscrowId\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"offer\",\"type\":\"uint256\"},{\"name\":\"acceptsOffers\",\"type\":\"bool\"},{\"name\":\"publicE\",\"type\":\"bool\"},{\"name\":\"escrowByOwnerIdPos\",\"type\":\"uint256\"},{\"name\":\"parcelCount\",\"type\":\"uint256\"},{\"name\":\"highestBidder\",\"type\":\"address\"},{\"name\":\"lastOfferPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPublicationFeeTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"escrowId\",\"type\":\"bytes32\"}],\"name\":\"acceptEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getEscrowInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getAllOwnedParcelsOnEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrowByOwnerId\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"offer\",\"type\":\"uint256\"},{\"name\":\"acceptsOffers\",\"type\":\"bool\"},{\"name\":\"publicE\",\"type\":\"bool\"},{\"name\":\"escrowByOwnerIdPos\",\"type\":\"uint256\"},{\"name\":\"parcelCount\",\"type\":\"uint256\"},{\"name\":\"highestBidder\",\"type\":\"address\"},{\"name\":\"lastOfferPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelAllEscrows\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrowByAssetId\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"offer\",\"type\":\"uint256\"},{\"name\":\"acceptsOffers\",\"type\":\"bool\"},{\"name\":\"publicE\",\"type\":\"bool\"},{\"name\":\"escrowByOwnerIdPos\",\"type\":\"uint256\"},{\"name\":\"parcelCount\",\"type\":\"uint256\"},{\"name\":\"highestBidder\",\"type\":\"address\"},{\"name\":\"lastOfferPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"escrowId\",\"type\":\"bytes32\"}],\"name\":\"removeEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toWhitelist\",\"type\":\"address\"}],\"name\":\"addAddressWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"escrowId\",\"type\":\"bytes32\"},{\"name\":\"offerPrice\",\"type\":\"uint256\"}],\"name\":\"placeOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"bytes32\"}],\"name\":\"getSingleEscrowAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allEscrowIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicationFeeInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allOwnerParcelsOnEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"publicationFee\",\"type\":\"uint256\"}],\"name\":\"setPublicationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"escrowId\",\"type\":\"bytes32\"}],\"name\":\"getAssetByEscrowIdLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getEscrowCountByAssetIdArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assedIds\",\"type\":\"uint256[]\"},{\"name\":\"escrowPrice\",\"type\":\"uint256\"},{\"name\":\"doesAcceptOffers\",\"type\":\"bool\"},{\"name\":\"isPublic\",\"type\":\"bool\"},{\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"createNewEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"escrowId\",\"type\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSingleAssetByEscrowIdLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerEscrowsCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_acceptedToken\",\"type\":\"address\"},{\"name\":\"_nonFungibleRegistry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"acceptsOffers\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"publicE\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"parcels\",\"type\":\"uint256\"}],\"name\":\"EscrowCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"EscrowSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"EscrowCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DCLEscrow","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000f5d2fb29fb7d3cfee444a200298f468908cc942000000000000000000000000f87e31492faf9a91b02ee0deaad50d51d56d5d4d","Library":"","SwarmSource":"bzzr://bc694fdd93b23709e4a9b848871fd0fca9eeccb40e03a680fa42ef5deef660eb"}]}