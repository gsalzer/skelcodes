{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {assert(b <= a); return a - b;}\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BlackChain {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public costPerTicket = 75000000000000000;    // Init with 0.005 ETH per bet\r\n    uint256 public maxCost = 25000000000000000;         // Price increase every 7 days until 0.03 ETH\r\n    // test 2.0\r\n    uint256 constant public expireDate = 1543622400;    // Contract refused to get any more bets after Dec 1, 2018\r\n    // uint256 constant public expireDate = 1533027600;\r\n\r\n    bool public confirmed;\r\n    bool public announced;\r\n    bool public gameOver;\r\n    bool public locked;\r\n    bool private developmentPaid;\r\n    uint private i;\r\n\r\n    uint256 public startDate;\r\n    address public owner;\r\n    address public leader;\r\n    address public leader_2;\r\n    address public leader_3;\r\n    uint256 public announcedTimeStamp;\r\n    uint256 public rewardPool;\r\n    uint256 public confirmreward;               // Help us confirm when the man die and get a total of 5% ETH reward\r\n    uint256 public init_fund;\r\n\r\n    uint256 public countConfirmed = 0;\r\n    uint256 public countPlayer = 0;\r\n    uint256 public countBet = 0 ;\r\n    uint256 public countWinners = 0;\r\n    uint256 public countSecondWinners = 0;\r\n\r\n    uint256 public averageTimestamp;\r\n\r\n    uint256 public numOfConfirmationNeeded;\r\n    uint256 private share = 0;\r\n\r\n    uint256 public winnerTimestamp = 0;\r\n    uint256 public secondWinnerTimestamp =0;\r\n    uint256 countWeek;\r\n\r\n\r\n    constructor() payable public {\r\n        owner = 0xD29C684C272ca7BEb3B54Ed876acF8C784a84fD1;\r\n        leader = 0xD29C684C272ca7BEb3B54Ed876acF8C784a84fD1;\r\n        leader_2 = msg.sender;\r\n        leader_3 = 0xF06A984d59E64687a7Fd508554eB8763899366EE;\r\n        countWeek = 1;\r\n        numOfConfirmationNeeded =100;\r\n        startDate = now;\r\n        rewardPool = msg.value;\r\n        init_fund = msg.value;\r\n        announced = false;\r\n        confirmed = false;\r\n        gameOver = false;\r\n        locked = false;\r\n    }\r\n\r\n    mapping(uint256 => address[]) mirrors ;\r\n\r\n    uint256[] public timestampList;\r\n\r\n\r\n    mapping(address => bool) public isPlayer;\r\n    mapping(address => bool) public hasConfirmed;\r\n    mapping(address => uint256[]) public betHistory;\r\n    mapping(address => uint256) public playerBets;\r\n    mapping(address => address) public referral;\r\n    mapping(address => uint256) public countReferral;\r\n\r\n\r\n    event Bet(uint256 bets, address indexed player);\r\n    event Confirm(address player);\r\n    event Payreward(address indexed player, uint256 reward);\r\n\r\n    function bet(uint256[] _timestamps, address _referral) payable public{\r\n        require(msg.value>=costPerTicket.mul(_timestamps.length));\r\n        require(!announced);\r\n\r\n        if(now < expireDate){\r\n            for(i=0; i<_timestamps.length;i++){\r\n                timestampList.push(_timestamps[i]);\r\n                mirrors[_timestamps[i]].push(msg.sender);\r\n\r\n                betHistory[msg.sender].push(_timestamps[i]);\r\n\r\n                averageTimestamp = averageTimestamp.mul(countBet) + _timestamps[i];\r\n                averageTimestamp = averageTimestamp.div(countBet+1);\r\n                countBet ++;\r\n                playerBets[msg.sender]++;\r\n            }\r\n\r\n            if(isPlayer[msg.sender]!=true){\r\n                countPlayer++;\r\n                isPlayer[msg.sender]=true;\r\n                referral[msg.sender]=_referral;\r\n                countReferral[_referral]+=1;\r\n            }\r\n\r\n            if(playerBets[msg.sender]>playerBets[leader] && msg.sender!=leader){\r\n                if(msg.sender!=leader_2){\r\n                    leader_3 = leader_2;\r\n                }\r\n                leader_2 = leader;\r\n                leader = msg.sender;\r\n            }else if(playerBets[msg.sender]>playerBets[leader_2] && msg.sender !=leader_2 && msg.sender != leader){\r\n                leader_3 = leader_2;\r\n                leader_2 = msg.sender;\r\n            }else if(playerBets[msg.sender]>playerBets[leader_3] && msg.sender !=leader_2 && msg.sender != leader && msg.sender != leader_3){\r\n                leader_3 = msg.sender;\r\n            }\r\n\r\n            rewardPool=rewardPool.add(msg.value);\r\n            owner.transfer(msg.value.mul(12).div(100)); // Developement Team get 12% on every transfer\r\n            emit Bet(_timestamps.length, msg.sender);\r\n        }else{\r\n            if(!locked){\r\n                locked=true;\r\n            }\r\n            owner.transfer(msg.value);\r\n        }\r\n        // Increase Ticket Price every week\r\n        if(startDate.add(countWeek.mul(604800)) < now ){\r\n            countWeek++;\r\n            if(costPerTicket < maxCost){\r\n                costPerTicket=costPerTicket.add(2500000000000000);\r\n            }\r\n        }\r\n    }\r\n\r\n    function payLeaderAndDev() public {\r\n        require(locked || announced);\r\n        require(!developmentPaid);\r\n        // Send 12% of the original fund back to owner\r\n        owner.transfer(init_fund.mul(12).div(100));\r\n\r\n        // Send 8% of all rewardPool to Leaderboard winners\r\n        leader.transfer(rewardPool.mul(4).div(100));\r\n        leader_2.transfer(rewardPool.mul(25).div(1000));\r\n        leader_3.transfer(rewardPool.mul(15).div(1000));\r\n        developmentPaid = true;\r\n    }\r\n\r\n\r\n    function getBetsOnTimestamp(uint256 _timestamp)public view returns (uint256){\r\n        return mirrors[_timestamp].length;\r\n    }\r\n\r\n    function announce(uint256 _timestamp, uint256 _winnerTimestamp_1, uint256 _winnerTimestamp_2) public {\r\n        require(msg.sender == owner);\r\n        announced = true;\r\n\r\n        announcedTimeStamp = _timestamp;\r\n        // Announce winners\r\n        winnerTimestamp = _winnerTimestamp_1;\r\n        secondWinnerTimestamp = _winnerTimestamp_2;\r\n\r\n        countWinners = mirrors[winnerTimestamp].length;\r\n        countSecondWinners = mirrors[secondWinnerTimestamp].length;\r\n\r\n        //5% of total rewardPool goes as confirmreward\r\n        confirmreward = rewardPool.mul(5).div(100).div(numOfConfirmationNeeded);\r\n    }\r\n\r\n    function confirm() public{\r\n        require(announced==true);\r\n        require(confirmed==false);\r\n        require(isPlayer[msg.sender]==true);\r\n        require(hasConfirmed[msg.sender]!=true);\r\n\r\n        countConfirmed += 1;\r\n        hasConfirmed[msg.sender] = true;\r\n\r\n        msg.sender.transfer(confirmreward);\r\n        emit Confirm(msg.sender);\r\n        emit Payreward(msg.sender, confirmreward);\r\n\r\n        if(countConfirmed>=numOfConfirmationNeeded){\r\n            confirmed=true;\r\n        }\r\n    }\r\n\r\n    function payWinners() public{\r\n        require(confirmed);\r\n        require(!gameOver);\r\n        // Send ETH(50%) to first prize winners\r\n        share = rewardPool.div(2);\r\n        share = share.div(countWinners);\r\n        for(i=0; i<countWinners; i++){\r\n            mirrors[winnerTimestamp][i].transfer(share.mul(9).div(10));\r\n            referral[mirrors[winnerTimestamp][i]].transfer(share.mul(1).div(10));\r\n            emit Payreward(mirrors[winnerTimestamp][i], share);\r\n        }\r\n\r\n        // Send ETH(25%) to second Winners\r\n        share = rewardPool.div(4);\r\n        share = share.div(countSecondWinners);\r\n        for(i=0; i<countSecondWinners; i++){\r\n            mirrors[secondWinnerTimestamp][i].transfer(share.mul(9).div(10));\r\n            referral[mirrors[secondWinnerTimestamp][i]].transfer(share.mul(1).div(10));\r\n            emit Payreward(mirrors[secondWinnerTimestamp][i], share);\r\n        }\r\n\r\n        // Bye Guys\r\n        gameOver = true;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    function () public payable {\r\n         owner.transfer(msg.value);\r\n     }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getBetsOnTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countSecondWinners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"costPerTicket\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payWinners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"confirmreward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamps\",\"type\":\"uint256[]\"},{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"bet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondWinnerTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"confirm\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referral\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"announcedTimeStamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_winnerTimestamp_1\",\"type\":\"uint256\"},{\"name\":\"_winnerTimestamp_2\",\"type\":\"uint256\"}],\"name\":\"announce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOfConfirmationNeeded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winnerTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leader_3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countWinners\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"confirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expireDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"announced\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timestampList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameOver\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"countReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"init_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payLeaderAndDev\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"averageTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leader_2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bets\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"}],\"name\":\"Confirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Payreward\",\"type\":\"event\"}]","ContractName":"BlackChain","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2a45c9c970648d6409434bfd8990cb7e18a8aec10a4174ed5207f2c8bb33e62c"}]}