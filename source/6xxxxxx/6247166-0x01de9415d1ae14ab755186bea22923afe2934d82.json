{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface ERC721 /* is ERC165 */ {\r\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\r\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\r\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n    ///  may be created and assigned without emitting Transfer. At the time of\r\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    /// @dev This emits when the approved address for an NFT is changed or\r\n    ///  reaffirmed. The zero address indicates there is no approved address.\r\n    ///  When a Transfer event emits, this also indicates that the approved\r\n    ///  address for that NFT (if any) is reset to none.\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    ///  The operator can manage all NFTs of the owner.\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /// @notice Count all NFTs assigned to an owner\r\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\r\n    ///  function throws for queries about the zero address.\r\n    /// @param _owner An address for whom to query the balance\r\n    /// @return The number of NFTs owned by `_owner`, possibly zero\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    /// @notice Find the owner of an NFT\r\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\r\n    ///  about them do throw.\r\n    /// @param _tokenId The identifier for an NFT\r\n    /// @return The address of the owner of the NFT\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n    ///  `onERC721Received` on `_to` and throws if the return value is not\r\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev This works identically to the other function with an extra data parameter,\r\n    ///  except this function just sets data to \"\".\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n    ///  THEY MAY BE PERMANENTLY LOST\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    /// @notice Change or reaffirm the approved address for an NFT\r\n    /// @dev The zero address indicates there is no approved address.\r\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n    ///  operator of the current owner.\r\n    /// @param _approved The new approved NFT controller\r\n    /// @param _tokenId The NFT to approve\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n\r\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\r\n    ///  all of `msg.sender`'s assets\r\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\r\n    ///  multiple operators per owner.\r\n    /// @param _operator Address to add to the set of authorized operators\r\n    /// @param _approved True if the operator is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /// @notice Get the approved address for a single NFT\r\n    /// @dev Throws if `_tokenId` is not a valid NFT.\r\n    /// @param _tokenId The NFT to find the approved address for\r\n    /// @return The approved address for this NFT, or the zero address if there is none\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the NFTs\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Operator\r\n * @dev Allow two roles: 'owner' or 'operator'\r\n *      - owner: admin/superuser (e.g. with financial rights)\r\n *      - operator: can update configurations\r\n */\r\ncontract Operator is Ownable {\r\n    address[] public operators;\r\n\r\n    uint public MAX_OPS = 20; // Default maximum number of operators allowed\r\n\r\n    mapping(address => bool) public isOperator;\r\n\r\n    event OperatorAdded(address operator);\r\n    event OperatorRemoved(address operator);\r\n\r\n    // @dev Throws if called by any non-operator account. Owner has all ops rights.\r\n    modifier onlyOperator() {\r\n        require(\r\n            isOperator[msg.sender] || msg.sender == owner,\r\n            \"Permission denied. Must be an operator or the owner.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner or operators to add operators\r\n     * @param _newOperator New operator address\r\n     */\r\n    function addOperator(address _newOperator) public onlyOwner {\r\n        require(\r\n            _newOperator != address(0),\r\n            \"Invalid new operator address.\"\r\n        );\r\n\r\n        // Make sure no dups\r\n        require(\r\n            !isOperator[_newOperator],\r\n            \"New operator exists.\"\r\n        );\r\n\r\n        // Only allow so many ops\r\n        require(\r\n            operators.length < MAX_OPS,\r\n            \"Overflow.\"\r\n        );\r\n\r\n        operators.push(_newOperator);\r\n        isOperator[_newOperator] = true;\r\n\r\n        emit OperatorAdded(_newOperator);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner or operators to remove operator\r\n     * @param _operator Address of the operator to be removed\r\n     */\r\n    function removeOperator(address _operator) public onlyOwner {\r\n        // Make sure operators array is not empty\r\n        require(\r\n            operators.length > 0,\r\n            \"No operator.\"\r\n        );\r\n\r\n        // Make sure the operator exists\r\n        require(\r\n            isOperator[_operator],\r\n            \"Not an operator.\"\r\n        );\r\n\r\n        // Manual array manipulation:\r\n        // - replace the _operator with last operator in array\r\n        // - remove the last item from array\r\n        address lastOperator = operators[operators.length - 1];\r\n        for (uint i = 0; i < operators.length; i++) {\r\n            if (operators[i] == _operator) {\r\n                operators[i] = lastOperator;\r\n            }\r\n        }\r\n        operators.length -= 1; // remove the last element\r\n\r\n        isOperator[_operator] = false;\r\n        emit OperatorRemoved(_operator);\r\n    }\r\n\r\n    // @dev Remove ALL operators\r\n    function removeAllOps() public onlyOwner {\r\n        for (uint i = 0; i < operators.length; i++) {\r\n            isOperator[operators[i]] = false;\r\n        }\r\n        operators.length = 0;\r\n    }\r\n}\r\n\r\ninterface BitizenCarService {\r\n  function isBurnedCar(uint256 _carId) external view returns (bool);\r\n  function getOwnerCars(address _owner) external view returns(uint256[]);\r\n  function getBurnedCarIdByIndex(uint256 _index) external view returns (uint256);\r\n  function getCarInfo(uint256 _carId) external view returns(string, uint8, uint8);\r\n  function createCar(address _owner, string _foundBy, uint8 _type, uint8 _ext) external returns(uint256);\r\n  function updateCar(uint256 _carId, string _newFoundBy, uint8 _newType, uint8 _ext) external;\r\n  function burnCar(address _owner, uint256 _carId) external;\r\n}\r\n\r\ncontract BitizenCarOperator is Operator {\r\n\r\n  event CreateCar(address indexed _owner, uint256 _carId);\r\n  \r\n  BitizenCarService internal carService;\r\n\r\n  ERC721 internal ERC721Service;\r\n\r\n  uint16 PER_USER_MAX_CAR_COUNT = 1;\r\n\r\n  function injectCarService(BitizenCarService _service) public onlyOwner {\r\n    carService = BitizenCarService(_service);\r\n    ERC721Service = ERC721(_service);\r\n  }\r\n\r\n  function setMaxCount(uint16 _count) public onlyOwner {\r\n    PER_USER_MAX_CAR_COUNT = _count;\r\n  }\r\n\r\n  function getOwnerCars() external view returns(uint256[]) {\r\n    return carService.getOwnerCars(msg.sender);\r\n  }\r\n\r\n  function getCarInfo(uint256 _carId) external view returns(string, uint8, uint8){\r\n    return carService.getCarInfo(_carId);\r\n  }\r\n  \r\n  function createCar(string _foundBy) external returns(uint256) {\r\n    require(ERC721Service.balanceOf(msg.sender) < PER_USER_MAX_CAR_COUNT,\"user owned car count overflow\");\r\n    uint256 carId = carService.createCar(msg.sender, _foundBy, 1, 1);\r\n    emit CreateCar(msg.sender, carId);\r\n    return carId;\r\n  }\r\n\r\n  function createCarByOperator(address _owner, string _foundBy, uint8 _type, uint8 _ext) external onlyOperator returns (uint256) {\r\n    uint256 carId = carService.createCar(_owner, _foundBy, _type, _ext);\r\n    emit CreateCar(msg.sender, carId);\r\n    return carId;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_service\",\"type\":\"address\"}],\"name\":\"injectCarService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_count\",\"type\":\"uint16\"}],\"name\":\"setMaxCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OPS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_foundBy\",\"type\":\"string\"},{\"name\":\"_type\",\"type\":\"uint8\"},{\"name\":\"_ext\",\"type\":\"uint8\"}],\"name\":\"createCarByOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerCars\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeAllOps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_carId\",\"type\":\"uint256\"}],\"name\":\"getCarInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_foundBy\",\"type\":\"string\"}],\"name\":\"createCar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_carId\",\"type\":\"uint256\"}],\"name\":\"CreateCar\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BitizenCarOperator","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5217c91357176c0e39339ae37d3fb72c4fc33e51730ea21924062cb3b2a79f9c"}]}