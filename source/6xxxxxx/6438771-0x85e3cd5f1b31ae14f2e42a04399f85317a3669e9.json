{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n\tfunction add(uint a, uint b) internal pure returns (uint c) {\r\n\t\tc = a + b; require(c >= a);\r\n\t}\r\n\tfunction sub(uint a, uint b) internal pure returns (uint c) {\r\n\t\trequire(b <= a); c = a - b;\r\n\t}\r\n\tfunction mul(uint a, uint b) internal pure returns (uint c) {\r\n\t\tc = a * b; require(a == 0 || c / a == b);\r\n\t}\r\n\tfunction div(uint a, uint b) internal pure returns (uint c) {\r\n\t\trequire(b > 0); c = a / b;\r\n\t}\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n\tfunction totalSupply() public constant returns (uint);\r\n\tfunction balanceOf(address tokenOwner) public constant returns (uint balance);\r\n\tfunction allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n\tfunction transfer(address to, uint tokens) public returns (bool success);\r\n\tfunction approve(address spender, uint tokens) public returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\tevent Transfer(address indexed from, address indexed to, uint tokens);\r\n\tevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n\taddress public owner;\r\n\taddress public parityOwner;\r\n\taddress public newOwner;\r\n\taddress public newParityOwner;\r\n\tevent OwnershipTransferred(address indexed _from, address indexed _to);\r\n\tevent ParityOwnershipTransferred(address indexed _from, address indexed _to);\r\n\tconstructor() public {\r\n\t\towner = 0xF355F9f411A5580a5f9e74203458906a90d39DE1;\r\n\t\tparityOwner = 0x0057015543016dadc0Df0f1df1Cc79d496602f03;\r\n\t}\r\n\tmodifier onlyOwner {\r\n\t\tbool isOwner = (msg.sender == owner);\r\n\t\trequire(isOwner);\r\n\t\t_;\r\n\t}\r\n\tmodifier onlyOwners {\r\n\t\tbool isOwner = (msg.sender == owner);\r\n\t\tbool isParityOwner = (msg.sender == parityOwner);\r\n\t\trequire(owner != parityOwner);\r\n\t\trequire(isOwner || isParityOwner);\r\n\t\t_;\r\n\t}\r\n\tfunction transferOwnership(address _newOwner) public onlyOwner {\r\n\t\trequire(_newOwner != parityOwner);\r\n\t\trequire(_newOwner != newParityOwner);\r\n\t\tnewOwner = _newOwner;\r\n\t}\r\n\tfunction acceptOwnership() public {\r\n\t\trequire(msg.sender == newOwner);\r\n\t\temit OwnershipTransferred(owner, newOwner);\r\n\t\towner = newOwner;\r\n\t\tnewOwner = address(0);\r\n\t}\r\n\tfunction transferParityOwnership(address _newParityOwner) public onlyOwner {\r\n\t\trequire(_newParityOwner != owner);\r\n\t\trequire(_newParityOwner != newOwner);\r\n\t\tnewParityOwner = _newParityOwner;\r\n\t}\r\n\tfunction acceptParityOwnership() public {\r\n\t\trequire(msg.sender == newParityOwner);\r\n\t\temit ParityOwnershipTransferred(parityOwner, newParityOwner);\r\n\t\tparityOwner = newParityOwner;\r\n\t\tnewParityOwner = address(0);\r\n\t}\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// NZO (Release Candidate)\r\n// ----------------------------------------------------------------------------\r\ncontract NZO is ERC20Interface, Owned {\r\n\tusing SafeMath for uint;\r\n\r\n\tstring public symbol;\r\n\tstring public  name;\r\n\tuint8  public decimals;\r\n\tuint   public _totalSupply;\r\n\tuint   public releasedSupply;\r\n\tuint   public crowdSaleBalance;\r\n\tuint   public crowdSaleAmountRaised;\r\n\tbool   public crowdSaleOngoing;\r\n\tuint   public crowdSalesCompleted;\r\n\tuint   public crowdSaleBonusADeadline;\r\n\tuint   public crowdSaleBonusBDeadline;\r\n\tuint   public crowdSaleBonusAPercentage;\r\n\tuint   public crowdSaleBonusBPercentage;\r\n\tuint   public crowdSaleWeiMinimum;\r\n\tuint   public crowdSaleWeiMaximum;\r\n\tbool   public supplyLocked;\r\n\tbool   public supplyLockedA;\r\n\tbool   public supplyLockedB;\r\n\tuint   public weiCostOfToken;\r\n\r\n\tmapping(address => uint) balances;\r\n\tmapping(address => mapping(address => uint)) allowed;\r\n\tmapping(address => mapping(address => uint)) owed;\r\n\tmapping(address => uint) crowdSaleAllowed;\r\n\r\n\tevent SupplyLocked(bool isLocked);\r\n\tevent AddOwed(address indexed from, address indexed to, uint tokens);\r\n\tevent CrowdSaleLocked(bool status, uint indexed completed, uint amountRaised);\r\n\tevent CrowdSaleOpened(bool status);\r\n\tevent CrowdSaleApproval(address approver, address indexed buyer, uint tokens);\r\n\tevent CrowdSalePurchaseCompleted(address indexed buyer, uint ethAmount, uint tokens);\r\n\tevent ChangedWeiCostOfToken(uint newCost, uint weiMinimum, uint weiMaximum);\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Constructor\r\n\t// 900,000,000 total.\r\n\t// 540,000,000 for crowd sale.\r\n\t// 360,000,000 for normal.\r\n\t// Starting cost: 0.10 USD for 1 token.\r\n\t// ------------------------------------------------------------------------\r\n\tconstructor() public {\r\n\t\tsymbol                    = \"NZO\";\r\n\t\tname                      = \"Non-Zero\";\r\n\t\tdecimals                  = 18;\r\n\t\t_totalSupply              = 900000000 * 10**uint(decimals);\r\n\t\treleasedSupply            = 0;\r\n\t\tcrowdSaleBalance          = 0;\r\n\t\tcrowdSaleAmountRaised     = 0;\r\n\t\tcrowdSaleOngoing          = false;\r\n\t\tcrowdSalesCompleted       = 0;\r\n\t\tcrowdSaleBonusADeadline   = 0;\r\n\t\tcrowdSaleBonusBDeadline   = 0;\r\n\t\tcrowdSaleBonusAPercentage = 100;\r\n\t\tcrowdSaleBonusBPercentage = 100;\r\n\t\tcrowdSaleWeiMinimum       = 0;\r\n\t\tcrowdSaleWeiMaximum       = 0;\r\n\t\tsupplyLocked              = false;\r\n\t\tsupplyLockedA             = false;\r\n\t\tsupplyLockedB             = false;\r\n\t\tweiCostOfToken            = 168000000000000 * 1 wei;\r\n\t\tbalances[owner]           = _totalSupply;\r\n\t\temit Transfer(address(0), owner, _totalSupply);\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Getters\r\n\t// ------------------------------------------------------------------------\r\n\tfunction totalSupply() public constant returns (uint) {\r\n\t\treturn _totalSupply  - balances[address(0)];\r\n\t}\r\n\tfunction balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n\t\treturn balances[tokenOwner];\r\n\t}\r\n\tfunction allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n\t\treturn allowed[tokenOwner][spender];\r\n\t}\r\n\tfunction getOwed(address from, address to) public constant returns (uint tokens) {\r\n\t\treturn owed[from][to];\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Lock token supply. CAUTION: IRREVERSIBLE\r\n\t// ------------------------------------------------------------------------\r\n\tfunction lockSupply() public onlyOwners returns (bool isSupplyLocked) {\r\n\t\trequire(!supplyLocked);\r\n\t\tif (msg.sender == owner) {\r\n\t\t\tsupplyLockedA = true;\r\n\t\t} else if (msg.sender == parityOwner) {\r\n\t\t\tsupplyLockedB = true;\r\n\t\t}\r\n\t\tsupplyLocked = (supplyLockedA && supplyLockedB);\r\n\t\temit SupplyLocked(true);\r\n\t\treturn supplyLocked;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Increase total supply (\"issue\" new tokens)\r\n\t// ------------------------------------------------------------------------\r\n\tfunction increaseTotalSupply(uint tokens) public onlyOwner returns (bool success) {\r\n\t\trequire(!supplyLocked);\r\n\t\t_totalSupply = _totalSupply.add(tokens);\r\n\t\tbalances[owner] = balances[owner].add(tokens);\r\n\t\temit Transfer(address(0), owner, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// End crowd sale. Increments crowdSalesCompleted counter.\r\n\t// Returns remaining crowdSaleBalance to owner.\r\n\t// ------------------------------------------------------------------------\r\n\tfunction lockCrowdSale() public onlyOwner returns (bool success) {\r\n\t\trequire(crowdSaleOngoing);\r\n\t\tcrowdSaleOngoing = false;\r\n\t\tcrowdSalesCompleted = crowdSalesCompleted.add(1);\r\n\t\tbalances[owner] = balances[owner].add(crowdSaleBalance);\r\n\t\tcrowdSaleBalance = 0;\r\n\t\tcrowdSaleBonusADeadline = 0;\r\n\t\tcrowdSaleBonusBDeadline = 0;\r\n\t\tcrowdSaleBonusAPercentage = 100;\r\n\t\tcrowdSaleBonusBPercentage = 100;\r\n\t\temit CrowdSaleLocked(!crowdSaleOngoing, crowdSalesCompleted, crowdSaleAmountRaised);\r\n\t\treturn !crowdSaleOngoing;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Open a new crowd sale.\r\n\t// bonusBDeadline must always be more in the future than bonusADeadline.\r\n\t// ------------------------------------------------------------------------\r\n\tfunction openCrowdSale(\r\n\t\tuint supply, uint bonusADeadline, uint bonusBDeadline, uint bonusAPercentage, uint bonusBPercentage\r\n\t) public onlyOwner returns (bool success) {\r\n\t\trequire(!crowdSaleOngoing);\r\n\t\trequire(supply <= balances[owner]);\r\n\t\trequire(bonusADeadline > now);\r\n\t\trequire(bonusBDeadline > now);\r\n\t\trequire(bonusAPercentage >= 100);\r\n\t\trequire(bonusBPercentage >= 100);\r\n\t\tbalances[owner] = balances[owner].sub(supply);\r\n\t\tcrowdSaleBalance = supply;\r\n\t\tcrowdSaleBonusADeadline = bonusADeadline;\r\n\t\tcrowdSaleBonusBDeadline = bonusBDeadline;\r\n\t\tcrowdSaleBonusAPercentage = bonusAPercentage;\r\n\t\tcrowdSaleBonusBPercentage = bonusBPercentage;\r\n\t\tcrowdSaleOngoing = true;\r\n\t\temit CrowdSaleOpened(crowdSaleOngoing);\r\n\t\treturn crowdSaleOngoing;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Add amount owed (usually from broker to user)\r\n\t// Amount can only be increased, and can only be decreased by paying.\r\n\t// ------------------------------------------------------------------------\r\n\tfunction addOwed(address to, uint tokens) public returns (uint newOwed) {\r\n\t\trequire((msg.sender == owner) || (crowdSalesCompleted > 0));\r\n\t\towed[msg.sender][to] = owed[msg.sender][to].add(tokens);\r\n\t\temit AddOwed(msg.sender, to, tokens);\r\n\t\treturn owed[msg.sender][to];\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n\t// from the token owner's account\r\n\t//\r\n\t// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\t// recommends that there are no checks for the approval double-spend attack\r\n\t// as this should be implemented in user interfaces \r\n\t// ------------------------------------------------------------------------\r\n\tfunction approve(address spender, uint tokens) public returns (bool success) {\r\n\t\trequire((msg.sender == owner) || (crowdSalesCompleted > 0));\r\n\t\tallowed[msg.sender][spender] = tokens;\r\n\t\temit Approval(msg.sender, spender, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Allow an address to participate in the crowd sale up to some limit\r\n\t// ------------------------------------------------------------------------\r\n\tfunction crowdSaleApprove(address[] buyers, uint[] tokens) public onlyOwner returns (bool success) {\r\n\t\trequire(buyers.length == tokens.length);\r\n\t\tuint buyersLength = buyers.length;\r\n\t\tfor (uint i = 0; i < buyersLength; i++) {\r\n\t\t\trequire(tokens[i] <= crowdSaleBalance);\r\n\t\t\tcrowdSaleAllowed[buyers[i]] = tokens[i];\r\n\t\t\temit CrowdSaleApproval(msg.sender, buyers[i], tokens[i]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Transfer the balance from token owner's account to `to` account\r\n\t// - Owner's account must have sufficient balance to transfer\r\n\t// - 0 value transfers are allowed\r\n\t// ------------------------------------------------------------------------\r\n\tfunction transfer(address to, uint tokens) public returns (bool success) {\r\n\t\trequire((msg.sender == owner) || (crowdSalesCompleted > 0));\r\n\t\trequire(msg.sender != to);\r\n\t\trequire(to != owner);\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(tokens);\r\n\t\tbalances[to] = balances[to].add(tokens);\r\n\t\tif (owed[msg.sender][to] >= tokens) {\r\n\t\t\towed[msg.sender][to].sub(tokens);\r\n\t\t} else if (owed[msg.sender][to] < tokens) {\r\n\t\t\towed[msg.sender][to] = uint(0);\r\n\t\t}\r\n\t\tif (msg.sender == owner) {\r\n\t\t\treleasedSupply.add(tokens);\r\n\t\t}\r\n\t\temit Transfer(msg.sender, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Utility function for the above transfer function, to pass arrays.\r\n\t// ------------------------------------------------------------------------\r\n\tfunction batchTransfer(address[] tos, uint[] tokens) public returns (bool success) {\r\n\t\trequire(tos.length == tokens.length);\r\n\t\tuint tosLength = tos.length;\r\n\t\tfor (uint i = 0; i < tosLength; i++) {\r\n\t\t\ttransfer(tos[i], tokens[i]);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Transfer `tokens` from the `from` account to the `to` account\r\n\t// \r\n\t// The calling account must already have sufficient tokens approve(...)-d\r\n\t// for spending from the `from` account and\r\n\t// - From account must have sufficient balance to transfer\r\n\t// - Spender must have sufficient allowance to transfer\r\n\t// - 0 value transfers are allowed\r\n\t// ------------------------------------------------------------------------\r\n\tfunction transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n\t\trequire((from == owner) || (crowdSalesCompleted > 0));\r\n\t\trequire(from != to);\r\n\t\trequire(to != owner);\r\n\t\tbalances[from] = balances[from].sub(tokens);\r\n\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n\t\tbalances[to] = balances[to].add(tokens);\r\n\t\tif (owed[from][to] >= tokens) {\r\n\t\t\towed[from][to].sub(tokens);\r\n\t\t} else if (owed[from][to] < tokens) {\r\n\t\t\towed[from][to] = uint(0);\r\n\t\t}\r\n\t\tif (from == owner) {\r\n\t\t\treleasedSupply.add(tokens);\r\n\t\t}\r\n\t\temit Transfer(from, to, tokens);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Change ETH cost of token (goal is to keep it pegged to 0.10 USD)\r\n\t// Cost must be specified in Wei\r\n\t// ------------------------------------------------------------------------\r\n\tfunction changeWeiCostOfToken(uint newCost, uint weiMinimum, uint weiMaximum) public onlyOwners returns (bool success) {\r\n\t\trequire(crowdSaleOngoing);\r\n\t\trequire(newCost > 0);\r\n\t\trequire(weiMinimum >= 0);\r\n\t\trequire(weiMaximum >= 0);\r\n\t\tweiCostOfToken = newCost * 1 wei;\r\n\t\tcrowdSaleWeiMinimum = weiMinimum;\r\n\t\tcrowdSaleWeiMaximum = weiMaximum;\r\n\t\temit ChangedWeiCostOfToken(weiCostOfToken, crowdSaleWeiMinimum, crowdSaleWeiMaximum);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// ------------------------------------------------------------------------\r\n\t// Only accept ETH during crowd sale period\r\n\t// Crowdsale purchaser must be KYCed and added to allowed map\r\n\t// ------------------------------------------------------------------------\r\n\tfunction () public payable {\r\n\t\trequire(msg.value > 0);\r\n\t\trequire(crowdSaleOngoing);\r\n\t\trequire(msg.value >= crowdSaleWeiMinimum);\r\n\t\trequire((msg.value <= crowdSaleWeiMaximum) || (crowdSaleWeiMaximum <= 0));\r\n\r\n\t\tuint tokens = (msg.value * (10**uint(decimals))) / weiCostOfToken;\r\n\t\tuint remainder = msg.value % weiCostOfToken;\r\n\r\n\t\tif (now < crowdSaleBonusADeadline) {\r\n\t\t\ttokens = (crowdSaleBonusAPercentage * tokens) / 100;\r\n\t\t} else if (now < crowdSaleBonusBDeadline) {\r\n\t\t\ttokens = (crowdSaleBonusBPercentage * tokens) / 100;\r\n\t\t}\r\n\r\n\t\tcrowdSaleAllowed[msg.sender] = crowdSaleAllowed[msg.sender].sub(tokens);\r\n\t\tcrowdSaleBalance = crowdSaleBalance.sub(tokens);\r\n\t\tbalances[msg.sender] = balances[msg.sender].add(tokens);\r\n\t\tcrowdSaleAmountRaised = crowdSaleAmountRaised.add(msg.value);\r\n\t\towner.transfer(msg.value - remainder);\r\n\t\temit Transfer(owner, msg.sender, tokens);\r\n\t\temit CrowdSalePurchaseCompleted(msg.sender, msg.value, tokens);\r\n\t\t\r\n\t\tif (crowdSaleBalance == 0) {\r\n\t\t\tcrowdSaleOngoing = false;\r\n\t\t\tcrowdSalesCompleted = crowdSalesCompleted.add(1);\r\n\t\t\temit CrowdSaleLocked(!crowdSaleOngoing, crowdSalesCompleted, crowdSaleAmountRaised);\r\n\t\t}\r\n\t\tif (remainder > 0) {\r\n\t\t\tmsg.sender.transfer(remainder);\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleWeiMaximum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"addOwed\",\"outputs\":[{\"name\":\"newOwed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCost\",\"type\":\"uint256\"},{\"name\":\"weiMinimum\",\"type\":\"uint256\"},{\"name\":\"weiMaximum\",\"type\":\"uint256\"}],\"name\":\"changeWeiCostOfToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"increaseTotalSupply\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleOngoing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getOwed\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiCostOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"parityOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleBonusBPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockSupply\",\"outputs\":[{\"name\":\"isSupplyLocked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newParityOwner\",\"type\":\"address\"}],\"name\":\"transferParityOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleBonusADeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tos\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"supply\",\"type\":\"uint256\"},{\"name\":\"bonusADeadline\",\"type\":\"uint256\"},{\"name\":\"bonusBDeadline\",\"type\":\"uint256\"},{\"name\":\"bonusAPercentage\",\"type\":\"uint256\"},{\"name\":\"bonusBPercentage\",\"type\":\"uint256\"}],\"name\":\"openCrowdSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyLockedB\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newParityOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleWeiMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyLockedA\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasedSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockCrowdSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSalesCompleted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptParityOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleBonusBDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleBonusAPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleAmountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyers\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"crowdSaleApprove\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isLocked\",\"type\":\"bool\"}],\"name\":\"SupplyLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"AddOwed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"completed\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountRaised\",\"type\":\"uint256\"}],\"name\":\"CrowdSaleLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"CrowdSaleOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"CrowdSaleApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"CrowdSalePurchaseCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newCost\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiMinimum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiMaximum\",\"type\":\"uint256\"}],\"name\":\"ChangedWeiCostOfToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"ParityOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"NZO","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e76a3905d1fe8e77ba568467c4b072662b6c9148294cf8492eb1968564901686"}]}