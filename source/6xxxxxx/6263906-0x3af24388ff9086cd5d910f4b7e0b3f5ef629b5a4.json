{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title -LuckyStar v0.0.1\r\n *\r\n * WARNING:  THIS PRODUCT IS HIGHLY ADDICTIVE.  IF YOU HAVE AN ADDICTIVE NATURE.  DO NOT PLAY.\r\n */\r\n\r\ncontract PlayerBook {\r\n    using NameFilter for string;\r\n    using SafeMath for *;\r\n    address private admin = msg.sender;\r\n    //address community=address(0x465b31ae487c4e6cede5f98a72472f1a6a81c826);\r\n    uint256 public registrationFee_ = 10 finney;\r\n    uint256 pIdx_=1;\r\n    uint256 public pID_;        // total number of players\r\n    mapping (address => uint256) public pIDxAddr_;          // (addr => pID) returns player id by address\r\n    mapping (bytes32 => uint256) public pIDxName_;          // (name => pID) returns player id by name\r\n    mapping (uint256 => LSDatasets.Player) public plyr_;   // (pID => data) player data\r\n    mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; // (pID => name => bool) list of names a player owns.  (used so you can change your display name amongst any name you own)\r\n    //mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_; // (pID => nameNum => name) list of names a player owns\r\n    modifier onlyOwner() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n    function getPlayerID(address _addr)\r\n    public\r\n        returns (uint256)\r\n    {\r\n        determinePID(_addr);\r\n        return (pIDxAddr_[_addr]);\r\n    }\r\n    function getPlayerName(uint256 _pID)\r\n    public\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return (plyr_[_pID].name);\r\n    }\r\n    function getPlayerLAff(uint256 _pID)\r\n    public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (plyr_[_pID].laff);\r\n    }\r\n    function getPlayerAddr(uint256 _pID)\r\n    public\r\n        view\r\n        returns (address)\r\n    {\r\n        return (plyr_[_pID].addr);\r\n    }\r\n    function getNameFee()\r\n    public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return(registrationFee_);\r\n    }\r\n    function determinePID(address _addr)\r\n        private\r\n        returns (bool)\r\n    {\r\n        if (pIDxAddr_[_addr] == 0)\r\n        {\r\n            pID_++;\r\n            pIDxAddr_[_addr] = pID_;\r\n            plyr_[pID_].addr = _addr;\r\n\r\n            // set the new player bool to true\r\n            return (true);\r\n        } else {\r\n            return (false);\r\n        }\r\n    }\r\n    function register(address _addr,uint256 _affID,bool _isSuper)  onlyOwner() public{\r\n        bool _isNewPlayer = determinePID(_addr);\r\n        bytes32 _name=\"LuckyStar\";\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        plyr_[_pID].laff = _affID;\r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer);\r\n    }\r\n    function registerNameXname(string _nameString, bytes32 _affCode, bool _all)\r\n        isHuman()\r\n        public\r\n        payable\r\n    {\r\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\r\n        bytes32 _name = _nameString.nameFilter();\r\n        address _addr = msg.sender;\r\n\r\n\r\n        // set up our tx event data and determine if player is new or not\r\n        bool _isNewPlayer = determinePID(_addr);\r\n\r\n        // fetch player id\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        // manage affiliate residuals\r\n        // if no affiliate code was given or player tried to use their own, lolz\r\n        uint256 _affID;\r\n        if (_affCode != \"\" && _affCode != _name)\r\n        {\r\n            // get affiliate ID from aff Code\r\n            _affID = pIDxName_[_affCode];\r\n\r\n            // if affID is not the same as previously stored\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // update last affiliate\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // register name\r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer);\r\n    }\r\n\r\n    function registerNameCore(uint256 _pID, address _addr, uint256 _affID, bytes32 _name, bool _isNewPlayer)\r\n        private\r\n    {\r\n        // if names already has been used, require that current msg sender owns the name\r\n        if (pIDxName_[_name] != 0)\r\n            require(plyrNames_[_pID][_name] == true, \"sorry that names already taken\");\r\n\r\n        // add name to player profile, registry, and name book\r\n        plyr_[_pID].name = _name;\r\n        pIDxName_[_name] = _pID;\r\n        if (plyrNames_[_pID][_name] == false)\r\n        {\r\n            plyrNames_[_pID][_name] = true;\r\n        }\r\n\r\n        // registration fee goes directly to community rewards\r\n        //admin.transfer(address(this).balance);\r\n        uint256 _paid=msg.value;\r\n        //plyr_[pIdx_].aff=_paid.add(plyr_[pIdx_].aff);\r\n        admin.transfer(_paid);\r\n\r\n    }\r\n    function setSuper(address _addr,bool isSuper) \r\n     onlyOwner()\r\n     public{\r\n        uint256 _pID=pIDxAddr_[_addr];\r\n        if(_pID!=0){\r\n            plyr_[_pID].super=isSuper;\r\n        }else{\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function setRegistrationFee(uint256 _fee)\r\n      onlyOwner()\r\n        public{\r\n         registrationFee_ = _fee;\r\n    }\r\n}\r\n\r\ncontract LuckyStar is PlayerBook {\r\n    using SafeMath for *;\r\n    using NameFilter for string;\r\n    using LSKeysCalcShort for uint256;\r\n\r\n    \r\n\r\n//==============================================================================\r\n//     _ _  _  |`. _     _ _ |_ | _  _  .\r\n//    (_(_)| |~|~|(_||_|| (_||_)|(/__\\  .  (game settings)\r\n//=================_|===========================================================\r\n    address private admin = msg.sender;\r\n\r\n    string constant public name = \"LuckyStar\";\r\n    string constant public symbol = \"LuckyStar\";\r\n    uint256 constant gen_=55;\r\n    uint256 constant bigPrize_ =30;\r\n    uint256 public minBuyForPrize_=100 finney;\r\n    uint256 constant private rndInit_ = 3 hours;            // round timer starts at this  1H17m17s\r\n    uint256 constant private rndInc_ = 1 minutes;              // every full key purchased adds this much to the timer\r\n    uint256 constant private rndMax_ = 6 hours;             // max length a round timer can be  ï¼›3Hours\r\n    uint256 constant private prizeTimeInc_= 1 days;\r\n    uint256 constant private stopTime_=1 hours;\r\n//==============================================================================\r\n//     _| _ _|_ _    _ _ _|_    _   .\r\n//    (_|(_| | (_|  _\\(/_ | |_||_)  .  (data used to store game info that changes)\r\n//=============================|================================================\r\n    uint256 public airDropPot_;             // person who gets the airdrop wins part of this pot\r\n    uint256 public airDropTracker_ = 0;     // incremented each time a \"qualified\" tx occurs.  used to determine winning air drop\r\n    uint256 public rID_;    // round id number / total rounds that have happened\r\n//****************\r\n// PLAYER DATA\r\n//****************\r\n    mapping (uint256 => uint256) public plyrOrders_; // plyCounter => pID\r\n    mapping (uint256 => uint256) public plyrForPrizeOrders_; // playCounter => pID\r\n    mapping (uint256 => mapping (uint256 => LSDatasets.PlayerRounds)) public plyrRnds_;    // (pID => rID => data) player round data by player id & round id\r\n\r\n//****************\r\n// ROUND DATA\r\n//****************\r\n    mapping (uint256 => LSDatasets.Round) public round_;   // (rID => data) round data\r\n    mapping (uint256 => mapping(uint256 => uint256)) public rndTmEth_;      // (rID => tID => data) eth in per team, by round id and team id\r\n//****************\r\n\r\n//==============================================================================\r\n//     _ _  _  __|_ _    __|_ _  _  .\r\n//    (_(_)| |_\\ | | |_|(_ | (_)|   .  (initial data setup upon contract deploy)\r\n//==============================================================================\r\n    constructor()\r\n        public\r\n    {\r\n\t\tpIDxAddr_[address(0xc7FcAD2Ad400299a7690d5aa6d7295F9dDB7Fc33)] = 1;\r\n        plyr_[1].addr = address(0xc7FcAD2Ad400299a7690d5aa6d7295F9dDB7Fc33);\r\n        plyr_[1].name = \"sumpunk\";\r\n        plyr_[1].super=true;\r\n        pIDxName_[\"sumpunk\"] = 1;\r\n        plyrNames_[1][\"sumpunk\"] = true;\r\n        \r\n        pIDxAddr_[address(0x2f52362c266c1Df356A2313F79E4bE4E7de281cc)] = 2;\r\n        plyr_[2].addr = address(0x2f52362c266c1Df356A2313F79E4bE4E7de281cc);\r\n        plyr_[2].name = \"xiaokan\";\r\n        plyr_[2].super=true;\r\n        pIDxName_[\"xiaokan\"] = 2;\r\n        plyrNames_[2][\"xiaokan\"] = true;\r\n        \r\n        pIDxAddr_[address(0xA97F850B019871B7a356956f8b43255988d1578a)] = 3;\r\n        plyr_[3].addr = address(0xA97F850B019871B7a356956f8b43255988d1578a);\r\n        plyr_[3].name = \"Mr Shen\";\r\n        plyr_[3].super=true;\r\n        pIDxName_[\"Mr Shen\"] = 3;\r\n        plyrNames_[3][\"Mr Shen\"] = true;\r\n        \r\n        pIDxAddr_[address(0x84408183fC70A65d378f720f4E95e4f9bD9EbeBE)] = 4;\r\n        plyr_[4].addr = address(0x84408183fC70A65d378f720f4E95e4f9bD9EbeBE);\r\n        plyr_[4].name = \"4\";\r\n        plyr_[4].super=false;\r\n        pIDxName_[\"4\"] = 4;\r\n        plyrNames_[4][\"4\"] = true;\r\n        \r\n        pIDxAddr_[address(0xa21E15d5933502DAD475daB3ed235fffFa537f85)] = 5;\r\n        plyr_[5].addr = address(0xa21E15d5933502DAD475daB3ed235fffFa537f85);\r\n        plyr_[5].name = \"5\";\r\n        plyr_[5].super=true;\r\n        pIDxName_[\"5\"] = 5;\r\n        plyrNames_[5][\"5\"] = true;\r\n        \r\n        pIDxAddr_[address(0xEb892446E9096a7e6e28B89EE416564E50504A68)] = 6;\r\n        plyr_[6].addr = address(0xEb892446E9096a7e6e28B89EE416564E50504A68);\r\n        plyr_[6].name = \"6\";\r\n        plyr_[6].super=true;\r\n        pIDxName_[\"6\"] = 6;\r\n        plyrNames_[6][\"6\"] = true;\r\n        \r\n        pIDxAddr_[address(0x75DF1440094346d4156cf4563a85dC5C564D2100)] = 7;\r\n        plyr_[7].addr = address(0x75DF1440094346d4156cf4563a85dC5C564D2100);\r\n        plyr_[7].name = \"7\";\r\n        plyr_[7].super=true;\r\n        pIDxName_[\"7\"] = 7;\r\n        plyrNames_[7][\"7\"] = true;\r\n        \r\n        pIDxAddr_[address(0xb00B860546F13268DC9Fa922B63342BC9C5a28a6)] = 8;\r\n        plyr_[8].addr = address(0xb00B860546F13268DC9Fa922B63342BC9C5a28a6);\r\n        plyr_[8].name = \"8\";\r\n        plyr_[8].super=false;\r\n        pIDxName_[\"8\"] = 8;\r\n        plyrNames_[8][\"8\"] = true;\r\n        \r\n        pIDxAddr_[address(0x9DC1bB8FDD15C9781d7D590B59E5DAFC0e37Cf3e)] = 9;\r\n        plyr_[9].addr = address(0x9DC1bB8FDD15C9781d7D590B59E5DAFC0e37Cf3e);\r\n        plyr_[9].name = \"9\";\r\n        plyr_[9].super=false;\r\n        pIDxName_[\"9\"] = 9;\r\n        plyrNames_[9][\"9\"] = true;\r\n        \r\n        pIDxAddr_[address(0x142Ba743cf9317eB54ba10c157870Af3cBb66bD3)] = 10;\r\n        plyr_[10].addr = address(0x142Ba743cf9317eB54ba10c157870Af3cBb66bD3);\r\n        plyr_[10].name = \"10\";\r\n        plyr_[10].super=false;\r\n        pIDxName_[\"10\"] =10;\r\n        plyrNames_[10][\"10\"] = true;\r\n        \r\n        pIDxAddr_[address(0x8B8F389Eb845eB0735D6eA084A3215d86Ed70344)] = 11;\r\n        plyr_[11].addr = address(0x8B8F389Eb845eB0735D6eA084A3215d86Ed70344);\r\n        plyr_[11].name = \"11\";\r\n        plyr_[11].super=false;\r\n        pIDxName_[\"11\"] =11;\r\n        plyrNames_[11][\"11\"] = true;\r\n        \r\n        pIDxAddr_[address(0x73974391d9B8Eae6F883503EffBc21E7dbAcf62c)] = 12;\r\n        plyr_[12].addr = address(0x73974391d9B8Eae6F883503EffBc21E7dbAcf62c);\r\n        plyr_[12].name = \"12\";\r\n        plyr_[12].super=false;\r\n        pIDxName_[\"12\"] =12;\r\n        plyrNames_[12][\"12\"] = true;\r\n        \r\n        pIDxAddr_[address(0xf1b9167F73847874AdD274FDFf4E1546CC184d03)] = 13;\r\n        plyr_[13].addr = address(0xf1b9167F73847874AdD274FDFf4E1546CC184d03);\r\n        plyr_[13].name = \"13\";\r\n        plyr_[13].super=false;\r\n        pIDxName_[\"13\"] =13;\r\n        plyrNames_[13][\"13\"] = true;\r\n        \r\n        pIDxAddr_[address(0x56948841d665A2903218018728979C0a8a47648A)] = 14;\r\n        plyr_[14].addr = address(0x56948841d665A2903218018728979C0a8a47648A);\r\n        plyr_[14].name = \"14\";\r\n        plyr_[14].super=false;\r\n        pIDxName_[\"14\"] =14;\r\n        plyrNames_[14][\"14\"] = true;\r\n        \r\n        pIDxAddr_[address(0x94bC531328e2b39C53B7D2EBb8461E794d7999A1)] = 15;\r\n        plyr_[15].addr = address(0x94bC531328e2b39C53B7D2EBb8461E794d7999A1);\r\n        plyr_[15].name = \"15\";\r\n        plyr_[15].super=true;\r\n        pIDxName_[\"15\"] =15;\r\n        plyrNames_[15][\"15\"] = true;\r\n        \r\n        pID_ = 15;\r\n}\r\n\r\n//==============================================================================\r\n//     _ _  _  _|. |`. _  _ _  .\r\n//    | | |(_)(_||~|~|(/_| _\\  .  (these are safety checks)\r\n//==============================================================================\r\n    /**\r\n     * @dev used to make sure no one can interact with contract until it has\r\n     * been activated.\r\n     */\r\n    modifier isActivated() {\r\n        require(activated_ == true, \"its not ready yet.  check ?eta in discord\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev prevents contracts from interacting with fomo3d\r\n     */\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev sets boundaries for incoming tx\r\n     */\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 1000000000, \"pocket lint: not a valid currency\");\r\n        require(_eth <= 100000000000000000000000, \"no vitalik, no\");\r\n        _;\r\n    }\r\n\r\n//==============================================================================\r\n//     _    |_ |. _   |`    _  __|_. _  _  _  .\r\n//    |_)|_||_)||(_  ~|~|_|| |(_ | |(_)| |_\\  .  (use these to interact with contract)\r\n//====|=========================================================================\r\n    /**\r\n     * @dev emergency buy uses last stored affiliate ID and team snek\r\n     */\r\n    function()\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n        public\r\n        payable\r\n    {\r\n        // set up our tx event data and determine if player is new or not\r\n        LSDatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\r\n\r\n        // fetch player id\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // buy core\r\n        buyCore(_pID, plyr_[_pID].laff, 0, _eventData_);\r\n    }\r\n\r\n    /**\r\n     * @dev converts all incoming ethereum to keys.\r\n     * -functionhash- 0x8f38f309 (using ID for affiliate)\r\n     * -functionhash- 0x98a0871d (using address for affiliate)\r\n     * -functionhash- 0xa65b37a1 (using name for affiliate)\r\n     * @param _affCode the ID/address/name of the player who gets the affiliate fee\r\n     * @param _team what team is the player playing for?\r\n     */\r\n    function buyXid(uint256 _affCode, uint256 _team)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n        public\r\n        payable\r\n    {\r\n        // set up our tx event data and determine if player is new or not\r\n        LSDatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\r\n\r\n        // fetch player id\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // manage affiliate residuals\r\n        // if no affiliate code was given or player tried to use their own, lolz\r\n        if (_affCode == 0 || _affCode == _pID)\r\n        {\r\n            // use last stored affiliate code\r\n            _affCode = plyr_[_pID].laff;\r\n\r\n        // if affiliate code was given & its not the same as previously stored\r\n        } else if (_affCode != plyr_[_pID].laff) {\r\n            // update last affiliate\r\n            plyr_[_pID].laff = _affCode;\r\n        }\r\n\r\n        // verify a valid team was selected\r\n        //_team = verifyTeam(_team);\r\n\r\n        // buy core\r\n        buyCore(_pID, _affCode, _team, _eventData_);\r\n    }\r\n\r\n    function buyXaddr(address _affCode, uint256 _team)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n        public\r\n        payable\r\n    {\r\n        // set up our tx event data and determine if player is new or not\r\n        LSDatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\r\n\r\n        // fetch player id\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // manage affiliate residuals\r\n        uint256 _affID;\r\n        // if no affiliate code was given or player tried to use their own, lolz\r\n        if (_affCode == address(0) || _affCode == msg.sender)\r\n        {\r\n            // use last stored affiliate code\r\n            _affID = plyr_[_pID].laff;\r\n\r\n        // if affiliate code was given\r\n        } else {\r\n            // get affiliate ID from aff Code\r\n            _affID = pIDxAddr_[_affCode];\r\n\r\n            // if affID is not the same as previously stored\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // update last affiliate\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n        // buy core\r\n        buyCore(_pID, _affID, _team, _eventData_);\r\n    }\r\n\r\n    /**\r\n     * @dev essentially the same as buy, but instead of you sending ether\r\n     * from your wallet, it uses your unwithdrawn earnings.\r\n     * -functionhash- 0x349cdcac (using ID for affiliate)\r\n     * -functionhash- 0x82bfc739 (using address for affiliate)\r\n     * -functionhash- 0x079ce327 (using name for affiliate)\r\n     * @param _affCode the ID/address/name of the player who gets the affiliate fee\r\n     * @param _team what team is the player playing for?\r\n     * @param _eth amount of earnings to use (remainder returned to gen vault)\r\n     */\r\n    function reLoadXid(uint256 _affCode, uint256 _team, uint256 _eth)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(_eth)\r\n        public\r\n    {\r\n        // set up our tx event data\r\n        LSDatasets.EventReturns memory _eventData_;\r\n\r\n        // fetch player ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // manage affiliate residuals\r\n        // if no affiliate code was given or player tried to use their own, lolz\r\n        if (_affCode == 0 || _affCode == _pID)\r\n        {\r\n            // use last stored affiliate code\r\n            _affCode = plyr_[_pID].laff;\r\n\r\n        // if affiliate code was given & its not the same as previously stored\r\n        } else if (_affCode != plyr_[_pID].laff) {\r\n            // update last affiliate\r\n            plyr_[_pID].laff = _affCode;\r\n        }\r\n\r\n        // verify a valid team was selected\r\n        //_team = verifyTeam(_team);\r\n\r\n        // reload core\r\n        reLoadCore(_pID, _affCode, _team, _eth, _eventData_);\r\n    }\r\n\r\n    function reLoadXaddr(address _affCode, uint256 _team, uint256 _eth)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(_eth)\r\n        public\r\n    {\r\n        // set up our tx event data\r\n        LSDatasets.EventReturns memory _eventData_;\r\n\r\n        // fetch player ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // manage affiliate residuals\r\n        uint256 _affID;\r\n        // if no affiliate code was given or player tried to use their own, lolz\r\n        if (_affCode == address(0) || _affCode == msg.sender)\r\n        {\r\n            // use last stored affiliate code\r\n            _affID = plyr_[_pID].laff;\r\n\r\n        // if affiliate code was given\r\n        } else {\r\n            // get affiliate ID from aff Code\r\n            _affID = pIDxAddr_[_affCode];\r\n\r\n            // if affID is not the same as previously stored\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // update last affiliate\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // reload core\r\n        reLoadCore(_pID, _affID, _team, _eth, _eventData_);\r\n    }\r\n\r\n    /**\r\n     * @dev withdraws all of your earnings.\r\n     * -functionhash- 0x3ccfd60b\r\n     */\r\n    function withdraw()\r\n        isActivated()\r\n        isHuman()\r\n        public\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n\r\n        // grab time\r\n        uint256 _now = now;\r\n\r\n        // fetch player ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // setup temp var for player eth\r\n        uint256 _eth;\r\n\r\n        // check to see if round has ended and no one has run round end yet\r\n        if (_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0)\r\n        {\r\n            // set up our tx event data\r\n            LSDatasets.EventReturns memory _eventData_;\r\n\r\n            // end the round (distributes pot)\r\n\t\t\tround_[_rID].ended = true;\r\n            _eventData_ = endRound(_eventData_);\r\n\r\n\t\t\t// get their earnings\r\n            _eth = withdrawEarnings(_pID,true);\r\n\r\n            // gib moni\r\n            if (_eth > 0)\r\n                plyr_[_pID].addr.transfer(_eth);\r\n\r\n            // build event data\r\n            _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\r\n            _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\r\n\r\n           \r\n        // in any other situation\r\n        } else {\r\n            // get their earnings\r\n            _eth = withdrawEarnings(_pID,true);\r\n\r\n            // gib moni\r\n            if (_eth > 0)\r\n                plyr_[_pID].addr.transfer(_eth);\r\n\r\n        }\r\n    }\r\n\r\n\r\n//==============================================================================\r\n//     _  _ _|__|_ _  _ _  .\r\n//    (_|(/_ |  | (/_| _\\  . (for UI & viewing things on etherscan)\r\n//=====_|=======================================================================\r\n    /**\r\n     * @dev return the price buyer will pay for next 1 individual key.\r\n     * -functionhash- 0x018a25e8\r\n     * @return price for next key bought (in wei format)\r\n     */\r\n    function getBuyPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n\r\n        // grab time\r\n        uint256 _now = now;\r\n\r\n        // are we in a round?\r\n        if (_now > round_[_rID].strt && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n            return ( (round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000) );\r\n        else // rounds over.  need price for new round\r\n            return ( 75000000000000 ); // init\r\n    }\r\n\r\n    /**\r\n     * @dev returns time left.  dont spam this, you'll ddos yourself from your node\r\n     * provider\r\n     * -functionhash- 0xc7e284b8\r\n     * @return time left in seconds\r\n     */\r\n    function getTimeLeft()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n\r\n        // grab time\r\n        uint256 _now = now;\r\n\r\n        if (_now < round_[_rID].end)\r\n            if (_now > round_[_rID].strt )\r\n                return( (round_[_rID].end).sub(_now) );\r\n            else\r\n                return( (round_[_rID].strt ).sub(_now) );\r\n        else\r\n            return(0);\r\n    }\r\n    \r\n    function getDailyTimeLeft()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n\r\n        // grab time\r\n        uint256 _now = now;\r\n\r\n        if (_now < round_[_rID].prizeTime)\r\n            return( (round_[_rID].prizeTime).sub(_now) );\r\n        else\r\n            return(0);\r\n    }\r\n\r\n    /**\r\n     * @dev returns player earnings per vaults\r\n     * -functionhash- 0x63066434\r\n     * @return winnings vault\r\n     * @return general vault\r\n     * @return affiliate vault\r\n     */\r\n    function getPlayerVaults(uint256 _pID)\r\n        public\r\n        view\r\n        returns(uint256 ,uint256, uint256)\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n\r\n        // if round has ended.  but round end has not been run (so contract has not distributed winnings)\r\n        if (now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0)\r\n        {\r\n            // if player is winner\r\n            if (round_[_rID].plyr == _pID)\r\n            {\r\n                return\r\n                (\r\n                    (plyr_[_pID].win).add( ((round_[_rID].pot).mul(30)) / 100 ),\r\n                    (plyr_[_pID].gen).add(  getPlayerVaultsHelper(_pID, _rID).sub(plyrRnds_[_pID][_rID].mask)   ),\r\n                    plyr_[_pID].aff\r\n                );\r\n            // if player is not the winner\r\n            } else {\r\n                return\r\n                (\r\n                    plyr_[_pID].win,\r\n                    (plyr_[_pID].gen).add(  getPlayerVaultsHelper(_pID, _rID).sub(plyrRnds_[_pID][_rID].mask)  ),\r\n                    plyr_[_pID].aff\r\n                );\r\n            }\r\n\r\n        // if round is still going on, or round has ended and round end has been ran\r\n        } else {\r\n            return\r\n            (\r\n                plyr_[_pID].win,\r\n                (plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID, plyr_[_pID].lrnd)),\r\n                plyr_[_pID].aff\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * solidity hates stack limits.  this lets us avoid that hate\r\n     */\r\n    function getPlayerVaultsHelper(uint256 _pID, uint256 _rID)\r\n        private\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return(  ((((round_[_rID].mask).add(((((round_[_rID].pot).mul(gen_)) / 100).mul(1e18)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1e18)  );\r\n    }\r\n\r\n    /**\r\n     * @dev returns all current round info needed for front end\r\n     * -functionhash- 0x747dff42\r\n     * @return eth invested during ICO phase\r\n     * @return round id\r\n     * @return total keys for round\r\n     * @return time round ends\r\n     * @return time round started\r\n     * @return current pot\r\n     * @return current team ID & player ID in lead\r\n     * @return current player in leads address\r\n     * @return current player in leads name\r\n     * @return whales eth in for round\r\n     * @return bears eth in for round\r\n     * @return sneks eth in for round\r\n     * @return bulls eth in for round\r\n     * @return airdrop tracker # & airdrop pot\r\n     */\r\n    function getCurrentRoundInfo()\r\n        public\r\n        view\r\n        returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, address, bytes32, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n\r\n        return\r\n        (\r\n            //round_[_rID].ico,               //0\r\n            0,                              //0\r\n            _rID,                           //1\r\n            round_[_rID].keys,              //2\r\n            round_[_rID].end,               //3\r\n            round_[_rID].strt,              //4\r\n            round_[_rID].pot,               //5\r\n            (round_[_rID].team + (round_[_rID].plyr * 10)),     //6\r\n            plyr_[round_[_rID].plyr].addr,  //7\r\n            plyr_[round_[_rID].plyr].name,  //8\r\n            rndTmEth_[_rID][0],             //9\r\n            rndTmEth_[_rID][1],             //10\r\n            rndTmEth_[_rID][2],             //11\r\n            rndTmEth_[_rID][3],             //12\r\n            airDropTracker_ + (airDropPot_ * 1000)              //13\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev returns player info based on address.  if no address is given, it will\r\n     * use msg.sender\r\n     * -functionhash- 0xee0b5d8b\r\n     * @param _addr address of the player you want to lookup\r\n     * @return player ID\r\n     * @return player name\r\n     * @return keys owned (current round)\r\n     * @return winnings vault\r\n     * @return general vault\r\n     * @return affiliate vault\r\n\t * @return player round eth\r\n     */\r\n    function getPlayerInfoByAddress(address _addr)\r\n        public\r\n        view\r\n        returns(uint256, bytes32, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n\r\n        if (_addr == address(0))\r\n        {\r\n            _addr == msg.sender;\r\n        }\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        return\r\n        (\r\n            _pID,                               //0\r\n            plyr_[_pID].name,                   //1\r\n            plyrRnds_[_pID][_rID].keys,         //2\r\n            plyr_[_pID].win,                    //3\r\n            (plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID, plyr_[_pID].lrnd)),       //4\r\n            plyr_[_pID].aff,                    //5\r\n            plyrRnds_[_pID][_rID].eth           //6\r\n        );\r\n    }\r\n//==============================================================================\r\n//     _ _  _ _   | _  _ . _  .\r\n//    (_(_)| (/_  |(_)(_||(_  . (this + tools + calcs + modules = our softwares engine)\r\n//=====================_|=======================================================\r\n    /**\r\n     * @dev logic runs whenever a buy order is executed.  determines how to handle\r\n     * incoming eth depending on if we are in an active round or not\r\n     */\r\n    function buyCore(uint256 _pID, uint256 _affID, uint256 _team, LSDatasets.EventReturns memory _eventData_)\r\n        private\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n\r\n        // grab time\r\n        uint256 _now = now;\r\n\r\n        // if round is active\r\n        if (_now > round_[_rID].strt && _now<round_[_rID].prizeTime  && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n        {\r\n            // call core\r\n            if(_now>(round_[_rID].prizeTime-prizeTimeInc_)&& _now<(round_[_rID].prizeTime-prizeTimeInc_+stopTime_)){\r\n                plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value);\r\n            }else{\r\n                  core(_rID, _pID, msg.value, _affID, _team, _eventData_);\r\n            }\r\n        // if round is not active\r\n        } else {\r\n            // check to see if end round needs to be ran\r\n            if ((_now > round_[_rID].end||_now>round_[_rID].prizeTime) && round_[_rID].ended == false)\r\n            {\r\n                // end the round (distributes pot) & start new round\r\n\t\t\t    round_[_rID].ended = true;\r\n                _eventData_ = endRound(_eventData_);\r\n\r\n                // build event data\r\n                _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\r\n                _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\r\n\r\n            }\r\n\r\n            // put eth in players vault\r\n            plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev logic runs whenever a reload order is executed.  determines how to handle\r\n     * incoming eth depending on if we are in an active round or not\r\n     */\r\n    function reLoadCore(uint256 _pID, uint256 _affID, uint256 _team, uint256 _eth, LSDatasets.EventReturns memory _eventData_)\r\n        private\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n\r\n        // grab time\r\n        uint256 _now = now;\r\n\r\n        // if round is active\r\n        if (_now > round_[_rID].strt && _now<round_[_rID].prizeTime  && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n        {\r\n            // get earnings from all vaults and return unused to gen vault\r\n            // because we use a custom safemath library.  this will throw if player\r\n            // tried to spend more eth than they have.\r\n            if(_now>(round_[_rID].prizeTime-prizeTimeInc_)&& _now<(round_[_rID].prizeTime-prizeTimeInc_+stopTime_)){\r\n                revert();\r\n            }\r\n            plyr_[_pID].gen = withdrawEarnings(_pID,false).sub(_eth);\r\n\r\n            // call core\r\n            core(_rID, _pID, _eth, _affID, _team, _eventData_);\r\n\r\n        // if round is not active and end round needs to be ran\r\n        } else if ((_now > round_[_rID].end||_now>round_[_rID].prizeTime) && round_[_rID].ended == false) {\r\n            // end the round (distributes pot) & start new round\r\n            round_[_rID].ended = true;\r\n            _eventData_ = endRound(_eventData_);\r\n\r\n            // build event data\r\n            _eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000);\r\n            _eventData_.compressedIDs = _eventData_.compressedIDs + _pID;\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev this is the core logic for any buy/reload that happens while a round\r\n     * is live.\r\n     */\r\n    function core(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _team, LSDatasets.EventReturns memory _eventData_)\r\n        private\r\n    {\r\n        // if player is new to round\r\n        if (plyrRnds_[_pID][_rID].keys == 0)\r\n            _eventData_ = managePlayer(_pID, _eventData_);\r\n\r\n        // early round eth limiter\r\n        if (round_[_rID].eth < 1e20 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1e18)\r\n        {\r\n            uint256 _availableLimit = (1e18).sub(plyrRnds_[_pID][_rID].eth);\r\n            uint256 _refund = _eth.sub(_availableLimit);\r\n            plyr_[_pID].gen = plyr_[_pID].gen.add(_refund);\r\n            _eth = _availableLimit;\r\n        }\r\n\r\n        // if eth left is greater than min eth allowed (sorry no pocket lint)\r\n        if (_eth > 1e9)\r\n        {\r\n\r\n            // mint the new keys\r\n            uint256 _keys = (round_[_rID].eth).keysRec(_eth);\r\n\r\n            // if they bought at least 1 whole key\r\n            if (_keys >= 1e18)\r\n            {\r\n            updateTimer(_keys, _rID);\r\n\r\n            // set new leaders\r\n            if (round_[_rID].plyr != _pID)\r\n                round_[_rID].plyr = _pID;\r\n            if (round_[_rID].team != _team)\r\n                round_[_rID].team = _team;\r\n\r\n            // set the new leader bool to true\r\n            _eventData_.compressedData = _eventData_.compressedData + 100;\r\n        }\r\n\r\n            // manage airdrops\r\n            if (_eth >= 1e17)\r\n            {\r\n            airDropTracker_++;\r\n            if (airdrop() == true)\r\n            {\r\n                // gib muni\r\n                uint256 _prize;\r\n                if (_eth >= 1e19)\r\n                {\r\n                    // calculate prize and give it to winner\r\n                    _prize = ((airDropPot_).mul(75)) / 100;\r\n                    plyr_[_pID].win = (plyr_[_pID].win).add(_prize);\r\n\r\n                    // adjust airDropPot\r\n                    airDropPot_ = (airDropPot_).sub(_prize);\r\n\r\n                    // let event know a tier 3 prize was won\r\n                    _eventData_.compressedData += 300000000000000000000000000000000;\r\n                } else if (_eth >= 1e18 && _eth < 1e19) {\r\n                    // calculate prize and give it to winner\r\n                    _prize = ((airDropPot_).mul(50)) / 100;\r\n                    plyr_[_pID].win = (plyr_[_pID].win).add(_prize);\r\n\r\n                    // adjust airDropPot\r\n                    airDropPot_ = (airDropPot_).sub(_prize);\r\n\r\n                    // let event know a tier 2 prize was won\r\n                    _eventData_.compressedData += 200000000000000000000000000000000;\r\n                } else if (_eth >= 1e17 && _eth < 1e18) {\r\n                    // calculate prize and give it to winner\r\n                    _prize = ((airDropPot_).mul(25)) / 100;\r\n                    plyr_[_pID].win = (plyr_[_pID].win).add(_prize);\r\n\r\n                    // adjust airDropPot\r\n                    airDropPot_ = (airDropPot_).sub(_prize);\r\n\r\n                    // let event know a tier 3 prize was won\r\n                    _eventData_.compressedData += 300000000000000000000000000000000;\r\n                }\r\n                // set airdrop happened bool to true\r\n                _eventData_.compressedData += 10000000000000000000000000000000;\r\n                // let event know how much was won\r\n                _eventData_.compressedData += _prize * 1000000000000000000000000000000000;\r\n\r\n                // reset air drop tracker\r\n                airDropTracker_ = 0;\r\n            }\r\n        }\r\n\r\n            // store the air drop tracker number (number of buys since last airdrop)\r\n            _eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000);\r\n\r\n            // update player\r\n            plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys);\r\n            plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth);\r\n\r\n            // update round\r\n            round_[_rID].plyrCtr++;\r\n            plyrOrders_[round_[_rID].plyrCtr] = _pID; // for recording the 50 winners\r\n            if(_eth>minBuyForPrize_){\r\n                 round_[_rID].plyrForPrizeCtr++;\r\n                 plyrForPrizeOrders_[round_[_rID].plyrForPrizeCtr]=_pID;\r\n            }\r\n            round_[_rID].keys = _keys.add(round_[_rID].keys);\r\n            round_[_rID].eth = _eth.add(round_[_rID].eth);\r\n            rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team]);\r\n\r\n            // distribute eth\r\n            _eventData_ = distributeExternal(_rID, _pID, _eth, _affID, _team, _eventData_);\r\n            _eventData_ = distributeInternal(_rID, _pID, _eth, _team, _keys, _eventData_);\r\n\r\n            checkDoubledProfit(_pID, _rID);\r\n            checkDoubledProfit(_affID, _rID);\r\n            // call end tx function to fire end tx event.\r\n\t\t    //endTx(_pID, _team, _eth, _keys, _eventData_);\r\n        }\r\n    }\r\n//==============================================================================\r\n//     _ _ | _   | _ _|_ _  _ _  .\r\n//    (_(_||(_|_||(_| | (_)| _\\  .\r\n//==============================================================================\r\n    /**\r\n     * @dev calculates unmasked earnings (just calculates, does not update mask)\r\n     * @return earnings in wei format\r\n     */\r\n    function calcUnMaskedEarnings(uint256 _pID, uint256 _rIDlast)\r\n        private\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return(  (((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask)  );\r\n    }\r\n\r\n    /**\r\n     * @dev returns the amount of keys you would get given an amount of eth.\r\n     * -functionhash- 0xce89c80c\r\n     * @param _rID round ID you want price for\r\n     * @param _eth amount of eth sent in\r\n     * @return keys received\r\n     */\r\n    function calcKeysReceived(uint256 _rID, uint256 _eth)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // grab time\r\n        uint256 _now = now;\r\n\r\n        // are we in a round?\r\n        if (_now > round_[_rID].strt && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n            return ( (round_[_rID].eth).keysRec(_eth) );\r\n        else // rounds over.  need keys for new round\r\n            return ( (_eth).keys() );\r\n    }\r\n\r\n    /**\r\n     * @dev returns current eth price for X keys.\r\n     * -functionhash- 0xcf808000\r\n     * @param _keys number of keys desired (in 18 decimal format)\r\n     * @return amount of eth needed to send\r\n     */\r\n    function iWantXKeys(uint256 _keys)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n\r\n        // grab time\r\n        uint256 _now = now;\r\n\r\n        // are we in a round?\r\n        if (_now > round_[_rID].strt  && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n            return ( (round_[_rID].keys.add(_keys)).ethRec(_keys) );\r\n        else // rounds over.  need price for new round\r\n            return ( (_keys).eth() );\r\n    }\r\n\r\n    /**\r\n     * @dev gets existing or registers new pID.  use this when a player may be new\r\n     * @return pID\r\n     */\r\n    function determinePID(LSDatasets.EventReturns memory _eventData_)\r\n        private\r\n        returns (LSDatasets.EventReturns)\r\n    {\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        // if player is new to this version of fomo3d\r\n        if (_pID == 0)\r\n        {\r\n            // grab their player ID, name and last aff ID, from player names contract\r\n            _pID = getPlayerID(msg.sender);\r\n            bytes32 _name = getPlayerName(_pID);\r\n            uint256 _laff = getPlayerLAff(_pID);\r\n\r\n            // set up player account\r\n            pIDxAddr_[msg.sender] = _pID;\r\n            plyr_[_pID].addr = msg.sender;\r\n\r\n            if (_name != \"\")\r\n            {\r\n                pIDxName_[_name] = _pID;\r\n                plyr_[_pID].name = _name;\r\n                plyrNames_[_pID][_name] = true;\r\n            }\r\n\r\n            if (_laff != 0 && _laff != _pID)\r\n                plyr_[_pID].laff = _laff;\r\n\r\n            // set the new player bool to true\r\n            _eventData_.compressedData = _eventData_.compressedData + 1;\r\n        }\r\n        return (_eventData_);\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev decides if round end needs to be run & new round started.  and if\r\n     * player unmasked earnings from previously played rounds need to be moved.\r\n     */\r\n    function managePlayer(uint256 _pID, LSDatasets.EventReturns memory _eventData_)\r\n        private\r\n        returns (LSDatasets.EventReturns)\r\n    {\r\n        // if player has played a previous round, move their unmasked earnings\r\n        // from that round to gen vault.\r\n        if (plyr_[_pID].lrnd != 0)\r\n            updateGenVault(_pID, plyr_[_pID].lrnd);\r\n\r\n        // update player's last round played\r\n        plyr_[_pID].lrnd = rID_;\r\n\r\n        // set the joined round bool to true\r\n        _eventData_.compressedData = _eventData_.compressedData + 10;\r\n\r\n        return(_eventData_);\r\n    }\r\n\r\n    /**\r\n     * @dev ends the round. manages paying out winner/splitting up pot\r\n     */\r\n    function endRound(LSDatasets.EventReturns memory _eventData_)\r\n        private\r\n        returns (LSDatasets.EventReturns)\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_;\r\n         uint _prizeTime=round_[rID_].prizeTime;\r\n        // grab our winning player and team id's\r\n        uint256 _winPID = round_[_rID].plyr;\r\n        //uint256 _winTID = round_[_rID].team;\r\n\r\n        // grab our pot amount\r\n        uint256 _pot = round_[_rID].pot;\r\n\r\n        // calculate our winner share, community rewards, gen share,\r\n        // p3d share, and amount reserved for next pot\r\n        //uint256 _win = (_pot.mul(bigPrize_)) / 100;\r\n        uint256 _com = (_pot / 20);\r\n        uint256 _res = _pot.sub(_com);\r\n       \r\n\r\n        uint256 _winLeftP;\r\n         if(now>_prizeTime){\r\n             _winLeftP=pay10WinnersDaily(_pot);\r\n         }else{\r\n             _winLeftP=pay10Winners(_pot);\r\n         }\r\n         _res=_res.sub(_pot.mul((74).sub(_winLeftP)).div(100));\r\n         admin.transfer(_com);\r\n\r\n        // prepare event data\r\n        _eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000);\r\n        //_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000);\r\n        _eventData_.winnerAddr = plyr_[_winPID].addr;\r\n        _eventData_.winnerName = plyr_[_winPID].name;\r\n        _eventData_.newPot = _res;\r\n\r\n        // start next round\r\n       \r\n        if(now>_prizeTime){\r\n            _prizeTime=nextPrizeTime();\r\n        }\r\n        rID_++;\r\n        _rID++;\r\n        round_[_rID].prizeTime=_prizeTime;\r\n        round_[_rID].strt = now;\r\n        round_[_rID].end = now.add(rndInit_);\r\n        round_[_rID].pot = _res;\r\n\r\n        return(_eventData_);\r\n    }\r\n    function pay10Winners(uint256 _pot) private returns(uint256){\r\n        uint256 _left=74;\r\n        uint256 _rID = rID_;\r\n        uint256 _plyrCtr=round_[_rID].plyrCtr;\r\n        if(_plyrCtr>=1){\r\n            uint256 _win1= _pot.mul(bigPrize_).div(100);//30%\r\n            plyr_[plyrOrders_[_plyrCtr]].win=_win1.add( plyr_[plyrOrders_[_plyrCtr]].win);\r\n            _left=_left.sub(bigPrize_);\r\n        }else{\r\n            return(_left);\r\n        }\r\n        if(_plyrCtr>=2){\r\n            uint256 _win2=_pot.div(5);// 20%\r\n            plyr_[plyrOrders_[_plyrCtr-1]].win=_win2.add( plyr_[plyrOrders_[_plyrCtr]-1].win);\r\n            _left=_left.sub(20);\r\n        }else{\r\n            return(_left);\r\n        }\r\n        if(_plyrCtr>=3){\r\n            uint256 _win3=_pot.div(10);//10%\r\n            plyr_[plyrOrders_[_plyrCtr-2]].win=_win3.add( plyr_[plyrOrders_[_plyrCtr]-2].win);\r\n            _left=_left.sub(10);\r\n        }else{\r\n            return(_left);\r\n        }\r\n        uint256 _win4=_pot.div(50);//2%*7=14%\r\n        for(uint256 i=_plyrCtr-3;(i>_plyrCtr-10)&&(i>0);i--){\r\n             if(i==0)\r\n                 return(_left);\r\n             plyr_[plyrOrders_[i]].win=_win4.add(plyr_[plyrOrders_[i]].win);\r\n             _left=_left.sub(2);\r\n        }\r\n        return(_left);\r\n    }\r\n    function pay10WinnersDaily(uint256 _pot) private returns(uint256){\r\n        uint256 _left=74;\r\n        uint256 _rID = rID_;\r\n        uint256 _plyrForPrizeCtr=round_[_rID].plyrForPrizeCtr;\r\n        if(_plyrForPrizeCtr>=1){\r\n            uint256 _win1= _pot.mul(bigPrize_).div(100);//30%\r\n            plyr_[plyrForPrizeOrders_[_plyrForPrizeCtr]].win=_win1.add( plyr_[plyrForPrizeOrders_[_plyrForPrizeCtr]].win);\r\n            _left=_left.sub(bigPrize_);\r\n        }else{\r\n            return(_left);\r\n        }\r\n        if(_plyrForPrizeCtr>=2){\r\n            uint256 _win2=_pot.div(5);//20%\r\n            plyr_[plyrForPrizeOrders_[_plyrForPrizeCtr-1]].win=_win2.add( plyr_[plyrForPrizeOrders_[_plyrForPrizeCtr]-1].win);\r\n            _left=_left.sub(20);\r\n        }else{\r\n            return(_left);\r\n        }\r\n        if(_plyrForPrizeCtr>=3){\r\n            uint256 _win3=_pot.div(10);//10%\r\n            plyr_[plyrForPrizeOrders_[_plyrForPrizeCtr-2]].win=_win3.add( plyr_[plyrForPrizeOrders_[_plyrForPrizeCtr]-2].win);\r\n            _left=_left.sub(10);\r\n        }else{\r\n            return(_left);\r\n        }\r\n        uint256 _win4=_pot.div(50);//2%*7=14%\r\n        for(uint256 i=_plyrForPrizeCtr-3;(i>_plyrForPrizeCtr-10)&&(i>0);i--){\r\n             if(i==0)\r\n                 return(_left);\r\n             plyr_[plyrForPrizeOrders_[i]].win=_win4.add(plyr_[plyrForPrizeOrders_[i]].win);\r\n             _left=_left.sub(2);\r\n        }\r\n        return(_left);\r\n    }\r\n    function nextPrizeTime() private returns(uint256){\r\n        while(true){\r\n            uint256 _prizeTime=round_[rID_].prizeTime;\r\n            _prizeTime =_prizeTime.add(prizeTimeInc_);\r\n            if(_prizeTime>now)\r\n                return(_prizeTime);\r\n        }\r\n        return(round_[rID_].prizeTime.add( prizeTimeInc_));\r\n    }\r\n\r\n    /**\r\n     * @dev moves any unmasked earnings to gen vault.  updates earnings mask\r\n     */\r\n    function updateGenVault(uint256 _pID, uint256 _rIDlast)\r\n        private\r\n    {\r\n        uint256 _earnings = calcUnMaskedEarnings(_pID, _rIDlast);\r\n        if (_earnings > 0)\r\n        {\r\n            // put in gen vault\r\n            plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen);\r\n            // zero out their earnings by updating mask\r\n            plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask);\r\n            plyrRnds_[_pID][_rIDlast].keyProfit = _earnings.add(plyrRnds_[_pID][_rIDlast].keyProfit); \r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev updates round timer based on number of whole keys bought.\r\n     */\r\n    function updateTimer(uint256 _keys, uint256 _rID)\r\n        private\r\n    {\r\n        // grab time\r\n        uint256 _now = now;\r\n\r\n        // calculate time based on number of keys bought\r\n        uint256 _newTime;\r\n        if (_now > round_[_rID].end && round_[_rID].plyr == 0)\r\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now);\r\n        else\r\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end);\r\n\r\n        // compare to max and set new end time\r\n        if (_newTime < (rndMax_).add(_now))\r\n            round_[_rID].end = _newTime;\r\n        else\r\n            round_[_rID].end = rndMax_.add(_now);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev generates a random number between 0-99 and checks to see if thats\r\n     * resulted in an airdrop win\r\n     * @return do we have a winner?\r\n     */\r\n    function airdrop()\r\n        private\r\n        view\r\n        returns(bool)\r\n    {\r\n        uint256 seed = uint256(keccak256(abi.encodePacked(\r\n\r\n            (block.timestamp).add\r\n            (block.difficulty).add\r\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add\r\n            (block.gaslimit).add\r\n            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add\r\n            (block.number)\r\n\r\n        )));\r\n        if((seed - ((seed / 1000) * 1000)) < airDropTracker_)\r\n            return(true);\r\n        else\r\n            return(false);\r\n    }\r\n\r\n    /**\r\n     * @dev distributes eth based on fees to com, aff, and p3d\r\n     */\r\n    function distributeExternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _team, LSDatasets.EventReturns memory _eventData_)\r\n        private\r\n        returns(LSDatasets.EventReturns)\r\n    {\r\n        // pay 5% out to community rewards\r\n        uint256 _com = _eth / 20;\r\n\r\n        uint256 _invest_return = 0;\r\n        bool _isSuper=plyr_[_affID].super;\r\n        _invest_return = distributeInvest(_pID, _eth, _affID,_isSuper);\r\n        if(_isSuper==false)\r\n             _com = _com.mul(2);\r\n        _com = _com.add(_invest_return);\r\n\r\n\r\n        plyr_[pIdx_].aff=_com.add(plyr_[pIdx_].aff);\r\n        return(_eventData_);\r\n    }\r\n\r\n    /**\r\n     * @dev distributes eth based on fees to com, aff, and p3d\r\n     */\r\n    function distributeInvest(uint256 _pID, uint256 _aff_eth, uint256 _affID,bool _isSuper)\r\n        private\r\n        returns(uint256)\r\n    {\r\n\r\n        uint256 _left=0;\r\n        uint256 _aff;\r\n        uint256 _aff_2;\r\n        uint256 _aff_3;\r\n        uint256 _affID_1;\r\n        uint256 _affID_2;\r\n        uint256 _affID_3;\r\n        // distribute share to affiliate\r\n        if(_isSuper==true)\r\n            _aff = _aff_eth.mul(12).div(100);\r\n        else\r\n            _aff = _aff_eth.div(10);\r\n        _aff_2 = _aff_eth.mul(3).div(100);\r\n        _aff_3 = _aff_eth.div(100);\r\n\r\n        _affID_1 = _affID;// up one member\r\n        _affID_2 = plyr_[_affID_1].laff;// up two member\r\n        _affID_3 = plyr_[_affID_2].laff;// up three member\r\n\r\n        // decide what to do with affiliate share of fees\r\n        // affiliate must not be self, and must have a name registered\r\n        if (_affID != _pID && plyr_[_affID].name != '') {\r\n            plyr_[_affID_1].aff = _aff.add(plyr_[_affID_1].aff);\r\n            if(_isSuper==true){\r\n                uint256 _affToPID=_aff_eth.mul(3).div(100);\r\n                plyr_[_pID].aff = _affToPID.add(plyr_[_pID].aff);\r\n            }\r\n              \r\n            //emit LSEvents.onAffiliatePayout(_affID, plyr_[_affID].addr, plyr_[_affID].name, _rID, _pID, _aff, now);\r\n        } else {\r\n            _left = _left.add(_aff);\r\n        }\r\n\r\n        if (_affID_2 != _pID && _affID_2 != _affID && plyr_[_affID_2].name != '') {\r\n            plyr_[_affID_2].aff = _aff_2.add(plyr_[_affID_2].aff);\r\n        } else {\r\n            _left = _left.add(_aff_2);\r\n        }\r\n\r\n        if (_affID_3 != _pID &&  _affID_3 != _affID && plyr_[_affID_3].name != '') {\r\n            plyr_[_affID_3].aff = _aff_3.add(plyr_[_affID_3].aff);\r\n        } else {\r\n            _left= _left.add(_aff_3);\r\n        }\r\n        return _left;\r\n    }\r\n\r\n    function potSwap()\r\n        external\r\n        payable\r\n    {\r\n        // setup local rID\r\n        uint256 _rID = rID_ + 1;\r\n\r\n        round_[_rID].pot = round_[_rID].pot.add(msg.value);\r\n        //emit LSEvents.onPotSwapDeposit(_rID, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev distributes eth based on fees to gen and pot\r\n     */\r\n    function distributeInternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _team, uint256 _keys, LSDatasets.EventReturns memory _eventData_)\r\n        private\r\n        returns(LSDatasets.EventReturns)\r\n    {\r\n        // calculate gen share\r\n        uint256 _gen = (_eth.mul(gen_)) / 100;\r\n\r\n        // toss 2% into airdrop pot\r\n        uint256 _air = (_eth / 50);\r\n        uint256 _com= (_eth / 20);\r\n        uint256 _aff=(_eth.mul(19))/100;\r\n        airDropPot_ = airDropPot_.add(_air);\r\n\r\n        // calculate pot\r\n        //uint256 _pot = (((_eth.sub(_gen)).sub(_air)).sub(_com)).sub(_aff);\r\n        uint256 _pot= _eth.sub(_gen).sub(_air);\r\n        _pot=_pot.sub(_com).sub(_aff);\r\n        // distribute gen share (thats what updateMasks() does) and adjust\r\n        // balances for dust.\r\n        uint256 _dust = updateMasks(_rID, _pID, _gen, _keys);\r\n        if (_dust > 0)\r\n            _gen = _gen.sub(_dust);\r\n\r\n        // add eth to pot\r\n        round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot);\r\n\r\n        // set up event data\r\n        _eventData_.genAmount = _gen.add(_eventData_.genAmount);\r\n        _eventData_.potAmount = _pot;\r\n\r\n        return(_eventData_);\r\n    }\r\n\r\n   function checkDoubledProfit(uint256 _pID, uint256 _rID)\r\n        private\r\n    {   \r\n        // if pID has no keys, skip this\r\n        uint256 _keys = plyrRnds_[_pID][_rID].keys;\r\n        if (_keys > 0) {\r\n\r\n            uint256 _genVault = plyr_[_pID].gen;\r\n            uint256 _genWithdraw = plyrRnds_[_pID][_rID].genWithdraw;\r\n            uint256 _genEarning = calcUnMaskedKeyEarnings(_pID, plyr_[_pID].lrnd);\r\n            uint256 _doubleProfit = (plyrRnds_[_pID][_rID].eth).mul(2);\r\n            if (_genVault.add(_genWithdraw).add(_genEarning) >= _doubleProfit)\r\n            {\r\n                // put only calculated-remain-profit into gen vault\r\n                uint256 _remainProfit = _doubleProfit.sub(_genVault).sub(_genWithdraw);\r\n                plyr_[_pID].gen = _remainProfit.add(plyr_[_pID].gen); \r\n                plyrRnds_[_pID][_rID].keyProfit = _remainProfit.add(plyrRnds_[_pID][_rID].keyProfit); // follow maskKey\r\n\r\n                round_[_rID].keys = round_[_rID].keys.sub(_keys);\r\n                plyrRnds_[_pID][_rID].keys = plyrRnds_[_pID][_rID].keys.sub(_keys);\r\n\r\n                plyrRnds_[_pID][_rID].mask = 0; // treat this player like a new player\r\n            }   \r\n        }\r\n    }\r\n    function calcUnMaskedKeyEarnings(uint256 _pID, uint256 _rIDlast)\r\n        private\r\n        view\r\n        returns(uint256)\r\n    {\r\n        if (    (((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1e18))  >    (plyrRnds_[_pID][_rIDlast].mask)       )\r\n            return(  (((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1e18)).sub(plyrRnds_[_pID][_rIDlast].mask)  );\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev updates masks for round and player when keys are bought\r\n     * @return dust left over\r\n     */\r\n    function updateMasks(uint256 _rID, uint256 _pID, uint256 _gen, uint256 _keys)\r\n        private\r\n        returns(uint256)\r\n    {\r\n        /* MASKING NOTES\r\n            earnings masks are a tricky thing for people to wrap their minds around.\r\n            the basic thing to understand here.  is were going to have a global\r\n            tracker based on profit per share for each round, that increases in\r\n            relevant proportion to the increase in share supply.\r\n\r\n            the player will have an additional mask that basically says \"based\r\n            on the rounds mask, my shares, and how much i've already withdrawn,\r\n            how much is still owed to me?\"\r\n        */\r\n\r\n        // calc profit per key & round mask based on this buy:  (dust goes to pot)\r\n        uint256 _ppt = (_gen.mul(1e18)) / (round_[_rID].keys);\r\n        round_[_rID].mask = _ppt.add(round_[_rID].mask);\r\n\r\n        // calculate player earning from their own buy (only based on the keys\r\n        // they just bought).  & update player earnings mask\r\n        uint256 _pearn = (_ppt.mul(_keys)) / (1e18);\r\n        plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1e18)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask);\r\n\r\n        // calculate & return dust\r\n        return(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1e18)));\r\n    }\r\n\r\n    /**\r\n     * @dev adds up unmasked earnings, & vault earnings, sets them all to 0\r\n     * @return earnings in wei format\r\n     */\r\n    function withdrawEarnings(uint256 _pID,bool isWithdraw)\r\n        private\r\n        returns(uint256)\r\n    {\r\n        // update gen vault\r\n        updateGenVault(_pID, plyr_[_pID].lrnd);\r\n        if (isWithdraw)\r\n            plyrRnds_[_pID][plyr_[_pID].lrnd].genWithdraw = plyr_[_pID].gen.add(plyrRnds_[_pID][plyr_[_pID].lrnd].genWithdraw);\r\n        // from vaults\r\n        uint256 _earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff);\r\n        if (_earnings > 0)\r\n        {\r\n            plyr_[_pID].win = 0;\r\n            plyr_[_pID].gen = 0;\r\n            plyr_[_pID].aff = 0;\r\n        }\r\n\r\n        return(_earnings);\r\n    }\r\n\r\n//==============================================================================\r\n//    (~ _  _    _._|_    .\r\n//    _)(/_(_|_|| | | \\/  .\r\n//====================/=========================================================\r\n    /** upon contract deploy, it will be deactivated.  this is a one time\r\n     * use function that will activate the contract.  we do this so devs\r\n     * have time to set things up on the web end                            **/\r\n    bool public activated_ = false;\r\n    function activate()\r\n        public\r\n    {\r\n        // only team just can activate\r\n        require(msg.sender == admin, \"only admin can activate\"); // erik\r\n\r\n\r\n        // can only be ran once\r\n        require(activated_ == false, \"LuckyStar already activated\");\r\n\r\n        // activate the contract\r\n        activated_ = true;\r\n\r\n        // lets start first round\r\n        rID_ = 1;\r\n        round_[1].strt = now ;\r\n        round_[1].end = now + rndInit_ ;\r\n        round_[1].prizeTime=1536062400;\r\n    }\r\n    \r\n     function setMinBuyForPrize(uint256 _min)\r\n      onlyOwner()\r\n        public{\r\n         minBuyForPrize_ = _min;\r\n    }\r\n}\r\n\r\n//==============================================================================\r\n//   __|_ _    __|_ _  .\r\n//  _\\ | | |_|(_ | _\\  .\r\n//==============================================================================\r\nlibrary LSDatasets {\r\n\r\n    struct EventReturns {\r\n        uint256 compressedData;\r\n        uint256 compressedIDs;\r\n        address winnerAddr;         // winner address\r\n        bytes32 winnerName;         // winner name\r\n        uint256 amountWon;          // amount won\r\n        uint256 newPot;             // amount in new pot\r\n        uint256 P3DAmount;          // amount distributed to p3d\r\n        uint256 genAmount;          // amount distributed to gen\r\n        uint256 potAmount;          // amount added to pot\r\n    }\r\n    struct Player {\r\n        address addr;   // player address\r\n        bytes32 name;   // player name\r\n        uint256 win;    // winnings vault\r\n        uint256 gen;    // general vault\r\n        uint256 aff;    // affiliate vault\r\n        uint256 lrnd;   // last round played\r\n        uint256 laff;   // last affiliate id used\r\n        bool super;\r\n        //uint256 names;\r\n    }\r\n    struct PlayerRounds {\r\n        uint256 eth;    // eth player has added to round (used for eth limiter)\r\n        uint256 keys;   // keys\r\n        uint256 mask;   // player mask\r\n        uint256 keyProfit;\r\n        //uint256 ico;    // ICO phase investment\r\n        uint256 genWithdraw;\r\n    }\r\n    struct Round {\r\n        uint256 plyr;   // pID of player in lead\r\n        uint256 plyrCtr;   // play counter for plyOrders\r\n        uint256 plyrForPrizeCtr;// player counter  for plyrForPrizeOrder\r\n        uint256 prizeTime;\r\n        uint256 team;   // tID of team in lead\r\n        uint256 end;    // time ends/ended\r\n        bool ended;     // has round end function been ran\r\n        uint256 strt;   // time round started\r\n        uint256 keys;   // keys\r\n        uint256 eth;    // total eth in\r\n        uint256 pot;    // eth to pot (during round) / final amount paid to winner (after round ends)\r\n        uint256 mask;   // global mask\r\n    }\r\n\r\n}\r\n\r\n//==============================================================================\r\n//  |  _      _ _ | _  .\r\n//  |<(/_\\/  (_(_||(_  .\r\n//=======/======================================================================\r\nlibrary LSKeysCalcShort {\r\n    using SafeMath for *;\r\n    /**\r\n     * @dev calculates number of keys received given X eth\r\n     * @param _curEth current amount of eth in contract\r\n     * @param _newEth eth being spent\r\n     * @return amount of ticket purchased\r\n     */\r\n    function keysRec(uint256 _curEth, uint256 _newEth)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));\r\n    }\r\n\r\n    /**\r\n     * @dev calculates amount of eth received if you sold X keys\r\n     * @param _curKeys current amount of keys that exist\r\n     * @param _sellKeys amount of keys you wish to sell\r\n     * @return amount of eth received\r\n     */\r\n    function ethRec(uint256 _curKeys, uint256 _sellKeys)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));\r\n    }\r\n\r\n    /**\r\n     * @dev calculates how many keys would exist with given an amount of eth\r\n     * @param _eth eth \"in contract\"\r\n     * @return number of keys that would exist\r\n     */\r\n    function keys(uint256 _eth)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000);\r\n    }\r\n\r\n    /**\r\n     * @dev calculates how much eth would be in contract given a number of keys\r\n     * @param _keys number of keys \"in contract\"\r\n     * @return eth that would exists\r\n     */\r\n    function eth(uint256 _keys)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return ((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq());\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary NameFilter {\r\n    /**\r\n     * @dev filters name strings\r\n     * -converts uppercase to lower case.\r\n     * -makes sure it does not start/end with a space\r\n     * -makes sure it does not contain multiple spaces in a row\r\n     * -cannot be only numbers\r\n     * -cannot start with 0x\r\n     * -restricts characters to A-Z, a-z, 0-9, and space.\r\n     * @return reprocessed string in bytes32 format\r\n     */\r\n    function nameFilter(string _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n\r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n\r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n\r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    // require character is a space\r\n                    _temp[i] == 0x20 ||\r\n                    // OR lowercase a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    // or 0-9\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n\r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;\r\n            }\r\n        }\r\n\r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n\r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr\r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y)\r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n    /**\r\n     * @dev x to the power of y\r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else\r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropTracker_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationFee_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round_\",\"outputs\":[{\"name\":\"plyr\",\"type\":\"uint256\"},{\"name\":\"plyrCtr\",\"type\":\"uint256\"},{\"name\":\"plyrForPrizeCtr\",\"type\":\"uint256\"},{\"name\":\"prizeTime\",\"type\":\"uint256\"},{\"name\":\"team\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"},{\"name\":\"strt\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNameFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"plyrNames_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_team\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"reLoadXid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"setMinBuyForPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_affID\",\"type\":\"uint256\"},{\"name\":\"_isSuper\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rndTmEth_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerVaults\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXname\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrOrders_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"reLoadXaddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_team\",\"type\":\"uint256\"}],\"name\":\"buyXid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBuyForPrize_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_team\",\"type\":\"uint256\"}],\"name\":\"buyXaddr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDailyTimeLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrRnds_\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"keyProfit\",\"type\":\"uint256\"},{\"name\":\"genWithdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"isSuper\",\"type\":\"bool\"}],\"name\":\"setSuper\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setRegistrationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rID\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"calcKeysReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_keys\",\"type\":\"uint256\"}],\"name\":\"iWantXKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrForPrizeOrders_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropPot_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"aff\",\"type\":\"uint256\"},{\"name\":\"lrnd\",\"type\":\"uint256\"},{\"name\":\"laff\",\"type\":\"uint256\"},{\"name\":\"super\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerLAff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"potSwap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerInfoByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"LuckyStar","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5b518eb884ab2ed6123c40ee61d8be724dabf1ba343d4e751ad884d2d98b88a6"}]}