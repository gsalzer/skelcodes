{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n     /**\r\n      * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n      * @param newOwner The address to transfer ownership to.\r\n      */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      _transferOwnership(newOwner);\r\n    }\r\n\r\n     /**\r\n      * @dev Transfers control of the contract to a newOwner.\r\n      * @param newOwner The address to transfer ownership to.\r\n      */\r\n    function _transferOwnership(address newOwner) internal {\r\n      require(newOwner != address(0));\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n library SafeMath {\r\n     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         uint256 c = a * b;\r\n         assert(a == 0 || c / a == b);\r\n         return c;\r\n     }\r\n\r\n     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n         uint256 c = a / b;\r\n         // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n         return c;\r\n     }\r\n\r\n     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         assert(b <= a);\r\n         return a - b;\r\n     }\r\n\r\n     function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         uint256 c = a + b;\r\n         assert(c >= a);\r\n         return c;\r\n     }\r\n\r\n     function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n         return a >= b ? a : b;\r\n     }\r\n\r\n     function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n         return a < b ? a : b;\r\n     }\r\n\r\n     function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         return a >= b ? a : b;\r\n     }\r\n\r\n     function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n         return a < b ? a : b;\r\n     }\r\n }\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\n contract ERC20Basic {\r\n     uint256 public totalSupply;\r\n\r\n     function balanceOf(address who) public view returns (uint256);\r\n     function transfer(address to, uint256 value) public returns (bool);\r\n\r\n     event Transfer(address indexed from, address indexed to, uint256 value);\r\n }\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\n contract ERC20 {\r\n     uint256 public totalSupply;\r\n\r\n     function balanceOf(address _owner) public constant returns (uint256 balance);\r\n     function transfer(address _to, uint256 _value) public returns (bool success);\r\n     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n     function approve(address _spender, uint256 _value) public returns (bool success);\r\n     function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\n contract BasicToken is ERC20Basic {\r\n     using SafeMath for uint256;\r\n\r\n     mapping (address => uint256) balances;\r\n\r\n     // 2018-09-24 00:00:00 AST - start time for pre sale\r\n     uint256 public presaleStartTime = 1537736400;\r\n\r\n     // 2018-10-24 23:59:59 AST - end time for pre sale\r\n     uint256 public presaleEndTime = 1540414799;\r\n\r\n     // 2018-11-04 00:00:00 AST - start time for main sale\r\n     uint256 public mainsaleStartTime = 1541278800;\r\n\r\n     // 2019-01-04 23:59:59 AST - end time for main sale\r\n     uint256 public mainsaleEndTime = 1546635599;\r\n\r\n     address public constant investor1 = 0x8013e8F85C9bE7baA19B9Fd9a5Bc5C6C8D617446;\r\n     address public constant investor2 = 0xf034E5dB3ed5Cb26282d2DC5802B21DB3205B882;\r\n     address public constant investor3 = 0x1A7dD28A461D7e0D75b89b214d5188E0304E5726;\r\n\r\n     /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n     function transfer(address _to, uint256 _value) public returns (bool) {\r\n         require(_to != address(0));\r\n         require(_value <= balances[msg.sender]);\r\n         if (( (msg.sender == investor1) || (msg.sender == investor2) || (msg.sender == investor3)) && (now < (presaleStartTime + 300 days))) {\r\n           revert();\r\n         }\r\n         // SafeMath.sub will throw if there is not enough balance.\r\n         balances[msg.sender] = balances[msg.sender].sub(_value);\r\n         balances[_to] = balances[_to].add(_value);\r\n         emit Transfer(msg.sender, _to, _value);\r\n         return true;\r\n     }\r\n\r\n     /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n     function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n         return balances[_owner];\r\n     }\r\n\r\n }\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\n contract StandardToken is ERC20, BasicToken {\r\n\r\n     mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n     /**\r\n      * @dev Transfer tokens from one address to another\r\n      * @param _from address The address which you want to send tokens from\r\n      * @param _to address The address which you want to transfer to\r\n      * @param _value uint256 the amount of tokens to be transferred\r\n      */\r\n     function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n         require(_to != address(0));\r\n         require(_value <= balances[_from]);\r\n         require(_value <= allowed[_from][msg.sender]);\r\n         if (( (_from == investor1) || (_from == investor2) || (_from == investor3)) && (now < (presaleStartTime + 300 days))) {\r\n           revert();\r\n         }\r\n\r\n         balances[_from] = balances[_from].sub(_value);\r\n         balances[_to] = balances[_to].add(_value);\r\n         allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n         emit Transfer(_from, _to, _value);\r\n         return true;\r\n     }\r\n\r\n     /**\r\n      * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n      *\r\n      * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n      * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n      * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n      * @param _spender The address which will spend the funds.\r\n      * @param _value The amount of tokens to be spent.\r\n      */\r\n     function approve(address _spender, uint256 _value) public returns (bool) {\r\n         allowed[msg.sender][_spender] = _value;\r\n         emit Approval(msg.sender, _spender, _value);\r\n         return true;\r\n     }\r\n\r\n     /**\r\n      * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n      * @param _owner address The address which owns the funds.\r\n      * @param _spender address The address which will spend the funds.\r\n      * @return A uint256 specifying the amount of tokens still available for the spender.\r\n      */\r\n     function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n         return allowed[_owner][_spender];\r\n     }\r\n\r\n     /**\r\n      * approve should be called when allowed[_spender] == 0. To increment\r\n      * allowed value is better to use this function to avoid 2 calls (and wait until\r\n      * the first transaction is mined)\r\n      * From MonolithDAO Token.sol\r\n      */\r\n     function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n         allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n         emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n         return true;\r\n     }\r\n\r\n     function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n         uint oldValue = allowed[msg.sender][_spender];\r\n         if (_subtractedValue > oldValue) {\r\n             allowed[msg.sender][_spender] = 0;\r\n         }\r\n         else {\r\n             allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n         }\r\n         emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n         return true;\r\n     }\r\n\r\n }\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    string public constant name = \"Kartblock\";\r\n    string public constant symbol = \"KBT\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount, address _owner) canMint internal returns (bool) {\r\n        balances[_to] = balances[_to].add(_amount);\r\n        balances[_owner] = balances[_owner].sub(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(_owner, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner canMint internal returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Whitelist is Ownable {\r\n\r\n    mapping (address => bool) verifiedAddresses;\r\n\r\n    function isAddressWhitelist(address _address) public view returns (bool) {\r\n        return verifiedAddresses[_address];\r\n    }\r\n\r\n    function whitelistAddress(address _newAddress) external onlyOwner {\r\n        verifiedAddresses[_newAddress] = true;\r\n    }\r\n\r\n    function removeWhitelistAddress(address _oldAddress) external onlyOwner {\r\n        require(verifiedAddresses[_oldAddress]);\r\n        verifiedAddresses[_oldAddress] = false;\r\n    }\r\n\r\n    function batchWhitelistAddresses(address[] _addresses) external onlyOwner {\r\n        for (uint cnt = 0; cnt < _addresses.length; cnt++) {\r\n            assert(!verifiedAddresses[_addresses[cnt]]);\r\n            verifiedAddresses[_addresses[cnt]] = true;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n    // address where funds are collected\r\n    address public wallet;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public PresaleWeiRaised;\r\n    uint256 public mainsaleWeiRaised;\r\n    uint256 public tokenAllocated;\r\n\r\n    event WalletChanged(address indexed previousWallet, address indexed newWallet);\r\n\r\n    constructor(address _wallet) public {\r\n        require(_wallet != address(0));\r\n        wallet = _wallet;\r\n    }\r\n\r\n    function transferWallet(address newWallet) public onlyOwner {\r\n      _transferOwnership(newWallet);\r\n    }\r\n\r\n    function _transferWallet(address newWallet) internal {\r\n      require(newWallet != address(0));\r\n      emit WalletChanged(owner, newWallet);\r\n      wallet = newWallet;\r\n    }\r\n}\r\n\r\ncontract KartblockCrowdsale is Ownable, Crowdsale, Whitelist, MintableToken {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    // ===== Cap & Goal Management =====\r\n    uint256 public constant presaleCap = 10000 * (10 ** uint256(decimals));\r\n    uint256 public constant mainsaleCap = 175375 * (10 ** uint256(decimals));\r\n    uint256 public constant mainsaleGoal = 11700 * (10 ** uint256(decimals));\r\n\r\n    // ============= Token Distribution ================\r\n    uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\r\n    uint256 public constant totalTokensForSale = 195500000 * (10 ** uint256(decimals));\r\n    uint256 public constant tokensForFuture = 760000000 * (10 ** uint256(decimals));\r\n    uint256 public constant tokensForswap = 4500000 * (10 ** uint256(decimals));\r\n    uint256 public constant tokensForInvester1 = 16000000 * (10 ** uint256(decimals));\r\n    uint256 public constant tokensForInvester2 = 16000000 * (10 ** uint256(decimals));\r\n    uint256 public constant tokensForInvester3 = 8000000 * (10 ** uint256(decimals));\r\n\r\n    // how many token units a buyer gets per wei\r\n    uint256 public rate;\r\n    mapping (address => uint256) public deposited;\r\n    address[] investors;\r\n\r\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\r\n    event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken);\r\n    event Finalized();\r\n\r\n    constructor(\r\n      address _owner,\r\n      address _wallet\r\n      ) public Crowdsale(_wallet) {\r\n\r\n        require(_wallet != address(0));\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n        mintingFinished = false;\r\n        totalSupply = INITIAL_SUPPLY;\r\n        rate = 1140;\r\n        bool resultMintForOwner = mintForOwner(owner);\r\n        require(resultMintForOwner);\r\n        balances[0x9AF6043d1B74a7c9EC7e3805Bc10e41230537A8B] = balances[0x9AF6043d1B74a7c9EC7e3805Bc10e41230537A8B].add(tokensForswap);\r\n        mainsaleWeiRaised.add(tokensForswap);\r\n        balances[investor1] = balances[investor1].add(tokensForInvester1);\r\n        balances[investor2] = balances[investor1].add(tokensForInvester2);\r\n        balances[investor3] = balances[investor1].add(tokensForInvester3);\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function() payable public {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address _investor) public  payable returns (uint256){\r\n        require(_investor != address(0));\r\n        require(validPurchase());\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n        if (tokens == 0) {revert();}\r\n\r\n        // update state\r\n        if (isPresalePeriod())  {\r\n          PresaleWeiRaised = PresaleWeiRaised.add(weiAmount);\r\n        } else if (isMainsalePeriod()) {\r\n          mainsaleWeiRaised = mainsaleWeiRaised.add(weiAmount);\r\n        }\r\n        tokenAllocated = tokenAllocated.add(tokens);\r\n        if (verifiedAddresses[_investor]) {\r\n           mint(_investor, tokens, owner);\r\n        }else {\r\n          investors.push(_investor);\r\n          deposited[_investor] = deposited[_investor].add(tokens);\r\n        }\r\n        emit TokenPurchase(_investor, weiAmount, tokens);\r\n        wallet.transfer(weiAmount);\r\n        return tokens;\r\n    }\r\n\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns(uint256) {\r\n      return _weiAmount.mul(rate);\r\n    }\r\n\r\n    // ====================== Price Management =================\r\n    function setPrice() public onlyOwner {\r\n      if (isPresalePeriod()) {\r\n        rate = 1140;\r\n      } else if (isMainsalePeriod()) {\r\n        rate = 1597;\r\n      }\r\n    }\r\n\r\n    function isPresalePeriod() public view returns (bool) {\r\n      if (now >= presaleStartTime && now < presaleEndTime) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    function isMainsalePeriod() public view returns (bool) {\r\n      if (now >= mainsaleStartTime && now < mainsaleEndTime) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    function mintForOwner(address _wallet) internal returns (bool result) {\r\n        result = false;\r\n        require(_wallet != address(0));\r\n        balances[_wallet] = balances[_wallet].add(INITIAL_SUPPLY);\r\n        result = true;\r\n    }\r\n\r\n    function getDeposited(address _investor) public view returns (uint256){\r\n        return deposited[_investor];\r\n    }\r\n\r\n    // @return true if the transaction can buy tokens\r\n    function validPurchase() internal view returns (bool) {\r\n      bool withinCap =  true;\r\n      if (isPresalePeriod()) {\r\n        withinCap = PresaleWeiRaised.add(msg.value) <= presaleCap;\r\n      } else if (isMainsalePeriod()) {\r\n        withinCap = mainsaleWeiRaised.add(msg.value) <= mainsaleCap;\r\n      }\r\n      bool withinPeriod = isPresalePeriod() || isMainsalePeriod();\r\n      bool minimumContribution = msg.value >= 0.5 ether;\r\n      return withinPeriod && minimumContribution && withinCap;\r\n    }\r\n\r\n    function readyForFinish() internal view returns(bool) {\r\n      bool endPeriod = now < mainsaleEndTime;\r\n      bool reachCap = tokenAllocated <= mainsaleCap;\r\n      return endPeriod || reachCap;\r\n    }\r\n\r\n\r\n    // Finish: Mint Extra Tokens as needed before finalizing the Crowdsale.\r\n    function finalize(\r\n      address _tokensForFuture\r\n      ) public onlyOwner returns (bool result) {\r\n        require(_tokensForFuture != address(0));\r\n        require(readyForFinish());\r\n        result = false;\r\n        mint(_tokensForFuture, tokensForFuture, owner);\r\n        address contractBalance = this;\r\n        wallet.transfer(contractBalance.balance);\r\n        finishMinting();\r\n        emit Finalized();\r\n        result = true;\r\n    }\r\n\r\n    function transferToInvester() public onlyOwner returns (bool result) {\r\n        require( now >= 1548363600);\r\n        for (uint cnt = 0; cnt < investors.length; cnt++) {\r\n            mint(investors[cnt], deposited[investors[cnt]], owner);\r\n        }\r\n        result = true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investor3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investor2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"batchWhitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAddressWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensForFuture\",\"type\":\"address\"}],\"name\":\"finalize\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainsaleWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainsaleGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainsaleEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForInvester2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PresaleWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForFuture\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investor1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForInvester3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMainsalePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainsaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldAddress\",\"type\":\"address\"}],\"name\":\"removeWhitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForInvester1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"transferWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainsaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferToInvester\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForswap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPresalePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenRaised\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"purchasedToken\",\"type\":\"uint256\"}],\"name\":\"TokenLimitReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousWallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"WalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"KartblockCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b95f50e38e2821d7d1e8ad19149d988b25038e180000000000000000000000001e980e31a349781e83aef5e7ced1ce2c7f703b2f","Library":"","SwarmSource":"bzzr://8005f83c557e24459523e50a82ca98e9bbf33703eeb6cef4315ac5ce7a7ee1b1"}]}