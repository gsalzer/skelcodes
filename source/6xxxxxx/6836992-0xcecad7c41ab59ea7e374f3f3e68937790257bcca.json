{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/CDEpisodeManager.sol\r\n\r\ncontract ICDClue {\r\n    uint public typesCount;\r\n}\r\n\r\ncontract TVToken {\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function safeTransfer(address _to, uint256 _value, bytes _data) public;\r\n}\r\n\r\ncontract CDEpisodeManager is Ownable {\r\n    address public manager;\r\n    address public CDClueAddress;\r\n    uint[] public restTypes;\r\n    uint constant public artifactInEpisode = 5;\r\n    uint public restTypesLength;\r\n\r\n    uint[] public comicsCollection;\r\n    uint public comicsCollectionBonus;\r\n    mapping(uint => Collection) public collections;\r\n\r\n    struct Collection {\r\n        uint episodeNumber;\r\n        uint[] cluesTypes;\r\n        uint comicsClueType;\r\n        uint bonusRewardType;\r\n        bool isFinal;\r\n        bool isDefined;\r\n    }\r\n\r\n    modifier onlyOwnerOrManager() {\r\n        require(msg.sender == owner || manager == msg.sender);\r\n        _;\r\n    }\r\n\r\n    event EpisodeStart(\r\n        uint number,\r\n        uint bonusType,\r\n        uint comicsClueType,\r\n        bool isFinal,\r\n        uint[] episodeClueTypes\r\n    );\r\n\r\n    constructor(\r\n        address _manager,\r\n        address _CDClueAddress\r\n    ) public {\r\n        manager = _manager;\r\n        CDClueAddress = _CDClueAddress;\r\n        restTypesLength =  ICDClue(CDClueAddress).typesCount();\r\n        for (uint i = 0; i < restTypesLength; i++) {\r\n            restTypes.push(i + 1);\r\n        }\r\n    }\r\n\r\n    function episodeStart(\r\n        uint number,\r\n        uint bonusType,\r\n        uint comicsClueType,\r\n        bool isFinal\r\n    ) public onlyOwnerOrManager {\r\n        collections[number] = Collection(\r\n            number,\r\n            new uint[](artifactInEpisode),\r\n            comicsClueType,\r\n            bonusType,\r\n            isFinal,\r\n            true\r\n        );\r\n        for (uint i = 0; i < artifactInEpisode; i++) {\r\n            uint randomTypeId = restTypes[getRandom(restTypesLength, i)];\r\n            collections[number].cluesTypes[i] = randomTypeId;\r\n            removeRestType(randomTypeId);\r\n        }\r\n        emit EpisodeStart(number, bonusType, comicsClueType, isFinal, collections[number].cluesTypes);\r\n    }\r\n\r\n    function getClueOfCollectionByIndex(uint episodeNumber, uint index) public view returns(uint) {\r\n        return collections[episodeNumber].cluesTypes[index];\r\n    }\r\n\r\n    function removeRestType(uint typeId) internal {\r\n        for (uint i = 0; i < restTypesLength; i++) {\r\n            if (restTypes[i] == typeId) {\r\n                restTypes[i] = restTypes[restTypesLength - 1];\r\n                restTypesLength--;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setManager(address _manager) public onlyOwner {\r\n        manager = _manager;\r\n    }\r\n\r\n    function getRandom(uint max, uint mix) internal view returns (uint random) {\r\n        random = bytesToUint(keccak256(abi.encodePacked(blockhash(block.number - 1), mix))) % max;\r\n    }\r\n\r\n    function changeCDClueAddress(address newAddress) public onlyOwnerOrManager {\r\n        CDClueAddress = newAddress;\r\n    }\r\n\r\n    function setComicsCollection(uint[] comicsClueIds, uint bonusTypeId) public onlyOwnerOrManager {\r\n        comicsCollection = comicsClueIds;\r\n        comicsCollectionBonus = bonusTypeId;\r\n    }\r\n\r\n    function getComicsCollectionLength() public view returns(uint) {\r\n        return comicsCollection.length;\r\n    }\r\n\r\n    function getComicsCollectionClueByIndex(uint index) public view returns(uint) {\r\n        return comicsCollection[index];\r\n    }\r\n\r\n    function getCollectionBonusType(uint episodeNumber) public view returns(uint bonusType) {\r\n        bonusType = collections[episodeNumber].bonusRewardType;\r\n    }\r\n\r\n    function isFinal(uint episodeNumber) public view returns(bool) {\r\n        return collections[episodeNumber].isFinal;\r\n    }\r\n\r\n    function bytesToUint(bytes32 b) internal pure returns (uint number){\r\n        for (uint i = 0; i < b.length; i++) {\r\n            number = number + uint(b[i]) * (2 ** (8 * (b.length - (i + 1))));\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"},{\"name\":\"bonusType\",\"type\":\"uint256\"},{\"name\":\"comicsClueType\",\"type\":\"uint256\"},{\"name\":\"isFinal\",\"type\":\"bool\"}],\"name\":\"episodeStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"restTypesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"episodeNumber\",\"type\":\"uint256\"}],\"name\":\"isFinal\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comicsCollectionBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"episodeNumber\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getClueOfCollectionByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getComicsCollectionLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"comicsClueIds\",\"type\":\"uint256[]\"},{\"name\":\"bonusTypeId\",\"type\":\"uint256\"}],\"name\":\"setComicsCollection\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"episodeNumber\",\"type\":\"uint256\"}],\"name\":\"getCollectionBonusType\",\"outputs\":[{\"name\":\"bonusType\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"artifactInEpisode\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getComicsCollectionClueByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeCDClueAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"restTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CDClueAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"comicsCollection\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collections\",\"outputs\":[{\"name\":\"episodeNumber\",\"type\":\"uint256\"},{\"name\":\"comicsClueType\",\"type\":\"uint256\"},{\"name\":\"bonusRewardType\",\"type\":\"uint256\"},{\"name\":\"isFinal\",\"type\":\"bool\"},{\"name\":\"isDefined\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_CDClueAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonusType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"comicsClueType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isFinal\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"episodeClueTypes\",\"type\":\"uint256[]\"}],\"name\":\"EpisodeStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CDEpisodeManager","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001fed8ba9a9fdd72ef9038046ad148beb413491b8000000000000000000000000726c90dde64ce2a61f743f3e39f9e14fb6ab87e1","Library":"","SwarmSource":"bzzr://8b6a37ac0015002cd7db136f61eae94e6eb20da84ff05f5648bb7b04b9e91e6a"}]}