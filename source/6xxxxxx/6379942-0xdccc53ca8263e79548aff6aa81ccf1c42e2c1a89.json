{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n *\r\n * LEPRECHAUN - ETH CRYPTOCURRENCY DISTRIBUTION PROJECT\r\n *  - GAIN 4% PER 24 HOURS\r\n *  - Life-long payments\r\n *  - Contribution allocation schemes:\r\n *    -- 95% payments\r\n *    -- 5% commission/marketing\r\n *\r\n * HOW TO USE:\r\n *  1. Send of ether to make an investment (minimum 0.0001 ETH for the first investment)\r\n *  2a. Claim your profit by sending 0 ether transaction (every day, every week, i don't care unless you're spending too much on GAS)\r\n *  OR\r\n *  2b. Send more ether to reinvest AND get your profit at the same time\r\n *\r\n * PARTNER PROGRAM:\r\n * At the moment of making the first deposit, the referral indicates in the DATA field the ETH address of the referrer's wallet,\r\n * and the referrer then receives 12% of the first attachment of the referral,\r\n * and the referral also immediately gets back 13% of his deposit\r\n *\r\n * NOTES:\r\n * All ETHs that you've sent will be added to your deposit.\r\n * In order to get an extra profit from your deposit, it is enough to send just 1 wei.\r\n * It is not allowed to transfer from exchanges, only from your personal ETH wallet, for which you\r\n * have private keys.\r\n *\r\n * RECOMMENDED GAS LIMIT: 200000\r\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n *\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        return _a / _b;\r\n    }\r\n\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Addr {\r\n\r\n    function toAddr(uint source) internal pure returns(address) {\r\n        return address(source);\r\n    }\r\n\r\n    function toAddr(bytes source) internal pure returns(address addr) {\r\n        assembly { addr := mload(add(source,0x14)) }\r\n        return addr;\r\n    }\r\n\r\n    function isZero(address addr) internal pure returns(bool) {\r\n        return addr == address(0);\r\n    }\r\n\r\n    function notZero(address addr) internal pure returns(bool) {\r\n        return !isZero(addr);\r\n    }\r\n\r\n}\r\n\r\ncontract Storage  {\r\n\r\n    using SafeMath for uint;\r\n    address public addrCommission = msg.sender;\r\n\r\n    uint public constant minimalDeposit = 0.0001 ether;\r\n    uint public constant minimalPayout = 0.000001 ether;\r\n    uint public constant profit = 4;\r\n    uint public constant projectCommission = 5;\r\n    uint public constant cashbackInvestor = 13;\r\n    uint public constant cashbackPartner = 12;\r\n    uint public countInvestors = 0;\r\n    uint public totalInvest = 0;\r\n    uint public totalPaid = 0;\r\n\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => uint256) internal withdrawn;\r\n    mapping (address => uint256) internal timestamps;\r\n    mapping (address => uint256) internal referrals;\r\n    mapping (address => uint256) internal referralsProfit;\r\n\r\n    function getUserInvestBalance(address addr) public view returns(uint) {\r\n        return balances[addr];\r\n    }\r\n\r\n    function getUserPayoutBalance(address addr) public view returns(uint) {\r\n        if (timestamps[addr] > 0) {\r\n            uint time = now.sub(timestamps[addr]);\r\n            return getUserInvestBalance(addr).mul(profit).div(100).mul(time).div(1 days);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getUserWithdrawnBalance(address addr) public view returns(uint) {\r\n        return withdrawn[addr];\r\n    }\r\n\r\n    function getUserReferrals(address addr) public view returns(uint) {\r\n        return referrals[addr];\r\n    }\r\n\r\n    function getUserReferralsProfit(address addr) public view returns(uint) {\r\n        return referralsProfit[addr];\r\n    }\r\n\r\n    function getUser(address addr) public view returns(uint, uint, uint, uint, uint) {\r\n\r\n        return (\r\n            getUserInvestBalance(addr),\r\n            getUserWithdrawnBalance(addr),\r\n            getUserPayoutBalance(addr),\r\n            getUserReferrals(addr),\r\n            getUserReferralsProfit(addr)\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract Leprechaun is Storage {\r\n\r\n    using Addr for *;\r\n\r\n    modifier onlyHuman() {\r\n        address addr = msg.sender;\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        require(size == 0, \"You're not a human!\");\r\n        _;\r\n    }\r\n\r\n    modifier checkFirstDeposit() {\r\n        require(\r\n            !(getUserInvestBalance(msg.sender) == 0 && msg.value > 0 && msg.value < minimalDeposit),\r\n            \"The first deposit is less than the minimum amount\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier fromPartner() {\r\n        if (getUserInvestBalance(msg.sender) == 0 && msg.value > 0) {\r\n            address ref = msg.data.toAddr();\r\n            if (ref.notZero() && ref != msg.sender && balances[ref] > 0) {\r\n                _;\r\n            }\r\n        }\r\n    }\r\n\r\n    constructor() public payable {}\r\n\r\n    function() public payable onlyHuman checkFirstDeposit {\r\n        cashback();\r\n        sendCommission();\r\n        sendPayout();\r\n        updateUserInvestBalance();\r\n    }\r\n\r\n    function cashback() internal fromPartner {\r\n\r\n        address partnerAddr = msg.data.toAddr();\r\n        uint amountPartner = msg.value.mul(cashbackPartner).div(100);\r\n        referrals[partnerAddr] = referrals[partnerAddr].add(1);\r\n        referralsProfit[partnerAddr] = referralsProfit[partnerAddr].add(amountPartner);\r\n        transfer(partnerAddr, amountPartner);\r\n\r\n        uint amountInvestor = msg.value.mul(cashbackInvestor).div(100);\r\n        transfer(msg.sender, amountInvestor);\r\n\r\n        totalPaid = totalPaid.add(amountPartner).add(amountInvestor);\r\n\r\n    }\r\n\r\n    function sendCommission() internal {\r\n        if (msg.value > 0) {\r\n            uint commission = msg.value.mul(projectCommission).div(100);\r\n            if (commission > 0) {\r\n                transfer(addrCommission, commission);\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendPayout() internal {\r\n\r\n        if (getUserInvestBalance(msg.sender) > 0) {\r\n\r\n            uint profit = getUserPayoutBalance(msg.sender);\r\n\r\n            if (profit >= minimalPayout) {\r\n                transfer(msg.sender, profit);\r\n                timestamps[msg.sender] = now;\r\n                totalPaid = totalPaid.add(profit);\r\n            }\r\n\r\n        } else if (msg.value > 0) {\r\n            // new user with first deposit\r\n            timestamps[msg.sender] = now;\r\n            countInvestors++;\r\n        }\r\n\r\n    }\r\n\r\n    function updateUserInvestBalance() internal {\r\n        balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n        totalInvest = totalInvest.add(msg.value);\r\n    }\r\n\r\n    function transfer(address addr, uint amount) internal {\r\n\r\n        if (amount <= 0 || addr.isZero()) { return; }\r\n\r\n        withdrawn[addr] = withdrawn[addr].add(amount);\r\n\r\n        require(gasleft() >= 3000, \"Need more gas for transaction\");\r\n\r\n        if (!addr.send(amount)) {\r\n            // The contract does not have more money and it will be destroyed\r\n            destroy();\r\n        }\r\n\r\n    }\r\n\r\n    function destroy() internal {\r\n        selfdestruct(addrCommission);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserPayoutBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserWithdrawnBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserReferrals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserReferralsProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cashbackInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserInvestBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cashbackPartner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Leprechaun","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6d47979a65bb29f29ccd0ad2021f3c60a521f14ce97152a5117493280cb8b844"}]}