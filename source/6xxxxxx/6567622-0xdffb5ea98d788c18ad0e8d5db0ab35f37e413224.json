{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n*GainCrypto.com\r\nCrowd Funded Lottery Game - People who invest for the Lottery Bankroll will get 2.5% Returns every day for 60 days. After 60 days, the investor will be in a profit of 50%. We have a solid Lottery game, which generates the revenue to pay returns to the Investors.\r\n*/\r\n\r\ncontract GainCryptoV1 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) investments;\r\n    mapping(address => uint256) joined;\r\n    mapping(address => uint256) withdrawals;\r\n    mapping(address => uint256) withdrawalsgross;\r\n    mapping(address => uint256) referrer;\r\n    uint256 public step = 5;\r\n    uint256 public bankrollpercentage = 1;\r\n    uint256 public maximumpercent = 150;\r\n    uint256 public minimum = 10 finney;\r\n    uint256 public stakingRequirement = 0.01 ether;\r\n    uint256 public startTime = 1540387800; \r\n    uint256 private randNonce = 0;\r\n    address public ownerWallet;\r\n    address public owner; \r\n    uint256 randomizer = 456717097;\r\n    address mainpromoter = 0xf42934E5C290AA1586d9945Ca8F20cFb72307f91;\r\n    address subpromoter = 0xfb84cb9ef433264bb4a9a8ceb81873c08ce2db3d;\r\n    address telegrampromoter = 0x8426D45E28c69B0Fc480532ADe948e58Caf2a61E;\r\n    address youtuber1 = 0x4ffE17a2A72bC7422CB176bC71c04EE6D87cE329;\r\n    address youtuber2 = 0xcB0C3b15505f8048849C1D4F32835Bb98807A055;\r\n    address youtuber3 = 0x05f2c11996d73288AbE8a31d8b593a693FF2E5D8;\r\n    address youtuber4 = 0x191d636b99f9a1c906f447cC412e27494BB5047F;\r\n    address youtuber5 = 0x0c0c5F2C7453C30AEd66fF9757a14dcE5Db0aA94;\r\n    address gameapi = 0x1f4Af40671D6bE6b3c21e184C1763bbD16618518;\r\n   \r\n\r\n    event Invest(address investor, uint256 amount);\r\n    event Withdraw(address investor, uint256 amount);\r\n    event Bounty(address hunter, uint256 amount);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event Lottery(address player, uint256 lotteryNumber, uint256 amount, uint256 result, bool isWin);\r\n    /**\r\n     * @dev Constructor Sets the original roles of the contract\r\n     */\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        ownerWallet = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifiers\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     * @param newOwnerWallet The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner, address newOwnerWallet) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        ownerWallet = newOwnerWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Investments\r\n     */\r\n    function () public payable {\r\n        buy(0x0);\r\n    }\r\n\r\n    function buy(address _referredBy) public payable {\r\n        if (now <= startTime) {\r\n             require(msg.sender==owner);\r\n            }\r\n        require(msg.value >= minimum);\r\n\r\n        address _customerAddress = msg.sender;\r\n\r\n        if(\r\n           // is this a referred purchase?\r\n           _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n\r\n           // no cheating!\r\n           _referredBy != _customerAddress &&\r\n\r\n           // does the referrer have at least X whole tokens?\r\n           // i.e is the referrer a godly chad masternode\r\n           investments[_referredBy] >= stakingRequirement\r\n       ){\r\n           // wealth redistribution\r\n           referrer[_referredBy] = referrer[_referredBy].add(msg.value.mul(5).div(100));\r\n       }\r\n\r\n       if (investments[msg.sender] > 0){\r\n           if (withdraw()){\r\n               withdrawals[msg.sender] = 0;\r\n           }\r\n       }\r\n       investments[msg.sender] = investments[msg.sender].add(msg.value);\r\n       joined[msg.sender] = block.timestamp;\r\n       uint256 percentmax = msg.value.mul(5).div(100);\r\n       uint256 percentmaxhalf = percentmax.div(2);\r\n       uint256 percentmin = msg.value.mul(1).div(100);\r\n       uint256 percentminhalf = percentmin.div(2);\r\n       \r\n       ownerWallet.transfer(percentmax);\r\n       mainpromoter.transfer(percentmaxhalf);\r\n       subpromoter.transfer(percentmin);\r\n       telegrampromoter.transfer(percentmin);\r\n       youtuber1.transfer(percentminhalf);\r\n       youtuber2.transfer(percentminhalf);\r\n       youtuber3.transfer(percentminhalf);\r\n       youtuber4.transfer(percentminhalf);\r\n       youtuber5.transfer(percentminhalf);\r\n       emit Invest(msg.sender, msg.value);\r\n       \r\n    }\r\n\r\n\r\n     //--------------------------------------------------------------------------------------------\r\n    // LOTTERY\r\n    //--------------------------------------------------------------------------------------------\r\n    /**\r\n    * @param _value number in array [1,2,3]\r\n    */\r\n    function lottery(uint256 _value) public payable\r\n    {\r\n        uint256 maxbetsize = address(this).balance.mul(bankrollpercentage).div(100);\r\n        require(msg.value <= maxbetsize);\r\n        uint256 random = getRandomNumber(msg.sender) + 1;\r\n        bool isWin = false;\r\n        if (random == _value) {\r\n            isWin = true;\r\n            uint256 prize = msg.value.mul(180).div(100);\r\n            if (prize <= address(this).balance) {\r\n                msg.sender.transfer(prize);\r\n            }\r\n        }\r\n        ownerWallet.transfer(msg.value.mul(5).div(100));\r\n        gameapi.transfer(msg.value.mul(3).div(100));\r\n        mainpromoter.transfer(msg.value.mul(2).div(100));\r\n        emit Lottery(msg.sender, _value, msg.value, random, isWin);\r\n    }\r\n\r\n\r\n    function getBalance(address _address) view public returns (uint256) {\r\n        uint256 minutesCount = now.sub(joined[_address]).div(1 minutes);\r\n        uint256 percent = investments[_address].mul(step).div(100);\r\n        uint256 percentfinal = percent.div(2);\r\n        uint256 different = percentfinal.mul(minutesCount).div(1440);\r\n        uint256 balancetemp = different.sub(withdrawals[_address]);\r\n        uint256 maxpayout = investments[_address].mul(maximumpercent).div(100);\r\n        uint256 balancesum = withdrawalsgross[_address].add(balancetemp);\r\n        \r\n        if (balancesum <= maxpayout){\r\n              return balancetemp;\r\n            }\r\n            \r\n        else {\r\n        uint256 balancenet = maxpayout.sub(withdrawalsgross[_address]);\r\n        return balancenet;\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n   \r\n    function withdraw() public returns (bool){\r\n        require(joined[msg.sender] > 0);\r\n        uint256 balance = getBalance(msg.sender);\r\n        if (address(this).balance > balance){\r\n            if (balance > 0){\r\n                withdrawals[msg.sender] = withdrawals[msg.sender].add(balance);\r\n                withdrawalsgross[msg.sender] = withdrawalsgross[msg.sender].add(balance);\r\n                uint256 maxpayoutfinal = investments[msg.sender].mul(maximumpercent).div(100);\r\n                msg.sender.transfer(balance);\r\n                if (withdrawalsgross[msg.sender] >= maxpayoutfinal){\r\n                investments[msg.sender] = 0;\r\n                withdrawalsgross[msg.sender] = 0;\r\n                withdrawals[msg.sender] = 0;\r\n            }\r\n              emit Withdraw(msg.sender, balance);\r\n            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n \r\n    function bounty() public {\r\n        uint256 refBalance = checkReferral(msg.sender);\r\n        if(refBalance >= minimum) {\r\n             if (address(this).balance > refBalance) {\r\n                referrer[msg.sender] = 0;\r\n                msg.sender.transfer(refBalance);\r\n                emit Bounty(msg.sender, refBalance);\r\n             }\r\n        }\r\n    }\r\n\r\n  \r\n    function checkBalance() public view returns (uint256) {\r\n        return getBalance(msg.sender);\r\n    }\r\n\r\n    function checkWithdrawals(address _investor) public view returns (uint256) {\r\n        return withdrawals[_investor];\r\n    }\r\n    \r\n    function checkWithdrawalsgross(address _investor) public view returns (uint256) {\r\n        return withdrawalsgross[_investor];\r\n    }\r\n\r\n    function checkInvestments(address _investor) public view returns (uint256) {\r\n        return investments[_investor];\r\n    }\r\n\r\n    function checkReferral(address _hunter) public view returns (uint256) {\r\n        return referrer[_hunter];\r\n    }\r\n    \r\n    function setYoutuber1(address _youtuber1) public {\r\n      require(msg.sender==owner);\r\n      youtuber1 = _youtuber1;\r\n    }\r\n    \r\n    function setYoutuber2(address _youtuber2) public {\r\n      require(msg.sender==owner);\r\n      youtuber2 = _youtuber2;\r\n    }\r\n    \r\n    function setYoutuber3(address _youtuber3) public {\r\n      require(msg.sender==owner);\r\n      youtuber3 = _youtuber3;\r\n    }\r\n    \r\n    function setYoutuber4(address _youtuber4) public {\r\n      require(msg.sender==owner);\r\n      youtuber4 = _youtuber4;\r\n    }\r\n    \r\n    function setYoutuber5(address _youtuber5) public {\r\n      require(msg.sender==owner);\r\n      youtuber5 = _youtuber5;\r\n    }\r\n    \r\n    function setBankrollpercentage(uint256 _Bankrollpercentage) public {\r\n      require(msg.sender==owner);\r\n      bankrollpercentage = _Bankrollpercentage;\r\n    }\r\n    \r\n    function setRandomizer(uint256 _Randomizer) public {\r\n      require(msg.sender==owner);\r\n      randomizer = _Randomizer;\r\n    }\r\n    \r\n    function setStartTime(uint256 _startTime) public {\r\n      require(msg.sender==owner);\r\n      startTime = _startTime;\r\n    }\r\n    function checkContractBalance() public view returns (uint256) \r\n    {\r\n        return address(this).balance;\r\n    }\r\n    //----------------------------------------------------------------------------------\r\n    // INTERNAL FUNCTION\r\n    //----------------------------------------------------------------------------------\r\n    function getRandomNumber(address _addr) private returns(uint256 randomNumber) \r\n    {\r\n        randNonce++;\r\n        randomNumber = uint256(keccak256(abi.encodePacked(now, _addr, randNonce, randomizer, block.coinbase, block.number))) % 7;\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_hunter\",\"type\":\"address\"}],\"name\":\"checkReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Bankrollpercentage\",\"type\":\"uint256\"}],\"name\":\"setBankrollpercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_youtuber2\",\"type\":\"address\"}],\"name\":\"setYoutuber2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkContractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankrollpercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"newOwnerWallet\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_youtuber5\",\"type\":\"address\"}],\"name\":\"setYoutuber5\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"checkInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"checkWithdrawalsgross\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_youtuber1\",\"type\":\"address\"}],\"name\":\"setYoutuber1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"checkWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Randomizer\",\"type\":\"uint256\"}],\"name\":\"setRandomizer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"lottery\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_youtuber4\",\"type\":\"address\"}],\"name\":\"setYoutuber4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_youtuber3\",\"type\":\"address\"}],\"name\":\"setYoutuber3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumpercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hunter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lotteryNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isWin\",\"type\":\"bool\"}],\"name\":\"Lottery\",\"type\":\"event\"}]","ContractName":"GainCryptoV1","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://536424d39739a130e2528017a3bfb8d26e3d745852402a93453100116447b4b8"}]}