{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\ncontract SafeMath {\r\n    uint256 constant public MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n    /*\r\n    *  Adds two numbers, throws on overflow.\r\n    */\r\n    function safeAdd(uint256 x, uint256 y) pure  internal returns (uint256 z) {\r\n        if (x > MAX_UINT256 - y) revert();\r\n        return x + y;\r\n    }\r\n    /*\r\n     *  Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\r\n        if (x < y)  revert();\r\n        return x - y;\r\n    }\r\n}\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint);\r\n  function totalSupply()public constant returns (uint256 _supply);\r\n  function name() public constant returns (string _name);\r\n  function symbol()public constant returns (string _symbol);\r\n}\r\ncontract WCG is SafeMath{\r\n    address owner;\r\n    //The token holds to the message\r\n   struct userToken{\r\n        address buyer;\r\n        uint currentPrice;\r\n        uint _token;\r\n        uint totalToKenPrice;\r\n        uint charge;\r\n        uint totalBuyPrice;\r\n    }\r\n    userToken[] _userTokenInfo;\r\n    mapping(address => userToken[]) private userTokenInfos; \r\n    mapping(address => uint256) private balances;\r\n    //Bonus pools\r\n    mapping(address => uint256) private bonusPools;\r\n    //capital pool \r\n    mapping(address => uint256) private capitalPool;\r\n    string public name = \"wcg\";\r\n    string public symbol = \"WCG\";\r\n    uint256 public totalSupply = 0;\r\n    \r\n    uint constant initPrice = 0.01 ether;\r\n    uint private presellUpToTime;\r\n    uint  private presellToKenAmount;\r\n    event transfer(address addr,address contractAddr,uint token,uint totalSupply);\r\n  modifier onlyOwner(){\r\n       require(msg.sender == owner);\r\n        _;\r\n  }\r\n  modifier upToTime(){\r\n      require(now < presellUpToTime);\r\n      _;\r\n  }\r\n  function getUserTokenInfosLength()public view returns(uint length){\r\n      length = _userTokenInfo.length;\r\n  }\r\n  \r\n  function getUserTokenInfos(address contractAddr,uint index)public view returns(address buyer,uint currentPrice,uint _token,uint totalToKenPrice,uint charge,uint totalBuyPrice){\r\n     userToken storage _userToKen = userTokenInfos[contractAddr][index];\r\n     buyer = _userToKen.buyer;\r\n     currentPrice = _userToKen.currentPrice;\r\n     _token = _userToKen._token;\r\n     totalToKenPrice = _userToKen.totalToKenPrice;\r\n     charge = _userToKen.charge;\r\n     totalBuyPrice = _userToKen.totalBuyPrice;\r\n  }\r\n  constructor(uint _presellToKen,uint _presellUpToTime)public{\r\n      presellUpToTime = now + (_presellUpToTime * 1 days);\r\n      owner = msg.sender;\r\n      presellToKenAmount = EthTurnWCG(_presellToKen);\r\n  }\r\n  //Buy WCG\r\n  function buyToKen(uint _token)public payable upToTime{\r\n      uint totalToKenPrice = buyPrice(_token);\r\n      uint charge = computingCharge(totalToKenPrice);\r\n      if( msg.value < totalToKenPrice+charge)revert();\r\n      bonusPools[this] = safeAdd(bonusPools[this],charge);\r\n      capitalPool[this] = safeAdd(capitalPool[this],totalToKenPrice);\r\n      address(this).transfer(msg.value);\r\n      balances[this] = safeAdd(balances[this],msg.value);\r\n      _userTokenInfo.push(userToken(msg.sender,currentPrice(),_token,totalToKenPrice,charge,totalToKenPrice+charge));\r\n      totalSupply =  safeAdd(totalSupply,_token);\r\n      balances[msg.sender] = safeAdd(balances[msg.sender],_token);\r\n      userTokenInfos[this] = _userTokenInfo;\r\n      emit transfer(msg.sender,address(this),_token,totalSupply);\r\n  }\r\n  \r\n  function()public payable{}\r\n  function EthTurnWCG(uint eth)public pure returns(uint){\r\n      return eth * 1e18 / initPrice;\r\n  }\r\n  function currentPrice()public pure returns(uint){\r\n      return initPrice;\r\n  }\r\n  function buyPrice(uint _token)public pure returns(uint){\r\n      return  _token * currentPrice();\r\n  }\r\n  function computingCharge(uint price)public pure returns(uint){\r\n      return price / 10;\r\n  }\r\n  function getPresellToKenAmount()public view returns(uint){\r\n      return presellToKenAmount;\r\n  }\r\n  function getPresellUpToTime()public constant returns(uint){\r\n      return presellUpToTime;\r\n  }\r\n  function capitalPoolOf(address who) public constant returns (uint){\r\n      return capitalPool[who];\r\n  }\r\n  function bonusPoolsOf(address who) public constant returns (uint){\r\n      return bonusPools[who];\r\n  }\r\n  function balanceOf(address who) public constant returns (uint){\r\n      return balances[who];\r\n  }\r\n  function totalSupply()public constant returns (uint256 _supply){\r\n      return totalSupply;\r\n  }\r\n\r\n  function destroy()public onlyOwner {\r\n      selfdestruct(owner);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"capitalPoolOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPresellToKenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserTokenInfos\",\"outputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"uint256\"},{\"name\":\"totalToKenPrice\",\"type\":\"uint256\"},{\"name\":\"charge\",\"type\":\"uint256\"},{\"name\":\"totalBuyPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPresellUpToTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserTokenInfosLength\",\"outputs\":[{\"name\":\"length\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"EthTurnWCG\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"computingCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"buyToKen\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"bonusPoolsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_presellToKen\",\"type\":\"uint256\"},{\"name\":\"_presellUpToTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"type\":\"event\"}]","ContractName":"WCG","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000a","Library":"","SwarmSource":"bzzr://1c632fb91b4d6d49685e2ce61d640dcdc1337b7881bd96c472e39a7259c2028b"}]}