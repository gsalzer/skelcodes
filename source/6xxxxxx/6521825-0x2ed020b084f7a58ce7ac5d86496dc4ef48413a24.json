{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/*\r\n* Author:  Konstantin G...\r\n* Telegram: @bunnygame (en)\r\n* talk : https://bitcointalk.org/index.php?topic=5025885.0\r\n* discord : https://discordapp.com/invite/G2jt4Fw\r\n* email: info@bunnycoin.co\r\n* site : http://bunnycoin.co \r\n*/\r\n\r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n    \r\n    address ownerCEO;\r\n    address ownerMoney;  \r\n    address privAddress; \r\n    address addressAdmixture;\r\n    \r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public { \r\n        ownerCEO = msg.sender; \r\n        ownerMoney = msg.sender;\r\n    }\r\n \r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerCEO);\r\n        _;\r\n    }\r\n   \r\n    function transferOwnership(address add) public onlyOwner {\r\n        if (add != address(0)) {\r\n            ownerCEO = add;\r\n        }\r\n    }\r\n \r\n    function transferOwnerMoney(address _ownerMoney) public  onlyOwner {\r\n        if (_ownerMoney != address(0)) {\r\n            ownerMoney = _ownerMoney;\r\n        }\r\n    }\r\n \r\n    function getOwnerMoney() public view onlyOwner returns(address) {\r\n        return ownerMoney;\r\n    } \r\n    /**\r\n    *  @dev private contract\r\n     */\r\n    function getPrivAddress() public view onlyOwner returns(address) {\r\n        return privAddress;\r\n    }\r\n    function getAddressAdmixture() public view onlyOwner returns(address) {\r\n        return addressAdmixture;\r\n    }\r\n} \r\n\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * @dev This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) public whitelist;\r\n\r\n    mapping(uint  => address)   whitelistCheck;\r\n    uint public countAddress = 0;\r\n\r\n    event WhitelistedAddressAdded(address addr);\r\n    event WhitelistedAddressRemoved(address addr);\r\n \r\n  /**\r\n   * @dev Throws if called by any account that's not whitelisted.\r\n   */\r\n    modifier onlyWhitelisted() {\r\n        require(whitelist[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n            whitelist[msg.sender] = true;  \r\n            whitelist[this] = true;  \r\n    }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param addr address\r\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n   */\r\n    function addAddressToWhitelist(address addr) onlyWhitelisted public returns(bool success) {\r\n        if (!whitelist[addr]) {\r\n            whitelist[addr] = true;\r\n\r\n            countAddress = countAddress + 1;\r\n            whitelistCheck[countAddress] = addr;\r\n\r\n            emit WhitelistedAddressAdded(addr);\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    function getWhitelistCheck(uint key) onlyWhitelisted view public returns(address) {\r\n        return whitelistCheck[key];\r\n    }\r\n\r\n\r\n    function getInWhitelist(address addr) public view returns(bool) {\r\n        return whitelist[addr];\r\n    }\r\n    function getOwnerCEO() public onlyWhitelisted view returns(address) {\r\n        return ownerCEO;\r\n    }\r\n \r\n    /**\r\n    * @dev add addresses to the whitelist\r\n    * @param addrs addresses\r\n    * @return true if at least one address was added to the whitelist,\r\n    * false if all addresses were already in the whitelist\r\n    */\r\n    function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            if (addAddressToWhitelist(addrs[i])) {\r\n                success = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev remove an address from the whitelist\r\n    * @param addr address\r\n    * @return true if the address was removed from the whitelist,\r\n    * false if the address wasn't in the whitelist in the first place\r\n    */\r\n    function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\r\n        if (whitelist[addr]) {\r\n            whitelist[addr] = false;\r\n            emit WhitelistedAddressRemoved(addr);\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev remove addresses from the whitelist\r\n    * @param addrs addresses\r\n    * @return true if at least one address was removed from the whitelist,\r\n    * false if all addresses weren't in the whitelist in the first place\r\n    */\r\n    function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            if (removeAddressFromWhitelist(addrs[i])) {\r\n                success = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n  \r\n}\r\n \r\n\r\ncontract BaseRabbit  is Whitelist {\r\n    event EmotherCount(uint32 mother, uint summ);\r\n    event SalaryBunny(uint32 bunnyId, uint cost);\r\n    event CreateChildren(uint32 matron, uint32 sire, uint32 child);\r\n    event BunnyDescription(uint32 bunnyId, string name);\r\n    event CoolduwnMother(uint32 bunnyId, uint num);\r\n    event Referral(address from, uint32 matronID, uint32 childID, uint currentTime);\r\n    event Approval(address owner, address approved, uint32 tokenId);\r\n    event Transfer(address from, address to, uint32 tokenId);\r\n    event NewBunny(uint32 bunnyId, uint dnk, uint256 blocknumber, uint breed);\r\n \r\n\r\n    using SafeMath for uint256;\r\n    bool pauseSave = false;\r\n    \r\n    // ID the last seal\r\n    // ID the last seal\r\n    bool public promoPause = false;\r\n\r\n\r\n\r\n\r\n    function setPromoPause() public onlyWhitelisted() {\r\n        promoPause = !promoPause;\r\n    }\r\n\r\n\r\n // \r\n    // внешняя функция сколько заработала мамочка\r\n    mapping(uint32 => uint) public totalSalaryBunny;\r\n    // кто мамочка у ребёнка\r\n    mapping(uint32 => uint32[5]) public rabbitMother;\r\n    // сколько раз стала мамочка текущий кролик\r\n    mapping(uint32 => uint) public motherCount;\r\n    // сколько стоит скрещивание у кролика\r\n    mapping(uint32 => uint)  public rabbitSirePrice;\r\n    // разрешено ли менять кролику пол\r\n    mapping(uint32 => bool)  public allowedChangeSex;\r\n    // сколько мужиков с текущим геном\r\n   // mapping(uint => uint32[]) public sireGenom;\r\n    mapping (uint32 => uint) mapDNK;\r\n   \r\n    mapping (uint32 => bool) giffblock; \r\n    /**\r\n    * Where we will store information about rabbits\r\n    */\r\n  //  Rabbit[]  public rabbits;\r\n    mapping (uint32 => Rabbit)  tokenBunny; \r\n     \r\n    uint public tokenBunnyTotal;\r\n    /**\r\n    * who owns the rabbit\r\n    */\r\n    mapping (uint32 => address) public rabbitToOwner; \r\n    mapping (address => uint32[]) public ownerBunnies;\r\n    mapping (address => bool) ownerGennezise;\r\n\r\n    struct Rabbit { \r\n         // parents\r\n        uint32 mother;\r\n        uint32 sire; \r\n        // block in which a rabbit was born\r\n        uint birthblock;\r\n         // number of births or how many times were offspring\r\n        uint birthCount;\r\n         // The time when Rabbit last gave birth\r\n        uint birthLastTime;\r\n        //indexGenome   \r\n        uint genome; \r\n    }\r\n}\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods \r\n\r\n    function ownerOf(uint32 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint32 _tokenId) public returns (bool success);\r\n    function transfer(address _to, uint32 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint32 _tokenId) public returns (bool);\r\n    function totalSupply() public view returns (uint total);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n\r\n}\r\n\r\n/// @title Interface new rabbits address\r\ncontract PrivateRabbitInterface {\r\n    function getNewRabbit(address from)  public view returns (uint);\r\n    function mixDNK(uint dnkmother, uint dnksire, uint genome)  public view returns (uint);\r\n    function isUIntPrivate() public pure returns (bool);\r\n}\r\n\r\n\r\ncontract Rabbit is BaseRabbit, ERC721 {\r\n    uint public totalBunny = 0;\r\n    string public constant name = \"CryptoRabbits\";\r\n    string public constant symbol = \"CRB\";\r\n\r\n    function ownerOf(uint32 _tokenId) public view returns (address owner) {\r\n        return rabbitToOwner[_tokenId];\r\n    }\r\n\r\n    function approve(address _to, uint32 _tokenId) public returns (bool) { \r\n        _to;\r\n        _tokenId;\r\n        return false;\r\n    }\r\n\r\n\r\n    function removeTokenList(address _owner, uint32 _tokenId) internal { \r\n        require(isPauseSave());\r\n        uint count = ownerBunnies[_owner].length;\r\n        for (uint256 i = 0; i < count; i++) {\r\n            if(ownerBunnies[_owner][i] == _tokenId)\r\n            { \r\n                delete ownerBunnies[_owner][i];\r\n                if(count > 0 && count != (i-1)){\r\n                    ownerBunnies[_owner][i] = ownerBunnies[_owner][(count-1)];\r\n                    delete ownerBunnies[_owner][(count-1)];\r\n                } \r\n                ownerBunnies[_owner].length--;\r\n                return;\r\n            } \r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev add a new bunny in the storage\r\n     */\r\n    function addTokenList(address owner,  uint32 _tokenId) internal {\r\n        ownerBunnies[owner].push( _tokenId);\r\n        rabbitToOwner[_tokenId] = owner; \r\n    }\r\n \r\n\r\n    function transfer(address _to, uint32 _tokenId) public {\r\n        require(isPauseSave());\r\n        address currentOwner = msg.sender;\r\n        address oldOwner = rabbitToOwner[_tokenId];\r\n        require(rabbitToOwner[_tokenId] == msg.sender);\r\n        require(currentOwner != _to);\r\n        require(_to != address(0));\r\n        removeTokenList(oldOwner, _tokenId);\r\n        addTokenList(_to, _tokenId);\r\n        emit Transfer(oldOwner, _to, _tokenId);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint32 _tokenId) public onlyWhitelisted() returns(bool) {\r\n        require(isPauseSave());\r\n        address oldOwner = rabbitToOwner[_tokenId];\r\n        require(oldOwner == _from); \r\n        require(oldOwner != _to);\r\n        require(_to != address(0));\r\n        removeTokenList(oldOwner, _tokenId);\r\n        addTokenList(_to, _tokenId); \r\n        setAllowedChangeSex(_tokenId, false);\r\n        emit Transfer (oldOwner, _to, _tokenId);\r\n        return true;\r\n    }  \r\n     \r\n\r\n    function isPauseSave() public view returns(bool) {\r\n        return !pauseSave;\r\n    }\r\n    \r\n    function isPromoPause() public view returns(bool) {\r\n        if (getInWhitelist(msg.sender)) {\r\n            return true;\r\n        } else {\r\n            return !promoPause;\r\n        } \r\n    }\r\n\r\n    function setPauseSave() public onlyWhitelisted() returns(bool) {\r\n        return pauseSave = !pauseSave;\r\n    }\r\n\r\n    function setTotalBunny() internal onlyWhitelisted() returns(uint) {\r\n        require(isPauseSave());\r\n        return totalBunny = totalBunny.add(1);\r\n    }\r\n     \r\n\r\n    function setTotalBunny_id(uint _totalBunny) external onlyWhitelisted() {\r\n        require(isPauseSave());\r\n        totalBunny = _totalBunny;\r\n    }\r\n\r\n\r\n    function setTokenBunny(uint32 mother, uint32  sire, uint birthblock, uint birthCount, uint birthLastTime, uint genome, address _owner, uint DNK) \r\n        external onlyWhitelisted() returns(uint32) {\r\n            uint32 id = uint32(setTotalBunny());\r\n            tokenBunny[id] = Rabbit(mother, sire, birthblock, birthCount, birthLastTime, genome);\r\n            mapDNK[id] = DNK;\r\n            addTokenList(_owner, id); \r\n\r\n            emit NewBunny(id, DNK, block.number, 0);\r\n            emit CreateChildren(mother, sire, id);\r\n            setMotherCount(id, 0);\r\n        return id;\r\n    }\r\n    \r\n    \r\n    // correction of mistakes with parents\r\n    function relocateToken(\r\n        uint32 id, \r\n        uint32 mother, \r\n        uint32 sire, \r\n        uint birthblock, \r\n        uint birthCount, \r\n        uint birthLastTime, \r\n        uint genome, \r\n        address _owner, \r\n        uint DNK\r\n         ) external onlyWhitelisted(){\r\n        //    if(mapDNK[id] != 0){ \r\n                tokenBunny[id] = Rabbit(mother, sire, birthblock, birthCount, birthLastTime, genome);\r\n                mapDNK[id] = DNK;\r\n                addTokenList(_owner, id);\r\n       //     }\r\n    }\r\n\r\n    \r\n    \r\n    function setDNK( uint32 _bunny, uint dnk) external onlyWhitelisted() {\r\n        require(isPauseSave());\r\n        mapDNK[_bunny] = dnk;\r\n    }\r\n    \r\n    \r\n    function setMotherCount( uint32 _bunny, uint count) public onlyWhitelisted() {\r\n        require(isPauseSave()); \r\n        motherCount[_bunny] = count;\r\n    }\r\n    \r\n    function setRabbitSirePrice( uint32 _bunny, uint count) external onlyWhitelisted() {\r\n        require(isPauseSave()); \r\n        rabbitSirePrice[_bunny] = count;\r\n    }\r\n  \r\n    function setAllowedChangeSex( uint32 _bunny, bool canBunny) public onlyWhitelisted() {\r\n        require(isPauseSave()); \r\n        allowedChangeSex[_bunny] = canBunny;\r\n    }\r\n    \r\n    function setTotalSalaryBunny( uint32 _bunny, uint count) external onlyWhitelisted() {\r\n        require(isPauseSave()); \r\n        totalSalaryBunny[_bunny] = count;\r\n    }  \r\n\r\n    function setRabbitMother(uint32 children, uint32[5] _m) external onlyWhitelisted() { \r\n             rabbitMother[children] = _m;\r\n    }\r\n\r\n    function setGenome(uint32 _bunny, uint genome)  external onlyWhitelisted(){ \r\n        tokenBunny[_bunny].genome = genome;\r\n    }\r\n\r\n    function setParent(uint32 _bunny, uint32 mother, uint32 sire)  external onlyWhitelisted() { \r\n        tokenBunny[_bunny].mother = mother;\r\n        tokenBunny[_bunny].sire = sire;\r\n    }\r\n\r\n    function setBirthLastTime(uint32 _bunny, uint birthLastTime) external onlyWhitelisted() { \r\n        tokenBunny[_bunny].birthLastTime = birthLastTime;\r\n    }\r\n\r\n    function setBirthCount(uint32 _bunny, uint birthCount) external onlyWhitelisted() { \r\n        tokenBunny[_bunny].birthCount = birthCount;\r\n    }\r\n\r\n    function setBirthblock(uint32 _bunny, uint birthblock) external onlyWhitelisted() { \r\n        tokenBunny[_bunny].birthblock = birthblock;\r\n    }\r\n\r\n    function setGiffBlock(uint32 _bunny, bool blocked) external onlyWhitelisted() { \r\n        giffblock[_bunny] = blocked;\r\n    }\r\n\r\n\r\n    function setOwnerGennezise(address _to, bool canYou) external onlyWhitelisted() { \r\n        ownerGennezise[_to] = canYou;\r\n    }\r\n\r\n\r\n \r\n\r\n    ////// getters\r\n \r\n    function getOwnerGennezise(address _to) public view returns(bool) { \r\n        return ownerGennezise[_to];\r\n    }\r\n    function getGiffBlock(uint32 _bunny) public view returns(bool) { \r\n        return !giffblock[_bunny];\r\n    }\r\n\r\n    function getAllowedChangeSex(uint32 _bunny) public view returns(bool) {\r\n        return !allowedChangeSex[_bunny];\r\n    } \r\n \r\n    function getRabbitSirePrice(uint32 _bunny) public view returns(uint) {\r\n        return rabbitSirePrice[_bunny];\r\n    } \r\n\r\n    function getTokenOwner(address owner) public view returns(uint total, uint32[] list) {\r\n        total = ownerBunnies[owner].length;\r\n        list = ownerBunnies[owner];\r\n    } \r\n\r\n    function totalSupply() public view returns (uint total) {\r\n        return totalBunny;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint) {\r\n        return ownerBunnies[_owner].length;\r\n    }\r\n\r\n     function getMotherCount(uint32 _mother) public view returns(uint) { //internal\r\n        return  motherCount[_mother];\r\n    }\r\n\r\n     function getTotalSalaryBunny(uint32 _bunny) public view returns(uint) { //internal\r\n        return  totalSalaryBunny[_bunny];\r\n    }\r\n\r\n    function getRabbitMother( uint32 mother) public view returns(uint32[5]) {\r\n        return rabbitMother[mother];\r\n    }\r\n\r\n     function getRabbitMotherSumm(uint32 mother) public view returns(uint count) { //internal\r\n        for (uint m = 0; m < 5 ; m++) {\r\n            if(rabbitMother[mother][m] != 0 ) { \r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    function getDNK(uint32 bunnyid) public view returns(uint) { \r\n        return mapDNK[bunnyid];\r\n    }\r\n\r\n\r\n    function getTokenBunny(uint32 _bunny) public \r\n    view returns(uint32 mother, uint32 sire, uint birthblock, uint birthCount, uint birthLastTime, uint genome) { \r\n        mother = tokenBunny[_bunny].mother;\r\n        sire = tokenBunny[_bunny].sire;\r\n        birthblock = tokenBunny[_bunny].birthblock;\r\n        birthCount = tokenBunny[_bunny].birthCount;\r\n        birthLastTime = tokenBunny[_bunny].birthLastTime;\r\n        genome = tokenBunny[_bunny].genome;\r\n    }\r\n\r\n    function isUIntPublic() public view returns(bool) {\r\n        require(isPauseSave());\r\n        return true;\r\n    }\r\n\r\n    function getSex(uint32 _bunny) public view returns(bool) {\r\n        if(getRabbitSirePrice(_bunny) > 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getGenome(uint32 _bunny) public view returns( uint) { \r\n        return tokenBunny[_bunny].genome;\r\n    }\r\n\r\n    function getParent(uint32 _bunny) public view returns(uint32 mother, uint32 sire) { \r\n        mother = tokenBunny[_bunny].mother;\r\n        sire = tokenBunny[_bunny].sire;\r\n    }\r\n\r\n    function getBirthLastTime(uint32 _bunny) public view returns(uint) { \r\n        return tokenBunny[_bunny].birthLastTime;\r\n    }\r\n\r\n    function getBirthCount(uint32 _bunny) public view returns(uint) { \r\n        return tokenBunny[_bunny].birthCount;\r\n    }\r\n\r\n    function getBirthblock(uint32 _bunny) public view returns(uint) { \r\n        return tokenBunny[_bunny].birthblock;\r\n    }\r\n  \r\n\r\n    function getBunnyInfo(uint32 _bunny) public view returns(\r\n        uint32 mother,\r\n        uint32 sire,\r\n        uint birthblock,\r\n        uint birthCount,\r\n        uint birthLastTime,\r\n        bool role, \r\n        uint genome,\r\n        bool interbreed,\r\n        uint leftTime,\r\n        uint lastTime,\r\n        uint price,\r\n        uint motherSumm\r\n        ) { \r\n            role = getSex(_bunny);\r\n            mother = tokenBunny[_bunny].mother;\r\n            sire = tokenBunny[_bunny].sire;\r\n            birthblock = tokenBunny[_bunny].birthblock;\r\n            birthCount = tokenBunny[_bunny].birthCount;\r\n            birthLastTime = tokenBunny[_bunny].birthLastTime;\r\n            genome = tokenBunny[_bunny].genome;\r\n            motherSumm = getMotherCount(_bunny);\r\n            price = getRabbitSirePrice(_bunny);\r\n            lastTime = lastTime.add(birthLastTime);\r\n            if(lastTime <= now) {\r\n                interbreed = true;\r\n            } else {\r\n                leftTime = lastTime.sub(now);\r\n            }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPrivAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"rabbitSirePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoPause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mother\",\"type\":\"uint32\"},{\"name\":\"sire\",\"type\":\"uint32\"},{\"name\":\"birthblock\",\"type\":\"uint256\"},{\"name\":\"birthCount\",\"type\":\"uint256\"},{\"name\":\"birthLastTime\",\"type\":\"uint256\"},{\"name\":\"genome\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"DNK\",\"type\":\"uint256\"}],\"name\":\"setTokenBunny\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressAdmixture\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rabbitMother\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"motherCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"rabbitToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bunnyid\",\"type\":\"uint32\"}],\"name\":\"getDNK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getGiffBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_mother\",\"type\":\"uint32\"}],\"name\":\"getMotherCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"mother\",\"type\":\"uint32\"}],\"name\":\"getRabbitMotherSumm\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getSex\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getTotalSalaryBunny\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"},{\"name\":\"mother\",\"type\":\"uint32\"},{\"name\":\"sire\",\"type\":\"uint32\"}],\"name\":\"setParent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPauseSave\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"canYou\",\"type\":\"bool\"}],\"name\":\"setOwnerGennezise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"setRabbitSirePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"},{\"name\":\"birthLastTime\",\"type\":\"uint256\"}],\"name\":\"setBirthLastTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPromoPause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getParent\",\"outputs\":[{\"name\":\"mother\",\"type\":\"uint32\"},{\"name\":\"sire\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBunnyTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"totalSalaryBunny\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUIntPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getBirthLastTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"children\",\"type\":\"uint32\"},{\"name\":\"_m\",\"type\":\"uint32[5]\"}],\"name\":\"setRabbitMother\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"},{\"name\":\"birthCount\",\"type\":\"uint256\"}],\"name\":\"setBirthCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPauseSave\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"},{\"name\":\"blocked\",\"type\":\"bool\"}],\"name\":\"setGiffBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint32\"},{\"name\":\"mother\",\"type\":\"uint32\"},{\"name\":\"sire\",\"type\":\"uint32\"},{\"name\":\"birthblock\",\"type\":\"uint256\"},{\"name\":\"birthCount\",\"type\":\"uint256\"},{\"name\":\"birthLastTime\",\"type\":\"uint256\"},{\"name\":\"genome\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"DNK\",\"type\":\"uint256\"}],\"name\":\"relocateToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getOwnerGennezise\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBunny\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"getWhitelistCheck\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getGenome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getBirthblock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getTokenBunny\",\"outputs\":[{\"name\":\"mother\",\"type\":\"uint32\"},{\"name\":\"sire\",\"type\":\"uint32\"},{\"name\":\"birthblock\",\"type\":\"uint256\"},{\"name\":\"birthCount\",\"type\":\"uint256\"},{\"name\":\"birthLastTime\",\"type\":\"uint256\"},{\"name\":\"genome\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getRabbitSirePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"setTotalSalaryBunny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalBunny\",\"type\":\"uint256\"}],\"name\":\"setTotalBunny_id\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"},{\"name\":\"genome\",\"type\":\"uint256\"}],\"name\":\"setGenome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"allowedChangeSex\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerBunnies\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerCEO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getTokenOwner\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"list\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"},{\"name\":\"birthblock\",\"type\":\"uint256\"}],\"name\":\"setBirthblock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getBirthCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getAllowedChangeSex\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"mother\",\"type\":\"uint32\"}],\"name\":\"getRabbitMother\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getBunnyInfo\",\"outputs\":[{\"name\":\"mother\",\"type\":\"uint32\"},{\"name\":\"sire\",\"type\":\"uint32\"},{\"name\":\"birthblock\",\"type\":\"uint256\"},{\"name\":\"birthCount\",\"type\":\"uint256\"},{\"name\":\"birthLastTime\",\"type\":\"uint256\"},{\"name\":\"role\",\"type\":\"bool\"},{\"name\":\"genome\",\"type\":\"uint256\"},{\"name\":\"interbreed\",\"type\":\"bool\"},{\"name\":\"leftTime\",\"type\":\"uint256\"},{\"name\":\"lastTime\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"motherSumm\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"setMotherCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"},{\"name\":\"canBunny\",\"type\":\"bool\"}],\"name\":\"setAllowedChangeSex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPromoPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"},{\"name\":\"dnk\",\"type\":\"uint256\"}],\"name\":\"setDNK\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerMoney\",\"type\":\"address\"}],\"name\":\"transferOwnerMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"mother\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"summ\",\"type\":\"uint256\"}],\"name\":\"EmotherCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"SalaryBunny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"matron\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"sire\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"child\",\"type\":\"uint32\"}],\"name\":\"CreateChildren\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"BunnyDescription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"CoolduwnMother\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matronID\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"childID\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"dnk\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blocknumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"breed\",\"type\":\"uint256\"}],\"name\":\"NewBunny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"}]","ContractName":"Rabbit","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a00f20ac457fc6fbace27a59c56f8702f7ce51e9ff1ef6c763053f0097a9b3c1"}]}