{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract MigrationAgent {\r\n    function migrateFrom(address _from, uint256 _value);\r\n}\r\n\r\ncontract ABChainRTBtoken is StandardToken {\r\n  using SafeMath for uint256;\r\n\r\n  string public name = \"AB-CHAIN RTB token\";\r\n  string public symbol = \"RTB\";\r\n  uint256 public decimals = 18;\r\n  uint256 public INITIAL_SUPPLY = 100000000 * 1 ether;\r\n  uint256 public burnedCount = 0;\r\n  uint256 public burnedAfterSaleCount = 0;\r\n  address public contractOwner = 0;\r\n  address public migrationAgent = 0;\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n  event Migrate(address indexed migrator, uint256 value);\r\n  \r\n  function ABChainRTBtoken() {\r\n      burnedCount = 0;\r\n      burnedAfterSaleCount = 0;\r\n      totalSupply = INITIAL_SUPPLY;\r\n      balances[msg.sender] = INITIAL_SUPPLY;\r\n      contractOwner = msg.sender;\r\n  }\r\n  \r\n  function migrate() {\r\n        require(migrationAgent != 0);\r\n        uint256 _value = balances[msg.sender];\r\n        require(_value > 0);\r\n        burn(_value);\r\n        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\r\n        Migrate(msg.sender, _value);\r\n    }\r\n\r\n    function setMigrationAgent(address _agent) {\r\n        require(msg.sender == contractOwner);\r\n        migrationAgent = _agent;\r\n    }\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    burnedCount = burnedCount.add(_value);\r\n    Burn(burner, _value);\r\n    }\r\n  // only for burn after sale\r\n  function burnaftersale(uint256 _value) public {\r\n    require(_value <= balances[msg.sender]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    burnedAfterSaleCount = burnedAfterSaleCount.add(_value);\r\n    Burn(burner, _value);\r\n    }\r\n    \r\n    // only for lazy migration\r\n    function () payable {\r\n        require(migrationAgent != 0 && msg.value == 0);\r\n        migrate();\r\n    }\r\n}\r\n\r\n/* AB-CHAIN Network RTB payments processing smart-contract  */\r\ncontract ABChainNetContract_v5 {\r\n    using SafeMath for uint256;\r\n    \r\n    address public contractOwner = 0;\r\n    address public tokenAddress = 0xEC491c1088Eae992B7A214efB0a266AD0927A72A;\r\n    address public ABChainRevenueAddress = 0x651Ccecc133dEa9635c84FC2C17707Ee18729f62;\r\n    address public ABChainPBudgetsAddress = 0x5B16ce4534c1a746cffE95ae18083969e9e1F5e9;\r\n    uint256 public tokenBurningPercentage = 500; // 1 = 0.01%; 500 = 5% \r\n    uint256 public revenuePercentage = 500; // 1 = 0.01%; 500 = 5%\r\n    uint256 public processedRTBs = 0;\r\n    uint256 public burnedRTBs = 0;\r\n    uint256 public netRevenueRTBs = 0;\r\n    uint256 public publrsBudgRTBs = 0;\r\n    uint256 public processingCallsCount = 0;\r\n    \r\n    // RTBProcessing event\r\n    event RTBProcessing(\r\n        address indexed sender,\r\n        uint256 balanceBefore,\r\n        uint256 burned,\r\n        uint256 sendedToPBudgets,\r\n        uint256 sendedToRevenue,\r\n        address indexed curABChainRevenueAddress,\r\n        address indexed curABChainPBudgetsAddress,\r\n        uint256 curRevPerc,\r\n        uint256 curTokenBurningPerc,\r\n        address curContractOwner\r\n    );\r\n    \r\n    constructor () public {\r\n        contractOwner = msg.sender;\r\n    }\r\n    \r\n    function unprocessedRTBBalance() public view returns (uint256) {\r\n        return ABChainRTBtoken(tokenAddress).balanceOf(address(this));\r\n    }\r\n    \r\n    // change contract owner\r\n    function changeOwner(address _owner) public {\r\n        require(msg.sender == contractOwner);\r\n        contractOwner = _owner;\r\n    }\r\n    \r\n    // change the address of the token contract\r\n    function changeTokenAddress(address _tokenAddress) public {\r\n        require(msg.sender == contractOwner);\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n    \r\n    // change ABChain Revenue Address\r\n    function changeABChainRevenueAddress(address _ABChainRevenueAddress) public {\r\n        require(msg.sender == contractOwner);\r\n        ABChainRevenueAddress = _ABChainRevenueAddress;\r\n    }\r\n    \r\n    // change ABChainPBudgetsAddress\r\n    function changeABChainPBudgetsAddress(address _ABChainPBudgetsAddress) public {\r\n        require(msg.sender == contractOwner);\r\n        ABChainPBudgetsAddress = _ABChainPBudgetsAddress;\r\n    }\r\n    \r\n    // change tokenBurningPercentage\r\n    function changeTokenBurningPercentage(uint256 _tokenBurningPercentage) public {\r\n        require(msg.sender == contractOwner);\r\n        tokenBurningPercentage = _tokenBurningPercentage;\r\n    }\r\n    \r\n    // change revenuePercentage\r\n    function changeRevenuePercentage(uint256 _revenuePercentage) public {\r\n        require(msg.sender == contractOwner);\r\n        revenuePercentage = _revenuePercentage;\r\n    }\r\n    \r\n    // RTB-payments processing\r\n    function rtbPaymentsProcessing() public {\r\n        uint256 _balance = ABChainRTBtoken(tokenAddress).balanceOf(address(this));\r\n        require(_balance > 0);\r\n        \r\n        processingCallsCount = processingCallsCount.add(1);\r\n        \r\n        uint256 _forBurning = uint256(_balance.div(10000)).mul(tokenBurningPercentage);\r\n        \r\n        uint256 _forRevenue = uint256(_balance.div(10000)).mul(revenuePercentage);\r\n        \r\n        uint256 _forPBudgets = uint256(_balance.sub(_forBurning)).sub(_forRevenue);\r\n        \r\n        ABChainRTBtoken(tokenAddress).transfer(ABChainPBudgetsAddress, _forPBudgets);\r\n        \r\n        ABChainRTBtoken(tokenAddress).transfer(ABChainRevenueAddress, _forRevenue);\r\n        \r\n        ABChainRTBtoken(tokenAddress).burn(_forBurning);\r\n        \r\n        processedRTBs = processedRTBs.add(_balance);\r\n        burnedRTBs = burnedRTBs.add(_forBurning);\r\n        publrsBudgRTBs = publrsBudgRTBs.add(_forPBudgets);\r\n        netRevenueRTBs = netRevenueRTBs.add(_forRevenue);\r\n\r\n        emit RTBProcessing(\r\n            msg.sender,\r\n            _balance,\r\n            _forBurning,\r\n            _forPBudgets,\r\n            _forRevenue,\r\n            ABChainRevenueAddress,\r\n            ABChainPBudgetsAddress,\r\n            revenuePercentage,\r\n            tokenBurningPercentage,\r\n            contractOwner\r\n        );\r\n    }\r\n\r\n    // current contract version does not accept ethereum. RTB processing only :)\r\n    function () payable public {\r\n        require(msg.value == 0);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"rtbPaymentsProcessing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unprocessedRTBBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_revenuePercentage\",\"type\":\"uint256\"}],\"name\":\"changeRevenuePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"revenuePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ABChainRevenueAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"processedRTBs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"netRevenueRTBs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBurningPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ABChainRevenueAddress\",\"type\":\"address\"}],\"name\":\"changeABChainRevenueAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publrsBudgRTBs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ABChainPBudgetsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenBurningPercentage\",\"type\":\"uint256\"}],\"name\":\"changeTokenBurningPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnedRTBs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ABChainPBudgetsAddress\",\"type\":\"address\"}],\"name\":\"changeABChainPBudgetsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"processingCallsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balanceBefore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"burned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendedToPBudgets\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sendedToRevenue\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"curABChainRevenueAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"curABChainPBudgetsAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"curRevPerc\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"curTokenBurningPerc\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"curContractOwner\",\"type\":\"address\"}],\"name\":\"RTBProcessing\",\"type\":\"event\"}]","ContractName":"ABChainNetContract_v5","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2d64bb2fc696b0f6fcfac9e78592d98f15469e789e04d9947fcdf046aac1e6fd"}]}