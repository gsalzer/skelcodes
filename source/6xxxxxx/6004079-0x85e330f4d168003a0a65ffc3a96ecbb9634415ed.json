{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title GradusInvestmentPlatform\r\n*/\r\n\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n        public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n      public\r\n      returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n            allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract GRADtoken is StandardToken {\r\n    string public constant name = \"Gradus\";\r\n    string public constant symbol = \"GRAD\";\r\n    uint32 public constant decimals = 18;\r\n    uint256 public totalSupply;\r\n    uint256 public tokenBuyRate = 10000;\r\n    \r\n    mapping(address => bool   ) isInvestor;\r\n    address[] public arrInvestors;\r\n    \r\n    address public CrowdsaleAddress;\r\n    bool public lockTransfers = false;\r\n\r\n    event Mint (address indexed to, uint256  amount);\r\n    event Burn(address indexed burner, uint256 value);\r\n    \r\n    constructor(address _CrowdsaleAddress) public {\r\n        CrowdsaleAddress = _CrowdsaleAddress;\r\n    }\r\n  \r\n    modifier onlyOwner() {\r\n        /**\r\n         * only Crowdsale contract can run it\r\n         */\r\n        require(msg.sender == CrowdsaleAddress);\r\n        _;\r\n    }   \r\n\r\n    function setTokenBuyRate(uint256 _newValue) public onlyOwner {\r\n        tokenBuyRate = _newValue;\r\n    }\r\n\r\n    function addInvestor(address _newInvestor) internal {\r\n        if (!isInvestor[_newInvestor]){\r\n            isInvestor[_newInvestor] = true;\r\n            arrInvestors.push(_newInvestor);\r\n        }  \r\n    }\r\n\r\n    function getInvestorAddress(uint256 _num) public view returns(address) {\r\n        return arrInvestors[_num];\r\n    }\r\n\r\n    function getInvestorsCount() public view returns(uint256) {\r\n        return arrInvestors.length;\r\n    }\r\n\r\n     // Override\r\n    function transfer(address _to, uint256 _value) public returns(bool){\r\n        if (msg.sender != CrowdsaleAddress){\r\n            require(!lockTransfers, \"Transfers are prohibited\");\r\n        }\r\n        addInvestor(_to);\r\n        return super.transfer(_to,_value);\r\n    }\r\n\r\n     // Override\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool){\r\n        if (msg.sender != CrowdsaleAddress){\r\n            require(!lockTransfers, \"Transfers are prohibited\");\r\n        }\r\n        addInvestor(_to);\r\n        return super.transferFrom(_from,_to,_value);\r\n    }\r\n     \r\n    function mint(address _to, uint256 _value) public onlyOwner returns (bool){\r\n        balances[_to] = balances[_to].add(_value);\r\n        totalSupply = totalSupply.add(_value);\r\n        addInvestor(_to);\r\n        emit Mint(_to, _value);\r\n        emit Transfer(address(0), _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who]);\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n    \r\n    function lockTransfer(bool _lock) public onlyOwner {\r\n        lockTransfers = _lock;\r\n    }\r\n\r\n    /**\r\n     * function buys tokens from investors and burn it\r\n     */\r\n    function ReturnToken(uint256 _amount) public payable {\r\n        require (_amount > 0);\r\n        require (msg.sender != address(0));\r\n        \r\n        uint256 weiAmount = _amount.div(tokenBuyRate);\r\n        require (weiAmount > 0, \"Amount is less than the minimum value\");\r\n        require (address(this).balance >= weiAmount, \"Contract balance is empty\");\r\n        _burn(msg.sender, _amount);\r\n        msg.sender.transfer(weiAmount);\r\n    }\r\n\r\n    function() external payable {\r\n        // The token contract can receive ether for buy-back tokens\r\n    }  \r\n\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address candidate;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        candidate = newOwner;\r\n    }\r\n\r\n    function confirmOwnership() public {\r\n        require(candidate == msg.sender);\r\n        owner = candidate;\r\n        delete candidate;\r\n    }\r\n\r\n}\r\n\r\ncontract Dividend {\r\n    /**\r\n     * @title Contract receive ether, calculate profit and distributed it to investors\r\n     */\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public receivedDividends;\r\n    address public crowdsaleAddress;\r\n    GRADtoken public token;\r\n    CrowdSale public crowdSaleContract;\r\n    mapping (address => uint256) public divmap;\r\n    event PayDividends(address indexed investor, uint256 amount);\r\n\r\n    constructor(address _crowdsaleAddress, address _tokenAddress) public {\r\n        crowdsaleAddress = _crowdsaleAddress;\r\n        token = GRADtoken(_tokenAddress);\r\n        crowdSaleContract = CrowdSale(crowdsaleAddress);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        /**\r\n         * only Crowdsale contract can run it\r\n         */\r\n        require(msg.sender == crowdsaleAddress);\r\n        _;\r\n    }  \r\n\r\n    /** \r\n     * @dev function calculate dividends and store result in mapping divmap\r\n     * @dev stop all transfer before calculations\r\n     * k - coefficient\r\n     */    \r\n    function _CalcDiv() internal {\r\n        uint256 myAround = 1 ether;\r\n        uint256 i;\r\n        uint256 k;\r\n        address invAddress;\r\n        receivedDividends = receivedDividends.add(msg.value);\r\n\r\n        if (receivedDividends >= crowdSaleContract.hardCapDividends()){\r\n            uint256 lengthArrInvesotrs = token.getInvestorsCount();\r\n            crowdSaleContract.lockTransfer(true); \r\n            k = receivedDividends.mul(myAround).div(token.totalSupply());\r\n            uint256 myProfit;\r\n            \r\n            for (i = 0;  i < lengthArrInvesotrs; i++) {\r\n                invAddress = token.getInvestorAddress(i);\r\n                myProfit = token.balanceOf(invAddress).mul(k).div(myAround);\r\n                divmap[invAddress] = divmap[invAddress].add(myProfit);\r\n            }\r\n            crowdSaleContract.lockTransfer(false); \r\n            receivedDividends = 0;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * function pay dividends to investors\r\n     */\r\n    function Pay() public {\r\n        uint256 dividends = divmap[msg.sender];\r\n        require (dividends > 0);\r\n        require (dividends <= address(this).balance);\r\n        divmap[msg.sender] = 0;\r\n        msg.sender.transfer(dividends);\r\n        emit PayDividends(msg.sender, dividends);\r\n    } \r\n    \r\n    function killContract(address _profitOwner) public onlyOwner {\r\n        selfdestruct(_profitOwner);\r\n    }\r\n\r\n    /**\r\n     * fallback function can be used to receive funds and calculate dividends\r\n     */\r\n    function () external payable {\r\n        _CalcDiv();\r\n    }  \r\n\r\n}\r\n\r\n\r\n    /**\r\n     * @title CrowdSale contract for Gradus token\r\n     * https://github.com/chelbukhov/Gradus-smart-contract.git\r\n     */\r\ncontract CrowdSale is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    address myAddress = this;\r\n    \r\n    GRADtoken public token = new GRADtoken(myAddress);\r\n    Dividend public dividendContract = new Dividend(myAddress, address(token));\r\n    \r\n    // address where funds are collected\r\n    address public wallet = 0x0;\r\n\r\n    //tokenSaleRate don't change\r\n    uint256 public tokenSaleRate; \r\n\r\n    // limit for activate function calcucate dividends\r\n    uint256 public hardCapDividends;\r\n    \r\n    /**\r\n     * Current funds during this period of sale\r\n     * and the upper limit for this period of sales\r\n     */\r\n    uint256 public currentFunds = 0;\r\n    uint256 public hardCapCrowdSale = 0;\r\n    bool private isSaleActive;\r\n\r\n    /**\r\n    * event for token purchase logging\r\n    * @param _to who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n    event TokenSale(address indexed _to, uint256 value, uint256 amount);\r\n\r\n    constructor() public {\r\n        /**\r\n         * @dev tokenRate is rate tokens per 1 ether. don't change.\r\n         */\r\n        tokenSaleRate = 10000;\r\n\r\n        /**\r\n         * @dev limits in ether for contracts CrowdSale and Dividends\r\n         */\r\n        hardCapCrowdSale = 10 * (1 ether);\r\n        hardCapDividends = 10 * (1 ether);\r\n\r\n        /**\r\n         * @dev At start stage profit wallet is owner wallet. Must be changed after owner contract change\r\n         */\r\n        wallet = msg.sender;\r\n    }\r\n\r\n\r\n    modifier restricted(){\r\n        require(msg.sender == owner || msg.sender == address(dividendContract));\r\n        _;\r\n    }\r\n\r\n    function setNewDividendContract(address _newContract) public onlyOwner {\r\n        dividendContract = Dividend(_newContract);\r\n    }\r\n\r\n\r\n    /**\r\n     * function set upper limit to receive funds\r\n     * value entered in whole ether. 10 = 10 ether\r\n    */\r\n    function setHardCapCrowdSale(uint256 _newValue) public onlyOwner {\r\n        hardCapCrowdSale = _newValue.mul(1 ether);\r\n        currentFunds = 0;\r\n    }\r\n\r\n\r\n    /**\r\n     * Enter Amount in whole ether. 1 = 1 ether\r\n     */\r\n    function setHardCapDividends(uint256 _newValue) public onlyOwner {\r\n        hardCapDividends = _newValue.mul(1 ether);\r\n    }\r\n    \r\n    function setTokenBuyRate(uint256 _newValue) public onlyOwner {\r\n        token.setTokenBuyRate(_newValue);\r\n    }\r\n\r\n    function setProfitAddress(address _newWallet) public onlyOwner {\r\n        require(_newWallet != address(0),\"Invalid address\");\r\n        wallet = _newWallet;\r\n    }\r\n\r\n    /**\r\n     * function sale token to investor\r\n    */\r\n    function _saleTokens() internal {\r\n        require(msg.value >= 10**16, \"Minimum value is 0.01 ether\");\r\n        require(hardCapCrowdSale >= currentFunds.add(msg.value), \"Upper limit on fund raising exceeded\");      \r\n        require(msg.sender != address(0), \"Address sender is empty\");\r\n        require(wallet != address(0),\"Enter address profit wallet\");\r\n        require(isSaleActive, \"Set saleStatus in true\");\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = weiAmount.mul(tokenSaleRate);\r\n\r\n        token.mint(msg.sender, tokens);\r\n        emit TokenSale(msg.sender, weiAmount, tokens);\r\n        currentFunds = currentFunds.add(msg.value);\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n  \r\n    function lockTransfer(bool _lock) public restricted {\r\n        /**\r\n         * @dev This function may be started from owner or dividendContract\r\n         */\r\n        token.lockTransfer(_lock);\r\n    }\r\n\r\n  //disable if enabled\r\n    function disableSale() onlyOwner() public returns (bool) {\r\n        require(isSaleActive == true);\r\n        isSaleActive = false;\r\n        return true;\r\n    }\r\n\r\n  // enable if diabled\r\n    function enableSale()  onlyOwner() public returns (bool) {\r\n        require(isSaleActive == false);\r\n        isSaleActive = true;\r\n        return true;\r\n    }\r\n\r\n  // retruns true if sale is currently active\r\n    function saleStatus() public view returns (bool){\r\n        return isSaleActive;\r\n    }\r\n\r\n    /**\r\n     * @dev  function kill Dividend contract and withdraw all funds to wallet\r\n     */\r\n    function killDividentContract(uint256 _kod) public onlyOwner {\r\n        require(_kod == 666);\r\n        dividendContract.killContract(wallet);\r\n    }\r\n\r\n  // fallback function can be used to sale tokens\r\n    function () external payable {\r\n        _saleTokens();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"receivedDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Pay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"divmap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_profitOwner\",\"type\":\"address\"}],\"name\":\"killContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdsaleAddress\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayDividends\",\"type\":\"event\"}]","ContractName":"Dividend","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007ed7fe41f0e82f1bc95fd59b7cc1482f6ec3f4f200000000000000000000000070ab45b8dced0c57e5bf1b0cac9cebc7301e35a0","Library":"","SwarmSource":"bzzr://d50eedd43836ce7a804e981f38f1418c6873cd0bb9dfe049c55386137925ca57"}]}