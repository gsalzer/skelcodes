{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  // The token being sold\r\n  IERC20 public _token;\r\n\r\n  // Address where funds are collected\r\n  address public _wallet;\r\n\r\n  // How many token units a buyer gets per wei.\r\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n  // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\r\n  // 1 wei will give you 1 unit, or 0.001 TOK.\r\n  uint256 public _rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 public _weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokensPurchased(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @param rate Number of token units a buyer gets per wei\r\n   * @dev The rate is the conversion between wei and the smallest and indivisible\r\n   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\r\n   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\r\n   * @param wallet Address where collected funds will be forwarded to\r\n   * @param token Address of the token being sold\r\n   */\r\n  constructor(uint256 rate, address wallet, IERC20 token) public {\r\n    require(rate > 0);\r\n    require(wallet != address(0));\r\n    require(token != address(0));\r\n\r\n    _rate = rate;\r\n    _wallet = wallet;\r\n    _token = token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(beneficiary, tokens);\r\n    emit TokensPurchased(\r\n      msg.sender,\r\n      beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _updatePurchasingState(beneficiary, weiAmount);\r\n\r\n    _forwardFunds();\r\n    _postValidatePurchase(beneficiary, weiAmount);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\r\n   *   super._preValidatePurchase(beneficiary, weiAmount);\r\n   *   require(weiRaised().add(weiAmount) <= cap);\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n  {\r\n    require(beneficiary != address(0));\r\n    require(weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _token.transferFrom(owner,beneficiary, tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param beneficiary Address receiving the tokens\r\n   * @param tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(beneficiary, tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param beneficiary Address receiving the tokens\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    return weiAmount.mul(_rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    _wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title TimedCrowdsale\r\n * @dev Crowdsale accepting contributions only within a time frame.\r\n */\r\ncontract TimedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public _openingTime;\r\n  uint256 public _closingTime;\r\n\r\n  /**\r\n   * @dev Reverts if not in crowdsale time range.\r\n   */\r\n  modifier onlyWhileOpen {\r\n    require(isOpen());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor, takes crowdsale opening and closing times.\r\n   * @param openingTime Crowdsale opening time\r\n   * @param closingTime Crowdsale closing time\r\n   */\r\n  constructor(uint256 openingTime, uint256 closingTime) public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(openingTime >= block.timestamp);\r\n    require(closingTime >= openingTime);\r\n\r\n    _openingTime = openingTime;\r\n    _closingTime = closingTime;\r\n  }\r\n\r\n\r\n  /**\r\n   * @return true if the crowdsale is open, false otherwise.\r\n   */\r\n  function isOpen() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n   * @return Whether crowdsale period has elapsed\r\n   */\r\n  function hasClosed() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp > _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring to be within contributing period\r\n   * @param beneficiary Token purchaser\r\n   * @param weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal\r\n    onlyWhileOpen\r\n  {\r\n    super._preValidatePurchase(beneficiary, weiAmount);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title EscrowAccountCrowdsale.\r\n */\r\ncontract EscrowAccountCrowdsale is TimedCrowdsale {\r\n  using SafeMath for uint256;\r\n  EscrowVault public vault;\r\n  /**\r\n   * @dev Constructor, creates EscrowAccountCrowdsale.\r\n   */\r\n  function EscrowAccountCrowdsale() public {\r\n    vault = new EscrowVault(_wallet);\r\n  }\r\n  /**\r\n   * @dev Investors can claim refunds here if whitelisted is unsuccessful\r\n   */\r\n  function returnInvestoramount(address _beneficiary, uint256 _percentage) internal onlyOwner {\r\n    vault.refund(_beneficiary);\r\n  }\r\n\r\n /**\r\n   * @dev Investors can claim refunds here if whitelisted is unsuccessful\r\n   */\r\n  function adminChargeForDebit(address _beneficiary, uint256 _adminCharge) internal onlyOwner {\r\n    vault.debitForFailed(_beneficiary,_adminCharge);\r\n  }\r\n\r\n  function afterWhtelisted(address _beneficiary) internal onlyOwner{\r\n      vault.closeAfterWhitelisted(_beneficiary);\r\n  }\r\n  \r\n  function afterWhtelistedBuy(address _beneficiary) internal {\r\n      vault.closeAfterWhitelisted(_beneficiary);\r\n  }\r\n  /**\r\n   * @dev Overrides Crowdsale fund forwarding, sending funds to vault.\r\n   */\r\n  function _forwardFunds() internal {\r\n    vault.deposit.value(msg.value)(msg.sender);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title EscrowVault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if whitelist fails,\r\n * and forwarding it if whitelist is successful.\r\n */\r\ncontract EscrowVault is Ownable {\r\n  using SafeMath for uint256;\r\n  mapping (address => uint256) public deposited;\r\n  address public wallet;\r\n  event Closed();\r\n  event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n  /**\r\n   * @param _wallet Vault address\r\n   */\r\n  function EscrowVault(address _wallet) public {\r\n    require(_wallet != address(0));\r\n    wallet = _wallet;   \r\n  }\r\n  /**\r\n   * @param investor Investor address\r\n   */\r\n  function deposit(address investor) onlyOwner  payable {\r\n    deposited[investor] = deposited[investor].add(msg.value);\r\n  }\r\n  \r\n  /**\r\n   * @dev Transfers deposited amount to wallet address after verification is completed.\r\n   * @param _beneficiary depositor address.\r\n   */\r\n  function closeAfterWhitelisted(address _beneficiary) onlyOwner public { \r\n    uint256 depositedValue = deposited[_beneficiary];\r\n    deposited[_beneficiary] = 0;\r\n    wallet.transfer(depositedValue);\r\n  }\r\n  \r\n  /**\r\n   * @param investor Investor address\r\n   */\r\n  function debitForFailed(address investor, uint256 _debit)public onlyOwner  {\r\n     uint256 depositedValue = deposited[investor];\r\n     depositedValue=depositedValue.sub(_debit);\r\n     wallet.transfer(_debit);\r\n     deposited[investor] = depositedValue;\r\n  }\r\n   \r\n  /**\r\n   * @dev \r\n   * @param investor Investor address\r\n   */\r\n  function refund(address investor)public onlyOwner  {\r\n    uint256 depositedValue = deposited[investor];\r\n    investor.transfer(depositedValue);\r\n     emit Refunded(investor, depositedValue);\r\n     deposited[investor] = 0;\r\n  }\r\n}\r\n\r\n/**\r\n * @title PostDeliveryCrowdsale\r\n * @dev Crowdsale that locks tokens from withdrawal until it whitelisted and crowdsale ends.\r\n */\r\ncontract PostDeliveryCrowdsale is TimedCrowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public _balances;\r\n\r\n  /**\r\n   * @dev Withdraw tokens only after whitelisted ends and after crowdsale ends.\r\n   */\r\n  function withdrawTokens() public {\r\n   require(hasClosed());\r\n    uint256 amount = _balances[msg.sender];\r\n    require(amount > 0);\r\n    _balances[msg.sender] = 0;\r\n    _deliverTokens(msg.sender, amount);\r\n  }\r\n  \r\n   /**\r\n    * @dev Debits token for the failed verification\r\n    * @param _beneficiary address from which tokens debited\r\n    * @param _token amount of tokens to be debited\r\n    */\r\n    \r\n   function failedWhitelistForDebit(address _beneficiary,uint256 _token) internal  {\r\n    require(_beneficiary != address(0));\r\n    uint256 amount = _balances[_beneficiary];\r\n    _balances[_beneficiary] = amount.sub(_token);\r\n  }\r\n  \r\n   /**\r\n    * @dev debits entire tokens after refund, if verification completely failed\r\n    * @param _beneficiary address from which tokens debited\r\n    */\r\n   function failedWhitelist(address _beneficiary) internal  {\r\n    require(_beneficiary != address(0));\r\n    uint256 amount = _balances[_beneficiary];\r\n    _balances[_beneficiary] = 0;\r\n  }\r\n  \r\n  function getInvestorDepositAmount(address _investor) public constant returns(uint256 paid){\r\n     return _balances[_investor];\r\n  }\r\n\r\n  /**\r\n   * @dev Overrides parent by storing balances instead of issuing tokens right away.\r\n   * @param _beneficiary Token purchaser\r\n   * @param _tokenAmount Amount of tokens purchased\r\n   */\r\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n    _balances[_beneficiary] = _balances[_beneficiary].add(_tokenAmount);\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract BitcoinageCrowdsale is TimedCrowdsale,EscrowAccountCrowdsale,PostDeliveryCrowdsale {\r\n\r\n enum Stage {KYC_FAILED, KYC_SUCCESS,AML_FAILED, AML_SUCCESS} \t\r\n  //stage PreSale or PublicSale\r\n  enum Phase {PRESALE, PUBLICSALE}\r\n  //stage ICO\r\n  Phase public phase;\r\n \r\n  uint256 private constant DECIMALFACTOR = 10**uint256(18);\r\n  uint256 public _totalSupply=200000000 * DECIMALFACTOR;\r\n  uint256 public presale=5000000* DECIMALFACTOR;\r\n  uint256 public publicsale=110000000* DECIMALFACTOR;\r\n  uint256 public teamAndAdvisorsAndBountyAllocation = 12000000 * DECIMALFACTOR;\r\n  uint256 public operatingBudgetAllocation = 5000000 * DECIMALFACTOR;\r\n  uint256 public tokensVested = 28000000 * DECIMALFACTOR;\r\n \r\n  struct whitelisted{\r\n       Stage  stage;\r\n }\r\n  uint256 public adminCharge=0.025 ether;\r\n  uint256 public minContribAmount = 0.2 ether; // min invesment\r\n  mapping(address => whitelisted) public whitelist;\r\n  // How much ETH each address has invested to this crowdsale\r\n  mapping (address => uint256) public investedAmountOf;\r\n    // How many distinct addresses have invested\r\n  uint256 public investorCount;\r\n    // decimalFactor\r\n \r\n  event updateRate(uint256 tokenRate, uint256 time);\r\n  \r\n   /**\r\n \t* @dev BitcoinageCrowdsale is a base contract for managing a token crowdsale.\r\n \t* BitcoinageCrowdsale have a start and end timestamps, where investors can make\r\n \t* token purchases and the crowdsale will assign them tokens based\r\n \t* on a token per ETH rate. Funds collected are forwarded to a wallet\r\n \t* as they arrive.\r\n \t*/\r\n  \r\n function BitcoinageCrowdsale(uint256 _starttime, uint256 _endTime, uint256 _rate, address _wallet,IERC20 _token)\r\n  TimedCrowdsale(_starttime,_endTime)Crowdsale(_rate, _wallet,_token)\r\n  {\r\n      phase = Phase.PRESALE;\r\n  }\r\n    \r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n  \r\n  /**\r\n   * @dev token purchased on sending ether\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable onlyWhileOpen{\r\n    require(_beneficiary != address(0));\r\n    require(validPurchase());\r\n  \r\n    uint256 weiAmount = msg.value;\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(_rate);\r\n     if(phase==Phase.PRESALE){\r\n        assert(presale>=tokens);\r\n        presale=presale.sub(tokens);\r\n    }else{\r\n        assert(publicsale>=tokens);\r\n        publicsale=publicsale.sub(tokens);\r\n    }\r\n    \r\n     _forwardFunds();\r\n         _processPurchase(_beneficiary, tokens);\r\n    if(investedAmountOf[msg.sender] == 0) {\r\n           // A new investor\r\n           investorCount++;\r\n        }\r\n        // Update investor\r\n      investedAmountOf[msg.sender] = investedAmountOf[msg.sender].add(weiAmount);\r\n        \r\n      if(whitelist[_beneficiary].stage==Stage.AML_SUCCESS){\r\n                afterWhtelistedBuy(_beneficiary);\r\n      }\r\n      \r\n  }\r\n   \r\n    function validPurchase() internal constant returns (bool) {\r\n    bool minContribution = minContribAmount <= msg.value;\r\n    return  minContribution;\r\n  }\r\n  \r\n\r\n\r\n /**\r\n   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\r\n   */\r\n  modifier isWhitelisted(address _beneficiary) {\r\n    require(whitelist[_beneficiary].stage==Stage.AML_SUCCESS);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Adds single address to whitelist.\r\n   * @param _beneficiary Address to be added to the whitelist\r\n   */\r\n  function addToWhitelist(address _beneficiary,uint256 _stage) external onlyOwner {\r\n     require(_beneficiary != address(0));\r\n     if(_stage==1){\r\n         \r\n         failedWhitelistForDebit(_beneficiary,_rate.mul(adminCharge));\r\n         adminChargeForDebit(_beneficiary,adminCharge);\r\n         whitelist[_beneficiary].stage=Stage.KYC_FAILED;\r\n         uint256 value=investedAmountOf[_beneficiary];\r\n         value=value.sub(adminCharge);\r\n         investedAmountOf[_beneficiary]=value;\r\n         \r\n     }else if(_stage==2){\r\n         \r\n         whitelist[_beneficiary].stage=Stage.KYC_SUCCESS;\r\n         \r\n     }else if(_stage==3){\r\n         \r\n         whitelist[_beneficiary].stage=Stage.AML_FAILED;\r\n         returnInvestoramount(_beneficiary,adminCharge);\r\n         failedWhitelist(_beneficiary);\r\n         investedAmountOf[_beneficiary]=0;\r\n         \r\n     }else if(_stage==4){\r\n         \r\n         whitelist[_beneficiary].stage=Stage.AML_SUCCESS;\r\n         afterWhtelisted( _beneficiary); \r\n    \r\n     }\r\n  }\r\n \r\n  /**\r\n   * @dev Withdraw tokens only after Investors added into whitelist .\r\n   */\r\n  function withdrawTokens() public isWhitelisted(msg.sender)  {\r\n    uint256 amount = _balances[msg.sender];\r\n    require(amount > 0);\r\n    _deliverTokens(msg.sender, amount);\r\n    _balances[msg.sender] = 0;\r\n  }\r\n  \r\n /**\r\n * @dev Change crowdsale ClosingTime\r\n * @param  _endTime is End time in Seconds\r\n */\r\n  function changeEndtime(uint256 _endTime) public onlyOwner {\r\n    require(_endTime > 0); \r\n    _closingTime = _endTime;\r\n  }\r\n    \r\n    /**\r\n * @dev Change crowdsale OpeningTime\r\n * @param  _startTime is End time in Seconds\r\n */\r\n  function changeStarttime(uint256 _startTime) public onlyOwner {\r\n    require(_startTime > 0); \r\n    _openingTime = _startTime;\r\n  }\r\n    \r\n /**\r\n   * @dev Change Stage.\r\n   * @param _rate for ETH Per Token\r\n   */\r\n  function changeStage(uint256 _rate) public onlyOwner {\r\n     require(_rate>0);\r\n     _rate=_rate;\r\n     phase=Phase.PUBLICSALE;\r\n  }\r\n\r\n /**\r\n * @dev Change Token rate per ETH\r\n * @param  _rate is set the current rate of AND Token\r\n */\r\n  function changeRate(uint256 _rate) public onlyOwner {\r\n    require(_rate > 0); \r\n    _rate = _rate;\r\n    emit updateRate(_rate,block.timestamp);\r\n  }\r\n  \r\n /**\r\n   * @dev Change adminCharge Amount.\r\n   * @param _adminCharge for debit ETH amount\r\n   */\r\n  function changeAdminCharge(uint256 _adminCharge) public onlyOwner {\r\n     require(_adminCharge > 0);\r\n     adminCharge=_adminCharge;\r\n  }\r\n  \r\n    \r\n /**\r\n   * @dev transfer tokens to advisor and bounty team.\r\n   * @param to for recipiant address\r\n   * @param tokens is amount of tokens\r\n   */\r\n  \r\n    function transferTeamAndAdvisorsAndBountyAllocation  (address to, uint256 tokens) public onlyOwner {\r\n         require (\r\n            to != 0x0 && tokens > 0 && teamAndAdvisorsAndBountyAllocation >= tokens\r\n         );\r\n        _deliverTokens(to, tokens);\r\n         teamAndAdvisorsAndBountyAllocation = teamAndAdvisorsAndBountyAllocation.sub(tokens);\r\n    }\r\n     \r\n     /**\r\n   * @dev transfer vested tokens.\r\n   * @param to for recipiant address\r\n   * @param tokens is amount of tokens\r\n   */\r\n     \r\n     function transferTokensVested(address to, uint256 tokens) public onlyOwner {\r\n         require (\r\n            to != 0x0 && tokens > 0 && tokensVested >= tokens\r\n         );\r\n        _deliverTokens(to, tokens);\r\n         tokensVested = tokensVested.sub(tokens);\r\n     }\r\n     \r\n      /**\r\n   * @dev transfer tokens to operating team.\r\n   * @param to for recipiant address\r\n   * @param tokens is amount of tokens\r\n   */\r\n     \r\n     function transferOperatingBudgetAllocation(address to, uint256 tokens) public onlyOwner {\r\n         require (\r\n            to != 0x0 && tokens > 0 && operatingBudgetAllocation >= tokens\r\n         );\r\n        _deliverTokens(to, tokens);\r\n         operatingBudgetAllocation = operatingBudgetAllocation.sub(tokens);\r\n     }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"operatingBudgetAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"changeStarttime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferOperatingBudgetAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_stage\",\"type\":\"uint256\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAndAdvisorsAndBountyAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferTeamAndAdvisorsAndBountyAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changeEndtime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensVested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"stage\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adminCharge\",\"type\":\"uint256\"}],\"name\":\"changeAdminCharge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getInvestorDepositAmount\",\"outputs\":[{\"name\":\"paid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferTokensVested\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_starttime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BitcoinageCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005bd30bd2000000000000000000000000000000000000000000000000000000005bfb8be00000000000000000000000000000000000000000000000000000000000000b7500000000000000000000000077c399cdf8fed6ef3afbfd9fe454a16db0bb441a000000000000000000000000bd725c90b947222af7cdb31fe7bc74db39a7352c","Library":"","SwarmSource":"bzzr://aff4784e64eb67440b513dfd0dd6786f36dbe247345224f03fedebc76dd64f08"}]}