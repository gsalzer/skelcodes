{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n// EthBet betting games\r\n\r\n\r\ncontract EthBet {\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    balances[address(this)] = 0;\r\n    lockedFunds = 0;\r\n  }\r\n\r\n  function() public payable {\r\n    require(msg.data.length == 0, \"Not in use\");\r\n  }\r\n\r\n  address public owner;\r\n  // The address corresponding to a private key used to sign placeBet commits.\r\n  address public secretSigner = 0x87cF6EdB672Fe969d8B65e9D501e246B91DDF8e1;\r\n  bool public isActive = true;\r\n  uint public totalPlayableFunds;\r\n  uint public lockedFunds;\r\n\r\n  uint HOUSE_EDGE_PERCENT = 2;\r\n  uint REFERRER_BONUS_PERCENT = 1;\r\n  uint REFEREE_FIRST_TIME_BONUS = 0.01 ether;\r\n  uint HOUSE_EDGE_MIN_AMOUNT = 0.0003 ether;\r\n\r\n  uint MINBET = 0.01 ether;\r\n  uint MAXBET = 1 ether;\r\n  uint constant MAX_MODULO = 100;\r\n  uint constant MAX_BET_MASK = 99;\r\n  uint constant BET_EXPIRATION_BLOCKS = 250;\r\n\r\n  mapping(address => uint) balances;\r\n  mapping(address => address) referrers;\r\n  address[] playerAddresses; \r\n\r\n  modifier ownerOnly {\r\n    require(msg.sender == owner, \"Ownly Owner\");\r\n    _;\r\n  }\r\n\r\n\r\n  modifier runWhenActiveOnly {\r\n    require(isActive,\"Only Active\");\r\n    _;\r\n  }\r\n\r\n  modifier runWhenNotActiveOnly {\r\n    require(!isActive,\"Only Inactive\");\r\n    _;\r\n  }\r\n\r\n  modifier validBetAmountOnly(uint amount) {\r\n    require(amount >= MINBET && amount < MAXBET && amount < totalPlayableFunds,\"Invalid betAmount\");\r\n    _;\r\n  }\r\n\r\n  event Withdrawal(address benificiary, uint amount);\r\n  event ReceivedFund(address benificiary, uint amount);\r\n\r\n  event RefererSet(address player, address referrer);\r\n  event WinBet(address better, uint betAmount, uint winAmount, uint currentBalance);\r\n  event LoseBet(address better, uint betAmount, uint loseAmount, uint currentBalance);\r\n\r\n  event Active();\r\n  event Deactive();\r\n\r\n  event Destroyed();\r\n  event NewPlayer(address[] players);\r\n  event ReferralFailedPayout(address receiver, uint amount);\r\n  event DestroyFailedPayout(address receiver, uint amount);\r\n\r\n  /**\r\n   * Ownable\r\n   */\r\n\r\n  function transferOwnership(address _newOwner) public ownerOnly {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0), \"Invalid Address\");\r\n    owner = _newOwner;\r\n  }\r\n\r\n  // See comment for \"secretSigner\" variable.\r\n  function setSecretSigner(address newSecretSigner) external ownerOnly {\r\n    secretSigner = newSecretSigner;\r\n  }\r\n\r\n\r\n  /**\r\n   * Pausable\r\n   */\r\n  function toggleActive() public ownerOnly {\r\n    isActive = !isActive;\r\n    if (isActive)\r\n      emit Active();\r\n    else\r\n      emit Deactive();\r\n  }\r\n\r\n  /**\r\n   * Destructible\r\n   */\r\n  function destroy() public ownerOnly {\r\n    emit Destroyed();\r\n    payOutAllBalanceBeforeDestroy();\r\n    selfdestruct(owner);\r\n  }\r\n\r\n  function destroyAndSend(address _recipient) public ownerOnly {\r\n    emit Destroyed();\r\n    payOutAllBalanceBeforeDestroy();\r\n    selfdestruct(_recipient);\r\n  }\r\n\r\n  /**\r\n   * Readable\r\n   */\r\n\r\n  event LoggingData(uint contractBalance, uint totalHouseEdge, uint totalPlayableFunds);\r\n\r\n  function logData() external {\r\n    emit LoggingData(\r\n      address(this).balance,\r\n      balances[address(this)],\r\n      totalPlayableFunds\r\n    );\r\n  } \r\n\r\n  /**\r\n   * Editable\r\n   */\r\n  \r\n  function editBetData(\r\n    uint _houseEdgePercent, \r\n    uint _houseEdgeMin,\r\n    uint _refererBonusPercent,\r\n    uint _referreeFirstTimeBonus,\r\n    uint _minBet,\r\n    uint _maxBet) external ownerOnly {\r\n\r\n    HOUSE_EDGE_PERCENT = _houseEdgePercent;\r\n    HOUSE_EDGE_MIN_AMOUNT = _houseEdgeMin;\r\n    REFERRER_BONUS_PERCENT = _refererBonusPercent;\r\n    REFEREE_FIRST_TIME_BONUS = _referreeFirstTimeBonus;\r\n\r\n    MINBET = _minBet;\r\n    MAXBET = _maxBet;\r\n  }\r\n\r\n  /**\r\n   * Contract external functions\r\n   */\r\n\r\n  function playBalance(\r\n    uint betValue, \r\n    uint betMask, \r\n    uint modulo, \r\n    uint commitLastBlock, \r\n    bytes32 commit, \r\n    bytes32 r, \r\n    bytes32 s, \r\n    uint8 v) external runWhenActiveOnly validBetAmountOnly(betValue) {\r\n\r\n    validateCommit(commitLastBlock, commit, r, s, v);\r\n    \r\n    uint _possibleWinAmount;\r\n    uint _referrerBonus;\r\n    uint _houseEdge;\r\n    bool _isWin;\r\n    \r\n    (_possibleWinAmount, _referrerBonus, _houseEdge, _isWin) = play(msg.sender, betValue, betMask, modulo, commit);\r\n    settleBet(msg.sender, betValue, _possibleWinAmount, _referrerBonus, _houseEdge, _isWin, true);\r\n  }\r\n\r\n  function playTopUp(\r\n    uint betMask, \r\n    uint modulo, \r\n    uint commitLastBlock, \r\n    bytes32 commit, \r\n    bytes32 r, \r\n    bytes32 s, \r\n    uint8 v) external payable  runWhenActiveOnly validBetAmountOnly(msg.value) {\r\n\r\n    validateCommit(commitLastBlock, commit, r, s, v);\r\n\r\n    uint _possibleWinAmount;\r\n    uint _referrerBonus;\r\n    uint _houseEdge;\r\n    bool _isWin;\r\n\r\n    (_possibleWinAmount, _referrerBonus, _houseEdge, _isWin) = play(msg.sender, msg.value, betMask, modulo, commit);\r\n    settleBet(msg.sender, msg.value, _possibleWinAmount, _referrerBonus, _houseEdge, _isWin, false);\r\n  }\r\n\r\n  function playFirstTime(\r\n    address referrer, \r\n    uint betMask, \r\n    uint modulo, \r\n    uint commitLastBlock, \r\n    bytes32 commit, \r\n    bytes32 r, \r\n    bytes32 s, \r\n    uint8 v) external payable runWhenActiveOnly validBetAmountOnly(msg.value) {\r\n\r\n    validateCommit(commitLastBlock, commit, r, s, v);\r\n    setupFirstTimePlayer(msg.sender);\r\n\r\n    uint _betAmount = msg.value;\r\n    if(referrer != address(0) && referrer != msg.sender && referrers[msg.sender] == address(0)) {\r\n      _betAmount += REFEREE_FIRST_TIME_BONUS; \r\n      setReferrer(msg.sender, referrer);\r\n    }\r\n    else\r\n      setReferrer(msg.sender, address(this));\r\n\r\n    uint _possibleWinAmount;\r\n    uint _referrerBonus;\r\n    uint _houseEdge;\r\n    bool _isWin;\r\n\r\n    (_possibleWinAmount, _referrerBonus, _houseEdge, _isWin) = play(msg.sender, _betAmount, betMask, modulo, commit);\r\n    settleBet(msg.sender, _betAmount, _possibleWinAmount, _referrerBonus, _houseEdge, _isWin, false);\r\n  }\r\n\r\n  function playSitAndGo(\r\n    uint betMask, \r\n    uint modulo, \r\n    uint commitLastBlock, \r\n    bytes32 commit, \r\n    bytes32 r, \r\n    bytes32 s, \r\n    uint8 v) external payable  runWhenActiveOnly validBetAmountOnly(msg.value) {\r\n\r\n    validateCommit(commitLastBlock, commit, r, s, v);\r\n\r\n    uint _possibleWinAmount;\r\n    uint _referrerBonus;\r\n    uint _houseEdge;\r\n    bool _isWin;\r\n\r\n    (_possibleWinAmount, _referrerBonus, _houseEdge, _isWin) = play(msg.sender, msg.value, betMask, modulo, commit);\r\n    settleBetAutoWithdraw(msg.sender, msg.value, _possibleWinAmount, _referrerBonus, _houseEdge, _isWin);\r\n  }\r\n\r\n  function withdrawFunds() external {\r\n    require(balances[msg.sender] > 0, \"Not enough balance\");\r\n    uint _amount = balances[msg.sender];\r\n    balances[msg.sender] = 0;\r\n    msg.sender.transfer(_amount);\r\n    emit Withdrawal(msg.sender, _amount);\r\n  }\r\n\r\n  function withdrawForOperationalCosts(uint amount) external ownerOnly {\r\n    require(amount < totalPlayableFunds, \"Amount needs to be smaller than total fund\");\r\n    totalPlayableFunds -= amount;\r\n    msg.sender.transfer(amount);\r\n  }\r\n\r\n  function donateFunds() external payable {\r\n    require(msg.value > 0, \"Please be more generous!!\");\r\n    uint _oldtotalPlayableFunds = totalPlayableFunds;\r\n    totalPlayableFunds += msg.value;\r\n\r\n    assert(totalPlayableFunds >= _oldtotalPlayableFunds);\r\n  }\r\n\r\n  function topUp() external payable {\r\n    require(msg.value > 0,\"Topup valu needs to be greater than 0\");\r\n    balances[msg.sender] += msg.value;\r\n  }\r\n\r\n  function getBalance() external view returns(uint) {\r\n    return balances[msg.sender];\r\n  }\r\n\r\n  /**\r\n   * Conract interal functions\r\n   */\r\n\r\n\r\n  function validateCommit(uint commitLastBlock, bytes32 commit, bytes32 r, bytes32 s, uint8 v) internal view {\r\n    require(block.number <= commitLastBlock, \"Commit has expired.\");\r\n    bytes32 signatureHash = keccak256(abi.encodePacked(commitLastBlock, commit));\r\n    require(secretSigner == ecrecover(signatureHash, v, r, s), \"ECDSA signature is not valid.\");\r\n  }\r\n\r\n  function settleBet(\r\n    address beneficiary, \r\n    uint betAmount,\r\n    uint possibleWinAmount,\r\n    uint referrerBonus,\r\n    uint houseEdge,\r\n    bool isWin, \r\n    bool playedFromBalance) internal {\r\n\r\n    lockFunds(possibleWinAmount);\r\n\r\n    settleReferrerBonus(referrers[beneficiary], referrerBonus);\r\n    settleHouseEdge(houseEdge);\r\n\r\n    if(isWin) {\r\n      if(playedFromBalance) \r\n        balances[beneficiary] += possibleWinAmount - betAmount;\r\n      else\r\n        balances[beneficiary] += possibleWinAmount;\r\n      totalPlayableFunds -= possibleWinAmount - betAmount;\r\n      emit WinBet(beneficiary, betAmount, possibleWinAmount, balances[beneficiary]);\r\n    } else {\r\n      if(playedFromBalance) \r\n        balances[beneficiary] -= betAmount;\r\n\r\n      totalPlayableFunds += betAmount;\r\n      emit LoseBet(beneficiary, betAmount, betAmount, balances[beneficiary]);\r\n    }\r\n\r\n    unlockFunds(possibleWinAmount);\r\n  }\r\n\r\n  function settleBetAutoWithdraw(\r\n    address beneficiary, \r\n    uint betAmount,\r\n    uint possibleWinAmount,\r\n    uint referrerBonus,\r\n    uint houseEdge,\r\n    bool isWin) internal {\r\n\r\n    lockFunds(possibleWinAmount);\r\n\r\n    settleReferrerBonus(referrers[beneficiary], referrerBonus);\r\n    settleHouseEdge(houseEdge);\r\n\r\n    if(isWin) {\r\n      totalPlayableFunds -= possibleWinAmount - betAmount;\r\n      beneficiary.transfer(possibleWinAmount);\r\n      emit WinBet(beneficiary, betAmount, possibleWinAmount, balances[beneficiary]);\r\n    } else {\r\n      totalPlayableFunds += betAmount;\r\n      emit LoseBet(beneficiary, betAmount, betAmount, balances[beneficiary]);\r\n    }\r\n\r\n    unlockFunds(possibleWinAmount);\r\n  }\r\n\r\n  function setReferrer(address referee, address referrer) internal {\r\n    if(referrers[referee] == address(0)) {\r\n      referrers[referee] = referrer;\r\n      emit RefererSet(referee, referrer);\r\n    }\r\n  }\r\n\r\n  function settleReferrerBonus(address referrer, uint referrerBonus) internal {\r\n    if(referrerBonus > 0) {\r\n      totalPlayableFunds -= referrerBonus;\r\n      if(referrer != address(this)) {\r\n        if(!referrer.send(referrerBonus)) \r\n          balances[address(this)] += referrerBonus;\r\n      } else {\r\n        balances[address(this)] += referrerBonus;\r\n      }\r\n    }\r\n  }\r\n\r\n  function settleHouseEdge(uint houseEdge) internal {\r\n    totalPlayableFunds -= houseEdge;\r\n    balances[address(this)] += houseEdge;\r\n  }\r\n\r\n  function setupFirstTimePlayer(address newPlayer) internal {\r\n    if(referrers[newPlayer] == address(0)) \r\n      playerAddresses.push(newPlayer);\r\n  }\r\n\r\n  function payOutAllBalanceBeforeDestroy() internal ownerOnly {\r\n    uint _numberOfPlayers = playerAddresses.length;\r\n    for(uint i = 0;i < _numberOfPlayers;i++) {\r\n      address _player = playerAddresses[i];\r\n      uint _playerBalance = balances[_player];\r\n      if(_playerBalance > 0) {\r\n        if(!_player.send(_playerBalance))\r\n          emit DestroyFailedPayout(_player, _playerBalance);\r\n      } \r\n    }\r\n  }\r\n\r\n  function play(\r\n    address player, \r\n    uint betValue,\r\n    uint betMask, \r\n    uint modulo, \r\n    bytes32 commit) internal view returns(uint, uint, uint, bool) {\r\n\r\n    uint _possibleWinAmount;\r\n    uint _referrerBonus;\r\n    uint _houseEdge;\r\n\r\n    bool _isWin = roll(betMask, modulo, commit);\r\n    (_possibleWinAmount, _referrerBonus, _houseEdge) = calculatePayouts(player, betValue, modulo, betMask, _isWin);\r\n    return (_possibleWinAmount, _referrerBonus, _houseEdge, _isWin);\r\n  }\r\n\r\n  function calculatePayouts(\r\n    address player, \r\n    uint betAmount, \r\n    uint modulo, \r\n    uint rollUnder,\r\n    bool isWin) internal view returns(uint, uint, uint) {\r\n    require(0 < rollUnder && rollUnder <= modulo, \"Win probability out of range.\");\r\n\r\n    uint _referrerBonus = 0;\r\n    uint _multiplier = modulo / rollUnder; \r\n    uint _houseEdge = betAmount * HOUSE_EDGE_PERCENT / 100;\r\n    if(referrers[player] != address(0)) {\r\n      _referrerBonus = _houseEdge * REFERRER_BONUS_PERCENT / HOUSE_EDGE_PERCENT; \r\n    }\r\n    if(isWin)\r\n      _houseEdge = _houseEdge * (_multiplier - 1);\r\n    if (_houseEdge < HOUSE_EDGE_MIN_AMOUNT)\r\n      _houseEdge = HOUSE_EDGE_MIN_AMOUNT;\r\n\r\n    uint _possibleWinAmount = (betAmount * _multiplier) - _houseEdge;\r\n    _houseEdge = _houseEdge - _referrerBonus;\r\n\r\n    return (_possibleWinAmount, _referrerBonus, _houseEdge);\r\n  }\r\n\r\n  function roll(\r\n    uint betMask, \r\n    uint modulo, \r\n    bytes32 commit) internal view returns(bool) {\r\n\r\n    // Validate input data ranges.\r\n    require(modulo > 1 && modulo <= MAX_MODULO, \"Modulo should be within range.\");\r\n    require(0 < betMask && betMask < MAX_BET_MASK, \"Mask should be within range.\");\r\n\r\n    // Check whether contract has enough funds to process this bet.\r\n    //require(lockedFunds <= totalPlayableFunds, \"Cannot afford to lose this bet.\");\r\n\r\n    // The RNG - combine \"reveal\" and blockhash of placeBet using Keccak256. Miners\r\n    // are not aware of \"reveal\" and cannot deduce it from \"commit\" (as Keccak256\r\n    // preimage is intractable), and house is unable to alter the \"reveal\" after\r\n    // placeBet have been mined (as Keccak256 collision finding is also intractable).\r\n    bytes32 entropy = keccak256(abi.encodePacked(commit, blockhash(block.number)));    \r\n\r\n    // Do a roll by taking a modulo of entropy. Compute winning amount.\r\n    uint dice = uint(entropy) % modulo;\r\n\r\n    // calculating dice win\r\n    uint diceWin = 0;\r\n\r\n    if (dice < betMask) {\r\n      diceWin = 1;\r\n    }\r\n    return diceWin > 0;\r\n  }\r\n\r\n  function lockFunds(uint lockAmount) internal \r\n  {\r\n    lockedFunds += lockAmount;\r\n    assert(lockedFunds <= totalPlayableFunds);\r\n  }\r\n\r\n  function unlockFunds(uint unlockAmount) internal\r\n  {\r\n    lockedFunds -= unlockAmount;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betMask\",\"type\":\"uint256\"},{\"name\":\"modulo\",\"type\":\"uint256\"},{\"name\":\"commitLastBlock\",\"type\":\"uint256\"},{\"name\":\"commit\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"playTopUp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betMask\",\"type\":\"uint256\"},{\"name\":\"modulo\",\"type\":\"uint256\"},{\"name\":\"commitLastBlock\",\"type\":\"uint256\"},{\"name\":\"commit\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"playSitAndGo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secretSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayableFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donateFunds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"logData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForOperationalCosts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_houseEdgePercent\",\"type\":\"uint256\"},{\"name\":\"_houseEdgeMin\",\"type\":\"uint256\"},{\"name\":\"_refererBonusPercent\",\"type\":\"uint256\"},{\"name\":\"_referreeFirstTimeBonus\",\"type\":\"uint256\"},{\"name\":\"_minBet\",\"type\":\"uint256\"},{\"name\":\"_maxBet\",\"type\":\"uint256\"}],\"name\":\"editBetData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSecretSigner\",\"type\":\"address\"}],\"name\":\"setSecretSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"topUp\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betValue\",\"type\":\"uint256\"},{\"name\":\"betMask\",\"type\":\"uint256\"},{\"name\":\"modulo\",\"type\":\"uint256\"},{\"name\":\"commitLastBlock\",\"type\":\"uint256\"},{\"name\":\"commit\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"playBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"betMask\",\"type\":\"uint256\"},{\"name\":\"modulo\",\"type\":\"uint256\"},{\"name\":\"commitLastBlock\",\"type\":\"uint256\"},{\"name\":\"commit\",\"type\":\"bytes32\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"playFirstTime\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"benificiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"benificiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"RefererSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"better\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentBalance\",\"type\":\"uint256\"}],\"name\":\"WinBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"better\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"loseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentBalance\",\"type\":\"uint256\"}],\"name\":\"LoseBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Active\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Deactive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Destroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"players\",\"type\":\"address[]\"}],\"name\":\"NewPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralFailedPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DestroyFailedPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalHouseEdge\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalPlayableFunds\",\"type\":\"uint256\"}],\"name\":\"LoggingData\",\"type\":\"event\"}]","ContractName":"EthBet","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3dbdcb73b3d06a0481c5cd5a7693a5ca801fe66e419d6a7e92b2ba10b7c8330f"}]}