{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n  /**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n    \r\n    \r\n    /// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n    /// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\n    contract ERC721 {\r\n    function totalSupply() external view returns (uint256 total);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function ownerOf(string _diamondId) public view returns (address owner);\r\n    function approve(address _to, string _diamondId) external;\r\n    function transfer(address _to, string _diamondId) external;\r\n    function transferFrom(address _from, address _to, string _diamondId) external;\r\n    \r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, string indexed diamondId);\r\n    event Approval(address indexed owner, address indexed approved, string indexed diamondId);\r\n    }\r\n    \r\n    contract DiamondAccessControl {\r\n    \r\n    address public CEO;\r\n    \r\n    mapping (address => bool) public admins;\r\n    \r\n    bool public paused = false;\r\n    \r\n    modifier onlyCEO() {\r\n      require(msg.sender == CEO);\r\n      _;\r\n    }\r\n    \r\n    modifier onlyAdmin() {\r\n      require(admins[msg.sender]);\r\n      _;\r\n    }\r\n    \r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n    \r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n      require(!paused);\r\n      _;\r\n    }\r\n    \r\n    modifier onlyAdminOrCEO() \r\n{      require(admins[msg.sender] || msg.sender == CEO);\r\n      _;\r\n    }\r\n    \r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n      require(paused);\r\n      _;\r\n    }\r\n    \r\n    function setCEO(address _newCEO) external onlyCEO {\r\n      require(_newCEO != address(0));\r\n      CEO = _newCEO;\r\n    }\r\n    \r\n    function setAdmin(address _newAdmin, bool isAdmin) external onlyCEO {\r\n      require(_newAdmin != address(0));\r\n      admins[_newAdmin] = isAdmin;\r\n    }\r\n    \r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyAdminOrCEO whenNotPaused {\r\n      paused = true;\r\n    }\r\n    \r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when admin account are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() external onlyCEO whenPaused {\r\n      // can't unpause if contract was upgraded\r\n      paused = false;\r\n    }\r\n}\r\n    \r\n/// @title Base contract for CryptoDiamond. Holds all common structs, events and base variables.\r\ncontract DiamondBase is DiamondAccessControl {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed from, address indexed to, string indexed diamondId);\r\n    event TransactionHistory(  \r\n      string indexed _diamondId, \r\n      address indexed _seller, \r\n      string _sellerId, \r\n      address indexed _buyer, \r\n      string _buyerId, \r\n      uint256 _usdPrice, \r\n      uint256 _cedexPrice,\r\n      uint256 timestamp\r\n    );\r\n    \r\n    /*** DATA TYPE ***/\r\n    /// @dev The main Diamond struct. Every dimond is represented by a copy of this structure\r\n    struct Diamond {\r\n      string ownerId;\r\n      string status;\r\n      string gemCompositeScore;\r\n      string gemSubcategory;\r\n      string media;\r\n      string custodian;\r\n      uint256 arrivalTime;\r\n    }\r\n    \r\n    // variable to store total amount of diamonds\r\n    uint256 internal total;\r\n    \r\n    // Mapping for checking the existence of token with such diamond ID\r\n    mapping(string => bool) internal diamondExists;\r\n    \r\n    // Mapping from adress to number of diamonds owned by this address\r\n    mapping(address => uint256) internal balances;\r\n    \r\n    // Mapping from diamond ID to owner address\r\n    mapping (string => address) internal diamondIdToOwner;\r\n    \r\n    // Mapping from diamond ID to metadata\r\n    mapping(string => Diamond) internal diamondIdToMetadata;\r\n    \r\n    // Mapping from diamond ID to an address that has been approved to call transferFrom()\r\n    mapping(string => address) internal diamondIdToApproved;\r\n    \r\n    //Status Constants\r\n    string constant STATUS_PENDING = \"Pending\";\r\n    string constant STATUS_VERIFIED = \"Verified\";\r\n    string constant STATUS_OUTSIDE  = \"Outside\";\r\n\r\n    function _createDiamond(\r\n      string _diamondId, \r\n      address _owner, \r\n      string _ownerId, \r\n      string _gemCompositeScore, \r\n      string _gemSubcategory, \r\n      string _media\r\n    )  \r\n      internal \r\n    {\r\n      Diamond memory diamond;\r\n      \r\n      diamond.status = \"Pending\";\r\n      diamond.ownerId = _ownerId;\r\n      diamond.gemCompositeScore = _gemCompositeScore;\r\n      diamond.gemSubcategory = _gemSubcategory;\r\n      diamond.media = _media;\r\n      \r\n      diamondIdToMetadata[_diamondId] = diamond;\r\n\r\n      total = total.add(1); \r\n      diamondExists[_diamondId] = true;\r\n    \r\n      _transfer(address(0), _owner, _diamondId); \r\n    }\r\n    \r\n    function _transferInternal(\r\n      string _diamondId, \r\n      address _seller, \r\n      string _sellerId, \r\n      address _buyer, \r\n      string _buyerId, \r\n      uint256 _usdPrice, \r\n      uint256 _cedexPrice\r\n    )   \r\n      internal \r\n    {\r\n      Diamond storage diamond = diamondIdToMetadata[_diamondId];\r\n      diamond.ownerId = _buyerId;\r\n      _transfer(_seller, _buyer, _diamondId);   \r\n      emit TransactionHistory(_diamondId, _seller, _sellerId, _buyer, _buyerId, _usdPrice, _cedexPrice, now);\r\n    \r\n    }\r\n    \r\n    function _transfer(address _from, address _to, string _diamondId) internal {\r\n      if (_from != address(0)) {\r\n          balances[_from] = balances[_from].sub(1);\r\n      }\r\n      balances[_to] = balances[_to].add(1);\r\n      diamondIdToOwner[_diamondId] = _to;\r\n      delete diamondIdToApproved[_diamondId];\r\n      emit Transfer(_from, _to, _diamondId);\r\n    }\r\n    \r\n    function _burn(string _diamondId) internal {\r\n      address _from = diamondIdToOwner[_diamondId];\r\n      balances[_from] = balances[_from].sub(1);\r\n      total = total.sub(1);\r\n      delete diamondIdToOwner[_diamondId];\r\n      delete diamondIdToMetadata[_diamondId];\r\n      delete diamondExists[_diamondId];\r\n      delete diamondIdToApproved[_diamondId];\r\n      emit Transfer(_from, address(0), _diamondId);\r\n    }\r\n    \r\n    function _isDiamondOutside(string _diamondId) internal view returns (bool) {\r\n      require(diamondExists[_diamondId]);\r\n      return keccak256(abi.encodePacked(diamondIdToMetadata[_diamondId].status)) == keccak256(abi.encodePacked(STATUS_OUTSIDE));\r\n    }\r\n    \r\n    function _isDiamondVerified(string _diamondId) internal view returns (bool) {\r\n      require(diamondExists[_diamondId]);\r\n      return keccak256(abi.encodePacked(diamondIdToMetadata[_diamondId].status)) == keccak256(abi.encodePacked(STATUS_VERIFIED));\r\n    }\r\n}\r\n    \r\n/// @title The ontract that manages ownership, ERC-721 (draft) compliant.\r\ncontract DiamondBase721 is DiamondBase, ERC721 {\r\n    \r\n    function totalSupply() external view returns (uint256) {\r\n      return total;\r\n    }\r\n    \r\n    /**\r\n    * @dev Gets the balance of the specified address\r\n    * @param _owner address to query the balance of\r\n    * @return uint256 representing the amount owned by the passed address\r\n    */\r\n    function balanceOf(address _owner) external view returns (uint256) {\r\n      return balances[_owner];\r\n    \r\n    }\r\n    \r\n    /**\r\n    * @dev Gets the owner of the specified diamond ID\r\n    * @param _diamondId string ID of the diamond to query the owner of\r\n    * @return owner address currently marked as the owner of the given diamond ID\r\n    */\r\n    function ownerOf(string _diamondId) public view returns (address) {\r\n      require(diamondExists[_diamondId]);\r\n      return diamondIdToOwner[_diamondId];\r\n    }\r\n    \r\n    function approve(address _to, string _diamondId) external whenNotPaused {\r\n      require(_isDiamondOutside(_diamondId));\r\n      require(msg.sender == ownerOf(_diamondId));\r\n      diamondIdToApproved[_diamondId] = _to;\r\n      emit Approval(msg.sender, _to, _diamondId);\r\n    }\r\n    \r\n    /**\r\n    * @dev Transfers the ownership of a given diamond ID to another address\r\n    * @param _to address to receive the ownership of the given diamond ID\r\n    * @param _diamondId uint256 ID of the diamond to be transferred\r\n    */\r\n    function transfer(address _to, string _diamondId) external whenNotPaused {\r\n      require(_isDiamondOutside(_diamondId));\r\n      require(msg.sender == ownerOf(_diamondId));\r\n      require(_to != address(0));\r\n      require(_to != address(this));\r\n      require(_to != ownerOf(_diamondId));\r\n      _transfer(msg.sender, _to, _diamondId);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to,  string _diamondId)\r\n      external \r\n      whenNotPaused \r\n    {\r\n      require(_isDiamondOutside(_diamondId));\r\n      require(_from == ownerOf(_diamondId));\r\n      require(_to != address(0));\r\n      require(_to != address(this));\r\n      require(_to != ownerOf(_diamondId));\r\n      require(diamondIdToApproved[_diamondId] == msg.sender);\r\n      _transfer(_from, _to, _diamondId);\r\n    }\r\n    \r\n}\r\n    \r\n/// @dev The main contract, keeps track of diamonds.\r\ncontract DiamondCore is DiamondBase721 {\r\n\r\n    /// @notice Creates the main Diamond smart contract instance.\r\n    constructor() public {\r\n      // the creator of the contract is the initial CEO\r\n      CEO = msg.sender;\r\n    }\r\n    \r\n    function createDiamond(\r\n      string _diamondId, \r\n      address _owner, \r\n      string _ownerId, \r\n      string _gemCompositeScore, \r\n      string _gemSubcategory, \r\n      string _media\r\n    ) \r\n      external \r\n      onlyAdminOrCEO \r\n      whenNotPaused \r\n    {\r\n      require(!diamondExists[_diamondId]);\r\n      require(_owner != address(0));\r\n      require(_owner != address(this));\r\n      _createDiamond( \r\n          _diamondId, \r\n          _owner, \r\n          _ownerId, \r\n          _gemCompositeScore, \r\n          _gemSubcategory, \r\n          _media\r\n      );\r\n    }\r\n    \r\n    function updateDiamond(\r\n      string _diamondId, \r\n      string _custodian, \r\n      uint256 _arrivalTime\r\n    ) \r\n      external \r\n      onlyAdminOrCEO \r\n      whenNotPaused \r\n    {\r\n      require(!_isDiamondOutside(_diamondId));\r\n      \r\n      Diamond storage diamond = diamondIdToMetadata[_diamondId];\r\n      \r\n      diamond.status = \"Verified\";\r\n      diamond.custodian = _custodian;\r\n      diamond.arrivalTime = _arrivalTime;\r\n    }\r\n    \r\n    function transferInternal(\r\n      string _diamondId, \r\n      address _seller, \r\n      string _sellerId, \r\n      address _buyer, \r\n      string _buyerId, \r\n      uint256 _usdPrice, \r\n      uint256 _cedexPrice\r\n    ) \r\n      external \r\n      onlyAdminOrCEO                                                                                                                                                                                                                                              \r\n      whenNotPaused \r\n    {\r\n      require(_isDiamondVerified(_diamondId));\r\n      require(_seller == ownerOf(_diamondId));\r\n      require(_buyer != address(0));\r\n      require(_buyer != address(this));\r\n      require(_buyer != ownerOf(_diamondId));\r\n      _transferInternal(_diamondId, _seller, _sellerId, _buyer, _buyerId, _usdPrice, _cedexPrice);\r\n    }\r\n    \r\n    function burn(string _diamondId) external onlyAdminOrCEO whenNotPaused {\r\n      require(!_isDiamondOutside(_diamondId));\r\n      _burn(_diamondId);\r\n    }\r\n    \r\n    function getDiamond(string _diamondId) \r\n        external\r\n        view\r\n        returns(\r\n            string ownerId,\r\n            string status,\r\n            string gemCompositeScore,\r\n            string gemSubcategory,\r\n            string media,\r\n            string custodian,\r\n            uint256 arrivalTime\r\n        )\r\n    {\r\n        require(diamondExists[_diamondId]);\r\n        \r\n         ownerId = diamondIdToMetadata[_diamondId].ownerId;\r\n         status = diamondIdToMetadata[_diamondId].status;\r\n         gemCompositeScore = diamondIdToMetadata[_diamondId].gemCompositeScore;\r\n         gemSubcategory = diamondIdToMetadata[_diamondId].gemSubcategory;\r\n         media = diamondIdToMetadata[_diamondId].media;\r\n         custodian = diamondIdToMetadata[_diamondId].custodian;\r\n         arrivalTime = diamondIdToMetadata[_diamondId].arrivalTime;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_diamondId\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_diamondId\",\"type\":\"string\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_diamondId\",\"type\":\"string\"},{\"name\":\"_custodian\",\"type\":\"string\"},{\"name\":\"_arrivalTime\",\"type\":\"uint256\"}],\"name\":\"updateDiamond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_diamondId\",\"type\":\"string\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"},{\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_diamondId\",\"type\":\"string\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CEO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_diamondId\",\"type\":\"string\"}],\"name\":\"getDiamond\",\"outputs\":[{\"name\":\"ownerId\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"gemCompositeScore\",\"type\":\"string\"},{\"name\":\"gemSubcategory\",\"type\":\"string\"},{\"name\":\"media\",\"type\":\"string\"},{\"name\":\"custodian\",\"type\":\"string\"},{\"name\":\"arrivalTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_diamondId\",\"type\":\"string\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_diamondId\",\"type\":\"string\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_sellerId\",\"type\":\"string\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_buyerId\",\"type\":\"string\"},{\"name\":\"_usdPrice\",\"type\":\"uint256\"},{\"name\":\"_cedexPrice\",\"type\":\"uint256\"}],\"name\":\"transferInternal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_diamondId\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_ownerId\",\"type\":\"string\"},{\"name\":\"_gemCompositeScore\",\"type\":\"string\"},{\"name\":\"_gemSubcategory\",\"type\":\"string\"},{\"name\":\"_media\",\"type\":\"string\"}],\"name\":\"createDiamond\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"diamondId\",\"type\":\"string\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"diamondId\",\"type\":\"string\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_diamondId\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_sellerId\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_buyerId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_usdPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_cedexPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransactionHistory\",\"type\":\"event\"}]","ContractName":"DiamondCore","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6b673221bed21eb8cb20121630097d6655cd2e4fdbddd649496131e7ffadc880"}]}