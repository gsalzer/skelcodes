{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/// @title Version\r\ncontract Version {\r\n    string public semanticVersion;\r\n\r\n    /// @notice Constructor saves a public version of the deployed Contract.\r\n    /// @param _version Semantic version of the contract.\r\n    constructor(string _version) internal {\r\n        semanticVersion = _version;\r\n    }\r\n}\r\n\r\n\r\n/// @title Factory\r\ncontract Factory is Version {\r\n    event FactoryAddedContract(address indexed _contract);\r\n\r\n    modifier contractHasntDeployed(address _contract) {\r\n        require(contracts[_contract] == false);\r\n        _;\r\n    }\r\n\r\n    mapping(address => bool) public contracts;\r\n\r\n    constructor(string _version) internal Version(_version) {}\r\n\r\n    function hasBeenDeployed(address _contract) public constant returns (bool) {\r\n        return contracts[_contract];\r\n    }\r\n\r\n    function addContract(address _contract)\r\n        internal\r\n        contractHasntDeployed(_contract)\r\n        returns (bool)\r\n    {\r\n        contracts[_contract] = true;\r\n        emit FactoryAddedContract(_contract);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface ERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract SpendableWallet is Ownable {\r\n    ERC20 public token;\r\n\r\n    event ClaimedTokens(\r\n        address indexed _token,\r\n        address indexed _controller,\r\n        uint256 _amount\r\n    );\r\n\r\n    constructor(address _token, address _owner) public {\r\n        token = ERC20(_token);\r\n        owner = _owner;\r\n    }\r\n\r\n    function spend(address _to, uint256 _amount) public onlyOwner {\r\n        token.transfer(_to, _amount);\r\n    }\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) public onlyOwner {\r\n        if (_token == 0x0) {\r\n            owner.transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        ERC20 erc20token = ERC20(_token);\r\n        uint256 balance = erc20token.balanceOf(address(this));\r\n        erc20token.transfer(owner, balance);\r\n        emit ClaimedTokens(_token, owner, balance);\r\n    }\r\n}\r\n\r\n\r\ncontract SpendableWalletFactory is Factory {\r\n    // index of created contracts\r\n    address[] public spendableWallets;\r\n\r\n    constructor() public Factory(\"1.0.3\") {}\r\n\r\n    // deploy a new contract\r\n    function newPaymentAddress(address _token, address _owner)\r\n        public\r\n        returns(address newContract)\r\n    {\r\n        SpendableWallet spendableWallet = new SpendableWallet(_token, _owner);\r\n        spendableWallets.push(spendableWallet);\r\n        addContract(spendableWallet);\r\n        return spendableWallet;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"hasBeenDeployed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"semanticVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"newPaymentAddress\",\"outputs\":[{\"name\":\"newContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"spendableWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"FactoryAddedContract\",\"type\":\"event\"}]","ContractName":"SpendableWalletFactory","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0899affb83e009f18bb3649e07d82d73907fd3fbf27384eaa2ccf1ac16c1df43"}]}