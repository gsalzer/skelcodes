{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ninterface ERC721 /* is ERC165 */ {\r\n   \r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    \r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) payable;\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    function getApproved(uint256 _tokenId) view returns (address);\r\n\r\n    function isApprovedForAll(address _owner, address _operator) view returns (bool);\r\n}\r\n\r\ninterface ERC165 {\r\n   \r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\r\ninterface ERC721TokenReceiver {\r\n  \r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\r\n}\r\n\r\ninterface ERC721Metadata /* is ERC721 */ {\r\n    \r\n    function name() external view returns (string _name);\r\n\r\n    function symbol() external view returns (string _symbol);\r\n\r\n    function tokenURI(uint256 _tokenId) external view returns (string);\r\n}\r\n\r\ninterface ERC721Enumerable /* is ERC721 */ {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function tokenByIndex(uint256 _index) external view returns (uint256);\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n\r\nlibrary Strings {\r\n    \r\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\r\n      bytes memory _ba = bytes(_a);\r\n      bytes memory _bb = bytes(_b);\r\n      bytes memory _bc = bytes(_c);\r\n      bytes memory _bd = bytes(_d);\r\n      bytes memory _be = bytes(_e);\r\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n      bytes memory babcde = bytes(abcde);\r\n      uint k = 0;\r\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n      return string(babcde);\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string _a, string _b) internal pure returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function uint2str(uint i) internal pure returns (string) {\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint len;\r\n        while (j != 0){\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract MyTokenBadgeFootStone is ERC721, ERC165 {\r\n\r\n    bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n    \r\n    bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n\r\n    bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n    /*\r\n    * 0x80ac58cd ===\r\n    *   bytes4(keccak256('balanceOf(address)')) ^\r\n    *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n    *   bytes4(keccak256('approve(address,uint256)')) ^\r\n    *   bytes4(keccak256('getApproved(uint256)')) ^\r\n    *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n    *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n    *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n    */\r\n\r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n    mapping (uint256 => address) internal tokenOwner;\r\n\r\n    mapping(address => uint8[]) internal ownedTokens;\r\n\r\n    mapping (uint256 => address) internal tokenApprovals;\r\n\r\n    mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n    uint32[] ownedTokensIndex;\r\n\r\n    using SafeMath for uint256;\r\n    using AddressUtils for address;\r\n    using Strings for string;\r\n\r\n    constructor() public {\r\n        _registerInterface(InterfaceId_ERC165);\r\n        _registerInterface(InterfaceId_ERC721);\r\n    }\r\n\r\n    function supportsInterface(bytes4 _interfaceId) external view returns (bool) {\r\n        return supportedInterfaces[_interfaceId];\r\n    }\r\n\r\n    function balanceOf(address _owner) view returns (uint256){\r\n        return ownedTokens[_owner].length;\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        address owner = tokenOwner[_tokenId];\r\n        require(owner != address(0));\r\n        return owner;\r\n    }\r\n\r\n    function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool){\r\n        address owner = ownerOf(_tokenId);\r\n        // Disable solium check because of\r\n        // https://github.com/duaraghav8/Solium/issues/175\r\n        // solium-disable-next-line operator-whitespace\r\n        return (_spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender));\r\n    }\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        require(isApprovedOrOwner(msg.sender, _tokenId));\r\n        _;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) payable canTransfer(_tokenId){\r\n        require(_from != address(0));\r\n        require(_to != address(0));\r\n\r\n        clearApproval(_from, _tokenId);\r\n        removeTokenFrom(_from, _tokenId);\r\n        addTokenTo(_to, _tokenId);\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes _data) internal returns (bool){\r\n        if (!_to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n        return (retval == ERC721_RECEIVED);\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) payable{\r\n        transferFrom(_from, _to, _tokenId);\r\n\r\n        require(checkAndCallSafeTransfer(_from, _to, _tokenId, data));\r\n    }\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) payable{\r\n        safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    function clearApproval(address _owner, uint256 _tokenId) internal {\r\n        require(ownerOf(_tokenId) == _owner);\r\n        if (tokenApprovals[_tokenId] != address(0)) {\r\n            tokenApprovals[_tokenId] = address(0);\r\n        }\r\n    }\r\n\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        require(ownerOf(_tokenId) == _from);\r\n        tokenOwner[_tokenId] = address(0);\r\n\r\n\r\n        uint32 tokenIndex = ownedTokensIndex[_tokenId];\r\n        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n        uint8 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n        ownedTokens[_from][tokenIndex] = lastToken;\r\n        ownedTokens[_from][lastTokenIndex] = 0;\r\n\r\n        ownedTokens[_from].length--;\r\n        ownedTokensIndex[_tokenId] = 0;\r\n        ownedTokensIndex[lastToken] = tokenIndex;\r\n    }\r\n\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        require(tokenOwner[_tokenId] == address(0));\r\n        tokenOwner[_tokenId] = _to;\r\n\r\n        uint256 length = ownedTokens[_to].length;\r\n        \r\n        require(length == uint32(length));\r\n        ownedTokens[_to].push(uint8(_tokenId));\r\n\r\n        ownedTokensIndex[_tokenId] = uint32(length);\r\n    }\r\n\r\n    function approve(address _approved, uint256 _tokenId) external payable{\r\n        address owner = ownerOf(_tokenId);\r\n        require(_approved != owner);\r\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n        tokenApprovals[_tokenId] = _approved;\r\n        emit Approval(owner, _approved, _tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external{\r\n        require(_operator != msg.sender);\r\n        operatorApprovals[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n        return tokenApprovals[_tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool){\r\n        return operatorApprovals[_owner][_operator];\r\n    }\r\n\r\n    function _registerInterface(bytes4 _interfaceId) internal {\r\n        require(_interfaceId != 0xffffffff);\r\n        supportedInterfaces[_interfaceId] = true;\r\n    }\r\n}\r\n\r\ncontract ManagerContract {\r\n  address public owner;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier restricted() {\r\n    if (msg.sender == owner) _;\r\n  }\r\n\r\n  function upgrade(address new_address) public restricted {\r\n    owner = new_address;\r\n  }\r\n}\r\n\r\ninterface MetadataConverter {\r\n\r\n    function tokenSLogoURI() view returns (string);\r\n    function tokenBLogoURI() view returns (string);\r\n    function tokenSLogoBGURI() view returns (string);\r\n    function tokenBLogoBGURI() view returns (string);\r\n\tfunction tokenBGURI() view returns (string);\r\n\tfunction tokenURI(uint256 _tokenId) view returns (string);\t\r\n\tfunction name(uint256 _tokenId) view returns (string);\r\n}\r\n\r\n\r\ncontract GenesisBadge is MyTokenBadgeFootStone, ManagerContract, ERC721Enumerable, ERC721Metadata {\r\n\r\n\tbytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n    /**\r\n    * 0x780e9d63 ===\r\n    *   bytes4(keccak256('totalSupply()')) ^\r\n    *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n    *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n    */\r\n\r\n    bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n    /**\r\n    * 0x5b5e139f ===\r\n    *   bytes4(keccak256('name()')) ^\r\n    *   bytes4(keccak256('symbol()')) ^\r\n    *   bytes4(keccak256('tokenURI(uint256)'))\r\n    */\r\n\r\n\tstring public constant NAME = \"GenesisBadge\";\r\n    string public constant SYMBOL = \"GB\";\r\n    uint total = 50;\r\n    MetadataConverter metadataURIConverter;\r\n\r\n\tconstructor() public {\r\n        _registerInterface(InterfaceId_ERC721Enumerable);\r\n        _registerInterface(InterfaceId_ERC721Metadata);\r\n\r\n        tokenOwner[0] = owner;\r\n        tokenOwner[1] = owner;\r\n        tokenOwner[2] = owner;\r\n        tokenOwner[3] = owner;\r\n        tokenOwner[4] = owner;\r\n        tokenOwner[5] = owner;\r\n        tokenOwner[6] = owner;\r\n        tokenOwner[7] = owner;\r\n        tokenOwner[8] = owner;\r\n        tokenOwner[9] = owner;\r\n        tokenOwner[10] = owner;\r\n        tokenOwner[11] = owner;\r\n        tokenOwner[12] = owner;\r\n        tokenOwner[13] = owner;\r\n        tokenOwner[14] = owner;\r\n        tokenOwner[15] = owner;\r\n        tokenOwner[16] = owner;\r\n        tokenOwner[17] = owner;\r\n        tokenOwner[18] = owner;\r\n        tokenOwner[19] = owner;\r\n        tokenOwner[20] = owner;\r\n        tokenOwner[21] = owner;\r\n        tokenOwner[22] = owner;\r\n        tokenOwner[23] = owner;\r\n        tokenOwner[24] = owner;\r\n        tokenOwner[25] = owner;\r\n        tokenOwner[26] = owner;\r\n        tokenOwner[27] = owner;\r\n        tokenOwner[28] = owner;\r\n        tokenOwner[29] = owner;\r\n        tokenOwner[30] = owner;\r\n        tokenOwner[31] = owner;\r\n        tokenOwner[32] = owner;\r\n        tokenOwner[33] = owner;\r\n        tokenOwner[34] = owner;\r\n        tokenOwner[35] = owner;\r\n        tokenOwner[36] = owner;\r\n        tokenOwner[37] = owner;\r\n        tokenOwner[38] = owner;\r\n        tokenOwner[39] = owner;\r\n        tokenOwner[40] = owner;\r\n        tokenOwner[41] = owner;\r\n        tokenOwner[42] = owner;\r\n        tokenOwner[43] = owner;\r\n        tokenOwner[44] = owner;\r\n        tokenOwner[45] = owner;\r\n        tokenOwner[46] = owner;\r\n        tokenOwner[47] = owner;\r\n        tokenOwner[48] = owner;\r\n        tokenOwner[49] = owner;\r\n\r\n        ownedTokens[owner].push(uint8(0));\r\n        ownedTokens[owner].push(uint8(1));\r\n        ownedTokens[owner].push(uint8(2));\r\n        ownedTokens[owner].push(uint8(3));\r\n        ownedTokens[owner].push(uint8(4));\r\n        ownedTokens[owner].push(uint8(5));\r\n        ownedTokens[owner].push(uint8(6));\r\n        ownedTokens[owner].push(uint8(7));\r\n        ownedTokens[owner].push(uint8(8));\r\n        ownedTokens[owner].push(uint8(9));\r\n        ownedTokens[owner].push(uint8(10));\r\n        ownedTokens[owner].push(uint8(11));\r\n        ownedTokens[owner].push(uint8(12));\r\n        ownedTokens[owner].push(uint8(13));\r\n        ownedTokens[owner].push(uint8(14));\r\n        ownedTokens[owner].push(uint8(15));\r\n        ownedTokens[owner].push(uint8(16));\r\n        ownedTokens[owner].push(uint8(17));\r\n        ownedTokens[owner].push(uint8(18));\r\n        ownedTokens[owner].push(uint8(19));\r\n        ownedTokens[owner].push(uint8(20));\r\n        ownedTokens[owner].push(uint8(21));\r\n        ownedTokens[owner].push(uint8(22));\r\n        ownedTokens[owner].push(uint8(23));\r\n        ownedTokens[owner].push(uint8(24));\r\n        ownedTokens[owner].push(uint8(25));\r\n        ownedTokens[owner].push(uint8(26));\r\n        ownedTokens[owner].push(uint8(27));\r\n        ownedTokens[owner].push(uint8(28));\r\n        ownedTokens[owner].push(uint8(29));\r\n        ownedTokens[owner].push(uint8(30));\r\n        ownedTokens[owner].push(uint8(31));\r\n        ownedTokens[owner].push(uint8(32));\r\n        ownedTokens[owner].push(uint8(33));\r\n        ownedTokens[owner].push(uint8(34));\r\n        ownedTokens[owner].push(uint8(35));\r\n        ownedTokens[owner].push(uint8(36));\r\n        ownedTokens[owner].push(uint8(37));\r\n        ownedTokens[owner].push(uint8(38));\r\n        ownedTokens[owner].push(uint8(39));\r\n        ownedTokens[owner].push(uint8(40));\r\n        ownedTokens[owner].push(uint8(41));\r\n        ownedTokens[owner].push(uint8(42));\r\n        ownedTokens[owner].push(uint8(43));\r\n        ownedTokens[owner].push(uint8(44));\r\n        ownedTokens[owner].push(uint8(45));\r\n        ownedTokens[owner].push(uint8(46));\r\n        ownedTokens[owner].push(uint8(47));\r\n        ownedTokens[owner].push(uint8(48));\r\n        ownedTokens[owner].push(uint8(49));\r\n\r\n\t\townedTokensIndex.push(0);\r\n\t\townedTokensIndex.push(1);\r\n\t\townedTokensIndex.push(2);\r\n\t\townedTokensIndex.push(3);\r\n\t\townedTokensIndex.push(4);\r\n\t\townedTokensIndex.push(5);\r\n\t\townedTokensIndex.push(6);\r\n\t\townedTokensIndex.push(7);\r\n\t\townedTokensIndex.push(8);\r\n\t\townedTokensIndex.push(9);\r\n\t\townedTokensIndex.push(10);\r\n\t\townedTokensIndex.push(11);\r\n\t\townedTokensIndex.push(12);\r\n\t\townedTokensIndex.push(13);\r\n\t\townedTokensIndex.push(14);\r\n\t\townedTokensIndex.push(15);\r\n\t\townedTokensIndex.push(16);\r\n\t\townedTokensIndex.push(17);\r\n\t\townedTokensIndex.push(18);\r\n\t\townedTokensIndex.push(19);\r\n\t\townedTokensIndex.push(20);\r\n\t\townedTokensIndex.push(21);\r\n\t\townedTokensIndex.push(22);\r\n\t\townedTokensIndex.push(23);\r\n\t\townedTokensIndex.push(24);\r\n\t\townedTokensIndex.push(25);\r\n\t\townedTokensIndex.push(26);\r\n\t\townedTokensIndex.push(27);\r\n\t\townedTokensIndex.push(28);\r\n\t\townedTokensIndex.push(29);\r\n\t\townedTokensIndex.push(30);\r\n\t\townedTokensIndex.push(31);\r\n        ownedTokensIndex.push(32);\r\n        ownedTokensIndex.push(33);\r\n        ownedTokensIndex.push(34);\r\n        ownedTokensIndex.push(35);\r\n        ownedTokensIndex.push(36);\r\n        ownedTokensIndex.push(37);\r\n        ownedTokensIndex.push(38);\r\n        ownedTokensIndex.push(39);\r\n        ownedTokensIndex.push(40);\r\n        ownedTokensIndex.push(41);\r\n        ownedTokensIndex.push(42);\r\n        ownedTokensIndex.push(43);\r\n        ownedTokensIndex.push(44);\r\n        ownedTokensIndex.push(45);\r\n        ownedTokensIndex.push(46);\r\n        ownedTokensIndex.push(47);\r\n        ownedTokensIndex.push(48);\r\n        ownedTokensIndex.push(49);\r\n\r\n    }\r\n\r\n    function updateURIConverter (address _URIConverter) restricted {\r\n    \tmetadataURIConverter = MetadataConverter(_URIConverter);\r\n    }\r\n\r\n    function name() external view returns (string){\r\n    \treturn NAME;\r\n    }\r\n\r\n    function badgeName(uint256 _tokenId) external view returns (string){\r\n    \treturn Strings.strConcat(NAME, metadataURIConverter.name(_tokenId));\r\n    }\r\n\r\n    function symbol() external view returns (string){\r\n    \treturn SYMBOL;\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) external view returns (string){\r\n    \treturn metadataURIConverter.tokenURI(_tokenId);\r\n    }\r\n\r\n    function tokenSLogoURI() external view returns (string){\r\n        return metadataURIConverter.tokenSLogoURI();\r\n    }\r\n\r\n    function tokenBLogoURI() external view returns (string){\r\n        return metadataURIConverter.tokenBLogoURI();\r\n    }\r\n\r\n    function tokenSLogoBGURI() external view returns (string){\r\n        return metadataURIConverter.tokenSLogoBGURI();\r\n    }\r\n\r\n    function tokenBLogoBGURI() external view returns (string){\r\n        return metadataURIConverter.tokenBLogoBGURI();\r\n    }\r\n\r\n    function tokenBGURI() external view returns (string){\r\n        return metadataURIConverter.tokenBGURI();\r\n    }\r\n\r\n    function totalSupply() view returns (uint256){\r\n    \treturn total;\r\n    }\r\n\r\n    function tokenByIndex(uint256 _index) external view returns (uint256){\r\n    \trequire(_index < totalSupply());\r\n        return _index;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256){\r\n\t\trequire(_index < balanceOf(_owner));\r\n        return ownedTokens[_owner][_index];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_address\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBLogoURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSLogoBGURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBGURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_URIConverter\",\"type\":\"address\"}],\"name\":\"updateURIConverter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSLogoURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"badgeName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBLogoBGURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"GenesisBadge","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://011cc6db845c7e647a88af592e86d43f81cbee2c3461d800a726fc137ca2108d"}]}