{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: @gnosis.pm/util-contracts/contracts/Token.sol\r\n\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\npragma solidity ^0.4.18;\r\n\r\n\r\n/// @title Abstract token contract - Functions to be implemented by token contracts\r\ncontract Token {\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    function transfer(address to, uint value) public returns (bool);\r\n    function transferFrom(address from, address to, uint value) public returns (bool);\r\n    function approve(address spender, uint value) public returns (bool);\r\n    function balanceOf(address owner) public view returns (uint);\r\n    function allowance(address owner, address spender) public view returns (uint);\r\n    function totalSupply() public view returns (uint);\r\n}\r\n\r\n// File: contracts/RewardClaimHandler.sol\r\n\r\ncontract RewardClaimHandler {\r\n    Token public rewardToken;\r\n    address public operator;\r\n    address[] public winners;\r\n    mapping (address => uint) public rewardAmounts;\r\n    uint public guaranteedClaimEndTime;\r\n\r\n    function RewardClaimHandler(Token _rewardToken) public {\r\n        rewardToken = _rewardToken;\r\n        operator = msg.sender;\r\n    }\r\n\r\n    function registerRewards(address[] _winners, uint[] _rewardAmounts, uint duration) public {\r\n        require(\r\n            winners.length == 0 &&\r\n            _winners.length > 0 &&\r\n            _winners.length == _rewardAmounts.length &&\r\n            msg.sender == operator\r\n        );\r\n\r\n        uint totalAmount = 0;\r\n        for(uint i = 0; i < _winners.length; i++) {\r\n            totalAmount += _rewardAmounts[i];\r\n            rewardAmounts[_winners[i]] = _rewardAmounts[i];\r\n        }\r\n\r\n        require(rewardToken.transferFrom(msg.sender, this, totalAmount));\r\n\r\n        winners = _winners;\r\n        guaranteedClaimEndTime = now + duration;\r\n    }\r\n\r\n    function claimReward() public {\r\n        require(winners.length > 0 && rewardToken.transfer(msg.sender, rewardAmounts[msg.sender]));\r\n        rewardAmounts[msg.sender] = 0;\r\n    }\r\n\r\n    function retractRewards() public {\r\n        require(winners.length > 0 && msg.sender == operator && now >= guaranteedClaimEndTime);\r\n\r\n        uint totalAmount = 0;\r\n        for(uint i = 0; i < winners.length; i++) {\r\n            totalAmount += rewardAmounts[winners[i]];\r\n            rewardAmounts[winners[i]] = 0;\r\n            // We don't use:\r\n            //     winners[i] = 0;\r\n            // because of this:\r\n            // https://ethereum.stackexchange.com/questions/3373/how-to-clear-large-arrays-without-blowing-the-gas-limit\r\n            // This is a more gas efficient overall if more than one run happens\r\n        }\r\n\r\n        require(rewardToken.transfer(msg.sender, totalAmount));\r\n\r\n        winners.length = 0;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_winners\",\"type\":\"address[]\"},{\"name\":\"_rewardAmounts\",\"type\":\"uint256[]\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"registerRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"guaranteedClaimEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retractRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rewardToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"RewardClaimHandler","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006810e776880c02933d47db1b9fc05908e5386b96","Library":"","SwarmSource":"bzzr://118b0b7e2b0348216ad8d828af9ad893a9b27e57316e9191367d427b7cb59d63"}]}