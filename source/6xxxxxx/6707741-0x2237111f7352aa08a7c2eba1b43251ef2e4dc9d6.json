{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address public zbtceo;\r\n    address public zbtcfo;\r\n    address public zbtadmin;\r\n       \r\n    event CEOshipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event CFOshipTransferred(address indexed previousCFO, address indexed newCFO);\r\n    event ZBTAdminshipTransferred(address indexed previousZBTAdmin, address indexed newZBTAdmin);\r\n\r\n    constructor () public {\r\n        zbtceo = msg.sender;\r\n        zbtcfo = msg.sender;\r\n        zbtadmin = msg.sender;\r\n    }\r\n\r\n    modifier onlyCEO() {\r\n        require(msg.sender == zbtceo);\r\n        _;\r\n    }\r\n  \r\n    modifier onlyCFO() {\r\n        require(msg.sender == zbtcfo);\r\n        _;\r\n    }\r\n\r\n    modifier onlyZBTAdmin() {\r\n        require(msg.sender == zbtadmin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == zbtceo ||\r\n            msg.sender == zbtcfo ||\r\n            msg.sender == zbtadmin\r\n        );\r\n        _;\r\n    }    \r\n\r\n    function transferCEOship(address _newCEO) public onlyCEO {\r\n      \r\n        require(_newCEO != address(0));        \r\n        emit CEOshipTransferred(zbtceo, _newCEO);       \r\n        zbtceo = _newCEO;               \r\n    }\r\n\r\n    function transferCFOship(address _newcfo) public onlyCEO {\r\n        require(_newcfo != address(0));\r\n        \r\n        emit CFOshipTransferred(zbtcfo, _newcfo);        \r\n        zbtcfo = _newcfo;             \r\n    }\r\n   \r\n    function transferZBTAdminship(address _newzbtadmin) public onlyCEO {\r\n        require(_newzbtadmin != address(0));        \r\n        emit ZBTAdminshipTransferred(zbtadmin, _newzbtadmin);        \r\n        zbtadmin = _newzbtadmin;              \r\n    }     \r\n}\r\n\r\n \r\ncontract Pausable is Ownable {\r\n\r\n    event EventPause();\r\n    event EventUnpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function setPause() onlyCEO whenNotPaused public {\r\n        paused = true;\r\n        emit EventPause();\r\n    }\r\n\r\n    function setUnpause() onlyCEO whenPaused public {\r\n        paused = false;\r\n        emit EventUnpause();\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n\r\n    uint256 public totalSupply;\r\n    \r\n  \r\n    function balanceOf(address who) public view returns (uint256);\r\n    \r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    \r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    \r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    \r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public balances;\r\n\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n//datacontrolcontract\r\ncontract StandardToken is ERC20, BasicToken,Ownable {\r\n    \r\n\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => mapping (address =>uint256)) internal allowed;\r\n\r\n\r\n    /* This notifies clients about the amount burnt */\r\n    event BurnTokens(address indexed from, uint256 value);\r\n\t\r\n   /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n    \r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n    \r\n        require(_to != address(0));\r\n        require(!frozenAccount[msg.sender]);           // Check if sender is frozen\r\n        require(!frozenAccount[_to]);              // Check if recipient is frozen\r\n        require(_value <= balances[msg.sender]);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    \t  }\r\n\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public onlyCLevel returns (bool) {\r\n  \r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != address(0));\r\n        \r\n        require(!frozenAccount[_from]);           // Check if sender is frozen\r\n        require(!frozenAccount[_to]);              // Check if recipient is frozen\r\n        require(_value <= balances[_from]);                     \r\n     \r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    \r\n    }\r\n\r\n\r\n\tfunction batchTransfer(address[] _receivers, uint256 _value) public  returns (bool) {\r\n\t\t\r\n\t\t    uint256 cnt = _receivers.length;\r\n\t\t    \r\n\t\t    uint256 amount = _value.mul(cnt); \r\n\t\t    \r\n\t\t    require(cnt > 0 && cnt <= 20);\r\n\t\t    \r\n\t\t    require(_value > 0 && balances[msg.sender] >= amount);\r\n\r\n\t\t    balances[msg.sender] = balances[msg.sender].sub(amount);\r\n\t\t    \r\n\t\t    for (uint256 i = 0; i < cnt; i++) {\r\n\t\t        balances[_receivers[i]] = balances[_receivers[i]].add(_value);\r\n\t\t        emit Transfer(msg.sender, _receivers[i], _value);\r\n\t\t    }\r\n\t\t    \r\n\t\t    return true;\r\n\t\t  }\r\n \r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n    \r\n        allowed[msg.sender][_spender] = _value;\r\n        \r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function getAccountFreezedInfo(address _owner) public view returns (bool) {\r\n        return frozenAccount[_owner];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        \r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        \r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        \r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n  function burnTokens(uint256 _burnValue)  public onlyCEO returns (bool success) {\r\n       // Check if the sender has enough\r\n\t     require(balances[msg.sender] >= _burnValue);    \r\n\r\n\t     \r\n       // Subtract from the sender\r\n        balances[msg.sender] = balances[msg.sender].sub(_burnValue);              \r\n       // Updates totalSupply\r\n        totalSupply = totalSupply.sub(_burnValue);                              \r\n        \r\n        emit BurnTokens(msg.sender, _burnValue);\r\n        return true;\r\n    }\r\n\r\n    function burnTokensFrom(address _from, uint256 _value) public onlyCLevel returns (bool success) {\r\n        \r\n        require(balances[_from] >= _value);                // Check if the targeted balance is enough\r\n       \r\n        require(_from != msg.sender);   \r\n        \r\n        require(allowed[_from][msg.sender] >=_value);  \r\n        \r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);      \r\n         \r\n        balances[_from] = balances[_from].sub(_value);     // Subtract from the targeted balance\r\n       \r\n        totalSupply =totalSupply.sub(_value) ;             // Update totalSupply\r\n        \r\n        emit BurnTokens(_from, _value);\r\n        return true;\r\n        }\r\n  \r\n    function freezeAccount(address _target, bool _freeze) public onlyCLevel returns (bool success) {\r\n        \r\n        require(_target != msg.sender);\r\n        \r\n        frozenAccount[_target] = _freeze;\r\n        emit FrozenFunds(_target, _freeze);\r\n        return _freeze;\r\n        }\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function  batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.batchTransfer(_receivers, _value);\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n    \r\n    \r\n  function burnTokens( uint256 _burnValue) public whenNotPaused returns (bool success) {\r\n        return super.burnTokens(_burnValue);\r\n    }\r\n    \r\n  function burnTokensFrom(address _from, uint256 _burnValue) public whenNotPaused returns (bool success) {\r\n        return super.burnTokensFrom( _from,_burnValue);\r\n    }    \r\n    \r\n  function freezeAccount(address _target, bool _freeze)  public whenNotPaused returns (bool success) {\r\n        return super.freezeAccount(_target,_freeze);\r\n    }   \r\n       \r\n}\r\n\r\ncontract CustomToken is PausableToken {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals ;\r\n   \r\n    \r\n    // Constants\r\n    string  public constant tokenName = \"ZBT.COM Token\";\r\n    string  public constant tokenSymbol = \"ZBT\";\r\n    uint8   public constant tokenDecimals = 6;\r\n    \r\n    uint256 public constant initTokenSUPPLY      = 5000000000 * (10 ** uint256(tokenDecimals));\r\n             \r\n                                        \r\n    constructor () public {\r\n\r\n        name = tokenName;\r\n\r\n        symbol = tokenSymbol;\r\n\r\n        decimals = tokenDecimals;\r\n\r\n        totalSupply = initTokenSUPPLY;    \r\n                \r\n        balances[msg.sender] = totalSupply;   \r\n\r\n    }    \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newzbtadmin\",\"type\":\"address\"}],\"name\":\"transferZBTAdminship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_burnValue\",\"type\":\"uint256\"}],\"name\":\"burnTokensFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zbtadmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_burnValue\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receivers\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zbtceo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getAccountFreezedInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newcfo\",\"type\":\"address\"}],\"name\":\"transferCFOship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"zbtcfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initTokenSUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"transferCEOship\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EventPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EventUnpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BurnTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"CEOshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousCFO\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newCFO\",\"type\":\"address\"}],\"name\":\"CFOshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousZBTAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newZBTAdmin\",\"type\":\"address\"}],\"name\":\"ZBTAdminshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"CustomToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b865a39be3f5ebd90f95847d24ed008162091e4c3887b611a56e85f204b75dc8"}]}