{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string _role)\r\n    public\r\n    view\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string _role)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function addRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function removeRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n  {\r\n    require(has(_role, _addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _role.bearer[_addr];\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() public onlyPendingOwner {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract HasNoEther is Ownable {\r\n\r\n  /**\r\n  * @dev Constructor that rejects incoming Ether\r\n  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\r\n  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\r\n  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\r\n  * we could use assembly to access msg.value.\r\n  */\r\n  constructor() public payable {\r\n    require(msg.value == 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Disallows direct send by setting a default function without the `payable` flag.\r\n   */\r\n  function() external {\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer all Ether held by the contract to the owner.\r\n   */\r\n  function reclaimEther() external onlyOwner {\r\n    owner.transfer(address(this).balance);\r\n  }\r\n}\r\n\r\ncontract BitwordsVault is RBAC, HasNoEther, Pausable, Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    // A constant role name representing the bitwords server.\r\n    string internal constant ROLE_SERVER = \"server\";\r\n\r\n    // A constant role name representing the bitwords authorizer\r\n    string internal constant ROLE_AUTHORIZER = \"authorizer\";\r\n\r\n    struct TransferQueue {\r\n        address[] destinations;\r\n        mapping(address => uint256) balances;\r\n        mapping(address => uint256) kind; // 0 = publisher, 1 = bitwords, 2 = advertiser affiliate, 3 = publisher affiliate\r\n    }\r\n\r\n    // A mapping to keep track of all pending transfers\r\n    uint256 public lastTransferQueueIndex = 0;\r\n    TransferQueue[] internal transferQueue;\r\n\r\n    // Advertiser and publisher affiliates mapping\r\n    mapping(uint256 => address) public advertiserAffiliates;\r\n    mapping(uint256 => address) public publisherAffiliates;\r\n\r\n    // This mapping overrides the default bitwords cut for a specific publisher.\r\n    mapping(uint256 => uint256) public bitwordsCutOverride;\r\n\r\n    // The bitwords address, where all the 30% cut is received ETH\r\n    address public bitwordsWithdrawalAddress;\r\n\r\n    // How much cut out of 100 Bitwords takes. By default 30%\r\n    uint256 public bitwordsCutOutof100 = 30;\r\n\r\n    // How much cut out of Bitwords cut, do affiliates take? By default 40%\r\n    uint256 public affiliatesCutOutof100 = 40;\r\n\r\n    // point to the TrueUSD ERC20 token\r\n    ERC20 public tokenTrueUSD;\r\n\r\n\r\n    /**\r\n     * @dev The Bitwords constructor sets the address where all the withdrawals will\r\n     * happen.\r\n     */\r\n    constructor (ERC20 _tokenTrueUSD) public {\r\n        tokenTrueUSD = _tokenTrueUSD;\r\n        bitwordsWithdrawalAddress = msg.sender;\r\n    }\r\n\r\n\r\n    modifier hasServerPermission () {\r\n        checkRole(msg.sender, ROLE_SERVER);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier hasAuthorizerPermission () {\r\n        checkRole(msg.sender, ROLE_AUTHORIZER);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Add a authorizer\r\n     */\r\n    function addAuthorizer (address _user) onlyOwner public {\r\n        addRole(_user, ROLE_AUTHORIZER);\r\n        emit AuthorizerAdded(_user);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Add a server\r\n     */\r\n    function addServer (address _user) onlyOwner public {\r\n        addRole(_user, ROLE_SERVER);\r\n        emit ServerAdded(_user);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Refund the TUSD tokens back to the owner\r\n     *\r\n     * @param value     The amount of tokens that need to be refunded\r\n     */\r\n    function refundTokens (uint256 value) onlyOwner public {\r\n        tokenTrueUSD.transfer(msg.sender, value);\r\n        emit RefundToOwner(msg.sender, value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Used by the owner to set the withdrawal address for Bitwords. This address\r\n     * is where Bitwords will receive all the cut from the advertisements.\r\n     *\r\n     * @param _newAddress    the new withdrawal address\r\n     */\r\n    function setBitwordsWithdrawalAddress (address _newAddress) onlyOwner public {\r\n        require(_newAddress != address(0));\r\n        bitwordsWithdrawalAddress = _newAddress;\r\n\r\n        emit BitwordsWithdrawalAddressChanged(msg.sender, _newAddress);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Set the affiliate for the advertiser\r\n     */\r\n    function setAdvertiserAffiliate (address _affiliate, uint256 _advertiser) public onlyOwner {\r\n        require(_affiliate != address(0));\r\n        advertiserAffiliates[_advertiser] = _affiliate;\r\n\r\n        emit SetAdvertiserAffiliate(_advertiser, _affiliate);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Set the affiliate for the publisher\r\n     */\r\n    function setPublisherAffiliate (address _affiliate, uint256 _publisher) public onlyOwner {\r\n        require(_affiliate != address(0));\r\n        publisherAffiliates[_publisher] = _affiliate;\r\n\r\n        emit SetPublisherAffiliate(_publisher, _affiliate);\r\n    }\r\n\r\n\r\n    /**\r\n     * Change the cut that Bitwords takes.\r\n     *\r\n     * @param _cut   the amount of cut that Bitwords takes.\r\n     */\r\n    function setBitwordsCut (uint256 _cut) onlyOwner public {\r\n        require(_cut <= 30, \"cut cannot be more than 30%\");\r\n        require(_cut >= 0, \"cut should be greater than 0%\");\r\n        bitwordsCutOutof100 = _cut;\r\n\r\n        emit BitwordsCutChanged(msg.sender, _cut);\r\n    }\r\n\r\n\r\n    /**\r\n     * Anybody can credit ether on behalf of an advertiser\r\n     *\r\n     * @param publisherId  The address of the publisher\r\n     * @param cut          How much cut should be taken from this publisher\r\n     */\r\n    function setPublisherCut (uint256 publisherId, uint cut) onlyOwner public {\r\n        // require(publisher != address(0));\r\n        require(cut <= 30, \"cut cannot be more than 30%\");\r\n        require(cut >= 0, \"cut should be greater than 0%\");\r\n\r\n        bitwordsCutOverride[publisherId] = cut;\r\n        emit SetPublisherCut(publisherId, cut);\r\n    }\r\n\r\n\r\n    /**\r\n     * Charge the advertiser with whatever clicks have been served by the ad engine.\r\n     *\r\n     * @param advertiserIds         Array of address of the advertiser from whom we should debit ether\r\n     * @param costs                 Array of the cost to be paid to publisher by advertisers\r\n     * @param publisherIds          Array of indices of publishers that need to be credited than debited.\r\n     * @param publishers            Array of address of the publisher from whom we should credit ether\r\n     */\r\n    bool private inChargeAdvertisers = false;\r\n    function chargeAdvertisers (uint256[] advertiserIds, uint256[] costs, uint256[] publisherIds, address[] publishers)\r\n    public hasServerPermission {\r\n        // Prevent re-entry bug\r\n        require(!inChargeAdvertisers, \"avoid rentry bug\");\r\n        inChargeAdvertisers = true;\r\n\r\n        for (uint256 i = 0; i < advertiserIds.length; i++) {\r\n            uint256 toWithdraw = costs[i];\r\n\r\n            // Update the advertiser\r\n            emit DeductFromAdvertiser(advertiserIds[i], toWithdraw);\r\n\r\n            // Calculate how much cut Bitwords should take\r\n            uint256 bitwordsCutPercent = bitwordsCutOutof100;\r\n            if (bitwordsCutOverride[publisherIds[i]] > 0 && bitwordsCutOverride[publisherIds[i]] <= 30) {\r\n                bitwordsCutPercent = bitwordsCutOverride[publisherIds[i]];\r\n            }\r\n\r\n            // Figure out how much should go to Bitwords and how much should go to the publishers.\r\n            uint256 publisherNetCut = toWithdraw * (100 - bitwordsCutPercent) / 100;\r\n            uint256 bitwordsCut = toWithdraw.sub(publisherNetCut);\r\n            uint256 bitwordsNetCut = bitwordsCut;\r\n            uint256 affiliateCut = affiliatesCutOutof100.mul(bitwordsNetCut);\r\n\r\n            // Send the usd to the publishers right away\r\n            queueTransfer(publishers[i], publisherNetCut, 0);\r\n\r\n            // Calculate how much from Bitword's cut should goto affiliates\r\n            // If there is an advertiser affiliate\r\n            if (advertiserAffiliates[advertiserIds[i]] != address(0)) {\r\n                // send usd to the affiliate\r\n                queueTransfer(advertiserAffiliates[advertiserIds[i]], affiliateCut, 2);\r\n                bitwordsCut = bitwordsCut.sub(affiliateCut);\r\n            }\r\n\r\n            // Calculate how much from Bitword's cut should goto publishers\r\n            // TODO: check if bitwordsCut > 0\r\n            if (publisherAffiliates[publisherIds[i]] != address(0)) {\r\n                // send usd to the affiliate\r\n                queueTransfer(publisherAffiliates[advertiserIds[i]], affiliateCut, 3);\r\n                bitwordsCut = bitwordsCut.sub(affiliateCut);\r\n            }\r\n\r\n            // Send the remaining usd to Bitwords\r\n            queueTransfer(bitwordsWithdrawalAddress, bitwordsCut, 1);\r\n        }\r\n\r\n        inChargeAdvertisers = false;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Helper function to queue a transfer. A transfer which is queued is only executable\r\n     * once an authorizer approves it.\r\n     *\r\n     * @param _to       The destination to TUSD to\r\n     * @param _value    The amount of TUSD to send\r\n     * @param _kind     The kind of user\r\n     */\r\n    function queueTransfer (address _to, uint256 _value, uint256 _kind) internal {\r\n        if (transferQueue.length == lastTransferQueueIndex) {\r\n            TransferQueue memory t1 = TransferQueue({ destinations: new address[](0) });\r\n            transferQueue.push(t1);\r\n        }\r\n\r\n        TransferQueue storage t = transferQueue[lastTransferQueueIndex];\r\n\r\n        if (t.balances[_to] == 0) t.destinations.push(_to);\r\n        t.balances[_to] = t.balances[_to].add(_value);\r\n        t.kind[_to] = _kind;\r\n\r\n        emit PayoutQueued(_to, _value, _kind);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Called by an authorizer to make all the transactions\r\n     */\r\n    function approveAdvertiserCharges () public hasAuthorizerPermission payable {\r\n        TransferQueue storage t = transferQueue[lastTransferQueueIndex];\r\n\r\n        for (uint256 i = 0; i < t.destinations.length; i++) {\r\n            tokenTrueUSD.transfer(t.destinations[i], t.balances[t.destinations[i]]);\r\n            emit PayoutProcessed(t.destinations[i], t.balances[t.destinations[i]], t.kind[t.destinations[i]]);\r\n        }\r\n\r\n        lastTransferQueueIndex = transferQueue.length;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Called by an approver to reject all the pending changes\r\n     */\r\n    function rejectAdvertiserCharges () public hasAuthorizerPermission payable {\r\n        lastTransferQueueIndex = transferQueue.length;\r\n        emit PayoutsRejected();\r\n    }\r\n\r\n\r\n    /** Events */\r\n    event BitwordsCutChanged(address indexed _by, uint256 _value);\r\n    event BitwordsWithdrawalAddressChanged(address indexed _by, address indexed _from);\r\n    event SetPublisherCut(uint256 indexed _id, uint256 _value);\r\n    event SetAdvertiserAffiliate(uint256 indexed _id, address indexed _affiliate);\r\n    event SetPublisherAffiliate(uint256 indexed _id, address indexed _affiliate);\r\n\r\n    event DeductFromAdvertiser(uint256 indexed _id, uint256 _value);\r\n    event PayoutQueued(address indexed _to, uint256 _value, uint256 _kind);\r\n    event PayoutProcessed(address indexed _to, uint256 _value, uint256 _kind);\r\n    event PayoutsRejected();\r\n\r\n    event RefundToOwner(address indexed _to, uint256 _value);\r\n\r\n    event ServerAdded(address _to);\r\n    event AuthorizerAdded(address _to);\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setBitwordsWithdrawalAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affiliate\",\"type\":\"address\"},{\"name\":\"_advertiser\",\"type\":\"uint256\"}],\"name\":\"setAdvertiserAffiliate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"advertiserAffiliates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"publisherId\",\"type\":\"uint256\"},{\"name\":\"cut\",\"type\":\"uint256\"}],\"name\":\"setPublisherCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addAuthorizer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addServer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"refundTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveAdvertiserCharges\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bitwordsCutOverride\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rejectAdvertiserCharges\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenTrueUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitwordsCutOutof100\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastTransferQueueIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publisherAffiliates\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cut\",\"type\":\"uint256\"}],\"name\":\"setBitwordsCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affiliate\",\"type\":\"address\"},{\"name\":\"_publisher\",\"type\":\"uint256\"}],\"name\":\"setPublisherAffiliate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"advertiserIds\",\"type\":\"uint256[]\"},{\"name\":\"costs\",\"type\":\"uint256[]\"},{\"name\":\"publisherIds\",\"type\":\"uint256[]\"},{\"name\":\"publishers\",\"type\":\"address[]\"}],\"name\":\"chargeAdvertisers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bitwordsWithdrawalAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliatesCutOutof100\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenTrueUSD\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BitwordsCutChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"BitwordsWithdrawalAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"SetPublisherCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"SetAdvertiserAffiliate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"SetPublisherAffiliate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"DeductFromAdvertiser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_kind\",\"type\":\"uint256\"}],\"name\":\"PayoutQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_kind\",\"type\":\"uint256\"}],\"name\":\"PayoutProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PayoutsRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"RefundToOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"ServerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"AuthorizerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"}]","ContractName":"BitwordsVault","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008dd5fbce2f6a956c3022ba3663759011dd51e73e","Library":"","SwarmSource":"bzzr://09991e573a571fce1a2d0c468c825cd006f732c782818ffb2e91b733497c79df"}]}