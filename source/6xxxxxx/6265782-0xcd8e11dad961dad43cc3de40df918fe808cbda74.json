{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts\\CloneFactory.sol\r\n\r\n/**\r\n*This contracts helps clone factories and swaps through the Deployer.sol and MasterDeployer.sol.\r\n*The address of the targeted contract to clone has to be provided.\r\n*/\r\ncontract CloneFactory {\r\n\r\n    /*Variables*/\r\n    address internal owner;\r\n    \r\n    /*Events*/\r\n    event CloneCreated(address indexed target, address clone);\r\n\r\n    /*Modifiers*/\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    /*Functions*/\r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }    \r\n    \r\n    /**\r\n    *@dev Allows the owner to set a new owner address\r\n    *@param _owner the new owner address\r\n    */\r\n    function setOwner(address _owner) public onlyOwner(){\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n    *@dev Creates factory clone\r\n    *@param _target is the address being cloned\r\n    *@return address for clone\r\n    */\r\n    function createClone(address target) internal returns (address result) {\r\n        bytes memory clone = hex\"600034603b57603080600f833981f36000368180378080368173bebebebebebebebebebebebebebebebebebebebe5af43d82803e15602c573d90f35b3d90fd\";\r\n        bytes20 targetBytes = bytes20(target);\r\n        for (uint i = 0; i < 20; i++) {\r\n            clone[26 + i] = targetBytes[i];\r\n        }\r\n        assembly {\r\n            let len := mload(clone)\r\n            let data := add(clone, 0x20)\r\n            result := create(0, data, len)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\Factory_Interface.sol\r\n\r\n//Swap factory functions - descriptions can be found in Factory.sol\r\ninterface Factory_Interface {\r\n  function createToken(uint _supply, address _party, uint _start_date) external returns (address,address, uint);\r\n  function payToken(address _party, address _token_add) external;\r\n  function deployContract(uint _start_date) external payable returns (address);\r\n   function getBase() external view returns(address);\r\n  function getVariables() external view returns (address, uint, uint, address,uint);\r\n  function isWhitelisted(address _member) external view returns (bool);\r\n}\r\n\r\n// File: contracts\\libraries\\SafeMath.sol\r\n\r\n//Slightly modified SafeMath library - includes a min function\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function min(uint a, uint b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n// File: contracts\\libraries\\DRCTLibrary.sol\r\n\r\n/**\r\n*The DRCTLibrary contains the reference code used in the DRCT_Token (an ERC20 compliant token\r\n*representing the payout of the swap contract specified in the Factory contract).\r\n*/\r\nlibrary DRCTLibrary{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /*Structs*/\r\n    /**\r\n    *@dev Keeps track of balance amounts in the balances array\r\n    */\r\n    struct Balance {\r\n        address owner;\r\n        uint amount;\r\n        }\r\n\r\n    struct TokenStorage{\r\n        //This is the factory contract that the token is standardized at\r\n        address factory_contract;\r\n        //Total supply of outstanding tokens in the contract\r\n        uint total_supply;\r\n        //Mapping from: swap address -> user balance struct (index for a particular user's balance can be found in swap_balances_index)\r\n        mapping(address => Balance[]) swap_balances;\r\n        //Mapping from: swap address -> user -> swap_balances index\r\n        mapping(address => mapping(address => uint)) swap_balances_index;\r\n        //Mapping from: user -> dynamic array of swap addresses (index for a particular swap can be found in user_swaps_index)\r\n        mapping(address => address[]) user_swaps;\r\n        //Mapping from: user -> swap address -> user_swaps index\r\n        mapping(address => mapping(address => uint)) user_swaps_index;\r\n        //Mapping from: user -> total balance accross all entered swaps\r\n        mapping(address => uint) user_total_balances;\r\n        //Mapping from: owner -> spender -> amount allowed\r\n        mapping(address => mapping(address => uint)) allowed;\r\n    }   \r\n\r\n    /*Events*/\r\n    /**\r\n    *@dev events for transfer and approvals\r\n    */\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    event CreateToken(address _from, uint _value);\r\n    \r\n    /*Functions*/\r\n    /**\r\n    *@dev Constructor - sets values for token name and token supply, as well as the \r\n    *factory_contract, the swap.\r\n    *@param _factory \r\n    */\r\n    function startToken(TokenStorage storage self,address _factory) public {\r\n        self.factory_contract = _factory;\r\n    }\r\n\r\n    /**\r\n    *@dev ensures the member is whitelisted\r\n    *@param _member is the member address that is chekced agaist the whitelist\r\n    */\r\n    function isWhitelisted(TokenStorage storage self,address _member) internal view returns(bool){\r\n        Factory_Interface _factory = Factory_Interface(self.factory_contract);\r\n        return _factory.isWhitelisted(_member);\r\n    }\r\n\r\n    /**\r\n    *@dev gets the factory address\r\n    */\r\n    function getFactoryAddress(TokenStorage storage self) external view returns(address){\r\n        return self.factory_contract;\r\n    }\r\n\r\n    /**\r\n    *@dev Token Creator - This function is called by the factory contract and creates new tokens\r\n    *for the user\r\n    *@param _supply amount of DRCT tokens created by the factory contract for this swap\r\n    *@param _owner address\r\n    *@param _swap address\r\n    */\r\n    function createToken(TokenStorage storage self,uint _supply, address _owner, address _swap) public{\r\n        require(msg.sender == self.factory_contract);\r\n        //Update total supply of DRCT Tokens\r\n        self.total_supply = self.total_supply.add(_supply);\r\n        //Update the total balance of the owner\r\n        self.user_total_balances[_owner] = self.user_total_balances[_owner].add(_supply);\r\n        //If the user has not entered any swaps already, push a zeroed address to their user_swaps mapping to prevent default value conflicts in user_swaps_index\r\n        if (self.user_swaps[_owner].length == 0)\r\n            self.user_swaps[_owner].push(address(0x0));\r\n        //Add a new swap index for the owner\r\n        self.user_swaps_index[_owner][_swap] = self.user_swaps[_owner].length;\r\n        //Push a new swap address to the owner's swaps\r\n        self.user_swaps[_owner].push(_swap);\r\n        //Push a zeroed Balance struct to the swap balances mapping to prevent default value conflicts in swap_balances_index\r\n        self.swap_balances[_swap].push(Balance({\r\n            owner: 0,\r\n            amount: 0\r\n        }));\r\n        //Add a new owner balance index for the swap\r\n        self.swap_balances_index[_swap][_owner] = 1;\r\n        //Push the owner's balance to the swap\r\n        self.swap_balances[_swap].push(Balance({\r\n            owner: _owner,\r\n            amount: _supply\r\n        }));\r\n        emit CreateToken(_owner,_supply);\r\n    }\r\n\r\n    /**\r\n    *@dev Called by the factory contract, and pays out to a _party\r\n    *@param _party being paid\r\n    *@param _swap address\r\n    */\r\n    function pay(TokenStorage storage self,address _party, address _swap) public{\r\n        require(msg.sender == self.factory_contract);\r\n        uint party_balance_index = self.swap_balances_index[_swap][_party];\r\n        require(party_balance_index > 0);\r\n        uint party_swap_balance = self.swap_balances[_swap][party_balance_index].amount;\r\n        //reduces the users totals balance by the amount in that swap\r\n        self.user_total_balances[_party] = self.user_total_balances[_party].sub(party_swap_balance);\r\n        //reduces the total supply by the amount of that users in that swap\r\n        self.total_supply = self.total_supply.sub(party_swap_balance);\r\n        //sets the partys balance to zero for that specific swaps party balances\r\n        self.swap_balances[_swap][party_balance_index].amount = 0;\r\n    }\r\n\r\n    /**\r\n    *@dev Returns the users total balance (sum of tokens in all swaps the user has tokens in)\r\n    *@param _owner user address\r\n    *@return user total balance\r\n    */\r\n    function balanceOf(TokenStorage storage self,address _owner) public constant returns (uint balance) {\r\n       return self.user_total_balances[_owner]; \r\n     }\r\n\r\n    /**\r\n    *@dev Getter for the total_supply of tokens in the contract\r\n    *@return total supply\r\n    */\r\n    function totalSupply(TokenStorage storage self) public constant returns (uint _total_supply) {\r\n       return self.total_supply;\r\n    }\r\n\r\n    /**\r\n    *@dev Removes the address from the swap balances for a swap, and moves the last address in the\r\n    *swap into their place\r\n    *@param _remove address of prevous owner\r\n    *@param _swap address used to get last addrss of the swap to replace the removed address\r\n    */\r\n    function removeFromSwapBalances(TokenStorage storage self,address _remove, address _swap) internal {\r\n        uint last_address_index = self.swap_balances[_swap].length.sub(1);\r\n        address last_address = self.swap_balances[_swap][last_address_index].owner;\r\n        //If the address we want to remove is the final address in the swap\r\n        if (last_address != _remove) {\r\n            uint remove_index = self.swap_balances_index[_swap][_remove];\r\n            //Update the swap's balance index of the last address to that of the removed address index\r\n            self.swap_balances_index[_swap][last_address] = remove_index;\r\n            //Set the swap's Balance struct at the removed index to the Balance struct of the last address\r\n            self.swap_balances[_swap][remove_index] = self.swap_balances[_swap][last_address_index];\r\n        }\r\n        //Remove the swap_balances index for this address\r\n        delete self.swap_balances_index[_swap][_remove];\r\n        //Finally, decrement the swap balances length\r\n        self.swap_balances[_swap].length = self.swap_balances[_swap].length.sub(1);\r\n    }\r\n\r\n    /**\r\n    *@dev This is the main function to update the mappings when a transfer happens\r\n    *@param _from address to send funds from\r\n    *@param _to address to send funds to\r\n    *@param _amount amount of token to send\r\n    */\r\n    function transferHelper(TokenStorage storage self,address _from, address _to, uint _amount) internal {\r\n        //Get memory copies of the swap arrays for the sender and reciever\r\n        address[] memory from_swaps = self.user_swaps[_from];\r\n        //Iterate over sender's swaps in reverse order until enough tokens have been transferred\r\n        for (uint i = from_swaps.length.sub(1); i > 0; i--) {\r\n            //Get the index of the sender's balance for the current swap\r\n            uint from_swap_user_index = self.swap_balances_index[from_swaps[i]][_from];\r\n            Balance memory from_user_bal = self.swap_balances[from_swaps[i]][from_swap_user_index];\r\n            //If the current swap will be entirely depleted - we remove all references to it for the sender\r\n            if (_amount >= from_user_bal.amount) {\r\n                _amount -= from_user_bal.amount;\r\n                //If this swap is to be removed, we know it is the (current) last swap in the user's user_swaps list, so we can simply decrement the length to remove it\r\n                self.user_swaps[_from].length = self.user_swaps[_from].length.sub(1);\r\n                //Remove the user swap index for this swap\r\n                delete self.user_swaps_index[_from][from_swaps[i]];\r\n                //If the _to address already holds tokens from this swap\r\n                if (self.user_swaps_index[_to][from_swaps[i]] != 0) {\r\n                    //Get the index of the _to balance in this swap\r\n                    uint to_balance_index = self.swap_balances_index[from_swaps[i]][_to];\r\n                    assert(to_balance_index != 0);\r\n                    //Add the _from tokens to _to\r\n                    self.swap_balances[from_swaps[i]][to_balance_index].amount = self.swap_balances[from_swaps[i]][to_balance_index].amount.add(from_user_bal.amount);\r\n                    //Remove the _from address from this swap's balance array\r\n                    removeFromSwapBalances(self,_from, from_swaps[i]);\r\n                } else {\r\n                    //Prepare to add a new swap by assigning the swap an index for _to\r\n                    if (self.user_swaps[_to].length == 0){\r\n                        self.user_swaps[_to].push(address(0x0));\r\n                    }\r\n                self.user_swaps_index[_to][from_swaps[i]] = self.user_swaps[_to].length;\r\n                //Add the new swap to _to\r\n                self.user_swaps[_to].push(from_swaps[i]);\r\n                //Give the reciever the sender's balance for this swap\r\n                self.swap_balances[from_swaps[i]][from_swap_user_index].owner = _to;\r\n                //Give the reciever the sender's swap balance index for this swap\r\n                self.swap_balances_index[from_swaps[i]][_to] = self.swap_balances_index[from_swaps[i]][_from];\r\n                //Remove the swap balance index from the sending party\r\n                delete self.swap_balances_index[from_swaps[i]][_from];\r\n            }\r\n            //If there is no more remaining to be removed, we break out of the loop\r\n            if (_amount == 0)\r\n                break;\r\n            } else {\r\n                //The amount in this swap is more than the amount we still need to transfer\r\n                uint to_swap_balance_index = self.swap_balances_index[from_swaps[i]][_to];\r\n                //If the _to address already holds tokens from this swap\r\n                if (self.user_swaps_index[_to][from_swaps[i]] != 0) {\r\n                    //Because both addresses are in this swap, and neither will be removed, we simply update both swap balances\r\n                    self.swap_balances[from_swaps[i]][to_swap_balance_index].amount = self.swap_balances[from_swaps[i]][to_swap_balance_index].amount.add(_amount);\r\n                } else {\r\n                    //Prepare to add a new swap by assigning the swap an index for _to\r\n                    if (self.user_swaps[_to].length == 0){\r\n                        self.user_swaps[_to].push(address(0x0));\r\n                    }\r\n                    self.user_swaps_index[_to][from_swaps[i]] = self.user_swaps[_to].length;\r\n                    //And push the new swap\r\n                    self.user_swaps[_to].push(from_swaps[i]);\r\n                    //_to is not in this swap, so we give this swap a new balance index for _to\r\n                    self.swap_balances_index[from_swaps[i]][_to] = self.swap_balances[from_swaps[i]].length;\r\n                    //And push a new balance for _to\r\n                    self.swap_balances[from_swaps[i]].push(Balance({\r\n                        owner: _to,\r\n                        amount: _amount\r\n                    }));\r\n                }\r\n                //Finally, update the _from user's swap balance\r\n                self.swap_balances[from_swaps[i]][from_swap_user_index].amount = self.swap_balances[from_swaps[i]][from_swap_user_index].amount.sub(_amount);\r\n                //Because we have transferred the last of the amount to the reciever, we break;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    *@dev ERC20 compliant transfer function\r\n    *@param _to Address to send funds to\r\n    *@param _amount Amount of token to send\r\n    *@return true for successful\r\n    */\r\n    function transfer(TokenStorage storage self, address _to, uint _amount) public returns (bool) {\r\n        require(isWhitelisted(self,_to));\r\n        uint balance_owner = self.user_total_balances[msg.sender];\r\n        if (\r\n            _to == msg.sender ||\r\n            _to == address(0) ||\r\n            _amount == 0 ||\r\n            balance_owner < _amount\r\n        ) return false;\r\n        transferHelper(self,msg.sender, _to, _amount);\r\n        self.user_total_balances[msg.sender] = self.user_total_balances[msg.sender].sub(_amount);\r\n        self.user_total_balances[_to] = self.user_total_balances[_to].add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n    /**\r\n    *@dev ERC20 compliant transferFrom function\r\n    *@param _from address to send funds from (must be allowed, see approve function)\r\n    *@param _to address to send funds to\r\n    *@param _amount amount of token to send\r\n    *@return true for successful\r\n    */\r\n    function transferFrom(TokenStorage storage self, address _from, address _to, uint _amount) public returns (bool) {\r\n        require(isWhitelisted(self,_to));\r\n        uint balance_owner = self.user_total_balances[_from];\r\n        uint sender_allowed = self.allowed[_from][msg.sender];\r\n        if (\r\n            _to == _from ||\r\n            _to == address(0) ||\r\n            _amount == 0 ||\r\n            balance_owner < _amount ||\r\n            sender_allowed < _amount\r\n        ) return false;\r\n        transferHelper(self,_from, _to, _amount);\r\n        self.user_total_balances[_from] = self.user_total_balances[_from].sub(_amount);\r\n        self.user_total_balances[_to] = self.user_total_balances[_to].add(_amount);\r\n        self.allowed[_from][msg.sender] = self.allowed[_from][msg.sender].sub(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    *@dev ERC20 compliant approve function\r\n    *@param _spender party that msg.sender approves for transferring funds\r\n    *@param _amount amount of token to approve for sending\r\n    *@return true for successful\r\n    */\r\n    function approve(TokenStorage storage self, address _spender, uint _amount) public returns (bool) {\r\n        self.allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    *@dev Counts addresses involved in the swap based on the length of balances array for _swap\r\n    *@param _swap address\r\n    *@return the length of the balances array for the swap\r\n    */\r\n    function addressCount(TokenStorage storage self, address _swap) public constant returns (uint) { \r\n        return self.swap_balances[_swap].length; \r\n    }\r\n\r\n    /**\r\n    *@dev Gets the owner address and amount by specifying the swap address and index\r\n    *@param _ind specified index in the swap\r\n    *@param _swap specified swap address\r\n    *@return the owner address associated with a particular index in a particular swap\r\n    *@return the amount to transfer associated with a particular index in a particular swap\r\n    */\r\n    function getBalanceAndHolderByIndex(TokenStorage storage self, uint _ind, address _swap) public constant returns (uint, address) {\r\n        return (self.swap_balances[_swap][_ind].amount, self.swap_balances[_swap][_ind].owner);\r\n    }\r\n\r\n    /**\r\n    *@dev Gets the index by specifying the swap and owner addresses\r\n    *@param _owner specifed address\r\n    *@param _swap  specified swap address\r\n    *@return the index associated with the _owner address in a particular swap\r\n    */\r\n    function getIndexByAddress(TokenStorage storage self, address _owner, address _swap) public constant returns (uint) {\r\n        return self.swap_balances_index[_swap][_owner]; \r\n    }\r\n\r\n    /**\r\n    *@dev Look up how much the spender or contract is allowed to spend?\r\n    *@param _owner \r\n    *@param _spender party approved for transfering funds \r\n    *@return the allowed amount _spender can spend of _owner's balance\r\n    */\r\n    function allowance(TokenStorage storage self, address _owner, address _spender) public constant returns (uint) {\r\n        return self.allowed[_owner][_spender]; \r\n    }\r\n}\r\n\r\n// File: contracts\\DRCT_Token.sol\r\n\r\n/**\r\n*The DRCT_Token is an ERC20 compliant token representing the payout of the swap contract\r\n*specified in the Factory contract.\r\n*Each Factory contract is specified one DRCT Token and the token address can contain many\r\n*different swap contracts that are standardized at the Factory level.\r\n*The logic for the functions in this contract is housed in the DRCTLibary.sol.\r\n*/\r\ncontract DRCT_Token {\r\n\r\n    using DRCTLibrary for DRCTLibrary.TokenStorage;\r\n\r\n    /*Variables*/\r\n    DRCTLibrary.TokenStorage public drct;\r\n\r\n    /*Functions*/\r\n    /**\r\n    *@dev Constructor - sets values for token name and token supply, as well as the \r\n    *factory_contract, the swap.\r\n    *@param _factory \r\n    */\r\n    constructor() public {\r\n        drct.startToken(msg.sender);\r\n    }\r\n\r\n    /**\r\n    *@dev Token Creator - This function is called by the factory contract and creates new tokens\r\n    *for the user\r\n    *@param _supply amount of DRCT tokens created by the factory contract for this swap\r\n    *@param _owner address\r\n    *@param _swap address\r\n    */\r\n    function createToken(uint _supply, address _owner, address _swap) public{\r\n        drct.createToken(_supply,_owner,_swap);\r\n    }\r\n\r\n    /**\r\n    *@dev gets the factory address\r\n    */\r\n    function getFactoryAddress() external view returns(address){\r\n        return drct.getFactoryAddress();\r\n    }\r\n\r\n    /**\r\n    *@dev Called by the factory contract, and pays out to a _party\r\n    *@param _party being paid\r\n    *@param _swap address\r\n    */\r\n    function pay(address _party, address _swap) public{\r\n        drct.pay(_party,_swap);\r\n    }\r\n\r\n    /**\r\n    *@dev Returns the users total balance (sum of tokens in all swaps the user has tokens in)\r\n    *@param _owner user address\r\n    *@return user total balance\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint balance) {\r\n       return drct.balanceOf(_owner);\r\n     }\r\n\r\n    /**\r\n    *@dev Getter for the total_supply of tokens in the contract\r\n    *@return total supply\r\n    */\r\n    function totalSupply() public constant returns (uint _total_supply) {\r\n       return drct.totalSupply();\r\n    }\r\n\r\n    /**\r\n    *ERC20 compliant transfer function\r\n    *@param _to Address to send funds to\r\n    *@param _amount Amount of token to send\r\n    *@return true for successful\r\n    */\r\n    function transfer(address _to, uint _amount) public returns (bool) {\r\n        return drct.transfer(_to,_amount);\r\n    }\r\n\r\n    /**\r\n    *@dev ERC20 compliant transferFrom function\r\n    *@param _from address to send funds from (must be allowed, see approve function)\r\n    *@param _to address to send funds to\r\n    *@param _amount amount of token to send\r\n    *@return true for successful transfer\r\n    */\r\n    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\r\n        return drct.transferFrom(_from,_to,_amount);\r\n    }\r\n\r\n    /**\r\n    *@dev ERC20 compliant approve function\r\n    *@param _spender party that msg.sender approves for transferring funds\r\n    *@param _amount amount of token to approve for sending\r\n    *@return true for successful\r\n    */\r\n    function approve(address _spender, uint _amount) public returns (bool) {\r\n        return drct.approve(_spender,_amount);\r\n    }\r\n\r\n    /**\r\n    *@dev Counts addresses involved in the swap based on the length of balances array for _swap\r\n    *@param _swap address\r\n    *@return the length of the balances array for the swap\r\n    */\r\n    function addressCount(address _swap) public constant returns (uint) { \r\n        return drct.addressCount(_swap); \r\n    }\r\n\r\n    /**\r\n    *@dev Gets the owner address and amount by specifying the swap address and index\r\n    *@param _ind specified index in the swap\r\n    *@param _swap specified swap address\r\n    *@return the amount to transfer associated with a particular index in a particular swap\r\n    *@return the owner address associated with a particular index in a particular swap\r\n    */\r\n    function getBalanceAndHolderByIndex(uint _ind, address _swap) public constant returns (uint, address) {\r\n        return drct.getBalanceAndHolderByIndex(_ind,_swap);\r\n    }\r\n\r\n    /**\r\n    *@dev Gets the index by specifying the swap and owner addresses\r\n    *@param _owner specifed address\r\n    *@param _swap  specified swap address\r\n    *@return the index associated with the _owner address in a particular swap\r\n    */\r\n    function getIndexByAddress(address _owner, address _swap) public constant returns (uint) {\r\n        return drct.getIndexByAddress(_owner,_swap); \r\n    }\r\n\r\n    /**\r\n    *@dev Look up how much the spender or contract is allowed to spend?\r\n    *@param _owner address\r\n    *@param _spender party approved for transfering funds \r\n    *@return the allowed amount _spender can spend of _owner's balance\r\n    */\r\n    function allowance(address _owner, address _spender) public constant returns (uint) {\r\n        return drct.allowance(_owner,_spender); \r\n    }\r\n}\r\n\r\n// File: contracts\\interfaces\\Deployer_Interface.sol\r\n\r\n//Swap Deployer functions - descriptions can be found in Deployer.sol\r\ninterface Deployer_Interface {\r\n  function newContract(address _party, address user_contract, uint _start_date) external payable returns (address);\r\n}\r\n\r\n// File: contracts\\interfaces\\Membership_Interface.sol\r\n\r\ninterface Membership_Interface {\r\n    function getMembershipType(address _member) external constant returns(uint);\r\n}\r\n\r\n// File: contracts\\interfaces\\Wrapped_Ether_Interface.sol\r\n\r\n//ERC20 function interface with create token and withdraw\r\ninterface Wrapped_Ether_Interface {\r\n  function totalSupply() external constant returns (uint);\r\n  function balanceOf(address _owner) external constant returns (uint);\r\n  function transfer(address _to, uint _amount) external returns (bool);\r\n  function transferFrom(address _from, address _to, uint _amount) external returns (bool);\r\n  function approve(address _spender, uint _amount) external returns (bool);\r\n  function allowance(address _owner, address _spender) external constant returns (uint);\r\n  function withdraw(uint _value) external;\r\n  function createToken() external;\r\n\r\n}\r\n\r\n// File: contracts\\Factory.sol\r\n\r\n/**\r\n*The Factory contract sets the standardized variables and also deploys new contracts based on\r\n*these variables for the user.  \r\n*/\r\ncontract Factory {\r\n    using SafeMath for uint256;\r\n    \r\n    /*Variables*/\r\n    //Addresses of the Factory owner and oracle. For oracle information, \r\n    //check www.github.com/DecentralizedDerivatives/Oracles\r\n    address public owner;\r\n    address public oracle_address;\r\n    //Address of the user contract\r\n    address public user_contract;\r\n    //Address of the deployer contract\r\n    address internal deployer_address;\r\n    Deployer_Interface internal deployer;\r\n    address public token;\r\n    //A fee for creating a swap in wei.  Plan is for this to be zero, however can be raised to prevent spam\r\n    uint public fee;\r\n    //swap fee\r\n    uint public swapFee;\r\n    //Duration of swap contract in days\r\n    uint public duration;\r\n    //Multiplier of reference rate.  2x refers to a 50% move generating a 100% move in the contract payout values\r\n    uint public multiplier;\r\n    //Token_ratio refers to the number of DRCT Tokens a party will get based on the number of base tokens.  As an example, 1e15 indicates that a party will get 1000 DRCT Tokens based upon 1 ether of wrapped wei. \r\n    uint public token_ratio;\r\n    //Array of deployed contracts\r\n    address[] public contracts;\r\n    uint[] public startDates;\r\n    address public memberContract;\r\n    uint whitelistedTypes;\r\n    mapping(address => uint) public created_contracts;\r\n    mapping(address => uint) public token_dates;\r\n    mapping(uint => address) public long_tokens;\r\n    mapping(uint => address) public short_tokens;\r\n    mapping(address => uint) public token_type; //1=short 2=long\r\n\r\n    /*Events*/\r\n    //Emitted when a Swap is created\r\n    event ContractCreation(address _sender, address _created);\r\n\r\n    /*Modifiers*/\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /*Functions*/\r\n    /**\r\n    *@dev Sets the member type/permissions for those whitelisted and owner\r\n    *@param _memberTypes is the list of member types\r\n    */\r\n     constructor(uint _memberTypes) public {\r\n        owner = msg.sender;\r\n        whitelistedTypes=_memberTypes;\r\n    }\r\n\r\n    /**\r\n    *@dev constructor function for cloned factory\r\n    */\r\n    function init(address _owner, uint _memberTypes) public{\r\n        require(owner == address(0));\r\n        owner = _owner;\r\n        whitelistedTypes=_memberTypes;\r\n    }\r\n\r\n    /**\r\n    *@dev Sets the Membership contract address\r\n    *@param _memberContract The new membership address\r\n    */\r\n    function setMemberContract(address _memberContract) public onlyOwner() {\r\n        memberContract = _memberContract;\r\n    }\r\n\r\n\r\n    /**\r\n    *@dev Checks the membership type/permissions for whitelisted members\r\n    *@param _member address to get membership type from\r\n    */\r\n    function isWhitelisted(address _member) public view returns (bool){\r\n        Membership_Interface Member = Membership_Interface(memberContract);\r\n        return Member.getMembershipType(_member)>= whitelistedTypes;\r\n    }\r\n \r\n    /**\r\n    *@dev Gets long and short token addresses based on specified date\r\n    *@param _date \r\n    *@return short and long tokens' addresses\r\n    */\r\n    function getTokens(uint _date) public view returns(address, address){\r\n        return(long_tokens[_date],short_tokens[_date]);\r\n    }\r\n\r\n    /**\r\n    *@dev Gets the type of Token (long and short token) for the specifed \r\n    *token address\r\n    *@param _token address \r\n    *@return token type short = 1 and long = 2\r\n    */\r\n    function getTokenType(address _token) public view returns(uint){\r\n        return(token_type[_token]);\r\n    }\r\n\r\n    /**\r\n    *@dev Updates the fee amount\r\n    *@param _fee is the new fee amount\r\n    */\r\n    function setFee(uint _fee) public onlyOwner() {\r\n        fee = _fee;\r\n    }\r\n\r\n    /**\r\n    *@dev Updates the swap fee amount\r\n    *@param _swapFee is the new swap fee amount\r\n    */\r\n    function setSwapFee(uint _swapFee) public onlyOwner() {\r\n        swapFee = _swapFee;\r\n    }   \r\n\r\n    /**\r\n    *@dev Sets the deployer address\r\n    *@param _deployer is the new deployer address\r\n    */\r\n    function setDeployer(address _deployer) public onlyOwner() {\r\n        deployer_address = _deployer;\r\n        deployer = Deployer_Interface(_deployer);\r\n    }\r\n\r\n    /**\r\n    *@dev Sets the user_contract address\r\n    *@param _userContract is the new userContract address\r\n    */\r\n    function setUserContract(address _userContract) public onlyOwner() {\r\n        user_contract = _userContract;\r\n    }\r\n\r\n    /**\r\n    *@dev Sets token ratio, swap duration, and multiplier variables for a swap.\r\n    *@param _token_ratio the ratio of the tokens\r\n    *@param _duration the duration of the swap, in days\r\n    *@param _multiplier the multiplier used for the swap\r\n    *@param _swapFee the swap fee\r\n    */\r\n    function setVariables(uint _token_ratio, uint _duration, uint _multiplier, uint _swapFee) public onlyOwner() {\r\n        require(_swapFee < 10000);\r\n        token_ratio = _token_ratio;\r\n        duration = _duration;\r\n        multiplier = _multiplier;\r\n        swapFee = _swapFee;\r\n    }\r\n\r\n    /**\r\n    *@dev Sets the address of the base tokens used for the swap\r\n    *@param _token The address of a token to be used  as collateral\r\n    */\r\n    function setBaseToken(address _token) public onlyOwner() {\r\n        token = _token;\r\n    }\r\n\r\n    /**\r\n    *@dev Allows a user to deploy a new swap contract, if they pay the fee\r\n    *@param _start_date the contract start date \r\n    *@return new_contract address for he newly created swap address and calls \r\n    *event 'ContractCreation'\r\n    */\r\n    function deployContract(uint _start_date) public payable returns (address) {\r\n        require(msg.value >= fee && isWhitelisted(msg.sender));\r\n        require(_start_date % 86400 == 0);\r\n        address new_contract = deployer.newContract(msg.sender, user_contract, _start_date);\r\n        contracts.push(new_contract);\r\n        created_contracts[new_contract] = _start_date;\r\n        emit ContractCreation(msg.sender,new_contract);\r\n        return new_contract;\r\n    }\r\n\r\n    /**\r\n    *@dev Deploys DRCT tokens for given start date\r\n    *@param _start_date of contract\r\n    */\r\n    function deployTokenContract(uint _start_date) public{\r\n        address _token;\r\n        require(_start_date % 86400 == 0);\r\n        require(long_tokens[_start_date] == address(0) && short_tokens[_start_date] == address(0));\r\n        _token = new DRCT_Token();\r\n        token_dates[_token] = _start_date;\r\n        long_tokens[_start_date] = _token;\r\n        token_type[_token]=2;\r\n        _token = new DRCT_Token();\r\n        token_type[_token]=1;\r\n        short_tokens[_start_date] = _token;\r\n        token_dates[_token] = _start_date;\r\n        startDates.push(_start_date);\r\n\r\n    }\r\n\r\n    /**\r\n    *@dev Deploys new tokens on a DRCT_Token contract -- called from within a swap\r\n    *@param _supply The number of tokens to create\r\n    *@param _party the address to send the tokens to\r\n    *@param _start_date the start date of the contract      \r\n    *@returns ltoken the address of the created DRCT long tokens\r\n    *@returns stoken the address of the created DRCT short tokens\r\n    *@returns token_ratio The ratio of the created DRCT token\r\n    */\r\n    function createToken(uint _supply, address _party, uint _start_date) public returns (address, address, uint) {\r\n        require(created_contracts[msg.sender] == _start_date);\r\n        address ltoken = long_tokens[_start_date];\r\n        address stoken = short_tokens[_start_date];\r\n        require(ltoken != address(0) && stoken != address(0));\r\n            DRCT_Token drct_interface = DRCT_Token(ltoken);\r\n            drct_interface.createToken(_supply.div(token_ratio), _party,msg.sender);\r\n            drct_interface = DRCT_Token(stoken);\r\n            drct_interface.createToken(_supply.div(token_ratio), _party,msg.sender);\r\n        return (ltoken, stoken, token_ratio);\r\n    }\r\n  \r\n    /**\r\n    *@dev Allows the owner to set a new oracle address\r\n    *@param _new_oracle_address \r\n    */\r\n    function setOracleAddress(address _new_oracle_address) public onlyOwner() {\r\n        oracle_address = _new_oracle_address; \r\n    }\r\n\r\n    /**\r\n    *@dev Allows the owner to set a new owner address\r\n    *@param _new_owner the new owner address\r\n    */\r\n    function setOwner(address _new_owner) public onlyOwner() { \r\n        owner = _new_owner; \r\n    }\r\n\r\n    /**\r\n    *@dev Allows the owner to pull contract creation fees\r\n    *@return the withdrawal fee _val and the balance where is the return function?\r\n    */\r\n    function withdrawFees() public onlyOwner(){\r\n        Wrapped_Ether_Interface token_interface = Wrapped_Ether_Interface(token);\r\n        uint _val = token_interface.balanceOf(address(this));\r\n        if(_val > 0){\r\n            token_interface.withdraw(_val);\r\n        }\r\n        owner.transfer(address(this).balance);\r\n     }\r\n\r\n    /**\r\n    *@dev fallback function\r\n    */ \r\n    function() public payable {\r\n    }\r\n\r\n    /**\r\n    *@dev Returns a tuple of many private variables.\r\n    *The variables from this function are pass through to the TokenLibrary.getVariables function\r\n    *@returns oracle_adress is the address of the oracle\r\n    *@returns duration is the duration of the swap\r\n    *@returns multiplier is the multiplier for the swap\r\n    *@returns token is the address of token\r\n    *@returns _swapFee is the swap fee \r\n    */\r\n    function getVariables() public view returns (address, uint, uint, address,uint){\r\n        return (oracle_address,duration, multiplier, token,swapFee);\r\n    }\r\n\r\n    /**\r\n    *@dev Pays out to a DRCT token\r\n    *@param _party is the address being paid\r\n    *@param _token_add token to pay out\r\n    */\r\n    function payToken(address _party, address _token_add) public {\r\n        require(created_contracts[msg.sender] > 0);\r\n        DRCT_Token drct_interface = DRCT_Token(_token_add);\r\n        drct_interface.pay(_party, msg.sender);\r\n    }\r\n\r\n    /**\r\n    *@dev Counts number of contacts created by this factory\r\n    *@return the number of contracts\r\n    */\r\n    function getCount() public constant returns(uint) {\r\n        return contracts.length;\r\n    }\r\n\r\n    /**\r\n    *@dev Counts number of start dates in this factory\r\n    *@return the number of active start dates\r\n    */\r\n    function getDateCount() public constant returns(uint) {\r\n        return startDates.length;\r\n    }\r\n}\r\n\r\n// File: contracts\\MasterDeployer.sol\r\n\r\n/**\r\n*This contract deploys a factory contract and uses CloneFactory to clone the factory\r\n*specified.\r\n*/\r\n\r\ncontract MasterDeployer is CloneFactory{\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    /*Variables*/\r\n\taddress[] factory_contracts;\r\n\taddress private factory;\r\n\tmapping(address => uint) public factory_index;\r\n\r\n    /*Events*/\r\n\tevent NewFactory(address _factory);\r\n\r\n    /*Functions*/\r\n    /**\r\n    *@dev Initiates the factory_contract array with address(0)\r\n    */\r\n\tconstructor() public {\r\n\t\tfactory_contracts.push(address(0));\r\n\t}\r\n\r\n    /**\r\n    *@dev Set factory address to clone\r\n    *@param _factory address to clone\r\n    */\t\r\n\tfunction setFactory(address _factory) public onlyOwner(){\r\n\t\tfactory = _factory;\r\n\t}\r\n\r\n    /**\r\n    *@dev creates a new factory by cloning the factory specified in setFactory.\r\n    *@return _new_fac which is the new factory address\r\n    */\r\n\tfunction deployFactory(uint _memberTypes) public onlyOwner() returns(address){\r\n\t\taddress _new_fac = createClone(factory);\r\n\t\tfactory_index[_new_fac] = factory_contracts.length;\r\n\t\tfactory_contracts.push(_new_fac);\r\n\t\tFactory(_new_fac).init(msg.sender,_memberTypes);\r\n\t\temit NewFactory(_new_fac);\r\n\t\treturn _new_fac;\r\n\t}\r\n\r\n    /**\r\n    *@dev Removes the factory specified\r\n    *@param _factory address to remove\r\n    */\r\n\tfunction removeFactory(address _factory) public onlyOwner(){\r\n\t\trequire(_factory != address(0) && factory_index[_factory] != 0);\r\n\t\tuint256 fIndex = factory_index[_factory];\r\n        uint256 lastFactoryIndex = factory_contracts.length.sub(1);\r\n        address lastFactory = factory_contracts[lastFactoryIndex];\r\n        factory_contracts[fIndex] = lastFactory;\r\n        factory_index[lastFactory] = fIndex;\r\n        factory_contracts.length--;\r\n        factory_index[_factory] = 0;\r\n\t}\r\n\r\n    /**\r\n    *@dev Counts the number of factories\r\n    *@returns the number of active factories\r\n    */\r\n\tfunction getFactoryCount() public constant returns(uint){\r\n\t\treturn factory_contracts.length - 1;\r\n\t}\r\n\r\n    /**\r\n    *@dev Returns the factory address for the specified index\r\n    *@param _index for factory to look up in the factory_contracts array\r\n    *@return factory address for the index specified\r\n    */\r\n\tfunction getFactorybyIndex(uint _index) public constant returns(address){\r\n\t\treturn factory_contracts[_index];\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFactorybyIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"removeFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"factory_index\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFactoryCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_memberTypes\",\"type\":\"uint256\"}],\"name\":\"deployFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"NewFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"clone\",\"type\":\"address\"}],\"name\":\"CloneCreated\",\"type\":\"event\"}]","ContractName":"MasterDeployer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c9cd7306e97122db73f9cbce24ab3467c799e3fe2a3fbde990044e24b94b84bb"}]}