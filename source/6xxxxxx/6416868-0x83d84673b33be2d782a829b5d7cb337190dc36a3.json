{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ninterface ApproveAndCallFallBack {\r\n    function receiveApproval(\r\n        address from,\r\n        uint256 _amount,\r\n        address _token,\r\n        bytes _data\r\n    ) external;\r\n}\r\n\r\n\r\ncontract Controlled {\r\n    /// @notice The address of the controller is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyController { \r\n        require(msg.sender == controller); \r\n        _; \r\n    }\r\n\r\n    address public controller;\r\n\r\n    constructor() internal { \r\n        controller = msg.sender; \r\n    }\r\n\r\n    /// @notice Changes the controller of the contract\r\n    /// @param _newController The new controller of the contract\r\n    function changeController(address _newController) public onlyController {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n* Used to proxy function calls to the RLPReader for testing\r\n*/\r\n/*\r\n* @author Hamdi Allam hamdi.allam97@gmail.com\r\n* Please reach our for any questions/concerns\r\n*/\r\n\r\n\r\nlibrary RLPReader {\r\n    uint8 constant STRING_SHORT_START = 0x80;\r\n    uint8 constant STRING_LONG_START  = 0xb8;\r\n    uint8 constant LIST_SHORT_START   = 0xc0;\r\n    uint8 constant LIST_LONG_START    = 0xf8;\r\n\r\n    uint8 constant WORD_SIZE = 32;\r\n\r\n    struct RLPItem {\r\n        uint len;\r\n        uint memPtr;\r\n    }\r\n\r\n    /*\r\n    * @param item RLP encoded bytes\r\n    */\r\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\r\n        if (item.length == 0) \r\n            return RLPItem(0, 0);\r\n\r\n        uint memPtr;\r\n        assembly {\r\n            memPtr := add(item, 0x20)\r\n        }\r\n\r\n        return RLPItem(item.length, memPtr);\r\n    }\r\n\r\n    /*\r\n    * @param item RLP encoded list in bytes\r\n    */\r\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory result) {\r\n        require(isList(item));\r\n\r\n        uint items = numItems(item);\r\n        result = new RLPItem[](items);\r\n\r\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\r\n        uint dataLen;\r\n        for (uint i = 0; i < items; i++) {\r\n            dataLen = _itemLength(memPtr);\r\n            result[i] = RLPItem(dataLen, memPtr); \r\n            memPtr = memPtr + dataLen;\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Helpers\r\n    */\r\n\r\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\r\n    function isList(RLPItem memory item) internal pure returns (bool) {\r\n        uint8 byte0;\r\n        uint memPtr = item.memPtr;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < LIST_SHORT_START)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    // @return number of payload items inside an encoded list.\r\n    function numItems(RLPItem memory item) internal pure returns (uint) {\r\n        uint count = 0;\r\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\r\n        uint endPtr = item.memPtr + item.len;\r\n        while (currPtr < endPtr) {\r\n           currPtr = currPtr + _itemLength(currPtr); // skip over an item\r\n           count++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    // @return entire rlp item byte length\r\n    function _itemLength(uint memPtr) internal pure returns (uint len) {\r\n        uint byte0;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < STRING_SHORT_START)\r\n            return 1;\r\n        \r\n        else if (byte0 < STRING_LONG_START)\r\n            return byte0 - STRING_SHORT_START + 1;\r\n\r\n        else if (byte0 < LIST_SHORT_START) {\r\n            assembly {\r\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\r\n                memPtr := add(memPtr, 1) // skip over the first byte\r\n                \r\n                /* 32 byte word size */\r\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\r\n                len := add(dataLen, add(byteLen, 1))\r\n            }\r\n        }\r\n\r\n        else if (byte0 < LIST_LONG_START) {\r\n            return byte0 - LIST_SHORT_START + 1;\r\n        } \r\n\r\n        else {\r\n            assembly {\r\n                let byteLen := sub(byte0, 0xf7)\r\n                memPtr := add(memPtr, 1)\r\n\r\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\r\n                len := add(dataLen, add(byteLen, 1))\r\n            }\r\n        }\r\n    }\r\n\r\n    // @return number of bytes until the data\r\n    function _payloadOffset(uint memPtr) internal pure returns (uint) {\r\n        uint byte0;\r\n        assembly {\r\n            byte0 := byte(0, mload(memPtr))\r\n        }\r\n\r\n        if (byte0 < STRING_SHORT_START) \r\n            return 0;\r\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START))\r\n            return 1;\r\n        else if (byte0 < LIST_SHORT_START)  // being explicit\r\n            return byte0 - (STRING_LONG_START - 1) + 1;\r\n        else\r\n            return byte0 - (LIST_LONG_START - 1) + 1;\r\n    }\r\n\r\n    /** RLPItem conversions into data types **/\r\n\r\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\r\n        require(item.len == 1, \"Invalid RLPItem. Booleans are encoded in 1 byte\");\r\n        uint result;\r\n        uint memPtr = item.memPtr;\r\n        assembly {\r\n            result := byte(0, mload(memPtr))\r\n        }\r\n\r\n        return result == 0 ? false : true;\r\n    }\r\n\r\n    function toAddress(RLPItem memory item) internal pure returns (address) {\r\n        // 1 byte for the length prefix according to RLP spec\r\n        require(item.len == 21, \"Invalid RLPItem. Addresses are encoded in 20 bytes\");\r\n        \r\n        uint memPtr = item.memPtr + 1; // skip the length prefix\r\n        uint addr;\r\n        assembly {\r\n            addr := div(mload(memPtr), exp(256, 12)) // right shift 12 bytes. we want the most significant 20 bytes\r\n        }\r\n        \r\n        return address(addr);\r\n    }\r\n\r\n    function toUint(RLPItem memory item) internal pure returns (uint) {\r\n        uint offset = _payloadOffset(item.memPtr);\r\n        uint len = item.len - offset;\r\n        uint memPtr = item.memPtr + offset;\r\n\r\n        uint result;\r\n        assembly {\r\n            result := div(mload(memPtr), exp(256, sub(32, len))) // shift to the correct location\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function toBytes(RLPItem memory item) internal pure returns (bytes) {\r\n        uint offset = _payloadOffset(item.memPtr);\r\n        uint len = item.len - offset; // data length\r\n        bytes memory result = new bytes(len);\r\n\r\n        uint destPtr;\r\n        assembly {\r\n            destPtr := add(0x20, result)\r\n        }\r\n\r\n        copy(item.memPtr + offset, destPtr, len);\r\n        return result;\r\n    }\r\n\r\n\r\n    /*\r\n    * @param src Pointer to source\r\n    * @param dest Pointer to destination\r\n    * @param len Amount of memory to copy from the source\r\n    */\r\n    function copy(uint src, uint dest, uint len) internal pure {\r\n        // copy as many word sizes as possible\r\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n\r\n            src += WORD_SIZE;\r\n            dest += WORD_SIZE;\r\n        }\r\n\r\n        // left over bytes\r\n        uint mask = 256 ** (WORD_SIZE - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask)) // zero out src\r\n            let destpart := and(mload(dest), mask) // retrieve the bytes\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n}\r\n\r\ncontract RLPHelper {\r\n    using RLPReader for bytes;\r\n    using RLPReader for uint;\r\n    using RLPReader for RLPReader.RLPItem;\r\n\r\n    function isList(bytes memory item) public pure returns (bool) {\r\n        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\r\n        return rlpItem.isList();\r\n    }\r\n\r\n    function itemLength(bytes memory item) public pure returns (uint) {\r\n        uint memPtr;\r\n        assembly {\r\n            memPtr := add(0x20, item)\r\n        }\r\n\r\n        return memPtr._itemLength();\r\n    }\r\n\r\n    function numItems(bytes memory item) public pure returns (uint) {\r\n        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\r\n        return rlpItem.numItems();\r\n    }\r\n\r\n    function toBytes(bytes memory item) public pure returns (bytes) {\r\n        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\r\n        return rlpItem.toBytes();\r\n    }\r\n\r\n    function toUint(bytes memory item) public pure returns (uint) {\r\n        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\r\n        return rlpItem.toUint();\r\n    }\r\n\r\n    function toAddress(bytes memory item) public pure returns (address) {\r\n        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\r\n        return rlpItem.toAddress();\r\n    }\r\n\r\n    function toBoolean(bytes memory item) public pure returns (bool) {\r\n        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\r\n        return rlpItem.toBoolean();\r\n    }\r\n\r\n    function bytesToString(bytes memory item) public pure returns (string) {\r\n        RLPReader.RLPItem memory rlpItem = item.toRlpItem();\r\n        return string(rlpItem.toBytes());\r\n    }\r\n\r\n    /* custom destructuring */\r\n    /*function customDestructure(bytes memory item) public pure returns (address, bool, uint) {\r\n        // first three elements follow the return types in order. Ignore the rest\r\n        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();\r\n        return (items[0].toAddress(), items[1].toBoolean(), items[2].toUint());\r\n    }\r\n\r\n    function customNestedDestructure(bytes memory item) public pure returns (address, uint) {\r\n        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();\r\n        items = items[0].toList();\r\n        return (items[0].toAddress(), items[1].toUint());\r\n    }*/\r\n\r\n\r\n    //======================================\r\n\r\n    function pollTitle(bytes memory item) public pure returns (string) {\r\n        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();\r\n        return string(items[0].toBytes());\r\n    }\r\n\r\n    function pollBallot(bytes memory item, uint ballotNum) public pure returns (string) {\r\n        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();\r\n        items = items[1].toList();\r\n        return string(items[ballotNum].toBytes());\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n    Copyright 2016, Jordi Baylina\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n/**\r\n * @title MiniMeToken Contract\r\n * @author Jordi Baylina\r\n * @dev This token contract's goal is to make it easy for anyone to clone this\r\n *  token using the token distribution at a given block, this will allow DAO's\r\n *  and DApps to upgrade their features in a decentralized manner without\r\n *  affecting the original token\r\n * @dev It is ERC20 compliant, but still needs to under go further testing.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @dev The token controller contract must implement these functions\r\n */\r\ninterface TokenController {\r\n    /**\r\n     * @notice Called when `_owner` sends ether to the MiniMe Token contract\r\n     * @param _owner The address that sent the ether to create tokens\r\n     * @return True if the ether is accepted, false if it throws\r\n     */\r\n    function proxyPayment(address _owner) external payable returns(bool);\r\n\r\n    /**\r\n     * @notice Notifies the controller about a token transfer allowing the\r\n     *  controller to react if desired\r\n     * @param _from The origin of the transfer\r\n     * @param _to The destination of the transfer\r\n     * @param _amount The amount of the transfer\r\n     * @return False if the controller does not authorize the transfer\r\n     */\r\n    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\r\n\r\n    /**\r\n     * @notice Notifies the controller about an approval allowing the\r\n     *  controller to react if desired\r\n     * @param _owner The address that calls `approve()`\r\n     * @param _spender The spender in the `approve()` call\r\n     * @param _amount The amount in the `approve()` call\r\n     * @return False if the controller does not authorize the approval\r\n     */\r\n    function onApprove(address _owner, address _spender, uint _amount) external\r\n        returns(bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\ninterface ERC20Token {\r\n\r\n    /**\r\n     * @notice send `_value` token to `_to` from `msg.sender`\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of tokens to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @param _owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    /**\r\n     * @notice return total supply of tokens\r\n     */\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract MiniMeTokenInterface is ERC20Token {\r\n\r\n    /**\r\n     * @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n     *  its behalf, and then a function is triggered in the contract that is\r\n     *  being approved, `_spender`. This allows users to use their tokens to\r\n     *  interact with contracts in one function call instead of two\r\n     * @param _spender The address of the contract able to transfer the tokens\r\n     * @param _amount The amount of tokens to be approved for transfer\r\n     * @return True if the function call was successful\r\n     */\r\n    function approveAndCall(\r\n        address _spender,\r\n        uint256 _amount,\r\n        bytes _extraData\r\n    ) \r\n        external \r\n        returns (bool success);\r\n\r\n    /**    \r\n     * @notice Creates a new clone token with the initial distribution being\r\n     *  this token at `_snapshotBlock`\r\n     * @param _cloneTokenName Name of the clone token\r\n     * @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n     * @param _cloneTokenSymbol Symbol of the clone token\r\n     * @param _snapshotBlock Block when the distribution of the parent token is\r\n     *  copied to set the initial distribution of the new clone token;\r\n     *  if the block is zero than the actual block, the current block is used\r\n     * @param _transfersEnabled True if transfers are allowed in the clone\r\n     * @return The address of the new MiniMeToken Contract\r\n     */\r\n    function createCloneToken(\r\n        string _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n    ) \r\n        public\r\n        returns(address);\r\n\r\n    /**    \r\n     * @notice Generates `_amount` tokens that are assigned to `_owner`\r\n     * @param _owner The address that will be assigned the new tokens\r\n     * @param _amount The quantity of tokens generated\r\n     * @return True if the tokens are generated correctly\r\n     */\r\n    function generateTokens(\r\n        address _owner,\r\n        uint _amount\r\n    )\r\n        public\r\n        returns (bool);\r\n\r\n    /**\r\n     * @notice Burns `_amount` tokens from `_owner`\r\n     * @param _owner The address that will lose the tokens\r\n     * @param _amount The quantity of tokens to burn\r\n     * @return True if the tokens are burned correctly\r\n     */\r\n    function destroyTokens(\r\n        address _owner,\r\n        uint _amount\r\n    ) \r\n        public\r\n        returns (bool);\r\n\r\n    /**        \r\n     * @notice Enables token holders to transfer their tokens freely if true\r\n     * @param _transfersEnabled True if transfers are allowed in the clone\r\n     */\r\n    function enableTransfers(bool _transfersEnabled) public;\r\n\r\n    /**    \r\n     * @notice This method can be used by the controller to extract mistakenly\r\n     *  sent tokens to this contract.\r\n     * @param _token The address of the token contract that you want to recover\r\n     *  set to 0 in case you want to extract ether.\r\n     */\r\n    function claimTokens(address _token) public;\r\n\r\n    /**\r\n     * @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n     * @param _owner The address from which the balance will be retrieved\r\n     * @param _blockNumber The block number when the balance is queried\r\n     * @return The balance at `_blockNumber`\r\n     */\r\n    function balanceOfAt(\r\n        address _owner,\r\n        uint _blockNumber\r\n    ) \r\n        public\r\n        constant\r\n        returns (uint);\r\n\r\n    /**\r\n     * @notice Total amount of tokens at a specific `_blockNumber`.\r\n     * @param _blockNumber The block number when the totalSupply is queried\r\n     * @return The total amount of tokens at `_blockNumber`\r\n     */\r\n    function totalSupplyAt(uint _blockNumber) public view returns(uint);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n////////////////\r\n// MiniMeTokenFactory\r\n////////////////\r\n\r\n/**\r\n * @dev This contract is used to generate clone contracts from a contract.\r\n *  In solidity this is the way to create a contract from a contract of the\r\n *  same class\r\n */\r\ncontract MiniMeTokenFactory {\r\n\r\n    /**\r\n     * @notice Update the DApp by creating a new token with new functionalities\r\n     *  the msg.sender becomes the controller of this clone token\r\n     * @param _parentToken Address of the token being cloned\r\n     * @param _snapshotBlock Block of the parent token that will\r\n     *  determine the initial distribution of the clone token\r\n     * @param _tokenName Name of the new token\r\n     * @param _decimalUnits Number of decimals of the new token\r\n     * @param _tokenSymbol Token Symbol for the new token\r\n     * @param _transfersEnabled If true, tokens will be able to be transferred\r\n     * @return The address of the new token contract\r\n     */\r\n    function createCloneToken(\r\n        address _parentToken,\r\n        uint _snapshotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) public returns (MiniMeToken) {\r\n        MiniMeToken newToken = new MiniMeToken(\r\n            this,\r\n            _parentToken,\r\n            _snapshotBlock,\r\n            _tokenName,\r\n            _decimalUnits,\r\n            _tokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        newToken.changeController(msg.sender);\r\n        return newToken;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev The actual token contract, the default controller is the msg.sender\r\n *  that deploys the contract, so usually this token will be deployed by a\r\n *  token controller contract, which Giveth will call a \"Campaign\"\r\n */\r\ncontract MiniMeToken is MiniMeTokenInterface, Controlled {\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = \"MMT_0.1\"; //An arbitrary versioning scheme\r\n\r\n    /**\r\n     * @dev `Checkpoint` is the structure that attaches a block number to a\r\n     *  given value, the block number attached is the one that last changed the\r\n     *  value\r\n     */\r\n    struct Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `parentToken` is the Token address that was cloned to produce this token;\r\n    //  it will be 0x0 for a token that was not cloned\r\n    MiniMeToken public parentToken;\r\n\r\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\r\n    //  used to determine the initial distribution of the Clone Token\r\n    uint public parentSnapShotBlock;\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map \r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transfersEnabled;\r\n\r\n    // The factory used to create new clone tokens\r\n    MiniMeTokenFactory public tokenFactory;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /** \r\n     * @notice Constructor to create a MiniMeToken\r\n     * @param _tokenFactory The address of the MiniMeTokenFactory contract that\r\n     *  will create the Clone token contracts, the token factory needs to be\r\n     *  deployed first\r\n     * @param _parentToken Address of the parent token, set to 0x0 if it is a\r\n     *  new token\r\n     * @param _parentSnapShotBlock Block of the parent token that will\r\n     *  determine the initial distribution of the clone token, set to 0 if it\r\n     *  is a new token\r\n     * @param _tokenName Name of the new token\r\n     * @param _decimalUnits Number of decimals of the new token\r\n     * @param _tokenSymbol Token Symbol for the new token\r\n     * @param _transfersEnabled If true, tokens will be able to be transferred\r\n     */\r\n    constructor(\r\n        address _tokenFactory,\r\n        address _parentToken,\r\n        uint _parentSnapShotBlock,\r\n        string _tokenName,\r\n        uint8 _decimalUnits,\r\n        string _tokenSymbol,\r\n        bool _transfersEnabled\r\n    ) \r\n        public\r\n    {\r\n        require(_tokenFactory != address(0)); //if not set, clone feature will not work properly\r\n        tokenFactory = MiniMeTokenFactory(_tokenFactory);\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = _decimalUnits;                          // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        parentToken = MiniMeToken(_parentToken);\r\n        parentSnapShotBlock = _parentSnapShotBlock;\r\n        transfersEnabled = _transfersEnabled;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /**\r\n     * @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n     * @param _to The address of the recipient\r\n     * @param _amount The amount of tokens to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        require(transfersEnabled);\r\n        return doTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n     *  is approved by `_from`\r\n     * @param _from The address holding the tokens being transferred\r\n     * @param _to The address of the recipient\r\n     * @param _amount The amount of tokens to be transferred\r\n     * @return True if the transfer was successful\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) \r\n        public \r\n        returns (bool success)\r\n    {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n        if (msg.sender != controller) {\r\n            require(transfersEnabled);\r\n\r\n            // The standard ERC 20 transferFrom functionality\r\n            if (allowed[_from][msg.sender] < _amount) { \r\n                return false;\r\n            }\r\n            allowed[_from][msg.sender] -= _amount;\r\n        }\r\n        return doTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev This is the actual transfer function in the token contract, it can\r\n     *  only be called by other functions in this contract.\r\n     * @param _from The address holding the tokens being transferred\r\n     * @param _to The address of the recipient\r\n     * @param _amount The amount of tokens to be transferred\r\n     * @return True if the transfer was successful\r\n     */\r\n    function doTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint _amount\r\n    ) \r\n        internal\r\n        returns(bool)\r\n    {\r\n\r\n        if (_amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        require(parentSnapShotBlock < block.number);\r\n\r\n        // Do not allow transfer to 0x0 or the token contract itself\r\n        require((_to != 0) && (_to != address(this)));\r\n\r\n        // If the amount being transfered is more than the balance of the\r\n        //  account the transfer returns false\r\n        uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\r\n        if (previousBalanceFrom < _amount) {\r\n            return false;\r\n        }\r\n\r\n        // Alerts the token controller of the transfer\r\n        if (isContract(controller)) {\r\n            require(TokenController(controller).onTransfer(_from, _to, _amount));\r\n        }\r\n\r\n        // First update the balance array with the new value for the address\r\n        //  sending the tokens\r\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n        // Then update the balance array with the new value for the address\r\n        //  receiving the tokens\r\n        uint256 previousBalanceTo = balanceOfAt(_to, block.number);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n        // An event to make the transfer easy to find on the blockchain\r\n        emit Transfer(_from, _to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function doApprove(\r\n        address _from,\r\n        address _spender,\r\n        uint256 _amount\r\n    )\r\n        internal \r\n        returns (bool)\r\n    {\r\n        require(transfersEnabled);\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_amount == 0) || (allowed[_from][_spender] == 0));\r\n\r\n        // Alerts the token controller of the approve function call\r\n        if (isContract(controller)) {\r\n            require(TokenController(controller).onApprove(_from, _spender, _amount));\r\n        }\r\n\r\n        allowed[_from][_spender] = _amount;\r\n        emit Approval(_from, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param _owner The address that's balance is being requested\r\n     * @return The balance of `_owner` at the current block\r\n     */\r\n    function balanceOf(address _owner) external view returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /**\r\n     * @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n     *  its behalf. This is a modified version of the ERC20 approve function\r\n     *  to be a little bit safer\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _amount The amount of tokens to be approved for transfer\r\n     * @return True if the approval was successful\r\n     */\r\n    function approve(address _spender, uint256 _amount) external returns (bool success) {\r\n        doApprove(msg.sender, _spender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev This function makes it easy to read the `allowed[]` map\r\n     * @param _owner The address of the account that owns the token\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens of _owner that _spender is allowed\r\n     *  to spend\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    ) \r\n        external\r\n        view\r\n        returns (uint256 remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    /**\r\n     * @notice `msg.sender` approves `_spender` to send `_amount` tokens on\r\n     *  its behalf, and then a function is triggered in the contract that is\r\n     *  being approved, `_spender`. This allows users to use their tokens to\r\n     *  interact with contracts in one function call instead of two\r\n     * @param _spender The address of the contract able to transfer the tokens\r\n     * @param _amount The amount of tokens to be approved for transfer\r\n     * @return True if the function call was successful\r\n     */\r\n    function approveAndCall(\r\n        address _spender,\r\n        uint256 _amount,\r\n        bytes _extraData\r\n    ) \r\n        external \r\n        returns (bool success)\r\n    {\r\n        require(doApprove(msg.sender, _spender, _amount));\r\n\r\n        ApproveAndCallFallBack(_spender).receiveApproval(\r\n            msg.sender,\r\n            _amount,\r\n            this,\r\n            _extraData\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev This function makes it easy to get the total number of tokens\r\n     * @return The total number of tokens\r\n     */\r\n    function totalSupply() external view returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /**\r\n     * @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n     * @param _owner The address from which the balance will be retrieved\r\n     * @param _blockNumber The block number when the balance is queried\r\n     * @return The balance at `_blockNumber`\r\n     */\r\n    function balanceOfAt(\r\n        address _owner,\r\n        uint _blockNumber\r\n    ) \r\n        public\r\n        view\r\n        returns (uint) \r\n    {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                // Has no parent\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Total amount of tokens at a specific `_blockNumber`.\r\n     * @param _blockNumber The block number when the totalSupply is queried\r\n     * @return The total amount of tokens at `_blockNumber`\r\n     */\r\n    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n            if (address(parentToken) != 0) {\r\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\r\n            } else {\r\n                return 0;\r\n            }\r\n\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Clone Token Method\r\n////////////////\r\n\r\n    /**\r\n     * @notice Creates a new clone token with the initial distribution being\r\n     *  this token at `_snapshotBlock`\r\n     * @param _cloneTokenName Name of the clone token\r\n     * @param _cloneDecimalUnits Number of decimals of the smallest unit\r\n     * @param _cloneTokenSymbol Symbol of the clone token\r\n     * @param _snapshotBlock Block when the distribution of the parent token is\r\n     *  copied to set the initial distribution of the new clone token;\r\n     *  if the block is zero than the actual block, the current block is used\r\n     * @param _transfersEnabled True if transfers are allowed in the clone\r\n     * @return The address of the new MiniMeToken Contract\r\n     */\r\n    function createCloneToken(\r\n        string _cloneTokenName,\r\n        uint8 _cloneDecimalUnits,\r\n        string _cloneTokenSymbol,\r\n        uint _snapshotBlock,\r\n        bool _transfersEnabled\r\n        ) \r\n            public\r\n            returns(address)\r\n        {\r\n        uint snapshotBlock = _snapshotBlock;\r\n        if (snapshotBlock == 0) {\r\n            snapshotBlock = block.number;\r\n        }\r\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\r\n            this,\r\n            snapshotBlock,\r\n            _cloneTokenName,\r\n            _cloneDecimalUnits,\r\n            _cloneTokenSymbol,\r\n            _transfersEnabled\r\n            );\r\n\r\n        cloneToken.changeController(msg.sender);\r\n\r\n        // An event to make the token easy to find on the blockchain\r\n        emit NewCloneToken(address(cloneToken), snapshotBlock);\r\n        return address(cloneToken);\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n    \r\n    /**\r\n     * @notice Generates `_amount` tokens that are assigned to `_owner`\r\n     * @param _owner The address that will be assigned the new tokens\r\n     * @param _amount The quantity of tokens generated\r\n     * @return True if the tokens are generated correctly\r\n     */\r\n    function generateTokens(\r\n        address _owner,\r\n        uint _amount\r\n    )\r\n        public\r\n        onlyController\r\n        returns (bool)\r\n    {\r\n        uint curTotalSupply = totalSupplyAt(block.number);\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOfAt(_owner, block.number);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        emit Transfer(0, _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Burns `_amount` tokens from `_owner`\r\n     * @param _owner The address that will lose the tokens\r\n     * @param _amount The quantity of tokens to burn\r\n     * @return True if the tokens are burned correctly\r\n     */\r\n    function destroyTokens(\r\n        address _owner,\r\n        uint _amount\r\n    ) \r\n        public\r\n        onlyController\r\n        returns (bool)\r\n    {\r\n        uint curTotalSupply = totalSupplyAt(block.number);\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOfAt(_owner, block.number);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\r\n        emit Transfer(_owner, 0, _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Enable tokens transfers\r\n////////////////\r\n\r\n    /**\r\n     * @notice Enables token holders to transfer their tokens freely if true\r\n     * @param _transfersEnabled True if transfers are allowed in the clone\r\n     */\r\n    function enableTransfers(bool _transfersEnabled) public onlyController {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /**\r\n     * @dev `getValueAt` retrieves the number of tokens at a given block number\r\n     * @param checkpoints The history of values being queried\r\n     * @param _block The block number to retrieve the value at\r\n     * @return The number of tokens being queried\r\n     */\r\n    function getValueAt(\r\n        Checkpoint[] storage checkpoints,\r\n        uint _block\r\n    ) \r\n        view\r\n        internal\r\n        returns (uint)\r\n    {\r\n        if (checkpoints.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock) {\r\n            return checkpoints[checkpoints.length-1].value;\r\n        }\r\n        if (_block < checkpoints[0].fromBlock) {\r\n            return 0;\r\n        }\r\n\r\n        // Binary search of the value in the array\r\n        uint min = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > min) {\r\n            uint mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n    /**\r\n     * @dev `updateValueAtNow` used to update the `balances` map and the\r\n     *  `totalSupplyHistory`\r\n     * @param checkpoints The history of data being updated\r\n     * @param _value The new number of tokens\r\n     */\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\r\n        if (\r\n            (checkpoints.length == 0) ||\r\n            (checkpoints[checkpoints.length - 1].fromBlock < block.number)) \r\n        {\r\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\r\n            newCheckPoint.fromBlock = uint128(block.number);\r\n            newCheckPoint.value = uint128(_value);\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to determine if an address is a contract\r\n     * @param _addr The address being queried\r\n     * @return True if `_addr` is a contract\r\n     */\r\n    function isContract(address _addr) internal view returns(bool) {\r\n        uint size;\r\n        if (_addr == 0) {\r\n            return false;\r\n        }    \r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Helper function to return a min betwen the two uints\r\n     */\r\n    function min(uint a, uint b) internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @notice The fallback function: If the contract's controller has not been\r\n     *  set to 0, then the `proxyPayment` method is called which relays the\r\n     *  ether and creates tokens as described in the token controller contract\r\n     */\r\n    function () public payable {\r\n        require(isContract(controller));\r\n        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\r\n    }\r\n\r\n//////////\r\n// Safety Methods\r\n//////////\r\n\r\n    /**\r\n     * @notice This method can be used by the controller to extract mistakenly\r\n     *  sent tokens to this contract.\r\n     * @param _token The address of the token contract that you want to recover\r\n     *  set to 0 in case you want to extract ether.\r\n     */\r\n    function claimTokens(address _token) public onlyController {\r\n        if (_token == 0x0) {\r\n            controller.transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        MiniMeToken token = MiniMeToken(_token);\r\n        uint balance = token.balanceOf(address(this));\r\n        token.transfer(controller, balance);\r\n        emit ClaimedTokens(_token, controller, balance);\r\n    }\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event NewCloneToken(address indexed _cloneToken, uint snapshotBlock);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\ncontract PollManager is Controlled {\r\n\r\n    struct Poll {\r\n        uint startBlock;\r\n        uint endBlock;\r\n        bool canceled;\r\n        uint voters;\r\n        bytes description;\r\n        uint8 numBallots;\r\n        mapping(uint8 => mapping(address => uint)) ballots;\r\n        mapping(uint8 => uint) qvResults;\r\n        mapping(uint8 => uint) results;\r\n        address author;\r\n    }\r\n\r\n    Poll[] _polls;\r\n\r\n    MiniMeToken public token;\r\n\r\n    RLPHelper public rlpHelper;\r\n\r\n    /// @notice Contract constructor\r\n    /// @param _token Address of the token used for governance\r\n    constructor(address _token) \r\n        public {\r\n        token = MiniMeToken(_token);\r\n        rlpHelper = new RLPHelper();\r\n    }\r\n\r\n    /// @notice Only allow addresses that have > 0 SNT to perform an operation\r\n    modifier onlySNTHolder {\r\n        require(token.balanceOf(msg.sender) > 0, \"SNT Balance is required to perform this operation\"); \r\n        _; \r\n    }\r\n\r\n    /// @notice Create a Poll and enable it immediatly\r\n    /// @param _endBlock Block where the poll ends\r\n    /// @param _description RLP encoded: [poll_title, [poll_ballots]]\r\n    /// @param _numBallots Number of ballots\r\n    function addPoll(\r\n        uint _endBlock,\r\n        bytes _description,\r\n        uint8 _numBallots)\r\n        public\r\n        onlySNTHolder\r\n        returns (uint _idPoll)\r\n    {\r\n        _idPoll = addPoll(block.number, _endBlock, _description, _numBallots);\r\n    }\r\n\r\n    /// @notice Create a Poll\r\n    /// @param _startBlock Block where the poll starts\r\n    /// @param _endBlock Block where the poll ends\r\n    /// @param _description RLP encoded: [poll_title, [poll_ballots]]\r\n    /// @param _numBallots Number of ballots\r\n    function addPoll(\r\n        uint _startBlock,\r\n        uint _endBlock,\r\n        bytes _description,\r\n        uint8 _numBallots)\r\n        public\r\n        onlySNTHolder\r\n        returns (uint _idPoll)\r\n    {\r\n        require(_endBlock > block.number, \"End block must be greater than current block\");\r\n        require(_startBlock >= block.number && _startBlock < _endBlock, \"Start block must not be in the past, and should be less than the end block\" );\r\n        require(_numBallots <= 15, \"Only a max of 15 ballots are allowed\");\r\n\r\n        _idPoll = _polls.length;\r\n        _polls.length ++;\r\n\r\n        Poll storage p = _polls[_idPoll];\r\n        p.startBlock = _startBlock;\r\n        p.endBlock = _endBlock;\r\n        p.voters = 0;\r\n        p.numBallots = _numBallots;\r\n        p.description = _description;\r\n        p.author = msg.sender;\r\n\r\n        emit PollCreated(_idPoll); \r\n    }\r\n\r\n    /// @notice Update poll description (title or ballots) as long as it hasn't started\r\n    /// @param _idPoll Poll to update\r\n    /// @param _description RLP encoded: [poll_title, [poll_ballots]]\r\n    /// @param _numBallots Number of ballots\r\n    function updatePollDescription(\r\n        uint _idPoll, \r\n        bytes _description,\r\n        uint8 _numBallots)\r\n        public\r\n    {\r\n        require(_idPoll < _polls.length, \"Invalid _idPoll\");\r\n        require(_numBallots <= 15, \"Only a max of 15 ballots are allowed\");\r\n\r\n        Poll storage p = _polls[_idPoll];\r\n        require(p.startBlock > block.number, \"You cannot modify an active poll\");\r\n        require(p.author == msg.sender || msg.sender == controller, \"Only the owner/controller can modify the poll\");\r\n\r\n        p.numBallots = _numBallots;\r\n        p.description = _description;\r\n        p.author = msg.sender;\r\n    }\r\n\r\n    /// @notice Cancel an existing poll\r\n    /// @dev Can only be done by the controller (which should be a Multisig/DAO) at any time, or by the owner if the poll hasn't started\r\n    /// @param _idPoll Poll to cancel\r\n    function cancelPoll(uint _idPoll) \r\n        public {\r\n        require(_idPoll < _polls.length, \"Invalid _idPoll\");\r\n\r\n        Poll storage p = _polls[_idPoll];\r\n        \r\n        require(!p.canceled, \"Poll has been canceled already\");\r\n        require(p.endBlock > block.number, \"Only active polls can be canceled\");\r\n\r\n        if(p.startBlock < block.number){\r\n            require(msg.sender == controller, \"Only the controller can cancel the poll\");\r\n        } else {\r\n            require(p.author == msg.sender, \"Only the owner can cancel the poll\");\r\n        }\r\n\r\n        p.canceled = true;\r\n\r\n        emit PollCanceled(_idPoll);\r\n    }\r\n\r\n    /// @notice Determine if user can bote for a poll\r\n    /// @param _idPoll Id of the poll\r\n    /// @return bool Can vote or not\r\n    function canVote(uint _idPoll) \r\n        public \r\n        view \r\n        returns(bool)\r\n    {\r\n        if(_idPoll >= _polls.length) return false;\r\n\r\n        Poll storage p = _polls[_idPoll];\r\n        uint balance = token.balanceOfAt(msg.sender, p.startBlock);\r\n        return block.number >= p.startBlock && block.number < p.endBlock && !p.canceled && balance != 0;\r\n    }\r\n    \r\n    /// @notice Calculate square root of a uint (It has some precision loss)\r\n    /// @param x Number to calculate the square root\r\n    /// @return Square root of x\r\n    function sqrt(uint256 x) public pure returns (uint256 y) {\r\n        uint256 z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n    /// @notice Vote for a poll\r\n    /// @param _idPoll Poll to vote\r\n    /// @param _ballots array of (number of ballots the poll has) elements, and their sum must be less or equal to the balance at the block start\r\n    function vote(uint _idPoll, uint[] _ballots) public {\r\n        require(_idPoll < _polls.length, \"Invalid _idPoll\");\r\n\r\n        Poll storage p = _polls[_idPoll];\r\n\r\n        require(block.number >= p.startBlock && block.number < p.endBlock && !p.canceled, \"Poll is inactive\");\r\n        require(_ballots.length == p.numBallots, \"Number of ballots is incorrect\");\r\n\r\n        unvote(_idPoll);\r\n\r\n        uint amount = token.balanceOfAt(msg.sender, p.startBlock);\r\n        require(amount != 0, \"No SNT balance available at start block of poll\");\r\n\r\n        p.voters++;\r\n\r\n        uint totalBallots = 0;\r\n        for(uint8 i = 0; i < _ballots.length; i++){\r\n            totalBallots += _ballots[i];\r\n\r\n            p.ballots[i][msg.sender] = _ballots[i];\r\n\r\n            if(_ballots[i] != 0){\r\n                p.qvResults[i] += sqrt(_ballots[i] / 1 ether);\r\n                p.results[i] += _ballots[i];\r\n            }\r\n        }\r\n\r\n        require(totalBallots <= amount, \"Total ballots must be less than the SNT balance at poll start block\");\r\n\r\n        emit Vote(_idPoll, msg.sender, _ballots);\r\n    }\r\n\r\n    /// @notice Cancel or reset a vote\r\n    /// @param _idPoll Poll \r\n    function unvote(uint _idPoll) public {\r\n        require(_idPoll < _polls.length, \"Invalid _idPoll\");\r\n\r\n        Poll storage p = _polls[_idPoll];\r\n        \r\n        require(block.number >= p.startBlock && block.number < p.endBlock && !p.canceled, \"Poll is inactive\");\r\n\r\n        if(p.voters == 0) return;\r\n\r\n        p.voters--;\r\n\r\n        for(uint8 i = 0; i < p.numBallots; i++){\r\n            uint ballotAmount = p.ballots[i][msg.sender];\r\n\r\n            p.ballots[i][msg.sender] = 0;\r\n\r\n            if(ballotAmount != 0){\r\n                p.qvResults[i] -= sqrt(ballotAmount / 1 ether);\r\n                p.results[i] -= ballotAmount;\r\n            }\r\n        }\r\n\r\n        emit Unvote(_idPoll, msg.sender);\r\n    }\r\n\r\n    // Constant Helper Function\r\n\r\n    /// @notice Get number of polls\r\n    /// @return Num of polls\r\n    function nPolls()\r\n        public\r\n        view \r\n        returns(uint)\r\n    {\r\n        return _polls.length;\r\n    }\r\n\r\n    /// @notice Get Poll info\r\n    /// @param _idPoll Poll \r\n    function poll(uint _idPoll)\r\n        public \r\n        view \r\n        returns(\r\n        uint _startBlock,\r\n        uint _endBlock,\r\n        bool _canVote,\r\n        bool _canceled,\r\n        bytes _description,\r\n        uint8 _numBallots,\r\n        bool _finalized,\r\n        uint _voters,\r\n        address _author,\r\n        uint[15] _tokenTotal,\r\n        uint[15] _quadraticVotes\r\n    )\r\n    {\r\n        require(_idPoll < _polls.length, \"Invalid _idPoll\");\r\n\r\n        Poll storage p = _polls[_idPoll];\r\n\r\n        _startBlock = p.startBlock;\r\n        _endBlock = p.endBlock;\r\n        _canceled = p.canceled;\r\n        _canVote = canVote(_idPoll);\r\n        _description = p.description;\r\n        _numBallots = p.numBallots;\r\n        _author = p.author;\r\n        _finalized = (!p.canceled) && (block.number >= _endBlock);\r\n        _voters = p.voters;\r\n\r\n        for(uint8 i = 0; i < p.numBallots; i++){\r\n            _tokenTotal[i] = p.results[i];\r\n            _quadraticVotes[i] = p.qvResults[i];\r\n        }\r\n    }\r\n\r\n    /// @notice Decode poll title\r\n    /// @param _idPoll Poll\r\n    /// @return string with the poll title\r\n    function pollTitle(uint _idPoll) public view returns (string){\r\n        require(_idPoll < _polls.length, \"Invalid _idPoll\");\r\n        Poll memory p = _polls[_idPoll];\r\n\r\n        return rlpHelper.pollTitle(p.description);\r\n    }\r\n\r\n    /// @notice Decode poll ballot\r\n    /// @param _idPoll Poll\r\n    /// @param _ballot Index (0-based) of the ballot to decode\r\n    /// @return string with the ballot text\r\n    function pollBallot(uint _idPoll, uint _ballot) public view returns (string){\r\n        require(_idPoll < _polls.length, \"Invalid _idPoll\");\r\n        Poll memory p = _polls[_idPoll];\r\n\r\n        return rlpHelper.pollBallot(p.description, _ballot);\r\n    }\r\n\r\n    /// @notice Get votes for poll/ballot\r\n    /// @param _idPoll Poll\r\n    /// @param _voter Address of the voter\r\n    function getVote(uint _idPoll, address _voter) \r\n        public \r\n        view \r\n        returns (uint[15] votes){\r\n        require(_idPoll < _polls.length, \"Invalid _idPoll\");\r\n        Poll storage p = _polls[_idPoll];\r\n        for(uint8 i = 0; i < p.numBallots; i++){\r\n            votes[i] = p.ballots[i][_voter];\r\n        }\r\n        return votes;\r\n    }\r\n\r\n    event Vote(uint indexed idPoll, address indexed _voter, uint[] ballots);\r\n    event Unvote(uint indexed idPoll, address indexed _voter);\r\n    event PollCanceled(uint indexed idPoll);\r\n    event PollCreated(uint indexed idPoll);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"rlpHelper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idPoll\",\"type\":\"uint256\"}],\"name\":\"canVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"bytes\"},{\"name\":\"_numBallots\",\"type\":\"uint8\"}],\"name\":\"addPoll\",\"outputs\":[{\"name\":\"_idPoll\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idPoll\",\"type\":\"uint256\"}],\"name\":\"pollTitle\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idPoll\",\"type\":\"uint256\"}],\"name\":\"poll\",\"outputs\":[{\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"name\":\"_canVote\",\"type\":\"bool\"},{\"name\":\"_canceled\",\"type\":\"bool\"},{\"name\":\"_description\",\"type\":\"bytes\"},{\"name\":\"_numBallots\",\"type\":\"uint8\"},{\"name\":\"_finalized\",\"type\":\"bool\"},{\"name\":\"_voters\",\"type\":\"uint256\"},{\"name\":\"_author\",\"type\":\"address\"},{\"name\":\"_tokenTotal\",\"type\":\"uint256[15]\"},{\"name\":\"_quadraticVotes\",\"type\":\"uint256[15]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPoll\",\"type\":\"uint256\"}],\"name\":\"unvote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPoll\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"bytes\"},{\"name\":\"_numBallots\",\"type\":\"uint8\"}],\"name\":\"updatePollDescription\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"sqrt\",\"outputs\":[{\"name\":\"y\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPoll\",\"type\":\"uint256\"},{\"name\":\"_ballots\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nPolls\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idPoll\",\"type\":\"uint256\"},{\"name\":\"_ballot\",\"type\":\"uint256\"}],\"name\":\"pollBallot\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"bytes\"},{\"name\":\"_numBallots\",\"type\":\"uint8\"}],\"name\":\"addPoll\",\"outputs\":[{\"name\":\"_idPoll\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idPoll\",\"type\":\"uint256\"},{\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"getVote\",\"outputs\":[{\"name\":\"votes\",\"type\":\"uint256[15]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idPoll\",\"type\":\"uint256\"}],\"name\":\"cancelPoll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPoll\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ballots\",\"type\":\"uint256[]\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPoll\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"Unvote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPoll\",\"type\":\"uint256\"}],\"name\":\"PollCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idPoll\",\"type\":\"uint256\"}],\"name\":\"PollCreated\",\"type\":\"event\"}]","ContractName":"PollManager","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000005fD4a5c96c54a17D845D62C6cB00E39D39BeaF4","Library":"","SwarmSource":"bzzr://cea703fe50e213f98d18d0d3228ba71305da63c4f1160c98a66b5da555de78cb"}]}