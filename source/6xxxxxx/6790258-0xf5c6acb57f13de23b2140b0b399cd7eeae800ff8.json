{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath8 {\r\n\r\n    function mul(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint8 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        uint8 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        if (a == 0) return 0;\r\n        if (b == 0) return 1;\r\n\r\n        uint8 c = a ** b;\r\n        assert(c / (a ** (b - 1)) == a);\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary SafeMath16 {\r\n\r\n    function mul(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint16 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        uint16 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        if (a == 0) return 0;\r\n        if (b == 0) return 1;\r\n\r\n        uint16 c = a ** b;\r\n        assert(c / (a ** (b - 1)) == a);\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary SafeMath32 {\r\n\r\n    function mul(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint32 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        uint32 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        if (a == 0) return 0;\r\n        if (b == 0) return 1;\r\n\r\n        uint32 c = a ** b;\r\n        assert(c / (a ** (b - 1)) == a);\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary SafeMath256 {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        if (b == 0) return 1;\r\n\r\n        uint256 c = a ** b;\r\n        assert(c / (a ** (b - 1)) == a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function _validateAddress(address _addr) internal pure {\r\n        require(_addr != address(0), \"invalid address\");\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not a contract owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _validateAddress(newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Controllable is Ownable {\r\n    mapping(address => bool) controllers;\r\n\r\n    modifier onlyController {\r\n        require(_isController(msg.sender), \"no controller rights\");\r\n        _;\r\n    }\r\n\r\n    function _isController(address _controller) internal view returns (bool) {\r\n        return controllers[_controller];\r\n    }\r\n\r\n    function _setControllers(address[] _controllers) internal {\r\n        for (uint256 i = 0; i < _controllers.length; i++) {\r\n            _validateAddress(_controllers[i]);\r\n            controllers[_controllers[i]] = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Upgradable is Controllable {\r\n    address[] internalDependencies;\r\n    address[] externalDependencies;\r\n\r\n    function getInternalDependencies() public view returns(address[]) {\r\n        return internalDependencies;\r\n    }\r\n\r\n    function getExternalDependencies() public view returns(address[]) {\r\n        return externalDependencies;\r\n    }\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        for (uint256 i = 0; i < _newDependencies.length; i++) {\r\n            _validateAddress(_newDependencies[i]);\r\n        }\r\n        internalDependencies = _newDependencies;\r\n    }\r\n\r\n    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        externalDependencies = _newDependencies;\r\n        _setControllers(_newDependencies);\r\n    }\r\n}\r\n\r\ncontract DragonCore {\r\n    function setRemainingHealthAndMana(uint256, uint32, uint32) external;\r\n    function increaseExperience(uint256, uint256) external;\r\n    function payDNAPointsForBreeding(uint256) external;\r\n    function upgradeGenes(uint256, uint16[10]) external;\r\n    function increaseWins(uint256) external;\r\n    function increaseDefeats(uint256) external;\r\n    function setTactics(uint256, uint8, uint8) external;\r\n    function setSpecialPeacefulSkill(uint256, uint8) external;\r\n    function useSpecialPeacefulSkill(address, uint256, uint256) external;\r\n    function setBuff(uint256, uint8, uint32) external;\r\n    function createDragon(address, uint16, uint256[2], uint256[4], uint8[11]) external returns (uint256);\r\n    function setName(uint256, string) external returns (bytes32);\r\n}\r\n\r\ncontract DragonGetter {\r\n    function getAmount() external view returns (uint256);\r\n    function getComposedGenome(uint256) external view returns (uint256[4]);\r\n    function getCoolness(uint256) public view returns (uint32);\r\n    function getFullRegenerationTime(uint256) external view returns (uint32);\r\n    function getDragonTypes(uint256) external view returns (uint8[11]);\r\n    function getGeneration(uint256) external view returns (uint16);\r\n    function getParents(uint256) external view returns (uint256[2]);\r\n}\r\n\r\ncontract DragonGenetics {\r\n    function createGenome(uint256[2], uint256[4], uint256[4], uint256) external view returns (uint256[4], uint8[11]);\r\n    function createGenomeForGenesis(uint8, uint256) external view returns (uint256[4]);\r\n}\r\n\r\ncontract EggCore {\r\n    function ownerOf(uint256) external view returns (address);\r\n    function get(uint256) external view returns (uint256[2], uint8);\r\n    function isOwner(address, uint256) external view returns (bool);\r\n    function getAllEggs() external view returns (uint256[]);\r\n    function create(address, uint256[2], uint8) external returns (uint256);\r\n    function remove(address, uint256) external;\r\n}\r\n\r\ncontract DragonLeaderboard {\r\n    function update(uint256, uint32) external;\r\n    function getDragonsFromLeaderboard() external view returns (uint256[10]);\r\n    function updateRewardTime() external;\r\n    function getRewards(uint256) external view returns (uint256[10]);\r\n    function getDate() external view returns (uint256, uint256);\r\n}\r\n\r\ncontract Nest {\r\n    mapping (uint256 => bool) public inNest;\r\n    function getEggs() external view returns (uint256[2]);\r\n    function add(uint256) external returns (bool, uint256, uint256);\r\n}\r\n\r\n\r\n\r\n\r\n//////////////CONTRACT//////////////\r\n\r\n\r\n\r\n\r\ncontract Core is Upgradable {\r\n    using SafeMath8 for uint8;\r\n    using SafeMath16 for uint16;\r\n    using SafeMath32 for uint32;\r\n    using SafeMath256 for uint256;\r\n\r\n    DragonCore dragonCore;\r\n    DragonGetter dragonGetter;\r\n    DragonGenetics dragonGenetics;\r\n    EggCore eggCore;\r\n    DragonLeaderboard leaderboard;\r\n    Nest nest;\r\n\r\n    function _max(uint16 lth, uint16 rth) internal pure returns (uint16) {\r\n        if (lth > rth) {\r\n            return lth;\r\n        } else {\r\n            return rth;\r\n        }\r\n    }\r\n\r\n    function createEgg(\r\n        address _sender,\r\n        uint8 _dragonType\r\n    ) external onlyController returns (uint256) {\r\n        return eggCore.create(_sender, [uint256(0), uint256(0)], _dragonType);\r\n    }\r\n\r\n    function sendToNest(\r\n        uint256 _id\r\n    ) external onlyController returns (\r\n        bool isHatched,\r\n        uint256 newDragonId,\r\n        uint256 hatchedId,\r\n        address owner\r\n    ) {\r\n        uint256 _randomForEggOpening;\r\n        (isHatched, hatchedId, _randomForEggOpening) = nest.add(_id);\r\n        // if any egg was hatched\r\n        if (isHatched) {\r\n            owner = eggCore.ownerOf(hatchedId);\r\n            newDragonId = openEgg(owner, hatchedId, _randomForEggOpening);\r\n        }\r\n    }\r\n\r\n    function openEgg(\r\n        address _owner,\r\n        uint256 _eggId,\r\n        uint256 _random\r\n    ) internal returns (uint256 newDragonId) {\r\n        uint256[2] memory _parents;\r\n        uint8 _dragonType;\r\n        (_parents, _dragonType) = eggCore.get(_eggId);\r\n\r\n        uint256[4] memory _genome;\r\n        uint8[11] memory _dragonTypesArray;\r\n        uint16 _generation;\r\n        // if genesis\r\n        if (_parents[0] == 0 && _parents[1] == 0) {\r\n            _generation = 0;\r\n            _genome = dragonGenetics.createGenomeForGenesis(_dragonType, _random);\r\n            _dragonTypesArray[_dragonType] = 40; // 40 genes of 1 type\r\n        } else {\r\n            uint256[4] memory _momGenome = dragonGetter.getComposedGenome(_parents[0]);\r\n            uint256[4] memory _dadGenome = dragonGetter.getComposedGenome(_parents[1]);\r\n            (_genome, _dragonTypesArray) = dragonGenetics.createGenome(_parents, _momGenome, _dadGenome, _random);\r\n            _generation = _max(\r\n                dragonGetter.getGeneration(_parents[0]),\r\n                dragonGetter.getGeneration(_parents[1])\r\n            ).add(1);\r\n        }\r\n\r\n        newDragonId = dragonCore.createDragon(_owner, _generation, _parents, _genome, _dragonTypesArray);\r\n        eggCore.remove(_owner, _eggId);\r\n\r\n        uint32 _coolness = dragonGetter.getCoolness(newDragonId);\r\n        leaderboard.update(newDragonId, _coolness);\r\n    }\r\n\r\n    function breed(\r\n        address _sender,\r\n        uint256 _momId,\r\n        uint256 _dadId\r\n    ) external onlyController returns (uint256) {\r\n        dragonCore.payDNAPointsForBreeding(_momId);\r\n        dragonCore.payDNAPointsForBreeding(_dadId);\r\n        return eggCore.create(_sender, [_momId, _dadId], 0);\r\n    }\r\n\r\n    function setDragonRemainingHealthAndMana(uint256 _id, uint32 _health, uint32 _mana) external onlyController {\r\n        return dragonCore.setRemainingHealthAndMana(_id, _health, _mana);\r\n    }\r\n\r\n    function increaseDragonExperience(uint256 _id, uint256 _factor) external onlyController {\r\n        dragonCore.increaseExperience(_id, _factor);\r\n    }\r\n\r\n    function upgradeDragonGenes(uint256 _id, uint16[10] _dnaPoints) external onlyController {\r\n        dragonCore.upgradeGenes(_id, _dnaPoints);\r\n\r\n        uint32 _coolness = dragonGetter.getCoolness(_id);\r\n        leaderboard.update(_id, _coolness);\r\n    }\r\n\r\n    function increaseDragonWins(uint256 _id) external onlyController {\r\n        dragonCore.increaseWins(_id);\r\n    }\r\n\r\n    function increaseDragonDefeats(uint256 _id) external onlyController {\r\n        dragonCore.increaseDefeats(_id);\r\n    }\r\n\r\n    function setDragonTactics(uint256 _id, uint8 _melee, uint8 _attack) external onlyController {\r\n        dragonCore.setTactics(_id, _melee, _attack);\r\n    }\r\n\r\n    function setDragonName(uint256 _id, string _name) external onlyController returns (bytes32) {\r\n        return dragonCore.setName(_id, _name);\r\n    }\r\n\r\n    function setDragonSpecialPeacefulSkill(uint256 _id, uint8 _class) external onlyController {\r\n        dragonCore.setSpecialPeacefulSkill(_id, _class);\r\n    }\r\n\r\n    function useDragonSpecialPeacefulSkill(\r\n        address _sender,\r\n        uint256 _id,\r\n        uint256 _target\r\n    ) external onlyController {\r\n        dragonCore.useSpecialPeacefulSkill(_sender, _id, _target);\r\n    }\r\n\r\n    function resetDragonBuffs(uint256 _id) external onlyController {\r\n        dragonCore.setBuff(_id, 1, 0); // attack\r\n        dragonCore.setBuff(_id, 2, 0); // defense\r\n        dragonCore.setBuff(_id, 3, 0); // stamina\r\n        dragonCore.setBuff(_id, 4, 0); // speed\r\n        dragonCore.setBuff(_id, 5, 0); // intelligence\r\n    }\r\n\r\n    function updateLeaderboardRewardTime() external onlyController {\r\n        return leaderboard.updateRewardTime();\r\n    }\r\n\r\n    // GETTERS\r\n\r\n    function getDragonFullRegenerationTime(uint256 _id) external view returns (uint32 time) {\r\n        return dragonGetter.getFullRegenerationTime(_id);\r\n    }\r\n\r\n    function isEggOwner(address _user, uint256 _tokenId) external view returns (bool) {\r\n        return eggCore.isOwner(_user, _tokenId);\r\n    }\r\n\r\n    function isEggInNest(uint256 _id) external view returns (bool) {\r\n        return nest.inNest(_id);\r\n    }\r\n\r\n    function getEggsInNest() external view returns (uint256[2]) {\r\n        return nest.getEggs();\r\n    }\r\n\r\n    function getEgg(uint256 _id) external view returns (uint16, uint32, uint256[2], uint8[11], uint8[11]) {\r\n        uint256[2] memory parents;\r\n        uint8 _dragonType;\r\n        (parents, _dragonType) = eggCore.get(_id);\r\n\r\n        uint8[11] memory momDragonTypes;\r\n        uint8[11] memory dadDragonTypes;\r\n        uint32 coolness;\r\n        uint16 gen;\r\n        // if genesis\r\n        if (parents[0] == 0 && parents[1] == 0) {\r\n            momDragonTypes[_dragonType] = 100;\r\n            dadDragonTypes[_dragonType] = 100;\r\n            coolness = 3600;\r\n        } else {\r\n            momDragonTypes = dragonGetter.getDragonTypes(parents[0]);\r\n            dadDragonTypes = dragonGetter.getDragonTypes(parents[1]);\r\n            coolness = dragonGetter.getCoolness(parents[0]).add(dragonGetter.getCoolness(parents[1])).div(2);\r\n            uint16 _momGeneration = dragonGetter.getGeneration(parents[0]);\r\n            uint16 _dadGeneration = dragonGetter.getGeneration(parents[1]);\r\n            gen = _max(_momGeneration, _dadGeneration).add(1);\r\n        }\r\n        return (gen, coolness, parents, momDragonTypes, dadDragonTypes);\r\n    }\r\n\r\n    function getDragonChildren(uint256 _id) external view returns (\r\n        uint256[10] dragonsChildren,\r\n        uint256[10] eggsChildren\r\n    ) {\r\n        uint8 _counter;\r\n        uint256[2] memory _parents;\r\n        uint256 i;\r\n        for (i = _id.add(1); i <= dragonGetter.getAmount() && _counter < 10; i++) {\r\n            _parents = dragonGetter.getParents(i);\r\n            if (_parents[0] == _id || _parents[1] == _id) {\r\n                dragonsChildren[_counter] = i;\r\n                _counter = _counter.add(1);\r\n            }\r\n        }\r\n        _counter = 0;\r\n        uint256[] memory eggs = eggCore.getAllEggs();\r\n        for (i = 0; i < eggs.length && _counter < 10; i++) {\r\n            (_parents, ) = eggCore.get(eggs[i]);\r\n            if (_parents[0] == _id || _parents[1] == _id) {\r\n                eggsChildren[_counter] = eggs[i];\r\n                _counter = _counter.add(1);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getDragonsFromLeaderboard() external view returns (uint256[10]) {\r\n        return leaderboard.getDragonsFromLeaderboard();\r\n    }\r\n\r\n    function getLeaderboardRewards(\r\n        uint256 _hatchingPrice\r\n    ) external view returns (\r\n        uint256[10]\r\n    ) {\r\n        return leaderboard.getRewards(_hatchingPrice);\r\n    }\r\n\r\n    function getLeaderboardRewardDate() external view returns (uint256, uint256) {\r\n        return leaderboard.getDate();\r\n    }\r\n\r\n    // UPDATE CONTRACT\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        super.setInternalDependencies(_newDependencies);\r\n\r\n        dragonCore = DragonCore(_newDependencies[0]);\r\n        dragonGetter = DragonGetter(_newDependencies[1]);\r\n        dragonGenetics = DragonGenetics(_newDependencies[2]);\r\n        eggCore = EggCore(_newDependencies[3]);\r\n        leaderboard = DragonLeaderboard(_newDependencies[4]);\r\n        nest = Nest(_newDependencies[5]);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"updateLeaderboardRewardTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_momId\",\"type\":\"uint256\"},{\"name\":\"_dadId\",\"type\":\"uint256\"}],\"name\":\"breed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_factor\",\"type\":\"uint256\"}],\"name\":\"increaseDragonExperience\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"increaseDragonWins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_dnaPoints\",\"type\":\"uint16[10]\"}],\"name\":\"upgradeDragonGenes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDragonFullRegenerationTime\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isEggOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_melee\",\"type\":\"uint8\"},{\"name\":\"_attack\",\"type\":\"uint8\"}],\"name\":\"setDragonTactics\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLeaderboardRewardDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isEggInNest\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setExternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"resetDragonBuffs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setInternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"increaseDragonDefeats\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDragonsFromLeaderboard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"useDragonSpecialPeacefulSkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setDragonName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEggsInNest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_dragonType\",\"type\":\"uint8\"}],\"name\":\"createEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_health\",\"type\":\"uint32\"},{\"name\":\"_mana\",\"type\":\"uint32\"}],\"name\":\"setDragonRemainingHealthAndMana\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_class\",\"type\":\"uint8\"}],\"name\":\"setDragonSpecialPeacefulSkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"sendToNest\",\"outputs\":[{\"name\":\"isHatched\",\"type\":\"bool\"},{\"name\":\"newDragonId\",\"type\":\"uint256\"},{\"name\":\"hatchedId\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hatchingPrice\",\"type\":\"uint256\"}],\"name\":\"getLeaderboardRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDragonChildren\",\"outputs\":[{\"name\":\"dragonsChildren\",\"type\":\"uint256[10]\"},{\"name\":\"eggsChildren\",\"type\":\"uint256[10]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256[2]\"},{\"name\":\"\",\"type\":\"uint8[11]\"},{\"name\":\"\",\"type\":\"uint8[11]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Core","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://85ff92c12c4a63ac2102a16fea73d94a9b06f9f9fc1b13fa2e1583db8062b722"}]}