{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract DoubleUp {\r\n    //using the library of safe mathematical operations    \r\n    using SafeMath\r\n    for uint;\r\n    //array of last users withdrawal\r\n    mapping(address => uint) public usersTime;\r\n    //array of users investment ammount\r\n    mapping(address => uint) public usersInvestment;\r\n    //array of dividends user have withdrawn\r\n    mapping(address => uint) public dividends;\r\n    //wallet for a project foundation\r\n    address public projectFund = 0x9Dcf9C720e1B0c88dDDc690aB35bCffAE74fBF98;\r\n    //fund to project\r\n    uint projectPercent = 9;\r\n    //percent of refferer\r\n    uint referrerPercent = 2;\r\n    //percent of refferal\r\n    uint referralPercent = 1;\r\n    //the ammount of returned from the begin of this day (GMT)\r\n    uint ruturnedOfThisDay = 0;\r\n    //the day of last return\r\n    uint dayOfLastReturn = 0;\r\n    //max ammount of return per day\r\n    uint maxReturn = 500 ether;\r\n    //percents:\r\n    uint public startPercent = 200;     //2% per day\r\n    uint public lowPersent = 300;       //3% per day\r\n    uint public middlePersent = 400;    //4% per day\r\n    uint public highPersent = 500;      //5% per day\r\n    //interest rate\r\n    uint public stepLow = 1000 ether;\r\n    uint public stepMiddle = 2500 ether;\r\n    uint public stepHigh = 5000 ether;\r\n    uint public countOfInvestors = 0;\r\n\r\n    modifier isIssetUser() {\r\n        require(usersInvestment[msg.sender] > 0, \"Deposit not found\");\r\n        _;\r\n    }\r\n\r\n    //return of interest on the deposit\r\n    function collectPercent() isIssetUser internal {\r\n        //if the user received 200% or more of his contribution, delete the user\r\n        if ((usersInvestment[msg.sender].mul(2)) <= dividends[msg.sender]) {\r\n            usersInvestment[msg.sender] = 0;\r\n            usersTime[msg.sender] = 0;\r\n            dividends[msg.sender] = 0;\r\n        } else {\r\n            uint payout = payoutAmount();\r\n            usersTime[msg.sender] = now;\r\n            dividends[msg.sender] += payout;\r\n            msg.sender.transfer(payout);\r\n        }\r\n    }\r\n\r\n    //calculation of the current interest rate on the deposit\r\n    function persentRate() public view returns(uint) {\r\n        //get contract balance\r\n        uint balance = address(this).balance;\r\n        //calculate persent rate\r\n        if (balance < stepLow) {\r\n            return (startPercent);\r\n        }\r\n        if (balance >= stepLow && balance < stepMiddle) {\r\n            return (lowPersent);\r\n        }\r\n        if (balance >= stepMiddle && balance < stepHigh) {\r\n            return (middlePersent);\r\n        }\r\n        if (balance >= stepHigh) {\r\n            return (highPersent);\r\n        }\r\n    }\r\n\r\n    //refund of the amount available for withdrawal on deposit\r\n    function payoutAmount() public view returns(uint) {\r\n        uint persent = persentRate();\r\n        uint rate = usersInvestment[msg.sender].mul(persent).div(10000);//per day\r\n        uint interestRate = now.sub(usersTime[msg.sender]);\r\n        uint withdrawalAmount = rate.mul(interestRate).div(60*60*24);\r\n        uint rest = (usersInvestment[msg.sender].mul(2)).sub(dividends[msg.sender]);\r\n        if(withdrawalAmount>rest) withdrawalAmount = rest;\r\n        return (withdrawalAmount);\r\n    }\r\n\r\n    //make a contribution to the system\r\n    function makeDeposit() private {\r\n        if (msg.value > 0) {\r\n            //check for referral\r\n            uint projectTransferPercent = projectPercent;\r\n            if(msg.data.length == 20 && msg.value >= 5 ether){\r\n                address referrer = _bytesToAddress(msg.data);\r\n                if(usersInvestment[referrer] > 1 ether){\r\n                    referrer.transfer(msg.value.mul(referrerPercent).div(100));\r\n                    msg.sender.transfer(msg.value.mul(referralPercent).div(100));\r\n                    projectTransferPercent = projectTransferPercent.sub(referrerPercent.add(referralPercent));\r\n                }\r\n            }\r\n            if (usersInvestment[msg.sender] == 0) {\r\n                countOfInvestors += 1;\r\n            }\r\n            usersInvestment[msg.sender] = usersInvestment[msg.sender].add(msg.value);\r\n            usersTime[msg.sender] = now;\r\n            //sending money for advertising\r\n            projectFund.transfer(msg.value.mul(projectTransferPercent).div(100));\r\n        } else {\r\n            collectPercent();\r\n        }\r\n    }\r\n\r\n    //return of deposit balance\r\n    function returnDeposit() isIssetUser private {\r\n        \r\n        //check for day limit\r\n        require(((maxReturn.sub(ruturnedOfThisDay) > 0) || (dayOfLastReturn != now.div(1 days))), 'Day limit of return is ended');\r\n        //check that user didnt get more than 91% of his deposit \r\n        require(usersInvestment[msg.sender].sub(usersInvestment[msg.sender].mul(projectPercent).div(100)) > dividends[msg.sender].add(payoutAmount()), 'You have already repaid your deposit');\r\n        \r\n        //pay dividents\r\n        collectPercent();\r\n        //userDeposit-persentWithdraw-(userDeposit*projectPercent/100)\r\n        uint withdrawalAmount = usersInvestment[msg.sender].sub(dividends[msg.sender]).sub(usersInvestment[msg.sender].mul(projectPercent).div(100));\r\n        //if this day is different from the day of last return then recharge max reurn \r\n        if(dayOfLastReturn!=now.div(1 days)) { ruturnedOfThisDay = 0; dayOfLastReturn = now.div(1 days); }\r\n        \r\n        if(withdrawalAmount > maxReturn.sub(ruturnedOfThisDay)){\r\n            withdrawalAmount = maxReturn.sub(ruturnedOfThisDay);\r\n            //recalculate the rest of users investment (like he make it right now)\r\n            usersInvestment[msg.sender] = usersInvestment[msg.sender].sub(withdrawalAmount.add(dividends[msg.sender]).mul(100).div(100-projectPercent));\r\n            usersTime[msg.sender] = now;\r\n            dividends[msg.sender] = 0;\r\n        }\r\n        else\r\n        {\r\n             //delete user record\r\n            usersInvestment[msg.sender] = 0;\r\n            usersTime[msg.sender] = 0;\r\n            dividends[msg.sender] = 0;\r\n        }\r\n        ruturnedOfThisDay += withdrawalAmount;\r\n        msg.sender.transfer(withdrawalAmount);\r\n    }\r\n\r\n    function() external payable {\r\n        //refund of remaining funds when transferring to a contract 0.00000112 ether\r\n        if (msg.value == 0.00000112 ether) {\r\n            returnDeposit();\r\n        } else {\r\n            makeDeposit();\r\n        }\r\n    }\r\n    \r\n    function _bytesToAddress(bytes data) private pure returns(address addr) {\r\n        assembly {\r\n            addr := mload(add(data, 20)) \r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lowPersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepHigh\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepLow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepMiddle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highPersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"persentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"middlePersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"DoubleUp","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://93b87eb2fcc41ae2b1910fbe314da44efbc7cf20a07b1595d43d5fe10944883a"}]}