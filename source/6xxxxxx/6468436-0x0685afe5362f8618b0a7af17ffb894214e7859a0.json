{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\ncontract ArceonMoneyNetwork {\r\n    using SafeMath for uint256;\r\n    address public owner;\r\n    address parentUser;\r\n    address[] users;\r\n   \r\n    mapping(address => bool) usersExist;\r\n    mapping(address => address) users2users;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => uint256) balancesTotal;\r\n    \r\n    uint256 nextUserId = 0;\r\n    uint256 cyles = 5;\r\n    \r\n  constructor() public {owner = msg.sender; }\r\n  \r\n   modifier onlyOwner {if (msg.sender == owner) _;}\r\n    \r\n    \r\n    \r\n    \r\n    event Register(address indexed user, address indexed parentUser);\r\n    event BalanceUp(address indexed user, uint256 amount);\r\n    event ReferalBonus(address indexed user, uint256 amount);\r\n    event TransferMyMoney(address user, uint256 amount);\r\n    \r\n    \r\n    \r\n    function bytesToAddress(bytes bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n    \r\n    \r\n    function () payable public{\r\n\t    parentUser = bytesToAddress(msg.data);\r\n\t    if (msg.value==0){ transferMyMoney(); return;}\r\n        require(msg.value == 50 finney);\r\n        require(msg.sender != address(0));\r\n        require(parentUser != address(0));\r\n        require(!usersExist[msg.sender]);\r\n        _register(msg.sender, msg.value);\r\n    }\r\n    \r\n    \r\n    function _register(address user, uint256 amount) internal {\r\n        \r\n        \r\n         \r\n        if (users.length > 0) {\r\n            require(parentUser!=user);\r\n            require(usersExist[parentUser]); \r\n        }\r\n        \r\n       if (users.length ==0) {users2users[parentUser]=parentUser;} \r\n       \r\n       \r\n        users.push(user);\r\n        usersExist[user]=true;\r\n        users2users[user]=parentUser;\r\n        \r\n        \r\n        emit Register(user, parentUser);\r\n        \r\n        uint256 referalBonus = amount.div(2);\r\n        \r\n        if (cyles==0) {referalBonus = amount;} //we exclude a money wave\r\n        \r\n        balances[parentUser] = balances[parentUser].add(referalBonus.div(2));\r\n        balancesTotal[parentUser] = balancesTotal[parentUser].add(referalBonus.div(2));\r\n        \r\n        emit ReferalBonus(parentUser, referalBonus.div(2));\r\n        \r\n        balances[users2users[parentUser]] = balances[users2users[parentUser]].add(referalBonus.div(2));\r\n        balancesTotal[users2users[parentUser]] = balancesTotal[users2users[parentUser]].add(referalBonus.div(2));\r\n        \r\n        emit ReferalBonus(users2users[parentUser], referalBonus.div(2));\r\n        \r\n        uint256 length = users.length;\r\n        uint256 existLastIndex = length.sub(1);\r\n        \r\n        //we exclude a money wave\r\n        if (cyles!=0){ \r\n            \r\n        for (uint i = 1; i <= cyles; i++) {\r\n            nextUserId = nextUserId.add(1);\r\n\t\t\t\r\n            if(nextUserId > existLastIndex){ nextUserId = 0;}\r\n            \r\n            balances[users[nextUserId]] = balances[users[nextUserId]].add(referalBonus.div(cyles));\r\n            balancesTotal[users[nextUserId]] = balancesTotal[users[nextUserId]].add(referalBonus.div(cyles));\r\n            \r\n            emit BalanceUp(users[nextUserId], referalBonus.div(cyles));\r\n        }\r\n      \r\n        }  //we exclude a money wave\r\n    \r\n    }\r\n    \r\n    function transferMyMoney() public {\r\n        require(balances[msg.sender]>0);\r\n        msg.sender.transfer(balances[msg.sender]);\r\n        emit TransferMyMoney(msg.sender, balances[msg.sender]);\r\n\t\tbalances[msg.sender]=0;\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n      function ViewRealBalance(address input) public view returns (uint256 balanceReal) {  \r\n       balanceReal= balances[input];\r\n       balanceReal=balanceReal.div(1000000000000);\r\n          return balanceReal;\r\n    }\r\n    \r\n   \r\n    function ViewTotalBalance(address input)   public view returns (uint256 balanceTotal) {\r\n      balanceTotal=balancesTotal [input];\r\n      balanceTotal=balanceTotal.div(1000000000000);\r\n          return balanceTotal;\r\n   }\r\n   \r\n    \r\n   function viewBlockchainArceonMoneyNetwork(uint256 id) public view  returns (address userAddress) {\r\n        return users[id];\r\n    } \r\n    \r\n    \r\n    function  CirclePoints() public view returns (uint256 CirclePoint) {\r\n        CirclePoint = nextUserId;\r\n        \r\n        return  CirclePoint;\r\n    }\r\n    \r\n    function  NumberUser() public view returns (uint256 numberOfUser) {\r\n        \r\n        numberOfUser = users.length;\r\n        \r\n        return numberOfUser;\r\n    } \r\n    \r\n    function  LenCyless() public view returns (uint256 LenCyles) {\r\n        \r\n        LenCyles = cyles;\r\n        \r\n        return LenCyles;\r\n    } \r\n    \r\n    \r\n    \r\n    function newCyles(uint256 _newCyles) external onlyOwner {\r\n      \r\n       cyles = _newCyles;\r\n    }\r\n    \r\n}    \r\n    \r\n   library SafeMath {\r\n       \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"input\",\"type\":\"address\"}],\"name\":\"ViewRealBalance\",\"outputs\":[{\"name\":\"balanceReal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCyles\",\"type\":\"uint256\"}],\"name\":\"newCyles\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"input\",\"type\":\"address\"}],\"name\":\"ViewTotalBalance\",\"outputs\":[{\"name\":\"balanceTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"viewBlockchainArceonMoneyNetwork\",\"outputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LenCyless\",\"outputs\":[{\"name\":\"LenCyles\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferMyMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CirclePoints\",\"outputs\":[{\"name\":\"CirclePoint\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NumberUser\",\"outputs\":[{\"name\":\"numberOfUser\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"parentUser\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferalBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferMyMoney\",\"type\":\"event\"}]","ContractName":"ArceonMoneyNetwork","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8ebccf83fa812193d0205c51c87bf50ef1b4b0b5043c583e567b39c1c1f95fc4"}]}