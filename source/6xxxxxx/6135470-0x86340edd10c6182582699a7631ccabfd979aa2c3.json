{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/EternalStorage.sol\r\n\r\n// Roman Storm Multi Sender\r\n// To Use this Dapp: https://rstormsf.github.io/multisender\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n}\r\n\r\n// File: contracts/UpgradeabilityOwnerStorage.sol\r\n\r\n// Roman Storm Multi Sender\r\n// To Use this Dapp: https://rstormsf.github.io/multisender\r\n\r\n\r\n/**\r\n * @title UpgradeabilityOwnerStorage\r\n * @dev This contract keeps track of the upgradeability owner\r\n */\r\ncontract UpgradeabilityOwnerStorage {\r\n  // Owner of the contract\r\n    address private _upgradeabilityOwner;\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function upgradeabilityOwner() public view returns (address) {\r\n        return _upgradeabilityOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the address of the owner\r\n    */\r\n    function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\r\n        _upgradeabilityOwner = newUpgradeabilityOwner;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/UpgradeabilityStorage.sol\r\n\r\n// Roman Storm Multi Sender\r\n// To Use this Dapp: https://rstormsf.github.io/multisender\r\n\r\n\r\n/**\r\n * @title UpgradeabilityStorage\r\n * @dev This contract holds all the necessary state variables to support the upgrade functionality\r\n */\r\ncontract UpgradeabilityStorage {\r\n  // Version name of the current implementation\r\n    string internal _version;\r\n\r\n    // Address of the current implementation\r\n    address internal _implementation;\r\n\r\n    /**\r\n    * @dev Tells the version name of the current implementation\r\n    * @return string representing the name of the current version\r\n    */\r\n    function version() public view returns (string) {\r\n        return _version;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the current implementation\r\n    * @return address of the current implementation\r\n    */\r\n    function implementation() public view returns (address) {\r\n        return _implementation;\r\n    }\r\n}\r\n\r\n// File: contracts/OwnedUpgradeabilityStorage.sol\r\n\r\n// Roman Storm Multi Sender\r\n// To Use this Dapp: https://rstormsf.github.io/multisender\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title OwnedUpgradeabilityStorage\r\n * @dev This is the storage necessary to perform upgradeable contracts.\r\n * This means, required state variables for upgradeability purpose and eternal storage per se.\r\n */\r\ncontract OwnedUpgradeabilityStorage is UpgradeabilityOwnerStorage, UpgradeabilityStorage, EternalStorage {}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n// Roman Storm Multi Sender\r\n// To Use this Dapp: https://rstormsf.github.io/multisender\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/multisender/Ownable.sol\r\n\r\n// Roman Storm Multi Sender\r\n// To Use this Dapp: https://rstormsf.github.io/multisender\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is EternalStorage {\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[keccak256(\"owner\")];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function setOwner(address newOwner) internal {\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        addressStorage[keccak256(\"owner\")] = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/multisender/Claimable.sol\r\n\r\n// Roman Storm Multi Sender\r\n// To Use this Dapp: https://rstormsf.github.io/multisender\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is EternalStorage, Ownable {\r\n    function pendingOwner() public view returns (address) {\r\n        return addressStorage[keccak256(\"pendingOwner\")];\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        addressStorage[keccak256(\"pendingOwner\")] = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner(), pendingOwner());\r\n        addressStorage[keccak256(\"owner\")] = addressStorage[keccak256(\"pendingOwner\")];\r\n        addressStorage[keccak256(\"pendingOwner\")] = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/multisender/UpgradebleStormSender.sol\r\n\r\n// Roman Storm Multi Sender\r\n// To Use this Dapp: https://rstormsf.github.io/multisender\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract BulkAirdrop is OwnedUpgradeabilityStorage, Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    event Multisended(uint256 total, address tokenAddress);\r\n    event ClaimedTokens(address token, address owner, uint256 balance);\r\n\r\n    modifier hasFee() {\r\n        if (currentFee(msg.sender) > 0) {\r\n            require(msg.value >= currentFee(msg.sender));\r\n        }\r\n        _;\r\n    }\r\n\r\n    function() public payable {}\r\n\r\n    function initialize(address _owner) public {\r\n        require(!initialized());\r\n        setOwner(_owner);\r\n        setArrayLimit(150);\r\n        setDiscountStep(1);\r\n        setFee(0.000001 ether);\r\n        boolStorage[keccak256(\"rs_multisender_initialized\")] = true;\r\n    }\r\n\r\n    function initialized() public view returns (bool) {\r\n        return boolStorage[keccak256(\"rs_multisender_initialized\")];\r\n    }\r\n \r\n    function txCount(address customer) public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"txCount\", customer))];\r\n    }\r\n\r\n    function arrayLimit() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"arrayLimit\"))];\r\n    }\r\n\r\n    function setArrayLimit(uint256 _newLimit) public onlyOwner {\r\n        require(_newLimit != 0);\r\n        uintStorage[keccak256(\"arrayLimit\")] = _newLimit;\r\n    }\r\n\r\n    function discountStep() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"discountStep\")];\r\n    }\r\n\r\n    function setDiscountStep(uint256 _newStep) public onlyOwner {\r\n        require(_newStep != 0);\r\n        uintStorage[keccak256(\"discountStep\")] = _newStep;\r\n    }\r\n\r\n    function fee() public view returns(uint256) {\r\n        return uintStorage[keccak256(\"fee\")];\r\n    }\r\n\r\n    function currentFee(address _customer) public view returns(uint256) {\r\n        if (fee() > discountRate(msg.sender)) {\r\n            return fee().sub(discountRate(_customer));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function setFee(uint256 _newStep) public onlyOwner {\r\n        require(_newStep != 0);\r\n        uintStorage[keccak256(\"fee\")] = _newStep;\r\n    }\r\n\r\n    function discountRate(address _customer) public view returns(uint256) {\r\n        uint256 count = txCount(_customer);\r\n        return count.mul(discountStep());\r\n    }\r\n\r\n    function multisendToken(address token, address[] _contributors, uint256[] _balances) public hasFee payable {\r\n        if (token == 0x000000000000000000000000000000000000bEEF){\r\n            multisendEther(_contributors, _balances);\r\n        } else {\r\n            uint256 total = 0;\r\n            require(_contributors.length <= arrayLimit());\r\n            ERC20 erc20token = ERC20(token);\r\n            uint8 i = 0;\r\n            for (i; i < _contributors.length; i++) {\r\n                erc20token.transferFrom(msg.sender, _contributors[i], _balances[i]);\r\n                total += _balances[i];\r\n            }\r\n            setTxCount(msg.sender, txCount(msg.sender).add(1));\r\n            emit Multisended(total, token);\r\n        }\r\n    }\r\n\r\n    function multisendEther(address[] _contributors, uint256[] _balances) public payable {\r\n        uint256 total = msg.value;\r\n        uint256 userfee = currentFee(msg.sender);\r\n        require(total >= userfee);\r\n        require(_contributors.length <= arrayLimit());\r\n        total = total.sub(userfee);\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i]);\r\n            total = total.sub(_balances[i]);\r\n            _contributors[i].transfer(_balances[i]);\r\n        }\r\n        setTxCount(msg.sender, txCount(msg.sender).add(1));\r\n        emit Multisended(msg.value, 0x000000000000000000000000000000000000bEEF);\r\n    }\r\n\r\n    function claimTokens(address _token) public onlyOwner {\r\n        if (_token == 0x0) {\r\n            owner().transfer(address(this).balance);\r\n            return;\r\n        }\r\n        ERC20 erc20token = ERC20(_token);\r\n        uint256 balance = erc20token.balanceOf(this);\r\n        erc20token.transfer(owner(), balance);\r\n        emit ClaimedTokens(_token, owner(), balance);\r\n    }\r\n    \r\n    function setTxCount(address customer, uint256 _txCount) private {\r\n        uintStorage[keccak256(abi.encodePacked(\"txCount\", customer))] = _txCount;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStep\",\"type\":\"uint256\"}],\"name\":\"setDiscountStep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"currentFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStep\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeabilityOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arrayLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"txCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountStep\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setArrayLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"discountRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Multisended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BulkAirdrop","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aa5a0276dadaae5015fd1d93b382c45163dffb18b6e8555199b05b87e8490f84"}]}