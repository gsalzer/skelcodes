{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\ncontract ERC20 {\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool success);\r\n\tfunction balanceOf(address _owner) public returns (uint256 balance);\r\n}\r\n\r\n\r\ncontract AirDrop {\r\n\r\n\taddress public owner;\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner, 'Invoker must be msg.sender');\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Transfers ownership to new owner address\r\n\t * @param _newOwner The address of the new owner\r\n\t */\r\n\tfunction transferOwnership(address _newOwner) public onlyOwner {\r\n\t\trequire(_newOwner != address(0), \"newOwner cannot be zero address\");\r\n\r\n\t\towner = _newOwner;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Generic withdraw function in the case of having leftover tokens to withdraw\r\n\t * @param _token The address of the ERC20 token to withdraw tokens from\r\n\t */\r\n\tfunction withdraw(address _token) public onlyOwner {\r\n\t\trequire(_token != address(0), \"Token address cannot be zero address\");\r\n\r\n\t\tuint256 balance = ERC20(_token).balanceOf(address(this));\r\n\r\n\t\trequire(balance > 0, \"Cannot withdraw from a balance of zero\");\r\n\r\n\t\tERC20(_token).transfer(owner, balance);\r\n\t}\r\n\r\n    /**\r\n     * @notice MultiTransfer function for airdrop\r\n     * @param _token ERC20 token address that will get airdrop (this contract must have sufficient tokens to execute this function)\r\n\t * @param _amount The amount of tokens to be transfered to each target\r\n     * @param _targets The target addresses that will receive the free tokens\r\n     */\r\n\tfunction airdrop(address _token, uint256 _amount, address[] memory _targets) public onlyOwner {\r\n\t\trequire(_targets.length > 0, 'Target addresses must not be 0');\r\n\t\trequire(_targets.length <= 64, 'Target array length is too big');\r\n\t\trequire\r\n        (\r\n\t\t\t_amount * _targets.length <= ERC20(_token).balanceOf(address(this)), \r\n\t\t\t'Airdrop contract does not have enough tokens to execute the airdrop'\r\n\t\t);\r\n\r\n\t\tfor (uint8 target = 0; target < _targets.length; target++) {\r\n\t\t\tERC20(_token).transfer(_targets[target], _amount);\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"AirDrop","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a07b0a4d2be1b743a7a07719d6f21759be530a5e3b776a4472ba67d5d2756400"}]}