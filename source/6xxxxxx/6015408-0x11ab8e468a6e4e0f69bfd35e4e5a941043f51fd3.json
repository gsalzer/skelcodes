{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\ncontract PasswordEscrow {\r\n  address public owner;\r\n  uint256 public commissionFee;\r\n  uint256 public totalFee;\r\n\r\n  //data\r\n  struct Transfer {\r\n    address from;\r\n    uint256 amount;\r\n  }\r\n\r\n  mapping(bytes32 => Transfer) private transferToPassword;\r\n\r\n  mapping(address => uint256) private indexToAddress;\r\n  mapping(address => mapping(uint256 => bytes32)) private passwordToAddress;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier passwordOwner(bytes32 _byte) {\r\n    require(\r\n      transferToPassword[_byte].from == msg.sender &&\r\n      transferToPassword[_byte].amount > 0\r\n    );\r\n    _;\r\n  }\r\n\r\n  event LogChangeCommissionFee(uint256 fee);\r\n  event LogChangeOwner(address indexed exOwner, address indexed newOwner);\r\n  event LogDeposit(address indexed from, uint256 amount);\r\n  event LogGetTransfer(address indexed from, address indexed recipient, uint256 amount);\r\n  event LogEmergency(address indexed from, uint256 amount);\r\n\r\n\r\n\r\n  constructor(uint256 _fee) public {\r\n    commissionFee = _fee;\r\n  }\r\n\r\n  function changeCommissionFee(uint256 _fee) public onlyOwner {\r\n    commissionFee = _fee;\r\n\r\n    emit LogChangeCommissionFee(_fee);\r\n  }\r\n\r\n  function changeOwner(address _newOwner) public onlyOwner {\r\n    address exOwner = owner;\r\n    owner = _newOwner;\r\n\r\n    emit LogChangeOwner(exOwner, _newOwner);\r\n  }\r\n\r\n\r\n  //simple transfer\r\n  function deposit(bytes32 _password) public payable {\r\n    require(\r\n      msg.value > commissionFee &&\r\n      transferToPassword[sha3(_password)].amount == 0\r\n    );\r\n\r\n    bytes32 pass = sha3(_password);\r\n    transferToPassword[pass] = Transfer(msg.sender, msg.value);\r\n\r\n    uint256 index = indexToAddress[msg.sender];\r\n\r\n    indexToAddress[msg.sender]++;\r\n    passwordToAddress[msg.sender][index] = pass;\r\n\r\n    emit LogDeposit(msg.sender, msg.value);\r\n  }\r\n\r\n  function getTransfer(bytes32 _password) public payable {\r\n    require(\r\n      transferToPassword[sha3(_password)].amount > 0\r\n    );\r\n\r\n    bytes32 pass = sha3(_password);\r\n    address from = transferToPassword[pass].from;\r\n    uint256 amount = transferToPassword[pass].amount - commissionFee;\r\n    totalFee += commissionFee;\r\n\r\n    transferToPassword[pass].amount = 0;\r\n\r\n    msg.sender.transfer(amount);\r\n\r\n    emit LogGetTransfer(from, msg.sender, amount);\r\n  }\r\n\r\n\r\n\r\n  //advanced transfer\r\n  function AdvancedDeposit(bytes32 _password, uint256 _num) public payable {\r\n    require(\r\n      _num >= 0 && _num < 1000000 &&\r\n      msg.value >= commissionFee &&\r\n      transferToPassword[sha3(_password, _num)].amount == 0\r\n    );\r\n\r\n    bytes32 pass = sha3(_password, _num);\r\n    transferToPassword[pass] = Transfer(msg.sender, msg.value);\r\n\r\n    uint256 index = indexToAddress[msg.sender];\r\n\r\n    indexToAddress[msg.sender]++;\r\n    passwordToAddress[msg.sender][index] = pass;\r\n\r\n\r\n    emit LogDeposit(msg.sender, msg.value);\r\n  }\r\n\r\n  function getAdvancedTransfer(bytes32 _password, uint256 _num) public payable {\r\n    require(\r\n      _num >= 0 && _num < 1000000 &&\r\n      transferToPassword[sha3(_password, _num)].amount > 0\r\n    );\r\n\r\n    bytes32 pass = sha3(_password, _num);\r\n    address from = transferToPassword[pass].from;\r\n    uint256 amount = transferToPassword[pass].amount - commissionFee;\r\n    totalFee += commissionFee;\r\n\r\n    transferToPassword[pass].amount = 0;\r\n\r\n    msg.sender.transfer(amount);\r\n\r\n    emit LogGetTransfer(from, msg.sender, amount);\r\n  }\r\n\r\n  function viewIndexNumber() public view returns(uint256) {\r\n    return indexToAddress[msg.sender];\r\n  }\r\n\r\n  function viewPassword(uint256 _index) public view returns(bytes32, uint256) {\r\n    bytes32 hash = passwordToAddress[msg.sender][_index];\r\n    uint256 value = transferToPassword[hash].amount;\r\n\r\n    return (hash, value);\r\n  }\r\n\r\n  function emergency(bytes32 _byte) public payable passwordOwner(_byte) {\r\n\r\n    uint256 amount = transferToPassword[_byte].amount - commissionFee * 2;\r\n    totalFee += commissionFee * 2;\r\n    transferToPassword[_byte].amount = 0;\r\n\r\n    msg.sender.transfer(amount);\r\n\r\n    emit LogEmergency(msg.sender, amount);\r\n  }\r\n\r\n  function withdrawFee() public payable onlyOwner {\r\n    require( totalFee > 0);\r\n\r\n    uint256 fee = totalFee;\r\n    totalFee = 0;\r\n\r\n    msg.sender.transfer(totalFee);\r\n  }\r\n\r\n  // only emergency\r\n  function withdraw() public payable onlyOwner {\r\n    msg.sender.transfer(this.balance);\r\n  }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeCommissionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_password\",\"type\":\"bytes32\"}],\"name\":\"getTransfer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewIndexNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_password\",\"type\":\"bytes32\"},{\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"getAdvancedTransfer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_byte\",\"type\":\"bytes32\"}],\"name\":\"emergency\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_password\",\"type\":\"bytes32\"},{\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"AdvancedDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_password\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"viewPassword\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogChangeCommissionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"exOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogGetTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogEmergency\",\"type\":\"event\"}]","ContractName":"PasswordEscrow","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://bcbd4eae15e6d65ac4265e0486400f404be20601436caf4f9fe4f0a0e963bc37"}]}