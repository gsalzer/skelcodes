{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract RunAway {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n    // only people with tokens\r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev prevents contracts from interacting with me\r\n     */\r\n    modifier onlyHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    // administrators can:\r\n    // -> change the name of the contract\r\n    // -> change the name of the token\r\n    // -> start the game(activate)\r\n    // they CANNOT:\r\n    // -> take funds\r\n    // -> disable withdrawals\r\n    // -> kill the contract\r\n    // -> change the price of tokens\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[keccak256(abi.encodePacked(_customerAddress))]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyComm1(){\r\n        address _customerAddress = msg.sender;\r\n        require(keccak256(abi.encodePacked(_customerAddress)) == comm1_);\r\n        _;\r\n    }\r\n\r\n    modifier onlyComm2{\r\n        address _customerAddress = msg.sender;\r\n        require(keccak256(abi.encodePacked(_customerAddress)) == comm2_);\r\n        _;\r\n    }\r\n\r\n    modifier checkRoundStatus()\r\n    {\r\n      if(now >= rounds_[currentRoundID_].endTime)\r\n      {\r\n        endCurrentRound();\r\n        startNextRound();\r\n      }\r\n      _;\r\n    }\r\n\r\n    function startNextRound()\r\n      private\r\n      {\r\n        currentRoundID_ ++;\r\n        rounds_[currentRoundID_].roundID = currentRoundID_;\r\n        rounds_[currentRoundID_].startTime = now;\r\n        rounds_[currentRoundID_].endTime = now + roundDuration_;\r\n        rounds_[currentRoundID_].ended = false;\r\n      }\r\n\r\n      function endCurrentRound()\r\n        private\r\n      {\r\n        Round storage round = rounds_[currentRoundID_];\r\n        round.ended = true;\r\n        if(round.netBuySum>0 && round.dividends>0)\r\n        {\r\n          round.profitPerShare = round.dividends.mul(magnitude).div(round.netBuySum);\r\n        }\r\n      }\r\n\r\n        modifier isActivated() {\r\n            require(activated_ == true, \"its not ready yet.  check ?eta in discord\");\r\n            _;\r\n        }\r\n\r\n    // ensures that the first tokens in the contract will be equally distributed\r\n    // meaning, no divine dump will be ever possible\r\n    // result: healthy longevity.\r\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\r\n        address _customerAddress = msg.sender;\r\n\r\n        // are we still in the vulnerable phase?\r\n        // if so, enact anti early whale protocol\r\n        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\r\n            require(\r\n                // is the customer in the ambassador list?\r\n                ambassadors_[_customerAddress] == true &&\r\n\r\n                // does the customer purchase exceed the max ambassador quota?\r\n                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\r\n\r\n            );\r\n\r\n            // updated the accumulated quota\r\n            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\r\n\r\n            // execute\r\n            _;\r\n        } else {\r\n            // in case the ether count drops low, the ambassador phase won't reinitiate\r\n            onlyAmbassadors = false;\r\n            _;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned\r\n    );\r\n\r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n    event onAcquireDividends(\r\n        address indexed customerAddress,\r\n        uint256 dividendsAcquired\r\n    );\r\n\r\n    // ERC20\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n    event onWithDrawComm(\r\n      uint8 indexed comm,\r\n      uint256 ethereumWithdrawn\r\n    );\r\n\r\n    event onTransferExpiredDividends(\r\n      address indexed customerAddress,\r\n      uint256 roundID,\r\n      uint256 amount\r\n    );\r\n    /*=====================================\r\n    =            Structs                  =\r\n    =====================================*/\r\n    struct Round {\r\n        uint256 roundID;   // Starting from 1, increasing by 1\r\n        uint256 netBuySum;   // Sum of all userNetBuy which are > 0\r\n        uint256 endTime;\r\n        bool ended;\r\n        uint256 startTime;\r\n        uint256 profitPerShare;\r\n        uint256 dividends;\r\n        mapping(address=>int256) userNetBuy;\r\n        mapping(address => uint256) payoutsTo;\r\n        uint256 totalPayouts;\r\n    }\r\n\r\n    // Rounds recorder\r\n    mapping(uint256=>Round) public rounds_;\r\n\r\n    // Fees storage accounts\r\n    uint256 public comm1Balance_;\r\n    uint256 public comm2Balance_;\r\n    bytes32 comm1_=0xc0495b4fc42a03a01bdcd5e2f7b89dfd2e077e19f273ff82d33e9ec642fc7a08;\r\n    bytes32 comm2_=0xa1bb9d7f7e4c2b049c73772f2cab50235f20a685f798970054b74fbc6d411c1e;\r\n\r\n    // Current round ID\r\n    uint256 public currentRoundID_;\r\n    uint256 public roundDuration_ = 1 hours;\r\n    // Is game started?\r\n    bool public activated_=false;\r\n\r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"Run Away\";\r\n    string public symbol = \"RUN\";\r\n    uint8 constant public decimals = 18;\r\n    uint8 constant internal dividendFee_ = 10;\r\n    uint8 constant internal communityFee_ = 50;\r\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\n    uint256 constant internal magnitude = 2**64;\r\n\r\n    // ambassador program\r\n    mapping(address => bool) internal ambassadors_;\r\n    uint256 constant internal ambassadorMaxPurchase_ = 20 ether;\r\n    uint256 constant internal ambassadorQuota_ = 120 ether;\r\n\r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    // Income, including dividends in each round and sale income.\r\n    mapping(address => uint256) public income_;\r\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\r\n    uint256 internal tokenSupply_ = 0;\r\n\r\n    // administrator list (see above on what they can do)\r\n    mapping(bytes32 => bool) public administrators;\r\n\r\n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\r\n    bool public onlyAmbassadors = true;\r\n\r\n\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --\r\n    */\r\n    constructor()\r\n        public\r\n    {\r\n        // add administrators here\r\n        administrators[0x2a94d36a11c723ddffd4bf9352609aed9b400b2be1e9b272421fa7b4e7a40560] = true;\r\n\r\n        // add the ambassadors here.\r\n        ambassadors_[0x16F2971f677DDCe04FC44bb1A5289f0B96053b2C] = true;\r\n        ambassadors_[0x579F9608b1fa6aA387BD2a3844469CA8fb10628c] = true;\r\n        ambassadors_[0x62E691c598D968633EEAB5588b1AF95725E33316] = true;\r\n        ambassadors_[0x9e3F432dc2CD4EfFB0F0EB060b07DC2dFc574d0D] = true;\r\n        ambassadors_[0x63735870e79A653aA445d7b7B59DC9c1a7149F39] = true;\r\n        ambassadors_[0x562DEd82A67f4d2ED3782181f938f2E4232aE02C] = true;\r\n        ambassadors_[0x22ec2994d77E3Ca929eAc83dEF3958CC547ff028] = true;\r\n        ambassadors_[0xF2e602645AC91727D75E66231d06F572E133E59F] = true;\r\n        ambassadors_[0x1AA16F9A2428ceBa2eDeb5D544b3a3D767c1566e] = true;\r\n        ambassadors_[0x273b270F0eA966a462feAC89C9d4f4D6Dcd1CbdF] = true;\r\n        ambassadors_[0x7ABe6948E5288a30026EdE239446a0B84d502184] = true;\r\n        ambassadors_[0xB6Aa76e55564D9dB18cAF61369ff4618F5287f43] = true;\r\n        ambassadors_[0x3c6c909dB011Af05Dadd706D88a6Cd03D87a4f86] = true;\r\n        ambassadors_[0x914132fe8075aF2d932cadAa7d603DDfDf70D353] = true;\r\n        ambassadors_[0x8Be6Aa12746e84e448a18B20013F3AdB9e24e1c6] = true;\r\n        ambassadors_[0x3595bA9Ab527101B5cc78195Ca043653d96fEEB6] = true;\r\n        ambassadors_[0x17dBe44d9c91d2c71E33E3fd239BD1574A7f46DF] = true;\r\n        ambassadors_[0x47Ce514A4392304D9Ccaa7A807776AcB391198D0] = true;\r\n        ambassadors_[0x96b41F6DE1d579ea5CB87bA04834368727B993e4] = true;\r\n        ambassadors_[0x0953800A059a9d30BD6E47Ae2D34f3665F8E2b53] = true;\r\n        ambassadors_[0x497C85EeF12A17D3fEd3aef894ec3273046FdC1D] = true;\r\n        ambassadors_[0x116febf80104677019ac4C9E693c63c19B26Cf86] = true;\r\n        ambassadors_[0xFb214AA761CcC1Ccc9D2134a33f4aC77c514d59c] = true;\r\n        ambassadors_[0x567e3616dE1b217d6004cbE9a84095Ce90E94Bfd] = true;\r\n        ambassadors_[0x3f054BF8C392F4F28a9B29f911503c6BC58ED4Da] = true;\r\n        ambassadors_[0x71F658079CaEEDf2270F37c6235D0Ac6B25c9849] = true;\r\n        ambassadors_[0x0581d2d23A300327678E4497d84d58FF64B9CfDe] = true;\r\n        ambassadors_[0xFFAE7193dFA6eBff817C47cd2e5Ce4497c082613] = true;\r\n\r\n        ambassadors_[0x18B0f4F11Cb1F2170a6AC594b2Cb0107e2B44821] = true;\r\n        ambassadors_[0x081c65ff7328ac4cC173D3dA7fD02371760B0cF4] = true;\r\n        ambassadors_[0xfa698b3242A3a48AadbC64F50dc96e1DE630F39A] = true;\r\n        ambassadors_[0xAA5BA7930A1B2c14CDad11bECA86bf43779C05c5] = true;\r\n        ambassadors_[0xa7bF8FF736532f6725c5433190E0852DD1592213] = true;\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\r\n     */\r\n    function buy()\r\n        public\r\n        payable\r\n        returns(uint256)\r\n    {\r\n        purchaseTokens(msg.value);\r\n    }\r\n\r\n    /**\r\n     * Fallback function to handle ethereum that was send straight to the contract\r\n     * Unfortunately we cannot use a referral address this way.\r\n     */\r\n    function()\r\n        payable\r\n        public\r\n    {\r\n        purchaseTokens(msg.value);\r\n    }\r\n\r\n    /**\r\n     * Converts all of caller's dividends to tokens.\r\n     */\r\n    function reinvest()\r\n        isActivated()\r\n        onlyHuman()\r\n        checkRoundStatus()\r\n        public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        uint256 incomeTmp = income_[_customerAddress];\r\n        //clear income of this user\r\n        income_[_customerAddress] = 0;\r\n        uint256 _tokens = purchaseTokens(incomeTmp);\r\n        // fire event\r\n        emit onReinvestment(_customerAddress, incomeTmp, _tokens);\r\n    }\r\n\r\n    /**\r\n     * Alias of sell(), acquireDividends() and withdraw().\r\n     */\r\n    function exit()\r\n        isActivated()\r\n        onlyHuman()\r\n        checkRoundStatus()\r\n        public\r\n    {\r\n        // get token count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if(_tokens > 0) sell(_tokens);\r\n        acquireDividends();\r\n        // lambo delivery service\r\n        withdraw();\r\n    }\r\n\r\n    /**\r\n     * Withdraws all of the caller's dividends in previous round.\r\n     */\r\n    function acquireDividends()\r\n        isActivated()\r\n        onlyHuman()\r\n        checkRoundStatus()\r\n        public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        Round storage round = rounds_[currentRoundID_.sub(1)];\r\n        uint256 _dividends = myDividends(round.roundID); // get ref. bonus later in the code\r\n\r\n        // update dividend tracker\r\n        round.payoutsTo[_customerAddress] = round.payoutsTo[_customerAddress].add(_dividends);\r\n        round.totalPayouts = round.totalPayouts.add(_dividends);\r\n\r\n        // Add dividends to income.\r\n        income_[_customerAddress] = income_[_customerAddress].add(_dividends);\r\n\r\n        // fire event\r\n        emit onAcquireDividends(_customerAddress, _dividends);\r\n    }\r\n\r\n    /**\r\n     * Withdraws all of the caller's income.\r\n     */\r\n    function withdraw()\r\n        isActivated()\r\n        onlyHuman()\r\n        checkRoundStatus()\r\n        public\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        uint256 myIncome = income_[_customerAddress];\r\n        //clear value\r\n        income_[_customerAddress]=0;\r\n        _customerAddress.transfer(myIncome);\r\n        // fire event\r\n        emit onWithdraw(_customerAddress, myIncome);\r\n    }\r\n\r\n    /**\r\n     * Tax dividends to community.\r\n    */\r\n    function taxDividends(uint256 _dividends)\r\n      internal\r\n      returns (uint256)\r\n    {\r\n      // Taxed dividends\r\n      uint256 _comm = _dividends.div(communityFee_);\r\n      uint256 _taxedDividends = _dividends.sub(_comm);\r\n      // Community fees\r\n      uint256 _comm_1 = _comm.mul(3).div(10);\r\n      comm1Balance_ = comm1Balance_.add(_comm_1);\r\n      comm2Balance_ = comm2Balance_.add(_comm.sub(_comm_1));\r\n      return _taxedDividends;\r\n    }\r\n\r\n    /**\r\n     * Liquifies tokens to ethereum.\r\n     */\r\n    function sell(uint256 _amountOfTokens)\r\n        isActivated()\r\n        onlyHuman()\r\n        onlyBagholders()\r\n        checkRoundStatus()\r\n        public\r\n    {\r\n        require(_amountOfTokens > 0, \"Selling 0 token!\");\r\n\r\n        Round storage round = rounds_[currentRoundID_];\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        // russian hackers BTFO\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n\r\n        // Record income\r\n        income_[_customerAddress] = income_[_customerAddress].add(_taxedEthereum);\r\n\r\n        // Taxed dividends\r\n        uint256 _taxedDividends = taxDividends(_dividends);\r\n        round.dividends = round.dividends.add(_taxedDividends);\r\n\r\n        // burn the sold tokens\r\n        tokenSupply_ = tokenSupply_.sub(_tokens);\r\n        tokenBalanceLedger_[_customerAddress] = tokenBalanceLedger_[_customerAddress].sub(_tokens);\r\n\r\n        // Calculate net buy of current round\r\n        int256 _userNetBuyBeforeSale = round.userNetBuy[_customerAddress];\r\n        round.userNetBuy[_customerAddress] = _userNetBuyBeforeSale.sub(_tokens.toInt256Safe());\r\n        if( _userNetBuyBeforeSale > 0)\r\n        {\r\n          if(_userNetBuyBeforeSale.toUint256Safe() > _tokens)\r\n          {\r\n            round.netBuySum = round.netBuySum.sub(_tokens);\r\n          }\r\n          else\r\n          {\r\n            round.netBuySum = round.netBuySum.sub(_userNetBuyBeforeSale.toUint256Safe());\r\n          }\r\n        }\r\n\r\n        // fire event\r\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum);\r\n    }\r\n\r\n\r\n    /**\r\n     * Transfer tokens from the caller to a new holder.\r\n     * Remember, there's a 10% fee here as well.\r\n     */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        isActivated()\r\n        onlyHuman()\r\n        checkRoundStatus()\r\n        onlyBagholders()\r\n        public\r\n        returns(bool)\r\n    {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n\r\n        // make sure we have the requested tokens\r\n        // also disables transfers until ambassador phase is over\r\n        // ( we dont want whale premines )\r\n        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n        // liquify 10% of the tokens that are transfered\r\n        // these are dispersed to shareholders\r\n        uint256 _tokenFee = _amountOfTokens.div(dividendFee_);\r\n        uint256 _taxedTokens = _amountOfTokens.sub(_tokenFee);\r\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\r\n\r\n\r\n        // Taxed dividends\r\n        uint256 _taxedDividends = taxDividends(_dividends);\r\n        rounds_[currentRoundID_].dividends = rounds_[currentRoundID_].dividends.add(_taxedDividends);\r\n\r\n        // burn the fee tokens\r\n        tokenSupply_ = tokenSupply_.sub(_tokenFee);\r\n\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = tokenBalanceLedger_[_customerAddress].sub(_amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = tokenBalanceLedger_[_toAddress].add(_taxedTokens);\r\n\r\n        // fire event\r\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n\r\n        // ERC20\r\n        return true;\r\n\r\n    }\r\n\r\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\r\n    /**\r\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\r\n     */\r\n    function disableInitialStage()\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        onlyAmbassadors = false;\r\n    }\r\n\r\n    /**\r\n     * In case one of us dies, we need to replace ourselves.\r\n     */\r\n    function setAdministrator(bytes32 _identifier, bool _status)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        administrators[_identifier] = _status;\r\n    }\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setName(string _name)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n\r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setSymbol(string _symbol)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /**\r\n      Start this game.\r\n    */\r\n    function activate()\r\n      onlyAdministrator()\r\n      public\r\n    {\r\n      // can only be ran once\r\n      require(activated_ == false, \"Already activated\");\r\n\r\n      currentRoundID_ = 1;\r\n      rounds_[currentRoundID_].roundID = currentRoundID_;\r\n      rounds_[currentRoundID_].startTime = now;\r\n      rounds_[currentRoundID_].endTime = now + roundDuration_;\r\n\r\n      activated_ = true;\r\n    }\r\n\r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: totalEthereumBalance()\r\n     */\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the total token supply.\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\r\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n     * But in the internal calculations, we want them separate.\r\n     */\r\n    function myDividends(uint256 _roundID)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return dividendsOf(msg.sender, _roundID);\r\n    }\r\n\r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address _customerAddress, uint256 _roundID)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n      if(_roundID<1) return 0;\r\n      if (_roundID > currentRoundID_) return 0;\r\n      Round storage round = rounds_[_roundID];\r\n      // Sold >= bought\r\n      if(round.userNetBuy[_customerAddress] <= 0)\r\n      {\r\n        return 0;\r\n      }\r\n\r\n      // Nobody sold.\r\n      if(round.dividends <= 0)\r\n      {\r\n        return 0;\r\n      }\r\n      return round.profitPerShare.mul(round.userNetBuy[_customerAddress].toUint256Safe()).div(magnitude).sub(round.payoutsTo[_customerAddress]);\r\n    }\r\n\r\n    /**\r\n     * Estimate user dividends in current round.\r\n    */\r\n    function estimateDividends(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n      Round storage round = rounds_[currentRoundID_];\r\n      // Sold >= bought\r\n      if(round.userNetBuy[_customerAddress] <= 0)\r\n      {\r\n        return 0;\r\n      }\r\n\r\n      // Nobody sold.\r\n      if(round.dividends <= 0)\r\n      {\r\n        return 0;\r\n      }\r\n\r\n      return round.dividends.mul(magnitude).div(round.netBuySum).mul(round.userNetBuy[_customerAddress].toUint256Safe()).div(magnitude);\r\n    }\r\n\r\n    /**\r\n     * Return the buy price of 1 individual token.\r\n     */\r\n    function sellPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function buyPrice()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            return _ethereum;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n     */\r\n    function calculateTokensReceived(uint256 _ethereumToSpend)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _amountOfTokens = ethereumToTokens_(_ethereumToSpend);\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n     */\r\n    function calculateEthereumReceived(uint256 _tokensToSell)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        return _taxedEthereum;\r\n    }\r\n\r\n    function roundNetBuySum(uint256 _roundID)\r\n      public view returns(uint256)\r\n    {\r\n        if(_roundID <1 || _roundID > currentRoundID_) return 0;\r\n        return rounds_[_roundID].netBuySum;\r\n    }\r\n\r\n    function roundEndTime(uint256 _roundID)\r\n      public view returns(uint256)\r\n    {\r\n      if(_roundID <1 || _roundID > currentRoundID_) return 0;\r\n      return rounds_[_roundID].endTime;\r\n    }\r\n    function roundEnded(uint256 _roundID)\r\n      public view returns(bool)\r\n    {\r\n      if(_roundID <1 || _roundID > currentRoundID_) return true;\r\n      return rounds_[_roundID].ended;\r\n    }\r\n\r\n    function roundStartTime(uint256 _roundID)\r\n      public view returns(uint256)\r\n    {\r\n      if(_roundID <1 || _roundID > currentRoundID_) return 0;\r\n      return rounds_[_roundID].startTime;\r\n    }\r\n\r\n    function roundProfitPerShare(uint256 _roundID)\r\n      public view returns(uint256)\r\n    {\r\n      if(_roundID <1 || _roundID > currentRoundID_) return 0;\r\n      return rounds_[_roundID].profitPerShare;\r\n    }\r\n    function roundDividends(uint256 _roundID)\r\n      public view returns(uint256)\r\n    {\r\n      if(_roundID <1 || _roundID > currentRoundID_) return 0;\r\n      return rounds_[_roundID].dividends;\r\n    }\r\n\r\n    function roundUserNetBuy(uint256 _roundID, address addr)\r\n      public view returns(int256)\r\n    {\r\n      if(_roundID <1 || _roundID > currentRoundID_) return 0;\r\n      return rounds_[_roundID].userNetBuy[addr];\r\n    }\r\n\r\n    function roundPayoutsTo(uint256 _roundID, address addr)\r\n      public view returns(uint256)\r\n    {\r\n      if(_roundID <1 || _roundID > currentRoundID_) return 0;\r\n      return rounds_[_roundID].payoutsTo[addr];\r\n    }\r\n    function roundTotalPayouts(uint256 _roundID)\r\n      public view returns(uint256)\r\n    {\r\n      if(_roundID <1 || _roundID > currentRoundID_) return 0;\r\n      return rounds_[_roundID].totalPayouts;\r\n    }\r\n\r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n    function purchaseTokens(uint256 _incomingEthereum)\r\n        isActivated()\r\n        antiEarlyWhale(_incomingEthereum)\r\n        onlyHuman()\r\n        checkRoundStatus()\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        require(_incomingEthereum > 0, \"0 eth buying.\");\r\n        Round storage round = rounds_[currentRoundID_];\r\n        // data setup\r\n        address _customerAddress = msg.sender;\r\n        uint256 _amountOfTokens = ethereumToTokens_(_incomingEthereum);\r\n\r\n        // no point in continuing execution if OP is a poorfag russian hacker\r\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\r\n        // (or hackers)\r\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\r\n        require(_amountOfTokens > 0 && (tokenSupply_.add(_amountOfTokens) > tokenSupply_));\r\n\r\n        // we can't give people infinite ethereum\r\n        if(tokenSupply_ > 0){\r\n            // add tokens to the pool\r\n            tokenSupply_ = tokenSupply_.add(_amountOfTokens);\r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        int256 _userNetBuy = round.userNetBuy[_customerAddress];\r\n        int256 _userNetBuyAfterPurchase = _userNetBuy.add(_amountOfTokens.toInt256Safe());\r\n        round.userNetBuy[_customerAddress] = _userNetBuyAfterPurchase;\r\n        if(_userNetBuy >= 0)\r\n        {\r\n          round.netBuySum = round.netBuySum.add(_amountOfTokens);\r\n        }\r\n        else\r\n        {\r\n          if( _userNetBuyAfterPurchase > 0)\r\n          {\r\n            round.netBuySum = round.netBuySum.add(_userNetBuyAfterPurchase.toUint256Safe());\r\n          }\r\n        }\r\n\r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_customerAddress] = tokenBalanceLedger_[_customerAddress].add(_amountOfTokens);\r\n\r\n        // fire event\r\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Calculate Token price based on an amount of incoming ethereum\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function ethereumToTokens_(uint256 _ethereum)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived =\r\n         (\r\n            (\r\n                // underflow attempts BTFO\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            (_tokenPriceInitial**2)\r\n                            +\r\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\r\n                            +\r\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n                            +\r\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n                        )\r\n                    ), _tokenPriceInitial\r\n                )\r\n            )/(tokenPriceIncremental_)\r\n        )-(tokenSupply_)\r\n        ;\r\n\r\n        return _tokensReceived;\r\n    }\r\n\r\n    /**\r\n     * Calculate token sell value.\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n     function tokensToEthereum_(uint256 _tokens)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _etherReceived =\r\n        (\r\n            // underflow attempts BTFO\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\r\n                        )-tokenPriceIncremental_\r\n                    )*(tokens_ - 1e18)\r\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\r\n            )\r\n        /1e18);\r\n        return _etherReceived;\r\n    }\r\n\r\n    /*==========================================\r\n    =           COMMUNITY FUNCTIONS            =\r\n    ==========================================*/\r\n    function withdrawComm1()\r\n      isActivated()\r\n      onlyComm1()\r\n      onlyHuman()\r\n      checkRoundStatus()\r\n      public\r\n    {\r\n      uint256 bal = comm1Balance_;\r\n      comm1Balance_ = 0;\r\n      msg.sender.transfer(bal);\r\n      emit onWithDrawComm(1, bal);\r\n    }\r\n\r\n    function withdrawComm2()\r\n      isActivated()\r\n      onlyComm2()\r\n      onlyHuman()\r\n      checkRoundStatus()\r\n      public\r\n    {\r\n      uint256 bal = comm2Balance_;\r\n      comm2Balance_ = 0;\r\n      msg.sender.transfer(bal);\r\n      emit onWithDrawComm(2, bal);\r\n    }\r\n\r\n    function transferExpiredDividends(uint256 _roundID)\r\n      isActivated()\r\n      onlyHuman()\r\n      checkRoundStatus()\r\n      public\r\n    {\r\n      require(_roundID > 0 && _roundID < currentRoundID_.sub(1), \"Invalid round number\");\r\n      Round storage round = rounds_[_roundID];\r\n      uint256 _unpaid = round.dividends.sub(round.totalPayouts);\r\n      require(_unpaid>0, \"No expired dividends.\");\r\n      uint256 comm1 = _unpaid.mul(3).div(10);\r\n      comm1Balance_ = comm1Balance_.add(comm1);\r\n      comm2Balance_ = comm2Balance_.add(_unpaid.sub(comm1));\r\n      round.totalPayouts = round.totalPayouts.add(_unpaid);\r\n      emit onTransferExpiredDividends(msg.sender, _roundID, _unpaid);\r\n    }\r\n\r\n    //This is where all your gas goes, sorry\r\n    //Not sorry, you probably only paid 1 gwei\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// From https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMath.sol\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n    int256 b = int256(a);\r\n    assert(b >= 0);\r\n    return b;\r\n  }\r\n}\r\n\r\n// From: https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMathInt.sol\r\n/**\r\n * @title SafeMathInt\r\n * @dev Math operations with safety checks that throw on error\r\n * @dev SafeMath adapted for int256\r\n */\r\nlibrary SafeMathInt {\r\n  function mul(int256 a, int256 b) internal pure returns (int256) {\r\n    // Prevent overflow when multiplying INT256_MIN with -1\r\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n    assert(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\r\n\r\n    int256 c = a * b;\r\n    assert((b == 0) || (c / b == a));\r\n    return c;\r\n  }\r\n\r\n  function div(int256 a, int256 b) internal pure returns (int256) {\r\n    // Prevent overflow when dividing INT256_MIN by -1\r\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n    assert(!(a == - 2**255 && b == -1));\r\n\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    int256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(int256 a, int256 b) internal pure returns (int256) {\r\n    assert((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\r\n\r\n    return a - b;\r\n  }\r\n\r\n  function add(int256 a, int256 b) internal pure returns (int256) {\r\n    int256 c = a + b;\r\n    assert((b >= 0 && c >= a) || (b < 0 && c < a));\r\n    return c;\r\n  }\r\n\r\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n    assert(a>=0);\r\n    return uint256(a);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"},{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comm1Balance_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"roundPayoutsTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyAmbassadors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"roundProfitPerShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"roundTotalPayouts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawComm1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acquireDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comm2Balance_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"bytes32\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds_\",\"outputs\":[{\"name\":\"roundID\",\"type\":\"uint256\"},{\"name\":\"netBuySum\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"profitPerShare\",\"type\":\"uint256\"},{\"name\":\"dividends\",\"type\":\"uint256\"},{\"name\":\"totalPayouts\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"estimateDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"roundEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"roundEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableInitialStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"roundStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"roundDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundDuration_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"transferExpiredDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawComm2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"roundUserNetBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"income_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"roundNetBuySum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRoundID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dividendsAcquired\",\"type\":\"uint256\"}],\"name\":\"onAcquireDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"comm\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithDrawComm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onTransferExpiredDividends\",\"type\":\"event\"}]","ContractName":"RunAway","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2db0ef42fe14458f087a43ebbcd18ee837535c8916ef75dd7f0fe57160a786c5"}]}