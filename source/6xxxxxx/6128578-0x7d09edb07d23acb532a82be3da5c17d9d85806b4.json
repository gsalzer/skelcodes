{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PoCGame\r\n{\r\n    \r\n    /**\r\n     * Modifiers\r\n     */\r\n     \r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n   modifier isOpenToPublic()\r\n    {\r\n        require(openToPublic);\r\n        _;\r\n    }\r\n\r\n    modifier onlyRealPeople()\r\n    {\r\n          require (msg.sender == tx.origin);\r\n        _;\r\n    }\r\n\r\n    modifier  onlyPlayers()\r\n    { \r\n        require (wagers[msg.sender] > 0); \r\n        _; \r\n    }\r\n    \r\n   \r\n    /**\r\n     * Events\r\n     */\r\n    event Wager(uint256 amount, address depositer);\r\n    event Win(uint256 amount, address paidTo);\r\n    event Lose(uint256 amount, address loser);\r\n    event Donate(uint256 amount, address paidTo, address donator);\r\n    event DifficultyChanged(uint256 currentDifficulty);\r\n    event BetLimitChanged(uint256 currentBetLimit);\r\n\r\n    /**\r\n     * Global Variables\r\n     */\r\n    address private whale;\r\n    uint256 betLimit;\r\n    uint difficulty;\r\n    uint private randomSeed;\r\n    address owner;\r\n    mapping(address => uint256) timestamps;\r\n    mapping(address => uint256) wagers;\r\n    bool openToPublic;\r\n    uint256 totalDonated;\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(address whaleAddress, uint256 wagerLimit) \r\n    onlyRealPeople()\r\n    public \r\n    {\r\n        openToPublic = false;\r\n        owner = msg.sender;\r\n        whale = whaleAddress;\r\n        totalDonated = 0;\r\n        betLimit = wagerLimit;\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n     * Let the public play\r\n     */\r\n    function OpenToThePublic() \r\n    onlyOwner()\r\n    public\r\n    {\r\n        openToPublic = true;\r\n    }\r\n    \r\n    /**\r\n     * Adjust the bet amounts\r\n     */\r\n    function AdjustBetAmounts(uint256 amount) \r\n    onlyOwner()\r\n    public\r\n    {\r\n        betLimit = amount;\r\n        \r\n        emit BetLimitChanged(betLimit);\r\n    }\r\n    \r\n     /**\r\n     * Adjust the difficulty\r\n     */\r\n    function AdjustDifficulty(uint256 amount) \r\n    onlyOwner()\r\n    public\r\n    {\r\n        difficulty = amount;\r\n        \r\n        emit DifficultyChanged(difficulty);\r\n    }\r\n    \r\n    \r\n    function() public payable { }\r\n\r\n    /**\r\n     * Wager your bet\r\n     */\r\n    function wager()\r\n    isOpenToPublic()\r\n    onlyRealPeople() \r\n    payable\r\n    public \r\n    {\r\n        //You have to send exactly 0.01 ETH.\r\n        require(msg.value == betLimit);\r\n\r\n        //log the wager and timestamp(block number)\r\n        timestamps[msg.sender] = block.number;\r\n        wagers[msg.sender] = msg.value;\r\n        emit Wager(msg.value, msg.sender);\r\n    }\r\n    \r\n    /**\r\n     * method to determine winners and losers\r\n     */\r\n    function play()\r\n    isOpenToPublic()\r\n    onlyRealPeople()\r\n    onlyPlayers()\r\n    public\r\n    {\r\n        uint256 blockNumber = timestamps[msg.sender];\r\n        if(blockNumber < block.number)\r\n        {\r\n            timestamps[msg.sender] = 0;\r\n            wagers[msg.sender] = 0;\r\n    \r\n            uint256 winningNumber = uint256(keccak256(abi.encodePacked(blockhash(blockNumber),  msg.sender)))%difficulty +1;\r\n    \r\n            if(winningNumber == difficulty / 2)\r\n            {\r\n                payout(msg.sender);\r\n            }\r\n            else \r\n            {\r\n                //player loses\r\n                loseWager(betLimit / 2);\r\n            }    \r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * For those that just want to donate to the whale\r\n     */\r\n    function donate()\r\n    isOpenToPublic()\r\n    public \r\n    payable\r\n    {\r\n        donateToWhale(msg.value);\r\n    }\r\n\r\n    /**\r\n     * Payout ETH to winner\r\n     */\r\n    function payout(address winner) \r\n    internal \r\n    {\r\n        uint256 ethToTransfer = address(this).balance / 2;\r\n        \r\n        winner.transfer(ethToTransfer);\r\n        emit Win(ethToTransfer, winner);\r\n    }\r\n\r\n    /**\r\n     * Payout ETH to whale\r\n     */\r\n    function donateToWhale(uint256 amount) \r\n    internal \r\n    {\r\n        whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\r\n        totalDonated += amount;\r\n        emit Donate(amount, whale, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Payout ETH to whale when player loses\r\n     */\r\n    function loseWager(uint256 amount) \r\n    internal \r\n    {\r\n        whale.call.value(amount)(bytes4(keccak256(\"donate()\")));\r\n        totalDonated += amount;\r\n        emit Lose(amount, msg.sender);\r\n    }\r\n    \r\n\r\n    /**\r\n     * ETH balance of contract\r\n     */\r\n    function ethBalance() \r\n    public \r\n    view \r\n    returns (uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * current difficulty of the game\r\n     */\r\n    function currentDifficulty() \r\n    public \r\n    view \r\n    returns (uint256)\r\n    {\r\n        return difficulty;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * current bet amount for the game\r\n     */\r\n    function currentBetLimit() \r\n    public \r\n    view \r\n    returns (uint256)\r\n    {\r\n        return betLimit;\r\n    }\r\n    \r\n    function hasPlayerWagered(address player)\r\n    public \r\n    view \r\n    returns (bool)\r\n    {\r\n        if(wagers[player] > 0)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * For the UI to properly display the winner's pot\r\n     */\r\n    function winnersPot() \r\n    public \r\n    view \r\n    returns (uint256)\r\n    {\r\n        return address(this).balance / 2;\r\n    }\r\n\r\n    /**\r\n     * A trap door for when someone sends tokens other than the intended ones so the overseers can decide where to send them.\r\n     */\r\n    function transferAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens) \r\n    public \r\n    onlyOwner() \r\n    returns (bool success) \r\n    {\r\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\r\n    }\r\n}\r\n\r\n//Define ERC20Interface.transfer, so PoCWHALE can transfer tokens accidently sent to it.\r\ncontract ERC20Interface \r\n{\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdjustDifficulty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OpenToThePublic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"wager\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winnersPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"play\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBetLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdjustBetAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"hasPlayerWagered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"whaleAddress\",\"type\":\"address\"},{\"name\":\"wagerLimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"depositer\",\"type\":\"address\"}],\"name\":\"Wager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paidTo\",\"type\":\"address\"}],\"name\":\"Win\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"loser\",\"type\":\"address\"}],\"name\":\"Lose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paidTo\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"donator\",\"type\":\"address\"}],\"name\":\"Donate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currentDifficulty\",\"type\":\"uint256\"}],\"name\":\"DifficultyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"currentBetLimit\",\"type\":\"uint256\"}],\"name\":\"BetLimitChanged\",\"type\":\"event\"}]","ContractName":"PoCGame","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000093fc1a2360c97a3083e091346f8105972cd1534c000000000000000000000000000000000000000000000000002386f26fc10000","Library":"","SwarmSource":"bzzr://e900d046a256187403bc0738436ab6c1ada167e40ebc09ae24e1f29f2cf27448"}]}