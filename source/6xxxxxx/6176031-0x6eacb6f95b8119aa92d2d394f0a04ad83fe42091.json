{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\ncontract Token {\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  Token public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // How many token units a buyer gets per ether.\r\n  uint256 public rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  // ICO start timestamp\r\n  uint256 public startTime = now;\r\n\r\n  // periods timestamps\r\n  uint256 round1StartTime;\r\n  uint256 round1EndTime;\r\n  uint256 round2StartTime;\r\n  uint256 round2EndTime;\r\n  uint256 round3StartTime;\r\n  uint256 round3EndTime;\r\n  uint256 round4StartTime;\r\n  uint256 round4EndTime;\r\n\r\n  // bonuses in %\r\n  uint256 public round1Bonus = 20;\r\n  uint256 public round2Bonus = 15;\r\n  uint256 public round3Bonus = 5;\r\n\r\n  // min contribution in wei\r\n  uint256 public minContribution = 100 finney;\r\n\r\n  // hardcaps in tokens\r\n  uint256 public round1Cap = uint256(9e8).mul(1 ether);\r\n  uint256 public round2Cap = uint256(12e8).mul(1 ether);\r\n  uint256 public round3Cap = uint256(15e8).mul(1 ether);\r\n  uint256 public round4Cap = uint256(24e8).mul(1 ether);\r\n\r\n  // tokens sold\r\n  uint256 public round1Sold;\r\n  uint256 public round2Sold;\r\n  uint256 public round3Sold;\r\n  uint256 public round4Sold;\r\n\r\n  // Contributions\r\n  mapping(address => uint256) public contributions;\r\n\r\n  // hardCap in ETH\r\n  uint256 hardCap = 12500 ether;\r\n  // softCap in ETH\r\n  uint256 softCap = 1250 ether;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * Event for external token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event ExternalTokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @param _rate Base rate\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   * @param _token Address of the token being sold\r\n   */\r\n  constructor(uint256 _rate, address _newOwner, address _wallet, Token _token) public {\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n    rate = _rate;\r\n    owner = _newOwner;\r\n    wallet = _wallet;\r\n    token = _token;\r\n    round1StartTime = startTime;\r\n    round1EndTime = round1StartTime.add(7 days);\r\n    round2StartTime = round1EndTime.add(1 days);\r\n    round2EndTime = round2StartTime.add(10 days);\r\n    round3StartTime = round2EndTime.add(1 days);\r\n    round3EndTime = round3StartTime.add(14 days);\r\n    round4StartTime = round3EndTime.add(1 days);\r\n    round4EndTime = round4StartTime.add(21 days);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev getting stage index\r\n   */\r\n\r\n  function _getStageIndex () internal view returns (uint8) {\r\n    if (now < round1StartTime) return 0;\r\n    if (now <= round1EndTime) return 1;\r\n    if (now < round2StartTime) return 2;\r\n    if (now <= round2EndTime) return 3;\r\n    if (now < round3StartTime) return 4;\r\n    if (now <= round3EndTime) return 5;\r\n    if (now < round4StartTime) return 6;\r\n    if (now <= round4EndTime) return 7;\r\n    return 8;\r\n  }\r\n\r\n  /**\r\n   * @dev getting stage name\r\n   */\r\n\r\n  function getStageName () public view returns (string) {\r\n    uint8 stageIndex = _getStageIndex();\r\n    if (stageIndex == 0) return 'Pause';\r\n    if (stageIndex == 1) return 'Round1';\r\n    if (stageIndex == 2) return 'Round1 end';\r\n    if (stageIndex == 3) return 'Round2';\r\n    if (stageIndex == 4) return 'Round2 end';\r\n    if (stageIndex == 5) return 'Round3';\r\n    if (stageIndex == 6) return 'Round3 end';\r\n    if (stageIndex == 7) return 'Round4';\r\n    if (stageIndex == 8) return 'Round4 end';\r\n    return 'Pause';\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    uint8 stageIndex = _getStageIndex();\r\n    require(stageIndex > 0);\r\n    require(stageIndex <= 8);\r\n\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount, stageIndex);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    contributions[msg.sender] = contributions[msg.sender].add(weiAmount);\r\n\r\n    if (stageIndex == 1 || stageIndex == 2) round1Sold = round1Sold.add(tokens);\r\n    else if (stageIndex == 3 || stageIndex == 4) round2Sold = round2Sold.add(tokens);\r\n    else if (stageIndex == 5 || stageIndex == 6) round3Sold = round3Sold.add(tokens);\r\n    else round4Sold = round4Sold.add(tokens);\r\n\r\n    _processPurchase(_beneficiary, tokens);\r\n    emit TokenPurchase(\r\n      msg.sender,\r\n      _beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n    if (weiRaised >= softCap) _forwardFunds();\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method: \r\n   *   super._preValidatePurchase(_beneficiary, _weiAmount);\r\n   *   require(weiRaised.add(_weiAmount) <= cap);\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal view\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount > 0);\r\n    require(weiRaised.add(_weiAmount) <= hardCap);\r\n\r\n    require(_weiAmount >= minContribution);\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    require(token.transfer(_beneficiary, _tokenAmount));\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount, uint8 _stageIndex)\r\n    internal view returns (uint256)\r\n  {\r\n    uint256 _bonus = 0;\r\n    uint256 _cap;\r\n    if (_stageIndex == 1) {\r\n      _bonus = round1Bonus;\r\n      _cap = round1Cap.sub(round1Sold);\r\n    } else if (_stageIndex == 2) {\r\n      _cap = round2Cap.sub(round1Sold);\r\n    } else if (_stageIndex == 3) {\r\n      _bonus = round2Bonus;\r\n      _cap = round1Cap.sub(round1Sold).add(round2Cap).sub(round2Sold);\r\n    } else if (_stageIndex == 4) {\r\n      _cap = round1Cap.sub(round1Sold).add(round2Cap).sub(round2Sold);\r\n    } else if (_stageIndex == 5) {\r\n      _bonus = round3Bonus;\r\n      _cap = round1Cap.sub(round1Sold).add(round2Cap).sub(round2Sold).add(round3Cap).sub(round3Sold);\r\n    }  else if (_stageIndex == 6) {\r\n      _cap = round1Cap.sub(round1Sold).add(round2Cap).sub(round2Sold).add(round3Cap).sub(round3Sold);\r\n    } else {\r\n      _cap = round1Cap.sub(round1Sold).add(round2Cap).sub(round2Sold).add(round3Cap).sub(round3Sold).add(round4Cap).sub(round4Sold);\r\n    }\r\n\r\n    uint256 _tokenAmount = _weiAmount.mul(rate);\r\n    if (_bonus > 0) {\r\n      uint256 _bonusTokens = _tokenAmount.mul(_bonus).div(100);\r\n      _tokenAmount = _tokenAmount.add(_bonusTokens);\r\n    }\r\n    if (_stageIndex < 8) require(_tokenAmount <= _cap);\r\n    return _tokenAmount;\r\n  }\r\n\r\n  function refund () public returns (bool) {\r\n    require(now > round4EndTime);\r\n    require(weiRaised < softCap);\r\n    require(contributions[msg.sender] > 0);\r\n    uint256 refundAmount = contributions[msg.sender];\r\n    contributions[msg.sender] = 0;\r\n    weiRaised = weiRaised.sub(refundAmount);\r\n    msg.sender.transfer(refundAmount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(address(this).balance);\r\n  }\r\n\r\n  function transferSoldTokens(address _beneficiary, uint256 _tokenAmount) public onlyOwner returns (bool) {\r\n    uint8 stageIndex = _getStageIndex();\r\n    require(stageIndex > 0);\r\n    require(stageIndex <= 8);\r\n\r\n    if (stageIndex == 1 || stageIndex == 2) {\r\n      round1Sold = round1Sold.add(_tokenAmount);\r\n      require(round1Sold <= round1Cap);\r\n    } else if (stageIndex == 3 || stageIndex == 4) {\r\n      round2Sold = round2Sold.add(_tokenAmount);\r\n      require(round2Sold <= round2Cap);\r\n    } else if (stageIndex == 5 || stageIndex == 6) {\r\n      round3Sold = round3Sold.add(_tokenAmount);\r\n      require(round3Sold <= round3Cap);\r\n    } else if (stageIndex == 7) {\r\n      round4Sold = round4Sold.add(_tokenAmount);\r\n      require(round4Sold <= round4Cap);\r\n    }\r\n    emit ExternalTokenPurchase(\r\n      _beneficiary,\r\n      _beneficiary,\r\n      _tokenAmount\r\n    );\r\n\r\n    require(token.transfer(_beneficiary, _tokenAmount));\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"round1Bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"transferSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round1Sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round2Sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round4Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round2Bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round3Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round4Sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round3Bonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStageName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round3Sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round2Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round1Cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_newOwner\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExternalTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000075300000000000000000000000000d9cd71b8749f9b7429f3a975e2d56735607cec9e0000000000000000000000004385083e5c812dc3ca04f2ec0b9cbd3a734e347d000000000000000000000000bac7a1798350cdf2dbfe0c210c2c9861223f4b31","Library":"","SwarmSource":"bzzr://899ebceec24a6593ab51f93e15f350426eb90ce76918f0f1dc19815397bdc8c9"}]}