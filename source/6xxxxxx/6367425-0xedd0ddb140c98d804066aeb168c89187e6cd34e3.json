{"status":"1","message":"OK","result":[{"SourceCode":"contract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract StandardToken is Token {\r\n    uint256 perventValue = 1;\r\n    using SafeMath for uint256;\r\n    address burnaddr =0x0000000000000000000000000000000000000000;\r\n    address tokenStore1=0xeb62d677cDFCCe9607744A1B7F63F54310b7AE4d;\r\n    \r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n    \r\n    \r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n\r\n \r\n            if (balances[msg.sender] >= _value && _value > 0) {\r\n                uint256 tax =0;\r\n                tax=_value.div(100).mul(perventValue);\r\n                balances[msg.sender] -= _value;\r\n                _value=_value.sub(tax);\r\n                tax=tax.div(2);\r\n                totalSupply=totalSupply.sub(tax);\r\n                balances[burnaddr]+=tax;\r\n                balances[tokenStore1]+=tax;\r\n                balances[_to] += _value;\r\n                emit Transfer(msg.sender, _to, _value);\r\n                emit Transfer(msg.sender, burnaddr, tax);\r\n                emit Transfer(msg.sender, tokenStore1, tax);\r\n            return true;\r\n        } \r\n        else\r\n         { return false; }\r\n\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n\r\n\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            uint256 tax =0;\r\n            tax=_value.div(100).mul(perventValue);\r\n            \r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            _value=_value.sub(tax);\r\n            balances[_to] += _value;\r\n            tax=tax.div(2);\r\n            totalSupply=totalSupply.sub(tax);\r\n            balances[burnaddr]+=tax;\r\n            balances[tokenStore1]+=tax;\r\n            emit Transfer(_from, _to, _value);\r\n            emit Transfer(msg.sender, burnaddr, tax);\r\n            emit Transfer(msg.sender, tokenStore1, tax);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\n\r\ncontract erc20KGS is StandardToken {\r\n    using SafeMath for uint256;\r\n    \r\n      string public name;                   //\r\n    uint8 public decimals;                //\r\n    string public symbol;                 //\r\n    string public version = 'x0.01';       //\r\n    address confAddr1=0xF5bEC430576fF1b82e44DDB5a1C93F6F9d0884f3;\r\n    address confAddr2=0x876EabF441B2EE5B5b0554Fd502a8E0600950cFa;\r\n    address confAddr3;\r\n    address confAddr4=0x5Dcd3d3FA68E01FcD4B4962E1f214630D9a3755C;\r\n    address admin1=0x51587A275254aE80980CB282EeD1e4fb668bF054;\r\n    address admin2=0x534Bd9594A2f038eDe268f7554722d1daec0615F;\r\n    address admin3=0xeb62d677cDFCCe9607744A1B7F63F54310b7AE4d;\r\n    address tokenStore1=0xb97510A71C5Dc248f1B81861C23ea3F8771EDC10;\r\n    address tokenStore2=0x745b29Bd95Bb84F5CaCD4960775B02bC02E62e76;\r\n    address tokenStore3=0x1Cf597cc7004680E457A9B8D3c789a28632c1997;\r\n    address tokenStore4=0x29333C31d8cbe63Dc5567609d8D81Ccc328735Ae;\r\n    address tokenStore5=0x4d9a53B549C0c59B72C358E6C02183a2610Cf6D6;\r\n    address tokenStore6=0xD46915F3f2E54FAeA6A7fe91f052Bc16189B0862;\r\n    address storeETH =0x678A7C6988e7fcdA9201F1c2f24b27C90Ed67Ec4;\r\n    address burnaddr =0x0000000000000000000000000000000000000000;  \r\n    address payAddr;\r\n    uint public Round1Time = 1539129600;\r\n    uint public Round2Time = 1540944000;\r\n    uint public Round3Time = 1541894400;\r\n    uint public Round4Time = 1542758400;\r\n    uint public SaleStartTime = 1543622400;\r\n    uint public SaleFinishTime = 1546300800;\r\n    uint public BonusRound1 = 75;\r\n    uint public BonusRound2 = 65;\r\n    uint public BonusRound3 = 55;\r\n    uint public BonusRound4 = 45;\r\n    uint public BonusSale = 0; \r\n    uint public MinAmount1Round =49988;\r\n    uint public MinAmount2Round =39988;\r\n    uint public MinAmount3Round =29988;\r\n    uint public MinAmount4Round =19988;\r\n    uint public MinAmountSale =99;\r\n    uint256 public ExchangeRate = 48543689320388;\r\n    uint256 public PriceOfToken = 10;\r\n    \r\n    function () external payable {\r\n        uint256 amoutD =0;\r\n        uint256 amoutT = 0;\r\n        amoutD=amoutD.add(msg.value.div(ExchangeRate));\r\n        if(now < Round2Time  && now > Round1Time){\r\n            payAddr=tokenStore1;\r\n            amoutT=amoutT.add(amoutD.mul(PriceOfToken));\r\n            if (amoutD>MinAmount1Round){\r\n                amoutT=amoutT.add(amoutT.mul(BonusRound1).div(100));\r\n                amoutT=amoutT.mul(10000000000000000);\r\n            }\r\n            else{\r\n                amoutT=amoutT.mul(10000000000000000);\r\n            }\r\n        }else\r\n        if(now < Round3Time  && now > Round2Time){\r\n            payAddr=tokenStore2;\r\n            amoutT=amoutT.add(amoutD.mul(PriceOfToken));\r\n            if(amoutD>MinAmount2Round){\r\n                amoutT=amoutT.add(amoutT.mul(BonusRound2).div(100));\r\n                amoutT=amoutT.mul(10000000000000000);\r\n            } else{\r\n                amoutT=amoutT.mul(10000000000000000);\r\n            }\r\n        }else\r\n        if(now < Round4Time  && now > Round3Time){\r\n            payAddr=tokenStore3;\r\n            amoutT=amoutT.add(amoutD.mul(PriceOfToken));\r\n            if(amoutD>MinAmount3Round){\r\n                amoutT=amoutT.add(amoutT.mul(BonusRound3).div(100));\r\n                amoutT=amoutT.mul(10000000000000000);\r\n            } else{\r\n                amoutT=amoutT.mul(10000000000000000);\r\n            }\r\n        }else\r\n        if(now < SaleStartTime  && now > Round4Time){\r\n            payAddr=tokenStore4;\r\n            amoutT=amoutT.add(amoutD.mul(PriceOfToken));\r\n            if(amoutD>MinAmount4Round){\r\n                amoutT=amoutT.add(amoutT.mul(BonusRound4).div(100));\r\n                amoutT=amoutT.mul(10000000000000000);\r\n            }  else{\r\n                amoutT=amoutT.mul(10000000000000000);\r\n            }\r\n        }else\r\n        if(now < SaleFinishTime  && now > SaleStartTime){\r\n            payAddr=tokenStore4;\r\n            amoutT=amoutT.add(amoutD.mul(PriceOfToken));\r\n            if(amoutD>MinAmountSale){\r\n                amoutT=amoutT.add(amoutT.mul(BonusSale).div(100));\r\n                amoutT=amoutT.mul(10000000000000000);\r\n            }\r\n            else{\r\n                revert();\r\n            }\r\n        }else{\r\n            revert();\r\n        }\r\n        if(balances[payAddr] >= amoutT && amoutT > 0) {\r\n                storeETH.transfer(msg.value);\r\n                if(balances[payAddr] >= amoutT && amoutT > 0) {\r\n                    if(msg.sender==confAddr1 || msg.sender == confAddr2 ){\r\n                        balances[payAddr] -= amoutT;\r\n                        balances[confAddr4] += amoutT;\r\n                        emit Transfer(payAddr, confAddr4,  amoutT);\r\n                    }else{\r\n                    balances[payAddr] -= amoutT;\r\n                    balances[msg.sender] += amoutT;\r\n                    emit Transfer(payAddr, msg.sender,  amoutT);\r\n                    }\r\n                }\r\n           }\r\n            else {\r\n               revert();\r\n            }\r\n    }\r\n\r\n\r\n  \r\n    \r\n    \r\n    \r\n    \r\n\r\n    function erc20KGS(\r\n        uint8 _decimalUnits \r\n        ) {\r\n        totalSupply = 500000000000000000000000000;                        // Update total supply\r\n        name = \"KING SLAYER TOKEN\";                                   // Set the name for display purposes\r\n        decimals = _decimalUnits;                            // Amount of decimals for display purposes\r\n        symbol = \"KGS\";                               // Set the symbol for display purposes\r\n        balances[tokenStore1]= 21000000000000000000000000;\r\n        balances[tokenStore2]= 13200000000000000000000000;\r\n        balances[tokenStore3]= 9300000000000000000000000;\r\n        balances[tokenStore4]= 5800000000000000000000000;\r\n        balances[tokenStore5]= 220000000000000000000000000;\r\n        balances[tokenStore6]= 230700000000000000000000000;\r\n    }\r\n    function set1RoundTime(uint _timeValue){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_timeValue >0){\r\n                 Round1Time = _timeValue;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function set2RoundTime(uint _timeValue){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_timeValue >0){\r\n                 Round2Time = _timeValue;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function set3RoundTime(uint _timeValue){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_timeValue >0){\r\n                 Round3Time = _timeValue;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function set4RoundTime(uint _timeValue){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_timeValue >0){\r\n                 Round4Time = _timeValue;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function setSaleStartTime(uint _timeValue){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_timeValue >0){\r\n                 SaleStartTime = _timeValue;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function setSaleFinishTime(uint _timeValue){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_timeValue >0){\r\n                 SaleFinishTime = _timeValue;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    \r\n    function setBonusRound1(uint _Value){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_Value >=0){\r\n                 BonusRound1 = _Value;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function setBonusRound2(uint _Value){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_Value >=0){\r\n                 BonusRound2 = _Value;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function setBonusRound3(uint _Value){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_Value >=0){\r\n                 BonusRound3 = _Value;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function setBonusRound4(uint _timeValue){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_timeValue >=0){\r\n                 BonusRound4 = _timeValue;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function setBonusSale(uint256 _Value){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_Value >=0){\r\n                 BonusSale = _Value;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function setExchangeRate(uint _Value){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_Value >0){\r\n                 ExchangeRate = _Value;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function setPriceOfToken(uint _Value){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_Value >0){\r\n                 PriceOfToken = _Value;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function burn(uint256 _value, address _addrValue){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n                if(balances[_addrValue] >= _value && _value > 0) {\r\n                    balances[_addrValue] -= _value;\r\n                    balances[burnaddr] += _value;\r\n                    totalSupply-=_value;\r\n                   emit Transfer(_addrValue, burnaddr,  _value);\r\n                }\r\n\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function setMinAmount1Round(uint _Value){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_Value >0){\r\n                 MinAmount1Round = _Value;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function setMinAmount2Round(uint _Value){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_Value >0){\r\n                 MinAmount2Round = _Value;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function setMinAmount3Round(uint _Value){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_Value >0){\r\n                 MinAmount3Round = _Value;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function setMinAmount4Round(uint _Value){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_Value >0){\r\n                 MinAmount4Round = _Value;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n    function setMinAmountSale(uint _Value){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_Value >0){\r\n                 MinAmountSale = _Value;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n     function setPerventValue(uint _Value){\r\n        if(msg.sender==admin1 || msg.sender==admin2 || msg.sender==admin3){\r\n            if(_Value >=0){\r\n                 perventValue = _Value;\r\n             }\r\n        }else{\r\n            revert();\r\n        }     \r\n    }\r\n\r\n\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_Value\",\"type\":\"uint256\"}],\"name\":\"setBonusRound3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Value\",\"type\":\"uint256\"}],\"name\":\"setMinAmount3Round\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MinAmount2Round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BonusRound3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeValue\",\"type\":\"uint256\"}],\"name\":\"set4RoundTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MinAmount4Round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Round2Time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PriceOfToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeValue\",\"type\":\"uint256\"}],\"name\":\"setSaleStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeValue\",\"type\":\"uint256\"}],\"name\":\"set1RoundTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BonusRound2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BonusSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MinAmountSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Value\",\"type\":\"uint256\"}],\"name\":\"setPerventValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Value\",\"type\":\"uint256\"}],\"name\":\"setBonusRound1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MinAmount1Round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Round1Time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SaleStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Value\",\"type\":\"uint256\"}],\"name\":\"setMinAmount2Round\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Round3Time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeValue\",\"type\":\"uint256\"}],\"name\":\"setSaleFinishTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Value\",\"type\":\"uint256\"}],\"name\":\"setPriceOfToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Value\",\"type\":\"uint256\"}],\"name\":\"setMinAmount4Round\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Round4Time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BonusRound4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Value\",\"type\":\"uint256\"}],\"name\":\"setMinAmountSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Value\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BonusRound1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Value\",\"type\":\"uint256\"}],\"name\":\"setBonusRound2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeValue\",\"type\":\"uint256\"}],\"name\":\"setBonusRound4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeValue\",\"type\":\"uint256\"}],\"name\":\"set3RoundTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeValue\",\"type\":\"uint256\"}],\"name\":\"set2RoundTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SaleFinishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Value\",\"type\":\"uint256\"}],\"name\":\"setMinAmount1Round\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Value\",\"type\":\"uint256\"}],\"name\":\"setBonusSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MinAmount3Round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_addrValue\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_decimalUnits\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"erc20KGS","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000012","Library":"","SwarmSource":"bzzr://66b48634175e44ca1433502e031809e222bd6e9dcb853a1ff24b2d4f6ef7ac85"}]}