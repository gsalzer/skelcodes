{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/interface/IBasicMultiToken.sol\r\n\r\ncontract IBasicMultiToken is ERC20 {\r\n    event Bundle(address indexed who, address indexed beneficiary, uint256 value);\r\n    event Unbundle(address indexed who, address indexed beneficiary, uint256 value);\r\n\r\n    function tokensCount() public view returns(uint256);\r\n    function tokens(uint i) public view returns(ERC20);\r\n    function bundlingEnabled() public view returns(bool);\r\n    \r\n    function bundleFirstTokens(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) public;\r\n    function bundle(address _beneficiary, uint256 _amount) public;\r\n\r\n    function unbundle(address _beneficiary, uint256 _value) public;\r\n    function unbundleSome(address _beneficiary, uint256 _value, ERC20[] _tokens) public;\r\n\r\n    // Owner methods\r\n    function disableBundling() public;\r\n    function enableBundling() public;\r\n\r\n    bytes4 public constant InterfaceId_IBasicMultiToken = 0xd5c368b6;\r\n      /**\r\n       * 0xd5c368b6 ===\r\n       *   bytes4(keccak256('tokensCount()')) ^\r\n       *   bytes4(keccak256('tokens(uint256)')) ^\r\n       *   bytes4(keccak256('bundlingEnabled()')) ^\r\n       *   bytes4(keccak256('bundleFirstTokens(address,uint256,uint256[])')) ^\r\n       *   bytes4(keccak256('bundle(address,uint256)')) ^\r\n       *   bytes4(keccak256('unbundle(address,uint256)')) ^\r\n       *   bytes4(keccak256('unbundleSome(address,uint256,address[])')) ^\r\n       *   bytes4(keccak256('disableBundling()')) ^\r\n       *   bytes4(keccak256('enableBundling()'))\r\n       */\r\n}\r\n\r\n// File: contracts/interface/IMultiToken.sol\r\n\r\ncontract IMultiToken is IBasicMultiToken {\r\n    event Update();\r\n    event Change(address indexed _fromToken, address indexed _toToken, address indexed _changer, uint256 _amount, uint256 _return);\r\n\r\n    function weights(address _token) public view returns(uint256);\r\n    function changesEnabled() public view returns(bool);\r\n    \r\n    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256 returnAmount);\r\n    function change(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256 returnAmount);\r\n\r\n    // Owner methods\r\n    function disableChanges() public;\r\n\r\n    bytes4 public constant InterfaceId_IMultiToken = 0x81624e24;\r\n      /**\r\n       * 0x81624e24 ===\r\n       *   InterfaceId_IBasicMultiToken(0xd5c368b6) ^\r\n       *   bytes4(keccak256('weights(address)')) ^\r\n       *   bytes4(keccak256('changesEnabled()')) ^\r\n       *   bytes4(keccak256('getReturn(address,address,uint256)')) ^\r\n       *   bytes4(keccak256('change(address,address,uint256,uint256)')) ^\r\n       *   bytes4(keccak256('disableChanges()'))\r\n       */\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/ext/CheckedERC20.sol\r\n\r\nlibrary CheckedERC20 {\r\n    using SafeMath for uint;\r\n\r\n    function isContract(address addr) internal view returns(bool result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            result := gt(extcodesize(addr), 0)\r\n        }\r\n    }\r\n\r\n    function handleReturnBool() internal pure returns(bool result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            switch returndatasize()\r\n            case 0 { // not a std erc20\r\n                result := 1\r\n            }\r\n            case 32 { // std erc20\r\n                returndatacopy(0, 0, 32)\r\n                result := mload(0)\r\n            }\r\n            default { // anything else, should revert for safety\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    function handleReturnBytes32() internal pure returns(bytes32 result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            switch eq(returndatasize(), 32) // not a std erc20\r\n            case 1 {\r\n                returndatacopy(0, 0, 32)\r\n                result := mload(0)\r\n            }\r\n\r\n            switch gt(returndatasize(), 32) // std erc20\r\n            case 1 {\r\n                returndatacopy(0, 64, 32)\r\n                result := mload(0)\r\n            }\r\n\r\n            switch lt(returndatasize(), 32) // anything else, should revert for safety\r\n            case 1 {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    function asmTransfer(address token, address to, uint256 value) internal returns(bool) {\r\n        require(isContract(token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(token.call(bytes4(keccak256(\"transfer(address,uint256)\")), to, value));\r\n        return handleReturnBool();\r\n    }\r\n\r\n    function asmTransferFrom(address token, address from, address to, uint256 value) internal returns(bool) {\r\n        require(isContract(token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(token.call(bytes4(keccak256(\"transferFrom(address,address,uint256)\")), from, to, value));\r\n        return handleReturnBool();\r\n    }\r\n\r\n    function asmApprove(address token, address spender, uint256 value) internal returns(bool) {\r\n        require(isContract(token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(token.call(bytes4(keccak256(\"approve(address,uint256)\")), spender, value));\r\n        return handleReturnBool();\r\n    }\r\n\r\n    //\r\n\r\n    function checkedTransfer(ERC20 token, address to, uint256 value) internal {\r\n        if (value > 0) {\r\n            uint256 balance = token.balanceOf(this);\r\n            asmTransfer(token, to, value);\r\n            require(token.balanceOf(this) == balance.sub(value), \"checkedTransfer: Final balance didn't match\");\r\n        }\r\n    }\r\n\r\n    function checkedTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        if (value > 0) {\r\n            uint256 toBalance = token.balanceOf(to);\r\n            asmTransferFrom(token, from, to, value);\r\n            require(token.balanceOf(to) == toBalance.add(value), \"checkedTransfer: Final balance didn't match\");\r\n        }\r\n    }\r\n\r\n    //\r\n\r\n    function asmName(address token) internal view returns(bytes32) {\r\n        require(isContract(token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(token.call(bytes4(keccak256(\"name()\"))));\r\n        return handleReturnBytes32();\r\n    }\r\n\r\n    function asmSymbol(address token) internal view returns(bytes32) {\r\n        require(isContract(token));\r\n        // solium-disable-next-line security/no-low-level-calls\r\n        require(token.call(bytes4(keccak256(\"symbol()\"))));\r\n        return handleReturnBytes32();\r\n    }\r\n}\r\n\r\n// File: contracts/ext/ExternalCall.sol\r\n\r\nlibrary ExternalCall {\r\n    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\r\n    // call has been separated into its own function in order to take advantage\r\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\r\n    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\r\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n                destination,\r\n                value,\r\n                add(d, dataOffset),\r\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\r\n                x,\r\n                0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/network/MultiChanger.sol\r\n\r\ncontract IEtherToken is ERC20 {\r\n    function deposit() public payable;\r\n    function withdraw(uint256 amount) public;\r\n}\r\n\r\n\r\ncontract MultiChanger {\r\n    using SafeMath for uint256;\r\n    using CheckedERC20 for ERC20;\r\n    using ExternalCall for address;\r\n\r\n    function change(bytes callDatas, uint[] starts) public payable { // starts should include 0 and callDatas.length\r\n        for (uint i = 0; i < starts.length - 1; i++) {\r\n            require(address(this).externalCall(0, callDatas, starts[i], starts[i + 1] - starts[i]));\r\n        }\r\n    }\r\n\r\n    // Ether\r\n\r\n    function sendEthValue(address target, uint256 value) external {\r\n        // solium-disable-next-line security/no-call-value\r\n        require(target.call.value(value)());\r\n    }\r\n\r\n    function sendEthProportion(address target, uint256 mul, uint256 div) external {\r\n        uint256 value = address(this).balance.mul(mul).div(div);\r\n        // solium-disable-next-line security/no-call-value\r\n        require(target.call.value(value)());\r\n    }\r\n\r\n    // Ether token\r\n\r\n    function depositEtherTokenAmount(IEtherToken etherToken, uint256 amount) external {\r\n        etherToken.deposit.value(amount)();\r\n    }\r\n\r\n    function depositEtherTokenProportion(IEtherToken etherToken, uint256 mul, uint256 div) external {\r\n        uint256 amount = address(this).balance.mul(mul).div(div);\r\n        etherToken.deposit.value(amount)();\r\n    }\r\n\r\n    function withdrawEtherTokenAmount(IEtherToken etherToken, uint256 amount) external {\r\n        etherToken.withdraw(amount);\r\n    }\r\n\r\n    function withdrawEtherTokenProportion(IEtherToken etherToken, uint256 mul, uint256 div) external {\r\n        uint256 amount = etherToken.balanceOf(this).mul(mul).div(div);\r\n        etherToken.withdraw(amount);\r\n    }\r\n\r\n    // Token\r\n\r\n    function transferTokenAmount(address target, ERC20 fromToken, uint256 amount) external {\r\n        require(fromToken.asmTransfer(target, amount));\r\n    }\r\n\r\n    function transferTokenProportion(address target, ERC20 fromToken, uint256 mul, uint256 div) external {\r\n        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);\r\n        require(fromToken.asmTransfer(target, amount));\r\n    }\r\n\r\n    function transferFromTokenAmount(ERC20 fromToken, uint256 amount) external {\r\n        require(fromToken.asmTransferFrom(tx.origin, this, amount));\r\n    }\r\n\r\n    function transferFromTokenProportion(ERC20 fromToken, uint256 mul, uint256 div) external {\r\n        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);\r\n        require(fromToken.asmTransferFrom(tx.origin, this, amount));\r\n    }\r\n\r\n    // MultiToken\r\n\r\n    function multitokenChangeAmount(IMultiToken mtkn, ERC20 fromToken, ERC20 toToken, uint256 minReturn, uint256 amount) external {\r\n        if (fromToken.allowance(this, mtkn) == 0) {\r\n            fromToken.asmApprove(mtkn, uint256(-1));\r\n        }\r\n        mtkn.change(fromToken, toToken, amount, minReturn);\r\n    }\r\n\r\n    function multitokenChangeProportion(IMultiToken mtkn, ERC20 fromToken, ERC20 toToken, uint256 minReturn, uint256 mul, uint256 div) external {\r\n        uint256 amount = fromToken.balanceOf(this).mul(mul).div(div);\r\n        this.multitokenChangeAmount(mtkn, fromToken, toToken, minReturn, amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"fromToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mtkn\",\"type\":\"address\"},{\"name\":\"fromToken\",\"type\":\"address\"},{\"name\":\"toToken\",\"type\":\"address\"},{\"name\":\"minReturn\",\"type\":\"uint256\"},{\"name\":\"mul\",\"type\":\"uint256\"},{\"name\":\"div\",\"type\":\"uint256\"}],\"name\":\"multitokenChangeProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mul\",\"type\":\"uint256\"},{\"name\":\"div\",\"type\":\"uint256\"}],\"name\":\"sendEthProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mtkn\",\"type\":\"address\"},{\"name\":\"fromToken\",\"type\":\"address\"},{\"name\":\"toToken\",\"type\":\"address\"},{\"name\":\"minReturn\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"multitokenChangeAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherToken\",\"type\":\"address\"},{\"name\":\"mul\",\"type\":\"uint256\"},{\"name\":\"div\",\"type\":\"uint256\"}],\"name\":\"withdrawEtherTokenProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositEtherTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"fromToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"sendEthValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromToken\",\"type\":\"address\"},{\"name\":\"mul\",\"type\":\"uint256\"},{\"name\":\"div\",\"type\":\"uint256\"}],\"name\":\"transferFromTokenProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEtherTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"callDatas\",\"type\":\"bytes\"},{\"name\":\"starts\",\"type\":\"uint256[]\"}],\"name\":\"change\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherToken\",\"type\":\"address\"},{\"name\":\"mul\",\"type\":\"uint256\"},{\"name\":\"div\",\"type\":\"uint256\"}],\"name\":\"depositEtherTokenProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"fromToken\",\"type\":\"address\"},{\"name\":\"mul\",\"type\":\"uint256\"},{\"name\":\"div\",\"type\":\"uint256\"}],\"name\":\"transferTokenProportion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MultiChanger","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://36c30115d637805e71d3ea1d03f364a19aae1d402f2fb2aefa96729b531e18cd"}]}