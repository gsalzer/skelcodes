{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n* @title - Tavern's Power Algorithm\r\n* Power contract implements the algorithm of Tavern equity attribute\r\n*\r\n* ██████╗   ██████╗  ██╗    ██╗ ███████╗ ██████╗  ██╗\r\n* ██╔══██╗ ██╔═══██╗ ██║    ██║ ██╔════╝ ██╔══██╗ ██║\r\n* ██████╔╝ ██║   ██║ ██║ █╗ ██║ █████╗   ██████╔╝ ██║\r\n* ██╔═══╝  ██║   ██║ ██║███╗██║ ██╔══╝   ██╔══██╗ ╚═╝\r\n* ██║      ╚██████╔╝ ╚███╔███╔╝ ███████╗ ██║  ██║ ██╗\r\n* ╚═╝       ╚═════╝   ╚══╝╚══╝  ╚══════╝ ╚═╝  ╚═╝ ╚═╝\r\n*\r\n* ---\r\n* POWERED BY\r\n* ╦   ╔═╗ ╦═╗ ╔╦╗ ╦   ╔═╗ ╔═╗ ╔═╗      ╔╦╗ ╔═╗ ╔═╗ ╔╦╗\r\n* ║   ║ ║ ╠╦╝  ║║ ║   ║╣  ╚═╗ ╚═╗       ║  ║╣  ╠═╣ ║║║\r\n* ╩═╝ ╚═╝ ╩╚═ ═╩╝ ╩═╝ ╚═╝ ╚═╝ ╚═╝       ╩  ╚═╝ ╩ ╩ ╩ ╩\r\n* game at https://lordless.io\r\n* code at https://github.com/lordlessio\r\n*/\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/access/rbac/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n * See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n  {\r\n    require(has(_role, _addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _role.bearer[_addr];\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/access/rbac/RBAC.sol\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * Supports unlimited numbers of roles and addresses.\r\n * See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n * for you to write your own implementation of this interface using Enums or similar.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string _role)\r\n    public\r\n    view\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string _role)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function addRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function removeRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: node_modules/zeppelin-solidity/contracts/ownership/Superuser.sol\r\n\r\n/**\r\n * @title Superuser\r\n * @dev The Superuser contract defines a single superuser who can transfer the ownership\r\n * of a contract to a new address, even if he is not the owner.\r\n * A superuser can transfer his role to a new address.\r\n */\r\ncontract Superuser is Ownable, RBAC {\r\n  string public constant ROLE_SUPERUSER = \"superuser\";\r\n\r\n  constructor () public {\r\n    addRole(msg.sender, ROLE_SUPERUSER);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account that's not a superuser.\r\n   */\r\n  modifier onlySuperuser() {\r\n    checkRole(msg.sender, ROLE_SUPERUSER);\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwnerOrSuperuser() {\r\n    require(msg.sender == owner || isSuperuser(msg.sender));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address has superuser role\r\n   */\r\n  function isSuperuser(address _addr)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return hasRole(_addr, ROLE_SUPERUSER);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current superuser to transfer his role to a newSuperuser.\r\n   * @param _newSuperuser The address to transfer ownership to.\r\n   */\r\n  function transferSuperuser(address _newSuperuser) public onlySuperuser {\r\n    require(_newSuperuser != address(0));\r\n    removeRole(msg.sender, ROLE_SUPERUSER);\r\n    addRole(_newSuperuser, ROLE_SUPERUSER);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current superuser or owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwnerOrSuperuser {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) \r\n      internal \r\n      pure \r\n      returns (uint256 c) \r\n  {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    require(c / a == b, \"SafeMath mul failed\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b)\r\n      internal\r\n      pure\r\n      returns (uint256) \r\n  {\r\n    require(b <= a, \"SafeMath sub failed\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b)\r\n      internal\r\n      pure\r\n      returns (uint256 c) \r\n  {\r\n    c = a + b;\r\n    require(c >= a, \"SafeMath add failed\");\r\n    return c;\r\n  }\r\n  \r\n  /**\r\n    * @dev gives square root of given x.\r\n    */\r\n  function sqrt(uint256 x)\r\n      internal\r\n      pure\r\n      returns (uint256 y) \r\n  {\r\n    uint256 z = ((add(x,1)) / 2);\r\n    y = x;\r\n    while (z < y) \r\n    {\r\n      y = z;\r\n      z = ((add((x / z),z)) / 2);\r\n    }\r\n  }\r\n  \r\n  /**\r\n    * @dev gives square. batchplies x by x\r\n    */\r\n  function sq(uint256 x)\r\n      internal\r\n      pure\r\n      returns (uint256)\r\n  {\r\n    return (mul(x,x));\r\n  }\r\n  \r\n  /**\r\n    * @dev x to the power of y \r\n    */\r\n  function pwr(uint256 x, uint256 y)\r\n      internal \r\n      pure \r\n      returns (uint256)\r\n  {\r\n    if (x==0)\r\n        return (0);\r\n    else if (y==0)\r\n        return (1);\r\n    else \r\n    {\r\n      uint256 z = x;\r\n      for (uint256 i=1; i < y; i++)\r\n        z = mul(z,x);\r\n      return (z);\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/tavern/IPower.sol\r\n\r\ninterface IPower {\r\n  function setTavernContract(address tavern) external;\r\n  function influenceByToken(uint256 tokenId) external view returns(uint256);\r\n  function levelByToken(uint256 tokenId) external view returns(uint256);\r\n  function weightsApportion(uint256 userLevel, uint256 lordLevel) external view returns(uint256);\r\n\r\n   /* Events */\r\n\r\n  event SetTavernContract (\r\n    address tavern\r\n  );\r\n}\r\n\r\n// File: contracts/tavern/ITavern.sol\r\n\r\n/**\r\n * @title Tavern Interface\r\n */\r\n\r\ninterface ITavern {\r\n\r\n  function setPowerContract(address _powerContract) external;\r\n  function influenceByToken(uint256 tokenId) external view returns(uint256);\r\n  function levelByToken(uint256 tokenId) external view returns(uint256);\r\n  function weightsApportion(uint256 ulevel1, uint256 ulevel2) external view returns(uint256);\r\n\r\n  function tavern(uint256 tokenId) external view returns (uint256, int, int, uint8, uint256);\r\n  function isBuilt(uint256 tokenId) external view returns (bool);\r\n\r\n  function build(\r\n    uint256 tokenId,\r\n    int longitude,\r\n    int latitude,\r\n    uint8 popularity\r\n    ) external;\r\n\r\n  function batchBuild(\r\n    uint256[] tokenIds,\r\n    int[] longitudes,\r\n    int[] latitudes,\r\n    uint8[] popularitys\r\n    ) external;\r\n\r\n  function activenessUpgrade(uint256 tokenId, uint256 deltaActiveness) external;\r\n  function batchActivenessUpgrade(uint256[] tokenIds, uint256[] deltaActiveness) external;\r\n\r\n  function popularitySetting(uint256 tokenId, uint8 popularity) external;\r\n  function batchPopularitySetting(uint256[] tokenIds, uint8[] popularitys) external;\r\n  \r\n  /* Events */\r\n\r\n  event Build (\r\n    uint256 time,\r\n    uint256 indexed tokenId,\r\n    int longitude,\r\n    int latitude,\r\n    uint8 popularity\r\n  );\r\n\r\n  event ActivenessUpgrade (\r\n    uint256 indexed tokenId,\r\n    uint256 oActiveness,\r\n    uint256 newActiveness\r\n  );\r\n\r\n  event PopularitySetting (\r\n    uint256 indexed tokenId,\r\n    uint256 oPopularity,\r\n    uint256 newPopularity\r\n  );\r\n}\r\n\r\n// File: contracts/tavern/Power.sol\r\n\r\ncontract Power is Superuser, IPower{\r\n  using SafeMath for *;\r\n  ITavern public tavernContract;\r\n  \r\n  /**\r\n   * @dev set the Tavern contract address\r\n   * @return tavern Tavern contract address\r\n   */\r\n  function setTavernContract(address tavern) onlySuperuser external {\r\n    tavernContract = ITavern(tavern);\r\n    emit SetTavernContract(tavern);\r\n  }\r\n\r\n  /**\r\n   * @dev get influence by token\r\n   * @param tokenId tokenId\r\n   * @return tavern Tavern contract address\r\n   * influence is\r\n   */\r\n  function influenceByToken(uint256 tokenId) external view returns(uint256){\r\n\r\n\r\n    uint8 popularity;\r\n    uint256 activeness;\r\n    ( , , , popularity, activeness) = tavernContract.tavern(tokenId);\r\n    return _influenceAlgorithm(popularity, activeness);\r\n  }\r\n\r\n  /**\r\n   * @dev get Tavern's level by tokenId\r\n   * @param tokenId tokenId\r\n   * @return uint256 Tavern's level\r\n   */\r\n  function levelByToken(uint256 tokenId) external view returns(uint256){\r\n\r\n    uint256 activeness;\r\n    ( , , , , activeness) = tavernContract.tavern(tokenId);\r\n    return _activeness2level(activeness);\r\n  }\r\n\r\n  function _influenceAlgorithm(uint8 _popularity, uint256 _activeness) internal pure returns (uint256) {\r\n    uint256 popularity = uint256(_popularity);\r\n    return popularity.mul(_activeness).add(popularity);\r\n  }\r\n  \r\n  function _activeness2level(uint256 _activeness) internal pure returns (uint256) {\r\n    return (_activeness.mul(uint(108).sq())/10).sqrt()/108 + 1;\r\n  }\r\n\r\n  uint public constant weightsApportionDecimals = 4;\r\n  /**\r\n  * @dev get Tavern's weightsApportion \r\n  * @param userLevel userLevel\r\n  * @param lordLevel lordLevel\r\n  * @return uint256 Tavern's weightsApportion\r\n  * The candy that the user rewards when completing the candy mission will be assigned to the user and the lord. \r\n  * The distribution ratio is determined by weightsApportion\r\n  */\r\n  function weightsApportion(uint256 userLevel, uint256 lordLevel) external view returns(uint256) {\r\n    return 2000 + 6000 * userLevel / (userLevel + lordLevel);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tavern\",\"type\":\"address\"}],\"name\":\"setTavernContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"levelByToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSuperuser\",\"type\":\"address\"}],\"name\":\"transferSuperuser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"influenceByToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userLevel\",\"type\":\"uint256\"},{\"name\":\"lordLevel\",\"type\":\"uint256\"}],\"name\":\"weightsApportion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isSuperuser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tavernContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weightsApportionDecimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_SUPERUSER\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tavern\",\"type\":\"address\"}],\"name\":\"SetTavernContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Power","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1d7c48bff17e6ed0d6d5f628cdff0d7447f49aef40f9635c83a58660a7347975"}]}