{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// File: contracts/library/SafeMath.sol\r\n\r\n/**\r\n * @title Safe Math\r\n *\r\n * @dev Library for safe mathematical operations.\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function minus(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n    }\r\n\r\n    function plus(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20Token.sol\r\n\r\n/**\r\n * @dev The standard ERC20 Token contract base.\r\n */\r\ncontract ERC20Token {\r\n    uint256 public totalSupply;  /* shorthand for public function and a property */\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n// File: contracts/component/TokenSafe.sol\r\n\r\n/**\r\n * @title TokenSafe\r\n *\r\n * @dev Abstract contract that serves as a base for the token safes. It is a multi-group token safe, where each group\r\n *      has it's own release time and multiple accounts with locked tokens.\r\n */\r\ncontract TokenSafe {\r\n    using SafeMath for uint;\r\n\r\n    // The ERC20 token contract.\r\n    ERC20Token token;\r\n\r\n    struct Group {\r\n        // The release date for the locked tokens\r\n        // Note: Unix timestamp fits in uint32, however block.timestamp is uint256\r\n        uint256 releaseTimestamp;\r\n        // The total remaining tokens in the group.\r\n        uint256 remaining;\r\n        // The individual account token balances in the group.\r\n        mapping (address => uint) balances;\r\n    }\r\n\r\n    // The groups of locked tokens\r\n    mapping (uint8 => Group) public groups;\r\n\r\n    /**\r\n     * @dev The constructor.\r\n     *\r\n     * @param _token The address of the Fabric Token (fundraiser) contract.\r\n     */\r\n    constructor(address _token) public {\r\n        token = ERC20Token(_token);\r\n    }\r\n\r\n    /**\r\n     * @dev The function initializes a group with a release date.\r\n     *\r\n     * @param _id Group identifying number.\r\n     * @param _releaseTimestamp Unix timestamp of the time after which the tokens can be released\r\n     */\r\n    function init(uint8 _id, uint _releaseTimestamp) internal {\r\n        require(_releaseTimestamp > 0);\r\n        \r\n        Group storage group = groups[_id];\r\n        group.releaseTimestamp = _releaseTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Add new account with locked token balance to the specified group id.\r\n     *\r\n     * @param _id Group identifying number.\r\n     * @param _account The address of the account to be added.\r\n     * @param _balance The number of tokens to be locked.\r\n     */\r\n    function add(uint8 _id, address _account, uint _balance) internal {\r\n        Group storage group = groups[_id];\r\n        group.balances[_account] = group.balances[_account].plus(_balance);\r\n        group.remaining = group.remaining.plus(_balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows an account to be released if it meets the time constraints of the group.\r\n     *\r\n     * @param _id Group identifying number.\r\n     * @param _account The address of the account to be released.\r\n     */\r\n    function release(uint8 _id, address _account) public {\r\n        Group storage group = groups[_id];\r\n        require(now >= group.releaseTimestamp);\r\n        \r\n        uint tokens = group.balances[_account];\r\n        require(tokens > 0);\r\n        \r\n        group.balances[_account] = 0;\r\n        group.remaining = group.remaining.minus(tokens);\r\n        \r\n        if (!token.transfer(_account, tokens)) {\r\n            revert();\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/trait/HasOwner.sol\r\n\r\n/**\r\n * @title HasOwner\r\n *\r\n * @dev Allows for exclusive access to certain functionality.\r\n */\r\ncontract HasOwner {\r\n    // The current owner.\r\n    address public owner;\r\n\r\n    // Conditionally the new owner.\r\n    address public newOwner;\r\n\r\n    /**\r\n     * @dev The constructor.\r\n     *\r\n     * @param _owner The address of the owner.\r\n     */\r\n    constructor(address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    /** \r\n     * @dev Access control modifier that allows only the current owner to call the function.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The event is fired when the current owner is changed.\r\n     *\r\n     * @param _oldOwner The address of the previous owner.\r\n     * @param _newOwner The address of the new owner.\r\n     */\r\n    event OwnershipTransfer(address indexed _oldOwner, address indexed _newOwner);\r\n\r\n    /**\r\n     * @dev Transfering the ownership is a two-step process, as we prepare\r\n     * for the transfer by setting `newOwner` and requiring `newOwner` to accept\r\n     * the transfer. This prevents accidental lock-out if something goes wrong\r\n     * when passing the `newOwner` address.\r\n     *\r\n     * @param _newOwner The address of the proposed new owner.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n \r\n    /**\r\n     * @dev The `newOwner` finishes the ownership transfer process by accepting the\r\n     * ownership.\r\n     */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n\r\n        emit OwnershipTransfer(owner, newOwner);\r\n\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/fundraiser/AbstractFundraiser.sol\r\n\r\ncontract AbstractFundraiser {\r\n    /// The ERC20 token contract.\r\n    ERC20Token public token;\r\n\r\n    /**\r\n     * @dev The event fires every time a new buyer enters the fundraiser.\r\n     *\r\n     * @param _address The address of the buyer.\r\n     * @param _ethers The number of ethers funded.\r\n     * @param _tokens The number of tokens purchased.\r\n     */\r\n    event FundsReceived(address indexed _address, uint _ethers, uint _tokens);\r\n\r\n\r\n    /**\r\n     * @dev The initialization method for the token\r\n     *\r\n     * @param _token The address of the token of the fundraiser\r\n     */\r\n    function initializeFundraiserToken(address _token) internal\r\n    {\r\n        token = ERC20Token(_token);\r\n    }\r\n\r\n    /**\r\n     * @dev The default function which is executed when someone sends funds to this contract address.\r\n     */\r\n    function() public payable {\r\n        receiveFunds(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev this overridable function returns the current conversion rate for the fundraiser\r\n     */\r\n    function getConversionRate() public view returns (uint256);\r\n\r\n    /**\r\n     * @dev checks whether the fundraiser passed `endTime`.\r\n     *\r\n     * @return whether the fundraiser has ended.\r\n     */\r\n    function hasEnded() public view returns (bool);\r\n\r\n    /**\r\n     * @dev Create and sends tokens to `_address` considering amount funded and `conversionRate`.\r\n     *\r\n     * @param _address The address of the receiver of tokens.\r\n     * @param _amount The amount of received funds in ether.\r\n     */\r\n    function receiveFunds(address _address, uint256 _amount) internal;\r\n    \r\n    /**\r\n     * @dev It throws an exception if the transaction does not meet the preconditions.\r\n     */\r\n    function validateTransaction() internal view;\r\n    \r\n    /**\r\n     * @dev this overridable function makes and handles tokens to buyers\r\n     */\r\n    function handleTokens(address _address, uint256 _tokens) internal;\r\n\r\n    /**\r\n     * @dev this overridable function forwards the funds (if necessary) to a vault or directly to the beneficiary\r\n     */\r\n    function handleFunds(address _address, uint256 _ethers) internal;\r\n\r\n}\r\n\r\n// File: contracts/fundraiser/BasicFundraiser.sol\r\n\r\n/**\r\n * @title Basic Fundraiser\r\n *\r\n * @dev An abstract contract that is a base for fundraisers. \r\n * It implements a generic procedure for handling received funds:\r\n * 1. Validates the transaciton preconditions\r\n * 2. Calculates the amount of tokens based on the conversion rate.\r\n * 3. Delegate the handling of the tokens (mint, transfer or conjure)\r\n * 4. Delegate the handling of the funds\r\n * 5. Emit event for received funds\r\n */\r\ncontract BasicFundraiser is HasOwner, AbstractFundraiser {\r\n    using SafeMath for uint256;\r\n\r\n    // The number of decimals for the token.\r\n    uint8 constant DECIMALS = 18;  // Enforced\r\n\r\n    // Decimal factor for multiplication purposes.\r\n    uint256 constant DECIMALS_FACTOR = 10 ** uint256(DECIMALS);\r\n\r\n    /// The start time of the fundraiser - Unix timestamp.\r\n    uint256 public startTime;\r\n\r\n    /// The end time of the fundraiser - Unix timestamp.\r\n    uint256 public endTime;\r\n\r\n    /// The address where funds collected will be sent.\r\n    address public beneficiary;\r\n\r\n    /// The conversion rate with decimals difference adjustment,\r\n    /// When converion rate is lower than 1 (inversed), the function calculateTokens() should use division\r\n    uint256 public conversionRate;\r\n\r\n    /// The total amount of ether raised.\r\n    uint256 public totalRaised;\r\n\r\n    /**\r\n     * @dev The event fires when the number of token conversion rate has changed.\r\n     *\r\n     * @param _conversionRate The new number of tokens per 1 ether.\r\n     */\r\n    event ConversionRateChanged(uint _conversionRate);\r\n\r\n    /**\r\n     * @dev The basic fundraiser initialization method.\r\n     *\r\n     * @param _startTime The start time of the fundraiser - Unix timestamp.\r\n     * @param _endTime The end time of the fundraiser - Unix timestamp.\r\n     * @param _conversionRate The number of tokens create for 1 ETH funded.\r\n     * @param _beneficiary The address which will receive the funds gathered by the fundraiser.\r\n     */\r\n    function initializeBasicFundraiser(\r\n        uint256 _startTime,\r\n        uint256 _endTime,\r\n        uint256 _conversionRate,\r\n        address _beneficiary\r\n    )\r\n        internal\r\n    {\r\n        require(_endTime >= _startTime);\r\n        require(_conversionRate > 0);\r\n        require(_beneficiary != address(0));\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        conversionRate = _conversionRate;\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the new conversion rate\r\n     *\r\n     * @param _conversionRate New conversion rate\r\n     */\r\n    function setConversionRate(uint256 _conversionRate) public onlyOwner {\r\n        require(_conversionRate > 0);\r\n\r\n        conversionRate = _conversionRate;\r\n\r\n        emit ConversionRateChanged(_conversionRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets The beneficiary of the fundraiser.\r\n     *\r\n     * @param _beneficiary The address of the beneficiary.\r\n     */\r\n    function setBeneficiary(address _beneficiary) public onlyOwner {\r\n        require(_beneficiary != address(0));\r\n\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @dev Create and sends tokens to `_address` considering amount funded and `conversionRate`.\r\n     *\r\n     * @param _address The address of the receiver of tokens.\r\n     * @param _amount The amount of received funds in ether.\r\n     */\r\n    function receiveFunds(address _address, uint256 _amount) internal {\r\n        validateTransaction();\r\n\r\n        uint256 tokens = calculateTokens(_amount);\r\n        require(tokens > 0);\r\n\r\n        totalRaised = totalRaised.plus(_amount);\r\n        handleTokens(_address, tokens);\r\n        handleFunds(_address, _amount);\r\n\r\n        emit FundsReceived(_address, msg.value, tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev this overridable function returns the current conversion rate for the fundraiser\r\n     */\r\n    function getConversionRate() public view returns (uint256) {\r\n        return conversionRate;\r\n    }\r\n\r\n    /**\r\n     * @dev this overridable function that calculates the tokens based on the ether amount\r\n     */\r\n    function calculateTokens(uint256 _amount) internal view returns(uint256 tokens) {\r\n        tokens = _amount.mul(getConversionRate());\r\n    }\r\n\r\n    /**\r\n     * @dev It throws an exception if the transaction does not meet the preconditions.\r\n     */\r\n    function validateTransaction() internal view {\r\n        require(msg.value != 0);\r\n        require(now >= startTime && now < endTime);\r\n    }\r\n\r\n    /**\r\n     * @dev checks whether the fundraiser passed `endtime`.\r\n     *\r\n     * @return whether the fundraiser is passed its deadline or not.\r\n     */\r\n    function hasEnded() public view returns (bool) {\r\n        return now >= endTime;\r\n    }\r\n}\r\n\r\n// File: contracts/fundraiser/CappedFundraiser.sol\r\n\r\n/**\r\n * @title Capped Fundraiser\r\n *\r\n * @dev Allows you to set a hard cap on your fundraiser.\r\n */\r\ncontract CappedFundraiser is BasicFundraiser {\r\n    /// The maximum amount of ether allowed for the fundraiser.\r\n    uint256 public hardCap;\r\n\r\n    /**\r\n     * @dev The initialization method.\r\n     *\r\n     * @param _hardCap The maximum amount of ether allowed to be raised.\r\n     */\r\n    function initializeCappedFundraiser(uint256 _hardCap) internal {\r\n        require(_hardCap > 0);\r\n\r\n        hardCap = _hardCap;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds additional check if the hard cap has been reached.\r\n     *\r\n     * @return Whether the token purchase will be allowed.\r\n     */\r\n    function validateTransaction() internal view {\r\n        super.validateTransaction();\r\n        require(totalRaised < hardCap);\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides the method from the default `Fundraiser` contract\r\n     * to additionally check if the `hardCap` is reached.\r\n     *\r\n     * @return Whether or not the fundraiser has ended.\r\n     */\r\n    function hasEnded() public view returns (bool) {\r\n        return (super.hasEnded() || totalRaised >= hardCap);\r\n    }\r\n}\r\n\r\n// File: contracts/fundraiser/GasPriceLimitFundraiser.sol\r\n\r\n/**\r\n * @title GasPriceLimitFundraiser\r\n *\r\n * @dev This fundraiser allows to set gas price limit for the participants in the fundraiser\r\n */\r\ncontract GasPriceLimitFundraiser is HasOwner, BasicFundraiser {\r\n    uint256 public gasPriceLimit;\r\n\r\n    event GasPriceLimitChanged(uint256 gasPriceLimit);\r\n\r\n    /**\r\n     * @dev This function puts the initial gas limit\r\n     */\r\n    function initializeGasPriceLimitFundraiser(uint256 _gasPriceLimit) internal {\r\n        gasPriceLimit = _gasPriceLimit;\r\n    }\r\n\r\n    /**\r\n     * @dev This function allows the owner to change the gas limit any time during the fundraiser\r\n     */\r\n    function changeGasPriceLimit(uint256 _gasPriceLimit) onlyOwner() public {\r\n        gasPriceLimit = _gasPriceLimit;\r\n\r\n        emit GasPriceLimitChanged(_gasPriceLimit);\r\n    }\r\n\r\n    /**\r\n     * @dev The transaction is valid if the gas price limit is lifted-off or the transaction meets the requirement\r\n     */\r\n    function validateTransaction() internal view {\r\n        require(gasPriceLimit == 0 || tx.gasprice <= gasPriceLimit);\r\n\r\n        return super.validateTransaction();\r\n    }\r\n}\r\n\r\n// File: contracts/fundraiser/IndividualCapsFundraiser.sol\r\n\r\n/**\r\n * @title Fundraiser with individual caps\r\n *\r\n * @dev Allows you to set a hard cap on your fundraiser.\r\n */\r\ncontract IndividualCapsFundraiser is BasicFundraiser {\r\n    uint256 public individualMinCap;\r\n    uint256 public individualMaxCap;\r\n    uint256 public individualMaxCapTokens;\r\n\r\n\r\n    event IndividualMinCapChanged(uint256 _individualMinCap);\r\n    event IndividualMaxCapTokensChanged(uint256 _individualMaxCapTokens);\r\n\r\n    /**\r\n     * @dev The initialization method.\r\n     *\r\n     * @param _individualMinCap The minimum amount of ether contribution per address.\r\n     * @param _individualMaxCap The maximum amount of ether contribution per address.\r\n     */\r\n    function initializeIndividualCapsFundraiser(uint256 _individualMinCap, uint256 _individualMaxCap) internal {\r\n        individualMinCap = _individualMinCap;\r\n        individualMaxCap = _individualMaxCap;\r\n        individualMaxCapTokens = _individualMaxCap * conversionRate;\r\n    }\r\n\r\n    function setConversionRate(uint256 _conversionRate) public onlyOwner {\r\n        super.setConversionRate(_conversionRate);\r\n\r\n        if (individualMaxCap == 0) {\r\n            return;\r\n        }\r\n        \r\n        individualMaxCapTokens = individualMaxCap * _conversionRate;\r\n\r\n        emit IndividualMaxCapTokensChanged(individualMaxCapTokens);\r\n    }\r\n\r\n    function setIndividualMinCap(uint256 _individualMinCap) public onlyOwner {\r\n        individualMinCap = _individualMinCap;\r\n\r\n        emit IndividualMinCapChanged(individualMinCap);\r\n    }\r\n\r\n    function setIndividualMaxCap(uint256 _individualMaxCap) public onlyOwner {\r\n        individualMaxCap = _individualMaxCap;\r\n        individualMaxCapTokens = _individualMaxCap * conversionRate;\r\n\r\n        emit IndividualMaxCapTokensChanged(individualMaxCapTokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Extends the transaction validation to check if the value this higher than the minumum cap.\r\n     */\r\n    function validateTransaction() internal view {\r\n        super.validateTransaction();\r\n        require(msg.value >= individualMinCap);\r\n    }\r\n\r\n    /**\r\n     * @dev We validate the new amount doesn't surpass maximum contribution cap\r\n     */\r\n    function handleTokens(address _address, uint256 _tokens) internal {\r\n        require(individualMaxCapTokens == 0 || token.balanceOf(_address).plus(_tokens) <= individualMaxCapTokens);\r\n\r\n        super.handleTokens(_address, _tokens);\r\n    }\r\n}\r\n\r\n// File: contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard Token\r\n *\r\n * @dev The standard abstract implementation of the ERC20 interface.\r\n */\r\ncontract StandardToken is ERC20Token {\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    \r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    \r\n    /**\r\n     * @dev The constructor assigns the token name, symbols and decimals.\r\n     */\r\n    constructor(string _name, string _symbol, uint8 _decimals) internal {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the balance of an address.\r\n     *\r\n     * @param _address The address which's balance will be checked.\r\n     *\r\n     * @return The current balance of the address.\r\n     */\r\n    function balanceOf(address _address) public view returns (uint256 balance) {\r\n        return balances[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Checks the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * @param _owner The address which owns the funds allowed for spending by a third-party.\r\n     * @param _spender The third-party address that is allowed to spend the tokens.\r\n     *\r\n     * @return The number of tokens available to `_spender` to be spent.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Give permission to `_spender` to spend `_value` number of tokens on your behalf.\r\n     * E.g. You place a buy or sell order on an exchange and in that example, the \r\n     * `_spender` address is the address of the contract the exchange created to add your token to their \r\n     * website and you are `msg.sender`.\r\n     *\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     *\r\n     * @return Whether the approval process was successful or not.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `_value` number of tokens to the `_to` address.\r\n     *\r\n     * @param _to The address of the recipient.\r\n     * @param _value The number of tokens to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        executeTransfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows another contract to spend tokens on behalf of the `_from` address and send them to the `_to` address.\r\n     *\r\n     * @param _from The address which approved you to spend tokens on their behalf.\r\n     * @param _to The address where you want to send tokens.\r\n     * @param _value The number of tokens to be sent.\r\n     *\r\n     * @return Whether the transfer was successful or not.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        \r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].minus(_value);\r\n        executeTransfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that this reused by the transfer functions\r\n     */\r\n    function executeTransfer(address _from, address _to, uint256 _value) internal {\r\n        require(_to != address(0));\r\n        require(_value != 0 && _value <= balances[_from]);\r\n        \r\n        balances[_from] = balances[_from].minus(_value);\r\n        balances[_to] = balances[_to].plus(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/token/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable Token\r\n *\r\n * @dev Allows the creation of new tokens.\r\n */\r\ncontract MintableToken is StandardToken {\r\n    /// @dev The only address allowed to mint coins\r\n    address public minter;\r\n\r\n    /// @dev Indicates whether the token is still mintable.\r\n    bool public mintingDisabled = false;\r\n\r\n    /**\r\n     * @dev Event fired when minting is no longer allowed.\r\n     */\r\n    event MintingDisabled();\r\n\r\n    /**\r\n     * @dev Allows a function to be executed only if minting is still allowed.\r\n     */\r\n    modifier canMint() {\r\n        require(!mintingDisabled);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows a function to be called only by the minter\r\n     */\r\n    modifier onlyMinter() {\r\n        require(msg.sender == minter);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev The constructor assigns the minter which is allowed to mind and disable minting\r\n     */\r\n    constructor(address _minter) internal {\r\n        minter = _minter;\r\n    }\r\n\r\n    /**\r\n    * @dev Creates new `_value` number of tokens and sends them to the `_to` address.\r\n    *\r\n    * @param _to The address which will receive the freshly minted tokens.\r\n    * @param _value The number of tokens that will be created.\r\n    */\r\n    function mint(address _to, uint256 _value) onlyMinter canMint public {\r\n        totalSupply = totalSupply.plus(_value);\r\n        balances[_to] = balances[_to].plus(_value);\r\n\r\n        emit Transfer(0x0, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Disable the minting of new tokens. Cannot be reversed.\r\n    *\r\n    * @return Whether or not the process was successful.\r\n    */\r\n    function disableMinting() onlyMinter canMint public {\r\n        mintingDisabled = true;\r\n       \r\n        emit MintingDisabled();\r\n    }\r\n}\r\n\r\n// File: contracts/token/StandardMintableToken.sol\r\n\r\ncontract StandardMintableToken is MintableToken {\r\n    constructor(address _minter, string _name, string _symbol, uint8 _decimals)\r\n        StandardToken(_name, _symbol, _decimals)\r\n        MintableToken(_minter)\r\n        public\r\n    {\r\n    }\r\n}\r\n\r\n// File: contracts/fundraiser/MintableTokenFundraiser.sol\r\n\r\n/**\r\n * @title Fundraiser With Mintable Token\r\n */\r\ncontract MintableTokenFundraiser is BasicFundraiser {\r\n    /**\r\n     * @dev The initialization method that creates a new mintable token.\r\n     *\r\n     * @param _name Token name\r\n     * @param _symbol Token symbol\r\n     * @param _decimals Token decimals\r\n     */\r\n    function initializeMintableTokenFundraiser(string _name, string _symbol, uint8 _decimals) internal {\r\n        token = new StandardMintableToken(\r\n            address(this), // The fundraiser is the token minter\r\n            _name,\r\n            _symbol,\r\n            _decimals\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mint the specific amount tokens\r\n     */\r\n    function handleTokens(address _address, uint256 _tokens) internal {\r\n        MintableToken(token).mint(_address, _tokens);\r\n    }\r\n}\r\n\r\n// File: contracts/component/RefundSafe.sol\r\n\r\n/**\r\n * @title Refund Safe\r\n *\r\n * @dev Allows your fundraiser to offer refunds if soft cap is not reached \r\n * while the fundraiser is active.\r\n */\r\ncontract RefundSafe is HasOwner {\r\n    using SafeMath for uint256;\r\n\r\n    /// The state of the refund safe.\r\n    /// ACTIVE    - the default state while the fundraiser is active.\r\n    /// REFUNDING - the refund safe allows participants in the fundraiser to get refunds.\r\n    /// CLOSED    - the refund safe is closed for business.\r\n    enum State {ACTIVE, REFUNDING, CLOSED}\r\n\r\n    /// Holds all ETH deposits of participants in the fundraiser.\r\n    mapping(address => uint256) public deposits;\r\n\r\n    /// The address which will receive the funds if the fundraiser is successful.\r\n    address public beneficiary;\r\n\r\n    /// The state variable which will control the lifecycle of the refund safe.\r\n    State public state;\r\n\r\n    /**\r\n     * @dev Event fired when the refund safe is closed.\r\n     */\r\n    event RefundsClosed();\r\n\r\n    /**\r\n     * @dev Event fired when refunds are allowed.\r\n     */\r\n    event RefundsAllowed();\r\n\r\n    /**\r\n     * @dev Event fired when a participant in the fundraiser is successfully refunded.\r\n     *\r\n     * @param _address The address of the participant.\r\n     * @param _value The number of ETH which were refunded.\r\n     */\r\n    event RefundSuccessful(address indexed _address, uint256 _value);\r\n\r\n    /**\r\n     * @dev Constructor.\r\n     *\r\n     * @param _beneficiary The address which will receive the funds if the fundraiser is a success.\r\n     */\r\n    constructor(address _owner, address _beneficiary)\r\n        HasOwner(_owner)\r\n        public\r\n    {\r\n        require(_beneficiary != 0x0);\r\n\r\n        beneficiary = _beneficiary;\r\n        state = State.ACTIVE;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets The beneficiary address.\r\n     *\r\n     * @param _beneficiary The address of the beneficiary.\r\n     */\r\n    function setBeneficiary(address _beneficiary) public onlyOwner {\r\n        require(_beneficiary != address(0));\r\n\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @dev Deposits ETH into the refund safe.\r\n     *\r\n     * @param _address The address of the participant in the fundraiser.\r\n     */\r\n    function deposit(address _address) onlyOwner public payable {\r\n        require(state == State.ACTIVE);\r\n\r\n        deposits[_address] = deposits[_address].plus(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Closes the refund safe.\r\n     */\r\n    function close() onlyOwner public {\r\n        require(state == State.ACTIVE);\r\n\r\n        state = State.CLOSED;\r\n\r\n        emit RefundsClosed();\r\n\r\n        beneficiary.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves the refund safe into a state of refund.\r\n     */\r\n    function allowRefunds() onlyOwner public {\r\n        require(state == State.ACTIVE);\r\n\r\n        state = State.REFUNDING;\r\n\r\n        emit RefundsAllowed();\r\n    }\r\n\r\n    /**\r\n     * @dev Refunds a participant in the fundraiser.\r\n     *\r\n     * @param _address The address of the participant.\r\n     */\r\n    function refund(address _address) public {\r\n        require(state == State.REFUNDING);\r\n\r\n        uint256 amount = deposits[_address];\r\n        // We do not want to emit RefundSuccessful events for empty accounts with zero ether\r\n        require(amount != 0);\r\n        // Zeroing the deposit early prevents reentrancy issues\r\n        deposits[_address] = 0;\r\n        _address.transfer(amount);\r\n\r\n        emit RefundSuccessful(_address, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/fundraiser/FinalizableFundraiser.sol\r\n\r\n/**\r\n * @title Finalizable Fundraiser\r\n *\r\n * @dev Allows the owner of this contract to finalize the fundraiser at any given time\r\n * after certain conditions are met, such as hard cap reached,\r\n * and also do extra work when finalized.\r\n */\r\ncontract FinalizableFundraiser is BasicFundraiser {\r\n    /// Flag indicating whether or not the fundraiser is finalized.\r\n    bool public isFinalized = false;\r\n\r\n    /**\r\n     * @dev Event fires if the finalization of the fundraiser is successful.\r\n     */\r\n    event Finalized();\r\n\r\n    /**\r\n     * @dev Finalizes the fundraiser. Cannot be reversed.\r\n     */\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n        require(hasEnded());\r\n\r\n        finalization();\r\n        emit Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Override this function to add extra work when a fundraiser is finalized.\r\n     * Don't forget to add super.finalization() to execute this part.\r\n     */\r\n    function finalization() internal {\r\n        beneficiary.transfer(address(this).balance);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Do nothing, wait for finalization\r\n     */\r\n    function handleFunds(address, uint256) internal {\r\n    }\r\n    \r\n}\r\n\r\n// File: contracts/fundraiser/RefundableFundraiser.sol\r\n\r\n/**\r\n * @title Refundable fundraiser\r\n *\r\n * @dev Allows your fundraiser to offer refunds to token buyers if it failed to reach the `softCap` in its duration.\r\n */\r\ncontract RefundableFundraiser is FinalizableFundraiser {\r\n    /// The minimum amount of funds (in ETH) to be gathered in order for the \r\n    /// fundraiser to be considered successful.\r\n    uint256 public softCap;\r\n\r\n    /// The instance of the refund safe which holds all ETH funds until the fundraiser\r\n    /// is finalized.\r\n    RefundSafe public refundSafe;\r\n\r\n    /**\r\n     * @dev The constructor.\r\n     *\r\n     * @param _softCap The minimum amount of funds (in ETH) that need to be reached.\r\n     */\r\n    function initializeRefundableFundraiser(uint256 _softCap) internal {\r\n        require(_softCap > 0);\r\n\r\n        refundSafe = new RefundSafe(address(this), beneficiary);\r\n        softCap = _softCap;\r\n    }\r\n\r\n    /**\r\n     * @dev Defines the abstract function from `BaseFundraiser` to add the funds to the `refundSafe`\r\n     */\r\n    function handleFunds(address _address, uint256 _ethers) internal {\r\n        refundSafe.deposit.value(_ethers)(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the soft cap was reached by the fundraiser.\r\n     *\r\n     * @return Whether `softCap` is reached or not.\r\n     */\r\n    function softCapReached() public view returns (bool) {\r\n        return totalRaised >= softCap;\r\n    }\r\n\r\n    /**\r\n     * @dev If the fundraiser failed to reach the soft cap,\r\n     * participants can use this method to get their ether back.\r\n     */\r\n    function getRefund() public {\r\n        require(isFinalized);\r\n        require(!softCapReached());\r\n\r\n        refundSafe.refund(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides the setBeneficiation fucntion to set the beneficiary of the refund safe\r\n     *\r\n     * @param _beneficiary The address of the beneficiary.\r\n     */\r\n    function setBeneficiary(address _beneficiary) public onlyOwner {\r\n        super.setBeneficiary(_beneficiary);\r\n        refundSafe.setBeneficiary(_beneficiary);\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides the default function from `FinalizableFundraiser`\r\n     * to check if soft cap was reached and appropriatelly allow refunds\r\n     * or simply close the refund safe.\r\n     */\r\n    function finalization() internal {\r\n        super.finalization();\r\n\r\n        if (softCapReached()) {\r\n            refundSafe.close();\r\n        } else {\r\n            refundSafe.allowRefunds();\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/token/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n *\r\n * @dev Allows tokens to be destroyed.\r\n */\r\ncontract BurnableToken is StandardToken {\r\n    /**\r\n     * @dev Event fired when tokens are burned.\r\n     *\r\n     * @param _from The address from which tokens will be removed.\r\n     * @param _value The number of tokens to be destroyed.\r\n     */\r\n    event Burn(address indexed _from, uint256 _value);\r\n\r\n    /**\r\n     * @dev Burnes `_value` number of tokens.\r\n     *\r\n     * @param _value The number of tokens that will be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value != 0);\r\n\r\n        address burner = msg.sender;\r\n        require(_value <= balances[burner]);\r\n\r\n        balances[burner] = balances[burner].minus(_value);\r\n        totalSupply = totalSupply.minus(_value);\r\n\r\n        emit Burn(burner, _value);\r\n        emit Transfer(burner, address(0), _value);\r\n    }\r\n}\r\n\r\n// File: contracts/token/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable Token\r\n *\r\n * @dev Allows you to pause/unpause transfers of your token.\r\n **/\r\ncontract PausableToken is StandardToken, HasOwner {\r\n\r\n    /// Indicates whether the token contract is paused or not.\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev Event fired when the token contracts gets paused.\r\n     */\r\n    event Pause();\r\n\r\n    /**\r\n     * @dev Event fired when the token contracts gets unpaused.\r\n     */\r\n    event Unpause();\r\n\r\n    /**\r\n     * @dev Allows a function to be called only when the token contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses the token contract.\r\n     */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpauses the token contract.\r\n     */\r\n    function unpause() onlyOwner public {\r\n        require(paused);\r\n\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    /// Overrides of the standard token's functions to add the paused/unpaused functionality.\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/Fundraiser.sol\r\n\r\n/**\r\n * @title HOWToken\r\n */\r\n \r\ncontract HOWToken is MintableToken, BurnableToken, PausableToken {\r\n  constructor(address _owner, address _minter)\r\n    StandardToken(\r\n      \"HOW Token\",   // Token name\r\n      \"HOW\", // Token symbol\r\n      18  // Token decimals\r\n    )\r\n    HasOwner(_owner)\r\n    MintableToken(_minter)\r\n    public\r\n  {\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title HOWTokenSafe\r\n */\r\n \r\ncontract HOWTokenSafe is TokenSafe {\r\n  constructor(address _token) \r\n    TokenSafe(_token)\r\n    public\r\n  {\r\n    // Group \"A\"\r\n    init(\r\n      0, // Group Id\r\n      1532779200 // Release date = 28 Jul 2018 12:00 UTC\r\n    );\r\n    add(\r\n      0, // Group Id\r\n      0xCD3367edbf18C379FA6FBD9D2C206DbB83A816AD, // Token Safe Entry Address\r\n      53500000000000000000000000  // Allocated tokens\r\n    );\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title HOWTokenFundraiser\r\n */\r\n\r\ncontract HOWTokenFundraiser is MintableTokenFundraiser, IndividualCapsFundraiser, CappedFundraiser, RefundableFundraiser, GasPriceLimitFundraiser {\r\n  HOWTokenSafe public tokenSafe;\r\n\r\n  constructor()\r\n    HasOwner(msg.sender)\r\n    public\r\n  {\r\n    token = new HOWToken(\r\n      msg.sender,  // Owner\r\n      address(this)  // The fundraiser is the minter\r\n    );\r\n\r\n    tokenSafe = new HOWTokenSafe(token);\r\n    MintableToken(token).mint(address(tokenSafe), 53500000000000000000000000);\r\n\r\n    initializeBasicFundraiser(\r\n      1532777400, // Start date = 28 Jul 2018 11:30 UTC\r\n      1538143200,  // End date = 28 Sep 2018 14:00 UTC\r\n      50000, // Conversion rate = 50000 HOW per 1 ether\r\n      0xCD3367edbf18C379FA6FBD9D2C206DbB83A816AD     // Beneficiary\r\n    );\r\n\r\n    initializeIndividualCapsFundraiser(\r\n      (0.01 ether), // Minimum contribution\r\n      (10 ether)  // Maximum individual cap\r\n    );\r\n\r\n    initializeGasPriceLimitFundraiser(\r\n        80000000000 // Gas price limit in wei\r\n    );\r\n\r\n    \r\n\r\n    initializeCappedFundraiser(\r\n      (1070 ether) // Hard cap\r\n    );\r\n\r\n    initializeRefundableFundraiser(\r\n      (213 ether)  // Soft cap\r\n    );\r\n    \r\n    \r\n  }\r\n  \r\n  /**\r\n    * @dev Disable minting upon finalization\r\n    */\r\n  function finalization() internal {\r\n      super.finalization();\r\n      MintableToken(token).disableMinting();\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSafe\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"individualMaxCapTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_individualMaxCap\",\"type\":\"uint256\"}],\"name\":\"setIndividualMaxCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"changeGasPriceLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conversionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPriceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundSafe\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"individualMinCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_conversionRate\",\"type\":\"uint256\"}],\"name\":\"setConversionRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_individualMinCap\",\"type\":\"uint256\"}],\"name\":\"setIndividualMinCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getConversionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"individualMaxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gasPriceLimit\",\"type\":\"uint256\"}],\"name\":\"GasPriceLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_individualMinCap\",\"type\":\"uint256\"}],\"name\":\"IndividualMinCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_individualMaxCapTokens\",\"type\":\"uint256\"}],\"name\":\"IndividualMaxCapTokensChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_conversionRate\",\"type\":\"uint256\"}],\"name\":\"ConversionRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_ethers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"}]","ContractName":"HOWTokenFundraiser","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://345336427b69c5e2915fef4e62ef44203160705f0397b5c63566ae9317d0aedb"}]}