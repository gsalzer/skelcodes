{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25; /*\r\n\r\n___________________________________________________________________\r\n  _      _                                        ______           \r\n  |  |  /          /                                /              \r\n--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\r\n  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \r\n__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\r\n\r\n\r\n .----------------.  .----------------.  .----------------.  .----------------.  .-----------------.\r\n| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\r\n| |    _______   | || |  _________   | || |   _______    | || |  _________   | || | ____  _____  | |\r\n| |   /  ___  |  | || | |_   ___  |  | || |  |  ___  |   | || | |_   ___  |  | || ||_   \\|_   _| | |\r\n| |  |  (__ \\_|  | || |   | |_  \\_|  | || |  |_/  / /    | || |   | |_  \\_|  | || |  |   \\ | |   | |\r\n| |   '.___`-.   | || |   |  _|  _   | || |      / /     | || |   |  _|  _   | || |  | |\\ \\| |   | |\r\n| |  |`\\____) |  | || |  _| |___/ |  | || |     / /      | || |  _| |___/ |  | || | _| |_\\   |_  | |\r\n| |  |_______.'  | || | |_________|  | || |    /_/       | || | |_________|  | || ||_____|\\____| | |\r\n| |              | || |              | || |              | || |              | || |              | |\r\n| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |\r\n '----------------'  '----------------'  '----------------'  '----------------'  '----------------' \r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n\r\n// Name        : se7en\r\n// Symbol      : S7N\r\n// Copyright (c) 2018 XSe7en Social Media Inc. ( https://se7en.social )\r\n// Contract written by EtherAuthority ( https://EtherAuthority.io )\r\n// ----------------------------------------------------------------------------\r\n   \r\n*/ \r\n\r\n//*******************************************************************//\r\n//------------------------ SafeMath Library -------------------------//\r\n//*******************************************************************//\r\n    /**\r\n     * @title SafeMath\r\n     * @dev Math operations with safety checks that throw on error\r\n     */\r\n    library SafeMath {\r\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n      }\r\n    \r\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n      }\r\n    \r\n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n      }\r\n    \r\n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n      }\r\n    }\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\n    \r\n    contract owned {\r\n        address public owner;\r\n        \r\n         constructor () public {\r\n            owner = msg.sender;\r\n        }\r\n    \r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n    \r\n        function transferOwnership(address newOwner) onlyOwner public {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes  _extraData) external; }\r\n\r\n\r\n//***************************************************************//\r\n//------------------ ERC20 Standard Template -------------------//\r\n//***************************************************************//\r\n    \r\n    contract TokenERC20 {\r\n        // Public variables of the token\r\n        using SafeMath for uint256;\r\n        string public name;\r\n        string public symbol;\r\n        uint8 public decimals = 18;\r\n        uint256 public totalSupply;\r\n        uint256 public reservedForICO;\r\n        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\r\n    \r\n        // This creates an array with all balances\r\n        mapping (address => uint256) public balanceOf;\r\n        mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n        // This generates a public event on the blockchain that will notify clients\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n        // This notifies clients about the amount burnt\r\n        event Burn(address indexed from, uint256 value);\r\n    \r\n        /**\r\n         * Constructor function\r\n         *\r\n         * Initializes contract with initial supply tokens to the creator of the contract\r\n         */\r\n        constructor (\r\n            uint256 initialSupply,\r\n            uint256 allocatedForICO,\r\n            string memory tokenName,\r\n            string memory tokenSymbol\r\n        ) public {\r\n            totalSupply = initialSupply.mul(1 ether);   \r\n            reservedForICO = allocatedForICO.mul(1 ether);  \r\n            balanceOf[address(this)] = reservedForICO;      \r\n            balanceOf[msg.sender]=totalSupply.sub(reservedForICO); \r\n            name = tokenName;                               \r\n            symbol = tokenSymbol;                           \r\n        }\r\n    \r\n        /**\r\n         * Internal transfer, can be called only by this contract\r\n         */\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            require(!safeguard);\r\n            // Prevent transfer to 0x0 address. Use burn() instead\r\n            require(_to != address(0x0));\r\n            // Check if the sender has enough balance\r\n            require(balanceOf[_from] >= _value);\r\n            // Check for overflows\r\n            require(balanceOf[_to].add(_value) > balanceOf[_to]);\r\n            // Save this for an assertion in the future\r\n            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n            // Subtract from the sender\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);\r\n            balanceOf[_to] = balanceOf[_to].add(_value);\r\n            emit Transfer(_from, _to, _value);\r\n            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n        }\r\n    \r\n        /**\r\n         * Transfer tokens\r\n         *\r\n         * Send `_value` tokens to `_to` from your account\r\n         *\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n        function transfer(address _to, uint256 _value) public returns (bool success) {\r\n            _transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Transfer tokens from other address\r\n         *\r\n         * Send `_value` tokens to `_to` in behalf of `_from`\r\n         *\r\n         * @param _from The address of the sender\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n            require(!safeguard);\r\n            require(_value <= allowance[_from][msg.sender]);    \r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n            _transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Set allowance for other address\r\n         *\r\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n         *\r\n         * @param _spender The address authorized to spend\r\n         * @param _value the max amount they can spend\r\n         */\r\n        function approve(address _spender, uint256 _value) public\r\n            returns (bool success) {\r\n            require(!safeguard);\r\n            allowance[msg.sender][_spender] = _value;\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Set allowance for other address and notify\r\n         *\r\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n         *\r\n         * @param _spender The address authorized to spend\r\n         * @param _value the max amount they can spend\r\n         * @param _extraData some extra information to send to the approved contract\r\n         */\r\n        function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n            public\r\n            returns (bool success) {\r\n            require(!safeguard);\r\n            tokenRecipient spender = tokenRecipient(_spender);\r\n            if (approve(_spender, _value)) {\r\n                spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n                return true;\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Destroy tokens\r\n         *\r\n         * Remove `_value` tokens from the system irreversibly\r\n         *\r\n         * @param _value the amount of tokens to burn\r\n         */\r\n        function burn(uint256 _value) public returns (bool success) {\r\n            require(!safeguard);\r\n            require(balanceOf[msg.sender] >= _value);   \r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            \r\n            totalSupply = totalSupply.sub(_value);                      \r\n            emit Burn(msg.sender, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Destroy tokens from other account\r\n         *\r\n         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n         *\r\n         * @param _from the address of the sender\r\n         * @param _value the amount of tokens to burn\r\n         */\r\n        function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n            require(!safeguard);\r\n            require(balanceOf[_from] >= _value);                \r\n            require(_value <= allowance[_from][msg.sender]);    \r\n            balanceOf[_from] = balanceOf[_from].sub(_value);                         \r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             \r\n            totalSupply = totalSupply.sub(_value);                              \r\n            emit  Burn(_from, _value);\r\n            return true;\r\n        }\r\n        \r\n    }\r\n    \r\n//************************************************************************//\r\n//---------------------  SE7EN MAIN CODE STARTS HERE ---------------------//\r\n//************************************************************************//\r\n    \r\n    contract se7en is owned, TokenERC20 {\r\n        \r\n        /*************************************/\r\n        /*  User whitelisting functionality  */\r\n        /*************************************/\r\n        bool public whitelistingStatus = false;\r\n        mapping (address => bool) public whitelisted;\r\n        \r\n        /**\r\n         * Change whitelisting status on or off\r\n         *\r\n         * When whitelisting is true, then crowdsale will only accept investors who are whitelisted.\r\n         */\r\n        function changeWhitelistingStatus() onlyOwner public{\r\n            if (whitelistingStatus == false){\r\n                whitelistingStatus = true;\r\n            }\r\n            else{\r\n                whitelistingStatus = false;    \r\n            }\r\n        }\r\n        \r\n        /**\r\n         * Whitelist any user address - only Owner can do this\r\n         *\r\n         * It will add user address to whitelisted mapping\r\n         */\r\n        function whitelistUser(address userAddress) onlyOwner public{\r\n            require(whitelistingStatus == true);\r\n            require(userAddress != address(0x0));\r\n            whitelisted[userAddress] = true;\r\n        }\r\n        \r\n        /**\r\n         * Whitelist Many user address at once - only Owner can do this\r\n         * maximum of 150 addresses to prevent block gas limit max-out and DoS attack\r\n         * this will add user address in whitelisted mapping\r\n         */\r\n        function whitelistManyUsers(address[] memory userAddresses) onlyOwner public{\r\n            require(whitelistingStatus == true);\r\n            uint256 addressCount = userAddresses.length;\r\n            require(addressCount <= 150);\r\n            for(uint256 i = 0; i < addressCount; i++){\r\n                require(userAddresses[i] != address(0x0));\r\n                whitelisted[userAddresses[i]] = true;\r\n            }\r\n        }\r\n        \r\n        \r\n        \r\n        /********************************/\r\n        /* Code for the ERC20 S7N Token */\r\n        /********************************/\r\n    \r\n        /* Public variables of the token */\r\n        string private tokenName = \"se7en\";\r\n        string private tokenSymbol = \"S7N\";\r\n        uint256 private initialSupply = 74243687134;\r\n        uint256 private allocatedForICO = 7424368713;\r\n        \r\n\r\n        mapping (address => bool) public frozenAccount;\r\n        \r\n        event FrozenFunds(address target, bool frozen);\r\n    \r\n        constructor () TokenERC20(initialSupply, allocatedForICO, tokenName, tokenSymbol) public {}\r\n\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            require(!safeguard);\r\n            require (_to != address(0x0));                      \r\n            require (balanceOf[_from] >= _value);               \r\n            require (balanceOf[_to].add(_value) >= balanceOf[_to]); \r\n            require(!frozenAccount[_from]);                     \r\n            require(!frozenAccount[_to]);                       \r\n            balanceOf[_from] = balanceOf[_from].sub(_value);   \r\n            balanceOf[_to] = balanceOf[_to].add(_value);        \r\n            emit Transfer(_from, _to, _value);\r\n        }\r\n        \r\n        /// @notice Create `mintedAmount` tokens and send it to `target`\r\n        /// @param target Address to receive the tokens\r\n        /// @param mintedAmount the amount of tokens it will receive\r\n        function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n            balanceOf[target] = balanceOf[target].add(mintedAmount);\r\n            totalSupply = totalSupply.add(mintedAmount);\r\n            emit Transfer(address(0x0), address(this), mintedAmount);\r\n            emit Transfer(address(this), target, mintedAmount);\r\n        }\r\n\r\n        /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n        /// @param target Address to be frozen\r\n        /// @param freeze either to freeze it or not\r\n        function freezeAccount(address target, bool freeze) onlyOwner public {\r\n                frozenAccount[target] = freeze;\r\n            emit  FrozenFunds(target, freeze);\r\n        }\r\n\r\n        /******************************/\r\n        /* Code for the S7N Crowdsale */\r\n        /******************************/\r\n        \r\n        uint256 public datePreSale   = 1544918400 ;      // 16 Dec 2018 00:00:00 - GMT\r\n        uint256 public dateIcoPhase1 = 1546300800 ;      // 01 Jan 2019 00:00:00 - GMT\r\n        uint256 public dateIcoPhase2 = 1548979200 ;      // 01 Feb 2019 00:00:00 - GMT\r\n        uint256 public dateIcoPhase3 = 1551398400 ;      // 01 Mar 2019 00:00:00 - GMT\r\n        uint256 public dateIcoEnd    = 1553990399 ;      // 30 Mar 2019 23:59:59 - GMT\r\n        uint256 public exchangeRate  = 10000;             // 1 ETH = 10000 Tokens \r\n        uint256 public tokensSold    = 0;                \r\n  \r\n        function () payable external {\r\n            require(!safeguard);\r\n            require(!frozenAccount[msg.sender]);\r\n            require(datePreSale < now && dateIcoEnd > now);\r\n            if(whitelistingStatus == true) { require(whitelisted[msg.sender]); }\r\n            if(datePreSale < now && dateIcoPhase1 > now){ require(msg.value >= (0.50 ether)); }\r\n            // calculate token amount to be sent\r\n            uint256 token = msg.value.mul(exchangeRate);                        \r\n            uint256 finalTokens = token.add(calculatePurchaseBonus(token));     \r\n            tokensSold = tokensSold.add(finalTokens);\r\n            _transfer(address(this), msg.sender, finalTokens);                  \r\n            forwardEherToOwner();                                               \r\n        }\r\n\r\n\r\n        function calculatePurchaseBonus(uint256 token) internal view returns(uint256){\r\n            if(datePreSale < now && now < dateIcoPhase1 ){\r\n                return token.mul(50).div(100);  //50% bonus in pre sale\r\n            }\r\n            else if(dateIcoPhase1 < now && now < dateIcoPhase2 ){\r\n                return token.mul(25).div(100);  //25% bonus in ICO phase 1\r\n            }\r\n            else if(dateIcoPhase2 < now && now < dateIcoPhase3 ){\r\n                return token.mul(10).div(100);  //10% bonus in ICO phase 2\r\n            }\r\n            else if(dateIcoPhase3 < now && now < dateIcoEnd ){\r\n                return token.mul(5).div(100);  //5% bonus in ICO phase 3\r\n            }\r\n            else{\r\n                return 0;                      //NO BONUS\r\n            }\r\n        }\r\n\r\n        function forwardEherToOwner() internal {\r\n            address(owner).transfer(msg.value); \r\n        }\r\n\r\n        function updateCrowdsale(uint256 datePreSaleNew, uint256 dateIcoPhase1New, uint256 dateIcoPhase2New, uint256 dateIcoPhase3New, uint256 dateIcoEndNew) onlyOwner public {\r\n            require(datePreSaleNew < dateIcoPhase1New && dateIcoPhase1New < dateIcoPhase2New);\r\n            require(dateIcoPhase2New < dateIcoPhase3New && dateIcoPhase3New < dateIcoEnd);\r\n            datePreSale   = datePreSaleNew;\r\n            dateIcoPhase1 = dateIcoPhase1New;\r\n            dateIcoPhase2 = dateIcoPhase2New;\r\n            dateIcoPhase3 = dateIcoPhase3New;\r\n            dateIcoEnd    = dateIcoEndNew;\r\n        }\r\n        \r\n\r\n        function stopICO() onlyOwner public{\r\n            dateIcoEnd = 0;\r\n        }\r\n        \r\n\r\n        function icoStatus() public view returns(string memory){\r\n            if(datePreSale > now ){\r\n                return \"Pre sale has not started yet\";\r\n            }\r\n            else if(datePreSale < now && now < dateIcoPhase1){\r\n                return \"Pre sale is running\";\r\n            }\r\n            else if(dateIcoPhase1 < now && now < dateIcoPhase2){\r\n                return \"ICO phase 1 is running\";\r\n            }\r\n            else if(dateIcoPhase2 < now && now < dateIcoPhase3){\r\n                return \"ICO phase 2 is running\";\r\n            }\r\n            else if(dateIcoPhase3 < now && now < dateIcoEnd){\r\n                return \"ICO phase 3 is running\";\r\n            }\r\n            else{\r\n                return \"ICO is not active\";\r\n            }\r\n        }\r\n        \r\n        function setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {\r\n            exchangeRate=newExchangeRate;\r\n        }\r\n        \r\n        function manualWithdrawToken(uint256 _amount) onlyOwner public {\r\n            uint256 tokenAmount = _amount.mul(1 ether);\r\n            _transfer(address(this), msg.sender, tokenAmount);\r\n        }\r\n          \r\n        function manualWithdrawEther()onlyOwner public{\r\n            address(owner).transfer(address(this).balance);\r\n        }\r\n        \r\n        function destructContract()onlyOwner public{\r\n            selfdestruct(owner);\r\n        }\r\n        \r\n        /**\r\n         * Change safeguard status on or off\r\n         *\r\n         * When safeguard is true, all the non-owner functions are unavailable.\r\n         * When safeguard is false, all the functions will resume!\r\n         */\r\n        function changeSafeguardStatus() onlyOwner public{\r\n            if (safeguard == false){\r\n                safeguard = true;\r\n            }\r\n            else{\r\n                safeguard = false;    \r\n            }\r\n        }\r\n        \r\n        \r\n        /********************************/\r\n        /* Code for the Air drop of S7N */\r\n        /********************************/\r\n        \r\n        /**\r\n         * Run an Air-Drop\r\n         *\r\n         * It requires an array of all the addresses and amount of tokens to distribute\r\n         * It will only process first 150 recipients. That limit is fixed to prevent gas limit\r\n         */\r\n        function airdrop(address[] memory recipients,uint tokenAmount) public onlyOwner {\r\n            uint256 addressCount = recipients.length;\r\n            require(addressCount <= 150);\r\n            for(uint i = 0; i < addressCount; i++)\r\n            {\r\n                \r\n                  _transfer(address(this), recipients[i], tokenAmount.mul(1 ether));\r\n            }\r\n        }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"datePreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateIcoPhase3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"whitelistUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeSafeguardStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateIcoPhase2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manualWithdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manualWithdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"datePreSaleNew\",\"type\":\"uint256\"},{\"name\":\"dateIcoPhase1New\",\"type\":\"uint256\"},{\"name\":\"dateIcoPhase2New\",\"type\":\"uint256\"},{\"name\":\"dateIcoPhase3New\",\"type\":\"uint256\"},{\"name\":\"dateIcoEndNew\",\"type\":\"uint256\"}],\"name\":\"updateCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddresses\",\"type\":\"address[]\"}],\"name\":\"whitelistManyUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeWhitelistingStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destructContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safeguard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistingStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateIcoPhase1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dateIcoEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newExchangeRate\",\"type\":\"uint256\"}],\"name\":\"setICOExchangeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedForICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"se7en","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://52966a72681faaf4fa38fdc1b895c7df776cd9509e8d4e7f55c85b3bb3d0f0bf"}]}