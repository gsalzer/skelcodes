{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary CertsLib {\r\n  struct SignatureData {\r\n    /* \r\n     * status == 0x0 => UNKNOWN\r\n     * status == 0x1 => PENDING\r\n     * status == 0x2 => SIGNED\r\n     * Otherwise     => Purpose (sha-256 of data)\r\n     */\r\n    bytes32 status;\r\n    uint exp; // Expiration Date\r\n  }\r\n\r\n  struct TransferData {\r\n    address newOwner;\r\n    uint newEntityId;\r\n  }\r\n\r\n  struct CertData {\r\n    /*\r\n     * owner == 0 => POE_CERTIFICATE\r\n     * owner != 0 => PROPIETARY_CERTIFICATE\r\n     */\r\n    address owner; // owner of the certificate (in case of being a peer)\r\n    uint entityId; // owner of the certificate (in case of being an entity)\r\n    bytes32 certHash; // sha256 checksum of the certificate JSON data\r\n    string ipfsCertHash; // ipfs multihash address of certificate in json format\r\n    bytes32 dataHash; // sha256 hash of certified data\r\n    string ipfsDataHash; // ipfs multihash address of certified data\r\n    mapping(uint => SignatureData) entities; // signatures from signing entities and their expiration date\r\n    uint[] entitiesArr;\r\n    mapping(address => SignatureData) signatures; // signatures from peers and their expiration date\r\n    address[] signaturesArr;\r\n  }\r\n\r\n  struct Data {\r\n    mapping(uint => CertData) certificates;\r\n    mapping(uint => TransferData) transferRequests;\r\n    uint nCerts;\r\n  }\r\n\r\n  // METHODS\r\n\r\n  /**\r\n   * Creates a new POE certificate\r\n   * @param self {object} - The data containing the certificate mappings\r\n   * @param dataHash {bytes32} - The hash of the certified data\r\n   * @param certHash {bytes32} - The sha256 hash of the json certificate\r\n   * @param ipfsDataHash {string} - The ipfs multihash address of the data (0x00 means unkwon)\r\n   * @param ipfsCertHash {string} - The ipfs multihash address of the certificate in json format (0x00 means unkwon)\r\n   * @return The id of the created certificate     \r\n   */\r\n  function createPOECertificate(Data storage self, bytes32 dataHash, bytes32 certHash, string ipfsDataHash, string ipfsCertHash) public returns (uint) {\r\n    require (hasData(dataHash, certHash, ipfsDataHash, ipfsCertHash));\r\n\r\n    uint certId = ++self.nCerts;\r\n    self.certificates[certId] = CertData({\r\n      owner: 0,\r\n      entityId: 0,\r\n      certHash: certHash,\r\n      ipfsCertHash: ipfsCertHash,\r\n      dataHash: dataHash,\r\n      ipfsDataHash: ipfsDataHash,\r\n      entitiesArr: new uint[](0),\r\n      signaturesArr: new address[](0)\r\n    });\r\n\r\n    POECertificate(certId);\r\n    return certId;\r\n  }\r\n\r\n  /**\r\n   * Creates a new certificate (with known owner). The owner will be the sender unless the entityId (issuer) is supplied.\r\n   * @param self {object} - The data containing the certificate mappings\r\n   * @param ed {object} - The data containing the entity mappings\r\n   * @param dataHash {bytes32} - The hash of the certified data\r\n   * @param certHash {bytes32} - The sha256 hash of the json certificate\r\n   * @param ipfsDataHash {string} - The ipfs multihash address of the data (0x00 means unkwon)\r\n   * @param ipfsCertHash {string} - The ipfs multihash address of the certificate in json format (0x00 means unkwon)\r\n   * @param entityId {uint} - The entity id which issues the certificate (0 if not issued by an entity)\r\n   * @return {uint} The id of the created certificate     \r\n   */\r\n  function createCertificate(Data storage self, EntityLib.Data storage ed, bytes32 dataHash, bytes32 certHash, string ipfsDataHash, string ipfsCertHash, uint entityId) senderCanIssueEntityCerts(ed, entityId) public returns (uint) {\r\n    require (hasData(dataHash, certHash, ipfsDataHash, ipfsCertHash));\r\n\r\n    uint certId = ++self.nCerts;\r\n    self.certificates[certId] = CertData({\r\n      owner: entityId == 0 ? msg.sender : 0,\r\n      entityId: entityId,\r\n      certHash: certHash,\r\n      ipfsCertHash: ipfsCertHash,\r\n      dataHash: dataHash,\r\n      ipfsDataHash: ipfsDataHash,\r\n      entitiesArr: new uint[](0),\r\n      signaturesArr: new address[](0)\r\n    });\r\n\r\n    Certificate(certId);\r\n    return certId;\r\n  }\r\n\r\n  /**\r\n   * Transfers a certificate owner. The owner can be a peer or an entity (never both), so only one of newOwner or newEntity must be different than 0.\r\n   * If the specified certificateId belongs to an entity, the msg.sender must be a valid signer for the entity. Otherwise the msg.sender must be the current owner.\r\n   * @param self {object} - The data containing the certificate mappings\r\n   * @param ed {object} - The data containing the entity mappings\r\n   * @param certificateId {uint} - The id of the certificate to transfer\r\n   * @param newOwner {address} - The address of the new owner\r\n   */\r\n  function requestCertificateTransferToPeer(Data storage self, EntityLib.Data storage ed, uint certificateId, address newOwner) canTransferCertificate(self, ed, certificateId) public {\r\n    self.transferRequests[certificateId] = TransferData({\r\n      newOwner: newOwner,\r\n      newEntityId: 0\r\n    });\r\n\r\n    CertificateTransferRequestedToPeer(certificateId, newOwner);\r\n  }\r\n\r\n  /**\r\n   * Transfers a certificate owner. The owner can be a peer or an entity (never both), so only one of newOwner or newEntity must be different than 0.\r\n   * If the specified certificateId belongs to an entity, the msg.sender must be a valid signer for the entity. Otherwise the msg.sender must be the current owner.\r\n   * @param self {object} - The data containing the certificate mappings\r\n   * @param ed {object} - The data containing the entity mappings\r\n   * @param certificateId {uint} - The id of the certificate to transfer\r\n   * @param newEntityId {uint} - The id of the new entity\r\n   */\r\n  function requestCertificateTransferToEntity(Data storage self, EntityLib.Data storage ed, uint certificateId, uint newEntityId) entityExists(ed, newEntityId) canTransferCertificate(self, ed, certificateId) public {\r\n    self.transferRequests[certificateId] = TransferData({\r\n      newOwner: 0,\r\n      newEntityId: newEntityId\r\n    });\r\n\r\n    CertificateTransferRequestedToEntity(certificateId, newEntityId);\r\n  }\r\n\r\n  /**\r\n   * Accept the certificate transfer\r\n   * @param self {object} - The data containing the certificate mappings\r\n   * @param ed {object} - The data containing the entity mappings\r\n   * @param certificateId {uint} - The id of the certificate to transfer\r\n   */\r\n  function acceptCertificateTransfer(Data storage self, EntityLib.Data storage ed, uint certificateId) canAcceptTransfer(self, ed, certificateId) public {\r\n    TransferData storage reqData = self.transferRequests[certificateId];\r\n    self.certificates[certificateId].owner = reqData.newOwner;\r\n    self.certificates[certificateId].entityId = reqData.newEntityId;    \r\n    CertificateTransferAccepted(certificateId, reqData.newOwner, reqData.newEntityId);\r\n    delete self.transferRequests[certificateId];\r\n  }\r\n\r\n  /**\r\n   * Cancel any certificate transfer request\r\n   * @param self {object} - The data containing the certificate mappings\r\n   * @param ed {object} - The data containing the entity mappings\r\n   * @param certificateId {uint} - The id of the certificate to transfer\r\n   */\r\n  function cancelCertificateTransfer(Data storage self, EntityLib.Data storage ed, uint certificateId) canTransferCertificate(self, ed, certificateId) public {\r\n    self.transferRequests[certificateId] = TransferData({\r\n      newOwner: 0,\r\n      newEntityId: 0\r\n    });\r\n\r\n    CertificateTransferCancelled(certificateId);\r\n  }\r\n\r\n  /**\r\n   * Updates ipfs multihashes of a particular certificate\r\n   * @param self {object} - The data containing the certificate mappings\r\n   * @param certId {uint} - The id of the certificate\r\n   * @param ipfsDataHash {string} - The ipfs multihash address of the data (0x00 means unkwon)\r\n   * @param ipfsCertHash {string} - The ipfs multihash address of the certificate in json format (0x00 means unkwon)\r\n   */\r\n  function setIPFSData(Data storage self, uint certId, string ipfsDataHash, string ipfsCertHash) ownsCertificate(self, certId) public {\r\n      self.certificates[certId].ipfsDataHash = ipfsDataHash;\r\n      self.certificates[certId].ipfsCertHash = ipfsCertHash;\r\n      UpdatedIPFSData(certId);\r\n  }\r\n\r\n  // HELPERS\r\n\r\n  /**\r\n   * Returns true if the certificate has valid data\r\n   * @param dataHash {bytes32} - The hash of the certified data\r\n   * @param certHash {bytes32} - The sha256 hash of the json certificate\r\n   * @param ipfsDataHash {string} - The ipfs multihash address of the data (0x00 means unkwon)\r\n   * @param ipfsCertHash {string} - The ipfs multihash address of the certificate in json format (0x00 means unkwon)   * @return {bool} - True if the certificate contains valid data\r\n   */\r\n  function hasData(bytes32 dataHash, bytes32 certHash, string ipfsDataHash, string ipfsCertHash) pure public returns (bool) {\r\n    return certHash != 0\r\n    || dataHash != 0\r\n    || bytes(ipfsDataHash).length != 0\r\n    || bytes(ipfsCertHash).length != 0;\r\n  }\r\n\r\n  // MODIFIERS\r\n  \r\n /**\r\n   * Returns True if msg.sender is the owner of the specified certificate. False otherwise.\r\n   * @param self {object} - The data containing the certificate mappings\r\n   * @param id {uint} - The id of the certificate \r\n   */\r\n  modifier ownsCertificate(Data storage self, uint id) {\r\n    require (self.certificates[id].owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * Returns TRUE if the specified entity is valid and the sender is a valid signer from the entity.\r\n   * If the entityId is 0 (not provided), it also returns TRUE\r\n   * @param ed {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The entityId which will issue the certificate\r\n   */\r\n  modifier senderCanIssueEntityCerts(EntityLib.Data storage ed, uint entityId) {\r\n    require (entityId == 0 \r\n     || (EntityLib.isValid(ed, entityId) && ed.entities[entityId].signers[msg.sender].status == 2));\r\n    _;    \r\n  }\r\n\r\n  /**\r\n   * Returns TRUE if the certificate has data and can be transfered to the new owner:\r\n   * - When the certificate is owned by a peer: the sender must be the owner of the certificate\r\n   * - When the certificate belongs to an entity: the entity must be valid \r\n   *   AND the signer must be a valid signer of the entity\r\n   * @param self {object} - The data containing the certificate mappings\r\n   * @param ed {object} - The data containing the entity mappings\r\n   * @param certificateId {uint} - The certificateId which transfer is required\r\n   */\r\n  modifier canTransferCertificate(Data storage self, EntityLib.Data storage ed, uint certificateId) {\r\n    CertData storage cert = self.certificates[certificateId];\r\n    require (hasData(cert.dataHash, cert.certHash, cert.ipfsDataHash, cert.ipfsCertHash));\r\n\r\n    if (cert.owner != 0) {\r\n      require (cert.owner == msg.sender);\r\n      _;\r\n    } else if (cert.entityId != 0) {\r\n      EntityLib.EntityData storage entity = ed.entities[cert.entityId];\r\n      require (EntityLib.isValid(ed, cert.entityId) && entity.signers[msg.sender].status == 2);\r\n      _;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns TRUE if the entity exists\r\n   */\r\n  modifier entityExists(EntityLib.Data storage ed, uint entityId) {\r\n    require (EntityLib.exists(ed, entityId));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Returns TRUE if the msg.sender can accept the certificate transfer\r\n   * @param self {object} - The data containing the certificate mappings\r\n   * @param ed {object} - The data containing the entity mappings\r\n   * @param certificateId {uint} - The certificateId which transfer is required\r\n   */\r\n  modifier canAcceptTransfer(Data storage self, EntityLib.Data storage ed, uint certificateId) {\r\n    CertData storage cert = self.certificates[certificateId];\r\n    require (hasData(cert.dataHash, cert.certHash, cert.ipfsDataHash, cert.ipfsCertHash));\r\n\r\n    TransferData storage reqData = self.transferRequests[certificateId];\r\n    require(reqData.newEntityId != 0 || reqData.newOwner != 0);\r\n\r\n    if (reqData.newOwner == msg.sender) {\r\n      _;\r\n    } else if (reqData.newEntityId != 0) {      \r\n      EntityLib.EntityData storage newEntity = ed.entities[reqData.newEntityId];\r\n      require (EntityLib.isValid(ed, reqData.newEntityId) && newEntity.signers[msg.sender].status == 2);\r\n       _;\r\n    }\r\n  }\r\n\r\n  // EVENTS\r\n\r\n  event POECertificate(uint indexed certificateId);\r\n  event Certificate(uint indexed certificateId);\r\n  event CertificateTransferRequestedToPeer(uint indexed certificateId, address newOwner);\r\n  event CertificateTransferRequestedToEntity(uint indexed certificateId, uint newEntityId);\r\n  event CertificateTransferAccepted(uint indexed certificateId, address newOwner, uint newEntityId);\r\n  event CertificateTransferCancelled(uint indexed certificateId);\r\n  event UpdatedIPFSData(uint indexed certificateId);\r\n}\r\n\r\nlibrary EntityLib {\r\n  struct SignerData {\r\n    string signerDataHash;\r\n    /*\r\n     * status == 0 => NOT_VALID\r\n     * status == 1 => VALIDATION_PENDING\r\n     * status == 2 => VALID\r\n     * status == 3 => DATA_UPDATED\r\n     */\r\n    uint status;\r\n  }\r\n\r\n  struct EntityData {\r\n    address owner;\r\n    string dataHash; // hash entity data\r\n    /*\r\n      * status == 0 => NOT_VALID\r\n      * status == 1 => VALIDATION_PENDING\r\n      * status == 2 => VALID\r\n      * status == 4 => RENEWAL_REQUESTED\r\n      * status == 8 => CLOSED\r\n      * otherwise => UNKNOWN\r\n      */\r\n    uint status;\r\n    bytes32 urlHash;         // hash url only\r\n    uint expiration;         // Expiration date\r\n    uint renewalPeriod;      // Renewal period to be used for 3rd party renewals (3rd party paying the validation expenses)\r\n    bytes32 oraclizeQueryId; // Last query Id from oraclize. We will only process the last request\r\n\r\n    /*\r\n      * signers[a] == 0;\r\n      * signers[a] = ipfs multihash address for signer data file in json format\r\n      */\r\n    mapping(address => SignerData) signers;\r\n    address[] signersArr;\r\n  }\r\n\r\n  struct Data {\r\n    mapping(uint => EntityData) entities;\r\n    mapping(bytes32 => uint) entityIds;\r\n    uint nEntities;\r\n  }\r\n\r\n  // METHODS\r\n\r\n  /**\r\n   * Creates a new entity\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entitDatayHash {string} - The ipfs multihash address of the entity information in json format\r\n   * @param urlHash {bytes32} - The sha256 hash of the URL of the entity\r\n   * @param expirationDate {uint} - The expiration date of the current entity\r\n   * @param renewalPeriod {uint} - The time period which will be added to the current date or expiration date when a renewal is requested\r\n   * @return {uint} The id of the created entity\r\n   */\r\n  function create(Data storage self, uint entityId, string entitDatayHash, bytes32 urlHash, uint expirationDate, uint renewalPeriod) isExpirationDateValid(expirationDate) isRenewalPeriodValid(renewalPeriod) public {\r\n    self.entities[entityId] = EntityData({\r\n        owner: msg.sender,\r\n        dataHash: entitDatayHash,\r\n        urlHash: urlHash,\r\n        status: 1,\r\n        expiration: expirationDate,\r\n        renewalPeriod: renewalPeriod,\r\n        oraclizeQueryId: 0,\r\n        signersArr: new address[](0)\r\n    });\r\n    EntityCreated(entityId);\r\n  }\r\n\r\n  /**\r\n   * Process validation after the oraclize callback\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param queryId {bytes32} - The id of the oraclize query (returned by the call to oraclize_query method)\r\n   * @param result {string} - The result of the query\r\n   */\r\n  function processValidation(Data storage self, bytes32 queryId, string result) public {\r\n    uint entityId = self.entityIds[queryId];\r\n    self.entityIds[queryId] = 0;\r\n    \r\n    EntityData storage entity = self.entities[entityId];\r\n\r\n    require (queryId == entity.oraclizeQueryId);\r\n\r\n    string memory entityIdStr = uintToString(entityId);\r\n    string memory toCompare = strConcat(entityIdStr, \":\", entity.dataHash); \r\n\r\n    if (stringsEqual(result, toCompare)) {\r\n      if (entity.status == 4) { // if entity is waiting for renewal\r\n        uint initDate = max(entity.expiration, now);\r\n        entity.expiration = initDate + entity.renewalPeriod;\r\n      }\r\n\r\n      entity.status = 2; // set entity status to valid\r\n      EntityValidated(entityId);\r\n    } else {\r\n      entity.status = 1;  // set entity status to validation pending\r\n      EntityInvalid(entityId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets a new expiration date for the entity. It will trigger an entity validation through the oracle, so it must be paid.\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity\r\n   * @param expirationDate {uint} - The new expiration date of the entity\r\n   */\r\n  function setExpiration (Data storage self, uint entityId, uint expirationDate) isNotClosed(self, entityId) onlyEntity(self, entityId) isExpirationDateValid(expirationDate) public {\r\n    EntityData storage entity = self.entities[entityId];\r\n    entity.status = 1;\r\n    entity.expiration = expirationDate;\r\n    EntityExpirationSet(entityId);\r\n  }\r\n  \r\n  /**\r\n   * Sets a new renewal interval\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity\r\n   * @param renewalPeriod {uint} - The new renewal interval (in seconds)\r\n   */\r\n  function setRenewalPeriod (Data storage self, uint entityId, uint renewalPeriod) isNotClosed(self, entityId) onlyEntity(self, entityId) isRenewalPeriodValid(renewalPeriod) public {\r\n    EntityData storage entity = self.entities[entityId];\r\n    entity.renewalPeriod = renewalPeriod;\r\n    EntityRenewalSet(entityId);\r\n  }\r\n\r\n  /**\r\n   * Close an entity. This status will not allow further operations on the entity.\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity\r\n   */\r\n  function closeEntity(Data storage self, uint entityId) isNotClosed(self, entityId) onlyEntity(self, entityId) public {\r\n    self.entities[entityId].status = 8;\r\n    EntityClosed(entityId);\r\n  }\r\n\r\n  /**\r\n   * Registers a new signer in an entity\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity\r\n   * @param signerAddress {address} - The address of the signer to be registered\r\n   * @param signerDataHash {uint} - The IPFS multihash address of signer information in json format\r\n   */\r\n  function registerSigner(Data storage self, uint entityId, address signerAddress, string signerDataHash) isValidEntity(self, entityId) onlyEntity(self, entityId) signerIsNotYetRegistered(self, entityId, signerAddress) public {\r\n    self.entities[entityId].signersArr.push(signerAddress);\r\n    self.entities[entityId].signers[signerAddress] = SignerData({\r\n      signerDataHash: signerDataHash,\r\n      status: 1\r\n    });\r\n    SignerAdded(entityId, signerAddress);\r\n  }\r\n\r\n  /**\r\n   * Confirms signer registration\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity\r\n   * @param signerDataHash {string} - The ipfs data hash of the signer to confirm\r\n   */\r\n  function confirmSignerRegistration(Data storage self, uint entityId, string signerDataHash) isValidEntity(self, entityId) isWaitingConfirmation(self, entityId, signerDataHash) public {\r\n    self.entities[entityId].signers[msg.sender].status = 2;\r\n    SignerConfirmed(entityId, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Removes a signer from an entity\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity\r\n   * @param signerAddress {address} - The address of the signer to be removed\r\n   */\r\n  function removeSigner(Data storage self, uint entityId, address signerAddress) isValidEntity(self, entityId) onlyEntity(self, entityId) public {\r\n    internalRemoveSigner(self, entityId, signerAddress);\r\n  }\r\n\r\n\r\n  /**\r\n   * Removes a signer from an entity (internal use, without modifiers)\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity\r\n   * @param signerAddress {address} - The address of the signer to be removed\r\n   */\r\n  function internalRemoveSigner(Data storage self, uint entityId, address signerAddress) private {\r\n    EntityData storage entity = self.entities[entityId];\r\n    address[] storage signersArr = entity.signersArr;\r\n    SignerData storage signer = entity.signers[signerAddress];\r\n\r\n    if (bytes(signer.signerDataHash).length != 0 || signer.status != 0) {\r\n      signer.status = 0;\r\n      signer.signerDataHash = '';\r\n      delete entity.signers[signerAddress];\r\n\r\n      // Update array for iterator\r\n      uint i = 0;\r\n      for (i; signerAddress != signersArr[i]; i++) {}\r\n      signersArr[i] = signersArr[signersArr.length - 1];\r\n      signersArr[signersArr.length - 1] = 0;\r\n      signersArr.length = signersArr.length - 1;\r\n      \r\n      SignerRemoved(entityId, signerAddress);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Leave the specified entity (remove signer if found)\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity\r\n   */\r\n  function leaveEntity(Data storage self, uint entityId) signerBelongsToEntity(self, entityId) public {\r\n    internalRemoveSigner(self, entityId, msg.sender);\r\n  }\r\n\r\n  /**\r\n    * Checks if an entity can be validated\r\n    * @param entityId {uint} - The id of the entity to validate\r\n    * @param url {string} - The URL of the entity\r\n    * @return {bytes32} - The id of the oraclize query\r\n    */\r\n  function canValidateSigningEntity(Data storage self, uint entityId, string url) isNotClosed(self, entityId) isRegisteredURL(self, entityId, url) view public returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Checks if an entity validity can be renewed\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity to validate\r\n   * @param url {string} - The URL of the entity\r\n   * @return {bool} - True if renewal is possible\r\n   */\r\n  function canRenew(Data storage self, uint entityId, string url) isValidatedEntity(self, entityId) isRenewalPeriod(self, entityId) isRegisteredURL(self, entityId, url) view public returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Checks if an entity can issue certificate (from its signers)\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity to check\r\n   * @return {bool} - True if issuance is possible\r\n   */\r\n  function canIssueCertificates(Data storage self, uint entityId) isNotClosed(self, entityId) notExpired(self, entityId) signerBelongsToEntity(self, entityId) view public returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Updates entity data\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity\r\n   * @param entityDataHash {string} - The ipfs multihash address of the entity information in json format\r\n   * @param urlHash {bytes32} - The sha256 hash of the URL of the entity\r\n   */\r\n  function updateEntityData(Data storage self, uint entityId, string entityDataHash, bytes32 urlHash) isNotClosed(self, entityId) onlyEntity(self, entityId) public {\r\n    EntityData storage entity = self.entities[entityId];\r\n    entity.dataHash = entityDataHash;\r\n    entity.urlHash = urlHash;\r\n    entity.status = 1;\r\n    EntityDataUpdated(entityId);\r\n  }\r\n\r\n\r\n  /**\r\n   * Update the signer data in the requestes entities\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityIds {array} - The ids of the entities to update\r\n   * @param signerDataHash {string} - The ipfs multihash of the new signer data\r\n   */\r\n  function updateSignerData(Data storage self, uint[] entityIds, string signerDataHash) signerBelongsToEntities(self, entityIds) public {\r\n    uint[] memory updated = new uint[](entityIds.length);\r\n    for (uint i = 0; i < entityIds.length; i++) {\r\n      uint entityId = entityIds[i];\r\n      SignerData storage signer = self.entities[entityId].signers[msg.sender];\r\n\r\n      if (signer.status != 2) {\r\n        continue;\r\n      }\r\n      signer.status = 3;\r\n      signer.signerDataHash = signerDataHash;\r\n      updated[i] = entityId;\r\n    }\r\n    SignerDataUpdated(updated, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Accepts a new signer data update in the entity\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity\r\n   * @param signerAddress {address} - The address of the signer update to be accepted\r\n   * @param signerDataHash {uint} - The IPFS multihash address of signer information in json format to be accepted\r\n   */\r\n  function acceptSignerUpdate(Data storage self, uint entityId, address signerAddress, string signerDataHash) onlyEntity(self, entityId) notExpired(self, entityId) signerUpdateCanBeAccepted(self, entityId, signerAddress, signerDataHash) public {\r\n    EntityData storage entity = self.entities[entityId];\r\n    entity.signers[signerAddress].status = 2;\r\n    SignerUpdateAccepted(entityId, signerAddress);\r\n  }\r\n\r\n  // HELPER METHODS\r\n\r\n  /**\r\n   * Returns the max of two numbers\r\n   * @param a {uint} - Input number a\r\n   * @param b {uint} - Input number b\r\n   * @return {uint} - The maximum of the two inputs\r\n   */\r\n  function max(uint a, uint b) pure public returns(uint) {\r\n    if (a > b) {\r\n      return a;\r\n    } else {\r\n      return b;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Compares two strings\r\n   * @param _a {string} - One of the strings\r\n   * @param _b {string} - The other string\r\n   * @return {bool} True if the two strings are equal, false otherwise\r\n   */\r\n  function stringsEqual(string memory _a, string memory _b) pure internal returns (bool) {\r\n    bytes memory a = bytes(_a);\r\n    bytes memory b = bytes(_b);\r\n    if (a.length != b.length)\r\n      return false;\r\n    for (uint i = 0; i < a.length; i ++) {\r\n      if (a[i] != b[i])\r\n        return false;\r\n        }\r\n    return true;\r\n  }\r\n\r\n  function strConcat(string _a, string _b, string _c, string _d, string _e) pure internal returns (string){\r\n    bytes memory _ba = bytes(_a);\r\n    bytes memory _bb = bytes(_b);\r\n    bytes memory _bc = bytes(_c);\r\n    bytes memory _bd = bytes(_d);\r\n    bytes memory _be = bytes(_e);\r\n    string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n    bytes memory babcde = bytes(abcde);\r\n    uint k = 0;\r\n    for (uint i = 0; i < _ba.length; i++) {babcde[k++] = _ba[i];}\r\n    for (i = 0; i < _bb.length; i++) {babcde[k++] = _bb[i];}\r\n    for (i = 0; i < _bc.length; i++) {babcde[k++] = _bc[i];}\r\n    for (i = 0; i < _bd.length; i++) {babcde[k++] = _bd[i];}\r\n    for (i = 0; i < _be.length; i++) {babcde[k++] = _be[i];}\r\n    return string(babcde);\r\n  }\r\n\r\n  function strConcat(string _a, string _b, string _c, string _d) pure internal returns (string) {\r\n      return strConcat(_a, _b, _c, _d, \"\");\r\n  }\r\n\r\n  function strConcat(string _a, string _b, string _c) pure internal returns (string) {\r\n      return strConcat(_a, _b, _c, \"\", \"\");\r\n  }\r\n\r\n  function strConcat(string _a, string _b) pure internal returns (string) {\r\n      return strConcat(_a, _b, \"\", \"\", \"\");\r\n  }\r\n\r\n  // uint to string\r\n  function uintToString(uint v) pure public returns (string) {\r\n    uint maxlength = 100;\r\n    bytes memory reversed = new bytes(maxlength);\r\n    uint i = 0;\r\n    while (v != 0) {\r\n      uint remainder = v % 10;\r\n      v = v / 10;\r\n      reversed[i++] = byte(48 + remainder);\r\n    }\r\n    bytes memory s = new bytes(i); // i + 1 is inefficient\r\n    for (uint j = 0; j < i; j++) {\r\n        s[j] = reversed[i - j - 1]; // to avoid the off-by-one error\r\n    }\r\n    string memory str = string(s); // memory isn't implicitly convertible to storage\r\n    return str;\r\n  }\r\n\r\n  /**\r\n   * Set the oraclize query id of the last request\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param id {uint} - The id of the entity\r\n   * @param queryId {bytes32} - The query id from the oraclize request\r\n   */\r\n  function setOraclizeQueryId(Data storage self, uint id, bytes32 queryId) public {\r\n    self.entities[id].oraclizeQueryId = queryId;\r\n  }\r\n\r\n  // Helper functions\r\n\r\n  /**\r\n   * Returns True if specified entity is validated or waiting to be renewed. False otherwise.\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param id {uint} - The id of the entity to check \r\n   * @return {bool} - True if the entity is validated\r\n   */\r\n  function isValidated(Data storage self, uint id) view public returns (bool) {\r\n    return (id > 0 && (self.entities[id].status == 2 || self.entities[id].status == 4));\r\n  }\r\n\r\n /**\r\n  * Returns True if specified entity is not expired. False otherwise.\r\n  * @param self {object} - The data containing the entity mappings\r\n  * @param id {uint} - The id of the entity to check \r\n  * @return {bool} - True if the entity is not expired\r\n  */\r\n  function isExpired(Data storage self, uint id) view public returns (bool) {\r\n    return (id > 0 && (self.entities[id].expiration < now));\r\n  }\r\n\r\n  /**\r\n  * Returns True if specified entity is closed.\r\n  * @param self {object} - The data containing the entity mappings\r\n  * @param id {uint} - The id of the entity to check \r\n  * @return {bool} - True if the entity is closed\r\n  */\r\n  function isClosed(Data storage self, uint id) view public returns (bool) {\r\n    return self.entities[id].status == 8;\r\n  }\r\n\r\n /**\r\n   * Returns True if specified entity is validated and not expired\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param id {uint} - The id of the entity to check \r\n   * @return {bool} - True if the entity is validated\r\n   */\r\n  function isValid(Data storage self, uint id) view public returns (bool) {\r\n    return isValidated(self, id) && !isExpired(self, id) && !isClosed(self, id);\r\n  }\r\n\r\n /**\r\n   * Returns True if specified entity exists\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param id {uint} - The id of the entity to check \r\n   * @return {bool} - True if the entity exists\r\n   */\r\n  function exists(Data storage self, uint id) view public returns(bool) {\r\n    EntityData storage entity = self.entities[id];\r\n    return entity.status > 0;\r\n  }\r\n\r\n  // MODIFIERS\r\n  \r\n  /**\r\n   * Valid if the renewal period is less than 31 days\r\n   * @param renewalPeriod {uint} - The renewal period to check (in seconds)\r\n   */\r\n  modifier isRenewalPeriodValid(uint renewalPeriod) {\r\n    require(renewalPeriod >= 0 && renewalPeriod <= 32 * 24 * 60 * 60); // Renewal period less than 32 days\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Valid if the expiration date is in less than 31 days\r\n   * @param expiration {uint} - The expiration date (in seconds)\r\n   */\r\n  modifier isExpirationDateValid(uint expiration) {\r\n    require(expiration - now > 0 && expiration - now <= 32 * 24 * 60 * 60); // Expiration date is in less than 32 days in the future\r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * Returns True if specified entity is validated or waiting to be renewed. False otherwise.\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param id {uint} - The id of the entity to check \r\n   */\r\n  modifier isValidatedEntity(Data storage self, uint id) {\r\n    require (isValidated(self, id));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Returns True if specified entity is validated or waiting to be renewed, not expired and not closed. False otherwise.\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param id {uint} - The id of the entity to check \r\n   */\r\n  modifier isValidEntity(Data storage self, uint id) {\r\n    require (isValid(self, id));\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * Returns True if specified entity is validated. False otherwise.\r\n  * @param self {object} - The data containing the entity mappings\r\n  * @param id {uint} - The id of the entity to check \r\n  */\r\n  modifier notExpired(Data storage self, uint id) {\r\n    require (!isExpired(self, id));\r\n    _;  \r\n  }\r\n\r\n  /**\r\n    * Returns True if tansaction sent by owner of entity. False otherwise.\r\n    * @param self {object} - The data containing the entity mappings\r\n    * @param id {uint} - The id of the entity to check\r\n    */\r\n  modifier onlyEntity(Data storage self, uint id) {\r\n    require (msg.sender == self.entities[id].owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n    * Returns True if an URL is the one associated to the entity. False otherwise.\r\n    * @param self {object} - The data containing the entity mappings\r\n    * @param entityId {uint} - The id of the entity\r\n    * @param url {string} - The  URL\r\n    */\r\n  modifier isRegisteredURL(Data storage self, uint entityId, string url) {\r\n    require (self.entities[entityId].urlHash == sha256(url));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Returns True if current time is in renewal period for a valid entity. False otherwise.\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity to check \r\n   */\r\n  modifier isRenewalPeriod(Data storage self, uint entityId) {\r\n    EntityData storage entity = self.entities[entityId];\r\n    require (entity.renewalPeriod > 0 && entityId > 0 && (entity.expiration - entity.renewalPeriod < now) && entity.status == 2);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * True if sender is registered in entity. False otherwise.\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity \r\n   */\r\n  modifier signerBelongsToEntity(Data storage self, uint entityId) {\r\n    EntityData storage entity = self.entities[entityId];\r\n    require (entityId > 0 && (bytes(entity.signers[msg.sender].signerDataHash).length != 0) && (entity.signers[msg.sender].status == 2));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * True if sender is registered in all the entities. False otherwise.\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityIds {array} - The ids of the entities\r\n   */\r\n  modifier signerBelongsToEntities(Data storage self, uint[] entityIds) {\r\n    for (uint i = 0; i < entityIds.length; i++) {\r\n      uint entityId = entityIds[i];\r\n      EntityData storage entity = self.entities[entityId];\r\n      require (entityId > 0 && (entity.signers[msg.sender].status != 0));\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * True if the signer was not yet added to an entity.\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity \r\n   * @param signerAddress {address} - The signer to check\r\n   */\r\n  modifier signerIsNotYetRegistered(Data storage self, uint entityId, address signerAddress) {\r\n    EntityData storage entity = self.entities[entityId];\r\n    require (entity.signers[signerAddress].status == 0);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * True if the entity is validated AND the signer has a pending update with a matching IPFS data hash\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity \r\n   * @param signerAddress {address} - The signer to check\r\n   * @param signerDataHash {string} - The signer IPFS data pending of confirmation\r\n   */\r\n  modifier signerUpdateCanBeAccepted(Data storage self, uint entityId, address signerAddress, string signerDataHash) {\r\n    require (isValid(self, entityId));\r\n    EntityData storage entity = self.entities[entityId];\r\n    string memory oldSignerDatHash = entity.signers[signerAddress].signerDataHash;\r\n    require (entity.signers[signerAddress].status == 3 && stringsEqual(oldSignerDatHash, signerDataHash));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * True if the sender is registered as a signer in entityId and the status is VALIDATION_PENDING. False otherwise.\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity to check\r\n   */\r\n  modifier isWaitingConfirmation(Data storage self, uint entityId, string signerDataHash) {\r\n    EntityData storage entity = self.entities[entityId];\r\n    SignerData storage signer = entity.signers[msg.sender];\r\n    require ((bytes(signer.signerDataHash).length != 0) && (signer.status == 1) && stringsEqual(signer.signerDataHash, signerDataHash));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * True if the entity has not been closed\r\n   * @param self {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity to check\r\n   */\r\n  modifier isNotClosed(Data storage self, uint entityId) {\r\n    require(!isClosed(self, entityId));\r\n    _;\r\n  }\r\n\r\n  // EVENTS\r\n\r\n  event EntityCreated(uint indexed entityId);\r\n  event EntityValidated(uint indexed entityId);\r\n  event EntityDataUpdated(uint indexed entityId);\r\n  event EntityInvalid(uint indexed entityId);\r\n  event SignerAdded(uint indexed entityId, address indexed signerAddress);\r\n  event SignerDataUpdated(uint[] entities, address indexed signerAddress);\r\n  event SignerUpdateAccepted(uint indexed entityId, address indexed signerAddress);\r\n  event SignerRemoved(uint indexed entityId, address signerAddress);\r\n  event EntityClosed(uint indexed entityId);\r\n  event SignerConfirmed(uint indexed entityId, address signerAddress);\r\n  event EntityExpirationSet(uint indexed entityId);\r\n  event EntityRenewalSet(uint indexed entityId);  \r\n }\r\n\r\nlibrary SignLib {\r\n\r\n  // METHODS\r\n\r\n  /**\r\n   * Requests the signature for a certificate to an entity.\r\n   * Only one request possible (future ones are renewals)\r\n   * @param ed {object} - The data containing the entity mappings\r\n   * @param cd {object} - The data containing the certificate mappings\r\n   * @param certificateId {uint} - The id of the certificate\r\n   * @param entityId {uint} - The id of the entity\r\n   */\r\n  function requestSignatureToEntity(EntityLib.Data storage ed, CertsLib.Data storage cd, uint certificateId, uint entityId) canRequestSignature(ed, cd, certificateId) isValid(ed, entityId) notHasSigningRequest(cd, certificateId, entityId) public {\r\n    CertsLib.CertData storage certificate = cd.certificates[certificateId];\r\n    addMissingSignature(certificate, entityId, 0x1, 0);\r\n    EntitySignatureRequested(certificateId, entityId);\r\n  }\r\n\r\n  /**\r\n   * Requests the signature for a certificate to a peer\r\n   * Only one request possible (future ones are renewals)\r\n   * @param cd {object} - The data containing the certificate mappings\r\n   * @param certificateId {uint} - The id of the certificate\r\n   * @param peer {address} - The address of the peer\r\n   */\r\n  function requestSignatureToPeer(EntityLib.Data storage ed, CertsLib.Data storage cd, uint certificateId, address peer) canRequestSignature(ed, cd, certificateId) notHasPeerSignature(cd, certificateId, peer) public {\r\n    CertsLib.CertData storage certificate = cd.certificates[certificateId];\r\n    addMissingPeerSignature(certificate, peer, 0x1, 0);\r\n    PeerSignatureRequested(certificateId, peer);\r\n  }\r\n\r\n    /**\r\n    * Entity signs a certificate with pending request\r\n    * @param ed {object} - The data containing the entity mappings\r\n    * @param cd {object} - The data containing the certificate mappings\r\n    * @param entityId {uint} - The id of the entity\r\n    * @param certificateId {uint} - The id of the certificate\r\n    * @param expiration {uint} - The expiration time of the signature (in seconds)\r\n    * @param _purpose {bytes32} - The sha-256 hash of the purpose data\r\n    */\r\n  function signCertificateAsEntity(EntityLib.Data storage ed, CertsLib.Data storage cd, uint entityId, uint certificateId, uint expiration, bytes32 _purpose) isValid(ed, entityId) signerBelongsToEntity(ed, entityId) hasPendingSignatureOrIsOwner(ed, cd, certificateId, entityId) public {\r\n    CertsLib.CertData storage certificate = cd.certificates[certificateId];\r\n    bytes32 purpose = (_purpose == 0x0 || _purpose == 0x1) ? bytes32(0x2) : _purpose;\r\n    addMissingSignature(certificate, entityId, purpose, expiration);\r\n    CertificateSignedByEntity(certificateId, entityId, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * Peer signs a certificate with pending request\r\n   * @param cd {object} - The data containing the certificate mappings\r\n   * @param certificateId {uint} - The id of the certificate\r\n   * @param expiration {uint} - The expiration time of the signature (in seconds)\r\n   * @param _purpose {bytes32} - The sha-256 hash of the purpose data\r\n   */\r\n  function signCertificateAsPeer(CertsLib.Data storage cd, uint certificateId, uint expiration, bytes32 _purpose) hasPendingPeerSignatureOrIsOwner(cd, certificateId) public {\r\n    CertsLib.CertData storage certificate = cd.certificates[certificateId];\r\n    bytes32 purpose = (_purpose == 0x0 || _purpose == 0x1) ? bytes32(0x2) : _purpose;\r\n    addMissingPeerSignature(certificate, msg.sender, purpose, expiration);\r\n    CertificateSignedByPeer(certificateId, msg.sender);\r\n  }\r\n\r\n  // HELPER FUNCTIONS\r\n\r\n  /**\r\n   * Add an entity signature to the entity signatures array (if missing) and set the specified status and expiration\r\n   * @param certificate {object} - The certificate to add the peer signature\r\n   * @param entityId {uint} - The id of the entity signing the certificate\r\n   * @param status {uint} - The status/purpose of the signature\r\n   * @param expiration {uint} - The expiration time of the signature (in seconds)\r\n   */\r\n  function addMissingSignature(CertsLib.CertData storage certificate, uint entityId, bytes32 status, uint expiration) private {\r\n    uint[] storage entitiesArr = certificate.entitiesArr;\r\n    for (uint i = 0; i < entitiesArr.length && entitiesArr[i] != entityId; i++) {}\r\n    if (i == entitiesArr.length) {\r\n      entitiesArr.push(entityId);\r\n    }\r\n    certificate.entities[entityId].status = status;\r\n    certificate.entities[entityId].exp = expiration;\r\n  }\r\n\r\n  /**\r\n   * Add a peer signature to the signatures array (if missing) and set the specified status and expiration\r\n   * @param certificate {object} - The certificate to add the peer signature\r\n   * @param peer {address} - The address of the peer to add signature\r\n   * @param status {uint} - The status/purpose of the signature\r\n   * @param expiration {uint} - The expiration time of the signature (in seconds)\r\n   */\r\n  function addMissingPeerSignature(CertsLib.CertData storage certificate, address peer, bytes32 status, uint expiration) private {\r\n    address[] storage signaturesArr = certificate.signaturesArr;\r\n    for (uint i = 0; i < signaturesArr.length && signaturesArr[i] != peer; i++) {}\r\n    if (i == signaturesArr.length) {\r\n      signaturesArr.push(peer);\r\n    }\r\n    certificate.signatures[peer].status = status;\r\n    certificate.signatures[peer].exp = expiration;\r\n  }\r\n\r\n  // MODIFIERS\r\n\r\n  /**\r\n   * Returns True if msg.sender is the owner of the specified certificate or the sender is a confirmed signer of certificate entity. False otherwise.\r\n   * @param cd {object} - The data containing the certificate mappings\r\n   * @param id {uint} - The id of the certificate\r\n   */\r\n  modifier canRequestSignature(EntityLib.Data storage ed, CertsLib.Data storage cd, uint id) {\r\n    require (cd.certificates[id].owner == msg.sender ||\r\n      (cd.certificates[id].entityId > 0 && EntityLib.isValid(ed, cd.certificates[id].entityId) && ed.entities[cd.certificates[id].entityId].signers[msg.sender].status == 0x2)\r\n    );\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Returns True if specified entity is validated or waiting to be renewed, not expired and not closed. False otherwise.\r\n   * @param ed {object} - The data containing the entity mappings\r\n   * @param id {uint} - The id of the entity to check \r\n   */\r\n  modifier isValid(EntityLib.Data storage ed, uint id) {\r\n    require (EntityLib.isValid(ed, id));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Returns True if specified certificate has not been validated yet by entity. False otherwise.\r\n   * @param cd {object} - The data containing the certificate mappings\r\n   * @param certificateId {uint} - The id of the certificate to check\r\n   * @param entityId {uint} - The id of the entity to check\r\n   */\r\n  modifier notHasSigningRequest(CertsLib.Data storage cd, uint certificateId, uint entityId) {\r\n    require (cd.certificates[certificateId].entities[entityId].status != 0x1);\r\n    _;    \r\n  }\r\n\r\n  /**\r\n   * Returns True if specified certificate has not been signed yet. False otherwise;   \r\n   * @param cd {object} - The data containing the certificate mappings\r\n   * @param certificateId {uint} - The id of the certificate to check\r\n   * @param signerAddress {address} - The id of the certificate to check\r\n   */\r\n  modifier notHasPeerSignature(CertsLib.Data storage cd, uint certificateId, address signerAddress) {    \r\n    require (cd.certificates[certificateId].signatures[signerAddress].status != 0x1);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * True if sender address is the owner of the entity or is a signer registered in entity. False otherwise.\r\n   * @param ed {object} - The data containing the entity mappings\r\n   * @param entityId {uint} - The id of the entity \r\n   */\r\n  modifier signerBelongsToEntity(EntityLib.Data storage ed, uint entityId) {\r\n    require (entityId > 0 && (bytes(ed.entities[entityId].signers[msg.sender].signerDataHash).length != 0) && (ed.entities[entityId].signers[msg.sender].status == 0x2));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * True if a signature request has been sent to entity or the issuer of the certificate is requested entity itself. False otherwise.\r\n   * @param cd {object} - The data containing the certificate mappings\r\n   * @param certificateId {uint} - The id of the certificate to check\r\n   * @param entityId {uint} - The id of the entity to check\r\n   */\r\n  modifier hasPendingSignatureOrIsOwner(EntityLib.Data storage ed, CertsLib.Data storage cd, uint certificateId, uint entityId) {\r\n    require (cd.certificates[certificateId].entities[entityId].status == 0x1 || cd.certificates[certificateId].entityId == entityId);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * True if a signature is pending for the sender or the sender is the owner. False otherwise.\r\n   * @param cd {object} - The data containing the certificate mappings\r\n   * @param certificateId {uint} - The id of the certificate to check\r\n   */\r\n  modifier hasPendingPeerSignatureOrIsOwner(CertsLib.Data storage cd, uint certificateId) {\r\n    require (cd.certificates[certificateId].signatures[msg.sender].status == 0x1 || cd.certificates[certificateId].owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  // EVENTS\r\n  event EntitySignatureRequested(uint indexed certificateId, uint indexed entityId);\r\n  event PeerSignatureRequested(uint indexed certificateId, address indexed signerAddress);\r\n  event CertificateSignedByEntity(uint indexed certificateId, uint indexed entityId, address indexed signerAddress);\r\n  event CertificateSignedByPeer(uint indexed certificateId, address indexed signerAddress);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"ed\",\"type\":\"EntityLib.Data storage\"},{\"name\":\"cd\",\"type\":\"CertsLib.Data storage\"},{\"name\":\"entityId\",\"type\":\"uint256\"},{\"name\":\"certificateId\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"_purpose\",\"type\":\"bytes32\"}],\"name\":\"signCertificateAsEntity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ed\",\"type\":\"EntityLib.Data storage\"},{\"name\":\"cd\",\"type\":\"CertsLib.Data storage\"},{\"name\":\"certificateId\",\"type\":\"uint256\"},{\"name\":\"entityId\",\"type\":\"uint256\"}],\"name\":\"requestSignatureToEntity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ed\",\"type\":\"EntityLib.Data storage\"},{\"name\":\"cd\",\"type\":\"CertsLib.Data storage\"},{\"name\":\"certificateId\",\"type\":\"uint256\"},{\"name\":\"peer\",\"type\":\"address\"}],\"name\":\"requestSignatureToPeer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"cd\",\"type\":\"CertsLib.Data storage\"},{\"name\":\"certificateId\",\"type\":\"uint256\"},{\"name\":\"expiration\",\"type\":\"uint256\"},{\"name\":\"_purpose\",\"type\":\"bytes32\"}],\"name\":\"signCertificateAsPeer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"certificateId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"entityId\",\"type\":\"uint256\"}],\"name\":\"EntitySignatureRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"certificateId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"PeerSignatureRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"certificateId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"entityId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"CertificateSignedByEntity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"certificateId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"CertificateSignedByPeer\",\"type\":\"event\"}]","ContractName":"SignLib","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"EntityLib:aa163942ef4ccd8e9d6cc06cf5ebaca2dc31009f","SwarmSource":"bzzr://6fc3dcced7b5f3617e5ed1d09a6470b763694e3c77476921df0cf922c18c9f9d"}]}