{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Math {\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => bool) blockListed;\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        \r\n        require(\r\n            balances[msg.sender] >= _value\r\n            && _value > 0\r\n            && !blockListed[_to]\r\n            && !blockListed[msg.sender]\r\n        );\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(\r\n            _to != address(0)\r\n            && balances[msg.sender] >= _value\r\n            && balances[_from] >= _value\r\n            && _value > 0\r\n            && !blockListed[_to]\r\n            && !blockListed[msg.sender]\r\n        );\r\n\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    *\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n        assert(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        assert(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        assert(token.approve(spender, value));\r\n    }\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address internal owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished = false;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to mint tokens\r\n    * @param _to The address that will receive the minted tokens.\r\n    * @param _amount The amount of tokens to mint.\r\n    * @return A boolean that indicates if the operation was successful.\r\n    */\r\n\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to stop minting new tokens.\r\n    * @return True if the operation was successful.\r\n    */\r\n    function finishMinting() onlyOwner public returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n    function addBlockeddUser(address user) public onlyOwner {\r\n        blockListed[user] = true;\r\n    }\r\n\r\n    function removeBlockeddUser(address user) public onlyOwner  {\r\n        blockListed[user] = false;\r\n    }\r\n}\r\n\r\ncontract PullPayment {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public payments;\r\n    uint256 public totalPayments;\r\n\r\n    /**\r\n    * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n    * @param dest The destination address of the funds.\r\n    * @param amount The amount to transfer.\r\n    */\r\n    function asyncSend(address dest, uint256 amount) internal {\r\n        payments[dest] = payments[dest].add(amount);\r\n        totalPayments = totalPayments.add(amount);\r\n    }\r\n\r\n    /**\r\n    * @dev withdraw accumulated balance, called by payee.\r\n    */\r\n    function withdrawPayments() public {\r\n        address payee = msg.sender;\r\n        uint256 payment = payments[payee];\r\n\r\n        require(payment != 0);\r\n        require(this.balance >= payment);\r\n\r\n        totalPayments = totalPayments.sub(payment);\r\n        payments[payee] = 0;\r\n\r\n        assert(payee.send(payment));\r\n    }\r\n}\r\n\r\n\r\ncontract AutoCoinToken is MintableToken {\r\n\r\n  /**\r\n   *  @string name - Token Name\r\n   *  @string symbol - Token Symbol\r\n   *  @uint8 decimals - Token Decimals\r\n   *  @uint256 _totalSupply - Token Total Supply\r\n  */\r\n\r\n    string public constant name = \"AUTO COIN\";\r\n    string public constant symbol = \"AUTO COIN\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant _totalSupply = 400000000000000000000000000;\r\n\r\n/** Constructor AutoCoinToken */\r\n    constructor() public {\r\n        totalSupply = _totalSupply;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n\r\ncontract Crowdsale is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    *  @MintableToken token - Token Object\r\n    *  @address wallet - Wallet Address\r\n    *  @uint8 rate - Tokens per Ether\r\n    *  @uint256 weiRaised - Total funds raised in Ethers\r\n    */\r\n\r\n    MintableToken internal token;\r\n    address internal wallet;\r\n    uint256 public rate;\r\n    uint256 internal weiRaised;\r\n\r\n    /**\r\n    *  @uint256 privateSaleStartTime - Private-Sale Start Time\r\n    *  @uint256 privateSaleEndTime - Private-Sale End Time\r\n    *  @uint256 preSaleStartTime - Pre-Sale Start Time\r\n    *  @uint256 preSaleEndTime - Pre-Sale End Time\r\n    *  @uint256 preICOStartTime - Pre-ICO Start Time\r\n    *  @uint256 preICOEndTime - Pre-ICO End Time\r\n    *  @uint256 ICOstartTime - ICO Start Time\r\n    *  @uint256 ICOEndTime - ICO End Time\r\n    */\r\n    \r\n    uint256 public privateSaleStartTime;\r\n    uint256 public privateSaleEndTime;\r\n    uint256 public preSaleStartTime;\r\n    uint256 public preSaleEndTime;\r\n    uint256 public preICOStartTime;\r\n    uint256 public preICOEndTime;\r\n    uint256 public ICOstartTime;\r\n    uint256 public ICOEndTime;\r\n    \r\n    /**\r\n    *  @uint privateBonus - Private Bonus\r\n    *  @uint preSaleBonus - Pre-Sale Bonus\r\n    *  @uint preICOBonus - Pre-Sale Bonus\r\n    *  @uint firstWeekBonus - ICO 1st Week Bonus\r\n    *  @uint secondWeekBonus - ICO 2nd Week Bonus\r\n    *  @uint thirdWeekBonus - ICO 3rd Week Bonus\r\n    *  @uint forthWeekBonus - ICO 4th Week Bonus\r\n    *  @uint fifthWeekBonus - ICO 5th Week Bonus\r\n    */\r\n\r\n    uint256 internal privateSaleBonus;\r\n    uint256 internal preSaleBonus;\r\n    uint256 internal preICOBonus;\r\n    uint256 internal firstWeekBonus;\r\n    uint256 internal secondWeekBonus;\r\n    uint256 internal thirdWeekBonus;\r\n    uint256 internal forthWeekBonus;\r\n    uint256 internal fifthWeekBonus;\r\n\r\n    uint256 internal weekOne;\r\n    uint256 internal weekTwo;\r\n    uint256 internal weekThree;\r\n    uint256 internal weekFour;\r\n    uint256 internal weekFive;\r\n\r\n\r\n    uint256 internal privateSaleTarget;\r\n    uint256 internal preSaleTarget;\r\n    uint256 internal preICOTarget;\r\n\r\n    /**\r\n    *  @uint256 totalSupply - Total supply of tokens \r\n    *  @uint256 publicSupply - Total public Supply \r\n    *  @uint256 bountySupply - Total Bounty Supply\r\n    *  @uint256 reservedSupply - Total Reserved Supply \r\n    *  @uint256 privateSaleSupply - Total Private Supply from Public Supply  \r\n    *  @uint256 preSaleSupply - Total PreSale Supply from Public Supply \r\n    *  @uint256 preICOSupply - Total PreICO Supply from Public Supply\r\n    *  @uint256 icoSupply - Total ICO Supply from Public Supply\r\n    */\r\n\r\n    uint256 public totalSupply = SafeMath.mul(400000000, 1 ether);\r\n    uint256 internal publicSupply = SafeMath.mul(SafeMath.div(totalSupply,100),55);\r\n    uint256 internal bountySupply = SafeMath.mul(SafeMath.div(totalSupply,100),6);\r\n    uint256 internal reservedSupply = SafeMath.mul(SafeMath.div(totalSupply,100),39);\r\n    uint256 internal privateSaleSupply = SafeMath.mul(24750000, 1 ether);\r\n    uint256 internal preSaleSupply = SafeMath.mul(39187500, 1 ether);\r\n    uint256 internal preICOSupply = SafeMath.mul(39187500, 1 ether);\r\n    uint256 internal icoSupply = SafeMath.mul(116875000, 1 ether);\r\n\r\n\r\n    /**\r\n    *  @bool checkUnsoldTokens - Tokens will be added to bounty supply\r\n    *  @bool upgradePreSaleSupply - Boolean variable updates when the PrivateSale tokens added to PreSale supply\r\n    *  @bool upgradePreICOSupply - Boolean variable updates when the PreSale tokens added to PreICO supply\r\n    *  @bool upgradeICOSupply - Boolean variable updates when the PreICO tokens added to ICO supply\r\n    *  @bool grantFounderTeamSupply - Boolean variable updates when Team and Founder tokens minted\r\n    */\r\n\r\n    bool public checkUnsoldTokens;\r\n    bool internal upgradePreSaleSupply;\r\n    bool internal upgradePreICOSupply;\r\n    bool internal upgradeICOSupply;\r\n\r\n\r\n\r\n    /**\r\n    * event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value Wei's paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n    * function Crowdsale - Parameterized Constructor\r\n    * @param _startTime - StartTime of Crowdsale\r\n    * @param _endTime - EndTime of Crowdsale\r\n    * @param _rate - Tokens against Ether\r\n    * @param _wallet - MultiSignature Wallet Address\r\n    */\r\n\r\n    constructor(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) internal {\r\n        \r\n        require(_wallet != 0x0);\r\n\r\n        token = createTokenContract();\r\n\r\n        privateSaleStartTime = _startTime;\r\n        privateSaleEndTime = 1537952399;\r\n        preSaleStartTime = 1537952400;\r\n        preSaleEndTime = 1541581199;\r\n        preICOStartTime = 1541581200;\r\n        preICOEndTime = 1544000399; \r\n        ICOstartTime = 1544000400;\r\n        ICOEndTime = _endTime;\r\n\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n\r\n        privateSaleBonus = SafeMath.div(SafeMath.mul(rate,50),100);\r\n        preSaleBonus = SafeMath.div(SafeMath.mul(rate,30),100);\r\n        preICOBonus = SafeMath.div(SafeMath.mul(rate,30),100);\r\n        firstWeekBonus = SafeMath.div(SafeMath.mul(rate,20),100);\r\n        secondWeekBonus = SafeMath.div(SafeMath.mul(rate,15),100);\r\n        thirdWeekBonus = SafeMath.div(SafeMath.mul(rate,10),100);\r\n        forthWeekBonus = SafeMath.div(SafeMath.mul(rate,5),100);\r\n        \r\n\r\n        weekOne = SafeMath.add(ICOstartTime, 14 days);\r\n        weekTwo = SafeMath.add(weekOne, 14 days);\r\n        weekThree = SafeMath.add(weekTwo, 14 days);\r\n        weekFour = SafeMath.add(weekThree, 14 days);\r\n        weekFive = SafeMath.add(weekFour, 14 days);\r\n\r\n        privateSaleTarget = SafeMath.mul(4500, 1 ether);\r\n        preSaleTarget = SafeMath.mul(7125, 1 ether);\r\n        preICOTarget = SafeMath.mul(7125, 1 ether);\r\n\r\n        checkUnsoldTokens = false;\r\n        upgradeICOSupply = false;\r\n        upgradePreICOSupply = false;\r\n        upgradePreSaleSupply = false;\r\n    \r\n    }\r\n\r\n    /**\r\n    * function createTokenContract - Mintable Token Created\r\n    */\r\n\r\n    function createTokenContract() internal returns (MintableToken) {\r\n        return new MintableToken();\r\n    }\r\n    \r\n    /**\r\n    * function Fallback - Receives Ethers\r\n    */\r\n\r\n    function () payable public {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n        /**\r\n    * function preSaleTokens - Calculate Tokens in PreSale\r\n    */\r\n\r\n    function privateSaleTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\r\n        require(privateSaleSupply > 0);\r\n        require(weiAmount <= privateSaleTarget);\r\n\r\n        tokens = SafeMath.add(tokens, weiAmount.mul(privateSaleBonus));\r\n        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\r\n\r\n        require(privateSaleSupply >= tokens);\r\n\r\n        privateSaleSupply = privateSaleSupply.sub(tokens);        \r\n        privateSaleTarget = privateSaleTarget.sub(weiAmount);\r\n\r\n        return tokens;\r\n    }\r\n\r\n\r\n    /**\r\n    * function preSaleTokens - Calculate Tokens in PreSale\r\n    */\r\n\r\n    function preSaleTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\r\n        require(preSaleSupply > 0);\r\n        require(weiAmount <= preSaleTarget);\r\n\r\n        if (!upgradePreSaleSupply) {\r\n            preSaleSupply = SafeMath.add(preSaleSupply, privateSaleSupply);\r\n            preSaleTarget = SafeMath.add(preSaleTarget, privateSaleTarget);\r\n            upgradePreSaleSupply = true;\r\n        }\r\n\r\n        tokens = SafeMath.add(tokens, weiAmount.mul(preSaleBonus));\r\n        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\r\n\r\n        require(preSaleSupply >= tokens);\r\n\r\n        preSaleSupply = preSaleSupply.sub(tokens);        \r\n        preSaleTarget = preSaleTarget.sub(weiAmount);\r\n        return tokens;\r\n    }\r\n\r\n    /**\r\n        * function preICOTokens - Calculate Tokens in PreICO\r\n        */\r\n\r\n    function preICOTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\r\n            \r\n        require(preICOSupply > 0);\r\n        require(weiAmount <= preICOTarget);\r\n\r\n        if (!upgradePreICOSupply) {\r\n            preICOSupply = SafeMath.add(preICOSupply, preSaleSupply);\r\n            preICOTarget = SafeMath.add(preICOTarget, preSaleTarget);\r\n            upgradePreICOSupply = true;\r\n        }\r\n\r\n        tokens = SafeMath.add(tokens, weiAmount.mul(preICOBonus));\r\n        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\r\n        \r\n        require(preICOSupply >= tokens);\r\n        \r\n        preICOSupply = preICOSupply.sub(tokens);        \r\n        preICOTarget = preICOTarget.sub(weiAmount);\r\n        return tokens;\r\n    }\r\n\r\n    /**\r\n    * function icoTokens - Calculate Tokens in ICO\r\n    */\r\n    \r\n    function icoTokens(uint256 weiAmount, uint256 tokens, uint256 accessTime) internal returns (uint256) {\r\n            \r\n        require(icoSupply > 0);\r\n\r\n        if (!upgradeICOSupply) {\r\n            icoSupply = SafeMath.add(icoSupply,preICOSupply);\r\n            upgradeICOSupply = true;\r\n        }\r\n        \r\n        if (accessTime <= weekOne) {\r\n            tokens = SafeMath.add(tokens, weiAmount.mul(firstWeekBonus));\r\n        } else if (accessTime <= weekTwo) {\r\n            tokens = SafeMath.add(tokens, weiAmount.mul(secondWeekBonus));\r\n        } else if ( accessTime < weekThree ) {\r\n            tokens = SafeMath.add(tokens, weiAmount.mul(thirdWeekBonus));\r\n        } else if ( accessTime < weekFour ) {\r\n            tokens = SafeMath.add(tokens, weiAmount.mul(forthWeekBonus));\r\n        } else if ( accessTime < weekFive ) {\r\n            tokens = SafeMath.add(tokens, weiAmount.mul(fifthWeekBonus));\r\n        }\r\n        \r\n        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\r\n        icoSupply = icoSupply.sub(tokens);        \r\n\r\n        return tokens;\r\n    }\r\n\r\n    /**\r\n    * function buyTokens - Collect Ethers and transfer tokens\r\n    */\r\n\r\n    function buyTokens(address beneficiary) whenNotPaused internal {\r\n\r\n        require(beneficiary != 0x0);\r\n        require(validPurchase());\r\n        uint256 accessTime = now;\r\n        uint256 tokens = 0;\r\n        uint256 weiAmount = msg.value;\r\n\r\n        require((weiAmount >= (100000000000000000)) && (weiAmount <= (20000000000000000000)));\r\n\r\n        if ((accessTime >= privateSaleStartTime) && (accessTime < privateSaleEndTime)) {\r\n            tokens = privateSaleTokens(weiAmount, tokens);\r\n        } else if ((accessTime >= preSaleStartTime) && (accessTime < preSaleEndTime)) {\r\n            tokens = preSaleTokens(weiAmount, tokens);\r\n        } else if ((accessTime >= preICOStartTime) && (accessTime < preICOEndTime)) {\r\n            tokens = preICOTokens(weiAmount, tokens);\r\n        } else if ((accessTime >= ICOstartTime) && (accessTime <= ICOEndTime)) { \r\n            tokens = icoTokens(weiAmount, tokens, accessTime);\r\n        } else {\r\n            revert();\r\n        }\r\n        \r\n        publicSupply = publicSupply.sub(tokens);\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        token.mint(beneficiary, tokens);\r\n        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n        forwardFunds();\r\n    }\r\n\r\n    /**\r\n    * function forwardFunds - Transfer funds to wallet\r\n    */\r\n\r\n    function forwardFunds() internal {\r\n        wallet.transfer(msg.value);\r\n    }\r\n\r\n    /**\r\n    * function validPurchase - Checks the purchase is valid or not\r\n    * @return true - Purchase is withPeriod and nonZero\r\n    */\r\n\r\n    function validPurchase() internal view returns (bool) {\r\n        bool withinPeriod = now >= privateSaleStartTime && now <= ICOEndTime;\r\n        bool nonZeroPurchase = msg.value != 0;\r\n        return withinPeriod && nonZeroPurchase;\r\n    }\r\n\r\n    /**\r\n    * function hasEnded - Checks the ICO ends or not\r\n    * @return true - ICO Ends\r\n    */\r\n    \r\n    function hasEnded() public view returns (bool) {\r\n        return now > ICOEndTime;\r\n    }\r\n\r\n    /**\r\n    * function unsoldToken - Function used to transfer all \r\n    *               unsold public tokens to reserve supply\r\n    */\r\n\r\n    function unsoldToken() onlyOwner public {\r\n        require(hasEnded());\r\n        require(!checkUnsoldTokens);\r\n        \r\n        checkUnsoldTokens = true;\r\n        bountySupply = SafeMath.add(bountySupply, publicSupply);\r\n        publicSupply = 0;\r\n\r\n    }\r\n\r\n    /** \r\n    * function getTokenAddress - Get Token Address \r\n    */\r\n\r\n    function getTokenAddress() onlyOwner view public returns (address) {\r\n        return token;\r\n    }\r\n}\r\n\r\ncontract CappedCrowdsale is Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public cap;\r\n\r\n    constructor(uint256 _cap) public {\r\n        require(_cap > 0);\r\n        cap = _cap;\r\n    }\r\n\r\n    // overriding Crowdsale#validPurchase to add extra cap logic\r\n    // @return true if investors can buy at the moment\r\n    function validPurchase() internal view returns (bool) {\r\n        return super.validPurchase() && weiRaised.add(msg.value) <= cap;\r\n    }\r\n\r\n    // overriding Crowdsale#hasEnded to add cap logic\r\n    // @return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        return super.hasEnded() || weiRaised >= cap;\r\n    }\r\n}\r\n\r\ncontract CrowdsaleFunctions is Crowdsale {\r\n\r\n /** \r\n  * function bountyFunds - Transfer bounty tokens via AirDrop\r\n  * @param beneficiary address where owner wants to transfer tokens\r\n  * @param tokens value of token\r\n  */\r\n\r\n    function bountyFunds(address[] beneficiary, uint256[] tokens) public onlyOwner {\r\n\r\n        for (uint256 i = 0; i < beneficiary.length; i++) {\r\n            tokens[i] = SafeMath.mul(tokens[i],1 ether); \r\n\r\n            require(beneficiary[i] != 0x0);\r\n            require(bountySupply >= tokens[i]);\r\n            \r\n            bountySupply = SafeMath.sub(bountySupply,tokens[i]);\r\n            token.mint(beneficiary[i], tokens[i]);\r\n        }\r\n    }\r\n\r\n\r\n  /** \r\n   * function grantReservedToken - Transfer advisor,team and founder tokens  \r\n   */\r\n\r\n    function grantReservedToken(address beneficiary, uint256 tokens) public onlyOwner {\r\n        require(beneficiary != 0x0);\r\n        require(reservedSupply > 0);\r\n\r\n        tokens = SafeMath.mul(tokens,1 ether);\r\n        require(reservedSupply >= tokens);\r\n        reservedSupply = SafeMath.sub(reservedSupply,tokens);\r\n        token.mint(beneficiary, tokens);\r\n    }\r\n\r\n/** \r\n *.function transferToken - Used to transfer tokens to investors who pays us other than Ethers\r\n * @param beneficiary - Address where owner wants to transfer tokens\r\n * @param tokens -  Number of tokens\r\n */\r\n    function transferToken(address beneficiary, uint256 tokens) onlyOwner public {\r\n        \r\n        require(beneficiary != 0x0);\r\n        require(publicSupply > 0);\r\n        tokens = SafeMath.mul(tokens,1 ether);\r\n        require(publicSupply >= tokens);\r\n        publicSupply = SafeMath.sub(publicSupply,tokens);\r\n        token.mint(beneficiary, tokens);\r\n    }\r\n\r\n    function addBlockListed(address user) public onlyOwner {\r\n        token.addBlockeddUser(user);\r\n    }\r\n    \r\n    function removeBlockListed(address user) public onlyOwner {\r\n        token.removeBlockeddUser(user);\r\n    }\r\n}\r\n\r\ncontract FinalizableCrowdsale is Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    bool isFinalized = false;\r\n\r\n    event Finalized();\r\n\r\n    /**\r\n    * @dev Must be called after crowdsale ends, to do some extra finalization\r\n    * work. Calls the contract's finalization function.\r\n    */\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n        require(hasEnded());\r\n\r\n        finalization();\r\n        emit Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Can be overridden to add finalization logic. The overriding function\r\n    * should call super.finalization() to ensure the chain of finalization is\r\n    * executed entirely.\r\n    */\r\n    function finalization() internal view {\r\n    }\r\n}\r\n\r\ncontract Migrations {\r\n    address public owner;\r\n    uint public last_completed_migration;\r\n\r\n    modifier restricted() {\r\n        if (msg.sender == owner) _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setCompleted(uint completed) public restricted {\r\n        last_completed_migration = completed;\r\n    }\r\n\r\n    function upgrade(address new_address) public restricted {\r\n        Migrations upgraded = Migrations(new_address);\r\n        upgraded.setCompleted(last_completed_migration);\r\n    }\r\n}\r\n\r\ncontract RefundableCrowdsale is FinalizableCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    // minimum amount of funds to be raised in weis\r\n    uint256 public goal;\r\n    bool private _goalReached = false;\r\n    // refund vault used to hold funds while crowdsale is running\r\n    RefundVault private vault;\r\n\r\n    constructor(uint256 _goal) public {\r\n        require(_goal > 0);\r\n        vault = new RefundVault(wallet);\r\n        goal = _goal;\r\n    }\r\n\r\n    // We're overriding the fund forwarding from Crowdsale.\r\n    // In addition to sending the funds, we want to call\r\n    // the RefundVault deposit function\r\n    function forwardFunds() internal {\r\n        vault.deposit.value(msg.value)(msg.sender);\r\n    }\r\n\r\n    // if crowdsale is unsuccessful, investors can claim refunds here\r\n    function claimRefund() public {\r\n        require(isFinalized);\r\n        require(!goalReached());\r\n\r\n        vault.refund(msg.sender);\r\n    }\r\n\r\n    // vault finalization task, called when owner calls finalize()\r\n    function finalization() internal view {\r\n        if (goalReached()) {\r\n            vault.close();\r\n        } else {\r\n            vault.enableRefunds();\r\n        }\r\n        super.finalization();\r\n    }\r\n\r\n    function goalReached() public payable returns (bool) {\r\n        if (weiRaised >= goal) {\r\n            _goalReached = true;\r\n            return true;\r\n        } else if (_goalReached) {\r\n            return true;\r\n        } \r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function updateGoalCheck() onlyOwner public {\r\n        _goalReached = true;\r\n    }\r\n\r\n    function getVaultAddress() onlyOwner view public returns (address) {\r\n        return vault;\r\n    }\r\n}\r\n\r\ncontract RefundVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum State { Active, Refunding, Closed }\r\n\r\n    mapping (address => uint256) public deposited;\r\n    address public wallet;\r\n    State public state;\r\n\r\n    event Closed();\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    constructor(address _wallet) public {\r\n        require(_wallet != 0x0);\r\n        wallet = _wallet;\r\n        state = State.Active;\r\n    }\r\n\r\n    function deposit(address investor) onlyOwner public payable {\r\n        require(state == State.Active);\r\n        deposited[investor] = deposited[investor].add(msg.value);\r\n    }\r\n\r\n    function close() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Closed;\r\n        emit Closed();\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    function enableRefunds() onlyOwner public {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        emit RefundsEnabled();\r\n    }\r\n\r\n    function refund(address investor) public {\r\n        require(state == State.Refunding);\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        emit Refunded(investor, depositedValue);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeBlockeddUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"addBlockeddUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"AutoCoinToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7d4c4302d0a26cf51a0d8b47208678631c851feb273e8874cdd6c3106023182c"}]}