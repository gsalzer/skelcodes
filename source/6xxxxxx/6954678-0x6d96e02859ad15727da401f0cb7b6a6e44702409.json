{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface TokenInterface {\r\n     function totalSupply() external constant returns (uint);\r\n     function balanceOf(address tokenOwner) external constant returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\r\n     function transfer(address to, uint tokens) external returns (bool success);\r\n     function approve(address spender, uint tokens) external returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n     function burn(uint256 _value) external;\r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n     event Burn(address indexed burner, uint256 value);\r\n}\r\n\r\n contract FeedCrowdsale is Ownable{\r\n  using SafeMath for uint256;\r\n \r\n  // The token being sold\r\n  TokenInterface public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public ratePerWei = 11905;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n  \r\n  uint256 public weiRaisedInPreICO;\r\n\r\n  uint256 TOKENS_SOLD;\r\n\r\n  bool isCrowdsalePaused = false;\r\n  \r\n  uint256 decimals = 18;\r\n  \r\n  uint256 step1Contributions = 0;\r\n  uint256 step2Contributions = 0;\r\n  uint256 step3Contributions = 0;\r\n  uint256 step4Contributions = 0;\r\n  uint256 step5Contributions = 0;\r\n  uint256 step6Contributions = 0;\r\n  uint256 step7Contributions = 0;\r\n  uint256 step8Contributions = 0;\r\n  \r\n  \r\n  \r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  constructor(address _wallet, address _tokenAddress) public \r\n  {\r\n    require(_wallet != 0x0);\r\n    owner = _wallet;\r\n    token = TokenInterface(_tokenAddress);\r\n  }\r\n  \r\n  \r\n   // fallback function can be used to buy tokens\r\n   function () public  payable {\r\n     buyTokens(msg.sender);\r\n    }\r\n    \r\n    function calculateTokens(uint etherAmount) public returns (uint tokenAmount) {\r\n        \r\n        if (etherAmount >= 0.05 ether && etherAmount < 0.09 ether)\r\n        {\r\n            //step 1 \r\n            require(step1Contributions<1000);\r\n            tokenAmount = uint(1000).mul(uint(10)** decimals);\r\n            step1Contributions = step1Contributions.add(1);\r\n        }\r\n        else if (etherAmount>=0.09 ether && etherAmount < 0.24 ether )\r\n        {\r\n            //step 2\r\n            require(step2Contributions<1000);\r\n            tokenAmount = uint(2000).mul(uint(10)** decimals);\r\n            step2Contributions = step2Contributions.add(1);\r\n            \r\n        }\r\n        else if (etherAmount>=0.24 ether && etherAmount<0.46 ether )\r\n        {\r\n            //step 3 \r\n            require(step3Contributions<1000);\r\n            tokenAmount = uint(6000).mul(uint(10)** decimals);\r\n            step3Contributions = step3Contributions.add(1);\r\n        \r\n        }\r\n        else if (etherAmount>=0.46 ether && etherAmount<0.90 ether)\r\n        {\r\n            //step 4 \r\n            require(step4Contributions<1000);\r\n            tokenAmount = uint(13000).mul(uint(10)** decimals);\r\n            step4Contributions = step4Contributions.add(1);\r\n        \r\n        }\r\n        else if (etherAmount>=0.90 ether && etherAmount<2.26 ether)\r\n        {\r\n            //step 5 \r\n            require(step5Contributions<1000);\r\n            tokenAmount = uint(25000).mul(uint(10)** decimals);\r\n            step5Contributions = step5Contributions.add(1);\r\n        \r\n        }\r\n        else if (etherAmount>=2.26 ether && etherAmount<4.49 ether)\r\n        {\r\n            //step 6 \r\n            require(step6Contributions<1000);\r\n            tokenAmount = uint(60000).mul(uint(10)** decimals);\r\n            step6Contributions = step6Contributions.add(1);\r\n        \r\n        }\r\n        else if (etherAmount>=4.49 ether && etherAmount<8.99 ether)\r\n        {\r\n            //step 7 \r\n            require(step7Contributions<1000);\r\n            tokenAmount = uint(130000).mul(uint(10)** decimals);\r\n            step7Contributions = step7Contributions.add(1);\r\n        \r\n        }\r\n        else if (etherAmount>=8.99 ether && etherAmount<=10 ether)\r\n        {\r\n            //step 8\r\n            require(step8Contributions<1000);\r\n            tokenAmount = uint(200000).mul(uint(10)** decimals);\r\n            step8Contributions = step8Contributions.add(1);\r\n        \r\n        }\r\n        else \r\n        {\r\n            revert();\r\n        }\r\n    }\r\n  // low level token purchase function\r\n  \r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(isCrowdsalePaused == false);\r\n    require(msg.value>0);\r\n    \r\n    uint256 weiAmount = msg.value;\r\n    \r\n    // calculate token amount to be created\r\n    uint256 tokens = calculateTokens(weiAmount);\r\n    \r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    token.transfer(beneficiary,tokens);\r\n    \r\n    emit TokenPurchase(owner, beneficiary, weiAmount, tokens);\r\n    TOKENS_SOLD = TOKENS_SOLD.add(tokens);\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  function forwardFunds() internal {\r\n    owner.transfer(msg.value);\r\n  }\r\n\r\n \r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n    \r\n    /**\r\n    * function to change the rate of tokens\r\n    * can only be called by owner wallet\r\n    **/\r\n    function setPriceRate(uint256 newPrice) public onlyOwner {\r\n        ratePerWei = newPrice;\r\n    }\r\n    \r\n     /**\r\n     * function to pause the crowdsale \r\n     * can only be called from owner wallet\r\n     **/\r\n     \r\n    function pauseCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = true;\r\n    }\r\n\r\n    /**\r\n     * function to resume the crowdsale if it is paused\r\n     * can only be called from owner wallet\r\n     **/ \r\n    function resumeCrowdsale() public onlyOwner {\r\n        isCrowdsalePaused = false;\r\n    }\r\n    \r\n     function getUnsoldTokensBack() public onlyOwner\r\n     {\r\n        uint contractTokenBalance = token.balanceOf(address(this));\r\n        require(contractTokenBalance>0);\r\n        token.transfer(owner,contractTokenBalance);\r\n     }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"getUnsoldTokensBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaisedInPreICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPriceRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ratePerWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FeedCrowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000037c75fd38fb981cb197ae397a29f41f3fa25316d00000000000000000000000017e93704f59ed67279a56a72c675bb70fa838f5a","Library":"","SwarmSource":"bzzr://b56ca2f88e484687454f16bb253b93018d82a8dae39a4df287d9898529bc6228"}]}