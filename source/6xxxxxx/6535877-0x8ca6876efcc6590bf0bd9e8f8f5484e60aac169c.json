{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract SEcoinAbstract {function unlock() public;}\r\n\r\ncontract SECrowdsale {\r\n        \r\n        using SafeMath for uint256;\r\n        \r\n        // The token being sold\r\n        address constant public SEcoin = 0xe45b7cd82ac0f3f6cfc9ecd165b79d6f87ed2875;//\"SEcoin address\"\r\n        \r\n        // start and end timestamps where investments are allowed (both inclusive)\r\n        uint256 public startTime;\r\n        uint256 public endTime;\r\n          \r\n        // address where funds are collected\r\n        address public SEcoinWallet = 0x5C737AdC09a0cFA1C9b83E199971a677163ddd07;//\"SEcoin all token inside & ICO ether\";\r\n        address public SEcoinsetWallet = 0x52873e9191f21a26ddc8b65e5dddbac6b73b69e8;//\"control SEcoin SmartContract address\"\r\n          \r\n        // how many token units a buyer gets per wei\r\n        uint256 public rate = 6000;//\"ICO start rate\"\r\n        \r\n        // amount of raised money in wei\r\n        uint256 public weiRaised;\r\n        uint256 public weiSold;\r\n          \r\n        //storage address and amount\r\n        address public SEcoinbuyer;\r\n        address[] public SEcoinbuyerevent;\r\n        uint256[] public SEcoinAmountsevent;\r\n        uint256[] public SEcoinmonth;\r\n        uint public firstbuy;\r\n        uint SEcoinAmounts ;\r\n        uint SEcoinAmountssend;\r\n\r\n          \r\n        mapping(address => uint) public icobuyer;\r\n        mapping(address => uint) public icobuyer2;\r\n          \r\n        event TokenPurchase(address indexed purchaser, address indexed SEcoinbuyer, uint256 value, uint256 amount,uint SEcoinAmountssend);\r\n        \r\n     // fallback function can be used to buy tokens\r\n    function () external payable {buyTokens(msg.sender);}\r\n      \r\n    //check buyer\r\n    function buyer(address SEcoinbuyer) internal{\r\n          \r\n        if(icobuyer[msg.sender]==0){\r\n            icobuyer[msg.sender] = firstbuy;\r\n            icobuyer2[msg.sender] = firstbuy;\r\n            firstbuy++;\r\n            //event buyer \r\n            SEcoinbuyerevent.push(SEcoinbuyer);\r\n            SEcoinAmountsevent.push(SEcoinAmounts);\r\n            SEcoinmonth.push(0);\r\n    \r\n        }else if(icobuyer[msg.sender]!=0){\r\n            uint i = icobuyer2[msg.sender];\r\n            SEcoinAmountsevent[i]=SEcoinAmountsevent[i]+SEcoinAmounts;\r\n            icobuyer2[msg.sender]=icobuyer[msg.sender];}\r\n        }\r\n    \r\n      // low level token purchase function\r\n    function buyTokens(address SEcoinbuyer) public payable {\r\n        require(SEcoinbuyer != address(0x0));\r\n        require(selltime());\r\n        require(msg.value>=1*1e16 && msg.value<=200*1e18);\r\n        \r\n        // calculate token amount to be created\r\n        SEcoinAmounts = calculateObtainedSEcoin(msg.value);\r\n        SEcoinAmountssend= calculateObtainedSEcoinsend(SEcoinAmounts);\r\n        \r\n        // update state\r\n        weiRaised = weiRaised.add(msg.value);\r\n        weiSold = weiSold.add(SEcoinAmounts);\r\n            \r\n        //sendtoken\r\n        require(ERC20Basic(SEcoin).transfer(SEcoinbuyer, SEcoinAmountssend));\r\n            \r\n        //call function\r\n        buyer(msg.sender);\r\n        checkRate();\r\n        forwardFunds();\r\n            \r\n        //write event \r\n        emit TokenPurchase(msg.sender, SEcoinbuyer, msg.value, SEcoinAmounts,SEcoinAmountssend);\r\n    }\r\n    \r\n    // send ether to the fund collection wallet\r\n    // override to create custom fund forwarding mechanisms\r\n    function forwardFunds() internal {\r\n        SEcoinWallet.transfer(msg.value);\r\n    }\r\n    //calculate Amount\r\n    function calculateObtainedSEcoin(uint256 amountEtherInWei) public view returns (uint256) {\r\n        checkRate();\r\n        return amountEtherInWei.mul(rate);\r\n    }\r\n    function calculateObtainedSEcoinsend (uint SEcoinAmounts)public view returns (uint){\r\n        return SEcoinAmounts.div(10);\r\n    }\r\n    \r\n    // return true if the transaction can buy tokens\r\n    function selltime() internal view returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        return withinPeriod;\r\n    }\r\n    \r\n    // return true if crowdsale event has ended\r\n    function hasEnded() public view returns (bool) {\r\n        bool isEnd = now > endTime || weiRaised >= 299600000*1e18;//ico max token\r\n        return isEnd;\r\n    }\r\n    \r\n    //releaseSEcoin only admin \r\n    function releaseSEcoin() public returns (bool) {\r\n        require (msg.sender == SEcoinsetWallet);\r\n        require (hasEnded() && startTime != 0);\r\n        SEcoinAbstract(SEcoin).unlock();\r\n    }\r\n    \r\n    //getunselltoken only admin\r\n    function getunselltoken()public returns(bool){\r\n        require (msg.sender == SEcoinsetWallet);\r\n        require (hasEnded() && startTime != 0);\r\n        uint256 remainedSEcoin = ERC20Basic(SEcoin).balanceOf(this)-weiSold;\r\n        ERC20Basic(SEcoin).transfer(SEcoinWallet, remainedSEcoin);    \r\n    }\r\n    \r\n    //backup\r\n    function getunselltokenB()public returns(bool){\r\n        require (msg.sender == SEcoinsetWallet);\r\n        require (hasEnded() && startTime != 0);\r\n        uint256 remainedSEcoin = ERC20Basic(SEcoin).balanceOf(this);\r\n        ERC20Basic(SEcoin).transfer(SEcoinWallet, remainedSEcoin);    \r\n    }\r\n    \r\n    // be sure to get the token ownerships\r\n    function start() public returns (bool) {\r\n        require (msg.sender == SEcoinsetWallet);\r\n        require (firstbuy==0);\r\n        startTime = 1541001600;//startTime\r\n        endTime = 1543593599;//endTime\r\n        SEcoinbuyerevent.push(SEcoinbuyer);\r\n        SEcoinAmountsevent.push(SEcoinAmounts);\r\n        SEcoinmonth.push(0);\r\n        firstbuy=1;\r\n    }\r\n    \r\n    //Change setting Wallet\r\n    function changeSEcoinWallet(address _SEcoinsetWallet) public returns (bool) {\r\n        require (msg.sender == SEcoinsetWallet);\r\n        SEcoinsetWallet = _SEcoinsetWallet;\r\n    }\r\n      \r\n    //ckeckRate\r\n    function checkRate() public returns (bool) {\r\n        if (now>=startTime && now< 1541433599){\r\n            rate = 6000;//section one\r\n        }else if (now >= 1541433599 && now < 1542297599) {\r\n            rate = 5000;//section two\r\n        }else if (now >= 1542297599 && now < 1543161599) {\r\n            rate = 4000;//section three\r\n        }else if (now >= 1543161599)  {\r\n            rate = 3500;//section four\r\n        }\r\n    }\r\n      \r\n    //get ICOtoken in everyMonth\r\n    function getICOtoken(uint number)public returns(string){\r\n        require(SEcoinbuyerevent[number] == msg.sender);\r\n        require(now>=1543593600&&now<=1567267199);\r\n        uint  _month;\r\n        \r\n        //December 2018 two\r\n        if(now>=1543593600 && now<=1546271999 && SEcoinmonth[number]==0){\r\n            require(SEcoinmonth[number]==0);\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\r\n            SEcoinmonth[number]=1;\r\n        }\r\n        \r\n        //February January 2019 three\r\n        else if(now>=1546272000 && now<=1548950399 && SEcoinmonth[number]<=1){\r\n            if(SEcoinmonth[number]==1){\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\r\n            SEcoinmonth[number]=2;\r\n            }else if(SEcoinmonth[number]<1){\r\n            _month = 2-SEcoinmonth[number];\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \r\n            SEcoinmonth[number]=2;}\r\n        }\r\n        \r\n        //February 2019 four\r\n        else if(now>=1548950400 && now<=1551369599 && SEcoinmonth[number]<=2){\r\n            if(SEcoinmonth[number]==2){\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\r\n            SEcoinmonth[number]=3;\r\n            }else if(SEcoinmonth[number]<2){\r\n            _month = 3-SEcoinmonth[number];\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \r\n            SEcoinmonth[number]=3;}\r\n        }\r\n        \r\n        //March 2019 five\r\n        else if(now>=1551369600 && now<=1554047999 && SEcoinmonth[number]<=3){\r\n            if(SEcoinmonth[number]==3){\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\r\n            SEcoinmonth[number]=4;\r\n            }else if(SEcoinmonth[number]<3){\r\n            _month = 4-SEcoinmonth[number];\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \r\n            SEcoinmonth[number]=4;}\r\n        }\r\n        \r\n        //April 2019 six\r\n        else if(now>=1554048000 && now<=1556639999 && SEcoinmonth[number]<=4){\r\n            if(SEcoinmonth[number]==4){\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\r\n            SEcoinmonth[number]=5;\r\n            }else if(SEcoinmonth[number]<4){\r\n            _month = 5-SEcoinmonth[number];\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \r\n           SEcoinmonth[number]=5;}\r\n        }\r\n        \r\n        //May 2019 seven\r\n        else if(now>=1556640000 && now<=1559318399 && SEcoinmonth[number]<=5){\r\n            if(SEcoinmonth[number]==5){\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\r\n            SEcoinmonth[number]=6;\r\n            }else if(SEcoinmonth[number]<5){\r\n            _month = 6-SEcoinmonth[number];\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \r\n            SEcoinmonth[number]=6;}\r\n        }\r\n        \r\n        //June 2019 eight\r\n        else if(now>=1559318400 && now<=1561910399 && SEcoinmonth[number]<=6){\r\n            if(SEcoinmonth[number]==6){\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\r\n            SEcoinmonth[number]=7;\r\n            }else if(SEcoinmonth[number]<6){\r\n            _month = 7-SEcoinmonth[number];\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \r\n            SEcoinmonth[number]=7;}\r\n        }\r\n        \r\n        //July 2019 nine August\r\n        else if(now>=1561910400 && now<=1564588799 && SEcoinmonth[number]<=7){\r\n            if(SEcoinmonth[number]==7){\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\r\n            SEcoinmonth[number]=8;\r\n            }else if(SEcoinmonth[number]<7){\r\n            _month = 8-SEcoinmonth[number];\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \r\n            SEcoinmonth[number]=8;}\r\n        }\r\n            \r\n        //August 2019 ten\r\n        else if(now>=1564588800 && now<=1567267199 && SEcoinmonth[number]<=8){\r\n            if(SEcoinmonth[number]==8){\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], SEcoinAmountsevent[number].div(10));\r\n            SEcoinmonth[number]=9;\r\n            }else if(SEcoinmonth[number]<8){\r\n            _month = 9-SEcoinmonth[number];\r\n            ERC20Basic(SEcoin).transfer(SEcoinbuyerevent[number], (SEcoinAmountsevent[number].div(10))*_month); \r\n            SEcoinmonth[number]=9;}\r\n        }    \r\n        \r\n        //get all token\r\n        else if(now<1543593600 || now>1567267199 || SEcoinmonth[number]>=9){\r\n            revert(\"Get all tokens or endtime\");\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SEcoinmonth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getunselltokenB\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstbuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SEcoinAmountsevent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icobuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"getICOtoken\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"icobuyer2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SEcoinbuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SEcoinbuyerevent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amountEtherInWei\",\"type\":\"uint256\"}],\"name\":\"calculateObtainedSEcoin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SEcoinWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseSEcoin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"SEcoinAmounts\",\"type\":\"uint256\"}],\"name\":\"calculateObtainedSEcoinsend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_SEcoinsetWallet\",\"type\":\"address\"}],\"name\":\"changeSEcoinWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getunselltoken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"SEcoinbuyer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SEcoinsetWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SEcoin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"SEcoinbuyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"SEcoinAmountssend\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"SECrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b0d016de6033ac551efdc871f344a07fa492007a8d250d5d601885e896dc2b64"}]}