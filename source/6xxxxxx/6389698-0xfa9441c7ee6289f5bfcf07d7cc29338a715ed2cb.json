{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Copyright (c) 2018 blockimmo AG license@blockimmo.ch\r\n * Non-Profit Open Software License 3.0 (NPOSL-3.0)\r\n * https://opensource.org/licenses/NPOSL-3.0\r\n */\r\n\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract LandRegistryProxyInterface {\r\n  function owner() public view returns (address);\r\n}\r\n\r\n\r\ncontract TokenizedPropertyInterface {\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function emitGenericProposal(string _generic) public;\r\n  function lastTransferBlock(address _account) public view returns (uint256);\r\n  function registryProxy() public view returns (LandRegistryProxyInterface);\r\n  function setManagementCompany(string _managementCompany) public;\r\n  function totalSupply() public view returns (uint256);\r\n  function transferOwnership(address _newOwner) public;\r\n  function untokenize() public;\r\n}\r\n\r\n\r\n/**\r\n * @title ShareholderDAO\r\n * @dev A simple DAO attached to a `TokenizedProperty` (ownership of the property is transferred to `this`).\r\n *\r\n * The token holders of a property `extend` and `vote` on `Proposal`s which are either executed (over 50% consensus) or rejected.\r\n * Proposals are `Executed` or `Rejected` at or after their `closingTime`, when a token holder or blockimmo calls `finalize` on the proposal.\r\n * Generic information related to a proposal can be included in the `_generic` string (ie the configuration details of an outright sale's `TokenSale`).\r\n * `Generic` proposals can also be extended. A property's management company and / or blockimmo will try to take these as suggestions.\r\n *\r\n * There are only a few decisions that token holders (investors in a property) can (and need) to make.\r\n * No need to be general. We keep it simple and minimal here, enabling our users to accomplish the necessary tasks.\r\n * - nothing more, nothing less.\r\n *\r\n * Just like in the real world, for commercial investment properties a `managementCompany` makes all decisions / actions involving a property.\r\n * Investors only need to `SetManagementCompany` - a suggestion blockimmo will always take (if possible).\r\n *\r\n * Aside from that, the only decisions investors need to make are:\r\n *\r\n * `TransferOwnership` enables `this` to be easily and reliably upgraded if consensus is reached on this proposal (ie a different form of DAO or a BDFL).\r\n *\r\n * Upgrading:\r\n *   1. A token holder deploys a new `ShareholderDAO`\r\n *   2. The token holder extends a proposal to `transferOwnership` of `TokenizedProperty` to the new DAO (1).\r\n *\r\n * See `TokenizedProperty`'s documentation for info on `Untokenize` and how / why this is used.\r\n */\r\ncontract ShareholderDAO {\r\n  using SafeMath for uint256;\r\n\r\n  enum Actions { SetManagementCompany, TransferOwnership, Untokenize, Generic }\r\n  enum Outcomes { Pend, Accept, Reject }\r\n  enum ProposalStatus { Null, Executed, Open, Rejected }\r\n  enum VoteStatus { Null, For, Against}\r\n\r\n  struct Vote {\r\n    VoteStatus status;\r\n    uint256 clout;\r\n  }\r\n\r\n  struct Proposal {\r\n    Actions action;\r\n    uint256 closingTime;\r\n\r\n    string managementCompany;\r\n    address owner;\r\n    string generic;\r\n\r\n    address proposer;\r\n\r\n    ProposalStatus status;\r\n    uint256 tallyFor;\r\n    uint256 tallyAgainst;\r\n    uint256 blockNumber;\r\n\r\n    mapping (address => Vote) voters;\r\n  }\r\n\r\n  mapping(bytes32 => Proposal) private proposals;\r\n  TokenizedPropertyInterface public property;\r\n\r\n  event ProposalRejected(bytes32 indexed proposal);\r\n  event ProposalExecuted(bytes32 indexed proposal);\r\n  event ProposalExtended(bytes32 indexed proposal, Actions indexed action, uint256 closingTime, string managementCompany, address owner, string generic, address indexed proposer);\r\n\r\n  event Voted(bytes32 indexed proposal, address indexed voter, uint256 clout);\r\n  event VoteRescinded(bytes32 indexed proposal, address indexed voter, uint256 clout);\r\n\r\n  constructor(TokenizedPropertyInterface _property) public {\r\n    property = _property;\r\n  }\r\n\r\n  modifier isAuthorized {\r\n    require(getClout(msg.sender) > 0 || msg.sender == property.registryProxy().owner(), \"must be blockimmo or tokenholder to perform this action\");  // allow blockimmo to extend proposals for all properties\r\n    _;\r\n  }\r\n\r\n  function extendProposal(Actions _action, uint256 _closingTime, string _managementCompany, address _owner, string _description) public isAuthorized {\r\n    require(block.timestamp < _closingTime, \"_closingTime must be in the future\");\r\n\r\n    bytes32 hash = keccak256(abi.encodePacked(_action, _closingTime, _managementCompany, _description, _owner));\r\n    require(proposals[hash].status == ProposalStatus.Null, \"proposal is not unique\");\r\n\r\n    proposals[hash] = Proposal(_action, _closingTime, _managementCompany, _owner, _description, msg.sender, ProposalStatus.Open, 0, 0, block.number);\r\n    emit ProposalExtended(hash, _action, _closingTime, _managementCompany, _owner, _description, msg.sender);\r\n  }\r\n\r\n  function vote(bytes32 _hash, bool _isFor) public isAuthorized {\r\n    Proposal storage p = proposals[_hash];\r\n    Vote storage v = p.voters[msg.sender];\r\n\r\n    require(p.status == ProposalStatus.Open, \"vote requires proposal is open\");\r\n    require(block.timestamp < p.closingTime, \"vote requires proposal voting period is open\");\r\n    require(p.voters[msg.sender].status == VoteStatus.Null, \"voter has voted\");\r\n    require(p.blockNumber > property.lastTransferBlock(msg.sender), \"voter ineligible due to transfer in voting period\");\r\n\r\n    uint256 clout = getClout(msg.sender);\r\n    v.clout = clout;\r\n    if (_isFor) {\r\n      v.status = VoteStatus.For;\r\n      p.tallyFor = p.tallyFor.add(clout);\r\n    } else {\r\n      v.status = VoteStatus.Against;\r\n      p.tallyAgainst = p.tallyAgainst.add(clout);\r\n    }\r\n\r\n    emit Voted(_hash, msg.sender, clout);\r\n  }\r\n\r\n  function rescindVote(bytes32 _hash) public isAuthorized {\r\n    Proposal storage p = proposals[_hash];\r\n    Vote storage v = p.voters[msg.sender];\r\n\r\n    require(p.status == ProposalStatus.Open, \"rescindVote requires proposal is open\");\r\n    require(block.timestamp < p.closingTime, \"rescindVote requires proposal voting period is open\");\r\n    require(v.status != VoteStatus.Null, \"voter has not voted\");\r\n\r\n    uint256 clout = v.clout;\r\n    if (v.status == VoteStatus.For) {\r\n      p.tallyFor = p.tallyFor.sub(clout);\r\n    } else if (v.status == VoteStatus.Against) {\r\n      p.tallyAgainst = p.tallyAgainst.sub(clout);\r\n    }\r\n\r\n    v.status = VoteStatus.Null;\r\n    v.clout = 0;\r\n\r\n    emit VoteRescinded(_hash, msg.sender, clout);\r\n  }\r\n\r\n  function finalize(bytes32 _hash) public isAuthorized {\r\n    Proposal storage p = proposals[_hash];\r\n\r\n    require(p.status == ProposalStatus.Open, \"finalize requires proposal is open\");\r\n    require(block.timestamp >= p.closingTime, \"finalize requires proposal voting period is closed\");\r\n\r\n    Outcomes outcome = tallyVotes(p.tallyFor);\r\n    if (outcome == Outcomes.Accept) {\r\n      executeProposal(_hash);\r\n    } else if (outcome == Outcomes.Reject) {\r\n      p.status = ProposalStatus.Rejected;\r\n      emit ProposalRejected(_hash);\r\n    }\r\n  }\r\n\r\n  function getClout(address _who) internal view returns (uint256 clout) {\r\n    clout = property.balanceOf(_who);\r\n  }\r\n\r\n  function tallyVotes(uint256 _tallyFor) internal view returns (Outcomes outcome) {\r\n    if (_tallyFor > property.totalSupply() / 2) {\r\n      outcome = Outcomes.Accept;\r\n    } else {\r\n      outcome = Outcomes.Reject;\r\n    }\r\n  }\r\n\r\n  function executeProposal(bytes32 _hash) internal {\r\n    Proposal storage p = proposals[_hash];\r\n\r\n    if (p.action == Actions.SetManagementCompany) {\r\n      property.setManagementCompany(p.managementCompany);\r\n    } else if (p.action == Actions.TransferOwnership) {\r\n      property.transferOwnership(p.owner);\r\n    } else if (p.action == Actions.Untokenize) {\r\n      property.untokenize();\r\n    } else if (p.action == Actions.Generic) {\r\n      property.emitGenericProposal(p.generic);\r\n    }\r\n\r\n    p.status = ProposalStatus.Executed;\r\n    emit ProposalExecuted(_hash);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"property\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_action\",\"type\":\"uint8\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"},{\"name\":\"_managementCompany\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"extendProposal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"},{\"name\":\"_isFor\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"rescindVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_property\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposal\",\"type\":\"bytes32\"}],\"name\":\"ProposalRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposal\",\"type\":\"bytes32\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposal\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"closingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"managementCompany\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"generic\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ProposalExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposal\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"clout\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"proposal\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"clout\",\"type\":\"uint256\"}],\"name\":\"VoteRescinded\",\"type\":\"event\"}]","ContractName":"ShareholderDAO","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000caa5d787b5ecb5a560c30a2396dd214f3c701220","Library":"","SwarmSource":"bzzr://b1ad592dfc74ffcec16fda27ac301a0308d9d305d1dc3f510b2620de98498bfe"}]}