{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/*\r\n* 1st Crypto Trader (DTH)\r\n*/\r\nlibrary SafeMath {\r\n function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     if (a == 0) {\r\n         return 0;\r\n     }\r\n     uint256 c = a * b;\r\n     assert(c / a == b);\r\n     return c;\r\n }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n     uint256 c = a / b;\r\n     // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n     return c;\r\n }\r\n\r\n function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     assert(b <= a);\r\n     return a - b;\r\n }\r\n\r\n function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n     uint256 c = a + b;\r\n     assert(c >= a);\r\n     return c;\r\n }\r\n}\r\n\r\n\r\ncontract CryptoTrader {\r\n using SafeMath for uint256;\r\n mapping(address => uint256) balances; // array with all balances\r\n mapping (address => mapping (address => uint256)) internal allowed;\r\n mapping (address => uint256) public ETHBalance; // array with spend ETH\r\n\r\n uint256 public totalSupply; // emitted tokens\r\n address public contract_owner_address;\r\n\r\n event Transfer(address indexed from, address indexed to, uint256 value);\r\n event Approval(address indexed owner, address indexed buyer, uint256 value);\r\n event Burn(address indexed burner, uint256 value);\r\n\r\n string public constant name = \"Token1\";\r\n string public constant symbol = \"TOK1\";\r\n uint8 public decimals = 0;\r\n uint public start_sale = 1537434000; // start of presale Thu, 20 Sep 2018 09:00:00 GMT\r\n uint public presalePeriod = 61; // presale period in days\r\n address public affiliateAddress ;\r\n\r\n uint public maxAmountPresale_USD = 40000000; // 400,000 US dollars.\r\n uint public soldAmount_USD = 0; // current tokens sale amount in US dollars\r\n\r\n\r\n /* Initializes contract with initial supply tokens to the creator of the contract */\r\n constructor (\r\n     uint256 initialSupply,\r\n     address _affiliateAddress\r\n ) public {\r\n     totalSupply = initialSupply;\r\n     affiliateAddress = _affiliateAddress;\r\n     contract_owner_address = msg.sender;\r\n     balances[contract_owner_address] = getPercent(totalSupply,75); // tokens for selling\r\n     balances[affiliateAddress] = getPercent(totalSupply,25); //  affiliate 15% developers 10%\r\n }\r\n\r\n /**\r\n * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n *\r\n * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n * race condition is to first reduce the buyer's allowance to 0 and set the desired value afterwards:\r\n * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n * @param _buyer The address which will spend the funds.\r\n * @param _value The amount of tokens to be spent.\r\n */\r\n function approve(address _buyer, uint256 _value) public returns (bool) {\r\n     allowed[msg.sender][_buyer] = _value;\r\n     emit Approval(msg.sender, _buyer, _value);\r\n     return true;\r\n }\r\n\r\n /**\r\n * @dev Function to check the amount of tokens that an owner allowed to a buyer.\r\n * @param _owner address The address which owns the funds.\r\n * @param _buyer address The address which will spend the funds.\r\n * @return A uint256 specifying the amount of tokens still available for the buyer.\r\n */\r\n function allowance(address _owner, address _buyer) public view returns (uint256) {\r\n     return allowed[_owner][_buyer];\r\n }\r\n\r\n /**\r\n * @dev Gets the balance of the specified address.\r\n * @param _owner The address to query the the balance of.\r\n * @return An uint256 representing the amount owned by the passed address.\r\n */\r\n function balanceOf(address _owner) public view returns (uint256 balance) {\r\n     return balances[_owner];\r\n }\r\n\r\n /**\r\n * @dev Transfer tokens from one address to another\r\n * @param _from address The address which you want to send tokens from\r\n * @param _to address The address which you want to transfer to\r\n * @param _value uint256 the amount of tokens to be transferred\r\n */\r\n function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n     require(_to != address(0));\r\n     require(_value <= balances[_from]);\r\n     require(_value <= allowed[_from][msg.sender]);\r\n\r\n     balances[_from] = balances[_from].sub(_value);\r\n     balances[_to] = balances[_to].add(_value);\r\n     allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n     emit Transfer(_from, _to, _value);\r\n     return true;\r\n }\r\n\r\n /**\r\n * @dev transfer token for a specified address\r\n * @param _to The address to transfer to.\r\n * @param _value The amount to be transferred.\r\n */\r\n function transfer(address _to, uint256 _value) public returns (bool) {\r\n     require(_to != address(0));\r\n     require(_value <= balances[msg.sender]);\r\n\r\n     // SafeMath.sub will throw if there is not enough balance.\r\n     balances[msg.sender] = balances[msg.sender].sub(_value);\r\n     balances[_to] = balances[_to].add(_value);\r\n     emit Transfer(msg.sender, _to, _value);\r\n     return true;\r\n }\r\n\r\n /**\r\n * @dev sale token for a specified address\r\n * @param _to The address to transfer to.\r\n * @param _value The amount to be transferred.\r\n * @param _eth_price spended eth for buying tokens.\r\n * @param _usd_amount spended usd for buying tokens.\r\n */\r\n function transferSale(address _to, uint256 _value, uint256 _eth_price, uint256 _usd_amount) public  returns (bool success) {\r\n     transfer(_to, _value);\r\n     ETHBalance[_to] = ETHBalance[_to].add(_eth_price);\r\n     soldAmount_USD += _usd_amount;\r\n     return true;\r\n }\r\n\r\n /**\r\n * @dev Burns a specific amount of tokens.\r\n * @param _value The amount of token to be burned.\r\n */\r\n function burn(uint256 _value) public {\r\n     require(_value <= balances[msg.sender]);\r\n     address burner = msg.sender;\r\n     balances[burner] = balances[burner].sub(_value);\r\n     totalSupply = totalSupply.sub(_value);\r\n     emit Burn(burner, _value);\r\n }\r\n\r\n /**\r\n * @dev Refund request.\r\n * @param _to The address for refund.\r\n */\r\n function refund(address _to) public payable returns(bool){\r\n     require(address(this).balance > 0);\r\n     uint256 _value = balances[_to];\r\n     uint256 ether_value = ETHBalance[_to];\r\n     require(now > start_sale + presalePeriod * 1 days && soldAmount_USD < maxAmountPresale_USD);\r\n     require(_value > 0);\r\n     require(ether_value > 0);\r\n     balances[_to] = balances[_to].sub(_value);\r\n     balances[contract_owner_address] = balances[contract_owner_address].add(_value);\r\n     ETHBalance[_to] = 0;\r\n     approve(_to, ether_value);\r\n     address(_to).transfer(ether_value);\r\n     return true;\r\n }\r\n\r\n /**\r\n * @dev Deposit contrac.\r\n * @param _value The amount to be transferred.\r\n */\r\n function depositContrac(uint256 _value) public payable returns(bool){\r\n     approve(address(this), _value);\r\n     return  address(this).send(_value);\r\n }\r\n\r\n function getPercent(uint _value, uint _percent) internal pure returns(uint quotient){\r\n     uint _quotient = _value.mul(_percent).div(100);\r\n     return ( _quotient);\r\n }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_eth_price\",\"type\":\"uint256\"},{\"name\":\"_usd_amount\",\"type\":\"uint256\"}],\"name\":\"transferSale\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmountPresale_USD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start_sale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositContrac\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldAmount_USD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ETHBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presalePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_owner_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"_affiliateAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"CryptoTrader","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000098968000000000000000000000000006791d6491b3de4af46f4e526b896a4ef481a18e","Library":"","SwarmSource":"bzzr://cbcc550749b68d27023c4750d64705205a86d26b1a9658aa7bcdd833f97f43e6"}]}