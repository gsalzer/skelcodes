{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n// File: openzeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract SpecialERC20 {\r\n    function transfer(address to, uint256 value) public;\r\n}\r\n\r\ncontract Random {\r\n  function getRandom(bytes32 hash) public view returns (uint);\r\n    \r\n}\r\n\r\ncontract RedEnvelope is Pausable {\r\n    \r\n    using SafeMath for uint;\r\n    using SafeERC20 for ERC20;\r\n    \r\n    Random public random;\r\n\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n    \r\n    struct Info {\r\n        address token;\r\n        address owner;\r\n        uint amount;\r\n        uint count;\r\n        address[] limitAddress;\r\n        bool isRandom;\r\n        bool isSpecialERC20;\r\n        uint expires;\r\n        uint created;\r\n        string desc;\r\n        uint fill;\r\n    }\r\n    \r\n    string public name = \"RedEnvelope\";\r\n    \r\n    mapping(bytes32 => Info) public infos;\r\n    mapping (address => bool) public tokenWhiteList;\r\n    \r\n    struct SnatchInfo {\r\n        address user;\r\n        uint amount;\r\n        uint time;\r\n    }\r\n    \r\n    mapping(bytes32 => SnatchInfo[]) public snatchInfos;\r\n    \r\n    constructor() public {\r\n        \r\n    }\r\n\r\n    function enableToken(address[] addr, bool[] enable) public onlyOwner() {\r\n        require(addr.length == enable.length);\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            tokenWhiteList[addr[i]] = enable[i];\r\n        }\r\n    }\r\n\r\n    function tokenIsEnable(address addr) public view returns (bool) {\r\n        return tokenWhiteList[addr];\r\n    }\r\n    \r\n    function setRandom(address _random) public onlyOwner isHuman() {\r\n        random = Random(_random);\r\n    }\r\n    \r\n    event RedEnvelopeCreated(bytes32 hash);\r\n    \r\n    // 创建红包\r\n    function create(\r\n        bool isSpecialERC20, \r\n        address token, \r\n        uint amount, \r\n        uint count, \r\n        uint expires, \r\n        address[] limitAddress, \r\n        bool isRandom, \r\n        string desc, \r\n        uint nonce\r\n    ) public payable isHuman() whenNotPaused() {\r\n        if (token == address(0)) {\r\n            require(msg.value >= amount);\r\n        } else {\r\n            ERC20(token).transferFrom(msg.sender, this, amount);\r\n        }\r\n\r\n        require(tokenWhiteList[token]);\r\n\r\n        require(amount > 0);\r\n        require(count > 0);\r\n        require(expires > now);\r\n        \r\n        bytes32 hash = sha256(abi.encodePacked(this, isSpecialERC20, token, amount, expires, nonce, msg.sender, now));\r\n        require(infos[hash].created == 0);\r\n        infos[hash] = Info(token, msg.sender, amount, count, limitAddress, isRandom, isSpecialERC20, expires, now, desc, 0);\r\n     \r\n        emit RedEnvelopeCreated(hash);   \r\n    }\r\n    \r\n    event Snatch(bytes32 hash, address user, uint amount, uint time);\r\n\r\n    // 抢红包\r\n    function snatch(bytes32 hash) public isHuman() whenNotPaused() {\r\n        Info storage info = infos[hash];\r\n        require(info.created > 0);\r\n        require(info.amount >= info.fill);\r\n        require(info.expires >= now);\r\n        \r\n        \r\n        if (info.limitAddress.length > 0) {\r\n            bool find = false;\r\n            for (uint i = 0; i < info.limitAddress.length; i++) {\r\n                if (info.limitAddress[i] == msg.sender) {\r\n                    find = true;\r\n                    break;\r\n                }\r\n            }\r\n            require(find);\r\n        }\r\n\r\n        SnatchInfo[] storage curSnatchInfos = snatchInfos[hash];\r\n        require(info.count > curSnatchInfos.length);\r\n        for (i = 0; i < curSnatchInfos.length; i++) {\r\n            require (curSnatchInfos[i].user != msg.sender);\r\n        }\r\n        \r\n        uint per = 0;\r\n\r\n        if (info.isRandom) {\r\n            if (curSnatchInfos.length + 1 == info.count) {\r\n                per = info.amount.sub(info.fill);\r\n            } else {\r\n                require(random != address(0));\r\n                per = random.getRandom(hash);\r\n            }\r\n        } else {\r\n            per = info.amount.div(info.count);\r\n        }\r\n\r\n        snatchInfos[hash].push(SnatchInfo(msg.sender, per, now));\r\n        if (info.token == address(0)) {\r\n            msg.sender.transfer(per);\r\n        } else {\r\n            if (info.isSpecialERC20) {\r\n                SpecialERC20(info.token).transfer(msg.sender, per);\r\n            } else {\r\n                ERC20(info.token).transfer(msg.sender, per);\r\n            }\r\n        }\r\n        info.fill = info.fill.add(per);\r\n        \r\n        emit Snatch(hash, msg.sender, per, now);\r\n    }\r\n    \r\n    event RedEnvelopeSendBack(bytes32 hash, address owner, uint amount);\r\n    \r\n    function sendBack(bytes32 hash) public isHuman(){\r\n        Info storage info = infos[hash];\r\n        require(info.expires < now);\r\n        require(info.fill < info.amount);\r\n        require(info.owner == msg.sender);\r\n        \r\n        uint back = info.amount.sub(info.fill);\r\n        info.fill = info.amount;\r\n        if (info.token == address(0)) {\r\n            msg.sender.transfer(back);\r\n        } else {\r\n            if (info.isSpecialERC20) {\r\n                SpecialERC20(info.token).transfer(msg.sender, back);\r\n            } else {\r\n                ERC20(info.token).transfer(msg.sender, back);\r\n            }\r\n        }\r\n        \r\n        emit RedEnvelopeSendBack(hash, msg.sender, back);\r\n    }\r\n    \r\n    function getInfo(bytes32 hash) public view returns(\r\n        address token, \r\n        address owner, \r\n        uint amount, \r\n        uint count, \r\n        address[] limitAddress, \r\n        bool isRandom, \r\n        bool isSpecialERC20, \r\n        uint expires, \r\n        uint created, \r\n        string desc,\r\n        uint fill\r\n    ) {\r\n        Info storage info = infos[hash];\r\n        return (info.token, \r\n            info.owner, \r\n            info.amount, \r\n            info.count, \r\n            info.limitAddress, \r\n            info.isRandom, \r\n            info.isSpecialERC20, \r\n            info.expires, \r\n            info.created, \r\n            info.desc,\r\n            info.fill\r\n        );\r\n    }\r\n\r\n    function getLightInfo(bytes32 hash) public view returns (\r\n        address token, \r\n        uint amount, \r\n        uint count,  \r\n        uint fill,\r\n        uint userCount\r\n    ) {\r\n        Info storage info = infos[hash];\r\n        SnatchInfo[] storage snatchInfo = snatchInfos[hash];\r\n        return (info.token, \r\n            info.amount, \r\n            info.count, \r\n            info.fill,\r\n            snatchInfo.length\r\n        );\r\n    }\r\n    \r\n    function getSnatchInfo(bytes32 hash) public view returns (address[] user, uint[] amount, uint[] time) {\r\n        SnatchInfo[] storage info = snatchInfos[hash];\r\n        \r\n        address[] memory _user = new address[](info.length);\r\n        uint[] memory _amount = new uint[](info.length);\r\n        uint[] memory _time = new uint[](info.length);\r\n        \r\n        for (uint i = 0; i < info.length; i++) {\r\n            _user[i] = info[i].user;\r\n            _amount[i] = info[i].amount;\r\n            _time[i] = info[i].time;\r\n        }\r\n        \r\n        return (_user, _amount, _time);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isSpecialERC20\",\"type\":\"bool\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"limitAddress\",\"type\":\"address[]\"},{\"name\":\"isRandom\",\"type\":\"bool\"},{\"name\":\"desc\",\"type\":\"string\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"infos\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"isRandom\",\"type\":\"bool\"},{\"name\":\"isSpecialERC20\",\"type\":\"bool\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"created\",\"type\":\"uint256\"},{\"name\":\"desc\",\"type\":\"string\"},{\"name\":\"fill\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"random\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"limitAddress\",\"type\":\"address[]\"},{\"name\":\"isRandom\",\"type\":\"bool\"},{\"name\":\"isSpecialERC20\",\"type\":\"bool\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"created\",\"type\":\"uint256\"},{\"name\":\"desc\",\"type\":\"string\"},{\"name\":\"fill\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"sendBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"snatchInfos\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"snatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getLightInfo\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"fill\",\"type\":\"uint256\"},{\"name\":\"userCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[]\"},{\"name\":\"enable\",\"type\":\"bool[]\"}],\"name\":\"enableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_random\",\"type\":\"address\"}],\"name\":\"setRandom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"tokenIsEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"getSnatchInfo\",\"outputs\":[{\"name\":\"user\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"},{\"name\":\"time\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"RedEnvelopeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Snatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedEnvelopeSendBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RedEnvelope","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c8bd81bd320e6cedf79db53d0f942f8aa5c119d22b6ff9a6a034dbdf3f5d203b"}]}