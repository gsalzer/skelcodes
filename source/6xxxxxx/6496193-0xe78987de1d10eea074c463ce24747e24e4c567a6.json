{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \r\n    uint256 c = a / b;\r\n    \r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    \r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\n\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        \r\n        \r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Jewel {\r\n    function incise(address owner, uint256 value) external returns (uint);\r\n}\r\n\r\ncontract DayQualitys {\r\n    function getAreaQualityByDay(uint32 time, uint32 area) external returns (uint32);\r\n}\r\n\r\ncontract Mineral is BurnableToken, Ownable {\r\n\r\n    string public name = \"Mineral\";\r\n    string public symbol = \"ORE\";\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 800 * 1000 * 1000 * (10 ** uint256(decimals));\r\n\r\n    uint public constant MINER_4_HOURS = 0.0005 ether;\r\n    uint public constant MINER_8_HOURS = 0.001 ether;\r\n    uint public constant MINER_24_HOURS = 0.003 ether;\r\n\r\n    mapping(address => uint[][72]) public deployRange;\r\n\r\n    \r\n    \r\n    uint public timeScale = 1; \r\n\r\n    \r\n    \r\n    mapping(uint32 => uint32[3][72]) private areaHourDeployed;\r\n\r\n    \r\n    struct AreaHourDeployed {\r\n        uint32[72] lastCollectHour;\r\n        \r\n        mapping(uint32 => uint32[3][72]) hour; \r\n    }\r\n    \r\n    \r\n    mapping(address => AreaHourDeployed) private userAreaHourDeployed;\r\n\r\n    \r\n    uint8 public constant CHECK_POINT_HOUR = 4;\r\n\r\n    \r\n    \r\n    mapping(uint32 => uint32[72]) private areaCheckPoints;\r\n\r\n    \r\n    mapping(uint32 => uint) private dayAverageOutput;\r\n\r\n    \r\n    struct AreaCheckPoint {\r\n        \r\n        mapping(uint32 => uint32[72]) hour;\r\n    }\r\n\r\n    \r\n    \r\n    mapping(address => AreaCheckPoint) private userAreaCheckPoints;\r\n\r\n    uint256 amountEther;\r\n\r\n    \r\n    mapping (address => uint) public remainEther;\r\n\r\n    uint32 public constractDeployTime = uint32(now) / 1 hours * 1 hours;\r\n\r\n    mapping(address => uint) activeArea; \r\n    \r\n    bool enableWhiteList = true;\r\n    mapping(address => bool) whiteUserList;    \r\n    address serverAddress;\r\n\r\n    address coldWallet;\r\n\r\n    bool enableCheckArea = true;\r\n\r\n    Jewel public jewelContract;\r\n    DayQualitys public dayQualitysContract;\r\n\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    function Mineral() public {\r\n        totalSupply = INITIAL_SUPPLY;\r\n        balances[this] = 300 * 1000 * 1000 * (10 ** uint256(decimals));\r\n        balances[msg.sender] = INITIAL_SUPPLY - balances[this];\r\n        dayAverageOutput[0] = 241920 * 10 ** uint256(decimals);\r\n    }\r\n\r\n    /*\r\n    function setTimeScale(uint scale) public onlyOwner {\r\n        timeScale = scale;\r\n    }\r\n\r\n    \r\n    function setConstractDeployTime(uint32 time) public onlyOwner {\r\n        constractDeployTime = time;\r\n    }*/\r\n\r\n    function setColdWallet(address _coldWallet) public onlyOwner {\r\n        coldWallet = _coldWallet;\r\n    }\r\n\r\n    function disableWhiteUserList() public onlyOwner {\r\n        enableWhiteList = false;\r\n    }\r\n\r\n    function disableCheckArea() public onlyOwner {\r\n        enableCheckArea = false;\r\n    }\r\n\r\n    modifier checkWhiteList() {\r\n        if (enableWhiteList) {\r\n            require(whiteUserList[msg.sender]);\r\n        }\r\n        _;\r\n    }\r\n\r\n    function setServerAddress(address addr) public onlyOwner {\r\n        serverAddress = addr;\r\n    }\r\n\r\n    function authUser(string addr) public {\r\n        require(msg.sender == serverAddress || msg.sender == owner);\r\n        address s = bytesToAddress(bytes(addr));\r\n        whiteUserList[s] = true;\r\n    }\r\n\r\n    function bytesToAddress (bytes b) internal view returns (address) {\r\n        uint result = 0;\r\n        for (uint i = 0; i < b.length; i++) {\r\n            uint c = uint(b[i]);\r\n            if (c >= 48 && c <= 57) {\r\n                result = result * 16 + (c - 48);\r\n            }\r\n            if(c >= 65 && c <= 90) {\r\n                result = result * 16 + (c - 55);\r\n            }\r\n            if(c >= 97 && c <= 122) {\r\n                result = result * 16 + (c - 87);\r\n            }\r\n        }\r\n        return address(result);\r\n    }\r\n\r\n    function setDayQualitys(address dayQualitys) public onlyOwner {\r\n        dayQualitysContract = DayQualitys(dayQualitys);\r\n    }\r\n\r\n    function getMyDeployAt(uint32 area, uint32 hour) public view returns (uint32[3]) {\r\n        return userAreaHourDeployed[msg.sender].hour[hour][area];\r\n    }\r\n\r\n    function getMyMinersAt(uint32 area, uint32 hour) public view returns (uint32) {\r\n        return _getUserMinersAt(msg.sender, area, hour);\r\n    }\r\n\r\n    function _getUserMinersAt(address user, uint32 area, uint32 hour) internal view returns(uint32) {\r\n        //now start from start's nearest check point\r\n        uint32 nc = hour/CHECK_POINT_HOUR*CHECK_POINT_HOUR;\r\n        if (userAreaCheckPoints[user].hour[nc][area] == 0 && userAreaCheckPoints[user].hour[nc + CHECK_POINT_HOUR][area] == 0) {\r\n            return 0;\r\n        }\r\n        uint32 h = 0;\r\n        int64 userInc = 0;\r\n        uint32[3] storage ptUser;\r\n        AreaHourDeployed storage _userAreaHourDeployed = userAreaHourDeployed[user];\r\n        \r\n        for (h = nc; h <= hour; ++h) {\r\n            \r\n            \r\n            \r\n            ptUser = _userAreaHourDeployed.hour[h][area];\r\n            userInc += ptUser[0] + ptUser[1] + ptUser[2] - _userAreaHourDeployed.hour[h - 4][area][0] - \r\n                _userAreaHourDeployed.hour[h - 8][area][1] - _userAreaHourDeployed.hour[h - 24][area][2];\r\n        }\r\n        return userAreaCheckPoints[user].hour[nc][area] + uint32(userInc);\r\n    }\r\n\r\n    function getDeployAt(uint32 area, uint32 hour) public view returns (uint32[3]) {\r\n        return areaHourDeployed[hour][area];\r\n    }\r\n\r\n\r\n    function getMinersAt(uint32 area, uint32 hour) public view returns (uint32) {\r\n        return _getMinersAt(area, hour);\r\n    }\r\n\r\n    function _getMinersAt(uint32 area, uint32 hour) internal view returns (uint32) {\r\n        //now start from start's nearest check point\r\n        uint32 nc = hour/CHECK_POINT_HOUR*CHECK_POINT_HOUR;\r\n        uint32 h = 0;\r\n        int64 userInc = 0;\r\n        int64 totalInc = 0;\r\n        uint32[3] storage ptArea;\r\n        \r\n        for (h = nc; h <= hour; ++h) {\r\n            \r\n            \r\n            \r\n            ptArea = areaHourDeployed[h][area];\r\n            totalInc += ptArea[0] + ptArea[1] + ptArea[2] - areaHourDeployed[h - 4][area][0] - areaHourDeployed[h - 8][area][1] - areaHourDeployed[h - 24][area][2];\r\n        }\r\n\r\n        return areaCheckPoints[nc][area] + uint32(totalInc);\r\n    }\r\n\r\n    function updateArea(uint areaId) internal pure returns (uint) {\r\n        \r\n        uint row = areaId / 8;\r\n        uint colum = areaId % 8;\r\n\r\n        uint result = uint(1) << areaId;\r\n        if (row-1 >= 0) {\r\n            result |= uint(1) << ((row-1)*8+colum);\r\n        }\r\n        if (row+1 < 9) {\r\n            result |= uint(1) << ((row+1)*8+colum);\r\n        }\r\n        if (colum-1 >= 0) {\r\n            result |= uint(1) << (row*8+colum-1);\r\n        }\r\n        if (colum+1 < 8) {\r\n            result |= uint(1) << (row*8+colum+1);\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    function checkArea(uint32[] area, address user) internal {\r\n        if (enableCheckArea) {\r\n            uint[] memory distinctArea = new uint[](area.length);\r\n            uint distinctAreaLength = 0;\r\n        \r\n            for (uint i = 0; i < area.length; i++) {\r\n                bool find = false;\r\n                for (uint j = 0; j < distinctAreaLength; j++) {\r\n                    if (distinctArea[j] == area[i]) {\r\n                        find = true;\r\n                        break;\r\n                    }\r\n                }     \r\n                if (!find) {\r\n                    distinctArea[distinctAreaLength] = area[i];\r\n                    distinctAreaLength += 1;\r\n                }\r\n            }\r\n\r\n            if (activeArea[user] == 0) {\r\n                require(distinctAreaLength == 1);\r\n                activeArea[user] = updateArea(distinctArea[0]);\r\n            } else {\r\n                uint userActiveArea = activeArea[user];\r\n                uint updateActiveArea = userActiveArea;\r\n                for (i = 0; i < distinctAreaLength; i++) {\r\n                    require(userActiveArea & uint(1) << distinctArea[i] > 0);\r\n                    updateActiveArea = updateActiveArea | updateArea(distinctArea[i]);\r\n                }\r\n\r\n                activeArea[user] = updateActiveArea;\r\n            }\r\n        }\r\n    }\r\n\r\n    function deployMiners(address user, uint32[] area, uint32[] period, uint32[] count) public checkWhiteList whenNotPaused payable {\r\n        require(area.length > 0);\r\n        require(area.length == period.length);\r\n        require(area.length == count.length);\r\n        address _user = user;\r\n        if (_user == address(0)) {\r\n            _user = msg.sender;\r\n        }\r\n        \r\n        uint32 _hour = uint32((now - constractDeployTime) * timeScale / 1 hours);\r\n\r\n        checkArea(area, user);\r\n        \r\n        uint payment = _deployMiners(_user, _hour, area, period, count);\r\n        _updateCheckPoints(_user, _hour, area, period, count);\r\n\r\n        require(payment <= msg.value);\r\n        remainEther[msg.sender] += (msg.value - payment);\r\n        if (coldWallet != address(0)) {\r\n            coldWallet.transfer(payment);\r\n        } else {\r\n            amountEther += payment;\r\n        }\r\n        \r\n    }\r\n\r\n    /*function deployMinersTest(uint32 _hour, address user, uint32[] area, uint32[] period, uint32[] count) public checkWhiteList payable {\r\n        require(area.length > 0);\r\n        require(area.length == period.length);\r\n        require(area.length == count.length);\r\n        address _user = user;\r\n        if (_user == address(0)) {\r\n            _user = msg.sender;\r\n        }\r\n        \r\n\r\n        checkArea(area, user);\r\n        \r\n        uint payment = _deployMiners(_user, _hour, area, period, count);\r\n        _updateCheckPoints(_user, _hour, area, period, count);\r\n\r\n        require(payment <= msg.value);\r\n        remainEther[msg.sender] += (msg.value - payment);\r\n        amountEther += payment;\r\n    }*/\r\n\r\n    function _deployMiners(address _user, uint32 _hour, uint32[] memory area, uint32[] memory period, uint32[] memory count) internal returns(uint){\r\n        uint payment = 0;\r\n        uint32 minerCount = 0;\r\n        uint32[3][72] storage _areaDeployed = areaHourDeployed[_hour];\r\n        uint32[3][72] storage _userAreaDeployed = userAreaHourDeployed[_user].hour[_hour];\r\n        \r\n        \r\n        for (uint index = 0; index < area.length; ++index) {\r\n            require (period[index] == 4 || period[index] == 8 || period[index] == 24);\r\n            if (period[index] == 4) {\r\n                _areaDeployed[area[index]][0] += count[index];\r\n                _userAreaDeployed[area[index]][0] += count[index];\r\n                payment += count[index] * MINER_4_HOURS;\r\n            } else if (period[index] == 8) {\r\n                _areaDeployed[area[index]][1] += count[index];\r\n                _userAreaDeployed[area[index]][1] += count[index];\r\n                payment += count[index] * MINER_8_HOURS;\r\n            } else if (period[index] == 24) {\r\n                _areaDeployed[area[index]][2] += count[index];\r\n                _userAreaDeployed[area[index]][2] += count[index];\r\n                payment += count[index] * MINER_24_HOURS;\r\n            }\r\n            minerCount += count[index];\r\n            DeployMiner(_user, area[index], _hour, _hour + period[index], count[index]);\r\n\r\n            adjustDeployRange(area[index], _hour, _hour + period[index]);\r\n        }\r\n        return payment;\r\n    }   \r\n\r\n    function adjustDeployRange(uint area, uint start, uint end) internal {\r\n        uint len = deployRange[msg.sender][area].length;\r\n        if (len == 0) {\r\n            deployRange[msg.sender][area].push(start | (end << 128));\r\n        } else {\r\n            uint s = uint128(deployRange[msg.sender][area][len - 1]);\r\n            uint e = uint128(deployRange[msg.sender][area][len - 1] >> 128);\r\n            \r\n            if (start >= s && start < e) {\r\n                end = e > end ? e : end;\r\n                deployRange[msg.sender][area][len - 1] = s | (end << 128);\r\n            } else {\r\n                deployRange[msg.sender][area].push(start | (end << 128));\r\n            }\r\n        }\r\n    }\r\n\r\n    function getDeployArrayLength(uint area) public view returns (uint) {\r\n        return deployRange[msg.sender][area].length;\r\n    }\r\n    \r\n    function getDeploy(uint area, uint index) public view returns (uint,uint) {\r\n        uint s = uint128(deployRange[msg.sender][area][index]);\r\n        uint e = uint128(deployRange[msg.sender][area][index] >> 128);\r\n        return (s, e);\r\n    }\r\n\r\n    function _updateCheckPoints(address _user, uint32 _hour, uint32[] memory area, uint32[] memory period, uint32[] memory count) internal {\r\n        uint32 _area = 0;\r\n        uint32 _count = 0;\r\n        uint32 ce4 = _hour + 4;\r\n        uint32 ce8 = _hour + 8;\r\n        uint32 ce24 = _hour + 24;\r\n        uint32 cs = (_hour/CHECK_POINT_HOUR+1)*CHECK_POINT_HOUR;\r\n        AreaCheckPoint storage _userAreaCheckPoints = userAreaCheckPoints[_user];\r\n        uint32 cp = 0;\r\n        for (uint index = 0; index < area.length; ++index) {\r\n            _area = area[index];\r\n            _count = count[index];\r\n            if (period[index] == 4) {\r\n                for (cp = cs; cp <= ce4; cp += CHECK_POINT_HOUR) {\r\n                    areaCheckPoints[cp][_area] += _count;\r\n                    _userAreaCheckPoints.hour[cp][_area] += _count;\r\n                }\r\n            } else if (period[index] == 8) {\r\n                for (cp = cs; cp <= ce8; cp += CHECK_POINT_HOUR) {\r\n                    areaCheckPoints[cp][_area] += _count;\r\n                    _userAreaCheckPoints.hour[cp][_area] += _count;\r\n                }\r\n            } else if (period[index] == 24) {\r\n                for (cp = cs; cp <= ce24; cp += CHECK_POINT_HOUR) {\r\n                    areaCheckPoints[cp][_area] += _count;\r\n                    _userAreaCheckPoints.hour[cp][_area] += _count;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    event DeployMiner(address addr, uint32 area, uint32 start, uint32 end, uint32 count);\r\n\r\n    event Collect(address addr, uint32 area, uint32 start, uint32 end, uint areaCount);\r\n\r\n    function getMyLastCollectHour(uint32 area) public view returns (uint32){\r\n        return userAreaHourDeployed[msg.sender].lastCollectHour[area];\r\n    }\r\n\r\n    \r\n    \r\n    function collect(address user, uint32[] area) public  checkWhiteList whenNotPaused {\r\n        require(address(dayQualitysContract) != address(0));\r\n        uint32 current = uint32((now - constractDeployTime) * timeScale / 1 hours);\r\n        require(area.length > 0);\r\n        address _user = user;\r\n        if (_user == address(0)) {\r\n            _user = msg.sender;\r\n        }\r\n        uint total = 0;\r\n        \r\n        for (uint a = 0; a < area.length; ++a) {\r\n            uint len = deployRange[msg.sender][area[a]].length;\r\n            bool finish = true;\r\n            for (uint i = 0; i < len; i += 1) {\r\n                uint s = uint128(deployRange[msg.sender][area[a]][i]);\r\n                uint e = uint128(deployRange[msg.sender][area[a]][i] >> 128);\r\n                if (current < e && current >= s ) {\r\n                    total += _collect(_user, uint32(s), current, area[a]);\r\n                    \r\n                    deployRange[msg.sender][area[a]][i] = current | (e << 128);\r\n                    finish = false;\r\n                } else if (current >= e) {\r\n                    total += _collect(_user, uint32(s), uint32(e), area[a]);\r\n                }\r\n            }\r\n            \r\n            if (finish) {\r\n                deployRange[msg.sender][area[a]].length = 0;\r\n            } else {\r\n                deployRange[msg.sender][area[a]][0] = deployRange[msg.sender][area[a]][len - 1];\r\n                deployRange[msg.sender][area[a]].length = 1;\r\n            }\r\n        }    \r\n\r\n        ERC20(this).transfer(_user, total);\r\n    }\r\n\r\n    function _collect(address _user, uint32 start, uint32 end, uint32 area) internal returns (uint) {\r\n        uint result = 0;\r\n        uint32 writeCount = 1;\r\n        uint income = 0;\r\n        uint32[] memory totalMiners = new uint32[](CHECK_POINT_HOUR);\r\n        uint32[] memory userMiners = new uint32[](CHECK_POINT_HOUR);\r\n        uint32 ps = start/CHECK_POINT_HOUR*CHECK_POINT_HOUR+CHECK_POINT_HOUR;\r\n        if (ps >= end) {\r\n            \r\n            (income, writeCount) = _collectMinersByCheckPoints(_user, area, start, end, totalMiners, userMiners, writeCount);\r\n            result += income;\r\n        } else {\r\n            \r\n            (income, writeCount) = _collectMinersByCheckPoints(_user, area, start, ps, totalMiners, userMiners, writeCount);\r\n            result += income;\r\n\r\n            while (ps < end) {\r\n                (income, writeCount) = _collectMinersByCheckPoints(_user, area, ps, uint32(Math.min64(end, ps + CHECK_POINT_HOUR)), totalMiners, userMiners, writeCount);\r\n                result += income;\r\n\r\n                ps += CHECK_POINT_HOUR;\r\n            }\r\n        }\r\n        Collect(_user, area, start, end, result);\r\n        return result;\r\n    }\r\n\r\n    function _collectMinersByCheckPoints(address _user, uint32 area, uint32 start, uint32 end, uint32[] memory totalMiners, uint32[] memory userMiners, uint32 _writeCount) internal returns (uint income, uint32 writeCount) {\r\n        //now start from start's nearest check point\r\n        writeCount = _writeCount;\r\n        income = 0;\r\n        \r\n        \r\n        if (userAreaCheckPoints[_user].hour[start/CHECK_POINT_HOUR*CHECK_POINT_HOUR][area] == 0 && userAreaCheckPoints[_user].hour[start/CHECK_POINT_HOUR*CHECK_POINT_HOUR + CHECK_POINT_HOUR][area] == 0) {\r\n            return;\r\n        }\r\n        _getMinersByCheckPoints(_user, area, start, end, totalMiners, userMiners);\r\n        uint ao = dayAverageOutput[start / 24];\r\n        if (ao == 0) {\r\n            uint32 d = start / 24;\r\n            for (; d >= 0; --d) {\r\n                if (dayAverageOutput[d] != 0) {\r\n                    break;\r\n                }\r\n            } \r\n            ao = dayAverageOutput[d];\r\n            for (d = d+1; d <= start / 24; ++d) {\r\n                ao = ao*9996/10000;\r\n                if ((start / 24 - d) < writeCount) {\r\n                    dayAverageOutput[d] = ao;\r\n                }\r\n            }\r\n            if (writeCount > (start / 24 - d - 1)) {\r\n                writeCount = writeCount - (start / 24 - d - 1);\r\n            } else {\r\n                writeCount = 0;\r\n            }\r\n        }\r\n\r\n        uint week = dayQualitysContract.getAreaQualityByDay(uint32(start * 1 hours + constractDeployTime), area);\r\n        require(week > 0);\r\n\r\n        ao = week * ao / 10 / 24 / 72;\r\n        \r\n        income = _getTotalIncomeAt(end - start, userMiners, totalMiners, ao, week);\r\n\r\n        if (week == 10) { \r\n            income = income * 8 / 10;\r\n        } else if (week == 5) { \r\n            income = income * 6 / 10;\r\n        } \r\n    }\r\n\r\n    function _getTotalIncomeAt(uint32 hourLength, uint32[] memory userMiners, uint32[] memory totalMiners, uint areaOutput, uint week) internal view returns(uint) {\r\n        uint income = 0;\r\n        for (uint i = 0; i < hourLength; ++i) {\r\n            if (userMiners[i] != 0 && totalMiners[i] != 0) {\r\n                income += (Math.min256(10 ** uint256(decimals), areaOutput / totalMiners[i]) * userMiners[i]);\r\n            }\r\n        }\r\n        return income;\r\n    } \r\n\r\n    function _getMinersByCheckPoints(address _user, uint32 area, uint32 start, uint32 end, uint32[] memory totalMiners, uint32[] memory userMiners) internal view {\r\n        require((end - start) <= CHECK_POINT_HOUR);\r\n        //now start from start's nearest check point\r\n        uint32 h = 0;\r\n        int64 userInc = 0;\r\n        int64 totalInc = 0;\r\n        uint32[3] storage ptUser;\r\n        uint32[3] storage ptArea;\r\n        AreaHourDeployed storage _userAreaHourDeployed = userAreaHourDeployed[_user];\r\n        \r\n        for (h = start/CHECK_POINT_HOUR*CHECK_POINT_HOUR; h <= start; ++h) {\r\n            \r\n            \r\n            \r\n            ptUser = _userAreaHourDeployed.hour[h][area];\r\n            ptArea = areaHourDeployed[h][area];\r\n            totalInc += ptArea[0] + ptArea[1] + ptArea[2] - areaHourDeployed[h - 4][area][0] - areaHourDeployed[h - 8][area][1] - areaHourDeployed[h - 24][area][2];\r\n            userInc += ptUser[0] + ptUser[1] + ptUser[2] - _userAreaHourDeployed.hour[h - 4][area][0] - _userAreaHourDeployed.hour[h - 8][area][1] - _userAreaHourDeployed.hour[h - 24][area][2];\r\n        }\r\n\r\n        totalMiners[0] = areaCheckPoints[start/CHECK_POINT_HOUR*CHECK_POINT_HOUR][area] + uint32(totalInc);\r\n        userMiners[0] = userAreaCheckPoints[_user].hour[start/CHECK_POINT_HOUR*CHECK_POINT_HOUR][area] + uint32(userInc);\r\n\r\n        uint32 i = 1;\r\n        for (h = start + 1; h < end; ++h) {\r\n            \r\n            \r\n            \r\n            ptUser = _userAreaHourDeployed.hour[h][area];\r\n            ptArea = areaHourDeployed[h][area];\r\n            totalMiners[i] = totalMiners[i-1] + ptArea[0] + ptArea[1] + ptArea[2] - areaHourDeployed[h - 4][area][0] - areaHourDeployed[h - 8][area][1] - areaHourDeployed[h - 24][area][2];\r\n            userMiners[i] = userMiners[i-1] + ptUser[0] + ptUser[1] + ptUser[2] - _userAreaHourDeployed.hour[h - 4][area][0] - _userAreaHourDeployed.hour[h - 8][area][1] - _userAreaHourDeployed.hour[h - 24][area][2];\r\n            ++i;\r\n        }\r\n    }\r\n\r\n    \r\n    function withdraw() public {\r\n        uint remain = remainEther[msg.sender]; \r\n        require(remain > 0);\r\n        remainEther[msg.sender] = 0;\r\n\r\n        msg.sender.transfer(remain);\r\n    }\r\n\r\n    \r\n    function withdrawMinerFee() public onlyOwner {\r\n        require(amountEther > 0);\r\n        owner.transfer(amountEther);\r\n        amountEther = 0;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function setJewelContract(address jewel) public onlyOwner {\r\n        jewelContract = Jewel(jewel);\r\n    }\r\n\r\n    function incise(uint256 value) public returns (uint) {\r\n        require(jewelContract != address(0));\r\n\r\n        uint256 balance = balances[msg.sender];\r\n        require(balance >= value);\r\n        uint256 count = (value / (10 ** uint256(decimals)));\r\n        require(count >= 1);\r\n\r\n        uint ret = jewelContract.incise(msg.sender, count);\r\n\r\n        burn(count * 10 ** uint256(decimals));\r\n\r\n        return ret;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"remainEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_coldWallet\",\"type\":\"address\"}],\"name\":\"setColdWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableWhiteUserList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHECK_POINT_HOUR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawMinerFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"area\",\"type\":\"uint32\"},{\"name\":\"hour\",\"type\":\"uint32\"}],\"name\":\"getMyDeployAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"area\",\"type\":\"uint256\"}],\"name\":\"getDeployArrayLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"area\",\"type\":\"uint32\"},{\"name\":\"hour\",\"type\":\"uint32\"}],\"name\":\"getDeployAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[3]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"area\",\"type\":\"uint32\"},{\"name\":\"hour\",\"type\":\"uint32\"}],\"name\":\"getMyMinersAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setServerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"area\",\"type\":\"uint32[]\"}],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINER_8_HOURS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"area\",\"type\":\"uint256\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDeploy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"string\"}],\"name\":\"authUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINER_4_HOURS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"incise\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINER_24_HOURS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dayQualitysContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deployRange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"jewel\",\"type\":\"address\"}],\"name\":\"setJewelContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"constractDeployTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"area\",\"type\":\"uint32\"}],\"name\":\"getMyLastCollectHour\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableCheckArea\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jewelContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"area\",\"type\":\"uint32\"},{\"name\":\"hour\",\"type\":\"uint32\"}],\"name\":\"getMinersAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"area\",\"type\":\"uint32[]\"},{\"name\":\"period\",\"type\":\"uint32[]\"},{\"name\":\"count\",\"type\":\"uint32[]\"}],\"name\":\"deployMiners\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dayQualitys\",\"type\":\"address\"}],\"name\":\"setDayQualitys\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeScale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"area\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint32\"}],\"name\":\"DeployMiner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"area\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"areaCount\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Mineral","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d8cb369479822f27de29dcf334bbf681b82560b00d654f288f9d98cc4d914427"}]}