{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() \r\n        public \r\n        constant \r\n        returns (uint256);\r\n\r\n    function balanceOf(\r\n        address _address) \r\n        public \r\n        constant \r\n        returns (uint256 balance);\r\n\r\n    function allowance(\r\n        address _address, \r\n        address _to)\r\n        public \r\n        constant \r\n        returns (uint256 remaining);\r\n\r\n    function transfer(\r\n        address _to, \r\n        uint256 _value) \r\n        public \r\n        returns (bool success);\r\n\r\n    function approve(\r\n        address _to, \r\n        uint256 _value) \r\n        public \r\n        returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from, \r\n        address _to, \r\n        uint256 _value) \r\n        public \r\n        returns (bool success);\r\n\r\n    event Transfer(\r\n        address indexed _from, \r\n        address indexed _to, \r\n        uint256 _value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed _from, \r\n        address indexed _to, \r\n        uint256 _value\r\n    );\r\n}\r\n\r\ncontract Owned {\r\n    address owner;\r\n    address newOwner;\r\n    uint32 transferCount;    \r\n\r\n    event TransferOwnership(\r\n        address indexed _from, \r\n        address indexed _to\r\n    );\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        transferCount = 0;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(\r\n        address _newOwner) \r\n        public \r\n        onlyOwner \r\n    {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function viewOwner()\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return owner;\r\n    }\r\n\r\n    function viewTransferCount()\r\n        public\r\n        view\r\n        onlyOwner\r\n        returns (uint32)\r\n    {\r\n        return transferCount;\r\n    }\r\n\r\n    function isTransferPending() \r\n        public\r\n        view\r\n        returns (bool) {\r\n        require(\r\n            msg.sender == owner || \r\n            msg.sender == newOwner);\r\n        return newOwner != address(0);\r\n    }\r\n\r\n    function acceptOwnership()\r\n         public \r\n    {\r\n        require(msg.sender == newOwner);\r\n\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n        transferCount++;\r\n\r\n        emit TransferOwnership(\r\n            owner, \r\n            newOwner\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(\r\n        uint256 a, \r\n        uint256 b)\r\n        internal \r\n        pure \r\n        returns(uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(\r\n        uint256 a, \r\n        uint256 b)\r\n        internal \r\n        pure \r\n        returns(uint256 c) \r\n    {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(\r\n        uint256 a, \r\n        uint256 b) \r\n        internal \r\n        pure \r\n        returns(uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(\r\n        uint256 a, \r\n        uint256 b) \r\n        internal \r\n        pure \r\n        returns(uint256 c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(\r\n        address _from, \r\n        uint256 _value, \r\n        address token, \r\n        bytes data) \r\n        public;\r\n}\r\n\r\ncontract Token is ERC20Interface, Owned {\r\n    using SafeMath for uint256;\r\n\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    mapping(address => uint256) incomes;\r\n    mapping(address => uint256) expenses; \r\n    mapping(address => bool) frozenAccount;\r\n\r\n    event FreezeAccount(\r\n        address _address, \r\n        bool frozen\r\n    );\r\n    \r\n    event Burn(\r\n        address _address,\r\n        uint256 _value\r\n    );\r\n    \r\n    event MintToken(\r\n        uint256 _value\r\n    );\r\n\r\n    constructor(\r\n        uint256 _totalSupply,\r\n        string _name,\r\n        string _symbol,\r\n        uint8 _decimals) \r\n        public \r\n    {\r\n        symbol = _symbol;\r\n        name = _name;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply * 10**uint256(_decimals);\r\n        balances[owner] = totalSupply;\r\n\r\n        emit Transfer(address(0), owner, totalSupply);\r\n    }\r\n\r\n    function totalSupply()\r\n        public\r\n        constant\r\n        returns (uint256)\r\n    {\r\n        return totalSupply;\r\n    }\r\n\r\n    function _transfer(\r\n        address _from, \r\n        address _to, \r\n        uint256 _value) \r\n        internal \r\n        returns (bool success)\r\n    {\r\n        require (_to != 0x0);\r\n        require (balances[_from] >= _value);\r\n        require(!frozenAccount[_from]);\r\n        require(!frozenAccount[_to]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);  \r\n        balances[_to] = balances[_to].add(_value);   \r\n\r\n        incomes[_to] = incomes[_to].add(_value);\r\n        expenses[_from] = expenses[_from].add(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(\r\n        address _to, \r\n        uint256 _value) \r\n        public \r\n        returns (bool success) \r\n    {\r\n        return _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function approve(\r\n        address _to, \r\n        uint256 _value) \r\n        public \r\n        returns (bool success) \r\n    {\r\n        require (_to != 0x0);\r\n        require(!frozenAccount[_to]);\r\n\r\n        allowed[msg.sender][_to] = _value;\r\n\r\n        emit Approval(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n/*\r\n    function batchTransfer(\r\n        address[] _tos,\r\n        uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n\r\n    }\r\n\r\n*/\r\n\r\n    function transferFrom(\r\n        address _from, \r\n        address _to, \r\n        uint256 _value) \r\n        public \r\n        returns (bool success) \r\n    {\r\n        require(allowed[_from][_to] >= _value);\r\n        \r\n        allowed[_from][_to] = allowed[_from][_to].sub(_value);\r\n        return _transfer(_from, _to, _value);\r\n    }\r\n\r\n    function balanceOf(\r\n        address _address) \r\n        public \r\n        constant \r\n        returns (uint256 remaining) \r\n    {\r\n        require(_address != 0x0);\r\n//        require(_address == msg.sender);\r\n\r\n        return balances[_address];\r\n    }\r\n\r\n    function incomeOf(\r\n        address _address) \r\n        public \r\n        constant \r\n        returns (uint256 income) \r\n    {\r\n        require(_address != 0x0);\r\n\r\n        return incomes[_address];\r\n    }\r\n\r\n    function expenseOf(\r\n        address _address) \r\n        public \r\n        constant \r\n        returns (uint256 expense) \r\n    {\r\n        require(_address != 0x0);\r\n\r\n        return expenses[_address];\r\n    }\r\n\r\n    function allowance(\r\n        address _from, \r\n        address _to) \r\n        public \r\n        constant \r\n        returns (uint256 remaining) \r\n    {\r\n        require(_from != 0x0);\r\n        require(_to != 0x0);\r\n        require(_from == msg.sender || _to == msg.sender);\r\n\r\n        return allowed[_from][_to];\r\n    }\r\n\r\n\r\n    function approveAndCall(\r\n        address _to, \r\n        uint256 _value, \r\n        bytes _data) \r\n        public \r\n        returns (bool success) \r\n    {\r\n        if (approve(_to, _value)) {\r\n            ApproveAndCallFallBack(_to).receiveApproval(msg.sender, _value, this, _data);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n    function transferBackToken(\r\n        address _from, \r\n        uint256 _value) \r\n        public \r\n        onlyOwner \r\n        returns (bool success) \r\n    {\r\n        return _transfer(_from, owner, _value);\r\n    }\r\n\r\n    function freezeAccount(\r\n        address _address, \r\n        bool freeze) \r\n        public \r\n        onlyOwner \r\n        returns (bool success)\r\n    {\r\n        frozenAccount[_address] = freeze;\r\n\r\n        emit FreezeAccount(_address, freeze);\r\n\r\n        return true;\r\n    }\r\n\r\n    function isFrozenAccount(\r\n        address _address) \r\n        public \r\n        onlyOwner\r\n        constant \r\n        returns (bool frozen) \r\n    {\r\n        require(_address != 0x0);\r\n\r\n        return frozenAccount[_address];\r\n    }\r\n\r\n    function burn(\r\n        uint256 _value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(balances[msg.sender] >= _value);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);   \r\n        totalSupply = totalSupply.sub(_value);\r\n\r\n        emit Burn(msg.sender, _value);\r\n\r\n        return true;  \r\n    }\r\n\r\n    function mintToken(\r\n        uint256 _value)\r\n        public\r\n        onlyOwner\r\n        returns (bool success)\r\n    {\r\n        balances[owner] = balances[owner].add(_value);\r\n        totalSupply = totalSupply.add(_value);\r\n\r\n        emit MintToken(_value);\r\n\r\n        return true;        \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransferPending\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isFrozenAccount\",\"outputs\":[{\"name\":\"frozen\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferBackToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewTransferCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"incomeOf\",\"outputs\":[{\"name\":\"income\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"expenseOf\",\"outputs\":[{\"name\":\"expense\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FreezeAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"MintToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000006646565706572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034450520000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://98fbdca75d39f61f7e8298a4da113b0868c9eda2907ccb122e05693efe77bfb8"}]}