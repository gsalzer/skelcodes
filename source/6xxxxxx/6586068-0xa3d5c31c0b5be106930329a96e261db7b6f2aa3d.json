{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * Website: www.SafeInvest.co\r\n *\r\n * RECOMMENDED GAS LIMIT: 200000\r\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n */\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0);\r\n        uint256 c = _a / _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract SafeInvest {\r\n    \r\n\tusing SafeMath for uint;\r\n\r\n    address public owner;\r\n    address marketing = 0x906Bd47Fcf07F82B98F28d1e572cA8D2273AA7CD;\r\n    address admin = 0x1675bEACF5EB5e4e5955121b411Cd3Bc175989a8;\r\n\r\n    mapping (address => uint) deposit;\r\n    mapping (address => uint) checkpoint;\r\n    mapping (address => bool) commission; \r\n\r\n    mapping (address => address) referrers;\r\n\r\n    event LogInvestment(address indexed _addr, uint _value);\r\n    event LogPayment(address indexed _addr, uint _value);\r\n\tevent LogReferralPayment(address indexed _referral, address indexed _referrer, uint _value);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function renounceOwnership() external {\r\n        require(msg.sender == owner);\r\n        owner = 0x0;\r\n    }\r\n\r\n    function bytesToAddress(bytes _source) internal pure returns(address parsedreferrer) {\r\n        assembly {\r\n            parsedreferrer := mload(add(_source,0x14))\r\n        }\r\n        return parsedreferrer;\r\n    }\r\n\r\n    function() external payable {\r\n        if (msg.value >= 0 && msg.value < 0.0000002 ether) {\r\n            withdraw(0);\r\n        } \r\n\t\telse if (msg.value == 0.0000002 ether){\r\n            moneyBack();\r\n        } \r\n\t\telse {\r\n            invest();\r\n        }\t\t\r\n    }\r\n\t\r\n    function invest() public payable {\r\n        require(msg.value >= 0.01 ether);\r\n\t\t\r\n        if (deposit[msg.sender] > 0) {\r\n            withdraw(msg.value);\r\n        }\r\n\t\t\r\n        if (msg.data.length == 20) {\r\n            address _referrer = bytesToAddress(bytes(msg.data));\r\n\t\t\tif (_referrer != msg.sender) {\r\n\t\t\t\treferrers[msg.sender] = _referrer;\r\n\t\t\t}\r\n        }\t\t\r\n\t\t\r\n\t\tcheckpoint[msg.sender] = block.timestamp;\r\n\t\tdeposit[msg.sender] = deposit[msg.sender].add(msg.value);\r\n\t\t\r\n\t\temit LogInvestment(msg.sender, msg.value);\r\n\t}\t\t\r\n\r\n    function withdraw(uint _msgValue) internal {\r\n\t\tif (!commission[msg.sender]) {\r\n\t\t\tfirstWithdraw(deposit[msg.sender]+_msgValue);\r\n\t\t} else if (_msgValue > 0) {\r\n\t\t\tpayCommissions(_msgValue);\r\n\t\t}\r\n\t\t\r\n        uint _payout = getPayout(msg.sender);\r\n\r\n        if (_payout > 0) {\r\n            msg.sender.transfer(_payout);\r\n            emit LogPayment(msg.sender, _payout);\r\n        }\r\n\t\t\r\n\t\tcheckpoint[msg.sender] = block.timestamp;\r\n    }\r\n\t\r\n\tfunction firstWithdraw(uint _deposit) internal {\t\r\n\t\tcommission[msg.sender] = true;\r\n\t\tpayCommissions(_deposit);\r\n\t}\r\n\t\r\n\tfunction moneyBack() internal {\r\n\t\trequire(!commission[msg.sender]);\r\n\t\trequire(deposit[msg.sender] > 0);\r\n\t\trequire((block.timestamp.sub(checkpoint[msg.sender])).div(7 days) < 7);\r\n\t\t\r\n\t\tmsg.sender.transfer(deposit[msg.sender]);\r\n\t\t\r\n\t\tdeposit[msg.sender] = 0;\r\n\t\tcommission[msg.sender] = false;\r\n\t}\r\n\r\n\tfunction payCommissions(uint _deposit) internal {\t\r\n\t\tuint _admFee = _deposit.mul(3).div(100); \r\n\t\tuint _marketingFee = _deposit.div(10); \r\n        if (referrers[msg.sender] > 0) {\r\n\t\t\tuint _refFee = _deposit.mul(5).div(100);\r\n\t\t\treferrers[msg.sender].transfer(_refFee);\r\n\t\t\temit LogReferralPayment(msg.sender, referrers[msg.sender], _refFee);\r\n\t\t}\r\n\t\t\r\n\t\tadmin.transfer(_admFee);\r\n\t\tmarketing.transfer(_marketingFee);\r\n\t}\r\n\t\t\r\n    function getPayout(address _address) public view returns(uint) {\r\n\t\tuint rate = getInterest(_address);\r\n\t\treturn (deposit[_address].mul(rate).div(100)).mul(block.timestamp.sub(checkpoint[_address])).div(1 days);\r\n    }\r\n\t\r\n    function getInterest(address _address) internal view returns(uint) {\r\n        if (deposit[_address]<= 3 ether) {\r\n            return 4; \r\n        } else if (deposit[_address] <= 6 ether) {\r\n            return 5; \r\n        } else {\r\n            return 6; \r\n        }\r\n    }\t\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogReferralPayment\",\"type\":\"event\"}]","ContractName":"SafeInvest","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a87847d3908dbe10c7d104b8eab10fca38e24ddd435875123b8decf26c7bdea4"}]}