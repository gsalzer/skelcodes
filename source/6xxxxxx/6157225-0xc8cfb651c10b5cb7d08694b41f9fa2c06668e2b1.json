{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n\r\n  function balanceOf(address _who) public view returns (uint256);\r\n\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  // Owner's address\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    emit OwnerChanged(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n  event OwnerChanged(address indexed previousOwner,address indexed newOwner);\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Stoppable is Ownable {\r\n    \r\n    // Indicates if crowdsale is stopped\r\n    bool public stopped = false;\r\n\r\n    // Indicates if ELP or ETH withdrawal is enabled\r\n    bool public withdrawalEnabled = false;\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is stopped.\r\n    */\r\n    modifier whenStopped() {\r\n        require(stopped);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not stopped.\r\n    */\r\n    modifier whenNotStopped() {\r\n        require(!stopped);\r\n        _;\r\n    }\r\n\r\n    modifier whenWithdrawalEnabled() {\r\n        require(withdrawalEnabled);\r\n        _;\r\n    }\r\n\r\n    modifier whenWithdrawalDisabled() {\r\n        require(!withdrawalEnabled);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to stop, triggers stopped state\r\n    */\r\n    function stop() public onlyOwner whenNotStopped {\r\n        stopped = true;\r\n        emit Stopped(owner);\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to restart, triggers restarted state\r\n    */\r\n    function restart() public onlyOwner whenStopped {\r\n        stopped = false;\r\n        withdrawalEnabled = false;\r\n        emit Restarted(owner);\r\n    }\r\n\r\n    /** \r\n    * @dev enables withdrawals, only callable by the owner when the withdrawals are disabled\r\n    * @notice enables withdrawals, only callable by the owner when the withdrawals are disabled\r\n    */\r\n    function enableWithdrawal() public onlyOwner whenStopped whenWithdrawalDisabled {\r\n        withdrawalEnabled = true;\r\n        emit WithdrawalEnabled(owner);\r\n    }\r\n\r\n    /** \r\n    * @dev disables withdrawals, only callable by the owner when the withdrawals are enabled\r\n    * @notice disables withdrawals, only callable by the owner when the withdrawals are enabled\r\n    */\r\n    function disableWithdrawal() public onlyOwner whenWithdrawalEnabled {\r\n        withdrawalEnabled = false;\r\n        emit WithdrawalDisabled(owner);\r\n    }\r\n\r\n    /** \r\n    * Event for logging contract stopping\r\n    * @param owner who owns the contract\r\n    */\r\n    event Stopped(address owner);\r\n    \r\n    /** \r\n    * Event for logging contract restarting\r\n    * @param owner who owns the contract\r\n    */\r\n    event Restarted(address owner);\r\n\r\n    /** \r\n    * Event for logging enabling withdrawals\r\n    * @param owner who owns the contract\r\n    */\r\n    event WithdrawalEnabled(address owner);\r\n    \r\n    /** \r\n    * Event for logging disabling withdrawals\r\n    * @param owner who owns the contract\r\n    */\r\n    event WithdrawalDisabled(address owner);\r\n}\r\n\r\ncontract Whitelist {\r\n\r\n    // who can whitelist\r\n    address public whitelister;\r\n\r\n    // Whitelist mapping\r\n    mapping (address => bool) whitelist;\r\n\r\n    /**\r\n      * @dev The Whitelist constructor sets the original `whitelister` of the contract to the sender\r\n      * account.\r\n      */\r\n    constructor() public {\r\n        whitelister = msg.sender;\r\n    }\r\n\r\n    /**\r\n      * @dev Throws if called by any account other than the whitelister.\r\n      */\r\n    modifier onlyWhitelister() {\r\n        require(msg.sender == whitelister);\r\n        _;\r\n    }\r\n\r\n    /** \r\n    * @dev Only callable by the whitelister. Whitelists the specified address.\r\n    * @notice Only callable by the whitelister. Whitelists the specified address.\r\n    * @param _address Address to be whitelisted. \r\n    */\r\n    function addToWhitelist(address _address) public onlyWhitelister {\r\n        require(_address != address(0));\r\n        emit WhitelistAdd(whitelister, _address);\r\n        whitelist[_address] = true;\r\n    }\r\n    \r\n    /** \r\n    * @dev Only callable by the whitelister. Removes the specified address from whitelist.\r\n    * @notice Only callable by the whitelister. Removes the specified address from whitelist.\r\n    * @param _address Address to be removed from whitelist. \r\n    */\r\n    function removeFromWhitelist(address _address) public onlyWhitelister {\r\n        require(_address != address(0));\r\n        emit WhitelistRemove(whitelister, _address);\r\n        whitelist[_address] = false;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if the specified address is whitelisted.\r\n    * @notice Checks if the specified address is whitelisted. \r\n    * @param _address Address to be whitelisted.\r\n    */\r\n    function isWhitelisted(address _address) public view returns (bool) {\r\n        return whitelist[_address];\r\n    }\r\n\r\n    /**\r\n      * @dev Changes the current whitelister. Callable only by the whitelister.\r\n      * @notice Changes the current whitelister. Callable only by the whitelister.\r\n      * @param _newWhitelister Address of new whitelister.\r\n      */\r\n    function changeWhitelister(address _newWhitelister) public onlyWhitelister {\r\n        require(_newWhitelister != address(0));\r\n        emit WhitelisterChanged(whitelister, _newWhitelister);\r\n        whitelister = _newWhitelister;\r\n    }\r\n\r\n    /** \r\n    * Event for logging the whitelister change. \r\n    * @param previousWhitelister Old whitelister.\r\n    * @param newWhitelister New whitelister.\r\n    */\r\n    event WhitelisterChanged(address indexed previousWhitelister, address indexed newWhitelister);\r\n    \r\n    /** \r\n    * Event for logging when the user is whitelisted.\r\n    * @param whitelister Current whitelister.\r\n    * @param whitelistedAddress User added to whitelist.\r\n    */\r\n    event WhitelistAdd(address indexed whitelister, address indexed whitelistedAddress);\r\n    /** \r\n    * Event for logging when the user is removed from the whitelist.\r\n    * @param whitelister Current whitelister.\r\n    * @param whitelistedAddress User removed from whitelist.\r\n    */\r\n    event WhitelistRemove(address indexed whitelister, address indexed whitelistedAddress); \r\n}\r\n\r\ncontract ElpisCrowdsale is Stoppable, Whitelist {\r\n    using SafeMath for uint256;\r\n\r\n    // The token being sold\r\n    ERC20 public token;\r\n\r\n    // Wallet for contributions\r\n    address public wallet;\r\n\r\n    // Cumulative wei contributions per address\r\n    mapping (address => uint256) public ethBalances;\r\n\r\n    // Cumulative ELP allocations per address\r\n    mapping (address => uint256) public elpBalances;\r\n\r\n    // USD/ETH rate\r\n    uint256 public rate;\r\n\r\n    // Maximum wei contribution for non-whitelisted addresses\r\n    uint256 public threshold;\r\n\r\n    // Amount of wei raised\r\n    uint256 public weiRaised;\r\n\r\n    // Amount of USD raised\r\n    uint256 public usdRaised;\r\n\r\n    // Amount of tokens sold so far\r\n    uint256 public tokensSold;\r\n\r\n    // Maximum amount of ELP tokens to be sold\r\n    uint256 public cap;\r\n\r\n    // Block on which crowdsale is deployed\r\n    uint256 public deploymentBlock;\r\n\r\n    // Amount of ELP tokens sold per phase\r\n    uint256 public constant AMOUNT_PER_PHASE = 14500000 ether;\r\n\r\n    /**\r\n    * @param _rate USD/ETH rate\r\n    * @param _threshold Maximum wei contribution for non-whitelisted addresses\r\n    * @param _token Address of the token being sold\r\n    * @param _wallet Address of the wallet for contributions\r\n    */\r\n    constructor(uint256 _rate, uint256 _threshold, uint256 _cap, ERC20 _token, address _wallet) public {\r\n        require(_rate > 0);\r\n        require(_threshold > 0);\r\n        require(_cap > 0);\r\n        require(_token != address(0));\r\n        require(_wallet != address(0));\r\n\r\n        rate = _rate;\r\n        threshold = _threshold;\r\n        cap = _cap;\r\n        token = _token;\r\n        wallet = _wallet;\r\n        deploymentBlock = block.number;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the USD/ETH rate\r\n    * @param _rate USD/ETH rate\r\n    */\r\n    function setRate(uint256 _rate) public onlyOwner {\r\n        emit RateChanged(owner, rate, _rate);\r\n        rate = _rate;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the threshold\r\n    * @param _threshold Maximum wei contribution for non-whitelisted addresses\r\n    */\r\n    function setThreshold(uint256 _threshold) public onlyOwner {\r\n        emit ThresholdChanged(owner, threshold, _threshold);\r\n        threshold = _threshold;\r\n    }\r\n\r\n    /**\r\n    * @dev fallback function ***DO NOT OVERRIDE***\r\n    */\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev low level token purchase ***DO NOT OVERRIDE***\r\n    * @param _beneficiary Address performing the token purchase\r\n    */\r\n    function buyTokens(address _beneficiary) public payable whenNotStopped {\r\n        uint256 weiAmount = msg.value;\r\n        require(_beneficiary != address(0));\r\n        require(weiAmount != 0);\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        require(weiRaised <= cap);\r\n\r\n        uint256 dollars = _getUsdAmount(weiAmount);\r\n        uint256 tokens = _getTokenAmount(dollars);\r\n\r\n        // update state & statistics\r\n        uint256 previousEthBalance = ethBalances[_beneficiary];\r\n        ethBalances[_beneficiary] = ethBalances[_beneficiary].add(weiAmount);\r\n        elpBalances[_beneficiary] = elpBalances[_beneficiary].add(tokens);\r\n        tokensSold = tokensSold.add(tokens);\r\n        usdRaised = usdRaised.add(dollars);\r\n\r\n        if (ethBalances[_beneficiary] > threshold) {\r\n            whitelist[_beneficiary] = false;\r\n            // Transfer difference (up to threshold) to wallet\r\n            // if previous balance is lower than threshold\r\n            if (previousEthBalance < threshold)\r\n                wallet.transfer(threshold - previousEthBalance);\r\n            emit NeedKyc(_beneficiary, weiAmount, ethBalances[_beneficiary]);\r\n        } else {\r\n            whitelist[_beneficiary] = true;\r\n            // When cumulative contributions for address are lower\r\n            // than threshold, transfer whole contribution to wallet\r\n            wallet.transfer(weiAmount);\r\n            emit Contribution(_beneficiary, weiAmount, ethBalances[_beneficiary]);\r\n        }\r\n\r\n        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n    }\r\n\r\n    /**\r\n    * @notice Withdraws the tokens. For whitelisted contributors it withdraws ELP tokens.\r\n    * For non-whitelisted contributors it withdraws the threshold amount of ELP tokens,\r\n    * everything above the threshold amount is transfered back to contributor as ETH.\r\n    */\r\n    function withdraw() external whenWithdrawalEnabled {\r\n        uint256 ethBalance = ethBalances[msg.sender];\r\n        require(ethBalance > 0);\r\n        uint256 elpBalance = elpBalances[msg.sender];\r\n\r\n        // reentrancy protection\r\n        elpBalances[msg.sender] = 0;\r\n        ethBalances[msg.sender] = 0;\r\n\r\n        if (isWhitelisted(msg.sender)) {\r\n            // Transfer all ELP tokens to contributor\r\n            token.transfer(msg.sender, elpBalance);\r\n        } else {\r\n            // Transfer threshold equivalent ELP amount based on average price\r\n            token.transfer(msg.sender, elpBalance.mul(threshold).div(ethBalance));\r\n\r\n            if (ethBalance > threshold) {\r\n                // Excess amount (over threshold) of contributed ETH is\r\n                // transferred back to non-whitelisted contributor\r\n                msg.sender.transfer(ethBalance - threshold);\r\n            }\r\n        }\r\n        emit Withdrawal(msg.sender, ethBalance, elpBalance);\r\n    }\r\n\r\n    /**\r\n    * @dev This method can be used by the owner to extract mistakenly sent tokens\r\n    * or Ether sent to this contract.\r\n    * @param _token address The address of the token contract that you want to\r\n    * recover set to 0 in case you want to extract ether. It can't be ElpisToken.\r\n    */\r\n    function claimTokens(address _token) public onlyOwner {\r\n        require(_token != address(token));\r\n        if (_token == address(0)) {\r\n            owner.transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        ERC20 tokenReference = ERC20(_token);\r\n        uint balance = tokenReference.balanceOf(address(this));\r\n        token.transfer(owner, balance);\r\n        emit ClaimedTokens(_token, owner, balance);\r\n    }\r\n\r\n    /**\r\n    * @dev Checks how much of ELP tokens one can get for the specified USD amount.\r\n    * @param _usdAmount Specified USD amount.\r\n    * @return Returns how much ELP tokens you can currently get for the specified USD amount.\r\n    */\r\n    function _getTokenAmount(uint256 _usdAmount) internal view returns (uint256) {\r\n        uint256 phase = getPhase();\r\n        uint256 initialPriceNumerator = 110;\r\n        uint256 initialPriceDenominator = 1000;\r\n\r\n        uint256 scaleNumerator = 104 ** phase;\r\n        uint256 scaleDenominator = 100 ** phase;\r\n\r\n        return _usdAmount.mul(initialPriceNumerator).mul(scaleNumerator).div(initialPriceDenominator).div(scaleDenominator);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the USD amount for specified wei amount\r\n    * @param _weiAmount Specified wei amount\r\n    * @return Returns USD amount based on wei amount\r\n    */\r\n    function _getUsdAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        return _weiAmount.mul(rate);\r\n    }\r\n\r\n    /**\r\n    * @notice Gets the current phase of crowdsale.\r\n    * Tokens have different price during each phase.\r\n    * @return Returns the current crowdsale phase.\r\n    */\r\n    function getPhase() public view returns (uint256) {\r\n        return tokensSold / AMOUNT_PER_PHASE;\r\n    }\r\n\r\n    /**\r\n    * Event for token purchase logging\r\n    * @param purchaser who paid for the tokens\r\n    * @param beneficiary who got the tokens\r\n    * @param value weis paid for purchase\r\n    * @param amount amount of tokens purchased\r\n    */\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n    * Event for rate change logging\r\n    * @param owner who owns the contract\r\n    * @param oldValue old USD/ETH rate\r\n    * @param newValue new USD/ETH rate\r\n    */\r\n    event RateChanged(address indexed owner, uint256 oldValue, uint256 newValue);\r\n\r\n    /**\r\n    * Event for rate change logging\r\n    * @param owner who owns the contract\r\n    * @param oldValue old maximum wei contribution for non-whitelisted addresses value\r\n    * @param newValue new maximum wei contribution for non-whitelisted addresses value\r\n    */\r\n    event ThresholdChanged(address indexed owner, uint256 oldValue, uint256 newValue);\r\n\r\n    /**\r\n    * @param beneficiary who is the recipient of tokens from the contribution\r\n    * @param contributionAmount Amount of ETH contributor has contributed\r\n    * @param totalAmount Total amount of ETH contributor has contributed\r\n    */\r\n    event Contribution(address indexed beneficiary, uint256 contributionAmount, uint256 totalAmount);\r\n\r\n    /**\r\n    * @param beneficiary who is the recipient of tokens from the contribution\r\n    * @param contributionAmount Amount of ETH contributor has contributed\r\n    * @param totalAmount Total amount of ETH contributor has contributed\r\n    */\r\n    event NeedKyc(address indexed beneficiary, uint256 contributionAmount, uint256 totalAmount);\r\n\r\n    /**\r\n    * @param beneficiary who is the recipient of tokens from the contribution\r\n    * @param ethBalance ETH balance of the recipient of tokens from the contribution\r\n    * @param elpBalance ELP balance of the recipient of tokens from the contribution\r\n    */\r\n    event Withdrawal(address indexed beneficiary, uint256 ethBalance, uint256 elpBalance);\r\n\r\n    /**\r\n    * @param token claimed token\r\n    * @param owner who owns the contract\r\n    * @param amount amount of the claimed token\r\n    */\r\n    event ClaimedTokens(address indexed token, address indexed owner, uint256 amount);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelister\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AMOUNT_PER_PHASE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deploymentBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWhitelister\",\"type\":\"address\"}],\"name\":\"changeWhitelister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPhase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"elpBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_threshold\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"Contribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"NeedKyc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"elpBalance\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousWhitelister\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newWhitelister\",\"type\":\"address\"}],\"name\":\"WhitelisterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"whitelistedAddress\",\"type\":\"address\"}],\"name\":\"WhitelistAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"whitelistedAddress\",\"type\":\"address\"}],\"name\":\"WhitelistRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Stopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Restarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"WithdrawalEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"WithdrawalDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"ElpisCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000012200000000000000000000000000000000000000000000000030927f74c9de000000000000000000000000000000000000000000000047f6f77347a4c1b70000000000000000000000000000009b0774d09bab5d76dd2947024dde6febde28cb4f0000000000000000000000004a95a3f65d0eeb36a06a12ebf0fd9c5ec26f8401","Library":"","SwarmSource":"bzzr://a7df36da63b4abf1c542c4d29f5f1aa83df88ed93b1d075a1523ee9e37f670a4"}]}