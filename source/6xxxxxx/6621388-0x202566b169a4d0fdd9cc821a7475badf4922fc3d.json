{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n//\r\n// MeshX Token\r\n//\r\nlibrary SafeMath {\r\n\t\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    \tif (a == 0) {\r\n    \treturn 0;\r\n    \t}\r\n\r\n    \tc = a * b;\r\n    \tassert(c / a == b);\r\n    \treturn c;\r\n  \t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    \tassert(b <= a);\r\n    \treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    \tc = a + b;\r\n    \tassert(c >= a);\r\n    \treturn c;\r\n\t}\r\n}\r\n\r\ncontract MeshXToken {\r\n\tusing SafeMath for uint256;\r\n    string public constant name         = \"MeshX\";\r\n    string public constant symbol       = \"MSX\";\r\n    uint public constant decimals       = 18;\r\n    \r\n    uint256 EthRate                  = 10 ** decimals;\r\n    uint256 Supply                   = 3000000000;\r\n    uint256 public totalSupply          = Supply * EthRate;\r\n    uint256 public minInvEth            = 2 ether;\r\n    uint256 public maxInvEth            = 2000.0 ether;\r\n    uint256 public sellStartTime        = 1533052800;           // 2018/8/1\r\n    uint256 public sellDeadline1        = sellStartTime + 60 days;\r\n    uint256 public sellDeadline2        = sellDeadline1 + 60 days;\r\n    uint256 public freezeDuration       = 180 days;\r\n    uint256 public ethRate1          = 3600;\r\n    uint256 public ethRate2          = 3000;\r\n\r\n    bool public running                 = true;\r\n    bool public buyable                 = true;\r\n    \r\n    address owner;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => bool) public whitelist;\r\n    mapping (address => uint256) whitelistLimit;\r\n\r\n    struct BalanceInfo {\r\n        uint256 balance;\r\n        uint256[] freezeAmount;\r\n        uint256[] releaseTime;\r\n    }\r\n    mapping (address => BalanceInfo) balances;\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event BeginRunning();\r\n    event Pause();\r\n    event BeginSell();\r\n    event PauseSell();\r\n    event Burn(address indexed burner, uint256 val);\r\n    event Freeze(address indexed from, uint256 value);\r\n    \r\n    constructor () public{\r\n        owner = msg.sender;\r\n        balances[owner].balance = totalSupply;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyWhitelist() {\r\n        require(whitelist[msg.sender] == true);\r\n        _;\r\n    }\r\n    \r\n    modifier isRunning(){\r\n        require(running);\r\n        _;\r\n    }\r\n    modifier isNotRunning(){\r\n        require(!running);\r\n        _;\r\n    }\r\n    modifier isBuyable(){\r\n        require(buyable && now >= sellStartTime && now <= sellDeadline2);\r\n        _;\r\n    }\r\n    modifier isNotBuyable(){\r\n        require(!buyable || now < sellStartTime || now > sellDeadline2);\r\n        _;\r\n    }\r\n    // mitigates the ERC20 short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n\r\n    // 1eth = newRate tokens\r\n    function setPublicOfferPrice(uint256 _rate1, uint256 _rate2) onlyOwner public {\r\n        ethRate1 = _rate1;\r\n        ethRate2 = _rate2;       \r\n    }\r\n\r\n    //\r\n    function setPublicOfferLimit(uint256 _minVal, uint256 _maxVal) onlyOwner public {\r\n        minInvEth   = _minVal;\r\n        maxInvEth   = _maxVal;\r\n    }\r\n    \r\n    function setPublicOfferDate(uint256 _startTime, uint256 _deadLine1, uint256 _deadLine2) onlyOwner public {\r\n        sellStartTime = _startTime;\r\n        sellDeadline1 = _deadLine1;\r\n        sellDeadline2 = _deadLine2;\r\n    }\r\n        \r\n    function transferOwnership(address _newOwner) onlyOwner public {\r\n        if (_newOwner !=    address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n    \r\n    function pause() onlyOwner isRunning    public   {\r\n        running = false;\r\n        emit Pause();\r\n    }\r\n    \r\n    function start() onlyOwner isNotRunning public   {\r\n        running = true;\r\n        emit BeginRunning();\r\n    }\r\n\r\n    function pauseSell() onlyOwner  isBuyable isRunning public{\r\n        buyable = false;\r\n        emit PauseSell();\r\n    }\r\n    \r\n    function beginSell() onlyOwner  isNotBuyable isRunning  public{\r\n        buyable = true;\r\n        emit BeginSell();\r\n    }\r\n\r\n    //\r\n    // _amount in MeshX, \r\n    //\r\n    function airDeliver(address _to,    uint256 _amount)  onlyOwner public {\r\n        require(owner != _to);\r\n        require(_amount > 0);\r\n        require(balances[owner].balance >= _amount);\r\n        \r\n        // take big number as wei\r\n        if(_amount < Supply){\r\n            _amount = _amount * EthRate;\r\n        }\r\n        balances[owner].balance = balances[owner].balance.sub(_amount);\r\n        balances[_to].balance = balances[_to].balance.add(_amount);\r\n        emit Transfer(owner, _to, _amount);\r\n    }\r\n    \r\n    function airDeliverMulti(address[]  _addrs, uint256 _amount) onlyOwner public {\r\n        require(_addrs.length <=  255);\r\n        \r\n        for (uint8 i = 0; i < _addrs.length; i++)   {\r\n            airDeliver(_addrs[i],   _amount);\r\n        }\r\n    }\r\n    \r\n    function airDeliverStandalone(address[] _addrs, uint256[] _amounts) onlyOwner public {\r\n        require(_addrs.length <=  255);\r\n        require(_addrs.length ==  _amounts.length);\r\n        \r\n        for (uint8 i = 0; i < _addrs.length;    i++) {\r\n            airDeliver(_addrs[i],   _amounts[i]);\r\n        }\r\n    }\r\n\r\n    //\r\n    // _amount, _freezeAmount in MeshX\r\n    //\r\n    function  freezeDeliver(address _to, uint _amount, uint _freezeAmount, uint _freezeMonth, uint _unfreezeBeginTime ) onlyOwner public {\r\n        require(owner != _to);\r\n        require(_freezeMonth > 0);\r\n        require(_amount >= _freezeAmount);\r\n        \r\n        uint average = _freezeAmount / _freezeMonth;\r\n        BalanceInfo storage bi = balances[_to];\r\n        uint[] memory fa = new uint[](_freezeMonth);\r\n        uint[] memory rt = new uint[](_freezeMonth);\r\n\r\n        if(_amount < Supply){\r\n            _amount = _amount * EthRate;\r\n            average = average * EthRate;\r\n            _freezeAmount = _freezeAmount * EthRate;\r\n        }\r\n        require(balances[owner].balance > _amount);\r\n        uint remainAmount = _freezeAmount;\r\n        \r\n        if(_unfreezeBeginTime == 0)\r\n            _unfreezeBeginTime = now + freezeDuration;\r\n        for(uint i=0;i<_freezeMonth-1;i++){\r\n            fa[i] = average;\r\n            rt[i] = _unfreezeBeginTime;\r\n            _unfreezeBeginTime += freezeDuration;\r\n            remainAmount = remainAmount.sub(average);\r\n        }\r\n        fa[i] = remainAmount;\r\n        rt[i] = _unfreezeBeginTime;\r\n        \r\n        bi.balance = bi.balance.add(_amount);\r\n        bi.freezeAmount = fa;\r\n        bi.releaseTime = rt;\r\n        balances[owner].balance = balances[owner].balance.sub(_amount);\r\n        emit Transfer(owner, _to, _amount);\r\n        emit Freeze(_to, _freezeAmount);\r\n    }\r\n    \r\n    \r\n    // buy tokens directly\r\n    function () external payable {\r\n        buyTokens();\r\n    }\r\n\r\n    //\r\n    function buyTokens() payable isRunning isBuyable onlyWhitelist  public {\r\n        uint256 weiVal = msg.value;\r\n        address investor = msg.sender;\r\n        require(investor != address(0) && weiVal >= minInvEth && weiVal <= maxInvEth);\r\n        require(weiVal.add(whitelistLimit[investor]) <= maxInvEth);\r\n        \r\n        uint256 amount = 0;\r\n        if(now > sellDeadline1)\r\n            amount = msg.value.mul(ethRate2);\r\n        else\r\n            amount = msg.value.mul(ethRate1);   \r\n\r\n        whitelistLimit[investor] = weiVal.add(whitelistLimit[investor]);\r\n        \r\n        balances[owner].balance = balances[owner].balance.sub(amount);\r\n        balances[investor].balance = balances[investor].balance.add(amount);\r\n        emit Transfer(owner, investor, amount);\r\n    }\r\n\r\n    function addWhitelist(address[] _addrs) public onlyOwner {\r\n        require(_addrs.length <=  255);\r\n\r\n        for (uint8 i = 0; i < _addrs.length; i++) {\r\n            if (!whitelist[_addrs[i]]){\r\n                whitelist[_addrs[i]] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256) {\r\n        return balances[_owner].balance;\r\n    }\r\n    \r\n    function freezeOf(address _owner) constant  public returns (uint256) {\r\n        BalanceInfo storage bi = balances[_owner];\r\n        uint freezeAmount = 0;\r\n        uint t = now;\r\n        \r\n        for(uint i=0;i< bi.freezeAmount.length;i++){\r\n            if(t < bi.releaseTime[i])\r\n                freezeAmount += bi.freezeAmount[i];\r\n        }\r\n        return freezeAmount;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _amount)  isRunning onlyPayloadSize(2 *  32) public returns (bool success) {\r\n        require(_to != address(0));\r\n        uint freezeAmount = freezeOf(msg.sender);\r\n        uint256 _balance = balances[msg.sender].balance.sub(freezeAmount);\r\n        require(_amount <= _balance);\r\n        \r\n        balances[msg.sender].balance = balances[msg.sender].balance.sub(_amount);\r\n        balances[_to].balance = balances[_to].balance.add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) isRunning onlyPayloadSize(3 * 32) public returns (bool   success) {\r\n        require(_from   != address(0) && _to != address(0));\r\n        require(_amount <= allowed[_from][msg.sender]);\r\n        uint freezeAmount = freezeOf(_from);\r\n        uint256 _balance = balances[_from].balance.sub(freezeAmount);\r\n        require(_amount <= _balance);\r\n        \r\n        balances[_from].balance = balances[_from].balance.sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to].balance = balances[_to].balance.add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) isRunning public returns (bool   success) {\r\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { \r\n            return  false; \r\n        }\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) constant public returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function withdraw() onlyOwner public {\r\n        address myAddress = this;\r\n        require(myAddress.balance > 0);\r\n        owner.transfer(myAddress.balance);\r\n        emit Transfer(this, owner, myAddress.balance);    \r\n    }\r\n\r\n    function burn(uint256 _value) onlyOwner public returns (bool success) {\r\n        require(_value <= balances[msg.sender].balance);\r\n\r\n        balances[msg.sender].balance = balances[msg.sender].balance.sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Supply = totalSupply / EthRate;\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"airDeliverMulti\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"airDeliver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_freezeAmount\",\"type\":\"uint256\"},{\"name\":\"_freezeMonth\",\"type\":\"uint256\"},{\"name\":\"_unfreezeBeginTime\",\"type\":\"uint256\"}],\"name\":\"freezeDeliver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate1\",\"type\":\"uint256\"},{\"name\":\"_rate2\",\"type\":\"uint256\"}],\"name\":\"setPublicOfferPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezeDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_deadLine1\",\"type\":\"uint256\"},{\"name\":\"_deadLine2\",\"type\":\"uint256\"}],\"name\":\"setPublicOfferDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"beginSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxInvEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellDeadline2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"airDeliverStandalone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRate2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethRate1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minVal\",\"type\":\"uint256\"},{\"name\":\"_maxVal\",\"type\":\"uint256\"}],\"name\":\"setPublicOfferLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"running\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellDeadline1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeginRunning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeginSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"}]","ContractName":"MeshXToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://44a978905ac3842535e5d4e80c007d0506ad81a4c20b5684189a3c598cc0b738"}]}