{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * Контракт Копилка\r\n *\r\n * Возвращает проценты от ваших депозитов, каждый следующий больше предыдущего\r\n * до достижения итоговой суммарной прибыли от 53% до 70%.\r\n *\r\n * Первый депозит определяет ваш ежедневный взнос\r\n * Это определяет, сколько вы можете вносить в копилку в среднем в течение дня.\r\n *\r\n * Копилка на каждый депозит (после первого) возвращает постоянно\r\n * увеличивающийся процент от внесенного депозита\r\n *\r\n * Когда суммарно внесенная сумма становится кратна депозиту, вы переходите на\r\n * новый уровень. С каждым уровнем возвращаемые копилкой проценты увеличиваются.\r\n * Уровень - это во сколько раз сумма внесенных вами взносов больше первого депозита.\r\n *\r\n * Например, вы внесли 1 ETH. Теперь это ваш средний ежедневный взнос. И вы\r\n * на 1 уровне.\r\n *\r\n * Через день вы внесли 0.5 ETH. Общая сумма вкладов 1.5 ETH, вы всё ещё\r\n * на первом уровне. Копилка сразу же возвращает вам примерно 0.24% от вклада\r\n *\r\n * Еще через день вы внесли еще 1 ETH. 0.5 ETH из них идут на первый уровень\r\n * до достижения вами суммарно внесенной сумме 2 ETH, а ещё 0.5 уже на втором\r\n * вашем уровне. Копилка сразу возвращает вам 0.24% от 0.5 ETH и 0.96% от 0.5 на\r\n * втором уровне.\r\n *\r\n * И так далее. Примерно на 20м уровне копилка будет возвращать около 100%\r\n * взноса. Примерно на 35м уровне копилка будет возвращать около 300% взноса\r\n * и в сумме вы получите всё, что внесли, обратно. Далее до 45 уровня идет\r\n * чистая прибыль. Внося ежедневный взнос, вы сразу получаете обратно от 300%\r\n * до 500% от взноса. Перехода на 46й уровень не происходит, вы удаляетесь\r\n * из копилки и для продолжения получения прибыли вам нужно делать новый вклад.\r\n *\r\n * Замечания:\r\n *\r\n * Минимальный первый депозит 0.01 ETH, максимальный - 5 ETH\r\n *\r\n * Помните, что рассчитать первый депозит надо таким образом, чтобы вы смогли\r\n * примерно ежедневно в течение 20 дней вносить его в копилку. Далее копилка\r\n * будет возвращать вам больше, чем вы вносите, так что проблем не будет.\r\n *\r\n * При ежедневном взносе 0.01 ETH суммарная прибыль 70%, 1 ETH - 67%,\r\n * 5 ETH - 53%, при промежуточных суммах - где-то между ними (процент убывает\r\n * с ростом первого депозита).\r\n *\r\n * Вы можете вносить ежедневные взносы в любое время, любыми частями. Вы не\r\n * потеряете время, если в среднем будете вносить в неделю сумму, равную 7\r\n * первым депозитам. Это можно сделать и в последний день недели. А можно\r\n * частями в течение недели. Тогда вы будете набирать 7 уровней в неделю.\r\n *\r\n * За один платеж вы сможете продвинуться максимум на 7 уровней. Поэтому, если\r\n * даже последний платеж вы сделали больше недели назад, при совершении\r\n * максимального платежа, вам из них будет засчитана только неделя.\r\n *\r\n * Контракт отслеживает, сколько вы можете внести на текущий момент, чтобы\r\n * взносы в среднем в день не превышали размера первоначального депозита. Если вы\r\n * пытаетесь внести большую сумму, контракт примет только максимально разрешенную\r\n * для вас сумму и вернет сдачу. Поэтому вы можете не беспокоиться и посылать\r\n * любые суммы.\r\n *\r\n * Возврат депозитов.\r\n *\r\n * Если вы неправильно подобрали размер взноса или просто хотите перестать копить,\r\n * то вы можете забрать депозит, послав 0.00000112 на адрес контракта.\r\n * Будет возвращено 70% от внесенных вами средств + у вас останется всё то,\r\n * что вам уже выплатила копилка. Возврат депозита возможен до 10 уровня включительно.\r\n *\r\n *\r\n */\r\n\r\n/** Таблица депозитов и возвратов для начального депозита 1 ETH\r\n\r\n       Уровень/      Проценты        Суммарный\r\n       Cумма (ETH)\t  Возврата        доход (ETH)\r\n           1\t\t\t0,24%\t\t\t0,00\r\n           2\t\t\t0,96%\t\t\t0,01\r\n           3\t\t\t2,15%\t\t\t0,03\r\n           4\t\t\t3,82%\t\t\t0,07\r\n           5\t\t\t5,98%\t\t\t0,13\r\n           6\t\t\t8,60%\t\t\t0,22\r\n           7\t\t\t11,7%\t\t\t0,33\r\n           8\t\t\t15,3%\t\t\t0,49\r\n           9\t\t\t19,4%\t\t\t0,68\r\n           10\t\t\t23,9%\t\t\t0,92\r\n           11\t\t\t28,9%\t\t\t1,21\r\n           12\t\t\t34,4%\t\t\t1,55\r\n           13\t\t\t40,4%\t\t\t1,96\r\n           14\t\t\t46,8%\t\t\t2,43\r\n           15\t\t\t53,8%\t\t\t2,96\r\n           16\t\t\t61,2%\t\t\t3,58\r\n           17\t\t\t69,1%\t\t\t4,27\r\n           18\t\t\t77,4%\t\t\t5,04\r\n           19\t\t\t86,3%\t\t\t5,90\r\n           20\t\t\t95,6%\t\t\t6,86\r\n           21\t\t\t105%\t\t\t7,91\r\n           22\t\t\t116%\t\t\t9,07\r\n           23\t\t\t126%\t\t\t10,33\r\n           24\t\t\t138%\t\t\t11,71\r\n           25\t\t\t149%\t\t\t13,20\r\n           26\t\t\t162%\t\t\t14,82\r\n           27\t\t\t174%\t\t\t16,56\r\n           28\t\t\t187%\t\t\t18,44\r\n           29\t\t\t201%\t\t\t20,45\r\n           30\t\t\t215%\t\t\t22,60\r\n           31\t\t\t230%\t\t\t24,89\r\n           32\t\t\t245%\t\t\t27,34\r\n           33\t\t\t260%\t\t\t29,94\r\n           34\t\t\t276%\t\t\t32,71\r\n           35\t\t\t293%\t\t\t35,63\r\n           36\t\t\t310%\t\t\t38,73\r\n           37\t\t\t327%\t\t\t42,00\r\n           38\t\t\t345%\t\t\t45,46\r\n           39\t\t\t364%\t\t\t49,09\r\n           40\t\t\t382%\t\t\t52,91\r\n           41\t\t\t402%\t\t\t56,93\r\n           42\t\t\t422%\t\t\t61,15\r\n           43\t\t\t442%\t\t\t65,57\r\n           44\t\t\t463%\t\t\t70,19\r\n           45\t\t\t484%\t\t\t75,03\r\n*/\r\n\r\ncontract Kopilka {\r\n    uint constant ADV_PERCENT = 2; //2%\r\n    uint constant TEAM_PERCENT = 2; //2%\r\n    uint constant MAX_LEVEL = 45; //Максимальный уровень, который можно достичь\r\n    uint constant PERIOD = 1 days; //Регулярность внесения взносов\r\n    uint constant MAX_ONE_TIME_PERIODS = 7; //Максимальный размер взноса (за сколько дней)\r\n    uint constant MIN_DEPOSIT = 0.01 ether; //Минимальный депозит\r\n    uint constant MAX_DEPOSIT = 5 ether;    //Максимальный депозит\r\n    uint constant RETURN_DEPOSIT_PERCENT = 70; //70% - процент возврата депозита\r\n    uint constant MAX_LEVEL_TO_RETURN_DEPOSIT = 10; //Уровень, до которого можно вернуть депозит\r\n\r\n    //Структура данных пользователя\r\n    struct User {\r\n        uint dep;   //Размер ежедневного взноса\r\n        uint value; //Сумма всех взносов\r\n        uint atTime;//Когда был сделан последний взнос (если бы они делались максимально равномерно)\r\n    }\r\n\r\n    //Все пользователи\r\n    mapping (address => User) public users;\r\n\r\n    //Адреса кошельков администрации\r\n    address constant TEAM_ADDRESS = 0xF996A4e45E2f32F6BC5827A2448f7c2e54F69845;\r\n    address constant ADV_ADDRESS = 0x18d84B54b6b1AEC9cdb2ef9B60E669FAD12Bb778;\r\n\r\n    function () public payable {\r\n        User storage user = users[msg.sender]; // это вы\r\n\r\n        if (msg.value != 0.00000112 ether) { //Если внесли взнос, то\r\n            //Отчисления администрации на развитие проекта\r\n            ADV_ADDRESS.transfer(msg.value * ADV_PERCENT / 100);\r\n            TEAM_ADDRESS.transfer(msg.value * TEAM_PERCENT / 100);\r\n\r\n            if (user.value == 0) { //Если пользователя ещё не было\r\n                //То это первый взнос. Надо его проверить на величину\r\n                require(MIN_DEPOSIT <= msg.value && msg.value <= MAX_DEPOSIT);\r\n\r\n                //Создаём пользователя\r\n                user.dep = msg.value;\r\n                user.value = msg.value;\r\n                user.atTime = now;\r\n            } else { //Это повторый взнос\r\n\r\n                //Узнаём, сколько можно ещё пользователю внести\r\n                //исходя из скорости внесения первый взнос/в день.\r\n                uint allowed = getAllowedInvestmentAmount(msg.sender);\r\n\r\n                //Сколько он прислал\r\n                uint investment = msg.value;\r\n                uint sendback = 0; //Сколько мы должны ему отправить обратно\r\n\r\n                //Если он прислал больше, чем ему разрешено\r\n                if(investment > allowed){\r\n                    //Сразу записываем ему сдачу\r\n                    sendback = investment - allowed;\r\n                    //Позволяем ему внести только сколько разрешено\r\n                    investment = allowed;\r\n                }\r\n\r\n                //Корректируем время последнего взноса с учетом неполного взноса\r\n                //Чтобы можно было довнести позже\r\n                user.atTime = now - (allowed - investment)*PERIOD/user.dep;\r\n\r\n                uint dep = user.dep;  //Размер первого взноса\r\n                uint amount = user.value; //Сколько пользователь уже всего внес\r\n                uint level = amount/dep; //На каком уровне пользователь\r\n                uint endLevel = (amount+investment)/dep; //На каком уровне он окажется после этого взноса\r\n\r\n                //По всем новым уровням надо сделать ему выплаты\r\n                for(uint l=level; l<=endLevel; ++l){\r\n                    //Определяем размер взноса на данном уровне\r\n                    uint levelInvestment = dep*(l+1) - amount;\r\n                    //Если макс размер взноса на этом уровне превышает фактический взнос\r\n                    //то частично оплачиваем данный уровень\r\n                    if(levelInvestment > investment) levelInvestment = investment;\r\n\r\n                    //Добавляем выплату на текущем уровне\r\n                    sendback += calcReturn(levelInvestment, l);\r\n                    //Добавляем эту выплату к сумме всех взносов пользователя\r\n                    amount += levelInvestment;\r\n                    //Вычитаем уже засчитанный взнос из присланного пользователем взноса\r\n                    investment -= levelInvestment;\r\n                }\r\n\r\n                //Обновляем сумму взносов пользователя\r\n                user.value = amount;\r\n\r\n                //Если пользователь перешел на слишком высокий уровень\r\n                //Удаляем его из копилки\r\n                if(endLevel > MAX_LEVEL)\r\n                    delete users[msg.sender];\r\n\r\n                //Отправляем сдачу и проценты за взнос пользователю\r\n                msg.sender.transfer(sendback);\r\n            }\r\n        } else if(user.dep > 0){ //Если пользователь вообще что-то вносил\r\n            //Проверяем, что у него не слишком большой уровень для возврата взносов\r\n            require(user.value/user.dep <= MAX_LEVEL_TO_RETURN_DEPOSIT, \"It's too late to request a refund at this point\");\r\n\r\n            //Возвращаем 70% от всего им внесенного. Проценты, уже выплаченные ему, у него остаются.\r\n            msg.sender.transfer(user.value * RETURN_DEPOSIT_PERCENT / 100);\r\n\r\n            //Удаляем пользователя из копилки.\r\n            delete users[msg.sender];\r\n        }\r\n\r\n    }\r\n\r\n    //Получает максимально возможный взнос от пользователя на текущий момент\r\n    //Из расчета, чтобы пользователь вносил в среднем размер первого депозита в день.\r\n    function getAllowedInvestmentAmount(address addr) public view returns (uint) {\r\n        User storage user = users[addr]; // пользователь\r\n        //Сколько надо было бы внести, если делать это аккуратно\r\n        uint allowed = user.dep * (now - user.atTime) / PERIOD;\r\n        //Если внести надо больше, чем за неделю, уменьшаем до взноса за неделю\r\n        if(allowed > MAX_ONE_TIME_PERIODS*user.dep)\r\n            allowed = MAX_ONE_TIME_PERIODS*user.dep;\r\n        //Проверим, что этот взнос не превысит максимальную сумму взносов\r\n        uint max_investment = user.dep*MAX_LEVEL;\r\n        //Если взнос превысит максимальную сумму взносов пользователя\r\n        //То уменьшаем взнос до безопасной величины\r\n        if(user.value + allowed > max_investment)\r\n            allowed = max_investment > user.value ? max_investment - user.value : 0;\r\n        //Возвращаем размер текущего макс взноса\r\n        return allowed;\r\n    }\r\n\r\n    //Получает возврат процента от заданного взноса на заданном уровне\r\n    function calcReturn(uint investment, uint level) public pure returns (uint){\r\n        //Если уроверь больше максимального, то ничего не возвращем\r\n        if(level > MAX_LEVEL)\r\n            level = 0;\r\n        require(investment <= MAX_DEPOSIT);\r\n        //Хитрая квадратичная формула, которая позволяет вначале проценты давать маленькие,\r\n        //а потом большие, подобрана для оптимальной работы контракта и хорошей прибыли\r\n        //пользователей. Таблица значений для примера в комментариях в шапке.\r\n        return investment * level * level * (24400 - 500 * investment / 1 ether) / 10000000;\r\n    }\r\n\r\n    //Получает процент, который будет выплачиваться при заданном первом взносе на заданном уровне\r\n    function calcReturnPercent(uint dep, uint level) public pure returns(uint) {\r\n        return calcReturn(dep, level)*1000000/dep;\r\n    }\r\n\r\n    //Получает все проценты на всех уровнях для заданного первого взноса\r\n    function calcReturnPercents(uint dep) public pure returns (uint[] percents){\r\n        percents = new uint[](MAX_LEVEL);\r\n        for(uint i=0; i<MAX_LEVEL; ++i){\r\n            percents[i] = calcReturnPercent(dep, i);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"dep\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"calcReturnPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investment\",\"type\":\"uint256\"},{\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"calcReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAllowedInvestmentAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"dep\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"atTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"dep\",\"type\":\"uint256\"}],\"name\":\"calcReturnPercents\",\"outputs\":[{\"name\":\"percents\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Kopilka","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6e30340977ef5b55064e40793b8d9305b74d10a1371670f8a7d7db090397f146"}]}