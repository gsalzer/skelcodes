{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n/*\r\n\r\n\r\n  ______ .______     ____    ____ .______   .___________.  ______      ____    __    ____  ___      .______          _______.\r\n /      ||   _  \\    \\   \\  /   / |   _  \\  |           | /  __  \\     \\   \\  /  \\  /   / /   \\     |   _  \\        /       |\r\n|  ,----'|  |_)  |    \\   \\/   /  |  |_)  | `---|  |----`|  |  |  |     \\   \\/    \\/   / /  ^  \\    |  |_)  |      |   (----`\r\n|  |     |      /      \\_    _/   |   ___/      |  |     |  |  |  |      \\            / /  /_\\  \\   |      /        \\   \\    \r\n|  `----.|  |\\  \\----.   |  |     |  |          |  |     |  `--'  |       \\    /\\    / /  _____  \\  |  |\\  \\----.----)   |   \r\n \\______|| _| `._____|   |__|     | _|          |__|      \\______/         \\__/  \\__/ /__/     \\__\\ | _| `._____|_______/    \r\n                                                                                                                             \r\n\r\nwebsite:    https://cryptowars.ga\r\n\r\ndiscord:    https://discord.gg/8AFP9gS\r\n\r\n25% Dividends Fees/Payouts\r\n\r\nCrypto Warriors Card Game is also included in the contract and played on the same page as the Exchange\r\n\r\n2% of Fees go into the card game insurance accounts for card holders that face a half-life cut\r\n\r\n5% of all Card gains go to Card insurance accounts\r\n\r\nReferral Program pays out 33% of Buy/Sell Fees to user of masternode link\r\n\r\n*/\r\n\r\ncontract AcceptsExchange {\r\n    cryptowars public tokenContract;\r\n\r\n    function AcceptsExchange(address _tokenContract) public {\r\n        tokenContract = cryptowars(_tokenContract);\r\n    }\r\n\r\n    modifier onlyTokenContract {\r\n        require(msg.sender == address(tokenContract));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Standard ERC677 function that will handle incoming token transfers.\r\n    *\r\n    * @param _from  Token sender address.\r\n    * @param _value Amount of tokens.\r\n    * @param _data  Transaction metadata.\r\n    */\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\r\n    function tokenFallbackExpanded(address _from, uint256 _value, bytes _data, address _sender, address _referrer) external returns (bool);\r\n}\r\n\r\ncontract cryptowars {\r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n    // only people with tokens\r\n    modifier onlyBagholders() {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n    \r\n    // only people with profits\r\n    modifier onlyStronghands() {\r\n        require(myDividends(true) > 0 || ownerAccounts[msg.sender] > 0);\r\n        //require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n    \r\n      modifier notContract() {\r\n      require (msg.sender == tx.origin);\r\n      _;\r\n    }\r\n\r\n    modifier allowPlayer(){\r\n        \r\n        require(boolAllowPlayer);\r\n        _;\r\n    }\r\n\r\n    // administrators can:\r\n    // -> change the name of the contract\r\n    // -> change the name of the token\r\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\r\n    // they CANNOT:\r\n    // -> take funds\r\n    // -> disable withdrawals\r\n    // -> kill the contract\r\n    // -> change the price of tokens\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[_customerAddress]);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyActive(){\r\n        require(boolContractActive);\r\n        _;\r\n    }\r\n\r\n     modifier onlyCardActive(){\r\n        require(boolCardActive);\r\n        _;\r\n    }\r\n\r\n    \r\n    // ensures that the first tokens in the contract will be equally distributed\r\n    // meaning, no divine dump will be ever possible\r\n    // result: healthy longevity.\r\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\r\n        address _customerAddress = msg.sender;\r\n        \r\n        // are we still in the vulnerable phase?\r\n        // if so, enact anti early whale protocol \r\n        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\r\n            require(\r\n                // is the customer in the ambassador list?\r\n                (ambassadors_[_customerAddress] == true &&\r\n                \r\n                // does the customer purchase exceed the max ambassador quota?\r\n                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_) ||\r\n\r\n                (_customerAddress == dev)\r\n                \r\n            );\r\n            \r\n            // updated the accumulated quota    \r\n            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\r\n        \r\n            // execute\r\n            _;\r\n        } else {\r\n            // in case the ether count drops low, the ambassador phase won't reinitiate\r\n            onlyAmbassadors = false;\r\n            _;    \r\n        }\r\n        \r\n    }\r\n    \r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n\r\n    event onCardBuy(\r\n        address customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 card,\r\n        uint256 newPrice,\r\n        uint256 halfLifeTime\r\n    );\r\n\r\n    event onInsuranceChange(\r\n        address customerAddress,\r\n        uint256 card,\r\n        uint256 insuranceAmount\r\n    );\r\n\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy\r\n    );\r\n    \r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned\r\n    );\r\n    \r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n    );\r\n    \r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n    \r\n    // ERC20\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n    \r\n       // HalfLife\r\n    event Halflife(\r\n        address customerAddress,\r\n        uint card,\r\n        uint price,\r\n        uint newBlockTime,\r\n        uint insurancePay,\r\n        uint cardInsurance\r\n    );\r\n    \r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"CryptoWars\";\r\n    string public symbol = \"JEDI\";\r\n    uint8 constant public decimals = 18;\r\n    uint256 constant internal tokenPriceInitial_ = 0.00000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.000000001 ether;\r\n    uint256 constant internal magnitude = 2**64;\r\n    \r\n    // proof of stake (defaults at 100 tokens)\r\n    uint256 public stakingRequirement = 100e18;\r\n    \r\n    // ambassador program\r\n    mapping(address => bool) internal ambassadors_;\r\n    uint256 constant internal ambassadorMaxPurchase_ = 3 ether;\r\n    uint256 constant internal ambassadorQuota_ = 20 ether;\r\n    \r\n    address dev;\r\n\r\n    uint nextAvailableCard;\r\n\r\n    address add2 = 0x0;\r\n\r\n    uint public totalCardValue = 0;\r\n\r\n    uint public totalCardInsurance = 0;\r\n\r\n    bool public boolAllowPlayer = false;\r\n    \r\n    \r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\r\n    uint256 internal tokenSupply_ = 0;\r\n    uint256 internal profitPerShare_;\r\n\r\n    //CARDS\r\n    mapping(uint => address) internal cardOwner;\r\n    mapping(uint => uint) public cardPrice;\r\n    mapping(uint => uint) public basePrice;\r\n    mapping(uint => uint) internal cardPreviousPrice;\r\n    mapping(address => uint) internal ownerAccounts;\r\n    mapping(uint => uint) internal totalCardDivs;\r\n    mapping(uint => uint) internal totalCardDivsETH;\r\n    mapping(uint => string) internal cardName;\r\n    mapping(uint => uint) internal cardInsurance;\r\n\r\n    uint public cardInsuranceAccount;\r\n\r\n    uint cardPriceIncrement = 1250;   //25% Price Increases\r\n   \r\n    uint totalDivsProduced;\r\n\r\n    //card rates\r\n    uint public ownerDivRate = 500;\r\n    uint public distDivRate = 400;\r\n    uint public devDivRate = 50;\r\n    uint public insuranceDivRate = 50;\r\n    uint public referralRate = 50;\r\n    \r\n\r\n\r\n\r\n    mapping(uint => uint) internal cardBlockNumber;\r\n\r\n    uint public halfLifeTime = 5900;            //1 day half life period\r\n    uint public halfLifeRate = 900;             //cut price by 1/10 each half life period\r\n    uint public halfLifeReductionRate = 667;    //cut previous price by 1/3\r\n\r\n    bool public allowHalfLife = true;  //for cards\r\n\r\n    bool public allowReferral = false;  //for cards\r\n\r\n    uint public insurancePayoutRate = 250; //pay 25% of the remaining insurance fund for that card on each half-life\r\n\r\n   \r\n    address inv1 = 0x387E7E1580BbE37a06d847985faD20f353bBeB1b;\r\n    address inv2 = 0xD87fA3D0cF18fD2C14Aa34BcdeaF252Bf4d56644;\r\n    address inv3 = 0xc4166D533336cf49b85b3897D7315F5bB60E420b;\r\n\r\n\r\n    uint8 public dividendFee_ = 200; // 20% dividend fee on each buy and sell dividendFee_\r\n    uint8 public cardInsuranceFeeRate_ = 20;//20; // 2% fee rate on each buy and sell for Giants Card Insurance\r\n    uint8 public investorFeeRate_ = 10;//10; // 1% fee for investors\r\n\r\n    uint public maxCards = 50;\r\n\r\n    bool public boolContractActive = false;\r\n    bool public boolCardActive = false;\r\n\r\n    // administrator list (see above on what they can do)\r\n    mapping(address => bool) public administrators;\r\n    \r\n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\r\n    bool public onlyAmbassadors = true;\r\n\r\n      // Special Wall Street Market Platform control from scam game contracts on Wall Street Market platform\r\n    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept Wall Street tokens\r\n\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --  \r\n    */\r\n    function cryptowars()\r\n        public\r\n    {\r\n        allowHalfLife = true;\r\n        allowReferral = false;\r\n\r\n        // add administrators here\r\n        administrators[msg.sender] = true;\r\n\r\n        dev = msg.sender;\r\n\r\n        ambassadors_[dev] = true;\r\n        ambassadors_[inv1] = true;\r\n        ambassadors_[inv2] = true;\r\n        ambassadors_[inv3] = true;\r\n\r\n        ambassadors_[0x96762288ebb2560a19F8eAdAaa2012504F64278B] = true;\r\n        ambassadors_[0x5145A296e1bB9d4Cf468d6d97d7B6D15700f39EF] = true;\r\n        ambassadors_[0xE74b1ea522B9d558C8e8719c3b1C4A9050b531CA] = true;\r\n        ambassadors_[0xb62A0AC2338C227748E3Ce16d137C6282c9870cF] = true;\r\n        ambassadors_[0x836e5abac615b371efce0ab399c22a04c1db5ecf] = true;\r\n        ambassadors_[0xAe3dC7FA07F9dD030fa56C027E90998eD9Fe9D61] = true;\r\n        ambassadors_[0x38602d1446fe063444B04C3CA5eCDe0cbA104240] = true;\r\n        ambassadors_[0x3825c8BA07166f34cE9a2cD1e08A68b105c82cB9] = true;\r\n        ambassadors_[0xa6662191F558e4C611c8f14b50c784EDA9Ace98d] = true;\r\n        \r\n\r\n        nextAvailableCard = 13;\r\n\r\n        cardOwner[1] = dev;\r\n        cardPrice[1] = 5 ether;\r\n        basePrice[1] = cardPrice[1];\r\n        cardPreviousPrice[1] = 0;\r\n\r\n        cardOwner[2] = dev;\r\n        cardPrice[2] = 4 ether;\r\n        basePrice[2] = cardPrice[2];\r\n        cardPreviousPrice[2] = 0;\r\n\r\n        cardOwner[3] = dev;\r\n        cardPrice[3] = 3 ether;\r\n        basePrice[3] = cardPrice[3];\r\n        cardPreviousPrice[3] = 0;\r\n\r\n        cardOwner[4] = dev;\r\n        cardPrice[4] = 2 ether;\r\n        basePrice[4] = cardPrice[4];\r\n        cardPreviousPrice[4] = 0;\r\n\r\n        cardOwner[5] = dev;\r\n        cardPrice[5] = 1.5 ether;\r\n        basePrice[5] = cardPrice[5];\r\n        cardPreviousPrice[5] = 0;\r\n\r\n        cardOwner[6] = 0xb62A0AC2338C227748E3Ce16d137C6282c9870cF;\r\n        cardPrice[6] = 1 ether;\r\n        basePrice[6] = cardPrice[6];\r\n        cardPreviousPrice[6] = 0;\r\n\r\n        cardOwner[7] = 0x96762288ebb2560a19f8eadaaa2012504f64278b;\r\n        cardPrice[7] = 0.8 ether;\r\n        basePrice[7] = cardPrice[7];\r\n        cardPreviousPrice[7] = 0;\r\n\r\n        cardOwner[8] = 0x836e5abac615b371efce0ab399c22a04c1db5ecf;\r\n        cardPrice[8] = 0.6 ether;\r\n        basePrice[8] = cardPrice[8];\r\n        cardPreviousPrice[8] = 0;\r\n\r\n        cardOwner[9] = 0xAe3dC7FA07F9dD030fa56C027E90998eD9Fe9D61;\r\n        cardPrice[9] = 0.4 ether;\r\n        basePrice[9] = cardPrice[9];\r\n        cardPreviousPrice[9] = 0;\r\n\r\n        cardOwner[10] = dev;\r\n        cardPrice[10] = 0.2 ether;\r\n        basePrice[10] = cardPrice[10];\r\n        cardPreviousPrice[10] = 0;\r\n\r\n        cardOwner[11] = dev;\r\n        cardPrice[11] = 0.1 ether;\r\n        basePrice[11] = cardPrice[11];\r\n        cardPreviousPrice[11] = 0;\r\n\r\n        cardOwner[12] = dev;\r\n        cardPrice[12] = 0.1 ether;\r\n        basePrice[12] = cardPrice[12];\r\n        cardPreviousPrice[12] = 0;\r\n\r\n        getTotalCardValue();\r\n\r\n    }\r\n    \r\n     \r\n    /**\r\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\r\n     */\r\n    function buy(address _referredBy)\r\n        public\r\n        payable\r\n        returns(uint256)\r\n    {\r\n        purchaseTokens(msg.value, _referredBy);\r\n    }\r\n    \r\n    /**\r\n     * Fallback function to handle ethereum that was send straight to the contract\r\n     * Unfortunately we cannot use a referral address this way.\r\n     */\r\n    function()\r\n        payable\r\n        public\r\n    {\r\n        purchaseTokens(msg.value, 0x0);\r\n    }\r\n    \r\n    /**\r\n     * Converts all of caller's dividends to tokens.\r\n     */\r\n    function reinvest()\r\n        onlyStronghands()\r\n        public\r\n    {\r\n        // fetch dividends\r\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\r\n        \r\n        // pay out the dividends virtually\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        \r\n        // retrieve ref. bonus\r\n        _dividends += referralBalance_[_customerAddress] + ownerAccounts[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        ownerAccounts[_customerAddress] = 0;\r\n        \r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\r\n        \r\n        // fire event\r\n        onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n    \r\n    /**\r\n     * Alias of sell() and withdraw().\r\n     */\r\n    function exit()\r\n        public\r\n    {\r\n        // get token count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if(_tokens > 0) sell(_tokens);\r\n        \r\n        // lambo delivery service\r\n        withdraw();\r\n    }\r\n\r\n    /**\r\n     * Withdraws all of the callers earnings.\r\n     */\r\n    function withdraw()\r\n        onlyStronghands()\r\n        public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\r\n        \r\n        // update dividend tracker\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        \r\n        // add ref. bonus\r\n        _dividends += referralBalance_[_customerAddress] + ownerAccounts[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        ownerAccounts[_customerAddress] = 0;\r\n        \r\n        // lambo delivery service\r\n        _customerAddress.transfer(_dividends);\r\n        \r\n        // fire event\r\n        onWithdraw(_customerAddress, _dividends);\r\n    }\r\n    \r\n    /**\r\n     * Liquifies tokens to ethereum.\r\n     */\r\n    function sell(uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n        public\r\n    {\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        // russian hackers BTFO\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_),1000);\r\n       // uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        \r\n        // burn the sold tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n        \r\n        // update dividends tracker\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;       \r\n        \r\n        // dividing by zero is a bad idea\r\n        if (tokenSupply_ > 0) {\r\n            // update the amount of dividends per token\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        }\r\n\r\n        checkHalfLife();\r\n        \r\n        // fire event\r\n        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Transfer tokens from the caller to a new holder.\r\n     * Remember, there's a 10% fee here as well.\r\n     */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens)\r\n        onlyBagholders()\r\n        public\r\n        returns(bool)\r\n    {\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n        \r\n        // make sure we have the requested tokens\r\n        // also disables transfers until ambassador phase is over\r\n        // ( we dont want whale premines )\r\n        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        \r\n        // withdraw all outstanding dividends first\r\n        if(myDividends(true) > 0) withdraw();\r\n        \r\n        // liquify 20% of the tokens that are transfered\r\n        // these are dispersed to shareholders\r\n        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, dividendFee_),1000);\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\r\n  \r\n        // burn the fee tokens\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\r\n        \r\n        // update dividend trackers\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\r\n        \r\n        // disperse dividends among holders\r\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        \r\n        // fire event\r\n        Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n        \r\n        // ERC20\r\n        return true;\r\n       \r\n    }\r\n    \r\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\r\n    /**\r\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\r\n     */\r\n    function disableInitialStage()\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        onlyAmbassadors = false;\r\n    }\r\n    \r\n    /**\r\n     * In case one of us dies, we need to replace ourselves.\r\n     */\r\n    function setAdministrator(address _identifier, bool _status)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        administrators[_identifier] = _status;\r\n    }\r\n\r\n    function setAllowHalfLife(bool _allow)\r\n        onlyAdministrator()\r\n    {\r\n        allowHalfLife = _allow;\r\n    \r\n    }\r\n\r\n    function setAllowReferral(bool _allow)\r\n        onlyAdministrator()\r\n    {\r\n        allowReferral = _allow;\r\n    \r\n    }\r\n\r\n    function setInv1(address _newInvestorAddress)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        inv1 = _newInvestorAddress;\r\n    }\r\n\r\n    function setInv2(address _newInvestorAddress)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        inv2 = _newInvestorAddress;\r\n    }\r\n\r\n    function setInv3(address _newInvestorAddress)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        inv3 = _newInvestorAddress;\r\n    }\r\n\r\n    /**\r\n     * Set fees/rates\r\n     */\r\n    function setFeeRates(uint8 _newDivRate, uint8 _newInvestorFee, uint8 _newCardFee)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        require(_newDivRate <= 250);\r\n        require(_newInvestorFee + _newCardFee <= 50);  //5% -- 50 out of 1000\r\n\r\n        dividendFee_ = _newDivRate;\r\n        investorFeeRate_ = _newInvestorFee;\r\n        cardInsuranceFeeRate_ = _newCardFee;\r\n    }\r\n    \r\n    /**\r\n     * In case one of us dies, we need to replace ourselves.\r\n     */\r\n    function setContractActive(bool _status)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        boolContractActive = _status;\r\n    }\r\n\r\n    /**\r\n     * In case one of us dies, we need to replace ourselves.\r\n     */\r\n    function setCardActive(bool _status)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        boolCardActive = _status;\r\n    }\r\n    \r\n\r\n    /**\r\n     * Precautionary measures in case we need to adjust the masternode rate.\r\n     */\r\n    function setStakingRequirement(uint256 _amountOfTokens)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        stakingRequirement = _amountOfTokens;\r\n    }\r\n    \r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setName(string _name)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n    \r\n    /**\r\n     * If we want to rebrand, we can.\r\n     */\r\n    function setSymbol(string _symbol)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    \r\n    function setMaxCards(uint _card)  \r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        maxCards = _card;\r\n    }\r\n\r\n    function setHalfLifeTime(uint _time)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        halfLifeTime = _time;\r\n    }\r\n\r\n    function setHalfLifeRate(uint _rate)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        halfLifeRate = _rate;\r\n    }\r\n\r\n    function addNewCard(uint _price) \r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        require(nextAvailableCard < maxCards);\r\n        cardPrice[nextAvailableCard] = _price;\r\n        basePrice[nextAvailableCard] = cardPrice[nextAvailableCard];\r\n        cardOwner[nextAvailableCard] = dev;\r\n        totalCardDivs[nextAvailableCard] = 0;\r\n        cardPreviousPrice[nextAvailableCard] = 0;\r\n        nextAvailableCard = nextAvailableCard + 1;\r\n        getTotalCardValue();\r\n        \r\n    }\r\n\r\n\r\n    function addAmbassador(address _newAmbassador) \r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        ambassadors_[_newAmbassador] = true;\r\n    }\r\n    \r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: totalEthereumBalance()\r\n     */\r\n    function totalEthereumBalance()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return this.balance;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the total token supply.\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n    function myTokens()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\r\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\r\n     * But in the internal calculations, we want them separate. \r\n     */ \r\n    function myDividends(bool _includeReferralBonus) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n\r\n    function myCardDividends()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        address _customerAddress = msg.sender;\r\n        return ownerAccounts[_customerAddress];\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address _customerAddress)\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n    \r\n    /**\r\n     * Return the buy price of 1 individual token.\r\n     */\r\n    function sellPrice() \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_  ),1000);\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function buyPrice() \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_  ),1000);\r\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\r\n     */\r\n    function calculateTokensReceived(uint256 _ethereumToSpend) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, dividendFee_  ),1000);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n    \r\n    /**\r\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\r\n     */\r\n    function calculateEthereumReceived(uint256 _tokensToSell) \r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_  ),1000);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        return _taxedEthereum;\r\n    }\r\n    \r\n    \r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n\r\n\r\n    function getNextAvailableCard()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        return nextAvailableCard;\r\n    }\r\n\r\n    function getTotalCardValue()\r\n    internal\r\n    view\r\n    {\r\n        uint counter = 1;\r\n        uint _totalVal = 0;\r\n\r\n        while (counter < nextAvailableCard) { \r\n\r\n            _totalVal = SafeMath.add(_totalVal,cardPrice[counter]);\r\n                \r\n            counter = counter + 1;\r\n        } \r\n        totalCardValue = _totalVal;\r\n            \r\n    }\r\n\r\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\r\n        antiEarlyWhale(_incomingEthereum)\r\n        onlyActive()\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        // data setup\r\n\r\n        cardInsuranceAccount = SafeMath.add(cardInsuranceAccount, SafeMath.div(SafeMath.mul(_incomingEthereum, cardInsuranceFeeRate_), 1000));\r\n        ownerAccounts[inv1] = SafeMath.add(ownerAccounts[inv1] , SafeMath.div(SafeMath.mul(_incomingEthereum, investorFeeRate_), 1000));\r\n        ownerAccounts[inv2] = SafeMath.add(ownerAccounts[inv2] , SafeMath.div(SafeMath.mul(_incomingEthereum, investorFeeRate_), 1000));\r\n        ownerAccounts[inv3] = SafeMath.add(ownerAccounts[inv3] , SafeMath.div(SafeMath.mul(_incomingEthereum, investorFeeRate_), 1000));\r\n\r\n\r\n        _incomingEthereum = SafeMath.sub(_incomingEthereum,SafeMath.div(SafeMath.mul(_incomingEthereum, cardInsuranceFeeRate_), 1000) + SafeMath.div(SafeMath.mul(_incomingEthereum, investorFeeRate_), 1000)*3);\r\n\r\n      \r\n        uint256 _referralBonus = SafeMath.div(SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_  ),1000), 3);\r\n        uint256 _dividends = SafeMath.sub(SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_  ),1000), _referralBonus);\r\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_  ),1000));\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        uint256 _fee = _dividends * magnitude;\r\n \r\n        // no point in continuing execution if OP is a poorfag russian hacker\r\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\r\n        // (or hackers)\r\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\r\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\r\n        \r\n        // is the user referred by a masternode?\r\n        if(\r\n            // is this a referred purchase?\r\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n\r\n            // no cheating!\r\n            _referredBy != msg.sender &&\r\n            \r\n            // does the referrer have at least X whole tokens?\r\n            // i.e is the referrer a godly chad masternode\r\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\r\n        ){\r\n            // wealth redistribution\r\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n        } else {\r\n            // no ref purchase\r\n            // add the referral bonus back to the global dividends cake\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n        \r\n        // we can't give people infinite ethereum\r\n        if(tokenSupply_ > 0){\r\n            \r\n            // add tokens to the pool\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n \r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n            \r\n            // calculate the amount of tokens the customer receives over his purchase \r\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n        \r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n        \r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\r\n        \r\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\r\n        //really i know you think you do but you don't\r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[msg.sender] += _updatedPayouts;\r\n\r\n        distributeInsurance();\r\n        checkHalfLife();\r\n        \r\n        // fire event\r\n        onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy);\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n\r\n\r\n\r\n    function buyCard(uint _card, address _referrer)\r\n        public\r\n        payable\r\n        onlyCardActive()\r\n    {\r\n        require(_card <= nextAvailableCard);\r\n        require(_card > 0);\r\n        require(msg.value >= cardPrice[_card]);\r\n       \r\n        cardBlockNumber[_card] = block.number;   //reset block number for this card for half life calculations\r\n\r\n\r\n         //Determine the total dividends\r\n        uint _baseDividends = msg.value - cardPreviousPrice[_card];\r\n        totalDivsProduced = SafeMath.add(totalDivsProduced, _baseDividends);\r\n\r\n        //uint _devDividends = SafeMath.div(SafeMath.mul(_baseDividends,devDivRate),100);\r\n        uint _ownerDividends = SafeMath.div(SafeMath.mul(_baseDividends,ownerDivRate),1000);\r\n        _ownerDividends = SafeMath.add(_ownerDividends,cardPreviousPrice[_card]);  //owner receovers price they paid initially\r\n        uint _insuranceDividends = SafeMath.div(SafeMath.mul(_baseDividends,insuranceDivRate),1000);\r\n\r\n        totalCardDivs[_card] = SafeMath.add(totalCardDivs[_card],_ownerDividends);\r\n        \r\n        cardInsuranceAccount = SafeMath.add(cardInsuranceAccount, _insuranceDividends);\r\n            \r\n        uint _distDividends = SafeMath.div(SafeMath.mul(_baseDividends,distDivRate),1000);\r\n\r\n        if (allowReferral && (_referrer != msg.sender) && (_referrer != 0x0000000000000000000000000000000000000000)) {\r\n                \r\n            uint _referralDividends = SafeMath.div(SafeMath.mul(_baseDividends,referralRate),1000);\r\n            _distDividends = SafeMath.sub(_distDividends,_referralDividends);\r\n            ownerAccounts[_referrer] = SafeMath.add(ownerAccounts[_referrer],_referralDividends);\r\n        }\r\n            \r\n        distributeYield(_distDividends);\r\n\r\n        //distribute dividends to accounts\r\n        address _previousOwner = cardOwner[_card];\r\n        address _newOwner = msg.sender;\r\n\r\n        ownerAccounts[_previousOwner] = SafeMath.add(ownerAccounts[_previousOwner],_ownerDividends);\r\n        ownerAccounts[dev] = SafeMath.add(ownerAccounts[dev],SafeMath.div(SafeMath.mul(_baseDividends,devDivRate),1000));\r\n\r\n        cardOwner[_card] = _newOwner;\r\n\r\n        //Increment the card Price\r\n        cardPreviousPrice[_card] = msg.value;\r\n        cardPrice[_card] = SafeMath.div(SafeMath.mul(msg.value,cardPriceIncrement),1000);\r\n  \r\n        getTotalCardValue();\r\n        distributeInsurance();\r\n        checkHalfLife();\r\n\r\n        emit onCardBuy(msg.sender, msg.value, _card, SafeMath.div(SafeMath.mul(msg.value,cardPriceIncrement),1000), halfLifeTime + block.number);\r\n     \r\n    }\r\n\r\n\r\n    function distributeInsurance() internal\r\n    {\r\n        uint counter = 1;\r\n        uint _cardDistAmount = cardInsuranceAccount;\r\n        cardInsuranceAccount = 0;\r\n        uint tempInsurance = 0;\r\n\r\n        while (counter < nextAvailableCard) { \r\n  \r\n            uint _distAmountLocal = SafeMath.div(SafeMath.mul(_cardDistAmount, cardPrice[counter]),totalCardValue);\r\n            \r\n            cardInsurance[counter] = SafeMath.add(cardInsurance[counter], _distAmountLocal);\r\n            tempInsurance = tempInsurance + cardInsurance[counter];\r\n            emit onInsuranceChange(0x0, counter, cardInsurance[counter]);\r\n    \r\n            counter = counter + 1;\r\n        } \r\n        totalCardInsurance = tempInsurance;\r\n    }\r\n\r\n\r\n    function distributeYield(uint _distDividends) internal\r\n    //tokens\r\n    {\r\n        uint counter = 1;\r\n        uint currentBlock = block.number;\r\n        uint insurancePayout = 0;\r\n\r\n        while (counter < nextAvailableCard) { \r\n\r\n            uint _distAmountLocal = SafeMath.div(SafeMath.mul(_distDividends, cardPrice[counter]),totalCardValue);\r\n            ownerAccounts[cardOwner[counter]] = SafeMath.add(ownerAccounts[cardOwner[counter]],_distAmountLocal);\r\n            totalCardDivs[counter] = SafeMath.add(totalCardDivs[counter],_distAmountLocal);\r\n\r\n            counter = counter + 1;\r\n        } \r\n        getTotalCardValue();\r\n        checkHalfLife();\r\n    }\r\n\r\n    function extCheckHalfLife() \r\n    public\r\n    {\r\n        bool _boolDev = (msg.sender == dev);\r\n        if (_boolDev || boolAllowPlayer){\r\n            checkHalfLife();\r\n        }\r\n    }\r\n\r\n\r\n    function checkHalfLife() \r\n    internal\r\n    \r\n    //tokens\r\n    {\r\n\r\n        uint counter = 1;\r\n        uint currentBlock = block.number;\r\n        uint insurancePayout = 0;\r\n        uint tempInsurance = 0;\r\n\r\n        while (counter < nextAvailableCard) { \r\n\r\n            //HalfLife Check\r\n            if (allowHalfLife) {\r\n\r\n                if (cardPrice[counter] > basePrice[counter]) {\r\n                    uint _life = SafeMath.sub(currentBlock, cardBlockNumber[counter]);\r\n\r\n                    if (_life > halfLifeTime) {\r\n                    \r\n                        cardBlockNumber[counter] = currentBlock;  //Reset the clock for this card\r\n                        if (SafeMath.div(SafeMath.mul(cardPrice[counter], halfLifeRate),1000) < basePrice[counter]){\r\n                            \r\n                            cardPrice[counter] = basePrice[counter];\r\n                            insurancePayout = SafeMath.div(SafeMath.mul(cardInsurance[counter],insurancePayoutRate),1000);\r\n                            cardInsurance[counter] = SafeMath.sub(cardInsurance[counter],insurancePayout);\r\n                            ownerAccounts[cardOwner[counter]] = SafeMath.add(ownerAccounts[cardOwner[counter]], insurancePayout);\r\n                            \r\n                        }else{\r\n\r\n                            cardPrice[counter] = SafeMath.div(SafeMath.mul(cardPrice[counter], halfLifeRate),1000);  \r\n                            cardPreviousPrice[counter] = SafeMath.div(SafeMath.mul(cardPrice[counter],halfLifeReductionRate),1000);\r\n\r\n                            insurancePayout = SafeMath.div(SafeMath.mul(cardInsurance[counter],insurancePayoutRate),1000);\r\n                            cardInsurance[counter] = SafeMath.sub(cardInsurance[counter],insurancePayout);\r\n                            ownerAccounts[cardOwner[counter]] = SafeMath.add(ownerAccounts[cardOwner[counter]], insurancePayout);\r\n\r\n                        }\r\n                        emit onInsuranceChange(0x0, counter, cardInsurance[counter]);\r\n                        emit Halflife(cardOwner[counter], counter, cardPrice[counter], halfLifeTime + block.number, insurancePayout, cardInsurance[counter]);\r\n\r\n                    }\r\n                    //HalfLife Check\r\n                    \r\n                }\r\n               \r\n            }\r\n            \r\n            tempInsurance = tempInsurance + cardInsurance[counter];\r\n            counter = counter + 1;\r\n        } \r\n        totalCardInsurance = tempInsurance;\r\n        getTotalCardValue();\r\n\r\n    }\r\n\r\n    /**\r\n     * Calculate Token price based on an amount of incoming ethereum\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function ethereumToTokens_(uint256 _ethereum)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived = \r\n         (\r\n            (\r\n                // underflow attempts BTFO\r\n                SafeMath.sub(\r\n                    (sqrt\r\n                        (\r\n                            (_tokenPriceInitial**2)\r\n                            +\r\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\r\n                            +\r\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n                            +\r\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n                        )\r\n                    ), _tokenPriceInitial\r\n                )\r\n            )/(tokenPriceIncremental_)\r\n        )-(tokenSupply_)\r\n        ;\r\n  \r\n        return _tokensReceived;\r\n    }\r\n    \r\n    /**\r\n     * Calculate token sell value.\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n     function tokensToEthereum_(uint256 _tokens)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _etherReceived =\r\n        (\r\n            // underflow attempts BTFO\r\n            SafeMath.sub(\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\r\n                        )-tokenPriceIncremental_\r\n                    )*(tokens_ - 1e18)\r\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\r\n            )\r\n        /1e18);\r\n        return _etherReceived;\r\n    }\r\n\r\n\r\n    function getCardPrice(uint _card)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(_card <= nextAvailableCard);\r\n        return cardPrice[_card];\r\n    }\r\n\r\n   function getCardInsurance(uint _card)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(_card <= nextAvailableCard);\r\n        return cardInsurance[_card];\r\n    }\r\n\r\n\r\n    function getCardOwner(uint _card)\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        require(_card <= nextAvailableCard);\r\n        return cardOwner[_card];\r\n    }\r\n\r\n    function gettotalCardDivs(uint _card)\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n        require(_card <= nextAvailableCard);\r\n        return totalCardDivs[_card];\r\n    }\r\n\r\n    function getTotalDivsProduced()\r\n        public\r\n        view\r\n        returns(uint)\r\n    {\r\n     \r\n        return totalDivsProduced;\r\n    }\r\n    \r\n    \r\n    //This is where all your gas goes, sorry\r\n    //Not sorry, you probably only paid 1 gwei\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_card\",\"type\":\"uint256\"}],\"name\":\"getCardOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCardInsurance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setHalfLifeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boolAllowPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"canAcceptTokens_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setCardActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"onlyAmbassadors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAmbassador\",\"type\":\"address\"}],\"name\":\"addAmbassador\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boolCardActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setAllowHalfLife\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_card\",\"type\":\"uint256\"},{\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buyCard\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"extCheckHalfLife\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newInvestorAddress\",\"type\":\"address\"}],\"name\":\"setInv3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_card\",\"type\":\"uint256\"}],\"name\":\"setMaxCards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_card\",\"type\":\"uint256\"}],\"name\":\"gettotalCardDivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setHalfLifeTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextAvailableCard\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_card\",\"type\":\"uint256\"}],\"name\":\"getCardPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setAllowReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"addNewCard\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"setStakingRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowHalfLife\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDivRate\",\"type\":\"uint8\"},{\"name\":\"_newInvestorFee\",\"type\":\"uint8\"},{\"name\":\"_newCardFee\",\"type\":\"uint8\"}],\"name\":\"setFeeRates\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setContractActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"boolContractActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendFee_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableInitialStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalDivsProduced\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCardValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorFeeRate_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_card\",\"type\":\"uint256\"}],\"name\":\"getCardInsurance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halfLifeReductionRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halfLifeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myCardDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cardInsuranceAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"insurancePayoutRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halfLifeTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newInvestorAddress\",\"type\":\"address\"}],\"name\":\"setInv2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cardInsuranceFeeRate_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"basePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newInvestorAddress\",\"type\":\"address\"}],\"name\":\"setInv1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"insuranceDivRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"card\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"halfLifeTime\",\"type\":\"uint256\"}],\"name\":\"onCardBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"card\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"insuranceAmount\",\"type\":\"uint256\"}],\"name\":\"onInsuranceChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"card\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"insurancePay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cardInsurance\",\"type\":\"uint256\"}],\"name\":\"Halflife\",\"type\":\"event\"}]","ContractName":"cryptowars","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ff87b83295eba3be174c2433ed46c37a1bb9c05053510d43420224a8239b9d65"}]}