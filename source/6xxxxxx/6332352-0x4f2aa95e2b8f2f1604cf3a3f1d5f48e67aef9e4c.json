{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\ncontract Owned \r\n{\r\n    address public owner;\r\n    address public ownerCandidate;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        ownerCandidate = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == ownerCandidate);  \r\n        owner = ownerCandidate;\r\n    }\r\n}\r\n\r\ncontract Priced\r\n{\r\n    modifier costs(uint price)\r\n    {\r\n        //They must pay exactly 0.5 eth\r\n        require(msg.value == price);\r\n        _;\r\n    }\r\n}\r\n//UPDATED 9/8/18: Added auto unlock\r\n//                Changed the Register to track people so it does not have to loop through \r\n//UPDATED 9/10/18: Changed it to only accept 0.5 eth, anything over or under will just fail\r\n\r\ncontract Teris is Owned, Priced\r\n{\r\n    string public debugString;\r\n    \r\n    //Wallets\r\n    address adminWallet = 0x45FEbD925Aa0439eE6bF2ffF5996201e199Efb5b;\r\n\r\n    //wallet rotations\r\n    uint8 public devWalletRotation = 0;\r\n    \r\n    //To set up for only 4 active transactions\r\n    mapping(address => uint8) transactionLimits;\r\n    \r\n    //Lock the contract after 640 transactions! (uint16 stores up to 65,535)\r\n    // Changednge to 10 for testing\r\n    uint256 maxTransactions = 640;\r\n    uint16 totalTransactions;\r\n    modifier notLocked()\r\n    {\r\n        require(!isLocked());\r\n        _;\r\n    }\r\n    \r\n    //Structs\r\n    struct Participant\r\n    {\r\n        address ethAddress;\r\n        bool paid;\r\n    }\r\n    \r\n    Participant[] allParticipants;\r\n    uint16 lastPaidParticipant;\r\n    \r\n    //Set up a blacklist\r\n     mapping(address => bool) blacklist;\r\n\r\n    bool testing = false;\r\n    \r\n    /* ------------------------------------------------\r\n    //              MAIN FUNCTIONS\r\n    ---------------------------------------------------*/   \r\n\r\n    //Silentflame - Added costs(500 finney)\r\n    function register() public payable costs(500 finney) notLocked\r\n    {\r\n        //Silentflame - Added to remove exponential gas cost increase on register\r\n        transactionLimits[msg.sender]++;    \r\n        \r\n        if(!testing)\r\n        {\r\n            require(_checkTransactions(msg.sender));\r\n        }\r\n        \r\n        require(!blacklist[msg.sender]);\r\n            \r\n        \r\n        //transfer eth to admin wallet\r\n        _payFees();\r\n        \r\n        //add user to the participant list, as unpaid\r\n        allParticipants.push(Participant(msg.sender, false));\r\n        \r\n        //Count this transaction\r\n        totalTransactions++;\r\n        \r\n        //try and pay whoever you can\r\n        _payout();\r\n        \r\n    }\r\n    \r\n    /* ------------------------------------------------\r\n    //              INTERNAL FUNCTIONS\r\n    ---------------------------------------------------*/\r\n    \r\n    function _checkTransactions(address _toCheck) private view returns(bool)\r\n    {\r\n        //Silentflame - Removed old logic!\r\n        \r\n        //Silentflame - Added to remove exponential gas cost increase on register\r\n        if(transactionLimits[_toCheck] > 4)\r\n            return false;\r\n        else\r\n            return true;\r\n        \r\n        \r\n    }\r\n    \r\n    //Pays the Admin fees\r\n    function _payFees() private\r\n    {\r\n        adminWallet.transfer(162500000000000000); // .1625\r\n   \r\n\r\n        address walletAddress ;\r\n        devWalletRotation++;\r\n        \r\n        \r\n        if(devWalletRotation >= 7)\r\n            devWalletRotation = 1;\r\n        \r\n        if(devWalletRotation == 1)\r\n            walletAddress = 0x556FD37b59D20C62A778F0610Fb1e905b112b7DE;\r\n        else if(devWalletRotation == 2)\r\n            walletAddress = 0x92f94ecdb1ba201cd0e4a0a9a9bccb1faa3a3de0;\r\n        else if(devWalletRotation == 3)\r\n            walletAddress = 0x41271507434E21dBd5F09624181d7Cd70Bf06Cbf;\r\n        else if (devWalletRotation == 4)\r\n            walletAddress = 0xbeb07c2d5beca948eb7d7eaf60a30e900f470f8d;\r\n        else if (devWalletRotation == 5)\r\n            walletAddress = 0xcd7c53462067f0d0b8809be9e3fb143679a270bb;\r\n        else if (devWalletRotation == 6)\r\n            walletAddress = 0x9184B1D0106c1b7663D4C3bBDBF019055BB813aC;\r\n        else\r\n            walletAddress = adminWallet;\r\n            \r\n            \r\n            \r\n        \r\n        walletAddress.transfer(25000000000000000);\r\n        \r\n\r\n    }\r\n\r\n    //Tries to pay people, starting from the last paid transaction\r\n    function _payout() private\r\n    {\r\n\r\n        for(uint16 i = lastPaidParticipant; i < allParticipants.length; i++)\r\n        {\r\n            if(allParticipants[i].paid)\r\n            {\r\n                lastPaidParticipant = i;\r\n                continue;\r\n            }\r\n            else\r\n            {\r\n                if(address(this).balance < 625000000000000000)\r\n                    break;\r\n                \r\n                allParticipants[i].ethAddress.transfer(625000000000000000);\r\n                allParticipants[i].paid = true;\r\n                transactionLimits[allParticipants[i].ethAddress]--; //Silentflame - added to remove gas cost on register\r\n                lastPaidParticipant = i;\r\n            }\r\n        }\r\n        \r\n        //Silentflame attemptAutoUnlock\r\n        if(lastPaidParticipant >= maxTransactions)\r\n            _unlockContract();\r\n    }\r\n    \r\n    function _unlockContract() internal\r\n    {\r\n        //Clear all the transaction limits\r\n        for(uint256 i = 0; i < allParticipants.length; i++)\r\n        {\r\n            transactionLimits[allParticipants[i].ethAddress] = 0;\r\n        }\r\n        \r\n        //delete all the participants\r\n        delete allParticipants;\r\n\r\n        lastPaidParticipant = 0;\r\n        \r\n        //If there is any remaining funds (there shouldnt be) send it to trading wallet\r\n        adminWallet.transfer(address(this).balance);\r\n        totalTransactions = 0;\r\n    }\r\n\r\n    /* ------------------------------------------------\r\n    //                ADMIN FUNCTIONS\r\n    ---------------------------------------------------*/\r\n    function changeMaxTransactions(uint256 _amount) public onlyOwner\r\n    {\r\n        maxTransactions = _amount;\r\n    }\r\n    \r\n    function unlockContract() public onlyOwner\r\n    {\r\n         //Clear all the transaction limits\r\n        for(uint256 i = 0; i < allParticipants.length; i++)\r\n        {\r\n            transactionLimits[allParticipants[i].ethAddress] = 0;\r\n        }\r\n        \r\n        //delete all the participants\r\n        delete allParticipants;\r\n\r\n        lastPaidParticipant = 0;\r\n        \r\n        //If there is any remaining funds (there shouldnt be) send it to trading wallet\r\n        adminWallet.transfer(address(this).balance);\r\n        totalTransactions = 0;       \r\n    }\r\n\r\n    //Allows an injection to add balance into the contract without\r\n    //creating a new contract.\r\n    function addBalance() payable public onlyOwner\r\n    {\r\n        _payout();\r\n    }\r\n    \r\n    function forcePayout() public onlyOwner\r\n    {\r\n        _payout();\r\n    }\r\n    \r\n    function isTesting() public view onlyOwner returns(bool) \r\n    {\r\n        return(testing);\r\n    }\r\n    \r\n    function changeAdminWallet(address _newWallet) public onlyOwner\r\n    {\r\n        adminWallet = _newWallet;\r\n    }\r\n    \r\n    function setTesting(bool _testing) public onlyOwner\r\n    {\r\n        testing = _testing;\r\n    }\r\n    \r\n    function addToBlackList(address _addressToAdd) public onlyOwner\r\n    {\r\n        blacklist[_addressToAdd] = true;\r\n    }\r\n    \r\n    function removeFromBlackList(address _addressToRemove) public onlyOwner\r\n    {\r\n        blacklist[_addressToRemove] = false;\r\n    }\r\n\r\n    /* ------------------------------------------------\r\n    //                      GETTERS\r\n    ---------------------------------------------------*/\r\n    function checkMyTransactions() public view returns(uint256)\r\n    {\r\n        return transactionLimits[msg.sender];\r\n    }\r\n    \r\n    function getPeopleBeforeMe(address _address) public view returns(uint256)\r\n    {\r\n        uint counter = 0;\r\n        \r\n        for(uint16 i = lastPaidParticipant; i < allParticipants.length; i++)\r\n        {\r\n            if(allParticipants[i].ethAddress != _address)\r\n            {\r\n                counter++;\r\n            }\r\n            else\r\n            {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        return counter;\r\n    }\r\n    \r\n    function getMyOwed(address _address) public view returns(uint256)\r\n    {\r\n        uint counter = 0;\r\n        \r\n        for(uint16 i = 0; i < allParticipants.length; i++)\r\n        {\r\n            if(allParticipants[i].ethAddress == _address)\r\n            {\r\n                if(!allParticipants[i].paid)\r\n                {\r\n                    counter++;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return (counter * 625000000000000000);\r\n    }\r\n    \r\n    //For seeing how much balance is in the contract\r\n    function getBalance() public view returns(uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    //For seeing if the contract is locked\r\n    function isLocked() public view returns(bool)\r\n    {\r\n        if(totalTransactions >= maxTransactions)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    //For seeing how many transactions a user has put into the system\r\n    function getParticipantTransactions(address _address) public view returns(uint8)\r\n    {\r\n        return transactionLimits[_address];\r\n    }\r\n    \r\n    //For getting the details about a transaction (the address and if the transaction was paid)\r\n    function getTransactionInformation(uint _id) public view returns(address, bool)\r\n    {\r\n        return(allParticipants[_id].ethAddress, allParticipants[_id].paid);\r\n    }\r\n\r\n    //For getting the ID of the last Paid transaction\r\n    function getLastPaidTransaction() public view returns(uint)\r\n    {\r\n        return (lastPaidParticipant);\r\n    }\r\n    \r\n    //For getting how many transactions there are total\r\n    function getNumberOfTransactions() public view returns(uint)\r\n    {\r\n        return (allParticipants.length);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_testing\",\"type\":\"bool\"}],\"name\":\"setTesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeMaxTransactions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlockContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumberOfTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressToAdd\",\"type\":\"address\"}],\"name\":\"addToBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressToRemove\",\"type\":\"address\"}],\"name\":\"removeFromBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"changeAdminWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPeopleBeforeMe\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debugString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forcePayout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkMyTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devWalletRotation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getParticipantTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTransactionInformation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getMyOwed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTesting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastPaidTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Teris","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c7fe8528732057a8955db34daf4f7bb5ca611f69c83c11082e7d843b9c02816c"}]}