{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n// accepted from zeppelin-solidity https://github.com/OpenZeppelin/zeppelin-solidity\r\n/*\r\n * ERC20 interface\r\n * see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address _who) public constant returns (uint);\r\n  function allowance(address _owner, address _spender) public constant returns (uint);\r\n\r\n  function transfer(address _to, uint _value) public returns (bool ok);\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool ok);\r\n  function approve(address _spender, uint _value) public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\ncontract Haltable is Ownable {\r\n\r\n    // @dev To Halt in Emergency Condition\r\n    bool public halted = false;\r\n    //empty contructor\r\n    function Haltable() public {}\r\n\r\n    // @dev Use this as function modifier that should not execute if contract state Halted\r\n    modifier stopIfHalted {\r\n      require(!halted);\r\n      _;\r\n    }\r\n\r\n    // @dev Use this as function modifier that should execute only if contract state Halted\r\n    modifier runIfHalted{\r\n      require(halted);\r\n      _;\r\n    }\r\n\r\n    // @dev called by only owner in case of any emergecy situation\r\n    function halt() onlyOwner stopIfHalted public {\r\n        halted = true;\r\n    }\r\n    // @dev called by only owner to stop the emergency situation\r\n    function unHalt() onlyOwner runIfHalted public {\r\n        halted = false;\r\n    }\r\n}\r\n\r\ncontract UpgradeAgent is SafeMath {\r\n  address public owner;\r\n  bool public isUpgradeAgent;\r\n  function upgradeFrom(address _from, uint256 _value) public;\r\n  function setOriginalSupply() public;\r\n}\r\n\r\ncontract MiBoodleToken is ERC20,SafeMath,Haltable {\r\n\r\n    //flag to determine if address is for real contract or not\r\n    bool public isMiBoodleToken = false;\r\n\r\n    //Token related information\r\n    string public constant name = \"miBoodle\";\r\n    string public constant symbol = \"MIBO\";\r\n    uint256 public constant decimals = 18; // decimal places\r\n\r\n    //mapping of token balances\r\n    mapping (address => uint256) balances;\r\n    //mapping of allowed address for each address with tranfer limit\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    //mapping of allowed address for each address with burnable limit\r\n    mapping (address => mapping (address => uint256)) allowedToBurn;\r\n\r\n    //mapping of ether investment\r\n    mapping (address => uint256) investment;\r\n\r\n    address public upgradeMaster;\r\n    UpgradeAgent public upgradeAgent;\r\n    uint256 public totalUpgraded;\r\n    bool public upgradeAgentStatus = false;\r\n\r\n    //crowdSale related information\r\n     //crowdsale start time\r\n    uint256 public start;\r\n    //crowdsale end time\r\n    uint256 public end;\r\n    //crowdsale prefunding start time\r\n    uint256 public preFundingStart;\r\n    //Tokens per Ether in preFunding\r\n    uint256 public preFundingtokens;\r\n    //Tokens per Ether in Funding\r\n    uint256 public fundingTokens;\r\n    //max token supply\r\n    uint256 public maxTokenSupply = 600000000 ether;\r\n    //max token for sale\r\n    uint256 public maxTokenSale = 200000000 ether;\r\n    //max token for preSale\r\n    uint256 public maxTokenForPreSale = 100000000 ether;\r\n    //address of multisig\r\n    address public multisig;\r\n    //address of vault\r\n    address public vault;\r\n    //Is crowdsale finalized\r\n    bool public isCrowdSaleFinalized = false;\r\n    //Accept minimum ethers\r\n    uint256 minInvest = 1 ether;\r\n    //Accept maximum ethers\r\n    uint256 maxInvest = 50 ether;\r\n    //Is transfer enable\r\n    bool public isTransferEnable = false;\r\n    //Is Released Ether Once\r\n    bool public isReleasedOnce = false;\r\n\r\n    //event\r\n    event Allocate(address _address,uint256 _value);\r\n    event Burn(address owner,uint256 _value);\r\n    event ApproveBurner(address owner, address canBurn, uint256 value);\r\n    event BurnFrom(address _from,uint256 _value);\r\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\r\n    event UpgradeAgentSet(address agent);\r\n    event Deposit(address _investor,uint256 _value);\r\n\r\n    function MiBoodleToken(uint256 _preFundingtokens,uint256 _fundingTokens,uint256 _preFundingStart,uint256 _start,uint256 _end) public {\r\n        upgradeMaster = msg.sender;\r\n        isMiBoodleToken = true;\r\n        preFundingtokens = _preFundingtokens;\r\n        fundingTokens = _fundingTokens;\r\n        preFundingStart = safeAdd(now, _preFundingStart);\r\n        start = safeAdd(now, _start);\r\n        end = safeAdd(now, _end);\r\n    }\r\n\r\n    //'owner' can set minimum ether to accept\r\n    // @param _minInvest Minimum value of ether\r\n    function setMinimumEtherToAccept(uint256 _minInvest) public stopIfHalted onlyOwner {\r\n        minInvest = _minInvest;\r\n    }\r\n\r\n    //'owner' can set maximum ether to accept\r\n    // @param _maxInvest Maximum value of ether\r\n    function setMaximumEtherToAccept(uint256 _maxInvest) public stopIfHalted onlyOwner {\r\n        maxInvest = _maxInvest;\r\n    }\r\n\r\n    //'owner' can set start time of pre funding\r\n    // @param _preFundingStart Starting time of prefunding\r\n    function setPreFundingStartTime(uint256 _preFundingStart) public stopIfHalted onlyOwner {\r\n        preFundingStart = now + _preFundingStart;\r\n    }\r\n\r\n    //'owner' can set start time of funding\r\n    // @param _start Starting time of funding\r\n    function setFundingStartTime(uint256 _start) public stopIfHalted onlyOwner {\r\n        start = now + _start;\r\n    }\r\n\r\n    //'owner' can set end time of funding\r\n    // @param _end Ending time of funding\r\n    function setFundingEndTime(uint256 _end) public stopIfHalted onlyOwner {\r\n        end = now + _end;\r\n    }\r\n\r\n    //'owner' can set transfer enable or disable\r\n    // @param _isTransferEnable Token transfer enable or disable\r\n    function setTransferEnable(bool _isTransferEnable) public stopIfHalted onlyOwner {\r\n        isTransferEnable = _isTransferEnable;\r\n    }\r\n\r\n    //'owner' can set number of tokens per Ether in prefunding\r\n    // @param _preFundingtokens Tokens per Ether in prefunding\r\n    function setPreFundingtokens(uint256 _preFundingtokens) public stopIfHalted onlyOwner {\r\n        preFundingtokens = _preFundingtokens;\r\n    }\r\n\r\n    //'owner' can set number of tokens per Ether in funding\r\n    // @param _fundingTokens Tokens per Ether in funding\r\n    function setFundingtokens(uint256 _fundingTokens) public stopIfHalted onlyOwner {\r\n        fundingTokens = _fundingTokens;\r\n    }\r\n\r\n    //Owner can Set Multisig wallet\r\n    //@ param _multisig address of Multisig wallet.\r\n    function setMultisigWallet(address _multisig) onlyOwner public {\r\n        require(_multisig != 0);\r\n        multisig = _multisig;\r\n    }\r\n\r\n    //Owner can Set TokenVault\r\n    //@ param _vault address of TokenVault.\r\n    function setMiBoodleVault(address _vault) onlyOwner public {\r\n        require(_vault != 0);\r\n        vault = _vault;\r\n    }\r\n\r\n    //owner can call to allocate tokens to investor who invested in other currencies\r\n    //@ param _investor address of investor\r\n    //@ param _tokens number of tokens to give to investor\r\n    function cashInvestment(address _investor,uint256 _tokens) onlyOwner stopIfHalted external {\r\n        //validate address\r\n        require(_investor != 0);\r\n        //not allow with tokens 0\r\n        require(_tokens > 0);\r\n        //not allow if crowdsale ends.\r\n        require(now >= preFundingStart && now <= end);\r\n        if (now < start && now >= preFundingStart) {\r\n            //total supply should not be greater than max token sale for pre funding\r\n            require(safeAdd(totalSupply, _tokens) <= maxTokenForPreSale);\r\n        } else {\r\n            //total supply should not be greater than max token sale\r\n            require(safeAdd(totalSupply, _tokens) <= maxTokenSale);\r\n        }\r\n        //Call internal method to assign tokens\r\n        assignTokens(_investor,_tokens);\r\n    }\r\n\r\n    // transfer the tokens to investor's address\r\n    // Common function code for cashInvestment and Crowdsale Investor\r\n    function assignTokens(address _investor, uint256 _tokens) internal {\r\n        // Creating tokens and  increasing the totalSupply\r\n        totalSupply = safeAdd(totalSupply,_tokens);\r\n        // Assign new tokens to the sender\r\n        balances[_investor] = safeAdd(balances[_investor],_tokens);\r\n        // Finally token created for sender, log the creation event\r\n        Allocate(_investor, _tokens);\r\n    }\r\n\r\n    // Withdraw ether during pre-sale and sale \r\n    function withdraw() external onlyOwner {\r\n        // Release only if token-sale not ended and multisig set\r\n        require(now <= end && multisig != address(0));\r\n        // Release only if not released anytime before\r\n        require(!isReleasedOnce);\r\n        // Release only if balance more then 200 ether\r\n        require(address(this).balance >= 200 ether);\r\n        // Set ether released once \r\n        isReleasedOnce = true;\r\n        // Release 200 ether\r\n        assert(multisig.send(200 ether));\r\n    }\r\n\r\n    //Finalize crowdsale and allocate tokens to multisig and vault\r\n    function finalizeCrowdSale() external {\r\n        require(!isCrowdSaleFinalized);\r\n        require(multisig != 0 && vault != 0 && now > end);\r\n        require(safeAdd(totalSupply,250000000 ether) <= maxTokenSupply);\r\n        assignTokens(multisig, 250000000 ether);\r\n        require(safeAdd(totalSupply,150000000 ether) <= maxTokenSupply);\r\n        assignTokens(vault, 150000000 ether);\r\n        isCrowdSaleFinalized = true;\r\n        require(multisig.send(address(this).balance));\r\n    }\r\n\r\n    //fallback function to accept ethers\r\n    function() payable stopIfHalted external {\r\n        //not allow if crowdsale ends.\r\n        require(now <= end && now >= preFundingStart);\r\n        //not allow to invest with less then minimum investment value\r\n        require(msg.value >= minInvest);\r\n        //not allow to invest with more then maximum investment value\r\n        require(safeAdd(investment[msg.sender],msg.value) <= maxInvest);\r\n\r\n        //Hold created tokens for current state of funding\r\n        uint256 createdTokens;\r\n        if (now < start) {\r\n            createdTokens = safeMul(msg.value,preFundingtokens);\r\n            //total supply should not be greater than max token sale for pre funding\r\n            require(safeAdd(totalSupply, createdTokens) <= maxTokenForPreSale);\r\n        } else {\r\n            createdTokens = safeMul(msg.value,fundingTokens);\r\n            //total supply should not greater than maximum token to supply \r\n            require(safeAdd(totalSupply, createdTokens) <= maxTokenSale);\r\n        }\r\n\r\n        // Add investment details of investor\r\n        investment[msg.sender] = safeAdd(investment[msg.sender],msg.value);\r\n        \r\n        //call internal method to assign tokens\r\n        assignTokens(msg.sender,createdTokens);\r\n        Deposit(msg.sender,createdTokens);\r\n    }\r\n\r\n    // @param _who The address of the investor to check balance\r\n    // @return balance tokens of investor address\r\n    function balanceOf(address _who) public constant returns (uint) {\r\n        return balances[_who];\r\n    }\r\n\r\n    // @param _owner The address of the account owning tokens\r\n    // @param _spender The address of the account able to transfer the tokens\r\n    // @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public constant returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // @param _owner The address of the account owning tokens\r\n    // @param _spender The address of the account able to transfer the tokens\r\n    // @return Amount of remaining tokens allowed to spent\r\n    function allowanceToBurn(address _owner, address _spender) public constant returns (uint) {\r\n        return allowedToBurn[_owner][_spender];\r\n    }\r\n\r\n    //  Transfer `value` miBoodle tokens from sender's account\r\n    // `msg.sender` to provided account address `to`.\r\n    // @param _to The address of the recipient\r\n    // @param _value The number of miBoodle tokens to transfer\r\n    // @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint _value) public returns (bool ok) {\r\n        //allow only if transfer is enable\r\n        require(isTransferEnable);\r\n        //require(now >= end);\r\n        //validate receiver address and value.Not allow 0 value\r\n        require(_to != 0 && _value > 0);\r\n        uint256 senderBalance = balances[msg.sender];\r\n        //Check sender have enough balance\r\n        require(senderBalance >= _value);\r\n        senderBalance = safeSub(senderBalance, _value);\r\n        balances[msg.sender] = senderBalance;\r\n        balances[_to] = safeAdd(balances[_to],_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    //  Transfer `value` miBoodle tokens from sender 'from'\r\n    // to provided account address `to`.\r\n    // @param from The address of the sender\r\n    // @param to The address of the recipient\r\n    // @param value The number of miBoodle to transfer\r\n    // @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool ok) {\r\n        //allow only if transfer is enable\r\n        require(isTransferEnable);\r\n        //require(now >= end);\r\n        //validate _from,_to address and _value(Not allow with 0)\r\n        require(_from != 0 && _to != 0 && _value > 0);\r\n        //Check amount is approved by the owner for spender to spent and owner have enough balances\r\n        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value);\r\n        balances[_from] = safeSub(balances[_from],_value);\r\n        balances[_to] = safeAdd(balances[_to],_value);\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    //  `msg.sender` approves `spender` to spend `value` tokens\r\n    // @param spender The address of the account able to transfer the tokens\r\n    // @param value The amount of wei to be approved for transfer\r\n    // @return Whether the approval was successful or not\r\n    function approve(address _spender, uint _value) public returns (bool ok) {\r\n        //validate _spender address\r\n        require(_spender != 0);\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    //  `msg.sender` approves `_canBurn` to burn `value` tokens\r\n    // @param _canBurn The address of the account able to burn the tokens\r\n    // @param _value The amount of wei to be approved for burn\r\n    // @return Whether the approval was successful or not\r\n    function approveForBurn(address _canBurn, uint _value) public returns (bool ok) {\r\n        //validate _spender address\r\n        require(_canBurn != 0);\r\n        allowedToBurn[msg.sender][_canBurn] = _value;\r\n        ApproveBurner(msg.sender, _canBurn, _value);\r\n        return true;\r\n    }\r\n\r\n    //  Burn `value` miBoodle tokens from sender's account\r\n    // `msg.sender` to provided _value.\r\n    // @param _value The number of miBoodle tokens to destroy\r\n    // @return Whether the Burn was successful or not\r\n    function burn(uint _value) public returns (bool ok) {\r\n        //allow only if transfer is enable\r\n        require(now >= end);\r\n        //validate receiver address and value.Now allow 0 value\r\n        require(_value > 0);\r\n        uint256 senderBalance = balances[msg.sender];\r\n        require(senderBalance >= _value);\r\n        senderBalance = safeSub(senderBalance, _value);\r\n        balances[msg.sender] = senderBalance;\r\n        totalSupply = safeSub(totalSupply,_value);\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    //  Burn `value` miBoodle tokens from sender 'from'\r\n    // to provided account address `to`.\r\n    // @param from The address of the burner\r\n    // @param to The address of the token holder from token to burn\r\n    // @param value The number of miBoodle to burn\r\n    // @return Whether the transfer was successful or not\r\n    function burnFrom(address _from, uint _value) public returns (bool ok) {\r\n        //allow only if transfer is enable\r\n        require(now >= end);\r\n        //validate _from,_to address and _value(Now allow with 0)\r\n        require(_from != 0 && _value > 0);\r\n        //Check amount is approved by the owner to burn and owner have enough balances\r\n        require(allowedToBurn[_from][msg.sender] >= _value && balances[_from] >= _value);\r\n        balances[_from] = safeSub(balances[_from],_value);\r\n        totalSupply = safeSub(totalSupply,_value);\r\n        allowedToBurn[_from][msg.sender] = safeSub(allowedToBurn[_from][msg.sender],_value);\r\n        BurnFrom(_from, _value);\r\n        return true;\r\n    }\r\n\r\n    // Token upgrade functionality\r\n\r\n    /// @notice Upgrade tokens to the new token contract.\r\n    /// @param value The number of tokens to upgrade\r\n    function upgrade(uint256 value) external {\r\n        /*if (getState() != State.Success) throw; // Abort if not in Success state.*/\r\n        require(upgradeAgentStatus); // need a real upgradeAgent address\r\n\r\n        // Validate input value.\r\n        require (value > 0 && upgradeAgent.owner() != 0x0);\r\n        require (value <= balances[msg.sender]);\r\n\r\n        // update the balances here first before calling out (reentrancy)\r\n        balances[msg.sender] = safeSub(balances[msg.sender], value);\r\n        totalSupply = safeSub(totalSupply, value);\r\n        totalUpgraded = safeAdd(totalUpgraded, value);\r\n        upgradeAgent.upgradeFrom(msg.sender, value);\r\n        Upgrade(msg.sender, upgradeAgent, value);\r\n    }\r\n\r\n    /// @notice Set address of upgrade target contract and enable upgrade\r\n    /// process.\r\n    /// @param agent The address of the UpgradeAgent contract\r\n    function setUpgradeAgent(address agent) external onlyOwner {\r\n        require(agent != 0x0 && msg.sender == upgradeMaster);\r\n        upgradeAgent = UpgradeAgent(agent);\r\n        require (upgradeAgent.isUpgradeAgent());\r\n        // this needs to be called in success condition to guarantee the invariant is true\r\n        upgradeAgentStatus = true;\r\n        upgradeAgent.setOriginalSupply();\r\n        UpgradeAgentSet(upgradeAgent);\r\n    }\r\n\r\n    /// @notice Set address of upgrade target contract and enable upgrade\r\n    /// process.\r\n    /// @param master The address that will manage upgrades, not the upgradeAgent contract address\r\n    function setUpgradeMaster(address master) external {\r\n        require (master != 0x0 && msg.sender == upgradeMaster);\r\n        upgradeMaster = master;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"preFundingtokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgentStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"cashInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preFundingStart\",\"type\":\"uint256\"}],\"name\":\"setPreFundingStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"setFundingEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_canBurn\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveForBurn\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMiBoodleToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preFundingStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"setFundingStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundingTokens\",\"type\":\"uint256\"}],\"name\":\"setFundingtokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multisig\",\"type\":\"address\"}],\"name\":\"setMultisigWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTokenForPreSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unHalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeCrowdSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preFundingtokens\",\"type\":\"uint256\"}],\"name\":\"setPreFundingtokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setMiBoodleVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransferEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isTransferEnable\",\"type\":\"bool\"}],\"name\":\"setTransferEnable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdSaleFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minInvest\",\"type\":\"uint256\"}],\"name\":\"setMinimumEtherToAccept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isReleasedOnce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxInvest\",\"type\":\"uint256\"}],\"name\":\"setMaximumEtherToAccept\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowanceToBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"master\",\"type\":\"address\"}],\"name\":\"setUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_preFundingtokens\",\"type\":\"uint256\"},{\"name\":\"_fundingTokens\",\"type\":\"uint256\"},{\"name\":\"_preFundingStart\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Allocate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"canBurn\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ApproveBurner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"BurnFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MiBoodleToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000004e200000000000000000000000000000000000000000000000000000000000004e20000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000202280000000000000000000000000000000000000000000000000000000000f49617","Library":"","SwarmSource":"bzzr://67840e9e55c54fdd610d497274fe1027dc4692322f821e7c0ae60c5a2f2bd972"}]}