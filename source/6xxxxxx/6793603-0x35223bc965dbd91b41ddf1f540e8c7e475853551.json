{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title -Airdrop\r\n * every erc20 token can doAirdrop here \r\n * Contact us for further cooperation support@lordless.io\r\n *\r\n *  █████╗  ██╗ ██████╗  ██████╗  ██████╗   ██████╗  ██████╗\r\n * ██╔══██╗ ██║ ██╔══██╗ ██╔══██╗ ██╔══██╗ ██╔═══██╗ ██╔══██╗\r\n * ███████║ ██║ ██████╔╝ ██║  ██║ ██████╔╝ ██║   ██║ ██████╔╝\r\n * ██╔══██║ ██║ ██╔══██╗ ██║  ██║ ██╔══██╗ ██║   ██║ ██╔═══╝\r\n * ██║  ██║ ██║ ██║  ██║ ██████╔╝ ██║  ██║ ╚██████╔╝ ██║\r\n * ╚═╝  ╚═╝ ╚═╝ ╚═╝  ╚═╝ ╚═════╝  ╚═╝  ╚═╝  ╚═════╝  ╚═╝\r\n *\r\n * ---\r\n * POWERED BY\r\n * ╦   ╔═╗ ╦═╗ ╔╦╗ ╦   ╔═╗ ╔═╗ ╔═╗      ╔╦╗ ╔═╗ ╔═╗ ╔╦╗\r\n * ║   ║ ║ ╠╦╝  ║║ ║   ║╣  ╚═╗ ╚═╗       ║  ║╣  ╠═╣ ║║║\r\n * ╩═╝ ╚═╝ ╩╚═ ═╩╝ ╩═╝ ╚═╝ ╚═╝ ╚═╝       ╩  ╚═╝ ╩ ╩ ╩ ╩\r\n * game at http://lordless.games\r\n * code at https://github.com/lordlessio\r\n */\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n * See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n  {\r\n    require(has(_role, _addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _role.bearer[_addr];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * Supports unlimited numbers of roles and addresses.\r\n * See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n * for you to write your own implementation of this interface using Enums or similar.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string _role)\r\n    public\r\n    view\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string _role)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function addRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function removeRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n\r\n/**\r\n * @title Superuser\r\n * @dev The Superuser contract defines a single superuser who can transfer the ownership\r\n * of a contract to a new address, even if he is not the owner.\r\n * A superuser can transfer his role to a new address.\r\n */\r\ncontract Superuser is Ownable, RBAC {\r\n  string public constant ROLE_SUPERUSER = \"superuser\";\r\n\r\n  constructor () public {\r\n    addRole(msg.sender, ROLE_SUPERUSER);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account that's not a superuser.\r\n   */\r\n  modifier onlySuperuser() {\r\n    checkRole(msg.sender, ROLE_SUPERUSER);\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwnerOrSuperuser() {\r\n    require(msg.sender == owner || isSuperuser(msg.sender));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address has superuser role\r\n   */\r\n  function isSuperuser(address _addr)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return hasRole(_addr, ROLE_SUPERUSER);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current superuser to transfer his role to a newSuperuser.\r\n   * @param _newSuperuser The address to transfer ownership to.\r\n   */\r\n  function transferSuperuser(address _newSuperuser) public onlySuperuser {\r\n    require(_newSuperuser != address(0));\r\n    removeRole(msg.sender, ROLE_SUPERUSER);\r\n    addRole(_newSuperuser, ROLE_SUPERUSER);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current superuser or owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwnerOrSuperuser {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) \r\n      internal \r\n      pure \r\n      returns (uint256 c) \r\n  {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    require(c / a == b, \"SafeMath mul failed\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b)\r\n      internal\r\n      pure\r\n      returns (uint256) \r\n  {\r\n    require(b <= a, \"SafeMath sub failed\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b)\r\n      internal\r\n      pure\r\n      returns (uint256 c) \r\n  {\r\n    c = a + b;\r\n    require(c >= a, \"SafeMath add failed\");\r\n    return c;\r\n  }\r\n  \r\n  /**\r\n    * @dev gives square root of given x.\r\n    */\r\n  function sqrt(uint256 x)\r\n      internal\r\n      pure\r\n      returns (uint256 y) \r\n  {\r\n    uint256 z = ((add(x,1)) / 2);\r\n    y = x;\r\n    while (z < y) \r\n    {\r\n      y = z;\r\n      z = ((add((x / z),z)) / 2);\r\n    }\r\n  }\r\n  \r\n  /**\r\n    * @dev gives square. batchplies x by x\r\n    */\r\n  function sq(uint256 x)\r\n      internal\r\n      pure\r\n      returns (uint256)\r\n  {\r\n    return (mul(x,x));\r\n  }\r\n  \r\n  /**\r\n    * @dev x to the power of y \r\n    */\r\n  function pwr(uint256 x, uint256 y)\r\n      internal \r\n      pure \r\n      returns (uint256)\r\n  {\r\n    if (x==0)\r\n        return (0);\r\n    else if (y==0)\r\n        return (1);\r\n    else \r\n    {\r\n      uint256 z = x;\r\n      for (uint256 i=1; i < y; i++)\r\n        z = mul(z,x);\r\n      return (z);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title -airdrop Interface\r\n */\r\n\r\ninterface IAirdrop {\r\n\r\n  function isVerifiedUser(address user) external view returns (bool);\r\n  function isCollected(address user, bytes32 airdropId) external view returns (bool);\r\n  function getAirdropIds()external view returns(bytes32[]);\r\n  function getAirdropIdsByContractAddress(address contractAddress)external view returns(bytes32[]);\r\n  function getUser(address userAddress) external view returns (\r\n    address,\r\n    string,\r\n    uint256,\r\n    uint256\r\n  );\r\n  function getAirdrop(\r\n    bytes32 airdropId\r\n    ) external view returns (address, uint256, bool);\r\n  function updateVeifyFee(uint256 fee) external;\r\n  function verifyUser(string name) external payable;\r\n  function addAirdrop (address contractAddress, uint256 countPerUser, bool needVerifiedUser) external;\r\n  function claim(bytes32 airdropId) external;\r\n  function withdrawToken(address contractAddress, address to) external;\r\n  function withdrawEth(address to) external;\r\n\r\n  \r\n  \r\n\r\n  /* Events */\r\n\r\n  event UpdateVeifyFee (\r\n    uint256 indexed fee\r\n  );\r\n\r\n  event VerifyUser (\r\n    address indexed user\r\n  );\r\n\r\n  event AddAirdrop (\r\n    address indexed contractAddress,\r\n    uint256 countPerUser,\r\n    bool needVerifiedUser\r\n  );\r\n\r\n  event Claim (\r\n    bytes32 airdropId,\r\n    address user\r\n  );\r\n\r\n  event WithdrawToken (\r\n    address indexed contractAddress,\r\n    address to,\r\n    uint256 count\r\n  );\r\n\r\n  event WithdrawEth (\r\n    address to,\r\n    uint256 count\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC20Interface {\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n}\r\ncontract Airdrop is Superuser, Pausable, IAirdrop {\r\n\r\n  using SafeMath for *;\r\n\r\n  struct User {\r\n    address user;\r\n    string name;\r\n    uint256 verifytime;\r\n    uint256 verifyFee;\r\n  }\r\n\r\n  struct Airdrop {\r\n    address contractAddress;\r\n    uint256 countPerUser; // wei\r\n    bool needVerifiedUser;\r\n  }\r\n\r\n  uint256 public verifyFee = 2e16; // 0.02 eth\r\n  bytes32[] public airdropIds; //\r\n\r\n  mapping (address => User) public userAddressToUser;\r\n  mapping (address => bytes32[]) contractAddressToAirdropId;\r\n  mapping (bytes32 => Airdrop) airdropIdToAirdrop;\r\n  mapping (bytes32 => mapping (address => bool)) airdropIdToUserAddress;\r\n  mapping (address => uint256) contractAddressToAirdropCount;\r\n\r\n\r\n  function isVerifiedUser(address user) external view returns (bool){\r\n    return userAddressToUser[user].user == user;\r\n  }\r\n\r\n  function isCollected(address user, bytes32 airdropId) external view returns (bool) {\r\n    return airdropIdToUserAddress[airdropId][user];\r\n  }\r\n\r\n  function getAirdropIdsByContractAddress(address contractAddress)external view returns(bytes32[]){\r\n    return contractAddressToAirdropId[contractAddress];\r\n  }\r\n  function getAirdropIds()external view returns(bytes32[]){\r\n    return airdropIds;\r\n  }\r\n\r\n  function tokenTotalClaim(address contractAddress)external view returns(uint256){\r\n    return contractAddressToAirdropCount[contractAddress];\r\n  }\r\n\r\n  function getUser(\r\n    address userAddress\r\n    ) external view returns (address, string, uint256 ,uint256){\r\n    User storage user = userAddressToUser[userAddress];\r\n    return (user.user, user.name, user.verifytime, user.verifyFee);\r\n  }\r\n\r\n  function getAirdrop(\r\n    bytes32 airdropId\r\n    ) external view returns (address, uint256, bool){\r\n    Airdrop storage airdrop = airdropIdToAirdrop[airdropId];\r\n    return (airdrop.contractAddress, airdrop.countPerUser, airdrop.needVerifiedUser);\r\n  }\r\n  \r\n  function updateVeifyFee(uint256 fee) external onlyOwnerOrSuperuser{\r\n    verifyFee = fee;\r\n    emit UpdateVeifyFee(fee);\r\n  }\r\n\r\n  function verifyUser(string name) external payable whenNotPaused {\r\n    address sender = msg.sender;\r\n    require(!this.isVerifiedUser(sender), \"Is Verified User\");\r\n    uint256 _ethAmount = msg.value;\r\n    require(_ethAmount >= verifyFee, \"LESS FEE\");\r\n    uint256 payExcess = _ethAmount.sub(verifyFee);\r\n    if(payExcess > 0) {\r\n      sender.transfer(payExcess);\r\n    }\r\n    \r\n    User memory _user = User(\r\n      sender,\r\n      name,\r\n      block.timestamp,\r\n      verifyFee\r\n    );\r\n\r\n    userAddressToUser[sender] = _user;\r\n    emit VerifyUser(msg.sender);\r\n  }\r\n\r\n  function addAirdrop(address contractAddress, uint256 countPerUser, bool needVerifiedUser) external onlyOwnerOrSuperuser{\r\n    bytes32 airdropId = keccak256(\r\n      abi.encodePacked(block.timestamp, contractAddress, countPerUser, needVerifiedUser)\r\n    );\r\n\r\n    Airdrop memory _airdrop = Airdrop(\r\n      contractAddress,\r\n      countPerUser,\r\n      needVerifiedUser\r\n    );\r\n    airdropIdToAirdrop[airdropId] = _airdrop;\r\n    airdropIds.push(airdropId);\r\n    contractAddressToAirdropId[contractAddress].push(airdropId);\r\n    emit AddAirdrop(contractAddress, countPerUser, needVerifiedUser);\r\n  }\r\n\r\n  function claim(bytes32 airdropId) external whenNotPaused {\r\n\r\n    Airdrop storage _airdrop = airdropIdToAirdrop[airdropId];\r\n    if (_airdrop.needVerifiedUser) {\r\n      require(this.isVerifiedUser(msg.sender));\r\n    }\r\n    \r\n    require(!this.isCollected(msg.sender, airdropId), \"The same Airdrop can only be collected once per address.\");\r\n    ERC20Interface erc20 = ERC20Interface(_airdrop.contractAddress);\r\n    erc20.transfer(msg.sender, _airdrop.countPerUser);\r\n    airdropIdToUserAddress[airdropId][msg.sender] = true;\r\n    // update to\r\n    contractAddressToAirdropCount[_airdrop.contractAddress] = \r\n      contractAddressToAirdropCount[_airdrop.contractAddress].add(_airdrop.countPerUser);\r\n    emit Claim(airdropId, msg.sender);\r\n  }\r\n\r\n  function withdrawToken(address contractAddress, address to) external onlyOwnerOrSuperuser {\r\n    ERC20Interface erc20 = ERC20Interface(contractAddress);\r\n    uint256 balance = erc20.balanceOf(address(this));\r\n    erc20.transfer(to, balance);\r\n    emit WithdrawToken(contractAddress, to, balance);\r\n  }\r\n\r\n  function withdrawEth(address to) external onlySuperuser {\r\n    uint256 balance = address(this).balance;\r\n    to.transfer(balance);\r\n    emit WithdrawEth(to, balance);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isVerifiedUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"getAirdropIdsByContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSuperuser\",\"type\":\"address\"}],\"name\":\"transferSuperuser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"airdropId\",\"type\":\"bytes32\"}],\"name\":\"getAirdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"airdropIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAirdropIds\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"verifyFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateVeifyFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"tokenTotalClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddress\",\"type\":\"address\"},{\"name\":\"countPerUser\",\"type\":\"uint256\"},{\"name\":\"needVerifiedUser\",\"type\":\"bool\"}],\"name\":\"addAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"airdropId\",\"type\":\"bytes32\"}],\"name\":\"isCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isSuperuser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"airdropId\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAddressToUser\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"verifytime\",\"type\":\"uint256\"},{\"name\":\"verifyFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"name\":\"verifyUser\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_SUPERUSER\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"UpdateVeifyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"VerifyUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"countPerUser\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"needVerifiedUser\",\"type\":\"bool\"}],\"name\":\"AddAirdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"airdropId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"WithdrawEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Airdrop","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://12db2134f69419dd28d602cad89d600d28ddd3c19d261f35f66768e9c983d39c"}]}