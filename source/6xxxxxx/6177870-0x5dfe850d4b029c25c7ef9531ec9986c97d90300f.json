{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/*\r\n    Utility contract for Arby and it's various exchanges\r\n    Some of these functions originated from (and then improved upon) DeltaBalances.github.io\r\n    Check balances for multiple ERC20 tokens for multiple users in 1 batched call\r\n    Check exchange rates for many Bancor contracts in one batched call\r\n*/\r\n\r\n// WETH interface for 0x\r\ncontract WETH_0x {\r\n    // function balanceOf(address /*user*/) public view returns (uint);\r\n    function balanceOf(address userAddress) public view returns (uint);\r\n}\r\n\r\n// ERC20 interface\r\ncontract Token {\r\n    // function balanceOf(address /*tokenOwner*/) public view returns (uint /*balance*/);\r\n    // function transfer(address /*to*/, uint /*tokens*/) public returns (bool /*success*/);\r\n    // function allowance(address _owner, address _spender) constant returns (uint /*remaining*/)\r\n    function balanceOf(address tokenOwner) public view returns (uint /*balance*/);\r\n    function transfer(address toAddress, uint tokens) public returns (bool /*success*/);\r\n    function allowance(address _owner, address _spender) constant returns (uint /*remaining*/);\r\n}\r\n\r\n\r\ncontract BalanceCheckerN {\r\n\r\n    address public admin;\r\n\r\n    constructor() {\r\n        admin = 0x96670A91E1A0dbAde97fCDC0ABdDEe769C21fc8e;\r\n    }\r\n\r\n    //default function, don't accept any ETH\r\n    function() public payable {\r\n        revert();\r\n    }\r\n\r\n    //limit address to the creating address\r\n    modifier isAdmin() {\r\n        require(msg.sender == admin);\r\n         _;\r\n    }\r\n\r\n    // selfdestruct for cleanup\r\n    function destruct() public isAdmin {\r\n        selfdestruct(admin);\r\n    }\r\n\r\n    // backup withdraw, if somehow ETH gets in here\r\n    function withdraw() public isAdmin {\r\n        admin.transfer(address(this).balance);\r\n    }\r\n\r\n    // backup withdraw, if somehow ERC20 tokens get in here\r\n    function withdrawToken(address token, uint amount) public isAdmin {\r\n        require(token != address(0x0)); //use withdraw for ETH\r\n        require(Token(token).transfer(msg.sender, amount));\r\n    }\r\n\r\n  /* Check the token allowance of a wallet in a token contract\r\n     Avoids possible errors:\r\n        - returns 0 on invalid exchange contract\r\n        - return 0 on non-contract address\r\n\r\n     Mainly for internal use, but public for anyone who thinks it is useful    */\r\n   function tokenAllowance(address user, address spender, address token) public view returns (uint) {\r\n       //  check if token is actually a contract\r\n        uint256 tokenCode;\r\n        assembly { tokenCode := extcodesize(token) } // contract code size\r\n        if(tokenCode > 0)\r\n        {\r\n            Token tok = Token(token);\r\n            //  check if allowance succeeds\r\n            if(address(tok).call(bytes4(keccak256(\"allowance(address,address)\")), user, spender)) {\r\n                return tok.allowance(user, spender);\r\n            } else {\r\n                  return 0; // not a valid allowance, return 0 instead of error\r\n            }\r\n        } else {\r\n            return 0; // not a contract, return 0 instead of error\r\n        }\r\n   }\r\n\r\n  /* Check the token balance of a wallet in a token contract\r\n     Avoids possible errors:\r\n        - returns 0 on invalid exchange contract\r\n        - return 0 on non-contract address\r\n\r\n     Mainly for internal use, but public for anyone who thinks it is useful    */\r\n   function tokenBalance(address user, address token) public view returns (uint) {\r\n       //  check if token is actually a contract\r\n        uint256 tokenCode;\r\n        assembly { tokenCode := extcodesize(token) } // contract code size\r\n        if(tokenCode > 0)\r\n        {\r\n            Token tok = Token(token);\r\n            //  check if balanceOf succeeds\r\n            if(address(tok).call(bytes4(keccak256(\"balanceOf(address)\")), user)) {\r\n                return tok.balanceOf(user);\r\n            } else {\r\n                  return 0; // not a valid balanceOf, return 0 instead of error\r\n            }\r\n        } else {\r\n            return 0; // not a contract, return 0 instead of error\r\n        }\r\n   }\r\n\r\n    /* Check the token balances of a wallet for multiple tokens\r\n       Uses tokenBalance() to be able to return, even if a token isn't valid\r\n       Possible error throws:\r\n           - extremely large arrays (gas cost too high)\r\n\r\n       Returns array of token balances in wei units. */\r\n    function walletBalances(address user,  address[] tokens) public view returns (uint[]) {\r\n        require(tokens.length > 0);\r\n        uint[] memory balances = new uint[](tokens.length);\r\n\r\n        for(uint i = 0; i< tokens.length; i++){\r\n            if( tokens[i] != address(0x0) ) { // ETH address in Etherdelta config\r\n                balances[i] = tokenBalance(user, tokens[i]);\r\n            }\r\n            else {\r\n               balances[i] = user.balance; // eth balance\r\n            }\r\n        }\r\n        return balances;\r\n    }\r\n\r\n    /* Check the token allowances of a wallet for multiple tokens\r\n       Uses tokenBalance() to be able to return, even if a token isn't valid\r\n       Possible error throws:\r\n           - extremely large arrays (gas cost too high)\r\n\r\n       Returns array of token allowances in wei units. */\r\n    function walletAllowances(address user,  address spender, address[] tokens) public view returns (uint[]) {\r\n        require(tokens.length > 0);\r\n        uint[] memory allowances = new uint[](tokens.length);\r\n\r\n        for(uint i = 0; i< tokens.length; i++){\r\n            allowances[i] = tokenAllowance(user, spender, tokens[i]);\r\n        }\r\n        return allowances;\r\n    }\r\n\r\n    /* Similar to walletA, with the addition of supporting multiple users\r\n       When calling this funtion through Infura, it handles a large number of users/tokens before it\r\n       fails and returns 0x0 as the result. So there is some max number of arguements you can send...\r\n       */\r\n    function allAllowancesForManyAccounts(\r\n        address[] users,\r\n        address spender,\r\n        address[] tokens)\r\n    public view returns (uint[]) {\r\n        uint[] memory allowances = new uint[](tokens.length * users.length);\r\n\r\n        for(uint user = 0; user < users.length; user++){\r\n            for(uint token = 0; token < tokens.length; token++) {\r\n                    allowances[(user * tokens.length) + token] = tokenAllowance(users[user], spender, tokens[token]);\r\n          }\r\n        }\r\n        return allowances;\r\n    }\r\n\r\n    /* Similar to allBalances, with the addition of supporting multiple users\r\n       When calling this funtion through Infura, it handles a large number of users/tokens before it\r\n       fails and returns 0x0 as the result. So there is some max number of arguements you can send...\r\n       */\r\n    function allBalancesForManyAccounts(\r\n        address[] users,\r\n        address[] tokens)\r\n    public view returns (uint[]) {\r\n        uint[] memory balances = new uint[](tokens.length * users.length);\r\n\r\n        for(uint user = 0; user < users.length; user++){\r\n            for(uint token = 0; token < tokens.length; token++){\r\n                if( tokens[token] != address(0x0) ) { // ETH address in Etherdelta config\r\n                    balances[(user * tokens.length) + token] = tokenBalance(users[user], tokens[token]);\r\n                } else {\r\n                   balances[(user * tokens.length) + token] =  users[user].balance;\r\n                }\r\n            }\r\n        }\r\n        return balances;\r\n    }\r\n\r\n    /* Check the balances of many address' WETH (which is a 0x ETH wrapper for 0x exchanges)\r\n       */\r\n    function allWETHbalances(\r\n        address wethAddress,\r\n        address[] users\r\n    ) public view returns (uint[]) {\r\n        WETH_0x weth = WETH_0x(wethAddress);\r\n        uint[] memory balances = new uint[](users.length);\r\n        for(uint k = 0; k < users.length; k++){\r\n            balances[k] = weth.balanceOf(users[k]);\r\n        }\r\n        return balances;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"allBalancesForManyAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"walletAllowances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"walletBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"wethAddress\",\"type\":\"address\"},{\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"allWETHbalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"allAllowancesForManyAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"BalanceCheckerN","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a3f471825080fe0f8dc105f22c73e37eb44a4f8a02d04dfd87ad14dfeed1ff6d"}]}