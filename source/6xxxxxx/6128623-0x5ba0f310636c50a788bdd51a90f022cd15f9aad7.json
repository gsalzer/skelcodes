{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\n// https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n    uint256 public _totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    function totalSupply() public constant returns (uint256 supply);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n//Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\r\n\r\ncontract ERC20Token is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n\r\n    function balanceOf(address _owner) view public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        //require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\n/**\r\n * @title ERC677 transferAndCall token interface\r\n * @dev See https://github.com/ethereum/EIPs/issues/677 for specification and\r\n *      discussion.\r\n */\r\ncontract ERC677 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount, bytes _data);\r\n\r\n    function transferAndCall(address _receiver, uint _amount, bytes _data) public;\r\n}\r\n\r\n\r\n/**\r\n * @title Receiver interface for ERC677 transferAndCall\r\n * @dev See https://github.com/ethereum/EIPs/issues/677 for specification and\r\n *      discussion.\r\n */\r\ncontract ERC677Receiver {\r\n    function tokenFallback(address _from, uint _amount, bytes _data) public;\r\n}\r\n\r\ncontract ERC677Token is ERC677, ERC20Token {\r\n    function transferAndCall(address _receiver, uint _amount, bytes _data) public {\r\n        require(super.transfer(_receiver, _amount));\r\n\r\n        emit Transfer(msg.sender, _receiver, _amount, _data);\r\n\r\n        // call receiver\r\n        if (isContract(_receiver)) {\r\n            ERC677Receiver to = ERC677Receiver(_receiver);\r\n            to.tokenFallback(msg.sender, _amount, _data);\r\n        }\r\n    }\r\n\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint len;\r\n        assembly {\r\n            len := extcodesize(_addr)\r\n        }\r\n        return len > 0;\r\n    }\r\n}\r\n\r\ncontract Splitable is ERC677Token, Ownable {\r\n    uint32 public split;\r\n    mapping (address => uint32) public splits;\r\n\r\n    event Split(address indexed addr, uint32 multiplyer);\r\n\r\n    constructor() public {\r\n        split = 0;\r\n    }\r\n\r\n    function splitShare() onlyOwner public {\r\n        require(split * 2 >= split);\r\n        if (split == 0) split = 2;\r\n        else split *= 2;\r\n        claimShare();\r\n    }\r\n\r\n    function isSplitable() public view returns (bool) {\r\n        return splits[msg.sender] != split;\r\n    }\r\n\r\n    function claimShare() public {\r\n        uint32 s = splits[msg.sender];\r\n        if (s == split) return;\r\n        if (s == 0) s = 1;\r\n\r\n        splits[msg.sender] = split;\r\n        uint b = balances[msg.sender];\r\n        uint nb = b * split / s;\r\n\r\n        balances[msg.sender] = nb;\r\n        _totalSupply += nb - b;\r\n    }\r\n\r\n    function claimShare(address _u1, address _u2) public {\r\n        uint32 s = splits[_u1];\r\n        if (s != split) {\r\n            if (s == 0) s = 1;\r\n\r\n            splits[_u1] = split;\r\n            uint b = balances[_u1];\r\n            uint nb = b.mul(split / s);\r\n\r\n            balances[_u1] = nb;\r\n            _totalSupply += nb - b;\r\n        }\r\n        s = splits[_u2];\r\n        if (s != split) {\r\n            if (s == 0) s = 1;\r\n\r\n            splits[_u2] = split;\r\n            b = balances[_u2];\r\n            nb = b.mul(split / s);\r\n            \r\n            balances[_u2] = nb;\r\n            _totalSupply += nb - b;\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        if (splits[msg.sender] != splits[_to]) claimShare(msg.sender, _to);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (splits[_from] != splits[_to]) claimShare(msg.sender, _to);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function transferAndCall(address _receiver, uint _amount, bytes _data) public {\r\n        if (splits[_receiver] != splits[_receiver]) claimShare(msg.sender, _receiver);\r\n        return super.transferAndCall(_receiver, _amount, _data);\r\n    }\r\n}\r\n\r\ncontract Lockable is ERC20Token, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) public lockAmounts;\r\n\r\n    // function lock(address to, uint amount) public onlyOwner {\r\n    //     lockAmounts[to] = lockAmounts[to].add(amount);\r\n    // }\r\n\r\n    function unlock(address to, uint amount) public onlyOwner {\r\n        lockAmounts[to] = lockAmounts[to].sub(amount);\r\n    }\r\n\r\n    function issueCoin(address to, uint amount) public onlyOwner {\r\n        lockAmounts[to] = lockAmounts[to].add(amount);\r\n        transfer(to, amount);\r\n    //  balances[to] = balances[to].add(amount);\r\n    //  balances[owner] = balances[owner].sub(amount);\r\n    //  emit Transfer(owner, to, amount);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value + lockAmounts[msg.sender]);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[_from] >= _value + lockAmounts[_from]);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\ncontract VCoin is ERC677Token, Ownable, Splitable, Lockable {\r\n    uint32 public purchaseNo;\r\n    event Purchase(uint32 indexed purchaseNo, address from, uint value, bytes data);\r\n\r\n    constructor() public {\r\n        symbol = \"VICT\";\r\n        name = \"Victory Token\";\r\n        decimals = 18;\r\n        _totalSupply = 1000000000 * 10**uint(decimals);\r\n\r\n        balances[owner] = _totalSupply;\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n\r\n        purchaseNo = 1;\r\n    }\r\n\r\n    function () public payable {\r\n        require(!isContract(msg.sender));\r\n        owner.transfer(msg.value);\r\n        emit Purchase(purchaseNo++, msg.sender, msg.value, msg.data);\r\n        //emit Transfer(owner, msg.sender, msg.value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"splits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSplitable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"splitShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issueCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_u1\",\"type\":\"address\"},{\"name\":\"_u2\",\"type\":\"address\"}],\"name\":\"claimShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"split\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaseNo\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"multiplyer\",\"type\":\"uint32\"}],\"name\":\"Split\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"VCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://199847e1b9feb8e0c5d2f570f030a32d5b4beb706f29af303a1bd28842c9b706"}]}