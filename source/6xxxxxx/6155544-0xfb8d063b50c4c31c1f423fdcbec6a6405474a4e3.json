{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) external;\r\n    function burn(uint amount) external returns(bool success);\r\n}\r\n\r\ncontract InterbetCoinCrowdsale {\r\n\r\n    /* Global constants */\r\n    uint constant ibcTokenDecimals = 18; // Decimal places of IBC\r\n\r\n    token public tokenReward = token(0xCBbb6861423440170680b538d136FfE17A4b661a); // IBC token contract\r\n    address public beneficiary = 0x560b989db52368696bDC1db587eA52787Fdc3406; // Interbet team\r\n    address public admin = 0x8dd4866a5BaB83e1e2433e6e74B8385D12b838A3; // Crowdsale admin\r\n\r\n    /* Events */\r\n    event FundTransfer(SaleStage indexed saleStage, address indexed contributor, uint amount, bool isContribution);\r\n    event CrowdsaleClosed(address recipient, uint totalAmountRaised);\r\n    event TokenClaimed(address indexed contributor, uint tokenAmount);\r\n\r\n    /* Crowdsale Core */\r\n    enum SaleStage {\r\n        NotStarted,\r\n        Presale,\r\n        Break,\r\n        ICO,\r\n        Closed\r\n    }\r\n\r\n    SaleStage public currentSaleStage;\r\n\r\n    uint public minFundInEther = 10 * 1 finney; // Minimum contribution for Presale and ICO\r\n\r\n    uint public presalePrice = 10000; // Base price of Presale: 10,000 IBC = 1 ETH\r\n    uint public presaleFundingTargetInEther = 3000 * 1 ether; // 3,000 ETH target of Presale\r\n\r\n    uint public breakDurationBetweenPresaleAndICO = 1 weeks; // A short break for preparing ICO\r\n    uint public icoPhaseTimeInterval = 1 weeks; // Interval of ICO phases\r\n\r\n    uint public icoStart; // ICO starts one week after Presale ended\r\n    uint public icoTimeBonusPhase1End; // ICO's phase 1 end\r\n    uint public icoTimeBonusPhase2End; // ICO's phase 2 end\r\n    uint public icoEnd; // ICO's phase 3 end\r\n    uint public icoPrice = 5000; // Base price of ICO: 5,000 IBC = 1 ETH\r\n    uint public totalFundingGoalInIBC = 630000000 * (10 ** ibcTokenDecimals); // Funding goal is 630 Mil IBC: 30 Mil (Presale) + 600 Mil (ICO)\r\n    uint public fundingRatePredictionBonusPoolInIBC = 70000000 * (10 ** ibcTokenDecimals); // Funding rate prediction bonus pool of minimum 70 Mil IBC\r\n\r\n    uint public icoReferralBonusInPercentage = 5; // 5% bonus for both referrer and contributor\r\n    uint public icoPhase1TimeBonusInPercentage = 20; // 20% bonus for ICO's phase 1\r\n    uint public icoPhase2TimeBonusInPercentage = 10; // 10% bonus for ICO's phase 2\r\n    uint public icoPhase3TimeBonusInPercentage = 0; // No bonus for ICO's phase 3\r\n    uint public icoFundingRatePredictionBonusInPercentage = 25; // 25% bonus for predicting the correct final funding rate\r\n\r\n    uint public fundingRatePredictionBonusClaimWindow = 4 weeks; // After this window, the remaining pool of prediction bonus tokens will be destroyed\r\n\r\n    uint public etherRaised = 0; // All ether contributed\r\n    uint public ibcFunded = 0; // Counting only the tokens distributed before ICO ended, without counting funding rate prediction bonus\r\n    uint public ibcDistributed = 0; // Total tokens distributed\r\n    uint public contributionCount = 0; // Number of contributions\r\n\r\n    mapping(address => uint256) public balanceOf; // Ether contributed\r\n    mapping(address => uint256) public ibcVaultBalanceOf; // IBC hold in vault\r\n    mapping(address => uint256) public baseRewardTokenBalanceOf; // IBC base reward without counting any bonus\r\n\r\n    mapping(address => uint256) public fundingRatePredictionOf; // The funding rate prediction\r\n    mapping(address => bool) public fundingRatePredictionBingoOf; // Bingo or not\r\n\r\n    constructor() public {\r\n        currentSaleStage = SaleStage.Presale;\r\n    }\r\n\r\n    /// Participate by sending ether\r\n    function () external payable {\r\n        require(currentSaleStage == SaleStage.Presale || currentSaleStage == SaleStage.Break || currentSaleStage == SaleStage.ICO);\r\n\r\n        if (currentSaleStage == SaleStage.Presale) {\r\n            participatePresaleNow();\r\n        } else if (currentSaleStage == SaleStage.Break || currentSaleStage == SaleStage.ICO) {\r\n            participateICONow(address(0), 0);\r\n        }\r\n    }\r\n\r\n    /// Participate Presale\r\n    function participatePresale() external payable {\r\n        participatePresaleNow();\r\n    }\r\n\r\n    function participatePresaleNow() private {\r\n        require(currentSaleStage == SaleStage.Presale);\r\n        require(etherRaised < presaleFundingTargetInEther);\r\n\r\n        require(msg.value >= minFundInEther);\r\n\r\n        uint amount = msg.value;\r\n\r\n        uint price = presalePrice;\r\n\r\n        uint tokenAmount = mul(amount, price);\r\n        require(add(ibcFunded, tokenAmount) <= totalFundingGoalInIBC);\r\n\r\n        if (add(etherRaised, amount) >= presaleFundingTargetInEther) {\r\n            updateSaleStage(SaleStage.Break);\r\n        }\r\n\r\n        balanceOf[msg.sender] = add(balanceOf[msg.sender], amount);\r\n\r\n        etherRaised = add(etherRaised, amount);\r\n\r\n        contributionCount++;\r\n\r\n        ibcFunded = add(ibcFunded, tokenAmount);\r\n\r\n        ibcVaultBalanceOf[msg.sender] = add(ibcVaultBalanceOf[msg.sender], tokenAmount);\r\n\r\n        emit FundTransfer(SaleStage.Presale, msg.sender, amount, true);\r\n    }    \r\n\r\n    /// Participate ICO\r\n    function participateICO(address referrer, uint fundingRatePrediction) external payable {\r\n        participateICONow(referrer, fundingRatePrediction);\r\n    }\r\n\r\n    function participateICONow(address referrer, uint fundingRatePrediction) private {\r\n        require(currentSaleStage == SaleStage.Break || currentSaleStage == SaleStage.ICO);\r\n        if (currentSaleStage == SaleStage.Break) {\r\n            if (now >= icoStart && now < icoEnd) {\r\n                updateSaleStage(SaleStage.ICO);\r\n            } else {\r\n                revert();\r\n            }\r\n        } else if (currentSaleStage == SaleStage.ICO) {\r\n            require(now >= icoStart && now < icoEnd);\r\n        }\r\n\r\n        require(referrer != msg.sender);\r\n        require(fundingRatePrediction >= 1 && fundingRatePrediction <= 100);\r\n\r\n        uint amount = msg.value;\r\n\r\n        uint price = icoPrice;\r\n\r\n        uint baseRewardTokenAmount = mul(amount, price);\r\n        uint tokenAmount = add(baseRewardTokenAmount, calculateInstantBonusAmount(baseRewardTokenAmount, referrer));\r\n        \r\n        uint referrerReferralBonus = 0;\r\n        if (referrer != address(0)) {\r\n            referrerReferralBonus = mul(baseRewardTokenAmount, icoReferralBonusInPercentage) / 100;\r\n        }\r\n\r\n        if (add(add(ibcFunded, tokenAmount), referrerReferralBonus) < totalFundingGoalInIBC) {\r\n            require(msg.value >= minFundInEther);\r\n        } else {\r\n            require(add(add(ibcFunded, tokenAmount), referrerReferralBonus) == totalFundingGoalInIBC);\r\n        }\r\n\r\n        if (add(add(ibcFunded, tokenAmount), referrerReferralBonus) == totalFundingGoalInIBC) {\r\n            updateSaleStage(SaleStage.Closed);\r\n        }\r\n\r\n        balanceOf[msg.sender] = add(balanceOf[msg.sender], amount);\r\n\r\n        baseRewardTokenBalanceOf[msg.sender] = add(baseRewardTokenBalanceOf[msg.sender], baseRewardTokenAmount);\r\n        fundingRatePredictionOf[msg.sender] = fundingRatePrediction;\r\n\r\n        etherRaised = add(etherRaised, amount);\r\n\r\n        contributionCount++;\r\n\r\n        ibcFunded = add(ibcFunded, tokenAmount);\r\n\r\n        ibcVaultBalanceOf[msg.sender] = add(ibcVaultBalanceOf[msg.sender], tokenAmount);\r\n\r\n        if (referrerReferralBonus != 0) {\r\n            ibcFunded = add(ibcFunded, referrerReferralBonus);\r\n            ibcVaultBalanceOf[referrer] = add(ibcVaultBalanceOf[referrer], referrerReferralBonus);\r\n        }\r\n\r\n        emit FundTransfer(SaleStage.ICO, msg.sender, amount, true);\r\n    }\r\n\r\n    /// Calculate time and referral bonus with base tokens\r\n    function calculateInstantBonusAmount(uint baseRewardTokenAmount, address referrer) internal view returns(uint) {\r\n        uint timeBonus = 0;\r\n        uint timeBonusInPercentage = checkTimeBonusPercentage();\r\n        if (timeBonusInPercentage != 0) {\r\n            timeBonus = mul(baseRewardTokenAmount, timeBonusInPercentage) / 100;\r\n        }\r\n\r\n        uint referralBonus = 0;\r\n        if (referrer != address(0)) {\r\n            referralBonus = mul(baseRewardTokenAmount, icoReferralBonusInPercentage) / 100;\r\n        }\r\n\r\n        uint instantBonus = add(timeBonus, referralBonus);\r\n\r\n        return instantBonus;\r\n    }\r\n\r\n    /// Get time bonus percentage\r\n    function checkTimeBonusPercentage() internal view returns(uint) {\r\n        uint timeBonusInPercentage = 0;\r\n\r\n        if (now < icoTimeBonusPhase1End) {\r\n            timeBonusInPercentage = icoPhase1TimeBonusInPercentage;\r\n        } else if (now < icoTimeBonusPhase2End) {\r\n            timeBonusInPercentage = icoPhase2TimeBonusInPercentage;\r\n        }\r\n\r\n        return timeBonusInPercentage;\r\n    }\r\n\r\n    /// Claim IBC\r\n    function claimToken() external {\r\n        require(currentSaleStage == SaleStage.ICO || currentSaleStage == SaleStage.Closed);\r\n        if (currentSaleStage == SaleStage.ICO) {\r\n            if (ibcFunded == totalFundingGoalInIBC || now >= icoEnd) {\r\n                updateSaleStage(SaleStage.Closed);\r\n            } else {\r\n                revert();\r\n            }\r\n        }\r\n\r\n        require(ibcVaultBalanceOf[msg.sender] > 0);\r\n\r\n        uint tokenAmount = ibcVaultBalanceOf[msg.sender];\r\n\r\n        if (now < icoEnd + fundingRatePredictionBonusClaimWindow) {\r\n            if (fundingRatePredictionBonusPoolInIBC > 0) {\r\n                uint finalFundingRate = mul(ibcFunded, 100) / totalFundingGoalInIBC;\r\n                if (finalFundingRate > 100) {\r\n                    finalFundingRate = 100;\r\n                }\r\n\r\n                if (fundingRatePredictionOf[msg.sender] == finalFundingRate) {\r\n                    if (!fundingRatePredictionBingoOf[msg.sender]) {\r\n                        fundingRatePredictionBingoOf[msg.sender] = true;\r\n\r\n                        uint fundingRatePredictionBingoBonus = mul(baseRewardTokenBalanceOf[msg.sender], icoFundingRatePredictionBonusInPercentage) / 100;\r\n\r\n                        if (fundingRatePredictionBingoBonus > fundingRatePredictionBonusPoolInIBC) {\r\n                            fundingRatePredictionBingoBonus = fundingRatePredictionBonusPoolInIBC;\r\n                        }\r\n\r\n                        fundingRatePredictionBonusPoolInIBC = sub(fundingRatePredictionBonusPoolInIBC, fundingRatePredictionBingoBonus);\r\n\r\n                        tokenAmount = add(tokenAmount, fundingRatePredictionBingoBonus);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ibcVaultBalanceOf[msg.sender] = 0;\r\n\r\n        ibcDistributed = add(ibcDistributed, tokenAmount);\r\n\r\n        tokenReward.transfer(msg.sender, tokenAmount);\r\n\r\n        emit TokenClaimed(msg.sender, tokenAmount);\r\n    }    \r\n\r\n    function updateSaleStage(SaleStage saleStage) private {\r\n        currentSaleStage = saleStage;\r\n\r\n        if (saleStage == SaleStage.Break) {\r\n            icoStart = now + breakDurationBetweenPresaleAndICO;\r\n            icoTimeBonusPhase1End = icoStart + icoPhaseTimeInterval;\r\n            icoTimeBonusPhase2End = icoTimeBonusPhase1End + icoPhaseTimeInterval;\r\n            icoEnd = icoTimeBonusPhase2End + icoPhaseTimeInterval;\r\n        } else if (saleStage == SaleStage.Closed) {\r\n            if (now < icoEnd) {\r\n                icoEnd = now;\r\n            }\r\n\r\n            if (ibcFunded < totalFundingGoalInIBC) {\r\n                fundingRatePredictionBonusPoolInIBC = add(fundingRatePredictionBonusPoolInIBC, sub(totalFundingGoalInIBC, ibcFunded));\r\n            }\r\n\r\n            emit CrowdsaleClosed(beneficiary, etherRaised);\r\n        }\r\n    }\r\n\r\n    /// Update sale stage manually\r\n    function updateSaleStageManually(uint saleStage) external {\r\n        require(msg.sender == admin);\r\n\r\n        require(saleStage >= 1 && saleStage <= 4);\r\n\r\n        require(saleStage > uint(currentSaleStage));\r\n\r\n        updateSaleStage(SaleStage(saleStage));\r\n    }\r\n\r\n    /// Withdraw Ether\r\n    function withdrawEther(uint amount) external {\r\n        require(msg.sender == beneficiary);\r\n\r\n        if (beneficiary.send(amount)) {\r\n           emit FundTransfer(SaleStage.Closed, beneficiary, amount, false);\r\n        }\r\n    }\r\n\r\n    /// Burn the remaining pool of prediction bonus tokens\r\n    function burnAllRemainingIBC() external {\r\n        require(currentSaleStage == SaleStage.Closed);\r\n\r\n        require(now >= icoEnd + fundingRatePredictionBonusClaimWindow);\r\n\r\n        require(msg.sender == admin);\r\n\r\n        require(fundingRatePredictionBonusPoolInIBC > 0);\r\n\r\n        uint currentFundingRatePredictionBonusPoolInIBC = fundingRatePredictionBonusPoolInIBC;\r\n        fundingRatePredictionBonusPoolInIBC = 0;\r\n\r\n        if (!tokenReward.burn(currentFundingRatePredictionBonusPoolInIBC)) {\r\n            fundingRatePredictionBonusPoolInIBC = currentFundingRatePredictionBonusPoolInIBC;\r\n        }\r\n    }\r\n\r\n    /* Math utilities */\r\n    function mul(uint256 _a, uint256 _b) private pure returns(uint256 c) {\r\n        if (_a == 0) {\r\n          return 0;\r\n        }\r\n\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) private pure returns(uint256) {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    function add(uint256 _a, uint256 _b) private pure returns(uint256 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"presalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFundingGoalInIBC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoFundingRatePredictionBonusInPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"breakDurationBetweenPresaleAndICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundingRatePredictionBingoOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ibcDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundingRatePredictionOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ibcVaultBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleFundingTargetInEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhase1TimeBonusInPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoReferralBonusInPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhase3TimeBonusInPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ibcFunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingRatePredictionBonusClaimWindow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTimeBonusPhase1End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSaleStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"participatePresale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minFundInEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhaseTimeInterval\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"fundingRatePrediction\",\"type\":\"uint256\"}],\"name\":\"participateICO\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingRatePredictionBonusPoolInIBC\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTimeBonusPhase2End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnAllRemainingIBC\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoPhase2TimeBonusInPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"saleStage\",\"type\":\"uint256\"}],\"name\":\"updateSaleStageManually\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"baseRewardTokenBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"saleStage\",\"type\":\"uint8\"},{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmountRaised\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"}]","ContractName":"InterbetCoinCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://01229e3a487d6d77541ed308072148f7ff351e8de1f14268ae6cb8448f901693"}]}