{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/library/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y)\r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n    /**\r\n     * @dev x to the power of y\r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else\r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i = 1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Lottery.sol\r\n\r\ncontract Lottery {\r\n    using SafeMath for *;\r\n\r\n    address public owner_;\r\n\r\n    uint256 public investmentBalance_;\r\n    uint256 public developerBalance_;\r\n    uint256 public topBonus500Balance_;\r\n\r\n    uint256 public jackpotSplit = 50;                // % of buy in thats add to jackpot this round\r\n    uint256 public nextJackpotSplit = 15;            // % of buy in thats add to jackpot next round\r\n    uint256 public bonus500Split = 5;               // % of buy in thats paid to first 500 players\r\n    uint256 public investorDividendSplit = 10;       // % of buy in thats paid to investors\r\n    uint256 public developerDividendSplit = 10;      // % of buy in thats paid to developers\r\n    uint256 public referrerDividendSplit = 10;       // % of buy in thats paid to referrer\r\n    uint256[6] public jpSplit_ = [0, 50, 25, 12, 8, 5]; // % of jackpot in thats paid to each class prize\r\n\r\n    uint256 public rID_;\r\n\r\n    uint256 public jackpotBalance_;\r\n    uint256 public jackpotNextBalance_;\r\n    uint256 public jackpotLeftBalance_;\r\n\r\n    uint256 public kID_;\r\n    struct Key {\r\n        uint key;\r\n        uint tID;    // team id\r\n        uint pID;    // player id\r\n    }\r\n\r\n    mapping(uint256 => Key) public keys_;   // (kID_ => data) key data\r\n\r\n    uint256[500] public topPlayers_;    // first 500 players each round\r\n    uint256 public tpID_;\r\n\r\n    struct WonNum {\r\n        uint256 blockNum;\r\n        uint256 last6Num;\r\n    }\r\n    mapping(uint256 => WonNum) wonNums_;    // (rID_ => wonNum)\r\n\r\n    bool public roundEnded_;\r\n\r\n    uint256 public pID_;\r\n    mapping (address => uint256) public pIDxAddr_;      // (addr => pID) returns player id by address\r\n    mapping (uint256 => Player ) public plyr_;          // (pID => data) player data\r\n\r\n    struct Player {\r\n        address addr;\r\n        uint256 referrerID;\r\n        uint256 playedNum;\r\n        uint256 referralsNum;\r\n        uint256 teamBonus;\r\n        uint256 referralsBonus;\r\n        uint256 winPrize;\r\n        uint256 accountBalance;\r\n    }\r\n\r\n    mapping (uint256 => mapping(uint256 => uint256[])) public histories_;      // (pID => rID => keys)\r\n\r\n    uint[4] public teamNums_;\r\n\r\n    uint public keyPrice_ = 10000000000000000;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event BuyAKey(address indexed from, uint key, uint teamID);\r\n    event WithdrawBalance(address indexed to, uint amount);\r\n    event AddReferrerBalance(address indexed to, uint amount);\r\n    event AddTeamBonusBalance(address indexed to, uint amount);\r\n    event AddPrizeBalance(address indexed to, uint amount);\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        owner_ = msg.sender;\r\n\r\n        rID_ = 0;\r\n\r\n        investmentBalance_ = 0;\r\n\r\n        developerBalance_ = 0;\r\n\r\n        pID_ = 1;\r\n        teamNums_ = [0, 0, 0, 0];\r\n    }\r\n\r\n    modifier onlyOwner\r\n    {\r\n        require(msg.sender == owner_, \"msg sender is not contract owner\");\r\n        _;\r\n    }\r\n\r\n    /* administrative functions */\r\n\r\n    function roundStart ()\r\n        public\r\n        onlyOwner()\r\n    {\r\n        tpID_ = 0;\r\n\r\n        kID_ = 1;\r\n\r\n        rID_++;\r\n\r\n        // init jackpot of new round\r\n        jackpotBalance_ = (jackpotNextBalance_).add(jackpotLeftBalance_);\r\n        jackpotNextBalance_ = 0;\r\n\r\n        if (jackpotBalance_ > 10000000000000000000000) {\r\n            jackpotBalance_ = (jackpotBalance_).sub(3000000000000000000000);\r\n            investmentBalance_ = (investmentBalance_).add(3000000000000000000000);\r\n        }\r\n\r\n        delete teamNums_;\r\n\r\n        // reset top 500 players\r\n        tpID_ = 0;\r\n\r\n        roundEnded_ = false;\r\n    }\r\n\r\n    function roundEnd ()\r\n        public\r\n        onlyOwner()\r\n    {\r\n        roundEnded_ = true;\r\n    }\r\n\r\n    function pay(address _to, uint _amount) private {\r\n        _to.transfer(_amount);\r\n        emit Transfer(owner_, _to, _amount);\r\n    }\r\n\r\n    function changeIncomesSplits (uint _jkpt, uint _nxtjkpt, uint bns500, uint invst, uint dev, uint ref)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        require(_jkpt > 0 && _nxtjkpt > 0 && bns500 > 0 && invst > 0 && dev > 0 && ref > 0, \"split must more than 0\");\r\n        require((_jkpt + _nxtjkpt + bns500 + invst + dev + ref) <= 100, \"sum splits must lte 100 \");\r\n\r\n        jackpotSplit = _jkpt;\r\n        nextJackpotSplit = _nxtjkpt;\r\n        bonus500Split = bns500;\r\n        investorDividendSplit = invst;\r\n        developerDividendSplit = dev;\r\n        referrerDividendSplit = ref;\r\n    }\r\n\r\n    function changePrizeSplits (uint c1, uint c2, uint c3, uint c4, uint c5)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        require(c1 > 0 && c2 > 0 && c3 > 0 && c4 > 0 && c5 > 0, \"split must more than 0\");\r\n        require((c1 + c2 + c3 + c4 + c5) <= 100, \"sum splits must lte 100 \");\r\n        jpSplit_ = [c1, c2, c3, c4, c5];\r\n    }\r\n\r\n    function createPlayer(address _addr, address _referrer)\r\n        private\r\n        returns (uint)\r\n    {\r\n        plyr_[pID_].addr = _addr;\r\n        plyr_[pID_].playedNum = 0;\r\n        plyr_[pID_].referralsNum = 0;\r\n        plyr_[pID_].winPrize = 0;\r\n        pIDxAddr_[_addr] = pID_;\r\n\r\n        uint256 referrerID = getPlayerID(_referrer);\r\n        if (referrerID != 0) {\r\n            if (getPlayerPlayedTimes(referrerID) > 0) {\r\n                plyr_[pID_].referrerID = referrerID;\r\n                plyr_[referrerID].referralsNum ++;\r\n            }\r\n        }\r\n        uint pID = pID_;\r\n        pID_ ++;\r\n        return pID;\r\n    }\r\n\r\n    function updatePlayedNum(address _addr, address _referrer, uint256 _key)\r\n        private\r\n        returns (uint)\r\n    {\r\n        uint plyrID = getPlayerID(_addr);\r\n        if (plyrID == 0) {\r\n            plyrID = createPlayer(_addr, _referrer);\r\n        }\r\n\r\n        plyr_[plyrID].playedNum += 1;\r\n        histories_[plyrID][rID_].push(_key);\r\n        return (plyrID);\r\n    }\r\n\r\n    function addRefBalance(address _addr, uint256 _val)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        uint plyrID = getPlayerID(_addr);\r\n\r\n        require(plyrID > 0, \"Player should have played before\");\r\n\r\n        plyr_[plyrID].referralsBonus = (plyr_[plyrID].referralsBonus).add(_val);\r\n        plyr_[plyrID].accountBalance = (plyr_[plyrID].accountBalance).add(_val);\r\n        emit AddReferrerBalance(plyr_[plyrID].addr, _val);\r\n\r\n        return (plyr_[plyrID].accountBalance);\r\n    }\r\n\r\n    function addBalance(uint _pID, uint256 _prizeVal, uint256 _teamVal)\r\n        public\r\n        onlyOwner()\r\n        returns(uint256)\r\n    {\r\n\r\n        require(_pID > 0, \"Player should have played before\");\r\n\r\n        uint256 refPlayedNum = getPlayerPlayedTimes(plyr_[_pID].referrerID);\r\n\r\n        if (refPlayedNum > 0) {\r\n            plyr_[plyr_[_pID].referrerID].referralsBonus = (plyr_[plyr_[_pID].referrerID].referralsBonus).add(_prizeVal / 10);\r\n            plyr_[plyr_[_pID].referrerID].accountBalance = (plyr_[plyr_[_pID].referrerID].accountBalance).add(_prizeVal / 10);\r\n\r\n            plyr_[_pID].winPrize = (plyr_[_pID].winPrize).add((_prizeVal).mul(9) / 10);\r\n            plyr_[_pID].accountBalance = (plyr_[_pID].accountBalance).add((_prizeVal).mul(9) / 10);\r\n        } else {\r\n            plyr_[_pID].winPrize = (plyr_[_pID].winPrize).add(_prizeVal);\r\n            plyr_[_pID].accountBalance = (plyr_[_pID].accountBalance).add(_prizeVal);\r\n        }\r\n        emit AddPrizeBalance(plyr_[_pID].addr, _prizeVal);\r\n\r\n        plyr_[_pID].teamBonus = (plyr_[_pID].teamBonus).add(_teamVal);\r\n        plyr_[_pID].accountBalance = (plyr_[_pID].accountBalance).add(_teamVal);\r\n        emit AddTeamBonusBalance(plyr_[_pID].addr, _teamVal);\r\n\r\n        return (plyr_[_pID].accountBalance);\r\n    }\r\n\r\n    function subAccountBalance(address _addr, uint256 _val)\r\n        private\r\n        returns(uint256)\r\n    {\r\n        uint plyrID = getPlayerID(_addr);\r\n        require(plyr_[plyrID].accountBalance >= _val, \"Account should have enough value\");\r\n\r\n        plyr_[plyrID].accountBalance = (plyr_[plyrID].accountBalance).sub(_val);\r\n        return (plyr_[plyrID].accountBalance);\r\n    }\r\n\r\n    function withdrawBalance()\r\n        public\r\n        returns(uint256)\r\n    {\r\n        uint plyrID = getPlayerID(msg.sender);\r\n        require(plyr_[plyrID].accountBalance >= 10000000000000000, \"Account should have more than 0.01 eth\");\r\n\r\n        uint256 transferAmount = plyr_[plyrID].accountBalance;\r\n        pay(msg.sender, transferAmount);\r\n        plyr_[plyrID].accountBalance = 0;\r\n        emit WithdrawBalance(msg.sender, transferAmount);\r\n        return (plyr_[plyrID].accountBalance);\r\n    }\r\n\r\n\r\n    function changeOwner (address _to)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        owner_ = _to;\r\n    }\r\n\r\n    function gameDestroy()\r\n        public\r\n        onlyOwner()\r\n    {\r\n        uint prize = jackpotBalance_ / pID_;\r\n        for (uint i = 0; i < pID_; i ++) {\r\n            pay(plyr_[i].addr, prize);\r\n        }\r\n    }\r\n\r\n    function updateWonNums (uint256 _blockNum, uint256 _last6Num)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        wonNums_[rID_].blockNum = _blockNum;\r\n        wonNums_[rID_].last6Num = _last6Num;\r\n    }\r\n\r\n    function updateJackpotLeft (uint256 _jackpotLeft)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        jackpotLeftBalance_ = _jackpotLeft;\r\n    }\r\n\r\n    function transferDividendBalance (address _to, uint _val)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        require((_val >= 10000000000000000) && (investmentBalance_ >= _val), \"Value must more than 0.01 eth\");\r\n        pay(_to, _val);\r\n        investmentBalance_ = (investmentBalance_).sub(_val);\r\n    }\r\n\r\n    function transferDevBalance (address _to, uint _val)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        require((_val >= 10000000000000000) && (developerBalance_ >= _val), \"Value must more than 0.01 eth\");\r\n        pay(_to, _val);\r\n        developerBalance_ = (developerBalance_).sub(_val);\r\n    }\r\n\r\n    function updateKeyPrice (uint _val)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        require(_val > 0, \"Value must more than 0 eth\");\r\n        keyPrice_ = _val;\r\n    }\r\n\r\n    /* public functions */\r\n\r\n    function buyAKeyWithDeposit(uint256 _key, address _referrer, uint256 _teamID)\r\n        external\r\n        payable\r\n        returns (bool)\r\n    {\r\n        require(msg.value >= keyPrice_, \"Value must more than 0.01 eth\");\r\n\r\n        if (roundEnded_) {\r\n            pay(msg.sender, msg.value);\r\n            return(false);\r\n        }\r\n\r\n        jackpotBalance_ = (jackpotBalance_).add((msg.value).mul(jackpotSplit) / 100);\r\n        jackpotNextBalance_ = (jackpotNextBalance_).add((msg.value).mul(nextJackpotSplit) / 100);\r\n        investmentBalance_ = (investmentBalance_).add((msg.value).mul(investorDividendSplit) / 100);\r\n        developerBalance_ = (developerBalance_).add((msg.value).mul(developerDividendSplit) / 100);\r\n        topBonus500Balance_ = (topBonus500Balance_).add((msg.value).mul(bonus500Split) / 100);\r\n\r\n        if (determinReferrer(_referrer)) {\r\n            addRefBalance(_referrer, (msg.value).mul(referrerDividendSplit) / 100);\r\n        } else {\r\n            developerBalance_ = (developerBalance_).add((msg.value).mul(referrerDividendSplit) / 100);\r\n        }\r\n\r\n        uint pID = updatePlayedNum(msg.sender, _referrer, _key);\r\n\r\n        keys_[kID_].key = _key;\r\n        keys_[kID_].tID = _teamID;\r\n        keys_[kID_].pID = pID;\r\n\r\n        teamNums_[_teamID] ++;\r\n        kID_ ++;\r\n\r\n        if (tpID_ < 500) {\r\n            topPlayers_[tpID_] = pID;\r\n            tpID_ ++;\r\n        }\r\n        emit BuyAKey(msg.sender, _key, _teamID);\r\n        return (true);\r\n    }\r\n\r\n    function buyAKeyWithAmount(uint256 _key, address _referrer, uint256 _teamID)\r\n        external\r\n        payable\r\n        returns (bool)\r\n    {\r\n        uint accBalance = getPlayerAccountBalance(msg.sender);\r\n        if (roundEnded_) {\r\n            return(false);\r\n        }\r\n\r\n        require(accBalance >= keyPrice_, \"Account left balance should more than 0.01 eth\");\r\n\r\n        subAccountBalance(msg.sender, keyPrice_);\r\n\r\n        jackpotBalance_ = (jackpotBalance_).add((keyPrice_).mul(jackpotSplit) / 100);\r\n        jackpotNextBalance_ = (jackpotNextBalance_).add((keyPrice_).mul(nextJackpotSplit) / 100);\r\n        investmentBalance_ = (investmentBalance_).add((keyPrice_).mul(investorDividendSplit) / 100);\r\n        developerBalance_ = (developerBalance_).add((keyPrice_).mul(developerDividendSplit) / 100);\r\n        topBonus500Balance_ = (topBonus500Balance_).add((keyPrice_).mul(bonus500Split) / 100);\r\n\r\n        if (determinReferrer(_referrer)) {\r\n            addRefBalance(_referrer, (keyPrice_).mul(referrerDividendSplit) / 100);\r\n        } else {\r\n            developerBalance_ = (developerBalance_).add((keyPrice_).mul(referrerDividendSplit) / 100);\r\n        }\r\n\r\n        uint pID = updatePlayedNum(msg.sender, _referrer, _key);\r\n\r\n        keys_[kID_].key = _key;\r\n        keys_[kID_].tID = _teamID;\r\n        keys_[kID_].pID = pID;\r\n\r\n        teamNums_[_teamID] ++;\r\n        kID_ ++;\r\n\r\n        if (tpID_ < 500) {\r\n            topPlayers_[tpID_] = pID;\r\n            tpID_ ++;\r\n        }\r\n        emit BuyAKey(msg.sender, _key, _teamID);\r\n        return (true);\r\n    }\r\n\r\n    function showRoundNum () public view returns(uint256) { return rID_;}\r\n    function showJackpotThisRd () public view returns(uint256) { return jackpotBalance_;}\r\n    function showJackpotNextRd () public view returns(uint256) { return jackpotNextBalance_;}\r\n    function showInvestBalance () public view returns(uint256) { return investmentBalance_;}\r\n    function showDevBalance () public view returns(uint256) { return developerBalance_;}\r\n    function showTopBonusBalance () public view returns(uint256) { return topBonus500Balance_;}\r\n    function showTopsPlayer () external view returns(uint256[500]) { return topPlayers_; }\r\n    function getTeamPlayersNum () public view returns (uint[4]) { return teamNums_; }\r\n    function getPlayerID(address _addr)  public  view returns(uint256) { return (pIDxAddr_[_addr]); }\r\n    function getPlayerPlayedTimes(uint256 _plyrID) public view returns (uint256) { return (plyr_[_plyrID].playedNum); }\r\n    function getPlayerReferrerID(uint256 _plyrID) public view returns (uint256) { return (plyr_[_plyrID].referrerID); }\r\n    function showKeys(uint _index) public view returns(uint256, uint256, uint256, uint256) {\r\n        return (kID_, keys_[_index].key, keys_[_index].pID, keys_[_index].tID);\r\n    }\r\n    function showRdWonNum (uint256 _rID) public view returns(uint256[2]) {\r\n        uint256[2] memory res;\r\n        res[0] = wonNums_[_rID].blockNum;\r\n        res[1] = wonNums_[_rID].last6Num;\r\n        return (res);\r\n    }\r\n    function determinReferrer(address _addr) public view returns (bool)\r\n    {\r\n        if (_addr == msg.sender) {\r\n            return false;\r\n        }\r\n        uint256 pID = getPlayerID(_addr);\r\n        uint256 playedNum = getPlayerPlayedTimes(pID);\r\n        return (playedNum > 0);\r\n    }\r\n    function getReferrerAddr (address _addr) public view returns (address)\r\n    {\r\n        uint pID = getPlayerID(_addr);\r\n        uint refID = plyr_[pID].referrerID;\r\n        if (determinReferrer(plyr_[refID].addr)) {\r\n            return plyr_[refID].addr;\r\n        } else {\r\n            return (0x0);\r\n        }\r\n    }\r\n    function getPlayerAccountBalance (address _addr)  public view returns (uint)\r\n    {\r\n        uint plyrID = getPlayerID(_addr);\r\n        return (plyr_[plyrID].accountBalance);\r\n    }\r\n    function getPlayerHistories (address _addr, uint256 _rID) public  view returns (uint256[])\r\n    {\r\n        uint plyrID = getPlayerID(_addr);\r\n\r\n        return (histories_[plyrID][_rID]);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"kID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"c1\",\"type\":\"uint256\"},{\"name\":\"c2\",\"type\":\"uint256\"},{\"name\":\"c3\",\"type\":\"uint256\"},{\"name\":\"c4\",\"type\":\"uint256\"},{\"name\":\"c5\",\"type\":\"uint256\"}],\"name\":\"changePrizeSplits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"updateKeyPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotNextBalance_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tpID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotLeftBalance_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"topPlayers_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showRoundNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerBalance_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"uint256\"},{\"name\":\"_referrer\",\"type\":\"address\"},{\"name\":\"_teamID\",\"type\":\"uint256\"}],\"name\":\"buyAKeyWithAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_key\",\"type\":\"uint256\"},{\"name\":\"_referrer\",\"type\":\"address\"},{\"name\":\"_teamID\",\"type\":\"uint256\"}],\"name\":\"buyAKeyWithDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"histories_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keyPrice_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"roundStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showJackpotThisRd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"showKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotBalance_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_plyrID\",\"type\":\"uint256\"}],\"name\":\"getPlayerReferrerID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotSplit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_plyrID\",\"type\":\"uint256\"}],\"name\":\"getPlayerPlayedTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"determinReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundEnded_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showDevBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_rID\",\"type\":\"uint256\"}],\"name\":\"getPlayerHistories\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_prizeVal\",\"type\":\"uint256\"},{\"name\":\"_teamVal\",\"type\":\"uint256\"}],\"name\":\"addBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrerDividendSplit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerDividendSplit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamNums_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus500Split\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jackpotLeft\",\"type\":\"uint256\"}],\"name\":\"updateJackpotLeft\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gameDestroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showTopBonusBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"transferDividendBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"transferDevBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"roundEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showInvestBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showJackpotNextRd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jpSplit_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rID\",\"type\":\"uint256\"}],\"name\":\"showRdWonNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"referrerID\",\"type\":\"uint256\"},{\"name\":\"playedNum\",\"type\":\"uint256\"},{\"name\":\"referralsNum\",\"type\":\"uint256\"},{\"name\":\"teamBonus\",\"type\":\"uint256\"},{\"name\":\"referralsBonus\",\"type\":\"uint256\"},{\"name\":\"winPrize\",\"type\":\"uint256\"},{\"name\":\"accountBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextJackpotSplit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockNum\",\"type\":\"uint256\"},{\"name\":\"_last6Num\",\"type\":\"uint256\"}],\"name\":\"updateWonNums\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showTopsPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[500]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investmentBalance_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getReferrerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerAccountBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"topBonus500Balance_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_jkpt\",\"type\":\"uint256\"},{\"name\":\"_nxtjkpt\",\"type\":\"uint256\"},{\"name\":\"bns500\",\"type\":\"uint256\"},{\"name\":\"invst\",\"type\":\"uint256\"},{\"name\":\"dev\",\"type\":\"uint256\"},{\"name\":\"ref\",\"type\":\"uint256\"}],\"name\":\"changeIncomesSplits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorDividendSplit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTeamPlayersNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keys_\",\"outputs\":[{\"name\":\"key\",\"type\":\"uint256\"},{\"name\":\"tID\",\"type\":\"uint256\"},{\"name\":\"pID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"teamID\",\"type\":\"uint256\"}],\"name\":\"BuyAKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddReferrerBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddTeamBonusBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddPrizeBalance\",\"type\":\"event\"}]","ContractName":"Lottery","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f496ff2f801962304f30ad0ee0628fca268c07e25ab41aa37ddd9325b78dd963"}]}