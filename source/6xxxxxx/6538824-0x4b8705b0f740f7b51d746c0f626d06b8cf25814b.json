{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n *  X2Profit contract\r\n *\r\n *  Improved, no bugs and backdoors! Your investments are safe!\r\n *\r\n *  LOW RISK! You can take your deposit back ANY TIME!\r\n *     - Send 0.00000112 ETH to contract address\r\n *\r\n *  NO DEPOSIT FEES! All the money go to contract!\r\n *\r\n *  HIGH RETURN! Get 0.27% - 0.4% per hour (6.5% - 9.6% per day)\r\n *\r\n *  Contract balance          daily percent\r\n *       < 1000                   ~6.5%\r\n *    1000 - 2500                 ~7.7%\r\n *    2500 - 5000                 ~9.1%\r\n *      >= 5000                   ~9.6%\r\n *\r\n *  LOW WITHDRAWAL FEES! Advertising 4%-10%, charity 1%\r\n *\r\n *  LONG LIFE! Maximum return is bounded by x2. Anyone has right to be rich!\r\n *\r\n *  HOLD LONG AND GET BONUS!\r\n *  1. If you hold long enough you can take more than x2 (one time only)\r\n *  2. The more you hold the less you pay for adv:\r\n *     < 1 day            10%\r\n *     1 - 3 days          9%\r\n *     3 - 7 days          8%\r\n *     1 - 2 weeks         7%\r\n *     2 - 3 weeks         6%\r\n *     3 - 4 weeks         5%\r\n *       > 4 weeks         4%\r\n *  Because large balance is good advertisement on itself!\r\n *\r\n *  INSTRUCTIONS:\r\n *\r\n *  TO INVEST: send ETH to contract address\r\n *  TO WITHDRAW INTEREST: send 0 ETH to contract address\r\n *  TO REINVEST AND WITHDRAW INTEREST: send ETH to contract address\r\n *  TO GET BACK YOUR DEPOSIT: send 0.00000112 ETH to contract address\r\n *\r\n */\r\ncontract X2Profit {\r\n    //use library for safe math operations\r\n    using SafeMath for uint;\r\n\r\n    // array containing information about beneficiaries\r\n    mapping(address => uint) public userDeposit;\r\n    //array containing information about the time of payment\r\n    mapping(address => uint) public userTime;\r\n    //array containing information on interest paid\r\n    mapping(address => uint) public percentWithdrawn;\r\n    //array containing information on interest paid (without tax)\r\n    mapping(address => uint) public percentWithdrawnPure;\r\n\r\n    //fund fo transfer percent for advertising\r\n    address private constant ADDRESS_ADV_FUND = 0xE6AD1c76ec266348CB8E8aD2B1C95F372ad66c0e;\r\n    //wallet for a charitable foundation\r\n    address private constant ADDRESS_CHARITY_FUND = 0xC43Cf609440b53E25cdFfB4422EFdED78475C76B;\r\n    //time through which you can take dividends\r\n    uint private constant TIME_QUANT = 1 hours;\r\n\r\n    //percent for a charitable foundation\r\n    uint private constant PERCENT_CHARITY_FUND = 1000;\r\n    //start percent 0.27% per hour\r\n    uint private constant PERCENT_START = 270;\r\n    uint private constant PERCENT_LOW = 320;\r\n    uint private constant PERCENT_MIDDLE = 380;\r\n    uint private constant PERCENT_HIGH = 400;\r\n\r\n    //Adv tax for holders (10% for impatient, 4% for strong holders)\r\n    uint private constant PERCENT_ADV_VERY_HIGH = 10000;\r\n    uint private constant PERCENT_ADV_HIGH = 9000;\r\n    uint private constant PERCENT_ADV_ABOVE_MIDDLE = 8000;\r\n    uint private constant PERCENT_ADV_MIDDLE = 7000;\r\n    uint private constant PERCENT_ADV_BELOW_MIDDLE = 6000;\r\n    uint private constant PERCENT_ADV_LOW = 5000;\r\n    uint private constant PERCENT_ADV_LOWEST = 4000;\r\n\r\n    //All percent should be divided by this\r\n    uint private constant PERCENT_DIVIDER = 100000;\r\n\r\n    //interest rate increase steps\r\n    uint private constant STEP_LOW = 1000 ether;\r\n    uint private constant STEP_MIDDLE = 2500 ether;\r\n    uint private constant STEP_HIGH = 5000 ether;\r\n    \r\n    uint public countOfInvestors = 0;\r\n    uint public countOfCharity = 0;\r\n\r\n    modifier isIssetUser() {\r\n        require(userDeposit[msg.sender] > 0, \"Deposit not found\");\r\n        _;\r\n    }\r\n\r\n    modifier timePayment() {\r\n        require(now >= userTime[msg.sender].add(TIME_QUANT), \"Too fast payout request\");\r\n        _;\r\n    }\r\n\r\n    //return of interest on the deposit\r\n    function collectPercent() isIssetUser timePayment internal {\r\n\r\n        //if the user received 200% or more of his contribution, delete the user\r\n        if ((userDeposit[msg.sender].mul(2)) <= percentWithdrawnPure[msg.sender]) {\r\n            _delete(msg.sender); //User has withdrawn more than x2\r\n        } else {\r\n            uint payout = payoutAmount(msg.sender);\r\n            _payout(msg.sender, payout);\r\n        }\r\n    }\r\n\r\n    //calculation of the current interest rate on the deposit\r\n    function percentRate() public view returns(uint) {\r\n        //get contract balance\r\n        uint balance = address(this).balance;\r\n\r\n        //calculate percent rate\r\n        if (balance < STEP_LOW) {\r\n            return (PERCENT_START);\r\n        }\r\n        if (balance < STEP_MIDDLE) {\r\n            return (PERCENT_LOW);\r\n        }\r\n        if (balance < STEP_HIGH) {\r\n            return (PERCENT_MIDDLE);\r\n        }\r\n\r\n        return (PERCENT_HIGH);\r\n    }\r\n\r\n    //calculate the amount available for withdrawal on deposit\r\n    function payoutAmount(address addr) public view returns(uint) {\r\n        uint percent = percentRate();\r\n        uint rate = userDeposit[addr].mul(percent).div(PERCENT_DIVIDER);\r\n        uint interestRate = now.sub(userTime[addr]).div(TIME_QUANT);\r\n        uint withdrawalAmount = rate.mul(interestRate);\r\n        return (withdrawalAmount);\r\n    }\r\n\r\n    function holderAdvPercent(address addr) public view returns(uint) {\r\n        uint timeHeld = (now - userTime[addr]);\r\n        if(timeHeld < 1 days)\r\n            return PERCENT_ADV_VERY_HIGH;\r\n        if(timeHeld < 3 days)\r\n            return PERCENT_ADV_HIGH;\r\n        if(timeHeld < 1 weeks)\r\n            return PERCENT_ADV_ABOVE_MIDDLE;\r\n        if(timeHeld < 2 weeks)\r\n            return PERCENT_ADV_MIDDLE;\r\n        if(timeHeld < 3 weeks)\r\n            return PERCENT_ADV_BELOW_MIDDLE;\r\n        if(timeHeld < 4 weeks)\r\n            return PERCENT_ADV_LOW;\r\n        return PERCENT_ADV_LOWEST;\r\n    }\r\n\r\n    //make a deposit\r\n    function makeDeposit() private {\r\n        if (msg.value > 0) {\r\n            if (userDeposit[msg.sender] == 0) {\r\n                countOfInvestors += 1;\r\n            }\r\n            if (userDeposit[msg.sender] > 0 && now >= userTime[msg.sender].add(TIME_QUANT)) {\r\n                collectPercent();\r\n            }\r\n            userDeposit[msg.sender] += msg.value;\r\n            userTime[msg.sender] = now;\r\n        } else {\r\n            collectPercent();\r\n        }\r\n    }\r\n\r\n    //return of deposit balance\r\n    function returnDeposit() isIssetUser private {\r\n        //percentWithdrawn already include all taxes for charity and ads\r\n        //So we need pay taxes only for the rest of deposit\r\n        uint withdrawalAmount = userDeposit[msg.sender]\r\n            .sub(percentWithdrawn[msg.sender]);\r\n\r\n        //Pay the rest of deposit and take taxes\r\n        _payout(msg.sender, withdrawalAmount);\r\n\r\n        //delete user record\r\n        _delete(msg.sender);\r\n    }\r\n\r\n    function() external payable {\r\n        //refund of remaining funds when transferring to a contract 0.00000112 ether\r\n        if (msg.value == 0.00000112 ether) {\r\n            returnDeposit();\r\n        } else {\r\n            makeDeposit();\r\n        }\r\n    }\r\n\r\n    //Pays out, takes taxes according to holding time\r\n    function _payout(address addr, uint amount) private {\r\n        //Remember this payout\r\n        percentWithdrawn[addr] += amount;\r\n\r\n        //Get current holder adv percent\r\n        uint advPct = holderAdvPercent(addr);\r\n        //Calculate pure payout that user receives\r\n        uint interestPure = amount.mul(PERCENT_DIVIDER - PERCENT_CHARITY_FUND - advPct).div(PERCENT_DIVIDER);\r\n        percentWithdrawnPure[addr] += interestPure;\r\n        userTime[addr] = now;\r\n\r\n        //calculate money to charity\r\n        uint charityMoney = amount.mul(PERCENT_CHARITY_FUND).div(PERCENT_DIVIDER);\r\n        countOfCharity += charityMoney;\r\n\r\n        //calculate money for advertising\r\n        uint advTax = amount.sub(interestPure).sub(charityMoney);\r\n\r\n        //send money\r\n        ADDRESS_ADV_FUND.transfer(advTax);\r\n        ADDRESS_CHARITY_FUND.transfer(charityMoney);\r\n        addr.transfer(interestPure);\r\n    }\r\n\r\n    //Clears user from registry\r\n    function _delete(address addr) private {\r\n        userDeposit[addr] = 0;\r\n        userTime[addr] = 0;\r\n        percentWithdrawn[addr] = 0;\r\n        percentWithdrawnPure[addr] = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percentWithdrawnPure\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"holderAdvPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfCharity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percentWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"X2Profit","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1ce36b385d7711a6fcdc062693af134d6b170dc24e74e2889ec570269f66e7ff"}]}