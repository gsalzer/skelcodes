{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n\r\n    https://zethr.io https://zethr.io https://zethr.io https://zethr.io https://zethr.io\r\n\r\n\r\n                          ███████╗███████╗████████╗██╗  ██╗██████╗\r\n                          ╚══███╔╝██╔════╝╚══██╔══╝██║  ██║██╔══██╗\r\n                            ███╔╝ █████╗     ██║   ███████║██████╔╝\r\n                           ███╔╝  ██╔══╝     ██║   ██╔══██║██╔══██╗\r\n                          ███████╗███████╗   ██║   ██║  ██║██║  ██║\r\n                          ╚══════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝\r\n\r\n\r\n.------..------.     .------..------..------.     .------..------..------..------..------.\r\n|B.--. ||E.--. |.-.  |T.--. ||H.--. ||E.--. |.-.  |H.--. ||O.--. ||U.--. ||S.--. ||E.--. |\r\n| :(): || (\\/) (( )) | :/\\: || :/\\: || (\\/) (( )) | :/\\: || :/\\: || (\\/) || :/\\: || (\\/) |\r\n| ()() || :\\/: |'-.-.| (__) || (__) || :\\/: |'-.-.| (__) || :\\/: || :\\/: || :\\/: || :\\/: |\r\n| '--'B|| '--'E| (( )) '--'T|| '--'H|| '--'E| (( )) '--'H|| '--'O|| '--'U|| '--'S|| '--'E|\r\n`------'`------'  '-'`------'`------'`------'  '-'`------'`------'`------'`------'`------'\r\n\r\nAn interactive, variable-dividend rate contract with an ICO-capped price floor and collectibles.\r\n\r\nBankroll contract, containing tokens purchased from all dividend-card profit and ICO dividends.\r\nActs as token repository for games on the Zethr platform.\r\n\r\n\r\nCredits\r\n=======\r\n\r\nAnalysis:\r\n    blurr\r\n    Randall\r\n\r\nContract Developers:\r\n    Etherguy\r\n    klob\r\n    Norsefire\r\n\r\nFront-End Design:\r\n    cryptodude\r\n    oguzhanox\r\n    TropicalRogue\r\n\r\n**/\r\n\r\ncontract ZTHInterface {\r\n    function buyAndSetDivPercentage(address _referredBy, uint8 _divChoice, string providedUnhashedPass) public payable returns (uint);\r\n    function balanceOf(address who) public view returns (uint);\r\n    function transfer(address _to, uint _value)     public returns (bool);\r\n    function transferFrom(address _from, address _toAddress, uint _amountOfTokens) public returns (bool);\r\n    function exit() public;\r\n    function sell(uint amountOfTokens) public;\r\n    function withdraw(address _recipient) public;\r\n    function tokensToEthereum_(uint _tokens) public view returns(uint);\r\n}\r\n\r\ncontract ZethrTokenBankroll {\r\n    function zethrBuyIn() public;\r\n    function allocateTokens() public;\r\n    function addGame(address game, uint allocated) public;\r\n    function removeGame(address game) public;\r\n    function dumpFreeTokens(address toSendTo) public returns (uint);\r\n}\r\n\r\ncontract ERC223Receiving {\r\n    function tokenFallback(address _from, uint _amountOfTokens, bytes _data) public returns (bool);\r\n}\r\n\r\ncontract ZethrBankroll is ERC223Receiving {\r\n    using SafeMath for uint;\r\n\r\n    /*=================================\r\n    =              EVENTS            =\r\n    =================================*/\r\n\r\n    event Confirmation(address indexed sender, uint indexed transactionId);\r\n    event Revocation(address indexed sender, uint indexed transactionId);\r\n    event Submission(uint indexed transactionId);\r\n    event Execution(uint indexed transactionId);\r\n    event ExecutionFailure(uint indexed transactionId);\r\n    event Deposit(address indexed sender, uint value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event WhiteListAddition(address indexed contractAddress);\r\n    event WhiteListRemoval(address indexed contractAddress);\r\n    event RequirementChange(uint required);\r\n    event DevWithdraw(uint amountTotal, uint amountPerPerson);\r\n    event EtherLogged(uint amountReceived, address sender);\r\n    event BankrollInvest(uint amountReceived);\r\n    event DailyTokenAdmin(address gameContract);\r\n    event DailyTokensSent(address gameContract, uint tokens);\r\n    event DailyTokensReceived(address gameContract, uint tokens);\r\n\r\n    /*=================================\r\n    =        WITHDRAWAL CONSTANTS     =\r\n    =================================*/\r\n\r\n    uint constant public MAX_OWNER_COUNT = 10;\r\n    uint constant public MAX_WITHDRAW_PCT_DAILY = 15;\r\n    uint constant public MAX_WITHDRAW_PCT_TX = 5;\r\n    uint constant internal resetTimer = 1 days;\r\n\r\n    /*=================================\r\n    =          ZTH INTERFACE          =\r\n    =================================*/\r\n\r\n    address internal zethrAddress;\r\n    ZTHInterface public ZTHTKN;\r\n\r\n    /*=================================\r\n    =             VARIABLES           =\r\n    =================================*/\r\n\r\n    mapping (uint => Transaction) public transactions;\r\n    mapping (uint => mapping (address => bool)) public confirmations;\r\n    mapping (address => bool) public isOwner;\r\n    mapping (address => bool) public isAnAddedGame;\r\n    address internal divCardAddress;\r\n    address[] public owners;\r\n    address[] public games;\r\n    uint public required;\r\n    uint public transactionCount;\r\n    bool internal reEntered = false;\r\n\r\n    /*=================================\r\n    =         CUSTOM CONSTRUCTS       =\r\n    =================================*/\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n\r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n    }\r\n\r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n\r\n    modifier onlyWallet() {\r\n        if (msg.sender != address(this))\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier isOwnerOrWhitelistedGame() {\r\n        address caller = msg.sender;\r\n        if (!isOwner[caller] || isAnAddedGame[caller])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier isAnOwner() {\r\n        address caller = msg.sender;\r\n        if (!isOwner[caller])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        if (isOwner[owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier ownerExists(address owner) {\r\n        if (!isOwner[owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint transactionId) {\r\n        if (transactions[transactionId].destination == 0)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint transactionId, address owner) {\r\n        if (!confirmations[transactionId][owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint transactionId, address owner) {\r\n        if (confirmations[transactionId][owner])\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint transactionId) {\r\n        if (transactions[transactionId].executed)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        if (_address == 0)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint ownerCount, uint _required) {\r\n        if (   ownerCount > MAX_OWNER_COUNT\r\n            || _required > ownerCount\r\n            || _required == 0\r\n            || ownerCount == 0)\r\n            revert();\r\n        _;\r\n    }\r\n\r\n    /*=================================\r\n    =          LIST OF OWNERS         =\r\n    =================================*/\r\n\r\n    /*\r\n        This list is for reference/identification purposes only, and comprises the eight core Zethr developers.\r\n        For game contracts to be listed, they must be approved by a majority (i.e. currently five) of the owners.\r\n        Contracts can be delisted in an emergency by a single owner.\r\n\r\n        0x4F4eBF556CFDc21c3424F85ff6572C77c514Fcae // Norsefire\r\n        0x11e52c75998fe2E7928B191bfc5B25937Ca16741 // klob\r\n        0x20C945800de43394F70D789874a4daC9cFA57451 // Etherguy\r\n        0xef764BAC8a438E7E498c2E5fcCf0f174c3E3F8dB // blurr\r\n        0x8537aa2911b193e5B377938A723D805bb0865670 // oguzhanox\r\n        0x9D221b2100CbE5F05a0d2048E2556a6Df6f9a6C3 // Randall\r\n        0x71009e9E4e5e68e77ECc7ef2f2E95cbD98c6E696 // cryptodude\r\n        0xDa83156106c4dba7A26E9bF2Ca91E273350aa551 // TropicalRogue\r\n    */\r\n\r\n\r\n    /*=================================\r\n    =         PUBLIC FUNCTIONS        =\r\n    =================================*/\r\n\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    constructor (address[] _owners, uint _required)\r\n        public\r\n        validRequirement(_owners.length, _required)\r\n    {\r\n        // Add owners\r\n        for (uint i=0; i<_owners.length; i++) {\r\n            if (isOwner[_owners[i]] || _owners[i] == 0)\r\n                revert();\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n\r\n        // Set owners\r\n        owners = _owners;\r\n\r\n        // Set required\r\n        required = _required;\r\n    }\r\n\r\n    /** Testing only.\r\n    function exitAll()\r\n        public\r\n    {\r\n        uint tokenBalance = ZTHTKN.balanceOf(address(this));\r\n        ZTHTKN.sell(tokenBalance - 1e18);\r\n        ZTHTKN.sell(1e18);\r\n        ZTHTKN.withdraw(address(0x0));\r\n    }\r\n    **/\r\n\r\n    function addZethrAddresses(address _zethr, address _divcards)\r\n        public\r\n        isAnOwner\r\n    {\r\n        zethrAddress   = _zethr;\r\n        divCardAddress = _divcards;\r\n        ZTHTKN = ZTHInterface(zethrAddress);\r\n    }\r\n\r\n    /// @dev Fallback function allows Ether to be deposited.\r\n    function()\r\n        public\r\n        payable\r\n    {\r\n\r\n    }\r\n\r\n    uint NonICOBuyins;\r\n\r\n    function deposit()\r\n        public\r\n        payable\r\n    {\r\n        NonICOBuyins = NonICOBuyins.add(msg.value);\r\n    }\r\n\r\n    /// @dev Function to buy tokens with contract eth balance.\r\n    function buyTokens()\r\n        public\r\n        payable\r\n        isAnOwner\r\n    {\r\n        uint savings = address(this).balance;\r\n        if (savings > 0.01 ether) {\r\n            ZTHTKN.buyAndSetDivPercentage.value(savings)(address(0x0), 33, \"\");\r\n            emit BankrollInvest(savings);\r\n        }\r\n        else {\r\n            emit EtherLogged(msg.value, msg.sender);\r\n        }\r\n    }\r\n\r\n\t\tfunction tokenFallback(address /*_from*/, uint /*_amountOfTokens*/, bytes /*_data*/) public returns (bool) {\r\n\t\t\t// Nothing, for now. Just receives tokens.\r\n\t\t}\t\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerDoesNotExist(owner)\r\n        notNull(owner)\r\n        validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        emit OwnerAddition(owner);\r\n    }\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n        validRequirement(owners.length, required)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint i=0; i<owners.length - 1; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        owners.length -= 1;\r\n        if (required > owners.length)\r\n            changeRequirement(owners.length);\r\n        emit OwnerRemoval(owner);\r\n    }\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param owner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner)\r\n        public\r\n        onlyWallet\r\n        ownerExists(owner)\r\n        ownerDoesNotExist(newOwner)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        emit OwnerRemoval(owner);\r\n        emit OwnerAddition(newOwner);\r\n    }\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint _required)\r\n        public\r\n        onlyWallet\r\n        validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function submitTransaction(address destination, uint value, bytes data)\r\n        public\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        emit Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint transactionId)\r\n        public\r\n        ownerExists(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        emit Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint transactionId)\r\n        public\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction storage txToExecute = transactions[transactionId];\r\n            txToExecute.executed = true;\r\n            if (txToExecute.destination.call.value(txToExecute.value)(txToExecute.data))\r\n                emit Execution(transactionId);\r\n            else {\r\n                emit ExecutionFailure(transactionId);\r\n                txToExecute.executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Confirmation status.\r\n    function isConfirmed(uint transactionId)\r\n        public\r\n        constant\r\n        returns (bool)\r\n    {\r\n        uint count = 0;\r\n        for (uint i=0; i<owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n            if (count == required)\r\n                return true;\r\n        }\r\n    }\r\n\r\n    /*=================================\r\n    =        OPERATOR FUNCTIONS       =\r\n    =================================*/\r\n\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return Returns transaction ID.\r\n    function addTransaction(address destination, uint value, bytes data)\r\n        internal\r\n        notNull(destination)\r\n        returns (uint transactionId)\r\n    {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination,\r\n            value: value,\r\n            data: data,\r\n            executed: false\r\n        });\r\n        transactionCount += 1;\r\n        emit Submission(transactionId);\r\n    }\r\n\r\n    /*\r\n     * Web3 call functions\r\n     */\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Number of confirmations.\r\n    function getConfirmationCount(uint transactionId)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]])\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Total number of transactions after filters are applied.\r\n    function getTransactionCount(bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint count)\r\n    {\r\n        for (uint i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n                || executed && transactions[i].executed)\r\n                count += 1;\r\n    }\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return List of owner addresses.\r\n    function getOwners()\r\n        public\r\n        constant\r\n        returns (address[])\r\n    {\r\n        return owners;\r\n    }\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return Returns array of owner addresses.\r\n    function getConfirmations(uint transactionId)\r\n        public\r\n        constant\r\n        returns (address[] _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        _confirmations = new address[](count);\r\n        for (i=0; i<count; i++)\r\n            _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return Returns array of transaction IDs.\r\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\r\n        public\r\n        constant\r\n        returns (uint[] _transactionIds)\r\n    {\r\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\r\n        uint count = 0;\r\n        uint i;\r\n        for (i=0; i<transactionCount; i++)\r\n            if (   pending && !transactions[i].executed\r\n                || executed && transactions[i].executed)\r\n            {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        _transactionIds = new uint[](to - from);\r\n        for (i=from; i<to; i++)\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n    }\r\n\r\n    // Dev withdrawal of tokens - splits equally among all owners of contract\r\n    function devTokenWithdraw(uint amount) public\r\n        onlyWallet\r\n    {\r\n        uint amountPerPerson = SafeMath.div(amount, owners.length);\r\n\r\n        for (uint i=0; i<owners.length; i++) {\r\n            ZTHTKN.transfer(owners[i], amountPerPerson);\r\n        }\r\n\r\n        emit DevWithdraw(amount, amountPerPerson);\r\n    }\r\n\r\n    // Change the dividend card address. Can't see why this would ever need\r\n    // to be invoked, but better safe than sorry.\r\n    function changeDivCardAddress(address _newDivCardAddress)\r\n        public\r\n        isAnOwner\r\n    {\r\n        divCardAddress = _newDivCardAddress;\r\n    }\r\n\r\n    // Receive Ether (from Zethr itself or any other source) and purchase tokens at the 33% dividend rate.\r\n    // If the amount is less than 0.01 Ether, the Ether is stored by the contract until the balance\r\n    // exceeds that limit and then purchases all it can.\r\n    function receiveDividends() public payable {\r\n      if (!reEntered) {\r\n        uint ActualBalance = (address(this).balance.sub(NonICOBuyins));\r\n        if (ActualBalance > 0.01 ether) {\r\n          reEntered = true;\r\n          ZTHTKN.buyAndSetDivPercentage.value(ActualBalance)(address(0x0), 33, \"\");\r\n          emit BankrollInvest(ActualBalance);\r\n          reEntered = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Use all available balance to buy in\r\n    function buyInWithAllBalance() public payable onlyWallet {\r\n      if (!reEntered) {\r\n        uint balance = address(this).balance;\r\n        require (balance > 0.01 ether);\r\n        ZTHTKN.buyAndSetDivPercentage.value(balance)(address(0x0), 33, \"\"); \r\n      }\r\n    }\r\n    \r\n    // Withdraws dividends, then buys in half of balance @ 33% if balance > 0.01 eth \r\n    function buyInSaturday() public payable isAnOwner {\r\n        if (!reEntered) {\r\n            ZTHTKN.withdraw(address(this));\r\n            uint balance = address(this).balance;\r\n            require (balance > 0.01 ether);\r\n            ZTHTKN.buyAndSetDivPercentage.value(balance/2)(address(0x0), 33, \"\"); \r\n        }\r\n    }\r\n   \r\n    // Multi allocate ETH to all token bankrolls \r\n    function allocateETH(bool callBuy)\r\n        isAnOwner\r\n        public\r\n    {\r\n        // Withdraw divs first\r\n        ZTHTKN.withdraw(address(this));\r\n\r\n        // Allocate eth to each of the sub-bankrolls\r\n        _allocateETH(2, callBuy);\r\n        _allocateETH(5, callBuy);\r\n        _allocateETH(10, callBuy);\r\n        _allocateETH(15, callBuy);\r\n        _allocateETH(20, callBuy);\r\n        _allocateETH(25, callBuy);\r\n        _allocateETH(33, callBuy);\r\n    }\r\n    \r\n    // Actually allocate \r\n    function _allocateETH(uint8 divRate, bool doBuy)\r\n        internal\r\n    {\r\n        // Retreive bankroll address from divrate mapping\r\n        address targetBankroll = tokenBankrollMapping[divRate]; \r\n\r\n        // Make sure the target tokenBankroll is actually set  \r\n        require(targetBankroll != address(0x0));\r\n\r\n        // Check the token balance of the target tokenBankroll\r\n        uint balance = ZTHTKN.balanceOf(targetBankroll); \r\n\r\n        // Check the token allocation of the target tokenBankroll\r\n        uint allocated = tokenBankrollAllocation[targetBankroll];\r\n\r\n        // If the target tokenBankroll doesn't have enough tokens, send it ETH so it can buy in\r\n        if (balance < allocated){\r\n            // Calculate how much eth it needs to buy in\r\n            uint toSend = ZTHTKN.tokensToEthereum_(allocated - balance);\r\n\r\n            // Add 1% to account for variance\r\n            toSend = (toSend * 101)/100;\r\n\r\n            // Send the ETH!\r\n            targetBankroll.transfer(toSend);\r\n        }\r\n\r\n        // if doBuy is set, call tokenBankrollBuyIn()\r\n        if (doBuy) {\r\n          tokenBankrollBuyIn();\r\n        }\r\n    }\r\n    \r\n    uint public stakingBonusTokens; \r\n    address public stakeAddress;\r\n\r\n    // Set the staking address\r\n    function setStakeAddress(address anAddress) isAnOwner public {\r\n      stakeAddress = anAddress; \r\n    }\r\n\r\n    // Transfer tokens from all tokenBankrolls to the master staking contract\r\n    // Also record how many were transferred\r\n    function collectStakingBonusTokens() isAnOwner public {\r\n      // Stake address can't be 0, dumbass\r\n      require(stakeAddress != address(0x0));\r\n\r\n      // Reset staking bonus counter\r\n      stakingBonusTokens = 0;\r\n\r\n      // Collect them tokens\r\n      stakingBonusTokens += ZethrTokenBankroll(tokenBankrollMapping[2]).dumpFreeTokens(stakeAddress);\r\n      stakingBonusTokens += ZethrTokenBankroll(tokenBankrollMapping[5]).dumpFreeTokens(stakeAddress);\r\n      stakingBonusTokens += ZethrTokenBankroll(tokenBankrollMapping[10]).dumpFreeTokens(stakeAddress);\r\n      stakingBonusTokens += ZethrTokenBankroll(tokenBankrollMapping[15]).dumpFreeTokens(stakeAddress);\r\n      stakingBonusTokens += ZethrTokenBankroll(tokenBankrollMapping[20]).dumpFreeTokens(stakeAddress);\r\n      stakingBonusTokens += ZethrTokenBankroll(tokenBankrollMapping[25]).dumpFreeTokens(stakeAddress);\r\n      stakingBonusTokens += ZethrTokenBankroll(tokenBankrollMapping[33]).dumpFreeTokens(stakeAddress);\r\n    }\r\n\r\n    // Actually buy in IF this is necessary (can be manually called after allocateETH if necessary)\r\n    function tokenBankrollBuyIn()\r\n        isAnOwner\r\n        public\r\n    {\r\n        _tokenBankrollBuyIn(2);\r\n        _tokenBankrollBuyIn(5);\r\n        _tokenBankrollBuyIn(10);\r\n        _tokenBankrollBuyIn(15);\r\n        _tokenBankrollBuyIn(20);\r\n        _tokenBankrollBuyIn(25);\r\n        _tokenBankrollBuyIn(33);\r\n    }\r\n    \r\n    // Calls zethrBuyIn okn the selected tokenBankroll\r\n    function _tokenBankrollBuyIn(uint8 divRate)\r\n        internal\r\n    {\r\n        // Get the correct address based off the selected divRate\r\n        address targetBankroll = tokenBankrollMapping[divRate];\r\n\r\n        // Tell the target tokenBankroll to buy in\r\n        ZethrTokenBankroll(targetBankroll).zethrBuyIn();  \r\n    }\r\n    \r\n    // Call token allocate function on all token bankrolls \r\n    function tokenAllocate()\r\n        isAnOwner\r\n        public\r\n    {\r\n        _tokenAllocate(2);\r\n        _tokenAllocate(5);\r\n        _tokenAllocate(10);\r\n        _tokenAllocate(15);\r\n        _tokenAllocate(20);\r\n        _tokenAllocate(25);\r\n        _tokenAllocate(33);\r\n    }\r\n    \r\n    // Token bankroll token-allocate function\r\n    function _tokenAllocate(uint8 divRate)\r\n        internal\r\n    {\r\n        // Get the correct address based off the selected div rate\r\n        address targetBankroll = tokenBankrollMapping[divRate];\r\n\r\n        // Tell the token bankroll to allocate tokens\r\n        ZethrTokenBankroll(targetBankroll).allocateTokens();\r\n    }\r\n    \r\n    function gameGetTokenBankrollList() public view returns (address[7]){\r\n        address[7] memory output;\r\n        output[0] = tokenBankrollMapping[2];\r\n        output[1] = tokenBankrollMapping[5];\r\n        output[2] = tokenBankrollMapping[10];\r\n        output[3] = tokenBankrollMapping[15];\r\n        output[4] = tokenBankrollMapping[20];\r\n        output[5] = tokenBankrollMapping[25];\r\n        output[6] = tokenBankrollMapping[33];\r\n        return output;\r\n    }\r\n    \r\n    // Whitelist a game on all token bankrolls\r\n    function addGame(address ctr, uint allocate)\r\n        isAnOwner\r\n        public\r\n    {\r\n        // Add to list of games\r\n        require(!isAnAddedGame[ctr]);\r\n        isAnAddedGame[ctr] = true;\r\n        games.push(ctr);\r\n\r\n        ZethrTokenBankroll(tokenBankrollMapping[2]).addGame(ctr, allocate);\r\n        ZethrTokenBankroll(tokenBankrollMapping[5]).addGame(ctr, allocate);\r\n        ZethrTokenBankroll(tokenBankrollMapping[10]).addGame(ctr, allocate);\r\n        ZethrTokenBankroll(tokenBankrollMapping[15]).addGame(ctr, allocate);\r\n        ZethrTokenBankroll(tokenBankrollMapping[20]).addGame(ctr, allocate);\r\n        ZethrTokenBankroll(tokenBankrollMapping[25]).addGame(ctr, allocate);\r\n        ZethrTokenBankroll(tokenBankrollMapping[33]).addGame(ctr, allocate);\r\n    }\r\n    \r\n    // Dewhitelist a game on all token bankrolls \r\n    function removeGame(address ctr)\r\n        isAnOwner\r\n        public\r\n    {\r\n        // Remove from the list of games\r\n        require(isAnAddedGame[ctr]);    \r\n        isAnAddedGame[ctr] = false;\r\n \r\n        // Loop over the games list to find the index to remove  \r\n        for (uint i=0; i < games.length; i++) {\r\n          if (games[i] == ctr) {\r\n            // If we've found the game, null it out\r\n            games[i] = address(0x0);\r\n\r\n            // And if it's not at the end, swap the last element to this position\r\n            if (i != games.length) {\r\n              games[i] = games[games.length]; \r\n            }\r\n\r\n            // Remove 1 from length\r\n            // This will not overflow because if games.length == 0 we do not execute the for loop\r\n            // (also would not pass the first require in this function)\r\n            games.length = games.length - 1;  \r\n            break;\r\n          }  \r\n        }\r\n\r\n        ZethrTokenBankroll(tokenBankrollMapping[2]).removeGame(ctr);\r\n        ZethrTokenBankroll(tokenBankrollMapping[5]).removeGame(ctr);\r\n        ZethrTokenBankroll(tokenBankrollMapping[10]).removeGame(ctr);\r\n        ZethrTokenBankroll(tokenBankrollMapping[15]).removeGame(ctr);\r\n        ZethrTokenBankroll(tokenBankrollMapping[20]).removeGame(ctr);\r\n        ZethrTokenBankroll(tokenBankrollMapping[25]).removeGame(ctr);\r\n        ZethrTokenBankroll(tokenBankrollMapping[33]).removeGame(ctr);\r\n    }\r\n    \r\n    // Mapping of div rate to addresses (token bankrolls) //1000000000000000000000\r\n    mapping(uint8 => address) public tokenBankrollMapping; \r\n\r\n    // Mapping of token bankrolls to their token allocations\r\n    mapping(address => uint) public tokenBankrollAllocation;\r\n    \r\n    // Set address of a token bankroll (via divrate)\r\n    function setTokenBankrollAddress(uint8 divRate, address where)\r\n        isAnOwner\r\n        public\r\n    {\r\n        tokenBankrollMapping[divRate] = where;\r\n    }\r\n    \r\n    // Set allocation of a token bankroll\r\n    // This can come from an owner OR a game\r\n    function setAllocation(address what, uint amount)\r\n        isOwnerOrWhitelistedGame\r\n        public\r\n    {\r\n        tokenBankrollAllocation[what] = amount;\r\n    }\r\n\r\n    // Change allocation of the specified token bankroll by an amount\r\n    // This is similar to above, but uses delta instead of just the amount\r\n    function changeAllocation(address what, int amount)\r\n        isOwnerOrWhitelistedGame\r\n        public\r\n    {\r\n        // Sanity check - can't go negative\r\n        if (amount < 0) {\r\n          require(int(tokenBankrollAllocation[what]) + amount >= 0);\r\n        }\r\n        \r\n        // Set the allocation amount\r\n        tokenBankrollAllocation[what] = uint(int(tokenBankrollAllocation[what]) + amount);\r\n    }\r\n\r\n    /*=================================\r\n    =            UTILITIES            =\r\n    =================================*/\r\n\r\n    // Convert an hexadecimal character to their value\r\n    function fromHexChar(uint c) public pure returns (uint) {\r\n        if (byte(c) >= byte('0') && byte(c) <= byte('9')) {\r\n            return c - uint(byte('0'));\r\n        }\r\n        if (byte(c) >= byte('a') && byte(c) <= byte('f')) {\r\n            return 10 + c - uint(byte('a'));\r\n        }\r\n        if (byte(c) >= byte('A') && byte(c) <= byte('F')) {\r\n            return 10 + c - uint(byte('A'));\r\n        }\r\n    }\r\n\r\n    // Convert an hexadecimal string to raw bytes\r\n    function fromHex(string s) public pure returns (bytes) {\r\n        bytes memory ss = bytes(s);\r\n        require(ss.length%2 == 0); // length must be even\r\n        bytes memory r = new bytes(ss.length/2);\r\n        for (uint i=0; i<ss.length/2; ++i) {\r\n            r[i] = byte(fromHexChar(uint(ss[2*i])) * 16 +\r\n                    fromHexChar(uint(ss[2*i+1])));\r\n        }\r\n        return r;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ZTHTKN\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyInSaturday\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anAddress\",\"type\":\"address\"}],\"name\":\"setStakeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenBankrollBuyIn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tokenBankrollMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctr\",\"type\":\"address\"},{\"name\":\"allocate\",\"type\":\"uint256\"}],\"name\":\"addGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenAllocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_WITHDRAW_PCT_DAILY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBankrollAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_WITHDRAW_PCT_TX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receiveDividends\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyInWithAllBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"what\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"changeAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"s\",\"type\":\"string\"}],\"name\":\"fromHex\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"what\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDivCardAddress\",\"type\":\"address\"}],\"name\":\"changeDivCardAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"callBuy\",\"type\":\"bool\"}],\"name\":\"allocateETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"uint256\"},{\"name\":\"pending\",\"type\":\"bool\"},{\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_zethr\",\"type\":\"address\"},{\"name\":\"_divcards\",\"type\":\"address\"}],\"name\":\"addZethrAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameGetTokenBankrollList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[7]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"name\":\"fromHexChar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ctr\",\"type\":\"address\"}],\"name\":\"removeGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"divRate\",\"type\":\"uint8\"},{\"name\":\"where\",\"type\":\"address\"}],\"name\":\"setTokenBankrollAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectStakingBonusTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAnAddedGame\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devTokenWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingBonusTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_required\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"WhiteListAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"WhiteListRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountPerPerson\",\"type\":\"uint256\"}],\"name\":\"DevWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"EtherLogged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"BankrollInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameContract\",\"type\":\"address\"}],\"name\":\"DailyTokenAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"DailyTokensSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"DailyTokensReceived\",\"type\":\"event\"}]","ContractName":"ZethrBankroll","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011e52c75998fe2e7928b191bfc5b25937ca16741","Library":"","SwarmSource":"bzzr://fda4c3f25f6aaf507a90b313c7bb024c41dead7167276c637600f15f6ae41249"}]}