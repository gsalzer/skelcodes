{"status":"1","message":"OK","result":[{"SourceCode":"// solium-disable linebreak-style\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    // Owner's address\r\n    address public owner;\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit OwnerChanged(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    event OwnerChanged(address indexed previousOwner,address indexed newOwner);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract AoraTgeCoin is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Name of the token\r\n    string public constant name = \"Aora TGE Coin\"; \r\n    \r\n    // Symbol of the token\r\n    string public constant symbol = \"AORATGE\";\r\n\r\n    // Number of decimals for the token\r\n    uint8 public constant decimals = 18;\r\n    \r\n    uint constant private _totalSupply = 650000000 ether;\r\n\r\n    // Contract deployment block\r\n    uint256 public deploymentBlock;\r\n\r\n    // Address of the convertContract\r\n    address public convertContract = address(0);\r\n\r\n    // Address of the crowdsaleContract\r\n    address public crowdsaleContract = address(0);\r\n\r\n    // Token balances \r\n    mapping (address => uint) balances;\r\n\r\n    /**\r\n    * @dev Sets the convertContract address. \r\n    *   In the future, there will be a need to convert Aora TGE Coins to Aora Coins. \r\n    *   That will be done using the Convert contract which will be deployed in the future.\r\n    *   Convert contract will do the functions of converting Aora TGE Coins to Aora Coins\r\n    *   and enforcing vesting rules. \r\n    * @param _convert address of the convert contract.\r\n    */\r\n    function setConvertContract(address _convert) external onlyOwner {\r\n        require(address(0) != address(_convert));\r\n        convertContract = _convert;\r\n        emit OnConvertContractSet(_convert);\r\n    }\r\n\r\n    /** \r\n    * @dev Sets the crowdsaleContract address.\r\n    *   transfer function is modified in a way that only owner and crowdsale can call it.\r\n    *   That is done because crowdsale will sell the tokens, and owner will be allowed\r\n    *   to assign AORATGE to addresses in a way that matches the Aora business model.\r\n    * @param _crowdsale address of the crowdsale contract.\r\n    */\r\n    function setCrowdsaleContract(address _crowdsale) external onlyOwner {\r\n        require(address(0) != address(_crowdsale));\r\n        crowdsaleContract = _crowdsale;\r\n        emit OnCrowdsaleContractSet(_crowdsale);\r\n    }\r\n\r\n    /**\r\n    * @dev only convert contract can call the modified function\r\n    */\r\n    modifier onlyConvert {\r\n        require(msg.sender == convertContract);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        balances[msg.sender] = _totalSupply;\r\n        deploymentBlock = block.number;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address who) external view returns (uint256) {\r\n        return balances[who];\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256) {\r\n        require(false);\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address.\r\n    *   Only callable by the owner or crowdsale contract, to prevent token trading.\r\n    *   AORA will be a tradable token. AORATGE will be exchanged for AORA in 1-1 ratio. \r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(msg.sender == owner || msg.sender == crowdsaleContract);\r\n\r\n        require(_value <= balances[msg.sender]);\r\n        require(_to != address(0));\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        require(false);\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another. \r\n    *   Only callable by the convert contract. Used in the process of converting \r\n    *   AORATGE to AORA. Will be called from convert contracts convert() function.\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to. \r\n    *   Only 0x0 address, because of a need to prevent token recycling. \r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) onlyConvert public returns (bool) {\r\n        require(_value <= balances[_from]);\r\n        require(_to == address(0));\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Fallback function. Can't send ether to this contract. \r\n    */\r\n    function () external payable {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n    * @dev This method can be used by the owner to extract mistakenly sent tokens\r\n    * or Ether sent to this contract.\r\n    * @param _token address The address of the token contract that you want to\r\n    * recover set to 0 in case you want to extract ether. It can't be ElpisToken.\r\n    */\r\n    function claimTokens(address _token) public onlyOwner {\r\n        if (_token == address(0)) {\r\n            owner.transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        IERC20 tokenReference = IERC20(_token);\r\n        uint balance = tokenReference.balanceOf(address(this));\r\n        tokenReference.transfer(owner, balance);\r\n        emit OnClaimTokens(_token, owner, balance);\r\n    }\r\n\r\n    /**\r\n    * @param crowdsaleAddress crowdsale contract address\r\n    */\r\n    event OnCrowdsaleContractSet(address indexed crowdsaleAddress);\r\n\r\n    /**\r\n    * @param convertAddress crowdsale contract address\r\n    */\r\n    event OnConvertContractSet(address indexed convertAddress);\r\n\r\n    /**\r\n    * @param token claimed token\r\n    * @param owner who owns the contract\r\n    * @param amount amount of the claimed token\r\n    */\r\n    event OnClaimTokens(address indexed token, address indexed owner, uint256 amount);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"setCrowdsaleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deploymentBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"convertContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_convert\",\"type\":\"address\"}],\"name\":\"setConvertContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"crowdsaleAddress\",\"type\":\"address\"}],\"name\":\"OnCrowdsaleContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"convertAddress\",\"type\":\"address\"}],\"name\":\"OnConvertContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"AoraTgeCoin","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c2ee0d99c568887d9f1a10f636fc08adf93d881b48b9bb7ce1fc8fb64e224c3a"}]}