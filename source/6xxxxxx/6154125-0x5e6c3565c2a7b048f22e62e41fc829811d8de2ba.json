{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\ncontract SnooKarma {\r\n    \r\n    //The oracle checks the authenticity of the Reddit accounts and their karma\r\n    address public oracle;\r\n    \r\n    //The maintainer manages donations and a small Karma fee\r\n    //The maintainer is in charge of keeping the oracle running\r\n    address public maintainer;\r\n    \r\n    //The owner can replace the oracle or maintainer if they are compromised\r\n    address public owner;\r\n    \r\n    //ERC20 code\r\n    //See https://github.com/ethereum/EIPs/blob/e451b058521ba6ccd5d3205456f755b1d2d52bb8/EIPS/eip-20.md\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping (address => uint)) public allowance;\r\n    string public constant symbol = \"SNK\";\r\n    string public constant name = \"SnooKarma\";\r\n    uint8 public constant decimals = 2;\r\n    uint public totalSupply = 0;\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n   \r\n    //The Redeem event is activated when a Reddit user redeems Karma Coins\r\n    event Redeem(string indexed username, address indexed addr, uint karma);\r\n    //END OF ERC20 code\r\n \r\n    //Keep track of Reddit users and their redeemed karma amount\r\n    mapping(string => uint) redeemedKarma;\r\n    \r\n    //Construct the contract\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        maintainer = msg.sender;\r\n        oracle = msg.sender;\r\n    }\r\n    \r\n    //ERC20 code\r\n    //See https://github.com/ethereum/EIPs/blob/e451b058521ba6ccd5d3205456f755b1d2d52bb8/EIPS/eip-20.md\r\n    function transfer(address destination, uint amount) public returns (bool success) {\r\n        if (balanceOf[msg.sender] >= amount && \r\n            balanceOf[destination] + amount > balanceOf[destination]) {\r\n            balanceOf[msg.sender] -= amount;\r\n            balanceOf[destination] += amount;\r\n            emit Transfer(msg.sender, destination, amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    function transferFrom (\r\n        address from,\r\n        address to,\r\n        uint amount\r\n    ) public returns (bool success) {\r\n        if (balanceOf[from] >= amount &&\r\n            allowance[from][msg.sender] >= amount &&\r\n            balanceOf[to] + amount > balanceOf[to]) \r\n        {\r\n            balanceOf[from] -= amount;\r\n            allowance[from][msg.sender] -= amount;\r\n            balanceOf[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n \r\n    function approve(address spender, uint amount) public returns (bool success) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    //END OF ERC20 code\r\n    \r\n    //SafeAdd function from \r\n    //https://github.com/OpenZeppelin/zeppelin-solidity/blob/6ad275befb9b24177b2a6a72472673a28108937d/contracts/math/SafeMath.sol\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    //Used to enforce permissions\r\n    modifier onlyBy(address account) {\r\n        require(msg.sender == account);\r\n        _;\r\n    }\r\n    \r\n    //The owner can transfer ownership\r\n    function transferOwnership(address newOwner) public onlyBy(owner) {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n    \r\n    //The owner can change the oracle\r\n    //This works only if removeOracle() was never called\r\n    function changeOracle(address newOracle) public onlyBy(owner) {\r\n        require(oracle != address(0) && newOracle != address(0));\r\n        oracle = newOracle;\r\n    }\r\n\r\n    //The owner can remove the oracle\r\n    //This can not be reverted and stops the generation of new SnooKarma coins!\r\n    function removeOracle() public onlyBy(owner) {\r\n        oracle = address(0);\r\n    }\r\n    \r\n    //The owner can change the maintainer\r\n    function changeMaintainer(address newMaintainer) public onlyBy(owner) {\r\n        maintainer = newMaintainer;\r\n    }\r\n    \r\n    //Allows the user the redeem an amount of Karma verified by the oracle\r\n    //This function also grants a small extra amount of Karma to the maintainer\r\n    //The maintainer gets 1 extra karma for each 100 redeemed by a user\r\n    function redeem(string username, uint karma, uint sigExp, uint8 sigV, bytes32 sigR, bytes32 sigS) public {\r\n        //The identity of the oracle is checked\r\n        require(\r\n            ecrecover(\r\n                keccak256(abi.encodePacked(this, username, karma, sigExp)),\r\n                sigV, sigR, sigS\r\n            ) == oracle\r\n        );\r\n        //The signature must not be expired\r\n        require(block.timestamp < sigExp);\r\n        //The amount of karma needs to be more than the previous redeemed amount\r\n        require(karma > redeemedKarma[username]);\r\n        //The new karma that is available to be redeemed\r\n        uint newUserKarma = karma - redeemedKarma[username];\r\n        //The user's karma balance is updated with the new karma\r\n        balanceOf[msg.sender] = safeAdd(balanceOf[msg.sender], newUserKarma);\r\n        //The maintainer's extra karma is computed (1 extra karma for each 100 redeemed by a user)\r\n        uint newMaintainerKarma = newUserKarma / 100;\r\n        //The balance of the maintainer is updated\r\n        balanceOf[maintainer] = safeAdd(balanceOf[maintainer], newMaintainerKarma);\r\n        //The total supply (ERC20) is updated\r\n        totalSupply = safeAdd(totalSupply, safeAdd(newUserKarma, newMaintainerKarma));\r\n        //The amount of karma redeemed by a user is updated\r\n        redeemedKarma[username] = karma;\r\n        //The Redeem event is triggered\r\n        emit Redeem(username, msg.sender, newUserKarma);\r\n    }\r\n    \r\n    //This function is a workaround because this.redeemedKarma cannot be public\r\n    //This is the limitation of the current Solidity compiler\r\n    function redeemedKarmaOf(string username) public view returns(uint) {\r\n        return redeemedKarma[username];\r\n    }\r\n    \r\n    //Receive donations\r\n    function() public payable {  }\r\n    \r\n    //Transfer donations or accidentally received Ethereum\r\n    function transferEthereum(uint amount, address destination) public onlyBy(maintainer) {\r\n        require(destination != address(0));\r\n        destination.transfer(amount);\r\n    }\r\n\r\n    //Transfer donations or accidentally received ERC20 tokens\r\n    function transferTokens(address token, uint amount, address destination) public onlyBy(maintainer) {\r\n        require(destination != address(0));\r\n        SnooKarma tokenContract = SnooKarma(token);\r\n        tokenContract.transfer(destination, amount);\r\n    }\r\n \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"transferEthereum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"changeOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"transferTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"karma\",\"type\":\"uint256\"},{\"name\":\"sigExp\",\"type\":\"uint256\"},{\"name\":\"sigV\",\"type\":\"uint8\"},{\"name\":\"sigR\",\"type\":\"bytes32\"},{\"name\":\"sigS\",\"type\":\"bytes32\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"username\",\"type\":\"string\"}],\"name\":\"redeemedKarmaOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maintainer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaintainer\",\"type\":\"address\"}],\"name\":\"changeMaintainer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"username\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"karma\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"}]","ContractName":"SnooKarma","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1695c75ebbdd65cf36a47334361d9510c47606fe744eaa808bce8085484c49d5"}]}