{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    mapping(address => bool) owners;\r\n\r\n    event OwnerAdded(address indexed newOwner);\r\n    event OwnerDeleted(address indexed owner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owners[msg.sender] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function addOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0));\r\n        owners[_newOwner] = true;\r\n        emit OwnerAdded(_newOwner);\r\n    }\r\n\r\n    function delOwner(address _owner) external onlyOwner {\r\n        require(owners[_owner]);\r\n        owners[_owner] = false;\r\n        emit OwnerDeleted(_owner);\r\n    }\r\n\r\n    function isOwner(address _owner) public view returns (bool) {\r\n        return owners[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function ownerTransfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n\r\nlibrary SafeERC20 {\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        require(token.transfer(to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        require(token.transferFrom(from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        require(token.approve(spender, value));\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    // The token being sold\r\n    ERC20 public token;\r\n    address public wallet;\r\n\r\n    uint256 public openingTime;\r\n\r\n    uint256 public cap;                 //кап в токенах\r\n    uint256 public tokensSold;          //кол-во проданных токенов\r\n    uint256 public tokenPriceInWei;     //цена токена в веях\r\n\r\n    bool public isFinalized = false;\r\n\r\n    // Amount of wei raised\r\n    uint256 public weiRaised;\r\n\r\n\r\n    struct Stage {\r\n        uint stopDay;       //день окончания этапа\r\n        uint bonus;         //бонус в процентах\r\n        uint tokens;        //кол-во токенов для продажи (без 18 нулей, нули добавляем перед отправкой и без учета бонусных токенов).\r\n        uint minPurchase;   //минимальная сумма покупки\r\n    }\r\n\r\n    mapping (uint => Stage) public stages;\r\n    uint public stageCount;\r\n    uint public currentStage;\r\n\r\n    mapping (address => uint) public refs;\r\n    uint public buyerRefPercent = 500;\r\n    uint public referrerPercent = 500;\r\n    uint public minWithdrawValue = 200000000000000000;\r\n    uint public globalMinWithdrawValue = 1000 ether;\r\n\r\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 tokens, uint256 bonus);\r\n    event Finalized();\r\n\r\n\r\n    /**\r\n     * @dev Reverts if not in crowdsale time range.\r\n     */\r\n    modifier onlyWhileOpen {\r\n        // solium-disable-next-line security/no-block-members\r\n        require(block.timestamp >= openingTime);\r\n        _;\r\n    }\r\n\r\n\r\n    constructor(address _wallet, ERC20 _token) public {\r\n        require(_wallet != address(0));\r\n        require(_token != address(0));\r\n\r\n        wallet = _wallet;\r\n        token = _token;\r\n\r\n        cap = 32500000;\r\n        openingTime = now;\r\n        tokenPriceInWei = 1000000000000000;\r\n\r\n        currentStage = 1;\r\n\r\n        addStage(openingTime + 61    days, 10000, 2500000,  200000000000000000);\r\n        addStage(openingTime + 122   days, 5000,  5000000,  200000000000000000);\r\n        addStage(openingTime + 183   days, 1000,  10000000, 1000000000000000);\r\n        //addStage(openingTime + 1000  days, 0,     9000000000000000000000000,  1000000000000000);\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // Crowdsale external interface\r\n    // -----------------------------------------\r\n\r\n    /**\r\n     * @dev fallback function ***DO NOT OVERRIDE***\r\n     */\r\n    function () external payable {\r\n        buyTokens(address(0));\r\n    }\r\n\r\n    function setTokenPrice(uint _price) onlyOwner public {\r\n        tokenPriceInWei = _price;\r\n    }\r\n\r\n    function addStage(uint _stopDay, uint _bonus, uint _tokens, uint _minPurchase) onlyOwner public {\r\n        require(_stopDay > stages[stageCount].stopDay);\r\n        stageCount++;\r\n        stages[stageCount].stopDay = _stopDay;\r\n        stages[stageCount].bonus = _bonus;\r\n        stages[stageCount].tokens = _tokens;\r\n        stages[stageCount].minPurchase = _minPurchase;\r\n    }\r\n\r\n    function editStage(uint _stage, uint _stopDay, uint _bonus,  uint _tokens, uint _minPurchase) onlyOwner public {\r\n        stages[_stage].stopDay = _stopDay;\r\n        stages[_stage].bonus = _bonus;\r\n        stages[_stage].tokens = _tokens;\r\n        stages[_stage].minPurchase = _minPurchase;\r\n    }\r\n\r\n\r\n    function buyTokens(address _ref) public payable {\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        if (stages[currentStage].stopDay <= now && currentStage < stageCount) {\r\n            _updateCurrentStage();\r\n        }\r\n\r\n        _preValidatePurchase(msg.sender, weiAmount);\r\n\r\n        uint tokens = 0;\r\n        uint bonusTokens = 0;\r\n        uint totalTokens = 0;\r\n        uint diff = 0;\r\n\r\n        (tokens, bonusTokens, totalTokens, diff) = _getTokenAmount(weiAmount);\r\n\r\n        _validatePurchase(tokens);\r\n\r\n        weiAmount = weiAmount.sub(diff);\r\n\r\n        if (_ref != address(0) && _ref != msg.sender) {\r\n            uint refBonus = valueFromPercent(weiAmount, referrerPercent);\r\n            uint buyerBonus = valueFromPercent(weiAmount, buyerRefPercent);\r\n\r\n            refs[_ref] = refs[_ref].add(refBonus);\r\n            diff = diff.add(buyerBonus);\r\n\r\n            weiAmount = weiAmount.sub(buyerBonus).sub(refBonus);\r\n        }\r\n\r\n        if (diff > 0) {\r\n            msg.sender.transfer(diff);\r\n        }\r\n\r\n        _processPurchase(msg.sender, totalTokens);\r\n        emit TokenPurchase(msg.sender, msg.sender, msg.value, tokens, bonusTokens);\r\n\r\n        _updateState(weiAmount, totalTokens);\r\n\r\n        _forwardFunds(weiAmount);\r\n    }\r\n\r\n    // -----------------------------------------\r\n    // Internal interface (extensible)\r\n    // -----------------------------------------\r\n\r\n    /**\r\n     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n     * @param _beneficiary Address performing the token purchase\r\n     * @param _weiAmount Value in wei involved in the purchase\r\n     */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) onlyWhileOpen internal view{\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount >= stages[currentStage].minPurchase);\r\n        require(tokensSold < cap);\r\n    }\r\n\r\n\r\n    function _validatePurchase(uint256 _tokens) internal view {\r\n        require(tokensSold.add(_tokens) <= cap);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n     * @param _beneficiary Address performing the token purchase\r\n     * @param _tokenAmount Number of tokens to be emitted\r\n     */\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        token.safeTransfer(_beneficiary, _tokenAmount.mul(1 ether));\r\n    }\r\n\r\n    /**\r\n     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n     * @param _beneficiary Address receiving the tokens\r\n     * @param _tokenAmount Number of tokens to be purchased\r\n     */\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Override to extend the way in which ether is converted to tokens.\r\n     */\r\n    function _getTokenAmount(uint256 _weiAmount) internal returns (uint,uint,uint,uint) {\r\n        uint _tokens;\r\n        uint _tokens_price;\r\n\r\n        //если все этапы прошли, то продаем токены без бонусов.\r\n        if (currentStage == stageCount && (stages[stageCount].stopDay <= now || stages[currentStage].tokens == 0)) {\r\n            _tokens = _weiAmount.div(tokenPriceInWei);\r\n            _tokens_price = _tokens.mul(tokenPriceInWei);\r\n            uint _diff = _weiAmount.sub(_tokens_price);\r\n            return (_tokens, 0, _tokens, _diff);\r\n        }\r\n\r\n        uint _bonus = 0;\r\n        uint _current_tokens = 0;\r\n        uint _current_bonus = 0;\r\n\r\n        for (uint i = currentStage; i <= stageCount && _weiAmount >= tokenPriceInWei; i++) {\r\n            if (stages[i].tokens > 0 ) {\r\n                uint _limit = stages[i].tokens.mul(tokenPriceInWei);\r\n                //если лимит больше чем _weiAmount, тогда считаем все из расчета что вписываемся в лимит\r\n                //и выходим из цикла\r\n                if (_limit > _weiAmount) {\r\n                    //количество токенов по текущему прайсу (останется остаток если прислали  больше чем на точное количество монет)\r\n                    _current_tokens = _weiAmount.div(tokenPriceInWei);\r\n                    //цена всех монет, чтобы определить остаток неизрасходованных wei\r\n                    _tokens_price = _current_tokens.mul(tokenPriceInWei);\r\n                    //получаем остаток\r\n                    _weiAmount = _weiAmount.sub(_tokens_price);\r\n                    //добавляем токены текущего стэйджа к общему количеству\r\n                    _tokens = _tokens.add(_current_tokens);\r\n                    //обновляем лимиты\r\n                    stages[i].tokens = stages[i].tokens.sub(_current_tokens);\r\n\r\n                    _current_bonus = _current_tokens.mul(stages[i].bonus).div(10000);\r\n                    _bonus = _bonus.add(_current_bonus);\r\n\r\n                } else { //лимит меньше чем количество wei\r\n                    //получаем все оставшиеся токены в стейдже\r\n                    _current_tokens = stages[i].tokens;\r\n                    _tokens_price = _current_tokens.mul(tokenPriceInWei);\r\n                    _weiAmount = _weiAmount.sub(_tokens_price);\r\n                    _tokens = _tokens.add(_current_tokens);\r\n                    stages[i].tokens = 0;\r\n\r\n                    _current_bonus = _current_tokens.mul(stages[i].bonus).div(10000);\r\n                    _bonus = _bonus.add(_current_bonus);\r\n\r\n                    _updateCurrentStage();\r\n                }\r\n            }\r\n        }\r\n\r\n        //Если в последнем стейндже закончились токены, то добираем из тех что без бонусов продаются\r\n        if (_weiAmount >= tokenPriceInWei) {\r\n            _current_tokens = _weiAmount.div(tokenPriceInWei);\r\n            _tokens_price = _current_tokens.mul(tokenPriceInWei);\r\n            _weiAmount = _weiAmount.sub(_tokens_price);\r\n            _tokens = _tokens.add(_current_tokens);\r\n        }\r\n\r\n        return (_tokens, _bonus, _tokens.add(_bonus), _weiAmount);\r\n    }\r\n\r\n\r\n    function _updateCurrentStage() internal {\r\n        for (uint i = currentStage; i <= stageCount; i++) {\r\n            if (stages[i].stopDay > now && stages[i].tokens > 0) {\r\n                currentStage = i;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _updateState(uint256 _weiAmount, uint256 _tokens) internal {\r\n        weiRaised = weiRaised.add(_weiAmount);\r\n        tokensSold = tokensSold.add(_tokens);\r\n    }\r\n\r\n\r\n    function getRefPercent() public {\r\n        require(refs[msg.sender] >= minWithdrawValue);\r\n        require(weiRaised >= globalMinWithdrawValue);\r\n        uint _val = refs[msg.sender];\r\n        refs[msg.sender] = 0;\r\n        msg.sender.transfer(_val);\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides Crowdsale fund forwarding, sending funds to escrow.\r\n     */\r\n    function _forwardFunds(uint _weiAmount) internal {\r\n        wallet.transfer(_weiAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Checks whether the cap has been reached.\r\n    * @return Whether the cap was reached\r\n    */\r\n    function capReached() public view returns (bool) {\r\n        return tokensSold >= cap;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Must be called after crowdsale ends, to do some extra finalization\r\n     * work. Calls the contract's finalization function.\r\n     */\r\n    function finalize() onlyOwner public {\r\n        require(!isFinalized);\r\n        //require(hasClosed() || capReached());\r\n\r\n        finalization();\r\n        emit Finalized();\r\n\r\n        isFinalized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Can be overridden to add finalization logic. The overriding function\r\n     * should call super.finalization() to ensure the chain of finalization is\r\n     * executed entirely.\r\n     */\r\n    function finalization() internal {\r\n        if (token.balanceOf(this) > 0) {\r\n            token.safeTransfer(wallet, token.balanceOf(this));\r\n        }\r\n    }\r\n\r\n\r\n    //1% - 100, 10% - 1000 50% - 5000\r\n    function valueFromPercent(uint _value, uint _percent) internal pure returns (uint amount)    {\r\n        uint _amount = _value.mul(_percent).div(10000);\r\n        return (_amount);\r\n    }\r\n\r\n\r\n    function setBuyerRefPercent(uint _buyerRefPercent) onlyOwner public {\r\n        buyerRefPercent = _buyerRefPercent;\r\n    }\r\n\r\n    function setReferrerPercent(uint _referrerPercent) onlyOwner public {\r\n        referrerPercent = _referrerPercent;\r\n    }\r\n\r\n    function setMinWithdrawValue(uint _minWithdrawValue) onlyOwner public {\r\n        minWithdrawValue = _minWithdrawValue;\r\n    }\r\n\r\n    function setGlobalMinWithdrawValue(uint _globalMinWithdrawValue) onlyOwner public {\r\n        globalMinWithdrawValue = _globalMinWithdrawValue;\r\n    }\r\n\r\n\r\n\r\n    /// @notice This method can be used by the owner to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token, address _to) external onlyOwner {\r\n        require(_to != address(0));\r\n        if (_token == 0x0) {\r\n            _to.transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        ERC20 t = ERC20(_token);\r\n        uint balance = t.balanceOf(this);\r\n        t.safeTransfer(_to, balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"globalMinWithdrawValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPriceInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getRefPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrerPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerRefPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyerRefPercent\",\"type\":\"uint256\"}],\"name\":\"setBuyerRefPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"delOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"refs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"stopDay\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"minPurchase\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stopDay\",\"type\":\"uint256\"},{\"name\":\"_bonus\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_minPurchase\",\"type\":\"uint256\"}],\"name\":\"addStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_globalMinWithdrawValue\",\"type\":\"uint256\"}],\"name\":\"setGlobalMinWithdrawValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWithdrawValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minWithdrawValue\",\"type\":\"uint256\"}],\"name\":\"setMinWithdrawValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referrerPercent\",\"type\":\"uint256\"}],\"name\":\"setReferrerPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_stopDay\",\"type\":\"uint256\"},{\"name\":\"_bonus\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_minPurchase\",\"type\":\"uint256\"}],\"name\":\"editStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerDeleted\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a25d571896e2f37b1983dda5eeae69488456aa440000000000000000000000007df6913d03c8207def2d2f89a38676e81fdfc4e5","Library":"","SwarmSource":"bzzr://cfa67cc61f51f84512a067076aaa8dd3796aaad1cb12b1852f465b0332540738"}]}