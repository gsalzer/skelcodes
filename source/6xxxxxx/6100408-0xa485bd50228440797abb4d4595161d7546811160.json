{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\ncontract AntiERC20Sink {\r\n    address public deployer;\r\n    constructor() public { deployer = msg.sender; }\r\n    function transferERC20Token(IERC20Token _token, address _to, uint256 _amount) public {\r\n        require(msg.sender == deployer);\r\n        _token.transfer(_to, _amount);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function plus(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n\r\n    function plus(int256 _a, int256 _b) internal pure returns (int256) {\r\n        int256 c = _a + _b;\r\n        assert((_b >= 0 && c >= _a) || (_b < 0 && c < _a));\r\n        return c;\r\n    }\r\n\r\n    function minus(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_a >= _b);\r\n        return _a - _b;\r\n    }\r\n\r\n    function minus(int256 _a, int256 _b) internal pure returns (int256) {\r\n        int256 c = _a - _b;\r\n        assert((_b >= 0 && c <= _a) || (_b < 0 && c > _a));\r\n        return c;\r\n    }\r\n\r\n    function times(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    function times(int256 _a, int256 _b) internal pure returns (int256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n        int256 c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    function toInt256(uint256 _a) internal pure returns (int256) {\r\n        assert(_a <= 2 ** 255);\r\n        return int256(_a);\r\n    }\r\n\r\n    function toUint256(int256 _a) internal pure returns (uint256) {\r\n        assert(_a >= 0);\r\n        return uint256(_a);\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        return _a / _b;\r\n    }\r\n\r\n    function div(int256 _a, int256 _b) internal pure returns (int256) {\r\n        return _a / _b;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n    ERC20 Standard Token interface\r\n*/\r\ncontract IERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public constant returns (string) {}\r\n    function symbol() public constant returns (string) {}\r\n    function decimals() public constant returns (uint8) {}\r\n    function totalSupply() public constant returns (uint256) {}\r\n    function balanceOf(address _owner) public constant returns (uint256) { _owner; }\r\n    function allowance(address _owner, address _spender) public constant returns (uint256) { _owner; _spender; }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public constant returns (address) {}\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n    function setOwner(address _newOwner) public;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract Vault {\r\n    PegInstance public pegInstance;\r\n    address public owner;\r\n    uint256 public totalBorrowed;\r\n    uint256 public rawDebt;\r\n    uint256 public timestamp;\r\n\r\n    constructor(PegInstance _pegInstance, address _owner) public {\r\n        pegInstance = _pegInstance;\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier authOnly() {\r\n        require(pegInstance.authorized(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner) public authOnly {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function setRawDebt(uint _newRawDebt) public authOnly {\r\n        rawDebt = _newRawDebt;\r\n    }\r\n\r\n    function setTotalBorrowed(uint _totalBorrowed) public authOnly {\r\n        totalBorrowed = _totalBorrowed;\r\n    }\r\n\r\n    function setTimestamp(uint256 _timestamp) public authOnly {\r\n        timestamp = _timestamp;\r\n    }\r\n\r\n    function payoutPEG(address _to, uint _amount) public authOnly {\r\n        pegInstance.pegNetworkToken().transfer(_to, _amount);\r\n    }\r\n\r\n    function burnPEG(uint _amount) public authOnly {\r\n        pegInstance.pegNetworkToken().destroy(address(this), _amount);\r\n    }\r\n\r\n    function transferERC20Token(IERC20Token _token, address _to, uint256 _amount) public authOnly {\r\n        _token.transfer(_to, _amount);\r\n    }\r\n}\r\n\r\ncontract IPegOracle {\r\n    function getValue() public view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n    Smart Token interface\r\n*/\r\ncontract ISmartToken is IOwned, IERC20Token {\r\n    function disableTransfers(bool _disable) public;\r\n    function issue(address _to, uint256 _amount) public;\r\n    function destroy(address _from, uint256 _amount) public;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PegLogic is AntiERC20Sink {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath for int256;\r\n    ISmartToken public pegNetworkToken;\r\n    PegInstance public pegInstance;\r\n\r\n    constructor(ISmartToken _pegNetworkToken, PegInstance _pegInstance) public {\r\n        pegNetworkToken = _pegNetworkToken;\r\n        pegInstance = _pegInstance;\r\n    }\r\n\r\n    modifier vaultExists(Vault _vault) {\r\n        require(pegInstance.vaultExists(_vault));\r\n        _;\r\n    }\r\n\r\n    modifier authOnly() {\r\n        require(pegInstance.authorized(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function newVault() public returns (Vault) {\r\n        // pegNetworkToken.destroy(msg.sender, 1e18); charge a fee?\r\n        Vault vault = new Vault(pegInstance, msg.sender);\r\n        pegInstance.addNewVault(vault, msg.sender);\r\n        return vault;\r\n    }\r\n\r\n    function getTotalCredit(Vault _vault) public view vaultExists(_vault) returns (int256) {\r\n        uint256 oraclePrice = pegInstance.oracle().getValue();\r\n        return (pegNetworkToken.balanceOf(_vault).times(oraclePrice).times(pegInstance.maxBorrowLTV()) / 1e12).toInt256();\r\n    }\r\n\r\n    function getAvailableCredit(Vault _vault) public view returns (int256) {\r\n        return getTotalCredit(_vault).minus(actualDebt(_vault).toInt256());\r\n    }\r\n\r\n    function borrow(Vault _vault, uint256 _amount) public vaultExists(_vault) {\r\n        require(_vault.owner() == msg.sender && _amount.toInt256() <= getAvailableCredit(_vault));\r\n        _vault.setRawDebt(_vault.rawDebt().plus(debtActualToRaw(_amount)));\r\n        _vault.setTotalBorrowed(_vault.totalBorrowed().plus(_amount));\r\n        pegInstance.debtToken().issue(msg.sender, _amount);\r\n        pegInstance.emitBorrow(_vault, _amount);\r\n    }\r\n\r\n    function repay(Vault _vault, uint256 _amount) public vaultExists(_vault) {\r\n        uint amountToRepay = _amount;\r\n        if (actualDebt(_vault) < _amount) amountToRepay = actualDebt(_vault);\r\n        pegInstance.debtToken().destroy(msg.sender, amountToRepay);\r\n        _vault.setRawDebt(_vault.rawDebt().minus(debtActualToRaw(amountToRepay)));\r\n        _vault.setTotalBorrowed(_vault.totalBorrowed().minus(amountToRepay));\r\n        pegInstance.emitRepay(_vault, amountToRepay);\r\n    }\r\n\r\n    function requiredCollateral(Vault _vault) public view vaultExists(_vault) returns (uint256) {\r\n        return actualDebt(_vault).times(1e12) / pegInstance.oracle().getValue() / pegInstance.maxBorrowLTV();\r\n    }\r\n\r\n    function getExcessCollateral(Vault _vault) public view returns (int256) {\r\n        return int(pegNetworkToken.balanceOf(_vault)).minus(int(requiredCollateral(_vault)));\r\n    }\r\n\r\n    function liquidate(Vault _vault) public {\r\n        require(actualDebt(_vault) > 0);\r\n        uint requiredPEG = actualDebt(_vault).times(1e12) / pegInstance.oracle().getValue() / pegInstance.liquidationRatio();\r\n        require(pegNetworkToken.balanceOf(_vault) < requiredPEG);\r\n        require(pegInstance.debtToken().balanceOf(msg.sender) >= actualDebt(_vault));\r\n        pegInstance.debtToken().destroy(msg.sender, actualDebt(_vault));\r\n        _vault.setRawDebt(0);\r\n        _vault.setOwner(msg.sender);\r\n    }\r\n\r\n    function reportPriceToTargetValue(bool _aboveValue) public authOnly {\r\n        if(_aboveValue) {\r\n            pegInstance.setDebtScalingRate(pegInstance.debtScalingPerBlock().plus(1e8));\r\n            pegInstance.setDebtTokenScalingRate(pegInstance.debtTokenScalingPerBlock().plus(1e8));\r\n        }else{\r\n            pegInstance.setDebtScalingRate(pegInstance.debtScalingPerBlock().minus(1e8));\r\n            pegInstance.setDebtTokenScalingRate(pegInstance.debtTokenScalingPerBlock().minus(1e8));\r\n        }\r\n    }\r\n\r\n    function debtRawToActual(uint256 _raw) public view returns(uint256) {\r\n        return _raw.times(1e18) / pegInstance.debtScalingFactor();\r\n    }\r\n\r\n    function debtActualToRaw(uint256 _actual) public view returns(uint256) {\r\n        return _actual.times(pegInstance.debtScalingFactor()) / 1e18;\r\n    }\r\n\r\n    function withdrawExcessCollateral(Vault _vault, address _to, uint256 _amount) public {\r\n        require(msg.sender == _vault.owner());\r\n        require(_amount.toInt256() <= getExcessCollateral(_vault));\r\n        _vault.payoutPEG(_to, _amount);\r\n        pegInstance.emitWithdraw(_vault, _amount);\r\n    }\r\n\r\n    function actualDebt(Vault _vault) public view returns(uint) {\r\n        return debtRawToActual(_vault.rawDebt());\r\n    }\r\n}\r\n\r\n\r\ncontract PegInstance {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeMath for int256;\r\n\r\n    ISmartToken public pegNetworkToken;\r\n    uint8 public constant version = 0;\r\n    IPegOracle public oracle;\r\n    DebtToken public debtToken;\r\n    PegLogic public pegLogic;\r\n    address[] public vaults;\r\n    mapping (address => bool) public vaultExists;\r\n    mapping (address => bool) public authorized;\r\n    uint32 public liquidationRatio = 850000;\r\n    uint32 public maxBorrowLTV = 100000;\r\n\r\n    uint256 public lastDebtTokenScalingFactor = 1e18;\r\n    uint256 public lastDebtTokenScalingRetarget;\r\n    int256 public debtTokenScalingPerBlock;\r\n\r\n    uint256 public lastDebtScalingFactor = 1e18;\r\n    uint256 public lastDebtScalingRetarget;\r\n    int256 public debtScalingPerBlock;\r\n\r\n    uint256 public amountMinted;\r\n\r\n    event LiquidateVault(address indexed _vault);\r\n    event Borrow(address indexed _vault, uint256 amount);\r\n    event Repay(address indexed _vault, uint256 amount);\r\n    event Withdraw(address indexed _vault, uint256 amount);\r\n    event LiquidationRatioUpdate(int _old, int _new);\r\n    event MaxBorrowUpdate(uint32 _old, uint32 _new);\r\n    event DebtTokenScalingRateUpdate(int _old, int _new);\r\n    event DebtScalingRateUpdate(int _old, int _new);\r\n    event NewVault(address indexed _vault, address indexed _vaultOwner);\r\n    event LogicUpgrade(address _old, address _new);\r\n    event DebtTokenUpgrade(address _old, address _new);\r\n    event OracleUpgrade(address _old, address _new);\r\n    event Authorize(address _address, bool _auth);\r\n\r\n    constructor(ISmartToken _pegNetworkToken) public {\r\n        pegNetworkToken = _pegNetworkToken;\r\n        authorized[msg.sender] = true;\r\n    }\r\n\r\n    modifier authOnly() {\r\n        require(authorized[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    function setDebtToken(DebtToken _debtToken) public authOnly {\r\n        emit DebtTokenUpgrade(address(debtToken), address(_debtToken));\r\n        debtToken = _debtToken;\r\n    }\r\n\r\n    function setOracle(IPegOracle _oracle) public authOnly {\r\n        emit OracleUpgrade(address(oracle), address(_oracle));\r\n        oracle = _oracle;\r\n    }\r\n\r\n    function setPegLogic(PegLogic _pegLogic) public authOnly {\r\n        emit LogicUpgrade(address(pegLogic), address(_pegLogic));\r\n        authorized[address(_pegLogic)] = true;\r\n        authorized[address(pegLogic)] = false;\r\n        pegLogic = _pegLogic;\r\n    }\r\n\r\n    function authorize(address _address, bool _auth) public authOnly {\r\n        emit Authorize(_address, _auth);\r\n        authorized[_address] = _auth;\r\n    }\r\n\r\n    function setLiquidationRatio(uint32 _liquidationRatio) public authOnly {\r\n        emit LiquidationRatioUpdate(liquidationRatio, _liquidationRatio);\r\n        liquidationRatio = _liquidationRatio;\r\n    }\r\n\r\n    function setMaxBorrowLTV(uint32 _maxBorrowLTV) public authOnly {\r\n        emit MaxBorrowUpdate(maxBorrowLTV, _maxBorrowLTV);\r\n        maxBorrowLTV = _maxBorrowLTV;\r\n    }\r\n\r\n    function setDebtTokenScalingRate(int256 _debtTokenScalingPerBlock) public authOnly {\r\n        emit DebtTokenScalingRateUpdate(debtTokenScalingPerBlock, _debtTokenScalingPerBlock);\r\n        lastDebtTokenScalingFactor = debtTokenScalingFactor();\r\n        lastDebtTokenScalingRetarget = block.number;\r\n        debtTokenScalingPerBlock = _debtTokenScalingPerBlock;\r\n    }\r\n\r\n    function setDebtScalingRate(int256 _debtScalingPerBlock) public authOnly {\r\n        emit DebtScalingRateUpdate(debtScalingPerBlock, _debtScalingPerBlock);\r\n        lastDebtScalingFactor = debtScalingFactor();\r\n        lastDebtScalingRetarget = block.number;\r\n        debtScalingPerBlock = _debtScalingPerBlock;\r\n    }\r\n\r\n    function setAmountMinted(uint _amountMinted) public authOnly {\r\n        amountMinted = _amountMinted;\r\n    }\r\n\r\n    function addNewVault(Vault _vault, address _vaultOwner) public authOnly {\r\n        emit NewVault(address(_vault), _vaultOwner);\r\n        vaults.push(_vault);\r\n        vaultExists[_vault] = true;\r\n    }\r\n\r\n    function emitBorrow(Vault _vault, uint256 _amount) public authOnly {\r\n        emit Borrow(address(_vault), _amount);\r\n    }\r\n\r\n    function emitRepay(Vault _vault, uint256 _amount) public authOnly {\r\n        emit Repay(address(_vault), _amount);\r\n    }\r\n\r\n    function emitWithdraw(Vault _vault, uint256 _amount) public authOnly {\r\n        emit Withdraw(address(_vault), _amount);\r\n    }\r\n\r\n    function emitLiquidateVault(Vault _vault) public authOnly {\r\n        emit LiquidateVault(address(_vault));\r\n    }\r\n\r\n    function getVaults() public view returns (address[]) {\r\n        return vaults;\r\n    }\r\n\r\n    function debtTokenScalingFactor() public view returns (uint) {\r\n        return uint(int(lastDebtTokenScalingFactor).plus(debtTokenScalingPerBlock.times(int(block.number.minus(lastDebtTokenScalingRetarget)))));\r\n    }\r\n\r\n    function debtScalingFactor() public view returns (uint) {\r\n        return uint(int(lastDebtScalingFactor).plus(debtScalingPerBlock.times(int(block.number.minus(lastDebtScalingRetarget)))));\r\n    }\r\n\r\n    function transferERC20Token(IERC20Token _token, address _to, uint256 _amount) public authOnly {\r\n        _token.transfer(_to, _amount);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DebtToken is IERC20Token {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n\r\n    PegInstance public pegInstance;\r\n\r\n    uint256 public rawTotalSupply;\r\n    mapping (address => uint256) public rawBalance;\r\n    mapping (address => mapping (address => uint256)) public rawAllowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n    event Issuance(uint256 amount);\r\n    event Destruction(uint256 amount);\r\n\r\n    constructor(string _name, string _symbol, PegInstance _pegInstance) public {\r\n        require(bytes(_name).length > 0 && bytes(_symbol).length > 0);\r\n        name = _name;\r\n        symbol = _symbol;\r\n        pegInstance = _pegInstance;\r\n    }\r\n\r\n    modifier validAddress(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier authOnly() {\r\n        require(pegInstance.authorized(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function rawToActual(uint256 _raw) public view returns(uint256) {\r\n        return _raw.times(1e18) / pegInstance.debtTokenScalingFactor();\r\n    }\r\n\r\n    function actualToRaw(uint256 _actual) public view returns(uint256) {\r\n        return _actual.times(pegInstance.debtTokenScalingFactor()) / 1e18;\r\n    }\r\n\r\n    function balanceOf(address _address) public view returns(uint256) {\r\n        return rawToActual(rawBalance[_address]);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return rawToActual(rawTotalSupply);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return rawToActual(rawAllowance[_owner][_spender]);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public validAddress(_to) returns (bool) {\r\n        rawBalance[msg.sender] = rawBalance[msg.sender].minus(actualToRaw(_amount));\r\n        rawBalance[_to] = rawBalance[_to].plus(actualToRaw(_amount));\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) public validAddress(_from) validAddress(_to) returns (bool) {\r\n        rawAllowance[_from][msg.sender] = rawAllowance[_from][msg.sender].minus(actualToRaw(_amount));\r\n        rawBalance[_from] = rawBalance[_from].minus(actualToRaw(_amount));\r\n        rawBalance[_to] = rawBalance[_to].plus(actualToRaw(_amount));\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public validAddress(_spender) returns (bool) {\r\n        require(_amount == 0 || rawAllowance[msg.sender][_spender] == 0);\r\n        rawAllowance[msg.sender][_spender] = actualToRaw(_amount);\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function issue(address _to, uint256 _amount) public validAddress(_to) authOnly {\r\n        rawTotalSupply = rawTotalSupply.plus(actualToRaw(_amount));\r\n        rawBalance[_to] = rawBalance[_to].plus(actualToRaw(_amount));\r\n        emit Issuance(_amount);\r\n        emit Transfer(this, _to, _amount);\r\n    }\r\n\r\n    function destroy(address _from, uint256 _amount) public validAddress(_from) authOnly {\r\n        rawBalance[_from] = rawBalance[_from].minus(actualToRaw(_amount));\r\n        rawTotalSupply = rawTotalSupply.minus(actualToRaw(_amount));\r\n        emit Transfer(_from, this, _amount);\r\n        emit Destruction(_amount);\r\n    }\r\n\r\n    function setName(string _name) public authOnly {\r\n        name = _name;\r\n    }\r\n\r\n    function setSymbol(string _symbol) public authOnly {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function transferERC20Token(IERC20Token _token, address _to, uint256 _amount) validAddress(_to) public {\r\n        require(pegInstance.authorized(msg.sender));\r\n        _token.transfer(_to, _amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actual\",\"type\":\"uint256\"}],\"name\":\"actualToRaw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rawBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20Token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rawTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pegInstance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"rawAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_raw\",\"type\":\"uint256\"}],\"name\":\"rawToActual\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_pegInstance\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issuance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Destruction\",\"type\":\"event\"}]","ContractName":"DebtToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000003d6a8a3d37feca3f8e988a25d267312d35fe3879000000000000000000000000000000000000000000000000000000000000000d5045473a555320446f6c6c61720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000075045473a55534400000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://42490077827efb1d2e18d063ee25eeae043d42d756a41b8e08d5b68542d7d78e"}]}