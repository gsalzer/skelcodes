{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/zeppelin/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/PAXImplementation.sol\r\n\r\npragma experimental \"v0.5.0\";\r\n\r\n\r\n\r\n/**\r\n * @title PAXImplementation\r\n * @dev this contract is a Pausable ERC20 token with Burn and Mint\r\n * controleld by a central SupplyController. By implementing PaxosImplementation\r\n * this contract also includes external methods for setting\r\n * a new implementation contract for the Proxy.\r\n * NOTE: The storage defined here will actually be held in the Proxy\r\n * contract and all calls to this contract should be made through\r\n * the proxy, including admin actions done as owner or supplyController.\r\n * Any call to transfer against this contract should fail\r\n * with insufficient funds since no tokens will be issued there.\r\n */\r\ncontract PAXImplementation {\r\n\r\n    /**\r\n     * MATH\r\n     */\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * DATA\r\n     */\r\n\r\n    // INITIALIZATION DATA\r\n    bool private initialized = false;\r\n\r\n    // ERC20 BASIC DATA\r\n    mapping(address => uint256) internal balances;\r\n    uint256 internal totalSupply_;\r\n    string public constant name = \"PAX\"; // solium-disable-line uppercase\r\n    string public constant symbol = \"PAX\"; // solium-disable-line uppercase\r\n    uint8 public constant decimals = 18; // solium-disable-line uppercase\r\n\r\n    // ERC20 DATA\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    // OWNER DATA\r\n    address public owner;\r\n\r\n    // PAUSABILITY DATA\r\n    bool public paused = false;\r\n\r\n    // LAW ENFORCEMENT DATA\r\n    address public lawEnforcementRole;\r\n    mapping(address => bool) internal frozen;\r\n\r\n    // SUPPLY CONTROL DATA\r\n    address public supplyController;\r\n\r\n    /**\r\n     * EVENTS\r\n     */\r\n\r\n    // ERC20 BASIC EVENTS\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // ERC20 EVENTS\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    // OWNABLE EVENTS\r\n    event OwnershipTransferred(\r\n        address indexed oldOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    // PAUSABLE EVENTS\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    // LAW ENFORCEMENT EVENTS\r\n    event AddressFrozen(address indexed addr);\r\n    event AddressUnfrozen(address indexed addr);\r\n    event FrozenAddressWiped(address indexed addr);\r\n    event LawEnforcementRoleSet (\r\n        address indexed oldLawEnforcementRole,\r\n        address indexed newLawEnforcementRole\r\n    );\r\n\r\n    // SUPPLY CONTROL EVENTS\r\n    event SupplyIncreased(address indexed to, uint256 value);\r\n    event SupplyDecreased(address indexed from, uint256 value);\r\n    event SupplyControllerSet(\r\n        address indexed oldSupplyController,\r\n        address indexed newSupplyController\r\n    );\r\n\r\n    /**\r\n     * FUNCTIONALITY\r\n     */\r\n\r\n    // INITIALIZATION FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev sets 0 initials tokens, the owner, and the supplyController.\r\n     * this serves as the constructor for the proxy but compiles to the\r\n     * memory model of the Implementation contract.\r\n     */\r\n    function initialize() public {\r\n        require(!initialized, \"already initialized\");\r\n        owner = msg.sender;\r\n        lawEnforcementRole = address(0);\r\n        totalSupply_ = 0;\r\n        supplyController = msg.sender;\r\n        initialized = true;\r\n    }\r\n\r\n    /**\r\n     * The constructor is used here to ensure that the implementation\r\n     * contract is initialized. An uncontrolled implementation\r\n     * contract might lead to misleading state\r\n     * for users who accidentally interact with it.\r\n     */\r\n    constructor() public {\r\n        initialize();\r\n        pause();\r\n    }\r\n\r\n    // ERC20 BASIC FUNCTIONALITY\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(_to != address(0), \"cannot transfer to address zero\");\r\n        require(!frozen[_to] && !frozen[msg.sender], \"address frozen\");\r\n        require(_value <= balances[msg.sender], \"insufficient funds\");\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _addr The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _addr) public view returns (uint256) {\r\n        return balances[_addr];\r\n    }\r\n\r\n    // ERC20 FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n    {\r\n        require(_to != address(0), \"cannot transfer to address zero\");\r\n        require(!frozen[_to] && !frozen[_from] && !frozen[msg.sender], \"address frozen\");\r\n        require(_value <= balances[_from], \"insufficient funds\");\r\n        require(_value <= allowed[_from][msg.sender], \"insufficient allowance\");\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(!frozen[_spender] && !frozen[msg.sender], \"address frozen\");\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // OWNER FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"cannot transfer ownership to address zero\");\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    // PAUSABILITY FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"whenNotPaused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyOwner {\r\n        require(!paused, \"already paused\");\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyOwner {\r\n        require(paused, \"already unpaused\");\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    // LAW ENFORCEMENT FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Sets a new law enforcement role address.\r\n     * @param _newLawEnforcementRole The new address allowed to freeze/unfreeze addresses and seize their tokens.\r\n     */\r\n    function setLawEnforcementRole(address _newLawEnforcementRole) public {\r\n        require(msg.sender == lawEnforcementRole || msg.sender == owner, \"only lawEnforcementRole or Owner\");\r\n        emit LawEnforcementRoleSet(lawEnforcementRole, _newLawEnforcementRole);\r\n        lawEnforcementRole = _newLawEnforcementRole;\r\n    }\r\n\r\n    modifier onlyLawEnforcementRole() {\r\n        require(msg.sender == lawEnforcementRole, \"onlyLawEnforcementRole\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Freezes an address balance from being transferred.\r\n     * @param _addr The new address to freeze.\r\n     */\r\n    function freeze(address _addr) public onlyLawEnforcementRole {\r\n        require(!frozen[_addr], \"address already frozen\");\r\n        frozen[_addr] = true;\r\n        emit AddressFrozen(_addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Unfreezes an address balance allowing transfer.\r\n     * @param _addr The new address to unfreeze.\r\n     */\r\n    function unfreeze(address _addr) public onlyLawEnforcementRole {\r\n        require(frozen[_addr], \"address already unfrozen\");\r\n        frozen[_addr] = false;\r\n        emit AddressUnfrozen(_addr);\r\n    }\r\n\r\n    /**\r\n     * @dev Wipes the balance of a frozen address, burning the tokens\r\n     * and setting the approval to zero.\r\n     * @param _addr The new frozen address to wipe.\r\n     */\r\n    function wipeFrozenAddress(address _addr) public onlyLawEnforcementRole {\r\n        require(frozen[_addr], \"address is not frozen\");\r\n        uint256 _balance = balances[_addr];\r\n        balances[_addr] = 0;\r\n        totalSupply_ = totalSupply_.sub(_balance);\r\n        emit FrozenAddressWiped(_addr);\r\n        emit SupplyDecreased(_addr, _balance);\r\n        emit Transfer(_addr, address(0), _balance);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _addr The address to check if frozen.\r\n    * @return A bool representing whether the given address is frozen.\r\n    */\r\n    function isFrozen(address _addr) public view returns (bool) {\r\n        return frozen[_addr];\r\n    }\r\n\r\n    // SUPPLY CONTROL FUNCTIONALITY\r\n\r\n    /**\r\n     * @dev Sets a new supply controller address.\r\n     * @param _newSupplyController The address allowed to burn/mint tokens to control supply.\r\n     */\r\n    function setSupplyController(address _newSupplyController) public {\r\n        require(msg.sender == supplyController || msg.sender == owner, \"only SupplyController or Owner\");\r\n        require(_newSupplyController != address(0), \"cannot set supply controller to address zero\");\r\n        emit SupplyControllerSet(supplyController, _newSupplyController);\r\n        supplyController = _newSupplyController;\r\n    }\r\n\r\n    modifier onlySupplyController() {\r\n        require(msg.sender == supplyController, \"onlySupplyController\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Increases the total supply by minting the specified number of tokens to the supply controller account.\r\n     * @param _value The number of tokens to add.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function increaseSupply(uint256 _value) public onlySupplyController returns (bool success) {\r\n        totalSupply_ = totalSupply_.add(_value);\r\n        balances[supplyController] = balances[supplyController].add(_value);\r\n        emit SupplyIncreased(supplyController, _value);\r\n        emit Transfer(address(0), supplyController, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases the total supply by burning the specified number of tokens from the supply controller account.\r\n     * @param _value The number of tokens to remove.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function decreaseSupply(uint256 _value) public onlySupplyController returns (bool success) {\r\n        require(_value <= balances[supplyController], \"not enough supply\");\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[supplyController] = balances[supplyController].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit SupplyDecreased(supplyController, _value);\r\n        emit Transfer(supplyController, address(0), _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLawEnforcementRole\",\"type\":\"address\"}],\"name\":\"setLawEnforcementRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSupplyController\",\"type\":\"address\"}],\"name\":\"setSupplyController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseSupply\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lawEnforcementRole\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseSupply\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"wipeFrozenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"FrozenAddressWiped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldLawEnforcementRole\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newLawEnforcementRole\",\"type\":\"address\"}],\"name\":\"LawEnforcementRoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SupplyIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SupplyDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldSupplyController\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newSupplyController\",\"type\":\"address\"}],\"name\":\"SupplyControllerSet\",\"type\":\"event\"}]","ContractName":"PAXImplementation","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c6d215efcd1577af805e38b29c638a331e584cef41962333725dcd7a9ed7b433"}]}