{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// © 2018 SafeBlocks LTD.  All rights reserved.\r\n\r\n/*\r\n  _____            __          ____    _                  _\r\n / ____|          / _|        |  _ \\  | |                | |\r\n| (___     __ _  | |_    ___  | |_) | | |   ___     ___  | | __  ___\r\n \\___ \\   / _` | |  _|  / _ \\ |  _ <  | |  / _ \\   / __| | |/ / / __|\r\n ____) | | (_| | | |   |  __/ | |_) | | | | (_) | | (__  |   <  \\__ \\\r\n|_____/   \\__,_| |_|    \\___| |____/  |_|  \\___/   \\___| |_|\\_\\ |___/\r\n\r\n*/\r\n// @author SafeBlocks\r\n// @date 30/04/2018\r\n\r\ncontract SafeBlocksProxy {\r\n\r\n    event ContractDeployed(address sourceAddress, string cid, uint blockNumber);\r\n    event Operation(address sourceAddress, bool approved, address token, uint amount, address destination, uint blockNumber);\r\n    event ConfigurationChanged(address sender, address newConfiguration, string message);\r\n\r\n    address owner;\r\n    address superOwner;\r\n    bool isBypassMode;\r\n    bytes32 hashedPwd;\r\n    SafeBlocksFirewall safeBlocksFirewall;\r\n\r\n    constructor(address _superOwner, bytes32 _hashedPwd) public {\r\n        owner = msg.sender;\r\n        superOwner = _superOwner;\r\n        hashedPwd = _hashedPwd;\r\n        isBypassMode = false;\r\n    }\r\n\r\n    //*************************************** modifiers ****************************************\r\n\r\n    modifier onlyContractOwner {\r\n        require(owner == msg.sender, \"You are not allowed to run this function, required role: Contract-Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySuperOwner {\r\n        require(superOwner == msg.sender, \"You are not allowed to run this function, required role: Super-Owner\");\r\n        _;\r\n    }\r\n\r\n    //* Matching  the given pwd and setting the new one in case of a successful match *//\r\n    modifier onlySuperOwnerWithPwd(string pwd, bytes32 newHashedPwd) {\r\n        bytes32 hashedInput = keccak256(abi.encodePacked(pwd));\r\n        require(superOwner == msg.sender && hashedInput == hashedPwd, \"You are not allowed to run this function, required role: Super-Owner with Password\");\r\n        hashedPwd = newHashedPwd;\r\n        _;\r\n    }\r\n\r\n    //*************************************** restricted ****************************************\r\n\r\n    function setSuperOwner(address newSuperOwner, string pwd, bytes32 newHashedPwd)\r\n    onlySuperOwnerWithPwd(pwd, newHashedPwd)\r\n    public {\r\n        superOwner = newSuperOwner;\r\n        emit ConfigurationChanged(msg.sender, newSuperOwner, \"a new Super-Owner has been assigned\");\r\n    }\r\n\r\n    function setOwner(address newOwner, string pwd, bytes32 newHashedPwd)\r\n    onlySuperOwnerWithPwd(pwd, newHashedPwd)\r\n    public {\r\n        owner = newOwner;\r\n        emit ConfigurationChanged(msg.sender, newOwner, \"a new Owner has been assigned\");\r\n    }\r\n\r\n    function setBypassForAll(bool _bypass)\r\n    onlySuperOwner\r\n    public {\r\n        isBypassMode = _bypass;\r\n        emit ConfigurationChanged(msg.sender, msg.sender, \"a new Bypass-Mode has been assigned\");\r\n    }\r\n\r\n    function getBypassStatus()\r\n    public\r\n    view\r\n    onlyContractOwner\r\n    returns (bool){\r\n        return isBypassMode;\r\n    }\r\n\r\n    function setSBFWContractAddress(address _sbfwAddress)\r\n    onlyContractOwner\r\n    public {\r\n        safeBlocksFirewall = SafeBlocksFirewall(_sbfwAddress);\r\n        emit ConfigurationChanged(msg.sender, _sbfwAddress, \"a new address has been assigned to SafeBlocksFirewall\");\r\n    }\r\n\r\n    //*************************************** public ****************************************\r\n\r\n    function allowTransaction(uint _amount, address _destination, address _token)\r\n    public\r\n    returns (bool) {\r\n        address contractAddress = msg.sender;\r\n\r\n        if (isBypassMode) {\r\n            emit Operation(contractAddress, true, _token, _amount, _destination, block.number);\r\n            return true;\r\n        }\r\n        bool result = safeBlocksFirewall.allowTransaction(contractAddress, _amount, _destination, _token);\r\n        emit Operation(contractAddress, result, _token, _amount, _destination, block.number);\r\n        return result;\r\n    }\r\n\r\n    function contractDeployedNotice(string _cid, uint _blockNumber)\r\n    public {\r\n        emit ContractDeployed(msg.sender, _cid, _blockNumber);\r\n    }\r\n\r\n}\r\n\r\ninterface SafeBlocksFirewall {\r\n\r\n    /*\r\n     * Validating the transaction according to a predefined security policy\r\n     */\r\n    function allowTransaction(\r\n        address _contractAddress,\r\n        uint _amount,\r\n        address _destination,\r\n        address _token)\r\n    external\r\n    returns(bool);\r\n}\r\n// © 2018 SafeBlocks LTD.  All rights reserved.","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_destination\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"allowTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBypassStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sbfwAddress\",\"type\":\"address\"}],\"name\":\"setSBFWContractAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"pwd\",\"type\":\"string\"},{\"name\":\"newHashedPwd\",\"type\":\"bytes32\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bypass\",\"type\":\"bool\"}],\"name\":\"setBypassForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cid\",\"type\":\"string\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"contractDeployedNotice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSuperOwner\",\"type\":\"address\"},{\"name\":\"pwd\",\"type\":\"string\"},{\"name\":\"newHashedPwd\",\"type\":\"bytes32\"}],\"name\":\"setSuperOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_superOwner\",\"type\":\"address\"},{\"name\":\"_hashedPwd\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sourceAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Operation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newConfiguration\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ConfigurationChanged\",\"type\":\"event\"}]","ContractName":"SafeBlocksProxy","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000b4f1117377af8a4b7c0653cfcfe75e9854f72050a4c60da749fd2604fb7cb1a852d96dde29f04ee23b3614054fb361b451d307a","Library":"","SwarmSource":"bzzr://9491f4ad7e5fa2d6a9acd61ad84eae09f95c1869ae85867a57d10957ffb31137"}]}