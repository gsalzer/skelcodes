{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Erc20Token {\r\n    function balanceOf(address _owner) constant public returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract AirDropContract is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    Erc20Token public tokenRewardContract;\r\n\r\n    uint256 public totalAirDropToken;\r\n\r\n    address public collectorAddress;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    event FundTransfer(address backer, uint256 amount, bool isContribution);\r\n    event Additional(uint amount);\r\n    event Burn(uint amount);\r\n    event CollectAirDropTokenBack(address collectorAddress,uint256 airDropTokenNum);\r\n\r\n    /**\r\n     * Constructor function\r\n     */\r\n    constructor(\r\n        address _tokenRewardContract,\r\n        address _collectorAddress\r\n    ) public {\r\n        totalAirDropToken = 2e7;\r\n        tokenRewardContract = Erc20Token(_tokenRewardContract);\r\n        collectorAddress = _collectorAddress;\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function() payable public {\r\n        require(collectorAddress != 0x0);\r\n        require(totalAirDropToken > 0);\r\n\r\n        uint256 ethAmount = msg.value.div(1e18);\r\n        uint256 amount = ethAmount.mul(23000);\r\n        require(amount > 0);\r\n\r\n        totalAirDropToken = totalAirDropToken.sub(amount);\r\n        tokenRewardContract.transfer(msg.sender, amount.mul(1e18));\r\n\r\n        address wallet = collectorAddress;\r\n        uint256 weiAmount = msg.value;\r\n        wallet.transfer(weiAmount);\r\n\r\n        emit FundTransfer(msg.sender, amount, true);\r\n    }\r\n\r\n    /**\r\n     *  Add airdrop tokens\r\n     */\r\n    function additional(uint256 amount) public onlyOwner {\r\n        require(amount > 0);\r\n\r\n        totalAirDropToken = totalAirDropToken.add(amount);\r\n        emit Additional(amount);\r\n    }\r\n\r\n    /**\r\n    *  burn airdrop tokens\r\n    */\r\n    function burn(uint256 amount) public onlyOwner {\r\n        require(amount > 0);\r\n\r\n        totalAirDropToken = totalAirDropToken.sub(amount);\r\n        emit Burn(amount);\r\n    }\r\n\r\n\r\n    /**\r\n     *  The owner of the contract modifies the recovery address of the token\r\n     */\r\n    function modifyCollectorAddress(address newCollectorAddress) public onlyOwner returns (bool) {\r\n        collectorAddress = newCollectorAddress;\r\n    }\r\n\r\n    /**\r\n     *  Recovery of remaining tokens\r\n     */\r\n    function collectAirDropTokenBack(uint256 airDropTokenNum) public onlyOwner {\r\n        require(totalAirDropToken > 0);\r\n        require(collectorAddress != 0x0);\r\n\r\n        if (airDropTokenNum > 0) {\r\n            tokenRewardContract.transfer(collectorAddress, airDropTokenNum * 1e18);\r\n        } else {\r\n            tokenRewardContract.transfer(collectorAddress, totalAirDropToken * 1e18);\r\n            totalAirDropToken = 0;\r\n        }\r\n        emit CollectAirDropTokenBack(collectorAddress, airDropTokenNum);\r\n    }\r\n\r\n    /**\r\n     *  Recovery donated ether\r\n     */\r\n    function collectEtherBack() public onlyOwner {\r\n        uint256 b = address(this).balance;\r\n        require(b > 0);\r\n        require(collectorAddress != 0x0);\r\n\r\n        collectorAddress.transfer(b);\r\n    }\r\n\r\n    /**\r\n     *  Get the tokenAddress token balance of someone\r\n     */\r\n    function getTokenBalance(address tokenAddress, address who) view public returns (uint){\r\n        Erc20Token t = Erc20Token(tokenAddress);\r\n        return t.balanceOf(who);\r\n    }\r\n\r\n    /**\r\n     *  Recycle other ERC20 tokens\r\n     */\r\n    function collectOtherTokens(address tokenContract) onlyOwner public returns (bool) {\r\n        Erc20Token t = Erc20Token(tokenContract);\r\n\r\n        uint256 b = t.balanceOf(address(this));\r\n        return t.transfer(collectorAddress, b);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newCollectorAddress\",\"type\":\"address\"}],\"name\":\"modifyCollectorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenRewardContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"collectOtherTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectEtherBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAirDropToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"airDropTokenNum\",\"type\":\"uint256\"}],\"name\":\"collectAirDropTokenBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"additional\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenRewardContract\",\"type\":\"address\"},{\"name\":\"_collectorAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Additional\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"collectorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"airDropTokenNum\",\"type\":\"uint256\"}],\"name\":\"CollectAirDropTokenBack\",\"type\":\"event\"}]","ContractName":"AirDropContract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000420a43153da24b9e2aedcec2b8158a8653a3317e000000000000000000000000f4e72ac595f9cc7aa6ab1b25e98523c7f47ca70c","Library":"","SwarmSource":"bzzr://86c6cd23c53b3182108f63ff665b9d2f308e72ad216312171ed8fd1ef948777f"}]}