{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract EstateParticipationUnit  \r\n{\r\n    using SafeMath for uint256;  \r\n    \r\n    enum VoteType\r\n    {\r\n        NONE,\r\n        ALLOW_TRANSFER,\r\n        CHANGE_ADMIN_WALLET,\r\n        CHANGE_BUY_SELL_LIMITS,\r\n        CHANGE_BUY_SELL_PRICE,\r\n        SEND_WEI_FROM_EXCHANGE,\r\n        SEND_WEI_FROM_PAYMENT,\r\n        TRANSFER_EXCHANGE_WEI_TO_PAYMENT,\r\n        START_PAYMENT\r\n    }\r\n    \r\n    struct VoteData\r\n    {\r\n        bool voteYes;\r\n        bool voteCancel;\r\n        address person;\r\n        uint lastVoteId;\r\n    }\r\n    \r\n    struct PaymentData\r\n    {\r\n        uint weiTotal;\r\n        uint weiReceived;\r\n        uint unitsTotal;\r\n        uint unitsReceived;\r\n        uint weiForSingleUnit;\r\n    }\r\n    \r\n    struct BalanceData\r\n    {\r\n        uint balance;\r\n        uint transferAllowed;\r\n        uint balancePaymentSeries;\r\n        VoteData vote;\r\n        mapping (address => uint) allowed;\r\n        bytes32 paymentBalances;\r\n    }\r\n    \r\n    struct ChangeBuySellPriceVoteData\r\n    {\r\n        bool ignoreSecurityLimits;\r\n        uint buyPrice;\r\n        uint buyAddUnits;\r\n        uint sellPrice;\r\n        uint sellAddUnits;\r\n    }\r\n    \r\n    struct AllowTransferVoteData\r\n    {\r\n        address addressTo;\r\n        uint amount;\r\n    }\r\n    \r\n    struct ChangeAdminAddressVoteData\r\n    {\r\n        uint index;\r\n        address adminAddress;\r\n    }\r\n    \r\n    struct ChangeBuySellLimitsVoteData\r\n    {\r\n        uint buyPriceMin;\r\n        uint buyPriceMax;\r\n        uint sellPriceMin;\r\n        uint sellPriceMax;\r\n    }\r\n    \r\n    struct SendWeiFromExchangeVoteData\r\n    {\r\n        address addressTo;\r\n        uint amount;\r\n    }\r\n    \r\n    struct SendWeiFromPaymentVoteData\r\n    {\r\n        address addressTo;\r\n        uint amount;\r\n    }\r\n    \r\n    struct TransferWeiFromExchangeToPaymentVoteData\r\n    {\r\n        bool reverse;\r\n        uint amount;\r\n    }\r\n    \r\n    struct StartPaymentVoteData\r\n    {\r\n        uint weiToShare;\r\n        uint date;\r\n    }\r\n    \r\n    struct PriceSumData\r\n    {\r\n        uint price;\r\n        uint amount;\r\n    }\r\n    \r\n    modifier onlyAdmin()\r\n    {\r\n        require (isAdmin(msg.sender));\r\n        _;\r\n    }\r\n    \r\n    address private mainBalanceAdmin;\r\n    address private buyBalanceAdmin;\r\n    address private sellBalanceAdmin;\r\n    string public constant name = \"Estate Participation Unit\";\r\n    string public constant symbol = \"EPU\";\r\n    uint8 public constant decimals = 0;\r\n    uint public amountOfUnitsOutsideAdminWallet = 0;\r\n    uint private constant maxUnits = 200000000;\r\n    uint public paymentNumber = 0;\r\n    uint public paymentSortId = 0;\r\n    uint private paymentSeries = 0;\r\n    bytes32 private paymentHistory;\r\n    uint public weiForPayment = 0;\r\n    uint public totalAmountOfWeiPaidToUsers = 0;\r\n    uint private totalAmountOfWeiPaidToUsersPerSeries = 0;\r\n    uint private totalAmountOfWeiOnPaymentsPerSeries = 0;\r\n    uint public lastPaymentDate;\r\n    \r\n    uint private weiBuyPrice = 50000000000000000;\r\n    uint private securityWeiBuyPriceFrom = 0;\r\n    uint private securityWeiBuyPriceTo = 0;\r\n    \r\n    uint private weiSellPrice = 47000000000000000;\r\n    uint public unitsToSell = 0;\r\n    uint private securityWeiSellPriceFrom = 0;\r\n    uint private securityWeiSellPriceTo = 0;\r\n    uint public weiFromExchange = 0;\r\n    \r\n    PriceSumData private buySum;\r\n    PriceSumData private sellSum;\r\n    \r\n    uint private voteId = 0;\r\n    bool private voteInProgress;\r\n    uint private votesTotalYes;\r\n    uint private votesTotalNo;\r\n    uint private voteCancel;\r\n    \r\n    AllowTransferVoteData private allowTransferVoteData;\r\n    ChangeAdminAddressVoteData private changeAdminAddressVoteData;\r\n    ChangeBuySellLimitsVoteData private changeBuySellLimitsVoteData;\r\n    ChangeBuySellPriceVoteData private changeBuySellPriceVoteData;\r\n    SendWeiFromExchangeVoteData private sendWeiFromExchangeVoteData;\r\n    SendWeiFromPaymentVoteData private sendWeiFromPaymentVoteData;\r\n    TransferWeiFromExchangeToPaymentVoteData private transferWeiFromExchangeToPaymentVoteData;\r\n    StartPaymentVoteData private startPaymentVoteData;\r\n    \r\n    VoteType private voteType = VoteType.NONE;\r\n    \r\n    mapping(address => BalanceData) private balances;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint units);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event OnEmitNewUnitsFromMainWallet(uint units, uint totalOutside);\r\n    event OnAddNewUnitsToMainWallet(uint units, uint totalOutside);\r\n    event NewPayment(uint indexed index, uint totalWei, uint totalUnits, uint date);\r\n    event PaymentReceived(address indexed owner, uint paymentId, uint weiAmount, uint units);\r\n    event UnitsBuy(address indexed buyer, uint amount);\r\n    event UnitsSell(address indexed seller, uint amount);\r\n    event OnExchangeBuyUpdate(uint newValue, uint unitsToBuy);\r\n    event OnExchangeSellUpdate(uint newValue, uint unitsToSell);\r\n    \r\n    modifier startVoting\r\n    {\r\n        require(voteType == VoteType.NONE);\r\n        _;\r\n    }\r\n    \r\n    constructor(\r\n        uint paymentOffset,\r\n        address mainBalanceAdminAddress, \r\n        address buyBalanceAdminAddress, \r\n        address sellBalanceAdminAddress\r\n    ) \r\n    payable\r\n    public\r\n    {\r\n        paymentNumber = paymentOffset;\r\n        mainBalanceAdmin = mainBalanceAdminAddress;\r\n        buyBalanceAdmin = buyBalanceAdminAddress;\r\n        sellBalanceAdmin = sellBalanceAdminAddress;\r\n        BalanceData storage b = balances[mainBalanceAdminAddress];\r\n        b.balance = maxUnits;\r\n        weiForPayment = weiForPayment.add(msg.value);\r\n    }\r\n    \r\n    function  getAdminAccounts()\r\n    external onlyAdmin view\r\n    returns(\r\n        address mainBalanceAdminAddress, \r\n        address buyBalanceAdminAddress, \r\n        address sellBalanceAdminAddress\r\n    )\r\n    {\r\n        mainBalanceAdminAddress = mainBalanceAdmin;\r\n        buyBalanceAdminAddress = buyBalanceAdmin;\r\n        sellBalanceAdminAddress = sellBalanceAdmin;\r\n    }\r\n    \r\n    function getBuySellSum()\r\n    external onlyAdmin view\r\n    returns(\r\n        uint buyPrice,\r\n        uint buyAmount,\r\n        uint sellPrice,\r\n        uint sellAmount\r\n    )\r\n    {\r\n        buyPrice = buySum.price;\r\n        buyAmount = buySum.amount;\r\n        sellPrice = sellSum.price;\r\n        sellAmount = sellSum.amount;\r\n    }\r\n    \r\n    function getSecurityLimits() \r\n    external view \r\n    returns(\r\n        uint buyPriceFrom, \r\n        uint buyPriceTo, \r\n        uint sellPriceFrom, \r\n        uint sellPriceTo\r\n    )\r\n    {\r\n        buyPriceFrom = securityWeiBuyPriceFrom;\r\n        buyPriceTo = securityWeiBuyPriceTo;\r\n        sellPriceFrom = securityWeiSellPriceFrom;\r\n        sellPriceTo = securityWeiSellPriceTo;\r\n    }\r\n    \r\n    function getThisAddress() \r\n    external view \r\n    returns (address)\r\n    {\r\n        return address(this);\r\n    }\r\n    \r\n    function() payable external \r\n    {\r\n        weiForPayment = weiForPayment.add(msg.value);\r\n    }\r\n    \r\n     function startVotingForAllowTransfer(\r\n         address addressTo, \r\n         uint amount\r\n    )\r\n        external onlyAdmin startVoting\r\n    {\r\n        voteType = VoteType.ALLOW_TRANSFER;\r\n        allowTransferVoteData.addressTo = addressTo;\r\n        allowTransferVoteData.amount = amount;\r\n        internalStartVoting();\r\n    }\r\n    \r\n    function startVotingForChangeAdminAddress(\r\n        uint index, \r\n        address adminAddress\r\n    )\r\n        external onlyAdmin startVoting\r\n    {\r\n        require(!isAdmin(adminAddress));\r\n        voteType = VoteType.CHANGE_ADMIN_WALLET;\r\n        changeAdminAddressVoteData.index = index;\r\n        changeAdminAddressVoteData.adminAddress = adminAddress;\r\n        internalStartVoting();\r\n    }\r\n    \r\n    function startVotingForChangeBuySellLimits(\r\n        uint buyPriceMin, \r\n        uint buyPriceMax, \r\n        uint sellPriceMin, \r\n        uint sellPriceMax\r\n    )\r\n        external onlyAdmin startVoting\r\n    {\r\n        if(buyPriceMin > 0 && buyPriceMax > 0)\r\n        {\r\n            require(buyPriceMin < buyPriceMax);\r\n        }\r\n        if(sellPriceMin > 0 && sellPriceMax > 0)\r\n        {\r\n            require(sellPriceMin < sellPriceMax);\r\n        }\r\n        if(buyPriceMin > 0 && sellPriceMax > 0)\r\n        {\r\n            require(buyPriceMin >= sellPriceMax);\r\n        }\r\n        voteType = VoteType.CHANGE_BUY_SELL_LIMITS;\r\n        changeBuySellLimitsVoteData.buyPriceMin = buyPriceMin;\r\n        changeBuySellLimitsVoteData.buyPriceMax = buyPriceMax;\r\n        changeBuySellLimitsVoteData.sellPriceMin = sellPriceMin;\r\n        changeBuySellLimitsVoteData.sellPriceMax = sellPriceMax;\r\n        internalStartVoting();\r\n    }\r\n    \r\n    function startVotingForChangeBuySellPrice(\r\n        uint buyPrice, \r\n        uint buyAddUnits, \r\n        uint sellPrice, \r\n        uint sellAddUnits, \r\n        bool ignoreSecurityLimits\r\n    )\r\n        external onlyAdmin startVoting\r\n    {\r\n        require(buyPrice >= sellPrice);\r\n        require(sellAddUnits * sellPrice <= weiFromExchange);\r\n        voteType = VoteType.CHANGE_BUY_SELL_PRICE;\r\n        changeBuySellPriceVoteData.buyPrice = buyPrice;\r\n        changeBuySellPriceVoteData.buyAddUnits = buyAddUnits;\r\n        changeBuySellPriceVoteData.sellPrice = sellPrice;\r\n        changeBuySellPriceVoteData.sellAddUnits = sellAddUnits;\r\n        changeBuySellPriceVoteData.ignoreSecurityLimits = ignoreSecurityLimits;\r\n        internalStartVoting();\r\n    }\r\n    \r\n    function startVotingForSendWeiFromExchange(\r\n        address addressTo, \r\n        uint amount\r\n    )\r\n        external onlyAdmin startVoting\r\n    {\r\n        require(amount <= weiFromExchange);\r\n        voteType = VoteType.SEND_WEI_FROM_EXCHANGE;\r\n        sendWeiFromExchangeVoteData.addressTo = addressTo;\r\n        sendWeiFromExchangeVoteData.amount = amount;\r\n        internalStartVoting();\r\n    }\r\n    \r\n    function startVotingForSendWeiFromPayment(\r\n        address addressTo, \r\n        uint amount\r\n    )\r\n        external onlyAdmin startVoting\r\n    {\r\n        uint balance = address(this).balance.sub(weiFromExchange);\r\n        require(amount <= balance && amount <= weiForPayment);\r\n        voteType = VoteType.SEND_WEI_FROM_PAYMENT;\r\n        sendWeiFromPaymentVoteData.addressTo = addressTo;\r\n        sendWeiFromPaymentVoteData.amount = amount;\r\n        internalStartVoting();\r\n    }\r\n    \r\n    function startVotingForTransferWeiFromExchangeToPayment(\r\n        bool reverse,\r\n        uint amount\r\n    )\r\n        external onlyAdmin startVoting\r\n    {\r\n        if(reverse)\r\n        {\r\n            require(amount <= weiForPayment);\r\n        }\r\n        else\r\n        {\r\n            require(amount <= weiFromExchange);\r\n        }\r\n        voteType = VoteType.TRANSFER_EXCHANGE_WEI_TO_PAYMENT; \r\n        transferWeiFromExchangeToPaymentVoteData.reverse = reverse;\r\n        transferWeiFromExchangeToPaymentVoteData.amount = amount;\r\n        internalStartVoting();\r\n    }\r\n    \r\n    function startVotingForStartPayment(\r\n        uint weiToShare,\r\n        uint date\r\n    )\r\n        external onlyAdmin startVoting\r\n    {\r\n        require(weiToShare > 0 && weiToShare <= weiForPayment);\r\n        voteType = VoteType.START_PAYMENT;\r\n        startPaymentVoteData.weiToShare = weiToShare;\r\n        startPaymentVoteData.date = date;\r\n        internalStartVoting();\r\n    }\r\n    \r\n     function voteForCurrent(bool voteYes)\r\n        external onlyAdmin\r\n    {\r\n        require(voteType != VoteType.NONE);\r\n        VoteData storage d = balances[msg.sender].vote;\r\n        // already voted\r\n        if(d.lastVoteId == voteId)\r\n        {\r\n            // ...but changed mind\r\n            if(voteYes != d.voteYes)\r\n            {\r\n                if(voteYes)\r\n                {\r\n                    votesTotalYes = votesTotalYes.add(1);\r\n                    votesTotalNo = votesTotalNo.sub(1);\r\n                }\r\n                else\r\n                {\r\n                    votesTotalYes = votesTotalYes.sub(1);\r\n                    votesTotalNo = votesTotalNo.add(1);\r\n                }\r\n            }\r\n        }\r\n        // a new vote\r\n        // adding 'else' costs more gas\r\n        if(d.lastVoteId < voteId)\r\n        {\r\n            if(voteYes)\r\n            {\r\n                votesTotalYes = votesTotalYes.add(1);\r\n            }\r\n            else\r\n            {\r\n                votesTotalNo = votesTotalNo.add(1);\r\n            }\r\n        }\r\n        // 5 / 10 means something is voted out\r\n        if(votesTotalYes.mul(10).div(3) > 5)\r\n        {\r\n            // adding 'else' for each vote type costs more gas\r\n            if(voteType == VoteType.ALLOW_TRANSFER)\r\n            {\r\n                internalAllowTransfer(\r\n                    allowTransferVoteData.addressTo, \r\n                    allowTransferVoteData.amount\r\n                );\r\n            }\r\n            if(voteType == VoteType.CHANGE_ADMIN_WALLET)\r\n            {\r\n                internalChangeAdminWallet(\r\n                    changeAdminAddressVoteData.index, \r\n                    changeAdminAddressVoteData.adminAddress\r\n                );\r\n            }\r\n            if(voteType == VoteType.CHANGE_BUY_SELL_LIMITS)\r\n            {\r\n                internalChangeBuySellLimits(\r\n                    changeBuySellLimitsVoteData.buyPriceMin, \r\n                    changeBuySellLimitsVoteData.buyPriceMax, \r\n                    changeBuySellLimitsVoteData.sellPriceMin, \r\n                    changeBuySellLimitsVoteData.sellPriceMax\r\n                );\r\n            }\r\n            if(voteType == VoteType.CHANGE_BUY_SELL_PRICE)\r\n            {\r\n                internalChangeBuySellPrice(\r\n                    changeBuySellPriceVoteData.buyPrice, \r\n                    changeBuySellPriceVoteData.buyAddUnits, \r\n                    changeBuySellPriceVoteData.sellPrice, \r\n                    changeBuySellPriceVoteData.sellAddUnits,\r\n                    changeBuySellPriceVoteData.ignoreSecurityLimits\r\n                );\r\n            }\r\n            if(voteType == VoteType.SEND_WEI_FROM_EXCHANGE)\r\n            {\r\n                internalSendWeiFromExchange(\r\n                    sendWeiFromExchangeVoteData.addressTo, \r\n                    sendWeiFromExchangeVoteData.amount\r\n                );\r\n            }\r\n            if(voteType == VoteType.SEND_WEI_FROM_PAYMENT)\r\n            {\r\n                internalSendWeiFromPayment(\r\n                    sendWeiFromPaymentVoteData.addressTo, \r\n                    sendWeiFromPaymentVoteData.amount\r\n                );\r\n            }\r\n            if(voteType == VoteType.TRANSFER_EXCHANGE_WEI_TO_PAYMENT)\r\n            {\r\n                internalTransferExchangeWeiToPayment(\r\n                    transferWeiFromExchangeToPaymentVoteData.reverse,\r\n                    transferWeiFromExchangeToPaymentVoteData.amount\r\n                );\r\n            }\r\n            if(voteType == VoteType.START_PAYMENT)\r\n            {\r\n                internalStartPayment(\r\n                    startPaymentVoteData.weiToShare,\r\n                    startPaymentVoteData.date\r\n                );\r\n            }\r\n            voteType = VoteType.NONE;\r\n            internalResetVotingData();\r\n        }\r\n        if(votesTotalNo.mul(10).div(3) > 5)\r\n        {\r\n            voteType = VoteType.NONE;\r\n            internalResetVotingData();\r\n        }\r\n        d.voteYes = voteYes;\r\n        d.lastVoteId = voteId;\r\n    }\r\n    \r\n    function voteCancelCurrent() \r\n        external onlyAdmin\r\n    {\r\n        require(voteType != VoteType.NONE);\r\n        VoteData storage d = balances[msg.sender].vote;\r\n        if(d.lastVoteId <= voteId || !d.voteCancel)\r\n        {\r\n            d.voteCancel = true;\r\n            d.lastVoteId = voteId;\r\n            voteCancel++;\r\n        }\r\n        uint votesCalc = voteCancel.mul(10);\r\n        // 3 admins\r\n        votesCalc = votesCalc.div(3);\r\n        // 5 / 10 means something is voted out\r\n        if(votesCalc > 5)\r\n        {\r\n            voteType = VoteType.NONE;\r\n            internalResetVotingData();\r\n        }\r\n    }\r\n    \r\n    function addEthForSell() \r\n        external payable onlyAdmin\r\n    {\r\n        require(msg.value > 0);\r\n        weiFromExchange = weiFromExchange.add(msg.value);\r\n    }\r\n    \r\n    function addEthForPayment() \r\n        external payable\r\n    {\r\n        weiForPayment = weiForPayment.add(msg.value);\r\n    }\r\n    \r\n    function buyEPU() \r\n    public payable\r\n    {\r\n        // how many units has client bought\r\n        uint amount = msg.value.div(weiBuyPrice);\r\n        uint b = balances[buyBalanceAdmin].balance;\r\n        // can't buy more than main account balance\r\n        if(amount >= b)\r\n        {\r\n            amount = b;\r\n        }\r\n        // the needed price for bought units\r\n        uint price = amount.mul(weiBuyPrice);\r\n        weiFromExchange = weiFromExchange.add(price);\r\n        if(amount > 0)\r\n        {\r\n            buySum.price = buySum.price.add(price);\r\n            buySum.amount = buySum.amount.add(amount);\r\n            internalAllowTransfer(msg.sender, amount);\r\n           // send units to client\r\n            internalTransfer(buyBalanceAdmin, msg.sender, amount);\r\n            // emit event\r\n            emit UnitsBuy(msg.sender, amount);\r\n            //buyBalanceAdmin.transfer(price); \r\n        }\r\n        // if client sent more than needed\r\n        if(msg.value > price)\r\n        {\r\n            // send him the rest back\r\n            msg.sender.transfer(msg.value.sub(price));\r\n        }\r\n    }\r\n    \r\n    function sellEPU(uint amount) \r\n        external payable \r\n        returns(uint revenue)\r\n    {\r\n        require(amount > 0);\r\n        uint fixedAmount = amount;\r\n        BalanceData storage b = balances[msg.sender];\r\n        uint balance = b.balance;\r\n        uint max = balance < unitsToSell ? balance : unitsToSell;\r\n        if(fixedAmount > max)\r\n        {\r\n            fixedAmount = max;\r\n        }\r\n        uint price = fixedAmount.mul(weiSellPrice);\r\n        require(price > 0 && price <= weiFromExchange);\r\n        sellSum.price = sellSum.price.add(price);\r\n        sellSum.amount = sellSum.amount.add(amount);\r\n        internalTransfer(msg.sender, sellBalanceAdmin, fixedAmount);\r\n        weiFromExchange = weiFromExchange.sub(price);\r\n        emit UnitsSell(msg.sender, fixedAmount);\r\n        msg.sender.transfer(price);\r\n        return price;\r\n    }\r\n    \r\n    function checkPayment() \r\n        external\r\n    {\r\n        internalCheckPayment(msg.sender);\r\n    }\r\n    \r\n    function checkPaymentFor(\r\n        address person\r\n    )\r\n        external\r\n    {\r\n        internalCheckPayment(person);\r\n    }\r\n    \r\n    function accountData() \r\n        external view \r\n        returns (\r\n            uint unitsBalance, \r\n            uint payableUnits, \r\n            uint totalWeiToReceive, \r\n            uint weiBuyPriceForUnit, \r\n            uint buyUnitsLeft, \r\n            uint weiSellPriceForUnit, \r\n            uint sellUnitsLeft\r\n        )\r\n    {\r\n        BalanceData storage b = balances[msg.sender];\r\n        unitsBalance = b.balance;\r\n        if(b.balancePaymentSeries < paymentSeries)\r\n        {\r\n            payableUnits = unitsBalance;\r\n            for(uint i = 0; i <= paymentSortId; i++)\r\n            {\r\n                totalWeiToReceive = totalWeiToReceive.add(getPaymentWeiPerUnit(i).mul(payableUnits));\r\n            }\r\n        }\r\n        else\r\n        {\r\n            (totalWeiToReceive, payableUnits) = getAddressWeiFromPayments(b);\r\n        }\r\n        weiBuyPriceForUnit = weiBuyPrice;\r\n        buyUnitsLeft = balances[buyBalanceAdmin].balance;\r\n        weiSellPriceForUnit = weiSellPrice;\r\n        sellUnitsLeft = unitsToSell;\r\n    }\r\n    \r\n    function getBuyUnitsInformations() \r\n        external view \r\n        returns(\r\n            uint weiBuyPriceForUnit, \r\n            uint unitsLeft\r\n        )\r\n    {\r\n        weiBuyPriceForUnit = weiBuyPrice;\r\n        unitsLeft = balances[buyBalanceAdmin].balance;\r\n    }\r\n    \r\n    function getSellUnitsInformations() \r\n        external view \r\n        returns(\r\n            uint weiSellPriceForUnit, \r\n            uint unitsLeft\r\n        )\r\n    {\r\n        weiSellPriceForUnit = weiSellPrice;\r\n        unitsLeft = unitsToSell;\r\n    }\r\n    \r\n    function checkVotingForAllowTransfer() \r\n        external view onlyAdmin \r\n        returns(\r\n            address allowTo, \r\n            uint amount, \r\n            uint votesYes, \r\n            uint votesNo, \r\n            bool stillActive\r\n        )\r\n    {\r\n        require(voteType == VoteType.ALLOW_TRANSFER);\r\n        return (\r\n            allowTransferVoteData.addressTo, \r\n            allowTransferVoteData.amount, \r\n            votesTotalYes, \r\n            votesTotalNo, \r\n            voteType == VoteType.ALLOW_TRANSFER\r\n        );\r\n    }\r\n    \r\n    function checkVotingForChangeAdminAddress() \r\n        external view onlyAdmin \r\n        returns(\r\n            uint adminId, \r\n            address newAdminAddress, \r\n            uint votesYes, \r\n            uint votesNo, \r\n            bool stillActive\r\n        )\r\n    {\r\n        require(voteType == VoteType.CHANGE_ADMIN_WALLET);\r\n        return (\r\n            changeAdminAddressVoteData.index, \r\n            changeAdminAddressVoteData.adminAddress, \r\n            votesTotalYes, \r\n            votesTotalNo, \r\n            voteType == VoteType.CHANGE_ADMIN_WALLET\r\n        );\r\n    }\r\n    \r\n    function checkVotingForChangeBuySellLimits() \r\n        external view onlyAdmin \r\n        returns(\r\n            uint buyPriceMin, \r\n            uint buyPriceMax, \r\n            uint sellPriceMin, \r\n            uint sellPriceMax, \r\n            uint votesYes, \r\n            uint votesNo, \r\n            bool stillActive\r\n        )\r\n    {\r\n        require(voteType == VoteType.CHANGE_BUY_SELL_LIMITS);\r\n        return (\r\n            changeBuySellLimitsVoteData.buyPriceMin,\r\n            changeBuySellLimitsVoteData.buyPriceMax, \r\n            changeBuySellLimitsVoteData.sellPriceMin, \r\n            changeBuySellLimitsVoteData.sellPriceMax, \r\n            votesTotalYes, \r\n            votesTotalNo, \r\n            voteType == VoteType.CHANGE_BUY_SELL_LIMITS\r\n        );\r\n    }\r\n    \r\n    function checkVotingForChangeBuySellPrice() \r\n        external view onlyAdmin\r\n        returns(\r\n            uint buyPrice, \r\n            uint buyAddUnits, \r\n            uint sellPrice, \r\n            uint sellAddUnits, \r\n            bool ignoreSecurityLimits, \r\n            uint votesYes, \r\n            uint votesNo, \r\n            bool stillActive\r\n        )\r\n    {\r\n        require(voteType == VoteType.CHANGE_BUY_SELL_PRICE);\r\n        return (\r\n            changeBuySellPriceVoteData.buyPrice, \r\n            changeBuySellPriceVoteData.buyAddUnits, \r\n            changeBuySellPriceVoteData.sellPrice, \r\n            changeBuySellPriceVoteData.sellAddUnits, \r\n            changeBuySellPriceVoteData.ignoreSecurityLimits, \r\n            votesTotalYes, \r\n            votesTotalNo, \r\n            voteType == VoteType.CHANGE_BUY_SELL_PRICE\r\n        );\r\n    }\r\n    \r\n    function checkVotingForSendWeiFromExchange() \r\n        external view onlyAdmin \r\n        returns(\r\n            address addressTo, \r\n            uint weiAmount, \r\n            uint votesYes, \r\n            uint votesNo, \r\n            bool stillActive\r\n        )\r\n    {\r\n        require(voteType == VoteType.SEND_WEI_FROM_EXCHANGE);\r\n        return (\r\n            sendWeiFromExchangeVoteData.addressTo, \r\n            sendWeiFromExchangeVoteData.amount, \r\n            votesTotalYes, \r\n            votesTotalNo, \r\n            voteType == VoteType.SEND_WEI_FROM_EXCHANGE\r\n        );\r\n    }\r\n    \r\n    function checkVotingForSendWeiFromPayment() \r\n        external view onlyAdmin\r\n        returns(\r\n            address addressTo, \r\n            uint weiAmount, \r\n            uint votesYes, \r\n            uint votesNo, \r\n            bool stillActive\r\n        )\r\n    {\r\n        require(voteType == VoteType.SEND_WEI_FROM_PAYMENT);\r\n        return (\r\n            sendWeiFromPaymentVoteData.addressTo, \r\n            sendWeiFromPaymentVoteData.amount, \r\n            votesTotalYes, \r\n            votesTotalNo, \r\n            voteType == VoteType.SEND_WEI_FROM_PAYMENT\r\n        );\r\n    }\r\n    \r\n    function checkVotingForTransferWeiFromExchangeToPayment() \r\n        external view onlyAdmin\r\n        returns (\r\n            bool reverse,\r\n            uint amount, \r\n            uint votesYes, \r\n            uint votesNo, \r\n            bool stillActive\r\n        )\r\n    {\r\n        require(voteType == VoteType.TRANSFER_EXCHANGE_WEI_TO_PAYMENT);\r\n        return (\r\n            transferWeiFromExchangeToPaymentVoteData.reverse,\r\n            transferWeiFromExchangeToPaymentVoteData.amount, \r\n            votesTotalYes, \r\n            votesTotalNo, \r\n            voteType == VoteType.TRANSFER_EXCHANGE_WEI_TO_PAYMENT\r\n        );\r\n    }\r\n    \r\n    function checkVotingForStartPayment() \r\n        external view onlyAdmin \r\n        returns(\r\n            uint weiToShare, \r\n            uint date,\r\n            uint votesYes, \r\n            uint votesNo, \r\n            bool stillActive\r\n        )\r\n    {\r\n        require(voteType == VoteType.START_PAYMENT);\r\n        return (\r\n            startPaymentVoteData.weiToShare, \r\n            startPaymentVoteData.date,\r\n            votesTotalYes, \r\n            votesTotalNo, \r\n            voteType == VoteType.START_PAYMENT\r\n        );\r\n    }\r\n    \r\n    \r\n    function totalSupply() \r\n        public constant \r\n        returns (uint)\r\n    {\r\n        return maxUnits - balances[mainBalanceAdmin].balance;\r\n    }\r\n    \r\n    \r\n     //  important to display balance in the wallet.\r\n    function balanceOf(address unitOwner) \r\n        public constant \r\n        returns (uint balance) \r\n    {\r\n        balance = balances[unitOwner].balance;\r\n    }\r\n    \r\n    function transferFrom(\r\n        address from, \r\n        address to, uint units\r\n    ) \r\n        public \r\n        returns (bool success) \r\n    {\r\n        BalanceData storage b = balances[from];\r\n        uint a = b.allowed[msg.sender];\r\n        a = a.sub(units);\r\n        b.allowed[msg.sender] = a;\r\n        success = internalTransfer(from, to, units);\r\n    }\r\n    \r\n    function approve(\r\n        address spender, \r\n        uint units\r\n    ) \r\n        public \r\n        returns (bool success) \r\n    {\r\n        balances[msg.sender].allowed[spender] = units;\r\n        emit Approval(msg.sender, spender, units);\r\n        success = true;\r\n    }\r\n    \r\n    function allowance(\r\n        address unitOwner, \r\n        address spender\r\n    ) \r\n        public constant \r\n        returns (uint remaining) \r\n    {\r\n        remaining = balances[unitOwner].allowed[spender];\r\n    }\r\n    \r\n    function transfer(\r\n        address to, \r\n        uint value\r\n    ) \r\n        public \r\n        returns (bool success)\r\n    {\r\n        return internalTransfer(msg.sender, to, value);\r\n    }\r\n    \r\n    function getMaskForPaymentBytes() private pure returns(bytes32)\r\n    {\r\n        return bytes32(uint(2**32 - 1));\r\n    }\r\n    \r\n    function getPaymentBytesIndexSize(uint index) private pure returns (uint)\r\n    {\r\n        return 32 * index;\r\n    }\r\n    \r\n    function getPaymentWeiPerUnit(uint index) private view returns(uint weiPerUnit)\r\n    {\r\n        bytes32 mask = getMaskForPaymentBytes();\r\n        uint offsetIndex = getPaymentBytesIndexSize(index);\r\n        mask = shiftLeft(mask, offsetIndex);\r\n        bytes32 before = paymentHistory & mask;\r\n        weiPerUnit = uint(shiftRight(before, offsetIndex)).mul(1000000000000);\r\n    }\r\n    \r\n    //bytes32 private dataBytes;\r\n    \r\n    function getMask() private pure returns (bytes32)\r\n    {\r\n        return bytes32(uint(2**32 - 1));\r\n    }\r\n    \r\n    function getBitIndex(uint index) private pure returns (uint)\r\n    {\r\n        return 32 * index;\r\n    }\r\n    \r\n    function shiftLeft (bytes32 a, uint n) private pure returns (bytes32) \r\n    {\r\n        uint shifted = uint(a) * 2 ** uint(n);\r\n        return bytes32(shifted);\r\n    }\r\n    \r\n    function shiftRight (bytes32 a, uint n) private pure returns (bytes32) \r\n    {\r\n        uint shifted = uint(a) / 2  ** uint(n);\r\n        return bytes32(shifted);\r\n    }\r\n    \r\n    function internalStartVoting() \r\n        private onlyAdmin\r\n    {\r\n        internalResetVotingData();\r\n        voteId = voteId.add(1);\r\n    }\r\n    \r\n    function internalResetVotingData() \r\n        private onlyAdmin\r\n    {\r\n        votesTotalYes = 0;\r\n        votesTotalNo = 0;\r\n        voteCancel = 0;\r\n    }\r\n    \r\n    function internalAllowTransfer(\r\n        address from, \r\n        uint amount\r\n    ) \r\n        private\r\n    {\r\n        BalanceData storage b = balances[from];\r\n        b.transferAllowed = b.transferAllowed.add(amount);\r\n    }\r\n    \r\n    function internalChangeAdminWallet(\r\n        uint index, \r\n        address addr\r\n    ) \r\n        private onlyAdmin\r\n    {\r\n        // adding 'else' for each index costs more gas\r\n        if(index == 0)\r\n        {\r\n            internalTransferAccount(mainBalanceAdmin, addr);\r\n            mainBalanceAdmin = addr;\r\n        }\r\n        if(index == 1)\r\n        {\r\n            internalTransferAccount(buyBalanceAdmin, addr);\r\n            buyBalanceAdmin = addr;\r\n        }\r\n        if(index == 2)\r\n        {\r\n            internalTransferAccount(sellBalanceAdmin, addr);\r\n            sellBalanceAdmin = addr;\r\n        }\r\n    }\r\n    \r\n    function internalAddBuyUnits(\r\n        uint price, \r\n        uint addUnits, \r\n        bool ignoreLimits\r\n    ) \r\n        private onlyAdmin\r\n    {\r\n        if(price > 0)\r\n        {\r\n            weiBuyPrice = price;\r\n            if(!ignoreLimits && securityWeiBuyPriceFrom > 0 && weiBuyPrice < securityWeiBuyPriceFrom)\r\n            {\r\n                weiBuyPrice = securityWeiBuyPriceFrom;\r\n            }\r\n            if(!ignoreLimits && securityWeiBuyPriceTo > 0 && weiBuyPrice > securityWeiBuyPriceTo)\r\n            {\r\n                weiBuyPrice = securityWeiBuyPriceTo;\r\n            }\r\n        }\r\n        if(addUnits > 0)\r\n        {\r\n            uint b = balances[mainBalanceAdmin].balance;\r\n            if(addUnits > b)\r\n            {\r\n                addUnits = b;\r\n            }\r\n            internalAllowTransfer(buyBalanceAdmin, addUnits);\r\n            internalTransfer(mainBalanceAdmin, buyBalanceAdmin, addUnits);\r\n        }\r\n        emit OnExchangeBuyUpdate(weiBuyPrice, balances[buyBalanceAdmin].balance);\r\n    }\r\n    \r\n    function internalAddSellUnits(\r\n        uint price, \r\n        uint addUnits, \r\n        bool ignoreLimits\r\n    ) \r\n        private onlyAdmin\r\n    {\r\n        if(price > 0)\r\n        {\r\n            weiSellPrice = price;\r\n            if(!ignoreLimits)\r\n            {\r\n                if(securityWeiSellPriceFrom > 0 && weiSellPrice < securityWeiSellPriceFrom)\r\n                {\r\n                    weiSellPrice = securityWeiSellPriceFrom;\r\n                }\r\n                if(securityWeiSellPriceTo > 0 && weiSellPrice > securityWeiSellPriceTo)\r\n                {\r\n                    weiSellPrice = securityWeiSellPriceTo;\r\n                }   \r\n            }\r\n        }\r\n        if(addUnits > 0)\r\n        {\r\n            unitsToSell = unitsToSell.add(addUnits);\r\n            //uint requireWei = unitsToSell * weiSellPrice;\r\n            uint maxUnitsAccountCanBuy = sellBalanceAdmin.balance.div(weiSellPrice);\r\n            if(unitsToSell > maxUnitsAccountCanBuy)\r\n            {\r\n                unitsToSell = maxUnitsAccountCanBuy;\r\n            }\r\n            //internalTransfer(mainBalanceAdmin, sellBalanceAdmin, unitsToSell);\r\n            //balances[mainBalanceAdmin] = balances[mainBalanceAdmin].sub(unitsToSell);\r\n        }\r\n        emit OnExchangeSellUpdate(weiSellPrice, unitsToSell);\r\n    }\r\n    \r\n    function internalChangeBuySellLimits(\r\n        uint buyPriceMin, \r\n        uint buyPriceMax, \r\n        uint sellPriceMin, \r\n        uint sellPriceMax\r\n    ) \r\n        private onlyAdmin\r\n    {\r\n        if(buyPriceMin > 0)\r\n        {\r\n            securityWeiBuyPriceFrom = buyPriceMin;\r\n        }\r\n        if(buyPriceMax > 0)\r\n        {\r\n            securityWeiBuyPriceTo = buyPriceMax;\r\n        }\r\n        if(sellPriceMin > 0)\r\n        {\r\n            securityWeiSellPriceFrom = sellPriceMin;\r\n        }\r\n        if(sellPriceMax > 0)\r\n        {\r\n            securityWeiSellPriceTo = sellPriceMax;\r\n        }\r\n    }\r\n    \r\n    function internalChangeBuySellPrice(\r\n        uint buyPrice, \r\n        uint buyAddUnits, \r\n        uint sellPrice, \r\n        uint sellAddUnits, \r\n        bool ignoreSecurityLimits\r\n    ) \r\n        private onlyAdmin\r\n    {\r\n        internalAddBuyUnits(buyPrice, buyAddUnits, ignoreSecurityLimits);\r\n        internalAddSellUnits(sellPrice, sellAddUnits, ignoreSecurityLimits);\r\n    }\r\n    \r\n    // Executed when there is too much wei on the exchange\r\n    function internalSendWeiFromExchange(\r\n        address addressTo, \r\n        uint amount\r\n    ) \r\n        private onlyAdmin\r\n    {\r\n        internalRemoveWeiFromExchange(amount);\r\n        addressTo.transfer(amount);\r\n    }\r\n    \r\n    function internalTransferExchangeWeiToPayment(bool reverse, uint amount)\r\n        private onlyAdmin\r\n    {\r\n        if(reverse)\r\n        {\r\n            weiFromExchange = weiFromExchange.add(amount);\r\n            weiForPayment = weiForPayment.sub(amount);\r\n        }\r\n        else\r\n        {\r\n            internalRemoveWeiFromExchange(amount);\r\n            weiForPayment = weiForPayment.add(amount);\r\n        }\r\n    }\r\n    \r\n    function internalRemoveWeiFromExchange(uint amount) \r\n        private onlyAdmin\r\n    {\r\n        weiFromExchange = weiFromExchange.sub(amount);\r\n        uint units = weiFromExchange.div(weiSellPrice);\r\n        if(units < unitsToSell)\r\n        {\r\n            unitsToSell = units;\r\n        }\r\n    }\r\n    \r\n    function internalSendWeiFromPayment(\r\n        address addressTo,\r\n        uint amount\r\n    ) \r\n        private onlyAdmin\r\n    {\r\n        weiForPayment = weiForPayment.sub(amount);\r\n        addressTo.transfer(amount);\r\n    }\r\n    \r\n    function getAmountOfUnitsOnPaymentId(\r\n        BalanceData storage b, \r\n        uint index\r\n    ) \r\n        private view\r\n        returns(uint)\r\n    {\r\n        bytes32 mask = getMask();\r\n        uint offsetIndex = getBitIndex(index);\r\n        mask = shiftLeft(mask, offsetIndex);\r\n        bytes32 before = b.paymentBalances & mask;\r\n        before = shiftRight(before, offsetIndex);\r\n        uint r = uint(before);\r\n        // special case of error\r\n        if(r > amountOfUnitsOutsideAdminWallet)\r\n        {\r\n            return 0;\r\n        }\r\n        return r;\r\n    }\r\n    \r\n    function setAmountOfUnitsOnPaymentId(\r\n        BalanceData storage b, \r\n        uint index,\r\n        uint value\r\n    )\r\n    private\r\n    {\r\n        bytes32 mask = getMask();\r\n        uint offsetIndex = getBitIndex(index);\r\n        mask = shiftLeft(mask, offsetIndex);\r\n        b.paymentBalances = (b.paymentBalances ^ mask) & b.paymentBalances;\r\n        bytes32 field = bytes32(value);\r\n        field = shiftLeft(field, offsetIndex);\r\n        b.paymentBalances = b.paymentBalances | field;\r\n    }\r\n    \r\n    function internalTransferAccount(\r\n        address addrA, \r\n        address addrB\r\n    ) \r\n        private onlyAdmin\r\n    {\r\n        if(addrA != 0x0 && addrB != 0x0)\r\n        {\r\n            BalanceData storage from = balances[addrA];\r\n            BalanceData storage to = balances[addrB];\r\n\r\n            if(from.balancePaymentSeries < paymentSeries)\r\n            {\r\n                from.paymentBalances = bytes32(0);\r\n                setAmountOfUnitsOnPaymentId(from, 0, from.balance);\r\n                from.balancePaymentSeries = paymentSeries;\r\n            }\r\n            \r\n            if(to.balancePaymentSeries < paymentSeries)\r\n            {\r\n                to.paymentBalances = bytes32(0);\r\n                setAmountOfUnitsOnPaymentId(to, 0, to.balance);\r\n                to.balancePaymentSeries = paymentSeries;\r\n            }\r\n\r\n            uint nextPaymentFirstUnits = getAmountOfUnitsOnPaymentId(from, 0);\r\n            setAmountOfUnitsOnPaymentId(from, 0, 0);\r\n            setAmountOfUnitsOnPaymentId(to, 1, nextPaymentFirstUnits);\r\n            for(uint i = 0; i <= 5; i++)\r\n            {\r\n                uint existingUnits = getAmountOfUnitsOnPaymentId(from, i);\r\n                existingUnits = existingUnits.add(getAmountOfUnitsOnPaymentId(to, i));\r\n                \r\n                setAmountOfUnitsOnPaymentId(from, i, 0);\r\n                setAmountOfUnitsOnPaymentId(to, i, existingUnits);\r\n            }\r\n            to.balance = to.balance.add(from.balance);\r\n            from.balance = 0;\r\n        }\r\n    }\r\n    \r\n    // metamask error with start payment? Ensure if it's not dividing by 0!\r\n    \r\n    function internalStartPayment(uint weiTotal, uint date) \r\n        private onlyAdmin\r\n    {\r\n        require(weiTotal >= amountOfUnitsOutsideAdminWallet);\r\n        paymentNumber = paymentNumber.add(1);\r\n        paymentSortId = paymentNumber % 6;\r\n        if(paymentSortId == 0)\r\n        {\r\n            paymentHistory = bytes32(0);\r\n            paymentSeries = paymentSeries.add(1);\r\n            \r\n            uint weiLeft = totalAmountOfWeiOnPaymentsPerSeries.sub(totalAmountOfWeiPaidToUsersPerSeries);\r\n            if(weiLeft > 0)\r\n            {\r\n                weiForPayment = weiForPayment.add(weiLeft);\r\n            }\r\n            totalAmountOfWeiPaidToUsersPerSeries = 0;\r\n            totalAmountOfWeiOnPaymentsPerSeries = 0;\r\n        }\r\n        buySum.price = 0;\r\n        buySum.amount = 0;\r\n        sellSum.price = 0;\r\n        sellSum.amount = 0;\r\n        bytes32 mask = getMaskForPaymentBytes();\r\n        uint offsetIndex = getPaymentBytesIndexSize(paymentSortId);\r\n        mask = shiftLeft(mask, offsetIndex);\r\n        paymentHistory = (paymentHistory ^ mask) & paymentHistory;\r\n        // amount of microether (1 / 1 000 000 eth)  per unit\r\n        bytes32 field = bytes32((weiTotal.div(1000000000000)).div(amountOfUnitsOutsideAdminWallet));\r\n        field = shiftLeft(field, offsetIndex);\r\n        paymentHistory = paymentHistory | field;\r\n        weiForPayment = weiForPayment.sub(weiTotal);\r\n        totalAmountOfWeiOnPaymentsPerSeries = totalAmountOfWeiOnPaymentsPerSeries.add(weiTotal);\r\n        internalCheckPayment(buyBalanceAdmin);\r\n        internalCheckPayment(sellBalanceAdmin);\r\n        lastPaymentDate = date;\r\n        emit NewPayment(paymentNumber, weiTotal, amountOfUnitsOutsideAdminWallet, lastPaymentDate);\r\n    }\r\n    \r\n    function internalCheckPayment(address person) \r\n        private\r\n    {\r\n        require(person != mainBalanceAdmin);\r\n        BalanceData storage b = balances[person];\r\n        if(b.balancePaymentSeries < paymentSeries)\r\n        {\r\n            b.balancePaymentSeries = paymentSeries;\r\n            b.paymentBalances = bytes32(b.balance);\r\n        }\r\n        (uint weiToSendSum, uint unitsReceived) = getAddressWeiFromPayments(b);\r\n        b.paymentBalances = bytes32(0);\r\n        setAmountOfUnitsOnPaymentId(b, paymentSortId.add(1), b.balance);\r\n        if(weiToSendSum > 0)\r\n        {\r\n            totalAmountOfWeiPaidToUsers = totalAmountOfWeiPaidToUsers.add(weiToSendSum);\r\n            totalAmountOfWeiPaidToUsersPerSeries = totalAmountOfWeiPaidToUsersPerSeries.add(weiToSendSum);\r\n            emit PaymentReceived(person, paymentNumber, weiToSendSum, unitsReceived);\r\n            person.transfer(weiToSendSum);   \r\n        }\r\n    }\r\n    \r\n    function getAddressWeiFromPayments(BalanceData storage b)\r\n        private view\r\n        returns(uint weiSum, uint unitsSum)\r\n    {\r\n        for(uint i = 0; i <= paymentSortId; i++)\r\n        {\r\n            unitsSum = unitsSum.add(getAmountOfUnitsOnPaymentId(b, i));\r\n            weiSum = weiSum.add(getPaymentWeiPerUnit(i).mul(unitsSum));\r\n        }\r\n    }\r\n    \r\n    function proceedTransferFromMainAdmin(BalanceData storage bT, uint value)\r\n        private\r\n    {\r\n        if(bT.balancePaymentSeries < paymentSeries)\r\n        {\r\n            bT.paymentBalances = bytes32(0);\r\n            setAmountOfUnitsOnPaymentId(bT, 0, bT.balance);\r\n            bT.balancePaymentSeries = paymentSeries;\r\n        }\r\n        amountOfUnitsOutsideAdminWallet = amountOfUnitsOutsideAdminWallet.add(value);   \r\n        uint fixedNewPayment = paymentNumber.add(1);\r\n        uint curr = getAmountOfUnitsOnPaymentId(bT, fixedNewPayment).add(value);\r\n        setAmountOfUnitsOnPaymentId(bT, fixedNewPayment, curr);\r\n    }\r\n    \r\n    function proceedTransferToMainAdmin(BalanceData storage bF, uint value)\r\n        private\r\n    {\r\n        amountOfUnitsOutsideAdminWallet = amountOfUnitsOutsideAdminWallet.sub(value);\r\n        if(bF.balancePaymentSeries < paymentSeries)\r\n        {\r\n            bF.paymentBalances = bytes32(0);\r\n            setAmountOfUnitsOnPaymentId(bF, 0, bF.balance);\r\n            bF.balancePaymentSeries = paymentSeries;\r\n        }\r\n        uint maxVal = paymentSortId.add(1);\r\n        for(uint i = 0; i <= maxVal; i++)\r\n        {\r\n            uint v = getAmountOfUnitsOnPaymentId(bF, i);\r\n            if(v >= value)\r\n            {\r\n                setAmountOfUnitsOnPaymentId(bF, i, v.sub(value));\r\n                break;\r\n            }\r\n            value = value.sub(v);\r\n            setAmountOfUnitsOnPaymentId(bF, i, 0);\r\n        }\r\n    }\r\n    \r\n    function proceedTransferFromUserToUser(BalanceData storage bF, BalanceData storage bT, uint value)\r\n        private\r\n    {\r\n        if(bF.balancePaymentSeries < paymentSeries)\r\n        {\r\n            bF.paymentBalances = bytes32(0);\r\n            setAmountOfUnitsOnPaymentId(bF, 0, bF.balance);\r\n            bF.balancePaymentSeries = paymentSeries;\r\n        }\r\n        if(bT.balancePaymentSeries < paymentSeries)\r\n        {\r\n            bT.paymentBalances = bytes32(0);\r\n            setAmountOfUnitsOnPaymentId(bT, 0, bT.balance);\r\n            bT.balancePaymentSeries = paymentSeries;\r\n        }\r\n        uint maxVal = paymentSortId.add(1);\r\n        for(uint i = 0; i <= maxVal; i++)\r\n        {\r\n            uint fromAmount = getAmountOfUnitsOnPaymentId(bF, i);\r\n            uint toAmount = getAmountOfUnitsOnPaymentId(bT, i);\r\n            if(fromAmount >= value)\r\n            {\r\n                setAmountOfUnitsOnPaymentId(bT, i, toAmount.add(value));\r\n                setAmountOfUnitsOnPaymentId(bF, i, fromAmount.sub(value));\r\n                break;\r\n            }\r\n            value = value.sub(fromAmount);\r\n            setAmountOfUnitsOnPaymentId(bT, i, toAmount.add(fromAmount));\r\n            setAmountOfUnitsOnPaymentId(bF, i, 0);\r\n        }\r\n    }\r\n    \r\n    function internalTransfer(\r\n        address from, \r\n        address to, \r\n        uint value\r\n    ) \r\n        private \r\n        returns (bool success)\r\n    {\r\n        BalanceData storage bF = balances[from];\r\n        BalanceData storage bT = balances[to];\r\n        if(to == 0x0 || bF.balance < value)\r\n        {\r\n            return false;\r\n        }\r\n        bool fromMainAdmin = from == mainBalanceAdmin;\r\n        bool fromAdminToNonAdmin = isAdmin(from) && !isAdmin(to);\r\n        if(fromMainAdmin || fromAdminToNonAdmin)\r\n        {\r\n            assert(bT.transferAllowed > 0);\r\n            if(value > bT.transferAllowed)\r\n            {\r\n                value = bT.transferAllowed;\r\n            }\r\n            bT.transferAllowed = bT.transferAllowed.sub(value);\r\n        }\r\n        if(to == sellBalanceAdmin)\r\n        {\r\n            require(unitsToSell > 0);\r\n            if(value > unitsToSell)\r\n            {\r\n                value = unitsToSell;\r\n            }\r\n            unitsToSell = unitsToSell.sub(value);\r\n        }\r\n        \r\n        if(fromMainAdmin)\r\n        {\r\n            proceedTransferFromMainAdmin(bT, value);\r\n            emit OnEmitNewUnitsFromMainWallet(value, amountOfUnitsOutsideAdminWallet);\r\n        }\r\n        else if(to == mainBalanceAdmin)\r\n        {\r\n            proceedTransferToMainAdmin(bF, value);\r\n            emit OnAddNewUnitsToMainWallet(value, amountOfUnitsOutsideAdminWallet);\r\n        }\r\n        else\r\n        {\r\n            proceedTransferFromUserToUser(bF, bT, value);\r\n        }\r\n        bF.balance = bF.balance.sub(value);\r\n        bT.balance = bT.balance.add(value);\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n    function isAdmin(address  person) private view \r\n    returns(bool)\r\n    {\r\n        return (person == mainBalanceAdmin || person == buyBalanceAdmin || person == sellBalanceAdmin);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"reverse\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"startVotingForTransferWeiFromExchangeToPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkVotingForChangeAdminAddress\",\"outputs\":[{\"name\":\"adminId\",\"type\":\"uint256\"},{\"name\":\"newAdminAddress\",\"type\":\"address\"},{\"name\":\"votesYes\",\"type\":\"uint256\"},{\"name\":\"votesNo\",\"type\":\"uint256\"},{\"name\":\"stillActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressTo\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"startVotingForSendWeiFromExchange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdminAccounts\",\"outputs\":[{\"name\":\"mainBalanceAdminAddress\",\"type\":\"address\"},{\"name\":\"buyBalanceAdminAddress\",\"type\":\"address\"},{\"name\":\"sellBalanceAdminAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentSortId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyEPU\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfUnitsOutsideAdminWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuySellSum\",\"outputs\":[{\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"sellAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"startVotingForChangeAdminAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAmountOfWeiPaidToUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkVotingForTransferWeiFromExchangeToPayment\",\"outputs\":[{\"name\":\"reverse\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"votesYes\",\"type\":\"uint256\"},{\"name\":\"votesNo\",\"type\":\"uint256\"},{\"name\":\"stillActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSecurityLimits\",\"outputs\":[{\"name\":\"buyPriceFrom\",\"type\":\"uint256\"},{\"name\":\"buyPriceTo\",\"type\":\"uint256\"},{\"name\":\"sellPriceFrom\",\"type\":\"uint256\"},{\"name\":\"sellPriceTo\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkVotingForSendWeiFromExchange\",\"outputs\":[{\"name\":\"addressTo\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"votesYes\",\"type\":\"uint256\"},{\"name\":\"votesNo\",\"type\":\"uint256\"},{\"name\":\"stillActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitsToSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addEthForSell\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"person\",\"type\":\"address\"}],\"name\":\"checkPaymentFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiForPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"unitOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountData\",\"outputs\":[{\"name\":\"unitsBalance\",\"type\":\"uint256\"},{\"name\":\"payableUnits\",\"type\":\"uint256\"},{\"name\":\"totalWeiToReceive\",\"type\":\"uint256\"},{\"name\":\"weiBuyPriceForUnit\",\"type\":\"uint256\"},{\"name\":\"buyUnitsLeft\",\"type\":\"uint256\"},{\"name\":\"weiSellPriceForUnit\",\"type\":\"uint256\"},{\"name\":\"sellUnitsLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkVotingForSendWeiFromPayment\",\"outputs\":[{\"name\":\"addressTo\",\"type\":\"address\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"name\":\"votesYes\",\"type\":\"uint256\"},{\"name\":\"votesNo\",\"type\":\"uint256\"},{\"name\":\"stillActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPaymentDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"name\":\"buyAddUnits\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"sellAddUnits\",\"type\":\"uint256\"},{\"name\":\"ignoreSecurityLimits\",\"type\":\"bool\"}],\"name\":\"startVotingForChangeBuySellPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellEPU\",\"outputs\":[{\"name\":\"revenue\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkVotingForAllowTransfer\",\"outputs\":[{\"name\":\"allowTo\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"votesYes\",\"type\":\"uint256\"},{\"name\":\"votesNo\",\"type\":\"uint256\"},{\"name\":\"stillActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSellUnitsInformations\",\"outputs\":[{\"name\":\"weiSellPriceForUnit\",\"type\":\"uint256\"},{\"name\":\"unitsLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuyUnitsInformations\",\"outputs\":[{\"name\":\"weiBuyPriceForUnit\",\"type\":\"uint256\"},{\"name\":\"unitsLeft\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiFromExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weiToShare\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"startVotingForStartPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getThisAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyPriceMin\",\"type\":\"uint256\"},{\"name\":\"buyPriceMax\",\"type\":\"uint256\"},{\"name\":\"sellPriceMin\",\"type\":\"uint256\"},{\"name\":\"sellPriceMax\",\"type\":\"uint256\"}],\"name\":\"startVotingForChangeBuySellLimits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressTo\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"startVotingForAllowTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkVotingForStartPayment\",\"outputs\":[{\"name\":\"weiToShare\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"},{\"name\":\"votesYes\",\"type\":\"uint256\"},{\"name\":\"votesNo\",\"type\":\"uint256\"},{\"name\":\"stillActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"unitOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voteYes\",\"type\":\"bool\"}],\"name\":\"voteForCurrent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"voteCancelCurrent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkVotingForChangeBuySellPrice\",\"outputs\":[{\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"name\":\"buyAddUnits\",\"type\":\"uint256\"},{\"name\":\"sellPrice\",\"type\":\"uint256\"},{\"name\":\"sellAddUnits\",\"type\":\"uint256\"},{\"name\":\"ignoreSecurityLimits\",\"type\":\"bool\"},{\"name\":\"votesYes\",\"type\":\"uint256\"},{\"name\":\"votesNo\",\"type\":\"uint256\"},{\"name\":\"stillActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkVotingForChangeBuySellLimits\",\"outputs\":[{\"name\":\"buyPriceMin\",\"type\":\"uint256\"},{\"name\":\"buyPriceMax\",\"type\":\"uint256\"},{\"name\":\"sellPriceMin\",\"type\":\"uint256\"},{\"name\":\"sellPriceMax\",\"type\":\"uint256\"},{\"name\":\"votesYes\",\"type\":\"uint256\"},{\"name\":\"votesNo\",\"type\":\"uint256\"},{\"name\":\"stillActive\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addEthForPayment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addressTo\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"startVotingForSendWeiFromPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"paymentOffset\",\"type\":\"uint256\"},{\"name\":\"mainBalanceAdminAddress\",\"type\":\"address\"},{\"name\":\"buyBalanceAdminAddress\",\"type\":\"address\"},{\"name\":\"sellBalanceAdminAddress\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"units\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalOutside\",\"type\":\"uint256\"}],\"name\":\"OnEmitNewUnitsFromMainWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"units\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalOutside\",\"type\":\"uint256\"}],\"name\":\"OnAddNewUnitsToMainWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalUnits\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"NewPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"paymentId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnitsBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnitsSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unitsToBuy\",\"type\":\"uint256\"}],\"name\":\"OnExchangeBuyUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unitsToSell\",\"type\":\"uint256\"}],\"name\":\"OnExchangeSellUpdate\",\"type\":\"event\"}]","ContractName":"EstateParticipationUnit","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074c487529b687332da95d3c44161a5f29ecc9042000000000000000000000000ad113ce806a73d7485b1add6fb388db9b4de83e1000000000000000000000000d642db87ae3eb06f2ac0e431efd83656140d493a","Library":"","SwarmSource":"bzzr://4fb42320c5e4664346b017cd22b8d027b5e448d1b7247564aa0ac57d545cc1b4"}]}