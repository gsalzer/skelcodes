{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Operated\r\n * @dev The Operated contract has a list of ops addresses, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Operated {\r\n    mapping(address => bool) private _ops;\r\n\r\n    event OperatorChanged(\r\n        address indexed operator,\r\n        bool active\r\n    );\r\n\r\n    /**\r\n     * @dev The Operated constructor sets the original ops account of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() internal {\r\n        _ops[msg.sender] = true;\r\n        emit OperatorChanged(msg.sender, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the operations accounts.\r\n     */\r\n    modifier onlyOps() {\r\n        require(isOps(), \"only operations accounts are allowed to call this function\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is an operator.\r\n     */\r\n    function isOps() public view returns(bool) {\r\n        return _ops[msg.sender];\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current operations accounts to give control of the contract to new accounts.\r\n     * @param _account The address of the new account\r\n     * @param _active Set active (true) or inactive (false)\r\n     */\r\n    function setOps(address _account, bool _active) public onlyOps {\r\n        _ops[_account] = _active;\r\n        emit OperatorChanged(_account, _active);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns(bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title WHISKY TOKEN\r\n * @author WHYTOKEN GmbH\r\n * @notice WHISKY TOKEN (WHY) stands for a disruptive new possibility in the crypto currency market\r\n * due to the combination of High-End Whisky and Blockchain technology.\r\n * WHY is a german based token, which lets everyone participate in the lucrative crypto market\r\n * with minimal risk and effort through a high-end whisky portfolio as security.\r\n */\r\ncontract WhiskyToken is IERC20, Ownable, Operated {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint64;\r\n\r\n    // ERC20 standard variables\r\n    string public name = \"Whisky Token\";\r\n    string public symbol = \"WHY\";\r\n    uint8 public decimals = 18;\r\n    uint256 public initialSupply = 28100000 * (10 ** uint256(decimals));\r\n    uint256 public totalSupply;\r\n\r\n    // Address of the ICO contract\r\n    address public crowdSaleContract;\r\n\r\n    // The asset value of the whisky in EUR cents\r\n    uint64 public assetValue;\r\n\r\n    // Fee to charge on every transfer (e.g. 15 is 1,5%)\r\n    uint64 public feeCharge;\r\n\r\n    // Global freeze of all transfers\r\n    bool public freezeTransfer;\r\n\r\n    // Flag to make all token available\r\n    bool private tokenAvailable;\r\n\r\n    // Maximum value for feeCharge\r\n    uint64 private constant feeChargeMax = 20;\r\n\r\n    // Address of the account/wallet which should receive the fees\r\n    address private feeReceiver;\r\n\r\n    // Mappings of addresses for balances, allowances and frozen accounts\r\n    mapping(address => uint256) internal balances;\r\n    mapping(address => mapping (address => uint256)) internal allowed;\r\n    mapping(address => bool) public frozenAccount;\r\n\r\n    // Event definitions\r\n    event Fee(address indexed payer, uint256 fee);\r\n    event FeeCharge(uint64 oldValue, uint64 newValue);\r\n    event AssetValue(uint64 oldValue, uint64 newValue);\r\n    event Burn(address indexed burner, uint256 value);\r\n    event FrozenFunds(address indexed target, bool frozen);\r\n    event FreezeTransfer(bool frozen);\r\n\r\n    // Constructor which gets called once on contract deployment\r\n    constructor(address _tokenOwner) public {\r\n        transferOwnership(_tokenOwner);\r\n        setOps(_tokenOwner, true);\r\n        crowdSaleContract = msg.sender;\r\n        feeReceiver = _tokenOwner;\r\n        totalSupply = initialSupply;\r\n        balances[msg.sender] = initialSupply;\r\n        assetValue = 0;\r\n        feeCharge = 15;\r\n        freezeTransfer = true;\r\n        tokenAvailable = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the total supply of tokens.\r\n     * @dev The total supply is the amount of tokens which are currently in circulation.\r\n     * @return Amount of tokens in Sip.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the balance of the specified address.\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount of tokens owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        if (!tokenAvailable) {\r\n            return 0;\r\n        }\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Internal transfer, can only be called by this contract.\r\n     * Will throw an exception to rollback the transaction if anything is wrong.\r\n     * @param _from The address from which the tokens should be transfered from.\r\n     * @param _to The address to which the tokens should be transfered to.\r\n     * @param _value The amount of tokens which should be transfered in Sip.\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(_to != address(0), \"zero address is not allowed\");\r\n        require(_value >= 1000, \"must transfer more than 1000 sip\");\r\n        require(!freezeTransfer || isOps(), \"all transfers are currently frozen\");\r\n        require(!frozenAccount[_from], \"sender address is frozen\");\r\n        require(!frozenAccount[_to], \"receiver address is frozen\");\r\n\r\n        uint256 transferValue = _value;\r\n        if (msg.sender != owner() && msg.sender != crowdSaleContract) {\r\n            uint256 fee = _value.div(1000).mul(feeCharge);\r\n            transferValue = _value.sub(fee);\r\n            balances[feeReceiver] = balances[feeReceiver].add(fee);\r\n            emit Fee(msg.sender, fee);\r\n            emit Transfer(_from, feeReceiver, fee);\r\n        }\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(transferValue);\r\n        if (tokenAvailable) {\r\n            emit Transfer(_from, _to, transferValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens to a specified address. The message sender has to pay the fee.\r\n     * @dev Calls _transfer with message sender address as _from parameter.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred in Sip.\r\n     * @return Indicates if the transfer was successful.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens from one address to another. The message sender has to pay the fee.\r\n     * @dev Calls _transfer with the addresses provided by the transactor.\r\n     * @param _from The address which you want to send tokens from.\r\n     * @param _to The address which you want to transfer to.\r\n     * @param _value The amount of tokens to be transferred in Sip.\r\n     * @return Indicates if the transfer was successful.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= allowed[_from][msg.sender], \"requesting more token than allowed\");\r\n\r\n        _transfer(_from, _to, _value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of the transactor.\r\n     * @dev Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which is allowed to retrieve the tokens.\r\n     * @param _value The amount of tokens to be spent in Sip.\r\n     * @return Indicates if the approval was successful.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(!freezeTransfer || isOps(), \"all transfers are currently frozen\");\r\n        require(_spender != address(0), \"zero address is not allowed\");\r\n        require(_value >= 1000, \"must approve more than 1000 sip\");\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the amount of tokens that the owner allowed to the spender.\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner The address which owns the tokens.\r\n     * @param _spender The address which is allowed to retrieve the tokens.\r\n     * @return The amount of tokens still available for the spender in Sip.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Increase the amount of tokens that an owner allowed to a spender.\r\n     * @dev Approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which is allowed to retrieve the tokens.\r\n     * @param _addedValue The amount of tokens to increase the allowance by in Sip.\r\n     * @return Indicates if the approval was successful.\r\n     */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n        require(!freezeTransfer || isOps(), \"all transfers are currently frozen\");\r\n        require(_spender != address(0), \"zero address is not allowed\");\r\n        require(_addedValue >= 1000, \"must approve more than 1000 sip\");\r\n        \r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease the amount of tokens that an owner allowed to a spender. \r\n     * @dev Approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which is allowed to retrieve the tokens.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by in Sip.\r\n     * @return Indicates if the approval was successful.\r\n     */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n        require(!freezeTransfer || isOps(), \"all transfers are currently frozen\");\r\n        require(_spender != address(0), \"zero address is not allowed\");\r\n        require(_subtractedValue >= 1000, \"must approve more than 1000 sip\");\r\n\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    } \r\n\r\n    /**\r\n     * @notice Burns a specific amount of tokens.\r\n     * @dev Tokens get technically destroyed by this function and are therefore no longer in circulation afterwards.\r\n     * @param _value The amount of token to be burned in Sip.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(!freezeTransfer || isOps(), \"all transfers are currently frozen\");\r\n        require(_value <= balances[msg.sender], \"address has not enough token to burn\");\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(burner, _value);\r\n        emit Transfer(burner, address(0), _value);\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Modifies the assetValue which represents the monetized value (in EUR) of the whisky baking the token.\r\n     * @param _value The new value of the asset in EUR cents.\r\n     */\r\n    function setAssetValue(uint64 _value) public onlyOwner {\r\n        uint64 oldValue = assetValue;\r\n        assetValue = _value;\r\n        emit AssetValue(oldValue, _value);\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Modifies the feeCharge which calculates the fee for each transaction.\r\n     * @param _value The new value of the feeCharge as fraction of 1000 (e.g. 15 is 1,5%).\r\n     */\r\n    function setFeeCharge(uint64 _value) public onlyOwner {\r\n        require(_value <= feeChargeMax, \"can not increase fee charge over it's limit\");\r\n        uint64 oldValue = feeCharge;\r\n        feeCharge = _value;\r\n        emit FeeCharge(oldValue, _value);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Prevents/Allows target from sending & receiving tokens.\r\n     * @param _target Address to be frozen.\r\n     * @param _freeze Either to freeze or unfreeze it.\r\n     */\r\n    function freezeAccount(address _target, bool _freeze) public onlyOwner {\r\n        require(_target != address(0), \"zero address is not allowed\");\r\n\r\n        frozenAccount[_target] = _freeze;\r\n        emit FrozenFunds(_target, _freeze);\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Globally freeze all transfers for the token.\r\n     * @param _freeze Freeze or unfreeze every transfer.\r\n     */\r\n    function setFreezeTransfer(bool _freeze) public onlyOwner {\r\n        freezeTransfer = _freeze;\r\n        emit FreezeTransfer(_freeze);\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Allows the owner to set the address which receives the fees.\r\n     * @param _feeReceiver the address which should receive fees.\r\n     */\r\n    function setFeeReceiver(address _feeReceiver) public onlyOwner {\r\n        require(_feeReceiver != address(0), \"zero address is not allowed\");\r\n        feeReceiver = _feeReceiver;\r\n    }\r\n\r\n    /**\r\n     * @notice Not for public use!\r\n     * @dev Make all tokens available for ERC20 wallets.\r\n     * @param _available Activate or deactivate all tokens\r\n     */\r\n    function setTokenAvailable(bool _available) public onlyOwner {\r\n        tokenAvailable = _available;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setOps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"setFreezeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeCharge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint64\"}],\"name\":\"setAssetValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_available\",\"type\":\"bool\"}],\"name\":\"setTokenAvailable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezeTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOps\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"assetValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint64\"}],\"name\":\"setFeeCharge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"FeeCharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"AssetValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FreezeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WhiskyToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c084ab7b789c216407b623546e3fab9414c4dfdb","Library":"","SwarmSource":"bzzr://ed10ac8fafe0bf026ec8db551deea291e42de9a1e011026345dfd13efc4f8661"}]}