{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/ERC20.sol\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/ERC20Basic.sol\r\n// \r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function allowance(address approver, address spender) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed approver, address indexed spender, uint256 value);\r\n}\r\n\r\n \r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n * Source: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * A version of the Regulation D contract (https://www.investopedia.com/terms/r/regulationd.asp) with the\r\n * added role of Transfer Agent to perform specialised actions.\r\n */\r\ncontract RegDTransferAgent {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * The details of the tokens bought.\r\n     */\r\n    struct Holding {\r\n        // The number of tokens purchased.\r\n        uint256 quantity;\r\n\r\n        // The date and time when the tokens are no longer restricted.\r\n        uint256 releaseDate;\r\n\r\n        // Whether the holder is an affiliate of the company or not.\r\n        bool isAffiliate;\r\n    }\r\n\r\n    // Restrict functionality to the creator of the contract - the token issuer.\r\n    modifier onlyIssuer {\r\n        require(msg.sender == issuer, \"You must be issuer/owner to execute this function.\");\r\n        _;\r\n    }\r\n\r\n    // Restrict functionaly to the official Transfer Agent.\r\n    modifier onlyTransferAgent {\r\n        require(msg.sender == transferAgent, \"You must be the Transfer Agent to execute this function.\");\r\n        _;\r\n    }\r\n\r\n    // The creator/owner of this contract, set at contract creation to the address that created the contract.\r\n    address public issuer;\r\n\r\n    // The collection of all held tokens by user.\r\n    mapping(address => Holding) public heldTokens;\r\n\r\n    // The ERC20 Token contract, needed to transfer tokens back to their original owner when the holding\r\n    // period ends.\r\n    address public tokenContract;\r\n\r\n    // The authorised Transfer Agent who performs specialist actions on this contract.\r\n    address public transferAgent;\r\n\r\n    // Number of seconds in one standard year.\r\n    uint256 public oneYear = 31536000;\r\n\r\n    // Emitted when someone subject to Regulation D buys tokens and they are held here.\r\n    event TokensHeld(address indexed who, uint256 tokens, uint256 releaseDate);\r\n\r\n    // Emitted when the tokens have passed their release date and have been returned to the original owner.\r\n    event TokensReleased(address indexed who, uint256 tokens);\r\n\r\n    // The Transfer Agent moved tokens from an address to a new wallet, for escheatment obligations.\r\n    event TokensTransferred(address indexed from, address indexed to, uint256 tokens);\r\n\r\n    // The Transfer Agent was unable to verify a token holder and needed to push out the release date.\r\n    event ReleaseDateExtended(address who, uint256 newReleaseDate);\r\n\r\n    // Extra restrictions apply to company affiliates, notify when the status of an address changes.\r\n    event AffiliateStatusChanged(address who, bool isAffiliate);\r\n\r\n    /**\r\n     * @notice Create this contract and assign the ERC20 contract where the tokens are returned once the\r\n     * holding period has complete.\r\n     *\r\n     * @param erc20Contract The address of the ERC20 contract.\r\n     */\r\n    constructor(address erc20Contract) public {\r\n        issuer = msg.sender;\r\n        tokenContract = erc20Contract;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the address of the Transfer Agent.\r\n     */\r\n    function setTransferAgent(address who) public onlyIssuer {\r\n        transferAgent = who;\r\n    }\r\n\r\n    /**\r\n     * @notice Keep a US Citizen's tokens for one year.\r\n     *\r\n     * @param who           The wallet of the US Citizen.\r\n     * @param quantity      The number of tokens to store.\r\n     */\r\n    function hold(address who, uint256 quantity) public onlyIssuer {\r\n        require(who != 0x0, \"The null address cannot own tokens.\");\r\n        require(quantity != 0, \"Quantity must be greater than zero.\");\r\n        require(!isExistingHolding(who), \"Cannot overwrite an existing holding, use a new wallet.\");\r\n\r\n        Holding memory holding = Holding(quantity, block.timestamp+oneYear, false);\r\n        heldTokens[who] = holding;\r\n        emit TokensHeld(who, holding.quantity, holding.releaseDate);\r\n    }\r\n\t\r\n    /**\r\n     * @notice Hold tokens post-ICO with a variable release date on those tokens.\r\n     *\r\n     * @param who           The wallet of the US Citizen.\r\n     * @param quantity      The number of tokens to store.\r\n\t * @param addedTime\t\tThe number of seconds to add to the current date to calculate the release date.\r\n     */\r\n    function postIcoHold(address who, uint256 quantity, uint256 addedTime) public onlyTransferAgent {\r\n        require(who != 0x0, \"The null address cannot own tokens.\");\r\n        require(quantity != 0, \"Quantity must be greater than zero.\");\r\n        require(!isExistingHolding(who), \"Cannot overwrite an existing holding, use a new wallet.\");\r\n\r\n        Holding memory holding = Holding(quantity, block.timestamp+addedTime, false);\r\n        heldTokens[who] = holding;\r\n        emit TokensHeld(who, holding.quantity, holding.releaseDate);\r\n    }\r\n\r\n    /**\r\n     * @notice Release the tokens once the holding period expires, transferring them back to the ERC20 contract to the holder.\r\n     *\r\n     * NOTE: This function preserves the isAffiliate flag of the holder.\r\n     *\r\n     * @param who       The owner of the tokens.\r\n     * @return          True on successful release, false on error.\r\n     */\r\n    function release(address who) public onlyTransferAgent returns (bool) {\r\n        Holding memory holding = heldTokens[who];\r\n        require(!holding.isAffiliate, \"To release tokens for an affiliate use partialRelease().\");\r\n\r\n        if(block.timestamp > holding.releaseDate) {\r\n\r\n            bool res = ERC20Interface(tokenContract).transfer(who, holding.quantity);\r\n            if(res) {\r\n                heldTokens[who] = Holding(0, 0, holding.isAffiliate);\r\n                emit TokensReleased(who, holding.quantity);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\t\r\n    /**\r\n     * @notice Release some of an affiliate's tokens to a broker/trading wallet.\r\n     *\r\n     * @param who       \t\tThe owner of the tokens.\r\n\t * @param tradingWallet\t\tThe broker/trader receiving the tokens.\r\n\t * @param amount \t\t\tThe number of tokens to release to the trading wallet.\r\n     */\r\n    function partialRelease(address who, address tradingWallet, uint256 amount) public onlyTransferAgent returns (bool) {\r\n        require(tradingWallet != 0, \"The destination wallet cannot be null.\");\r\n        require(!isExistingHolding(tradingWallet), \"The destination wallet must be a new fresh wallet.\");\r\n        Holding memory holding = heldTokens[who];\r\n        require(holding.isAffiliate, \"Only affiliates can use this function; use release() for non-affiliates.\");\r\n        require(amount <= holding.quantity, \"The holding has less than the specified amount of tokens.\");\r\n\r\n        if(block.timestamp > holding.releaseDate) {\r\n\r\n            // Send the tokens currently held by this contract on behalf of 'who' to the nominated wallet.\r\n            bool res = ERC20Interface(tokenContract).transfer(tradingWallet, amount);\r\n            if(res) {\r\n                heldTokens[who] = Holding(holding.quantity.sub(amount), holding.releaseDate, holding.isAffiliate);\r\n                emit TokensReleased(who, amount);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Under special circumstances the Transfer Agent needs to move tokens around.\r\n     *\r\n     * @dev As the release date is accurate to one second it is very unlikely release dates will\r\n     * match so an address that does not have a holding in this contract is required as the target.\r\n     *\r\n     * @param from      The current holder of the tokens.\r\n     * @param to        The recipient of the tokens - must be a 'clean' address.\r\n     * @param amount    The number of tokens to move.\r\n     */\r\n    function transfer(address from, address to, uint amount) public onlyTransferAgent returns (bool) {\r\n        require(to != 0x0, \"Cannot transfer tokens to the null address.\");\r\n        require(amount > 0, \"Cannot transfer zero tokens.\");\r\n        Holding memory fromHolding = heldTokens[from];\r\n        require(fromHolding.quantity >= amount, \"Not enough tokens to perform the transfer.\");\r\n        require(!isExistingHolding(to), \"Cannot overwrite an existing holding, use a new wallet.\");\r\n\r\n        heldTokens[from] = Holding(fromHolding.quantity.sub(amount), fromHolding.releaseDate, fromHolding.isAffiliate);\r\n        heldTokens[to] = Holding(amount, fromHolding.releaseDate, false);\r\n\r\n        emit TokensTransferred(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice The Transfer Agent may need to add time to the release date if they are unable to verify\r\n     * the holder in a timely manner.\r\n     *\r\n     * @param who       The holder of the tokens.\r\n     * @param sconds    The number of seconds to add to the release date.  NOTE: 'seconds' appears to\r\n     *                  be a reserved word.\r\n     */\r\n    function addTime(address who, uint sconds) public onlyTransferAgent returns (bool) {\r\n        require(sconds > 0, \"Time added cannot be zero.\");\r\n\r\n        Holding memory holding = heldTokens[who];\r\n        heldTokens[who] = Holding(holding.quantity, holding.releaseDate.add(sconds), holding.isAffiliate);\r\n\r\n        emit ReleaseDateExtended(who, heldTokens[who].releaseDate);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Company affiliates have added restriction, allow the Transfer Agent set/clear this flag\r\n     * as needed.\r\n     *\r\n     * @param who           The address being affiliated/unaffiliated.\r\n     * @param isAffiliate   Whether the address is an affiliate or not.\r\n     */\r\n    function setAffiliate(address who, bool isAffiliate) public onlyTransferAgent returns (bool) {\r\n        require(who != 0, \"The null address cannot be used.\");\r\n\r\n        Holding memory holding = heldTokens[who];\r\n        require(holding.isAffiliate != isAffiliate, \"Attempt to set the same affiliate status that is already set.\");\r\n\r\n        heldTokens[who] = Holding(holding.quantity, holding.releaseDate, isAffiliate);\r\n\r\n        emit AffiliateStatusChanged(who, isAffiliate);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if a wallet is already in use, only new/fresh/clean wallets can hold tokens.\r\n     *\r\n     * @param who   The wallet to check.\r\n     * @return      True if the wallet is in use, false otherwise.\r\n     */\r\n    function isExistingHolding(address who) public view returns (bool) {\r\n        Holding memory h = heldTokens[who];\r\n        return (h.quantity != 0 || h.releaseDate != 0);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"sconds\",\"type\":\"uint256\"}],\"name\":\"addTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"isAffiliate\",\"type\":\"bool\"}],\"name\":\"setAffiliate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setTransferAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"hold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isExistingHolding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"tradingWallet\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"partialRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"quantity\",\"type\":\"uint256\"},{\"name\":\"addedTime\",\"type\":\"uint256\"}],\"name\":\"postIcoHold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"heldTokens\",\"outputs\":[{\"name\":\"quantity\",\"type\":\"uint256\"},{\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"name\":\"isAffiliate\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneYear\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"erc20Contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseDate\",\"type\":\"uint256\"}],\"name\":\"TokensHeld\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newReleaseDate\",\"type\":\"uint256\"}],\"name\":\"ReleaseDateExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isAffiliate\",\"type\":\"bool\"}],\"name\":\"AffiliateStatusChanged\",\"type\":\"event\"}]","ContractName":"RegDTransferAgent","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009e17d13b638fc9f0ca941d4fe1c3e4da827cece1","Library":"","SwarmSource":"bzzr://a8cbc30083a847696cc81d75de560dc265ee434112d24b8f6eb6833cff0e7176"}]}