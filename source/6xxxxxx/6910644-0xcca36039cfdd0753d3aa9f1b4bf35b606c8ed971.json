{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n\r\n// @title SafeMath: overflow/underflow checks\r\n// @notice Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n\r\n  // @notice Multiplies two numbers, throws on overflow.\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  // @notice Integer division of two numbers, truncating the quotient.\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  // @notice Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  // @notice Adds two numbers, throws on overflow.\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ERC20Interface.sol\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ninterface ERC20Interface {\r\n    function totalSupply() external returns (uint);\r\n    function balanceOf(address tokenOwner) external returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    function burn(uint _amount) external returns (bool success);\r\n    function burnFrom(address _from, uint _amount) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event LogBurn(address indexed _spender, uint256 _value);\r\n}\r\n\r\n// File: contracts/TokenSale.sol\r\n\r\n// @title MyBit Tokensale\r\n// @notice A tokensale extending for 365 days. (0....364)\r\n// @notice 100,000 MYB are releases everyday and split proportionaly to funders of that day\r\n// @notice Anyone can fund the current or future days with ETH\r\n// @dev The current day is (timestamp - startTimestamp) / 24 hours\r\n// @author Kyle Dewhurst, MyBit Foundation\r\ncontract TokenSale {\r\n  using SafeMath for *;\r\n\r\n  ERC20Interface mybToken;\r\n\r\n  struct Day {\r\n    uint totalWeiContributed;\r\n    mapping (address => uint) weiContributed;\r\n  }\r\n\r\n  // Constants\r\n  uint256 constant internal scalingFactor = 10**32;      // helps avoid rounding errors\r\n  uint256 constant public tokensPerDay = 10**23;    // 100,000 MYB\r\n\r\n  // MyBit addresses\r\n  address public owner;\r\n  address public mybitFoundation;\r\n  address public developmentFund;\r\n\r\n  uint256 public start;      // The timestamp when sale starts\r\n\r\n  mapping (uint16 => Day) public day;\r\n\r\n  constructor(address _mybToken, address _mybFoundation, address _developmentFund)\r\n  public {\r\n    mybToken = ERC20Interface(_mybToken);\r\n    developmentFund = _developmentFund;\r\n    mybitFoundation = _mybFoundation;\r\n    owner = msg.sender;\r\n  }\r\n\r\n  // @notice owner can start the sale by transferring in required amount of MYB\r\n  // @dev the start time is used to determine which day the sale is on (day 0 = first day)\r\n  function startSale(uint _timestamp)\r\n  external\r\n  onlyOwner\r\n  returns (bool){\r\n    require(start == 0, 'Already started');\r\n    require(_timestamp >= now  && _timestamp.sub(now) < 2592000, 'Start time not in range');\r\n    uint saleAmount = tokensPerDay.mul(365);\r\n    require(mybToken.transferFrom(msg.sender, address(this), saleAmount));\r\n    start = _timestamp;\r\n    emit LogSaleStarted(msg.sender, mybitFoundation, developmentFund, saleAmount, _timestamp);\r\n    return true;\r\n  }\r\n\r\n\r\n  // @notice contributor can contribute wei to sale on any current/future _day\r\n  // @dev only accepts contributions between days 0 - 364\r\n  function fund(uint16 _day)\r\n  payable\r\n  public\r\n  returns (bool) {\r\n      require(addContribution(msg.sender, msg.value, _day));\r\n      return true;\r\n  }\r\n\r\n  // @notice Send an index of days and your payment will be divided equally among them\r\n  // @dev WEI sent must divide equally into number of days.\r\n  function batchFund(uint16[] _day)\r\n  payable\r\n  external\r\n  returns (bool) {\r\n    require(_day.length <= 50);       // Limit to 50 days to avoid exceeding blocklimit\r\n    require(msg.value >= _day.length);   // need at least 1 wei per day\r\n    uint256 amountPerDay = msg.value.div(_day.length);\r\n    assert (amountPerDay.mul(_day.length) == msg.value);   // Don't allow any rounding error\r\n    for (uint8 i = 0; i < _day.length; i++){\r\n      require(addContribution(msg.sender, amountPerDay, _day[i]));\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n  // @notice Updates claimableTokens, sends all wei to the token holder\r\n  function withdraw(uint16 _day)\r\n  external\r\n  returns (bool) {\r\n      require(dayFinished(_day), \"day has not finished funding\");\r\n      Day storage thisDay = day[_day];\r\n      uint256 amount = getTokensOwed(msg.sender, _day);\r\n      delete thisDay.weiContributed[msg.sender];\r\n      mybToken.transfer(msg.sender, amount);\r\n      emit LogTokensCollected(msg.sender, amount, _day);\r\n      return true;\r\n  }\r\n\r\n  // @notice Updates claimableTokens, sends all tokens to contributor from previous days\r\n  // @param (uint16[]) _day, list of token sale days msg.sender contributed wei towards\r\n  function batchWithdraw(uint16[] _day)\r\n  external\r\n  returns (bool) {\r\n    uint256 amount;\r\n    require(_day.length <= 50);     // Limit to 50 days to avoid exceeding blocklimit\r\n    for (uint8 i = 0; i < _day.length; i++){\r\n      require(dayFinished(_day[i]));\r\n      uint256 amountToAdd = getTokensOwed(msg.sender, _day[i]);\r\n      amount = amount.add(amountToAdd);\r\n      delete day[_day[i]].weiContributed[msg.sender];\r\n      emit LogTokensCollected(msg.sender, amountToAdd, _day[i]);\r\n    }\r\n    mybToken.transfer(msg.sender, amount);\r\n    return true;\r\n  }\r\n\r\n  // @notice owner can withdraw funds to the foundation wallet and ddf wallet\r\n  // @param (uint) _amount, The amount of wei to withdraw\r\n  // @dev must put in an _amount equally divisible by 2\r\n  function foundationWithdraw(uint _amount)\r\n  external\r\n  onlyOwner\r\n  returns (bool){\r\n    uint256 half = _amount.div(2);\r\n    assert (half.mul(2) == _amount);   // check for rounding error\r\n    mybitFoundation.transfer(half);\r\n    developmentFund.transfer(half);\r\n    emit LogFoundationWithdraw(msg.sender, _amount, dayFor(now));\r\n    return true;\r\n  }\r\n\r\n  // @notice updates ledger with the contribution from _investor\r\n  // @param (address) _investor: The sender of WEI to the contract\r\n  // @param (uint) _amount: The amount of WEI to add to _day\r\n  // @param (uint16) _day: The day to fund\r\n  function addContribution(address _investor, uint _amount, uint16 _day)\r\n  internal\r\n  returns (bool) {\r\n    require(_amount > 0, \"must send ether with the call\");\r\n    require(duringSale(_day), \"day is not during the sale\");\r\n    require(!dayFinished(_day), \"day has already finished\");\r\n    Day storage today = day[_day];\r\n    today.totalWeiContributed = today.totalWeiContributed.add(_amount);\r\n    today.weiContributed[_investor] = today.weiContributed[_investor].add(_amount);\r\n    emit LogTokensPurchased(_investor, _amount, _day);\r\n    return true;\r\n  }\r\n\r\n  // @notice Calculates how many tokens user is owed. (userContribution / totalContribution) * tokensPerDay\r\n  function getTokensOwed(address _contributor, uint16 _day)\r\n  public\r\n  view\r\n  returns (uint256) {\r\n      require(dayFinished(_day));\r\n      Day storage thisDay = day[_day];\r\n      uint256 percentage = thisDay.weiContributed[_contributor].mul(scalingFactor).div(thisDay.totalWeiContributed);\r\n      return percentage.mul(tokensPerDay).div(scalingFactor);\r\n  }\r\n\r\n  // @notice gets the total amount of mybit owed to the contributor\r\n  // @dev this function doesn't check for duplicate days. Output may not reflect actual amount owed if this happens.\r\n  function getTotalTokensOwed(address _contributor, uint16[] _days)\r\n  public\r\n  view\r\n  returns (uint256 amount) {\r\n    require(_days.length < 100);          // Limit to 100 days to avoid exceeding block gas limit\r\n    for (uint16 i = 0; i < _days.length; i++){\r\n      amount = amount.add(getTokensOwed(_contributor, _days[i]));\r\n    }\r\n    return amount;\r\n  }\r\n\r\n  // @notice returns the amount of wei contributed by _contributor on _day\r\n  function getWeiContributed(uint16 _day, address _contributor)\r\n  public\r\n  view\r\n  returns (uint256) {\r\n    return day[_day].weiContributed[_contributor];\r\n  }\r\n\r\n  // @notice returns amount of wei contributed on _day\r\n  // @dev if _day is outside of tokensale range it will return 0\r\n  function getTotalWeiContributed(uint16 _day)\r\n  public\r\n  view\r\n  returns (uint256) {\r\n    return day[_day].totalWeiContributed;\r\n  }\r\n\r\n  // @notice return the day associated with this timestamp\r\n  function dayFor(uint _timestamp)\r\n  public\r\n  view\r\n  returns (uint16) {\r\n      require(_timestamp >= start);\r\n      return uint16(_timestamp.sub(start).div(86400));\r\n  }\r\n\r\n  // @notice returns true if _day is finished\r\n  function dayFinished(uint16 _day)\r\n  public\r\n  view\r\n  returns (bool) {\r\n    if (now <= start) { return false; }   // hasn't yet reached first day, so cannot be finished\r\n    return dayFor(now) > _day;\r\n  }\r\n\r\n  // @notice reverts if the current day isn't less than 365\r\n  function duringSale(uint16 _day)\r\n  public\r\n  view\r\n  returns (bool){\r\n    return start > 0 && _day <= uint16(364);\r\n  }\r\n\r\n\r\n  // @notice return the current day\r\n  function currentDay()\r\n  public\r\n  view\r\n  returns (uint16) {\r\n    return dayFor(now);\r\n  }\r\n\r\n  // @notice Fallback function: Purchases contributor stake in the tokens for the current day\r\n  // @dev rejects contributions by means of the fallback function until timestamp > start\r\n  function ()\r\n  external\r\n  payable {\r\n      require(addContribution(msg.sender, msg.value, currentDay()));\r\n  }\r\n\r\n  // @notice only owner address can call\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  event LogSaleStarted(address _owner, address _mybFoundation, address _developmentFund, uint _totalMYB, uint _startTime);\r\n  event LogFoundationWithdraw(address _mybFoundation, uint _amount, uint16 _day);\r\n  event LogTokensPurchased(address indexed _contributor, uint _amount, uint16 indexed _day);\r\n  event LogTokensCollected(address indexed _contributor, uint _amount, uint16 indexed _day);\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"startSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint16\"}],\"name\":\"getTotalWeiContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint16[]\"}],\"name\":\"batchWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint16[]\"}],\"name\":\"batchFund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"},{\"name\":\"_days\",\"type\":\"uint16[]\"}],\"name\":\"getTotalTokensOwed\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"},{\"name\":\"_day\",\"type\":\"uint16\"}],\"name\":\"getTokensOwed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint16\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint16\"}],\"name\":\"duringSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mybitFoundation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developmentFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint16\"}],\"name\":\"dayFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"day\",\"outputs\":[{\"name\":\"totalWeiContributed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint16\"}],\"name\":\"fund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"foundationWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint16\"},{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"getWeiContributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"dayFor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_mybToken\",\"type\":\"address\"},{\"name\":\"_mybFoundation\",\"type\":\"address\"},{\"name\":\"_developmentFund\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_mybFoundation\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_developmentFund\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_totalMYB\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"LogSaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_mybFoundation\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_day\",\"type\":\"uint16\"}],\"name\":\"LogFoundationWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_day\",\"type\":\"uint16\"}],\"name\":\"LogTokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_day\",\"type\":\"uint16\"}],\"name\":\"LogTokensCollected\",\"type\":\"event\"}]","ContractName":"TokenSale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005d60d8d7ef6d37e16ebabc324de3be57f135e0bc000000000000000000000000d9d2b28e09921a38ad7ab1b4138357408bda8ebd000000000000000000000000fd1e4b568bb3bcf706b0bac5960d4b91bacff96f","Library":"","SwarmSource":"bzzr://f215848823315686a8490e24f02524a5f1cfb14494d6377095ade591033dabc4"}]}