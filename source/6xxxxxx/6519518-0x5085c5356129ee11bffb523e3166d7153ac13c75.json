{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title HouseAdmin\r\n * @dev The HouseAdmin contract has a signer address and a croupier address, and provides basic authorization control\r\n *      functions, this simplifies the implementation of \"user permissions\"\r\n */\r\ncontract HouseAdmin is Ownable {\r\n  address public signer;\r\n  address public croupier;\r\n\r\n  event SignerTransferred(address indexed previousSigner, address indexed newSigner);\r\n  event CroupierTransferred(address indexed previousCroupier, address indexed newCroupier);\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the signer or owner\r\n   */\r\n  modifier onlySigner() {\r\n    require(msg.sender == signer || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the croupier or owner\r\n   */\r\n  modifier onlyCroupier() {\r\n    require(msg.sender == croupier || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev The Signable constructor sets the original `signer` of the contract to the sender\r\n   *      account\r\n   */\r\n  constructor() public {\r\n    signer = msg.sender;\r\n    croupier = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current signer to transfer control of the contract to a newSigner\r\n   * @param _newSigner The address to transfer signership to\r\n   */\r\n  function transferSigner(address _newSigner) public onlySigner {\r\n    _transferSigner(_newSigner);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current croupier to transfer control of the contract to a newCroupier\r\n   * @param _newCroupier The address to transfer croupiership to\r\n   */\r\n  function transferCroupier(address _newCroupier) public onlyCroupier {\r\n    _transferCroupier(_newCroupier);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newSigner.\r\n   * @param _newSigner The address to transfer signership to.\r\n   */\r\n  function _transferSigner(address _newSigner) internal {\r\n    require(_newSigner != address(0));\r\n    emit SignerTransferred(signer, _newSigner);\r\n    signer = _newSigner;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newCroupier.\r\n   * @param _newCroupier The address to transfer croupiership to.\r\n   */\r\n  function _transferCroupier(address _newCroupier) internal {\r\n    require(_newCroupier != address(0));\r\n    emit CroupierTransferred(croupier, _newCroupier);\r\n    croupier = _newCroupier;\r\n  }\r\n}\r\n\r\n\r\ncontract Casino is Ownable, HouseAdmin {\r\n  using SafeMath for uint;\r\n\r\n  uint constant HOUSE_EDGE_PERCENT = 1;\r\n  uint constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0003 ether;\r\n\r\n  uint constant BET_AMOUNT_MIN = 0.01 ether;\r\n  uint constant BET_AMOUNT_MAX = 1000 ether;\r\n\r\n  uint constant BET_EXPIRATION_BLOCKS = 250;\r\n\r\n  uint constant MAX_MASKABLE_MODULO = 40;\r\n  uint constant MAX_BET_MASK = 2 ** MAX_MASKABLE_MODULO;\r\n\r\n  // population count\r\n  uint constant POPCOUNT_MULT = 0x0000000000002000000000100000000008000000000400000000020000000001;\r\n  uint constant POPCOUNT_MASK = 0x0001041041041041041041041041041041041041041041041041041041041041;\r\n  uint constant POPCOUNT_MODULO = 0x3F;\r\n\r\n  uint public bankFund;\r\n\r\n  struct Bet {\r\n    uint8 modulo;\r\n    uint64 choice;\r\n    uint amount;\r\n    uint winAmount;\r\n    uint placeBlockNumber;\r\n    bool isActive;\r\n    address player;\r\n  }\r\n\r\n  mapping (uint => Bet) public bets;\r\n\r\n  event LogParticipant(address indexed player, uint indexed modulo, uint choice, uint amount, uint commit);\r\n  event LogClosedBet(address indexed player, uint indexed modulo, uint choice, uint reveal, uint result, uint amount, uint winAmount);\r\n  event LogDistributeReward(address indexed addr, uint reward);\r\n  event LogRecharge(address indexed addr, uint amount);\r\n  event LogRefund(address indexed addr, uint amount);\r\n  event LogDealerWithdraw(address indexed addr, uint amount);\r\n\r\n  constructor() payable public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function placeBet(uint _choice, uint _modulo, uint _expiredBlockNumber, uint _commit, uint8 _v, bytes32 _r, bytes32 _s) payable external {\r\n    Bet storage bet = bets[_commit];\r\n\r\n    uint amount = msg.value;\r\n\r\n    require(bet.player == address(0), \"this bet is already exist\");\r\n    require(block.number <= _expiredBlockNumber, 'this bet has expired');\r\n    require(amount >= BET_AMOUNT_MIN && amount <= BET_AMOUNT_MAX, 'bet amount out of range');\r\n\r\n    // verify the signer and _expiredBlockNumber\r\n    bytes32 msgHash = keccak256(abi.encodePacked(_expiredBlockNumber, _commit));\r\n    require(ecrecover(msgHash, _v, _r, _s) == signer, \"incorrect signer\");\r\n\r\n    uint houseEdge = amount * HOUSE_EDGE_PERCENT / 100;\r\n    if (houseEdge < HOUSE_EDGE_MINIMUM_AMOUNT) {\r\n      houseEdge = HOUSE_EDGE_MINIMUM_AMOUNT;\r\n    }\r\n\r\n    uint populationCount;\r\n    if (_modulo < MAX_MASKABLE_MODULO) {\r\n      require(_choice < MAX_BET_MASK, \"choice too large\");\r\n      populationCount = (_choice * POPCOUNT_MULT & POPCOUNT_MASK) % POPCOUNT_MODULO;\r\n      require(populationCount < _modulo, \"winning rate out of range\");\r\n    } else {\r\n      require(_choice < _modulo, \"choice large than modulo\");\r\n      populationCount = _choice;\r\n    }\r\n\r\n    uint winAmount = (amount - houseEdge).mul(_modulo) / populationCount;\r\n    require(bankFund.add(winAmount) <= address(this).balance, 'contract balance is not enough');\r\n    // lock winAmount into this contract. Make sure contract is solvent\r\n    bankFund = bankFund.add(winAmount);\r\n\r\n    bet.choice = uint64(_choice);\r\n    bet.player = msg.sender;\r\n    bet.placeBlockNumber = block.number;\r\n    bet.amount = amount;\r\n    bet.winAmount = winAmount;\r\n    bet.isActive = true;\r\n    bet.modulo = uint8(_modulo);\r\n\r\n    emit LogParticipant(msg.sender, _modulo, _choice, amount, _commit);\r\n  }\r\n\r\n  function closeBet(uint _reveal) external onlyCroupier {\r\n    uint commit = uint(keccak256(abi.encodePacked(_reveal)));\r\n    Bet storage bet = bets[commit];\r\n\r\n    require(bet.isActive, 'this bet is not active');\r\n\r\n    uint amount = bet.amount;\r\n    uint placeBlockNumber = bet.placeBlockNumber;\r\n    uint modulo = bet.modulo;\r\n    uint winAmount = 0;\r\n    uint choice = bet.choice;\r\n    address player = bet.player;\r\n\r\n    require(block.number > placeBlockNumber, 'close bet block number is too low');\r\n    require(block.number <= placeBlockNumber + BET_EXPIRATION_BLOCKS, 'the block number is too low to query');\r\n\r\n    uint result = uint(keccak256(abi.encodePacked(_reveal, blockhash(placeBlockNumber)))) % modulo;\r\n\r\n    if (modulo <= MAX_MASKABLE_MODULO) {\r\n      if (2 ** result & choice != 0) {\r\n        winAmount = bet.winAmount;\r\n        player.transfer(winAmount);\r\n        emit LogDistributeReward(player, winAmount);\r\n      }\r\n    } else {\r\n      if (result < choice) {\r\n        winAmount = bet.winAmount;\r\n        player.transfer(winAmount);\r\n        emit LogDistributeReward(player, winAmount);\r\n      }\r\n    }\r\n\r\n    // release winAmount deposit\r\n    bankFund = bankFund.sub(bet.winAmount);\r\n    bet.isActive = false;\r\n\r\n    emit LogClosedBet(player, modulo, choice, _reveal, result, amount, winAmount);\r\n  }\r\n\r\n  function refundBet(uint _commit) external onlyCroupier {\r\n    Bet storage bet = bets[_commit];\r\n\r\n    uint amount = bet.amount;\r\n    uint placeBlockNumber = bet.placeBlockNumber;\r\n    address player = bet.player;\r\n\r\n    require(bet.isActive, 'this bet is not active');\r\n    require(block.number > placeBlockNumber + BET_EXPIRATION_BLOCKS, 'this bet has not expired');\r\n\r\n    player.transfer(amount);\r\n    // release winAmount deposit\r\n    bankFund = bankFund.sub(bet.winAmount);\r\n    bet.isActive = false;\r\n\r\n    emit LogRefund(player, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev in order to let more people participant\r\n   */\r\n  function recharge() public payable {\r\n    emit LogRecharge(msg.sender, msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev owner can withdraw the remain ether\r\n   */\r\n  function withdraw(uint _amount) external onlyOwner {\r\n    require(_amount <= address(this).balance - bankFund, 'cannot withdraw amount greater than (balance - bankFund)');\r\n    owner.transfer(_amount);\r\n    emit LogDealerWithdraw(owner, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev get the balance which can be used\r\n   */\r\n  function getAvailableBalance() view public returns (uint) {\r\n    return address(this).balance - bankFund;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"modulo\",\"type\":\"uint8\"},{\"name\":\"choice\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"winAmount\",\"type\":\"uint256\"},{\"name\":\"placeBlockNumber\",\"type\":\"uint256\"},{\"name\":\"isActive\",\"type\":\"bool\"},{\"name\":\"player\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCroupier\",\"type\":\"address\"}],\"name\":\"transferCroupier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newSigner\",\"type\":\"address\"}],\"name\":\"transferSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recharge\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"croupier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_choice\",\"type\":\"uint256\"},{\"name\":\"_modulo\",\"type\":\"uint256\"},{\"name\":\"_expiredBlockNumber\",\"type\":\"uint256\"},{\"name\":\"_commit\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reveal\",\"type\":\"uint256\"}],\"name\":\"closeBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_commit\",\"type\":\"uint256\"}],\"name\":\"refundBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"modulo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"choice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"commit\",\"type\":\"uint256\"}],\"name\":\"LogParticipant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"modulo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"choice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reveal\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winAmount\",\"type\":\"uint256\"}],\"name\":\"LogClosedBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"LogDistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogRecharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogDealerWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousSigner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"SignerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousCroupier\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newCroupier\",\"type\":\"address\"}],\"name\":\"CroupierTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Casino","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cf11e1c49eb24bf8781ce7d742f88cd3300335f3aba6d6ba48d5319a7e435f96"}]}