{"status":"1","message":"OK","result":[{"SourceCode":"/* version metahashtoken 0.1.4 RC */\r\npragma solidity ^0.5.1;\r\ncontract metahashtoken {\r\n\r\n    /* token settings */\r\n    string public name;             /* token name              */\r\n    string public symbol;           /* token symbol            */\r\n    uint8  public decimals;         /* number of digits after the decimal point      */\r\n    uint   public totalTokens;      /* total amount of tokens  */\r\n    uint   public finalyze;\r\n\r\n    /* token management data */\r\n    address public ownerContract;   /* contract owner         */\r\n    address public owner;           /* owner                  */\r\n    \r\n    /* arrays */\r\n    mapping (address => uint256) public balance;                  /* array of balance              */\r\n    mapping (address => mapping (address => uint256)) allowed;    /* arrays of allowed transfers  */\r\n    \r\n    /* events */\r\n    event Burn(address indexed from, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n\r\n\r\n    /* get the total amount of tokens */\r\n    function totalSupply() public view returns (uint256 _totalSupply){\r\n        return totalTokens;\r\n    }\r\n    \r\n    /* get the amount of tokens from a particular user */\r\n    function balanceOf(address _owner) public view returns (uint256 _balance){\r\n        return balance[_owner];\r\n    }\r\n    \r\n    /* transfer tokens */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        /* tokens are not enough */\r\n        if (balance[msg.sender] < _value){\r\n            revert();\r\n        }\r\n        \r\n        /* overflow */\r\n        if ((balance[_to] + _value) < balance[_to]){\r\n            revert();\r\n        }\r\n        balance[msg.sender] -= _value;\r\n        balance[_to] += _value;\r\n        \r\n        emit Transfer(msg.sender, _to, _value);  \r\n        return true;\r\n    }\r\n    \r\n    /* how many tokens were allowed to send */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /* Send tokens from the recipient to the recipient */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\r\n        uint256 nAllowance;\r\n        nAllowance = allowed[_from][msg.sender];\r\n        \r\n        /* check of allowed value */\r\n        if (nAllowance < _value){\r\n            revert();\r\n        }\r\n        \r\n        /* not enough tokens */\r\n        if (balance[_from] < _value){\r\n            revert();\r\n        }\r\n\r\n        /* overflow */\r\n        if ((balance[_to] + _value) < balance[_to]){\r\n            revert();\r\n        }\r\n        \r\n        balance[_to] += _value;\r\n        balance[_from] -= _value;\r\n        allowed[_from][msg.sender] = nAllowance - _value;\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /* allow to send tokens between recipients */\r\n    function approve(address _spender, uint256 _value) public returns (bool success){\r\n        /* overflow */\r\n        if ((balance[_spender] + _value) < balance[_spender]){\r\n            revert();\r\n        }\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /* constructor */\r\n    constructor() public {\r\n        name = 'MetaHash';\r\n        symbol = 'MH';\r\n        decimals = 2;\r\n        owner = msg.sender;\r\n        totalTokens = 0; /* when creating a token we do not add them */\r\n        finalyze = 0;\r\n    }\r\n    \r\n    /* set contract owner */\r\n    function setContract(address _ownerContract) public {\r\n        if (msg.sender == owner){\r\n            ownerContract = _ownerContract;\r\n        }\r\n    }\r\n    \r\n    function setOptions(uint256 tokenCreate) public {\r\n        /* set the amount, give the tokens to the contract */\r\n        if ((msg.sender == ownerContract) && (finalyze == 0)){\r\n            totalTokens += tokenCreate;\r\n            balance[ownerContract] += tokenCreate;\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function burn(uint256 _value) public returns (bool success) {\r\n        if (balance[msg.sender] <= _value){\r\n            revert();\r\n        }\r\n\r\n        balance[msg.sender] -= _value;\r\n        totalTokens -= _value;\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /* the contract is closed. Either because of the amount reached, or by the deadline. */\r\n    function finalyzeContract() public {\r\n        if (msg.sender != owner){\r\n            revert();\r\n        }\r\n        finalyze = 1;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalyzeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalyze\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerContract\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenCreate\",\"type\":\"uint256\"}],\"name\":\"setOptions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"metahashtoken","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://24c39a42bb4115f0428d390f1b57d1a0a14c96c19d1cacff938091c513667d29"}]}