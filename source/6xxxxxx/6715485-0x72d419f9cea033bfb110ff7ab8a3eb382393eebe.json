{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md \r\n * @author https://snowfox.tech/\r\n */\r\n \r\n /**\r\n  * @title Base contract\r\n  * @dev Implements all the necessary logic for the token distribution (methods are closed. Inherited)\r\n  */\r\n\r\ncontract ERC20CoreBase {\r\n\r\n    // string public name;\r\n    // string public symbol;\r\n    // uint8 public decimals;\r\n\r\n\r\n    mapping (address => uint) internal _balanceOf;\r\n    uint internal _totalSupply; \r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n\r\n    function totalSupply() public view returns(uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n\r\n    function balanceOf(address owner) public view returns(uint) {\r\n        return _balanceOf[owner];\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        _checkRequireERC20(to, value, true, _balanceOf[from]);\r\n\r\n        _balanceOf[from] -= value;\r\n        _balanceOf[to] += value;\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Internal function that mints an amount of the token and assigns it to\r\n    * an account. This encapsulates the modification of balances such that the\r\n    * proper events are emitted.\r\n    * @param account The account that will receive the created tokens.\r\n    * @param value The amount that will be created.\r\n    */\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        _checkRequireERC20(account, value, false, 0);\r\n        _totalSupply += value;\r\n        _balanceOf[account] += value;\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that burns an amount of the token of a given\r\n    * account.\r\n    * @param account The account whose tokens will be burnt.\r\n    * @param value The amount that will be burnt.\r\n    */\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        _checkRequireERC20(account, value, true, _balanceOf[account]);\r\n\r\n        _totalSupply -= value;\r\n        _balanceOf[account] -= value;\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n\r\n    function _checkRequireERC20(address addr, uint value, bool checkMax, uint max) internal pure {\r\n        require(addr != address(0), \"Empty address\");\r\n        require(value > 0, \"Empty value\");\r\n        if (checkMax) {\r\n            require(value <= max, \"Out of value\");\r\n        }\r\n    }\r\n\r\n} \r\n\r\n\r\n\r\n/**\r\n * @title The logic of trust management (methods closed. Inherited).\r\n */\r\ncontract ERC20WithApproveBase is ERC20CoreBase {\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    ); \r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param owner address The address which owns the funds.\r\n    * @param spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    \r\n    function allowance(address owner, address spender) public view returns(uint) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param spender The address which will spend the funds.\r\n    * @param value The amount of tokens to be spent.\r\n    */\r\n\r\n    function _approve(address spender, uint256 value) internal {\r\n        _checkRequireERC20(spender, value, true, _balanceOf[msg.sender]);\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param from address The address which you want to send tokens from\r\n    * @param to address The address which you want to transfer to\r\n    * @param value uint256 the amount of tokens to be transferred\r\n    */\r\n\r\n    function _transferFrom(address from, address to, uint256 value) internal {\r\n        _checkRequireERC20(to, value, true, _allowed[from][msg.sender]);\r\n\r\n        _allowed[from][msg.sender] -= value;\r\n        _transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed_[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * @param spender The address which will spend the funds.\r\n    * @param value The amount of tokens to increase the allowance by.\r\n    */\r\n\r\n    function _increaseAllowance(address spender, uint256 value)  internal {\r\n        _checkRequireERC20(spender, value, false, 0);\r\n        require(_balanceOf[msg.sender] >= (_allowed[msg.sender][spender] + value), \"Out of value\");\r\n\r\n        _allowed[msg.sender][spender] += value;\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed_[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * @param spender The address which will spend the funds.\r\n    * @param value The amount of tokens to decrease the allowance by.\r\n    */\r\n\r\n    function _decreaseAllowance(address spender, uint256 value) internal {\r\n        _checkRequireERC20(spender, value, true, _allowed[msg.sender][spender]);\r\n\r\n        _allowed[msg.sender][spender] -= value;\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title The logic of trust management (public methods).\r\n */\r\ncontract ERC20WithApprove is ERC20WithApproveBase {\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param spender The address which will spend the funds.\r\n    * @param value The amount of tokens to be spent.\r\n    */\r\n\r\n    function approve(address spender, uint256 value) public {\r\n        _approve(spender, value);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param from address The address which you want to send tokens from\r\n    * @param to address The address which you want to transfer to\r\n    * @param value uint256 the amount of tokens to be transferred\r\n    */\r\n\r\n    function transferFrom(address from, address to, uint256 value) public {\r\n        _transferFrom(from, to, value);\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed_[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * @param spender The address which will spend the funds.\r\n    * @param value The amount of tokens to increase the allowance by.\r\n    */\r\n\r\n    function increaseAllowance(address spender, uint256 value)  public {\r\n        _increaseAllowance(spender, value);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed_[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * @param spender The address which will spend the funds.\r\n    * @param value The amount of tokens to decrease the allowance by.\r\n    */\r\n\r\n    function decreaseAllowance(address spender, uint256 value) public {\r\n        _decreaseAllowance(spender, value);\r\n    }\r\n} \r\n\r\n\r\n/**\r\n * @title Main contract\r\n * @dev Start data and access to transfer method\r\n * \r\n */\r\n\r\ncontract ERC20 is ERC20WithApprove {\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint public decimals;\r\n\r\n\tconstructor(string _name, string _symbol, uint _decimals, uint total, address target) public {\r\n\t\tname = _name;\r\n\t\tsymbol = _symbol;\r\n\t\tdecimals = _decimals;\r\n\r\n\t\t_mint(target, total);\r\n\t}\r\n\r\n\tfunction transfer(address to, uint value) public {\r\n\t\t_transfer(msg.sender, to, value);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"target\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ERC20","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000d18c2e28000000000000000000000000000fcc929d167ac88a562bca0a3afe1557c13936d7000000000000000000000000000000000000000000000000000000000000000b5468616c65722064656d6f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004544c524400000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://d962fed4915b29533b824952e63b181a9df55fd6a28e90f82107faae865c89c4"}]}