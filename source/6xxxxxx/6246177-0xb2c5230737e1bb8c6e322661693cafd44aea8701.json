{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Ownerable.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\ncontract Ownerable {\r\n    /// @notice The address of the owner is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyOwner { require(msg.sender == owner); _; }\r\n\r\n    address public owner;\r\n\r\n    constructor() public { owner = msg.sender;}\r\n\r\n    /// @notice Changes the owner of the contract\r\n    /// @param _newOwner The new owner of the contract\r\n    function setOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/token/ERC20.sol\r\n\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/SafeERC20.sol\r\n\r\npragma solidity ^0.4.18;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: contracts/locker/TeamLocker.sol\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\n\r\n\r\ncontract TeamLocker is Ownerable, SafeMath {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  ERC20Basic public token;\r\n  address[] public beneficiaries;\r\n  uint256 public baiastm;\r\n  uint256 public releasedAmt;\r\n\r\n  constructor (address _token, address[] _beneficiaries, uint256 _baias) {\r\n    require(_token != 0x00);\r\n    require(_baias != 0x00);\r\n\r\n    for (uint i = 0; i < _beneficiaries.length; i++) {\r\n      require(_beneficiaries[i] != 0x00);\r\n    }\r\n\r\n    token = ERC20Basic(_token);\r\n    beneficiaries = _beneficiaries;\r\n    baiastm = _baias;\r\n  }\r\n\r\n  function release() public {\r\n    require(beneficiaries.length != 0x0);\r\n\r\n    uint256 balance = token.balanceOf(address(this));\r\n    uint256 total = add(balance, releasedAmt);\r\n\r\n    uint256 lockTime1 = add(baiastm, 183 days); // 6 months\r\n    uint256 lockTime2 = add(baiastm, 365 days); // 1 year\r\n    uint256 lockTime3 = add(baiastm, 548 days); // 18 months\r\n\r\n    uint256 currentRatio = 0;\r\n    if (now >= lockTime1) {\r\n      currentRatio = 20;\r\n    }\r\n    if (now >= lockTime2) {\r\n      currentRatio = 50;  //+30\r\n    }\r\n    if (now >= lockTime3) {\r\n      currentRatio = 100; //+50\r\n    }\r\n    require(currentRatio > 0);\r\n\r\n    uint256 totalReleaseAmt = div(mul(total, currentRatio), 100);\r\n    uint256 grantAmt = sub(totalReleaseAmt, releasedAmt);\r\n    require(grantAmt > 0);\r\n    releasedAmt = add(releasedAmt, grantAmt);\r\n\r\n    uint256 grantAmountForEach = div(grantAmt, beneficiaries.length);\r\n    for (uint i = 0; i < beneficiaries.length; i++) {\r\n        token.safeTransfer(beneficiaries[i], grantAmountForEach);\r\n    }\r\n  }\r\n\r\n  function setBaias(uint256 _baias) public onlyOwner {\r\n    require(_baias != 0x00);\r\n    baiastm = _baias;\r\n  }\r\n\r\n  function setToken(address newToken) public onlyOwner {\r\n    require(newToken != 0x00);\r\n    token = ERC20Basic(newToken);\r\n  }\r\n\r\n  function getBeneficiaryCount() public view returns(uint256) {\r\n    return beneficiaries.length;\r\n  }\r\n\r\n  function setBeneficiary(uint256 _i, address _addr) public onlyOwner {\r\n    require(_i < beneficiaries.length);\r\n    beneficiaries[_i] = _addr;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_i\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baias\",\"type\":\"uint256\"}],\"name\":\"setBaias\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBeneficiaryCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasedAmt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baiastm\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"name\":\"_baias\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TeamLocker","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003be90f3ac213a730d9091bdda45a2f69ad98892b0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000005b9c4b4400000000000000000000000000000000000000000000000000000000000000010000000000000000000000008183969b471e5b3ca6711e558595c209686925ca","Library":"","SwarmSource":"bzzr://c9af1410f9e3ed53dba8626e1ad5b19c16968ae9e445e818c9a8898c83f511ab"}]}