{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\n// input  /Users/chae/dev/colorcoin/coin-ver2/color-erc20.sol\r\n// flattened :  Thursday, 10-Jan-19 03:27:25 UTC\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        \r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;   \r\n    }\r\n    \r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n \r\n    // Get the total token supply\r\n    function totalSupply() public constant returns (uint256);\r\n\r\n    // Get the account balance of another account with address _owner   \r\n    function balanceOf(address who) public view returns (uint256);\r\n    \r\n    // Send _value amount of tokens to address _to\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    \r\n    // Send _value amount of tokens from address _from to address _to\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n    // If this function is called again it overwrites the current allowance with _value.\r\n    // this function is required for some DEX functionality   \r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    // Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n \r\n    // Triggered when tokens are transferred. \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // Triggered whenever approve(address _spender, uint256 _value) is called. \r\n    event Approval(address indexed owner,address indexed spender,uint256 value);\r\n \r\n}\r\n\r\n//\r\n// Color Coin v2.0\r\n// \r\ncontract ColorCoin is ERC20 {\r\n\r\n    // Time Lock and Vesting\r\n    struct accountData {\r\n      uint256 init_balance;\r\n      uint256 balance;\r\n      uint256 unlockTime1;\r\n      uint256 unlockTime2;\r\n      uint256 unlockTime3;\r\n      uint256 unlockTime4;\r\n      uint256 unlockTime5;\r\n\r\n      uint256 unlockPercent1;\r\n      uint256 unlockPercent2;\r\n      uint256 unlockPercent3;\r\n      uint256 unlockPercent4;\r\n      uint256 unlockPercent5;\r\n    }\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => mapping (address => uint256)) private allowed;\r\n    \r\n    mapping(address => accountData) private accounts;\r\n    \r\n    mapping(address => bool) private lockedAddresses;\r\n    \r\n    address private admin;\r\n    \r\n    address private founder;\r\n    \r\n    bool public isTransferable = false;\r\n    \r\n    string public name;\r\n    \r\n    string public symbol;\r\n    \r\n    uint256 public __totalSupply;\r\n    \r\n    uint8 public decimals;\r\n    \r\n    constructor(string _name, string _symbol, uint256 _totalSupply, uint8 _decimals, address _founder, address _admin) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        __totalSupply = _totalSupply;\r\n        decimals = _decimals;\r\n        admin = _admin;\r\n        founder = _founder;\r\n        accounts[founder].init_balance = __totalSupply;\r\n        accounts[founder].balance = __totalSupply;\r\n        emit Transfer(0x0, founder, __totalSupply);\r\n    }\r\n    \r\n    // define onlyAdmin\r\n    modifier onlyAdmin {\r\n        require(admin == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    // define onlyFounder\r\n    modifier onlyFounder {\r\n        require(founder == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    // define transferable\r\n    modifier transferable {\r\n        require(isTransferable);\r\n        _;\r\n    }\r\n    \r\n    // define notLocked\r\n    modifier notLocked {\r\n        require(!lockedAddresses[msg.sender]);\r\n        _;\r\n    }\r\n    \r\n    // ERC20 spec.\r\n    function totalSupply() public constant returns (uint256) {\r\n        return __totalSupply;\r\n    }\r\n\r\n    // ERC20 spec.\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return accounts[_owner].balance;\r\n    }\r\n        \r\n    // ERC20 spec.\r\n    function transfer(address _to, uint256 _value) transferable notLocked public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= accounts[msg.sender].balance);\r\n\r\n        if (!checkTime(msg.sender, _value)) return false;\r\n\r\n        accounts[msg.sender].balance = accounts[msg.sender].balance.sub(_value);\r\n        accounts[_to].balance = accounts[_to].balance.add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    // ERC20 spec.\r\n    function transferFrom(address _from, address _to, uint256 _value) transferable notLocked public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= accounts[_from].balance);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(!lockedAddresses[_from]);\r\n\r\n        if (!checkTime(_from, _value)) return false;\r\n\r\n        accounts[_from].balance = accounts[_from].balance.sub(_value);\r\n        accounts[_to].balance = accounts[_to].balance.add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    // ERC20 spec.\r\n    function approve(address _spender, uint256 _value) transferable notLocked public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    // ERC20 spec.\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // Founder distributes initial balance\r\n    function distribute(address _to, uint256 _value) onlyFounder public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= accounts[msg.sender].balance);\r\n        \r\n        accounts[msg.sender].balance = accounts[msg.sender].balance.sub(_value);\r\n        accounts[_to].balance = accounts[_to].balance.add(_value);\r\n        accounts[_to].init_balance = accounts[_to].init_balance.add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // Change founder\r\n    function changeFounder(address who) onlyFounder public {   \r\n        founder = who;\r\n    }\r\n\r\n    // show founder address\r\n    function getFounder() onlyFounder public view returns (address) {\r\n        return founder;\r\n    }\r\n\r\n    // Change admin\r\n    function changeAdmin(address who) onlyAdmin public {\r\n        admin = who;\r\n    }\r\n\r\n    // show founder address\r\n    function getAdmin() onlyAdmin public view returns (address) {\r\n        return admin;\r\n    }\r\n\r\n    \r\n    // Lock individual transfer flag\r\n    function lock(address who) onlyAdmin public {\r\n        \r\n        lockedAddresses[who] = true;\r\n    }\r\n\r\n    // Unlock individual transfer flag\r\n    function unlock(address who) onlyAdmin public {\r\n        \r\n        lockedAddresses[who] = false;\r\n    }\r\n    \r\n    // Check individual transfer flag\r\n    function isLocked(address who) public view returns(bool) {\r\n        \r\n        return lockedAddresses[who];\r\n    }\r\n\r\n    // Enable global transfer flag\r\n    function enableTransfer() onlyAdmin public {\r\n        \r\n        isTransferable = true;\r\n    }\r\n    \r\n    // Disable global transfer flag \r\n    function disableTransfer() onlyAdmin public {\r\n        \r\n        isTransferable = false;\r\n    }\r\n\r\n    // check unlock time and init balance for each account\r\n    function checkTime(address who, uint256 _value) public view returns (bool) {\r\n        uint256 total_percent;\r\n        uint256 total_vol;\r\n\r\n        total_vol = accounts[who].init_balance.sub(accounts[who].balance);\r\n        total_vol = total_vol.add(_value);\r\n\r\n        if (accounts[who].unlockTime1 > now) {\r\n           return false;\r\n        } else if (accounts[who].unlockTime2 > now) {\r\n           total_percent = accounts[who].unlockPercent1;\r\n\r\n           if (accounts[who].init_balance.mul(total_percent) < total_vol.mul(100)) \r\n             return false;\r\n        } else if (accounts[who].unlockTime3 > now) {\r\n           total_percent = accounts[who].unlockPercent1;\r\n           total_percent = total_percent.add(accounts[who].unlockPercent2);\r\n\r\n           if (accounts[who].init_balance.mul(total_percent) < total_vol.mul(100)) \r\n             return false;\r\n\r\n        } else if (accounts[who].unlockTime4 > now) {\r\n           total_percent = accounts[who].unlockPercent1;\r\n           total_percent = total_percent.add(accounts[who].unlockPercent2);\r\n           total_percent = total_percent.add(accounts[who].unlockPercent3);\r\n\r\n           if (accounts[who].init_balance.mul(total_percent) < total_vol.mul(100)) \r\n             return false;\r\n        } else if (accounts[who].unlockTime5 > now) {\r\n           total_percent = accounts[who].unlockPercent1;\r\n           total_percent = total_percent.add(accounts[who].unlockPercent2);\r\n           total_percent = total_percent.add(accounts[who].unlockPercent3);\r\n           total_percent = total_percent.add(accounts[who].unlockPercent4);\r\n\r\n           if (accounts[who].init_balance.mul(total_percent) < total_vol.mul(100)) \r\n             return false;\r\n        } else { \r\n           total_percent = accounts[who].unlockPercent1;\r\n           total_percent = total_percent.add(accounts[who].unlockPercent2);\r\n           total_percent = total_percent.add(accounts[who].unlockPercent3);\r\n           total_percent = total_percent.add(accounts[who].unlockPercent4);\r\n           total_percent = total_percent.add(accounts[who].unlockPercent5);\r\n\r\n           if (accounts[who].init_balance.mul(total_percent) < total_vol.mul(100)) \r\n             return false;\r\n        }\r\n        \r\n        return true; \r\n       \r\n    }\r\n\r\n    // Founder sets unlockTime1\r\n    function setTime1(address who, uint256 value) onlyFounder public returns (bool) {\r\n        accounts[who].unlockTime1 = value;\r\n        return true;\r\n    }\r\n\r\n    function getTime1(address who) public view returns (uint256) {\r\n        return accounts[who].unlockTime1;\r\n    }\r\n\r\n    // Founder sets unlockTime2\r\n    function setTime2(address who, uint256 value) onlyFounder public returns (bool) {\r\n\r\n        accounts[who].unlockTime2 = value;\r\n        return true;\r\n    }\r\n\r\n    function getTime2(address who) public view returns (uint256) {\r\n        return accounts[who].unlockTime2;\r\n    }\r\n\r\n    // Founder sets unlockTime3\r\n    function setTime3(address who, uint256 value) onlyFounder public returns (bool) {\r\n        accounts[who].unlockTime3 = value;\r\n        return true;\r\n    }\r\n\r\n    function getTime3(address who) public view returns (uint256) {\r\n        return accounts[who].unlockTime3;\r\n    }\r\n\r\n    // Founder sets unlockTime4\r\n    function setTime4(address who, uint256 value) onlyFounder public returns (bool) {\r\n        accounts[who].unlockTime4 = value;\r\n        return true;\r\n    }\r\n\r\n    function getTime4(address who) public view returns (uint256) {\r\n        return accounts[who].unlockTime4;\r\n    }\r\n\r\n    // Founder sets unlockTime5\r\n    function setTime5(address who, uint256 value) onlyFounder public returns (bool) {\r\n        accounts[who].unlockTime5 = value;\r\n        return true;\r\n    }\r\n\r\n    function getTime5(address who) public view returns (uint256) {\r\n        return accounts[who].unlockTime5;\r\n    }\r\n\r\n    // Founder sets unlockPercent1\r\n    function setPercent1(address who, uint256 value) onlyFounder public returns (bool) {\r\n        accounts[who].unlockPercent1 = value;\r\n        return true;\r\n    }\r\n\r\n    function getPercent1(address who) public view returns (uint256) {\r\n        return accounts[who].unlockPercent1;\r\n    }\r\n\r\n    // Founder sets unlockPercent2\r\n    function setPercent2(address who, uint256 value) onlyFounder public returns (bool) {\r\n        accounts[who].unlockPercent2 = value;\r\n        return true;\r\n    }\r\n\r\n    function getPercent2(address who) public view returns (uint256) {\r\n        return accounts[who].unlockPercent2;\r\n    }\r\n\r\n    // Founder sets unlockPercent3\r\n    function setPercent3(address who, uint256 value) onlyFounder public returns (bool) {\r\n        accounts[who].unlockPercent3 = value;\r\n        return true;\r\n    }\r\n\r\n    function getPercent3(address who) public view returns (uint256) {\r\n        return accounts[who].unlockPercent3;\r\n    }\r\n\r\n    // Founder sets unlockPercent4\r\n    function setPercent4(address who, uint256 value) onlyFounder public returns (bool) {\r\n        accounts[who].unlockPercent4 = value;\r\n        return true;\r\n    }\r\n\r\n    function getPercent4(address who) public view returns (uint256) {\r\n        return accounts[who].unlockPercent4;\r\n    }\r\n\r\n    // Founder sets unlockPercent5\r\n    function setPercent5(address who, uint256 value) onlyFounder public returns (bool) {\r\n        accounts[who].unlockPercent5 = value;\r\n        return true;\r\n    }\r\n\r\n    function getPercent5(address who) public view returns (uint256) {\r\n        return accounts[who].unlockPercent5;\r\n    }\r\n\r\n    // get init_balance\r\n    function getInitBalance(address _owner) public view returns (uint256) {\r\n        return accounts[_owner].init_balance;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTime3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setPercent3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTime5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getInitBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTime3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTime1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTime5\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setPercent4\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTime4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"__totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getPercent5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"changeFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFounder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getPercent1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTime1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setPercent1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getPercent2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTime4\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getPercent3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getPercent4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"checkTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setPercent2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTime2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setPercent5\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTime2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_founder\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ColorCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000019d971e4fe8401e740000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000ced75ade6a3985041533724981833ccb3da655a0000000000000000000000000ced75ade6a3985041533724981833ccb3da655a0000000000000000000000000000000000000000000000000000000000000000a436f6c6f7220436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003434f4c0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://f6c2b1a95aa093754c2276c94848e37ea1b4577a78a37d0c9918040f962d0fa8"}]}