{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n *\r\n ** Code Modified by : TokenMagic\r\n ** Change Log: \r\n *** Solidity version upgraded from 0.4.8 to 0.4.23\r\n */\r\n \r\n \r\npragma solidity ^0.4.23;\r\n\r\n/*\r\n* Ownable Contract\r\n* Added by : TokenMagic\r\n*/ \r\ncontract Ownable {\r\n  \r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/*\r\n* Haltable Contract\r\n* Added by : TokenMagic\r\n*/\r\ncontract Haltable is Ownable {\r\n  bool public halted;\r\n\r\n  modifier stopInEmergency {\r\n    require(!halted);\r\n    _;\r\n  }\r\n\r\n  modifier stopNonOwnersInEmergency {\r\n    require(!halted && msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    require(halted);\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n  }\r\n\r\n}\r\n\r\n/*\r\n* SafeMathLib Library\r\n* Added by : TokenMagic\r\n*/\r\nlibrary SafeMathLib {\r\n\r\n  function times(uint a, uint b) public pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n\r\n/*\r\n* Token Contract \r\n* Added by : TokenMagic\r\n*/\r\ncontract FractionalERC20 {\r\n\r\n  uint public decimals;\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/*\r\n* Crowdsale Contract\r\n* Added by : TokenMagic\r\n*/\r\ncontract HoardCrowdsale is Haltable {\r\n\r\n  using SafeMathLib for uint;\r\n\r\n  /* The token we are selling */\r\n  FractionalERC20 public token;\r\n\r\n  /* tokens will be transfered from this address */\r\n  address public multisigWallet;\r\n  \r\n  /* Founders team MultiSig Wallet address */\r\n  address public foundersTeamMultisig;\r\n  \r\n  /* if the funding goal is not reached, investors may withdraw their funds */\r\n  uint public minimumFundingGoal = 3265000000000000000000; // 3265 ETH in Wei\r\n\r\n  /* the UNIX timestamp start date of the crowdsale */\r\n  uint public startsAt;\r\n\r\n  /* the UNIX timestamp end date of the crowdsale */\r\n  uint public endsAt;\r\n\r\n  /* the number of tokens already sold through this contract*/\r\n  uint public tokensSold = 0;\r\n\r\n  /* the number of tokens already sold through this contract for presale*/\r\n  uint public presaleTokensSold = 0;\r\n\r\n  /* the number of tokens already sold before presale*/\r\n  uint public prePresaleTokensSold = 0;\r\n\r\n  /* Maximum number tokens that presale can assign*/ \r\n  uint public presaleTokenLimit = 80000000000000000000000000; //80,000,000 token\r\n\r\n  /* Maximum number tokens that crowdsale can assign*/ \r\n  uint public crowdsaleTokenLimit = 120000000000000000000000000; //120,000,000 token\r\n  \r\n  /** Total percent of tokens allocated to the founders team multiSig wallet at the end of the sale */\r\n  uint public percentageOfSoldTokensForFounders = 50; // 50% of solded token as bonus to founders team multiSig wallet\r\n  \r\n  /* How much bonus tokens we allocated */\r\n  uint public tokensForFoundingBoardWallet;\r\n  \r\n  /* The party who holds the full token pool and has approve()'ed tokens for this crowdsale */\r\n  address public beneficiary;\r\n  \r\n  /* How many wei of funding we have raised */\r\n  uint public weiRaised = 0;\r\n\r\n  /* Calculate incoming funds from presale contracts and addresses */\r\n  uint public presaleWeiRaised = 0;\r\n\r\n  /* How many distinct addresses have invested */\r\n  uint public investorCount = 0;\r\n\r\n  /* How much wei we have returned back to the contract after a failed crowdfund. */\r\n  uint public loadedRefund = 0;\r\n\r\n  /* How much wei we have given back to investors.*/\r\n  uint public weiRefunded = 0;\r\n\r\n  /* Has this crowdsale been finalized */\r\n  bool public finalized;\r\n\r\n  /** How much ETH each address has invested to this crowdsale */\r\n  mapping (address => uint256) public investedAmountOf;\r\n\r\n  /** How much tokens this crowdsale has credited for each investor address */\r\n  mapping (address => uint256) public tokenAmountOf;\r\n\r\n  /** Presale Addresses that are allowed to invest. */\r\n  mapping (address => bool) public presaleWhitelist;\r\n\r\n  /** Addresses that are allowed to invest. */\r\n  mapping (address => bool) public participantWhitelist;\r\n\r\n  /** This is for manul testing for the interaction from owner wallet. You can set it to any value and inspect this in blockchain explorer to see that crowdsale interaction works. */\r\n  uint public ownerTestValue;\r\n\r\n  uint public oneTokenInWei;\r\n\r\n  /** State machine\r\n   *\r\n   * - Preparing: All contract initialization calls and variables have not been set yet\r\n   * - Prefunding: We have not passed start time yet\r\n   * - Funding: Active crowdsale\r\n   * - Success: Minimum funding goal reached\r\n   * - Failure: Minimum funding goal not reached before ending time\r\n   * - Finalized: The finalized has been called and succesfully executed\r\n   * - Refunding: Refunds are loaded on the contract for reclaim.\r\n   */\r\n  enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}\r\n\r\n  // A new investment was made\r\n  event Invested(address investor, uint weiAmount, uint tokenAmount);\r\n\r\n  // Refund was processed for a contributor\r\n  event Refund(address investor, uint weiAmount);\r\n\r\n  // Address participation whitelist status changed\r\n  event Whitelisted(address[] addr, bool status);\r\n\r\n  // Presale Address participation whitelist status changed\r\n  event PresaleWhitelisted(address addr, bool status);\r\n    \r\n  // Crowdsale start time has been changed\r\n  event StartsAtChanged(uint newStartsAt);\r\n      \r\n  // Crowdsale end time has been changed\r\n  event EndsAtChanged(uint newEndsAt);\r\n  \r\n  // Crowdsale token price has been changed\r\n  event TokenPriceChanged(uint tokenPrice);\r\n    \r\n  // Crowdsale multisig address has been changed    \r\n  event MultiSigChanged(address newAddr);\r\n  \r\n  // Crowdsale beneficiary address has been changed    \r\n  event BeneficiaryChanged(address newAddr);\r\n  \r\n  // Founders Team Wallet Address Changed \r\n  event FoundersWalletChanged(address newAddr);\r\n  \r\n  // Founders Team Token Allocation Percentage Changed \r\n  event FoundersTokenAllocationChanged(uint newValue);\r\n  \r\n  // Pre-Presale Tokens Value Changed\r\n  event PrePresaleTokensValueChanged(uint newValue);\r\n\r\n  constructor(address _token, uint _oneTokenInWei, address _multisigWallet, uint _start, uint _end, address _beneficiary, address _foundersTeamMultisig) public {\r\n\r\n    require(_multisigWallet != address(0) && _start != 0 && _end != 0 && _start <= _end);\r\n    owner = msg.sender;\r\n\r\n    token = FractionalERC20(_token);\r\n    oneTokenInWei = _oneTokenInWei;\r\n\r\n    multisigWallet = _multisigWallet;\r\n    startsAt = _start;\r\n    endsAt = _end;\r\n\r\n    beneficiary = _beneficiary;\r\n    foundersTeamMultisig = _foundersTeamMultisig;\r\n  }\r\n  \r\n  /**\r\n   * Just send in money and get tokens.\r\n   * Modified by : TokenMagic\r\n   */\r\n  function() payable public {\r\n    investInternal(msg.sender,0);\r\n  }\r\n  \r\n  /** \r\n  * Pre-sale contract call this function and get tokens \r\n  * Modified by : TokenMagic\r\n  */\r\n  function invest(address addr,uint tokenAmount) public payable {\r\n    investInternal(addr,tokenAmount);\r\n  }\r\n  \r\n  /**\r\n   * Make an investment.\r\n   *\r\n   * Crowdsale must be running for one to invest.\r\n   * We must have not pressed the emergency brake.\r\n   *\r\n   * @param receiver The Ethereum address who receives the tokens\r\n   *\r\n   * @return tokenAmount How mony tokens were bought\r\n   *\r\n   * Modified by : TokenMagic\r\n   */\r\n  function investInternal(address receiver, uint tokens) stopInEmergency internal returns(uint tokensBought) {\r\n\r\n    uint weiAmount = msg.value;\r\n    uint tokenAmount = tokens;\r\n    if(getState() == State.PreFunding || getState() == State.Funding) {\r\n      if(presaleWhitelist[msg.sender]){\r\n        // Allow presale particaipants\r\n        presaleWeiRaised = presaleWeiRaised.add(weiAmount);\r\n        presaleTokensSold = presaleTokensSold.add(tokenAmount);\r\n        require(presaleTokensSold <= presaleTokenLimit); \r\n      }\r\n      else if(participantWhitelist[receiver]){\r\n        uint multiplier = 10 ** token.decimals();\r\n        tokenAmount = weiAmount.times(multiplier) / oneTokenInWei;\r\n        // Allow whitelisted participants    \r\n      }\r\n      else {\r\n        revert();\r\n      }\r\n    } else {\r\n      // Unwanted state\r\n      revert();\r\n    }\r\n    \r\n    // Dust transaction\r\n    require(tokenAmount != 0);\r\n\r\n    if(investedAmountOf[receiver] == 0) {\r\n      // A new investor\r\n      investorCount++;\r\n    }\r\n\r\n    // Update investor\r\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\r\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\r\n\r\n    // Update totals\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    tokensSold = tokensSold.add(tokenAmount);\r\n    \r\n    require(tokensSold.sub(presaleTokensSold) <= crowdsaleTokenLimit);\r\n    \r\n    // Check that we did not bust the cap\r\n    require(!isBreakingCap(tokenAmount));\r\n    require(token.transferFrom(beneficiary, receiver, tokenAmount));\r\n\r\n    emit Invested(receiver, weiAmount, tokenAmount);\r\n    multisigWallet.transfer(weiAmount);\r\n    return tokenAmount;\r\n  }\r\n\r\n  /**\r\n   * Finalize a succcesful crowdsale.\r\n   * The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens.\r\n   * Added by : TokenMagic\r\n   */\r\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\r\n    require(!finalized); // Not already finalized\r\n    \r\n    // How many % of tokens the founders and others get\r\n    tokensForFoundingBoardWallet = tokensSold.times(percentageOfSoldTokensForFounders) / 100;\r\n    tokensForFoundingBoardWallet = tokensForFoundingBoardWallet.add(prePresaleTokensSold);\r\n    require(token.transferFrom(beneficiary, foundersTeamMultisig, tokensForFoundingBoardWallet));\r\n    \r\n    finalized = true;\r\n  }\r\n\r\n  /**\r\n   * Allow owner to change the percentage value of solded tokens to founders team wallet after finalize. Default value is 50.\r\n   * Added by : TokenMagic\r\n   */ \r\n  function setFoundersTokenAllocation(uint _percentageOfSoldTokensForFounders) public onlyOwner{\r\n    percentageOfSoldTokensForFounders = _percentageOfSoldTokensForFounders;\r\n    emit FoundersTokenAllocationChanged(percentageOfSoldTokensForFounders);\r\n  }\r\n\r\n  /**\r\n   * Allow crowdsale owner to close early or extend the crowdsale.\r\n   *\r\n   * This is useful e.g. for a manual soft cap implementation:\r\n   * - after X amount is reached determine manual closing\r\n   *\r\n   * This may put the crowdsale to an invalid state,\r\n   * but we trust owners know what they are doing.\r\n   *\r\n   */\r\n  function setEndsAt(uint time) onlyOwner public {\r\n    require(now < time && startsAt < time);\r\n    endsAt = time;\r\n    emit EndsAtChanged(endsAt);\r\n  }\r\n  \r\n  /**\r\n   * Allow owner to change crowdsale startsAt data.\r\n   * Added by : TokenMagic\r\n   **/ \r\n  function setStartsAt(uint time) onlyOwner public {\r\n    require(time < endsAt);\r\n    startsAt = time;\r\n    emit StartsAtChanged(startsAt);\r\n  }\r\n\r\n  /**\r\n   * Allow to change the team multisig address in the case of emergency.\r\n   *\r\n   * This allows to save a deployed crowdsale wallet in the case the crowdsale has not yet begun\r\n   * (we have done only few test transactions). After the crowdsale is going\r\n   * then multisig address stays locked for the safety reasons.\r\n   */\r\n  function setMultisig(address addr) public onlyOwner {\r\n    multisigWallet = addr;\r\n    emit MultiSigChanged(addr);\r\n  }\r\n\r\n  /**\r\n   * Allow load refunds back on the contract for the refunding.\r\n   *\r\n   * The team can transfer the funds back on the smart contract in the case the minimum goal was not reached..\r\n   */\r\n  function loadRefund() public payable inState(State.Failure) {\r\n    require(msg.value > 0);\r\n    loadedRefund = loadedRefund.add(msg.value);\r\n  }\r\n\r\n  /**\r\n   * Investors can claim refund.\r\n   *\r\n   * Note that any refunds from proxy buyers should be handled separately,\r\n   * and not through this contract.\r\n   */\r\n  function refund() public inState(State.Refunding) {\r\n    // require(token.transferFrom(msg.sender,address(this),tokenAmountOf[msg.sender])); user should approve their token to this contract before this.\r\n    uint256 weiValue = investedAmountOf[msg.sender];\r\n    require(weiValue > 0);\r\n    investedAmountOf[msg.sender] = 0;\r\n    weiRefunded = weiRefunded.add(weiValue);\r\n    emit Refund(msg.sender, weiValue);\r\n    msg.sender.transfer(weiValue);\r\n  }\r\n\r\n  /**\r\n   * @return true if the crowdsale has raised enough money to be a successful.\r\n   */\r\n  function isMinimumGoalReached() public view  returns (bool reached) {\r\n    return weiRaised >= minimumFundingGoal;\r\n  }\r\n\r\n\r\n  /**\r\n   * Crowdfund state machine management.\r\n   * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\r\n   * Modified by : TokenMagic\r\n   */\r\n  function getState() public view returns (State) {\r\n    if(finalized) return State.Finalized;\r\n    else if (block.timestamp < startsAt) return State.PreFunding;\r\n    else if (block.timestamp <= endsAt && !isCrowdsaleFull()) return State.Funding;\r\n    else if (isMinimumGoalReached()) return State.Success;\r\n    else if (!isMinimumGoalReached() && weiRaised > 0 && loadedRefund >= weiRaised) return State.Refunding;\r\n    else return State.Failure;\r\n  }\r\n\r\n  /** This is for manual testing of multisig wallet interaction */\r\n  function setOwnerTestValue(uint val) onlyOwner public {\r\n    ownerTestValue = val;\r\n  }\r\n\r\n  /**\r\n  * Allow owner to change PrePresaleTokensSold value \r\n  * Added by : TokenMagic\r\n  **/\r\n  function setPrePresaleTokens(uint _value) onlyOwner public {\r\n    prePresaleTokensSold = _value;\r\n    emit PrePresaleTokensValueChanged(_value);\r\n  }\r\n\r\n  /**\r\n   * Allow addresses to do participation.\r\n   * Modified by : TokenMagic\r\n  */\r\n  function setParticipantWhitelist(address[] addr, bool status) onlyOwner public {\r\n    for(uint i = 0; i < addr.length; i++ ){\r\n      participantWhitelist[addr[i]] = status;\r\n    }\r\n    emit Whitelisted(addr, status);\r\n  }\r\n\r\n  /**\r\n   * Allow presale to do participation.\r\n   * Added by : TokenMagic\r\n  */\r\n  function setPresaleWhitelist(address addr, bool status) onlyOwner public {\r\n    presaleWhitelist[addr] = status;\r\n    emit PresaleWhitelisted(addr, status);\r\n  }\r\n  \r\n  /**\r\n   * Allow crowdsale owner to change the crowdsale token price.\r\n   * Added by : TokenMagic\r\n  */\r\n  function setPricing(uint _oneTokenInWei) onlyOwner public{\r\n    oneTokenInWei = _oneTokenInWei;\r\n    emit TokenPriceChanged(oneTokenInWei);\r\n  } \r\n  \r\n  /**\r\n   * Allow crowdsale owner to change the crowdsale beneficiary address.\r\n   * Added by : TokenMagic\r\n  */\r\n  function changeBeneficiary(address _beneficiary) onlyOwner public{\r\n    beneficiary = _beneficiary; \r\n    emit BeneficiaryChanged(beneficiary);\r\n  }\r\n  \r\n  /**\r\n   * Allow crowdsale owner to change the crowdsale founders team address.\r\n   * Added by : TokenMagic\r\n  */\r\n  function changeFoundersWallet(address _foundersTeamMultisig) onlyOwner public{\r\n    foundersTeamMultisig = _foundersTeamMultisig;\r\n    emit FoundersWalletChanged(foundersTeamMultisig);\r\n  } \r\n  \r\n  /** Interface marker. */\r\n  function isCrowdsale() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  //\r\n  // Modifiers\r\n  //\r\n\r\n  /** Modified allowing execution only if the crowdsale is currently running.  */\r\n  modifier inState(State state) {\r\n    require(getState() == state);\r\n    _;\r\n  }\r\n\r\n /**\r\n   * Called from invest() to confirm if the curret investment does not break our cap rule.\r\n   */\r\n  function isBreakingCap(uint tokenAmount) public view returns (bool limitBroken)  {\r\n    if(tokenAmount > getTokensLeft()) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * We are sold out when our approve pool becomes empty.\r\n   */\r\n  function isCrowdsaleFull() public view returns (bool) {\r\n    return getTokensLeft() == 0;\r\n  }\r\n\r\n  /**\r\n   * Get the amount of unsold tokens allocated to this contract;\r\n   */\r\n  function getTokensLeft() public view returns (uint) {\r\n    return token.allowance(beneficiary, this);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ownerTestValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_foundersTeamMultisig\",\"type\":\"address\"}],\"name\":\"changeFoundersWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentageOfSoldTokensForFounders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumFundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleTokenLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTokenLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForFoundingBoardWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPrePresaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setEndsAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPresaleWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loadedRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMinimumGoalReached\",\"outputs\":[{\"name\":\"reached\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prePresaleTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oneTokenInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"loadRefund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setOwnerTestValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersTeamMultisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percentageOfSoldTokensForFounders\",\"type\":\"uint256\"}],\"name\":\"setFoundersTokenAllocation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[]\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setParticipantWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setStartsAt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsaleFull\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokensLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"isBreakingCap\",\"outputs\":[{\"name\":\"limitBroken\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oneTokenInWei\",\"type\":\"uint256\"}],\"name\":\"setPricing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMultisig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleWeiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_oneTokenInWei\",\"type\":\"uint256\"},{\"name\":\"_multisigWallet\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_foundersTeamMultisig\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"PresaleWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newStartsAt\",\"type\":\"uint256\"}],\"name\":\"StartsAtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newEndsAt\",\"type\":\"uint256\"}],\"name\":\"EndsAtChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"TokenPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"MultiSigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"BeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"FoundersWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"FoundersTokenAllocationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"PrePresaleTokensValueChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HoardCrowdsale","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000805ea54bdf2db9481cc8a019d9517e939c6371150000000000000000000000000000000000000000000000000000e35fa931a000000000000000000000000000246e84f1f0344ed216b6f164c864fa35f76876c2000000000000000000000000000000000000000000000000000000005b9c4b80000000000000000000000000000000000000000000000000000000005bc529ff000000000000000000000000246e84f1f0344ed216b6f164c864fa35f76876c2000000000000000000000000246e84f1f0344ed216b6f164c864fa35f76876c2","Library":"SafeMathLib:02DBB1a3E1059d4a7526A7EA7A0b8dF38D2651ed","SwarmSource":"bzzr://601cd308a85df16b1201e1efd3d44bdb9e8d55571a81490cbb07bb1321a40d72"}]}