{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n*   __/\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\____________/\\\\\\\\__/\\\\\\________/\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\_\r\n*    _\\/////\\\\\\///__\\/\\\\\\\\\\\\________/\\\\\\\\\\\\_\\/\\\\\\_____/\\\\\\//____/\\\\\\//////////__\r\n*     _____\\/\\\\\\_____\\/\\\\\\//\\\\\\____/\\\\\\//\\\\\\_\\/\\\\\\__/\\\\\\//______/\\\\\\_____________\r\n*      _____\\/\\\\\\_____\\/\\\\\\\\///\\\\\\/\\\\\\/_\\/\\\\\\_\\/\\\\\\\\\\\\//\\\\\\_____\\/\\\\\\____/\\\\\\\\\\\\\\_\r\n*       _____\\/\\\\\\_____\\/\\\\\\__\\///\\\\\\/___\\/\\\\\\_\\/\\\\\\//_\\//\\\\\\____\\/\\\\\\___\\/////\\\\\\_\r\n*        _____\\/\\\\\\_____\\/\\\\\\____\\///_____\\/\\\\\\_\\/\\\\\\____\\//\\\\\\___\\/\\\\\\_______\\/\\\\\\_\r\n*         _____\\/\\\\\\_____\\/\\\\\\_____________\\/\\\\\\_\\/\\\\\\_____\\//\\\\\\__\\/\\\\\\_______\\/\\\\\\_\r\n*          __/\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_____________\\/\\\\\\_\\/\\\\\\______\\//\\\\\\_\\//\\\\\\\\\\\\\\\\\\\\\\\\/__\r\n*           _\\///////////__\\///______________\\///__\\///________\\///___\\////////////____\r\n*/\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y)\r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n    /**\r\n     * @dev x to the power of y\r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else\r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary NameFilter {\r\n    /**\r\n     * @dev filters name strings\r\n     * -converts uppercase to lower case.\r\n     * -makes sure it does not start/end with a space\r\n     * -makes sure it does not contain multiple spaces in a row\r\n     * -cannot be only numbers\r\n     * -cannot start with 0x\r\n     * -restricts characters to A-Z, a-z, 0-9, and space.\r\n     * @return reprocessed string in bytes32 format\r\n     */\r\n    function nameFilter(string _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n\r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n\r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n\r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    // require character is a space\r\n                    _temp[i] == 0x20 ||\r\n                    // OR lowercase a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    // or 0-9\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n\r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;\r\n            }\r\n        }\r\n\r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n\r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\nlibrary ImkgKeysCalc {\r\n    using SafeMath for *;\r\n\r\n    // calculate X eth can buy how many keys above current eth.\r\n    function keysRec(uint256 _curEth, uint256 _newEth)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));\r\n    }\r\n\r\n    // calculate X keys can value how much eth above current keys.\r\n    function ethRec(uint256 _curKeys, uint256 _sellKeys)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));\r\n    }\r\n\r\n    // calculate X eth corresponding how many keys in curre pots.\r\n    function keys(uint256 _eth)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000000);\r\n    }\r\n\r\n    // calculate X keys corresponding how much eth in curre pots.\r\n    function eth(uint256 _keys)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return ((78125000000000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000000))) / (2))) / ((1000000000000000000).sq());\r\n    }\r\n}\r\n\r\ncontract Imkg {\r\n    using SafeMath for *;\r\n    using NameFilter for string;\r\n    using ImkgKeysCalc for uint256;\r\n\r\n    //**************\r\n    // EVENTS\r\n    //**************\r\n\r\n    // fired player registers a new name\r\n    event onNewNameEvent\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        bool isNewPlayer,\r\n        uint256 amountPaid,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // fired leader sets a new team name\r\n    event onNewTeamNameEvent\r\n    (\r\n        uint256 indexed teamID,\r\n        bytes32 indexed teamName,\r\n        uint256 indexed playerID,\r\n        bytes32 playerName,\r\n        uint256 amountPaid,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // fired when buy the bomb\r\n    event onTxEvent\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 teamID,\r\n        bytes32 teamName,\r\n        uint256 ethIn,\r\n        uint256 keysBought\r\n    );\r\n\r\n    // fired a bonus to invitor when a invited pays\r\n    event onAffPayoutEvent\r\n    (\r\n        uint256 indexed affID,\r\n        address affAddress,\r\n        bytes32 affName,\r\n        uint256 indexed roundID,\r\n        uint256 indexed buyerID,\r\n        uint256 amount,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // fired an out event\r\n    event onOutEvent\r\n    (\r\n        uint256 deadCount,\r\n        uint256 liveCount,\r\n        uint256 deadKeys\r\n    );\r\n\r\n    // fired end event when game is over\r\n    event onEndRoundEvent\r\n    (\r\n        uint256 winnerTID,  // winner\r\n        bytes32 winnerTName,\r\n        uint256 playersCount,\r\n        uint256 eth    // eth in pot\r\n    );\r\n\r\n    // fired when withdraw\r\n    event onWithdrawEvent\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethOut,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // fired out initial event\r\n    event onOutInitialEvent\r\n    (\r\n        uint256 outTime\r\n    );\r\n\r\n    //**************\r\n    // DATA\r\n    //**************\r\n\r\n    // player info\r\n    struct Player {\r\n        address addr;   //  player address\r\n        bytes32 name;\r\n        uint256 gen;    // balance\r\n        uint256 aff;    // balance for invite\r\n        uint256 laff;   // the latest invitor. ID\r\n    }\r\n\r\n    // player info in every round\r\n    struct PlayerRounds {\r\n        uint256 eth;    // all eths in current round\r\n        mapping (uint256 => uint256) plyrTmKeys;    // teamid => keys\r\n        bool withdrawn;     // if earnings are withdrawn in current round\r\n    }\r\n\r\n    // team info\r\n    struct Team {\r\n        uint256 id;     // team id\r\n        bytes32 name;    // team name\r\n        uint256 keys;   // key s in the team\r\n        uint256 eth;   // eth from the team\r\n        uint256 price;    // price of the last key (only for view)\r\n        uint256 playersCount;   // how many team members\r\n        uint256 leaderID;   // leader pID (leader is always the top 1 player in the team)\r\n        address leaderAddr;  // leader address\r\n        bool dead;  // if team is out\r\n    }\r\n\r\n    // round info\r\n    struct Round {\r\n        uint256 start;  // start time\r\n        uint256 state;  // 0:inactive,1:prepare,2:out,3:end\r\n        uint256 eth;    // all eths\r\n        uint256 pot;    // amount of this pot\r\n        uint256 keys;   // all keys\r\n        uint256 team;   // first team ID\r\n        uint256 ethPerKey;  // how many eth per key in Winner Team. (must after the game)\r\n        uint256 lastOutTime;   // the last out emit time\r\n        uint256 deadRate;   // current dead rate (first team all keys * rate = dead line)\r\n        uint256 deadKeys;   // next dead line\r\n        uint256 liveTeams;  // alive teams\r\n        uint256 tID_;    // how many teams in this Round\r\n    }\r\n\r\n    //****************\r\n    // GAME SETTINGS\r\n    //****************\r\n    string constant public name = \"I AM The King of God\";\r\n    string constant public symbol = \"IMKG\";\r\n    address public owner;\r\n    address public cooperator;\r\n    uint256 public minTms_ = 3;    //minimum team number for active limit\r\n    uint256 public maxTms_ = 12;    // maximum team number\r\n    uint256 public roundGap_ = 120;    // round gap: 2 mins\r\n    uint256 public OutGap_ = 43200;   // out gap: 12 hours\r\n    uint256 constant private registrationFee_ = 10 finney;    // fee for register a new name\r\n\r\n    //****************\r\n    // PLAYER DATA\r\n    //****************\r\n    uint256 public pID_;    // all players\r\n    mapping (address => uint256) public pIDxAddr_;  // (addr => pID) returns player id by address\r\n    mapping (bytes32 => uint256) public pIDxName_;  // (name => pID) returns player id by name\r\n    mapping (uint256 => Player) public plyr_;   // (pID => data) player data\r\n\r\n    //****************\r\n    // ROUND DATA\r\n    //****************\r\n    uint256 public rID_;    // current round ID\r\n    mapping (uint256 => Round) public round_;   // round ID => round data\r\n\r\n    // Player Rounds\r\n    mapping (uint256 => mapping (uint256 => PlayerRounds)) public plyrRnds_;  // player ID => round ID => player info\r\n\r\n    //****************\r\n    // TEAM DATA\r\n    //****************\r\n    mapping (uint256 => mapping (uint256 => Team)) public rndTms_;  // round ID => team ID => team info\r\n    mapping (uint256 => mapping (bytes32 => uint256)) public rndTIDxName_;  // (rID => team name => tID) returns team id by name\r\n\r\n    // =============\r\n    // CONSTRUCTOR\r\n    // =============\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        cooperator = address(0x8fccb08b8c4e6f4a3500Af33c45b28BF5290CFbC);\r\n    }\r\n\r\n    // =============\r\n    // MODIFIERS\r\n    // =============\r\n\r\n    // only developer\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev used to make sure no one can interact with contract until it has\r\n     * been activated.\r\n     */\r\n    modifier isActivated() {\r\n        require(activated_ == true, \"its not ready yet.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev prevents contracts from interacting with imkg\r\n     */\r\n    modifier isHuman() {\r\n        require(tx.origin == msg.sender, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev sets boundaries for incoming tx\r\n     */\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 1000000000, \"no less than 1 Gwei\");\r\n        require(_eth <= 100000000000000000000000, \"no more than 100000 ether\");\r\n        _;\r\n    }\r\n\r\n    // **************=======\r\n    // PUBLIC INTERACTION\r\n    // **************=======\r\n\r\n    /**\r\n     * @dev emergency buy uses last stored affiliate ID and the first team\r\n     */\r\n    function()\r\n        public\r\n        payable\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n    {\r\n        buy(round_[rID_].team, \"imkg\");\r\n    }\r\n\r\n    /**\r\n     * @dev buy function\r\n     * @param _affCode the ID/address/name of the player who gets the affiliate fee\r\n     * @param _team what team is the player playing for\r\n     */\r\n    function buy(uint256 _team, bytes32 _affCode)\r\n        public\r\n        payable\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n    {\r\n        // ensure game has not ended\r\n        require(round_[rID_].state < 3, \"This round has ended.\");\r\n\r\n        // ensure game is in right state\r\n        if (round_[rID_].state == 0){\r\n            require(now >= round_[rID_].start, \"This round hasn't started yet.\");\r\n            round_[rID_].state = 1;\r\n        }\r\n\r\n        // get player ID if not exists ,create new player\r\n        determinePID(msg.sender);\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        uint256 _tID;\r\n\r\n        // manage affiliate residuals\r\n        // _affCode should be player name.\r\n        uint256 _affID;\r\n        if (_affCode == \"\" || _affCode == plyr_[_pID].name){\r\n            // use last stored affiliate code\r\n            _affID = plyr_[_pID].laff;\r\n        } else {\r\n            // get affiliate ID from aff Code\r\n            _affID = pIDxName_[_affCode];\r\n\r\n            // if affID is not the same as previously stored\r\n            if (_affID != plyr_[_pID].laff){\r\n                // update last affiliate\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        // buy info\r\n        if (round_[rID_].state == 1){\r\n            // Check team id\r\n            _tID = determinTID(_team, _pID);\r\n\r\n            // Buy\r\n            buyCore(_pID, _affID, _tID, msg.value);\r\n\r\n            // if team number is more than minimum team number, then go the out state（state: 2）\r\n            if (round_[rID_].tID_ >= minTms_){\r\n                // go the out state\r\n                round_[rID_].state = 2;\r\n\r\n                // out initial\r\n                startOut();\r\n            }\r\n\r\n        } else if (round_[rID_].state == 2){\r\n            // if only 1 alive team, go end\r\n            if (round_[rID_].liveTeams == 1){\r\n                endRound();\r\n\r\n                // pay back\r\n                refund(_pID, msg.value);\r\n\r\n                return;\r\n            }\r\n\r\n            // Check team id\r\n            _tID = determinTID(_team, _pID);\r\n\r\n            // Buy\r\n            buyCore(_pID, _affID, _tID, msg.value);\r\n\r\n            // Out if needed\r\n            if (now > round_[rID_].lastOutTime.add(OutGap_)) {\r\n                out();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev withdraws all of your earnings.\r\n     */\r\n    function withdraw()\r\n        public\r\n        isActivated()\r\n        isHuman()\r\n    {\r\n        // fetch player ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // ensure player is effective\r\n        require(_pID != 0, \"Please join the game first!\");\r\n\r\n        // setup temp var for player eth\r\n        uint256 _eth;\r\n\r\n        // calculate the remain amount that has not withdrawn\r\n        if (rID_ > 1){\r\n            for (uint256 i = 1; i < rID_; i++) {\r\n                // if has not withdrawn, then withdraw\r\n                if (plyrRnds_[_pID][i].withdrawn == false){\r\n                    if (plyrRnds_[_pID][i].plyrTmKeys[round_[i].team] != 0) {\r\n                        _eth = _eth.add(round_[i].ethPerKey.mul(plyrRnds_[_pID][i].plyrTmKeys[round_[i].team]) / 1000000000000000000);\r\n                    }\r\n                    plyrRnds_[_pID][i].withdrawn = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        _eth = _eth.add(plyr_[_pID].gen).add(plyr_[_pID].aff);\r\n\r\n        // transfer the balance\r\n        if (_eth > 0) {\r\n            plyr_[_pID].addr.transfer(_eth);\r\n        }\r\n\r\n        // clear\r\n        plyr_[_pID].gen = 0;\r\n        plyr_[_pID].aff = 0;\r\n\r\n        // Event\r\n        emit onWithdrawEvent(_pID, plyr_[_pID].addr, plyr_[_pID].name, _eth, now);\r\n    }\r\n\r\n    /**\r\n     * @dev use these to register names. UI will always display the last name you registered.\r\n     * but you will still own all previously registered names to use as affiliate links.\r\n     * - must pay a registration fee.\r\n     * - name must be unique\r\n     * - name cannot start or end with a space\r\n     * - cannot have more than 1 space in a row\r\n     * - cannot be only numbers\r\n     * - cannot start with 0x\r\n     * - name must be at least 1 char\r\n     * - max length of 32 characters long\r\n     * - allowed characters: a-z, 0-9, and space\r\n     * @param _nameString players desired name\r\n     */\r\n    function registerNameXID(string _nameString)\r\n        public\r\n        payable\r\n        isHuman()\r\n    {\r\n        // make sure name fees paid\r\n        require (msg.value >= registrationFee_, \"You have to pay the name fee.(10 finney)\");\r\n\r\n        // filter name + condition checks\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n\r\n        // set up address\r\n        address _addr = msg.sender;\r\n\r\n        // set up our tx event data and determine if player is new or not\r\n        // bool _isNewPlayer = determinePID(_addr);\r\n        bool _isNewPlayer = determinePID(_addr);\r\n\r\n        // fetch player id\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        // ensure the name is not used\r\n        require(pIDxName_[_name] == 0, \"sorry that names already taken\");\r\n\r\n        // add name to player profile, registry, and name book\r\n        plyr_[_pID].name = _name;\r\n        pIDxName_[_name] = _pID;\r\n\r\n        // deposit registration fee\r\n        plyr_[1].gen = (msg.value).add(plyr_[1].gen);\r\n\r\n        // Event\r\n        emit onNewNameEvent(_pID, _addr, _name, _isNewPlayer, msg.value, now);\r\n    }\r\n\r\n    /**\r\n     * @dev use these to register a team names. UI will always display the last name you registered.\r\n     * - only team leader can call this func.\r\n     * - must pay a registration fee.\r\n     * - name must be unique\r\n     * - name cannot start or end with a space\r\n     * - cannot have more than 1 space in a row\r\n     * - cannot be only numbers\r\n     * - cannot start with 0x\r\n     * - name must be at least 1 char\r\n     * - max length of 32 characters long\r\n     * - allowed characters: a-z, 0-9, and space\r\n     */\r\n    function setTeamName(uint256 _tID, string _nameString)\r\n        public\r\n        payable\r\n        isHuman()\r\n    {\r\n        // team should be effective\r\n        require(_tID <= round_[rID_].tID_ && _tID != 0, \"There's no this team.\");\r\n\r\n        // fetch player ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // must be team leader\r\n        require(_pID == rndTms_[rID_][_tID].leaderID, \"Only team leader can change team name. You can invest more money to be the team leader.\");\r\n\r\n        // need register fee\r\n        require (msg.value >= registrationFee_, \"You have to pay the name fee.(10 finney)\");\r\n\r\n        // filter name + condition checks\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n\r\n        require(rndTIDxName_[rID_][_name] == 0, \"sorry that names already taken\");\r\n\r\n        // add name to team\r\n        rndTms_[rID_][_tID].name = _name;\r\n        rndTIDxName_[rID_][_name] = _tID;\r\n\r\n        // deposit registration fee\r\n        plyr_[1].gen = (msg.value).add(plyr_[1].gen);\r\n\r\n        // event\r\n        emit onNewTeamNameEvent(_tID, _name, _pID, plyr_[_pID].name, msg.value, now);\r\n    }\r\n\r\n    // deposit in the game\r\n    function deposit()\r\n        public\r\n        payable\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value)\r\n    {\r\n        determinePID(msg.sender);\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        plyr_[_pID].gen = (msg.value).add(plyr_[_pID].gen);\r\n    }\r\n\r\n    //**************\r\n    // GETTERS\r\n    //**************\r\n\r\n    // check the name\r\n    function checkIfNameValid(string _nameStr)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 _name = _nameStr.nameFilter();\r\n        if (pIDxName_[_name] == 0)\r\n            return (true);\r\n        else\r\n            return (false);\r\n    }\r\n\r\n    /**\r\n     * @dev returns next out time\r\n     * @return next out time\r\n     */\r\n    function getNextOutAfter()\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(round_[rID_].state == 2, \"Not in Out period.\");\r\n\r\n        uint256 _tNext = round_[rID_].lastOutTime.add(OutGap_);\r\n        uint256 _t = _tNext > now ? _tNext.sub(now) : 0;\r\n\r\n        return _t;\r\n    }\r\n\r\n    /**\r\n     * @dev returns player info based on address.  if no address is given, it will\r\n     * use msg.sender\r\n     * @param _addr address of the player you want to lookup\r\n     * @return player ID\r\n     * @return player name\r\n     * @return keys owned (current round)\r\n     * @return winnings vault\r\n     * @return general vault\r\n     * @return affiliate vault\r\n\t * @return player round eth\r\n     */\r\n    function getPlayerInfoByAddress(address _addr)\r\n        public\r\n        view\r\n        returns(uint256, address, bytes32, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        if (_addr == address(0))\r\n        {\r\n            _addr == msg.sender;\r\n        }\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        return (\r\n            _pID,\r\n            _addr,\r\n            plyr_[_pID].name,\r\n            plyr_[_pID].gen,\r\n            plyr_[_pID].aff,\r\n            plyrRnds_[_pID][rID_].eth,\r\n            getProfit(_pID),\r\n            getPreviousProfit(_pID)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev returns _pID player for _tID team at _roundID round all keys\r\n     * - _roundID = 0 then _roundID = current round\r\n     * @return keys\r\n     */\r\n    function getPlayerRoundTeamBought(uint256 _pID, uint256 _roundID, uint256 _tID)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _rID = _roundID == 0 ? rID_ : _roundID;\r\n        return plyrRnds_[_pID][_rID].plyrTmKeys[_tID];\r\n    }\r\n\r\n    /**\r\n     * @dev returns _pID player at _roundID round all keys\r\n     * - _roundID = 0 then _roundID = current round\r\n     * @return array keysList\r\n     * - keysList[i] :team[i+1] for _pID\r\n     */\r\n    function getPlayerRoundBought(uint256 _pID, uint256 _roundID)\r\n        public\r\n        view\r\n        returns (uint256[])\r\n    {\r\n        uint256 _rID = _roundID == 0 ? rID_ : _roundID;\r\n\r\n        // team count\r\n        uint256 _tCount = round_[_rID].tID_;\r\n\r\n        // keys for player in every team\r\n        uint256[] memory keysList = new uint256[](_tCount);\r\n\r\n        for (uint i = 0; i < _tCount; i++) {\r\n            keysList[i] = plyrRnds_[_pID][_rID].plyrTmKeys[i+1];\r\n        }\r\n\r\n        return keysList;\r\n    }\r\n\r\n    /**\r\n     * @dev returns _pID player at every round all eths and winnings\r\n     * @return array {ethList, winList}\r\n     */\r\n    function getPlayerRounds(uint256 _pID)\r\n        public\r\n        view\r\n        returns (uint256[], uint256[])\r\n    {\r\n        uint256[] memory _ethList = new uint256[](rID_);\r\n        uint256[] memory _winList = new uint256[](rID_);\r\n        for (uint i=0; i < rID_; i++){\r\n            _ethList[i] = plyrRnds_[_pID][i+1].eth;\r\n            _winList[i] = plyrRnds_[_pID][i+1].plyrTmKeys[round_[i+1].team].mul(round_[i+1].ethPerKey) / 1000000000000000000;\r\n        }\r\n\r\n        return (\r\n            _ethList,\r\n            _winList\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev returns last round info\r\n     * @return round ID\r\n     * @return round state\r\n     * @return round pots\r\n     * @return win team ID\r\n     * @return team name\r\n     * @return team player count\r\n     * @return team number\r\n     */\r\n    function getLastRoundInfo()\r\n        public\r\n        view\r\n        returns (uint256, uint256, uint256, uint256, bytes32, uint256, uint256)\r\n    {\r\n        // last round id\r\n        uint256 _rID = rID_.sub(1);\r\n\r\n        // last winner\r\n        uint256 _tID = round_[_rID].team;\r\n\r\n        return (\r\n            _rID,\r\n            round_[_rID].state,\r\n            round_[_rID].pot,\r\n            _tID,\r\n            rndTms_[_rID][_tID].name,\r\n            rndTms_[_rID][_tID].playersCount,\r\n            round_[_rID].tID_\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev returns all current round info needed for front end\r\n     * @return round id\r\n     * @return round state\r\n     * @return current eths\r\n     * @return current pot\r\n     * @return leader team ID\r\n     * @return current price per key\r\n     * @return the last out time\r\n     * @return time out gap\r\n     * @return current dead rate\r\n     * @return current dead keys\r\n     * @return alive teams\r\n     * @return team count\r\n     * @return time round started\r\n     */\r\n    function getCurrentRoundInfo()\r\n        public\r\n        view\r\n        returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        return (\r\n            rID_,\r\n            round_[rID_].state,\r\n            round_[rID_].eth,\r\n            round_[rID_].pot,\r\n            round_[rID_].keys,\r\n            round_[rID_].team,\r\n            round_[rID_].ethPerKey,\r\n            round_[rID_].lastOutTime,\r\n            OutGap_,\r\n            round_[rID_].deadRate,\r\n            round_[rID_].deadKeys,\r\n            round_[rID_].liveTeams,\r\n            round_[rID_].tID_,\r\n            round_[rID_].start\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev returns _tID team info\r\n     * @return team id\r\n     * @return team name\r\n     * @return team all keys\r\n     * @return team all eths\r\n     * @return current price per key for this team\r\n     * @return leader player ID\r\n     * @return if team is out\r\n     */\r\n    function getTeamInfoByID(uint256 _tID)\r\n        public\r\n        view\r\n        returns (uint256, bytes32, uint256, uint256, uint256, uint256, bool)\r\n    {\r\n        require(_tID <= round_[rID_].tID_, \"There's no this team.\");\r\n\r\n        return (\r\n            rndTms_[rID_][_tID].id,\r\n            rndTms_[rID_][_tID].name,\r\n            rndTms_[rID_][_tID].keys,\r\n            rndTms_[rID_][_tID].eth,\r\n            rndTms_[rID_][_tID].price,\r\n            rndTms_[rID_][_tID].leaderID,\r\n            rndTms_[rID_][_tID].dead\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev returns all team info\r\n     * @return array team ids\r\n     * @return array team names\r\n     * @return array team all keys\r\n     * @return array team all eths\r\n     * @return array current price per key for this team\r\n     * @return array team members\r\n     * @return array if team is out\r\n     */\r\n    function getTeamsInfo()\r\n        public\r\n        view\r\n        returns (uint256[], bytes32[], uint256[], uint256[], uint256[], uint256[], bool[])\r\n    {\r\n        uint256 _tID = round_[rID_].tID_;\r\n\r\n        // Lists of Team Info\r\n        uint256[] memory _idList = new uint256[](_tID);\r\n        bytes32[] memory _nameList = new bytes32[](_tID);\r\n        uint256[] memory _keysList = new uint256[](_tID);\r\n        uint256[] memory _ethList = new uint256[](_tID);\r\n        uint256[] memory _priceList = new uint256[](_tID);\r\n        uint256[] memory _membersList = new uint256[](_tID);\r\n        bool[] memory _deadList = new bool[](_tID);\r\n\r\n        // Data\r\n        for (uint i = 0; i < _tID; i++) {\r\n            _idList[i] = rndTms_[rID_][i+1].id;\r\n            _nameList[i] = rndTms_[rID_][i+1].name;\r\n            _keysList[i] = rndTms_[rID_][i+1].keys;\r\n            _ethList[i] = rndTms_[rID_][i+1].eth;\r\n            _priceList[i] = rndTms_[rID_][i+1].price;\r\n            _membersList[i] = rndTms_[rID_][i+1].playersCount;\r\n            _deadList[i] = rndTms_[rID_][i+1].dead;\r\n        }\r\n\r\n        return (\r\n            _idList,\r\n            _nameList,\r\n            _keysList,\r\n            _ethList,\r\n            _priceList,\r\n            _membersList,\r\n            _deadList\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev returns all team leaders info\r\n     * @return array team ids\r\n     * @return array team leader ids\r\n     * @return array team leader names\r\n     * @return array team leader address\r\n     */\r\n    function getTeamLeaders()\r\n        public\r\n        view\r\n        returns (uint256[], uint256[], bytes32[], address[])\r\n    {\r\n        uint256 _tID = round_[rID_].tID_;\r\n\r\n        // Teams' leaders info\r\n        uint256[] memory _idList = new uint256[](_tID);\r\n        uint256[] memory _leaderIDList = new uint256[](_tID);\r\n        bytes32[] memory _leaderNameList = new bytes32[](_tID);\r\n        address[] memory _leaderAddrList = new address[](_tID);\r\n\r\n        // Data\r\n        for (uint i = 0; i < _tID; i++) {\r\n            _idList[i] = rndTms_[rID_][i+1].id;\r\n            _leaderIDList[i] = rndTms_[rID_][i+1].leaderID;\r\n            _leaderNameList[i] = plyr_[_leaderIDList[i]].name;\r\n            _leaderAddrList[i] = rndTms_[rID_][i+1].leaderAddr;\r\n        }\r\n\r\n        return (\r\n            _idList,\r\n            _leaderIDList,\r\n            _leaderNameList,\r\n            _leaderAddrList\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev returns predict the profit for the leader team\r\n     * @return eth\r\n     */\r\n    function getProfit(uint256 _pID)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // leader team ID\r\n        uint256 _tID = round_[rID_].team;\r\n\r\n        // if player not in the leader team\r\n        if (plyrRnds_[_pID][rID_].plyrTmKeys[_tID] == 0){\r\n            return 0;\r\n        }\r\n\r\n        // player's keys in the leader team\r\n        uint256 _keys = plyrRnds_[_pID][rID_].plyrTmKeys[_tID];\r\n\r\n        // calculate eth per key\r\n        uint256 _ethPerKey = round_[rID_].pot.mul(1000000000000000000) / rndTms_[rID_][_tID].keys;\r\n\r\n        // calculate the win value\r\n        uint256 _value = _keys.mul(_ethPerKey) / 1000000000000000000;\r\n\r\n        return _value;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the eths that has not withdrawn before current round\r\n     * @return eth\r\n     */\r\n    function getPreviousProfit(uint256 _pID)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 _eth;\r\n\r\n        if (rID_ > 1){\r\n            // calculate the eth that has not withdrawn for the ended round\r\n            for (uint256 i = 1; i < rID_; i++) {\r\n                if (plyrRnds_[_pID][i].withdrawn == false){\r\n                    if (plyrRnds_[_pID][i].plyrTmKeys[round_[i].team] != 0) {\r\n                        _eth = _eth.add(round_[i].ethPerKey.mul(plyrRnds_[_pID][i].plyrTmKeys[round_[i].team]) / 1000000000000000000);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // if there is not ended round\r\n            _eth = 0;\r\n        }\r\n\r\n        return _eth;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the next key price for _tID team\r\n     * @return eth\r\n     */\r\n    function getNextKeyPrice(uint256 _tID)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        require(_tID <= round_[rID_].tID_ && _tID != 0, \"No this team.\");\r\n\r\n        return ( (rndTms_[rID_][_tID].keys.add(1000000000000000000)).ethRec(1000000000000000000) );\r\n    }\r\n\r\n    /**\r\n     * @dev returns the eth for buying _keys keys at _tID team\r\n     * @return eth\r\n     */\r\n    function getEthFromKeys(uint256 _tID, uint256 _keys)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        if (_tID <= round_[rID_].tID_ && _tID != 0){\r\n            // if team is exists\r\n            return ((rndTms_[rID_][_tID].keys.add(_keys)).ethRec(_keys));\r\n        } else {\r\n            // if team is not exists\r\n            return ((uint256(0).add(_keys)).ethRec(_keys));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev returns the keys for buying _eth eths at _tID team\r\n     * @return keys\r\n     */\r\n    function getKeysFromEth(uint256 _tID, uint256 _eth)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_tID <= round_[rID_].tID_ && _tID != 0){\r\n            // if team is exists\r\n            return (rndTms_[rID_][_tID].eth).keysRec(_eth);\r\n        } else {\r\n            // if team is not exists\r\n            return (uint256(0).keysRec(_eth));\r\n        }\r\n    }\r\n\r\n    // **************============\r\n    //   PRIVATE: CORE GAME LOGIC\r\n    // **************============\r\n\r\n    /**\r\n     * @dev logic runs whenever a buy order is executed.  determines how to handle\r\n     * incoming eth depending on if we are in an active round or not\r\n     */\r\n    function buyCore(uint256 _pID, uint256 _affID, uint256 _tID, uint256 _eth)\r\n        private\r\n    {\r\n        uint256 _keys = (rndTms_[rID_][_tID].eth).keysRec(_eth);\r\n\r\n        // player\r\n        if (plyrRnds_[_pID][rID_].plyrTmKeys[_tID] == 0){\r\n            rndTms_[rID_][_tID].playersCount++;\r\n        }\r\n        plyrRnds_[_pID][rID_].plyrTmKeys[_tID] = _keys.add(plyrRnds_[_pID][rID_].plyrTmKeys[_tID]);\r\n        plyrRnds_[_pID][rID_].eth = _eth.add(plyrRnds_[_pID][rID_].eth);\r\n\r\n        // Team\r\n        rndTms_[rID_][_tID].keys = _keys.add(rndTms_[rID_][_tID].keys);\r\n        rndTms_[rID_][_tID].eth = _eth.add(rndTms_[rID_][_tID].eth);\r\n        rndTms_[rID_][_tID].price = _eth.mul(1000000000000000000) / _keys;\r\n        uint256 _teamLeaderID = rndTms_[rID_][_tID].leaderID;\r\n        // refresh team leader\r\n        if (plyrRnds_[_pID][rID_].plyrTmKeys[_tID] > plyrRnds_[_teamLeaderID][rID_].plyrTmKeys[_tID]){\r\n            rndTms_[rID_][_tID].leaderID = _pID;\r\n            rndTms_[rID_][_tID].leaderAddr = msg.sender;\r\n        }\r\n\r\n        // Round\r\n        round_[rID_].keys = _keys.add(round_[rID_].keys);\r\n        round_[rID_].eth = _eth.add(round_[rID_].eth);\r\n        // refresh round leader\r\n        if (rndTms_[rID_][_tID].keys > rndTms_[rID_][round_[rID_].team].keys){\r\n            round_[rID_].team = _tID;\r\n        }\r\n\r\n        distribute(rID_, _pID, _eth, _affID);\r\n\r\n        // Event\r\n        emit onTxEvent(_pID, msg.sender, plyr_[_pID].name, _tID, rndTms_[rID_][_tID].name, _eth, _keys);\r\n    }\r\n\r\n    // distribute eth\r\n    function distribute(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID)\r\n        private\r\n    {\r\n        // [1] com - 3%\r\n        uint256 _com = (_eth.mul(3)) / 100;\r\n\r\n        // pay community reward\r\n        plyr_[1].gen = _com.add(plyr_[1].gen);\r\n\r\n        // [2] aff - 10%\r\n        uint256 _aff = _eth / 10;\r\n\r\n        if (_affID != _pID && plyr_[_affID].name != \"\") {\r\n            // pay aff\r\n            plyr_[_affID].aff = _aff.add(plyr_[_affID].aff);\r\n\r\n            // Event bonus for invite\r\n            emit onAffPayoutEvent(_affID, plyr_[_affID].addr, plyr_[_affID].name, _rID, _pID, _aff, now);\r\n        } else {\r\n            // if not affiliate, this amount of eth add to the pot\r\n            _aff = 0;\r\n        }\r\n\r\n        // [3] pot - 87%\r\n        uint256 _pot = _eth.sub(_aff).sub(_com);\r\n\r\n        // update current pot\r\n        round_[_rID].pot = _pot.add(round_[_rID].pot);\r\n    }\r\n\r\n    /**\r\n     * @dev ends the round. manages paying out winner/splitting up pot\r\n     */\r\n    function endRound()\r\n        private\r\n    {\r\n        require(round_[rID_].state < 3, \"Round only end once.\");\r\n\r\n        // set round state\r\n        round_[rID_].state = 3;\r\n\r\n        // all pot\r\n        uint256 _pot = round_[rID_].pot;\r\n\r\n        // Devide Round Pot\r\n        // [1] winner 85%\r\n        uint256 _win = (_pot.mul(85))/100;\r\n\r\n        // [2] com 5%\r\n        uint256 _com = (_pot.mul(5))/100;\r\n\r\n        // [3] next round 10%\r\n        uint256 _res = (_pot.sub(_win)).sub(_com);\r\n\r\n        // win team\r\n        uint256 _tID = round_[rID_].team;\r\n        // ethPerKey (A Full Key = 10**18 keys)\r\n        uint256 _epk = (_win.mul(1000000000000000000)) / (rndTms_[rID_][_tID].keys);\r\n\r\n        // if dust\r\n        uint256 _dust = _win.sub((_epk.mul(rndTms_[rID_][_tID].keys)) / 1000000000000000000);\r\n        if (_dust > 0) {\r\n            _win = _win.sub(_dust);\r\n            _res = _res.add(_dust);\r\n        }\r\n\r\n        // pay winner team\r\n        round_[rID_].ethPerKey = _epk;\r\n\r\n        // pay community reward\r\n        plyr_[1].gen = _com.add(plyr_[1].gen);\r\n\r\n        // Event\r\n        emit onEndRoundEvent(_tID, rndTms_[rID_][_tID].name, rndTms_[rID_][_tID].playersCount, _pot);\r\n\r\n        // next round\r\n        rID_++;\r\n        round_[rID_].pot = _res;\r\n        round_[rID_].start = now + roundGap_;\r\n    }\r\n\r\n    // refund\r\n    function refund(uint256 _pID, uint256 _value)\r\n        private\r\n    {\r\n        plyr_[_pID].gen = _value.add(plyr_[_pID].gen);\r\n    }\r\n\r\n    /**\r\n     * @dev create a new team\r\n     * @return team ID\r\n     */\r\n    function createTeam(uint256 _pID, uint256 _eth)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        // maximum team number limit\r\n        require(round_[rID_].tID_ < maxTms_, \"The number of teams has reached the maximum limit.\");\r\n\r\n        // payable should more than 1eth\r\n        require(_eth >= 1000000000000000000, \"You need at least 1 eth to create a team, though creating a new team is free.\");\r\n\r\n        // update data\r\n        round_[rID_].tID_++;\r\n        round_[rID_].liveTeams++;\r\n\r\n        // new team ID\r\n        uint256 _tID = round_[rID_].tID_;\r\n\r\n        // new team data\r\n        rndTms_[rID_][_tID].id = _tID;\r\n        rndTms_[rID_][_tID].leaderID = _pID;\r\n        rndTms_[rID_][_tID].leaderAddr = plyr_[_pID].addr;\r\n        rndTms_[rID_][_tID].dead = false;\r\n\r\n        return _tID;\r\n    }\r\n\r\n    // initial the out state\r\n    function startOut()\r\n        private\r\n    {\r\n        round_[rID_].lastOutTime = now;\r\n        round_[rID_].deadRate = 10;     // used by deadRate / 100\r\n        round_[rID_].deadKeys = (rndTms_[rID_][round_[rID_].team].keys.mul(round_[rID_].deadRate)) / 100;\r\n        emit onOutInitialEvent(round_[rID_].lastOutTime);\r\n    }\r\n\r\n    // emit out\r\n    function out()\r\n        private\r\n    {\r\n        // current state dead number of the teams\r\n        uint256 _dead = 0;\r\n\r\n        // if less than deadKeys ,sorry, your team is out\r\n        for (uint256 i = 1; i <= round_[rID_].tID_; i++) {\r\n            if (rndTms_[rID_][i].keys < round_[rID_].deadKeys && rndTms_[rID_][i].dead == false){\r\n                rndTms_[rID_][i].dead = true;\r\n                round_[rID_].liveTeams--;\r\n                _dead++;\r\n            }\r\n        }\r\n\r\n        round_[rID_].lastOutTime = now;\r\n\r\n        // if there just 1 alive team\r\n        if (round_[rID_].liveTeams == 1 && round_[rID_].state == 2) {\r\n            endRound();\r\n            return;\r\n        }\r\n\r\n        // update the deadRate\r\n        if (round_[rID_].deadRate < 90) {\r\n            round_[rID_].deadRate = round_[rID_].deadRate + 10;\r\n        }\r\n\r\n        // update deadKeys\r\n        round_[rID_].deadKeys = ((rndTms_[rID_][round_[rID_].team].keys).mul(round_[rID_].deadRate)) / 100;\r\n\r\n        // event\r\n        emit onOutInitialEvent(round_[rID_].lastOutTime);\r\n        emit onOutEvent(_dead, round_[rID_].liveTeams, round_[rID_].deadKeys);\r\n    }\r\n\r\n    /**\r\n     * @dev gets existing or registers new pID.  use this when a player may be new\r\n     * @return bool if a new player\r\n     */\r\n    function determinePID(address _addr)\r\n        private\r\n        returns (bool)\r\n    {\r\n        if (pIDxAddr_[_addr] == 0)\r\n        {\r\n            pID_++;\r\n            pIDxAddr_[_addr] = pID_;\r\n            plyr_[pID_].addr = _addr;\r\n\r\n            return (true);  // new\r\n        } else {\r\n            return (false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gets existing a team.  if not, create a new team\r\n     * @return team ID\r\n     */\r\n    function determinTID(uint256 _team, uint256 _pID)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        // ensure the team is alive\r\n        require(rndTms_[rID_][_team].dead == false, \"You can not buy a dead team!\");\r\n\r\n        if (_team <= round_[rID_].tID_ && _team > 0) {\r\n            // if team is existing\r\n            return _team;\r\n        } else {\r\n            // if team is not existing\r\n            return createTeam(_pID, msg.value);\r\n        }\r\n    }\r\n\r\n    //**************\r\n    // SECURITY\r\n    //**************\r\n\r\n    // active the game\r\n    bool public activated_ = false;\r\n    function activate()\r\n        public\r\n        onlyOwner()\r\n    {\r\n        // can only be ran once\r\n        require(activated_ == false, \"it is already activated\");\r\n\r\n        // activate the contract\r\n        activated_ = true;\r\n\r\n        // the first player\r\n        plyr_[1].addr = cooperator;\r\n        plyr_[1].name = \"imkg\";\r\n        pIDxAddr_[cooperator] = 1;\r\n        pIDxName_[\"imkg\"] = 1;\r\n        pID_ = 1;\r\n\r\n        // activate the first game\r\n        rID_ = 1;\r\n        round_[1].start = now;\r\n        round_[1].state = 1;\r\n    }\r\n\r\n    //****************************\r\n    // SETTINGS (Only owner)\r\n    //****************************\r\n\r\n    /*\r\n      * @dev if timing is up,then msg.sender go this func to end or out this game.\r\n      */\r\n      function timeCountdown()\r\n          public\r\n          isActivated()\r\n          isHuman()\r\n          onlyOwner()\r\n      {\r\n          //state == 2  out state\r\n          if (round_[rID_].state == 2){\r\n              // if alive team = 1, go endRound().\r\n              if (round_[rID_].liveTeams == 1){\r\n\r\n                  endRound();\r\n                  return;\r\n              }\r\n\r\n              // Out if needed\r\n              if (now > round_[rID_].lastOutTime.add(OutGap_)) {\r\n                  out();\r\n              }\r\n          }\r\n      }\r\n\r\n\r\n    // set the minimum team number\r\n    function setMinTms(uint256 _tms)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        minTms_ = _tms;\r\n    }\r\n\r\n    // set the maximum team number\r\n    function setMaxTms(uint256 _tms)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        maxTms_ = _tms;\r\n    }\r\n\r\n    // set the round gap\r\n    function setRoundGap(uint256 _gap)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        roundGap_ = _gap;\r\n    }\r\n\r\n    // set the out gap\r\n    function setOutGap(uint256 _gap)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        OutGap_ = _gap;\r\n    }\r\n\r\n}   // main contract ends here","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"OutGap_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"}],\"name\":\"registerNameXID\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundGap_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gap\",\"type\":\"uint256\"}],\"name\":\"setRoundGap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerRounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round_\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"team\",\"type\":\"uint256\"},{\"name\":\"ethPerKey\",\"type\":\"uint256\"},{\"name\":\"lastOutTime\",\"type\":\"uint256\"},{\"name\":\"deadRate\",\"type\":\"uint256\"},{\"name\":\"deadKeys\",\"type\":\"uint256\"},{\"name\":\"liveTeams\",\"type\":\"uint256\"},{\"name\":\"tID_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tms\",\"type\":\"uint256\"}],\"name\":\"setMaxTms\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"},{\"name\":\"_keys\",\"type\":\"uint256\"}],\"name\":\"getEthFromKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"timeCountdown\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"}],\"name\":\"getNextKeyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nameStr\",\"type\":\"string\"}],\"name\":\"checkIfNameValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rndTms_\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"playersCount\",\"type\":\"uint256\"},{\"name\":\"leaderID\",\"type\":\"uint256\"},{\"name\":\"leaderAddr\",\"type\":\"address\"},{\"name\":\"dead\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_roundID\",\"type\":\"uint256\"}],\"name\":\"getPlayerRoundBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextOutAfter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rndTIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gap\",\"type\":\"uint256\"}],\"name\":\"setOutGap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"getKeysFromEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTeamsInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrRnds_\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_roundID\",\"type\":\"uint256\"},{\"name\":\"_tID\",\"type\":\"uint256\"}],\"name\":\"getPlayerRoundTeamBought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tms\",\"type\":\"uint256\"}],\"name\":\"setMinTms\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minTms_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPreviousProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"aff\",\"type\":\"uint256\"},{\"name\":\"laff\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"},{\"name\":\"_nameString\",\"type\":\"string\"}],\"name\":\"setTeamName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTeamLeaders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bytes32[]\"},{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_team\",\"type\":\"uint256\"},{\"name\":\"_affCode\",\"type\":\"bytes32\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerInfoByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxTms_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tID\",\"type\":\"uint256\"}],\"name\":\"getTeamInfoByID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isNewPlayer\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onNewNameEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"teamID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"teamName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onNewTeamNameEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"teamID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"teamName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"keysBought\",\"type\":\"uint256\"}],\"name\":\"onTxEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"affID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onAffPayoutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deadCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"liveCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deadKeys\",\"type\":\"uint256\"}],\"name\":\"onOutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winnerTID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerTName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"playersCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"onEndRoundEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"outTime\",\"type\":\"uint256\"}],\"name\":\"onOutInitialEvent\",\"type\":\"event\"}]","ContractName":"Imkg","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b22074e64a52cca8a2c9e5a53121d94d014c6143856b1c086cbad8ef02094138"}]}