{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n* start 11.11.18\r\n*\r\n* ███─█───█─████─████─███─█───█─█───█─█───█───████─████─█───█\r\n* █───██─██─█──█─█──█──█──██─██─██─██─██─██───█──█─█──█─██─██\r\n* ███─█─█─█─████─████──█──█─█─█─█─█─█─█─█─█───█────█──█─█─█─█\r\n* ──█─█───█─█──█─█─█───█──█───█─█───█─█───█───█──█─█──█─█───█\r\n* ███─█───█─█──█─█─█───█──█───█─█───█─█───█─█─████─████─█───█\r\n*\r\n* \r\n* - Contacts:\r\n*     -- t/me/Smart_MMM    \r\n*     -- https://SmartMMM.com\r\n* \r\n* - GAIN PER 24 HOURS:\r\n*     -- Contract balance <   25 Ether:          1.0%\r\n*     -- Contract balance >= 25 Ether:              1.5%\r\n*     -- Contract balance >= 250 Ether:                2.0%\r\n*     -- Contract balance >= 2500 Ether:                  2.5% max!\r\n*     -- Contract balance >= 25000 Ether:              2.0%\r\n*     -- Contract balance >= 50000 Ether:           1.5%\r\n*     -- Contract balance >= 100000 Ether:       1.0%\r\n*     -- Contract balance >= 150000 Ether:      0.8%\r\n*     -- Contract balance >= 200000 Ether:     0.6%\r\n*     -- Contract balance >= 250000 Ether:    0.4%\r\n*     -- Contract balance >= 300000 Ether:   0.2%\r\n*     -- Contract balance >= 500000 Ether:  0.1%\r\n* \r\n*     -- Contract balance < 30% max Balance: \"soft restart\"\r\n*\r\n* - Minimal contribution 0.01 eth\r\n* \r\n* - Contribution allocation schemes:\r\n*    -- 90-95% payments to depositors and partners \r\n*    -- 1-3% technical support team \r\n*    -- 3-7% promotion\r\n*   depends on the contract balance. more on the website SmartMMM.com\r\n*\r\n* - How to use:\r\n*  1. Send from your personal ETH wallet to the smart-contract address any amount more than or equal to 0.01 ETH\r\n*  2. Add your refferer's wallet to a HEX data in your transaction to \r\n*      get a bonus amount back to your wallet \r\n*      if there is no referrer, you will not get any bonuses\r\n*  3. Use etherscan.io to verify your transaction \r\n*  4. Claim your dividents by sending 0 ether transaction (available anytime)\r\n*  5. You can reinvest anytime you want\r\n*    \r\n* Smart contract has a \"soft restart\" function, details on smartMMM.com\r\n* \r\n* If you want to check your dividends, you can use etherscan.io site I / o by following the\" internal Txns \" tab of your wallet\r\n* Attention: do not use wallets exchanges - you will lose your money. Use your personal wallet only for transactions \r\n* \r\n* RECOMMENDED GAS LIMIT: 300000\r\n* RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract SmartMMM is Ownable\r\n{\r\n    struct DepositItem {\r\n        uint time;\r\n        uint sum;\r\n        uint withdrawalTime;\r\n        uint restartIndex;\r\n        uint invested;\r\n        uint payments;\r\n        uint referralPayments;\r\n        uint cashback;\r\n        uint referalsLevelOneCount;\r\n        uint referalsLevelTwoCount;\r\n        address referrerLevelOne;\r\n        address referrerLevelTwo;\r\n    }\r\n\r\n    address public techSupport = 0x799358af628240603A1ce05b7D9ea211b9D64304;\r\n    address public adsSupport = 0x8Fa6E56c844be9B96C30B72cC2a8ccF6465a99F9;\r\n\r\n    mapping(address => DepositItem) public deposits;\r\n    mapping(address => bool) public referrers;\r\n    mapping(address => uint) public waitingReferrers;\r\n\r\n    uint public referrerPrice = 70700000000000000; // 0.0707 ether\r\n    uint public referrerBeforeEndTime = 0;\r\n    uint public maxBalance = 0;\r\n    uint public invested;\r\n    uint public payments;\r\n    uint public referralPayments;\r\n    uint public investorsCount;\r\n    uint[] public historyOfRestarts;\r\n\r\n    event Deposit(address indexed from, uint256 value);\r\n    event Withdraw(address indexed to, uint256 value);\r\n    event PayBonus(address indexed to, uint256 value);\r\n\r\n    constructor () public\r\n    {\r\n        historyOfRestarts.push(now);\r\n    }\r\n\r\n\r\n    function bytesToAddress(bytes source) private pure returns(address parsedAddress)\r\n    {\r\n        assembly {\r\n            parsedAddress := mload(add(source,0x14))\r\n        }\r\n        return parsedAddress;\r\n    }\r\n\r\n    function getReferrersPercentsByBalance(uint balance) public pure returns(uint referrerLevelOnePercent, uint referrerLevelTwoPercent, uint cashBackPercent)\r\n    {\r\n        if(balance >= 0 && balance < 25000 ether) return (50, 10, 20);\r\n        else if(balance >= 25000 ether && balance < 100000 ether) return (30, 5, 15);\r\n        else if(balance >= 100000 ether && balance < 200000 ether) return (20, 0, 10);\r\n        else if(balance >= 200000 ether && balance < 500000 ether) return (10, 0, 5);\r\n        else return (6, 0, 3);\r\n    }\r\n\r\n    function getSupportsPercentsByBalance(uint balance) public pure returns(uint techSupportPercent, uint adsSupportPercent)\r\n    {\r\n        if(balance >= 0 && balance < 25000 ether) return (30, 70);\r\n        else if(balance >= 25000 ether && balance < 100000 ether) return (20, 50);\r\n        else if(balance >= 100000 ether && balance < 500000 ether) return (15, 40);\r\n        else return (10, 20);\r\n    }\r\n\r\n    function getPercentByBalance(uint balance) public pure returns(uint)\r\n    {\r\n        if(balance < 25 ether) return 69444444444;\r\n        else if(balance >= 25 ether && balance < 250 ether) return 104166666667;\r\n        else if(balance >= 250 ether && balance < 2500 ether ) return 138888888889;\r\n        else if(balance >= 2500 ether && balance < 25000 ether) return 173611111111;\r\n        else if(balance >= 25000 ether && balance < 50000 ether) return 138888888889;\r\n        else if(balance >= 50000 ether && balance < 100000 ether) return 104166666667;\r\n        else if(balance >= 100000 ether && balance < 150000 ether) return 69444444444;\r\n        else if(balance >= 150000 ether && balance < 200000 ether) return 55555555555;\r\n        else if(balance >= 200000 ether && balance < 250000 ether) return 416666666667;\r\n        else if(balance >= 250000 ether && balance < 300000 ether) return 277777777778;\r\n        else if(balance >= 300000 ether && balance < 500000 ether) return 138888888889;\r\n        else return 6944444444;\r\n    }\r\n\r\n    function () public payable\r\n    {\r\n        if(msg.value == 0)\r\n        {\r\n            payWithdraw(msg.sender);\r\n            return;\r\n        }\r\n\r\n        if(msg.value == referrerPrice && !referrers[msg.sender] && waitingReferrers[msg.sender] == 0 && deposits[msg.sender].sum != 0)\r\n        {\r\n            waitingReferrers[msg.sender] = now;\r\n        }\r\n        else\r\n        {\r\n            addDeposit(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    function isNeedRestart(uint balance) public returns (bool)\r\n    {\r\n        if(balance < maxBalance / 100 * 30) {\r\n            maxBalance = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function calculateNewTime(uint oldTime, uint oldSum, uint newSum, uint currentTime) public pure returns (uint)\r\n    {\r\n        return oldTime + newSum / (newSum + oldSum) * (currentTime - oldTime);\r\n    }\r\n\r\n    function calculateNewDepositSum(uint minutesBetweenRestart, uint minutesWork, uint depositSum) public pure returns (uint)\r\n    {\r\n        if(minutesWork > minutesBetweenRestart) minutesWork = minutesBetweenRestart;\r\n        return (depositSum *(100-(uint(minutesWork) * 100 / minutesBetweenRestart)+7)/100);\r\n    }\r\n\r\n    function addDeposit(address investorAddress, uint weiAmount) private\r\n    {\r\n        checkReferrer(investorAddress, weiAmount);\r\n        DepositItem memory deposit = deposits[investorAddress];\r\n        if(deposit.sum == 0)\r\n        {\r\n            deposit.time = now;\r\n            investorsCount++;\r\n        }\r\n        else\r\n        {\r\n            uint sum = getWithdrawSum(investorAddress);\r\n            deposit.sum += sum;\r\n            deposit.time = calculateNewTime(deposit.time, deposit.sum, weiAmount, now);\r\n        }\r\n        deposit.withdrawalTime = now;\r\n        deposit.sum += weiAmount;\r\n        deposit.restartIndex = historyOfRestarts.length - 1;\r\n        deposit.invested += weiAmount;\r\n        deposits[investorAddress] = deposit;\r\n\r\n        emit Deposit(investorAddress, weiAmount);\r\n\r\n        payToSupport(weiAmount);\r\n\r\n        if (maxBalance < address(this).balance) {\r\n            maxBalance = address(this).balance;\r\n        }\r\n        invested += weiAmount;\r\n    }\r\n\r\n    function payToSupport(uint weiAmount) private {\r\n        (uint techSupportPercent, uint adsSupportPercent) = getSupportsPercentsByBalance(address(this).balance);\r\n        techSupport.transfer(weiAmount * techSupportPercent / 1000);\r\n        adsSupport.transfer(weiAmount * adsSupportPercent / 1000);\r\n    }\r\n\r\n    function checkReferrer(address investorAddress, uint weiAmount) private\r\n    {\r\n        if (deposits[investorAddress].sum == 0 && msg.data.length == 20) {\r\n            address referrerLevelOneAddress = bytesToAddress(bytes(msg.data));\r\n            if (referrerLevelOneAddress != investorAddress && referrerLevelOneAddress != address(0)) {\r\n                if (referrers[referrerLevelOneAddress] || waitingReferrers[referrerLevelOneAddress] != 0 && (now - waitingReferrers[referrerLevelOneAddress]) >= 7 days || now <= referrerBeforeEndTime) {\r\n                    deposits[investorAddress].referrerLevelOne = referrerLevelOneAddress;\r\n                    deposits[referrerLevelOneAddress].referalsLevelOneCount++;\r\n                    address referrerLevelTwoAddress = deposits[referrerLevelOneAddress].referrerLevelOne;\r\n                    if (referrerLevelTwoAddress != investorAddress && referrerLevelTwoAddress != address(0)) {\r\n                        deposits[investorAddress].referrerLevelTwo = referrerLevelTwoAddress;\r\n                        deposits[referrerLevelTwoAddress].referalsLevelTwoCount++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (deposits[investorAddress].referrerLevelOne != address(0)) {\r\n\r\n            (uint referrerLevelOnePercent, uint referrerLevelTwoPercent, uint cashBackPercent) = getReferrersPercentsByBalance(address(this).balance);\r\n\r\n            uint cashBackBonus = weiAmount * cashBackPercent / 1000;\r\n            uint referrerLevelOneBonus = weiAmount * referrerLevelOnePercent / 1000;\r\n\r\n            emit PayBonus(investorAddress, cashBackBonus);\r\n            emit PayBonus(referrerLevelOneAddress, referrerLevelOneBonus);\r\n\r\n            referralPayments += referrerLevelOneBonus;\r\n            deposits[referrerLevelOneAddress].referralPayments += referrerLevelOneBonus;\r\n            referrerLevelOneAddress.transfer(referrerLevelOneBonus);\r\n\r\n            deposits[investorAddress].cashback += cashBackBonus;\r\n            investorAddress.transfer(cashBackBonus);\r\n\r\n            if (deposits[investorAddress].referrerLevelTwo != address(0) && referrerLevelTwoPercent > 0) {\r\n                uint referrerLevelTwoBonus = weiAmount * referrerLevelTwoPercent / 1000;\r\n                emit PayBonus(referrerLevelTwoAddress, referrerLevelTwoBonus);\r\n                referralPayments += referrerLevelTwoBonus;\r\n                deposits[referrerLevelTwoAddress].referralPayments += referrerLevelTwoBonus;\r\n                referrerLevelTwoAddress.transfer(referrerLevelTwoBonus);\r\n            }\r\n        }\r\n    }\r\n\r\n    function payWithdraw(address to) private\r\n    {\r\n        require(deposits[to].sum > 0);\r\n\r\n        uint balance = address(this).balance;\r\n        if(isNeedRestart(balance))\r\n        {\r\n            historyOfRestarts.push(now);\r\n        }\r\n\r\n        uint lastRestartIndex = historyOfRestarts.length - 1;\r\n\r\n        if(lastRestartIndex - deposits[to].restartIndex >= 1)\r\n        {\r\n            uint minutesBetweenRestart = (historyOfRestarts[lastRestartIndex] - historyOfRestarts[deposits[to].restartIndex]) / 1 minutes;\r\n            uint minutesWork = (historyOfRestarts[lastRestartIndex] - deposits[to].time) / 1 minutes;\r\n            deposits[to].sum = calculateNewDepositSum(minutesBetweenRestart, minutesWork, deposits[to].sum);\r\n            deposits[to].restartIndex = lastRestartIndex;\r\n            deposits[to].time = now;\r\n        }\r\n\r\n        uint sum = getWithdrawSum(to);\r\n        require(sum > 0);\r\n\r\n        deposits[to].withdrawalTime = now;\r\n        deposits[to].payments += sum;\r\n        payments += sum;\r\n        to.transfer(sum);\r\n\r\n        emit Withdraw(to, sum);\r\n    }\r\n\r\n    function getWithdrawSum(address investorAddress) private view returns(uint sum) {\r\n        uint minutesCount = (now - deposits[investorAddress].withdrawalTime) / 1 minutes;\r\n        uint percent = getPercentByBalance(address(this).balance);\r\n        sum = deposits[investorAddress].sum * percent / 10000000000000000 * minutesCount;\r\n    }\r\n\r\n    function addReferrer(address referrerAddress) onlyOwner public\r\n    {\r\n        referrers[referrerAddress] = true;\r\n    }\r\n\r\n    function setReferrerPrice(uint newPrice) onlyOwner public\r\n    {\r\n        referrerPrice = newPrice;\r\n    }\r\n\r\n    function setReferrerBeforeEndTime(uint newTime) onlyOwner public\r\n    {\r\n        referrerBeforeEndTime = newTime;\r\n    }\r\n\r\n    function getDaysAfterStart() public constant returns(uint daysAfterStart) {\r\n        daysAfterStart = (now - historyOfRestarts[0]) / 1 days;\r\n    }\r\n\r\n    function getDaysAfterLastRestart() public constant returns(uint daysAfeterLastRestart) {\r\n        daysAfeterLastRestart = (now - historyOfRestarts[historyOfRestarts.length - 1]) / 1 days;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"setReferrerBeforeEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrerPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adsSupport\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"getReferrersPercentsByBalance\",\"outputs\":[{\"name\":\"referrerLevelOnePercent\",\"type\":\"uint256\"},{\"name\":\"referrerLevelTwoPercent\",\"type\":\"uint256\"},{\"name\":\"cashBackPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"getSupportsPercentsByBalance\",\"outputs\":[{\"name\":\"techSupportPercent\",\"type\":\"uint256\"},{\"name\":\"adsSupportPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDaysAfterLastRestart\",\"outputs\":[{\"name\":\"daysAfeterLastRestart\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referrerBeforeEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"oldTime\",\"type\":\"uint256\"},{\"name\":\"oldSum\",\"type\":\"uint256\"},{\"name\":\"newSum\",\"type\":\"uint256\"},{\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"calculateNewTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"waitingReferrers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"getPercentByBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historyOfRestarts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDaysAfterStart\",\"outputs\":[{\"name\":\"daysAfterStart\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"isNeedRestart\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"techSupport\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setReferrerPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"minutesBetweenRestart\",\"type\":\"uint256\"},{\"name\":\"minutesWork\",\"type\":\"uint256\"},{\"name\":\"depositSum\",\"type\":\"uint256\"}],\"name\":\"calculateNewDepositSum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"sum\",\"type\":\"uint256\"},{\"name\":\"withdrawalTime\",\"type\":\"uint256\"},{\"name\":\"restartIndex\",\"type\":\"uint256\"},{\"name\":\"invested\",\"type\":\"uint256\"},{\"name\":\"payments\",\"type\":\"uint256\"},{\"name\":\"referralPayments\",\"type\":\"uint256\"},{\"name\":\"cashback\",\"type\":\"uint256\"},{\"name\":\"referalsLevelOneCount\",\"type\":\"uint256\"},{\"name\":\"referalsLevelTwoCount\",\"type\":\"uint256\"},{\"name\":\"referrerLevelOne\",\"type\":\"address\"},{\"name\":\"referrerLevelTwo\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"addReferrer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PayBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SmartMMM","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5d5432a461a803f20f41c3e490f862282001e5fac01d3b02ff437f7c97f84fcf"}]}