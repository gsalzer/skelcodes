{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    address[] public moderators;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"Must be owner!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        if (msg.sender != owner) {\r\n            bool found = false;\r\n            for (uint index = 0; index < moderators.length; index++) {\r\n                if (moderators[index] == msg.sender) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            require(found,\"Must be moderator!\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) public onlyOwner {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n    function AddModerator(address _newModerator) public onlyOwner {\r\n        if (_newModerator != address(0)) {\r\n            for (uint index = 0; index < moderators.length; index++) {\r\n                if (moderators[index] == _newModerator) {\r\n                    return;\r\n                }\r\n            }\r\n            moderators.push(_newModerator);\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) public onlyOwner {\r\n        uint foundIndex = 0;\r\n        for (; foundIndex < moderators.length; foundIndex++) {\r\n            if (moderators[foundIndex] == _oldModerator) {\r\n                break;\r\n            }\r\n        }\r\n        if (foundIndex < moderators.length) {\r\n            moderators[foundIndex] = moderators[moderators.length-1];\r\n            delete moderators[moderators.length-1];\r\n            moderators.length--;\r\n        }\r\n    }\r\n}\r\n\r\ncontract DataEdit is BasicAccessControl {\r\n    //var\r\n    struct UserData {\r\n        mapping (string => address) ref;\r\n    }\r\n    mapping (address => UserData) userData;\r\n    mapping (address => mapping(string=>uint)) promotion;\r\n\r\n    //modifier\r\n    modifier onlyNew(string _gameName){\r\n        require(userData[msg.sender].ref[_gameName] == 0x0,\"Can't change reference address\");\r\n        _;\r\n    }\r\n\r\n    //set\r\n    function setUserRef(address _address, address _refAddress, string _gameName) public;\r\n    function changeAmountPromotion(string _gameName, address _address, uint _amount, bool isPlus) public;\r\n    //get\r\n    function getUserRef(address _address, string _gameName) public view returns(address);\r\n    function getAmountPromotionByAddress(string _gameName, address _address) public view returns (uint);\r\n}\r\n\r\ncontract UserData_BrickGame is DataEdit {\r\n    function() public payable {\r\n        revert(\"Transactions is not allow!\");\r\n    }\r\n\r\n    function setUserRef(address _address, address _refAddress, string _gameName) public onlyNew(_gameName) onlyModerators {\r\n        userData[_address].ref[_gameName] = _refAddress;\r\n    }\r\n\r\n    function getUserRef(address _address, string _gameName) public view returns(address){\r\n        return userData[_address].ref[_gameName];\r\n    }\r\n    function changeAmountPromotion(string _gameName, address _address, uint _amount, bool isPlus) public onlyModerators {\r\n        if(isPlus) {\r\n            promotion[_address][_gameName] = promotion[_address][_gameName] + _amount;\r\n        } else {\r\n            require(promotion[_address][_gameName] >= _amount);\r\n            promotion[_address][_gameName] = promotion[_address][_gameName] - _amount;\r\n        }\r\n    }\r\n\r\n    function getAmountPromotionByAddress(string _gameName, address _address) public view returns (uint){\r\n        return promotion[_address][_gameName];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_gameName\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"isPlus\",\"type\":\"bool\"}],\"name\":\"changeAmountPromotion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_gameName\",\"type\":\"string\"}],\"name\":\"getUserRef\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_refAddress\",\"type\":\"address\"},{\"name\":\"_gameName\",\"type\":\"string\"}],\"name\":\"setUserRef\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameName\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAmountPromotionByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"UserData_BrickGame","CompilerVersion":"v0.4.25-nightly.2018.6.6+commit.59b35fa5","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://19e78f813588317118edb3165502adf957492f9751e2ac727b6212015b20ddf9"}]}