{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n* CryptoMiningWar - Build your own empire on Blockchain\r\n* Author: InspiGames\r\n* Website: https://cryptominingwar.github.io/\r\n*/\r\ninterface MiniGameInterface {\r\n    function isContractMiniGame() external pure returns( bool _isContractMiniGame );\r\n}\r\ncontract MemoryFactory {\r\n\r\n\taddress public administrator;\r\n    uint256 public factoryTotal;\r\n    // player info\r\n    mapping(address => Player) public players;\r\n    // minigame info\r\n    mapping(address => bool)   public miniGames; \r\n   \r\n    struct Player {\r\n        uint256 level;\r\n        uint256 updateTime;\r\n        uint256 levelUp;\r\n        mapping(uint256 => uint256) programs;\r\n    }\r\n    modifier isAdministrator()\r\n    {\r\n        require(msg.sender == administrator);\r\n        _;\r\n    }\r\n    modifier onlyContractsMiniGame() \r\n    {\r\n        require(miniGames[msg.sender] == true);\r\n        _;\r\n    }\r\n    constructor() public {\r\n        administrator = msg.sender;\r\n    }\r\n    function () public payable\r\n    {\r\n        \r\n    }\r\n    function upgrade(address addr) public isAdministrator\r\n    {\r\n        selfdestruct(addr);\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    // SETTING CONTRACT MINI GAME \r\n    //--------------------------------------------------------------------------\r\n    function setContractMiniGame(address _addr) public isAdministrator \r\n    {\r\n        MiniGameInterface MiniGame = MiniGameInterface( _addr );\r\n        if( MiniGame.isContractMiniGame() == false ) { revert(); }\r\n\r\n        miniGames[_addr] = true;\r\n    }\r\n    function removeContractMiniGame(address _addr) public isAdministrator\r\n    {\r\n        miniGames[_addr] = false;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    // FACTORY \r\n    //--------------------------------------------------------------------------\r\n    function setFactoryToal(uint256 _value) public onlyContractsMiniGame\r\n    {\r\n        factoryTotal = _value;\r\n    }\r\n    function updateFactory(address _addr, uint256 _levelUp, uint256 _time) public onlyContractsMiniGame\r\n    {\r\n        require(players[_addr].updateTime <= now);\r\n\r\n        Player storage p = players[_addr];\r\n        p.updateTime     = _time;\r\n        p.levelUp        = _levelUp;\r\n    }\r\n    function setFactoryLevel(address _addr, uint256 _value) public \r\n    {\r\n        require(msg.sender == administrator || miniGames[msg.sender] == true);\r\n        Player storage p = players[_addr];\r\n        p.level = _value;\r\n    }\r\n    function updateLevel(address _addr) public\r\n    {\r\n        Player storage p = players[_addr];\r\n\r\n        if (p.updateTime <= now && p.level < p.levelUp) p.level = p.levelUp;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    // PROGRAM\r\n    //--------------------------------------------------------------------------\r\n    function addProgram(address _addr, uint256 _idx, uint256 _program) public onlyContractsMiniGame\r\n    {\r\n        Player storage p = players[_addr];\r\n        p.programs[uint256(_idx)] += _program;\r\n    }\r\n    function subProgram(address _addr, uint256 _idx, uint256 _program) public onlyContractsMiniGame\r\n    {\r\n        Player storage p = players[_addr];\r\n     \r\n        require(p.programs[uint256(_idx)] >= _program);\r\n\r\n        p.programs[uint256(_idx)] -= _program;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    // CALL DATA\r\n    //--------------------------------------------------------------------------\r\n    function getData(address _addr) public view returns(uint256 _level,uint256 _updateTime, uint256[] _programs) \r\n    {\r\n        Player memory p = players[_addr];\r\n        _level      = getLevel(_addr);\r\n        _updateTime = p.updateTime;\r\n        _programs   = getPrograms(_addr);\r\n    }\r\n    function getLevel(address _addr) public view returns(uint256 _level)\r\n    {\r\n        Player memory p = players[_addr];\r\n        _level = p.level;\r\n        if (p.updateTime <= now && _level < p.levelUp) _level = p.levelUp;\r\n    }\r\n    function getPrograms(address _addr) public view returns(uint256[])\r\n    {\r\n        Player storage p = players[_addr];\r\n        uint256[] memory _programs = new uint256[](factoryTotal);\r\n        \r\n        for(uint256 idx = 0; idx < factoryTotal; idx++) {\r\n            _programs[idx] = p.programs[idx];\r\n        }\r\n        return _programs;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"factoryTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setContractMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_levelUp\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"updateFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getData\",\"outputs\":[{\"name\":\"_level\",\"type\":\"uint256\"},{\"name\":\"_updateTime\",\"type\":\"uint256\"},{\"name\":\"_programs\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_program\",\"type\":\"uint256\"}],\"name\":\"addProgram\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_program\",\"type\":\"uint256\"}],\"name\":\"subProgram\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLevel\",\"outputs\":[{\"name\":\"_level\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeContractMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPrograms\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"miniGames\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"updateTime\",\"type\":\"uint256\"},{\"name\":\"levelUp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setFactoryToal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setFactoryLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"MemoryFactory","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ec622535fb6b65772a8c0ec64b391ae6ad0b85600801c8476aebf866fde62fb5"}]}