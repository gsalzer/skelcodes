{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/HeapTycoon.sol\r\n\r\ncontract HeapTycoon is Ownable\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint8 PAGE_SIZE = 25;\r\n\r\n//0.005\r\n\tuint256 MASTER_FEE = 5000000000000000;\r\n\r\n//0.01\r\n\tuint256 MIN_TICKET = 10000000000000000;\r\n\r\n//10\r\n\tuint256 MAX_TICKET = 10000000000000000000;\r\n\r\n\taddress public master;\r\n\r\n\tstruct Heap\r\n\t{\r\n\t\tuint256 ticket;\r\n\t\tuint256 time;\r\n\t\tbytes32 name;\r\n\t\tuint256 fee;\r\n\t\taddress owner;\r\n\t\tuint256 cap;\r\n\t\tuint256 timer;\r\n\t\tuint256 timer_inc;\r\n\t\tuint256 bonus;\r\n\t\tuint256 bonus_fee;\r\n\t\taddress cur_addr;\r\n\t\taddress[] players;\r\n\t}\r\n\r\n\tHeap[] heaps;\r\n\r\n\tmapping(bytes32 => bool) used_names;\r\n\r\n\r\n\tconstructor(address addr) public\r\n\t{\r\n\t\tmaster = addr;\r\n\r\n\t\tused_names[bytes32(0)] = true;\r\n\t}\r\n\r\n\r\n\tfunction set_master(address addr) public onlyOwner\r\n\t{\r\n\t\trequire(addr != address(0));\r\n\r\n\t\tmaster = addr;\r\n\t}\r\n\r\n\r\n\tfunction create(uint256 ticket, bytes32 name, uint256 fee, uint256 timer_inc, uint256 bonus_fee) public payable\r\n\t{\r\n\t\trequire(msg.sender == tx.origin);\r\n\t\trequire(msg.value >= ticket.mul(20));\r\n\t\trequire(ticket >= MIN_TICKET);\r\n\t\trequire(ticket <= MAX_TICKET);\r\n\t\trequire(used_names[name] == false);\r\n\t\trequire(fee <= ticket.div(10));\r\n\t\trequire(fee >= ticket.div(10000));\r\n\t\trequire(timer_inc >= 30);\r\n\t\trequire(timer_inc <= 10 days);\r\n\t\trequire(bonus_fee <= ticket.div(10));\r\n\t\trequire(bonus_fee >= ticket.div(10000));\r\n\t\trequire(msg.sender != address(0));\r\n\t\trequire(msg.sender != address(this));\r\n\t\trequire(msg.sender != address(master));\r\n\t\trequire(msg.sender != address(owner));\r\n\r\n\t\taddress[] memory players;\r\n\r\n\t\tHeap memory heap = Heap(ticket, now, name, fee, msg.sender, 0, now.add(timer_inc), timer_inc, 0, bonus_fee, address(0), players);\r\n\r\n\t\tused_names[name] = true;\r\n\r\n\t\theaps.push(heap);\r\n\r\n\t\tmaster.transfer(msg.value);\r\n\t}\r\n\r\n\r\n\tfunction buy(uint256 id) public payable\r\n\t{\r\n\t\trequire(msg.sender == tx.origin);\r\n\t\trequire(id < heaps.length);\r\n\t\trequire(msg.value >= heaps[id].ticket);\r\n\t\trequire(msg.sender != address(0));\r\n\t\trequire(msg.sender != address(this));\r\n\t\trequire(msg.sender != address(master));\r\n\t\trequire(msg.sender != address(owner));\r\n\r\n\t\tbytes32 hash;\r\n\r\n\t\tuint256 index;\r\n\r\n\t\tuint256 val;\r\n\r\n\t\tbool res;\r\n\r\n\t\tuint256 bonus_val;\r\n\r\n\r\n\t\tval = heaps[id].ticket.sub(heaps[id].fee).sub(MASTER_FEE).sub(heaps[id].bonus_fee).div(10);\r\n\r\n\t\theaps[id].players.push(msg.sender);\r\n\r\n\t\tif(now < heaps[id].timer)\r\n\t\t{\r\n\t\t\theaps[id].cur_addr = msg.sender;\r\n\t\t\theaps[id].timer = heaps[id].timer.add(heaps[id].timer_inc);\r\n\t\t\theaps[id].bonus = heaps[id].bonus.add(heaps[id].bonus_fee);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tbonus_val = heaps[id].bonus;\r\n\t\t\theaps[id].bonus = heaps[id].bonus_fee;\r\n\t\t\theaps[id].timer = now.add(heaps[id].timer_inc);\r\n\t\t}\r\n\r\n\t\theaps[id].cap = heaps[id].cap.add(msg.value);\r\n\r\n\t\tres = master.send(MASTER_FEE);\r\n\r\n\t\tfor(uint8 i = 0; i < 10; i++)\r\n\t\t{\r\n\t\t\thash = keccak256(abi.encodePacked(uint256(blockhash(block.number - (i + 1))) + uint256(msg.sender) + uint256(heaps.length)));\r\n\t\t\tindex = uint256(hash) % heaps[id].players.length;\r\n\t\t\tres = heaps[id].players[index].send(val);\r\n\t\t}\r\n\r\n\t\tif(bonus_val > 0)\r\n\t\t\tres = heaps[id].cur_addr.send(bonus_val);\r\n\r\n\t\tres = heaps[id].owner.send(heaps[id].fee);\r\n\t}\r\n\r\n\r\n\tfunction get_len() external view returns (uint256)\r\n\t{\r\n\t\treturn heaps.length;\r\n\t}\r\n\r\n\r\n\tfunction get_heaps(uint256 page) external view returns (uint256[] ids, uint256[] tickets, bytes32[] names, uint256[] caps, uint256[] timers, uint256[] bonuses)\r\n\t{\r\n\t\tids = new uint256[](PAGE_SIZE);\r\n\t\ttickets = new uint256[](PAGE_SIZE);\r\n\t\tnames = new bytes32[](PAGE_SIZE);\r\n\t\tcaps = new uint256[](PAGE_SIZE);\r\n\t\ttimers = new uint256[](PAGE_SIZE);\r\n\t\tbonuses = new uint256[](PAGE_SIZE);\r\n\r\n\t\tuint256 start = page.mul(PAGE_SIZE);\r\n\r\n\t\tuint256 timer;\r\n\r\n\t\tfor(uint256 i = 0; i < PAGE_SIZE; i++)\r\n\t\t{\r\n\t\t\tif(start + i < heaps.length)\r\n\t\t\t{\r\n\t\t\t\ttimer = 0;\r\n\r\n\t\t\t\tif(now < heaps[start + i].timer)\r\n\t\t\t\t\ttimer = heaps[start + i].timer - now;\r\n\r\n\t\t\t\tids[i] = start + i;\r\n\t\t\t\ttickets[i] = heaps[start + i].ticket;\r\n\t\t\t\tnames[i] = heaps[start + i].name;\r\n\t\t\t\tcaps[i] = heaps[start + i].cap;\r\n\t\t\t\ttimers[i] = timer;\r\n\t\t\t\tbonuses[i] = heaps[start + i].bonus;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction is_name_used(bytes32 name) external view returns(bool)\r\n\t{\r\n\t\treturn used_names[name];\r\n\t}\r\n\r\n\r\n\tfunction get_heap(uint256 id) external view returns(uint256[] data, bytes32 name, address owner, address cur_addr)\r\n\t{\r\n\t\tdata = new uint256[](11);\r\n\r\n\t\tif(id >= heaps.length)\r\n\t\t\treturn;\r\n\r\n\t\tname = heaps[id].name;\r\n\t\towner = heaps[id].owner;\r\n\t\tcur_addr = heaps[id].cur_addr;\r\n\r\n\t\tuint timer;\r\n\r\n\t\tif(now < heaps[id].timer)\r\n\t\t\ttimer = heaps[id].timer - now;\r\n\r\n\t\tdata[0] = heaps[id].ticket;\r\n\t\tdata[1] = heaps[id].time;\r\n\t\tdata[2] = heaps[id].fee;\r\n\t\tdata[3] = heaps[id].cap;\r\n\t\tdata[4] = timer;\r\n\t\tdata[5] = heaps[id].timer_inc;\r\n\t\tdata[6] = heaps[id].bonus;\r\n\t\tdata[7] = heaps[id].bonus_fee;\r\n\t\tdata[8] = heaps[id].ticket.sub(heaps[id].fee).sub(MASTER_FEE).sub(heaps[id].bonus_fee).div(10);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"is_name_used\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticket\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"fee\",\"type\":\"uint256\"},{\"name\":\"timer_inc\",\"type\":\"uint256\"},{\"name\":\"bonus_fee\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"page\",\"type\":\"uint256\"}],\"name\":\"get_heaps\",\"outputs\":[{\"name\":\"ids\",\"type\":\"uint256[]\"},{\"name\":\"tickets\",\"type\":\"uint256[]\"},{\"name\":\"names\",\"type\":\"bytes32[]\"},{\"name\":\"caps\",\"type\":\"uint256[]\"},{\"name\":\"timers\",\"type\":\"uint256[]\"},{\"name\":\"bonuses\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"set_master\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_len\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"get_heap\",\"outputs\":[{\"name\":\"data\",\"type\":\"uint256[]\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"cur_addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HeapTycoon","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f9c024a74938f8e9172c14de7b513d3ce4329b49","Library":"","SwarmSource":"bzzr://37602144a493cc608e9d9e008f5b26fc7b8b2d1a1eaca82b7d472b3e6806ddb8"}]}