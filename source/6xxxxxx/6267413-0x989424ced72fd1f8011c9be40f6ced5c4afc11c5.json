{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with buidler v0.1.5\r\npragma solidity 0.4.24;\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC20/IERC20.sol@v1.12.0\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address _who) external view returns (uint256);\r\n\r\n  function allowance(address _owner, address _spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/math/SafeMath.sol@v1.12.0\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC20/ERC20.sol@v1.12.0\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private balances_;\r\n\r\n  mapping (address => mapping (address => uint256)) private allowed_;\r\n\r\n  uint256 private totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances_[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed_[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances_[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances_[msg.sender] = balances_[msg.sender].sub(_value);\r\n    balances_[_to] = balances_[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed_[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances_[_from]);\r\n    require(_value <= allowed_[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances_[_from] = balances_[_from].sub(_value);\r\n    balances_[_to] = balances_[_to].add(_value);\r\n    allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed_[msg.sender][_spender] = (\r\n      allowed_[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed_[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed_[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed_[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param _account The account that will receive the created tokens.\r\n   * @param _amount The amount that will be created.\r\n   */\r\n  function _mint(address _account, uint256 _amount) internal {\r\n    require(_account != 0);\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances_[_account] = balances_[_account].add(_amount);\r\n    emit Transfer(address(0), _account, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param _account The account whose tokens will be burnt.\r\n   * @param _amount The amount that will be burnt.\r\n   */\r\n  function _burn(address _account, uint256 _amount) internal {\r\n    require(_account != 0);\r\n    require(_amount <= balances_[_account]);\r\n\r\n    totalSupply_ = totalSupply_.sub(_amount);\r\n    balances_[_account] = balances_[_account].sub(_amount);\r\n    emit Transfer(_account, address(0), _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal _burn function.\r\n   * @param _account The account whose tokens will be burnt.\r\n   * @param _amount The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address _account, uint256 _amount) internal {\r\n    require(_amount <= allowed_[_account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    allowed_[_account][msg.sender] = allowed_[_account][msg.sender].sub(\r\n      _amount);\r\n    _burn(_account, _amount);\r\n  }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol@v1.12.0\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    IERC20 _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    IERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    IERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/ownership/Ownable.sol@v1.12.0\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/access/rbac/Roles.sol@v1.12.0\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n * See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage _role, address _account)\r\n    internal\r\n  {\r\n    _role.bearer[_account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage _role, address _account)\r\n    internal\r\n  {\r\n    _role.bearer[_account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage _role, address _account)\r\n    internal\r\n    view\r\n  {\r\n    require(has(_role, _account));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage _role, address _account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _role.bearer[_account];\r\n  }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/access/rbac/RBAC.sol@v1.12.0\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * Supports unlimited numbers of roles and addresses.\r\n * See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n * for you to write your own implementation of this interface using Enums or similar.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string _role)\r\n    public\r\n    view\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string _role)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function _addRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function _removeRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/cryptography/ECDSA.sol@v1.12.0\r\n\r\n/**\r\n * @title Elliptic curve signature operations\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n */\r\n\r\nlibrary ECDSA {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using their signature\r\n   * @param _hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param _signature bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 _hash, bytes _signature)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    // Check the signature length\r\n    if (_signature.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    // ecrecover takes the signature parameters, and the only way to get them\r\n    // currently is to use assembly.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      r := mload(add(_signature, 32))\r\n      s := mload(add(_signature, 64))\r\n      v := byte(0, mload(add(_signature, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      // solium-disable-next-line arg-overflow\r\n      return ecrecover(_hash, v, r, s);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * toEthSignedMessageHash\r\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n   * and hash the result\r\n   */\r\n  function toEthSignedMessageHash(bytes32 _hash)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    // 32 is the length in bytes of hash,\r\n    // enforced by the type signature above\r\n    return keccak256(\r\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/access/SignatureBouncer.sol@v1.12.0\r\n\r\n/**\r\n * @title SignatureBouncer\r\n * @author PhABC, Shrugs and aflesher\r\n * @dev Bouncer allows users to submit a signature as a permission to do an action.\r\n * If the signature is from one of the authorized bouncer addresses, the signature\r\n * is valid. The owner of the contract adds/removes bouncers.\r\n * Bouncer addresses can be individual servers signing grants or different\r\n * users within a decentralized club that have permission to invite other members.\r\n * This technique is useful for whitelists and airdrops; instead of putting all\r\n * valid addresses on-chain, simply sign a grant of the form\r\n * keccak256(abi.encodePacked(`:contractAddress` + `:granteeAddress`)) using a valid bouncer address.\r\n * Then restrict access to your crowdsale/whitelist/airdrop using the\r\n * `onlyValidSignature` modifier (or implement your own using _isValidSignature).\r\n * In addition to `onlyValidSignature`, `onlyValidSignatureAndMethod` and\r\n * `onlyValidSignatureAndData` can be used to restrict access to only a given method\r\n * or a given method with given parameters respectively.\r\n * See the tests Bouncer.test.js for specific usage examples.\r\n * @notice A method that uses the `onlyValidSignatureAndData` modifier must make the _signature\r\n * parameter the \"last\" parameter. You cannot sign a message that has its own\r\n * signature in it so the last 128 bytes of msg.data (which represents the\r\n * length of the _signature data and the _signaature data itself) is ignored when validating.\r\n * Also non fixed sized parameters make constructing the data in the signature\r\n * much more complex. See https://ethereum.stackexchange.com/a/50616 for more details.\r\n */\r\ncontract SignatureBouncer is Ownable, RBAC {\r\n  using ECDSA for bytes32;\r\n\r\n  // Name of the bouncer role.\r\n  string private constant ROLE_BOUNCER = \"bouncer\";\r\n  // Function selectors are 4 bytes long, as documented in\r\n  // https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector\r\n  uint256 private constant METHOD_ID_SIZE = 4;\r\n  // Signature size is 65 bytes (tightly packed v + r + s), but gets padded to 96 bytes\r\n  uint256 private constant SIGNATURE_SIZE = 96;\r\n\r\n  /**\r\n   * @dev requires that a valid signature of a bouncer was provided\r\n   */\r\n  modifier onlyValidSignature(bytes _signature)\r\n  {\r\n    require(_isValidSignature(msg.sender, _signature));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev requires that a valid signature with a specifed method of a bouncer was provided\r\n   */\r\n  modifier onlyValidSignatureAndMethod(bytes _signature)\r\n  {\r\n    require(_isValidSignatureAndMethod(msg.sender, _signature));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev requires that a valid signature with a specifed method and params of a bouncer was provided\r\n   */\r\n  modifier onlyValidSignatureAndData(bytes _signature)\r\n  {\r\n    require(_isValidSignatureAndData(msg.sender, _signature));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Determine if an account has the bouncer role.\r\n   * @return true if the account is a bouncer, false otherwise.\r\n   */\r\n  function isBouncer(address _account) public view returns(bool) {\r\n    return hasRole(_account, ROLE_BOUNCER);\r\n  }\r\n\r\n  /**\r\n   * @dev allows the owner to add additional bouncer addresses\r\n   */\r\n  function addBouncer(address _bouncer)\r\n    public\r\n    onlyOwner\r\n  {\r\n    require(_bouncer != address(0));\r\n    _addRole(_bouncer, ROLE_BOUNCER);\r\n  }\r\n\r\n  /**\r\n   * @dev allows the owner to remove bouncer addresses\r\n   */\r\n  function removeBouncer(address _bouncer)\r\n    public\r\n    onlyOwner\r\n  {\r\n    _removeRole(_bouncer, ROLE_BOUNCER);\r\n  }\r\n\r\n  /**\r\n   * @dev is the signature of `this + sender` from a bouncer?\r\n   * @return bool\r\n   */\r\n  function _isValidSignature(address _address, bytes _signature)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _isValidDataHash(\r\n      keccak256(abi.encodePacked(address(this), _address)),\r\n      _signature\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev is the signature of `this + sender + methodId` from a bouncer?\r\n   * @return bool\r\n   */\r\n  function _isValidSignatureAndMethod(address _address, bytes _signature)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    bytes memory data = new bytes(METHOD_ID_SIZE);\r\n    for (uint i = 0; i < data.length; i++) {\r\n      data[i] = msg.data[i];\r\n    }\r\n    return _isValidDataHash(\r\n      keccak256(abi.encodePacked(address(this), _address, data)),\r\n      _signature\r\n    );\r\n  }\r\n\r\n  /**\r\n    * @dev is the signature of `this + sender + methodId + params(s)` from a bouncer?\r\n    * @notice the _signature parameter of the method being validated must be the \"last\" parameter\r\n    * @return bool\r\n    */\r\n  function _isValidSignatureAndData(address _address, bytes _signature)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(msg.data.length > SIGNATURE_SIZE);\r\n    bytes memory data = new bytes(msg.data.length - SIGNATURE_SIZE);\r\n    for (uint i = 0; i < data.length; i++) {\r\n      data[i] = msg.data[i];\r\n    }\r\n    return _isValidDataHash(\r\n      keccak256(abi.encodePacked(address(this), _address, data)),\r\n      _signature\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev internal function to convert a hash to an eth signed message\r\n   * and then recover the signature and check it against the bouncer role\r\n   * @return bool\r\n   */\r\n  function _isValidDataHash(bytes32 _hash, bytes _signature)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address signer = _hash\r\n      .toEthSignedMessageHash()\r\n      .recover(_signature);\r\n    return isBouncer(signer);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/bouncers/EscrowedERC20Bouncer.sol\r\n\r\ncontract EscrowedERC20Bouncer is SignatureBouncer {\r\n  using SafeERC20 for IERC20;\r\n\r\n  uint256 public nonce;\r\n\r\n  modifier onlyBouncer()\r\n  {\r\n    require(isBouncer(msg.sender), \"DOES_NOT_HAVE_BOUNCER_ROLE\");\r\n    _;\r\n  }\r\n\r\n  modifier validDataWithoutSender(bytes _signature)\r\n  {\r\n    require(_isValidSignatureAndData(address(this), _signature), \"INVALID_SIGNATURE\");\r\n    _;\r\n  }\r\n\r\n  constructor(address _bouncer)\r\n    public\r\n  {\r\n    addBouncer(_bouncer);\r\n  }\r\n\r\n  /**\r\n   * allow anyone with a valid bouncer signature for the msg data to send `_amount` of `_token` to `_to`\r\n   */\r\n  function withdraw(uint256 _nonce, IERC20 _token, address _to, uint256 _amount, bytes _signature)\r\n    public\r\n    validDataWithoutSender(_signature)\r\n  {\r\n    require(_nonce > nonce, \"NONCE_GT_NONCE_REQUIRED\");\r\n    nonce = _nonce;\r\n    _token.safeTransfer(_to, _amount);\r\n  }\r\n\r\n  /**\r\n   * Allow the bouncer to withdraw all of the ERC20 tokens in the contract\r\n   */\r\n  function withdrawAll(IERC20 _token, address _to)\r\n    public\r\n    onlyBouncer\r\n  {\r\n    _token.safeTransfer(_to, _token.balanceOf(address(this)));\r\n  }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol@v1.12.0\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract ERC20Mintable is ERC20, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    hasMintPermission\r\n    canMint\r\n    returns (bool)\r\n  {\r\n    _mint(_to, _amount);\r\n    emit Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/bouncers/MintableERC20Bouncer.sol\r\n\r\ncontract MintableERC20Bouncer is SignatureBouncer {\r\n\r\n  uint256 public nonce;\r\n\r\n  modifier validDataWithoutSender(bytes _signature)\r\n  {\r\n    require(_isValidSignatureAndData(address(this), _signature), \"INVALID_SIGNATURE\");\r\n    _;\r\n  }\r\n\r\n  constructor(address _bouncer)\r\n    public\r\n  {\r\n    addBouncer(_bouncer);\r\n  }\r\n\r\n  /**\r\n   * allow anyone with a valid bouncer signature for the msg data to mint `_amount` of `_token` to `_to`\r\n   */\r\n  function mint(uint256 _nonce, ERC20Mintable _token, address _to, uint256 _amount, bytes _signature)\r\n    public\r\n    validDataWithoutSender(_signature)\r\n  {\r\n    require(_nonce > nonce, \"NONCE_GT_NONCE_REQUIRED\");\r\n    nonce = _nonce;\r\n    _token.mint(_to, _amount);\r\n  }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol@v1.12.0\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/proposals/ERC1046/TokenMetadata.sol@v1.12.0\r\n\r\n/**\r\n * @title ERC-1047 Token Metadata\r\n * @dev See https://eips.ethereum.org/EIPS/eip-1046\r\n * @dev tokenURI must respond with a URI that implements https://eips.ethereum.org/EIPS/eip-1047\r\n * @dev TODO - update https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC721/IERC721.sol#L17 when 1046 is finalized\r\n */\r\ncontract ERC20TokenMetadata is IERC20 {\r\n  function tokenURI() external view returns (string);\r\n}\r\n\r\n\r\ncontract ERC20WithMetadata is ERC20TokenMetadata {\r\n  string private tokenURI_ = \"\";\r\n\r\n  constructor(string _tokenURI)\r\n    public\r\n  {\r\n    tokenURI_ = _tokenURI;\r\n  }\r\n\r\n  function tokenURI() external view returns (string) {\r\n    return tokenURI_;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/tokens/KataToken.sol\r\n\r\ncontract KataToken is ERC20, ERC20Detailed, ERC20Mintable, ERC20WithMetadata {\r\n  constructor(\r\n    string _name,\r\n    string _symbol,\r\n    uint8 _decimals,\r\n    string _tokenURI\r\n  )\r\n    ERC20WithMetadata(_tokenURI)\r\n    ERC20Detailed(_name, _symbol, _decimals)\r\n    public\r\n  {}\r\n}\r\n\r\n\r\n// File contracts/deploy/TokenAndBouncerDeployer.sol\r\n\r\ncontract TokenAndBouncerDeployer is Ownable {\r\n  event Deployed(address indexed token, address indexed bouncer);\r\n\r\n  function deploy(\r\n    string _name,\r\n    string _symbol,\r\n    uint8 _decimals,\r\n    string _tokenURI,\r\n    address _signer\r\n  )\r\n    public\r\n    onlyOwner\r\n  {\r\n    MintableERC20Bouncer bouncer = new MintableERC20Bouncer(_signer);\r\n    KataToken token = new KataToken(_name, _symbol, _decimals, _tokenURI);\r\n    token.transferOwnership(address(bouncer));\r\n\r\n    emit Deployed(address(token), address(bouncer));\r\n\r\n    selfdestruct(msg.sender);\r\n  }\r\n}\r\n\r\n\r\n// File contracts/mocks/MockToken.sol\r\n\r\ncontract MockToken is ERC20Detailed, ERC20Mintable {\r\n  constructor(string _name, string _symbol, uint8 _decimals)\r\n    ERC20Detailed(_name, _symbol, _decimals)\r\n    ERC20Mintable()\r\n    ERC20()\r\n    public\r\n  {\r\n\r\n  }\r\n}\r\n\r\n\r\n// File contracts/old/ClaimableToken.sol\r\n\r\n// import \"./MintableERC721Token.sol\";\r\n// import \"openzeppelin-solidity/contracts/token/ERC721/DefaultTokenURI.sol\";\r\n\r\n\r\n// contract ClaimableToken is DefaultTokenURI, MintableERC721Token {\r\n\r\n//   constructor(string _name, string _symbol, string _tokenURI)\r\n//     MintableERC721Token(_name, _symbol)\r\n//     DefaultTokenURI(_tokenURI)\r\n//     public\r\n//   {\r\n\r\n//   }\r\n// }\r\n\r\n\r\n// File contracts/old/ClaimableTokenDeployer.sol\r\n\r\n// import \"./ClaimableTokenMinter.sol\";\r\n// import \"./ClaimableToken.sol\";\r\n\r\n\r\n// contract ClaimableTokenDeployer {\r\n//   ClaimableToken public token;\r\n//   ClaimableTokenMinter public minter;\r\n\r\n//   constructor(\r\n//     string _name,\r\n//     string _symbol,\r\n//     string _tokenURI,\r\n//     address _bouncer\r\n//   )\r\n//     public\r\n//   {\r\n//     token = new ClaimableToken(_name, _symbol, _tokenURI);\r\n//     minter = new ClaimableTokenMinter(token);\r\n//     token.addOwner(msg.sender);\r\n//     token.addMinter(address(minter));\r\n//     minter.addOwner(msg.sender);\r\n//     minter.addBouncer(_bouncer);\r\n//   }\r\n// }\r\n\r\n\r\n// File contracts/old/ClaimableTokenMinter.sol\r\n\r\n// import \"./ClaimableToken.sol\";\r\n// import \"openzeppelin-solidity/contracts/access/ERC721Minter.sol\";\r\n// import \"openzeppelin-solidity/contracts/access/NonceTracker.sol\";\r\n\r\n\r\n// contract ClaimableTokenMinter is NonceTracker, ERC721Minter {\r\n\r\n//   constructor(ClaimableToken _token)\r\n//     ERC721Minter(_token)\r\n//     public\r\n//   {\r\n\r\n//   }\r\n\r\n//   function mint(bytes _sig)\r\n//     withAccess(msg.sender, 1)\r\n//     public\r\n//     returns (uint256)\r\n//   {\r\n//     return super.mint(_sig);\r\n//   }\r\n// }","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_tokenURI\",\"type\":\"string\"},{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"bouncer\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenAndBouncerDeployer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c820f964052b3683ce5389e3e944da4140723d5f020628cc106bb440e0ea1a39"}]}