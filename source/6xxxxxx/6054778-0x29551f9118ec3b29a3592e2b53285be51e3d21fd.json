{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n   function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token,address from,address to,uint256 value) internal{\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\ncontract PurchaseAdmin is Ownable{\r\n    \r\n  address public purchaseAdmin;\r\n  \r\n  bool public purchaseEnable = true;\r\n  \r\n  bool public grantEnable = true;\r\n  \r\n  //申购开始时间\r\n  uint256 public startAt;\r\n\r\n  //停止申购时间\r\n  uint256 public stopAt;\r\n\r\n  //发放时间\r\n  uint256 public grantAt;\r\n  \r\n  event PurchaseEnable(address indexed from, bool enable);\r\n  \r\n  event GrantEnable(address indexed from, bool enable);\r\n\r\n  function PurchaseAdmin() public{\r\n    purchaseAdmin = msg.sender;\r\n  }\r\n\r\n  function setPurchaseAdmin(address _purchaseAdmin) onlyOwner public {\r\n    purchaseAdmin = _purchaseAdmin;\r\n  }\r\n\r\n  modifier onlyPurchaseAdmin() {\r\n    require(msg.sender == purchaseAdmin);\r\n    _;\r\n  }\r\n  \r\n  function setEnablePurchase(bool enable ) onlyPurchaseAdmin public {\r\n    purchaseEnable = enable;\r\n    emit PurchaseEnable(msg.sender,enable);\r\n  }\r\n  \r\n  modifier checkPurchaseEnable() {\r\n    require(purchaseEnable);\r\n     require(block.timestamp >= startAt && block.timestamp <= stopAt);//要求在申购期内\r\n    _;\r\n  }\r\n\r\n  function setGrantEnable(bool enable ) onlyOwner public {\r\n    grantEnable = enable;\r\n    emit GrantEnable(msg.sender,enable);\r\n  }\r\n\r\n   modifier checkGrantEnable() {\r\n    require(grantEnable);\r\n    require(block.timestamp >= grantAt);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n//申购合约\r\ncontract MyPurchaseContract is Ownable,PurchaseAdmin{\r\n\r\n  using SafeMath for uint256;\r\n\r\n  using SafeERC20 for ERC20;\r\n\r\n  ERC20 public token;\r\n\r\n  //可申购总量\r\n  uint256 public totalAllocatedPurchase;\r\n\r\n  //剩余可申购数量\r\n  uint256 public remainingPurchaseAmount;\r\n\r\n  //以太币申购兑换代币的比例为1ether = 500UHT \r\n  uint256 public buyPrice =  (10 ** uint256(18)) / (500* (10 ** uint256(6)));\r\n  \r\n  //单个地址申购代币总额度有限制，申购代币不能超过100000个UHT\r\n  uint256 public maxPurchase = 100000;\r\n\r\n  //每次申购代币最多申购代币5000个UHT\r\n  uint256 public maxPurchaseOnce = 50000;\r\n\r\n  //每次申购代币最少申购代币100个UHT\r\n  uint256 public minPurchaseOnce = 1000;\r\n\r\n  //发放数次\r\n  uint256 grantCount = 0;\r\n\r\n  struct PurchaseData{\r\n    //已申购数量\r\n    uint256 amount;\r\n    \r\n    //已发放代币\r\n    bool grantDone;\r\n  }\r\n\r\n  //申购详情\r\n  mapping (address => PurchaseData) public purchasedDatas;\r\n\r\n  //申购申购者钱包地址\r\n  address[]  public purchasedWallets;\r\n\r\n  event Purchase(address indexed from, uint256 value);\r\n\r\n  event Grant(address indexed to, uint256 value);\r\n\r\n  function MyPurchaseContract(address _token) public {\r\n    token = ERC20(_token);\r\n    totalAllocatedPurchase = token.totalSupply().mul(30).div(100);//可申购总发行量的30%;\r\n    remainingPurchaseAmount = totalAllocatedPurchase;\r\n    startAt = block.timestamp;//申购开始时间\r\n    stopAt = block.timestamp + 60;//停止申购时间\r\n    grantAt = block.timestamp + 120;//发放时间\r\n  }\r\n\r\n  //申购  \r\n  function buyTokens()  payable checkPurchaseEnable public returns(uint256){\r\n      \r\n    require(msg.value > 0);\r\n\r\n    require(remainingPurchaseAmount > 0);//剩余可申购的总额度\r\n\r\n    require(purchasedDatas[msg.sender].amount < maxPurchase);//尚未超出单个地址申购代币总额度限制\r\n    \r\n    uint256 hopeAmount = msg.value.div(buyPrice);//计算用户期望申购的数量\r\n\r\n    //首次购买，必须最少申购minPurchaseOnce个代币\r\n    if (purchasedDatas[msg.sender].amount == 0 && hopeAmount < minPurchaseOnce) {\r\n      msg.sender.transfer(msg.value);//不成交，原路退还以太币\r\n      return 0;\r\n    }\r\n\r\n    uint256 currentAmount = hopeAmount;\r\n\r\n    //不能超出单次最大申购额度\r\n    if (hopeAmount >= maxPurchaseOnce) {\r\n       currentAmount = maxPurchaseOnce;\r\n    } \r\n\r\n    //不能超出剩余可申购额度\r\n    if (currentAmount >= remainingPurchaseAmount) {\r\n       currentAmount = remainingPurchaseAmount;\r\n    } \r\n\r\n    //首次申购，记录钱包地址\r\n    if (purchasedDatas[msg.sender].amount == 0){\r\n       purchasedWallets.push(msg.sender);\r\n    }\r\n\r\n    purchasedDatas[msg.sender].amount = purchasedDatas[msg.sender].amount.add(currentAmount);\r\n    \r\n    remainingPurchaseAmount = remainingPurchaseAmount.sub(currentAmount);\r\n    \r\n    emit Purchase(msg.sender,currentAmount);  \r\n\r\n    if (hopeAmount > currentAmount){\r\n      //超出申购额度的ether返回给用户\r\n      uint256 out = hopeAmount.sub(currentAmount);\r\n      //计算需要退还的ether\r\n      uint256 retwei = out.mul(buyPrice);\r\n      //退还ether\r\n      msg.sender.transfer(retwei);\r\n    }\r\n\r\n    return currentAmount;\r\n  }\r\n\r\n\r\n  //发放\r\n  function grantTokens(address _purchaser) onlyPurchaseAdmin checkGrantEnable public returns(bool){\r\n      \r\n    require(_purchaser  != address(0));\r\n    \r\n    require(purchasedDatas[_purchaser].grantDone);\r\n    \r\n    uint256 amount = purchasedDatas[_purchaser].amount;\r\n    \r\n    token.safeTransfer(_purchaser,amount);\r\n    \r\n    purchasedDatas[_purchaser].grantDone = true;\r\n    \r\n    grantCount = grantCount.add(1);\r\n\r\n    emit Grant(_purchaser,amount);\r\n    \r\n    return true;\r\n  }\r\n\r\n\r\n  function claimETH() onlyPurchaseAdmin public returns(bool){\r\n\r\n    require(block.timestamp > grantAt);\r\n\r\n    require(grantCount == purchasedWallets.length);\r\n    \r\n    msg.sender.transfer(address(this).balance);\r\n    \r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_purchaseAdmin\",\"type\":\"address\"}],\"name\":\"setPurchaseAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimETH\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingPurchaseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPurchaseOnce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setEnablePurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllocatedPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchaseEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_purchaser\",\"type\":\"address\"}],\"name\":\"grantTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setGrantEnable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchasedWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPurchaseOnce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grantAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grantEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedDatas\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"grantDone\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Grant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"PurchaseEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"GrantEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MyPurchaseContract","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000759065522fc818a0bcf465021681747eb1d8827","Library":"","SwarmSource":"bzzr://a453cf509a3de067f967629f351977045c8da72a0064fc7cb594df9fa891b726"}]}