{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC223\r\n * @dev New Interface for ERC223\r\n */\r\ncontract ERC223 {\r\n\r\n    // functions\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\r\n\r\n\r\n\r\n    // Getters\r\n    function name() external constant returns  (string _name);\r\n    function symbol() external constant returns  (string _symbol);\r\n    function decimals() external constant returns (uint8 _decimals);\r\n    function totalSupply() external constant returns (uint256 _totalSupply);\r\n\r\n\r\n    // Events\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n    event Burn(address indexed burner, uint256 value);\r\n    event FrozenAccount(address indexed targets);\r\n    event UnfrozenAccount(address indexed target);\r\n    event LockedAccount(address indexed target, uint256 locked);\r\n    event UnlockedAccount(address indexed target);\r\n}\r\n\r\n\r\n/**\r\n * @notice The contract will throw tokens if it does not inherit this\r\n * @title ERC223ReceivingContract\r\n * @dev Contract for ERC223 token fallback\r\n */\r\ncontract ERC223ReceivingContract {\r\n\r\n    TKN internal fallback;\r\n\r\n    struct TKN {\r\n        address sender;\r\n        uint value;\r\n        bytes data;\r\n        bytes4 sig;\r\n    }\r\n\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\r\n        TKN memory tkn;\r\n        tkn.sender = _from;\r\n        tkn.value = _value;\r\n        tkn.data = _data;\r\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n        tkn.sig = bytes4(u);\r\n\r\n        /*\r\n         * tkn variable is analogue of msg variable of Ether transaction\r\n         * tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\r\n         * tkn.value the number of tokens that were sent   (analogue of msg.value)\r\n         * tkn.data is data of token transaction   (analogue of msg.data)\r\n         * tkn.sig is 4 bytes signature of function if data of token transaction is a function execution\r\n         */\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n      address indexed previousOwner,\r\n      address indexed newOwner\r\n    );\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title C3Wallet\r\n * @dev C3Wallet is a ERC223 Token with ERC20 functions and events\r\n *      Fully backward compatible with ERC20\r\n */\r\ncontract C3Wallet is ERC223, Ownable {\r\n    using SafeMath for uint;\r\n\r\n\r\n    string public name = \"C3Wallet\";\r\n    string public symbol = \"C3W\";\r\n    uint8 public decimals = 8;\r\n    uint256 public totalSupply = 5e10 * 1e8;\r\n    \r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => uint256) public unlockUnixTime;\r\n\r\n\r\n    constructor() public {\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\r\n\r\n    mapping (address => uint256) public balances;\r\n\r\n    mapping(address => mapping (address => uint256)) public allowance;\r\n\r\n\r\n    /**\r\n     * @dev Getters\r\n     */\r\n    // Function to access name of token .\r\n    function name() external constant returns (string _name) {\r\n        return name;\r\n    }\r\n    // Function to access symbol of token .\r\n    function symbol() external constant returns (string _symbol) {\r\n        return symbol;\r\n    }\r\n    // Function to access decimals of token .\r\n    function decimals() external constant returns (uint8 _decimals) {\r\n        return decimals;\r\n    }\r\n    // Function to access total supply of tokens .\r\n    function totalSupply() external constant returns (uint256 _totalSupply) {\r\n        return totalSupply;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Get balance of a token owner\r\n     * @param _owner The address which one owns tokens\r\n     */\r\n    function balanceOf(address _owner) external view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice This function is modified for erc223 standard\r\n     * @dev ERC20 transfer function added for backward compatibility.\r\n     * @param _to Address of token receiver\r\n     * @param _value Number of tokens to send\r\n     */\r\n    function transfer(address _to, uint _value) public returns (bool success) {\r\n        require(_value > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[msg.sender]\r\n                && now > unlockUnixTime[_to]\r\n                && _to != address(this));\r\n        bytes memory empty = hex\"00000000\";\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, empty);\r\n        } else {\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev ERC223 transfer function\r\n     * @param _to Address of token receiver\r\n     * @param _value Number of tokens to send\r\n     * @param _data data equivalent to tx.data from ethereum transaction\r\n     */\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n        require(_value > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[msg.sender]\r\n                && now > unlockUnixTime[_to]\r\n                && _to != address(this));\r\n        if (isContract(_to)) {\r\n            return transferToContract(_to, _value, _data);\r\n        } else {\r\n            return transferToAddress(_to, _value, _data);\r\n        }\r\n    }\r\n\r\n\r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n    \r\n    /**\r\n     * @dev Prevent targets from sending or receiving tokens\r\n     * @param _targets Addresses to be frozen\r\n     */\r\n    function freezeAccounts(address[] _targets) onlyOwner public {\r\n        require(_targets.length > 0);\r\n\r\n        for (uint j = 0; j < _targets.length; j++) {\r\n            require(_targets[j] != 0x0 && _targets[j] != Ownable.owner);\r\n            frozenAccount[_targets[j]] = true;\r\n            emit FrozenAccount(_targets[j]);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Enable frozen targets to send or receive tokens\r\n     * @param _targets Addresses to be unfrozen\r\n     */\r\n    function unfreezeAccounts(address[] _targets) onlyOwner public {\r\n        require(_targets.length > 0);\r\n\r\n        for (uint j = 0; j < _targets.length; j++) {\r\n            require(_targets[j] != 0x0 && _targets[j] != Ownable.owner);\r\n            frozenAccount[_targets[j]] = false;\r\n            emit UnfrozenAccount(_targets[j]);\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    /**\r\n     * @dev Prevent targets from sending or receiving tokens by setting Unix times.\r\n     * @param _targets Addresses to be locked funds\r\n     * @param _unixTimes Unix times when locking up will be finished\r\n     */\r\n    function lockAccounts(address[] _targets, uint[] _unixTimes) onlyOwner public {\r\n        require(_targets.length > 0\r\n                && _targets.length == _unixTimes.length);\r\n\r\n        for(uint j = 0; j < _targets.length; j++){\r\n            require(_targets[j] != Ownable.owner);\r\n            require(unlockUnixTime[_targets[j]] < _unixTimes[j]);\r\n            unlockUnixTime[_targets[j]] = _unixTimes[j];\r\n            emit LockedAccount(_targets[j], _unixTimes[j]);\r\n        }\r\n    }\r\n    \r\n     /**\r\n     * @dev Enable locked targets to send or receive tokens.\r\n     * @param _targets Addresses to be locked funds\r\n     */\r\n    function unlockAccounts(address[] _targets) onlyOwner public {\r\n        require(_targets.length > 0);\r\n         \r\n        for(uint j = 0; j < _targets.length; j++){\r\n            unlockUnixTime[_targets[j]] = 0;\r\n            emit UnlockedAccount(_targets[j]);\r\n        }\r\n    }\r\n\r\n\r\n    // function which is called when transaction target is an address\r\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit ERC223Transfer(msg.sender, _to, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    // function which is called when transaction target is a contract\r\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n        receiver.tokenFallback(msg.sender, _value, _data);\r\n        emit ERC223Transfer(msg.sender, _to, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     *      Added due to backwards compatibility with ERC20\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 The amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\r\n        require(_to != address(0)\r\n                && _value > 0\r\n                && balances[_from] >= _value\r\n                && allowance[_from][msg.sender] >= _value\r\n                && frozenAccount[_from] == false\r\n                && frozenAccount[_to] == false\r\n                && now > unlockUnixTime[_from]\r\n                && now > unlockUnixTime[_to]);\r\n\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) external returns (bool success) {\r\n        allowance[msg.sender][_spender] = 0; // mitigate the race condition\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner Address The address which owns the funds.\r\n     * @param _spender Address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining) {\r\n        return allowance[_owner][_spender];\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function to distribute tokens to the list of addresses by the provided uniform amount\r\n     * @param _addresses List of addresses\r\n     * @param _amount Uniform amount of tokens\r\n     * @return A bool specifying the result of transfer\r\n     */\r\n    function multiTransfer(address[] _addresses, uint256 _amount) public returns (bool) {\r\n        require(_amount > 0\r\n                && _addresses.length > 0\r\n                && frozenAccount[msg.sender] == false\r\n                && now > unlockUnixTime[msg.sender]);\r\n\r\n        uint256 totalAmount = _amount.mul(_addresses.length);\r\n        require(balances[msg.sender] >= totalAmount);\r\n\r\n        for (uint j = 0; j < _addresses.length; j++) {\r\n            require(_addresses[j] != 0x0\r\n                    && frozenAccount[_addresses[j]] == false\r\n                    && now > unlockUnixTime[_addresses[j]]);\r\n                    \r\n            balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n            balances[_addresses[j]] = balances[_addresses[j]].add(_amount);\r\n            emit Transfer(msg.sender, _addresses[j], _amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function to distribute tokens to the list of addresses by the provided various amount\r\n     * @param _addresses list of addresses\r\n     * @param _amounts list of token amounts\r\n     */\r\n    function multiTransfer(address[] _addresses, uint256[] _amounts) public returns (bool) {\r\n        require(_addresses.length > 0\r\n                && _addresses.length == _amounts.length\r\n                && frozenAccount[msg.sender] == false\r\n                && now > unlockUnixTime[msg.sender]);\r\n\r\n        uint256 totalAmount = 0;\r\n\r\n        for(uint j = 0; j < _addresses.length; j++){\r\n            require(_amounts[j] > 0\r\n                    && _addresses[j] != 0x0\r\n                    && frozenAccount[_addresses[j]] == false\r\n                    && now > unlockUnixTime[_addresses[j]]);\r\n\r\n            totalAmount = totalAmount.add(_amounts[j]);\r\n        }\r\n        require(balances[msg.sender] >= totalAmount);\r\n\r\n        for (j = 0; j < _addresses.length; j++) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_amounts[j]);\r\n            balances[_addresses[j]] = balances[_addresses[j]].add(_amounts[j]);\r\n            emit Transfer(msg.sender, _addresses[j], _amounts[j]);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _from The address that will burn the tokens.\r\n     * @param _tokenAmount The amount of token to be burned\r\n     */\r\n    function burn(address _from, uint256 _tokenAmount) onlyOwner public {\r\n        require(_tokenAmount > 0\r\n                && balances[_from] >= _tokenAmount);\r\n        \r\n        \r\n        balances[_from] = balances[_from].sub(_tokenAmount);\r\n        totalSupply = totalSupply.sub(_tokenAmount);\r\n        emit Burn(_from, _tokenAmount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev default payable function executed after receiving ether\r\n     */\r\n    function () public payable {\r\n        // does not accept ether\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"unfreezeAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_unixTimes\",\"type\":\"uint256[]\"}],\"name\":\"lockAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"freezeAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockUnixTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"}],\"name\":\"unlockAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC223Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"targets\",\"type\":\"address\"}],\"name\":\"FrozenAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"UnfrozenAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked\",\"type\":\"uint256\"}],\"name\":\"LockedAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"}],\"name\":\"UnlockedAccount\",\"type\":\"event\"}]","ContractName":"C3Wallet","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://96aa17a1e6a17aecaa9ede53659dbb281dce5e5e40c770aa06f126ca52e8bfda"}]}