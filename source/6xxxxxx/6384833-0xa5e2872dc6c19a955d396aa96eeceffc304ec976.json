{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary NameFilter {\r\n    /**\r\n     * @dev filters name strings\r\n     * -converts uppercase to lower case.  \r\n     * -makes sure it does not start/end with a space\r\n     * -makes sure it does not contain multiple spaces in a row\r\n     * -cannot be only numbers\r\n     * -cannot start with 0x \r\n     * -restricts characters to A-Z, a-z, 0-9, and space.\r\n     * @return reprocessed string in bytes32 format\r\n     */\r\n    function nameFilter(string _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n        \r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n        \r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n        \r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n                \r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    // require character is a space\r\n                    _temp[i] == 0x20 || \r\n                    // OR lowercase a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    // or 0-9\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n                \r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;    \r\n            }\r\n        }\r\n        \r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n        \r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\nlibrary Player{\r\n\r\n    using NameFilter for string;\r\n\r\n    address public constant AUTHOR =  0x001C9b3392f473f8f13e9Eaf0619c405AF22FC26a7;\r\n    \r\n    struct Map{\r\n        mapping(address=>uint256) map;\r\n        mapping(address=>address) referrerMap;\r\n        mapping(address=>bytes32) addrNameMap;\r\n        mapping(bytes32=>address) nameAddrMap;\r\n    }\r\n    \r\n    function deposit(Map storage  ps,address adr,uint256 v) internal returns(uint256) {\r\n       ps.map[adr]+=v;\r\n        return v;\r\n    }\r\n    \r\n    function depositAuthor(Map storage  ps,uint256 v) public returns(uint256) {\r\n        return deposit(ps,AUTHOR,v);\r\n    }\r\n\r\n    function withdrawal(Map storage  ps,address adr,uint256 num) public returns(uint256) {\r\n        uint256 sum = ps.map[adr];\r\n        if(sum==num){\r\n            withdrawalAll(ps,adr);\r\n        }\r\n        require(sum > num);\r\n        ps.map[adr] = (sum-num);\r\n        return sum;\r\n    }\r\n    \r\n    function withdrawalAll(Map storage  ps,address adr) public returns(uint256) {\r\n        uint256 sum = ps.map[adr];\r\n        require(sum >= 0);\r\n        delete ps.map[adr];\r\n        return sum;\r\n    }\r\n    \r\n    function getAmmount(Map storage ps,address adr) public view returns(uint256) {\r\n        return ps.map[adr];\r\n    }\r\n    \r\n    function registerName(Map storage ps,bytes32 _name)internal  {\r\n        require(ps.nameAddrMap[_name] == address(0) );\r\n        ps.nameAddrMap[_name] = msg.sender;\r\n        ps.addrNameMap[msg.sender] = _name;\r\n    }\r\n    \r\n    function isEmptyName(Map storage ps,bytes32 _name) public view returns(bool) {\r\n        return ps.nameAddrMap[_name] == address(0);\r\n    }\r\n    \r\n    function getByName(Map storage ps,bytes32 _name)public view returns(address) {\r\n        return ps.nameAddrMap[_name] ;\r\n    }\r\n    \r\n    function getName(Map storage ps) public view returns(bytes32){\r\n        return ps.addrNameMap[msg.sender];\r\n    }\r\n    \r\n    function getNameByAddr(Map storage ps,address adr) public view returns(bytes32){\r\n        return ps.addrNameMap[adr];\r\n    }    \r\n    \r\n    function getReferrer(Map storage ps,address adr)public view returns(address){\r\n        return ps.referrerMap[adr];\r\n    }\r\n    \r\n    function getReferrerName(Map storage ps,address adr)public view returns(bytes32){\r\n        return getNameByAddr(ps,getReferrer(ps,adr));\r\n    }\r\n    \r\n    function setReferrer(Map storage ps,address self,address referrer)internal {\r\n         ps.referrerMap[self] = referrer;\r\n    }\r\n    \r\n    function applyReferrer(Map storage ps,string referrer)internal {\r\n        require(getReferrer(ps,msg.sender) == address(0));\r\n        bytes32 rbs = referrer.nameFilter();\r\n        address referrerAdr = getByName(ps,rbs);\r\n        if(referrerAdr != msg.sender){\r\n            setReferrer(ps,msg.sender,referrerAdr);\r\n        }\r\n    }    \r\n    \r\n    function withdrawalFee(Map storage ps,uint256 fee) public returns (uint256){\r\n        if(msg.value > 0){\r\n            require(msg.value >= fee,\"msg.value < fee\");\r\n            return fee;\r\n        }\r\n        require(getAmmount(ps,msg.sender)>=fee ,\"players.getAmmount(msg.sender)<fee\");\r\n        withdrawal(ps,msg.sender,fee);\r\n        return fee;\r\n    }   \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"ps\",\"type\":\"Player.Map storage\"},{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getNameByAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ps\",\"type\":\"Player.Map storage\"},{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ps\",\"type\":\"Player.Map storage\"},{\"name\":\"adr\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ps\",\"type\":\"Player.Map storage\"}],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ps\",\"type\":\"Player.Map storage\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getByName\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ps\",\"type\":\"Player.Map storage\"},{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"withdrawalAll\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ps\",\"type\":\"Player.Map storage\"},{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"isEmptyName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ps\",\"type\":\"Player.Map storage\"},{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getAmmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AUTHOR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ps\",\"type\":\"Player.Map storage\"},{\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"depositAuthor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ps\",\"type\":\"Player.Map storage\"},{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getReferrerName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ps\",\"type\":\"Player.Map storage\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"withdrawalFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Player","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://85c316e42103cd3e5581950c21af8a1e6e09cd316d6e88d40235352d962b01f2"}]}