{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\ncontract Token is StandardToken, BurnableToken, Ownable {\r\n\r\n    /**\r\n    * @dev Use SafeMath library for all uint256 variables\r\n    */\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev ERC20 variables\r\n    */\r\n    string public name = \"MIMIC\";\r\n    string public symbol = \"MIMIC\";\r\n    uint256 public decimals = 18;\r\n\r\n    /**\r\n    * @dev Total token supply\r\n    */\r\n    uint256 public INITIAL_SUPPLY = 900000000 * (10 ** decimals);\r\n\r\n    /** \r\n    * @dev Addresses where the tokens will be stored initially\r\n    */\r\n    address public constant ICO_ADDRESS        = 0x93Fc953BefEF145A92760476d56E45842CE00b2F;\r\n    address public constant PRESALE_ADDRESS    = 0x3be448B6dD35976b58A9935A1bf165d5593F8F27;\r\n\r\n    /**\r\n    * @dev Address that can receive the tokens before the end of the ICO\r\n    */\r\n    address public constant BACKUP_ONE     = 0x9146EE4eb69f92b1e59BE9C7b4718d6B75F696bE;\r\n    address public constant BACKUP_TWO     = 0xe12F95964305a00550E1970c3189D6aF7DB9cFdd;\r\n    address public constant BACKUP_FOUR    = 0x2FBF54a91535A5497c2aF3BF5F64398C4A9177a2;\r\n    address public constant BACKUP_THREE   = 0xa41554b1c2d13F10504Cc2D56bF0Ba9f845C78AC;\r\n\r\n    /** \r\n    * @dev Team members has temporally locked token.\r\n    *      Variables used to define how the tokens will be unlocked.\r\n    */\r\n    uint256 public lockStartDate = 0;\r\n    uint256 public lockEndDate = 0;\r\n    uint256 public lockAbsoluteDifference = 0;\r\n    mapping (address => uint256) public initialLockedAmounts;\r\n\r\n    /**\r\n    * @dev Defines if tokens arre free to move or not \r\n    */\r\n    bool public areTokensFree = false;\r\n\r\n    /** \r\n    * @dev Emitted when the token locked amount of an address is set\r\n    */\r\n    event SetLockedAmount(address indexed owner, uint256 amount);\r\n\r\n    /** \r\n    * @dev Emitted when the token locked amount of an address is updated\r\n    */\r\n    event UpdateLockedAmount(address indexed owner, uint256 amount);\r\n\r\n    /**\r\n    * @dev Emitted when it will be time to free the unlocked tokens\r\n    */\r\n    event FreeTokens();\r\n\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[owner] = totalSupply_;\r\n    }\r\n\r\n    /** \r\n    * @dev Check whenever an address has the power to transfer tokens before the end of the ICO\r\n    * @param _sender Address of the transaction sender\r\n    * @param _to Destination address of the transaction\r\n    */\r\n    modifier canTransferBeforeEndOfIco(address _sender, address _to) {\r\n        require(\r\n            areTokensFree ||\r\n            _sender == owner ||\r\n            _sender == ICO_ADDRESS ||\r\n            _sender == PRESALE_ADDRESS ||\r\n            (\r\n                _to == BACKUP_ONE ||\r\n                _to == BACKUP_TWO ||\r\n                _to == BACKUP_THREE || \r\n                _to == BACKUP_FOUR\r\n            )\r\n            , \"Cannot transfer tokens yet\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    /** \r\n    * @dev Check whenever an address can transfer an certain amount of token in the case all or some part\r\n    *      of them are locked\r\n    * @param _sender Address of the transaction sender\r\n    * @param _amount The amount of tokens the address is trying to transfer\r\n    */\r\n    modifier canTransferIfLocked(address _sender, uint256 _amount) {\r\n        uint256 afterTransfer = balances[_sender].sub(_amount);\r\n        require(afterTransfer >= getLockedAmount(_sender), \"Not enought unlocked tokens\");\r\n        \r\n        _;\r\n    }\r\n\r\n    /** \r\n    * @dev Returns the amount of tokens an address has locked\r\n    * @param _addr The address in question\r\n    */\r\n    function getLockedAmount(address _addr) public view returns (uint256){\r\n        if (now >= lockEndDate || initialLockedAmounts[_addr] == 0x0)\r\n            return 0;\r\n\r\n        if (now < lockStartDate) \r\n            return initialLockedAmounts[_addr];\r\n\r\n        uint256 alpha = uint256(now).sub(lockStartDate); // absolute purchase date\r\n        uint256 tokens = initialLockedAmounts[_addr].sub(alpha.mul(initialLockedAmounts[_addr]).div(lockAbsoluteDifference)); // T - (α * T) / β\r\n\r\n        return tokens;\r\n    }\r\n\r\n    /** \r\n    * @dev Sets the amount of locked tokens for a specific address. It doesn't transfer tokens!\r\n    * @param _addr The address in question\r\n    * @param _amount The amount of tokens to lock\r\n    */\r\n    function setLockedAmount(address _addr, uint256 _amount) public onlyOwner {\r\n        require(_addr != address(0x0), \"Cannot set locked amount to null address\");\r\n\r\n        initialLockedAmounts[_addr] = _amount;\r\n\r\n        emit SetLockedAmount(_addr, _amount);\r\n    }\r\n\r\n    /** \r\n    * @dev Updates (adds to) the amount of locked tokens for a specific address. It doesn't transfer tokens!\r\n    * @param _addr The address in question\r\n    * @param _amount The amount of locked tokens to add\r\n    */\r\n    function updateLockedAmount(address _addr, uint256 _amount) public onlyOwner {\r\n        require(_addr != address(0x0), \"Cannot update locked amount to null address\");\r\n        require(_amount > 0, \"Cannot add 0\");\r\n\r\n        initialLockedAmounts[_addr] = initialLockedAmounts[_addr].add(_amount);\r\n\r\n        emit UpdateLockedAmount(_addr, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Frees all the unlocked tokens\r\n    */\r\n    function freeTokens() public onlyOwner {\r\n        require(!areTokensFree, \"Tokens have already been freed\");\r\n\r\n        areTokensFree = true;\r\n\r\n        lockStartDate = now;\r\n        // lockEndDate = lockStartDate + 365 days;\r\n        lockEndDate = lockStartDate + 1 days;\r\n        lockAbsoluteDifference = lockEndDate.sub(lockStartDate);\r\n\r\n        emit FreeTokens();\r\n    }\r\n\r\n    /**\r\n    * @dev Override of ERC20's transfer function with modifiers\r\n    * @param _to The address to which tranfer the tokens\r\n    * @param _value The amount of tokens to transfer\r\n    */\r\n    function transfer(address _to, uint256 _value)\r\n        public\r\n        canTransferBeforeEndOfIco(msg.sender, _to) \r\n        canTransferIfLocked(msg.sender, _value) \r\n        returns (bool)\r\n    {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Override of ERC20's transfer function with modifiers\r\n    * @param _from The address from which tranfer the tokens\r\n    * @param _to The address to which tranfer the tokens\r\n    * @param _value The amount of tokens to transfer\r\n    */\r\n    function transferFrom(address _from, address _to, uint _value) \r\n        public\r\n        canTransferBeforeEndOfIco(_from, _to) \r\n        canTransferIfLocked(_from, _value) \r\n        returns (bool) \r\n    {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n}\r\n\r\ncontract Presale is Ownable {\r\n\r\n    /**\r\n    * @dev Use SafeMath library for all uint256 variables\r\n    */\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev Our previously deployed Token (ERC20) contract\r\n    */\r\n    Token public token;\r\n\r\n    /**\r\n    * @dev How many tokens a buyer takes per wei\r\n    */\r\n    uint256 public rate;\r\n\r\n    /**\r\n    * @dev The address where all the funds will be stored\r\n    */\r\n    address public wallet;\r\n\r\n    /**\r\n    * @dev The address where all the tokens are stored\r\n    */\r\n    address public holder;\r\n\r\n    /**\r\n    * @dev The amount of wei raised during the ICO\r\n    */\r\n    uint256 public weiRaised;\r\n\r\n    /**\r\n    * @dev The amount of tokens purchased by the buyers\r\n    */\r\n    uint256 public tokenPurchased;\r\n\r\n    /**\r\n    * @dev Crowdsale start date\r\n    */\r\n    uint256 public constant startDate = 1535994000; // 2018-09-03 17:00:00 (UTC)\r\n\r\n    /**\r\n    * @dev Crowdsale end date\r\n    */\r\n    uint256 public constant endDate = 1541264400; // 2018-10-01 10:00:00 (UTC)\r\n\r\n    /**\r\n    * @dev The minimum amount of ethereum that we accept as a contribution\r\n    */\r\n    uint256 public minimumAmount = 40 ether;\r\n\r\n    /**\r\n    * @dev The maximum amount of ethereum that an address can contribute\r\n    */\r\n    uint256 public maximumAmount = 200 ether;\r\n\r\n    /**\r\n    * @dev Mapping tracking how much an address has contribuited\r\n    */\r\n    mapping (address => uint256) public contributionAmounts;\r\n\r\n    /**\r\n    * @dev Mapping containing which addresses are whitelisted\r\n    */\r\n    mapping (address => bool) public whitelist;\r\n\r\n    /**\r\n    * @dev Emitted when an amount of tokens is beign purchased\r\n    */\r\n    event Purchase(address indexed sender, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    /**\r\n    * @dev Emitted when we change the conversion rate \r\n    */\r\n    event ChangeRate(uint256 rate);\r\n\r\n    /**\r\n    * @dev Emitted when we change the minimum contribution amount\r\n    */\r\n    event ChangeMinimumAmount(uint256 amount);\r\n\r\n    /**\r\n    * @dev Emitted when we change the maximum contribution amount\r\n    */\r\n    event ChangeMaximumAmount(uint256 amount);\r\n\r\n    /**\r\n    * @dev Emitted when the whitelisted state of and address is changed\r\n    */\r\n    event Whitelist(address indexed beneficiary, bool indexed whitelisted);\r\n\r\n    /**\r\n    * @dev Contract constructor\r\n    * @param _tokenAddress The address of the previously deployed Token contract\r\n    */\r\n    constructor(address _tokenAddress, uint256 _rate, address _wallet, address _holder) public {\r\n        require(_tokenAddress != address(0), \"Token Address cannot be a null address\");\r\n        require(_rate > 0, \"Conversion rate must be a positive integer\");\r\n        require(_wallet != address(0), \"Wallet Address cannot be a null address\");\r\n        require(_holder != address(0), \"Holder Address cannot be a null address\");\r\n\r\n        token = Token(_tokenAddress);\r\n        rate = _rate;\r\n        wallet = _wallet;\r\n        holder = _holder;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier used to verify if an address can purchase\r\n    */\r\n    modifier canPurchase(address _beneficiary) {\r\n        require(now >= startDate, \"Presale has not started yet\");\r\n        require(now <= endDate, \"Presale has finished\");\r\n\r\n        require(whitelist[_beneficiary] == true, \"Your address is not whitelisted\");\r\n\r\n        uint256 amount = uint256(contributionAmounts[_beneficiary]).add(msg.value);\r\n\r\n        require(msg.value >= minimumAmount, \"Cannot contribute less than the minimum amount\");\r\n        require(amount <= maximumAmount, \"Cannot contribute more than the maximum amount\");\r\n        \r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Fallback function, called when someone tryes to pay send ether to the contract address\r\n    */\r\n    function () external payable {\r\n        purchase(msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @dev General purchase function, used by the fallback function and from buyers who are buying for other addresses\r\n    * @param _beneficiary The Address that will receive the tokens\r\n    */\r\n    function purchase(address _beneficiary) internal canPurchase(_beneficiary) {\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // Validate beneficiary and wei amount\r\n        require(_beneficiary != address(0), \"Beneficiary Address cannot be a null address\");\r\n        require(weiAmount > 0, \"Wei amount must be a positive integer\");\r\n\r\n        // Calculate token amount\r\n        uint256 tokenAmount = _getTokenAmount(weiAmount);\r\n\r\n        // Update totals\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        tokenPurchased = tokenPurchased.add(tokenAmount);\r\n        contributionAmounts[_beneficiary] = contributionAmounts[_beneficiary].add(weiAmount);\r\n\r\n        _transferEther(weiAmount);\r\n\r\n        // Make the actual purchase and send the tokens to the contributor\r\n        _purchaseTokens(_beneficiary, tokenAmount);\r\n\r\n        // Emit purchase event\r\n        emit Purchase(msg.sender, _beneficiary, weiAmount, tokenAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Updates the conversion rate to a new value\r\n    * @param _rate The new conversion rate\r\n    */\r\n    function updateConversionRate(uint256 _rate) public onlyOwner {\r\n        require(_rate > 0, \"Conversion rate must be a positive integer\");\r\n\r\n        rate = _rate;\r\n\r\n        emit ChangeRate(_rate);\r\n    }\r\n\r\n    /**\r\n    * @dev Updates the minimum contribution amount to a new value\r\n    * @param _amount The new minimum contribution amount expressed in wei\r\n    */\r\n    function updateMinimumAmount(uint256 _amount) public onlyOwner {\r\n        require(_amount > 0, \"Minimum amount must be a positive integer\");\r\n\r\n        minimumAmount = _amount;\r\n\r\n        emit ChangeMinimumAmount(_amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Updates the maximum contribution amount to a new value\r\n    * @param _amount The new maximum contribution amount expressed in wei\r\n    */\r\n    function updateMaximumAmount(uint256 _amount) public onlyOwner {\r\n        require(_amount > 0, \"Maximum amount must be a positive integer\");\r\n\r\n        maximumAmount = _amount;\r\n\r\n        emit ChangeMaximumAmount(_amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Updates the whitelisted status of an address\r\n    * @param _addr The address in question\r\n    * @param _whitelist The new whitelist status\r\n    */\r\n    function setWhitelist(address _addr, bool _whitelist) public onlyOwner {\r\n        require(_addr != address(0x0), \"Whitelisted address must be valid\");\r\n\r\n        whitelist[_addr] = _whitelist;\r\n\r\n        emit Whitelist(_addr, _whitelist);\r\n    }\r\n\r\n    /**\r\n    * @dev Processes the actual purchase (token transfer)\r\n    * @param _beneficiary The Address that will receive the tokens\r\n    * @param _amount The amount of tokens to transfer\r\n    */\r\n    function _purchaseTokens(address _beneficiary, uint256 _amount) internal {\r\n        token.transferFrom(holder, _beneficiary, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers the ethers recreived from the contributor to the Presale wallet\r\n    * @param _amount The amount of ethers to transfer\r\n    */\r\n    function _transferEther(uint256 _amount) internal {\r\n        // this should throw an exeption if it fails\r\n        wallet.transfer(_amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns an amount of wei converted in tokens\r\n    * @param _wei Value in wei to be converted\r\n    * @return Amount of tokens \r\n    */\r\n    function _getTokenAmount(uint256 _wei) internal view returns (uint256) {\r\n        // wei * ((rate * (30 + 100)) / 100)\r\n        return _wei.mul(rate.mul(130).div(100));\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BACKUP_TWO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateLockedAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BACKUP_ONE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BACKUP_THREE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BACKUP_FOUR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialLockedAmounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockAbsoluteDifference\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLockedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"areTokensFree\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setLockedAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRESALE_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetLockedAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateLockedAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FreeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7d6bd9bdecfabd58932b53247afd906025bb04b05e05082d916e07f993e31b87"}]}