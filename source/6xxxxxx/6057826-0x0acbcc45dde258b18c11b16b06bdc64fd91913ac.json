{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Base {\r\n    \r\n    modifier only(address allowed) {\r\n        require(msg.sender == allowed);\r\n        _;\r\n    }\r\n\r\n    // *************************************************\r\n    // *          reentrancy handling                  *\r\n    // *************************************************\r\n\r\n    uint private bitlocks = 0;\r\n    modifier noReentrancy(uint m) {\r\n        var _locks = bitlocks;\r\n        require(_locks & m <= 0);\r\n        bitlocks |= m;\r\n        _;\r\n        bitlocks = _locks;\r\n    }\r\n\r\n    modifier noAnyReentrancy {\r\n        var _locks = bitlocks;\r\n        require(_locks <= 0);\r\n        bitlocks = uint(-1);\r\n        _;\r\n        bitlocks = _locks;\r\n    }\r\n\r\n    modifier reentrant { _; }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) onlyOwner public {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() onlyOwner public {\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n}\r\n\r\ncontract Crowdsale is Base, Owned {\r\n    using SafeMath for uint256;\r\n\r\n    enum State { INIT, ICO, CLOSED, PAUSE }\r\n\r\n    uint public constant DECIMALS = 10**18;\r\n    uint public constant WEI_DECIMALS = 10**18;\r\n    uint public constant MAX_SUPPLY = 3400000000 * DECIMALS;\r\n\r\n    mapping (address => bool) investors;\r\n    State public currentState = State.INIT;\r\n    IToken public token;\r\n\r\n    uint public totalSupply = 0;\r\n\r\n    uint public totalFunds = 0;\r\n    uint public currentPrice = WEI_DECIMALS / 166;\r\n    address public beneficiary;\r\n    uint public countMembers = 0;\r\n\r\n    event Transfer(address indexed _to, uint256 _value);\r\n\r\n    modifier inState(State _state){\r\n        require(currentState == _state);\r\n        _;\r\n    }\r\n\r\n    modifier salesRunning(){\r\n        require(currentState == State.ICO);\r\n        _;\r\n    }\r\n\r\n    modifier notClosed(){\r\n        require(currentState != State.CLOSED);\r\n        _;\r\n    }\r\n\r\n    function Crowdsale(address _beneficiary) public {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function ()\r\n        public\r\n        payable\r\n        salesRunning\r\n    {\r\n        _receiveFunds();\r\n    }\r\n\r\n    function initialize(address _token)\r\n        public\r\n        onlyOwner\r\n        inState(State.INIT)\r\n    {\r\n        require(_token != address(0));\r\n        token = IToken(_token);\r\n    }\r\n\r\n    function setTokenPrice(uint _tokenPrice) public\r\n        onlyOwner\r\n        notClosed\r\n    {\r\n        currentPrice = _tokenPrice;\r\n    }\r\n\r\n    function setTokenPriceAsRatio(uint _tokenCount) public\r\n        onlyOwner\r\n        notClosed\r\n    {\r\n        currentPrice = WEI_DECIMALS / _tokenCount;\r\n    }\r\n\r\n    function setState(State _newState)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(currentState != State.CLOSED);\r\n        require(\r\n            (currentState == State.INIT && _newState == State.ICO ||\r\n             currentState == State.ICO && _newState == State.CLOSED ||\r\n            currentState == State.ICO && _newState == State.PAUSE ||\r\n            currentState == State.PAUSE && _newState == State.ICO)\r\n        );\r\n\r\n        if(_newState == State.CLOSED){\r\n            _finish();\r\n        }\r\n        currentState = _newState;\r\n    }\r\n\r\n\r\n    function withdraw(uint _amount)\r\n        public\r\n        noAnyReentrancy\r\n        onlyOwner\r\n    {\r\n        require(_amount > 0 && _amount <= this.balance);\r\n        beneficiary.transfer(_amount);\r\n    }\r\n\r\n    function sendToken(address _to, uint _amount)\r\n        public\r\n        onlyOwner\r\n        salesRunning\r\n    {\r\n        uint amount = _amount.mul(DECIMALS);\r\n        _checkMaxSaleSupply(amount);\r\n        _mint(_to, amount);\r\n    }\r\n\r\n\r\n    function getCountMembers()\r\n        public\r\n        constant\r\n        returns(uint)\r\n    {\r\n        return countMembers;\r\n    }\r\n\r\n\r\n    //==================== Internal Methods =================\r\n    function _mint(address _to, uint _amount)\r\n        noAnyReentrancy\r\n        internal\r\n    {\r\n        _increaseSupply(_amount);\r\n        IToken(token).mint(_to, _amount);\r\n        Transfer(_to, _amount);\r\n    }\r\n\r\n    function _finish()\r\n        noAnyReentrancy\r\n        internal\r\n    {\r\n        IToken(token).start();\r\n    }\r\n\r\n    function _receiveFunds()\r\n        internal\r\n    {\r\n        require(msg.value != 0);\r\n        uint weiAmount = msg.value;\r\n        uint transferTokens = weiAmount.mul(DECIMALS).div(currentPrice);\r\n\r\n        _checkMaxSaleSupply(transferTokens);\r\n\r\n        if(!investors[msg.sender]){\r\n            countMembers = countMembers.add(1);\r\n            investors[msg.sender] = true;\r\n        }\r\n        totalFunds = totalFunds.add(weiAmount);\r\n        _mint(msg.sender, transferTokens);\r\n    }\r\n\r\n    function _checkMaxSaleSupply(uint transferTokens)\r\n        internal\r\n    {\r\n        require(totalSupply.add(transferTokens) <= MAX_SUPPLY);\r\n    }\r\n\r\n    function _increaseSupply(uint _amount)\r\n        internal\r\n    {\r\n        totalSupply = totalSupply.add(_amount);\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract IToken {\r\n  uint256 public totalSupply;\r\n  function mint(address _to, uint _amount) public returns(bool);\r\n  function start() public;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract TokenTimelock {\r\n  IToken public token;\r\n  address public beneficiary;\r\n  uint64 public releaseTime;\r\n\r\n  function TokenTimelock(address _token, address _beneficiary, uint64 _releaseTime) public {\r\n    require(_releaseTime > now);\r\n    token = IToken(_token);\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  function release() public {\r\n    require(now >= releaseTime);\r\n\r\n    uint256 amount = token.balanceOf(this);\r\n    require(amount > 0);\r\n\r\n    token.transfer(beneficiary, amount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenCount\",\"type\":\"uint256\"}],\"name\":\"setTokenPriceAsRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newState\",\"type\":\"uint8\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCountMembers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEI_DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005b2c122ba6c220bc0930d7a0799c6e7814a6042d","Library":"","SwarmSource":"bzzr://56e0603fa20bba9b4b0683aefad525af50cbe4c31935944d1a601d5b0aeee68a"}]}