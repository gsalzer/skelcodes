{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title TOY Ownership\r\n/// @notice defines TOY Token ownership-tracking structures and view functions.\r\n//-----------------------------------------------------------------------------\r\ncontract ToyOwnership {\r\n    struct ToyToken {\r\n        // owner ID list\r\n        address owner;\r\n        // unique identifier\r\n        uint uid;\r\n        // timestamp\r\n        uint timestamp;\r\n        // exp\r\n        uint exp;\r\n        // toy data\r\n        bytes toyData;\r\n    }\r\n\r\n    struct ExternalNft{\r\n        // Contract address\r\n        address nftContractAddress;\r\n        // Token Identifier\r\n        uint nftId;\r\n    }\r\n\r\n    // Array containing all TOY Tokens. The first element in toyArray returns\r\n    //  as invalid\r\n    ToyToken[] toyArray;\r\n    // Mapping containing all UIDs tracked by this contract. Valid UIDs map to\r\n    //  index numbers, invalid UIDs map to 0.\r\n    mapping (uint => uint) uidToToyIndex;\r\n    // Mapping containing linked external NFTs. Linked TOY Tokens always map to\r\n    //  non-zero numbers, invalid TOY Tokens map to 0.\r\n    mapping (uint => ExternalNft) uidToExternalNft;\r\n    // Mapping containing tokens IDs for tokens created by an external contract\r\n    //  and whether or not it is linked to a TOY Token \r\n    mapping (address => mapping (uint => bool)) linkedExternalNfts;\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if TOY Token #`_tokenId` isn't tracked by the toyArray.\r\n    //-------------------------------------------------------------------------\r\n    modifier mustExist(uint _tokenId) {\r\n        require (uidToToyIndex[_tokenId] != 0, \"Invalid TOY Token UID\");\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if TOY Token #`_tokenId` isn't owned by sender.\r\n    //-------------------------------------------------------------------------\r\n    modifier mustOwn(uint _tokenId) {\r\n        require \r\n        (\r\n            ownerOf(_tokenId) == msg.sender, \r\n            \"Must be owner of this TOY Token\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if parameter is zero\r\n    //-------------------------------------------------------------------------\r\n    modifier notZero(uint _param) {\r\n        require(_param != 0, \"Parameter cannot be zero\");\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Creates an empty TOY Token as a [0] placeholder for invalid TOY \r\n    ///  Token queries.\r\n    //-------------------------------------------------------------------------\r\n    constructor () public {\r\n        toyArray.push(ToyToken(0,0,0,0,\"\"));\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Find the owner of TOY Token #`_tokenId`\r\n    /// @dev throws if `_owner` is the zero address.\r\n    /// @param _tokenId The identifier for a TOY Token\r\n    /// @return The address of the owner of the TOY Token\r\n    //-------------------------------------------------------------------------\r\n    function ownerOf(uint256 _tokenId) \r\n        public \r\n        view \r\n        mustExist(_tokenId) \r\n        returns (address) \r\n    {\r\n        // owner must not be the zero address\r\n        require (\r\n            toyArray[uidToToyIndex[_tokenId]].owner != 0, \r\n            \"TOY Token has no owner\"\r\n        );\r\n        return toyArray[uidToToyIndex[_tokenId]].owner;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Count all TOY Tokens assigned to an owner\r\n    /// @dev throws if `_owner` is the zero address.\r\n    /// @param _owner An address to query\r\n    /// @return The number of TOY Tokens owned by `_owner`, possibly zero\r\n    //-------------------------------------------------------------------------\r\n    function balanceOf(address _owner) \r\n        public \r\n        view \r\n        notZero(uint(_owner)) \r\n        returns (uint256) \r\n    {\r\n        uint owned;\r\n        for (uint i = 1; i < toyArray.length; ++i) {\r\n            if(toyArray[i].owner == _owner) {\r\n                ++owned;\r\n            }\r\n        }\r\n        return owned;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get a list of TOY Tokens assigned to an owner\r\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\r\n    ///  `_owner` is the zero address, representing invalid TOY Tokens.\r\n    /// @param _owner Address to query for TOY Tokens.\r\n    /// @return The complete list of Unique Indentifiers for TOY Tokens\r\n    ///  assigned to `_owner`\r\n    //-------------------------------------------------------------------------\r\n    function tokensOfOwner(address _owner) external view returns (uint[]) {\r\n        uint toysOwned = balanceOf(_owner);\r\n        require(toysOwned > 0, \"No owned TOY Tokens\");\r\n        uint counter = 0;\r\n        uint[] memory result = new uint[](toysOwned);\r\n        for (uint i = 0; i < toyArray.length; i++) {\r\n            if(toyArray[i].owner == _owner) {\r\n                result[counter] = toyArray[i].uid;\r\n                counter++;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get number of TOY Tokens tracked by this contract\r\n    /// @return A count of valid TOY Tokens tracked by this contract, where\r\n    ///  each one has an assigned and queryable owner.\r\n    //-------------------------------------------------------------------------\r\n    function totalSupply() external view returns (uint256) {\r\n        return (toyArray.length - 1);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get the UID of TOY Token with index number `index`.\r\n    /// @dev Throws if `_index` >= `totalSupply()`.\r\n    /// @param _index A counter less than `totalSupply()`\r\n    /// @return The UID for the #`_index` TOY Token in the TOY Token array.\r\n    //-------------------------------------------------------------------------\r\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\r\n        // index must correspond to an existing TOY Token\r\n        require (_index > 0 && _index < toyArray.length, \"Invalid index\");\r\n        return (toyArray[_index].uid);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Enumerate NFTs assigned to an owner\r\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\r\n    ///  `_owner` is the zero address, representing invalid NFTs.\r\n    /// @param _owner Address to query for TOY Tokens.\r\n    /// @param _index A counter less than `balanceOf(_owner)`\r\n    /// @return The Unique Indentifier for the #`_index` TOY Token assigned to\r\n    ///  `_owner`, (sort order not specified)\r\n    //-------------------------------------------------------------------------\r\n    function tokenOfOwnerByIndex(\r\n        address _owner, \r\n        uint256 _index\r\n    ) external view notZero(uint(_owner)) returns (uint256) {\r\n        uint toysOwned = balanceOf(_owner);\r\n        require(toysOwned > 0, \"No owned TOY Tokens\");\r\n        require(_index < toysOwned, \"Invalid index\");\r\n        uint counter = 0;\r\n        for (uint i = 0; i < toyArray.length; i++) {\r\n            if (toyArray[i].owner == _owner) {\r\n                if (counter == _index) {\r\n                    return(toyArray[i].uid);\r\n                } else {\r\n                    counter++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title Token Receiver Interface\r\n//-----------------------------------------------------------------------------\r\ninterface TokenReceiverInterface {\r\n    function onERC721Received(\r\n        address _operator, \r\n        address _from, \r\n        uint256 _tokenId, \r\n        bytes _data\r\n    ) external returns(bytes4);\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title ERC721 Interface\r\n//-----------------------------------------------------------------------------\r\ninterface ERC721 {\r\n    function transferFrom (\r\n        address _from, \r\n        address _to, \r\n        uint256 _tokenId\r\n    ) external payable;\r\n    function ownerOf(uint _tokenId) external returns(address);\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title TOY Transfers\r\n/// @notice Defines transfer functionality for TOY Tokens to transfer ownership.\r\n///  Defines approval functionality for 3rd parties to enable transfers on\r\n///  owners' behalf.\r\n//-----------------------------------------------------------------------------\r\ncontract ToyTransfers is ToyOwnership {\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Transfer emits when ownership of a TOY Token changes by any\r\n    ///  mechanism. This event emits when TOY Tokens are created ('from' == 0).\r\n    ///  At the time of any transfer, the approved address for that TOY Token\r\n    ///  (if any) is reset to address(0).\r\n    //-------------------------------------------------------------------------\r\n    event Transfer(\r\n        address indexed _from, \r\n        address indexed _to, \r\n        uint256 indexed _tokenId\r\n    );\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Approval emits when the approved address for a TOY Token is\r\n    ///  changed or reaffirmed. The zero address indicates there is no approved\r\n    ///  address. When a Transfer event emits, this also indicates that the\r\n    ///  approved address for that TOY Token (if any) is reset to none.\r\n    //-------------------------------------------------------------------------\r\n    event Approval(\r\n        address indexed _owner, \r\n        address indexed _approved, \r\n        uint256 indexed _tokenId\r\n    );\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    ///  The operator can manage all TOY Tokens of the owner.\r\n    //-------------------------------------------------------------------------\r\n    event ApprovalForAll(\r\n        address indexed _owner, \r\n        address indexed _operator, \r\n        bool _approved\r\n    );\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint => address) idToApprovedAddress;\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) operatorApprovals;\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if called by any account other than token owner, approved\r\n    ///  address, or authorized operator.\r\n    //-------------------------------------------------------------------------\r\n    modifier canOperate(uint _uid) {\r\n        // sender must be owner of TOY Token #uid, or sender must be the\r\n        //  approved address of TOY Token #uid, or an authorized operator for\r\n        //  TOY Token owner\r\n        require (\r\n            msg.sender == toyArray[uidToToyIndex[_uid]].owner ||\r\n            msg.sender == idToApprovedAddress[_uid] ||\r\n            operatorApprovals[toyArray[uidToToyIndex[_uid]].owner][msg.sender],\r\n            \"Not authorized to operate for this TOY Token\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Change or reaffirm the approved address for TOY Token #`_tokenId`.\r\n    /// @dev The zero address indicates there is no approved address.\r\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n    ///  operator of the current owner.\r\n    /// @param _approved The new approved TOY Token controller\r\n    /// @param _tokenId The TOY Token to approve\r\n    //-------------------------------------------------------------------------\r\n    function approve(address _approved, uint256 _tokenId) external payable {\r\n        address owner = ownerOf(_tokenId);\r\n        // msg.sender must be the current NFT owner, or an authorized operator\r\n        //  of the current owner.\r\n        require (\r\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\r\n            \"Not authorized to approve for this TOY Token\"\r\n        );\r\n        idToApprovedAddress[_tokenId] = _approved;\r\n        emit Approval(owner, _approved, _tokenId);\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get the approved address for a single NFT\r\n    /// @dev Throws if `_tokenId` is not a valid NFT.\r\n    /// @param _tokenId The NFT to find the approved address for\r\n    /// @return The approved address for this NFT, or the zero address if\r\n    ///  there is none\r\n    //-------------------------------------------------------------------------\r\n    function getApproved(\r\n        uint256 _tokenId\r\n    ) external view mustExist(_tokenId) returns (address) {\r\n        return idToApprovedAddress[_tokenId];\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Enable or disable approval for a third party (\"operator\") to\r\n    ///  manage all of sender's TOY Tokens\r\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow multiple\r\n    ///  operators per owner.\r\n    /// @param _operator Address to add to the set of authorized operators\r\n    /// @param _approved True if the operator is approved, false to revoke\r\n    ///  approval\r\n    //-------------------------------------------------------------------------\r\n    function setApprovalForAll(address _operator, bool _approved) external {\r\n        require(_operator != msg.sender, \"Operator cannot be sender\");\r\n        operatorApprovals[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get whether '_operator' is approved to manage all of '_owner's\r\n    ///  TOY Tokens\r\n    /// @param _owner TOY Token Owner.\r\n    /// @param _operator Address to check for approval.\r\n    /// @return True if '_operator' is approved to manage all of '_owner's' TOY\r\n    ///  Tokens.\r\n    //-------------------------------------------------------------------------\r\n    function isApprovedForAll(\r\n        address _owner, \r\n        address _operator\r\n    ) public view returns (bool) {\r\n        return operatorApprovals[_owner][_operator];\r\n    }\r\n\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfers ownership of TOY Token #`_tokenId` from `_from` to \r\n    ///  `_to`\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, checks if\r\n    ///  `_to` is a smart contract (code size > 0). If so, it calls\r\n    ///  `onERC721Received` on `_to` and throws if the return value is not\r\n    ///  `0x150b7a02`. If TOY Token is linked to an external NFT, this function\r\n    ///  calls TransferFrom from the external address. Throws if this contract\r\n    ///  is not an approved operator for the external NFT.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    //-------------------------------------------------------------------------\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \r\n        external \r\n        payable \r\n        mustExist(_tokenId) \r\n        canOperate(_tokenId) \r\n        notZero(uint(_to)) \r\n    {\r\n        address owner = ownerOf(_tokenId);\r\n        // _from address must be current owner of the TOY Token\r\n        require (\r\n            _from == owner, \r\n            \"TOY Token not owned by '_from'\"\r\n        );\r\n               \r\n        // if TOY Token has a linked external NFT, call TransferFrom on the \r\n        //  external NFT contract\r\n        ExternalNft memory externalNft = uidToExternalNft[_tokenId];\r\n        if (externalNft.nftContractAddress != 0) {\r\n            // initialize external NFT contract\r\n            ERC721 externalContract = ERC721(externalNft.nftContractAddress);\r\n            // call TransferFrom\r\n            externalContract.transferFrom(_from, _to, externalNft.nftId);\r\n        }\r\n\r\n        // clear approval\r\n        idToApprovedAddress[_tokenId] = 0;\r\n        // transfer ownership\r\n        toyArray[uidToToyIndex[_tokenId]].owner = _to;\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n\r\n        // check and call onERC721Received. Throws and rolls back the transfer\r\n        //  if _to does not implement the expected interface\r\n        uint size;\r\n        assembly { size := extcodesize(_to) }\r\n        if (size > 0) {\r\n            bytes4 retval = TokenReceiverInterface(_to).onERC721Received(msg.sender, _from, _tokenId, \"\");\r\n            require(\r\n                retval == 0x150b7a02, \r\n                \"Destination contract not equipped to receive TOY Tokens\"\r\n            );\r\n        }\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfers ownership of TOY Token #`_tokenId` from `_from` to \r\n    ///  `_to`\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. If TOY Token is linked to an external\r\n    ///  NFT, this function calls TransferFrom from the external address.\r\n    ///  Throws if this contract is not an approved operator for the external\r\n    ///  NFT. When transfer is complete, checks if `_to` is a smart contract\r\n    ///  (code size > 0). If so, it calls `onERC721Received` on `_to` and\r\n    ///  throws if the return value is not `0x150b7a02`.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    /// @param _data Additional data with no pre-specified format\r\n    //-------------------------------------------------------------------------\r\n    function safeTransferFrom(\r\n        address _from, \r\n        address _to, \r\n        uint256 _tokenId, \r\n        bytes _data\r\n    ) \r\n        external \r\n        payable \r\n        mustExist(_tokenId) \r\n        canOperate(_tokenId) \r\n        notZero(uint(_to)) \r\n    {\r\n        address owner = ownerOf(_tokenId);\r\n        // _from address must be current owner of the TOY Token\r\n        require (\r\n            _from == owner, \r\n            \"TOY Token not owned by '_from'\"\r\n        );\r\n        \r\n        // if TOY Token has a linked external NFT, call TransferFrom on the \r\n        //  external NFT contract\r\n        ExternalNft memory externalNft = uidToExternalNft[_tokenId];\r\n        if (externalNft.nftContractAddress != 0) {\r\n            // initialize external NFT contract\r\n            ERC721 externalContract = ERC721(externalNft.nftContractAddress);\r\n            // call TransferFrom\r\n            externalContract.transferFrom(_from, _to, externalNft.nftId);\r\n        }\r\n\r\n        // clear approval\r\n        idToApprovedAddress[_tokenId] = 0;\r\n        // transfer ownership\r\n        toyArray[uidToToyIndex[_tokenId]].owner = _to;\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n\r\n        // check and call onERC721Received. Throws and rolls back the transfer\r\n        //  if _to does not implement the expected interface\r\n        uint size;\r\n        assembly { size := extcodesize(_to) }\r\n        if (size > 0) {\r\n            bytes4 retval = TokenReceiverInterface(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n            require(\r\n                retval == 0x150b7a02,\r\n                \"Destination contract not equipped to receive TOY Tokens\"\r\n            );\r\n        }\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n    ///  THEY MAY BE PERMANENTLY LOST\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. If TOY Token is linked to an external\r\n    ///  NFT, this function calls TransferFrom from the external address.\r\n    ///  Throws if this contract is not an approved operator for the external\r\n    ///  NFT.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    //-------------------------------------------------------------------------\r\n    function transferFrom(address _from, address _to, uint256 _tokenId)\r\n        external \r\n        payable \r\n        mustExist(_tokenId) \r\n        canOperate(_tokenId) \r\n        notZero(uint(_to)) \r\n    {\r\n        address owner = ownerOf(_tokenId);\r\n        // _from address must be current owner of the TOY Token\r\n        require (\r\n            _from == owner && _from != 0, \r\n            \"TOY Token not owned by '_from'\"\r\n        );\r\n        \r\n        // if TOY Token has a linked external NFT, call TransferFrom on the \r\n        //  external NFT contract\r\n        ExternalNft memory externalNft = uidToExternalNft[_tokenId];\r\n        if (externalNft.nftContractAddress != 0) {\r\n            // initialize external NFT contract\r\n            ERC721 externalContract = ERC721(externalNft.nftContractAddress);\r\n            // call TransferFrom\r\n            externalContract.transferFrom(_from, _to, externalNft.nftId);\r\n        }\r\n\r\n        // clear approval\r\n        idToApprovedAddress[_tokenId] = 0;\r\n        // transfer ownership\r\n        toyArray[uidToToyIndex[_tokenId]].owner = _to;\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n///@title ERC-20 function declarations\r\n//-----------------------------------------------------------------------------\r\ninterface ERC20 {\r\n    function transfer (\r\n        address to, \r\n        uint tokens\r\n    ) external returns (bool success);\r\n\r\n    function transferFrom (\r\n        address from, \r\n        address to, \r\n        uint tokens\r\n    ) external returns (bool success);\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title External Token Handler\r\n/// @notice Defines depositing and withdrawal of Ether and ERC-20-compliant\r\n///  tokens into TOY Tokens.\r\n//-----------------------------------------------------------------------------\r\ncontract ExternalTokenHandler is ToyTransfers {\r\n    // handles the balances of TOY Tokens for every ERC20 token address\r\n    mapping (address => mapping(uint => uint)) externalTokenBalances;\r\n    \r\n    // UID value is 7 bytes. Max value is 2**56 - 1\r\n    uint constant UID_MAX = 0xFFFFFFFFFFFFFF;\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Deposit Ether from sender to approved TOY Token\r\n    /// @dev Throws if Ether to deposit is zero. Throws if sender is not\r\n    ///  approved to operate TOY Token #`toUid`. Throws if TOY Token #`toUid`\r\n    ///  is unlinked. Throws if sender has insufficient balance for deposit.\r\n    /// @param _toUid the TOY Token to deposit the Ether into\r\n    //-------------------------------------------------------------------------\r\n    function depositEther(uint _toUid) \r\n        external \r\n        payable \r\n        canOperate(_toUid)\r\n        notZero(msg.value)\r\n    {\r\n        // TOY Token must be linked\r\n        require (\r\n            _toUid < UID_MAX, \r\n            \"Invalid TOY Token. TOY Token not yet linked\"\r\n        );\r\n        // add amount to TOY Token's balance\r\n        externalTokenBalances[address(this)][_toUid] += msg.value;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Withdraw Ether from approved TOY Token to TOY Token's owner\r\n    /// @dev Throws if Ether to withdraw is zero. Throws if sender is not an\r\n    ///  approved operator for TOY Token #`_fromUid`. Throws if TOY Token \r\n    ///  #`_fromUid` has insufficient balance to withdraw.\r\n    /// @param _fromUid the TOY Token to withdraw the Ether from\r\n    /// @param _amount the amount of Ether to withdraw (in Wei)\r\n    //-------------------------------------------------------------------------\r\n    function withdrawEther(\r\n        uint _fromUid, \r\n        uint _amount\r\n    ) external canOperate(_fromUid) notZero(_amount) {\r\n        // TOY Token must have sufficient Ether balance\r\n        require (\r\n            externalTokenBalances[address(this)][_fromUid] >= _amount,\r\n            \"Insufficient Ether to withdraw\"\r\n        );\r\n        // subtract amount from TOY Token's balance\r\n        externalTokenBalances[address(this)][_fromUid] -= _amount;\r\n        // call transfer function\r\n        ownerOf(_fromUid).transfer(_amount);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Withdraw Ether from approved TOY Token and send to '_to'\r\n    /// @dev Throws if Ether to transfer is zero. Throws if sender is not an\r\n    ///  approved operator for TOY Token #`to_fromUidUid`. Throws if TOY Token\r\n    ///  #`_fromUid` has insufficient balance to withdraw.\r\n    /// @param _fromUid the TOY Token to withdraw and send the Ether from\r\n    /// @param _to the address to receive the transferred Ether\r\n    /// @param _amount the amount of Ether to withdraw (in Wei)\r\n    //-------------------------------------------------------------------------\r\n    function transferEther(\r\n        uint _fromUid,\r\n        address _to,\r\n        uint _amount\r\n    ) external canOperate(_fromUid) notZero(_amount) {\r\n        // TOY Token must have sufficient Ether balance\r\n        require (\r\n            externalTokenBalances[address(this)][_fromUid] >= _amount,\r\n            \"Insufficient Ether to transfer\"\r\n        );\r\n        // subtract amount from TOY Token's balance\r\n        externalTokenBalances[address(this)][_fromUid] -= _amount;\r\n        // call transfer function\r\n        _to.transfer(_amount);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Deposit ERC-20 tokens from sender to approved TOY Token\r\n    /// @dev This contract address must be an authorized spender for sender.\r\n    ///  Throws if tokens to deposit is zero. Throws if sender is not an\r\n    ///  approved operator for TOY Token #`toUid`. Throws if TOY Token #`toUid`\r\n    ///  is unlinked. Throws if this contract address has insufficient\r\n    ///  allowance for transfer. Throws if sender has insufficient balance for \r\n    ///  deposit. Throws if tokenAddress has no transferFrom function.\r\n    /// @param _tokenAddress the ERC-20 contract address\r\n    /// @param _toUid the TOY Token to deposit the ERC-20 tokens into\r\n    /// @param _tokens the number of tokens to deposit\r\n    //-------------------------------------------------------------------------\r\n    function depositERC20 (\r\n        address _tokenAddress, \r\n        uint _toUid, \r\n        uint _tokens\r\n    ) external canOperate(_toUid) notZero(_tokens) {\r\n        // TOY Token must be linked\r\n        require (_toUid < UID_MAX, \"Invalid TOY Token. TOY Token not yet linked\");\r\n        // initialize token contract\r\n        ERC20 tokenContract = ERC20(_tokenAddress);\r\n        // add amount to TOY Token's balance\r\n        externalTokenBalances[_tokenAddress][_toUid] += _tokens;\r\n\r\n        // call transferFrom function from token contract\r\n        tokenContract.transferFrom(msg.sender, address(this), _tokens);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Deposit ERC-20 tokens from '_to' to approved TOY Token\r\n    /// @dev This contract address must be an authorized spender for '_from'.\r\n    ///  Throws if tokens to deposit is zero. Throws if sender is not an\r\n    ///  approved operator for TOY Token #`toUid`. Throws if TOY Token #`toUid`\r\n    ///  is unlinked. Throws if this contract address has insufficient\r\n    ///  allowance for transfer. Throws if sender has insufficient balance for\r\n    ///  deposit. Throws if tokenAddress has no transferFrom function.\r\n    /// @param _tokenAddress the ERC-20 contract address\r\n    /// @param _from the address sending ERC-21 tokens to deposit\r\n    /// @param _toUid the TOY Token to deposit the ERC-20 tokens into\r\n    /// @param _tokens the number of tokens to deposit\r\n    //-------------------------------------------------------------------------\r\n    function depositERC20From (\r\n        address _tokenAddress,\r\n        address _from, \r\n        uint _toUid, \r\n        uint _tokens\r\n    ) external canOperate(_toUid) notZero(_tokens) {\r\n        // TOY Token must be linked\r\n        require (\r\n            _toUid < UID_MAX, \r\n            \"Invalid TOY Token. TOY Token not yet linked\"\r\n        );\r\n        // initialize token contract\r\n        ERC20 tokenContract = ERC20(_tokenAddress);\r\n        // add amount to TOY Token's balance\r\n        externalTokenBalances[_tokenAddress][_toUid] += _tokens;\r\n\r\n        // call transferFrom function from token contract\r\n        tokenContract.transferFrom(_from, address(this), _tokens);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Withdraw ERC-20 tokens from approved TOY Token to TOY Token's\r\n    ///  owner\r\n    /// @dev Throws if tokens to withdraw is zero. Throws if sender is not an\r\n    ///  approved operator for TOY Token #`_fromUid`. Throws if TOY Token \r\n    ///  #`_fromUid` has insufficient balance to withdraw. Throws if \r\n    ///  tokenAddress has no transfer function.\r\n    /// @param _tokenAddress the ERC-20 contract address\r\n    /// @param _fromUid the TOY Token to withdraw the ERC-20 tokens from\r\n    /// @param _tokens the number of tokens to withdraw\r\n    //-------------------------------------------------------------------------\r\n    function withdrawERC20 (\r\n        address _tokenAddress, \r\n        uint _fromUid, \r\n        uint _tokens\r\n    ) external canOperate(_fromUid) notZero(_tokens) {\r\n        // TOY Token must have sufficient token balance\r\n        require (\r\n            externalTokenBalances[_tokenAddress][_fromUid] >= _tokens,\r\n            \"insufficient tokens to withdraw\"\r\n        );\r\n        // initialize token contract\r\n        ERC20 tokenContract = ERC20(_tokenAddress);\r\n        // subtract amount from TOY Token's balance\r\n        externalTokenBalances[_tokenAddress][_fromUid] -= _tokens;\r\n        \r\n        // call transfer function from token contract\r\n        tokenContract.transfer(ownerOf(_fromUid), _tokens);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer ERC-20 tokens from your TOY Token to `_to`\r\n    /// @dev Throws if tokens to transfer is zero. Throws if sender is not an\r\n    ///  approved operator for TOY Token #`_fromUid`. Throws if TOY Token \r\n    ///  #`_fromUid` has insufficient balance to transfer. Throws if \r\n    ///  tokenAddress has no transfer function.\r\n    /// @param _tokenAddress the ERC-20 contract address\r\n    /// @param _fromUid the TOY Token to withdraw the ERC-20 tokens from\r\n    /// @param _to the wallet address to send the ERC-20 tokens\r\n    /// @param _tokens the number of tokens to withdraw\r\n    //-------------------------------------------------------------------------\r\n    function transferERC20 (\r\n        address _tokenAddress, \r\n        uint _fromUid, \r\n        address _to, \r\n        uint _tokens\r\n    ) external canOperate(_fromUid) notZero(_tokens) {\r\n        // TOY Token must have sufficient token balance\r\n        require (\r\n            externalTokenBalances[_tokenAddress][_fromUid] >= _tokens,\r\n            \"insufficient tokens to withdraw\"\r\n        );\r\n        // initialize token contract\r\n        ERC20 tokenContract = ERC20(_tokenAddress);\r\n        // subtract amount from TOY Token's balance\r\n        externalTokenBalances[_tokenAddress][_fromUid] -= _tokens;\r\n        \r\n        // call transfer function from token contract\r\n        tokenContract.transfer(_to, _tokens);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get external token balance for tokens deposited into TOY Token\r\n    ///  #`_uid`.\r\n    /// @dev To query Ether, use THIS CONTRACT'S address as '_tokenAddress'.\r\n    /// @param _uid Owner of the tokens to query\r\n    /// @param _tokenAddress Token creator contract address \r\n    //-------------------------------------------------------------------------\r\n    function getExternalTokenBalance(\r\n        uint _uid, \r\n        address _tokenAddress\r\n    ) external view returns (uint) {\r\n        return externalTokenBalances[_tokenAddress][_uid];\r\n    }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title Ownable\r\n/// @dev The Ownable contract has an owner address, and provides basic \r\n///  authorization control functions, this simplifies the implementation of\r\n///  \"user permissions\".\r\n//-----------------------------------------------------------------------------\r\ncontract Ownable {\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Emits when owner address changes by any mechanism.\r\n    //-------------------------------------------------------------------------\r\n    event OwnershipTransfer (address previousOwner, address newOwner);\r\n    \r\n    // Wallet address that can sucessfully execute onlyOwner functions\r\n    address owner;\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @dev Sets the owner of the contract to the sender account.\r\n    //-------------------------------------------------------------------------\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransfer(address(0), owner);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Throws if called by any account other than `owner`.\r\n    //-------------------------------------------------------------------------\r\n    modifier onlyOwner() {\r\n        require(\r\n            msg.sender == owner, \r\n            \"Function can only be called by contract owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Transfer control of the contract to a newOwner.\r\n    /// @dev Throws if `_newOwner` is zero address.\r\n    /// @param _newOwner The address to transfer ownership to.\r\n    //-------------------------------------------------------------------------\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        // for safety, new owner parameter must not be 0\r\n        require (\r\n            _newOwner != address(0),\r\n            \"New owner address cannot be zero\"\r\n        );\r\n        // define local variable for old owner\r\n        address oldOwner = owner;\r\n        // set owner to new owner\r\n        owner = _newOwner;\r\n        // emit ownership transfer event\r\n        emit OwnershipTransfer(oldOwner, _newOwner);\r\n    }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title TOY Token Interface Support\r\n/// @notice Defines supported interfaces for ERC-721 wallets to query\r\n//-----------------------------------------------------------------------------\r\ncontract ToyInterfaceSupport {\r\n    // mapping of all possible interfaces to whether they are supported\r\n    mapping (bytes4 => bool) interfaceIdToIsSupported;\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice ToyInterfaceSupport constructor. Sets to true interfaces\r\n    ///  supported at launch.\r\n    //-------------------------------------------------------------------------\r\n    constructor () public {\r\n        // supports ERC-165\r\n        interfaceIdToIsSupported[0x01ffc9a7] = true;\r\n        // supports ERC-721\r\n        interfaceIdToIsSupported[0x80ac58cd] = true;\r\n        // supports ERC-721 Enumeration\r\n        interfaceIdToIsSupported[0x780e9d63] = true;\r\n        // supports ERC-721 Metadata\r\n        interfaceIdToIsSupported[0x5b5e139f] = true;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    //-------------------------------------------------------------------------\r\n    function supportsInterface(\r\n        bytes4 interfaceID\r\n    ) external view returns (bool) {\r\n        if(interfaceID == 0xffffffff) {\r\n            return false;\r\n        } else {\r\n            return interfaceIdToIsSupported[interfaceID];\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title PLAY Token Interface\r\n//-----------------------------------------------------------------------------\r\ninterface PlayInterface {\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Get the number of PLAY tokens owned by `tokenOwner`.\r\n    /// @dev Throws if trying to query the zero address.\r\n    /// @param tokenOwner The PLAY token owner.\r\n    /// @return The number of PLAY tokens owned by `tokenOwner` (in pWei).\r\n    //-------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) external view returns (uint);\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Lock `(tokens/1000000000000000000).fixed(0,18)` PLAY from \r\n    ///  `from` for `numberOfYears` years.\r\n    /// @dev Throws if amount to lock is zero. Throws if numberOfYears is zero\r\n    ///  or greater than maximumLockYears. Throws if `msg.sender` has\r\n    ///  insufficient allowance to lock. Throws if `from` has insufficient\r\n    ///  balance to lock.\r\n    /// @param from The token owner whose PLAY is being locked. Sender must be\r\n    ///  an approved spender.\r\n    /// @param numberOfYears The number of years the tokens will be locked.\r\n    /// @param tokens The number of tokens to lock (in pWei).\r\n    //-------------------------------------------------------------------------\r\n    function lockFrom(address from, uint numberOfYears, uint tokens) \r\n        external\r\n        returns(bool); \r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title TOY Token Creation\r\n/// @notice Defines new TOY Token creation (minting) and TOY Token linking to\r\n///  RFID-enabled physical objects.\r\n//-----------------------------------------------------------------------------\r\ncontract ToyCreation is Ownable, ExternalTokenHandler, ToyInterfaceSupport {\r\n    //-------------------------------------------------------------------------\r\n    /// @dev Link emits when an empty TOY Token gets assigned to a valid RFID.\r\n    //-------------------------------------------------------------------------\r\n    event Link(uint _oldUid, uint _newUid);\r\n\r\n    // PLAY needed to mint one TOY Token (in pWei)\r\n    uint public priceToMint = 1000 * 10**18;\r\n    // Buffer added to the front of every TOY Token at time of creation. TOY\r\n    //  Tokens with a uid greater than the buffer are unlinked.\r\n    uint constant uidBuffer = 0x0100000000000000; // 14 zeroes\r\n    // PLAY Token Contract object to interface with.\r\n    PlayInterface play = PlayInterface(0xe2427cfEB5C330c007B8599784B97b65b4a3A819);\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Update PLAY Token contract variable with new contract address.\r\n    /// @dev Throws if `_newAddress` is the zero address.\r\n    /// @param _newAddress Updated contract address.\r\n    //-------------------------------------------------------------------------\r\n    function updatePlayTokenContract(address _newAddress) external onlyOwner {\r\n        play = PlayInterface(_newAddress);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Change the number of PLAY tokens needed to mint a new TOY Token\r\n    ///  (in pWei).\r\n    /// @dev Throws if `_newPrice` is zero.\r\n    /// @param _newPrice The new price to mint (in pWei)\r\n    //-------------------------------------------------------------------------\r\n    function changeToyPrice(uint _newPrice) external onlyOwner {\r\n        priceToMint = _newPrice;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Send and lock PLAY to mint a new empty TOY Token for yourself.\r\n    /// @dev Sender must have approved this contract address as an authorized\r\n    ///  spender with at least \"priceToMint\" PLAY. Throws if the sender has\r\n    ///  insufficient PLAY. Throws if sender has not granted this contract's\r\n    ///  address sufficient allowance.\r\n    //-------------------------------------------------------------------------\r\n    function mint() external {\r\n        play.lockFrom (msg.sender, 2, priceToMint);\r\n\r\n        uint uid = uidBuffer + toyArray.length;\r\n        uint index = toyArray.push(ToyToken(msg.sender, uid, 0, 0, \"\"));\r\n        uidToToyIndex[uid] = index - 1;\r\n\r\n        emit Transfer(0, msg.sender, uid);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Send and lock PLAY to mint a new empty TOY Token for 'to'.\r\n    /// @dev Sender must have approved this contract address as an authorized\r\n    ///  spender with at least \"priceToMint\" PLAY. Throws if the sender has\r\n    ///  insufficient PLAY. Throws if sender has not granted this contract's\r\n    ///  address sufficient allowance.\r\n    /// @param _to The address to deduct PLAY Tokens from and send new TOY Token to.\r\n    //-------------------------------------------------------------------------\r\n    function mintAndSend(address _to) external {\r\n        play.lockFrom (msg.sender, 2, priceToMint);\r\n\r\n        uint uid = uidBuffer + toyArray.length;\r\n        uint index = toyArray.push(ToyToken(_to, uid, 0, 0, \"\"));\r\n        uidToToyIndex[uid] = index - 1;\r\n\r\n        emit Transfer(0, _to, uid);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Send and lock PLAY to mint `_amount` new empty TOY Tokens for\r\n    ///  yourself.\r\n    /// @dev Sender must have approved this contract address as an authorized\r\n    ///  spender with at least \"priceToMint\" x `_amount` PLAY. Throws if the\r\n    ///  sender has insufficient PLAY. Throws if sender has not granted this\r\n    ///  contract's address sufficient allowance.\r\n    //-------------------------------------------------------------------------\r\n    function mintBulk(uint _amount) external {\r\n        play.lockFrom (msg.sender, 2, priceToMint * _amount);\r\n\r\n        for (uint i = 0; i < _amount; ++i) {\r\n            uint uid = uidBuffer + toyArray.length;\r\n            uint index = toyArray.push(ToyToken(msg.sender, uid, 0, 0, \"\"));\r\n            uidToToyIndex[uid] = index - 1;\r\n            emit Transfer(0, msg.sender, uid);\r\n        }\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Change TOY Token #`_toyId` to TOY Token #`_newUid`. Writes any\r\n    ///  data passed through '_data' into the TOY Token's public data.\r\n    /// @dev Throws if TOY Token #`_toyId` does not exist. Throws if sender is\r\n    ///  not approved to operate for TOY Token. Throws if '_toyId' is smaller\r\n    ///  than 8 bytes. Throws if '_newUid' is bigger than 7 bytes. Throws if \r\n    ///  '_newUid' is zero. Throws if '_newUid' is already taken.\r\n    /// @param _newUid The UID of the RFID chip to link to the TOY Token\r\n    /// @param _toyId The UID of the empty TOY Token to link\r\n    /// @param _data A byte string of data to attach to the TOY Token\r\n    //-------------------------------------------------------------------------\r\n    function link(\r\n        bytes7 _newUid, \r\n        uint _toyId, \r\n        bytes _data\r\n    ) external canOperate(_toyId) {\r\n        ToyToken storage toy = toyArray[uidToToyIndex[_toyId]];\r\n        // _toyId must be an empty TOY Token\r\n        require (_toyId > uidBuffer, \"TOY Token already linked\");\r\n        // _newUid field cannot be empty or greater than 7 bytes\r\n        require (_newUid > 0 && uint(_newUid) < UID_MAX, \"Invalid new UID\");\r\n        // a TOY Token with the new UID must not currently exist\r\n        require (\r\n            uidToToyIndex[uint(_newUid)] == 0, \r\n            \"TOY Token with 'newUID' already exists\"\r\n        );\r\n\r\n        // set new UID's mapping to index to old UID's mapping\r\n        uidToToyIndex[uint(_newUid)] = uidToToyIndex[_toyId];\r\n        // reset old UID's mapping to index\r\n        uidToToyIndex[_toyId] = 0;\r\n        // set TOY Token's UID to new UID\r\n        toy.uid = uint(_newUid);\r\n        // set any data\r\n        toy.toyData = _data;\r\n        // reset the timestamp\r\n        toy.timestamp = now;\r\n\r\n        emit Link(_toyId, uint(_newUid));\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Change TOY Token UIDs to new UIDs for multiple TOY Tokens.\r\n    ///  Writes any data passed through '_data' into all the TOY Tokens' data.\r\n    /// @dev Throws if any TOY Token's UID does not exist. Throws if sender is\r\n    ///  not approved to operate for any TOY Token. Throws if any '_toyId' is\r\n    ///  smaller than 8 bytes. Throws if any '_newUid' is bigger than 7 bytes. \r\n    ///  Throws if any '_newUid' is zero. Throws if '_newUid' is already taken.\r\n    ///  Throws if array parameters are not the same length.\r\n    /// @param _newUid The UID of the RFID chip to link to the TOY Token\r\n    /// @param _toyId The UID of the empty TOY Token to link\r\n    /// @param _data A byte string of data to attach to the TOY Token\r\n    //-------------------------------------------------------------------------\r\n    function linkBulk(\r\n        bytes7[] _newUid, \r\n        uint[] _toyId, \r\n        bytes _data\r\n    ) external {\r\n        require (_newUid.length == _toyId.length, \"Array lengths not equal\");\r\n        for (uint i = 0; i < _newUid.length; ++i) {\r\n            ToyToken storage toy = toyArray[uidToToyIndex[_toyId[i]]];\r\n            // sender must be authorized operator\r\n            require (\r\n                msg.sender == toy.owner ||\r\n                msg.sender == idToApprovedAddress[_toyId[i]] ||\r\n                operatorApprovals[toy.owner][msg.sender],\r\n                \"Not authorized to operate for this TOY Token\"\r\n            );\r\n            // _toyId must be an empty TOY Token\r\n            require (_toyId[i] > uidBuffer, \"TOY Token already linked\");\r\n            // _newUid field cannot be empty or greater than 7 bytes\r\n            require (_newUid[i] > 0 && uint(_newUid[i]) < UID_MAX, \"Invalid new UID\");\r\n            // a TOY Token with the new UID must not currently exist\r\n            require (\r\n                uidToToyIndex[uint(_newUid[i])] == 0, \r\n                \"TOY Token with 'newUID' already exists\"\r\n            );\r\n\r\n            // set new UID's mapping to index to old UID's mapping\r\n            uidToToyIndex[uint(_newUid[i])] = uidToToyIndex[_toyId[i]];\r\n            // reset old UID's mapping to index\r\n            uidToToyIndex[_toyId[i]] = 0;\r\n            // set TOY Token's UID to new UID\r\n            toy.uid = uint(_newUid[i]);\r\n            // set any data\r\n            toy.toyData = _data;\r\n            // reset the timestamp\r\n            toy.timestamp = now;\r\n\r\n            emit Link(_toyId[i], uint(_newUid[i]));\r\n        }\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Set external NFT #`_externalId` as TOY Token #`_toyUid`'s\r\n    ///  linked external NFT.\r\n    /// @dev Throws if sender is not authorized to operate TOY Token #`_toyUid`\r\n    ///  Throws if '_toyUid' is bigger than 7 bytes. Throws if external NFT is\r\n    ///  already linked. Throws if sender is not authorized to operate external\r\n    ///  NFT.\r\n    /// @param _toyUid The UID of the TOY Token to link\r\n    /// @param _externalAddress The contract address of the external NFT\r\n    /// @param _externalId The UID of the external NFT to link\r\n    //-------------------------------------------------------------------------\r\n    function linkExternalNft(\r\n        uint _toyUid, \r\n        address _externalAddress, \r\n        uint _externalId\r\n    ) external canOperate(_toyUid) {\r\n        require(_toyUid < UID_MAX, \"TOY Token not linked to a physical toy\");\r\n        require(\r\n            linkedExternalNfts[_externalAddress][_externalId] == false,\r\n            \"External NFT already linked\"\r\n        );\r\n        require(\r\n            msg.sender == ERC721(_externalAddress).ownerOf(_externalId),\r\n            \"Sender does not own external NFT\"\r\n        );\r\n        uidToExternalNft[_toyUid] = ExternalNft(_externalAddress, _externalId);\r\n        linkedExternalNfts[_externalAddress][_externalId] = true;\r\n    }\r\n}\r\n\r\n\r\n//-----------------------------------------------------------------------------\r\n/// @title TOY Token Interface\r\n/// @notice Interface for highest-level TOY Token getters\r\n//-----------------------------------------------------------------------------\r\ncontract ToyInterface is ToyCreation {\r\n    // URL Containing TOY Token metadata\r\n    string metadataUrl = \"http://52.9.230.48:8090/toy_token/\";\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Change old metadata URL to `_newUrl`\r\n    /// @dev Throws if new URL is empty\r\n    /// @param _newUrl The new URL containing TOY Token metadata\r\n    //-------------------------------------------------------------------------\r\n    function updateMetadataUrl(string _newUrl)\r\n        external \r\n        onlyOwner \r\n        notZero(bytes(_newUrl).length)\r\n    {\r\n        metadataUrl = _newUrl;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Gets all public info for TOY Token #`_uid`.\r\n    /// @dev Throws if TOY Token #`_uid` does not exist.\r\n    /// @param _uid the UID of the TOY Token to view.\r\n    /// @return TOY Token owner, TOY Token UID, Creation Timestamp, Experience,\r\n    ///  and Public Data.\r\n    //-------------------------------------------------------------------------\r\n    function changeToyData(uint _uid, bytes _data) \r\n        external \r\n        mustExist(_uid)\r\n        canOperate(_uid)\r\n        returns (address, uint, uint, uint, bytes) \r\n    {\r\n        require(_uid < UID_MAX, \"TOY Token must be linked\");\r\n        toyArray[uidToToyIndex[_uid]].toyData = _data;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Gets all public info for TOY Token #`_uid`.\r\n    /// @dev Throws if TOY Token #`_uid` does not exist.\r\n    /// @param _uid the UID of the TOY Token to view.\r\n    /// @return TOY Token owner, TOY Token UID, Creation Timestamp, Experience,\r\n    ///  and Public Data.\r\n    //-------------------------------------------------------------------------\r\n    function getToy(uint _uid) \r\n        external\r\n        view \r\n        mustExist(_uid) \r\n        returns (address, uint, uint, uint, bytes) \r\n    {\r\n        ToyToken memory toy = toyArray[uidToToyIndex[_uid]];\r\n        return(toy.owner, toy.uid, toy.timestamp, toy.exp, toy.toyData);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Gets all info for TOY Token #`_uid`'s linked NFT.\r\n    /// @dev Throws if TOY Token #`_uid` does not exist.\r\n    /// @param _uid the UID of the TOY Token to view.\r\n    /// @return NFT contract address, External NFT ID.\r\n    //-------------------------------------------------------------------------\r\n    function getLinkedNft(uint _uid) \r\n        external\r\n        view \r\n        mustExist(_uid) \r\n        returns (address, uint) \r\n    {\r\n        ExternalNft memory nft = uidToExternalNft[_uid];\r\n        return (nft.nftContractAddress, nft.nftId);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice Gets whether NFT #`_externalId` is linked to a TOY Token.\r\n    /// @param _externalAddress the contract address for the external NFT\r\n    /// @param _externalId the UID of the external NFT to view.\r\n    /// @return NFT contract address, External NFT ID.\r\n    //-------------------------------------------------------------------------\r\n    function externalNftIsLinked(address _externalAddress, uint _externalId)\r\n        external\r\n        view\r\n        returns(bool)\r\n    {\r\n        return linkedExternalNfts[_externalAddress][_externalId];\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice A descriptive name for a collection of NFTs in this contract\r\n    //-------------------------------------------------------------------------\r\n    function name() external pure returns (string) {\r\n        return \"TOY Tokens\";\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice An abbreviated name for NFTs in this contract\r\n    //-------------------------------------------------------------------------\r\n    function symbol() external pure returns (string) { return \"TOY\"; }\r\n\r\n    //-------------------------------------------------------------------------\r\n    /// @notice A distinct URL for a given asset.\r\n    /// @dev Throws if `_tokenId` is not a valid NFT.\r\n    ///  If:\r\n    ///  * The URI is a URL\r\n    ///  * The URL is accessible\r\n    ///  * The URL points to a valid JSON file format (ECMA-404 2nd ed.)\r\n    ///  * The JSON base element is an object\r\n    ///  then these names of the base element SHALL have special meaning:\r\n    ///  * \"name\": A string identifying the item to which `_tokenId` grants\r\n    ///    ownership\r\n    ///  * \"description\": A string detailing the item to which `_tokenId`\r\n    ///    grants ownership\r\n    ///  * \"image\": A URI pointing to a file of image/* mime type representing\r\n    ///    the item to which `_tokenId` grants ownership\r\n    ///  Wallets and exchanges MAY display this to the end user.\r\n    ///  Consider making any images at a width between 320 and 1080 pixels and\r\n    ///  aspect ratio between 1.91:1 and 4:5 inclusive.\r\n    /// @param _tokenId The TOY Token whose metadata address is being queried\r\n    //-------------------------------------------------------------------------\r\n    function tokenURI(uint _tokenId) \r\n        external \r\n        view \r\n        returns (string) \r\n    {\r\n        // convert TOY Token UID to a 14 character long string of character bytes\r\n        bytes memory uidString = intToBytes(_tokenId);\r\n        // declare new string of bytes with combined length of url and uid \r\n        bytes memory fullUrlBytes = new bytes(bytes(metadataUrl).length + uidString.length);\r\n        // copy URL string and uid string into new string\r\n        uint counter = 0;\r\n        for (uint i = 0; i < bytes(metadataUrl).length; i++) {\r\n            fullUrlBytes[counter++] = bytes(metadataUrl)[i];\r\n        }\r\n        for (i = 0; i < uidString.length; i++) {\r\n            fullUrlBytes[counter++] = uidString[i];\r\n        }\r\n        // return full URL\r\n        return string(fullUrlBytes);\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Convert int to 14 character bytes\r\n    //-------------------------------------------------------------------------\r\n    function intToBytes(uint _tokenId) \r\n        private \r\n        pure \r\n        returns (bytes) \r\n    {\r\n        // convert int to bytes32\r\n        bytes32 x = bytes32(_tokenId);\r\n        \r\n        // convert each byte into two, and assign each byte a hex digit\r\n        bytes memory uidBytes64 = new bytes(64);\r\n        for (uint i = 0; i < 32; i++) {\r\n            byte b = byte(x[i]);\r\n            byte hi = byte(uint8(b) / 16);\r\n            byte lo = byte(uint8(b) - 16 * uint8(hi));\r\n            uidBytes64[i*2] = char(hi);\r\n            uidBytes64[i*2+1] = char(lo);\r\n        }\r\n        \r\n        // reduce size to last 14 chars (7 bytes)\r\n        bytes memory uidBytes = new bytes(14);\r\n        for (i = 0; i < 14; ++i) {\r\n            uidBytes[i] = uidBytes64[i + 50];\r\n        }\r\n        return uidBytes;\r\n    }\r\n    \r\n    //-------------------------------------------------------------------------\r\n    /// @notice Convert byte to UTF-8-encoded hex character\r\n    //-------------------------------------------------------------------------\r\n    function char(byte b) private pure returns (byte c) {\r\n        if (b < 10) return byte(uint8(b) + 0x30);\r\n        else return byte(uint8(b) + 0x57);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toyUid\",\"type\":\"uint256\"},{\"name\":\"_externalAddress\",\"type\":\"address\"},{\"name\":\"_externalId\",\"type\":\"uint256\"}],\"name\":\"linkExternalNft\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_toUid\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromUid\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toUid\",\"type\":\"uint256\"}],\"name\":\"depositEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_fromUid\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"getLinkedNft\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceToMint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_fromUid\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUid\",\"type\":\"bytes7[]\"},{\"name\":\"_toyId\",\"type\":\"uint256[]\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"linkBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUrl\",\"type\":\"string\"}],\"name\":\"updateMetadataUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUid\",\"type\":\"bytes7\"},{\"name\":\"_toyId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"link\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_externalAddress\",\"type\":\"address\"},{\"name\":\"_externalId\",\"type\":\"uint256\"}],\"name\":\"externalNftIsLinked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromUid\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_toUid\",\"type\":\"uint256\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"depositERC20From\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"}],\"name\":\"getToy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mintAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changeToyPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"changeToyData\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updatePlayTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uid\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getExternalTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldUid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newUid\",\"type\":\"uint256\"}],\"name\":\"Link\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"}]","ContractName":"ToyInterface","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b1c01861b6eea9a723f655cc17da47094d387acad8d179f85ca89e74724ad3cd"}]}