{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param _token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic _token) external onlyOwner {\r\n    uint256 balance = _token.balanceOf(this);\r\n    _token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract MenloSaleBase is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // Whitelisted investors\r\n  mapping (address => bool) public whitelist;\r\n\r\n  // Special role used exclusively for managing the whitelist\r\n  address public whitelister;\r\n\r\n  // manual early close flag\r\n  bool public isFinalized;\r\n\r\n  // cap for crowdsale in wei\r\n  uint256 public cap;\r\n\r\n  // The token being sold\r\n  MenloToken public token;\r\n\r\n  // start and end timestamps where contributions are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the whitelister.\r\n   */\r\n  modifier onlyWhitelister() {\r\n    require(msg.sender == whitelister, \"Sender should be whitelister\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who bought the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n\r\n  /**\r\n   * event for token redemption logging\r\n   * @param purchaser who bought the tokens\r\n   * @param amount amount of tokens redeemed\r\n   */\r\n  event TokenRedeem(address indexed purchaser, uint256 amount);\r\n\r\n  // termination early or otherwise\r\n  event Finalized();\r\n\r\n  event TokensRefund(uint256 amount);\r\n\r\n  /**\r\n   * event refund of excess ETH if purchase is above the cap\r\n   * @param amount amount of ETH (in wei) refunded\r\n   */\r\n  event Refund(address indexed purchaser, uint256 amount);\r\n\r\n  constructor(\r\n      MenloToken _token,\r\n      uint256 _startTime,\r\n      uint256 _endTime,\r\n      uint256 _cap,\r\n      address _wallet\r\n  ) public {\r\n    require(_startTime >= getBlockTimestamp(), \"Start time should be in the future\");\r\n    require(_endTime >= _startTime, \"End time should be after start time\");\r\n    require(_wallet != address(0), \"Wallet address should be non-zero\");\r\n    require(_token != address(0), \"Token address should be non-zero\");\r\n    require(_cap > 0, \"Cap should be greater than zero\");\r\n\r\n    token = _token;\r\n\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    cap = _cap;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () public payable {\r\n    buyTokens();\r\n  }\r\n\r\n  // Abstract methods\r\n  function calculateBonusRate() public view returns (uint256);\r\n  function buyTokensHook(uint256 _tokens) internal;\r\n\r\n  function buyTokens() public payable returns (uint256) {\r\n    require(whitelist[msg.sender], \"Expected msg.sender to be whitelisted\");\r\n    checkFinalize();\r\n    require(!isFinalized, \"Should not be finalized when purchasing\");\r\n    require(getBlockTimestamp() >= startTime && getBlockTimestamp() <= endTime, \"Should be during sale\");\r\n    require(msg.value != 0, \"Value should not be zero\");\r\n    require(token.balanceOf(this) > 0, \"This contract must have tokens\");\r\n\r\n    uint256 _weiAmount = msg.value;\r\n\r\n    uint256 _remainingToFund = cap.sub(weiRaised);\r\n    if (_weiAmount > _remainingToFund) {\r\n      _weiAmount = _remainingToFund;\r\n    }\r\n\r\n    uint256 _totalTokens = _weiAmount.mul(calculateBonusRate());\r\n    if (_totalTokens > token.balanceOf(this)) {\r\n      // Change _wei to buy rest of remaining tokens\r\n      _weiAmount = token.balanceOf(this).div(calculateBonusRate());\r\n    }\r\n\r\n    token.unpause();\r\n    weiRaised = weiRaised.add(_weiAmount);\r\n\r\n    forwardFunds(_weiAmount);\r\n    uint256 _weiToReturn = msg.value.sub(_weiAmount);\r\n    if (_weiToReturn > 0) {\r\n      msg.sender.transfer(_weiToReturn);\r\n      emit Refund(msg.sender, _weiToReturn);\r\n    }\r\n\r\n    uint256 _tokens = ethToTokens(_weiAmount);\r\n    emit TokenPurchase(msg.sender, _weiAmount, _tokens);\r\n    buyTokensHook(_tokens);\r\n    token.pause();\r\n\r\n    checkFinalize();\r\n\r\n    return _tokens;\r\n  }\r\n\r\n  // Allows the owner to take back the tokens that are assigned to the sale contract.\r\n  function refund() external onlyOwner returns (bool) {\r\n    require(hasEnded(), \"Sale should have ended when refunding\");\r\n    uint256 _tokens = token.balanceOf(address(this));\r\n\r\n    if (_tokens == 0) {\r\n      return false;\r\n    }\r\n\r\n    require(token.transfer(owner, _tokens), \"Expected token transfer to succeed\");\r\n\r\n    emit TokensRefund(_tokens);\r\n\r\n    return true;\r\n  }\r\n\r\n  /// @notice interface for founders to whitelist investors\r\n  /// @param _addresses array of investors\r\n  /// @param _status enable or disable\r\n  function whitelistAddresses(address[] _addresses, bool _status) public onlyWhitelister {\r\n    for (uint256 i = 0; i < _addresses.length; i++) {\r\n      address _investorAddress = _addresses[i];\r\n      if (whitelist[_investorAddress] != _status) {\r\n        whitelist[_investorAddress] = _status;\r\n      }\r\n    }\r\n  }\r\n\r\n  function setWhitelister(address _whitelister) public onlyOwner {\r\n    whitelister = _whitelister;\r\n  }\r\n\r\n  function checkFinalize() public {\r\n    if (hasEnded()) {\r\n      finalize();\r\n    }\r\n  }\r\n\r\n  function emergencyFinalize() public onlyOwner {\r\n    finalize();\r\n  }\r\n\r\n  function withdraw() public onlyOwner {\r\n    owner.transfer(address(this).balance);\r\n  }\r\n\r\n  function hasEnded() public constant returns (bool) {\r\n    if (isFinalized) {\r\n      return true;\r\n    }\r\n    bool _capReached = weiRaised >= cap;\r\n    bool _passedEndTime = getBlockTimestamp() > endTime;\r\n    return _passedEndTime || _capReached;\r\n  }\r\n\r\n  // @dev does not require that crowdsale `hasEnded()` to leave safegaurd\r\n  // in place if ETH rises in price too much during crowdsale.\r\n  // Allows team to close early if cap is exceeded in USD in this event.\r\n  function finalize() internal {\r\n    require(!isFinalized, \"Should not be finalized when finalizing\");\r\n    emit Finalized();\r\n    isFinalized = true;\r\n    token.transferOwnership(owner);\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds(uint256 _amount) internal {\r\n    wallet.transfer(_amount);\r\n  }\r\n\r\n  function ethToTokens(uint256 _ethAmount) internal view returns (uint256) {\r\n    return _ethAmount.mul(calculateBonusRate());\r\n  }\r\n\r\n  function getBlockTimestamp() internal view returns (uint256) {\r\n    return block.timestamp;\r\n  }\r\n}\r\n\r\ncontract MenloToken is PausableToken, BurnableToken, CanReclaimToken {\r\n\r\n  // Token properties\r\n  string public constant name = 'Menlo One';\r\n  string public constant symbol = 'ONE';\r\n\r\n  uint8 public constant decimals = 18;\r\n  uint256 private constant token_factor = 10**uint256(decimals);\r\n\r\n  // 1 billion ONE tokens in units divisible up to 18 decimals\r\n  uint256 public constant INITIAL_SUPPLY    = 1000000000 * token_factor;\r\n\r\n  uint256 public constant PUBLICSALE_SUPPLY = 354000000 * token_factor;\r\n  uint256 public constant GROWTH_SUPPLY     = 246000000 * token_factor;\r\n  uint256 public constant TEAM_SUPPLY       = 200000000 * token_factor;\r\n  uint256 public constant ADVISOR_SUPPLY    = 100000000 * token_factor;\r\n  uint256 public constant PARTNER_SUPPLY    = 100000000 * token_factor;\r\n\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of Menlo Tokens\r\n   */\r\n  bytes4 internal constant ONE_RECEIVED = 0x150b7a03;\r\n\r\n  address public crowdsale;\r\n  address public teamTimelock;\r\n  address public advisorTimelock;\r\n\r\n  modifier notInitialized(address saleAddress) {\r\n    require(address(saleAddress) == address(0), \"Expected address to be null\");\r\n    _;\r\n  }\r\n\r\n  constructor(address _growth, address _teamTimelock, address _advisorTimelock, address _partner) public {\r\n    assert(INITIAL_SUPPLY > 0);\r\n    assert((PUBLICSALE_SUPPLY + GROWTH_SUPPLY + TEAM_SUPPLY + ADVISOR_SUPPLY + PARTNER_SUPPLY) == INITIAL_SUPPLY);\r\n\r\n    uint256 _poolTotal = GROWTH_SUPPLY + TEAM_SUPPLY + ADVISOR_SUPPLY + PARTNER_SUPPLY;\r\n    uint256 _availableForSales = INITIAL_SUPPLY - _poolTotal;\r\n\r\n    assert(_availableForSales == PUBLICSALE_SUPPLY);\r\n\r\n    teamTimelock = _teamTimelock;\r\n    advisorTimelock = _advisorTimelock;\r\n\r\n    mint(msg.sender, _availableForSales);\r\n    mint(_growth, GROWTH_SUPPLY);\r\n    mint(_teamTimelock, TEAM_SUPPLY);\r\n    mint(_advisorTimelock, ADVISOR_SUPPLY);\r\n    mint(_partner, PARTNER_SUPPLY);\r\n\r\n    assert(totalSupply_ == INITIAL_SUPPLY);\r\n    pause();\r\n  }\r\n\r\n  function initializeCrowdsale(address _crowdsale) public onlyOwner notInitialized(crowdsale) {\r\n    unpause();\r\n    transfer(_crowdsale, balances[msg.sender]);  // Transfer left over balance after private presale allocations\r\n    crowdsale = _crowdsale;\r\n    pause();\r\n    transferOwnership(_crowdsale);\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) internal {\r\n    balances[_to] = _amount;\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value `bytes4(0x150b7a03)`;\r\n   * otherwise, the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _to address to receive the tokens.  Must be a MenloTokenReceiver based contract\r\n   * @param _value uint256 number of tokens to transfer\r\n   * @param _action uint256 action to perform in target _to contract\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   **/\r\n  function transferAndCall(address _to, uint256 _value, uint256 _action, bytes _data) public returns (bool) {\r\n    if (transfer(_to, _value)) {\r\n      require (MenloTokenReceiver(_to).onTokenReceived(msg.sender, _value, _action, _data) == ONE_RECEIVED, \"Target contract onTokenReceived failed\");\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\ncontract MenloTokenReceiver {\r\n\r\n    /*\r\n     * @dev Address of the MenloToken contract\r\n     */\r\n    MenloToken token;\r\n\r\n    constructor(MenloToken _tokenContract) public {\r\n        token = _tokenContract;\r\n    }\r\n\r\n    /**\r\n     * @dev Magic value to be returned upon successful reception of Menlo Tokens\r\n     */\r\n    bytes4 internal constant ONE_RECEIVED = 0x150b7a03;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the Menlo Token contract.\r\n     */\r\n    modifier onlyTokenContract() {\r\n        require(msg.sender == address(token));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Handle the receipt of Menlo Tokens\r\n     * @dev The MenloToken contract calls this function on the recipient\r\n     * after a `transferAndCall`. This function MAY throw to revert and reject the\r\n     * transfer. Return of other than the magic value MUST result in the\r\n     * transaction being reverted.\r\n     * Warning: this function must call the onlyTokenContract modifier to trust\r\n     * the transfer took place\r\n     * @param _from The address which previously owned the token\r\n     * @param _value Number of tokens that were transfered\r\n     * @param _action Used to define enumeration of possible functions to call\r\n     * @param _data Additional data with no specified format\r\n     * @return `bytes4(0x150b7a03)`\r\n     */\r\n    function onTokenReceived(\r\n        address _from,\r\n        uint256 _value,\r\n        uint256 _action,\r\n        bytes _data\r\n    ) public /* onlyTokenContract */ returns(bytes4);\r\n}\r\n\r\ncontract MenloTokenSale is MenloSaleBase {\r\n\r\n  // Timestamps for the bonus periods, set in the constructor\r\n  uint256 public HOUR1;\r\n  uint256 public WEEK1;\r\n  uint256 public WEEK2;\r\n  uint256 public WEEK3;\r\n  uint256 public WEEK4;\r\n\r\n  constructor(\r\n    MenloToken _token,\r\n    uint256 _startTime,\r\n    uint256 _endTime,\r\n    uint256 _cap,\r\n    address _wallet\r\n  ) MenloSaleBase(\r\n    _token,\r\n    _startTime,\r\n    _endTime,\r\n    _cap,\r\n    _wallet\r\n  ) public {\r\n    HOUR1 = startTime + 1 hours;\r\n    WEEK1 = startTime + 1 weeks;\r\n    WEEK2 = startTime + 2 weeks;\r\n    WEEK3 = startTime + 3 weeks;\r\n  }\r\n\r\n  // Hour 1: 30% Bonus\r\n  // Week 1: 15% Bonus\r\n  // Week 2: 10% Bonus\r\n  // Week 3: 5% Bonus\r\n  // Week 4: 0% Bonus\r\n  function calculateBonusRate() public view returns (uint256) {\r\n    uint256 _bonusRate = 12000;\r\n\r\n    uint256 _currentTime = getBlockTimestamp();\r\n    if (_currentTime > startTime && _currentTime <= HOUR1) {\r\n      _bonusRate =  15600;\r\n    } else if (_currentTime <= WEEK1) {\r\n      _bonusRate =  13800; // week 1\r\n    } else if (_currentTime <= WEEK2) {\r\n      _bonusRate =  13200; // week 2\r\n    } else if (_currentTime <= WEEK3) {\r\n      _bonusRate =  12600; // week 3\r\n    }\r\n    return _bonusRate;\r\n  }\r\n\r\n  function buyTokensHook(uint256 _tokens) internal {\r\n    token.transfer(msg.sender, _tokens);\r\n    emit TokenRedeem(msg.sender, _tokens);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"WEEK3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelister\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HOUR1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateBonusRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEEK1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"whitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEEK2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyFinalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WEEK4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkFinalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelister\",\"type\":\"address\"}],\"name\":\"setWhitelister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MenloTokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004d807509aece24c0fa5a102b6a3b059ec6e14392000000000000000000000000000000000000000000000000000000005b9f6d10000000000000000000000000000000000000000000000000000000005bed43a000000000000000000000000000000000000000000000032d26d12e980b60000000000000000000000000000051d4b631f799d6b11c8f4a5ecb6968d764f1bde7","Library":"","SwarmSource":"bzzr://6227e3dd53f44d457ce57232ba52d472334fd2a58e36680bc74401c4c15591b0"}]}