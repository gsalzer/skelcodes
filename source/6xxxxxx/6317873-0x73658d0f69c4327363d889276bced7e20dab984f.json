{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract Blocksquare {\r\n    function transfer(address _to, uint256 _amount) public returns (bool _success);\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool _success);\r\n}\r\n\r\ncontract Data {\r\n    function isBS(address _member) public constant returns (bool);\r\n    function getCP(address _cp) constant public returns (string, string);\r\n    function canMakeNoFeeTransfer(address _from, address _to) constant public returns (bool);\r\n}\r\n\r\ncontract Whitelist {\r\n    function isWhitelisted(address _user) public constant returns (bool);\r\n}\r\n\r\ncontract PropTokenRENT is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    Blocksquare BST;\r\n    Data data;\r\n    Whitelist whitelist;\r\n    mapping(address => mapping(address => uint256)) rentAmountPerToken;\r\n\r\n    constructor() public {\r\n        BST = Blocksquare(0x509A38b7a1cC0dcd83Aa9d06214663D9eC7c7F4a);\r\n        data = Data(0x146d589cfe136644bdF4f1958452B5a4Bb9c5A05);\r\n        whitelist = Whitelist(0xCB641F6B46e1f2970dB003C19515018D0338550a);\r\n    }\r\n\r\n    function compare(string _a, string _b) internal pure returns (int) {\r\n        bytes memory a = bytes(_a);\r\n        bytes memory b = bytes(_b);\r\n        uint minLength = a.length;\r\n        if (b.length < minLength) minLength = b.length;\r\n        for (uint i = 0; i < minLength; i ++)\r\n            if (a[i] < b[i])\r\n                return -1;\r\n            else if (a[i] > b[i])\r\n                return 1;\r\n        if (a.length < b.length)\r\n            return -1;\r\n        else if (a.length > b.length)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    function equal(string _a, string _b) pure internal returns (bool) {\r\n        return compare(_a, _b) == 0;\r\n    }\r\n\r\n    modifier canAddRent() {\r\n        (string memory ref, string memory name) = data.getCP(msg.sender);\r\n        require(data.isBS(msg.sender) || (!equal(ref, \"\") && !equal(name, \"\")));\r\n        _;\r\n    }\r\n\r\n    function addRentToAddressForToken(address _token, address[] _addresses, uint256[] _amount) public canAddRent {\r\n        require(_addresses.length == _amount.length);\r\n        uint256 amountToPay = 0;\r\n        for(uint256 i = 0; i < _addresses.length; i++) {\r\n            rentAmountPerToken[_token][_addresses[i]] = rentAmountPerToken[_token][_addresses[i]].add(_amount[i]);\r\n            amountToPay = amountToPay.add(_amount[i]);\r\n        }\r\n        BST.transferFrom(msg.sender, address(this), amountToPay);\r\n    }\r\n\r\n    function claimRentForToken(address _token, address _holdingWallet) public {\r\n        require(whitelist.isWhitelisted(msg.sender) && whitelist.isWhitelisted(_holdingWallet));\r\n        uint256 rent = rentAmountPerToken[_token][msg.sender];\r\n        rentAmountPerToken[_token][msg.sender] = 0;\r\n        // Check if sending wallet and another wallet belong to same user\r\n        if(msg.sender != _holdingWallet) {\r\n            require(data.canMakeNoFeeTransfer(msg.sender, _holdingWallet));\r\n            rent = rent.add(rentAmountPerToken[_token][_holdingWallet]);\r\n            rentAmountPerToken[_token][_holdingWallet] = 0;\r\n        }\r\n\r\n        BST.transfer(msg.sender, rent);\r\n    }\r\n\r\n    function claimBulkRentForTokens(address[] _token, address _holdingWallet) public {\r\n        require(whitelist.isWhitelisted(msg.sender) && whitelist.isWhitelisted(_holdingWallet));\r\n        require(_token.length < 11);\r\n        if(msg.sender != _holdingWallet) {\r\n            require(data.canMakeNoFeeTransfer(msg.sender, _holdingWallet));\r\n        }\r\n        uint256 rent = 0;\r\n        for(uint256 i = 0; i < _token.length; i++) {\r\n            rent = rent.add(rentAmountPerToken[_token[i]][msg.sender]);\r\n            rentAmountPerToken[_token[i]][msg.sender] = 0;\r\n\r\n            rent = rent.add(rentAmountPerToken[_token[i]][_holdingWallet]);\r\n            rentAmountPerToken[_token[i]][_holdingWallet] = 0;\r\n        }\r\n\r\n        BST.transfer(msg.sender, rent);\r\n    }\r\n\r\n    function pendingBSTForToken(address _token, address _user) public constant returns(uint256) {\r\n        return rentAmountPerToken[_token][_user];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBSTForToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_holdingWallet\",\"type\":\"address\"}],\"name\":\"claimRentForToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address[]\"},{\"name\":\"_holdingWallet\",\"type\":\"address\"}],\"name\":\"claimBulkRentForTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"addRentToAddressForToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PropTokenRENT","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6d33d6a368061b5401d4ccf78a8db53029eb61e52cfa1ba5e7294d796d501c94"}]}