{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) { \r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); //Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n//interface\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n// contract\r\ncontract RicoDaily {\r\n    using SafeMath for uint256;\r\n    //Token credentials\r\n    string public name = \"Daley\";\r\n    string public symbol = \"RECO\";\r\n    uint8 public decimals = 0; //This code assumes decimals is zero.  DO NOT CHANGE!\r\n    uint256 public totalSupply = 200000000 * (uint256(10) ** decimals);\r\n    uint256 ethDividendPerToken;\r\n    uint256 public latestEthDividendPerToken = 0;\r\n    uint256 public weiDistributed = 0;\r\n    uint256 public remainder = 0;\r\n    //Addresses\r\n    address public beneficiary = 0x1eCD8a6Bf1fdB629b3e47957178760962C91b7ca;\r\n    //Mapping\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) dividendBalanceOf;\r\n    mapping(address => uint256) dividendCreditedTo;\r\n    mapping(address => mapping (address => uint256)) public allowance;\r\n    //Events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    constructor() public {\r\n        balanceOf[beneficiary] = totalSupply; //Initially assign all tokens to Reptar_IT.\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n    //Internal update, only can be called by this contract \r\n    function _revise(address account) internal {\r\n        uint256 owed = ethDividendPerToken.sub(dividendCreditedTo[account]);\r\n        dividendBalanceOf[account] = dividendBalanceOf[account].add(balanceOf[account].mul(owed));\r\n        dividendCreditedTo[account] = ethDividendPerToken;\r\n    }\r\n    //Internal transfer, only can be called by this contract \r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(_to != 0x0);\r\n        require(_to != address(0));\r\n        require(_value <= balanceOf[_from]);\r\n        require(balanceOf[_to].add(_value) >= balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    //Transfer tokens\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= balanceOf[msg.sender]);\r\n        _revise(msg.sender);  \r\n        _revise(_to);\r\n        _transfer(msg.sender, _to, _value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    //Transfer tokens from other address\r\n    function transferFrom(address _from, address _to, uint256 _value) public payable returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        _revise(_from); \r\n        _revise(_to);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    //token recieves ether coin\r\n    function() public payable {\r\n        uint256 recievedvalue = msg.value.add(remainder); //add previous remainder to incoming ether.\r\n        ethDividendPerToken = ethDividendPerToken.add(recievedvalue.div(totalSupply));  // ignoring remainder\r\n        remainder = recievedvalue.mod(totalSupply); // compute the new remainder\r\n        weiDistributed = weiDistributed.add(recievedvalue); //tracks sum of ether distributed\r\n        latestEthDividendPerToken = latestEthDividendPerToken.sub(latestEthDividendPerToken); // reset to zero\r\n        latestEthDividendPerToken = ethDividendPerToken.add(recievedvalue.div(totalSupply));\r\n    }\r\n    //token holders can withdraw eth dividend if they have any\r\n    function withdraw() public {\r\n        _revise(msg.sender);\r\n        uint256 amount = dividendBalanceOf[msg.sender];\r\n        dividendBalanceOf[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n    //Set allowance for other address & Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    //Set allowance for other address and notify\r\n    //Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n    //Then ping the contract about it\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestEthDividendPerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"RicoDaily","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d8be2fbf8da61a061e274a5516eb67293d99197293ca0ab852233ec9e536e992"}]}