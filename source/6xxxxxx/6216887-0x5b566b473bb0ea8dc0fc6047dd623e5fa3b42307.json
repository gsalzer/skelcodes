{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface IDividendToken{                     \r\n    function profitOrgPay() payable external ; \r\n}\r\n\r\ninterface IGame { \r\n    function setBanker(address _banker, uint256 _beginTime, uint256 _endTime) external returns(bool _result); \r\n    function canSetBanker() view external  returns (bool);  \r\n    function bankerEndTime() constant  external returns (uint);  \r\n}\r\n\r\n\r\ncontract Base { \r\n    using SafeMath for uint256; \r\n    uint public createTime = now;\r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;                                 \r\n    }\r\n\r\n    function setOwner(address _newOwner)  public  onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n        \r\n    bool public globalLocked = false;      \r\n\r\n    function lock() internal {            \r\n        require(!globalLocked);\r\n        globalLocked = true;\r\n    }\r\n\r\n    function unLock() internal {\r\n        require(globalLocked);\r\n        globalLocked = false;\r\n    }    \r\n  \r\n    function setLock()  public onlyOwner {      \r\n        globalLocked = false;     \r\n    }\r\n\r\n    mapping (address => uint256) public userEtherOf;    \r\n    \r\n    function userRefund() public  returns(bool _result) {            \r\n        return _userRefund(msg.sender);\r\n    }\r\n\r\n    function _userRefund(address _to) internal returns(bool _result) {    \r\n        require (_to != 0x0);  \r\n        lock();\r\n        uint256 amount = userEtherOf[msg.sender];   \r\n        if(amount > 0) {\r\n            userEtherOf[msg.sender] = 0;\r\n            _to.transfer(amount); \r\n            _result = true;\r\n        }\r\n        else {\r\n            _result = false;\r\n        }\r\n        unLock();\r\n    }\r\n\r\n    uint public currentEventId = 1;                             \r\n\r\n    function getEventId() internal returns(uint _result) {    \r\n        _result = currentEventId;\r\n        currentEventId ++;\r\n    }\r\n\r\n}\r\n\r\ncontract Beneficial is Base {            \r\n\r\n    //function Beneficial() public {\r\n    //}\r\n\r\n    address public shareholder;                \r\n    bool public shareholderIsToken = false;     \r\n    string public officialUrl;                 \r\n\t\r\n    function setOfficialUrl(string _newOfficialUrl) public onlyOwner{\r\n        officialUrl = _newOfficialUrl;\r\n    }       \r\n\r\n/*     \r\n    function setShareholder(address _newShareholder, bool _isToken) public onlyOwner {\r\n        require(_newShareholder != 0x0);\r\n        shareholderIsToken = _isToken;\r\n        shareholder = _newShareholder;\r\n    }\r\n*/\r\n\r\n    function _userRefund(address _to) internal  returns(bool _result){ \r\n        require (_to != 0x0);  \r\n        lock();\r\n        uint256 amount = userEtherOf[msg.sender];   \r\n        if(amount > 0){\r\n            userEtherOf[msg.sender] = 0;\r\n            if(shareholderIsToken && msg.sender == shareholder){       \r\n                IDividendToken token = IDividendToken(shareholder);\r\n                token.profitOrgPay.value(amount)();\r\n            }\r\n            else{\r\n                _to.transfer(amount); \r\n            }\r\n            _result = true;\r\n        }\r\n        else{\r\n            _result = false;\r\n        }\r\n        unLock();\r\n    }\r\n}\r\n\r\ncontract Auction is Beneficial {\r\n    //function Auction(address _gameToken)  Beneficial() public {\r\n    function Auction(address _gameToken) public {\r\n        owner = msg.sender;\r\n\t\tshareholder = _gameToken;\r\n\t\tshareholderIsToken = true;\r\n    }\r\n   \r\n    int public gameIndex = 1;                      \r\n    mapping(int => address) public indexGameOf;    \r\n\r\n    function _addIndexGame(address _gameAddr) private {\r\n            indexGameOf[gameIndex] = _gameAddr;\r\n            gameIndex ++;\r\n    }\r\n   \r\n    mapping(address => bool) public whiteListOf;    \r\n\r\n    event OnWhiteListChange(address indexed _Addr, address _operator, bool _result,  uint _eventTime, uint _eventId);\r\n\r\n    function addWhiteList(address _Addr) public onlyOwner {\r\n        require (_Addr != 0x0);  \r\n        whiteListOf[_Addr] = true;\r\n        _addIndexGame(_Addr);\r\n        emit OnWhiteListChange(_Addr, msg.sender, true, now, getEventId());\r\n    }  \r\n\r\n    function delWhiteList(address _Addr) public onlyOwner {\r\n        require (_Addr != 0x0);  \r\n        whiteListOf[_Addr] = false;    \r\n        emit OnWhiteListChange(_Addr, msg.sender, false, now, getEventId()) ;\r\n    }\r\n    \r\n    function isWhiteListGame(address _Addr) private view returns(bool _result) { \r\n        _result = whiteListOf[_Addr];\r\n    }\r\n\r\n    uint auctionId = 1;             \r\n\r\n    struct AuctionObj {\r\n        uint id;                  \r\n        address objAddr;          \r\n        uint256 beginTime;        \r\n        uint256 endTime;          \r\n        uint256 price;            \r\n        address winnerAddr;       \r\n        uint bankerTime;         \r\n        bool emptyGameBanker;   \r\n    } \r\n\r\n    mapping (address => AuctionObj) public auctionObjOf;   \r\n\r\n    event OnSetAuctionObj(uint indexed _auctionId, address indexed  _objAddr, uint256 _beginTime, uint256 _endTime, uint _bankerTime, bool _result, uint _code, uint _eventTime, uint _eventId);\r\n\r\n    function setAuctionObj(address _gameAddr, uint256 _auctionEndTime, uint _bankerTime)             \r\n        public onlyOwner  returns (bool _result) \r\n    {\r\n        _result = _setAuctionObj(_gameAddr, _auctionEndTime, _bankerTime);    \r\n    }\r\n\r\n    function addWhiteListAddSetAuctionObj(address _gameAddr, uint256 _auctionEndTime, uint _bankerTime) \r\n        public onlyOwner returns (bool _result)\r\n    {    \r\n         addWhiteList(_gameAddr);\r\n        _result = _setAuctionObj(_gameAddr, _auctionEndTime, _bankerTime);    \r\n    }\r\n\r\n    //uint constant minBankTime = 1 days;                \r\n\r\n    function _setAuctionObj(address _gameAddr, uint256 _auctionEndTime, uint _bankerTime)  private  returns (bool _result) {   \r\n        _result = false;\r\n        require(_gameAddr != 0x0);\r\n        require(now < _auctionEndTime);\r\n        //require(minBankTime <= _bankerTime);\r\n        //require(_bankerTime < 10 years);\r\n        if(!isWhiteListGame(_gameAddr)) {               \r\n            emit OnSetAuctionObj(auctionId, _gameAddr, now,  _auctionEndTime, _bankerTime, false, 1, now, getEventId()) ;\r\n            return;\r\n        }     \r\n      \r\n        AuctionObj storage ao = auctionObjOf[_gameAddr];\r\n        if(ao.endTime <= now && !ao.emptyGameBanker) {   \r\n            AuctionObj memory  newAO = AuctionObj({\r\n                id: auctionId,\r\n                objAddr: _gameAddr,\r\n                beginTime: now,\r\n                endTime : _auctionEndTime,\r\n                winnerAddr: owner,\r\n                price: 0,\r\n                bankerTime: _bankerTime,\r\n                emptyGameBanker: true                  \r\n            });\r\n            emit OnSetAuctionObj(auctionId, _gameAddr, now,  _auctionEndTime, _bankerTime, true, 0, now, getEventId()) ;\r\n            auctionObjOf[_gameAddr] = newAO;      \r\n            auctionId ++;\r\n            _result = true;\r\n            return;\r\n        }else{\r\n            emit OnSetAuctionObj(auctionId, _gameAddr, now,  _auctionEndTime, _bankerTime, false, 2, now, getEventId()) ;\r\n        }\r\n    }\r\n\r\n    event OnBid(uint indexed _auctionId, address _sender, address  _objAddr, uint256 _price, bool  _result, uint  _code, uint _eventTime, uint _eventId);\r\n\r\n    function bid(address _objAddr, uint256 _price) public payable returns(bool _result) {    \r\n        _result = false;\r\n        require(_objAddr != 0x0);\r\n\t\tAuctionObj storage ao = auctionObjOf[_objAddr];\r\n        if(msg.value > 0){\r\n            userEtherOf[msg.sender] = userEtherOf[msg.sender].add(msg.value);\r\n        }\r\n        if(10**16 > _price){                 \r\n            emit OnBid(ao.id, msg.sender, _objAddr,  _price, false, 3, now, getEventId());\r\n            return;\r\n        }\r\n        if(userEtherOf[msg.sender] < _price){                 \r\n            emit OnBid(ao.id, msg.sender, _objAddr,  _price, false, 1, now, getEventId());\r\n            return;\r\n        }\r\n        if(now < ao.endTime) {                 \r\n            if(_price > ao.price) {            \r\n                userEtherOf[msg.sender] = userEtherOf[msg.sender].sub(_price);          \r\n                userEtherOf[ao.winnerAddr] = userEtherOf[ao.winnerAddr].add(ao.price);    \r\n                ao.price = _price;\r\n                ao.winnerAddr = msg.sender;\r\n                emit OnBid(ao.id, msg.sender, _objAddr,  _price, true, 0, now, getEventId());\r\n                _result = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        emit OnBid(ao.id, msg.sender, _objAddr,  _price, false, 2, now, getEventId());\r\n        return;\r\n    }\r\n\r\n    event OnSetGameBanker(uint indexed _auctionId, address indexed _gameAddr, bool indexed _result,  uint _code, uint _eventTime, uint _eventId);\r\n\r\n    function setGameBanker(address _gameAddr) public returns (bool _result) {      \r\n        _result = false;\r\n        require(_gameAddr != 0x0);\r\n        //require(isWhiteListGame(_gameAddr));      \r\n        lock();\r\n        AuctionObj storage ao = auctionObjOf[_gameAddr];\r\n        if(ao.id > 0 && ao.endTime <= now) {                                         \r\n            IGame g = IGame(_gameAddr);\r\n            if(g.bankerEndTime() < now && g.canSetBanker()){                      \r\n                _result = g.setBanker(ao.winnerAddr,  now,  now.add(ao.bankerTime));     \r\n                if(_result){\r\n\t\t\t\t\temit OnSetGameBanker(ao.id, _gameAddr, _result, 0, now, getEventId());\r\n                    ao.emptyGameBanker = false;                                            \r\n                    userEtherOf[shareholder] =  userEtherOf[shareholder].add(ao.price);    \r\n                    _setAuctionObj(_gameAddr,  (now.add(ao.bankerTime)).sub(1 hours) , ao.bankerTime); \r\n                }else{\r\n\t\t\t\t  emit OnSetGameBanker(ao.id, _gameAddr, false, 1, now, getEventId());     \r\n\t\t\t\t}\r\n            }else{\r\n                emit OnSetGameBanker(ao.id, _gameAddr, false, 2, now, getEventId());     \r\n            }\r\n        }else{\r\n            emit OnSetGameBanker(ao.id, _gameAddr, false, 3, now, getEventId());\r\n        }\r\n        unLock();\r\n    }\r\n    \r\n    function () public payable {\r\n        if(msg.value > 0) {          \r\n            userEtherOf[msg.sender] = userEtherOf[msg.sender].add(msg.value);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentEventId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareholder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"officialUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddr\",\"type\":\"address\"}],\"name\":\"setGameBanker\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOfficialUrl\",\"type\":\"string\"}],\"name\":\"setOfficialUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareholderIsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEtherOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_objAddr\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Addr\",\"type\":\"address\"}],\"name\":\"delWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userRefund\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"name\":\"indexGameOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddr\",\"type\":\"address\"},{\"name\":\"_auctionEndTime\",\"type\":\"uint256\"},{\"name\":\"_bankerTime\",\"type\":\"uint256\"}],\"name\":\"setAuctionObj\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameAddr\",\"type\":\"address\"},{\"name\":\"_auctionEndTime\",\"type\":\"uint256\"},{\"name\":\"_bankerTime\",\"type\":\"uint256\"}],\"name\":\"addWhiteListAddSetAuctionObj\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"auctionObjOf\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"objAddr\",\"type\":\"address\"},{\"name\":\"beginTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"winnerAddr\",\"type\":\"address\"},{\"name\":\"bankerTime\",\"type\":\"uint256\"},{\"name\":\"emptyGameBanker\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Addr\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_gameToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_Addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnWhiteListChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_objAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_beginTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bankerTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_code\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnSetAuctionObj\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_objAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_code\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_gameAddr\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_result\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_code\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnSetGameBanker\",\"type\":\"event\"}]","ContractName":"Auction","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000af7c176eb40ae42e26dce5ad7aa125ecbd735cc1","Library":"","SwarmSource":"bzzr://217d1a585cb659493223d67a76b1edaadaf707df5658a0909bcd4cbfb25fc9a2"}]}