{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    require(c / a == b, \"Overflow - Multiplication\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"Underflow - Subtraction\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    require(c >= a, \"Overflow - Addition\");\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary Contract {\r\n\r\n  using SafeMath for uint;\r\n\r\n  // Modifiers: //\r\n\r\n  // Runs two functions before and after a function -\r\n  modifier conditions(function () pure first, function () pure last) {\r\n    first();\r\n    _;\r\n    last();\r\n  }\r\n\r\n  bytes32 internal constant EXEC_PERMISSIONS = keccak256('script_exec_permissions');\r\n\r\n  // Sets up contract execution - reads execution id and sender from storage and\r\n  // places in memory, creating getters. Calling this function should be the first\r\n  // action an application does as part of execution, as it sets up memory for\r\n  // execution. Additionally, application functions in the main file should be\r\n  // external, so that memory is not touched prior to calling this function.\r\n  // The 3rd slot allocated will hold a pointer to a storage buffer, which will\r\n  // be reverted to abstract storage to store data, emit events, and forward\r\n  // wei on behalf of the application.\r\n  function authorize(address _script_exec) internal view {\r\n    // Initialize memory\r\n    initialize();\r\n\r\n    // Check that the sender is authorized as a script exec contract for this exec id\r\n    bytes32 perms = EXEC_PERMISSIONS;\r\n    bool authorized;\r\n    assembly {\r\n      // Place the script exec address at 0, and the exec permissions seed after it\r\n      mstore(0, _script_exec)\r\n      mstore(0x20, perms)\r\n      // Hash the resulting 0x34 bytes, and place back into memory at 0\r\n      mstore(0, keccak256(0x0c, 0x34))\r\n      // Place the exec id after the hash -\r\n      mstore(0x20, mload(0x80))\r\n      // Hash the previous hash with the execution id, and check the result\r\n      authorized := sload(keccak256(0, 0x40))\r\n    }\r\n    if (!authorized)\r\n      revert(\"Sender is not authorized as a script exec address\");\r\n  }\r\n\r\n  // Sets up contract execution when initializing an instance of the application\r\n  // First, reads execution id and sender from storage (execution id should be 0xDEAD),\r\n  // then places them in memory, creating getters. Calling this function should be the first\r\n  // action an application does as part of execution, as it sets up memory for\r\n  // execution. Additionally, application functions in the main file should be\r\n  // external, so that memory is not touched prior to calling this function.\r\n  // The 3rd slot allocated will hold a pointer to a storage buffer, which will\r\n  // be reverted to abstract storage to store data, emit events, and forward\r\n  // wei on behalf of the application.\r\n  function initialize() internal view {\r\n    // No memory should have been allocated yet - expect the free memory pointer\r\n    // to point to 0x80 - and throw if it does not\r\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\r\n    // Next, set up memory for execution\r\n    assembly {\r\n      mstore(0x80, sload(0))     // Execution id, read from storage\r\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\r\n      mstore(0xc0, 0)            // Pointer to storage buffer\r\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\r\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\r\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\r\n      mstore(0x140, 0)           // Number of events pushed to buffer\r\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\r\n\r\n      // Update free memory pointer -\r\n      mstore(0x40, 0x180)\r\n    }\r\n    // Ensure that the sender and execution id returned from storage are expected values -\r\n    assert(execID() != bytes32(0) && sender() != address(0));\r\n  }\r\n\r\n  // Calls the passed-in function, performing a memory state check before and after the check\r\n  // is executed.\r\n  function checks(function () view _check) conditions(validState, validState) internal view {\r\n    _check();\r\n  }\r\n\r\n  // Calls the passed-in function, performing a memory state check before and after the check\r\n  // is executed.\r\n  function checks(function () pure _check) conditions(validState, validState) internal pure {\r\n    _check();\r\n  }\r\n\r\n  // Ensures execution completed successfully, and reverts the created storage buffer\r\n  // back to the sender.\r\n  function commit() conditions(validState, none) internal pure {\r\n    // Check value of storage buffer pointer - should be at least 0x180\r\n    bytes32 ptr = buffPtr();\r\n    require(ptr >= 0x180, \"Invalid buffer pointer\");\r\n\r\n    assembly {\r\n      // Get the size of the buffer\r\n      let size := mload(add(0x20, ptr))\r\n      mstore(ptr, 0x20) // Place dynamic data offset before buffer\r\n      // Revert to storage\r\n      revert(ptr, add(0x40, size))\r\n    }\r\n  }\r\n\r\n  // Helpers: //\r\n\r\n  // Checks to ensure the application was correctly executed -\r\n  function validState() private pure {\r\n    if (freeMem() < 0x180)\r\n      revert('Expected Contract.execute()');\r\n\r\n    if (buffPtr() != 0 && buffPtr() < 0x180)\r\n      revert('Invalid buffer pointer');\r\n\r\n    assert(execID() != bytes32(0) && sender() != address(0));\r\n  }\r\n\r\n  // Returns a pointer to the execution storage buffer -\r\n  function buffPtr() private pure returns (bytes32 ptr) {\r\n    assembly { ptr := mload(0xc0) }\r\n  }\r\n\r\n  // Returns the location pointed to by the free memory pointer -\r\n  function freeMem() private pure returns (bytes32 ptr) {\r\n    assembly { ptr := mload(0x40) }\r\n  }\r\n\r\n  // Returns the current storage action\r\n  function currentAction() private pure returns (bytes4 action) {\r\n    if (buffPtr() == bytes32(0))\r\n      return bytes4(0);\r\n\r\n    assembly { action := mload(0xe0) }\r\n  }\r\n\r\n  // If the current action is not storing, reverts\r\n  function isStoring() private pure {\r\n    if (currentAction() != STORES)\r\n      revert('Invalid current action - expected STORES');\r\n  }\r\n\r\n  // If the current action is not emitting, reverts\r\n  function isEmitting() private pure {\r\n    if (currentAction() != EMITS)\r\n      revert('Invalid current action - expected EMITS');\r\n  }\r\n\r\n  // If the current action is not paying, reverts\r\n  function isPaying() private pure {\r\n    if (currentAction() != PAYS)\r\n      revert('Invalid current action - expected PAYS');\r\n  }\r\n\r\n  // Initializes a storage buffer in memory -\r\n  function startBuffer() private pure {\r\n    assembly {\r\n      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\r\n      let ptr := msize()\r\n      mstore(0xc0, ptr)\r\n      // Clear bytes at pointer -\r\n      mstore(ptr, 0)            // temp ptr\r\n      mstore(add(0x20, ptr), 0) // buffer length\r\n      // Update free memory pointer -\r\n      mstore(0x40, add(0x40, ptr))\r\n      // Set expected next function to 'NONE' -\r\n      mstore(0x100, 1)\r\n    }\r\n  }\r\n\r\n  // Checks whether or not it is valid to create a STORES action request -\r\n  function validStoreBuff() private pure {\r\n    // Get pointer to current buffer - if zero, create a new buffer -\r\n    if (buffPtr() == bytes32(0))\r\n      startBuffer();\r\n\r\n    // Ensure that the current action is not 'storing', and that the buffer has not already\r\n    // completed a STORES action -\r\n    if (stored() != 0 || currentAction() == STORES)\r\n      revert('Duplicate request - stores');\r\n  }\r\n\r\n  // Checks whether or not it is valid to create an EMITS action request -\r\n  function validEmitBuff() private pure {\r\n    // Get pointer to current buffer - if zero, create a new buffer -\r\n    if (buffPtr() == bytes32(0))\r\n      startBuffer();\r\n\r\n    // Ensure that the current action is not 'emitting', and that the buffer has not already\r\n    // completed an EMITS action -\r\n    if (emitted() != 0 || currentAction() == EMITS)\r\n      revert('Duplicate request - emits');\r\n  }\r\n\r\n  // Checks whether or not it is valid to create a PAYS action request -\r\n  function validPayBuff() private pure {\r\n    // Get pointer to current buffer - if zero, create a new buffer -\r\n    if (buffPtr() == bytes32(0))\r\n      startBuffer();\r\n\r\n    // Ensure that the current action is not 'paying', and that the buffer has not already\r\n    // completed an PAYS action -\r\n    if (paid() != 0 || currentAction() == PAYS)\r\n      revert('Duplicate request - pays');\r\n  }\r\n\r\n  // Placeholder function when no pre or post condition for a function is needed\r\n  function none() private pure { }\r\n\r\n  // Runtime getters: //\r\n\r\n  // Returns the execution id from memory -\r\n  function execID() internal pure returns (bytes32 exec_id) {\r\n    assembly { exec_id := mload(0x80) }\r\n    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\r\n  }\r\n\r\n  // Returns the original sender from memory -\r\n  function sender() internal pure returns (address addr) {\r\n    assembly { addr := mload(0xa0) }\r\n    require(addr != address(0), \"Sender address overwritten, or not read\");\r\n  }\r\n\r\n  // Reading from storage: //\r\n\r\n  // Reads from storage, resolving the passed-in location to its true location in storage\r\n  // by hashing with the exec id. Returns the data read from that location\r\n  function read(bytes32 _location) internal view returns (bytes32 data) {\r\n    data = keccak256(_location, execID());\r\n    assembly { data := sload(data) }\r\n  }\r\n\r\n  // Storing data, emitting events, and forwarding payments: //\r\n\r\n  bytes4 internal constant EMITS = bytes4(keccak256('Emit((bytes32[],bytes)[])'));\r\n  bytes4 internal constant STORES = bytes4(keccak256('Store(bytes32[])'));\r\n  bytes4 internal constant PAYS = bytes4(keccak256('Pay(bytes32[])'));\r\n  bytes4 internal constant THROWS = bytes4(keccak256('Error(string)'));\r\n\r\n  // Function enums -\r\n  enum NextFunction {\r\n    INVALID, NONE, STORE_DEST, VAL_SET, VAL_INC, VAL_DEC, EMIT_LOG, PAY_DEST, PAY_AMT\r\n  }\r\n\r\n  // Checks that a call pushing a storage destination to the buffer is expected and valid\r\n  function validStoreDest() private pure {\r\n    // Ensure that the next function expected pushes a storage destination -\r\n    if (expected() != NextFunction.STORE_DEST)\r\n      revert('Unexpected function order - expected storage destination to be pushed');\r\n\r\n    // Ensure that the current buffer is pushing STORES actions -\r\n    isStoring();\r\n  }\r\n\r\n  // Checks that a call pushing a storage value to the buffer is expected and valid\r\n  function validStoreVal() private pure {\r\n    // Ensure that the next function expected pushes a storage value -\r\n    if (\r\n      expected() != NextFunction.VAL_SET &&\r\n      expected() != NextFunction.VAL_INC &&\r\n      expected() != NextFunction.VAL_DEC\r\n    ) revert('Unexpected function order - expected storage value to be pushed');\r\n\r\n    // Ensure that the current buffer is pushing STORES actions -\r\n    isStoring();\r\n  }\r\n\r\n  // Checks that a call pushing a payment destination to the buffer is expected and valid\r\n  function validPayDest() private pure {\r\n    // Ensure that the next function expected pushes a payment destination -\r\n    if (expected() != NextFunction.PAY_DEST)\r\n      revert('Unexpected function order - expected payment destination to be pushed');\r\n\r\n    // Ensure that the current buffer is pushing PAYS actions -\r\n    isPaying();\r\n  }\r\n\r\n  // Checks that a call pushing a payment amount to the buffer is expected and valid\r\n  function validPayAmt() private pure {\r\n    // Ensure that the next function expected pushes a payment amount -\r\n    if (expected() != NextFunction.PAY_AMT)\r\n      revert('Unexpected function order - expected payment amount to be pushed');\r\n\r\n    // Ensure that the current buffer is pushing PAYS actions -\r\n    isPaying();\r\n  }\r\n\r\n  // Checks that a call pushing an event to the buffer is expected and valid\r\n  function validEvent() private pure {\r\n    // Ensure that the next function expected pushes an event -\r\n    if (expected() != NextFunction.EMIT_LOG)\r\n      revert('Unexpected function order - expected event to be pushed');\r\n\r\n    // Ensure that the current buffer is pushing EMITS actions -\r\n    isEmitting();\r\n  }\r\n\r\n  // Begins creating a storage buffer - values and locations pushed will be committed\r\n  // to storage at the end of execution\r\n  function storing() conditions(validStoreBuff, isStoring) internal pure {\r\n    bytes4 action_req = STORES;\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\r\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the STORES action\r\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\r\n      // Increment buffer length - 0x24 plus the previous length\r\n      mstore(ptr, add(0x24, mload(ptr)))\r\n      // Set the current action being executed (STORES) -\r\n      mstore(0xe0, action_req)\r\n      // Set the expected next function - STORE_DEST\r\n      mstore(0x100, 2)\r\n      // Set a pointer to the length of the current request within the buffer\r\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  // Sets a passed in location to a value passed in via 'to'\r\n  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push storage destination to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - VAL_SET\r\n      mstore(0x100, 3)\r\n      // Increment STORES action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of storage slots pushed to -\r\n      mstore(0x120, add(1, mload(0x120)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n    return _field;\r\n  }\r\n\r\n  // Sets a previously-passed-in destination in storage to the value\r\n  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push storage value to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _val)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - STORE_DEST\r\n      mstore(0x100, 2)\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  // Sets a previously-passed-in destination in storage to the value\r\n  function to(bytes32 _field, uint _val) internal pure {\r\n    to(_field, bytes32(_val));\r\n  }\r\n\r\n  // Sets a previously-passed-in destination in storage to the value\r\n  function to(bytes32 _field, address _val) internal pure {\r\n    to(_field, bytes32(_val));\r\n  }\r\n\r\n  // Sets a previously-passed-in destination in storage to the value\r\n  function to(bytes32 _field, bool _val) internal pure {\r\n    to(\r\n      _field,\r\n      _val ? bytes32(1) : bytes32(0)\r\n    );\r\n  }\r\n\r\n  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\r\n    // Read value stored at the location in storage -\r\n    val = keccak256(_field, execID());\r\n    assembly {\r\n      val := sload(val)\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push storage destination to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - VAL_INC\r\n      mstore(0x100, 4)\r\n      // Increment STORES action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of storage slots pushed to -\r\n      mstore(0x120, add(1, mload(0x120)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n    return val;\r\n  }\r\n\r\n  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\r\n    // Read value stored at the location in storage -\r\n    val = keccak256(_field, execID());\r\n    assembly {\r\n      val := sload(val)\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push storage destination to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - VAL_DEC\r\n      mstore(0x100, 5)\r\n      // Increment STORES action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of storage slots pushed to -\r\n      mstore(0x120, add(1, mload(0x120)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n    return val;\r\n  }\r\n\r\n  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\r\n    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\r\n    // If it is VAL_DEC, perform safe-sub on the value\r\n    if (expected() == NextFunction.VAL_INC)\r\n      _amt = _amt.add(uint(_val));\r\n    else if (expected() == NextFunction.VAL_DEC)\r\n      _amt = uint(_val).sub(_amt);\r\n    else\r\n      revert('Expected VAL_INC or VAL_DEC');\r\n\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push storage value to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - STORE_DEST\r\n      mstore(0x100, 2)\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  // Decreases the value at some field by a maximum amount, and sets it to 0 if there will be underflow\r\n  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\r\n    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\r\n    // _val and _amt, to a minimum of 0\r\n    if (expected() == NextFunction.VAL_DEC) {\r\n      if (_amt >= uint(_val))\r\n        _amt = 0;\r\n      else\r\n        _amt = uint(_val).sub(_amt);\r\n    } else {\r\n      revert('Expected VAL_DEC');\r\n    }\r\n\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push storage value to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - STORE_DEST\r\n      mstore(0x100, 2)\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  // Begins creating an event log buffer - topics and data pushed will be emitted by\r\n  // storage at the end of execution\r\n  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\r\n    bytes4 action_req = EMITS;\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\r\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the EMITS action\r\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\r\n      // Increment buffer length - 0x24 plus the previous length\r\n      mstore(ptr, add(0x24, mload(ptr)))\r\n      // Set the current action being executed (EMITS) -\r\n      mstore(0xe0, action_req)\r\n      // Set the expected next function - EMIT_LOG\r\n      mstore(0x100, 6)\r\n      // Set a pointer to the length of the current request within the buffer\r\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push 0 to the end of the buffer - event will have 0 topics\r\n      mstore(add(0x20, add(ptr, mload(ptr))), 0)\r\n      // If _data is zero, set data size to 0 in buffer and push -\r\n      if eq(_data, 0) {\r\n        mstore(add(0x40, add(ptr, mload(ptr))), 0)\r\n        // Increment buffer length - 0x40 plus the original length\r\n        mstore(ptr, add(0x40, mload(ptr)))\r\n      }\r\n      // If _data is not zero, set size to 0x20 and push to buffer -\r\n      if iszero(eq(_data, 0)) {\r\n        // Push data size (0x20) to the end of the buffer\r\n        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\r\n        // Push data to the end of the buffer\r\n        mstore(add(0x60, add(ptr, mload(ptr))), _data)\r\n        // Increment buffer length - 0x60 plus the original length\r\n        mstore(ptr, add(0x60, mload(ptr)))\r\n      }\r\n      // Increment EMITS action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of events pushed to buffer -\r\n      mstore(0x140, add(1, mload(0x140)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push 1 to the end of the buffer - event will have 1 topic\r\n      mstore(add(0x20, add(ptr, mload(ptr))), 1)\r\n      // Push topic to end of buffer\r\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\r\n      // If _data is zero, set data size to 0 in buffer and push -\r\n      if eq(_data, 0) {\r\n        mstore(add(0x60, add(ptr, mload(ptr))), 0)\r\n        // Increment buffer length - 0x60 plus the original length\r\n        mstore(ptr, add(0x60, mload(ptr)))\r\n      }\r\n      // If _data is not zero, set size to 0x20 and push to buffer -\r\n      if iszero(eq(_data, 0)) {\r\n        // Push data size (0x20) to the end of the buffer\r\n        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\r\n        // Push data to the end of the buffer\r\n        mstore(add(0x80, add(ptr, mload(ptr))), _data)\r\n        // Increment buffer length - 0x80 plus the original length\r\n        mstore(ptr, add(0x80, mload(ptr)))\r\n      }\r\n      // Increment EMITS action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of events pushed to buffer -\r\n      mstore(0x140, add(1, mload(0x140)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push 2 to the end of the buffer - event will have 2 topics\r\n      mstore(add(0x20, add(ptr, mload(ptr))), 2)\r\n      // Push topics to end of buffer\r\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\r\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\r\n      // If _data is zero, set data size to 0 in buffer and push -\r\n      if eq(_data, 0) {\r\n        mstore(add(0x80, add(ptr, mload(ptr))), 0)\r\n        // Increment buffer length - 0x80 plus the original length\r\n        mstore(ptr, add(0x80, mload(ptr)))\r\n      }\r\n      // If _data is not zero, set size to 0x20 and push to buffer -\r\n      if iszero(eq(_data, 0)) {\r\n        // Push data size (0x20) to the end of the buffer\r\n        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\r\n        // Push data to the end of the buffer\r\n        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\r\n        // Increment buffer length - 0xa0 plus the original length\r\n        mstore(ptr, add(0xa0, mload(ptr)))\r\n      }\r\n      // Increment EMITS action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of events pushed to buffer -\r\n      mstore(0x140, add(1, mload(0x140)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push 3 to the end of the buffer - event will have 3 topics\r\n      mstore(add(0x20, add(ptr, mload(ptr))), 3)\r\n      // Push topics to end of buffer\r\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\r\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\r\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\r\n      // If _data is zero, set data size to 0 in buffer and push -\r\n      if eq(_data, 0) {\r\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\r\n        // Increment buffer length - 0xa0 plus the original length\r\n        mstore(ptr, add(0xa0, mload(ptr)))\r\n      }\r\n      // If _data is not zero, set size to 0x20 and push to buffer -\r\n      if iszero(eq(_data, 0)) {\r\n        // Push data size (0x20) to the end of the buffer\r\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\r\n        // Push data to the end of the buffer\r\n        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\r\n        // Increment buffer length - 0xc0 plus the original length\r\n        mstore(ptr, add(0xc0, mload(ptr)))\r\n      }\r\n      // Increment EMITS action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of events pushed to buffer -\r\n      mstore(0x140, add(1, mload(0x140)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push 4 to the end of the buffer - event will have 4 topics\r\n      mstore(add(0x20, add(ptr, mload(ptr))), 4)\r\n      // Push topics to end of buffer\r\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\r\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\r\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\r\n      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\r\n      // If _data is zero, set data size to 0 in buffer and push -\r\n      if eq(_data, 0) {\r\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\r\n        // Increment buffer length - 0xc0 plus the original length\r\n        mstore(ptr, add(0xc0, mload(ptr)))\r\n      }\r\n      // If _data is not zero, set size to 0x20 and push to buffer -\r\n      if iszero(eq(_data, 0)) {\r\n        // Push data size (0x20) to the end of the buffer\r\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\r\n        // Push data to the end of the buffer\r\n        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\r\n        // Increment buffer length - 0xe0 plus the original length\r\n        mstore(ptr, add(0xe0, mload(ptr)))\r\n      }\r\n      // Increment EMITS action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of events pushed to buffer -\r\n      mstore(0x140, add(1, mload(0x140)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  // Begins creating a storage buffer - destinations entered will be forwarded wei\r\n  // before the end of execution\r\n  function paying() conditions(validPayBuff, isPaying) internal pure {\r\n    bytes4 action_req = PAYS;\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\r\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the PAYS action\r\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\r\n      // Increment buffer length - 0x24 plus the previous length\r\n      mstore(ptr, add(0x24, mload(ptr)))\r\n      // Set the current action being executed (PAYS) -\r\n      mstore(0xe0, action_req)\r\n      // Set the expected next function - PAY_AMT\r\n      mstore(0x100, 8)\r\n      // Set a pointer to the length of the current request within the buffer\r\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  // Pushes an amount of wei to forward to the buffer\r\n  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push payment amount to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - PAY_DEST\r\n      mstore(0x100, 7)\r\n      // Increment PAYS action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of payment destinations to be pushed to -\r\n      mstore(0x160, add(1, mload(0x160)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n    return _amount;\r\n  }\r\n\r\n  // Push an address to forward wei to, to the buffer\r\n  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push payment destination to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - PAY_AMT\r\n      mstore(0x100, 8)\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  // Sets the free memory pointer to point beyond all accessed memory\r\n  function setFreeMem() private pure {\r\n    assembly { mstore(0x40, msize) }\r\n  }\r\n\r\n  // Returns the enum representing the next expected function to be called -\r\n  function expected() private pure returns (NextFunction next) {\r\n    assembly { next := mload(0x100) }\r\n  }\r\n\r\n  // Returns the number of events pushed to the storage buffer -\r\n  function emitted() internal pure returns (uint num_emitted) {\r\n    if (buffPtr() == bytes32(0))\r\n      return 0;\r\n\r\n    // Load number emitted from buffer -\r\n    assembly { num_emitted := mload(0x140) }\r\n  }\r\n\r\n  // Returns the number of storage slots pushed to the storage buffer -\r\n  function stored() internal pure returns (uint num_stored) {\r\n    if (buffPtr() == bytes32(0))\r\n      return 0;\r\n\r\n    // Load number stored from buffer -\r\n    assembly { num_stored := mload(0x120) }\r\n  }\r\n\r\n  // Returns the number of payment destinations and amounts pushed to the storage buffer -\r\n  function paid() internal pure returns (uint num_paid) {\r\n    if (buffPtr() == bytes32(0))\r\n      return 0;\r\n\r\n    // Load number paid from buffer -\r\n    assembly { num_paid := mload(0x160) }\r\n  }\r\n}\r\n\r\nlibrary Purchase {\r\n\r\n  using Contract for *;\r\n  using SafeMath for uint;\r\n\r\n  // event Purchase(bytes32 indexed exec_id, uint256 indexed current_rate, uint256 indexed current_time, uint256 tokens)\r\n  bytes32 internal constant BUY_SIG = keccak256('Purchase(bytes32,uint256,uint256,uint256)');\r\n\r\n  // Returns the event topics for a 'Purchase' event -\r\n  function PURCHASE(bytes32 _exec_id, uint _current_rate) private view returns (bytes32[4] memory)\r\n    { return [BUY_SIG, _exec_id, bytes32(_current_rate), bytes32(now)]; }\r\n\r\n  // Implements the logic to create the storage buffer for a Crowdsale Purchase\r\n  function buy() internal view {\r\n    bool sale_is_whitelisted = Contract.read(Sale.isWhitelisted()) != 0 ? true : false;\r\n    bool sender_has_contributed = Contract.read(Sale.hasContributed(Contract.sender())) != 0 ? true : false;\r\n\r\n    // Calculate current sale rate from start time, start and end rates, and duration\r\n  \tuint current_rate = getCurrentRate(\r\n  \t  uint(Contract.read(Sale.startTime())),\r\n  \t  uint(Contract.read(Sale.startRate())),\r\n  \t  uint(Contract.read(Sale.endRate())),\r\n  \t  uint(Contract.read(Sale.totalDuration()))\r\n  \t);\r\n\r\n  \t// If sender has already purchased tokens then change minimum contribution amount to 0;\r\n  \tuint min_contribution;\r\n    // If the sale is whitelisted -\r\n    if (sale_is_whitelisted && !sender_has_contributed)\r\n      min_contribution = uint(Contract.read(Sale.whitelistMinTok(Contract.sender())));\r\n    else if (!sale_is_whitelisted && !sender_has_contributed)\r\n      min_contribution = uint(Contract.read(Sale.globalMinPurchaseAmt()));\r\n\r\n  \t// Get total amount of wei that can be spent and number of tokens purchased\r\n  \tuint spend_amount;\r\n  \tuint tokens_purchased;\r\n  \t(spend_amount, tokens_purchased) = getPurchaseInfo(\r\n  \t  uint(Contract.read(Sale.tokenDecimals())),\r\n  \t  current_rate,\r\n  \t  uint(Contract.read(Sale.tokensRemaining())),\r\n  \t  sale_is_whitelisted,\r\n  \t  uint(Contract.read(Sale.whitelistMaxTok(Contract.sender()))),\r\n  \t  min_contribution\r\n  \t);\r\n    // Sanity checks -\r\n    assert(spend_amount != 0 && spend_amount <= msg.value && tokens_purchased != 0);\r\n\r\n    // Set up payment buffer -\r\n    Contract.paying();\r\n    // Forward spent wei to team wallet -\r\n    Contract.pay(spend_amount).toAcc(address(Contract.read(Sale.wallet())));\r\n\r\n    // Move buffer to storing values -\r\n    Contract.storing();\r\n\r\n  \t// Update purchaser's token balance -\r\n  \tContract.increase(Sale.balances(Contract.sender())).by(tokens_purchased);\r\n\r\n  \t// Update tokens remaining in sale -\r\n  \tContract.decrease(Sale.tokensRemaining()).by(tokens_purchased);\r\n\r\n    // Update total tokens sold -\r\n    Contract.increase(Sale.tokensSold()).by(tokens_purchased);\r\n\r\n  \t// Update total wei raised -\r\n  \tContract.increase(Sale.totalWeiRaised()).by(spend_amount);\r\n\r\n    // If the sender had not previously contributed to the sale,\r\n    // increase unique contributor count and mark the sender as having contributed\r\n  \tif (sender_has_contributed == false) {\r\n  \t  Contract.increase(Sale.contributors()).by(1);\r\n  \t  Contract.set(Sale.hasContributed(Contract.sender())).to(true);\r\n  \t}\r\n\r\n    // If the sale is whitelisted, update the spender's whitelist information -\r\n\t  if (sale_is_whitelisted) {\r\n\t    Contract.set(Sale.whitelistMinTok(Contract.sender())).to(uint(0));\r\n      Contract.decrease(Sale.whitelistMaxTok(Contract.sender())).by(tokens_purchased);\r\n\t  }\r\n\r\n  \tContract.emitting();\r\n\r\n  \t// Add purchase signature and topics\r\n  \tContract.log(\r\n  \t  PURCHASE(Contract.execID(), current_rate), bytes32(tokens_purchased)\r\n  \t);\r\n  }\r\n\r\n  // Calculate current purchase rate\r\n  function getCurrentRate(uint _start_time,\tuint _start_rate,\tuint _end_rate,\tuint _duration) internal view\r\n  returns (uint current_rate) {\r\n  \t// If the sale has not yet started, set current rate to 0\r\n  \tif (now < _start_time) {\r\n  \t  current_rate = 0;\r\n  \t  return;\r\n  \t}\r\n\r\n  \tuint elapsed = now.sub(_start_time);\r\n  \t// If the sale duration is up, set current rate to 0\r\n  \tif (elapsed >= _duration) {\r\n  \t  current_rate = 0;\r\n  \t  return;\r\n  \t}\r\n\r\n  \t// Add precision to the time elapsed -\r\n  \telapsed = elapsed.mul(10 ** 18);\r\n\r\n  \t// Temporary variable\r\n  \tuint temp_rate = _start_rate.sub(_end_rate).mul(elapsed).div(_duration);\r\n\r\n    // Remove precision\r\n  \ttemp_rate = temp_rate.div(10 ** 18);\r\n\r\n  \t// Current rate is start rate minus temp rate\r\n  \tcurrent_rate = _start_rate.sub(temp_rate);\r\n  }\r\n\r\n  // Calculates amount to spend, amount left able to be spent, and number of tokens purchased\r\n  function getPurchaseInfo(\r\n  \tuint _decimals, uint _current_rate, uint _tokens_remaining,\r\n  \tbool _sale_whitelisted,\tuint _token_spend_remaining, uint _min_purchase_amount\r\n  ) internal view returns (uint spend_amount, uint tokens_purchased) {\r\n  \t// Get amount of wei able to be spent, given the number of tokens remaining -\r\n    if (msg.value.mul(10 ** _decimals).div(_current_rate) > _tokens_remaining)\r\n      spend_amount = _current_rate.mul(_tokens_remaining).div(10 ** _decimals);\r\n    else\r\n      spend_amount = msg.value;\r\n\r\n    // Get number of tokens able to be purchased with the amount spent -\r\n    tokens_purchased = spend_amount.mul(10 ** _decimals).div(_current_rate);\r\n\r\n    // If the sale is whitelisted, adjust purchase size so that it does not go over the user's max cap -\r\n    if (_sale_whitelisted && tokens_purchased > _token_spend_remaining) {\r\n      tokens_purchased = _token_spend_remaining;\r\n      spend_amount = tokens_purchased.mul(_current_rate).div(10 ** _decimals);\r\n    }\r\n\r\n    // Ensure spend amount is valid -\r\n    if (spend_amount == 0 || spend_amount > msg.value)\r\n      revert(\"Invalid spend amount\");\r\n\r\n    // Ensure amount of tokens to purchase is not greater than the amount of tokens remaining in the sale -\r\n    if (tokens_purchased > _tokens_remaining || tokens_purchased == 0)\r\n      revert(\"Invalid purchase amount\");\r\n\r\n    // Ensure the number of tokens purchased meets the sender's minimum contribution requirement\r\n    if (tokens_purchased < _min_purchase_amount)\r\n      revert(\"Purchase is under minimum contribution amount\");\r\n  }\r\n}\r\n\r\nlibrary Sale {\r\n\r\n  using Contract for *;\r\n\r\n  /// SALE ///\r\n\r\n  // Whether the crowdsale and token are configured, and the sale is ready to run\r\n  function isConfigured() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_is_configured\"); }\r\n\r\n  // Whether or not the crowdsale is post-purchase\r\n  function isFinished() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_is_completed\"); }\r\n\r\n  // Storage location of the crowdsale's start time\r\n  function startTime() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_start_time\"); }\r\n\r\n  // Storage location of the amount of time the crowdsale will take, accounting for all tiers\r\n  function totalDuration() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_total_duration\"); }\r\n\r\n  // Returns the storage location of number of tokens remaining in crowdsale\r\n  function tokensRemaining() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_tokens_remaining\"); }\r\n\r\n  // Returns the storage location of crowdsale's starting sale rate\r\n  function startRate() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_start_rate\"); }\r\n\r\n  // Returns the storage location of crowdsale's ending sale rate\r\n  function endRate() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_end_rate\"); }\r\n\r\n  // Storage location of the amount of tokens sold in the crowdsale so far\r\n  function tokensSold() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_tokens_sold\"); }\r\n\r\n  // Storage location of the minimum amount of tokens allowed to be purchased\r\n  function globalMinPurchaseAmt() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_min_purchase_amt\"); }\r\n\r\n  // Stores the amount of unique contributors so far in this crowdsale\r\n  function contributors() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_contributors\"); }\r\n\r\n  // Maps addresses to a boolean indicating whether or not this address has contributed\r\n  function hasContributed(address _purchaser) internal pure returns (bytes32)\r\n    { return keccak256(_purchaser, contributors()); }\r\n\r\n  /// FUNDS ///\r\n\r\n  // Storage location of team funds wallet\r\n  function wallet() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_destination_wallet\"); }\r\n\r\n  // Storage location of amount of wei raised during the crowdsale, total\r\n  function totalWeiRaised() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_tot_wei_raised\"); }\r\n\r\n  /// WHITELIST ///\r\n\r\n  // Whether or not the sale is whitelist-enabled\r\n  function isWhitelisted() internal pure returns (bytes32)\r\n    { return keccak256('sale_is_whitelisted'); }\r\n\r\n  // Stores the sale's whitelist\r\n  function saleWhitelist() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_whitelist\"); }\r\n\r\n  // Stores a spender's maximum number of tokens allowed to be purchased\r\n  function whitelistMaxTok(address _spender) internal pure returns (bytes32)\r\n    { return keccak256(_spender, \"max_tok\", saleWhitelist()); }\r\n\r\n  // Stores a spender's minimum token purchase amount\r\n  function whitelistMinTok(address _spender) internal pure returns (bytes32)\r\n    { return keccak256(_spender, \"min_tok\", saleWhitelist()); }\r\n\r\n  /// TOKEN ///\r\n\r\n  // Storage location for token decimals\r\n  function tokenDecimals() internal pure returns (bytes32)\r\n    { return keccak256(\"token_decimals\"); }\r\n\r\n  // Storage seed for user balances mapping\r\n  bytes32 internal constant TOKEN_BALANCES = keccak256(\"token_balances\");\r\n\r\n  function balances(address _owner) internal pure returns (bytes32)\r\n    { return keccak256(_owner, TOKEN_BALANCES); }\r\n\r\n  /// CHECKS ///\r\n\r\n  // Ensures the sale has been configured, and that the sale has not finished\r\n  function validState() internal view {\r\n    // Ensure ETH was sent with the transaction\r\n    if (msg.value == 0)\r\n      revert('no wei sent');\r\n\r\n    // Ensure the sale has started\r\n    if (uint(Contract.read(startTime())) > now)\r\n      revert('sale has not started');\r\n\r\n    // Ensure the team wallet is correct\r\n    if (Contract.read(wallet()) == 0)\r\n  \t  revert('invalid Crowdsale wallet');\r\n\r\n    // Ensure the sale was configured\r\n    if (Contract.read(isConfigured()) == 0)\r\n      revert('sale not initialized');\r\n\r\n    // Ensure the sale is not finished\r\n    if (Contract.read(isFinished()) != 0)\r\n      revert('sale already finalized');\r\n\r\n    // Ensure the sale is not sold out\r\n  \tif (Contract.read(tokensRemaining()) == 0)\r\n  \t  revert('Crowdsale is sold out');\r\n\r\n  \t// Ensure the start and end rate were correctly set\r\n  \tif (Contract.read(startRate()) <= Contract.read(endRate()))\r\n  \t  revert(\"end sale rate is greater than starting sale rate\");\r\n\r\n  \t// Ensure the sale is not over\r\n  \tif (now > uint(Contract.read(startTime())) + uint(Contract.read(totalDuration())))\r\n  \t  revert(\"the crowdsale is over\");\r\n  }\r\n\r\n  // Ensures both storage and events have been pushed to the buffer\r\n  function emitStoreAndPay() internal pure {\r\n    if (Contract.emitted() == 0 || Contract.stored() == 0 || Contract.paid() != 1)\r\n      revert('invalid state change');\r\n  }\r\n\r\n  /// FUNCTIONS ///\r\n\r\n  // Allows the sender to purchase tokens -\r\n  function buy() external view {\r\n    // Begin execution - reads execution id and original sender address from storage\r\n    Contract.authorize(msg.sender);\r\n    // Check that the sale is initialized and not yet finalized -\r\n    Contract.checks(validState);\r\n    // Execute approval function -\r\n    Purchase.buy();\r\n    // Check for valid storage buffer\r\n    Contract.checks(emitStoreAndPay);\r\n    // Commit state changes to storage -\r\n    Contract.commit();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Sale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3e8ac24814bc6feba9cb2fb1b848cf1081f22825b61f883def6caa699f1ac736"}]}