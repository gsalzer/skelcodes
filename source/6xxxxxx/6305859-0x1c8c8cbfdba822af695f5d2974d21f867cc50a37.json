{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address addr, string roleName);\r\n  event RoleRemoved(address addr, string roleName);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address addr, string roleName)\r\n    view\r\n    public\r\n  {\r\n    roles[roleName].check(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address addr, string roleName)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[roleName].has(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function addRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].add(addr);\r\n    emit RoleAdded(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function removeRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].remove(addr);\r\n    emit RoleRemoved(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string roleName)\r\n  {\r\n    checkRole(msg.sender, roleName);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param roleNames the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] roleNames) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < roleNames.length; i++) {\r\n  //         if (hasRole(msg.sender, roleNames[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\ncontract Staff is Ownable, RBAC {\r\n\r\n\tstring public constant ROLE_STAFF = \"staff\";\r\n\r\n\tfunction addStaff(address _staff) public onlyOwner {\r\n\t\taddRole(_staff, ROLE_STAFF);\r\n\t}\r\n\r\n\tfunction removeStaff(address _staff) public onlyOwner {\r\n\t\tremoveRole(_staff, ROLE_STAFF);\r\n\t}\r\n\r\n\tfunction isStaff(address _staff) view public returns (bool) {\r\n\t\treturn hasRole(_staff, ROLE_STAFF);\r\n\t}\r\n}\r\n\r\ncontract StaffUtil {\r\n\tStaff public staffContract;\r\n\r\n\tconstructor (Staff _staffContract) public {\r\n\t\trequire(msg.sender == _staffContract.owner());\r\n\t\tstaffContract = _staffContract;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == staffContract.owner());\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyOwnerOrStaff() {\r\n\t\trequire(msg.sender == staffContract.owner() || staffContract.isStaff(msg.sender));\r\n\t\t_;\r\n\t}\r\n}\r\n\r\ncontract Commission is StaffUtil {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public crowdsale;\r\n\taddress public ethFundsWallet;\r\n\taddress[] public txFeeAddresses;\r\n\tuint256[] public txFeeNumerator;\r\n\tuint256 public txFeeDenominator;\r\n\tuint256 public txFeeCapInWei;\r\n\tuint256 public txFeeSentInWei;\r\n\r\n\tconstructor(\r\n\t\tStaff _staffContract,\r\n\t\taddress _ethFundsWallet,\r\n\t\taddress[] _txFeeAddresses,\r\n\t\tuint256[] _txFeeNumerator,\r\n\t\tuint256 _txFeeDenominator,\r\n\t\tuint256 _txFeeCapInWei\r\n\t) StaffUtil(_staffContract) public {\r\n\t\trequire(_txFeeAddresses.length == _txFeeNumerator.length);\r\n\t\trequire(_txFeeAddresses.length == 0 || _txFeeDenominator > 0);\r\n\t\tuint256 totalFeesNumerator;\r\n\t\tfor (uint i = 0; i < txFeeAddresses.length; i++) {\r\n\t\t\trequire(txFeeAddresses[i] != address(0));\r\n\t\t\trequire(_txFeeNumerator[i] > 0);\r\n\t\t\trequire(_txFeeDenominator > _txFeeNumerator[i]);\r\n\t\t\ttotalFeesNumerator = totalFeesNumerator.add(_txFeeNumerator[i]);\r\n\t\t}\r\n\t\trequire(_txFeeDenominator == 0 || totalFeesNumerator < _txFeeDenominator);\r\n\r\n\t\tethFundsWallet = _ethFundsWallet;\r\n\t\ttxFeeAddresses = _txFeeAddresses;\r\n\t\ttxFeeNumerator = _txFeeNumerator;\r\n\t\ttxFeeDenominator = _txFeeDenominator;\r\n\t\ttxFeeCapInWei = _txFeeCapInWei;\r\n\t}\r\n\r\n\tfunction() public payable {\r\n\t\trequire(msg.sender == crowdsale);\r\n\r\n\t\tuint256 fundsToTransfer = msg.value;\r\n\r\n\t\tif (txFeeCapInWei > 0 && txFeeSentInWei < txFeeCapInWei) {\r\n\t\t\tfor (uint i = 0; i < txFeeAddresses.length; i++) {\r\n\t\t\t\tuint256 txFeeToSendInWei = msg.value.mul(txFeeNumerator[i]).div(txFeeDenominator);\r\n\t\t\t\tif (txFeeToSendInWei > 0) {\r\n\t\t\t\t\ttxFeeSentInWei = txFeeSentInWei.add(txFeeToSendInWei);\r\n\t\t\t\t\tfundsToTransfer = fundsToTransfer.sub(txFeeToSendInWei);\r\n\t\t\t\t\ttxFeeAddresses[i].transfer(txFeeToSendInWei);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tethFundsWallet.transfer(fundsToTransfer);\r\n\t}\r\n\r\n\tfunction setCrowdsale(address _crowdsale) external onlyOwner {\r\n\t\trequire(_crowdsale != address(0));\r\n\t\trequire(crowdsale == address(0));\r\n\t\tcrowdsale = _crowdsale;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"txFeeCapInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"setCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txFeeDenominator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txFeeNumerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txFeeAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txFeeSentInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"staffContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_staffContract\",\"type\":\"address\"},{\"name\":\"_ethFundsWallet\",\"type\":\"address\"},{\"name\":\"_txFeeAddresses\",\"type\":\"address[]\"},{\"name\":\"_txFeeNumerator\",\"type\":\"uint256[]\"},{\"name\":\"_txFeeDenominator\",\"type\":\"uint256\"},{\"name\":\"_txFeeCapInWei\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Commission","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000001dbaddf4e9b51e7e66ef541b8a7fc900b0b2dcd000000000000000000000000b0f7bc2b504e1e229ba5e661d33e6e2367e334d800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000bdf3c4bb0328c0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000076ff23c90a419c5af0b4c382e0d44faeb395555700000000000000000000000000354132f3d1fed7489d4e430f47c30984b61801000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://2d394e3102804b69e105d0355bc4cf5e7d11055a63e0165cb60c2b51f5e22d01"}]}