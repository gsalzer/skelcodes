{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.15;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary DateTime {\r\n        /*\r\n         *  Date and Time utilities for ethereum contracts\r\n         *\r\n         */\r\n        struct _DateTime {\r\n                uint16 year;\r\n                uint8 month;\r\n                uint8 day;\r\n                uint8 hour;\r\n                uint8 minute;\r\n                uint8 second;\r\n                uint8 weekday;\r\n        }\r\n\r\n        uint private constant DAY_IN_SECONDS = 86400;\r\n        uint private constant YEAR_IN_SECONDS = 31536000;\r\n        uint private constant LEAP_YEAR_IN_SECONDS = 31622400;\r\n\r\n        uint private constant HOUR_IN_SECONDS = 3600;\r\n        uint private constant MINUTE_IN_SECONDS = 60;\r\n\r\n        uint16 private constant ORIGIN_YEAR = 1970;\r\n\r\n        function isLeapYear(uint16 year) public constant returns (bool) {\r\n                if (year % 4 != 0) {\r\n                        return false;\r\n                }\r\n                if (year % 100 != 0) {\r\n                        return true;\r\n                }\r\n                if (year % 400 != 0) {\r\n                        return false;\r\n                }\r\n                return true;\r\n        }\r\n\r\n        function leapYearsBefore(uint year) public constant  returns (uint) {\r\n                year -= 1;\r\n                return year / 4 - year / 100 + year / 400;\r\n        }\r\n\r\n        function getDaysInMonth(uint8 month, uint16 year) public constant  returns (uint8) {\r\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\r\n                        return 31;\r\n                }\r\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\r\n                        return 30;\r\n                }\r\n                else if (isLeapYear(year)) {\r\n                        return 29;\r\n                }\r\n                else {\r\n                        return 28;\r\n                }\r\n        }\r\n\r\n        function parseTimestamp(uint timestamp) internal constant returns (_DateTime dt) {\r\n                uint secondsAccountedFor = 0;\r\n                uint buf;\r\n                uint8 i;\r\n\r\n                // Year\r\n                dt.year = getYear(timestamp);\r\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\r\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\r\n\r\n                // Month\r\n                uint secondsInMonth;\r\n                for (i = 1; i <= 12; i++) {\r\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\r\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\r\n                                dt.month = i;\r\n                                break;\r\n                        }\r\n                        secondsAccountedFor += secondsInMonth;\r\n                }\r\n\r\n                // Day\r\n                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\r\n                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\r\n                                dt.day = i;\r\n                                break;\r\n                        }\r\n                        secondsAccountedFor += DAY_IN_SECONDS;\r\n                }\r\n\r\n                // Hour\r\n                dt.hour = getHour(timestamp);\r\n\r\n                // Minute\r\n                dt.minute = getMinute(timestamp);\r\n\r\n                // Second\r\n                dt.second = getSecond(timestamp);\r\n\r\n                // Day of week.\r\n                dt.weekday = getWeekday(timestamp);\r\n        }\r\n\r\n        function getYear(uint timestamp) public constant returns (uint16) {\r\n                uint secondsAccountedFor = 0;\r\n                uint16 year;\r\n                uint numLeapYears;\r\n\r\n                // Year\r\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\r\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\r\n\r\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\r\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\r\n\r\n                while (secondsAccountedFor > timestamp) {\r\n                        if (isLeapYear(uint16(year - 1))) {\r\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\r\n                        }\r\n                        else {\r\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\r\n                        }\r\n                        year -= 1;\r\n                }\r\n                return year;\r\n        }\r\n\r\n        function getMonth(uint timestamp) public constant returns (uint8) {\r\n                return parseTimestamp(timestamp).month;\r\n        }\r\n\r\n        function getDay(uint timestamp) public constant returns (uint8) {\r\n                return parseTimestamp(timestamp).day;\r\n        }\r\n\r\n        function getHour(uint timestamp) public constant returns (uint8) {\r\n                return uint8((timestamp / 60 / 60) % 24);\r\n        }\r\n\r\n        function getMinute(uint timestamp) public constant returns (uint8) {\r\n                return uint8((timestamp / 60) % 60);\r\n        }\r\n\r\n        function getSecond(uint timestamp) public constant returns (uint8) {\r\n                return uint8(timestamp % 60);\r\n        }\r\n\r\n        function getWeekday(uint timestamp) public constant returns (uint8) {\r\n                return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\r\n        }\r\n\r\n        function toTimestamp(uint16 year, uint8 month, uint8 day) public constant returns (uint timestamp) {\r\n                return toTimestamp(year, month, day, 0, 0, 0);\r\n        }\r\n\r\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public constant returns (uint timestamp) {\r\n                return toTimestamp(year, month, day, hour, 0, 0);\r\n        }\r\n\r\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public constant returns (uint timestamp) {\r\n                return toTimestamp(year, month, day, hour, minute, 0);\r\n        }\r\n\r\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public constant returns (uint timestamp) {\r\n                uint16 i;\r\n\r\n                // Year\r\n                for (i = ORIGIN_YEAR; i < year; i++) {\r\n                        if (isLeapYear(i)) {\r\n                                timestamp += LEAP_YEAR_IN_SECONDS;\r\n                        }\r\n                        else {\r\n                                timestamp += YEAR_IN_SECONDS;\r\n                        }\r\n                }\r\n\r\n                // Month\r\n                uint8[12] memory monthDayCounts;\r\n                monthDayCounts[0] = 31;\r\n                if (isLeapYear(year)) {\r\n                        monthDayCounts[1] = 29;\r\n                }\r\n                else {\r\n                        monthDayCounts[1] = 28;\r\n                }\r\n                monthDayCounts[2] = 31;\r\n                monthDayCounts[3] = 30;\r\n                monthDayCounts[4] = 31;\r\n                monthDayCounts[5] = 30;\r\n                monthDayCounts[6] = 31;\r\n                monthDayCounts[7] = 31;\r\n                monthDayCounts[8] = 30;\r\n                monthDayCounts[9] = 31;\r\n                monthDayCounts[10] = 30;\r\n                monthDayCounts[11] = 31;\r\n\r\n                for (i = 1; i < month; i++) {\r\n                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\r\n                }\r\n\r\n                // Day\r\n                timestamp += DAY_IN_SECONDS * (day - 1);\r\n\r\n                // Hour\r\n                timestamp += HOUR_IN_SECONDS * (hour);\r\n\r\n                // Minute\r\n                timestamp += MINUTE_IN_SECONDS * (minute);\r\n\r\n                // Second\r\n                timestamp += second;\r\n\r\n                return timestamp;\r\n        }\r\n\r\n\t\t// -1 t1 < t2\r\n\t\t// 0  t1 == t2\r\n\t\t// 1  t1 > t2\r\n\t\tfunction compareDatesWithoutTime(uint t1, uint t2) public constant returns (int res)\r\n\t\t{\r\n\t\t\t_DateTime memory dt1 = parseTimestamp(t1);\r\n\t\t\t_DateTime memory dt2 = parseTimestamp(t2);\r\n\r\n\t\t\tres = compareInts(dt1.year, dt2.year);\r\n\t\t\tif (res == 0)\r\n\t\t\t{\r\n\t\t\t\tres = compareInts(dt1.month, dt2.month);\r\n\t\t\t\tif (res == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tres = compareInts(dt1.day, dt2.day);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t//  t2 -> MoveIn or MoveOut day in GMT, will be counted as beginning of a day\r\n\t\t//  t1 -> Current System DateTime\r\n\t\t// -1 t1 before t2\r\n\t\t//--------------------------------\r\n\t\t// 0  t1 same day as t2\r\n\t\t// 1  t1 after t2\r\n\t\tfunction compareDateTimesForContract(uint t1, uint t2) public constant returns (int res)\r\n\t\t{\r\n\t\t    uint endOfDay = t2 + (60 * 60 * 24);\r\n\t\t    res = 0;\r\n\t\t    \r\n\t\t    if (t2 <= t1 && t1 <= endOfDay)\r\n\t\t    {\r\n\t\t        res = 0;\r\n\t\t    }\r\n\t\t    else if (t2 > t1)\r\n\t\t    {\r\n\t\t        res = -1;\r\n\t\t    }\r\n\t\t    else if (t1 > endOfDay)\r\n\t\t    {\r\n\t\t        res = 1;\r\n\t\t    }\r\n\t\t}\t\r\n\r\n\r\n\t\t// -1 n1 < n2\r\n\t\t// 0  n1 == n2\r\n\t\t// 1  n1 > n2\r\n\t\tfunction compareInts(int n1, int n2) internal constant returns (int res)\r\n\t\t{\r\n\t\t\tif (n1 == n2)\r\n\t\t\t{\r\n\t\t\t\tres = 0;\r\n\t\t\t}\r\n\t\t\telse if (n1 < n2)\r\n\t\t\t{\r\n\t\t\t\tres = -1;\r\n\t\t\t}\r\n\t\t\telse if (n1 > n2)\r\n\t\t\t{\r\n\t\t\t\tres = 1;\r\n\t\t\t}\r\n\t\t}\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\nlibrary BaseEscrowLib\r\n{\r\n    struct EscrowContractState { \r\n\t\tuint _CurrentDate;\r\n\t\tuint _CreatedDate;\r\n\t\tint _RentPerDay;\r\n\t\tuint _MoveInDate;\r\n\t\tuint _MoveOutDate;\t\t\t\t\r\n\t\tint _TotalAmount;\t\t\t\t\t\r\n\t\tint _SecDeposit;\r\n\t\tint _State;\t\r\n\t\tuint _ActualMoveInDate;\r\n\t\tuint _ActualMoveOutDate;\r\n\t\taddress _landlord;\r\n\t\taddress _tenant;\r\n\t\tbool _TenantConfirmedMoveIn;\t\t\r\n\t\tbool _MisrepSignaled;\t\t\t\r\n\t\tstring _DoorLockData;\r\n\t\taddress _ContractAddress;\t\t\r\n\t\tERC20Interface _tokenApi;\r\n\t\tint _landlBal;\r\n\t\tint _tenantBal;\r\n\t\tint _Id;\r\n\t\tint _CancelPolicy;\r\n\t\tuint _Balance;\r\n\t\tstring _Guid;\r\n    }\r\n\r\n    //Define public constants\r\n\t//Pre-Move In\r\n\tint internal constant ContractStateActive = 1;\r\n\tint internal constant ContractStateCancelledByTenant = 2;\r\n\tint internal constant ContractStateCancelledByLandlord = 3;\r\n\r\n\t//Move-In\r\n\tint internal constant ContractStateTerminatedMisrep = 4;\r\n\r\n\t//Living\r\n\tint internal constant ContractStateEarlyTerminatedByTenant = 5;\r\n\tint internal constant ContractStateEarlyTerminatedByTenantSecDep = 6;\r\n\tint internal constant ContractStateEarlyTerminatedByLandlord = 7;\t\t\r\n\r\n\t//Move-Out\r\n\tint internal constant ContractStateTerminatedOK = 8;\t\r\n\tint internal constant ContractStateTerminatedSecDep = 9;\r\n\t\r\n\t//Stages\r\n\tint internal constant ContractStagePreMoveIn = 0;\r\n\tint internal constant ContractStageLiving = 1;\r\n\tint internal constant ContractStageTermination = 2;\r\n\r\n\t//Action\r\n\tint internal constant ActionKeyTerminate = 0;\r\n\tint internal constant ActionKeyMoveIn = 1;\t\r\n\tint internal constant ActionKeyTerminateMisrep = 2;\t\r\n\tint internal constant ActionKeyPropOk = 3;\r\n\tint internal constant ActionKeyClaimDeposit = 4;\r\n\r\n\t//Log\r\n\tint internal constant LogMessageInfo = 0;\r\n\tint internal constant LogMessageWarning = 1;\r\n\tint internal constant LogMessageError = 2;\r\n\r\n\tevent logEvent(int stage, int atype, uint timestamp, string guid, string text);\r\n\r\n\r\n\t//DEBUG or TESTNET\r\n\t//bool private constant EnableSimulatedCurrentDate = true;\r\n\r\n\t//RELEASE\r\n\tbool private constant EnableSimulatedCurrentDate = false;\r\n\r\n\r\n\t//LogEvent wrapper\r\n\tfunction ContractLogEvent(int stage, int atype, uint timestamp, string guid, string text) public\r\n\t{\r\n\t\tlogEvent(stage, atype, timestamp, guid, text);\r\n\t}\r\n\r\n\t//Constant function wrappers\r\n\tfunction GetContractStateActive() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateActive;\r\n\t}\r\n\r\n\tfunction GetContractStateCancelledByTenant() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateCancelledByTenant;\r\n\t}\r\n\r\n\tfunction GetContractStateCancelledByLandlord() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateCancelledByLandlord;\r\n\t}\r\n\t\r\n\tfunction GetContractStateTerminatedMisrep() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateTerminatedMisrep;\r\n\t}\r\n\r\n\tfunction GetContractStateEarlyTerminatedByTenant() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateEarlyTerminatedByTenant;\r\n\t}\r\n\r\n\tfunction GetContractStateEarlyTerminatedByTenantSecDep() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateEarlyTerminatedByTenantSecDep;\r\n\t}\r\n\r\n\tfunction GetContractStateEarlyTerminatedByLandlord() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateEarlyTerminatedByLandlord;\t\t\r\n\t}\r\n\r\n\tfunction GetContractStateTerminatedOK() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateTerminatedOK;\t\r\n\t}\r\n\r\n\tfunction GetContractStateTerminatedSecDep() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStateTerminatedSecDep;\r\n\t}\r\n\t\r\n\tfunction GetContractStagePreMoveIn() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStagePreMoveIn;\r\n\t}\r\n\r\n\tfunction GetContractStageLiving() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStageLiving;\r\n\t}\r\n\r\n\tfunction GetContractStageTermination() public constant returns (int)\r\n\t{\r\n\t\treturn ContractStageTermination;\r\n\t}\r\n\t\r\n\tfunction GetLogMessageInfo() public constant returns (int)\r\n\t{\r\n\t\treturn LogMessageInfo;\r\n\t}\r\n\r\n\tfunction GetLogMessageWarning() public constant returns (int)\r\n\t{\r\n\t\treturn LogMessageWarning;\r\n\t}\r\n\r\n\tfunction GetLogMessageError() public constant returns (int)\r\n\t{\r\n\t\treturn LogMessageError;\r\n\t}\r\n\r\n\r\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\tfunction initialize(EscrowContractState storage self) {\r\n\r\n\t\t//Check parameters\r\n\t\t//all dates must be in the future\r\n\r\n\t\trequire(self._CurrentDate < self._MoveInDate);\r\n\t\trequire(self._MoveInDate < self._MoveOutDate);\r\n\t\t\t\t\t\t\t\r\n\t\tint nPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\r\n\t\tint nPotentialBillableAmount = nPotentialBillableDays * (self._RentPerDay);\r\n\t\t\r\n\t\t//Limit 2 months stay\r\n\t\trequire (nPotentialBillableDays <= 60); \r\n\r\n\t\tself._TotalAmount = nPotentialBillableAmount + self._SecDeposit;\r\n\t\t\t\t\r\n\t\t//Sec Deposit should not be more than 30 perecent\r\n\t\trequire (self._SecDeposit / nPotentialBillableAmount * 100 <= 30);\r\n\t\t\t\t\r\n\r\n\t\tself._TenantConfirmedMoveIn = false;\r\n\t\tself._MisrepSignaled = false;\r\n\t\tself._State = GetContractStateActive();\r\n\t\tself._ActualMoveInDate = 0;\r\n\t\tself._ActualMoveOutDate = 0;\r\n\t\tself._landlBal = 0;\r\n\t\tself._tenantBal = 0;\r\n\t}\r\n\r\n\r\n\tfunction TerminateContract(EscrowContractState storage self, int tenantBal, int landlBal, int state) public\r\n\t{\r\n\t\tint stage = GetCurrentStage(self);\r\n\t\tuint nCurrentDate = GetCurrentDate(self);\r\n\t\tint nActualBalance = int(GetContractBalance(self));\r\n\r\n\t\tif (nActualBalance == 0)\r\n\t\t{\r\n\t\t    //If it was unfunded, just change state\r\n\t\t    self._State = state;   \r\n\t\t}\r\n\t\telse if (self._State == ContractStateActive && state != ContractStateActive)\r\n\t\t{\r\n\t\t\t//Check if some balances are negative\r\n\t\t\tif (landlBal < 0)\r\n\t\t\t{\r\n\t\t\t\ttenantBal += landlBal;\r\n\t\t\t\tlandlBal = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (tenantBal < 0) {\r\n\t\t\t\tlandlBal += tenantBal;\r\n\t\t\t\ttenantBal = 0;\r\n\t\t\t}\r\n\r\n\t\t\t//Check if balances exceed total amount\r\n\t\t\tif ((landlBal + tenantBal) > nActualBalance)\r\n\t\t\t{\r\n\t\t\t\tvar nOverrun = (landlBal + tenantBal) - self._TotalAmount;\r\n\t\t\t\tlandlBal -= (nOverrun / 2);\r\n\t\t\t\ttenantBal -= (nOverrun / 2);\r\n\t\t\t}\r\n\r\n\t\t\tself._State = state;\r\n\r\n\t\t\tstring memory strState = \"\";\r\n\r\n\t\t\tif (state == ContractStateTerminatedOK)\r\n\t\t\t{\r\n\t\t\t\tstrState = \" State is: OK\";\r\n\t\t\t}\r\n\t\t\telse if (state == ContractStateEarlyTerminatedByTenant)\r\n\t\t\t{\r\n\t\t\t\tstrState = \" State is: Early terminated by tenant\";\r\n\t\t\t}\r\n\t\t\telse if (state == ContractStateEarlyTerminatedByTenantSecDep)\r\n\t\t\t{\r\n\t\t\t\tstrState = \" State is: Early terminated by tenant, Security Deposit claimed\";\r\n\t\t\t}\r\n\t\t\telse if (state == ContractStateEarlyTerminatedByLandlord)\r\n\t\t\t{\r\n\t\t\t\tstrState = \" State is: Early terminated by landlord\";\r\n\t\t\t}\r\n\t\t\telse if (state == ContractStateCancelledByTenant)\r\n\t\t\t{\r\n\t\t\t\tstrState = \" State is: Cancelled by tenant\";\r\n\t\t\t}\r\n\t\t\telse if (state == ContractStateCancelledByLandlord)\r\n\t\t\t{\r\n\t\t\t\tstrState = \" State is: Cancelled by landlord\";\r\n\t\t\t}\r\n\t\t\telse if (state == ContractStateTerminatedSecDep)\r\n\t\t\t{\r\n\t\t\t\tstrState = \" State is: Security Deposit claimed\";\r\n\t\t\t}\r\n\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tbytes32 b1;\r\n\t\t\tbytes32 b2;\r\n\t\t\tb1 = uintToBytes(uint(landlBal));\r\n\t\t\tb2 = uintToBytes(uint(tenantBal));\r\n\r\n                        /*\r\n\t\t    string memory s1;\r\n\t\t    string memory s2;\t\r\n\t\t    s1 = bytes32ToString(b1);\r\n\t\t    s2 = bytes32ToString(b2);\r\n                        */\r\n\t\t\t\r\n\t\t\tstring memory strMessage = strConcat(\r\n\t\t\t    \"Contract is termintaing. Landlord balance is _$b_\", \r\n\t\t\t    bytes32ToString(b1), \r\n\t\t\t    \"_$e_, Tenant balance is _$b_\", \r\n\t\t\t    bytes32ToString(b2));\r\n\r\n            \r\n\t\t\tstring memory strMessage2 = strConcat(\r\n\t\t\t\tstrMessage,\r\n\t\t\t\t\"_$e_.\",\r\n\t\t\t\tstrState\r\n\t\t\t);\r\n\r\n            string memory sGuid;\r\n            sGuid = self._Guid;\r\n\t\t\t\r\n            logEvent(stage, LogMessageInfo, nCurrentDate, sGuid, strMessage2);\r\n            \r\n\t\t\t//Send tokens\r\n\t\t\tself._landlBal = landlBal;\r\n\t\t\tself._tenantBal = tenantBal;\r\n\t\t}\t\r\n\t}\r\n\r\n\tfunction GetCurrentStage(EscrowContractState storage self) public constant returns (int stage)\r\n\t{\r\n\t\tuint nCurrentDate = GetCurrentDate(self);\r\n\t\tuint nActualBalance = GetContractBalance(self);\r\n        \r\n        stage = ContractStagePreMoveIn;\r\n        \r\n\t\tif (self._State == ContractStateActive && uint(self._TotalAmount) > nActualBalance)\r\n\t\t{\r\n\t\t\t//Contract unfunded\r\n\t\t\tstage = ContractStagePreMoveIn;\r\n\t\t}\t\t\r\n\t\telse if (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) < 0)\r\n\t\t{\r\n\t\t\tstage = ContractStagePreMoveIn;\r\n\t\t}\r\n\t\telse if (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) >= 0 && \r\n\t\t         DateTime.compareDateTimesForContract(nCurrentDate, self._MoveOutDate) < 0 && \r\n\t\t         self._TenantConfirmedMoveIn)\r\n\t\t{\r\n\t\t\tstage = ContractStageLiving;\r\n\t\t}\r\n\t\telse if (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveOutDate) >= 0)\r\n\t\t{\r\n\t\t\tstage = ContractStageTermination;\r\n\t\t}\t\r\n\t}\r\n\r\n\r\n\r\n\t///Helper functions\r\n\tfunction SimulateCurrentDate(EscrowContractState storage self, uint n) public\r\n\t{\r\n\t\tif (EnableSimulatedCurrentDate)\r\n\t\t{\r\n\t\t\tself._CurrentDate = n;\r\n\t\t\t//int stage = GetCurrentStage(self);\r\n\t\t\t//logEvent(stage, LogMessageInfo, self._CurrentDate, \"SimulateCurrentDate was called.\");\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tfunction GetCurrentDate(EscrowContractState storage self) public constant returns (uint nCurrentDate)\r\n\t{\r\n\t\tif (EnableSimulatedCurrentDate)\r\n\t\t{\r\n\t\t\tnCurrentDate = self._CurrentDate;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tnCurrentDate = now;\r\n\t\t}\t\r\n\t}\r\n\r\n\tfunction GetContractBalance(EscrowContractState storage self) public returns (uint res)\r\n\t{\r\n\t    res = self._Balance;\r\n\t}\r\n\r\n\r\n\tfunction splitBalanceAccordingToRatings(int balance, int tenantScore, int landlScore) public constant returns (int tenantBal, int landlBal)\r\n\t{\r\n\t\tif (tenantScore == landlScore) {\r\n\t\t\t//Just split in two \r\n\t\t\ttenantBal = balance / 2;\r\n\t\t\tlandlBal = balance / 2;\r\n\t\t}\r\n\t\telse if (tenantScore == 0)\r\n\t\t{\r\n\t\t\ttenantBal = 0;\r\n\t\t\tlandlBal = balance;\t\t\t\r\n\t\t}\r\n\t\telse if (landlScore == 0) {\r\n\t\t\ttenantBal = balance;\r\n\t\t\tlandlBal = 0;\r\n\t\t}\r\n\t\telse if (tenantScore > landlScore) {\t\t\t\r\n\t\t\tlandlBal = ((landlScore * balance / 2) / tenantScore);\r\n\t\t\ttenantBal = balance - landlBal;\t\t\t\r\n\t\t}\r\n\t\telse if (tenantScore < landlScore) {\t\t\t\r\n\t\t\ttenantBal = ((tenantScore * balance / 2) / landlScore);\r\n\t\t\tlandlBal = balance - tenantBal;\t\t\t\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tfunction formatDate(uint dt) public constant returns (string strDate)\r\n\t{\r\n\t\tbytes32 b1;\r\n\t\tbytes32 b2;\r\n\t\tbytes32 b3;\r\n\t\tb1 = uintToBytes(uint(DateTime.getMonth(dt)));\r\n\t\tb2 = uintToBytes(uint(DateTime.getDay(dt)));\r\n\t\tb3 = uintToBytes(uint(DateTime.getYear(dt)));\r\n\t\tstring memory s1;\r\n\t\tstring memory s2;\t\r\n\t\tstring memory s3;\r\n\t\ts1 = bytes32ToString(b1);\r\n\t\ts2 = bytes32ToString(b2);\r\n\t\ts3 = bytes32ToString(b3);\r\n\t\t\r\n\t\tstring memory strDate1 = strConcat(s1, \"/\", s2, \"/\");\r\n\t\tstrDate = strConcat(strDate1, s3);\t\t\t\r\n\t}\r\n\t\r\n\r\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal constant returns (string){\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        bytes memory _bc = bytes(_c);\r\n        bytes memory _bd = bytes(_d);\r\n        bytes memory _be = bytes(_e);\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n        bytes memory babcde = bytes(abcde);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n        return string(babcde);\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c, string _d) internal constant returns (string) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n    \r\n    function strConcat(string _a, string _b, string _c) internal constant returns (string) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n    \r\n    function strConcat(string _a, string _b) internal constant returns (string) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    } \r\n    \r\n    function bytes32ToString(bytes32 x) internal constant returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n\r\n    function bytes32ArrayToString(bytes32[] data) internal constant returns (string) {\r\n        bytes memory bytesString = new bytes(data.length * 32);\r\n        uint urlLength;\r\n        for (uint i=0; i<data.length; i++) {\r\n            for (uint j=0; j<32; j++) {\r\n                byte char = byte(bytes32(uint(data[i]) * 2 ** (8 * j)));\r\n                if (char != 0) {\r\n                    bytesString[urlLength] = char;\r\n                    urlLength += 1;\r\n                }\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(urlLength);\r\n        for (i=0; i<urlLength; i++) {\r\n            bytesStringTrimmed[i] = bytesString[i];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }  \r\n    \r\n    \r\n    function uintToBytes(uint v) internal constant returns (bytes32 ret) {\r\n        if (v == 0) {\r\n            ret = '0';\r\n        }\r\n        else {\r\n            while (v > 0) {\r\n                ret = bytes32(uint(ret) / (2 ** 8));\r\n                ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31));\r\n                v /= 10;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /// @dev Converts a numeric string to it's unsigned integer representation.\r\n    /// @param v The string to be converted.\r\n    function bytesToUInt(bytes32 v) internal constant returns (uint ret) {\r\n        if (v == 0x0) {\r\n            throw;\r\n        }\r\n\r\n        uint digit;\r\n\r\n        for (uint i = 0; i < 32; i++) {\r\n            digit = uint((uint(v) / (2 ** (8 * (31 - i)))) & 0xff);\r\n            if (digit == 0) {\r\n                break;\r\n            }\r\n            else if (digit < 48 || digit > 57) {\r\n                throw;\r\n            }\r\n            ret *= 10;\r\n            ret += (digit - 48);\r\n        }\r\n        return ret;\r\n    }    \r\n\r\n\r\n}\r\n\r\n\r\nlibrary FlexibleEscrowLib\r\n{\r\n\tusing BaseEscrowLib for BaseEscrowLib.EscrowContractState;\r\n\r\n    //Cancel days\r\n\tint internal constant FreeCancelBeforeMoveInDays = 14;\r\n\r\n\t//Expiration\r\n\tint internal constant ExpireAfterMoveOutDays = 14;\r\n\t\t    \r\n\r\n    \r\n\tfunction TenantTerminate(BaseEscrowLib.EscrowContractState storage self) public\r\n    {\r\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\r\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\r\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\r\n\t\tint tenantBal = 0;\r\n\t\tint landlBal = 0;\r\n\t\tint state = 0; \r\n\t\tbool bProcessed = false;\r\n        string memory sGuid;\r\n        sGuid = self._Guid;\r\n\r\n\t\tif (nActualBalance == 0)\r\n\t\t{\r\n\t\t\t//If contract is unfunded, just cancel it\r\n\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\r\n\t\t\tbProcessed = true;\t\t\t\r\n\t\t}\r\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn())\r\n\t\t{\t\t\t\r\n\t\t\tint nDaysBeforeMoveIn = (int)(self._MoveInDate - nCurrentDate) / (60 * 60 * 24);\r\n\t\t\tif (nDaysBeforeMoveIn < FreeCancelBeforeMoveInDays)\r\n\t\t\t{\r\n\t\t\t\t//Pay cancel fee\r\n\t\t\t\t//Contract must be fully funded\r\n\t\t\t\trequire(self._RentPerDay <= nActualBalance);\r\n\r\n\t\t\t\t//Cancellation fee is one day rent\r\n\t\t\t\ttenantBal = nActualBalance - self._RentPerDay;\r\n\t\t\t\tlandlBal = self._RentPerDay;\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\r\n\t\t\t\tbProcessed = true;\r\n\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant cancelled escrow. Cancellation fee will be withheld from tenant.\");\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//No cancel fee\r\n\t\t\t\ttenantBal = nActualBalance;\r\n\t\t\t\tlandlBal = 0;\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\r\n\t\t\t\tbProcessed = true;\r\n\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant cancelled escrow.\");\r\n\t\t\t}\t\t\t\t\t\r\n\t\t}\r\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageLiving())\r\n\t\t{\r\n\t\t\tstate = 0;\r\n\t\t\tself._ActualMoveOutDate = nCurrentDate;\r\n\t\t\tbProcessed = true;\r\n\t\t\t//In this case landlord will close escrow\r\n\r\n\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant signaled early move-out\");\r\n\t\t}\r\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageTermination())\r\n\t\t{\r\n\t\t\t//If landlord did not close the escrow, and if it is expired, tenant may only pay for rent without sec deposit\r\n\t\t\tint nDaysAfterMoveOut = (int)(nCurrentDate - self._MoveOutDate) / (60 * 60 * 24);\r\n\r\n\t\t\tif (nDaysAfterMoveOut > ExpireAfterMoveOutDays)\r\n\t\t\t{\r\n\t\t\t\tint nPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\r\n\t\t\t\trequire(self._RentPerDay * nPotentialBillableDays <= nActualBalance);\r\n\r\n\t\t\t\tlandlBal = self._RentPerDay * nPotentialBillableDays;\r\n\t\t\t\ttenantBal = nActualBalance - landlBal;\r\n\t\t\t\tbProcessed = true;\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedOK();\r\n\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Tenant closed escrow because it was expired\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequire(bProcessed);\r\n\t\tif (state > 0)\r\n\t\t{\r\n\t\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,state);\r\n\t\t}\r\n\r\n    }\r\n    \r\n    function TenantMoveIn(BaseEscrowLib.EscrowContractState storage self) public\r\n    {\r\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\r\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\r\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\r\n\t\tstring memory sGuid;\r\n        sGuid = self._Guid;\r\n\t\t\t\t\r\n\t\trequire(nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn() && nActualBalance >= self._TotalAmount && \r\n\t\t\t\tDateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) >= 0);\r\n\r\n        BaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Tenant signaled move-in\");\r\n\r\n\t\tself._TenantConfirmedMoveIn = true;\r\n    } \r\n\t       \r\n    function TenantTerminateMisrep(BaseEscrowLib.EscrowContractState storage self) public\r\n    {\r\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\r\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\r\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\r\n\t\tint tenantBal = 0;\r\n\t\tint landlBal = 0;\r\n        string memory sGuid;\r\n        sGuid = self._Guid;\r\n\r\n\t\trequire(nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn() && nActualBalance >= self._RentPerDay && \r\n\t\t\t\tDateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) == 0);\r\n\r\n\t\t(tenantBal, landlBal) = BaseEscrowLib.splitBalanceAccordingToRatings(self._RentPerDay,0,0);\r\n\t\t\t\t\t\r\n\t\ttenantBal = nActualBalance - landlBal;\r\n\t\t\r\n\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant signaled misrepresentation and terminated escrow!\");\r\n\t\tself._MisrepSignaled = true;\r\n\r\n\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,BaseEscrowLib.GetContractStateTerminatedMisrep());\t         \r\n    }    \r\n\t\r\n\tfunction LandlordTerminate(BaseEscrowLib.EscrowContractState storage self, uint SecDeposit) public\r\n\t{\r\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\r\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\r\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\r\n\t\tint tenantBal = 0;\r\n\t\tint landlBal = 0;\r\n\t\tint state = 0; \r\n\t\tbool bProcessed = false;\r\n\t\tint nPotentialBillableDays = 0;\r\n        string memory sGuid;\r\n        sGuid = self._Guid;\r\n\r\n\t\tif (nActualBalance == 0)\r\n\t\t{\r\n\t\t\t//If contract is unfunded, just cancel it\r\n\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\r\n\t\t\tbProcessed = true;\t\t\t\r\n\t\t}\r\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn())\r\n\t\t{\t\r\n\t\t\tif (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) > 0 && \r\n\t\t\t\t!self._TenantConfirmedMoveIn)\r\n\t\t\t{\r\n\t\t\t\t//Landlord gets cancell fee if tenant did not signal anything after move in date\r\n\t\t\t\ttenantBal = nActualBalance - self._RentPerDay;\t\r\n\t\t\t\tlandlBal = self._RentPerDay;\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\r\n\t\t\t\tbProcessed = true;\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Landlord cancelled escrow. Tenant did not show up and will pay cancellation fee.\");\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\t\t        \t\t\t\t\r\n\t\t\t\t//No cancel fee\r\n\t\t\t\ttenantBal = nActualBalance;\r\n\t\t\t\tlandlBal = 0;\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\r\n\t\t\t\tbProcessed = true;\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord cancelled esqrow\");\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageLiving())\r\n\t\t{\r\n\t\t\tnPotentialBillableDays = (int)(nCurrentDate - self._MoveInDate) / (60 * 60 * 24);\r\n\t\t\t\r\n\t\t\tif (self._ActualMoveOutDate == 0)\r\n\t\t\t{\r\n\t\t\t\t//If landlord initiates it, he cannot claim sec deposit\r\n\t\t\t\trequire(nActualBalance >= nPotentialBillableDays * self._RentPerDay);\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateEarlyTerminatedByLandlord();\r\n\t\t\t\tlandlBal = nPotentialBillableDays * self._RentPerDay;\r\n\t\t\t\ttenantBal = nActualBalance - landlBal;\r\n\t\t\t\tbProcessed = true;\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled early move-out\");\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t//If tenant initiates it, landlord can claim sec deposit, and tenant pays for one extra day\r\n\t\t\t\trequire(int(SecDeposit) <= self._SecDeposit && nActualBalance >= (nPotentialBillableDays + 1) * self._RentPerDay + int(SecDeposit));\r\n\t\t\t\t\r\n\t\t\t\tif (SecDeposit == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tstate = BaseEscrowLib.GetContractStateEarlyTerminatedByTenant();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled Security Deposit\");\r\n\t\t\t\t\tstate = BaseEscrowLib.GetContractStateEarlyTerminatedByTenantSecDep();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlandlBal = (nPotentialBillableDays + 1) * self._RentPerDay + int(SecDeposit);\r\n\t\t\t\ttenantBal = nActualBalance - landlBal;\r\n\t\t\t\tbProcessed = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageTermination())\r\n\t\t{\r\n\t\t\tnPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\r\n\t\t\trequire(int(SecDeposit) <= self._SecDeposit && nActualBalance >= nPotentialBillableDays * self._RentPerDay + int(SecDeposit));\r\n\t\t\tif (SecDeposit == 0)\r\n\t\t\t{\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedOK();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled Security Deposit\");\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedSecDep();\r\n\t\t\t}\r\n\t\t\tlandlBal = nPotentialBillableDays * self._RentPerDay + int(SecDeposit);\r\n\t\t\ttenantBal = nActualBalance - landlBal;\r\n\t\t\tbProcessed = true;\r\n\t\t}\r\n\r\n\t\trequire(bProcessed);\r\n\t\tif (state > 0)\r\n\t\t{\r\n\t\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,state);\r\n\t\t}\t\r\n\t}\r\n}\r\n\r\nlibrary ModerateEscrowLib\r\n{\r\n\tusing BaseEscrowLib for BaseEscrowLib.EscrowContractState;\r\n\r\n    //Cancel days\r\n\tint internal constant FreeCancelBeforeMoveInDays = 30;\r\n\r\n\t//Expiration\r\n\tint internal constant ExpireAfterMoveOutDays = 14;\r\n\t\t    \r\n    \r\n\tfunction TenantTerminate(BaseEscrowLib.EscrowContractState storage self) public\r\n    {\r\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\r\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\r\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\r\n\t\tint tenantBal = 0;\r\n\t\tint landlBal = 0;\r\n\t\tint state = 0; \r\n\t\tbool bProcessed = false;\r\n        string memory sGuid;\r\n        sGuid = self._Guid;\r\n\r\n\t\tif (nActualBalance == 0)\r\n\t\t{\r\n\t\t\t//If contract is unfunded, just cancel it\r\n\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\r\n\t\t\tbProcessed = true;\t\t\t\r\n\t\t}\r\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn())\r\n\t\t{\t\t\t\r\n\t\t\tint nDaysBeforeMoveIn = (int)(self._MoveInDate - nCurrentDate) / (60 * 60 * 24);\r\n\t\t\tif (nDaysBeforeMoveIn < FreeCancelBeforeMoveInDays)\r\n\t\t\t{\r\n\t\t\t\t//Pay cancel fee\r\n\t\t\t\t//Contract must be fully funded\r\n\r\n\t\t\t\tint cancelFee = (self._TotalAmount - self._SecDeposit) / 2;\r\n\r\n\t\t\t\trequire(cancelFee <= nActualBalance);\r\n\r\n\t\t\t\t//Cancellation fee is half of the rent to pay\r\n\t\t\t\ttenantBal = nActualBalance - cancelFee;\r\n\t\t\t\tlandlBal = cancelFee;\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\r\n\t\t\t\tbProcessed = true;\r\n\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant cancelled escrow. Cancellation fee will be withheld from tenant.\");\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//No cancel fee\r\n\t\t\t\ttenantBal = nActualBalance;\r\n\t\t\t\tlandlBal = 0;\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\r\n\t\t\t\tbProcessed = true;\r\n\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant cancelled escrow.\");\r\n\t\t\t}\t\t\t\t\t\r\n\t\t}\r\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageLiving())\r\n\t\t{\r\n\t\t\tstate = 0;\r\n\t\t\tself._ActualMoveOutDate = nCurrentDate;\r\n\t\t\tbProcessed = true;\r\n\t\t\t//In this case landlord will close escrow\r\n\r\n\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant signaled early move-out\");\r\n\t\t}\r\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageTermination())\r\n\t\t{\r\n\t\t\t//If landlord did not close the escrow, and if it is expired, tenant may only pay for rent without sec deposit\r\n\t\t\tint nDaysAfterMoveOut = (int)(nCurrentDate - self._MoveOutDate) / (60 * 60 * 24);\r\n\r\n\t\t\tif (nDaysAfterMoveOut > ExpireAfterMoveOutDays)\r\n\t\t\t{\r\n\t\t\t\tint nPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\r\n\t\t\t\trequire(self._RentPerDay * nPotentialBillableDays <= nActualBalance);\r\n\r\n\t\t\t\tlandlBal = self._RentPerDay * nPotentialBillableDays;\r\n\t\t\t\ttenantBal = nActualBalance - landlBal;\r\n\t\t\t\tbProcessed = true;\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedOK();\r\n\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Tenant closed escrow because it was expired\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequire(bProcessed);\r\n\t\tif (state > 0)\r\n\t\t{\r\n\t\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,state);\r\n\t\t}\r\n\r\n    }\r\n    \r\n    function TenantMoveIn(BaseEscrowLib.EscrowContractState storage self) public\r\n    {\r\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\r\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\r\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\r\n        string memory sGuid;\r\n        sGuid = self._Guid;\r\n\t\t\t\t\r\n\t\trequire(nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn() && nActualBalance >= self._TotalAmount && \r\n\t\t\t\tDateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) >= 0);\r\n\r\n        BaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Tenant signaled move-in\");\r\n\r\n\t\tself._TenantConfirmedMoveIn = true;\r\n    } \r\n\t       \r\n    function TenantTerminateMisrep(BaseEscrowLib.EscrowContractState storage self) public\r\n    {\r\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\r\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\r\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\r\n\t\tint tenantBal = 0;\r\n\t\tint landlBal = 0;\r\n\t\tint cancelFee = (self._TotalAmount - self._SecDeposit) / 2;\r\n        string memory sGuid;\r\n        sGuid = self._Guid;\r\n\r\n\t\trequire(nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn() && nActualBalance >= cancelFee && \r\n\t\t\t\tDateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) == 0);\r\n\r\n\t\t(tenantBal, landlBal) = BaseEscrowLib.splitBalanceAccordingToRatings(cancelFee,0,0);\r\n\t\t\t\t\t\r\n\t\ttenantBal = nActualBalance - landlBal;\r\n\t\t\r\n\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant signaled misrepresentation and terminated escrow!\");\r\n\t\tself._MisrepSignaled = true;\r\n\r\n\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,BaseEscrowLib.GetContractStateTerminatedMisrep());\t         \r\n    }    \r\n\t\r\n\tfunction LandlordTerminate(BaseEscrowLib.EscrowContractState storage self, uint SecDeposit) public\r\n\t{\r\n\t\t//int nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\r\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\r\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\r\n\t\tint tenantBal = 0;\r\n\t\tint landlBal = 0;\r\n\t\tint state = 0; \r\n\t\tbool bProcessed = false;\r\n\t\tint nPotentialBillableDays = 0;\r\n\t\tint cancelFee = (self._TotalAmount - self._SecDeposit) / 2;\r\n        string memory sGuid;\r\n        sGuid = self._Guid;\r\n\r\n\t\tif (nActualBalance == 0)\r\n\t\t{\r\n\t\t\t//If contract is unfunded, just cancel it\r\n\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\r\n\t\t\tbProcessed = true;\t\t\t\r\n\t\t}\r\n\t\telse if (BaseEscrowLib.GetCurrentStage(self) == BaseEscrowLib.GetContractStagePreMoveIn())\r\n\t\t{\t\r\n\t\t\tif (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) > 0 && \r\n\t\t\t\t!self._TenantConfirmedMoveIn)\r\n\t\t\t{\r\n\t\t\t\t//Landlord gets cancell fee if tenant did not signal anything after move in date\r\n\t\t\t\ttenantBal = nActualBalance - cancelFee;\t\r\n\t\t\t\tlandlBal = cancelFee;\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\r\n\t\t\t\tbProcessed = true;\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(BaseEscrowLib.GetCurrentStage(self), BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Landlord cancelled escrow. Tenant did not show up and will pay cancellation fee.\");\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\t\t        \t\t\t\t\r\n\t\t\t\t//No cancel fee\r\n\t\t\t\ttenantBal = nActualBalance;\r\n\t\t\t\tlandlBal = 0;\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\r\n\t\t\t\tbProcessed = true;\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(BaseEscrowLib.GetCurrentStage(self), BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord cancelled esqrow\");\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (BaseEscrowLib.GetCurrentStage(self) == BaseEscrowLib.GetContractStageLiving())\r\n\t\t{\r\n\t\t\tnPotentialBillableDays = (int)(nCurrentDate - self._MoveInDate) / (60 * 60 * 24);\r\n\t\t\t\r\n\t\t\tif (self._ActualMoveOutDate == 0)\r\n\t\t\t{\r\n\t\t\t\t//If landlord initiates it, he cannot claim sec deposit\r\n\t\t\t\trequire(nActualBalance >= nPotentialBillableDays * self._RentPerDay);\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateEarlyTerminatedByLandlord();\r\n\t\t\t\tlandlBal = nPotentialBillableDays * self._RentPerDay;\r\n\t\t\t\ttenantBal = nActualBalance - landlBal;\r\n\t\t\t\tbProcessed = true;\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(BaseEscrowLib.GetCurrentStage(self), BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled early move-out\");\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t//If tenant initiates it, landlord can claim sec deposit, and tenant pays cancellation fee\r\n\t\t\t\tint nContractBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\r\n\t\t\t\tcancelFee = (nContractBillableDays - nPotentialBillableDays) * self._RentPerDay / 2;\r\n\r\n\t\t\t\trequire(int(SecDeposit) <= self._SecDeposit && nActualBalance >= (nPotentialBillableDays * self._RentPerDay + int(SecDeposit) + cancelFee));\r\n\t\t\t\t\r\n\t\t\t\tif (SecDeposit == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tstate = BaseEscrowLib.GetContractStateEarlyTerminatedByTenant();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tBaseEscrowLib.ContractLogEvent(BaseEscrowLib.GetCurrentStage(self), BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled Security Deposit\");\r\n\t\t\t\t\tstate = BaseEscrowLib.GetContractStateEarlyTerminatedByTenantSecDep();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlandlBal = nPotentialBillableDays * self._RentPerDay + int(SecDeposit) + cancelFee;\r\n\t\t\t\ttenantBal = nActualBalance - landlBal;\r\n\t\t\t\tbProcessed = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (BaseEscrowLib.GetCurrentStage(self) == BaseEscrowLib.GetContractStageTermination())\r\n\t\t{\r\n\t\t\tnPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\r\n\t\t\trequire(int(SecDeposit) <= self._SecDeposit && nActualBalance >= nPotentialBillableDays * self._RentPerDay + int(SecDeposit));\r\n\t\t\tif (SecDeposit == 0)\r\n\t\t\t{\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedOK();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(BaseEscrowLib.GetCurrentStage(self), BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled Security Deposit\");\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedSecDep();\r\n\t\t\t}\r\n\t\t\tlandlBal = nPotentialBillableDays * self._RentPerDay + int(SecDeposit);\r\n\t\t\ttenantBal = nActualBalance - landlBal;\r\n\t\t\tbProcessed = true;\r\n\t\t}\r\n\r\n\t\trequire(bProcessed);\r\n\t\tif (state > 0)\r\n\t\t{\r\n\t\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,state);\r\n\t\t}\t\r\n\t}\r\n}\r\n\r\nlibrary StrictEscrowLib\r\n{\r\n\tusing BaseEscrowLib for BaseEscrowLib.EscrowContractState;\r\n\r\n    //Cancel days\r\n\tint internal constant FreeCancelBeforeMoveInDays = 60;\r\n\r\n\t//Expiration\r\n\tint internal constant ExpireAfterMoveOutDays = 14;\r\n\t\t    \r\n    \r\n\tfunction TenantTerminate(BaseEscrowLib.EscrowContractState storage self) public\r\n    {\r\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\r\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\r\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\r\n\t\tint tenantBal = 0;\r\n\t\tint landlBal = 0;\r\n\t\tint state = 0; \r\n\t\tbool bProcessed = false;\r\n        string memory sGuid;\r\n        sGuid = self._Guid;\r\n\r\n\r\n\t\tif (nActualBalance == 0)\r\n\t\t{\r\n\t\t\t//If contract is unfunded, just cancel it\r\n\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\r\n\t\t\tbProcessed = true;\t\t\t\r\n\t\t}\r\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn())\r\n\t\t{\t\t\t\r\n\t\t\tint nDaysBeforeMoveIn = (int)(self._MoveInDate - nCurrentDate) / (60 * 60 * 24);\r\n\t\t\tif (nDaysBeforeMoveIn < FreeCancelBeforeMoveInDays)\r\n\t\t\t{\r\n\t\t\t\t//Pay cancel fee\r\n\t\t\t\tint cancelFee = self._TotalAmount - self._SecDeposit;\r\n\r\n\t\t\t\t//Contract must be fully funded\r\n\t\t\t\trequire(cancelFee <= nActualBalance);\r\n\r\n\t\t\t\t//Cancel fee is the whole rent\r\n\t\t\t\ttenantBal = nActualBalance - cancelFee;\r\n\t\t\t\tlandlBal = cancelFee;\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\r\n\t\t\t\tbProcessed = true;\r\n\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant cancelled escrow. Cancellation fee will be withheld from tenant.\");\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//No cancel fee\r\n\t\t\t\ttenantBal = nActualBalance;\r\n\t\t\t\tlandlBal = 0;\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByTenant();\r\n\t\t\t\tbProcessed = true;\r\n\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant cancelled escrow.\");\r\n\t\t\t}\t\t\t\t\t\r\n\t\t}\r\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageTermination())\r\n\t\t{\r\n\t\t\t//If landlord did not close the escrow, and if it is expired, tenant may only pay for rent without sec deposit\r\n\t\t\tint nDaysAfterMoveOut = (int)(nCurrentDate - self._MoveOutDate) / (60 * 60 * 24);\r\n\r\n\t\t\tif (nDaysAfterMoveOut > ExpireAfterMoveOutDays)\r\n\t\t\t{\r\n\t\t\t\tint nPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\r\n\t\t\t\trequire(self._RentPerDay * nPotentialBillableDays <= nActualBalance);\r\n\r\n\t\t\t\tlandlBal = self._RentPerDay * nPotentialBillableDays;\r\n\t\t\t\ttenantBal = nActualBalance - landlBal;\r\n\t\t\t\tbProcessed = true;\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedOK();\r\n\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Tenant closed escrow because it was expired\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trequire(bProcessed);\r\n\t\tif (state > 0)\r\n\t\t{\r\n\t\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,state);\r\n\t\t}\r\n    }\r\n    \r\n    function TenantMoveIn(BaseEscrowLib.EscrowContractState storage self) public\r\n    {\r\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\r\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\r\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\r\n        string memory sGuid;\r\n        sGuid = self._Guid;\r\n\r\n\t\t\t\t\r\n\t\trequire(nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn() && nActualBalance >= self._TotalAmount && \r\n\t\t\t\tDateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) >= 0);\r\n\r\n        BaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Tenant signaled move-in\");\r\n\r\n\t\tself._TenantConfirmedMoveIn = true;\r\n    } \r\n\t       \r\n    function TenantTerminateMisrep(BaseEscrowLib.EscrowContractState storage self) public\r\n    {\r\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\r\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\r\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\r\n\t\tint tenantBal = 0;\r\n\t\tint landlBal = 0;\r\n\t\tint cancelFee = self._TotalAmount - self._SecDeposit;\r\n        string memory sGuid;\r\n        sGuid = self._Guid;\r\n\r\n\t\trequire(nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn() && nActualBalance >= cancelFee && \r\n\t\t\t\tDateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) == 0);\r\n\t\t\r\n\t\t//For strict escrow, give everything to landl\r\n\t\tlandlBal = cancelFee;\t\t\t\r\n\t\ttenantBal = nActualBalance - landlBal;\r\n\t\t\r\n\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Tenant signaled misrepresentation and terminated escrow!\");\r\n\t\tself._MisrepSignaled = true;\r\n\r\n\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,BaseEscrowLib.GetContractStateTerminatedMisrep());    \r\n\t}    \r\n\t\r\n\tfunction LandlordTerminate(BaseEscrowLib.EscrowContractState storage self, uint SecDeposit) public\r\n\t{\r\n\t\tint nCurrentStage = BaseEscrowLib.GetCurrentStage(self);\r\n\t\tuint nCurrentDate = BaseEscrowLib.GetCurrentDate(self);\r\n\t\tint nActualBalance = int(BaseEscrowLib.GetContractBalance(self));\r\n\t\tint tenantBal = 0;\r\n\t\tint landlBal = 0;\r\n\t\tint state = 0; \r\n\t\tbool bProcessed = false;\r\n\t\tint nPotentialBillableDays = 0;\r\n\t\tint cancelFee = self._TotalAmount - self._SecDeposit;\r\n        string memory sGuid;\r\n        sGuid = self._Guid;\r\n\r\n\t\tif (nActualBalance == 0)\r\n\t\t{\r\n\t\t\t//If contract is unfunded, just cancel it\r\n\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\r\n\t\t\tbProcessed = true;\t\t\t\r\n\t\t}\r\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStagePreMoveIn())\r\n\t\t{\t\r\n\t\t\tif (DateTime.compareDateTimesForContract(nCurrentDate, self._MoveInDate) > 0 && \r\n\t\t\t\t!self._TenantConfirmedMoveIn)\r\n\t\t\t{\r\n\t\t\t\t//Landlord gets cancell fee if tenant did not signal anything after move in date\r\n\t\t\t\ttenantBal = nActualBalance - cancelFee;\t\r\n\t\t\t\tlandlBal = cancelFee;\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\r\n\t\t\t\tbProcessed = true;\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageWarning(), nCurrentDate, sGuid, \"Landlord cancelled escrow. Tenant did not show up and will pay cancellation fee.\");\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\t\t        \t\t\t\t\r\n\t\t\t\t//No cancel fee\r\n\t\t\t\ttenantBal = nActualBalance;\r\n\t\t\t\tlandlBal = 0;\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateCancelledByLandlord();\r\n\t\t\t\tbProcessed = true;\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord cancelled esqrow\");\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageLiving())\r\n\t\t{\r\n\t\t\tnPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\r\n\t\t\t\r\n\r\n\t\t\t//If landlord initiates it, he cannot claim sec deposit\r\n\t\t\trequire(nActualBalance >= nPotentialBillableDays * self._RentPerDay);\r\n\t\t\tstate = BaseEscrowLib.GetContractStateEarlyTerminatedByLandlord();\r\n\t\t\tlandlBal = nPotentialBillableDays * self._RentPerDay;\r\n\t\t\ttenantBal = nActualBalance - landlBal;\r\n\t\t\tbProcessed = true;\r\n\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled early move-out\");\t\t\t\r\n\t\t}\r\n\t\telse if (nCurrentStage == BaseEscrowLib.GetContractStageTermination())\r\n\t\t{\r\n\t\t\tnPotentialBillableDays = (int)(self._MoveOutDate - self._MoveInDate) / (60 * 60 * 24);\r\n\t\t\trequire(int(SecDeposit) <= self._SecDeposit && nActualBalance >= nPotentialBillableDays * self._RentPerDay + int(SecDeposit));\r\n\t\t\tif (SecDeposit == 0)\r\n\t\t\t{\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedOK();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tBaseEscrowLib.ContractLogEvent(nCurrentStage, BaseEscrowLib.GetLogMessageInfo(), nCurrentDate, sGuid, \"Landlord signaled Security Deposit\");\r\n\t\t\t\tstate = BaseEscrowLib.GetContractStateTerminatedSecDep();\r\n\t\t\t}\r\n\t\t\tlandlBal = nPotentialBillableDays * self._RentPerDay + int(SecDeposit);\r\n\t\t\ttenantBal = nActualBalance - landlBal;\r\n\t\t\tbProcessed = true;\r\n\t\t}\r\n\r\n\t\trequire(bProcessed);\r\n\t\tif (state > 0)\r\n\t\t{\r\n\t\t\tBaseEscrowLib.TerminateContract(self,tenantBal,landlBal,state);\r\n\t\t}\t\r\n\t}\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private owner_;\r\n\r\n  \r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner_ = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public constant returns(address) {\r\n    return owner_;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner_);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    OwnershipTransferred(owner_, _newOwner);\r\n    owner_ = _newOwner;\r\n  }\r\n}\r\n\r\ncontract StayBitContractFactory is Ownable\r\n{\r\n    struct EscrowTokenInfo { \r\n\t\tuint _RentMin;  //Min value for rent per day\r\n\t\tuint _RentMax;  //Max value for rent per day\r\n\t\taddress _ContractAddress; //Token address\r\n\t\tuint _ContractFeeBal;  //Earned balance\r\n    }\r\n\r\n\tusing BaseEscrowLib for BaseEscrowLib.EscrowContractState;\r\n    mapping(bytes32 => BaseEscrowLib.EscrowContractState) private contracts;\r\n\tmapping(uint => EscrowTokenInfo) private supportedTokens;\r\n\tbool private CreateEnabled; // Enables / disables creation of new contracts\r\n\tbool private PercentageFee;  // true - percentage fee per contract false - fixed fee per contract\r\n\tuint ContractFee;  //Either fixed amount or percentage\r\n\t\t\r\n\tevent contractCreated(int rentPerDay, int cancelPolicy, uint moveInDate, uint moveOutDate, int secDeposit, address landlord, uint tokenId, int Id, string Guid, uint extraAmount);\r\n\tevent contractTerminated(int Id, string Guid, int State);\r\n\r\n\tfunction StayBitContractFactory()\r\n\t{\r\n\t\tCreateEnabled = true;\r\n\t\tPercentageFee = false;\r\n\t\tContractFee = 0;\r\n\t}\r\n\r\n\tfunction SetFactoryParams(bool enable, bool percFee, uint contrFee) public onlyOwner\r\n\t{\r\n\t\tCreateEnabled = enable;\t\r\n\t\tPercentageFee = percFee;\r\n\t\tContractFee = contrFee;\r\n\t}\r\n\r\n\tfunction GetFeeBalance(uint tokenId) public constant returns (uint)\r\n\t{\r\n\t\treturn supportedTokens[tokenId]._ContractFeeBal;\r\n\t}\r\n\r\n\tfunction WithdrawFeeBalance(uint tokenId, address to, uint amount) public onlyOwner\r\n\t{\t    \r\n\t\trequire(supportedTokens[tokenId]._RentMax > 0);\t\t\r\n\t\trequire(supportedTokens[tokenId]._ContractFeeBal >= amount);\t\t\r\n\t\tsupportedTokens[tokenId]._ContractFeeBal -= amount;\t\t\r\n\t\tERC20Interface tokenApi = ERC20Interface(supportedTokens[tokenId]._ContractAddress);\r\n\t\ttokenApi.transfer(to, amount);\r\n\t}\r\n\r\n\r\n\tfunction SetTokenInfo(uint tokenId, address tokenAddress, uint rentMin, uint rentMax) public onlyOwner\r\n\t{\r\n\t\tsupportedTokens[tokenId]._RentMin = rentMin;\r\n\t\tsupportedTokens[tokenId]._RentMax = rentMax;\r\n\t\tsupportedTokens[tokenId]._ContractAddress = tokenAddress;\r\n\t}\r\n\r\n\tfunction CalculateCreateFee(uint amount) public constant returns (uint)\r\n\t{\r\n\t\tuint result = 0;\r\n\t\tif (PercentageFee)\r\n\t\t{\r\n\t\t\tresult = amount * ContractFee / 100;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tresult = ContractFee;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n    //75, 1, 1533417601, 1534281601, 100, \"0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db\", \"\", \"0x4514d8d91a10bda73c10e2b8ffd99cb9646620a9\", 1, \"test\"\r\n\tfunction CreateContract(int rentPerDay, int cancelPolicy, uint moveInDate, uint moveOutDate, int secDeposit, address landlord, string doorLockData, uint tokenId, int Id, string Guid, uint extraAmount) public\r\n\t{\r\n\t\t//It must be enabled\r\n\t\trequire (CreateEnabled && rentPerDay > 0 && secDeposit > 0 && moveInDate > 0 && moveOutDate > 0 && landlord != address(0) && landlord != msg.sender && Id > 0);\r\n\r\n\t\t//Token must be supported\r\n\t\trequire(supportedTokens[tokenId]._RentMax > 0);\r\n\r\n\t\t//Rent per day values must be within range for this token\r\n\t\trequire(supportedTokens[tokenId]._RentMin <= uint(rentPerDay) && supportedTokens[tokenId]._RentMax >= uint(rentPerDay));\r\n\r\n\t\t//Check that we support cancel policy\r\n\t\t//TESTNET\r\n\t\t//require (cancelPolicy == 1 || cancelPolicy == 2 || cancelPolicy == 3);\r\n\r\n\t\t//PRODUCTION\r\n\t\trequire (cancelPolicy == 1 || cancelPolicy == 2);\r\n\r\n\t\t//Check that GUID does not exist\t\t\r\n\t\trequire (contracts[keccak256(Guid)]._Id == 0);\r\n\r\n\t\tcontracts[keccak256(Guid)]._CurrentDate = now;\r\n\t\tcontracts[keccak256(Guid)]._CreatedDate = now;\r\n\t\tcontracts[keccak256(Guid)]._RentPerDay = rentPerDay;\r\n\t\tcontracts[keccak256(Guid)]._MoveInDate = moveInDate;\r\n\t\tcontracts[keccak256(Guid)]._MoveOutDate = moveOutDate;\r\n\t\tcontracts[keccak256(Guid)]._SecDeposit = secDeposit;\r\n\t\tcontracts[keccak256(Guid)]._DoorLockData = doorLockData;\r\n\t\tcontracts[keccak256(Guid)]._landlord = landlord;\r\n\t\tcontracts[keccak256(Guid)]._tenant = msg.sender;\r\n\t\tcontracts[keccak256(Guid)]._ContractAddress = this;\t\t\r\n\t\tcontracts[keccak256(Guid)]._tokenApi = ERC20Interface(supportedTokens[tokenId]._ContractAddress);\r\n\t\tcontracts[keccak256(Guid)]._Id = Id;\r\n\t\tcontracts[keccak256(Guid)]._Guid = Guid;\r\n\t\tcontracts[keccak256(Guid)]._CancelPolicy = cancelPolicy;\r\n\r\n\t\tcontracts[keccak256(Guid)].initialize();\r\n\r\n\t\tuint256 startBalance = contracts[keccak256(Guid)]._tokenApi.balanceOf(this);\r\n\r\n\t\t//Calculate our fees\r\n\t\tsupportedTokens[tokenId]._ContractFeeBal += CalculateCreateFee(uint(contracts[keccak256(Guid)]._TotalAmount));\r\n\r\n\t\t//Check that tenant has funds\r\n\t\trequire(extraAmount + uint(contracts[keccak256(Guid)]._TotalAmount) + CalculateCreateFee(uint(contracts[keccak256(Guid)]._TotalAmount)) <= contracts[keccak256(Guid)]._tokenApi.balanceOf(msg.sender));\r\n\r\n\t\t//Fund. Token fee, if any, will be witheld here \r\n\t\tcontracts[keccak256(Guid)]._tokenApi.transferFrom(msg.sender, this, extraAmount + uint(contracts[keccak256(Guid)]._TotalAmount) + CalculateCreateFee(uint(contracts[keccak256(Guid)]._TotalAmount)));\r\n\r\n\t\t//We need to measure balance diff because some tokens (TrueUSD) charge fees per transfer\r\n\t\tcontracts[keccak256(Guid)]._Balance = contracts[keccak256(Guid)]._tokenApi.balanceOf(this) - startBalance - CalculateCreateFee(uint(contracts[keccak256(Guid)]._TotalAmount));\r\n\r\n\t\t//Check that balance is still greater than contract's amount\r\n\t\trequire(contracts[keccak256(Guid)]._Balance >= uint(contracts[keccak256(Guid)]._TotalAmount));\r\n\r\n\t\t//raise event\r\n\t\tcontractCreated(rentPerDay, cancelPolicy, moveInDate, moveOutDate, secDeposit, landlord, tokenId, Id, Guid, extraAmount);\r\n\t}\r\n\r\n\tfunction() payable\r\n\t{\t\r\n\t\trevert();\r\n\t}\r\n\r\n\tfunction SimulateCurrentDate(uint n, string Guid) public {\r\n\t    if (contracts[keccak256(Guid)]._Id != 0)\r\n\t\t{\r\n\t\t\tcontracts[keccak256(Guid)].SimulateCurrentDate(n);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tfunction GetContractInfo(string Guid) public constant returns (uint curDate, int escrState, int escrStage, bool tenantMovedIn, uint actualBalance, bool misrepSignaled, string doorLockData, int calcAmount, uint actualMoveOutDate, int cancelPolicy)\r\n\t{\r\n\t\tif (contracts[keccak256(Guid)]._Id != 0)\r\n\t\t{\r\n\t\t\tactualBalance = contracts[keccak256(Guid)].GetContractBalance();\r\n\t\t\tcurDate = contracts[keccak256(Guid)].GetCurrentDate();\r\n\t\t\ttenantMovedIn = contracts[keccak256(Guid)]._TenantConfirmedMoveIn;\r\n\t\t\tmisrepSignaled = contracts[keccak256(Guid)]._MisrepSignaled;\r\n\t\t\tdoorLockData = contracts[keccak256(Guid)]._DoorLockData;\r\n\t\t\tescrStage = contracts[keccak256(Guid)].GetCurrentStage();\r\n\t\t\tescrState = contracts[keccak256(Guid)]._State;\r\n\t\t\tcalcAmount = contracts[keccak256(Guid)]._TotalAmount;\r\n\t\t\tactualMoveOutDate = contracts[keccak256(Guid)]._ActualMoveOutDate;\r\n\t\t\tcancelPolicy = contracts[keccak256(Guid)]._CancelPolicy;\r\n\t\t}\r\n\t}\r\n\t\t\r\n\tfunction TenantTerminate(string Guid) public\r\n\t{\r\n\t\tif (contracts[keccak256(Guid)]._Id != 0)\r\n\t\t{\r\n\t\t\trequire(contracts[keccak256(Guid)]._State == BaseEscrowLib.GetContractStateActive() && msg.sender == contracts[keccak256(Guid)]._tenant);\r\n\r\n\t\t\tif (contracts[keccak256(Guid)]._CancelPolicy == 1)\r\n\t\t\t{\r\n\t\t\t\tFlexibleEscrowLib.TenantTerminate(contracts[keccak256(Guid)]);\r\n\t\t\t}\r\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 2)\r\n\t\t\t{\r\n\t\t\t\tModerateEscrowLib.TenantTerminate(contracts[keccak256(Guid)]);\r\n\t\t\t}\r\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 3)\r\n\t\t\t{\r\n\t\t\t\tStrictEscrowLib.TenantTerminate(contracts[keccak256(Guid)]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\trevert();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tSendTokens(Guid);\r\n\r\n\t\t\t//Raise event\r\n\t\t\tcontractTerminated(contracts[keccak256(Guid)]._Id, Guid, contracts[keccak256(Guid)]._State);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tfunction TenantTerminateMisrep(string Guid) public\r\n\t{\t\r\n\t\tif (contracts[keccak256(Guid)]._Id != 0)\r\n\t\t{\r\n\t\t\trequire(contracts[keccak256(Guid)]._State == BaseEscrowLib.GetContractStateActive() && msg.sender == contracts[keccak256(Guid)]._tenant);\r\n\r\n\t\t\tif (contracts[keccak256(Guid)]._CancelPolicy == 1)\r\n\t\t\t{\r\n\t\t\t\tFlexibleEscrowLib.TenantTerminateMisrep(contracts[keccak256(Guid)]);\r\n\t\t\t}\r\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 2)\r\n\t\t\t{\r\n\t\t\t\tModerateEscrowLib.TenantTerminateMisrep(contracts[keccak256(Guid)]);\r\n\t\t\t}\r\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 3)\r\n\t\t\t{\r\n\t\t\t\tStrictEscrowLib.TenantTerminateMisrep(contracts[keccak256(Guid)]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\trevert();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tSendTokens(Guid);\r\n\r\n\t\t\t//Raise event\r\n\t\t\tcontractTerminated(contracts[keccak256(Guid)]._Id, Guid, contracts[keccak256(Guid)]._State);\r\n\t\t}\r\n\t}\r\n    \r\n\tfunction TenantMoveIn(string Guid) public\r\n\t{\t\r\n\t\tif (contracts[keccak256(Guid)]._Id != 0)\r\n\t\t{\r\n\t\t\trequire(contracts[keccak256(Guid)]._State == BaseEscrowLib.GetContractStateActive() && msg.sender == contracts[keccak256(Guid)]._tenant);\r\n\r\n\t\t\tif (contracts[keccak256(Guid)]._CancelPolicy == 1)\r\n\t\t\t{\r\n\t\t\t\tFlexibleEscrowLib.TenantMoveIn(contracts[keccak256(Guid)]);\r\n\t\t\t}\r\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 2)\r\n\t\t\t{\r\n\t\t\t\tModerateEscrowLib.TenantMoveIn(contracts[keccak256(Guid)]);\r\n\t\t\t}\r\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 3)\r\n\t\t\t{\r\n\t\t\t\tStrictEscrowLib.TenantMoveIn(contracts[keccak256(Guid)]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\trevert();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction LandlordTerminate(uint SecDeposit, string Guid) public\r\n\t{\t\t\r\n\t\tif (contracts[keccak256(Guid)]._Id != 0)\r\n\t\t{\r\n\t\t\trequire(SecDeposit >= 0 && SecDeposit <= uint256(contracts[keccak256(Guid)]._SecDeposit));\r\n\t\t\trequire(contracts[keccak256(Guid)]._State == BaseEscrowLib.GetContractStateActive() && msg.sender == contracts[keccak256(Guid)]._landlord);\r\n\r\n\t\t\tif (contracts[keccak256(Guid)]._CancelPolicy == 1)\r\n\t\t\t{\r\n\t\t\t\tFlexibleEscrowLib.LandlordTerminate(contracts[keccak256(Guid)], SecDeposit);\r\n\t\t\t}\r\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 2)\r\n\t\t\t{\r\n\t\t\t\tModerateEscrowLib.LandlordTerminate(contracts[keccak256(Guid)], SecDeposit);\r\n\t\t\t}\r\n\t\t\telse if (contracts[keccak256(Guid)]._CancelPolicy == 3)\r\n\t\t\t{\r\n\t\t\t\tStrictEscrowLib.LandlordTerminate(contracts[keccak256(Guid)], SecDeposit);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\trevert();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tSendTokens(Guid);\r\n\r\n\t\t\t//Raise event\r\n\t\t\tcontractTerminated(contracts[keccak256(Guid)]._Id, Guid, contracts[keccak256(Guid)]._State);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction SendTokens(string Guid) private\r\n\t{\t\t\r\n\t\tif (contracts[keccak256(Guid)]._Id != 0)\r\n\t\t{\r\n\t\t\tif (contracts[keccak256(Guid)]._landlBal > 0)\r\n\t\t\t{\t\r\n\t\t\t\tuint landlBal = uint(contracts[keccak256(Guid)]._landlBal);\r\n\t\t\t\tcontracts[keccak256(Guid)]._landlBal = 0;\t\t\r\n\t\t\t\tcontracts[keccak256(Guid)]._tokenApi.transfer(contracts[keccak256(Guid)]._landlord, landlBal);\r\n\t\t\t\tcontracts[keccak256(Guid)]._Balance -= landlBal;\t\t\t\t\t\t\r\n\t\t\t}\r\n\t    \r\n\t\t\tif (contracts[keccak256(Guid)]._tenantBal > 0)\r\n\t\t\t{\t\t\t\r\n\t\t\t\tuint tenantBal = uint(contracts[keccak256(Guid)]._tenantBal);\r\n\t\t\t\tcontracts[keccak256(Guid)]._tenantBal = 0;\r\n\t\t\t\tcontracts[keccak256(Guid)]._tokenApi.transfer(contracts[keccak256(Guid)]._tenant, tenantBal);\t\t\t\r\n\t\t\t\tcontracts[keccak256(Guid)]._Balance -= tenantBal;\r\n\t\t\t}\r\n\t\t}\t\t\t    \r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"n\",\"type\":\"uint256\"},{\"name\":\"Guid\",\"type\":\"string\"}],\"name\":\"SimulateCurrentDate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"rentPerDay\",\"type\":\"int256\"},{\"name\":\"cancelPolicy\",\"type\":\"int256\"},{\"name\":\"moveInDate\",\"type\":\"uint256\"},{\"name\":\"moveOutDate\",\"type\":\"uint256\"},{\"name\":\"secDeposit\",\"type\":\"int256\"},{\"name\":\"landlord\",\"type\":\"address\"},{\"name\":\"doorLockData\",\"type\":\"string\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"Id\",\"type\":\"int256\"},{\"name\":\"Guid\",\"type\":\"string\"},{\"name\":\"extraAmount\",\"type\":\"uint256\"}],\"name\":\"CreateContract\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Guid\",\"type\":\"string\"}],\"name\":\"TenantTerminate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"SecDeposit\",\"type\":\"uint256\"},{\"name\":\"Guid\",\"type\":\"string\"}],\"name\":\"LandlordTerminate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enable\",\"type\":\"bool\"},{\"name\":\"percFee\",\"type\":\"bool\"},{\"name\":\"contrFee\",\"type\":\"uint256\"}],\"name\":\"SetFactoryParams\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"Guid\",\"type\":\"string\"}],\"name\":\"GetContractInfo\",\"outputs\":[{\"name\":\"curDate\",\"type\":\"uint256\"},{\"name\":\"escrState\",\"type\":\"int256\"},{\"name\":\"escrStage\",\"type\":\"int256\"},{\"name\":\"tenantMovedIn\",\"type\":\"bool\"},{\"name\":\"actualBalance\",\"type\":\"uint256\"},{\"name\":\"misrepSignaled\",\"type\":\"bool\"},{\"name\":\"doorLockData\",\"type\":\"string\"},{\"name\":\"calcAmount\",\"type\":\"int256\"},{\"name\":\"actualMoveOutDate\",\"type\":\"uint256\"},{\"name\":\"cancelPolicy\",\"type\":\"int256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFeeBalance\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"rentMin\",\"type\":\"uint256\"},{\"name\":\"rentMax\",\"type\":\"uint256\"}],\"name\":\"SetTokenInfo\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CalculateCreateFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"GetFeeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Guid\",\"type\":\"string\"}],\"name\":\"TenantTerminateMisrep\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Guid\",\"type\":\"string\"}],\"name\":\"TenantMoveIn\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rentPerDay\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"cancelPolicy\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"moveInDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"moveOutDate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"secDeposit\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"landlord\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Id\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"Guid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"extraAmount\",\"type\":\"uint256\"}],\"name\":\"contractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"Id\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"Guid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"State\",\"type\":\"int256\"}],\"name\":\"contractTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StayBitContractFactory","CompilerVersion":"v0.4.15+commit.bbb8e64f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"BaseEscrowLib:32d5846107480154cf011068a7f4769129727855;FlexibleEscrowLib:925dec1f875b55f24754ef30a9237577b6a8b6b7;ModerateEscrowLib:6461366873e25dae881127d834c36fec0751928f;StrictEscrowLib:b42f3153ceca8892cfb54eefbb947e7f4d19cc9f","SwarmSource":"bzzr://4ed04dfca8bd29b9dc792e8fe5f1138a07432897c268e97a81b3ae464bf2532f"}]}