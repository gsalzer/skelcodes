{"status":"1","message":"OK","result":[{"SourceCode":"// Written by Nick Poulden, Tyler Yasaka, and the Origin Protocol Team.\r\npragma solidity ^0.4.13;\r\n\r\nlibrary ClaimHolderLibrary {\r\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\r\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\r\n\r\n    struct Claim {\r\n        uint256 topic;\r\n        uint256 scheme;\r\n        address issuer; // msg.sender\r\n        bytes signature; // this.address + topic + data\r\n        bytes data;\r\n        string uri;\r\n    }\r\n\r\n    struct Claims {\r\n        mapping (bytes32 => Claim) byId;\r\n        mapping (uint256 => bytes32[]) byTopic;\r\n    }\r\n\r\n    function addClaim(\r\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\r\n        Claims storage _claims,\r\n        uint256 _topic,\r\n        uint256 _scheme,\r\n        address _issuer,\r\n        bytes _signature,\r\n        bytes _data,\r\n        string _uri\r\n    )\r\n        public\r\n        returns (bytes32 claimRequestId)\r\n    {\r\n        if (msg.sender != address(this)) {\r\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 3), \"Sender does not have claim signer key\");\r\n        }\r\n\r\n        bytes32 claimId = keccak256(abi.encodePacked(_issuer, _topic));\r\n\r\n        if (_claims.byId[claimId].issuer != _issuer) {\r\n            _claims.byTopic[_topic].push(claimId);\r\n        }\r\n\r\n        _claims.byId[claimId].topic = _topic;\r\n        _claims.byId[claimId].scheme = _scheme;\r\n        _claims.byId[claimId].issuer = _issuer;\r\n        _claims.byId[claimId].signature = _signature;\r\n        _claims.byId[claimId].data = _data;\r\n        _claims.byId[claimId].uri = _uri;\r\n\r\n        emit ClaimAdded(\r\n            claimId,\r\n            _topic,\r\n            _scheme,\r\n            _issuer,\r\n            _signature,\r\n            _data,\r\n            _uri\r\n        );\r\n\r\n        return claimId;\r\n    }\r\n\r\n    function addClaims(\r\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\r\n        Claims storage _claims,\r\n        uint256[] _topic,\r\n        address[] _issuer,\r\n        bytes _signature,\r\n        bytes _data,\r\n        uint256[] _offsets\r\n    )\r\n        public\r\n    {\r\n        uint offset = 0;\r\n        for (uint16 i = 0; i < _topic.length; i++) {\r\n            addClaim(\r\n                _keyHolderData,\r\n                _claims,\r\n                _topic[i],\r\n                1,\r\n                _issuer[i],\r\n                getBytes(_signature, (i * 65), 65),\r\n                getBytes(_data, offset, _offsets[i]),\r\n                \"\"\r\n            );\r\n            offset += _offsets[i];\r\n        }\r\n    }\r\n\r\n    function removeClaim(\r\n        KeyHolderLibrary.KeyHolderData storage _keyHolderData,\r\n        Claims storage _claims,\r\n        bytes32 _claimId\r\n    )\r\n        public\r\n        returns (bool success)\r\n    {\r\n        if (msg.sender != address(this)) {\r\n            require(KeyHolderLibrary.keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\");\r\n        }\r\n\r\n        emit ClaimRemoved(\r\n            _claimId,\r\n            _claims.byId[_claimId].topic,\r\n            _claims.byId[_claimId].scheme,\r\n            _claims.byId[_claimId].issuer,\r\n            _claims.byId[_claimId].signature,\r\n            _claims.byId[_claimId].data,\r\n            _claims.byId[_claimId].uri\r\n        );\r\n\r\n        delete _claims.byId[_claimId];\r\n        return true;\r\n    }\r\n\r\n    function getClaim(Claims storage _claims, bytes32 _claimId)\r\n        public\r\n        view\r\n        returns(\r\n          uint256 topic,\r\n          uint256 scheme,\r\n          address issuer,\r\n          bytes signature,\r\n          bytes data,\r\n          string uri\r\n        )\r\n    {\r\n        return (\r\n            _claims.byId[_claimId].topic,\r\n            _claims.byId[_claimId].scheme,\r\n            _claims.byId[_claimId].issuer,\r\n            _claims.byId[_claimId].signature,\r\n            _claims.byId[_claimId].data,\r\n            _claims.byId[_claimId].uri\r\n        );\r\n    }\r\n\r\n    function getBytes(bytes _str, uint256 _offset, uint256 _length)\r\n        internal\r\n        pure\r\n        returns (bytes)\r\n    {\r\n        bytes memory sig = new bytes(_length);\r\n        uint256 j = 0;\r\n        for (uint256 k = _offset; k < _offset + _length; k++) {\r\n            sig[j] = _str[k];\r\n            j++;\r\n        }\r\n        return sig;\r\n    }\r\n}\r\n\r\ncontract ERC725 {\r\n\r\n    uint256 constant MANAGEMENT_KEY = 1;\r\n    uint256 constant ACTION_KEY = 2;\r\n    uint256 constant CLAIM_SIGNER_KEY = 3;\r\n    uint256 constant ENCRYPTION_KEY = 4;\r\n\r\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n    event Approved(uint256 indexed executionId, bool approved);\r\n\r\n    function getKey(bytes32 _key) public view returns(uint256[] purposes, uint256 keyType, bytes32 key);\r\n    function keyHasPurpose(bytes32 _key, uint256 _purpose) public view returns (bool exists);\r\n    function getKeysByPurpose(uint256 _purpose) public view returns(bytes32[] keys);\r\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) public returns (bool success);\r\n    function removeKey(bytes32 _key, uint256 _purpose) public returns (bool success);\r\n    function execute(address _to, uint256 _value, bytes _data) public returns (uint256 executionId);\r\n    function approve(uint256 _id, bool _approve) public returns (bool success);\r\n}\r\n\r\ncontract ERC735 {\r\n\r\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\r\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\r\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\r\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\r\n\r\n    struct Claim {\r\n        uint256 topic;\r\n        uint256 scheme;\r\n        address issuer; // msg.sender\r\n        bytes signature; // this.address + topic + data\r\n        bytes data;\r\n        string uri;\r\n    }\r\n\r\n    function getClaim(bytes32 _claimId) public view returns(uint256 topic, uint256 scheme, address issuer, bytes signature, bytes data, string uri);\r\n    function getClaimIdsByTopic(uint256 _topic) public view returns(bytes32[] claimIds);\r\n    function addClaim(uint256 _topic, uint256 _scheme, address issuer, bytes _signature, bytes _data, string _uri) public returns (bytes32 claimRequestId);\r\n    function removeClaim(bytes32 _claimId) public returns (bool success);\r\n}\r\n\r\ncontract KeyHolder is ERC725 {\r\n    KeyHolderLibrary.KeyHolderData keyHolderData;\r\n\r\n    constructor() public {\r\n        KeyHolderLibrary.init(keyHolderData);\r\n    }\r\n\r\n    function getKey(bytes32 _key)\r\n        public\r\n        view\r\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\r\n    {\r\n        return KeyHolderLibrary.getKey(keyHolderData, _key);\r\n    }\r\n\r\n    function getKeyPurposes(bytes32 _key)\r\n        public\r\n        view\r\n        returns(uint256[] purposes)\r\n    {\r\n        return KeyHolderLibrary.getKeyPurposes(keyHolderData, _key);\r\n    }\r\n\r\n    function getKeysByPurpose(uint256 _purpose)\r\n        public\r\n        view\r\n        returns(bytes32[] _keys)\r\n    {\r\n        return KeyHolderLibrary.getKeysByPurpose(keyHolderData, _purpose);\r\n    }\r\n\r\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _type)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        return KeyHolderLibrary.addKey(keyHolderData, _key, _purpose, _type);\r\n    }\r\n\r\n    function approve(uint256 _id, bool _approve)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        return KeyHolderLibrary.approve(keyHolderData, _id, _approve);\r\n    }\r\n\r\n    function execute(address _to, uint256 _value, bytes _data)\r\n        public\r\n        returns (uint256 executionId)\r\n    {\r\n        return KeyHolderLibrary.execute(keyHolderData, _to, _value, _data);\r\n    }\r\n\r\n    function removeKey(bytes32 _key, uint256 _purpose)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        return KeyHolderLibrary.removeKey(keyHolderData, _key, _purpose);\r\n    }\r\n\r\n    function keyHasPurpose(bytes32 _key, uint256 _purpose)\r\n        public\r\n        view\r\n        returns(bool exists)\r\n    {\r\n        return KeyHolderLibrary.keyHasPurpose(keyHolderData, _key, _purpose);\r\n    }\r\n\r\n}\r\n\r\ncontract ClaimHolder is KeyHolder, ERC735 {\r\n\r\n    ClaimHolderLibrary.Claims claims;\r\n\r\n    function addClaim(\r\n        uint256 _topic,\r\n        uint256 _scheme,\r\n        address _issuer,\r\n        bytes _signature,\r\n        bytes _data,\r\n        string _uri\r\n    )\r\n        public\r\n        returns (bytes32 claimRequestId)\r\n    {\r\n        return ClaimHolderLibrary.addClaim(\r\n            keyHolderData,\r\n            claims,\r\n            _topic,\r\n            _scheme,\r\n            _issuer,\r\n            _signature,\r\n            _data,\r\n            _uri\r\n        );\r\n    }\r\n\r\n    function addClaims(\r\n        uint256[] _topic,\r\n        address[] _issuer,\r\n        bytes _signature,\r\n        bytes _data,\r\n        uint256[] _offsets\r\n    )\r\n        public\r\n    {\r\n        ClaimHolderLibrary.addClaims(\r\n            keyHolderData,\r\n            claims,\r\n            _topic,\r\n            _issuer,\r\n            _signature,\r\n            _data,\r\n            _offsets\r\n        );\r\n    }\r\n\r\n    function removeClaim(bytes32 _claimId) public returns (bool success) {\r\n        return ClaimHolderLibrary.removeClaim(keyHolderData, claims, _claimId);\r\n    }\r\n\r\n    function getClaim(bytes32 _claimId)\r\n        public\r\n        view\r\n        returns(\r\n            uint256 topic,\r\n            uint256 scheme,\r\n            address issuer,\r\n            bytes signature,\r\n            bytes data,\r\n            string uri\r\n        )\r\n    {\r\n        return ClaimHolderLibrary.getClaim(claims, _claimId);\r\n    }\r\n\r\n    function getClaimIdsByTopic(uint256 _topic)\r\n        public\r\n        view\r\n        returns(bytes32[] claimIds)\r\n    {\r\n        return claims.byTopic[_topic];\r\n    }\r\n}\r\n\r\ncontract ClaimHolderRegistered is ClaimHolder {\r\n\r\n    constructor (\r\n        address _userRegistryAddress\r\n    )\r\n        public\r\n    {\r\n        V00_UserRegistry userRegistry = V00_UserRegistry(_userRegistryAddress);\r\n        userRegistry.registerUser();\r\n    }\r\n}\r\n\r\ncontract ClaimHolderPresigned is ClaimHolderRegistered {\r\n\r\n    constructor(\r\n        address _userRegistryAddress,\r\n        uint256[] _topic,\r\n        address[] _issuer,\r\n        bytes _signature,\r\n        bytes _data,\r\n        uint256[] _offsets\r\n    )\r\n        ClaimHolderRegistered(_userRegistryAddress)\r\n        public\r\n    {\r\n        ClaimHolderLibrary.addClaims(\r\n            keyHolderData,\r\n            claims,\r\n            _topic,\r\n            _issuer,\r\n            _signature,\r\n            _data,\r\n            _offsets\r\n        );\r\n    }\r\n}\r\n\r\nlibrary KeyHolderLibrary {\r\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\r\n    event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\r\n    event Approved(uint256 indexed executionId, bool approved);\r\n\r\n    struct Key {\r\n        uint256[] purposes; //e.g., MANAGEMENT_KEY = 1, ACTION_KEY = 2, etc.\r\n        uint256 keyType; // e.g. 1 = ECDSA, 2 = RSA, etc.\r\n        bytes32 key;\r\n    }\r\n\r\n    struct KeyHolderData {\r\n        uint256 executionNonce;\r\n        mapping (bytes32 => Key) keys;\r\n        mapping (uint256 => bytes32[]) keysByPurpose;\r\n        mapping (uint256 => Execution) executions;\r\n    }\r\n\r\n    struct Execution {\r\n        address to;\r\n        uint256 value;\r\n        bytes data;\r\n        bool approved;\r\n        bool executed;\r\n    }\r\n\r\n    function init(KeyHolderData storage _keyHolderData)\r\n        public\r\n    {\r\n        bytes32 _key = keccak256(abi.encodePacked(msg.sender));\r\n        _keyHolderData.keys[_key].key = _key;\r\n        _keyHolderData.keys[_key].purposes.push(1);\r\n        _keyHolderData.keys[_key].keyType = 1;\r\n        _keyHolderData.keysByPurpose[1].push(_key);\r\n        emit KeyAdded(_key, 1, 1);\r\n    }\r\n\r\n    function getKey(KeyHolderData storage _keyHolderData, bytes32 _key)\r\n        public\r\n        view\r\n        returns(uint256[] purposes, uint256 keyType, bytes32 key)\r\n    {\r\n        return (\r\n            _keyHolderData.keys[_key].purposes,\r\n            _keyHolderData.keys[_key].keyType,\r\n            _keyHolderData.keys[_key].key\r\n        );\r\n    }\r\n\r\n    function getKeyPurposes(KeyHolderData storage _keyHolderData, bytes32 _key)\r\n        public\r\n        view\r\n        returns(uint256[] purposes)\r\n    {\r\n        return (_keyHolderData.keys[_key].purposes);\r\n    }\r\n\r\n    function getKeysByPurpose(KeyHolderData storage _keyHolderData, uint256 _purpose)\r\n        public\r\n        view\r\n        returns(bytes32[] _keys)\r\n    {\r\n        return _keyHolderData.keysByPurpose[_purpose];\r\n    }\r\n\r\n    function addKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose, uint256 _type)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(_keyHolderData.keys[_key].key != _key, \"Key already exists\"); // Key should not already exist\r\n        if (msg.sender != address(this)) {\r\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\r\n        }\r\n\r\n        _keyHolderData.keys[_key].key = _key;\r\n        _keyHolderData.keys[_key].purposes.push(_purpose);\r\n        _keyHolderData.keys[_key].keyType = _type;\r\n\r\n        _keyHolderData.keysByPurpose[_purpose].push(_key);\r\n\r\n        emit KeyAdded(_key, _purpose, _type);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(KeyHolderData storage _keyHolderData, uint256 _id, bool _approve)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have action key\");\r\n        require(!_keyHolderData.executions[_id].executed, \"Already executed\");\r\n\r\n        emit Approved(_id, _approve);\r\n\r\n        if (_approve == true) {\r\n            _keyHolderData.executions[_id].approved = true;\r\n            success = _keyHolderData.executions[_id].to.call(_keyHolderData.executions[_id].data, 0);\r\n            if (success) {\r\n                _keyHolderData.executions[_id].executed = true;\r\n                emit Executed(\r\n                    _id,\r\n                    _keyHolderData.executions[_id].to,\r\n                    _keyHolderData.executions[_id].value,\r\n                    _keyHolderData.executions[_id].data\r\n                );\r\n                return;\r\n            } else {\r\n                emit ExecutionFailed(\r\n                    _id,\r\n                    _keyHolderData.executions[_id].to,\r\n                    _keyHolderData.executions[_id].value,\r\n                    _keyHolderData.executions[_id].data\r\n                );\r\n                return;\r\n            }\r\n        } else {\r\n            _keyHolderData.executions[_id].approved = false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function execute(KeyHolderData storage _keyHolderData, address _to, uint256 _value, bytes _data)\r\n        public\r\n        returns (uint256 executionId)\r\n    {\r\n        require(!_keyHolderData.executions[_keyHolderData.executionNonce].executed, \"Already executed\");\r\n        _keyHolderData.executions[_keyHolderData.executionNonce].to = _to;\r\n        _keyHolderData.executions[_keyHolderData.executionNonce].value = _value;\r\n        _keyHolderData.executions[_keyHolderData.executionNonce].data = _data;\r\n\r\n        emit ExecutionRequested(_keyHolderData.executionNonce, _to, _value, _data);\r\n\r\n        if (keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),1) || keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)),2)) {\r\n            approve(_keyHolderData, _keyHolderData.executionNonce, true);\r\n        }\r\n\r\n        _keyHolderData.executionNonce++;\r\n        return _keyHolderData.executionNonce-1;\r\n    }\r\n\r\n    function removeKey(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        if (msg.sender != address(this)) {\r\n            require(keyHasPurpose(_keyHolderData, keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have management key\"); // Sender has MANAGEMENT_KEY\r\n        }\r\n\r\n        require(_keyHolderData.keys[_key].key == _key, \"No such key\");\r\n        emit KeyRemoved(_key, _purpose, _keyHolderData.keys[_key].keyType);\r\n\r\n        // Remove purpose from key\r\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\r\n        for (uint i = 0; i < purposes.length; i++) {\r\n            if (purposes[i] == _purpose) {\r\n                purposes[i] = purposes[purposes.length - 1];\r\n                delete purposes[purposes.length - 1];\r\n                purposes.length--;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // If no more purposes, delete key\r\n        if (purposes.length == 0) {\r\n            delete _keyHolderData.keys[_key];\r\n        }\r\n\r\n        // Remove key from keysByPurpose\r\n        bytes32[] storage keys = _keyHolderData.keysByPurpose[_purpose];\r\n        for (uint j = 0; j < keys.length; j++) {\r\n            if (keys[j] == _key) {\r\n                keys[j] = keys[keys.length - 1];\r\n                delete keys[keys.length - 1];\r\n                keys.length--;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function keyHasPurpose(KeyHolderData storage _keyHolderData, bytes32 _key, uint256 _purpose)\r\n        public\r\n        view\r\n        returns(bool result)\r\n    {\r\n        bool isThere;\r\n        if (_keyHolderData.keys[_key].key == 0) {\r\n            return false;\r\n        }\r\n\r\n        uint256[] storage purposes = _keyHolderData.keys[_key].purposes;\r\n        for (uint i = 0; i < purposes.length; i++) {\r\n            if (purposes[i] <= _purpose) {\r\n                isThere = true;\r\n                break;\r\n            }\r\n        }\r\n        return isThere;\r\n    }\r\n}\r\n\r\ncontract V00_UserRegistry {\r\n    /*\r\n    * Events\r\n    */\r\n\r\n    event NewUser(address _address, address _identity);\r\n\r\n    /*\r\n    * Storage\r\n    */\r\n\r\n    // Mapping from ethereum wallet to ERC725 identity\r\n    mapping(address => address) public users;\r\n\r\n    /*\r\n    * Public functions\r\n    */\r\n\r\n    /// @dev registerUser(): Add a user to the registry\r\n    function registerUser()\r\n        public\r\n    {\r\n        users[tx.origin] = msg.sender;\r\n        emit NewUser(tx.origin, msg.sender);\r\n    }\r\n\r\n    /// @dev clearUser(): Remove user from the registry\r\n    function clearUser()\r\n        public\r\n    {\r\n        users[msg.sender] = 0;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"registerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"NewUser\",\"type\":\"event\"}]","ContractName":"V00_UserRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bd09f6a673292da71dc1b7016f1602fd54bcd4af0230159154403e81bafc9431"}]}