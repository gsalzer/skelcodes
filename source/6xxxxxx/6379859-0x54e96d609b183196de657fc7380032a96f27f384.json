{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\ncontract PullPayment {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) public payments;\r\n  uint256 public totalPayments;\r\n\r\n  /**\r\n  * @dev Withdraw accumulated balance, called by payee.\r\n  */\r\n  function withdrawPayments() public {\r\n    address payee = msg.sender;\r\n    uint256 payment = payments[payee];\r\n\r\n    require(payment != 0);\r\n    require(address(this).balance >= payment);\r\n\r\n    totalPayments = totalPayments.sub(payment);\r\n    payments[payee] = 0;\r\n\r\n    payee.transfer(payment);\r\n  }\r\n\r\n  /**\r\n  * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n  * @param dest The destination address of the funds.\r\n  * @param amount The amount to transfer.\r\n  */\r\n  function asyncSend(address dest, uint256 amount) internal {\r\n    payments[dest] = payments[dest].add(amount);\r\n    totalPayments = totalPayments.add(amount);\r\n  }\r\n}\r\ncontract CryptoEngineerInterface {\r\n    uint256 public prizePool = 0;\r\n\r\n    function calculateCurrentVirus(address /*_addr*/) public pure returns(uint256 /*_currentVirus*/) {}\r\n    function subVirus(address /*_addr*/, uint256 /*_value*/) public {}\r\n    function claimPrizePool(address /*_addr*/, uint256 /*_value*/) public {} \r\n    function fallback() public payable {}\r\n}\r\ninterface CryptoMiningWarInterface {\r\n    function addCrystal( address /*_addr*/, uint256 /*_value*/ ) external;\r\n    function subCrystal( address /*_addr*/, uint256 /*_value*/ ) external;\r\n}\r\ncontract CryptoBossWannaCry is PullPayment{\r\n    bool init = false;\r\n\taddress public administrator;\r\n    uint256 public bossRoundNumber;\r\n    uint256 private randNonce;\r\n    uint256 public BOSS_HP_DEFAULT = 10000000; \r\n    uint256 public HALF_TIME_ATK_BOSS = 0;\r\n    // engineer game infomation\r\n    uint256 constant public VIRUS_MINING_PERIOD = 86400; \r\n    uint256 public BOSS_DEF_DEFFAULT = 0;\r\n    CryptoEngineerInterface public EngineerContract;\r\n    CryptoMiningWarInterface public MiningwarContract;\r\n    \r\n    // player information\r\n    mapping(address => PlayerData) public players;\r\n    // boss information\r\n    mapping(uint256 => BossData) public bossData;\r\n        \r\n    struct PlayerData {\r\n        uint256 currentBossRoundNumber;\r\n        uint256 lastBossRoundNumber;\r\n        uint256 win;\r\n        uint256 share;\r\n        uint256 dame; \r\n        uint256 nextTimeAtk;\r\n    }\r\n\r\n    struct BossData {\r\n        uint256 bossRoundNumber;\r\n        uint256 bossHp;\r\n        uint256 def;\r\n        uint256 prizePool;\r\n        address playerLastAtk;\r\n        uint256 totalDame;\r\n        bool ended;\r\n    }\r\n    event eventAttackBoss(\r\n        uint256 bossRoundNumber,\r\n        address playerAtk,\r\n        uint256 virusAtk,\r\n        uint256 dame,\r\n        uint256 timeAtk,\r\n        bool isLastHit,\r\n        uint256 crystalsReward\r\n    );\r\n    event eventEndAtkBoss(\r\n        uint256 bossRoundNumber,\r\n        address playerWin,\r\n        uint256 ethBonus\r\n    );\r\n    modifier disableContract()\r\n    {\r\n        require(tx.origin == msg.sender);\r\n        _;\r\n    }\r\n    modifier isAdministrator()\r\n    {\r\n        require(msg.sender == administrator);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        administrator = msg.sender;\r\n        // set interface main contract\r\n        EngineerContract = CryptoEngineerInterface(0x69fd0e5d0a93bf8bac02c154d343a8e3709adabf);\r\n        MiningwarContract = CryptoMiningWarInterface(0xf84c61bb982041c030b8580d1634f00fffb89059);\r\n    }\r\n    function () public payable\r\n    {\r\n        \r\n    }\r\n    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\r\n    {\r\n    \t_isContractMiniGame = true;\r\n    }\r\n\r\n    /** \r\n    * @dev Main Contract call this function to setup mini game.\r\n    */\r\n    function setupMiniGame( uint256 /*_miningWarRoundNumber*/, uint256 /*_miningWarDeadline*/ ) public\r\n    {\r\n    \r\n    }\r\n     //@dev use this function in case of bug\r\n    function upgrade(address addr) public \r\n    {\r\n        require(msg.sender == administrator);\r\n        selfdestruct(addr);\r\n    }\r\n\r\n    function startGame() public isAdministrator\r\n    {\r\n        require(init == false);\r\n        init = true;\r\n        bossData[bossRoundNumber].ended = true;\r\n    \r\n        startNewBoss();\r\n    }\r\n    /**\r\n    * @dev set defence for boss\r\n    * @param _value number defence\r\n    */\r\n    function setDefenceBoss(uint256 _value) public isAdministrator\r\n    {\r\n        BOSS_DEF_DEFFAULT = _value;  \r\n    }\r\n    /**\r\n    * @dev set HP for boss\r\n    * @param _value number HP default\r\n    */\r\n    function setBossHPDefault(uint256 _value) public isAdministrator\r\n    {\r\n        BOSS_HP_DEFAULT = _value;  \r\n    }\r\n    function setHalfTimeAtkBoss(uint256 _value) public isAdministrator\r\n    {\r\n        HALF_TIME_ATK_BOSS = _value;  \r\n    }\r\n    function startNewBoss() private\r\n    {\r\n        require(bossData[bossRoundNumber].ended == true);\r\n\r\n        bossRoundNumber = bossRoundNumber + 1;\r\n\r\n        uint256 bossHp = BOSS_HP_DEFAULT * bossRoundNumber;\r\n        // claim 5% of current prizePool as rewards.\r\n        uint256 engineerPrizePool = getEngineerPrizePool();\r\n        uint256 prizePool = SafeMath.div(SafeMath.mul(engineerPrizePool, 5),100);\r\n        EngineerContract.claimPrizePool(address(this), prizePool); \r\n\r\n        bossData[bossRoundNumber] = BossData(bossRoundNumber, bossHp, BOSS_DEF_DEFFAULT, prizePool, 0x0, 0, false);\r\n    }\r\n    function endAtkBoss() private \r\n    {\r\n        require(bossData[bossRoundNumber].ended == false);\r\n        require(bossData[bossRoundNumber].totalDame >= bossData[bossRoundNumber].bossHp);\r\n\r\n        BossData storage b = bossData[bossRoundNumber];\r\n        b.ended = true;\r\n         // update eth bonus for player last hit\r\n        uint256 ethBonus = SafeMath.div( SafeMath.mul(b.prizePool, 5), 100 );\r\n\r\n        if (b.playerLastAtk != 0x0) {\r\n            PlayerData storage p = players[b.playerLastAtk];\r\n            p.win =  p.win + ethBonus;\r\n        }\r\n\r\n        emit eventEndAtkBoss(bossRoundNumber, b.playerLastAtk, ethBonus);\r\n        startNewBoss();\r\n    }\r\n    /**\r\n    * @dev player atk the boss\r\n    * @param _value number virus for this attack boss\r\n    */\r\n    function atkBoss(uint256 _value) public disableContract\r\n    {\r\n        require(bossData[bossRoundNumber].ended == false);\r\n        require(bossData[bossRoundNumber].totalDame < bossData[bossRoundNumber].bossHp);\r\n        require(players[msg.sender].nextTimeAtk <= now);\r\n\r\n        uint256 currentVirus = getEngineerCurrentVirus(msg.sender);        \r\n        if (_value > currentVirus) { revert(); }\r\n        EngineerContract.subVirus(msg.sender, _value);\r\n        \r\n        uint256 rate = 50 + randomNumber(msg.sender, 60); // 50 - 110%\r\n        \r\n        uint256 atk = SafeMath.div(SafeMath.mul(_value, rate), 100);\r\n        \r\n        updateShareETH(msg.sender);\r\n\r\n        // update dame\r\n        BossData storage b = bossData[bossRoundNumber];\r\n        \r\n        uint256 currentTotalDame = b.totalDame;\r\n        uint256 dame = 0;\r\n        if (atk > b.def) {\r\n            dame = SafeMath.sub(atk, b.def);\r\n        }\r\n\r\n        b.totalDame = SafeMath.min(SafeMath.add(currentTotalDame, dame), b.bossHp);\r\n        b.playerLastAtk = msg.sender;\r\n\r\n        dame = SafeMath.sub(b.totalDame, currentTotalDame);\r\n\r\n        // bonus crystals\r\n        uint256 crystalsBonus = SafeMath.div(SafeMath.mul(dame, 5), 100);\r\n        MiningwarContract.addCrystal(msg.sender, crystalsBonus);\r\n        // update player\r\n        PlayerData storage p = players[msg.sender];\r\n\r\n        p.nextTimeAtk = now + HALF_TIME_ATK_BOSS;\r\n\r\n        if (p.currentBossRoundNumber == bossRoundNumber) {\r\n            p.dame = SafeMath.add(p.dame, dame);\r\n        } else {\r\n            p.currentBossRoundNumber = bossRoundNumber;\r\n            p.dame = dame;\r\n        }\r\n\r\n        bool isLastHit;\r\n        if (b.totalDame >= b.bossHp) {\r\n            isLastHit = true;\r\n            endAtkBoss();\r\n        }\r\n        \r\n        // emit event attack boss\r\n        emit eventAttackBoss(b.bossRoundNumber, msg.sender, _value, dame, now, isLastHit, crystalsBonus);\r\n    }\r\n \r\n    function updateShareETH(address _addr) private\r\n    {\r\n        PlayerData storage p = players[_addr];\r\n        \r\n        if ( \r\n            bossData[p.currentBossRoundNumber].ended == true &&\r\n            p.lastBossRoundNumber < p.currentBossRoundNumber\r\n            ) {\r\n            p.share = SafeMath.add(p.share, calculateShareETH(msg.sender, p.currentBossRoundNumber));\r\n            p.lastBossRoundNumber = p.currentBossRoundNumber;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev calculate share Eth of player\r\n    */\r\n    function calculateShareETH(address _addr, uint256 _bossRoundNumber) public view returns(uint256 _share)\r\n    {\r\n        PlayerData memory p = players[_addr];\r\n        BossData memory b = bossData[_bossRoundNumber];\r\n        if ( \r\n            p.lastBossRoundNumber >= p.currentBossRoundNumber && \r\n            p.currentBossRoundNumber != 0 \r\n            ) {\r\n            _share = 0;\r\n        } else {\r\n            _share = SafeMath.div(SafeMath.mul(SafeMath.mul(b.prizePool, 95), p.dame), SafeMath.mul(b.totalDame, 100)); // prizePool * 95% * playerDame / totalDame \r\n        } \r\n        if (b.ended == false) {\r\n            _share = 0;\r\n        }\r\n    }\r\n\r\n    function withdrawReward() public disableContract\r\n    {\r\n        updateShareETH(msg.sender);\r\n        PlayerData storage p = players[msg.sender];\r\n        \r\n        uint256 reward = SafeMath.add(p.share, p.win);\r\n        msg.sender.send(reward);\r\n        // update player\r\n        p.win = 0;\r\n        p.share = 0;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    // INTERNAL FUNCTION\r\n    //--------------------------------------------------------------------------\r\n    function devFee(uint256 _amount) private pure returns(uint256)\r\n    {\r\n        return SafeMath.div(SafeMath.mul(_amount, 5), 100);\r\n    }\r\n    function randomNumber(address _addr, uint256 _maxNumber) private returns(uint256)\r\n    {\r\n        randNonce = randNonce + 1;\r\n        return uint256(keccak256(abi.encodePacked(now, _addr, randNonce))) % _maxNumber;\r\n    }\r\n    function getEngineerPrizePool() private view returns(uint256 _prizePool)\r\n    {\r\n        _prizePool = EngineerContract.prizePool();\r\n    }\r\n    function getEngineerCurrentVirus(address _addr) private view returns(uint256 _currentVirus)\r\n    {\r\n        _currentVirus = EngineerContract.calculateCurrentVirus(_addr);\r\n        _currentVirus = SafeMath.div(_currentVirus, VIRUS_MINING_PERIOD);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalPayments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setHalfTimeAtkBoss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOSS_DEF_DEFFAULT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bossData\",\"outputs\":[{\"name\":\"bossRoundNumber\",\"type\":\"uint256\"},{\"name\":\"bossHp\",\"type\":\"uint256\"},{\"name\":\"def\",\"type\":\"uint256\"},{\"name\":\"prizePool\",\"type\":\"uint256\"},{\"name\":\"playerLastAtk\",\"type\":\"address\"},{\"name\":\"totalDame\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractMiniGame\",\"outputs\":[{\"name\":\"_isContractMiniGame\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HALF_TIME_ATK_BOSS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setDefenceBoss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOSS_HP_DEFAULT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EngineerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"atkBoss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_bossRoundNumber\",\"type\":\"uint256\"}],\"name\":\"calculateShareETH\",\"outputs\":[{\"name\":\"_share\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MiningwarContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"setupMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setBossHPDefault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bossRoundNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VIRUS_MINING_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"currentBossRoundNumber\",\"type\":\"uint256\"},{\"name\":\"lastBossRoundNumber\",\"type\":\"uint256\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"share\",\"type\":\"uint256\"},{\"name\":\"dame\",\"type\":\"uint256\"},{\"name\":\"nextTimeAtk\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bossRoundNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAtk\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"virusAtk\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dame\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeAtk\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isLastHit\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"crystalsReward\",\"type\":\"uint256\"}],\"name\":\"eventAttackBoss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bossRoundNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerWin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethBonus\",\"type\":\"uint256\"}],\"name\":\"eventEndAtkBoss\",\"type\":\"event\"}]","ContractName":"CryptoBossWannaCry","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7af8191826a81bb3726aead04854de865c8648f0bed0bc6f2bc420bf9f8db287"}]}