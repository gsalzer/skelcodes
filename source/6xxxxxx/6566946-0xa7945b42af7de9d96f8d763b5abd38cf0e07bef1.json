{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract IToken {\r\n\r\n\r\n\r\n  /// @notice send `_value` token to `_to` from `msg.sender`\r\n\r\n  /// @param _to The address of the recipient\r\n\r\n  /// @param _value The amount of token to be transferred\r\n\r\n  /// @return Whether the transfer was successful or not\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n\r\n\r\n  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n\r\n  /// @param _from The address of the sender\r\n\r\n  /// @param _to The address of the recipient\r\n\r\n  /// @param _value The amount of token to be transferred\r\n\r\n  /// @return Whether the transfer was successful or not\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n\r\n\r\n}\r\n\r\ncontract Ownable \r\n\r\n{\r\n\r\n  address public owner;\r\n\r\n \r\n\r\n  constructor(address _owner) public \r\n\r\n  {\r\n\r\n    owner = _owner;\r\n\r\n  }\r\n\r\n \r\n\r\n  modifier onlyOwner() \r\n\r\n  {\r\n\r\n    require(msg.sender == owner);\r\n\r\n    _;\r\n\r\n  }\r\n\r\n \r\n\r\n  function transferOwnership(address newOwner) onlyOwner \r\n\r\n  {\r\n\r\n    require(newOwner != address(0));      \r\n\r\n    owner = newOwner;\r\n\r\n  }\r\n\r\n}\r\n\r\ncontract BiLinkExchange is Ownable {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\r\n\r\n\taddress public contractBalance;\r\n\r\n\tuint256 public commissionRatio;//percentage\r\n\r\n\r\n\r\n\tmapping (address => mapping ( bytes32 => uint256)) public account2Order2TradeAmount;\r\n\r\n\r\n\r\n\tbool public isLegacy;//if true, not allow new trade,new deposit\r\n\r\n\r\n\r\n\tevent OnTrade(address tokenGive, address tokenGet, address maker, address taker, uint256 amountGive, uint256 amountGet, uint256 amountGetTrade, uint256 timestamp);\r\n\r\n\t\r\n\r\n\r\n\r\n\tconstructor(address _owner, uint256 _commissionRatio) public Ownable(_owner) {\r\n\r\n\t\tisLegacy= false;\r\n\r\n\t\tcommissionRatio= _commissionRatio;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction setThisContractAsLegacy() public onlyOwner {\r\n\r\n\t\tisLegacy= true;\r\n\r\n\t}\r\n\r\n\r\n\r\n\tfunction setBalanceContract(address _contractBalance) public onlyOwner {\r\n\r\n\t\tcontractBalance= _contractBalance;\r\n\r\n\t}\r\n\r\n\r\n\r\n\t//_arr1:tokenGive,tokenGet,maker,taker\r\n\r\n\t//_arr2:amountGive,amountGet,amountGetTrade,expireTime\r\n\r\n\t//_arr3:rMaker,sMaker,rTaker,sTaker\r\n\r\n\t//parameters are from taker's perspective\r\n\r\n\tfunction trade(address[] _arr1, uint256[] _arr2, uint8 _vMaker,uint8 _vTaker, bytes32[] _arr3) public {\r\n\r\n\t\trequire(isLegacy== false&& now <= _arr2[3]);\r\n\r\n\r\n\r\n\t\tuint256 _amountTokenGiveTrade= _arr2[0].mul(_arr2[2]).div(_arr2[1]);\r\n\r\n\t\trequire(_arr2[2]<= IBalance(contractBalance).getAvailableBalance(_arr1[1], _arr1[2])&&_amountTokenGiveTrade<= IBalance(contractBalance).getAvailableBalance(_arr1[0], _arr1[3]));\r\n\r\n\r\n\r\n\t\tbytes32 _hash = keccak256(abi.encodePacked(this, _arr1[1], _arr1[0], _arr2[1], _arr2[0], _arr2[3]));\r\n\r\n\t\trequire(ecrecover(_hash, _vMaker, _arr3[0], _arr3[1]) ==  _arr1[2]\r\n\r\n\t\t\t&& ecrecover(keccak256(abi.encodePacked(this, _arr1[0], _arr1[1], _arr2[0], _arr2[1], _arr2[2], _arr1[2], _arr2[3])), _vTaker, _arr3[2], _arr3[3]) ==  _arr1[3]\r\n\r\n\t\t\t&& account2Order2TradeAmount[_arr1[2]][_hash].add(_arr2[2])<= _arr2[1]);\r\n\r\n\r\n\r\n\t\tuint256 _commission= _arr2[2].mul(commissionRatio).div(10000);\r\n\r\n\t\t\r\n\r\n\t\tIBalance(contractBalance).modifyBalance(_arr1[3], _arr1[1], _arr2[2].sub(_commission), true);\r\n\r\n\t\tIBalance(contractBalance).modifyBalance(_arr1[2], _arr1[1], _arr2[2], false); \r\n\r\n\t\t\r\n\r\n\t\tIBalance(contractBalance).modifyBalance(_arr1[3], _arr1[0], _amountTokenGiveTrade, false);\r\n\r\n\t\tIBalance(contractBalance).modifyBalance(_arr1[2], _arr1[0], _amountTokenGiveTrade, true);\r\n\r\n\t\taccount2Order2TradeAmount[_arr1[2]][_hash]= account2Order2TradeAmount[_arr1[2]][_hash].add(_arr2[2]);\r\n\r\n\t\t\t\t\t\t\r\n\r\n\t\tif(_arr1[1]== address(0)) {\r\n\r\n\t\t\tIBalance(contractBalance).distributeEthProfit(_arr1[3], _commission);\r\n\r\n\t\t}\r\n\r\n\t\telse {\r\n\r\n\t\t\tIBalance(contractBalance).distributeTokenProfit(_arr1[3], _arr1[1], _commission);\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\temit OnTrade(_arr1[0], _arr1[1], _arr1[2], _arr1[3], _arr2[0], _arr2[1], _arr2[2], now);\r\n\r\n\t}\r\n\r\n}\r\n\r\ncontract IBalance {\r\n\r\n\tfunction distributeEthProfit(address profitMaker, uint256 amount) public  ;\r\n\r\n\tfunction distributeTokenProfit (address profitMaker, address token, uint256 amount) public  ;\r\n\r\n\tfunction modifyBalance(address _account, address _token, uint256 _amount, bool _addOrSub) public;\r\n\r\n\tfunction getAvailableBalance(address _token, address _account) public constant returns (uint256);\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n\r\n  */\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    if (a == 0) {\r\n\r\n      return 0;\r\n\r\n    }\r\n\r\n    uint256 c = a * b;\r\n\r\n    require(c / a == b);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n\r\n  */\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    require(b > 0); // Solidity automatically throws when dividing by 0\r\n\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n\r\n  */\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    require(b <= a);\r\n\r\n    return a - b;\r\n\r\n  }\r\n\r\n\r\n\r\n  /**\r\n\r\n  * @dev Adds two numbers, throws on overflow.\r\n\r\n  */\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    uint256 c = a + b;\r\n\r\n    require(c >= a);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"setThisContractAsLegacy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractBalance\",\"type\":\"address\"}],\"name\":\"setBalanceContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"account2Order2TradeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLegacy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arr1\",\"type\":\"address[]\"},{\"name\":\"_arr2\",\"type\":\"uint256[]\"},{\"name\":\"_vMaker\",\"type\":\"uint8\"},{\"name\":\"_vTaker\",\"type\":\"uint8\"},{\"name\":\"_arr3\",\"type\":\"bytes32[]\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_commissionRatio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenGive\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenGet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountGive\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountGet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountGetTrade\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OnTrade\",\"type\":\"event\"}]","ContractName":"BiLinkExchange","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e4e3627034a97b75d899ee7525d446bf2d42ad660000000000000000000000000000000000000000000000000000000000000014","Library":"","SwarmSource":"bzzr://f11504748939c7d9c870decf7b98da362e291b749560a9cfa0e4c2d025a1447c"}]}