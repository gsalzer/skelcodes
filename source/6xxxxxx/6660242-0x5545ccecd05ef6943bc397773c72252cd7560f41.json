{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/*\r\n * Simple Voting/Poll Demo\r\n *\r\n * This is just a DEMO! It contains a reset function and makes\r\n * other assumptions which only make sense in the context of a demo.\r\n *\r\n * Also, the choice in the poll is determined by sender address\r\n * (1 address per choice, you choose by sending from a specific address).\r\n * This also probably will not be useful in a real-life scenario.\r\n *\r\n * Don't use it like this in a production setup!\r\n *\r\n */\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n *\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor()\r\n    public {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner()\r\n    public\r\n    view\r\n    returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Only the owner can do this.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner()\r\n    public\r\n    view\r\n    returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership()\r\n    public\r\n    onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner)\r\n    public\r\n    onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner)\r\n    internal {\r\n        require(newOwner != address(0), \"New owner cannot be 0x0.\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n    /**\r\n     * @notice Destructs this contract (removes it from the blockchain) and sends all funds in it\r\n     *     to the owner.\r\n     *\r\n     * @dev Transfers the current balance to the owner and terminates the contract.\r\n     */\r\n    function destroy()\r\n    public\r\n    onlyOwner {\r\n        selfdestruct(owner());\r\n    }\r\n\r\n    /**\r\n     * @notice Destructs this contract (removes it from the blockchain) and sends all funds in it\r\n     *     to the specified recipient address.\r\n     *\r\n     * @dev Transfers the current balance to the specified recipient and terminates the contract.\r\n     */\r\n    function destroyAndSend(address _recipient)\r\n    public\r\n    onlyOwner {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n *\r\n * @notice Used to call methods in ERC-20 contracts.\r\n *\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n\r\n    function transfer(address to, uint256 value)\r\n    external\r\n    returns (bool);\r\n\r\n    function balanceOf(address who)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function totalSupply()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n}\r\n\r\n/**\r\n * @title CanRescueERC20\r\n *\r\n * Provides a function to recover ERC-20 tokens which are accidentally sent\r\n * to the address of this contract (the owner can rescue ERC-20 tokens sent\r\n * to this contract back to himself).\r\n */\r\ncontract CanRescueERC20 is Ownable {\r\n\r\n    /**\r\n     * Enable the owner to rescue ERC20 tokens, which are sent accidentally\r\n     * to this contract.\r\n     *\r\n     * @dev This will be invoked by the owner, when owner wants to rescue tokens\r\n     * @notice Recover tokens accidentally sent to this contract. They will be sent to the\r\n     *     contract owner. Can only be called by the owner.\r\n     * @param token Token which will we rescue to the owner from the contract\r\n     */\r\n    function recoverTokens(IERC20 token)\r\n    public\r\n    onlyOwner {\r\n        uint256 balance = token.balanceOf(this);\r\n        // Caution: ERC-20 standard doesn't require to throw exception on failures\r\n        // (although most ERC-20 tokens do so), but instead returns a bool value.\r\n        // Therefore let's check if it really returned true, and throw otherwise.\r\n        require(token.transfer(owner(), balance), \"Token transfer failed, transfer() returned false.\");\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Simple Voting/Poll Demo\r\n *\r\n * This is just a DEMO! It contains a reset function and makes\r\n * other assumptions which only make sense in the context of a demo.\r\n *\r\n * Don't use it like this in a production setup!\r\n *\r\n */\r\ncontract Voting is Ownable, Destructible, CanRescueERC20 {\r\n\r\n    /**\r\n     * @dev number of possible choices. Constant set at compile time.\r\n     *     (Note: if this is changed you also have to adapt the\r\n     *     \"castVote\" function!)\r\n     */\r\n    uint8 internal constant NUMBER_OF_CHOICES = 4;\r\n\r\n    /**\r\n     * @notice Only these adresses are allowed to send votes. Depending\r\n     *     on the sending address the voter's choice is dermined.\r\n     *     (i.e.: if sending from allowedSenderAdresses[0] means vote\r\n     *     for choice 0.)\r\n     */\r\n    address[NUMBER_OF_CHOICES] internal whitelistedSenderAdresses;\r\n\r\n    /**\r\n     * @notice Number of total cast votes (uint40 is enough as at most\r\n     *     we support 2**8 choices and 2**32 votes per choice).\r\n     */\r\n    uint40 public voteCountTotal;\r\n\r\n    /**\r\n     * @notice Number of votes, summarized per choice.\r\n     *\r\n     * @dev uint32 allows 4,294,967,296 possible votes per choice, should be enough,\r\n     *     and still allows 8 entries to be packed in a single storage slot\r\n     *     (EVM wordsize is 256 bit). And of course we check for overflows.\r\n     */\r\n    uint32[NUMBER_OF_CHOICES] internal currentVoteResults;\r\n\r\n    /**\r\n     * @notice Event gets emitted every time when a new vote is cast.\r\n     *\r\n     * @param addedVote choice in the vote\r\n     * @param allVotes array containing updated intermediate result\r\n     */\r\n    event NewVote(uint8 indexed addedVote, uint32[NUMBER_OF_CHOICES] allVotes);\r\n\r\n    /**\r\n     * @notice Event gets emitted every time the whitelisted sender addresses\r\n     *     get updated.\r\n     */\r\n    event WhitelistUpdated(address[NUMBER_OF_CHOICES] whitelistedSenderAdresses);\r\n\r\n    /**\r\n     * @notice Event gets emitted every time this demo contract gets resetted.\r\n     */\r\n    event DemoResetted();\r\n\r\n    /**\r\n     * @notice Fallback function. We do not allow to be ether sent to us. And we also\r\n     * do not allow transactions without any function call. Fallback function\r\n     * simply always throws.\r\n     */\r\n    function()\r\n    public {\r\n        require(false, \"Fallback function always throws.\");\r\n    }\r\n\r\n    /**\r\n     * @notice Only the owner can define which addresses are allowed to vote\r\n     *     (and also which address stands for which vote choice)\r\n     *\r\n     * @param whitelistedSenders array of allowed vote sending addresses,\r\n     *     address at index 0 will vote for choice 0, address at index 1\r\n     *     will vote for choice 1, etc.\r\n     */\r\n    function setWhiteList(address[NUMBER_OF_CHOICES] whitelistedSenders)\r\n    external\r\n    onlyOwner {\r\n        // Assumption: we assume that owner takes care that list contains no duplicates.\r\n        // No duplicate check in here.\r\n        whitelistedSenderAdresses = whitelistedSenders;\r\n        emit WhitelistUpdated(whitelistedSenders);\r\n    }\r\n\r\n    /**\r\n     * @notice As this is just a DEMO contract, allow the onwer to reset the\r\n     *     state of the Demo conract.\r\n     */\r\n    function resetDemo()\r\n    external\r\n    onlyOwner {\r\n        voteCountTotal = 0;\r\n        currentVoteResults[0] = 0;\r\n        currentVoteResults[1] = 0;\r\n        currentVoteResults[2] = 0;\r\n        currentVoteResults[3] = 0;\r\n        emit DemoResetted();\r\n    }\r\n\r\n    /**\r\n     * @notice Cast your note. The sending address determines the choice you\r\n     *      are voting for (each choice has its own sending address). For the Demo\r\n     *      there will be 1 Infineon card lying around for each choice, and the\r\n     *      visitor chooses by using a specific card to to send the vote transaction.\r\n     */\r\n    function castVote()\r\n    external {\r\n        uint8 choice;\r\n        if (msg.sender == whitelistedSenderAdresses[0]) {\r\n            choice = 0;\r\n        } else if (msg.sender == whitelistedSenderAdresses[1]) {\r\n            choice = 1;\r\n        } else if (msg.sender == whitelistedSenderAdresses[2]) {\r\n            choice = 2;\r\n        } else if (msg.sender == whitelistedSenderAdresses[3]) {\r\n            choice = 3;\r\n        } else {\r\n            require(false, \"Only whitelisted sender addresses can cast votes.\");\r\n        }\r\n\r\n        // everything ok, add voter\r\n        voteCountTotal = safeAdd40(voteCountTotal, 1);\r\n        currentVoteResults[choice] = safeAdd32(currentVoteResults[choice], 1);\r\n\r\n        // emit a NewVote event at this point in time, so that a web3 Dapp\r\n        // can react it to it immediately. Emit full current vote state, as\r\n        // events are cheaper for light clients than querying the state.\r\n        emit NewVote(choice, currentVoteResults);\r\n    }\r\n\r\n    /**\r\n     * @notice Return array with sums of votes per choice.\r\n     */\r\n    function currentResult()\r\n    external\r\n    view\r\n    returns (uint32[NUMBER_OF_CHOICES]) {\r\n        return currentVoteResults;\r\n    }\r\n\r\n    /**\r\n     * @notice Return array of allowed voter addresses. Address at index 0\r\n     *     represents votes for choice 0, addresses at index 1 represent\r\n     *     votes for choice 1, etc.\r\n     */\r\n    function whitelistedSenderAddresses()\r\n    external\r\n    view\r\n    returns (address[NUMBER_OF_CHOICES]) {\r\n        return whitelistedSenderAdresses;\r\n    }\r\n\r\n    /**\r\n     * @notice Return number of votes for one of the options.\r\n     */\r\n    function votesPerChoice(uint8 option)\r\n    external\r\n    view\r\n    returns (uint32) {\r\n        require(option < NUMBER_OF_CHOICES, \"Choice must be less than numberOfChoices.\");\r\n        return currentVoteResults[option];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the number of possible choices, which can be voted for.\r\n     */\r\n    function numberOfPossibleChoices()\r\n    public\r\n    pure\r\n    returns (uint8) {\r\n        return NUMBER_OF_CHOICES;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two uint40 numbers, throws on overflow.\r\n     */\r\n    function safeAdd40(uint40 _a, uint40 _b)\r\n    internal\r\n    pure\r\n    returns (uint40 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two uint32 numbers, throws on overflow.\r\n     */\r\n    function safeAdd32(uint32 _a, uint32 _b)\r\n    internal\r\n    pure\r\n    returns (uint32 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"castVote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfPossibleChoices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"whitelistedSenders\",\"type\":\"address[4]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistedSenderAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetDemo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voteCountTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"option\",\"type\":\"uint8\"}],\"name\":\"votesPerChoice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentResult\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addedVote\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"allVotes\",\"type\":\"uint32[4]\"}],\"name\":\"NewVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"whitelistedSenderAdresses\",\"type\":\"address[4]\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DemoResetted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Voting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aa2bcde8ac49b7f82457076cb36c72732e8bcc7150c2f2d387bccb26c3e45b32"}]}