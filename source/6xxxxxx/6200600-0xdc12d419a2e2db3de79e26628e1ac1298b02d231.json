{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/LinkedListLib.sol\r\n\r\n/**\r\n * @title LinkedListLib\r\n * @author Darryl Morris (o0ragman0o) and Modular.network\r\n *\r\n * This utility library was forked from https://github.com/o0ragman0o/LibCLL\r\n * into the Modular-Network ethereum-libraries repo at https://github.com/Modular-Network/ethereum-libraries\r\n * It has been updated to add additional functionality and be more compatible with solidity 0.4.18\r\n * coding patterns.\r\n *\r\n * version 1.1.1\r\n * Copyright (c) 2017 Modular Inc.\r\n * The MIT License (MIT)\r\n * https://github.com/Modular-network/ethereum-libraries/blob/master/LICENSE\r\n *\r\n * The LinkedListLib provides functionality for implementing data indexing using\r\n * a circlular linked list\r\n *\r\n * Modular provides smart contract services and security reviews for contract\r\n * deployments in addition to working on open source projects in the Ethereum\r\n * community. Our purpose is to test, document, and deploy reusable code onto the\r\n * blockchain and improve both security and usability. We also educate non-profits,\r\n * schools, and other community members about the application of blockchain\r\n * technology. For further information: modular.network\r\n *\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\n\r\nlibrary LinkedListLib {\r\n\r\n    uint256 constant NULL = 0;\r\n    uint256 constant HEAD = 0;\r\n    bool constant PREV = false;\r\n    bool constant NEXT = true;\r\n\r\n    struct LinkedList{\r\n        mapping (uint256 => mapping (bool => uint256)) list;\r\n    }\r\n\r\n    /// @dev returns true if the list exists\r\n    /// @param self stored linked list from contract\r\n    function listExists(LinkedList storage self)\r\n        public\r\n        view returns (bool)\r\n    {\r\n        // if the head nodes previous or next pointers both point to itself, then there are no items in the list\r\n        if (self.list[HEAD][PREV] != HEAD || self.list[HEAD][NEXT] != HEAD) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev returns true if the node exists\r\n    /// @param self stored linked list from contract\r\n    /// @param _node a node to search for\r\n    function nodeExists(LinkedList storage self, uint256 _node)\r\n        public\r\n        view returns (bool)\r\n    {\r\n        if (self.list[_node][PREV] == HEAD && self.list[_node][NEXT] == HEAD) {\r\n            if (self.list[HEAD][NEXT] == _node) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the number of elements in the list\r\n    /// @param self stored linked list from contract\r\n    function sizeOf(LinkedList storage self) public view returns (uint256 numElements) {\r\n        bool exists;\r\n        uint256 i;\r\n        (exists,i) = getAdjacent(self, HEAD, NEXT);\r\n        while (i != HEAD) {\r\n            (exists,i) = getAdjacent(self, i, NEXT);\r\n            numElements++;\r\n        }\r\n        return;\r\n    }\r\n\r\n    /// @dev Returns the links of a node as a tuple\r\n    /// @param self stored linked list from contract\r\n    /// @param _node id of the node to get\r\n    function getNode(LinkedList storage self, uint256 _node)\r\n        public view returns (bool,uint256,uint256)\r\n    {\r\n        if (!nodeExists(self,_node)) {\r\n            return (false,0,0);\r\n        } else {\r\n            return (true,self.list[_node][PREV], self.list[_node][NEXT]);\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the link of a node `_node` in direction `_direction`.\r\n    /// @param self stored linked list from contract\r\n    /// @param _node id of the node to step from\r\n    /// @param _direction direction to step in\r\n    function getAdjacent(LinkedList storage self, uint256 _node, bool _direction)\r\n        public view returns (bool,uint256)\r\n    {\r\n        if (!nodeExists(self,_node)) {\r\n            return (false,0);\r\n        } else {\r\n            return (true,self.list[_node][_direction]);\r\n        }\r\n    }\r\n\r\n    /// @dev Can be used before `insert` to build an ordered list\r\n    /// @param self stored linked list from contract\r\n    /// @param _node an existing node to search from, e.g. HEAD.\r\n    /// @param _value value to seek\r\n    /// @param _direction direction to seek in\r\n    //  @return next first node beyond '_node' in direction `_direction`\r\n    function getSortedSpot(LinkedList storage self, uint256 _node, uint256 _value, bool _direction)\r\n        public view returns (uint256)\r\n    {\r\n        if (sizeOf(self) == 0) { return 0; }\r\n        require((_node == 0) || nodeExists(self,_node));\r\n        bool exists;\r\n        uint256 next;\r\n        (exists,next) = getAdjacent(self, _node, _direction);\r\n        while  ((next != 0) && (_value != next) && ((_value < next) != _direction)) next = self.list[next][_direction];\r\n        return next;\r\n    }\r\n\r\n    /// @dev Creates a bidirectional link between two nodes on direction `_direction`\r\n    /// @param self stored linked list from contract\r\n    /// @param _node first node for linking\r\n    /// @param _link  node to link to in the _direction\r\n    function createLink(LinkedList storage self, uint256 _node, uint256 _link, bool _direction) private  {\r\n        self.list[_link][!_direction] = _node;\r\n        self.list[_node][_direction] = _link;\r\n    }\r\n\r\n    /// @dev Insert node `_new` beside existing node `_node` in direction `_direction`.\r\n    /// @param self stored linked list from contract\r\n    /// @param _node existing node\r\n    /// @param _new  new node to insert\r\n    /// @param _direction direction to insert node in\r\n    function insert(LinkedList storage self, uint256 _node, uint256 _new, bool _direction) internal returns (bool) {\r\n        if(!nodeExists(self,_new) && nodeExists(self,_node)) {\r\n            uint256 c = self.list[_node][_direction];\r\n            createLink(self, _node, _new, _direction);\r\n            createLink(self, _new, c, _direction);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev removes an entry from the linked list\r\n    /// @param self stored linked list from contract\r\n    /// @param _node node to remove from the list\r\n    function remove(LinkedList storage self, uint256 _node) internal returns (uint256) {\r\n        if ((_node == NULL) || (!nodeExists(self,_node))) { return 0; }\r\n        createLink(self, self.list[_node][PREV], self.list[_node][NEXT], NEXT);\r\n        delete self.list[_node][PREV];\r\n        delete self.list[_node][NEXT];\r\n        return _node;\r\n    }\r\n\r\n    /// @dev pushes an enrty to the head of the linked list\r\n    /// @param self stored linked list from contract\r\n    /// @param _node new entry to push to the head\r\n    /// @param _direction push to the head (NEXT) or tail (PREV)\r\n    function push(LinkedList storage self, uint256 _node, bool _direction) internal  {\r\n        insert(self, HEAD, _node, _direction);\r\n    }\r\n\r\n    /// @dev pops the first entry from the linked list\r\n    /// @param self stored linked list from contract\r\n    /// @param _direction pop from the head (NEXT) or the tail (PREV)\r\n    function pop(LinkedList storage self, bool _direction) internal returns (uint256) {\r\n        bool exists;\r\n        uint256 adj;\r\n\r\n        (exists,adj) = getAdjacent(self, HEAD, _direction);\r\n\r\n        return remove(self, adj);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/rbac/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n *      See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/rbac/RBAC.sol\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * @dev Supports unlimited numbers of roles and addresses.\r\n * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n *  for you to write your own implementation of this interface using Enums or similar.\r\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n *  to avoid typos.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address addr, string roleName);\r\n  event RoleRemoved(address addr, string roleName);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address addr, string roleName)\r\n    view\r\n    public\r\n  {\r\n    roles[roleName].check(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address addr, string roleName)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[roleName].has(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function addRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].add(addr);\r\n    emit RoleAdded(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function removeRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].remove(addr);\r\n    emit RoleRemoved(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string roleName)\r\n  {\r\n    checkRole(msg.sender, roleName);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param roleNames the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] roleNames) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < roleNames.length; i++) {\r\n  //         if (hasRole(msg.sender, roleNames[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Whitelist.sol\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * @dev This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Whitelist is Ownable, RBAC {\r\n  event WhitelistedAddressAdded(address addr);\r\n  event WhitelistedAddressRemoved(address addr);\r\n\r\n  string public constant ROLE_WHITELISTED = \"whitelist\";\r\n\r\n  /**\r\n   * @dev Throws if called by any account that's not whitelisted.\r\n   */\r\n  modifier onlyWhitelisted() {\r\n    checkRole(msg.sender, ROLE_WHITELISTED);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param addr address\r\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n   */\r\n  function addAddressToWhitelist(address addr)\r\n    onlyOwner\r\n    public\r\n  {\r\n    addRole(addr, ROLE_WHITELISTED);\r\n    emit WhitelistedAddressAdded(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address is in whitelist\r\n   */\r\n  function whitelist(address addr)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return hasRole(addr, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev add addresses to the whitelist\r\n   * @param addrs addresses\r\n   * @return true if at least one address was added to the whitelist,\r\n   * false if all addresses were already in the whitelist\r\n   */\r\n  function addAddressesToWhitelist(address[] addrs)\r\n    onlyOwner\r\n    public\r\n  {\r\n    for (uint256 i = 0; i < addrs.length; i++) {\r\n      addAddressToWhitelist(addrs[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address from the whitelist\r\n   * @param addr address\r\n   * @return true if the address was removed from the whitelist,\r\n   * false if the address wasn't in the whitelist in the first place\r\n   */\r\n  function removeAddressFromWhitelist(address addr)\r\n    onlyOwner\r\n    public\r\n  {\r\n    removeRole(addr, ROLE_WHITELISTED);\r\n    emit WhitelistedAddressRemoved(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev remove addresses from the whitelist\r\n   * @param addrs addresses\r\n   * @return true if at least one address was removed from the whitelist,\r\n   * false if all addresses weren't in the whitelist in the first place\r\n   */\r\n  function removeAddressesFromWhitelist(address[] addrs)\r\n    onlyOwner\r\n    public\r\n  {\r\n    for (uint256 i = 0; i < addrs.length; i++) {\r\n      removeAddressFromWhitelist(addrs[i]);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/QuantstampAuditData.sol\r\n\r\ncontract QuantstampAuditData is Whitelist {\r\n  // the audit data has a whitelist of addresses of audit contracts that may interact with this contract\r\n  using LinkedListLib for LinkedListLib.LinkedList;\r\n\r\n  // constants used by LinkedListLib\r\n  uint256 constant internal NULL = 0;\r\n  uint256 constant internal HEAD = 0;\r\n  bool constant internal PREV = false;\r\n  bool constant internal NEXT = true;\r\n\r\n  // state of audit requests submitted to the contract\r\n  enum AuditState {\r\n    None,\r\n    Queued,\r\n    Assigned,\r\n    Refunded,\r\n    Completed,  // automated audit finished successfully and the report is available\r\n    Error,      // automated audit failed to finish; the report contains detailed information about the error\r\n    Expired,\r\n    Resolved\r\n  }\r\n\r\n  // structure representing an audit\r\n  struct Audit {\r\n    address requestor;\r\n    string contractUri;\r\n    uint256 price;\r\n    uint256 requestBlockNumber; // block number that audit was requested\r\n    QuantstampAuditData.AuditState state;\r\n    address auditor;       // the address of the node assigned to the audit\r\n    uint256 assignBlockNumber;  // block number that audit was assigned\r\n    string reportHash;     // stores the hash of audit report\r\n    uint256 reportBlockNumber;  // block number that the payment and the audit report were submitted\r\n    address registrar;  // address of the contract which registers this request\r\n  }\r\n\r\n  // map audits (requestId, Audit)\r\n  mapping(uint256 => Audit) public audits;\r\n\r\n  // token used to pay for audits. This contract assumes that the owner of the contract trusts token's code and\r\n  // that transfer function (such as transferFrom, transfer) do the right thing\r\n  StandardToken public token;\r\n\r\n  // Once an audit node gets an audit request, the audit price is locked for this many blocks.\r\n  // After that, the requestor can asks for a refund.\r\n  uint256 public auditTimeoutInBlocks = 25;\r\n\r\n  // maximum number of assigned audits per each auditor\r\n  uint256 public maxAssignedRequests = 10;\r\n\r\n  // map audit nodes to their minimum prices. Defaults to zero: the node accepts all requests.\r\n  mapping(address => uint256) public minAuditPrice;\r\n\r\n  // whitelist audit nodes\r\n  LinkedListLib.LinkedList internal whitelistedNodesList;\r\n\r\n  uint256 private requestCounter;\r\n\r\n  event WhitelistedNodeAdded(address addr);\r\n  event WhitelistedNodeRemoved(address addr);\r\n\r\n  /**\r\n   * @dev The constructor creates an audit contract.\r\n   * @param tokenAddress The address of a StandardToken that will be used to pay auditor nodes.\r\n   */\r\n  constructor (address tokenAddress) public {\r\n    require(tokenAddress != address(0));\r\n    token = StandardToken(tokenAddress);\r\n  }\r\n\r\n  function addAuditRequest (address requestor, string contractUri, uint256 price) public onlyWhitelisted returns(uint256) {\r\n    // assign the next request ID\r\n    uint256 requestId = ++requestCounter;\r\n    // store the audit\r\n    audits[requestId] = Audit(requestor, contractUri, price, block.number, AuditState.Queued, address(0), 0, \"\", 0, msg.sender);  // solhint-disable-line not-rely-on-time\r\n    return requestId;\r\n  }\r\n\r\n  function getAuditContractUri(uint256 requestId) public view returns(string) {\r\n    return audits[requestId].contractUri;\r\n  }\r\n\r\n  function getAuditRequestor(uint256 requestId) public view returns(address) {\r\n    return audits[requestId].requestor;\r\n  }\r\n\r\n  function getAuditPrice (uint256 requestId) public view returns(uint256) {\r\n    return audits[requestId].price;\r\n  }\r\n\r\n  function getAuditState (uint256 requestId) public view returns(AuditState) {\r\n    return audits[requestId].state;\r\n  }\r\n\r\n  function getAuditRequestBlockNumber (uint256 requestId) public view returns(uint) {\r\n    return audits[requestId].requestBlockNumber;\r\n  }\r\n\r\n  function setAuditState (uint256 requestId, AuditState state) public onlyWhitelisted {\r\n    audits[requestId].state = state;\r\n  }\r\n\r\n  function getAuditAuditor (uint256 requestId) public view returns(address) {\r\n    return audits[requestId].auditor;\r\n  }\r\n\r\n  function getAuditRegistrar (uint256 requestId) public view returns(address) {\r\n    return audits[requestId].registrar;\r\n  }\r\n\r\n  function setAuditAuditor (uint256 requestId, address auditor) public onlyWhitelisted {\r\n    audits[requestId].auditor = auditor;\r\n  }\r\n\r\n  function getAuditAssignBlockNumber (uint256 requestId) public view returns(uint) {\r\n    return audits[requestId].assignBlockNumber;\r\n  }\r\n\r\n  function setAuditAssignBlockNumber (uint256 requestId, uint256 assignBlockNumber) public onlyWhitelisted {\r\n    audits[requestId].assignBlockNumber = assignBlockNumber;\r\n  }\r\n\r\n  function setAuditReportHash (uint256 requestId, string reportHash) public onlyWhitelisted {\r\n    audits[requestId].reportHash = reportHash;\r\n  }\r\n\r\n  function setAuditReportBlockNumber (uint256 requestId, uint256 reportBlockNumber) public onlyWhitelisted {\r\n    audits[requestId].reportBlockNumber = reportBlockNumber;\r\n  }\r\n\r\n  function setAuditRegistrar (uint256 requestId, address registrar) public onlyWhitelisted {\r\n    audits[requestId].registrar = registrar;\r\n  }\r\n\r\n  function setAuditTimeout (uint256 timeoutInBlocks) public onlyOwner {\r\n    auditTimeoutInBlocks = timeoutInBlocks;\r\n  }\r\n\r\n  /**\r\n   * @dev set the maximum number of audits any audit node can handle at any time.\r\n   * @param maxAssignments maximum number of audit requests for each auditor\r\n   */\r\n  function setMaxAssignedRequests (uint256 maxAssignments) public onlyOwner {\r\n    maxAssignedRequests = maxAssignments;\r\n  }\r\n\r\n  function getMinAuditPrice (address auditor) public view returns(uint256) {\r\n    return minAuditPrice[auditor];\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the audit node to set its minimum price per audit in wei-QSP\r\n   * @param price The minimum price.\r\n   */\r\n  function setMinAuditPrice(address auditor, uint256 price) public onlyWhitelisted {\r\n    minAuditPrice[auditor] = price;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if a node is whitelisted\r\n   * param node Node to check.\r\n   */\r\n  function isWhitelisted(address node) public view returns(bool) {\r\n    return whitelistedNodesList.nodeExists(uint256(node));\r\n  }\r\n\r\n  /**\r\n   * @dev Adds an address to the whitelist\r\n   * @param addr address\r\n   * @return true if the address was added to the whitelist\r\n   */\r\n  function addNodeToWhitelist(address addr) public onlyOwner returns(bool success) {\r\n    if (whitelistedNodesList.insert(HEAD, uint256(addr), PREV)) {\r\n      emit WhitelistedNodeAdded(addr);\r\n      success = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Removes an address from the whitelist linked-list\r\n   * @param addr address\r\n   * @return true if the address was removed from the whitelist,\r\n   */\r\n  function removeNodeFromWhitelist(address addr) public onlyOwner returns(bool success) {\r\n    if (whitelistedNodesList.remove(uint256(addr)) != 0) {\r\n      emit WhitelistedNodeRemoved(addr);\r\n      success = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Given a whitelisted address, returns the next address from the whitelist\r\n   * @param addr address\r\n   * @return next address of the given param\r\n   */\r\n  function getNextWhitelistedNode(address addr) public view returns(address) {\r\n    bool direction;\r\n    uint256 next;\r\n    (direction, next) = whitelistedNodesList.getAdjacent(uint256(addr), NEXT);\r\n    return address(next);\r\n  }\r\n}\r\n\r\n// File: contracts/QuantstampAudit.sol\r\n\r\ncontract QuantstampAudit is Ownable, Pausable {\r\n  using SafeMath for uint256;\r\n  using LinkedListLib for LinkedListLib.LinkedList;\r\n\r\n  // constants used by LinkedListLib\r\n  uint256 constant internal NULL = 0;\r\n  uint256 constant internal HEAD = 0;\r\n  bool constant internal PREV = false;\r\n  bool constant internal NEXT = true;\r\n\r\n  // mapping from an auditor address to the number of requests that it currently processes\r\n  mapping(address => uint256) public assignedRequestCount;\r\n\r\n  // increasingly sorted linked list of prices\r\n  LinkedListLib.LinkedList internal priceList;\r\n  // map from price to a list of request IDs\r\n  mapping(uint256 => LinkedListLib.LinkedList) internal auditsByPrice;\r\n\r\n  // list of request IDs of assigned audits (the list preserves temporal order of assignments)\r\n  LinkedListLib.LinkedList internal assignedAudits;\r\n\r\n  // contract that stores audit data (separate from the auditing logic)\r\n  QuantstampAuditData public auditData;\r\n\r\n  event LogAuditFinished(\r\n    uint256 requestId,\r\n    address auditor,\r\n    QuantstampAuditData.AuditState auditResult,\r\n    string reportHash\r\n  );\r\n\r\n  event LogAuditRequested(uint256 requestId,\r\n    address requestor,\r\n    string uri,\r\n    uint256 price\r\n  );\r\n\r\n  event LogAuditAssigned(uint256 requestId,\r\n    address auditor,\r\n    address requestor,\r\n    string uri,\r\n    uint256 price,\r\n    uint256 requestBlockNumber);\r\n\r\n  /* solhint-disable event-name-camelcase */\r\n  event LogReportSubmissionError_InvalidAuditor(uint256 requestId, address auditor);\r\n  event LogReportSubmissionError_InvalidState(uint256 requestId, address auditor, QuantstampAuditData.AuditState state);\r\n  event LogReportSubmissionError_InvalidResult(uint256 requestId, address auditor, QuantstampAuditData.AuditState state);\r\n  event LogReportSubmissionError_ExpiredAudit(uint256 requestId, address auditor, uint256 allowanceBlockNumber);\r\n  event LogAuditAssignmentError_ExceededMaxAssignedRequests(address auditor);\r\n  event LogAuditAssignmentUpdate_Expired(uint256 requestId, uint256 allowanceBlockNumber);\r\n  /* solhint-enable event-name-camelcase */\r\n\r\n  event LogAuditQueueIsEmpty();\r\n\r\n  event LogPayAuditor(uint256 requestId, address auditor, uint256 amount);\r\n  event LogAuditNodePriceChanged(address auditor, uint256 amount);\r\n\r\n  event LogRefund(uint256 requestId, address requestor, uint256 amount);\r\n  event LogRefundInvalidRequestor(uint256 requestId, address requestor);\r\n  event LogRefundInvalidState(uint256 requestId, QuantstampAuditData.AuditState state);\r\n  event LogRefundInvalidFundsLocked(uint256 requestId, uint256 currentBlock, uint256 fundLockEndBlock);\r\n\r\n  // the audit queue has elements, but none satisfy the minPrice of the audit node\r\n  // amount corresponds to the current minPrice of the auditor\r\n  event LogAuditNodePriceHigherThanRequests(address auditor, uint256 amount);\r\n\r\n  event LogInvalidResolutionCall(uint256 requestId);\r\n  event LogErrorReportResolved(uint256 requestId, address receiver, uint256 auditPrice);\r\n\r\n  enum AuditAvailabilityState {\r\n    Error,\r\n    Ready,      // an audit is available to be picked up\r\n    Empty,      // there is no audit request in the queue\r\n    Exceeded,   // number of incomplete audit requests is reached the cap\r\n    Underprice  // all queued audit requests are less than the expected price\r\n  }\r\n\r\n  /**\r\n   * @dev The constructor creates an audit contract.\r\n   * @param auditDataAddress The address of a AuditData that stores data used for performing audits.\r\n   */\r\n  constructor (address auditDataAddress) public {\r\n    require(auditDataAddress != address(0));\r\n    auditData = QuantstampAuditData(auditDataAddress);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account that's not whitelisted.\r\n   */\r\n  modifier onlyWhitelisted() {\r\n    require(auditData.isWhitelisted(msg.sender));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns funds to the requestor.\r\n   * @param requestId Unique ID of the audit request.\r\n   */\r\n  function refund(uint256 requestId) external returns(bool) {\r\n    QuantstampAuditData.AuditState state = auditData.getAuditState(requestId);\r\n    // check that the audit exists and is in a valid state\r\n    if (state != QuantstampAuditData.AuditState.Queued &&\r\n          state != QuantstampAuditData.AuditState.Assigned &&\r\n            state != QuantstampAuditData.AuditState.Expired) {\r\n      emit LogRefundInvalidState(requestId, state);\r\n      return false;\r\n    }\r\n    address requestor = auditData.getAuditRequestor(requestId);\r\n    if (requestor != msg.sender) {\r\n      emit LogRefundInvalidRequestor(requestId, msg.sender);\r\n      return;\r\n    }\r\n    uint256 refundBlockNumber = auditData.getAuditAssignBlockNumber(requestId) + auditData.auditTimeoutInBlocks();\r\n    // check that the auditor has not recently started the audit (locking the funds)\r\n    if (state == QuantstampAuditData.AuditState.Assigned) {\r\n      if (block.number <= refundBlockNumber) {\r\n        emit LogRefundInvalidFundsLocked(requestId, block.number, refundBlockNumber);\r\n        return false;\r\n      }\r\n      // the request is expired but not detected by getNextAuditRequest\r\n      updateAssignedAudits(requestId);\r\n    } else if (state == QuantstampAuditData.AuditState.Queued) {\r\n      // remove the request from the queue\r\n      // note that if an audit node is currently assigned the request, it is already removed from the queue\r\n      removeQueueElement(requestId);\r\n    }\r\n\r\n    // set the audit state to refunded\r\n    auditData.setAuditState(requestId, QuantstampAuditData.AuditState.Refunded);\r\n\r\n    // return the funds to the user\r\n    uint256 price = auditData.getAuditPrice(requestId);\r\n    emit LogRefund(requestId, requestor, price);\r\n    return auditData.token().transfer(requestor, price);\r\n  }\r\n\r\n  /**\r\n   * @dev Submits audit request.\r\n   * @param contractUri Identifier of the resource to audit.\r\n   * @param price The total amount of tokens that will be paid for the audit.\r\n   */\r\n  function requestAudit(string contractUri, uint256 price) external whenNotPaused returns(uint256) {\r\n    require(price > 0);\r\n    // transfer tokens to this contract\r\n    auditData.token().transferFrom(msg.sender, address(this), price);\r\n    // store the audit\r\n    uint256 requestId = auditData.addAuditRequest(msg.sender, contractUri, price);\r\n\r\n    // TODO: use existing price instead of HEAD (optimization)\r\n    queueAuditRequest(requestId, HEAD);\r\n\r\n    emit LogAuditRequested(requestId, msg.sender, contractUri, price); // solhint-disable-line not-rely-on-time\r\n\r\n    return requestId;\r\n  }\r\n\r\n  /**\r\n   * @dev Submits the report and pays the auditor node for their work if the audit is completed.\r\n   * @param requestId Unique identifier of the audit request.\r\n   * @param auditResult Result of an audit.\r\n   * @param reportHash Hash of the generated report.\r\n   */\r\n  function submitReport(uint256 requestId, QuantstampAuditData.AuditState auditResult, string reportHash) public onlyWhitelisted {\r\n    if (QuantstampAuditData.AuditState.Completed != auditResult && QuantstampAuditData.AuditState.Error != auditResult) {\r\n      emit LogReportSubmissionError_InvalidResult(requestId, msg.sender, auditResult);\r\n      return;\r\n    }\r\n\r\n    QuantstampAuditData.AuditState auditState = auditData.getAuditState(requestId);\r\n    if (auditState != QuantstampAuditData.AuditState.Assigned) {\r\n      emit LogReportSubmissionError_InvalidState(requestId, msg.sender, auditState);\r\n      return;\r\n    }\r\n\r\n    // the sender must be the auditor\r\n    if (msg.sender != auditData.getAuditAuditor(requestId)) {\r\n      emit LogReportSubmissionError_InvalidAuditor(requestId, msg.sender);\r\n      return;\r\n    }\r\n\r\n    // remove the requestId from assigned queue\r\n    updateAssignedAudits(requestId);\r\n\r\n    // auditor should not send a report after its allowed period\r\n    uint256 allowanceBlockNumber = auditData.getAuditAssignBlockNumber(requestId) + auditData.auditTimeoutInBlocks();\r\n    if (allowanceBlockNumber < block.number) {\r\n      // update assigned to expired state\r\n      auditData.setAuditState(requestId, QuantstampAuditData.AuditState.Expired);\r\n      emit LogReportSubmissionError_ExpiredAudit(requestId, msg.sender, allowanceBlockNumber);\r\n      return;\r\n    }\r\n\r\n    // update the audit information held in this contract\r\n    auditData.setAuditState(requestId, auditResult);\r\n    auditData.setAuditReportHash(requestId, reportHash);\r\n    auditData.setAuditReportBlockNumber(requestId, block.number); // solhint-disable-line not-rely-on-time\r\n\r\n    // validate the audit state\r\n    require(isAuditFinished(requestId));\r\n\r\n    emit LogAuditFinished(requestId, msg.sender, auditResult, reportHash); // solhint-disable-line not-rely-on-time\r\n\r\n    if (auditResult == QuantstampAuditData.AuditState.Completed) {\r\n      uint256 auditPrice = auditData.getAuditPrice(requestId);\r\n      auditData.token().transfer(msg.sender, auditPrice);\r\n      emit LogPayAuditor(requestId, msg.sender, auditPrice);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Determines who has to be paid for a given requestId recorded with an error status\r\n   * @param requestId Unique identifier of the audit request.\r\n   * @param toRequester The audit price goes to the requester or the audit node.\r\n   */\r\n  function resolveErrorReport(uint256 requestId, bool toRequester) public onlyOwner {\r\n    QuantstampAuditData.AuditState auditState = auditData.getAuditState(requestId);\r\n    if (auditState != QuantstampAuditData.AuditState.Error) {\r\n      emit LogInvalidResolutionCall(requestId);\r\n      return;\r\n    }\r\n\r\n    uint256 auditPrice = auditData.getAuditPrice(requestId);\r\n    address receiver = toRequester ? auditData.getAuditRequestor(requestId) : auditData.getAuditAuditor(requestId);\r\n    auditData.token().transfer(receiver, auditPrice);\r\n    auditData.setAuditState(requestId, QuantstampAuditData.AuditState.Resolved);\r\n    emit LogErrorReportResolved(requestId, receiver, auditPrice);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines if there is an audit request available to be picked up by the caller\r\n   */\r\n  function anyRequestAvailable() public view returns(AuditAvailabilityState) {\r\n    // there are no audits in the queue\r\n    if (!auditQueueExists()) {\r\n      return AuditAvailabilityState.Empty;\r\n    }\r\n\r\n    // check if the auditor's assignment is not exceeded.\r\n    if (assignedRequestCount[msg.sender] >= auditData.maxAssignedRequests()) {\r\n      return AuditAvailabilityState.Exceeded;\r\n    }\r\n\r\n    if (anyAuditRequestMatchesPrice(auditData.getMinAuditPrice(msg.sender)) == 0) {\r\n      return AuditAvailabilityState.Underprice;\r\n    }\r\n\r\n    return AuditAvailabilityState.Ready;\r\n  }\r\n\r\n  /**\r\n   * @dev Finds a list of most expensive audits and assigns the oldest one to the auditor node.\r\n   */\r\n  function getNextAuditRequest() public onlyWhitelisted {\r\n    // remove an expired audit request\r\n    if (assignedAudits.listExists()) {\r\n      bool exists;\r\n      uint256 potentialExpiredRequestId;\r\n      (exists, potentialExpiredRequestId) = assignedAudits.getAdjacent(HEAD, NEXT);\r\n      uint256 allowanceBlockNumber = auditData.getAuditAssignBlockNumber(potentialExpiredRequestId) + auditData.auditTimeoutInBlocks();\r\n      if (allowanceBlockNumber < block.number) {\r\n        updateAssignedAudits(potentialExpiredRequestId);\r\n        auditData.setAuditState(potentialExpiredRequestId, QuantstampAuditData.AuditState.Expired);\r\n        emit LogAuditAssignmentUpdate_Expired(potentialExpiredRequestId, allowanceBlockNumber);\r\n      }\r\n    }\r\n\r\n    AuditAvailabilityState isRequestAvailable = anyRequestAvailable();\r\n    // there are no audits in the queue\r\n    if (isRequestAvailable == AuditAvailabilityState.Empty) {\r\n      emit LogAuditQueueIsEmpty();\r\n      return;\r\n    }\r\n\r\n    // check if the auditor's assignment is not exceeded.\r\n    if (isRequestAvailable == AuditAvailabilityState.Exceeded) {\r\n      emit LogAuditAssignmentError_ExceededMaxAssignedRequests(msg.sender);\r\n      return;\r\n    }\r\n\r\n    // there are no audits in the queue with a price high enough for the audit node\r\n    uint256 minPrice = auditData.getMinAuditPrice(msg.sender);\r\n    uint256 requestId = dequeueAuditRequest(minPrice);\r\n    if (requestId == 0) {\r\n      emit LogAuditNodePriceHigherThanRequests(msg.sender, minPrice);\r\n      return;\r\n    }\r\n\r\n    auditData.setAuditState(requestId, QuantstampAuditData.AuditState.Assigned);\r\n    auditData.setAuditAuditor(requestId, msg.sender);\r\n    auditData.setAuditAssignBlockNumber(requestId, block.number);\r\n    assignedRequestCount[msg.sender]++;\r\n\r\n    // push to the tail\r\n    assignedAudits.push(requestId, PREV);\r\n\r\n    emit LogAuditAssigned(\r\n      requestId,\r\n      auditData.getAuditAuditor(requestId),\r\n      auditData.getAuditRequestor(requestId),\r\n      auditData.getAuditContractUri(requestId),\r\n      auditData.getAuditPrice(requestId),\r\n      auditData.getAuditRequestBlockNumber(requestId));\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the audit node to set its minimum price per audit in wei-QSP\r\n   * @param price The minimum price.\r\n   */\r\n  function setAuditNodePrice(uint256 price) public onlyWhitelisted {\r\n    auditData.setMinAuditPrice(msg.sender, price);\r\n    emit LogAuditNodePriceChanged(msg.sender, price);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if an audit is finished. It is considered finished when the audit is either completed or failed.\r\n   * @param requestId Unique ID of the audit request.\r\n   */\r\n  function isAuditFinished(uint256 requestId) public view returns(bool) {\r\n    QuantstampAuditData.AuditState state = auditData.getAuditState(requestId);\r\n    return state == QuantstampAuditData.AuditState.Completed || state == QuantstampAuditData.AuditState.Error;\r\n  }\r\n\r\n  /**\r\n   * @dev Given a price, returns the next price from the priceList\r\n   * @param price of the current node\r\n   * @return next price in the linked list\r\n   */\r\n  function getNextPrice(uint256 price) public view returns(uint256) {\r\n    bool exists;\r\n    uint256 next;\r\n    (exists, next) = priceList.getAdjacent(price, NEXT);\r\n    return next;\r\n  }\r\n\r\n  /**\r\n   * @dev Given a requestId, returns the next one from assignedAudits\r\n   * @param requestId of the current node\r\n   * @return next requestId in the linked list\r\n   */\r\n  function getNextAssignedRequest(uint256 requestId) public view returns(uint256) {\r\n    bool exists;\r\n    uint256 next;\r\n    (exists, next) = assignedAudits.getAdjacent(requestId, NEXT);\r\n    return next;\r\n  }\r\n\r\n  /**\r\n   * @dev Given a price and a requestId, then function returns the next requestId with the same price\r\n   * return 0, provided the given price does not exist in auditsByPrice\r\n   * @param price of the current bucket\r\n   * @param requestId unique Id of an requested audit\r\n   * @return next requestId with the same price\r\n   */\r\n  function getNextAuditByPrice(uint256 price, uint256 requestId) public view returns(uint256) {\r\n    bool exists;\r\n    uint256 next;\r\n    (exists, next) = auditsByPrice[price].getAdjacent(requestId, NEXT);\r\n    return next;\r\n  }\r\n\r\n  /**\r\n   * @dev Given a requestId, the function removes it from the list of audits and decreases the number of assigned\r\n   * audits of the associated auditor\r\n   * @param requestId unique Id of an requested audit\r\n   */\r\n  function updateAssignedAudits(uint256 requestId) internal {\r\n    assignedAudits.remove(requestId);\r\n    assignedRequestCount[auditData.getAuditAuditor(requestId)] =\r\n      assignedRequestCount[auditData.getAuditAuditor(requestId)].sub(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Checks if the list of audits has any elements\r\n   */\r\n  function auditQueueExists() internal view returns(bool) {\r\n    return priceList.listExists();\r\n  }\r\n\r\n  /**\r\n   * @dev Adds an audit request to the queue\r\n   * @param requestId Request ID.\r\n   * @param existingPrice price of an existing audit in the queue (makes insertion O(1))\r\n   */\r\n  function queueAuditRequest(uint256 requestId, uint256 existingPrice) internal {\r\n    uint256 price = auditData.getAuditPrice(requestId);\r\n    if (!priceList.nodeExists(price)) {\r\n      // if a price bucket doesn't exist, create it next to an existing one\r\n      priceList.insert(priceList.getSortedSpot(existingPrice, price, NEXT), price, PREV);\r\n    }\r\n    // push to the tail\r\n    auditsByPrice[price].push(requestId, PREV);\r\n  }\r\n\r\n  /**\r\n   * @dev Evaluates if there is an audit price >= minPrice. Returns 0 if there no audit with the desired price.\r\n   * Note that there should not be any audit with price as 0.\r\n   * @param minPrice The minimum audit price.\r\n   */\r\n  function anyAuditRequestMatchesPrice(uint256 minPrice) internal view returns(uint256) {\r\n    bool exists;\r\n    uint256 price;\r\n\r\n    // picks the tail of price buckets\r\n    (exists, price) = priceList.getAdjacent(HEAD, PREV);\r\n\r\n    if (price < minPrice) {\r\n      return 0;\r\n    }\r\n    return price;\r\n  }\r\n\r\n  /**\r\n   * @dev Finds a list of most expensive audits and returns the oldest one that has a price >= minPrice\r\n   * @param minPrice The minimum audit price.\r\n   */\r\n  function dequeueAuditRequest(uint256 minPrice) internal returns(uint256) {\r\n    uint256 price;\r\n\r\n    // picks the tail of price buckets\r\n    // TODO seems the following statement is redundantly called from getNextAuditRequest. If this is the only place\r\n    // to call dequeueAuditRequest, then removing the following line saves gas, but leaves dequeueAuditRequest\r\n    // unsafe for further extension by noobies.\r\n    price = anyAuditRequestMatchesPrice(minPrice);\r\n\r\n    if (price > 0) {\r\n      // picks the oldest audit request\r\n      uint256 result = auditsByPrice[price].pop(NEXT);\r\n      // removes the price bucket if it contains no requests\r\n      if (!auditsByPrice[price].listExists()) {\r\n        priceList.remove(price);\r\n      }\r\n      return result;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Removes an element from the list\r\n   * @param requestId The Id of the request to be removed\r\n   */\r\n  function removeQueueElement(uint256 requestId) internal {\r\n    uint256 price = auditData.getAuditPrice(requestId);\r\n\r\n    // the node must exist in the list\r\n    require(priceList.nodeExists(price));\r\n    require(auditsByPrice[price].nodeExists(requestId));\r\n\r\n    auditsByPrice[price].remove(requestId);\r\n    if (!auditsByPrice[price].listExists()) {\r\n      priceList.remove(price);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getAuditState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getNextWhitelistedNode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_WHITELISTED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestor\",\"type\":\"address\"},{\"name\":\"contractUri\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"addAuditRequest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxAssignments\",\"type\":\"uint256\"}],\"name\":\"setMaxAssignedRequests\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"},{\"name\":\"reportHash\",\"type\":\"string\"}],\"name\":\"setAuditReportHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getAuditRequestBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minAuditPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"node\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"},{\"name\":\"reportBlockNumber\",\"type\":\"uint256\"}],\"name\":\"setAuditReportBlockNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getAuditAuditor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"},{\"name\":\"assignBlockNumber\",\"type\":\"uint256\"}],\"name\":\"setAuditAssignBlockNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"},{\"name\":\"registrar\",\"type\":\"address\"}],\"name\":\"setAuditRegistrar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getAuditAssignBlockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getAuditRegistrar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getAuditContractUri\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"setAuditState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"},{\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"setAuditAuditor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeNodeFromWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"audits\",\"outputs\":[{\"name\":\"requestor\",\"type\":\"address\"},{\"name\":\"contractUri\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"requestBlockNumber\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"auditor\",\"type\":\"address\"},{\"name\":\"assignBlockNumber\",\"type\":\"uint256\"},{\"name\":\"reportHash\",\"type\":\"string\"},{\"name\":\"reportBlockNumber\",\"type\":\"uint256\"},{\"name\":\"registrar\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addNodeToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getAuditPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"timeoutInBlocks\",\"type\":\"uint256\"}],\"name\":\"setAuditTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"auditor\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setMinAuditPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auditTimeoutInBlocks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getAuditRequestor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAssignedRequests\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"getMinAuditPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedNodeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedNodeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roleName\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"QuantstampAuditData","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000099ea4db9ee77acd40b119bd1dc4e33e1c070b80d","Library":"LinkedListLib:f0482be25e05607baee7478873673cbecec3c7f5","SwarmSource":"bzzr://43fe1445d9c1485f059398e07679042cd4d8b76c941a0bb9f7fa67be188dc286"}]}