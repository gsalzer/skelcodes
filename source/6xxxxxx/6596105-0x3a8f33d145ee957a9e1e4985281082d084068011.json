{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/ERC677Receiver.sol\r\n\r\ncontract ERC677Receiver {\r\n  function onTokenTransfer(address _from, uint _value, bytes _data) external returns(bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/ERC677.sol\r\n\r\ncontract ERC677 is ERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n\r\n    function transferAndCall(address, uint, bytes) external returns (bool);\r\n\r\n}\r\n\r\n// File: contracts/IBurnableMintableERC677Token.sol\r\n\r\ncontract IBurnableMintableERC677Token is ERC677 {\r\n    function mint(address, uint256) public returns (bool);\r\n    function burn(uint256 _value) public;\r\n    function claimTokens(address _token, address _to) public;\r\n}\r\n\r\n// File: contracts/IBridgeValidators.sol\r\n\r\ninterface IBridgeValidators {\r\n    function isValidator(address _validator) public view returns(bool);\r\n    function requiredSignatures() public view returns(uint256);\r\n    function owner() public view returns(address);\r\n}\r\n\r\n// File: contracts/libraries/Message.sol\r\n\r\nlibrary Message {\r\n    // function uintToString(uint256 inputValue) internal pure returns (string) {\r\n    //     // figure out the length of the resulting string\r\n    //     uint256 length = 0;\r\n    //     uint256 currentValue = inputValue;\r\n    //     do {\r\n    //         length++;\r\n    //         currentValue /= 10;\r\n    //     } while (currentValue != 0);\r\n    //     // allocate enough memory\r\n    //     bytes memory result = new bytes(length);\r\n    //     // construct the string backwards\r\n    //     uint256 i = length - 1;\r\n    //     currentValue = inputValue;\r\n    //     do {\r\n    //         result[i--] = byte(48 + currentValue % 10);\r\n    //         currentValue /= 10;\r\n    //     } while (currentValue != 0);\r\n    //     return string(result);\r\n    // }\r\n\r\n    function addressArrayContains(address[] array, address value) internal pure returns (bool) {\r\n        for (uint256 i = 0; i < array.length; i++) {\r\n            if (array[i] == value) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    // layout of message :: bytes:\r\n    // offset  0: 32 bytes :: uint256 - message length\r\n    // offset 32: 20 bytes :: address - recipient address\r\n    // offset 52: 32 bytes :: uint256 - value\r\n    // offset 84: 32 bytes :: bytes32 - transaction hash\r\n    // offset 104: 20 bytes :: address - contract address to prevent double spending\r\n\r\n    // bytes 1 to 32 are 0 because message length is stored as little endian.\r\n    // mload always reads 32 bytes.\r\n    // so we can and have to start reading recipient at offset 20 instead of 32.\r\n    // if we were to read at 32 the address would contain part of value and be corrupted.\r\n    // when reading from offset 20 mload will read 12 zero bytes followed\r\n    // by the 20 recipient address bytes and correctly convert it into an address.\r\n    // this saves some storage/gas over the alternative solution\r\n    // which is padding address to 32 bytes and reading recipient at offset 32.\r\n    // for more details see discussion in:\r\n    // https://github.com/paritytech/parity-bridge/issues/61\r\n    function parseMessage(bytes message)\r\n        internal\r\n        pure\r\n        returns(address recipient, uint256 amount, bytes32 txHash, address contractAddress)\r\n    {\r\n        require(isMessageValid(message));\r\n        assembly {\r\n            recipient := and(mload(add(message, 20)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n            amount := mload(add(message, 52))\r\n            txHash := mload(add(message, 84))\r\n            contractAddress := mload(add(message, 104))\r\n        }\r\n    }\r\n\r\n    function isMessageValid(bytes _msg) internal pure returns(bool) {\r\n        return _msg.length == requiredMessageLength();\r\n    }\r\n\r\n    function requiredMessageLength() internal pure returns(uint256) {\r\n        return 104;\r\n    }\r\n\r\n    function recoverAddressFromSignedMessage(bytes signature, bytes message) internal pure returns (address) {\r\n        require(signature.length == 65);\r\n        bytes32 r;\r\n        bytes32 s;\r\n        bytes1 v;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := mload(add(signature, 0x60))\r\n        }\r\n        return ecrecover(hashMessage(message), uint8(v), r, s);\r\n    }\r\n\r\n    function hashMessage(bytes message) internal pure returns (bytes32) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n\";\r\n        // message is always 84 length\r\n        string memory msgLength = \"104\";\r\n        return keccak256(abi.encodePacked(prefix, msgLength, message));\r\n    }\r\n\r\n    function hasEnoughValidSignatures(\r\n        bytes _message,\r\n        uint8[] _vs,\r\n        bytes32[] _rs,\r\n        bytes32[] _ss,\r\n        IBridgeValidators _validatorContract) internal view {\r\n        require(isMessageValid(_message));\r\n        uint256 requiredSignatures = _validatorContract.requiredSignatures();\r\n        require(_vs.length >= requiredSignatures);\r\n        bytes32 hash = hashMessage(_message);\r\n        address[] memory encounteredAddresses = new address[](requiredSignatures);\r\n\r\n        for (uint256 i = 0; i < requiredSignatures; i++) {\r\n            address recoveredAddress = ecrecover(hash, _vs[i], _rs[i], _ss[i]);\r\n            require(_validatorContract.isValidator(recoveredAddress));\r\n            if (addressArrayContains(encounteredAddresses, recoveredAddress)) {\r\n                revert();\r\n            }\r\n            encounteredAddresses[i] = recoveredAddress;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/libraries/Version.sol\r\n\r\nlibrary Version {\r\n\r\n    struct Version {\r\n        uint64 major;\r\n        uint64 minor;\r\n        uint64 patch;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/upgradeability/EternalStorage.sol\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n\r\n    mapping(bytes32 => uint256) internal uintStorage;\r\n    mapping(bytes32 => string) internal stringStorage;\r\n    mapping(bytes32 => address) internal addressStorage;\r\n    mapping(bytes32 => bytes) internal bytesStorage;\r\n    mapping(bytes32 => bool) internal boolStorage;\r\n    mapping(bytes32 => int256) internal intStorage;\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Validatable.sol\r\n\r\ncontract Validatable is EternalStorage {\r\n    function validatorContract() public view returns(IBridgeValidators) {\r\n        return IBridgeValidators(addressStorage[keccak256(abi.encodePacked(\"validatorContract\"))]);\r\n    }\r\n\r\n    modifier onlyValidator() {\r\n        require(validatorContract().isValidator(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(validatorContract().owner() == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function requiredSignatures() public view returns(uint256) {\r\n        return validatorContract().requiredSignatures();\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicBridge.sol\r\n\r\ncontract BasicBridge is EternalStorage, Validatable {\r\n    using SafeMath for uint256;\r\n\r\n    Version.Version public getBridgeInterfacesVersion = Version.Version(2, 0, 0);\r\n\r\n    event GasPriceChanged(uint256 gasPrice);\r\n    event RequiredBlockConfirmationChanged(uint256 requiredBlockConfirmations);\r\n    event DailyLimitChanged(uint256 newLimit);\r\n\r\n    function setGasPrice(uint256 _gasPrice) public onlyOwner {\r\n        require(_gasPrice > 0);\r\n        uintStorage[keccak256(abi.encodePacked(\"gasPrice\"))] = _gasPrice;\r\n        emit GasPriceChanged(_gasPrice);\r\n    }\r\n\r\n    function gasPrice() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"gasPrice\"))];\r\n    }\r\n\r\n    function setRequiredBlockConfirmations(uint256 _blockConfirmations) public onlyOwner {\r\n        require(_blockConfirmations > 0);\r\n        uintStorage[keccak256(abi.encodePacked(\"requiredBlockConfirmations\"))] = _blockConfirmations;\r\n        emit RequiredBlockConfirmationChanged(_blockConfirmations);\r\n    }\r\n\r\n    function requiredBlockConfirmations() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"requiredBlockConfirmations\"))];\r\n    }\r\n\r\n    function deployedAtBlock() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"deployedAtBlock\"))];\r\n    }\r\n\r\n    function setTotalSpentPerDay(uint256 _day, uint256 _value) internal {\r\n        uintStorage[keccak256(abi.encodePacked(\"totalSpentPerDay\", _day))] = _value;\r\n    }\r\n\r\n    function totalSpentPerDay(uint256 _day) public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"totalSpentPerDay\", _day))];\r\n    }\r\n\r\n    function minPerTx() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"minPerTx\"))];\r\n    }\r\n\r\n    function maxPerTx() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"maxPerTx\"))];\r\n    }\r\n\r\n    function setInitialize(bool _status) internal {\r\n        boolStorage[keccak256(abi.encodePacked(\"isInitialized\"))] = _status;\r\n    }\r\n\r\n    function isInitialized() public view returns(bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\"isInitialized\"))];\r\n    }\r\n\r\n    function getCurrentDay() public view returns(uint256) {\r\n        return now / 1 days;\r\n    }\r\n\r\n    function setDailyLimit(uint256 _dailyLimit) public onlyOwner {\r\n        uintStorage[keccak256(abi.encodePacked(\"dailyLimit\"))] = _dailyLimit;\r\n        emit DailyLimitChanged(_dailyLimit);\r\n    }\r\n\r\n    function dailyLimit() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\"dailyLimit\"))];\r\n    }\r\n\r\n    function setMaxPerTx(uint256 _maxPerTx) external onlyOwner {\r\n        require(_maxPerTx < dailyLimit());\r\n        uintStorage[keccak256(abi.encodePacked(\"maxPerTx\"))] = _maxPerTx;\r\n    }\r\n\r\n    function setMinPerTx(uint256 _minPerTx) external onlyOwner {\r\n        require(_minPerTx < dailyLimit() && _minPerTx < maxPerTx());\r\n        uintStorage[keccak256(abi.encodePacked(\"minPerTx\"))] = _minPerTx;\r\n    }\r\n\r\n    function withinLimit(uint256 _amount) public view returns(bool) {\r\n        uint256 nextLimit = totalSpentPerDay(getCurrentDay()).add(_amount);\r\n        return dailyLimit() >= nextLimit && _amount <= maxPerTx() && _amount >= minPerTx();\r\n    }\r\n\r\n    function claimTokens(address _token, address _to) public onlyOwner {\r\n        require(_to != address(0));\r\n        if (_token == address(0)) {\r\n            _to.transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        ERC20Basic token = ERC20Basic(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        require(token.transfer(_to, balance));\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BasicForeignBridge.sol\r\n\r\ncontract BasicForeignBridge is EternalStorage, Validatable {\r\n    using SafeMath for uint256;\r\n    /// triggered when relay of deposit from HomeBridge is complete\r\n    event RelayedMessage(address recipient, uint value, bytes32 transactionHash);\r\n    function executeSignatures(uint8[] vs, bytes32[] rs, bytes32[] ss, bytes message) external {\r\n        Message.hasEnoughValidSignatures(message, vs, rs, ss, validatorContract());\r\n        address recipient;\r\n        uint256 amount;\r\n        bytes32 txHash;\r\n        address contractAddress;\r\n        (recipient, amount, txHash, contractAddress) = Message.parseMessage(message);\r\n        require(contractAddress == address(this));\r\n        require(!relayedMessages(txHash));\r\n        setRelayedMessages(txHash, true);\r\n        require(onExecuteMessage(recipient, amount));\r\n        emit RelayedMessage(recipient, amount, txHash);\r\n    }\r\n\r\n    function onExecuteMessage(address, uint256) internal returns(bool){\r\n        // has to be defined\r\n    }\r\n\r\n    function setRelayedMessages(bytes32 _txHash, bool _status) internal {\r\n        boolStorage[keccak256(abi.encodePacked(\"relayedMessages\", _txHash))] = _status;\r\n    }\r\n\r\n    function relayedMessages(bytes32 _txHash) public view returns(bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\"relayedMessages\", _txHash))];\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/erc20_to_erc20/ForeignBridgeErcToErc.sol\r\n\r\ncontract ForeignBridgeErcToErc is BasicBridge, BasicForeignBridge {\r\n\r\n    event RelayedMessage(address recipient, uint value, bytes32 transactionHash);\r\n\r\n    function initialize(\r\n        address _validatorContract,\r\n        address _erc20token,\r\n        uint256 _requiredBlockConfirmations\r\n    ) public returns(bool) {\r\n        require(!isInitialized(), \"already initialized\");\r\n        require(_validatorContract != address(0), \"address cannot be empty\");\r\n        require(_requiredBlockConfirmations != 0, \"requiredBlockConfirmations cannot be 0\");\r\n        addressStorage[keccak256(abi.encodePacked(\"validatorContract\"))] = _validatorContract;\r\n        setErc20token(_erc20token);\r\n        uintStorage[keccak256(abi.encodePacked(\"deployedAtBlock\"))] = block.number;\r\n        uintStorage[keccak256(abi.encodePacked(\"requiredBlockConfirmations\"))] = _requiredBlockConfirmations;\r\n        setInitialize(true);\r\n        return isInitialized();\r\n    }\r\n\r\n    function getBridgeMode() public pure returns(bytes4 _data) {\r\n        return bytes4(keccak256(abi.encodePacked(\"erc-to-erc-core\")));\r\n    }\r\n\r\n    function claimTokens(address _token, address _to) public onlyOwner {\r\n        require(_token != address(erc20token()));\r\n        super.claimTokens(_token, _to);\r\n    }\r\n\r\n    function erc20token() public view returns(ERC20Basic) {\r\n        return ERC20Basic(addressStorage[keccak256(abi.encodePacked(\"erc20token\"))]);\r\n    }\r\n\r\n    function onExecuteMessage(address _recipient, uint256 _amount) internal returns(bool){\r\n        return erc20token().transfer(_recipient, _amount);\r\n    }\r\n\r\n    function setErc20token(address _token) private {\r\n        require(_token != address(0));\r\n        addressStorage[keccak256(abi.encodePacked(\"erc20token\"))] = _token;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_validatorContract\",\"type\":\"address\"},{\"name\":\"_erc20token\",\"type\":\"address\"},{\"name\":\"_requiredBlockConfirmations\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc20token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_txHash\",\"type\":\"bytes32\"}],\"name\":\"relayedMessages\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vs\",\"type\":\"uint8[]\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"executeSignatures\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_day\",\"type\":\"uint256\"}],\"name\":\"totalSpentPerDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredBlockConfirmations\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeMode\",\"outputs\":[{\"name\":\"_data\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredSignatures\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deployedAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBridgeInterfacesVersion\",\"outputs\":[{\"name\":\"major\",\"type\":\"uint64\"},{\"name\":\"minor\",\"type\":\"uint64\"},{\"name\":\"patch\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minPerTx\",\"type\":\"uint256\"}],\"name\":\"setMinPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blockConfirmations\",\"type\":\"uint256\"}],\"name\":\"setRequiredBlockConfirmations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dailyLimit\",\"type\":\"uint256\"}],\"name\":\"setDailyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"setGasPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withinLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPerTx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"RelayedMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"GasPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requiredBlockConfirmations\",\"type\":\"uint256\"}],\"name\":\"RequiredBlockConfirmationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"DailyLimitChanged\",\"type\":\"event\"}]","ContractName":"ForeignBridgeErcToErc","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://51e1e311b0fe4fe0e8cb1e1ba1aae1660f066fde13cd77d8cc0e436e48426ff3"}]}