{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract Token {\r\n    function totalSupply() public constant returns (uint256 supply) {}\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {}\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {}\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {}\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {}\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StandardToken is Token {\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n\r\ncontract Obredis is StandardToken { \r\n    string public name;                   // Token Name\r\n    uint8 public decimals;                // How many decimals the token has\r\n    string public symbol;                 // Token identifier\r\n    address public fundsWallet;           // Wallet which manages the contract\r\n    uint256 public totalRewards;\r\n    uint256 public newReward;\r\n    address[] public addresses;\r\n    mapping (address => bool) public isAddress;\r\n    bool public allRewPaid;\r\n    mapping (address => bool) public awaitingRew;\r\n    \r\n    \r\n    event Minted(uint256 qty,uint256 totalSupply);\r\n    event Burned(uint256 qty,uint256 totalSupply);\r\n    event Reward(uint256 qty);\r\n    \r\n    function Obredis() public {\r\n        balances[msg.sender] = 0;\r\n        totalSupply = 0;\r\n        name = \"Obelisk Reward Token\";\r\n        decimals = 18;\r\n        symbol = \"ORT\";\r\n        allRewPaid = true;\r\n        awaitingRew[msg.sender] = false;\r\n        fundsWallet = msg.sender;\r\n        addresses.push(msg.sender);\r\n        isAddress[msg.sender] = true;\r\n    }\r\n\r\n    function() public {\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public canSend returns (bool success) {\r\n        // Transfer Tokens\r\n        require(super.transfer(_to,_value));\r\n        if (!isAddress[_to]){\r\n            addresses.push(_to);\r\n            isAddress[_to] = true;\r\n        }\r\n        // Return success flag\r\n        return true;\r\n    }\r\n\r\n    modifier isOwner {\r\n        require(msg.sender == fundsWallet);\r\n        _;\r\n    }\r\n    \r\n    modifier canSend {\r\n        require(allRewPaid);\r\n        _;\r\n    }\r\n    \r\n    function forceTransfer(address _who, uint256 _qty) public isOwner returns (bool success) {\r\n        // owner can transfer qty from a wallet (in case your hopeless mates lose their private keys).\r\n        if (balances[_who] >= _qty && _qty > 0) {\r\n            balances[_who] -= _qty;\r\n            balances[fundsWallet] += _qty;\r\n            Transfer(_who, fundsWallet, _qty);\r\n            return true;\r\n        } else { \r\n            return false;\r\n        }\r\n    }\r\n\r\n    function payReward() public payable isOwner canSend {\r\n        require(msg.value > 0);\r\n        newReward = this.balance; // the only balance will be the scraps after payout\r\n        totalRewards += msg.value;     // only want to update with new amount\r\n        Reward(msg.value);\r\n        allRewPaid = false;\r\n        uint32 len = uint32(addresses.length);\r\n        for (uint32 i = 0; i < len ; i++){\r\n            awaitingRew[addresses[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function payAllRewards() public isOwner {\r\n        require(allRewPaid == false);\r\n        uint32 len = uint32(addresses.length);\r\n        for (uint32 i = 0; i < len ; i++){\r\n            if (balances[addresses[i]] == 0){\r\n                awaitingRew[addresses[i]] = false;\r\n            } else if (awaitingRew[addresses[i]]) {\r\n                addresses[i].transfer((newReward*balances[addresses[i]])/totalSupply);\r\n                awaitingRew[addresses[i]] = false;\r\n            }\r\n        }\r\n        allRewPaid = true;\r\n    }\r\n\r\n    function paySomeRewards(uint32 _first, uint32 _last) public isOwner {\r\n        require(_first <= _last);\r\n        require(_last <= addresses.length);\r\n        for (uint32 i = _first; i<= _last; i++) {\r\n            if (balances[addresses[i]] == 0){\r\n                awaitingRew[addresses[i]] = false;\r\n            } else if (awaitingRew[addresses[i]]) {\r\n                addresses[i].transfer((newReward*balances[addresses[i]])/totalSupply);\r\n                awaitingRew[addresses[i]] = false;\r\n            }\r\n        }\r\n        allRewPaid = checkAllRewPaid(); \r\n    }\r\n    \r\n    function checkAllRewPaid() public view returns(bool success) {\r\n        uint32 len = uint32(addresses.length);\r\n        for (uint32 i = 0; i < len ; i++ ){\r\n            if (awaitingRew[addresses[i]]){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function updateAllRewPaid() public isOwner {\r\n        allRewPaid = checkAllRewPaid();\r\n    }\r\n\r\n    function mint(uint256 _qty) public canSend isOwner {\r\n        require(totalSupply + _qty > totalSupply); // Prevents overflow\r\n        totalSupply += _qty;\r\n        balances[fundsWallet] += _qty;\r\n        Minted(_qty,totalSupply);\r\n        Transfer(0x0, fundsWallet, _qty);\r\n    }\r\n    \r\n    function burn(uint256 _qty) public canSend isOwner {\r\n        require(totalSupply - _qty < totalSupply); // Prevents underflow\r\n        require(balances[fundsWallet] >= _qty);\r\n        totalSupply -= _qty;\r\n        balances[fundsWallet] -= _qty;\r\n        Burned(_qty,totalSupply);\r\n        Transfer(fundsWallet, 0x0, _qty);\r\n    }\r\n    \r\n    function collectOwnRew() public {\r\n        if(awaitingRew[msg.sender]){\r\n            msg.sender.transfer((newReward*balances[msg.sender])/totalSupply);\r\n            awaitingRew[msg.sender] = false;\r\n        }\r\n        allRewPaid = checkAllRewPaid();\r\n    }\r\n    \r\n    function addressesLength() public view returns(uint32 len){\r\n        return uint32(addresses.length);\r\n    }\r\n    \r\n    function kill() public isOwner {\r\n        // Too much money involved to not have a fire exit\r\n        selfdestruct(fundsWallet);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"addressesLength\",\"outputs\":[{\"name\":\"len\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allRewPaid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkAllRewPaid\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_first\",\"type\":\"uint32\"},{\"name\":\"_last\",\"type\":\"uint32\"}],\"name\":\"paySomeRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payReward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectOwnRew\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateAllRewPaid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payAllRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"awaitingRew\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"forceTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"qty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"qty\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"qty\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Obredis","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ca75fbfb9a13737cbbda26108156025bf92b354cd96e6de697042ddbe2ddcdb5"}]}