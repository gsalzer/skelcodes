{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n/**\r\n     * @title Ownable\r\n     * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n     * functions, this simplifies the implementation of \"user permissions\".\r\n     */\r\n    contract Ownable {\r\n      address public owner;\r\n    \r\n      event OwnershipRenounced(address indexed previousOwner);\r\n      event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n      /**\r\n       * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n       * account.\r\n       */\r\n      //function Ownable() public {\r\n      constructor() public {\r\n        owner = msg.sender;\r\n      }\r\n    \r\n      /**\r\n       * @dev Throws if called by any account other than the owner.\r\n       */\r\n      modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n      }\r\n    \r\n      /**\r\n       * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n       * @param newOwner The address to transfer ownership to.\r\n       */\r\n      function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n      }\r\n    \r\n      /**\r\n       * @dev Allows the current owner to relinquish control of the contract.\r\n       */\r\n      function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(owner);\r\n        owner = address(0);\r\n      }\r\n    }\r\n\r\n// File: contracts/CeoOwner.sol\r\n\r\ncontract CeoOwner is Ownable{\r\n\r\n\t// The primary address which is permitted to interact with the contract\r\n\t// Address of wallet account on WEB3.js account.\r\n\taddress public ceoAddress; \r\n\r\n\tmodifier onlyCEO() {\r\n\t\trequire(msg.sender == ceoAddress);\r\n\t\t_;\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/ReentrancyGuard.sol\r\n\r\n/**\r\n * @title Helps contracts guard agains reentrancy attacks.\r\n * @author Remco Bloemen <remco@2Ï€.com>\r\n * @notice If you mark a function `nonReentrant`, you should also\r\n * mark it `external`.\r\n */\r\n contract ReentrancyGuard {\r\n\r\n  /**\r\n   * @dev We use a single lock for the whole contract.\r\n   */\r\n   bool private reentrancyLock = false;\r\n\r\n  /**\r\n   * @dev Prevents a contract from calling itself, directly or indirectly.\r\n   * @notice If you mark a function `nonReentrant`, you should also\r\n   * mark it `external`. Calling one nonReentrant function from\r\n   * another is not supported. Instead, you can implement a\r\n   * `private` function doing the actual work, and a `external`\r\n   * wrapper marked as `nonReentrant`.\r\n   */\r\n   modifier nonReentrant() {\r\n    require(!reentrancyLock);\r\n    reentrancyLock = true;\r\n    _;\r\n    reentrancyLock = false;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n/**\r\n     * @title SafeMath\r\n     * @dev Math operations with safety checks that throw on error\r\n     */\r\n     library SafeMath {\r\n      \r\n      /**\r\n      * @dev Multiplies two numbers, throws on overflow.\r\n      */\r\n      function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n      }\r\n      \r\n      /**\r\n      * @dev Integer division of two numbers, truncating the quotient.\r\n      */\r\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n      }\r\n      \r\n      /**\r\n      * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n      */\r\n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n      }\r\n      \r\n      /**\r\n      * @dev Adds two numbers, throws on overflow.\r\n      */\r\n      function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n      }\r\n    }\r\n\r\n// File: contracts/CertificateCore.sol\r\n\r\ncontract CertificateCore is CeoOwner, ReentrancyGuard { \r\n   \r\n    using SafeMath for uint256; \r\n\r\n    uint256 public constant KEY_CREATION_LIMIT = 10000;\r\n    uint256 public totalSupplyOfKeys;\r\n    uint256 public totalReclaimedKeys;\r\n    \r\n    // Track who is making the deposits and the amount made\r\n    mapping(address => uint256) public balanceOf; \r\n\r\n    // Main data structure to hold all of the public keys   \r\n    mapping(address => bool) public allThePublicKeys;\r\n    \r\n    // A bonus deposit has been made\r\n    event DepositBonusEvent(address sender, uint256 amount); \r\n    \r\n    // A new certificate has been successfully sold and a deposit added\r\n    event DepositCertificateSaleEvent(address sender, address publicKey, uint256 amount);\r\n\r\n    // A certificate has been payed out.\r\n    event CertPayedOutEvent(address sender, address recpublicKey, uint256 payoutValue);\r\n    \r\n\r\n    constructor(address _ceoAddress) public{\r\n        require(_ceoAddress != address(0));\r\n        owner = msg.sender;\r\n        ceoAddress = _ceoAddress;\r\n    }\r\n \r\n    \r\n    /**\r\n     *\r\n     * Main function for creating certificates\r\n     * \r\n     */\r\n    //function createANewCert(address _publicKey, uint256 _amount) external payable onlyCEO{\r\n    function depositCertificateSale(address _publicKey, uint256 _amount) external payable onlyCEO{\r\n        require(msg.sender != address(0));\r\n        require(_amount > 0);\r\n        require(msg.value == _amount);\r\n        require(_publicKey != address(0));\r\n        require(totalSupplyOfKeys < KEY_CREATION_LIMIT);\r\n        require(totalReclaimedKeys < KEY_CREATION_LIMIT);\r\n \r\n        require(!allThePublicKeys[_publicKey]);\r\n\r\n        allThePublicKeys[_publicKey]=true;\r\n        totalSupplyOfKeys ++;\r\n\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(_amount);\r\n        \r\n        emit DepositCertificateSaleEvent(msg.sender, _publicKey, _amount);\r\n    }\r\n    \r\n    /**\r\n     *  Allow the CEO to deposit ETH without creating a new certificate\r\n     * \r\n     * */\r\n    //function deposit(uint256 _amount) external payable onlyCEO {\r\n    function depositBonus(uint256 _amount) external payable onlyCEO {\r\n        require(_amount > 0);\r\n        require(msg.value == _amount);\r\n      \r\n        require((totalSupplyOfKeys > 0) && (totalSupplyOfKeys < KEY_CREATION_LIMIT));\r\n        require(totalReclaimedKeys < KEY_CREATION_LIMIT);\r\n      \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(_amount);\r\n        \r\n        emit DepositBonusEvent(msg.sender, _amount);\r\n    }\r\n    \r\n    /**\r\n     * Payout a certificate. \r\n     * \r\n     */\r\n    function payoutACert(bytes32 _msgHash, uint8 _v, bytes32 _r, bytes32 _s) external nonReentrant{\r\n        require(msg.sender != address(0));\r\n        require(address(this).balance > 0);\r\n        require(totalSupplyOfKeys > 0);\r\n        require(totalReclaimedKeys < KEY_CREATION_LIMIT);\r\n         \r\n        address _recoveredAddress = ecrecover(_msgHash, _v, _r, _s);\r\n        require(allThePublicKeys[_recoveredAddress]);\r\n    \r\n        allThePublicKeys[_recoveredAddress]=false;\r\n\r\n        uint256 _validKeys = totalSupplyOfKeys.sub(totalReclaimedKeys);\r\n        uint256 _payoutValue = address(this).balance.div(_validKeys);\r\n\r\n        msg.sender.transfer(_payoutValue);\r\n        emit CertPayedOutEvent(msg.sender, _recoveredAddress, _payoutValue);\r\n        \r\n        totalReclaimedKeys ++;\r\n    }\r\n \r\n     /**\r\n     * Update payout value per certificate.\r\n     */\r\n     //\r\n     // debug only. remove in Live deploy.\r\n     // do this operation on the Dapp side.\r\n    function calculatePayout() view external returns(\r\n        uint256 _etherValue\r\n        ){\r\n        uint256 _validKeys = totalSupplyOfKeys.sub(totalReclaimedKeys);\r\n        // Last key has been paid out.\r\n        if(_validKeys == 0){\r\n            _etherValue = 0;\r\n        }else{\r\n            _etherValue = address(this).balance.div(_validKeys);\r\n        }\r\n    }\r\n \r\n \r\n    /**\r\n     * Check to see if a Key has been payed out or if it's still valid\r\n     */\r\n    function checkIfValidKey(address _publicKey) view external{ // external\r\n        require(_publicKey != address(0));\r\n        require(allThePublicKeys[_publicKey]);\r\n    }\r\n\r\n    function getBalance() view external returns(\r\n         uint256 contractBalance\r\n    ){\r\n        contractBalance = address(this).balance;\r\n    }\r\n    \r\n    /**\r\n     * Saftey Mechanism\r\n     * \r\n     */\r\n    function kill() external onlyOwner \r\n    { \r\n        selfdestruct(owner); \r\n    }\r\n \r\n    /**\r\n     * Payable fallback function.\r\n     * No Tipping! \r\n     * \r\n     */\r\n    //function () payable public{\r\n    //    throw;\r\n    //}\r\n    \r\n}\r\n\r\n// File: contracts/Migrations.sol\r\n\r\ncontract Migrations {\r\n  address public owner;\r\n  uint public last_completed_migration;\r\n\r\n  modifier restricted() {\r\n    if (msg.sender == owner) _;\r\n  }\r\n\r\n  //function Migrations() public {\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function setCompleted(uint completed) public restricted {\r\n    last_completed_migration = completed;\r\n  }\r\n\r\n  function upgrade(address new_address) public restricted {\r\n    Migrations upgraded = Migrations(new_address);\r\n    upgraded.setCompleted(last_completed_migration);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalReclaimedKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyOfKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KEY_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_msgHash\",\"type\":\"bytes32\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"payoutACert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculatePayout\",\"outputs\":[{\"name\":\"_etherValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositCertificateSale\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allThePublicKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositBonus\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_publicKey\",\"type\":\"address\"}],\"name\":\"checkIfValidKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ceoAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositBonusEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"publicKey\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositCertificateSaleEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recpublicKey\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"payoutValue\",\"type\":\"uint256\"}],\"name\":\"CertPayedOutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CertificateCore","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d0c9a560ea86af18174b76bc5c13a973c52dac6a","Library":"","SwarmSource":"bzzr://f74ee599ffeeb44b8e20b9bbbba99b76c707fbe9d2f6a25fa57772ab6a946374"}]}