{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Kryptium Tracker Smart Contract v.1.0.0\r\n * Copyright Â© 2018 Kryptium Team <info@kryptium.io>\r\n * Author: Giannis Zarifis <jzarifis@kryptium.io>\r\n * \r\n * A registry of betting houses based on the Ethereum blockchain. It keeps track\r\n * of users' upvotes/downvotes for specific houses and can be fully autonomous \r\n * or managed.\r\n *\r\n * This program is free to use according the Terms of Use available at\r\n * <https://kryptium.io/terms-of-use/>. You cannot resell it or copy any\r\n * part of it or modify it without permission from the Kryptium Team.\r\n *\r\n * This program is distributed in the hope that it will be useful, but WITHOUT \r\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\r\n * FOR A PARTICULAR PURPOSE. See the Terms and Conditions for more details.\r\n */\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * SafeMath\r\n * Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b != 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mulByFraction(uint256 number, uint256 numerator, uint256 denominator) internal pure returns (uint256) {\r\n        return div(mul(number, numerator), denominator);\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n\r\n    address payable public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) onlyOwner public {\r\n        require(newOwner != address(0x0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * House smart contract interface\r\n */\r\ninterface HouseContract {\r\n     function owner() external view returns (address); \r\n     function isHouse() external view returns (bool);\r\n     function isPlayer(address playerAddress) external view returns(bool);\r\n}\r\n\r\n/*\r\n * Kryptium Tracker Smart Contract.  \r\n */\r\ncontract Tracker is SafeMath, Owned {\r\n\r\n\r\n\r\n\r\n    enum Action { added, updated}\r\n\r\n    struct House {            \r\n        uint upVotes;             \r\n        uint downVotes;\r\n        bool isActive;\r\n        address oldAddress;\r\n        address owner;\r\n    }\r\n\r\n    struct TrackerData { \r\n        string  name;\r\n        string  creatorName;\r\n        bool  managed;\r\n        uint trackerVersion;\r\n    }    \r\n\r\n\r\n    TrackerData public trackerData;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => House) public houses;\r\n\r\n    // Player has upvoted a House\r\n    mapping (address => mapping (address => bool)) public playerUpvoted;\r\n\r\n    // Player has downvoted a House\r\n    mapping (address => mapping (address => bool)) public playerDownvoted;\r\n\r\n    // Notifies clients that a house was inserted/altered\r\n    event TrackerChanged(address indexed  newHouseAddress, Action action);\r\n\r\n    // Notifies clients that a new tracker was launched\r\n    event TrackerCreated();\r\n\r\n    // Notifies clients that the Tracker's name was changed\r\n    event TrackerNamesUpdated();    \r\n\r\n\r\n    /**\r\n     * Constructor function\r\n     * Initializes Tracker data\r\n     */\r\n    constructor(string memory trackerName, string memory trackerCreatorName, bool trackerIsManaged, uint version) public {\r\n        trackerData.name = trackerName;\r\n        trackerData.creatorName = trackerCreatorName;\r\n        trackerData.managed = trackerIsManaged;\r\n        trackerData.trackerVersion = version;\r\n        emit TrackerCreated();\r\n    }\r\n\r\n     /**\r\n     * Update Tracker Data function\r\n     *\r\n     * Updates trackersstats\r\n     */\r\n    function updateTrackerNames(string memory newName, string memory newCreatorName) onlyOwner public {\r\n        trackerData.name = newName;\r\n        trackerData.creatorName = newCreatorName;\r\n        emit TrackerNamesUpdated();\r\n    }    \r\n\r\n     /**\r\n     * Add House function\r\n     *\r\n     * Adds a new house\r\n     */\r\n    function addHouse(address houseAddress) public {\r\n        require(!trackerData.managed || msg.sender==owner,\"Tracker is managed\");\r\n        require(!houses[houseAddress].isActive,\"There is a new version of House already registered\");    \r\n        HouseContract houseContract = HouseContract(houseAddress);\r\n        require(houseContract.isHouse(),\"Invalid House\");\r\n        houses[houseAddress].isActive = true;\r\n        houses[houseAddress].owner = houseContract.owner();\r\n        emit TrackerChanged(houseAddress,Action.added);\r\n    }\r\n\r\n    /**\r\n     * Update House function\r\n     *\r\n     * Updates a house \r\n     */\r\n    function updateHouse(address newHouseAddress,address oldHouseAddress) public {\r\n        require(!trackerData.managed || msg.sender==owner,\"Tracker is managed\");\r\n        require(houses[oldHouseAddress].owner==msg.sender || houses[oldHouseAddress].owner==oldHouseAddress,\"Caller isn't the owner of old House\");\r\n        require(!houses[newHouseAddress].isActive,\"There is a new version of House already registered\");  \r\n        HouseContract houseContract = HouseContract(newHouseAddress);\r\n        require(houseContract.isHouse(),\"Invalid House\");\r\n        houses[oldHouseAddress].isActive = false;\r\n        houses[newHouseAddress].isActive = true;\r\n        houses[newHouseAddress].owner = houseContract.owner();\r\n        houses[newHouseAddress].upVotes = houses[oldHouseAddress].upVotes;\r\n        houses[newHouseAddress].downVotes = houses[oldHouseAddress].downVotes;\r\n        houses[newHouseAddress].oldAddress = oldHouseAddress;\r\n        emit TrackerChanged(newHouseAddress,Action.added);\r\n        emit TrackerChanged(oldHouseAddress,Action.updated);\r\n    }\r\n\r\n     /**\r\n     * Remove House function\r\n     *\r\n     * Removes a house\r\n     */\r\n    function removeHouse(address houseAddress) public {\r\n        require(!trackerData.managed || msg.sender==owner,\"Tracker is managed\");\r\n        require(houses[houseAddress].owner==msg.sender,\"Caller isn't the owner of House\");  \r\n        houses[houseAddress].isActive = false;\r\n        emit TrackerChanged(houseAddress,Action.updated);\r\n    }\r\n\r\n     /**\r\n     * UpVote House function\r\n     *\r\n     * UpVotes a house\r\n     */\r\n    function upVoteHouse(address houseAddress) public {\r\n        require(HouseContract(houseAddress).isPlayer(msg.sender),\"Caller hasn't placed any bet\");\r\n        require(!playerUpvoted[msg.sender][houseAddress],\"Has already Upvoted\");\r\n        playerUpvoted[msg.sender][houseAddress] = true;\r\n        houses[houseAddress].upVotes += 1;\r\n        emit TrackerChanged(houseAddress,Action.updated);\r\n    }\r\n\r\n     /**\r\n     * DownVote House function\r\n     *\r\n     * DownVotes a house\r\n     */\r\n    function downVoteHouse(address houseAddress) public {\r\n        require(HouseContract(houseAddress).isPlayer(msg.sender),\"Caller hasn't placed any bet\");\r\n        require(!playerDownvoted[msg.sender][houseAddress],\"Has already Downvoted\");\r\n        playerDownvoted[msg.sender][houseAddress] = true;\r\n        houses[houseAddress].downVotes += 1;\r\n        emit TrackerChanged(houseAddress,Action.updated);\r\n    }    \r\n\r\n    /**\r\n     * Kill function\r\n     *\r\n     * Contract Suicide\r\n     */\r\n    function kill() onlyOwner public {\r\n        selfdestruct(owner); \r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"houseAddress\",\"type\":\"address\"}],\"name\":\"upVoteHouse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trackerData\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"creatorName\",\"type\":\"string\"},{\"name\":\"managed\",\"type\":\"bool\"},{\"name\":\"trackerVersion\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerUpvoted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerDownvoted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"houseAddress\",\"type\":\"address\"}],\"name\":\"addHouse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"houses\",\"outputs\":[{\"name\":\"upVotes\",\"type\":\"uint256\"},{\"name\":\"downVotes\",\"type\":\"uint256\"},{\"name\":\"isActive\",\"type\":\"bool\"},{\"name\":\"oldAddress\",\"type\":\"address\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"houseAddress\",\"type\":\"address\"}],\"name\":\"removeHouse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newCreatorName\",\"type\":\"string\"}],\"name\":\"updateTrackerNames\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newHouseAddress\",\"type\":\"address\"},{\"name\":\"oldHouseAddress\",\"type\":\"address\"}],\"name\":\"updateHouse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"houseAddress\",\"type\":\"address\"}],\"name\":\"downVoteHouse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"trackerName\",\"type\":\"string\"},{\"name\":\"trackerCreatorName\",\"type\":\"string\"},{\"name\":\"trackerIsManaged\",\"type\":\"bool\"},{\"name\":\"version\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newHouseAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"TrackerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TrackerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TrackerNamesUpdated\",\"type\":\"event\"}]","ContractName":"Tracker","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000000e4e657742657420547261636b6572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4e6577426574205465616d000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://ba60bc694894c525b45a1913242a454f9be6a75b55aebd49607f651b2290834e"}]}