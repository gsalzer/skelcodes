{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"Mul overflow!\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"Sub overflow!\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a, \"Add overflow!\");\r\n        return c;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns(bool);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only Owner can do that!\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner)\r\n    external onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership()\r\n    external {\r\n        require(msg.sender == newOwner, \"You are not new Owner!\");\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n    }\r\n}\r\n\r\ncontract Permissioned {\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns(bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Burnable {\r\n\r\n    function burn(uint256 _value) external returns(bool);\r\n    function burnFrom(address _from, uint256 _value) external returns(bool);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed _from, uint256 _value);\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract Aligato is ERC20Interface, Owned, Permissioned, Burnable {\r\n\r\n    using SafeMath for uint256; //Be aware of overflows\r\n\r\n    // This creates an array with all balances\r\n    mapping(address => uint256) internal _balanceOf;\r\n\r\n    // This creates an array with all allowance\r\n    mapping(address => mapping(address => uint256)) internal _allowance;\r\n\r\n    bool public isLocked = true; //only contract Owner can transfer tokens\r\n\r\n    uint256 icoSupply = 0;\r\n\r\n    //set ICO balance and emit\r\n    function setICO(address user, uint256 amt) internal{\r\n        uint256 amt2 = amt * (10 ** uint256(decimals));\r\n        _balanceOf[user] = amt2;\r\n        emit Transfer(0x0, user, amt2);\r\n        icoSupply += amt2;\r\n    }\r\n\r\n    // As ICO been done on platform, we need set proper amouts for ppl that participate\r\n    function doICO() internal{\r\nsetICO(\t0x5cD4c4F9eb8F323d64873C55b8da45f915A8256F\t,\t205750\t);\r\nsetICO(\t0x937f403B2f5cd0C17BEE8EF5DB1ecb2E3C793343\t,\t130500\t);\r\nsetICO(\t0x7503033e1B7AF4C1bc5Dd16B45b88ac08aF256f9\t,\t120300\t);\r\nsetICO(\t0x06010e8bc01446aBf39190F305B3740BE442aD88\t,\t100500\t);\r\nsetICO(\t0x51dB593c4ACC25b527c251E4fAc40C1d0C37559D\t,\t42500\t);\r\nsetICO(\t0xD11c70764B03fd23E451574a824af2104Bec5908\t,\t40000\t);\r\nsetICO(\t0x0c1610251B1Ac4180981D09bc795784beF44115d\t,\t39938\t);\r\nsetICO(\t0x91679f8Ab88a243f6F4387407fd11d75131CF3D4\t,\t35000\t);\r\nsetICO(\t0x1ac43DEC17B267d502cc257e5ab545Af6228ba94\t,\t21750\t);\r\nsetICO(\t0x7fC6cC49a4Dd2C56dBD062141b5D2e3563e4b873\t,\t20000\t);\r\nsetICO(\t0xF19051aD24B50C14C612515fFbd68f06097d014C\t,\t19909\t);\r\nsetICO(\t0x3B6E06351c1E1bD62ffdC47C4ada2fD18a819482\t,\t19868\t);\r\nsetICO(\t0x20A2018CdC1D9A4f474C268b6c20670C597487B2\t,\t16169\t);\r\nsetICO(\t0x2fEcDEedF64C49563E90E926c7F2323DF1ba09D2\t,\t15000\t);\r\nsetICO(\t0xc9b8f7c277551dA2759c2f655Ab8429564bA6a76\t,\t12500\t);\r\nsetICO(\t0x1F2245636D7CeA33f73E4CAa7935481122AF31b9\t,\t12000\t);\r\nsetICO(\t0xbb9cDa8148153103cbe8EE0227a8c7a84666AA13\t,\t11125\t);\r\nsetICO(\t0x43E4d827e518Dd960498BD105E9e76971e5965FC\t,\t10500\t);\r\nsetICO(\t0x588749e9395A1EE6A8C9A6fb182Ebdd2796B9f0f\t,\t10268\t);\r\nsetICO(\t0x7e35AA166a8c78B49e61ab280f39915d9BB51C40\t,\t10000\t);\r\nsetICO(\t0xa2aFF7b4aC8df3FB1A789396267e0fe55b7D8783\t,\t8622\t);\r\nsetICO(\t0x7Bee818d0FD6b9f3A104e38036cC4e872517e789\t,\t7840\t);\r\nsetICO(\t0x0D2CCA65Be1F274E69224C57790731FFC3D6b767\t,\t7000\t);\r\nsetICO(\t0x2Fe29a9C8Ae4C676af671270CaED159bCF2A153b\t,\t6854\t);\r\nsetICO(\t0x7c5c27274F1cD86849e7DDd47191e4C3cd1Fe273\t,\t6400\t);\r\nsetICO(\t0xcEE7bF213816c93e8C5d87a3CC6C21dF38D120A2\t,\t5500\t);\r\nsetICO(\t0x6C5e4C05AD042880053A183a9Aa204212f09Eb65\t,\t5500\t);\r\nsetICO(\t0xA29Ecf7b205928bD4d9dEdEbA24dDEbcFE8cb8aF\t,\t5500\t);\r\nsetICO(\t0x42dfe28873c01a8D128eAaEfc3bde9FEcF22647A\t,\t5500\t);\r\nsetICO(\t0xF78d102a7f3048B5d5927dcA76601d943526F37b\t,\t4800\t);\r\nsetICO(\t0xd4E30D7b48287a72Bc99c5ABe5AB8dDE8B608802\t,\t4500\t);\r\nsetICO(\t0xeDAA7f020467e77249F9d08d81C50c4e33eB063D\t,\t4500\t);\r\nsetICO(\t0x3f2a9614f217acF05A8d6f144aEE5c1fAD564C3D\t,\t4500\t);\r\nsetICO(\t0x8a170A75845E5F39Db826470A9f28c6A331BF2B6\t,\t4000\t);\r\nsetICO(\t0xFB3018F1366219eD3fE8CE1B844860F9c4Fac5e7\t,\t4000\t);\r\nsetICO(\t0x47A85250507EB1b892AD310F78d40D170d24FED1\t,\t4000\t);\r\nsetICO(\t0x22eeb1c4265F7F7cFEB1e19AF7f32Ec361a4710E\t,\t4000\t);\r\nsetICO(\t0x6384f2d17A855435E7517C29d302690Dc02421C2\t,\t3700\t);\r\nsetICO(\t0x93E7A5b9fa8e34F58eE8d4B4562B627C04eAD99b\t,\t3500\t);\r\nsetICO(\t0xe714E0CcFCE4d0244f7431B43080C685d1504Bd0\t,\t3500\t);\r\nsetICO(\t0x27ef607C8F1b71aF3Df913C104eD73Ed66624871\t,\t3310\t);\r\nsetICO(\t0xd5B82B5BcEA28A2740b8dA56a345238Fb212B623\t,\t3200\t);\r\nsetICO(\t0xAA2dc38E8bD38C0faaa735B4C0D4a899059f5a0d\t,\t3125\t);\r\nsetICO(\t0x40b95671c37116Bf41F0D2E68BD93aD10d25502E\t,\t3055\t);\r\nsetICO(\t0xCe14cf3bB404eDC02db6Ba2d8178b200A3031aeA\t,\t3010\t);\r\nsetICO(\t0x74b04A0198b68722Ca630D041E60303B655Bd6A8\t,\t3000\t);\r\nsetICO(\t0x5Ca403BB07e4e792400d165Fd716d939C35AB49B\t,\t3000\t);\r\nsetICO(\t0x6eA366425fa4b6Cf070472aCA6991e0731de9A0D\t,\t3000\t);\r\nsetICO(\t0x3eE6ba8E7B299443Cc23eff3B8426A33aD6a2121\t,\t3000\t);\r\nsetICO(\t0xdfCee0e4E371e02d7744E9eCA3Fa6269E116b1C9\t,\t6524\t);\r\nsetICO(\t0x42A44787FaD2C644201B6c753DBAE2d990dFb47c\t,\t3000\t);\r\nsetICO(\t0xB5F1090997630A5E233467538C40C0e2e259A916\t,\t2630\t);\r\nsetICO(\t0x1ACCcE2F80A3660e672Da9F24E384D6143AF0C03\t,\t2585\t);\r\nsetICO(\t0xa32DF0f819e017b3ca2d43c67E4368edC844A804\t,\t2553\t);\r\nsetICO(\t0x7dD71b315f12De87C1F136A179DB8Cc144b58295\t,\t2500\t);\r\nsetICO(\t0x822e1a575CC4ce8D17d29cA07C082929A6B8A3bB\t,\t2500\t);\r\nsetICO(\t0x1915F337099Ce25Ee6ED818B53fF1F7623e3123F\t,\t2340\t);\r\nsetICO(\t0x6dAE092fa57D05681e919563f4ee63F2f7F1D201\t,\t2000\t);\r\nsetICO(\t0xc3923D820881B1F189123008749427A481E983Ca\t,\t2000\t);\r\nsetICO(\t0x3f47469982dE2348e44C9B56dB275E26e9259f4D\t,\t1900\t);\r\nsetICO(\t0xF6A657925812fad72a6FB51f0Fbb5328d9BF8f31\t,\t1650\t);\r\nsetICO(\t0x6a8058555c57BC1C59dcE48202DaD700fAA17D26\t,\t1600\t);\r\nsetICO(\t0xF4d4C9E869604715039cbD3027AEC95d083f9265\t,\t1600\t);\r\nsetICO(\t0x5F6520231C1ad754C574b01f34A36619C5CA2a02\t,\t1500\t);\r\nsetICO(\t0xA81Ea58d0377AaC22C78CA61c631B7b0BFf2029f\t,\t1500\t);\r\nsetICO(\t0x43396e7DF304adeFEdFF3cb3BEe3dF55D1764928\t,\t1500\t);\r\nsetICO(\t0xCcfdaA5C4E355075D1628DfaF4030a397EF0e91E\t,\t1500\t);\r\nsetICO(\t0x7e40CB0937bdf37be20F68E8d759ffD1138968Ec\t,\t1853\t);\r\nsetICO(\t0x0B8fEA04316355de3F912fc5F7aa2A32235E8986\t,\t1300\t);\r\nsetICO(\t0x0F57D11a21Fe457bd59bbaf8848410Cc38003eef\t,\t1200\t);\r\nsetICO(\t0xff3850d80A748202Fb36EF680486d64DDAA493e9\t,\t1091\t);\r\nsetICO(\t0x8d54F232DF1fB84781286Ccffb0671D436B21DFF\t,\t1046\t);\r\nsetICO(\t0x8966636fE61E876Fc6499a6B819D56Af40433083\t,\t1039\t);\r\nsetICO(\t0x8B25A8f699F314ef3011122AD1d0B102e326367f\t,\t1006\t);\r\nsetICO(\t0x32ABe252Ea2CE4E949738495Ed51f911F835Fd53\t,\t1000\t);\r\nsetICO(\t0x67eb2a1cC74cC366DDE5aE88A5E4F82eF1a13B49\t,\t1000\t);\r\nsetICO(\t0x680C150689d6b981d382206A39fB44301b62F837\t,\t1000\t);\r\nsetICO(\t0x70D7c067C206f1e42178604678ff2C0C9fd58E66\t,\t1000\t);\r\nsetICO(\t0x65cc14dc596073750a566205370239e8e20268E4\t,\t1000\t);\r\nsetICO(\t0x887995731f3fd390B7eeb6aEb978900af410D48B\t,\t800\t);\r\nsetICO(\t0x5f3861ffc2e75D00BA5c19728590986f3FF48808\t,\t760\t);\r\nsetICO(\t0x9b6ac30F4694d86d430ECDB2cD16F3e6e414cBb2\t,\t640\t);\r\nsetICO(\t0x9d35e4411272DF158a8634a2f529DEd0fF541973\t,\t593\t);\r\nsetICO(\t0x27B48344ed0b7Aaef62e1E679035f94a25DF2442\t,\t508\t);\r\nsetICO(\t0x351313F49476Ed58214D07Bb87162527be34978e\t,\t500\t);\r\nsetICO(\t0xd96B785ba950ccf4d336FbDC69c2a82fB6c485B4\t,\t500\t);\r\nsetICO(\t0x7Eb37Ddd2b4Ed95Be445a1BCBf33b458e0e0103D\t,\t400\t);\r\nsetICO(\t0xCA83fBDe3197c93d4754bf23fe2f5c745a4DcAA0\t,\t350\t);\r\nsetICO(\t0xd162BdB296b99527D137323BEdF80a0899476a3b\t,\t345\t);\r\nsetICO(\t0x93773a596DfB4E0641dC626306c903a0552E05E7\t,\t340\t);\r\nsetICO(\t0x61014d61b734162745E0B9770be56F2d21460cE6\t,\t300\t);\r\nsetICO(\t0x0b48AEBA0e8Ab53820c6Cc25249bB0c6A09f3E2c\t,\t300\t);\r\nsetICO(\t0xe24526F12eA980c237d25F5aefc2fe3Aa5fc70cd\t,\t250\t);\r\nsetICO(\t0x34FCb220FACd2746433a312D113737fCc4B32B11\t,\t196\t);\r\nsetICO(\t0x7037c3521616Ca33F3362cC4a8ef29dc172cC392\t,\t150\t);\r\nsetICO(\t0xf0d9C8b7b1C94B67d90131Eb5444Ff4D9fE98eAd\t,\t150\t);\r\nsetICO(\t0x65ba8BAa1857578606f5F69E975C658daE26eDe5\t,\t100\t);\r\nsetICO(\t0xb19cB24d619608eFe8a127756ac030D56586Fc84\t,\t100\t);\r\nsetICO(\t0x18fa81c761Bf09e86cDcb0D01C18d7f8ceDbeCc3\t,\t100\t);\r\nsetICO(\t0x7a666D30379576Cc4659b5440eF787c652eeD11B\t,\t100\t);\r\nsetICO(\t0x1b0ccb9B9d74D83F1A51656e1f20b0947bd5927d\t,\t100\t);\r\nsetICO(\t0xA29Cd944f7bA653D35cE627961246A87ffdB1156\t,\t100\t);\r\nsetICO(\t0xA88677Bed9DE38C818aFcC2C7FAD60D473A23542\t,\t100\t);\r\nsetICO(\t0xC5ffEb68fb7D13ffdff2f363aE560dF0Ce392a98\t,\t50\t);\r\nsetICO(\t0xc7EFE07b332b580eBA18DE013528De604E363b64\t,\t38\t);\r\nsetICO(\t0xFcc9aCC9FC667Ad2E7D7BcEDa58bbacEa9cB721A\t,\t20\t);\r\nsetICO(\t0x9cdEBfF1F20F6b7828AEAb3710D6caE61cB48cd4\t,\t5\t);\r\n\r\n\r\n    }\r\n\r\n    /**\r\n    * Constructor function\r\n    *\r\n    * Initializes contract with initial supply tokens to the creator of the contract\r\n    */\r\n    constructor(string _symbol, string _name, uint256 _supply, uint8 _decimals)\r\n    public {\r\n        require(_supply != 0, \"Supply required!\"); //avoid accidental deplyment with zero balance\r\n        owner = msg.sender;\r\n        symbol = _symbol;\r\n        name = _name;\r\n        decimals = _decimals;\r\n        doICO();\r\n        totalSupply = _supply.mul(10 ** uint256(decimals)); //supply in constuctor is w/o decimal zeros\r\n        _balanceOf[msg.sender] = totalSupply - icoSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply - icoSupply);\r\n    }\r\n\r\n    // unlock transfers for everyone\r\n    function unlock() external onlyOwner returns (bool success)\r\n    {\r\n        require (isLocked == true, \"It is unlocked already!\"); //you can unlock only once\r\n        isLocked = false;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Get the token balance for account\r\n    *\r\n    * Get token balance of `_owner` account\r\n    *\r\n    * @param _owner The address of the owner\r\n    */\r\n    function balanceOf(address _owner)\r\n    external view\r\n    returns(uint256 balance) {\r\n        return _balanceOf[_owner];\r\n    }\r\n\r\n    /**\r\n    * Internal transfer, only can be called by this contract\r\n    */\r\n    function _transfer(address _from, address _to, uint256 _value)\r\n    internal {\r\n        // check that contract is unlocked\r\n        require (isLocked == false || _from == owner, \"Contract is locked!\");\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != address(0), \"Can`t send to 0x0, use burn()\");\r\n        // Check if the sender has enough\r\n        require(_balanceOf[_from] >= _value, \"Not enough balance!\");\r\n        // Subtract from the sender\r\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n        // Add the same to the recipient\r\n        _balanceOf[_to] = _balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * Transfer tokens\r\n    *\r\n    * Send `_value` tokens to `_to` from your account\r\n    *\r\n    * @param _to The address of the recipient\r\n    * @param _value the amount to send\r\n    */\r\n    function transfer(address _to, uint256 _value)\r\n    external\r\n    returns(bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Transfer tokens from other address\r\n    *\r\n    * Send `_value` tokens to `_to` on behalf of `_from`\r\n    *\r\n    * @param _from The address of the sender\r\n    * @param _to The address of the recipient\r\n    * @param _value the amount to send\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    external\r\n    returns(bool success) {\r\n        // Check allowance\r\n        require(_value <= _allowance[_from][msg.sender], \"Not enough allowance!\");\r\n        // Check balance\r\n        require(_value <= _balanceOf[_from], \"Not enough balance!\");\r\n        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        emit Approval(_from, _to, _allowance[_from][_to]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Set allowance for other address\r\n    *\r\n    * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n    *\r\n    * @param _spender The address authorized to spend\r\n    * @param _value the max amount they can spend\r\n    */\r\n    function approve(address _spender, uint256 _value)\r\n    public\r\n    returns(bool success) {\r\n        _allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Set allowance for other address and notify\r\n    *\r\n    * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n    *\r\n    * @param _spender The address authorized to spend\r\n    * @param _value the max amount they can spend\r\n    * @param _extraData some extra information to send to the approved contract\r\n    */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n    external\r\n    returns(bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _owner, address _spender)\r\n    external view\r\n    returns(uint256 value) {\r\n        return _allowance[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * Destroy tokens\r\n    *\r\n    * Remove `_value` tokens from the system irreversibly\r\n    *\r\n    * @param _value the amount of money to burn\r\n    */\r\n    function burn(uint256 _value)\r\n    external\r\n    returns(bool success) {\r\n        _burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Destroy tokens from other account\r\n    *\r\n    * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n    *\r\n    * @param _from the address of the sender\r\n    * @param _value the amount of money to burn\r\n    */\r\n    function burnFrom(address _from, uint256 _value)\r\n    external\r\n    returns(bool success) {\r\n         // Check allowance\r\n        require(_value <= _allowance[_from][msg.sender], \"Not enough allowance!\");\r\n        // Is tehere enough coins on account\r\n        require(_value <= _balanceOf[_from], \"Insuffient balance!\");\r\n        // Subtract from the sender's allowance\r\n        _allowance[_from][msg.sender] = _allowance[_from][msg.sender].sub(_value);\r\n        _burn(_from, _value);\r\n        emit Approval(_from, msg.sender, _allowance[_from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    function _burn(address _from, uint256 _value)\r\n    internal {\r\n        // Check if the targeted balance is enough\r\n        require(_balanceOf[_from] >= _value, \"Insuffient balance!\");\r\n        // Subtract from the sender\r\n        _balanceOf[_from] = _balanceOf[_from].sub(_value);\r\n        // Updates totalSupply\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        emit Transfer(_from, address(0), _value);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept accidental ETH\r\n    // ------------------------------------------------------------------------\r\n    function () external payable {\r\n        revert(\"This contract is not accepting ETH.\");\r\n    }\r\n\r\n    //Owner can take ETH from contract\r\n    function withdraw(uint256 _amount)\r\n    external onlyOwner\r\n    returns (bool){\r\n        require(_amount <= address(this).balance, \"Not enough balance!\");\r\n        owner.transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint256 _value)\r\n    external onlyOwner\r\n    returns(bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, _value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_supply\",\"type\":\"uint256\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Aligato","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003414c430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b416c696761746f436f696e000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://bd1429742490fd9003f3bd6d27f01e005a889b3d08a7fc0a81254a42c4a99754"}]}