{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n  Do you have any questions or suggestions? Emails us @ support@netsolar.tech\r\n  \r\n                 _______  _______________________________________  .____       _____ __________ \r\n                 \\      \\ \\_   _____/\\__    ___/   _____/\\_____  \\ |    |     /  _  \\\\______   \\\r\n                 /   |   \\ |    __)_   |    |  \\_____  \\  /   |   \\|    |    /  /_\\  \\|       _/\r\n                /    |    \\|        \\  |    |  /        \\/    |    \\    |___/    |    \\    |   \\\r\n                \\____|__  /_______  /  |____| /_______  /\\_______  /_______ \\____|__  /____|_  /\r\n                        \\/        \\/                  \\/         \\/        \\/       \\/       \\/ \r\n                 _______  ________________________      __________ __________ ____  __.         \r\n                 \\      \\ \\_   _____/\\__    ___/  \\    /  \\_____  \\\\______   \\    |/ _|         \r\n                 /   |   \\ |    __)_   |    |  \\   \\/\\/   //   |   \\|       _/      <           \r\n                /    |    \\|        \\  |    |   \\        //    |    \\    |   \\    |  \\          \r\n                \\____|__  /_______  /  |____|    \\__/\\  / \\_______  /____|_  /____|__ \\         \r\n                        \\/        \\/                  \\/          \\/       \\/        \\/ \r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n    \r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n         if(msg.sender != owner){\r\n            revert();\r\n         }\r\n         else{\r\n            require(newOwner != address(0));\r\n            OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n         }\r\n             \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20Standard\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Interface {\r\n     function totalSupply() public constant returns (uint);\r\n     function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n     function transfer(address to, uint tokens) public returns (bool success);\r\n     function approve(address spender, uint tokens) public returns (bool success);\r\n     function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n     event Transfer(address indexed from, address indexed to, uint tokens);\r\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract Netsolar is ERC20Interface,Ownable {\r\n\r\n   using SafeMath for uint256;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) tokenBalances;\r\n   \r\n   string public constant name = \"Netsolar\";\r\n   string public constant symbol = \"NSN\";\r\n   uint256 public constant decimals = 0;\r\n\r\n   uint256 public constant INITIAL_SUPPLY = 3000000000;\r\n    address ownerWallet;\r\n   // Owner of account approves the transfer of an amount to another account\r\n   mapping (address => mapping (address => uint256)) allowed;\r\n   event Debug(string message, address addr, uint256 number);\r\n\r\n    function NSN (address wallet) onlyOwner public {\r\n        if(msg.sender != owner){\r\n            revert();\r\n         }\r\n        else{\r\n        ownerWallet=wallet;\r\n        totalSupply = 3000000000;\r\n        tokenBalances[wallet] = 3000000000;   //Since we divided the token into 10^18 parts\r\n        }\r\n    }\r\n    \r\n /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(tokenBalances[msg.sender]>=_value);\r\n    tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(_value);\r\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  \r\n  \r\n     /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= tokenBalances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    tokenBalances[_from] = tokenBalances[_from].sub(_value);\r\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n \r\n    uint price = 0.000001 ether;\r\n    function() public payable {\r\n        \r\n        uint toMint = msg.value/price;\r\n        //totalSupply += toMint;\r\n        tokenBalances[msg.sender]+=toMint;\r\n        Transfer(0,msg.sender,toMint);\r\n        \r\n     }     \r\n     /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n     // ------------------------------------------------------------------------\r\n     // Total supply\r\n     // ------------------------------------------------------------------------\r\n     function totalSupply() public constant returns (uint) {\r\n         return totalSupply  - tokenBalances[address(0)];\r\n     }\r\n     \r\n     // ------------------------------------------------------------------------\r\n     // Returns the amount of tokens approved by the owner that can be\r\n     // transferred to the spender's account\r\n     // ------------------------------------------------------------------------\r\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n         return allowed[tokenOwner][spender];\r\n     }\r\n     // ------------------------------------------------------------------------\r\n     // Accept ETH\r\n     // ------------------------------------------------------------------------\r\n   function withdraw() onlyOwner public {\r\n        if(msg.sender != owner){\r\n            revert();\r\n         }\r\n         else{\r\n        uint256 etherBalance = this.balance;\r\n        owner.transfer(etherBalance);\r\n         }\r\n    }\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n    return tokenBalances[_owner];\r\n  }\r\n\r\n    function pullBack(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\r\n        require(tokenBalances[buyer]<=tokenAmount);\r\n        tokenBalances[buyer] = tokenBalances[buyer].add(tokenAmount);\r\n        tokenBalances[wallet] = tokenBalances[wallet].add(tokenAmount);\r\n        Transfer(buyer, wallet, tokenAmount);\r\n     }\r\n    function showMyTokenBalance(address addr) public view returns (uint tokenBalance) {\r\n        tokenBalance = tokenBalances[addr];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"pullBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"showMyTokenBalance\",\"outputs\":[{\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"NSN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Netsolar","CompilerVersion":"v0.4.25-nightly.2018.5.16+commit.3897c367","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cb3f8235b5394e40e84be231d29ebb99d142fcf5d50babffef04b013ffe4c4f6"}]}