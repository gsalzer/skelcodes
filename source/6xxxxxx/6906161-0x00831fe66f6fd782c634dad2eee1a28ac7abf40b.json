{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @title ERC664Balances interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/644\r\n */\r\ninterface IERC664Balances {\r\n    function getBalance(address _acct) external view returns(uint balance);\r\n\r\n    function incBalance(address _acct, uint _val) external returns(bool success);\r\n\r\n    function decBalance(address _acct, uint _val) external returns(bool success);\r\n\r\n    function getAllowance(address _owner, address _spender) external view returns(uint remaining);\r\n\r\n    function setApprove(address _sender, address _spender, uint256 _value) external returns(bool success);\r\n\r\n    function decApprove(address _from, address _spender, uint _value) external returns(bool success);\r\n\r\n    function getModule(address _acct) external view returns (bool success);\r\n\r\n    function setModule(address _acct, bool _set) external returns(bool success);\r\n\r\n    function getTotalSupply() external view returns(uint);\r\n\r\n    function incTotalSupply(uint _val) external returns(bool success);\r\n\r\n    function decTotalSupply(uint _val) external returns(bool success);\r\n\r\n    function transferRoot(address _new) external returns(bool success);\r\n\r\n    event BalanceAdj(address indexed Module, address indexed Account, uint Amount, string Polarity);\r\n\r\n    event ModuleSet(address indexed Module, bool indexed Set);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Owned\r\n * @author Adria Massanet <adria@codecontext.io>\r\n * @notice The Owned contract has an owner address, and provides basic\r\n *  authorization control functions, this simplifies & the implementation of\r\n *  user permissions; this contract has three work flows for a change in\r\n *  ownership, the first requires the new owner to validate that they have the\r\n *  ability to accept ownership, the second allows the ownership to be\r\n *  directly transferred without requiring acceptance, and the third allows for\r\n *  the ownership to be removed to allow for decentralization\r\n */\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public newOwnerCandidate;\r\n\r\n    event OwnershipRequested(address indexed by, address indexed to);\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n    event OwnershipRemoved();\r\n\r\n    /**\r\n     * @dev The constructor sets the `msg.sender` as the`owner` of the contract\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev `owner` is the only address that can call a function with this\r\n     * modifier\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev In this 1st option for ownership transfer `proposeOwnership()` must\r\n     *  be called first by the current `owner` then `acceptOwnership()` must be\r\n     *  called by the `newOwnerCandidate`\r\n     * @notice `onlyOwner` Proposes to transfer control of the contract to a\r\n     *  new owner\r\n     * @param _newOwnerCandidate The address being proposed as the new owner\r\n     */\r\n    function proposeOwnership(address _newOwnerCandidate) external onlyOwner {\r\n        newOwnerCandidate = _newOwnerCandidate;\r\n        emit OwnershipRequested(msg.sender, newOwnerCandidate);\r\n    }\r\n\r\n    /**\r\n     * @notice Can only be called by the `newOwnerCandidate`, accepts the\r\n     *  transfer of ownership\r\n     */\r\n    function acceptOwnership() external {\r\n        require(msg.sender == newOwnerCandidate);\r\n\r\n        address oldOwner = owner;\r\n        owner = newOwnerCandidate;\r\n        newOwnerCandidate = 0x0;\r\n\r\n        emit OwnershipTransferred(oldOwner, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev In this 2nd option for ownership transfer `changeOwnership()` can\r\n     *  be called and it will immediately assign ownership to the `newOwner`\r\n     * @notice `owner` can step down and assign some other address to this role\r\n     * @param _newOwner The address of the new owner\r\n     */\r\n    function changeOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != 0x0);\r\n\r\n        address oldOwner = owner;\r\n        owner = _newOwner;\r\n        newOwnerCandidate = 0x0;\r\n\r\n        emit OwnershipTransferred(oldOwner, owner);\r\n    }\r\n\r\n    /**\r\n     * @dev In this 3rd option for ownership transfer `removeOwnership()` can\r\n     *  be called and it will immediately assign ownership to the 0x0 address;\r\n     *  it requires a 0xdece be input as a parameter to prevent accidental use\r\n     * @notice Decentralizes the contract, this operation cannot be undone\r\n     * @param _dac `0xdac` has to be entered for this function to work\r\n     */\r\n    function removeOwnership(address _dac) external onlyOwner {\r\n        require(_dac == 0xdac);\r\n        owner = 0x0;\r\n        newOwnerCandidate = 0x0;\r\n        emit OwnershipRemoved();\r\n    }\r\n}\r\n\r\n/**\r\n * @title Safe Guard Contract\r\n * @author Panos\r\n */\r\ncontract SafeGuard is Owned {\r\n\r\n    event Transaction(address indexed destination, uint value, bytes data);\r\n\r\n    /**\r\n     * @dev Allows owner to execute a transaction.\r\n     */\r\n    function executeTransaction(address destination, uint value, bytes data)\r\n    public\r\n    onlyOwner\r\n    {\r\n        require(externalCall(destination, value, data.length, data));\r\n        emit Transaction(destination, value, data);\r\n    }\r\n\r\n    /**\r\n     * @dev call has been separated into its own function in order to take advantage\r\n     *  of the Solidity's code generator to produce a loop that copies tx.data into memory.\r\n     */\r\n    function externalCall(address destination, uint value, uint dataLength, bytes data)\r\n    private\r\n    returns (bool) {\r\n        bool result;\r\n        assembly { // solhint-disable-line no-inline-assembly\r\n            let x := mload(0x40)   // \"Allocate\" memory for output\r\n            // (0x40 is where \"free memory\" pointer is stored by convention)\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n            sub(gas, 34710), // 34710 is the value that solidity is currently emitting\r\n            // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n            // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n            destination,\r\n            value,\r\n            d,\r\n            dataLength, // Size of the input (in bytes) - this is what fixes the padding problem\r\n            x,\r\n            0                  // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC664 Standard Balances Contract\r\n * @author chrisfranko\r\n */\r\ncontract ERC664Balances is IERC664Balances, SafeGuard {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    event BalanceAdj(address indexed module, address indexed account, uint amount, string polarity);\r\n    event ModuleSet(address indexed module, bool indexed set);\r\n\r\n    mapping(address => bool) public modules;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n    modifier onlyModule() {\r\n        require(modules[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Constructor to create ERC664Balances\r\n     * @param _initialAmount Database initial amount\r\n     */\r\n    constructor(uint256 _initialAmount) public {\r\n        balances[msg.sender] = _initialAmount;\r\n        totalSupply = _initialAmount;\r\n        emit BalanceAdj(address(0), msg.sender, _initialAmount, \"+\");\r\n    }\r\n\r\n    /**\r\n     * @notice Set allowance of `_spender` in behalf of `_sender` at `_value`\r\n     * @param _sender Owner account\r\n     * @param _spender Spender account\r\n     * @param _value Value to approve\r\n     * @return Operation status\r\n     */\r\n    function setApprove(address _sender, address _spender, uint256 _value) external onlyModule returns (bool) {\r\n        allowed[_sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease allowance of `_spender` in behalf of `_from` at `_value`\r\n     * @param _from Owner account\r\n     * @param _spender Spender account\r\n     * @param _value Value to decrease\r\n     * @return Operation status\r\n     */\r\n    function decApprove(address _from, address _spender, uint _value) external onlyModule returns (bool) {\r\n        allowed[_from][_spender] = allowed[_from][_spender].sub(_value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Increase total supply by `_val`\r\n    * @param _val Value to increase\r\n    * @return Operation status\r\n    */\r\n    function incTotalSupply(uint _val) external onlyOwner returns (bool) {\r\n        totalSupply = totalSupply.add(_val);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease total supply by `_val`\r\n     * @param _val Value to decrease\r\n     * @return Operation status\r\n     */\r\n    function decTotalSupply(uint _val) external onlyOwner returns (bool) {\r\n        totalSupply = totalSupply.sub(_val);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Set/Unset `_acct` as an authorized module\r\n     * @param _acct Module address\r\n     * @param _set Module set status\r\n     * @return Operation status\r\n     */\r\n    function setModule(address _acct, bool _set) external onlyOwner returns (bool) {\r\n        modules[_acct] = _set;\r\n        emit ModuleSet(_acct, _set);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Change database owner\r\n     * @param _newOwner The new owner address\r\n     */\r\n    function transferRoot(address _newOwner) external onlyOwner returns(bool) {\r\n        owner = _newOwner;\r\n        return true;\r\n    }\r\n\r\n    /**getBalance\r\n     * @notice Get `_acct` balance\r\n     * @param _acct Target account to get balance.\r\n     * @return The account balance\r\n     */\r\n    function getBalance(address _acct) external view returns (uint256) {\r\n        return balances[_acct];\r\n    }\r\n\r\n    /**\r\n     * @notice Get allowance of `_spender` in behalf of `_owner`\r\n     * @param _owner Owner account\r\n     * @param _spender Spender account\r\n     * @return Allowance\r\n     */\r\n    function getAllowance(address _owner, address _spender) external view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Get if `_acct` is an authorized module\r\n     * @param _acct Module address\r\n     * @return Operation status\r\n     */\r\n    function getModule(address _acct) external view returns (bool) {\r\n        return modules[_acct];\r\n    }\r\n\r\n    /**\r\n     * @notice Get total supply\r\n     * @return Total supply\r\n     */\r\n    function getTotalSupply() external view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @notice Increment `_acct` balance by `_val`\r\n     * @param _acct Target account to increment balance.\r\n     * @param _val Value to increment\r\n     * @return Operation status\r\n     */\r\n    function incBalance(address _acct, uint _val) public onlyModule returns (bool) {\r\n        balances[_acct] = balances[_acct].add(_val);\r\n        emit BalanceAdj(msg.sender, _acct, _val, \"+\");\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrement `_acct` balance by `_val`\r\n     * @param _acct Target account to decrement balance.\r\n     * @param _val Value to decrement\r\n     * @return Operation status\r\n     */\r\n    function decBalance(address _acct, uint _val) public onlyModule returns (bool) {\r\n        balances[_acct] = balances[_acct].sub(_val);\r\n        emit BalanceAdj(msg.sender, _acct, _val, \"-\");\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC664 Database Contract\r\n * @author Panos\r\n */\r\ncontract DStore is ERC664Balances {\r\n\r\n    /**\r\n     * @notice Database construction\r\n     * @param _totalSupply The total supply of the token\r\n     */\r\n    constructor(uint256 _totalSupply) public\r\n    ERC664Balances(_totalSupply) {\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice Increase total supply by `_val`\r\n     * @param _val Value to increase\r\n     * @return Operation status\r\n     */\r\n    // solhint-disable-next-line no-unused-vars\r\n    function incTotalSupply(uint _val) external onlyOwner returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrease total supply by `_val`\r\n     * @param _val Value to decrease\r\n     * @return Operation status\r\n     */\r\n    // solhint-disable-next-line no-unused-vars\r\n    function decTotalSupply(uint _val) external onlyOwner returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice moving `_amount` from `_from` to `_to`\r\n     * @param _from The sender address\r\n     * @param _to The receiving address\r\n     * @param _amount The moving amount\r\n     * @return bool The move result\r\n     */\r\n    function move(address _from, address _to, uint256 _amount) external\r\n    onlyModule\r\n    returns (bool) {\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        emit BalanceAdj(msg.sender, _from, _amount, \"-\");\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit BalanceAdj(msg.sender, _to, _amount, \"+\");\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Increase allowance of `_spender` in behalf of `_from` at `_value`\r\n     * @param _from Owner account\r\n     * @param _spender Spender account\r\n     * @param _value Value to increase\r\n     * @return Operation status\r\n     */\r\n    function incApprove(address _from, address _spender, uint _value) external onlyModule returns (bool) {\r\n        allowed[_from][_spender] = allowed[_from][_spender].add(_value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Increment `_acct` balance by `_val`\r\n     * @param _acct Target account to increment balance.\r\n     * @param _val Value to increment\r\n     * @return Operation status\r\n     */\r\n    // solhint-disable-next-line no-unused-vars\r\n    function incBalance(address _acct, uint _val) public\r\n    onlyModule\r\n    returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Decrement `_acct` balance by `_val`\r\n     * @param _acct Target account to decrement balance.\r\n     * @param _val Value to decrement\r\n     * @return Operation status\r\n     */\r\n    // solhint-disable-next-line no-unused-vars\r\n    function decBalance(address _acct, uint _val) public\r\n    onlyModule\r\n    returns (bool) {\r\n        return false;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"getAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"decTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dac\",\"type\":\"address\"}],\"name\":\"removeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_acct\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"incBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"proposeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"incApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"modules\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_acct\",\"type\":\"address\"},{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"decBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_acct\",\"type\":\"address\"},{\"name\":\"_set\",\"type\":\"bool\"}],\"name\":\"setModule\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_acct\",\"type\":\"address\"}],\"name\":\"getModule\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"incTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_acct\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"polarity\",\"type\":\"string\"}],\"name\":\"BalanceAdj\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"module\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"ModuleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OwnershipRemoved\",\"type\":\"event\"}]","ContractName":"DStore","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000204fce5e3e25026110000000","Library":"","SwarmSource":"bzzr://9a8d5217c4834dc7712036a963abdf012d4e387d779462bdced5ce2e1fd8a305"}]}