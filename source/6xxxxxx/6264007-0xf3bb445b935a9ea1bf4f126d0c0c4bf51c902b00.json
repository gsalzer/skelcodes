{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = false;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ncontract EtheremonAdventureData is BasicAccessControl {\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    struct LandTokenClaim {\r\n        uint emontAmount;\r\n        uint etherAmount;\r\n    }\r\n    \r\n    // total revenue \r\n    struct LandRevenue {\r\n        uint emontAmount;\r\n        uint etherAmount;\r\n    }\r\n    \r\n    struct ExploreData {\r\n        address sender;\r\n        uint typeId;\r\n        uint monsterId;\r\n        uint siteId;\r\n        uint itemSeed;\r\n        uint startAt; // blocknumber\r\n    }\r\n    \r\n    uint public exploreCount = 0;\r\n    mapping(uint => ExploreData) public exploreData; // explore count => data\r\n    mapping(address => uint) public explorePending; // address => explore id\r\n    \r\n    mapping(uint => LandTokenClaim) public claimData; // tokenid => claim info\r\n    mapping(uint => LandRevenue) public siteData; // class id => amount \r\n    \r\n    function addLandRevenue(uint _siteId, uint _emontAmount, uint _etherAmount) onlyModerators external {\r\n        LandRevenue storage revenue = siteData[_siteId];\r\n        revenue.emontAmount = revenue.emontAmount.add(_emontAmount);\r\n        revenue.etherAmount = revenue.etherAmount.add(_etherAmount);\r\n    }\r\n    \r\n    function addTokenClaim(uint _tokenId, uint _emontAmount, uint _etherAmount) onlyModerators external {\r\n        LandTokenClaim storage claim = claimData[_tokenId];\r\n        claim.emontAmount = claim.emontAmount.add(_emontAmount);\r\n        claim.etherAmount = claim.etherAmount.add(_etherAmount);\r\n    }\r\n    \r\n    function addExploreData(address _sender, uint _typeId, uint _monsterId, uint _siteId, uint _startAt, uint _emontAmount, uint _etherAmount) onlyModerators external returns(uint){\r\n        if (explorePending[_sender] > 0) revert();\r\n        exploreCount += 1;\r\n        ExploreData storage data = exploreData[exploreCount];\r\n        data.sender = _sender;\r\n        data.typeId = _typeId;\r\n        data.monsterId = _monsterId;\r\n        data.siteId = _siteId;\r\n        data.itemSeed = 0;\r\n        data.startAt = _startAt;\r\n        explorePending[_sender] = exploreCount;\r\n        \r\n        LandRevenue storage revenue = siteData[_siteId];\r\n        revenue.emontAmount = revenue.emontAmount.add(_emontAmount);\r\n        revenue.etherAmount = revenue.etherAmount.add(_etherAmount);\r\n        return exploreCount;\r\n    }\r\n    \r\n    function removePendingExplore(uint _exploreId, uint _itemSeed) onlyModerators external {\r\n        ExploreData storage data = exploreData[_exploreId];\r\n        if (explorePending[data.sender] != _exploreId)\r\n            revert();\r\n        explorePending[data.sender] = 0;\r\n        data.itemSeed = _itemSeed;\r\n    }\r\n    \r\n    // public function\r\n    function getLandRevenue(uint _classId) constant public returns(uint _emontAmount, uint _etherAmount) {\r\n        LandRevenue storage revenue = siteData[_classId];\r\n        return (revenue.emontAmount, revenue.etherAmount);\r\n    }\r\n    \r\n    function getTokenClaim(uint _tokenId) constant public returns(uint _emontAmount, uint _etherAmount) {\r\n        LandTokenClaim storage claim = claimData[_tokenId];\r\n        return (claim.emontAmount, claim.etherAmount);\r\n    }\r\n    \r\n    function getExploreData(uint _exploreId) constant public returns(address _sender, uint _typeId, uint _monsterId, uint _siteId, uint _itemSeed, uint _startAt) {\r\n        ExploreData storage data = exploreData[_exploreId];\r\n        return (data.sender, data.typeId, data.monsterId, data.siteId, data.itemSeed, data.startAt);\r\n    }\r\n    \r\n    function getPendingExplore(address _player) constant public returns(uint) {\r\n        return explorePending[_player];\r\n    }\r\n    \r\n    function getPendingExploreData(address _player) constant public returns(uint _exploreId, uint _typeId, uint _monsterId, uint _siteId, uint _itemSeed, uint _startAt) {\r\n        _exploreId = explorePending[_player];\r\n        if (_exploreId > 0) {\r\n            ExploreData storage data = exploreData[_exploreId];\r\n            return (_exploreId, data.typeId, data.monsterId, data.siteId, data.itemSeed, data.startAt);\r\n        }\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_exploreId\",\"type\":\"uint256\"}],\"name\":\"getExploreData\",\"outputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_typeId\",\"type\":\"uint256\"},{\"name\":\"_monsterId\",\"type\":\"uint256\"},{\"name\":\"_siteId\",\"type\":\"uint256\"},{\"name\":\"_itemSeed\",\"type\":\"uint256\"},{\"name\":\"_startAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exploreData\",\"outputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"typeId\",\"type\":\"uint256\"},{\"name\":\"monsterId\",\"type\":\"uint256\"},{\"name\":\"siteId\",\"type\":\"uint256\"},{\"name\":\"itemSeed\",\"type\":\"uint256\"},{\"name\":\"startAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exploreCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPendingExplore\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_typeId\",\"type\":\"uint256\"},{\"name\":\"_monsterId\",\"type\":\"uint256\"},{\"name\":\"_siteId\",\"type\":\"uint256\"},{\"name\":\"_startAt\",\"type\":\"uint256\"},{\"name\":\"_emontAmount\",\"type\":\"uint256\"},{\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"name\":\"addExploreData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_emontAmount\",\"type\":\"uint256\"},{\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"name\":\"addTokenClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenClaim\",\"outputs\":[{\"name\":\"_emontAmount\",\"type\":\"uint256\"},{\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"siteData\",\"outputs\":[{\"name\":\"emontAmount\",\"type\":\"uint256\"},{\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_siteId\",\"type\":\"uint256\"},{\"name\":\"_emontAmount\",\"type\":\"uint256\"},{\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"name\":\"addLandRevenue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPendingExploreData\",\"outputs\":[{\"name\":\"_exploreId\",\"type\":\"uint256\"},{\"name\":\"_typeId\",\"type\":\"uint256\"},{\"name\":\"_monsterId\",\"type\":\"uint256\"},{\"name\":\"_siteId\",\"type\":\"uint256\"},{\"name\":\"_itemSeed\",\"type\":\"uint256\"},{\"name\":\"_startAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimData\",\"outputs\":[{\"name\":\"emontAmount\",\"type\":\"uint256\"},{\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"explorePending\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint256\"}],\"name\":\"getLandRevenue\",\"outputs\":[{\"name\":\"_emontAmount\",\"type\":\"uint256\"},{\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exploreId\",\"type\":\"uint256\"},{\"name\":\"_itemSeed\",\"type\":\"uint256\"}],\"name\":\"removePendingExplore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EtheremonAdventureData","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b5bc13444397c0fbc796c65643da48a03593ba6e64eb7598d52948ce10b2b4cf"}]}