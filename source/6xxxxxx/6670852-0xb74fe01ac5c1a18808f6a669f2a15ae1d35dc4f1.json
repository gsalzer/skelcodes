{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: contracts/lib/Ownerable.sol\r\n\r\ncontract Ownerable {\r\n    /// @notice The address of the owner is the only address that can call\r\n    ///  a function with this modifier\r\n    modifier onlyOwner { require(msg.sender == owner); _; }\r\n\r\n    address public owner;\r\n\r\n    constructor() public { owner = msg.sender;}\r\n\r\n    /// @notice Changes the owner of the contract\r\n    /// @param _newOwner The new owner of the contract\r\n    function setOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n// File: contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n// File: contracts/TokenDistor.sol\r\n\r\ncontract TokenDistor is Ownerable, SafeMath {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  ERC20Basic token;\r\n\r\n  constructor() public {\r\n  }\r\n\r\n  function setToken(address _token) public onlyOwner {\r\n    require(_token != 0x0);\r\n    token = ERC20Basic(_token);\r\n  }\r\n\r\n  function airdrop(address[] _tos, uint256[] _amts) public onlyOwner {\r\n    require(_tos.length == _amts.length);\r\n\r\n    uint256 totalSendingAmt = 0;\r\n\r\n    for(uint i=0; i<_tos.length; i++) {\r\n      /* require(_tos[i] != 0x0);\r\n      require(_amts[i] > 0); */\r\n\r\n      totalSendingAmt = add(totalSendingAmt, _amts[i]);\r\n    }\r\n\r\n    uint256 tokenBalance = token.balanceOf(address(this));\r\n    require(tokenBalance >= totalSendingAmt);\r\n\r\n    for(i=0; i<_tos.length; i++) {\r\n      if(_tos[i] != 0x0 && _amts[i] > 0) {\r\n        token.safeTransfer(_tos[i], _amts[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function distStaticAmount(address[] _tos, uint256 _amt) public onlyOwner {\r\n    require(_tos.length > 0);\r\n    require(_amt > 0);\r\n\r\n    uint256 totalSendingAmt = mul(_amt, _tos.length);\r\n    uint256 tokenBalance = token.balanceOf(address(this));\r\n    require(tokenBalance >= totalSendingAmt);\r\n\r\n    for(uint i=0; i<_tos.length; i++) {\r\n      if(_tos[i] != 0x0) {\r\n        token.safeTransfer(_tos[i], _amt);\r\n      }\r\n    }\r\n  }\r\n\r\n  function claimTokens(address _to) public onlyOwner {\r\n    require(_to != 0x0);\r\n    \r\n    uint256 tokenBalance = token.balanceOf(address(this));\r\n    require(tokenBalance > 0);\r\n\r\n    token.safeTransfer(_to, tokenBalance);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"distStaticAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_amts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TokenDistor","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d473384071a6e24f8840efb12ee8b99b6eb95bf53638a6d60608891c5efdbc3c"}]}