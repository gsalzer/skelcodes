{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/lib/ownership/Ownable.sol\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\r\n\r\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n    constructor() public { owner = msg.sender; }\r\n\r\n    /// @dev Throws if called by any contract other than latest designated caller\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n       require(newOwner != address(0));\r\n       emit OwnershipTransferred(owner, newOwner);\r\n       owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/ownership/ZapCoordinatorInterface.sol\r\n\r\ncontract ZapCoordinatorInterface is Ownable {\r\n\tfunction addImmutableContract(string contractName, address newAddress) external;\r\n\tfunction updateContract(string contractName, address newAddress) external;\r\n\tfunction getContractName(uint index) public view returns (string);\r\n\tfunction getContract(string contractName) public view returns (address);\r\n\tfunction updateAllDependencies() external;\r\n}\r\n\r\n// File: contracts/lib/ownership/Upgradable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract Upgradable {\r\n\r\n\taddress coordinatorAddr;\r\n\tZapCoordinatorInterface coordinator;\r\n\r\n\tconstructor(address c) public{\r\n\t\tcoordinatorAddr = c;\r\n\t\tcoordinator = ZapCoordinatorInterface(c);\r\n\t}\r\n\r\n    function updateDependencies() external coordinatorOnly {\r\n       _updateDependencies();\r\n    }\r\n\r\n    function _updateDependencies() internal;\r\n\r\n    modifier coordinatorOnly() {\r\n    \trequire(msg.sender == coordinatorAddr, \"Error: Coordinator Only Function\");\r\n    \t_;\r\n    }\r\n}\r\n\r\n// File: contracts/lib/lifecycle/Destructible.sol\r\n\r\ncontract Destructible is Ownable {\r\n\tfunction selfDestruct() public onlyOwner {\r\n\t\tselfdestruct(owner);\r\n\t}\r\n}\r\n\r\n// File: contracts/lib/platform/Client.sol\r\n\r\ncontract Client1 {\r\n    /// @dev callback that provider will call after Dispatch.query() call\r\n    /// @param id request id\r\n    /// @param response1 first provider-specified param\r\n    function callback(uint256 id, string response1) external;\r\n}\r\ncontract Client2 {\r\n    /// @dev callback that provider will call after Dispatch.query() call\r\n    /// @param id request id\r\n    /// @param response1 first provider-specified param\r\n    /// @param response2 second provider-specified param\r\n    function callback(uint256 id, string response1, string response2) external;\r\n}\r\ncontract Client3 {\r\n    /// @dev callback that provider will call after Dispatch.query() call\r\n    /// @param id request id\r\n    /// @param response1 first provider-specified param\r\n    /// @param response2 second provider-specified param\r\n    /// @param response3 third provider-specified param\r\n    function callback(uint256 id, string response1, string response2, string response3) external;\r\n}\r\ncontract Client4 {\r\n    /// @dev callback that provider will call after Dispatch.query() call\r\n    /// @param id request id\r\n    /// @param response1 first provider-specified param\r\n    /// @param response2 second provider-specified param\r\n    /// @param response3 third provider-specified param\r\n    /// @param response4 fourth provider-specified param\r\n    function callback(uint256 id, string response1, string response2, string response3, string response4) external;\r\n}\r\n\r\ncontract ClientBytes32Array {\r\n    /// @dev callback that provider will call after Dispatch.query() call\r\n    /// @param id request id\r\n    /// @param response bytes32 array\r\n    function callback(uint256 id, bytes32[] response) external;\r\n}\r\n\r\ncontract ClientIntArray{\r\n    /// @dev callback that provider will call after Dispatch.query() call\r\n    /// @param id request id\r\n    /// @param response int array\r\n    function callback(uint256 id, int[] response) external;\r\n}\r\n\r\n// File: contracts/lib/platform/OnChainProvider.sol\r\n\r\ncontract OnChainProvider {\r\n    /// @dev function for requesting data from on-chain provider\r\n    /// @param id request id\r\n    /// @param userQuery query string\r\n    /// @param endpoint endpoint specifier ala 'smart_contract'\r\n    /// @param endpointParams endpoint-specific params\r\n    function receive(uint256 id, string userQuery, bytes32 endpoint, bytes32[] endpointParams, bool onchainSubscriber) external;\r\n}\r\n\r\n// File: contracts/platform/bondage/BondageInterface.sol\r\n\r\ncontract BondageInterface {\r\n    function bond(address, bytes32, uint256) external returns(uint256);\r\n    function unbond(address, bytes32, uint256) external returns (uint256);\r\n    function delegateBond(address, address, bytes32, uint256) external returns(uint256);\r\n    function escrowDots(address, address, bytes32, uint256) external returns (bool);\r\n    function releaseDots(address, address, bytes32, uint256) external returns (bool);\r\n    function returnDots(address, address, bytes32, uint256) external returns (bool success);\r\n    function calcZapForDots(address, bytes32, uint256) external view returns (uint256);\r\n    function currentCostOfDot(address, bytes32, uint256) public view returns (uint256);\r\n    function getDotsIssued(address, bytes32) public view returns (uint256);\r\n    function getBoundDots(address, address, bytes32) public view returns (uint256);\r\n    function getZapBound(address, bytes32) public view returns (uint256);\r\n    function dotLimit( address, bytes32) public view returns (uint256);\r\n}\r\n\r\n// File: contracts/platform/dispatch/DispatchInterface.sol\r\n\r\ninterface DispatchInterface {\r\n    function query(address, string, bytes32, bytes32[]) external returns (uint256);\r\n    function respond1(uint256, string) external returns (bool);\r\n    function respond2(uint256, string, string) external returns (bool);\r\n    function respond3(uint256, string, string, string) external returns (bool);\r\n    function respond4(uint256, string, string, string, string) external returns (bool);\r\n    function respondBytes32Array(uint256, bytes32[]) external returns (bool);\r\n    function respondIntArray(uint256,int[] ) external returns (bool);\r\n    function cancelQuery(uint256) external;\r\n    function getProvider(uint256 id) public view returns (address);\r\n    function getSubscriber(uint256 id) public view returns (address);\r\n    function getEndpoint(uint256 id) public view returns (bytes32);\r\n    function getStatus(uint256 id) public view returns (uint256);\r\n    function getCancel(uint256 id) public view returns (uint256);\r\n    function getUserQuery(uint256 id) public view returns (string);\r\n    function getSubscriberOnchain(uint256 id) public view returns (bool);\r\n}\r\n\r\n// File: contracts/platform/database/DatabaseInterface.sol\r\n\r\ncontract DatabaseInterface is Ownable {\r\n\tfunction setStorageContract(address _storageContract, bool _allowed) public;\r\n\t/*** Bytes32 ***/\r\n\tfunction getBytes32(bytes32 key) external view returns(bytes32);\r\n\tfunction setBytes32(bytes32 key, bytes32 value) external;\r\n\t/*** Number **/\r\n\tfunction getNumber(bytes32 key) external view returns(uint256);\r\n\tfunction setNumber(bytes32 key, uint256 value) external;\r\n\t/*** Bytes ***/\r\n\tfunction getBytes(bytes32 key) external view returns(bytes);\r\n\tfunction setBytes(bytes32 key, bytes value) external;\r\n\t/*** String ***/\r\n\tfunction getString(bytes32 key) external view returns(string);\r\n\tfunction setString(bytes32 key, string value) external;\r\n\t/*** Bytes Array ***/\r\n\tfunction getBytesArray(bytes32 key) external view returns (bytes32[]);\r\n\tfunction getBytesArrayIndex(bytes32 key, uint256 index) external view returns (bytes32);\r\n\tfunction getBytesArrayLength(bytes32 key) external view returns (uint256);\r\n\tfunction pushBytesArray(bytes32 key, bytes32 value) external;\r\n\tfunction setBytesArrayIndex(bytes32 key, uint256 index, bytes32 value) external;\r\n\tfunction setBytesArray(bytes32 key, bytes32[] value) external;\r\n\t/*** Int Array ***/\r\n\tfunction getIntArray(bytes32 key) external view returns (int[]);\r\n\tfunction getIntArrayIndex(bytes32 key, uint256 index) external view returns (int);\r\n\tfunction getIntArrayLength(bytes32 key) external view returns (uint256);\r\n\tfunction pushIntArray(bytes32 key, int value) external;\r\n\tfunction setIntArrayIndex(bytes32 key, uint256 index, int value) external;\r\n\tfunction setIntArray(bytes32 key, int[] value) external;\r\n\t/*** Address Array ***/\r\n\tfunction getAddressArray(bytes32 key) external view returns (address[]);\r\n\tfunction getAddressArrayIndex(bytes32 key, uint256 index) external view returns (address);\r\n\tfunction getAddressArrayLength(bytes32 key) external view returns (uint256);\r\n\tfunction pushAddressArray(bytes32 key, address value) external;\r\n\tfunction setAddressArrayIndex(bytes32 key, uint256 index, address value) external;\r\n\tfunction setAddressArray(bytes32 key, address[] value) external;\r\n}\r\n\r\n// File: contracts/platform/dispatch/Dispatch.sol\r\n\r\n// v1.0\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Dispatch is Destructible, DispatchInterface, Upgradable { \r\n\r\n    enum Status { Pending, Fulfilled, Canceled }\r\n\r\n    //event data provider is listening for, containing all relevant request parameters\r\n    event Incoming(\r\n        uint256 indexed id,\r\n        address indexed provider,\r\n        address indexed subscriber,\r\n        string query,\r\n        bytes32 endpoint,\r\n        bytes32[] endpointParams,\r\n        bool onchainSubscriber\r\n    );\r\n\r\n    event FulfillQuery(\r\n        address indexed subscriber,\r\n        address indexed provider,\r\n        bytes32 indexed endpoint\r\n    );\r\n\r\n    event OffchainResponse(\r\n        uint256 indexed id,\r\n        address indexed subscriber,\r\n        address indexed provider,\r\n        bytes32[] response\r\n    );\r\n\r\n    event OffchainResponseInt(\r\n        uint256 indexed id,\r\n        address indexed subscriber,\r\n        address indexed provider,\r\n        int[] response\r\n    );\r\n\r\n    event OffchainResult1(\r\n        uint256 indexed id,\r\n        address indexed subscriber,\r\n        address indexed provider,\r\n        string response1\r\n    );\r\n\r\n    event OffchainResult2(\r\n        uint256 indexed id,\r\n        address indexed subscriber,\r\n        address indexed provider,\r\n        string response1,\r\n        string response2\r\n    );\r\n\r\n    event OffchainResult3(\r\n        uint256 indexed id,\r\n        address indexed subscriber,\r\n        address indexed provider,\r\n        string response1,\r\n        string response2,\r\n        string response3\r\n    );\r\n\r\n    event OffchainResult4(\r\n        uint256 indexed id,\r\n        address indexed subscriber,\r\n        address indexed provider,\r\n        string response1,\r\n        string response2,\r\n        string response3,\r\n        string response4\r\n    );\r\n\r\n    event CanceledRequest(\r\n        uint256 indexed id,\r\n        address indexed subscriber,\r\n        address indexed provider\r\n    );\r\n\r\n    event RevertCancelation(\r\n        uint256 indexed id,\r\n        address indexed subscriber,\r\n        address indexed provider\r\n    );\r\n\r\n    BondageInterface public bondage;\r\n    address public bondageAddress;\r\n\r\n    DatabaseInterface public db;\r\n\r\n    constructor(address c) Upgradable(c) public {\r\n        //_updateDependencies();\r\n    }\r\n\r\n    function _updateDependencies() internal {\r\n        address databaseAddress = coordinator.getContract(\"DATABASE\");\r\n        db = DatabaseInterface(databaseAddress);\r\n\r\n        bondageAddress = coordinator.getContract(\"BONDAGE\");\r\n        bondage = BondageInterface(bondageAddress);\r\n    }\r\n\r\n    /// @notice Escrow dot for oracle request\r\n    /// @dev Called by user contract\r\n    function query(\r\n        address provider,           // data provider address\r\n        string userQuery,           // query string\r\n        bytes32 endpoint,           // endpoint specifier ala 'smart_contract'\r\n        bytes32[] endpointParams   // endpoint-specific params\r\n        )\r\n        external\r\n        returns (uint256 id)\r\n    {\r\n        uint256 dots = bondage.getBoundDots(msg.sender, provider, endpoint);\r\n        bool onchainProvider = isContract(provider);\r\n        bool onchainSubscriber = isContract(msg.sender);\r\n        if(dots >= 1) {\r\n            //enough dots\r\n            bondage.escrowDots(msg.sender, provider, endpoint, 1);\r\n\r\n            id = uint256(keccak256(abi.encodePacked(block.number, now, userQuery, msg.sender, provider)));\r\n\r\n            createQuery(id, provider, msg.sender, endpoint, userQuery, onchainSubscriber);\r\n            if(onchainProvider) {\r\n                OnChainProvider(provider).receive(id, userQuery, endpoint, endpointParams, onchainSubscriber); \r\n            } else{\r\n                emit Incoming(id, provider, msg.sender, userQuery, endpoint, endpointParams, onchainSubscriber);\r\n            }\r\n        } else { // NOT ENOUGH DOTS\r\n            revert(\"Subscriber does not have any dots.\");\r\n        }\r\n    }\r\n\r\n    /// @notice Transfer dots from Bondage escrow to data provider's Holder object under its own address\r\n    /// @dev Called upon data-provider request fulfillment\r\n    function fulfillQuery(uint256 id) private returns (bool) {\r\n        Status status = Status(getStatus(id));\r\n\r\n        require(status != Status.Fulfilled, \"Error: Status already fulfilled\");\r\n\r\n        address subscriber = getSubscriber(id);\r\n        address provider = getProvider(id);\r\n        bytes32 endpoint = getEndpoint(id);\r\n        \r\n        if ( status == Status.Canceled ) {\r\n            uint256 canceled = getCancel(id);\r\n\r\n            // Make sure we've canceled in the past,\r\n            // if it's current block ignore the cancel\r\n            require(block.number == canceled, \"Error: Cancel ignored\");\r\n\r\n            // Uncancel the query\r\n            setCanceled(id, false);\r\n\r\n            // Re-escrow the previously returned dots\r\n            bondage.escrowDots(subscriber, provider, endpoint, 1);\r\n\r\n            // Emit the events\r\n            emit RevertCancelation(id, subscriber, provider);\r\n        }\r\n\r\n        setFulfilled(id);\r\n\r\n        bondage.releaseDots(subscriber, provider, endpoint, 1);\r\n\r\n        emit FulfillQuery(subscriber, provider, endpoint);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Cancel a query.\r\n    /// @dev If responded on the same block, ignore the cancel.\r\n    function cancelQuery(uint256 id) external {\r\n        address subscriber = getSubscriber(id);\r\n        address provider = getProvider(id);\r\n        bytes32 endpoint = getEndpoint(id);\r\n\r\n        require(subscriber == msg.sender, \"Error: Wrong subscriber\");\r\n        require(Status(getStatus(id)) == Status.Pending, \"Error: Query is not pending\");\r\n\r\n        // Cancel the query\r\n        setCanceled(id, true);\r\n\r\n        // Return the dots to the subscriber\r\n        bondage.returnDots(subscriber, provider, endpoint, 1);\r\n\r\n        // Release an event\r\n        emit CanceledRequest(id, getSubscriber(id), getProvider(id));\r\n    }\r\n\r\n    /// @dev Parameter-count specific method called by data provider in response\r\n    function respondBytes32Array(\r\n        uint256 id,\r\n        bytes32[] response\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        if (getProvider(id) != msg.sender || !fulfillQuery(id))\r\n            revert();\r\n        if(getSubscriberOnchain(id)) {\r\n            ClientBytes32Array(getSubscriber(id)).callback(id, response);\r\n        }\r\n        else {\r\n            emit OffchainResponse(id, getSubscriber(id), msg.sender, response);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Parameter-count specific method called by data provider in response\r\n    function respondIntArray(\r\n        uint256 id,\r\n        int[] response\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        if (getProvider(id) != msg.sender || !fulfillQuery(id))\r\n            revert();\r\n        if(getSubscriberOnchain(id)) {\r\n            ClientIntArray(getSubscriber(id)).callback(id, response);\r\n        }\r\n        else {\r\n            emit OffchainResponseInt(id, getSubscriber(id), msg.sender, response);\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @dev Parameter-count specific method called by data provider in response\r\n    function respond1(\r\n        uint256 id,\r\n        string response\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        if (getProvider(id) != msg.sender || !fulfillQuery(id))\r\n            revert();\r\n\r\n        if(getSubscriberOnchain(id)) {\r\n            Client1(getSubscriber(id)).callback(id, response);\r\n        }\r\n        else {\r\n            emit OffchainResult1(id, getSubscriber(id), msg.sender, response);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev Parameter-count specific method called by data provider in response\r\n    function respond2(\r\n        uint256 id,\r\n        string response1,\r\n        string response2\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        if (getProvider(id) != msg.sender || !fulfillQuery(id))\r\n            revert();\r\n\r\n        if(getSubscriberOnchain(id)) {\r\n            Client2(getSubscriber(id)).callback(id, response1, response2);\r\n        }\r\n        else {\r\n            emit OffchainResult2(id, getSubscriber(id), msg.sender, response1, response2);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Parameter-count specific method called by data provider in response\r\n    function respond3(\r\n        uint256 id,\r\n        string response1,\r\n        string response2,\r\n        string response3\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        if (getProvider(id) != msg.sender || !fulfillQuery(id))\r\n            revert();\r\n\r\n        if(getSubscriberOnchain(id)) {\r\n            Client3(getSubscriber(id)).callback(id, response1, response2, response3);\r\n        }\r\n        else {\r\n            emit OffchainResult3(id, getSubscriber(id), msg.sender, response1, response2, response3);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Parameter-count specific method called by data provider in response\r\n    function respond4(\r\n        uint256 id,\r\n        string response1,\r\n        string response2,\r\n        string response3,\r\n        string response4\r\n    )\r\n        external\r\n        returns (bool)\r\n    {\r\n        if (getProvider(id) != msg.sender || !fulfillQuery(id))\r\n            revert();\r\n\r\n        if(getSubscriberOnchain(id)) {\r\n            Client4(getSubscriber(id)).callback(id, response1, response2, response3, response4);\r\n        }\r\n        else {\r\n            emit OffchainResult4(id, getSubscriber(id), msg.sender, response1, response2, response3, response4);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /*** STORAGE METHODS ***/\r\n\r\n    /// @dev get provider address of request\r\n    /// @param id request id\r\n    function getProvider(uint256 id) public view returns (address) {\r\n        return address(db.getNumber(keccak256(abi.encodePacked('queries', id, 'provider'))));\r\n    }\r\n\r\n    /// @dev get subscriber address of request\r\n    /// @param id request id\r\n    function getSubscriber(uint256 id) public view returns (address) {\r\n        return address(db.getNumber(keccak256(abi.encodePacked('queries', id, 'subscriber'))));\r\n    }\r\n\r\n    /// @dev get endpoint of request\r\n    /// @param id request id\r\n    function getEndpoint(uint256 id) public view returns (bytes32) {\r\n        return db.getBytes32(keccak256(abi.encodePacked('queries', id, 'endpoint')));\r\n    }\r\n\r\n    /// @dev get status of request\r\n    /// @param id request id\r\n    function getStatus(uint256 id) public view returns (uint256) {\r\n        return db.getNumber(keccak256(abi.encodePacked('queries', id, 'status')));\r\n    }\r\n\r\n    /// @dev get the cancelation block of a request\r\n    /// @param id request id\r\n    function getCancel(uint256 id) public view returns (uint256) {\r\n        return db.getNumber(keccak256(abi.encodePacked('queries', id, 'cancelBlock')));\r\n    }\r\n\r\n    /// @dev get user specified query of request\r\n    /// @param id request id\r\n    function getUserQuery(uint256 id) public view returns (string) {\r\n        return db.getString(keccak256(abi.encodePacked('queries', id, 'userQuery')));\r\n    }\r\n\r\n    /// @dev is subscriber contract or offchain \r\n    /// @param id request id\r\n    function getSubscriberOnchain(uint256 id) public view returns (bool) {\r\n        uint res = db.getNumber(keccak256(abi.encodePacked('queries', id, 'onchainSubscriber')));\r\n        return res == 1 ? true : false;\r\n    }\r\n \r\n    /**** Set Methods ****/\r\n    function createQuery(\r\n        uint256 id,\r\n        address provider,\r\n        address subscriber,\r\n        bytes32 endpoint,\r\n        string userQuery,\r\n        bool onchainSubscriber\r\n    ) \r\n        private\r\n    {\r\n        db.setNumber(keccak256(abi.encodePacked('queries', id, 'provider')), uint256(provider));\r\n        db.setNumber(keccak256(abi.encodePacked('queries', id, 'subscriber')), uint256(subscriber));\r\n        db.setBytes32(keccak256(abi.encodePacked('queries', id, 'endpoint')), endpoint);\r\n        db.setString(keccak256(abi.encodePacked('queries', id, 'userQuery')), userQuery);\r\n        db.setNumber(keccak256(abi.encodePacked('queries', id, 'status')), uint256(Status.Pending));\r\n        db.setNumber(keccak256(abi.encodePacked('queries', id, 'onchainSubscriber')), onchainSubscriber ? 1 : 0);\r\n    }\r\n\r\n    function setFulfilled(uint256 id) private {\r\n        db.setNumber(keccak256(abi.encodePacked('queries', id, 'status')), uint256(Status.Fulfilled));\r\n    }\r\n\r\n    function setCanceled(uint256 id, bool canceled) private {\r\n        if ( canceled ) {\r\n            db.setNumber(keccak256(abi.encodePacked('queries', id, 'cancelBlock')), block.number);\r\n            db.setNumber(keccak256(abi.encodePacked('queries', id, 'status')), uint256(Status.Canceled));\r\n        }\r\n        else {\r\n            db.setNumber(keccak256(abi.encodePacked('queries', id, 'cancelBlock')), 0);\r\n            db.setNumber(keccak256(abi.encodePacked('queries', id, 'status')), uint256(Status.Pending));            \r\n        }\r\n    }\r\n\r\n    function isContract(address addr) private view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/*\r\n/* For use in example contract, see TestContracts.sol\r\n/*\r\n/* When User Contract calls ZapDispatch.query(),\r\n/* 1 oracle specific dot is escrowed by ZapBondage and Incoming event is ted.\r\n/*\r\n/* When provider's client hears an Incoming event containing provider's address and responds,\r\n/* the provider calls a ZapDispatch.respondX function corresponding to number of response params.\r\n/*\r\n/* Dots are moved from ZapBondage escrow to data-provider's bond Holder struct,\r\n/* with data provider address set as self's address.\r\n/*/ \r\n\r\n/*************************************** STORAGE ****************************************\r\n* 'queries', id, 'provider' => {address} address of provider that this query was sent to\r\n* 'queries', id, 'subscriber' => {address} address of subscriber that this query was sent by\r\n* 'queries', id, 'endpoint' => {bytes32} endpoint that this query was sent to\r\n* 'queries', id, 'status' => {Status} current status of this query\r\n* 'queries', id, 'cancelBlock' => {uint256} the block number of the cancellation request (0 if none)\r\n* 'queries', id, 'userQuery' => {uint256} the query that was sent with this queryId\r\n* 'queries', id, 'onchainSubscriber' => {uint256} 1 -> onchainSubscriber, 0 -> offchainSubscriber\r\n****************************************************************************************/","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCancel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"response\",\"type\":\"bytes32[]\"}],\"name\":\"respondBytes32Array\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSubscriber\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"response1\",\"type\":\"string\"},{\"name\":\"response2\",\"type\":\"string\"},{\"name\":\"response3\",\"type\":\"string\"},{\"name\":\"response4\",\"type\":\"string\"}],\"name\":\"respond4\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSubscriberOnchain\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"response1\",\"type\":\"string\"},{\"name\":\"response2\",\"type\":\"string\"},{\"name\":\"response3\",\"type\":\"string\"}],\"name\":\"respond3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"db\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"response\",\"type\":\"string\"}],\"name\":\"respond1\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"cancelQuery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"provider\",\"type\":\"address\"},{\"name\":\"userQuery\",\"type\":\"string\"},{\"name\":\"endpoint\",\"type\":\"bytes32\"},{\"name\":\"endpointParams\",\"type\":\"bytes32[]\"}],\"name\":\"query\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bondage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getEndpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getUserQuery\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bondageAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"response\",\"type\":\"int256[]\"}],\"name\":\"respondIntArray\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"response1\",\"type\":\"string\"},{\"name\":\"response2\",\"type\":\"string\"}],\"name\":\"respond2\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"c\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"query\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"endpoint\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"endpointParams\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"name\":\"onchainSubscriber\",\"type\":\"bool\"}],\"name\":\"Incoming\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"endpoint\",\"type\":\"bytes32\"}],\"name\":\"FulfillQuery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"response\",\"type\":\"bytes32[]\"}],\"name\":\"OffchainResponse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"response\",\"type\":\"int256[]\"}],\"name\":\"OffchainResponseInt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"response1\",\"type\":\"string\"}],\"name\":\"OffchainResult1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"response1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"response2\",\"type\":\"string\"}],\"name\":\"OffchainResult2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"response1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"response2\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"response3\",\"type\":\"string\"}],\"name\":\"OffchainResult3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"response1\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"response2\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"response3\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"response4\",\"type\":\"string\"}],\"name\":\"OffchainResult4\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"CanceledRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"subscriber\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"RevertCancelation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Dispatch","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b007eca49763f31edff95623ed6c23c8c1924a16","Library":"","SwarmSource":"bzzr://60080e47d23aad02b3c7e75b723a3bb074acd1555c0903745f29f6dd7cde1cb4"}]}