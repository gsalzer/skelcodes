{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract eth5io {\r\n    address public owner;\r\n    address public admin;\r\n    uint constant public TEST_DRIVE_INVEST = 5 finney;\r\n    uint constant public MINIMUM_INVEST = 50 finney;\r\n    uint constant public MINIMUM_VIP_INVEST = 5 ether;\r\n    uint constant public MINIMUM_SVIP_INVEST = 25 ether;\r\n    uint constant public OWNER_FEE_DENOMINATOR = 100;\r\n    uint constant public FUND_FEE_DENOMINATOR = 100;\r\n    uint constant public INTEREST = 5;\r\n    uint constant public FUND_DAILY_USER = 500;\r\n    uint public multiplier = 1;\r\n    uint public dailyDepositLimit = 555 ether;\r\n    uint public fund;\r\n    uint  public funduser;\r\n    \r\n    uint public round = 0;\r\n    address[] public addresses;\r\n    mapping(address => Investor) public investors;\r\n    bool public pause = true;\r\n    uint constant period = 60 * 60 * 24;\r\n    \r\n    \r\n    uint dailyDeposit;\r\n    uint roundStartDate;\r\n    uint daysFromRoundStart;\r\n    uint deposit;\r\n    enum Status { TEST, BASIC, VIP, SVIP }\r\n\r\n    struct Investor {\r\n        uint id;\r\n        uint round;\r\n        uint deposit;\r\n        uint deposits;\r\n        uint investDate;\r\n        uint lastPaymentDate;\r\n        address referrer;\r\n        Status status;\r\n        bool refPayed;\r\n    }\r\n\r\n    event TestDrive(address addr, uint date);\r\n    event Invest(address addr, uint amount, address referrer);\r\n    event WelcomeVIP(address addr);\r\n    event WelcomeSuperVIP(address addr);\r\n    event Payout(address addr, uint amount, string eventType, address from);\r\n    event NextRoundStarted(uint round, uint date);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Sender not authorised.\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n\r\n        owner = msg.sender;\r\n        admin = msg.sender;\r\n        \r\n        nextRound();\r\n    }\r\n\r\n    function() payable public {\r\n\r\n        if((msg.sender == owner) || (msg.sender == admin)) {\r\n            return;\r\n        }\r\n\r\n        require(pause == false, \"5eth.io is paused. Please wait for the next round.\");\r\n\r\n        if (0 == msg.value) {\r\n            payout();\r\n            return;\r\n        }\r\n\r\n        require(msg.value >= MINIMUM_INVEST || msg.value == TEST_DRIVE_INVEST, \"Too small amount, minimum 0.005 ether\");\r\n        \r\n        if (daysFromRoundStart < daysFrom(roundStartDate)) {\r\n            dailyDeposit = 0;\r\n            funduser = 0;\r\n            daysFromRoundStart = daysFrom(roundStartDate);\r\n        }\r\n        \r\n        require(msg.value + dailyDeposit <= dailyDepositLimit, \"Daily deposit limit reached! See you soon\");\r\n        dailyDeposit += msg.value;\r\n        \r\n        Investor storage user = investors[msg.sender];\r\n\r\n        if ((user.id == 0) || (user.round < round)) {\r\n            \r\n            msg.sender.transfer(0 wei); \r\n\r\n            addresses.push(msg.sender);\r\n            user.id = addresses.length;\r\n            user.deposit = 0;\r\n            user.deposits = 0;\r\n            user.lastPaymentDate = now;\r\n            user.investDate = now;\r\n            user.round = round;\r\n\r\n            // referrer\r\n            address referrer = bytesToAddress(msg.data);\r\n            if (investors[referrer].id > 0 && referrer != msg.sender\r\n               && investors[referrer].round == round) {\r\n                user.referrer = referrer;\r\n            }\r\n        }\r\n\r\n        // save investor\r\n        user.deposit += msg.value;\r\n        user.deposits += 1;\r\n        deposit += msg.value;\r\n        emit Invest(msg.sender, msg.value, user.referrer);\r\n\r\n        // sequential deposit cash-back on 20+ day\r\n        if ((user.deposits > 1) && (user.status != Status.TEST) && (daysFrom(user.investDate) > 20)) {\r\n            uint mul = daysFrom(user.investDate) > 40 ? 4 : 2;\r\n            uint cashBack = (msg.value / 100) *INTEREST* mul;\r\n            if (msg.sender.send(cashBack)) {\r\n                emit Payout(user.referrer, cashBack, \"seq-deposit-cash-back\", msg.sender);\r\n            }\r\n        }\r\n        \r\n        Status newStatus;\r\n        if (msg.value >= MINIMUM_SVIP_INVEST) {\r\n            emit WelcomeSuperVIP(msg.sender);\r\n            newStatus = Status.SVIP;\r\n        } else if (msg.value >= MINIMUM_VIP_INVEST) {\r\n            emit WelcomeVIP(msg.sender);\r\n            newStatus = Status.VIP;\r\n        } else if (msg.value >= MINIMUM_INVEST) {\r\n            newStatus = Status.BASIC;\r\n        } else if (msg.value == TEST_DRIVE_INVEST) {\r\n            if (user.deposits == 1){\r\n                funduser += 1;\r\n                require(FUND_DAILY_USER>funduser,\"Fund full, See you soon!\");\r\n                emit TestDrive(msg.sender, now);\r\n                fund += msg.value;\r\n                if(sendFromFund(TEST_DRIVE_INVEST, msg.sender)){\r\n                    \r\n                    emit Payout(msg.sender,TEST_DRIVE_INVEST,\"test-drive-cashback\",0);\r\n                }\r\n            }\r\n            newStatus = Status.TEST;\r\n        }\r\n        if (newStatus > user.status) {\r\n            user.status = newStatus;\r\n        }\r\n        // proccess fees and referrers\r\n        if(newStatus!=Status.TEST){\r\n            admin.transfer(msg.value / OWNER_FEE_DENOMINATOR * 4); // administration fee\r\n            owner.transfer(msg.value / OWNER_FEE_DENOMINATOR * 10); // owners fee\r\n            fund += msg.value / FUND_FEE_DENOMINATOR;          // test-drive fund\r\n        }\r\n        user.lastPaymentDate = now;\r\n    }\r\n\r\n    function payout() private {\r\n        \r\n        Investor storage user = investors[msg.sender];\r\n\r\n        require(user.id > 0, \"Investor not found.\");\r\n        require(user.round == round, \"Your round is over.\");\r\n\r\n        require(daysFrom(user.lastPaymentDate) >= 1, \"Wait at least 24 hours.\");\r\n        \r\n        uint amount = getInvestorDividendsAmount(msg.sender);\r\n        if (address(this).balance < amount) {\r\n            pause = true;\r\n            return;\r\n        }\r\n        \r\n        if ((user.referrer > 0x0) && !user.refPayed && (user.status != Status.TEST)) {\r\n            user.refPayed = true;\r\n            Investor storage ref = investors[user.referrer];\r\n            if (ref.id > 0 && ref.round == round) {\r\n                uint bonusAmount = (user.deposit / 100) * INTEREST;\r\n                uint refBonusAmount = bonusAmount * uint(ref.status);\r\n            \r\n                if (user.referrer.send(refBonusAmount)) {\r\n                    emit Payout(user.referrer, refBonusAmount, \"referral\", msg.sender);\r\n                }\r\n            \r\n                if (user.deposits == 1) { // cashback only for the first deposit\r\n                    if (msg.sender.send(bonusAmount)) {\r\n                        emit Payout(msg.sender, bonusAmount, \"ref-cash-back\", 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (user.status == Status.TEST) {\r\n            uint daysFromInvest = daysFrom(user.investDate);\r\n            require(daysFromInvest <= 20, \"Your test drive is over!\");\r\n\r\n            if (sendFromFund(amount, msg.sender)) {\r\n                emit Payout(msg.sender, TEST_DRIVE_INVEST, \"test-drive-self-payout\", 0);\r\n            }\r\n        } else {\r\n            msg.sender.transfer(amount);\r\n            emit Payout(msg.sender, amount, \"self-payout\", 0);\r\n        }\r\n        user.lastPaymentDate = now;\r\n    }\r\n\r\n    function sendFromFund(uint amount, address user) private returns (bool) {\r\n\r\n        require(fund > amount, \"Test-drive fund empty! See you later.\");\r\n        if (user.send(amount)) {\r\n            fund -= amount;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // views\r\n    \r\n    function getInvestorCount() public view returns (uint) {\r\n\r\n        return addresses.length - 1;\r\n    }\r\n\r\n    function getInvestorDividendsAmount(address addr) public view returns (uint) {\r\n\r\n        return investors[addr].deposit / 100 * INTEREST \r\n                * daysFrom(investors[addr].lastPaymentDate) * multiplier;\r\n    }\r\n\r\n    // configuration\r\n    \r\n    function setMultiplier(uint newMultiplier) onlyOwner public {\r\n\r\n        multiplier = newMultiplier;\r\n    }\r\n\r\n    function setDailyDepositLimit(uint newDailyDepositLimit) onlyOwner public {\r\n\r\n        dailyDepositLimit = newDailyDepositLimit;\r\n    }\r\n\r\n    function setAdminAddress(address newAdmin) onlyOwner public {\r\n\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function addInvestors(address[] addr, uint[] amount, bool[] isSuper) onlyOwner public {\r\n\r\n        // create VIP/SVIP refs\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            uint id = addresses.length;\r\n            if (investors[addr[i]].deposit == 0) {\r\n                addresses.push(addr[i]);\r\n                deposit += amount[i];\r\n            }\r\n            \r\n            Status s = isSuper[i] ? Status.SVIP : Status.VIP;\r\n            investors[addr[i]] = Investor(id, round, amount[i], 1, now, now, 0, s, false);\r\n\r\n        }\r\n    }\r\n\r\n    function nextRound() onlyOwner public {\r\n            if(pause==true){\r\n                delete addresses;\r\n                addresses.length = 1;\r\n                deposit = 0;\r\n                fund = 0;\r\n        \r\n                dailyDeposit = 0;\r\n                roundStartDate = now;\r\n                daysFromRoundStart = 0;\r\n\r\n                owner.transfer(address(this).balance);\r\n\r\n                emit NextRoundStarted(round, now);\r\n                pause = false;\r\n                round += 1;\r\n            }\r\n        \r\n    }\r\n\r\n    // util\r\n    \r\n    function daysFrom(uint date) private view returns (uint) {\r\n        return (now - date) / period;\r\n    }\r\n\r\n    function bytesToAddress(bytes bys) private pure returns (address addr) {\r\n\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_SVIP_INVEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TEST_DRIVE_INVEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256[]\"},{\"name\":\"isSuper\",\"type\":\"bool[]\"}],\"name\":\"addInvestors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_INVEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dailyDepositLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"nextRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"setMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"deposits\",\"type\":\"uint256\"},{\"name\":\"investDate\",\"type\":\"uint256\"},{\"name\":\"lastPaymentDate\",\"type\":\"uint256\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"refPayed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"funduser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_FEE_DENOMINATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInvestorDividendsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDailyDepositLimit\",\"type\":\"uint256\"}],\"name\":\"setDailyDepositLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUND_DAILY_USER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_VIP_INVEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUND_FEE_DENOMINATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INTEREST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"TestDrive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WelcomeVIP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WelcomeSuperVIP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"NextRoundStarted\",\"type\":\"event\"}]","ContractName":"eth5io","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://72758ee28456e6746dc63b783dc6fa9e4dd47c72cbcb51102d8773ce1c219702"}]}