{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n/**\r\n// This file is MIT Licensed.\r\n//\r\n// Copyright 2017 Christian Reitwiessner\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\nlibrary Pairing {\r\nstruct G1Point {\r\nuint X;\r\nuint Y;\r\n}\r\n// Encoding of field elements is: X[0] * z + X[1]\r\nstruct G2Point {\r\nuint[2] X;\r\nuint[2] Y;\r\n}\r\n/// @return the generator of G1\r\nfunction P1() pure internal returns (G1Point) {\r\nreturn G1Point(1, 2);\r\n}\r\n/// @return the generator of G2\r\nfunction P2() pure internal returns (G2Point) {\r\nreturn G2Point(\r\n[11559732032986387107991004021392285783925812861821192530917403151452391805634,\r\n10857046999023057135944570762232829481370756359578518086990519993285655852781],\r\n[4082367875863433681332203403145435568316851327593401208105741076214120093531,\r\n8495653923123431417604973247489272438418190587263600148770280649306958101930]\r\n);\r\n}\r\n/// @return the negation of p, i.e. p.addition(p.negate()) should be zero.\r\nfunction negate(G1Point p) pure internal returns (G1Point) {\r\n// The prime q in the base field F_q for G1\r\nuint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\r\nif (p.X == 0 && p.Y == 0)\r\nreturn G1Point(0, 0);\r\nreturn G1Point(p.X, q - (p.Y % q));\r\n}\r\n/// @return the sum of two points of G1\r\nfunction addition(G1Point p1, G1Point p2) internal returns (G1Point r) {\r\nuint[4] memory input;\r\ninput[0] = p1.X;\r\ninput[1] = p1.Y;\r\ninput[2] = p2.X;\r\ninput[3] = p2.Y;\r\nbool success;\r\nassembly {\r\nsuccess := call(sub(gas, 2000), 6, 0, input, 0xc0, r, 0x60)\r\n// Use \"invalid\" to make gas estimation work\r\nswitch success case 0 { invalid() }\r\n}\r\nrequire(success);\r\n}\r\n/// @return the product of a point on G1 and a scalar, i.e.\r\n/// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\r\nfunction scalar_mul(G1Point p, uint s) internal returns (G1Point r) {\r\nuint[3] memory input;\r\ninput[0] = p.X;\r\ninput[1] = p.Y;\r\ninput[2] = s;\r\nbool success;\r\nassembly {\r\nsuccess := call(sub(gas, 2000), 7, 0, input, 0x80, r, 0x60)\r\n// Use \"invalid\" to make gas estimation work\r\nswitch success case 0 { invalid() }\r\n}\r\nrequire (success);\r\n}\r\n/// @return the result of computing the pairing check\r\n/// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\r\n/// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\r\n/// return true.\r\nfunction pairing(G1Point[] p1, G2Point[] p2) internal returns (bool) {\r\nrequire(p1.length == p2.length);\r\nuint elements = p1.length;\r\nuint inputSize = elements * 6;\r\nuint[] memory input = new uint[](inputSize);\r\nfor (uint i = 0; i < elements; i++)\r\n{\r\ninput[i * 6 + 0] = p1[i].X;\r\ninput[i * 6 + 1] = p1[i].Y;\r\ninput[i * 6 + 2] = p2[i].X[0];\r\ninput[i * 6 + 3] = p2[i].X[1];\r\ninput[i * 6 + 4] = p2[i].Y[0];\r\ninput[i * 6 + 5] = p2[i].Y[1];\r\n}\r\nuint[1] memory out;\r\nbool success;\r\nassembly {\r\nsuccess := call(sub(gas, 2000), 8, 0, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\r\n// Use \"invalid\" to make gas estimation work\r\nswitch success case 0 { invalid() }\r\n}\r\nrequire(success);\r\nreturn out[0] != 0;\r\n}\r\n/// Convenience method for a pairing check for two pairs.\r\nfunction pairingProd2(G1Point a1, G2Point a2, G1Point b1, G2Point b2) internal returns (bool) {\r\nG1Point[] memory p1 = new G1Point[](2);\r\nG2Point[] memory p2 = new G2Point[](2);\r\np1[0] = a1;\r\np1[1] = b1;\r\np2[0] = a2;\r\np2[1] = b2;\r\nreturn pairing(p1, p2);\r\n}\r\n/// Convenience method for a pairing check for three pairs.\r\nfunction pairingProd3(\r\nG1Point a1, G2Point a2,\r\nG1Point b1, G2Point b2,\r\nG1Point c1, G2Point c2\r\n) internal returns (bool) {\r\nG1Point[] memory p1 = new G1Point[](3);\r\nG2Point[] memory p2 = new G2Point[](3);\r\np1[0] = a1;\r\np1[1] = b1;\r\np1[2] = c1;\r\np2[0] = a2;\r\np2[1] = b2;\r\np2[2] = c2;\r\nreturn pairing(p1, p2);\r\n}\r\n/// Convenience method for a pairing check for four pairs.\r\nfunction pairingProd4(\r\nG1Point a1, G2Point a2,\r\nG1Point b1, G2Point b2,\r\nG1Point c1, G2Point c2,\r\nG1Point d1, G2Point d2\r\n) internal returns (bool) {\r\nG1Point[] memory p1 = new G1Point[](4);\r\nG2Point[] memory p2 = new G2Point[](4);\r\np1[0] = a1;\r\np1[1] = b1;\r\np1[2] = c1;\r\np1[3] = d1;\r\np2[0] = a2;\r\np2[1] = b2;\r\np2[2] = c2;\r\np2[3] = d2;\r\nreturn pairing(p1, p2);\r\n}\r\n}\r\n\r\n\r\n\r\n\r\ncontract Verifier {\r\nusing Pairing for *;\r\nstruct VerifyingKey {\r\nPairing.G2Point A;\r\nPairing.G1Point B;\r\nPairing.G2Point C;\r\nPairing.G2Point gamma;\r\nPairing.G1Point gammaBeta1;\r\nPairing.G2Point gammaBeta2;\r\nPairing.G2Point Z;\r\nPairing.G1Point[] IC;\r\n}\r\nstruct Proof {\r\nPairing.G1Point A;\r\nPairing.G1Point A_p;\r\nPairing.G2Point B;\r\nPairing.G1Point B_p;\r\nPairing.G1Point C;\r\nPairing.G1Point C_p;\r\nPairing.G1Point K;\r\nPairing.G1Point H;\r\n}\r\n//uint[] vector; //not used - replaced by a mapping\r\n//Pairing.G1Point vk_x = Pairing.G1Point(0, 0); //not used - replaced by a mapping\r\n//VerifyingKey private vk; //not used - replaced by a mapping\r\nmapping(address => VerifyingKey) private vks;\r\nmapping(address => uint[]) private vectors;\r\nmapping(address => Pairing.G1Point) private vk_xs;\r\n\r\n\r\n\r\n\r\nfunction setKeyLength(uint l) public {\r\nvks[msg.sender].IC.length = l;\r\nvectors[msg.sender].length = l-1;\r\n}\r\n\r\n\r\n\r\n\r\nfunction loadVerifyingKeyPreamble(\r\nuint[2][2] A,\r\nuint[2] B,\r\nuint[2][2] C,\r\nuint[2][2] gamma,\r\nuint[2] gammaBeta1,\r\nuint[2][2] gammaBeta2,\r\nuint[2][2] Z\r\n) public {\r\n/**\r\n@notice © Copyright 2018 EYGS LLP and/or other members of the global Ernst & Young/EY network; pat. pending.\r\n*/\r\nvks[msg.sender].A = Pairing.G2Point([A[0][0],A[0][1]],[A[1][0],A[1][1]]);\r\nvks[msg.sender].B = Pairing.G1Point(B[0],B[1]);\r\nvks[msg.sender].C = Pairing.G2Point([C[0][0],C[0][1]],[C[1][0],C[1][1]]);\r\nvks[msg.sender].gamma = Pairing.G2Point([gamma[0][0],gamma[0][1]],[gamma[1][0],gamma[1][1]]);\r\nvks[msg.sender].gammaBeta1 = Pairing.G1Point(gammaBeta1[0],gammaBeta1[1]);\r\nvks[msg.sender].gammaBeta2 = Pairing.G2Point([gammaBeta2[0][0],gammaBeta2[0][1]],[gammaBeta2[1][0],gammaBeta2[1][1]]);\r\nvks[msg.sender].Z = Pairing.G2Point([Z[0][0],Z[0][1]],[Z[1][0],Z[1][1]]);\r\n//this seems a good place to initialise the vk_x computation\r\nvk_xs[msg.sender] = Pairing.G1Point(0, 0); //initialise\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction loadVerifyingKey(uint[2][] points, uint start) public{\r\n/**\r\n@notice © Copyright 2018 EYGS LLP and/or other members of the global Ernst & Young/EY network; pat. pending.\r\n*/\r\n//vk_xs[addr].X =0; vk_x.Y=0; //reset the vk_x computation for next time\r\nfor (uint i=0; i<points.length; i++){\r\nvks[msg.sender].IC[i+start] = Pairing.G1Point(points[i][0],points[i][1]);\r\n}\r\n}\r\n\r\n\r\n\r\n\r\nfunction loadInputVector(uint[] inp, uint start) public {\r\n/**\r\n@notice © Copyright 2018 EYGS LLP and/or other members of the global Ernst & Young/EY network; pat. pending.\r\n*/\r\n//vk_x.X =0; vk_x.Y=0; //reset the vk_x computation for next time\r\nfor (uint i=0; i<inp.length; i++){\r\nvectors[msg.sender][i+start] = inp[i];\r\n}\r\n}\r\n/**\r\nfunction to get 64 bits from vector and turn it into a bytes8\r\n*/\r\nfunction getInputBits(uint start, address addr) public view returns(bytes8 param) {\r\n/**\r\n@notice © Copyright 2018 EYGS LLP and/or other members of the global Ernst & Young/EY network; pat. pending.\r\n*/\r\nparam = 0x0; bytes8 b = bytes8(1);\r\nfor (uint i=0; i<64; i++){\r\nif (vectors[addr][i+start] == 1) param = param | (b<<(63-i));\r\n}\r\nreturn param;\r\n}\r\n\r\n\r\n\r\n\r\nfunction computeVkx(uint start, uint end) public {\r\n/**\r\n@notice © Copyright 2018 EYGS LLP and/or other members of the global Ernst & Young/EY network; pat. pending.\r\n*/\r\n//end needs to be < vector.length\r\nfor (uint i = start; i < end; i++)\r\nvk_xs[msg.sender] = Pairing.addition(vk_xs[msg.sender], Pairing.scalar_mul(vks[msg.sender].IC[i + 1], vectors[msg.sender][i]));\r\n}\r\n\r\n\r\n\r\n\r\nfunction getAddress() public returns(address){\r\nreturn address(this);\r\n}\r\n\r\n\r\n\r\n\r\nfunction verify(Proof proof, address addr) internal returns (uint) {\r\nrequire(vectors[addr].length + 1 == vks[addr].IC.length);\r\n// Compute the linear combination vk_x\r\nvk_xs[addr] = Pairing.addition(vk_xs[addr], vks[addr].IC[0]);\r\nif (!Pairing.pairingProd2(proof.A, vks[addr].A, Pairing.negate(proof.A_p), Pairing.P2())) return 1;\r\nif (!Pairing.pairingProd2(vks[addr].B, proof.B, Pairing.negate(proof.B_p), Pairing.P2())) return 2;\r\nif (!Pairing.pairingProd2(proof.C, vks[addr].C, Pairing.negate(proof.C_p), Pairing.P2())) return 3;\r\nif (!Pairing.pairingProd3(\r\nproof.K, vks[addr].gamma,\r\nPairing.negate(Pairing.addition(vk_xs[addr], Pairing.addition(proof.A, proof.C))), vks[addr].gammaBeta2,\r\nPairing.negate(vks[addr].gammaBeta1), proof.B\r\n)) return 4;\r\nif (!Pairing.pairingProd3(\r\nPairing.addition(vk_xs[addr], proof.A), proof.B,\r\nPairing.negate(proof.H), vks[addr].Z,\r\nPairing.negate(proof.C), Pairing.P2()\r\n)) return 5;\r\nreturn 0;\r\n}\r\n// @dev Fired by function verifyTx\r\n// @param _decodeFlag = dec0de\r\n// @param _verified A message to output through this event\r\nevent Verified(bytes4 indexed _decodeFlag, bytes32 indexed _verified);\r\n\r\n\r\n\r\n\r\nfunction verifyTx(\r\nuint[2] a,\r\nuint[2] a_p,\r\nuint[2][2] b,\r\nuint[2] b_p,\r\nuint[2] c,\r\nuint[2] c_p,\r\nuint[2] h,\r\nuint[2] k,\r\naddress addr\r\n) public returns (bool r) {\r\nProof memory proof;\r\nproof.A = Pairing.G1Point(a[0], a[1]);\r\nproof.A_p = Pairing.G1Point(a_p[0], a_p[1]);\r\nproof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\r\nproof.B_p = Pairing.G1Point(b_p[0], b_p[1]);\r\nproof.C = Pairing.G1Point(c[0], c[1]);\r\nproof.C_p = Pairing.G1Point(c_p[0], c_p[1]);\r\nproof.H = Pairing.G1Point(h[0], h[1]);\r\nproof.K = Pairing.G1Point(k[0], k[1]);\r\nbytes4 decodeFlag = 0xdec0de; // flag to tell humans that _verified is a hex encoding of an ascii string\r\nbytes32 verified; // a hex encoding of a string - returned by event Verified\r\nif (verify(proof, addr) == 0) {\r\nvk_xs[addr].X =0; vk_xs[addr].Y=0; //reset the vk_x computation for next time\r\nverified = 0x4559204f7073636861696e202d20547820566572696669656421203a29; //\"EY Opschain - Tx Verified! :)\" in hex\r\nemit Verified(decodeFlag, verified);\r\nreturn true;\r\n} else {\r\nvk_xs[addr].X =0; vk_xs[addr].Y=0; //reset the vk_x computation for next time\r\nverified = 0x4559204f7073636861696e202d205478204e4f54205665726966696564203a28; //\"EY Opschain - Tx NOT Verified :(\" in hex\r\nemit Verified(decodeFlag, verified);\r\nreturn false;\r\n}\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInputBits\",\"outputs\":[{\"name\":\"param\",\"type\":\"bytes8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"inp\",\"type\":\"uint256[]\"},{\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"loadInputVector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"computeVkx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"l\",\"type\":\"uint256\"}],\"name\":\"setKeyLength\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"A\",\"type\":\"uint256[2][2]\"},{\"name\":\"B\",\"type\":\"uint256[2]\"},{\"name\":\"C\",\"type\":\"uint256[2][2]\"},{\"name\":\"gamma\",\"type\":\"uint256[2][2]\"},{\"name\":\"gammaBeta1\",\"type\":\"uint256[2]\"},{\"name\":\"gammaBeta2\",\"type\":\"uint256[2][2]\"},{\"name\":\"Z\",\"type\":\"uint256[2][2]\"}],\"name\":\"loadVerifyingKeyPreamble\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"points\",\"type\":\"uint256[2][]\"},{\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"loadVerifyingKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256[2]\"},{\"name\":\"a_p\",\"type\":\"uint256[2]\"},{\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"name\":\"b_p\",\"type\":\"uint256[2]\"},{\"name\":\"c\",\"type\":\"uint256[2]\"},{\"name\":\"c_p\",\"type\":\"uint256[2]\"},{\"name\":\"h\",\"type\":\"uint256[2]\"},{\"name\":\"k\",\"type\":\"uint256[2]\"},{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"verifyTx\",\"outputs\":[{\"name\":\"r\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_decodeFlag\",\"type\":\"bytes4\"},{\"indexed\":true,\"name\":\"_verified\",\"type\":\"bytes32\"}],\"name\":\"Verified\",\"type\":\"event\"}]","ContractName":"Verifier","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1ca58b3244a59578ca7f0ba6fba69f8ce074490476c73f347aabc8dd031b3b35"}]}