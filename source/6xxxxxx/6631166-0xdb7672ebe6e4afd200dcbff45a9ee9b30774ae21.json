{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/inx/INXCommitment.sol\r\n\r\n/**\r\n* Minimal interface definition for an INX Crowdsale\r\n*/\r\ninterface ICrowdsale {\r\n    function kyc(address _address) external returns (bool);\r\n    function wallet() external returns (address);\r\n    function minContribution() external returns (uint256);\r\n    function getCurrentRate() external returns (uint256);\r\n}\r\n\r\n/**\r\n* Minimal interface definition for an INX Token\r\n*/\r\ninterface IToken {\r\n    function mint(address _to, uint256 _amount) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title INXCommitment used to capture commitments to the INX token sale from an individual address.\r\n * Once KYC approved can redeem to INX Tokens.\r\n */\r\ncontract INXCommitment is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    address internal sender;\r\n\r\n    uint256 internal tokenBalance;\r\n\r\n    bool internal refunding = false;\r\n\r\n    ICrowdsale internal crowdsale;\r\n    IToken internal token;\r\n\r\n    /**\r\n     * Event for token commitment logging\r\n     * @param sender who paid for the tokens\r\n     * @param value weis paid for purchase\r\n     * @param rate of INX to wei\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event Commit(\r\n        address indexed sender,\r\n        uint256 value,\r\n        uint256 rate,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * Event for refund of a commitment\r\n     * @param sender who paid for the tokens\r\n     * @param value weis refunded\r\n     */\r\n    event Refund(\r\n        address indexed sender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * Event for refund toggle\r\n     */\r\n    event RefundToggle(\r\n        bool newValue\r\n    );\r\n\r\n    /**\r\n     * Event for successful redemption of a commitment\r\n     * @param sender who paid for the tokens\r\n     * @param value weis refunded\r\n     * @param amount amount of token balance removed\r\n     */\r\n    event Redeem(\r\n        address indexed sender,\r\n        uint256 value,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(address _sender, ICrowdsale _crowdsale, IToken _token) public  {\r\n        sender = _sender;\r\n        crowdsale = _crowdsale;\r\n        token = _token;\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function\r\n     */\r\n    function() external payable {\r\n        commit();\r\n    }\r\n\r\n    /**\r\n    * @dev Sends a full refund of wei and reset committed tokens to zero\r\n    */\r\n    function refund() external whenNotPaused returns (bool) {\r\n        require(refunding, \"Must be in refunding state\");\r\n\r\n        require(tokenBalance > 0, \"Token balance must be positive\");\r\n\r\n        tokenBalance = 0;\r\n\r\n        uint256 refundWeiBalance = address(this).balance;\r\n        sender.transfer(refundWeiBalance);\r\n\r\n        emit Refund(\r\n            sender,\r\n            refundWeiBalance\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev if the _sender has a balance and has been KYC then credits the account with balance\r\n    */\r\n    function redeem() external whenNotPaused returns (bool) {\r\n        require(!refunding, \"Must not be in refunding state\");\r\n\r\n        require(tokenBalance > 0, \"Token balance must be positive\");\r\n\r\n        bool kyc = crowdsale.kyc(sender);\r\n        require(kyc, \"Sender must have passed KYC\");\r\n\r\n        uint256 redeemTokenBalance = tokenBalance;\r\n        tokenBalance = 0;\r\n\r\n        uint256 redeemWeiBalance = address(this).balance;\r\n\r\n        address wallet = crowdsale.wallet();\r\n        wallet.transfer(redeemWeiBalance);\r\n\r\n        require(token.mint(sender, redeemTokenBalance), \"Unable to mint INX tokens\");\r\n\r\n        emit Redeem(\r\n            sender,\r\n            redeemWeiBalance,\r\n            redeemTokenBalance\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev captures a commitment to buy tokens at the current rate.\r\n     */\r\n    function commit() public payable whenNotPaused returns (bool) {\r\n        require(!refunding, \"Must not be in refunding state\");\r\n        require(sender == msg.sender, \"Can only commit from the predefined sender address\");\r\n\r\n        uint256 weiAmount = msg.value;\r\n        uint256 minContribution = crowdsale.minContribution();\r\n\r\n        require(weiAmount >= minContribution, \"Commitment value below minimum\");\r\n\r\n        // pull the current rate from the crowdsale\r\n        uint256 rate = crowdsale.getCurrentRate();\r\n\r\n        // calculate token amount to be committed\r\n        uint256 tokens = weiAmount.mul(rate);\r\n        tokenBalance = tokenBalance.add(tokens);\r\n\r\n        emit Commit(\r\n            sender,\r\n            weiAmount,\r\n            rate,\r\n            tokens\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev token balance of the associated sender\r\n     */\r\n    function senderTokenBalance() public view returns (uint256) {\r\n        return tokenBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev wei balance of the associated sender\r\n     */\r\n    function senderWeiBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * @dev associated sender of this contract\r\n     */\r\n    function senderAddress() public view returns (address) {\r\n        return sender;\r\n    }\r\n\r\n    /**\r\n     * @dev associated INXCrowdsale\r\n     */\r\n    function inxCrowdsale() public view returns (address) {\r\n        return crowdsale;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev associated INXToken\r\n     */\r\n    function inxToken() public view returns (address) {\r\n        return token;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev current state of refunding\r\n     */\r\n    function isRefunding() public view returns (bool) {\r\n        return refunding;\r\n    }\r\n\r\n    /**\r\n     * @dev Owner can toggle refunding state. Once in refunding anyone can trigger a refund of wei.\r\n     */\r\n    function toggleRefunding() external onlyOwner {\r\n        refunding = !refunding;\r\n\r\n        emit RefundToggle(refunding);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"senderWeiBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"senderTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"senderAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRefunding\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inxCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"toggleRefunding\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inxToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_crowdsale\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Commit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"RefundToggle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"INXCommitment","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000049607567480c46e67aef908c691c0aa2e0605100000000000000000000000000d18dd41f6e4692098d7ad42af01f6ee6c7094cf7000000000000000000000000c06fa497387f2bb6a067bc193266919c94e874b4","Library":"","SwarmSource":"bzzr://83827a4b2f4596544646edcd97c304cdc65b0c140bb086164569212f9e5ff74f"}]}