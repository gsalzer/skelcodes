{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.8;\r\n\r\n\r\ncontract SafeMath {\r\n  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) {\r\n      throw;\r\n    }\r\n  }\r\n}\r\ncontract ALBtoken is SafeMath{\r\n    // Token information\r\n    uint256 public vigencia;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\tuint256 public totalSupply;\r\n\taddress public owner;\r\n\t\r\n\t\r\n      //Token Variables\t\r\n    uint256[] public TokenMineSupply;\r\n    uint256 public _MineId;\r\n    uint256 totalSupplyFloat;\r\n    uint256 oldValue;\r\n    uint256 subValue;\r\n    uint256 oldTotalSupply;\r\n    uint256 TokensToModify;\r\n    bool firstTime;\r\n\t\r\n\t  \r\n     struct Minas {\r\n     uint256 id;\r\n\t string name;\r\n\t uint tokensupply;\r\n\t bool active;\r\n\t  }\r\n\r\n\r\n    //Mapping\r\n\t/* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\tmapping(uint256=>Minas) public participatingMines;\r\n    \r\n\t//Events\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    /* This notifies clients about the amount burn*/\r\n    event Burn(address indexed from, uint256 value);\r\n\t/* This notifies clients about the token add*/\r\n    event AddToken(address indexed from, uint256 value);    \r\n    /*This notifies clients about new mine created or updated*/\r\n    event MineCreated (uint256 MineId, string MineName, uint MineSupply);\r\n    event MineUpdated (uint256 MineId, string MineName, uint MineSupply, bool Estate);\r\n\t\r\n\t\r\n\r\n   /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function ALBtoken(){\r\n        totalSupply = 0;      // Update total supply\r\n        name = \"Albarit\";     // Set the name for display purposes\r\n        symbol = \"ALB\";       // Set the symbol for display purposes\r\n        decimals = 3;         // Amount of decimals for display purposes\r\n        balanceOf[msg.sender] = totalSupply;  // Give the creator all initial tokens\r\n\t\towner = msg.sender;  //Set contrac's owner\r\n\t\tvigencia =2178165600;\r\n\t\tfirstTime = false;\r\n    }\r\n\r\n\t//Administrator \r\n\t modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) {\r\n        if(totalSupply == 0)\r\n        {\r\n            selfdestruct(owner);\r\n        }\r\n        \r\n       if(block.timestamp >= vigencia)\r\n       {\r\n           throw;\r\n       }\r\n       \r\n        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\tif (_value <= 0) throw; \r\n        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\r\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\r\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n       }\r\n    \r\n    \r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n\t\tif(totalSupply == 0)\r\n        {\r\n            selfdestruct(owner);\r\n        }\r\n\t\t\r\n\t\tif(block.timestamp >= vigencia)\r\n       {\r\n           throw;\r\n       }\r\n\t\t\r\n\t\tif (_value <= 0) throw; \r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n       \r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n       if(totalSupply == 0)\r\n        {\r\n            selfdestruct(owner);\r\n        }\r\n       \r\n       if(block.timestamp >= vigencia)\r\n       {\r\n           throw;\r\n       }\r\n       \r\n        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\tif (_value <= 0) throw; \r\n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\r\n        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\r\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\r\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\r\n        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\t\r\n\t/* A contract attempts to get the coins */\r\n    function transferFromRoot(address _from, address _to, uint256 _value) onlyOwner returns (bool success) {\r\n       if(totalSupply == 0)\r\n        {\r\n            selfdestruct(owner);\r\n        }\r\n       \r\n       if(block.timestamp >= vigencia)\r\n       {\r\n           throw;\r\n       }\r\n       \r\n        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\tif (_value <= 0) throw; \r\n        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\r\n        \r\n        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\r\n        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function addToken(uint256 _value) onlyOwner returns (bool success) {\r\n       if(totalSupply == 0)\r\n        {\r\n            selfdestruct(owner);\r\n        }\r\n       \r\n       if(block.timestamp >= vigencia)\r\n       {\r\n           throw;\r\n       }\r\n        //totalSupply = SafeMath.safeAdd(totalSupply,_value);                                // Updates totalSupply\r\n        emit AddToken(msg.sender, _value);\r\n        balanceOf[owner]=SafeMath.safeAdd(balanceOf[owner], _value); \r\n        return true;\r\n    }\r\n    \r\n\tfunction burn(uint256 _value) onlyOwner returns (bool success) {\r\n       if(totalSupply == 0)\r\n        {\r\n            selfdestruct(owner);\r\n        }\r\n       \r\n        if(block.timestamp >= vigencia)\r\n       {\r\n           throw;\r\n       }\r\n        \r\n        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\r\n\t\tif (_value <= 0) throw; \r\n        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\r\n        //totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n\t\r\n\t// transfer balance to owner\r\n\tfunction withdrawEther(uint256 amount) onlyOwner{\r\n\t\tif(totalSupply == 0)\r\n        {\r\n            selfdestruct(owner);\r\n        }\r\n\t\tif(block.timestamp >= vigencia)\r\n       {\r\n           throw;\r\n       }\r\n\t\t\r\n\t\tif(msg.sender != owner)throw;\r\n\t\towner.transfer(amount);\r\n\t}\r\n\t\r\n\t// can accept ether\r\n\tfunction() payable {\r\n    }\r\n\r\n  function RegisterMine(string _name, uint _tokensupply) onlyOwner\r\n   {\r\n     if (firstTime == false)\r\n     {\r\n         firstTime = true;\r\n     }\r\n     else\r\n     {\r\n      if(totalSupply == 0)\r\n        {\r\n            selfdestruct(owner);\r\n        }\r\n     } \r\n     \r\n      if(block.timestamp >= vigencia)\r\n       {\r\n           throw;\r\n       }\r\n      \r\n       \r\n       /*Register new mine's data*/\r\n\t   participatingMines[_MineId] = Minas ({\r\n\t       id: _MineId,\r\n\t\t   name: _name,\r\n\t\t   tokensupply: _tokensupply,\r\n\t\t   active: true\r\n\t   });\r\n\t   \r\n\t   /*add to array new item with new mine's token supply */\r\n\t   TokenMineSupply.push(_tokensupply);\r\n\t   \r\n\t   /*add to array new item with new mine's token supply */\r\n\t   \r\n\t   /*Uptade Albarit's total supply*/\r\n\t    /*uint256*/ totalSupplyFloat = 0;\r\n        for (uint8 i = 0; i < TokenMineSupply.length; i++)\r\n        {\r\n            totalSupplyFloat = safeAdd(TokenMineSupply[i], totalSupplyFloat);\r\n        } \r\n        \r\n        totalSupply = totalSupplyFloat;\r\n        addToken(_tokensupply);\r\n        emit MineCreated (_MineId, _name, _tokensupply);\r\n         _MineId = safeAdd(_MineId, 1);\r\n\r\n   }\r\n   \r\n   \r\n   function ModifyMine(uint256 _Id, bool _state, string _name, uint _tokensupply) onlyOwner \r\n   {\r\n       if(totalSupply == 0)\r\n        {\r\n            selfdestruct(owner);\r\n        }\r\n       \r\n       if(block.timestamp >= vigencia)\r\n       {\r\n           throw;\r\n       }\r\n       \r\n       \r\n       /*uint256*/ oldValue = 0;\r\n       /*uint256*/ subValue = 0;\r\n       /*uint256*/ oldTotalSupply = totalSupply;\r\n       /*uint256*/ TokensToModify = 0;\r\n      /*update mine's data*/ \r\n\t   participatingMines[_Id].active = _state;\r\n\t   participatingMines[_Id].name = _name;\r\n   \t   participatingMines[_Id].tokensupply = _tokensupply;\r\n   \t   \r\n   \t   oldValue = TokenMineSupply[_Id];\r\n   \t   \r\n   \t    if (_tokensupply > oldValue) {\r\n          TokenMineSupply[_Id] = _tokensupply;\r\n      } else {\r\n          subValue = safeSub(oldValue, _tokensupply);\r\n          TokenMineSupply[_Id]=safeSub(TokenMineSupply[_Id], subValue);\r\n      }\r\n   \t   \r\n   \t   /*Uint256*/ totalSupplyFloat = 0;\r\n   \t   \r\n        for (uint8 i = 0; i < TokenMineSupply.length; i++)\r\n        {\r\n            totalSupplyFloat = safeAdd(TokenMineSupply[i], totalSupplyFloat);\r\n        } \r\n        \r\n        emit MineUpdated(_Id, _name, _tokensupply,  _state);\r\n          totalSupply = totalSupplyFloat;\r\n          \r\n          \r\n        /*_tokensupply > oldValue*/\r\n      if (totalSupply > oldTotalSupply) {\r\n          TokensToModify = safeSub(totalSupply, oldTotalSupply);\r\n          addToken(TokensToModify);\r\n        } \r\n           /*_tokensupply > oldValue*/\r\n      if (totalSupply < oldTotalSupply) {\r\n          TokensToModify = safeSub(oldTotalSupply, totalSupply);\r\n          burn(TokensToModify);\r\n        } \r\n        \r\n   }\r\n   \r\nfunction getTokenByMineID() external view returns (uint256[]) {\r\n  return TokenMineSupply;\r\n}\r\n\r\nfunction ModifyVigencia(uint256 _vigencia) onlyOwner\r\n{\r\n    if(totalSupply == 0)\r\n        {\r\n            selfdestruct(owner);\r\n        }\r\n    vigencia = _vigencia;\r\n}\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MineId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_Id\",\"type\":\"uint256\"},{\"name\":\"_state\",\"type\":\"bool\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_tokensupply\",\"type\":\"uint256\"}],\"name\":\"ModifyMine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromRoot\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokenMineSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_tokensupply\",\"type\":\"uint256\"}],\"name\":\"RegisterMine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vigencia\",\"type\":\"uint256\"}],\"name\":\"ModifyVigencia\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vigencia\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenByMineID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participatingMines\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"tokensupply\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"MineId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"MineName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"MineSupply\",\"type\":\"uint256\"}],\"name\":\"MineCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"MineId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"MineName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"MineSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Estate\",\"type\":\"bool\"}],\"name\":\"MineUpdated\",\"type\":\"event\"}]","ContractName":"ALBtoken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://457ec48cfb48992155c6088b2ef072929be03447f60147b6bbde5b7ab37b768b"}]}