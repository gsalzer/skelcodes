{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\ncontract ERC20Interface {\r\n  function totalSupply() public constant returns (uint);\r\n  function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract WorkIt is ERC20Interface {\r\n\r\n  // non-fixed supply ERC20 implementation\r\n  string public constant name = \"WorkIt Token\";\r\n  string public constant symbol = \"WIT\";\r\n  uint _totalSupply = 0;\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowances;\r\n\r\n  function totalSupply() public constant returns (uint) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n    return balances[tokenOwner];\r\n  }\r\n\r\n  function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n    return allowances[tokenOwner][spender];\r\n  }\r\n\r\n  function transfer(address to, uint tokens) public returns (bool success) {\r\n    require(balances[msg.sender] >= tokens);\r\n    balances[msg.sender] = balances[msg.sender] - tokens;\r\n    balances[to] = balances[to] + tokens;\r\n    emit Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n\r\n  function approve(address spender, uint tokens) public returns (bool success) {\r\n    allowances[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n    require(allowances[from][msg.sender] >= tokens);\r\n    require(balances[from] >= tokens);\r\n    allowances[from][msg.sender] = allowances[from][msg.sender] - tokens;\r\n    balances[from] = balances[from] - tokens;\r\n    balances[to] = balances[to] + tokens;\r\n    emit Transfer(from, to, tokens);\r\n    return true;\r\n  }\r\n\r\n  // End ERC-20 implementation\r\n\r\n  struct WeekCommittment {\r\n    uint daysCompleted;\r\n    uint daysCommitted;\r\n    mapping(uint => uint) workoutProofs;\r\n    uint tokensCommitted;\r\n    uint tokensEarned;\r\n    bool tokensPaid;\r\n  }\r\n\r\n  struct WeekData {\r\n    bool initialized;\r\n    uint totalPeopleCompleted;\r\n    uint totalPeople;\r\n    uint totalDaysCommitted;\r\n    uint totalDaysCompleted;\r\n    uint totalTokensCompleted;\r\n    uint totalTokens;\r\n  }\r\n\r\n  uint public weiPerToken = 1000000000000000; // 1000 WITs per eth\r\n  uint secondsPerDay = 86400;\r\n  uint daysPerWeek = 7;\r\n\r\n  mapping(uint => WeekData) public dataPerWeek;\r\n  mapping (address => mapping(uint => WeekCommittment)) public commitments;\r\n\r\n  mapping(uint => string) imageHashes;\r\n  uint imageHashCount;\r\n\r\n  uint public startDate;\r\n  address public owner;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    // Round down to the nearest day at 00:00Z (UTC -6)\r\n    startDate = (block.timestamp / secondsPerDay) * secondsPerDay - 60 * 6;\r\n  }\r\n\r\n  event Log(string message);\r\n\r\n  // Fallback function executed when ethereum is received with no function call\r\n  function () public payable {\r\n    buyTokens(msg.value / weiPerToken);\r\n  }\r\n\r\n  // Buy tokens\r\n  function buyTokens(uint tokens) public payable {\r\n    require(msg.value >= tokens * weiPerToken);\r\n    balances[msg.sender] += tokens;\r\n    _totalSupply += tokens;\r\n  }\r\n\r\n  // Commit to exercising this week\r\n  function commitToWeek(uint tokens, uint _days) public {\r\n    // Need at least 10 tokens to participate\r\n    if (balances[msg.sender] < tokens || tokens < 10) {\r\n      emit Log(\"You need to bet at least 10 tokens to commit\");\r\n      require(false);\r\n    }\r\n    if (_days == 0) {\r\n      emit Log(\"You cannot register for 0 days of activity\");\r\n      require(false);\r\n    }\r\n    if (_days > daysPerWeek) {\r\n      emit Log(\"You cannot register for more than 7 days per week\");\r\n      require(false);\r\n    }\r\n    if (_days > daysPerWeek - currentDayOfWeek()) {\r\n      emit Log(\"It is too late in the week for you to register\");\r\n      require(false);\r\n    }\r\n\r\n    WeekCommittment storage commitment = commitments[msg.sender][currentWeek()];\r\n\r\n    if (commitment.tokensCommitted != 0) {\r\n      emit Log(\"You have already committed to this week\");\r\n      require(false);\r\n    }\r\n    balances[0x0] = balances[0x0] + tokens;\r\n    balances[msg.sender] = balances[msg.sender] - tokens;\r\n    emit Transfer(msg.sender, 0x0, tokens);\r\n\r\n    initializeWeekData(currentWeek());\r\n    WeekData storage data = dataPerWeek[currentWeek()];\r\n    data.totalPeople++;\r\n    data.totalTokens += tokens;\r\n    data.totalDaysCommitted += _days;\r\n\r\n    commitment.daysCommitted = _days;\r\n    commitment.daysCompleted = 0;\r\n    commitment.tokensCommitted = tokens;\r\n    commitment.tokensEarned = 0;\r\n    commitment.tokensPaid = false;\r\n  }\r\n\r\n  // Payout your available balance based on your activity in previous weeks\r\n  function payout() public {\r\n    require(currentWeek() > 0);\r\n    for (uint activeWeek = currentWeek() - 1; true; activeWeek--) {\r\n      WeekCommittment storage committment = commitments[msg.sender][activeWeek];\r\n      if (committment.tokensPaid) {\r\n        break;\r\n      }\r\n      if (committment.daysCommitted == 0) {\r\n        committment.tokensPaid = true;\r\n        // Handle edge case and avoid -1\r\n        if (activeWeek == 0) break;\r\n        continue;\r\n      }\r\n      initializeWeekData(activeWeek);\r\n      WeekData storage week = dataPerWeek[activeWeek];\r\n      uint tokensFromPool = 0;\r\n      uint tokens = committment.tokensCommitted * committment.daysCompleted / committment.daysCommitted;\r\n      if (week.totalPeopleCompleted == 0) {\r\n        tokensFromPool = (week.totalTokens - week.totalTokensCompleted) / week.totalPeople;\r\n        tokens = 0;\r\n      } else if (committment.daysCompleted == committment.daysCommitted) {\r\n        tokensFromPool = (week.totalTokens - week.totalTokensCompleted) / week.totalPeopleCompleted;\r\n      }\r\n      uint totalTokens = tokensFromPool + tokens;\r\n      if (totalTokens == 0) {\r\n        committment.tokensPaid = true;\r\n        // Handle edge case and avoid -1\r\n        if (activeWeek == 0) break;\r\n        continue;\r\n      }\r\n      balances[0x0] = balances[0x0] - totalTokens;\r\n      balances[msg.sender] = balances[msg.sender] + totalTokens;\r\n      emit Transfer(0x0, msg.sender, totalTokens);\r\n      committment.tokensEarned = totalTokens;\r\n      committment.tokensPaid = true;\r\n\r\n      // Handle edge case and avoid -1\r\n      if (activeWeek == 0) break;\r\n    }\r\n  }\r\n\r\n  // Post image data to the blockchain and log completion\r\n  // TODO: If not committed for this week use last weeks tokens and days (if it exists)\r\n  function postProof(string proofHash) public {\r\n    WeekCommittment storage committment = commitments[msg.sender][currentWeek()];\r\n    if (committment.daysCompleted > currentDayOfWeek()) {\r\n      emit Log(\"You have already uploaded proof for today\");\r\n      require(false);\r\n    }\r\n    if (committment.tokensCommitted == 0) {\r\n      emit Log(\"You have not committed to this week yet\");\r\n      require(false);\r\n    }\r\n    if (committment.workoutProofs[currentDayOfWeek()] != 0) {\r\n      emit Log(\"Proof has already been stored for this day\");\r\n      require(false);\r\n    }\r\n    if (committment.daysCompleted >= committment.daysCommitted) {\r\n      // Don't allow us to go over our committed days\r\n      return;\r\n    }\r\n    committment.workoutProofs[currentDayOfWeek()] = storeImageString(proofHash);\r\n    committment.daysCompleted++;\r\n\r\n    initializeWeekData(currentWeek());\r\n    WeekData storage week = dataPerWeek[currentWeek()];\r\n    week.totalDaysCompleted++;\r\n    week.totalTokensCompleted = week.totalTokens * week.totalDaysCompleted / week.totalDaysCommitted;\r\n    if (committment.daysCompleted >= committment.daysCommitted) {\r\n      week.totalPeopleCompleted++;\r\n    }\r\n  }\r\n\r\n  // Withdraw tokens to eth\r\n  function withdraw(uint tokens) public returns (bool success) {\r\n    require(balances[msg.sender] >= tokens);\r\n    uint weiToSend = tokens * weiPerToken;\r\n    require(address(this).balance >= weiToSend);\r\n    balances[msg.sender] = balances[msg.sender] - tokens;\r\n    _totalSupply -= tokens;\r\n    return msg.sender.send(tokens * weiPerToken);\r\n  }\r\n\r\n  // Store an image string and get back a numerical identifier\r\n  function storeImageString(string hash) public returns (uint index) {\r\n    imageHashes[++imageHashCount] = hash;\r\n    return imageHashCount;\r\n  }\r\n\r\n  // Initialize a week data struct\r\n  function initializeWeekData(uint _week) public {\r\n    if (dataPerWeek[_week].initialized) return;\r\n    WeekData storage week = dataPerWeek[_week];\r\n    week.initialized = true;\r\n    week.totalTokensCompleted = 0;\r\n    week.totalPeopleCompleted = 0;\r\n    week.totalTokens = 0;\r\n    week.totalPeople = 0;\r\n    week.totalDaysCommitted = 0;\r\n    week.totalDaysCompleted = 0;\r\n  }\r\n\r\n  // Get the current day (from contract creation)\r\n  function currentDay() public view returns (uint day) {\r\n    return (block.timestamp - startDate) / secondsPerDay;\r\n  }\r\n\r\n  // Get the current week (from contract creation)\r\n  function currentWeek() public view returns (uint week) {\r\n    return currentDay() / daysPerWeek;\r\n  }\r\n\r\n  // Get current relative day of week (0-6)\r\n  function currentDayOfWeek() public view returns (uint dayIndex) {\r\n    // Uses the floor to calculate offset\r\n    return currentDay() - (currentWeek() * daysPerWeek);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentWeek\",\"outputs\":[{\"name\":\"week\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"string\"}],\"name\":\"storeImageString\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"commitToWeek\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDay\",\"outputs\":[{\"name\":\"day\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitments\",\"outputs\":[{\"name\":\"daysCompleted\",\"type\":\"uint256\"},{\"name\":\"daysCommitted\",\"type\":\"uint256\"},{\"name\":\"tokensCommitted\",\"type\":\"uint256\"},{\"name\":\"tokensEarned\",\"type\":\"uint256\"},{\"name\":\"tokensPaid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_week\",\"type\":\"uint256\"}],\"name\":\"initializeWeekData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"proofHash\",\"type\":\"string\"}],\"name\":\"postProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dataPerWeek\",\"outputs\":[{\"name\":\"initialized\",\"type\":\"bool\"},{\"name\":\"totalPeopleCompleted\",\"type\":\"uint256\"},{\"name\":\"totalPeople\",\"type\":\"uint256\"},{\"name\":\"totalDaysCommitted\",\"type\":\"uint256\"},{\"name\":\"totalDaysCompleted\",\"type\":\"uint256\"},{\"name\":\"totalTokensCompleted\",\"type\":\"uint256\"},{\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiPerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDayOfWeek\",\"outputs\":[{\"name\":\"dayIndex\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WorkIt","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8d7a24d805d82b8b8ddacf3382b67dc862d7c7b946eb74e0130fcee68c9d6f24"}]}