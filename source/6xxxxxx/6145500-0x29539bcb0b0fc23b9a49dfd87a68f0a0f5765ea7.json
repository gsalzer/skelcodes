{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract IERC20Token {\r\n    function totalSupply() public constant returns (uint256 totalSupply);\r\n    function balanceOf(address _owner) public  constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n    // NOT IERC20 Token\r\n    function hasSDC(address _address,uint256 _quantity) public returns (bool success);\r\n    function hasSDCC(address _address,uint256 _quantity) public returns (bool success);\r\n    function eliminateSDCC(address _address,uint256 _quantity) public returns (bool success);\r\n    function createSDCC(address _address,uint256 _quantity) public returns (bool success); \r\n    function createSDC(address _address,uint256 _init_quantity, uint256 _quantity) public returns (bool success);\r\n    function stakeSDC(address _address, uint256 amount)  public returns(bool);\r\n    function endStake(address _address, uint256 amount)  public returns(bool);\r\n\r\n    function chipBalanceOf(address _address) public returns (uint256 _amount);\r\n    function transferChips(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Owned {\r\n    \r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract Lockable is Owned{\r\n\r\n\tuint256 public lockedUntilBlock;\r\n\r\n\tevent ContractLocked(uint256 _untilBlock, string _reason);\r\n\r\n\tmodifier lockAffected {\r\n\t\trequire(block.number > lockedUntilBlock);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction lockFromSelf(uint256 _untilBlock, string _reason) internal {\r\n\t\tlockedUntilBlock = _untilBlock;\r\n\t\tContractLocked(_untilBlock, _reason);\r\n\t}\r\n\r\n\r\n\tfunction lockUntil(uint256 _untilBlock, string _reason) onlyOwner {\r\n\t\tlockedUntilBlock = _untilBlock;\r\n\t\tContractLocked(_untilBlock, _reason);\r\n\t}\r\n}\r\n\r\ncontract Token is IERC20Token, Lockable {\r\n\r\n\tusing SafeMath for uint256;\r\n\r\n\t/* Public variables of the token */\r\n\tstring public standard;\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals;\r\n\tuint256 public supply;\r\n\r\n\taddress public crowdsaleContractAddress;\r\n\r\n\t/* Private variables of the token */\r\n\tmapping (address => uint256) balances;\r\n\tmapping (address => mapping (address => uint256)) allowances;\r\n\r\n\t/* Events */\r\n\tevent Mint(address indexed _to, uint256 _value);\r\n\r\n\tfunction Token(){\r\n\r\n\t}\r\n\t/* Returns total supply of issued tokens */\r\n\tfunction totalSupply() constant returns (uint256) {\r\n\t\treturn supply;\r\n\t}\r\n\r\n\t/* Returns balance of address */\r\n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n\r\n\t/* Transfers tokens from your address to other */\r\n\tfunction transfer(address _to, uint256 _value) lockAffected returns (bool success) {\r\n\t\trequire(_to != 0x0 && _to != address(this));\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value); // Deduct senders balance\r\n\t\tbalances[_to] = balances[_to].add(_value);               // Add recivers blaance\r\n\t\tTransfer(msg.sender, _to, _value);                       // Raise Transfer event\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/* Approve other address to spend tokens on your account */\r\n\tfunction approve(address _spender, uint256 _value) lockAffected returns (bool success) {\r\n\t\tallowances[msg.sender][_spender] = _value;        // Set allowance\r\n\t\tApproval(msg.sender, _spender, _value);           // Raise Approval event\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/* A contract attempts to get the coins */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value)  returns (bool success) {\r\n\t\trequire(_to != 0x0 && _to != address(this));\r\n\t\tbalances[_from] = balances[_from].sub(_value);                              // Deduct senders balance\r\n\t\tbalances[_to] = balances[_to].add(_value);                                  // Add recipient blaance\r\n\t\tallowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);  // Deduct allowance for this address\r\n\t\tTransfer(_from, _to, _value);                                               // Raise Transfer event\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n\t\treturn allowances[_owner][_spender];\r\n\t}\r\n\r\n\tfunction mintTokens(address _to, uint256 _amount) {\r\n\t\trequire(msg.sender == crowdsaleContractAddress);\r\n\t\tsupply = supply.add(_amount);\r\n\t\tbalances[_to] = balances[_to].add(_amount);\r\n\t\tMint(_to, _amount);\r\n\t\tTransfer(0x0, _to, _amount);\r\n\t}\r\n\r\n\tfunction salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner {\r\n\t\tIERC20Token(_tokenAddress).transfer(_to, _amount);\r\n\t}\r\n}\r\n\r\n\r\n//----------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and an\r\n// initial fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract SoundcoinsToken is Token {\r\n\r\n    address _teamAddress; // Account 3\r\n    address _saleAddress;\r\n\r\n    uint256 availableSupply = 250000000;\r\n    uint256 minableSupply = 750000000;\r\n\r\n    address public SoundcoinsAddress;\r\n    /* Balances for ships */\r\n    uint256 public total_SDCC_supply = 0;\r\n    mapping (address => uint256) balances_chips;\r\n    mapping (address => uint256) holdings_SDC;\r\n    uint256 holdingsSupply = 0;\r\n\r\n\r\n    modifier onlyAuthorized {\r\n        require(msg.sender == SoundcoinsAddress);\r\n        _;\r\n    }\r\n    /* Initializes contract */\r\n    function SoundcoinsToken(address _crowdsaleContract) public {\r\n        standard = \"Soundcoins Token  V1.0\";\r\n        name = \"Soundcoins\";\r\n        symbol = \"SDC\";\r\n        decimals = 0;\r\n        supply = 1000000000;\r\n        _teamAddress = msg.sender;\r\n        balances[msg.sender] = 100000000;\r\n        _saleAddress = _crowdsaleContract;\r\n        balances[_crowdsaleContract] = 150000000;\r\n    }\r\n\r\n    /********* */\r\n    /* TOOLS  */\r\n    /********* */\r\n\r\n\r\n    function getAvailableSupply() public returns (uint256){\r\n        return availableSupply;\r\n    }\r\n\r\n    function getMinableSupply() public returns (uint256){\r\n        return minableSupply;\r\n    }\r\n\r\n    function getHoldingsSupply() public returns (uint256){\r\n        return holdingsSupply;\r\n    }\r\n\r\n    function getSDCCSupply() public returns (uint256){\r\n        return total_SDCC_supply;\r\n    }\r\n\r\n    function getSoundcoinsAddress() public returns (address){\r\n        return SoundcoinsAddress;\r\n    }\r\n    // See if Address has Enough SDC\r\n    function hasSDC(address _address,uint256 _quantity) public returns (bool success){\r\n        return (balances[_address] >= _quantity);\r\n    }\r\n\r\n    // See if Address has Enough SDC\r\n    function hasSDCC(address _address, uint256 _quantity) public returns (bool success){\r\n        return (chipBalanceOf(_address) >= _quantity);\r\n    }\r\n   /*SDC*/\r\n\r\n    function createSDC(address _address, uint256 _init_quantity, uint256 _quantity) onlyAuthorized public returns (bool success){\r\n        require(minableSupply >= 0);\r\n        balances[_address] = balances[_address].add(_quantity);\r\n        availableSupply = availableSupply.add(_quantity);\r\n        holdings_SDC[_address] = holdings_SDC[_address].sub(_init_quantity);\r\n        minableSupply = minableSupply.sub(_quantity.sub(_init_quantity));\r\n        holdingsSupply = holdingsSupply.sub(_init_quantity);\r\n        return true;\r\n    }\r\n\r\n    function eliminateSDCC(address _address, uint256 _quantity) onlyAuthorized public returns (bool success){\r\n        balances_chips[_address] = balances_chips[_address].sub(_quantity);\r\n        total_SDCC_supply = total_SDCC_supply.sub(_quantity);\r\n        return true;\r\n    }\r\n\r\n    function createSDCC(address _address, uint256 _quantity) onlyAuthorized public returns (bool success){\r\n        balances_chips[_address] = balances_chips[_address].add(_quantity);\r\n        total_SDCC_supply = total_SDCC_supply.add(_quantity);\r\n        return true;\r\n    }\r\n    \r\n    function chipBalanceOf(address _address) public returns (uint256 _amount) {\r\n        return balances_chips[_address];\r\n    }\r\n\r\n    function transferChips(address _from, address _to, uint256 _value) onlyAuthorized public returns (bool success) {\r\n        require(_to != 0x0 && _to != address(msg.sender));\r\n        balances_chips[_from] = balances_chips[_from].sub(_value); // Deduct senders balance\r\n        balances_chips[_to] = balances_chips[_to].add(_value);               // Add recivers blaance\r\n        return true;\r\n    }\r\n\r\n    function changeSoundcoinsContract(address _newAddress) public onlyOwner {\r\n        SoundcoinsAddress = _newAddress;\r\n    }\r\n\r\n    function stakeSDC(address _address, uint256 amount) onlyAuthorized public returns(bool){\r\n        balances[_address] = balances[_address].sub(amount);\r\n        availableSupply = availableSupply.sub(amount);\r\n        holdings_SDC[_address] = holdings_SDC[_address].add(amount);\r\n        holdingsSupply = holdingsSupply.add(amount);\r\n        return true;\r\n    }\r\n\r\n    function endStake(address _address, uint256 amount) onlyAuthorized public returns(bool){\r\n        balances[_address] = balances[_address].add(amount);\r\n        availableSupply = availableSupply.add(amount);\r\n        holdings_SDC[_address] = holdings_SDC[_address].sub(amount);\r\n        holdingsSupply = holdingsSupply.sub(amount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SoundcoinsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"eliminateSDCC\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_init_quantity\",\"type\":\"uint256\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"createSDC\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getMinableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"chipBalanceOf\",\"outputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total_SDCC_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getHoldingsSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeSDC\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeSoundcoinsContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"endStake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferChips\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getSoundcoinsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvageTokensFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_untilBlock\",\"type\":\"uint256\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"lockUntil\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getAvailableSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockedUntilBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"hasSDCC\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"createSDCC\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getSDCCSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"hasSDC\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdsaleContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_untilBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"ContractLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SoundcoinsToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c066af946e18c0d6bed371a991a35a5524126340","Library":"","SwarmSource":"bzzr://0d6a29d79a8b29e6dab492aa4539d81a42bfdb3eaaaa545243801a3adb384359"}]}