{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface ERC20 {\r\n\t\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\t\r\n\tfunction name() external view returns (string);\r\n\tfunction symbol() external view returns (string);\r\n\tfunction decimals() external view returns (uint8);\r\n\t\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address _owner) external view returns (uint256 balance);\r\n\tfunction transfer(address _to, uint256 _value) external payable returns (bool success);\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) external payable returns (bool success);\r\n\tfunction approve(address _spender, uint256 _value) external payable returns (bool success);\r\n\tfunction allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n}\r\n\r\ninterface ERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n// 숫자 계산 시 오버플로우 문제를 방지하기 위한 라이브러리\r\nlibrary SafeMath {\r\n\t\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) pure internal returns (uint256 c) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\t\r\n\tfunction mul(uint256 a, uint256 b) pure internal returns (uint256 c) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tc = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) pure internal returns (uint256 c) {\r\n\t\treturn a / b;\r\n\t}\r\n}\r\n\r\ncontract RankCoin is ERC20, ERC165 {\r\n\tusing SafeMath for uint256;\r\n\t\r\n\tevent ChangeName(address indexed user, string name);\r\n\tevent ChangeMessage(address indexed user, string message);\r\n\t\r\n\t// 토큰 정보\r\n\tstring constant public NAME = \"RankCoin\";\r\n\tstring constant public SYMBOL = \"RC\";\r\n\tuint8 constant public DECIMALS = 18;\r\n\tuint256 constant public TOTAL_SUPPLY = 100000000000 * (10 ** uint256(DECIMALS));\r\n\t\r\n\taddress public author;\r\n\t\r\n\tmapping(address => uint256) public balances;\r\n\tmapping(address => mapping(address => uint256)) public allowed;\r\n\t\r\n\t// 사용자들 주소\r\n\taddress[] public users;\r\n\tmapping(address => string) public names;\r\n\tmapping(address => string) public messages;\r\n\t\r\n\tfunction getUserCount() view public returns (uint256) {\r\n\t\treturn users.length;\r\n\t}\r\n\t\r\n\t// 유저가 이미 존재하는지\r\n\tmapping(address => bool) internal userToIsExisted;\r\n\t\r\n\tconstructor() public {\r\n\t\t\r\n\t\tauthor = msg.sender;\r\n\t\t\r\n\t\tbalances[author] = TOTAL_SUPPLY;\r\n\t\t\r\n\t\temit Transfer(0x0, author, TOTAL_SUPPLY);\r\n\t}\r\n\t\r\n\t// 주소를 잘못 사용하는 것인지 체크\r\n\tfunction checkAddressMisused(address target) internal view returns (bool) {\r\n\t\treturn\r\n\t\t\ttarget == address(0) ||\r\n\t\t\ttarget == address(this);\r\n\t}\r\n\t\r\n\t//ERC20: 토큰의 이름 반환\r\n\tfunction name() external view returns (string) {\r\n\t\treturn NAME;\r\n\t}\r\n\t\r\n\t//ERC20: 토큰의 심볼 반환\r\n\tfunction symbol() external view returns (string) {\r\n\t\treturn SYMBOL;\r\n\t}\r\n\t\r\n\t//ERC20: 토큰의 소수점 반환\r\n\tfunction decimals() external view returns (uint8) {\r\n\t\treturn DECIMALS;\r\n\t}\r\n\t\r\n\t//ERC20: 전체 토큰 수 반환\r\n\tfunction totalSupply() external view returns (uint256) {\r\n\t\treturn TOTAL_SUPPLY;\r\n\t}\r\n\t\r\n\t//ERC20: 특정 유저의 토큰 수를 반환합니다.\r\n\tfunction balanceOf(address user) external view returns (uint256 balance) {\r\n\t\treturn balances[user];\r\n\t}\r\n\t\r\n\t//ERC20: 특정 유저에게 토큰을 전송합니다.\r\n\tfunction transfer(address to, uint256 amount) external payable returns (bool success) {\r\n\t\t\r\n\t\t// 주소 오용 차단\r\n\t\trequire(checkAddressMisused(to) != true);\r\n\t\t\r\n\t\trequire(amount <= balances[msg.sender]);\r\n\t\t\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(amount);\r\n\t\tbalances[to] = balances[to].add(amount);\r\n\t\t\r\n\t\t// 유저 주소 등록\r\n\t\tif (to != author && userToIsExisted[to] != true) {\r\n\t\t\tusers.push(to);\r\n\t\t\tuserToIsExisted[to] = true;\r\n\t\t}\r\n\t\t\r\n\t\temit Transfer(msg.sender, to, amount);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t//ERC20: spender에 amount만큼의 토큰을 보낼 권리를 부여합니다.\r\n\tfunction approve(address spender, uint256 amount) external payable returns (bool success) {\r\n\t\t\r\n\t\tallowed[msg.sender][spender] = amount;\r\n\t\t\r\n\t\temit Approval(msg.sender, spender, amount);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t//ERC20: spender에 인출을 허락한 토큰의 양을 반환합니다.\r\n\tfunction allowance(address user, address spender) external view returns (uint256 remaining) {\r\n\t\treturn allowed[user][spender];\r\n\t}\r\n\t\r\n\t//ERC20: 허락된 spender가 from으로부터 amount만큼의 토큰을 to에게 전송합니다.\r\n\tfunction transferFrom(address from, address to, uint256 amount) external payable returns (bool success) {\r\n\t\t\r\n\t\t// 주소 오용 차단\r\n\t\trequire(checkAddressMisused(to) != true);\r\n\t\t\r\n\t\trequire(amount <= balances[from]);\r\n\t\trequire(amount <= allowed[from][msg.sender]);\r\n\t\t\r\n\t\tbalances[from] = balances[from].sub(amount);\r\n\t\tbalances[to] = balances[to].add(amount);\r\n\t\t\r\n\t\t// 유저 주소 등록\r\n\t\tif (to != author && userToIsExisted[to] != true) {\r\n\t\t\tusers.push(to);\r\n\t\t\tuserToIsExisted[to] = true;\r\n\t\t}\r\n\t\t\r\n\t\tallowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\r\n\t\t\r\n\t\temit Transfer(from, to, amount);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t// 토큰을 많이 가진 순서대로 유저 목록을 가져옵니다.\r\n\tfunction getUsersByBalance() view public returns (address[]) {\r\n\t\taddress[] memory _users = new address[](users.length);\r\n\t\t\r\n\t\tfor (uint256 i = 0; i < users.length; i += 1) {\r\n\t\t\t\r\n\t\t\tuint256 balance = balances[users[i]];\r\n\t\t\t\r\n\t\t\tfor (uint256 j = i; j > 0; j -= 1) {\r\n\t\t\t\tif (balances[_users[j - 1]] < balance) {\r\n\t\t\t\t\t_users[j] = _users[j - 1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t_users[j] = users[i];\r\n\t\t}\r\n\t\t\r\n\t\treturn _users;\r\n\t}\r\n\t\r\n\t// 특정 유저의 랭킹을 가져옵니다.\r\n\tfunction getRank(address user) view public returns (uint256) {\r\n\t\t\r\n\t\tuint256 rank = 1;\r\n\t\tuint256 balance = balances[user];\r\n\t\t\r\n\t\tfor (uint256 i = 0; i < users.length; i += 1) {\r\n\t\t\tif (balances[users[i]] > balance) {\r\n\t\t\t\trank += 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn rank;\r\n\t}\r\n\t\r\n\t// 이름을 지정합니다.\r\n\tfunction setName(string _name) public {\r\n\t\t\r\n\t\tnames[msg.sender] = _name;\r\n\t\t\r\n\t\temit ChangeName(msg.sender, _name);\r\n\t}\r\n\t\r\n\t// 메시지를 지정합니다.\r\n\tfunction setMessage(string message) public {\r\n\t\t\r\n\t\tmessages[msg.sender] = message;\r\n\t\t\r\n\t\temit ChangeMessage(msg.sender, message);\r\n\t}\r\n\t\r\n\t//ERC165: 주어진 인터페이스가 구현되어 있는지 확인합니다.\r\n\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool) {\r\n\t\treturn\r\n\t\t\t// ERC165\r\n\t\t\tinterfaceID == this.supportsInterface.selector ||\r\n\t\t\t// ERC20\r\n\t\t\tinterfaceID == 0x942e8b22 ||\r\n\t\t\tinterfaceID == 0x36372b07;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"setMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRank\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"names\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"messages\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsersByBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"author\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ChangeName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ChangeMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"RankCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6c7a5524675ad0c18bd6460c9935d13df1c7afd4ab6a4d0facf8234a9e4acb01"}]}