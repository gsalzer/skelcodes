{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath {\r\n\tfunction mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tuint256 c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tassert(b > 0); \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Solidity automatically throws when dividing by 0\r\n\t\tuint256 c = a / b;\r\n\t\tassert(a == b * c + a % b); \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// There is no case in which this doesn't hold\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\n\t// ERC20 Token Smart Contract\r\n\tcontract MARA {\t\r\n\t\tstring  public constant name \t\t= \"MARA\";\r\n\t\tstring  public constant symbol \t\t= \"MARA\";\r\n\t\tuint8   public constant decimals\t= 0;\r\n\t\tuint    public _totalSupply \t\t= 100000000;\r\n\t\tuint256 public RATE \t\t\t\t= 1;\r\n\t\tbool    public isMinting \t\t\t= false;\r\n\t\tstring  public constant generatedBy\t= \"MARAChain Secure Exchange of Digital Documents - www.marachain.eu\";\r\n\t\t\r\n\t\tusing SafeMath for uint256;\r\n\t\taddress public owner;\r\n\t\t\r\n\t\t// Functions with this modifier can only be executed by the owner\r\n\t\tmodifier onlyOwner() {\r\n\t\t\tif (msg.sender != owner) {\r\n\t\t\t\tthrow;\r\n\t\t\t}\r\n\t\t\t_;\r\n\t\t}\r\n\t\t\r\n\t\tmapping(address => uint256) balances;\t\t\t\t\t\t\t\t\t\t\t\t\t// Balances for each account\r\n\t\tmapping(address => mapping(address=>uint256)) allowed;\t\t\t\t\t\t\t\t\t// Owner of account approves the transfer of an amount to another account\r\n\r\n\t\tfunction () payable{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Its a payable function works as a token factory\r\n\t\t\tcreateTokens();\r\n\t\t}\r\n\r\n\t\t// Constructor\r\n\t\tconstructor() public {\r\n\t\t\towner = 0x65e1A84eFA8f217DA90fDe7a60fA02fDc0cd5b8C; \r\n\t\t\tbalances[owner] = _totalSupply;\r\n\t\t}\r\n\r\n\t\t//allows owner to burn tokens that are not sold in a crowdsale\r\n\t\tfunction burnTokens(uint256 _value) onlyOwner {\r\n\t\t\trequire(balances[msg.sender] >= _value && _value > 0 );\r\n\t\t\t_totalSupply = _totalSupply.sub(_value);\r\n\t\t\tbalances[msg.sender] = balances[msg.sender].sub(_value); \r\n\t\t}\r\n\r\n\t\t// This function creates Tokens  \r\n\t\tfunction createTokens() payable {\r\n\t\t\tif(isMinting == true){\r\n\t\t\t\trequire(msg.value > 0);\r\n\t\t\t\tuint256  tokens = msg.value.div(100000000000000).mul(RATE);\r\n\t\t\t\tbalances[msg.sender] = balances[msg.sender].add(tokens);\r\n\t\t\t\t_totalSupply = _totalSupply.add(tokens);\r\n\t\t\t\towner.transfer(msg.value);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction endCrowdsale() onlyOwner {\r\n\t\t\tisMinting = false;\r\n\t\t}\r\n\r\n\t\tfunction changeCrowdsaleRate(uint256 _value) onlyOwner {\r\n\t\t\tRATE = _value;\r\n\t\t}\r\n\t\t\r\n\t\tfunction totalSupply() constant returns(uint256){\r\n\t\t\treturn _totalSupply;\r\n\t\t}\r\n\t\t\r\n\t\tfunction balanceOf(address _owner) constant returns(uint256){\t\t\t\t\t\t\t// What is the balance of a particular account?\r\n\t\t\treturn balances[_owner];\r\n\t\t}\r\n   \r\n\t\tfunction transfer(address _to, uint256 _value)  returns(bool) {\t\t\t\t\t\t\t// Transfer the balance from owner's account to another account\r\n\t\t\trequire(balances[msg.sender] >= _value && _value > 0 );\r\n\t\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\t\tTransfer(msg.sender, _to, _value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t// Send _value amount of tokens from address _from to address _to\r\n\t// The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n\t// tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n\t// fees in sub-currencies; the command should fail unless the _from account has\r\n\t// deliberately authorized the sender of the message via some mechanism; we propose\r\n\t// these standardized APIs for approval:\r\n\tfunction transferFrom(address _from, address _to, uint256 _value)  returns(bool) {\r\n\t\trequire(allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n\t// If this function is called again it overwrites the current allowance with _value.\r\n\tfunction approve(address _spender, uint256 _value) returns(bool){\r\n\t\tallowed[msg.sender][_spender] = _value; \r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t// Returns the amount which _spender is still allowed to withdraw from _owner\r\n\tfunction allowance(address _owner, address _spender) constant returns(uint256){\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n\t\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"generatedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeCrowdsaleRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MARA","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1677a5580bf5fdd2a466bde7b79de66185589e69255afc564f3b808894cab9ab"}]}