{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.19;\r\n/*\r\n---------------------------------------------------\r\nLet’s play. If you win, we’ll give you the answer.\r\n---------------------------------------------------\r\n       /¯¯\\\r\n   /¯¯¯ \\\\\\\\_\r\n  ///&&&   \\\\\\\r\n/&&//&&&// ///__\r\n\\&&&&///&&// // \\\r\n \\//&&//&&&&   //\r\n  ¯¯¯¯¯¯¯¯¯¯¯¯¯\r\n\r\n _______\r\n|      |\\\r\n|      |_\\\r\n| ~~~~~~~ |\r\n| ~~~~~~~ |\r\n| ~~~~~~~ |\r\n|_________|\r\n\r\n\r\n#,         ,#\r\n ##       ##\r\n  ###, ,###\r\n   '#####'\r\n/##### #####/\r\n#   #   #   #\r\n ###     ###\r\n\r\n ---------------------------------------------------\r\n https://www.casheth.org/\r\n ---------------------------------------------------\r\n \r\n */\r\ncontract Cdl {\r\n    using SafeXHD for uint;\r\n    uint public constant configTimeInit = 24 hours;\r\n    uint public constant configTimeInc = 30 seconds;\r\n    uint public constant configTimeMax = 24 hours;\r\n    uint public constant configRunTime = 24 hours;\r\n    uint public constant configPerShares = 75;\r\n    uint public constant configPerFund = 10;\r\n    uint public constant configRoundKey = 75000000000000;\r\n    uint public constant configRoundKeyAdd = 156230000;\r\n    uint public constant configMaxKeys = 10000000;\r\n    uint public runTime = 0;\r\n    uint public allEth = 0;\r\n    uint public allEthShares = 0;\r\n    uint public allTime = 0;\r\n    uint public allKeys = 0;\r\n    uint public roundEth = 0;\r\n    uint public roundEthShares = 0;\r\n    uint public roundTime = 0;\r\n    uint public roundKeys = 0;\r\n    uint public round = 0;\r\n    uint public roundPot = 0;\r\n    uint public roundPrice = 0;\r\n    uint private roundToSharesPrice=0;\r\n    address public roundLeader;\r\n    mapping(address => uint) public accountRounds;\r\n    mapping(address => uint) public accountShares;\r\n    mapping(address => uint) public accountSharesOut;\r\n    mapping(address => uint) public accountKeys;\r\n    address[] roundAddress;\r\n    address public owner;\r\n    uint public ownerEth = 0;\r\n    function doStart() public payable returns(uint) {\r\n        require(round == 0);\r\n        require(runTime <= 0);\r\n        require(\r\n            msg.sender == 0xbEBA30E7F05581fd7330A58743b0331BD7dd5508 ||\r\n            msg.sender == 0x479F9dFAdaF30Fba069d8a9f017D881C648B5ac0 ||\r\n            msg.sender == 0x7B034094a0D1F1545c5558F422E71EdA6f47313D ||\r\n            msg.sender == 0x9DDA48c596fc52642ace5A0ff470425e4d550095 ||\r\n            msg.sender == 0xE05ac79525bdB0Ec238Bd2982Fb63Ca2d7f778a0 ||\r\n            msg.sender == 0x57854E9293789854dF8fCfDd3AD845bf15e35BBc ||\r\n            msg.sender == 0x968F54Fd6edDEEcEBfE2B0CA45BfEe82D2629BfE);\r\n\r\n        runTime = now.add(configRunTime);\r\n        roundTime = runTime.add(configTimeInit);\r\n        owner = msg.sender; \r\n        roundPrice = configRoundKey;\r\n        round = round.add(1);\r\n        roundLeader = owner;\r\n        roundAddress = [owner];\r\n        return runTime;\r\n    }\r\n\r\n    function buyKey() public payable newRoundIfNeeded returns(uint) {\r\n      \r\n            require(msg.value > 0);\r\n            uint _msgValue = msg.value;\r\n            uint _amountToShares = _msgValue.div(100).mul(configPerShares); \r\n            uint _amountToFund = _msgValue.div(100).mul(configPerFund); \r\n            uint _amountToPot = _msgValue.sub(_amountToShares).sub(_amountToFund);\r\n             uint _keys = _msgValue.div(roundPrice);\r\n            require(configMaxKeys >= _keys); \r\n\t\t\townerEth=ownerEth.add(_amountToFund);\r\n            fundoShares(_amountToShares); \r\n            roundEth = roundEth.add(_msgValue);\r\n            roundEthShares = roundEthShares.add(_amountToShares);\r\n            roundKeys = roundKeys.add(_keys);\r\n            roundPot = roundPot.add(_amountToPot);\r\n            allEth = allEth.add(_msgValue);\r\n            allEthShares = allEthShares.add(_amountToShares);\r\n            allKeys = allKeys.add(_keys);\r\n            funComputeRoundPrice();\r\n            funComputeRoundTime(_keys); \r\n            roundLeader = msg.sender;\r\n\r\n            if (accountKeys[msg.sender] <= 0 || accountRounds[msg.sender] != round) roundAddress.push(msg.sender);\r\n            if (accountRounds[msg.sender] == round) {\r\n                accountKeys[msg.sender] = accountKeys[msg.sender].add(_keys);\r\n            } else {\r\n                accountRounds[msg.sender] = round;\r\n                accountKeys[msg.sender] = _keys;\r\n            }\r\n             \r\n            return _keys;\r\n           \r\n        }\r\n\r\n    function withdrawl() public payable newRoundIfNeeded returns(uint) {\r\n        require(accountShares[msg.sender] > 0);\r\n        uint _withdraw = accountShares[msg.sender].sub(accountSharesOut[msg.sender]);\r\n        require(_withdraw > 0);\r\n        accountSharesOut[msg.sender] = accountSharesOut[msg.sender].add(_withdraw);\r\n        msg.sender.transfer(_withdraw);\r\n        return _withdraw;\r\n    }\r\n\r\n    function withdrawlOwner() public payable returns(uint) {\r\n\t\trequire(\r\n            msg.sender == 0xbEBA30E7F05581fd7330A58743b0331BD7dd5508 ||\r\n            msg.sender == 0x479F9dFAdaF30Fba069d8a9f017D881C648B5ac0 ||\r\n            msg.sender == 0x7B034094a0D1F1545c5558F422E71EdA6f47313D ||\r\n            msg.sender == 0x9DDA48c596fc52642ace5A0ff470425e4d550095 ||\r\n            msg.sender == 0xE05ac79525bdB0Ec238Bd2982Fb63Ca2d7f778a0 ||\r\n            msg.sender == 0x57854E9293789854dF8fCfDd3AD845bf15e35BBc ||\r\n            msg.sender == 0x968F54Fd6edDEEcEBfE2B0CA45BfEe82D2629BfE\r\n        );\r\n        require(ownerEth> 0);\r\n        msg.sender.transfer(ownerEth);\r\n\t\townerEth=0;\r\n        return ownerEth;\r\n    }\r\n\r\n    modifier newRoundIfNeeded {\r\n        require(runTime > 0);\r\n        require(now > runTime);\r\n        require(round > 0);\r\n      \r\n        if (now > roundTime) {\r\n            uint _nextPot = 0;\r\n            uint _leaderEarnings = roundPot.sub(_nextPot);\r\n            accountShares[roundLeader] = accountShares[roundLeader].add(_leaderEarnings);\r\n            round++;\r\n            roundPot = _nextPot;\r\n            roundLeader = owner;\r\n            roundTime = now.add(configTimeInit);\r\n            roundEth = roundPot;\r\n            roundEthShares = 0;\r\n            roundKeys = 0;\r\n            funComputeRoundPrice(); \r\n            allEth = allEth.add(roundEth);\r\n            allEthShares = allEthShares.add(roundEthShares);\r\n            roundAddress = [owner];\r\n        }\r\n       \r\n        _;\r\n    }\r\n\r\n\r\n    function funComputeRoundTime(uint keys) private {\r\n        uint _now = now;\r\n        if (_now >= roundTime)\r\n            roundTime = (configTimeInc.mul(keys)).add(_now);\r\n        else\r\n            roundTime = (configTimeInc.mul(keys)).add(roundTime);\r\n\r\n        if (roundTime >= (configTimeMax).add(_now))\r\n            roundTime = (configTimeMax).add(_now);\r\n        allTime = allTime.add(configTimeInc.mul(keys));\r\n    }\r\n\r\n    function funComputeRoundPrice() private {\r\n            if (roundKeys > 0) roundPrice = configRoundKey.add(roundKeys.mul(configRoundKeyAdd));\r\n            if (roundKeys <= 0 || roundPrice <= configRoundKey) roundPrice = configRoundKey;\r\n        }\r\n\r\n    function fundoShares(uint _amountToShares) private {\r\n        roundToSharesPrice=0;\r\n        require(_amountToShares > roundKeys);\r\n         roundToSharesPrice = _amountToShares.div(roundKeys);\r\n        for (uint i = 0; i < roundAddress.length; i++) {\r\n            address _address = roundAddress[i];\r\n            if (accountRounds[_address] == round && _address != owner) {\r\n                 accountShares[_address] = accountShares[_address].add(roundToSharesPrice.mul(accountKeys[_address]));\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nlibrary SafeXHD {\r\n   \r\n    function div(uint a, uint b) internal pure returns(uint) {\r\n            if (b == 0) {\r\n                return 0;\r\n            }\r\n            uint c = a / b;\r\n            // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n            return c;\r\n        }\r\n     \r\n    function mul(uint a, uint b) internal pure returns(uint) {\r\n            if (a == 0) {\r\n                return 0;\r\n            }\r\n            uint c = a * b;\r\n            assert(c / a == b);\r\n            return c;\r\n        }\r\n      \r\n    function sub(uint a, uint b) internal pure returns(uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns(uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configTimeMax\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configRunTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allEthShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawl\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configMaxKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configTimeInc\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configRoundKey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawlOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountRounds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configTimeInit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountSharesOut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configRoundKeyAdd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configPerFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundEthShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyKey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configPerShares\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"runTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Cdl","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e8e254cd99a85257ac304888410873cbff9a7d8fa399b117ad7c5344298e7e46"}]}