{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// DragonKingConfig v2.0 2e59d4\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/DragonKingConfig.sol\r\n\r\n/**\r\n * DragonKing game configuration contract\r\n**/\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\ncontract DragonKingConfig is Ownable {\r\n\r\n  struct PurchaseRequirement {\r\n    address[] tokens;\r\n    uint256[] amounts;\r\n  }\r\n\r\n  /**\r\n   * creates Configuration for the DragonKing game\r\n   * tokens array should be in the following order:\r\n      0    1    2    3     4    5    6    7     8\r\n     [tpt, ndc, skl, xper, mag, stg, dex, luck, gift]\r\n  */\r\n  constructor(uint8 characterFee, uint8 eruptionThresholdInHours, uint8 percentageOfCharactersToKill, uint128[] charactersCosts, address[] tokens) public {\r\n    fee = characterFee;\r\n    for (uint8 i = 0; i < charactersCosts.length; i++) {\r\n      costs.push(uint128(charactersCosts[i]) * 1 finney);\r\n      values.push(costs[i] - costs[i] / 100 * fee);\r\n    }\r\n    eruptionThreshold = uint256(eruptionThresholdInHours) * 60 * 60; // convert to seconds\r\n    castleLootDistributionThreshold = 1 days; // once per day\r\n    percentageToKill = percentageOfCharactersToKill;\r\n    maxCharacters = 600;\r\n    teleportPrice = 1000000000000000000;\r\n    protectionPrice = 1000000000000000000;\r\n    luckThreshold = 4200;\r\n    fightFactor = 4;\r\n    giftTokenAmount = 1000000000000000000;\r\n    giftToken = ERC20(tokens[8]);\r\n    // purchase requirements\r\n    // knights\r\n    purchaseRequirements[7].tokens = [tokens[5]]; // 5 STG\r\n    purchaseRequirements[7].amounts = [250];\r\n    purchaseRequirements[8].tokens = [tokens[5]]; // 5 STG\r\n    purchaseRequirements[8].amounts = [5*(10**2)];\r\n    purchaseRequirements[9].tokens = [tokens[5]]; // 10 STG\r\n    purchaseRequirements[9].amounts = [10*(10**2)];\r\n    purchaseRequirements[10].tokens = [tokens[5]]; // 20 STG\r\n    purchaseRequirements[10].amounts = [20*(10**2)];\r\n    purchaseRequirements[11].tokens = [tokens[5]]; // 50 STG\r\n    purchaseRequirements[11].amounts = [50*(10**2)];\r\n    // wizards\r\n    purchaseRequirements[15].tokens = [tokens[2], tokens[3]]; // 5 SKL % 10 XPER\r\n    purchaseRequirements[15].amounts = [25*(10**17), 5*(10**2)];\r\n    purchaseRequirements[16].tokens = [tokens[2], tokens[3], tokens[4]]; // 5 SKL & 10 XPER & 2.5 MAG\r\n    purchaseRequirements[16].amounts = [5*(10**18), 10*(10**2), 250];\r\n    purchaseRequirements[17].tokens = [tokens[2], tokens[3], tokens[4]]; // 10 SKL & 20 XPER & 5 MAG\r\n    purchaseRequirements[17].amounts = [10*(10**18), 20*(10**2), 5*(10**2)];\r\n    purchaseRequirements[18].tokens = [tokens[2], tokens[3], tokens[4]]; // 25 SKL & 50 XP & 10 MAG\r\n    purchaseRequirements[18].amounts = [25*(10**18), 50*(10**2), 10*(10**2)];\r\n    purchaseRequirements[19].tokens = [tokens[2], tokens[3], tokens[4]]; // 50 SKL & 100 XP & 20 MAG\r\n    purchaseRequirements[19].amounts = [50*(10**18), 100*(10**2), 20*(10**2)]; \r\n    purchaseRequirements[20].tokens = [tokens[2], tokens[3], tokens[4]]; // 100 SKL & 200 XP & 50 MAG \r\n    purchaseRequirements[20].amounts = [100*(10**18), 200*(10**2), 50*(10**2)];\r\n    // archers\r\n    purchaseRequirements[21].tokens = [tokens[2], tokens[3]]; // 2.5 SKL & 5 XPER\r\n    purchaseRequirements[21].amounts = [25*(10**17), 5*(10**2)];\r\n    purchaseRequirements[22].tokens = [tokens[2], tokens[3], tokens[6]]; // 5 SKL & 10 XPER & 2.5 DEX\r\n    purchaseRequirements[22].amounts = [5*(10**18), 10*(10**2), 250];\r\n    purchaseRequirements[23].tokens = [tokens[2], tokens[3], tokens[6]]; // 10 SKL & 20 XPER & 5 DEX\r\n    purchaseRequirements[23].amounts = [10*(10**18), 20*(10**2), 5*(10**2)];\r\n    purchaseRequirements[24].tokens = [tokens[2], tokens[3], tokens[6]]; // 25 SKL & 50 XP & 10 DEX\r\n    purchaseRequirements[24].amounts = [25*(10**18), 50*(10**2), 10*(10**2)];\r\n    purchaseRequirements[25].tokens = [tokens[2], tokens[3], tokens[6]]; // 50 SKL & 100 XP & 20 DEX\r\n    purchaseRequirements[25].amounts = [50*(10**18), 100*(10**2), 20*(10**2)]; \r\n    purchaseRequirements[26].tokens = [tokens[2], tokens[3], tokens[6]]; // 100 SKL & 200 XP & 50 DEX \r\n    purchaseRequirements[26].amounts = [100*(10**18), 200*(10**2), 50*(10**2)];\r\n  }\r\n\r\n  /** the Gift token contract **/\r\n  ERC20 public giftToken;\r\n  /** amount of gift tokens to send **/\r\n  uint256 public giftTokenAmount;\r\n  /** purchase requirements for each type of character **/\r\n  PurchaseRequirement[30] purchaseRequirements; \r\n  /** the cost of each character type */\r\n  uint128[] public costs;\r\n  /** the value of each character type (cost - fee), so it's not necessary to compute it each time*/\r\n  uint128[] public values;\r\n  /** the fee to be paid each time an character is bought in percent*/\r\n  uint8 fee;\r\n  /** The maximum of characters allowed in the game */\r\n  uint16 public maxCharacters;\r\n  /** the amount of time that should pass since last eruption **/\r\n  uint256 public eruptionThreshold;\r\n  /** the amount of time that should pass ince last castle loot distribution **/\r\n  uint256 public castleLootDistributionThreshold;\r\n  /** how many characters to kill in %, e.g. 20 will stand for 20%, should be < 100 **/\r\n  uint8 public percentageToKill;\r\n  /* Cooldown threshold */\r\n  uint256 public constant CooldownThreshold = 1 days;\r\n  /** fight factor, used to compute extra probability in fight **/\r\n  uint8 public fightFactor;\r\n\r\n  /** the price for teleportation*/\r\n  uint256 public teleportPrice;\r\n  /** the price for protection */\r\n  uint256 public protectionPrice;\r\n  /** the luck threshold */\r\n  uint256 public luckThreshold;\r\n\r\n  function hasEnoughTokensToPurchase(address buyer, uint8 characterType) external returns (bool canBuy) {\r\n    for (uint256 i = 0; i < purchaseRequirements[characterType].tokens.length; i++) {\r\n      if (ERC20(purchaseRequirements[characterType].tokens[i]).balanceOf(buyer) < purchaseRequirements[characterType].amounts[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n  function setPurchaseRequirements(uint8 characterType, address[] tokens, uint256[] amounts) external {\r\n    purchaseRequirements[characterType].tokens = tokens;\r\n    purchaseRequirements[characterType].amounts = amounts;\r\n  } \r\n\r\n  function getPurchaseRequirements(uint8 characterType) view external returns (address[] tokens, uint256[] amounts) {\r\n    tokens = purchaseRequirements[characterType].tokens;\r\n    amounts = purchaseRequirements[characterType].amounts;\r\n  }\r\n\r\n  /**\r\n   * sets the prices of the character types\r\n   * @param prices the prices in finney\r\n   * */\r\n  function setPrices(uint16[] prices) external onlyOwner {\r\n    for (uint8 i = 0; i < prices.length; i++) {\r\n      costs[i] = uint128(prices[i]) * 1 finney;\r\n      values[i] = costs[i] - costs[i] / 100 * fee;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * sets the eruption threshold\r\n   * @param _value the threshold in seconds, e.g. 24 hours = 25*60*60\r\n   * */\r\n  function setEruptionThreshold(uint256 _value) external onlyOwner {\r\n    eruptionThreshold = _value;\r\n  }\r\n\r\n  /**\r\n   * sets the castle loot distribution threshold\r\n   * @param _value the threshold in seconds, e.g. 24 hours = 25*60*60\r\n   * */\r\n  function setCastleLootDistributionThreshold(uint256 _value) external onlyOwner {\r\n    castleLootDistributionThreshold = _value;\r\n  }\r\n\r\n  /**\r\n   * sets the fee\r\n   * @param _value for the fee, e.g. 3% = 3\r\n   * */\r\n  function setFee(uint8 _value) external onlyOwner {\r\n    fee = _value;\r\n  }\r\n\r\n  /**\r\n   * sets the percentage of characters to kill on eruption\r\n   * @param _value the percentage, e.g. 10% = 10\r\n   * */\r\n  function setPercentageToKill(uint8 _value) external onlyOwner {\r\n    percentageToKill = _value;\r\n  }\r\n\r\n  /**\r\n   * sets the maximum amount of characters allowed to be present in the game\r\n   * @param _value characters limit, e.g 600\r\n   * */\r\n  function setMaxCharacters(uint16 _value) external onlyOwner {\r\n    maxCharacters = _value;\r\n  }\r\n\r\n  /**\r\n   * sets the fight factor\r\n   * @param _value fight factor, e.g 4\r\n   * */\r\n  function setFightFactor(uint8 _value) external onlyOwner {\r\n    fightFactor = _value;\r\n  }\r\n\r\n  /**\r\n   * sets the teleport price\r\n   * @param _value base amount of TPT to transfer on teleport, e.g 10e18\r\n   * */\r\n  function setTeleportPrice(uint256 _value) external onlyOwner {\r\n    teleportPrice = _value;\r\n  }\r\n\r\n  /**\r\n   * sets the protection price\r\n   * @param _value base amount of NDC to transfer on protection, e.g 10e18\r\n   * */\r\n  function setProtectionPrice(uint256 _value) external onlyOwner {\r\n    protectionPrice = _value;\r\n  }\r\n\r\n  /**\r\n   * sets the luck threshold\r\n   * @param _value the minimum amount of luck tokens required for the second roll\r\n   * */\r\n  function setLuckThreshold(uint256 _value) external onlyOwner {\r\n    luckThreshold = _value;\r\n  }\r\n\r\n  /**\r\n   * sets the amount of tokens to gift threshold\r\n   * @param _value new value of the amount to gift\r\n   * */\r\n  function setGiftTokenAmount(uint256 _value) {\r\n    giftTokenAmount = _value;\r\n  }\r\n\r\n  /**\r\n   * sets the gift token address\r\n   * @param _value new gift token address\r\n   * */\r\n  function setGiftToken(address _value) {\r\n    giftToken = ERC20(_value);\r\n  }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"percentageToKill\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setLuckThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"protectionPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"giftToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTeleportPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CooldownThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"costs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"characterType\",\"type\":\"uint8\"}],\"name\":\"hasEnoughTokensToPurchase\",\"outputs\":[{\"name\":\"canBuy\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fightFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setGiftToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setEruptionThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"giftTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"values\",\"outputs\":[{\"name\":\"\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teleportPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"characterType\",\"type\":\"uint8\"}],\"name\":\"getPurchaseRequirements\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setGiftTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"prices\",\"type\":\"uint16[]\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCharacters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luckThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setCastleLootDistributionThreshold\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"castleLootDistributionThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setProtectionPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eruptionThreshold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"setFightFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"characterType\",\"type\":\"uint8\"},{\"name\":\"tokens\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setPurchaseRequirements\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"setPercentageToKill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint16\"}],\"name\":\"setMaxCharacters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"characterFee\",\"type\":\"uint8\"},{\"name\":\"eruptionThresholdInHours\",\"type\":\"uint8\"},{\"name\":\"percentageOfCharactersToKill\",\"type\":\"uint8\"},{\"name\":\"charactersCosts\",\"type\":\"uint128[]\"},{\"name\":\"tokens\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DragonKingConfig","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000001b0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000009000000000000000000000000c596bd09d652827b0106292d3e378d5938df4b12000000000000000000000000a54ddc7b3cce7fc8b1e3fa0256d0db80d2c10970000000000000000000000000a7bd9d58d22d5e35ec4a08083141e0340ea2ca93000000000000000000000000d28525ad63f337c86843d720dae921228e44f0ac0000000000000000000000006da2b0b95659f89c2332953fa84bc97633eb73ae0000000000000000000000006efa7c3d995572b5fb1c4cee780f2b101ef635f5000000000000000000000000e7d9742fb323f0493de454478049b9619b1711a6000000000000000000000000ca1c217a2200b60dbd52e33c7cb1758db2b30a0e000000000000000000000000c596bd09d652827b0106292d3e378d5938df4b12","Library":"","SwarmSource":"bzzr://eb41f6e806557bc460594676441a57e1f9fad1a3624433931d70feade93f60b2"}]}