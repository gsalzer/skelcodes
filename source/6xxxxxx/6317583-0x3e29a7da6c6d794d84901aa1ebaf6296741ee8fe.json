{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n   constructor() public {\r\n    owner = 0xdE6F3798B6364eAF3FCCD73c84d10871c9e6fa8C;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner)public onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Token\r\n * @dev API interface for interacting with the DSGT contract \r\n */\r\ninterface Token {\r\n  function transfer(address _to, uint256 _value)external returns (bool);\r\n  function balanceOf(address _owner)external view returns (uint256 balance);\r\n}\r\n\r\ncontract CLTSaleContract is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  Token public token;\r\n\r\n  uint256 public raisedETH; // ETH raised\r\n  uint256 public soldTokens; // Tokens Sold\r\n  uint256 public saleMinimum;\r\n  uint256 public price;\r\n\r\n  address public beneficiary;\r\n\r\n  // They'll be represented by their index numbers i.e \r\n  // if the state is Dormant, then the value should be 0 \r\n  // Dormant:0, Active:1, , Successful:2\r\n  enum State {Dormant, Active,  Successful }\r\n\r\n  State public state;\r\n \r\n  event ActiveState();\r\n  event DormantState();\r\n  event SuccessfulState();\r\n\r\n  event BoughtTokens(\r\n      address indexed who, \r\n      uint256 tokensBought, \r\n      uint256 investedETH\r\n      );\r\n  \r\n  constructor() public {\r\n\r\n      token =Token(0x848c71FfE323898B03f58c66C9d14766EA4C1DA3); \r\n      beneficiary = 0xdE6F3798B6364eAF3FCCD73c84d10871c9e6fa8C;\r\n      \r\n      saleMinimum = 5 * 1 ether;\r\n      state = State.Active;\r\n      price = 1330;\r\n}\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * @dev This function will be called whenever anyone sends funds to a contract,\r\n     * throws if the sale isn't Active or the sale minimum isn't met\r\n     */\r\n    function () public payable {\r\n        require(msg.value >= saleMinimum);\r\n        require(state == State.Active);\r\n        require(token.balanceOf(this) > 0);\r\n        \r\n        buyTokens(msg.value);\r\n      }\r\n\r\n\r\n\r\n  /**\r\n  * @dev Function that sells available tokens\r\n  */\r\n  function buyTokens(uint256 _invested) internal   {\r\n\r\n    uint256 invested = _invested;\r\n    uint256 numberOfTokens;\r\n    \r\n    numberOfTokens = invested.mul(price);\r\n\r\n    \r\n    beneficiary.transfer(msg.value);\r\n    token.transfer(msg.sender, numberOfTokens);\r\n    \r\n    raisedETH = raisedETH.add(msg.value);\r\n    soldTokens = soldTokens.add(numberOfTokens);\r\n\r\n    emit BoughtTokens(msg.sender, numberOfTokens, invested);\r\n    \r\n    }\r\n    \r\n\r\n  /**\r\n   * @dev Change the price during the different rounds\r\n   */\r\n  function changeRate(uint256 _newPrice) public onlyOwner {\r\n      price = _newPrice;\r\n  }    \r\n\r\n  /**\r\n   *  @dev Change the sale minimum\r\n   */\r\n  function changeSaleMinimum(uint256 _newAmount) public onlyOwner {\r\n      saleMinimum = _newAmount;\r\n  }\r\n\r\n  /**\r\n   * @dev Ends the sale, once ended can't be reopened again\r\n   */\r\n  function endSale() public onlyOwner {\r\n    require(state == State.Active || state == State.Dormant);\r\n    \r\n    state = State.Successful;\r\n    emit SuccessfulState();\r\n  }\r\n  \r\n\r\n   /**\r\n   * @dev Makes the sale dormant, no deposits are allowed\r\n   */\r\n  function pauseSale() public onlyOwner {\r\n      require(state == State.Active);\r\n      \r\n      state = State.Dormant;\r\n      emit DormantState();\r\n  }\r\n  \r\n  /**\r\n   * @dev Makes the sale active, thus funds can be received\r\n   */\r\n  function openSale() public onlyOwner {\r\n      require(state == State.Dormant);\r\n      \r\n      state = State.Active;\r\n      emit ActiveState();\r\n  }\r\n  \r\n  /**\r\n   * @dev [!!ALERT!!] USE THIS ONLY IN EMERGENCY \r\n   */\r\n  function emergencyFlush() public onlyOwner {\r\n      token.transfer(owner, token.balanceOf(this));\r\n  }\r\n  \r\n\r\n  /**\r\n   * @notice Terminate contract and send any ETH left in contract to owner\r\n   */\r\n  function destroyContract() public onlyOwner {\r\n\r\n    // There should be no ether in the contract but just in case\r\n    selfdestruct(owner);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"destroyContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"openSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyFlush\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"changeSaleMinimum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ActiveState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DormantState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SuccessfulState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"investedETH\",\"type\":\"uint256\"}],\"name\":\"BoughtTokens\",\"type\":\"event\"}]","ContractName":"CLTSaleContract","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bf68e2809f06417d8fe081f6886a9af9b0be59c95f69a6704f2dfa24f45a405d"}]}