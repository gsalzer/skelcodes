{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n* @title Syrios Project\r\n*/\r\nlibrary SafeMath {\r\n\r\n/**\r\n* @dev Multiplies two numbers, throws on overflow.\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nc = a * b;\r\nassert(c / a == b);\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Integer division of two numbers, truncating the quotient.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n// uint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\nreturn a / b;\r\n}\r\n\r\n/**\r\n* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\n/**\r\n* @dev Adds two numbers, throws on overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\nc = a + b;\r\nassert(c >= a);\r\nreturn c;\r\n}\r\n}\r\n\r\ncontract ForeignToken {\r\nfunction balanceOf(address _owner) constant public returns (uint256);\r\nfunction transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\ncontract ERC20Basic {\r\nuint256 public totalSupply;\r\nfunction balanceOf(address who) public constant returns (uint256);\r\nfunction transfer(address to, uint256 value) public returns (bool);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\nfunction allowance(address owner, address spender) public constant returns (uint256);\r\nfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\nfunction approve(address spender, uint256 value) public returns (bool);\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Syrios is ERC20 {\r\n\r\nusing SafeMath for uint256;\r\naddress owner = msg.sender;\r\n\r\nmapping (address => uint256) balances;\r\nmapping (address => mapping (address => uint256)) allowed;\r\nmapping (address => bool) public Claimed;\r\n\r\nstring public constant name = \"Syrios Token\";\r\nstring public constant symbol = \"SR\";\r\nuint public constant decimals = 8;\r\nuint public deadline = now + 75 * 1 days;\r\nuint public round2 = now + 72 * 1 days;\r\nuint public round1 = now + 62 * 1 days;\r\n\r\nuint256 public totalSupply = 10000000000e8;\r\nuint256 public totalDistributed;\r\nuint256 public constant requestMinimum = 1 ether / 10000;\r\nuint256 public tokensPerEth = 10000000e8;\r\n\r\nuint public target0drop = 1000;\r\nuint public progress0drop = 0;\r\n\r\n//here u will write your ether address\r\naddress multisig = 0x12A0Ef33247f771bbDa8248B4d2F8d60582330fF\r\n;\r\n\r\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\nevent Distr(address indexed to, uint256 amount);\r\nevent DistrFinished();\r\n\r\nevent Airdrop(address indexed _owner, uint _amount, uint _balance);\r\n\r\nevent TokensPerEthUpdated(uint _tokensPerEth);\r\n\r\nevent Burn(address indexed burner, uint256 value);\r\n\r\nevent Add(uint256 value);\r\n\r\nbool public distributionFinished = false;\r\n\r\nmodifier canDistr() {\r\nrequire(!distributionFinished);\r\n_;\r\n}\r\n\r\nmodifier onlyOwner() {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\nconstructor() public {\r\nuint256 teamFund = 1000000000e8;\r\nowner = msg.sender;\r\ndistr(owner, teamFund);\r\n}\r\n\r\nfunction transferOwnership(address newOwner) onlyOwner public {\r\nif (newOwner != address(0)) {\r\nowner = newOwner;\r\n}\r\n}\r\n\r\nfunction finishDistribution() onlyOwner canDistr public returns (bool) {\r\ndistributionFinished = true;\r\nemit DistrFinished();\r\nreturn true;\r\n}\r\n\r\nfunction distr(address _to, uint256 _amount) canDistr private returns (bool) {\r\ntotalDistributed = totalDistributed.add(_amount); \r\nbalances[_to] = balances[_to].add(_amount);\r\nemit Distr(_to, _amount);\r\nemit Transfer(address(0), _to, _amount);\r\n\r\nreturn true;\r\n}\r\n\r\nfunction Distribute(address _participant, uint _amount) onlyOwner internal {\r\n\r\nrequire( _amount > 0 ); \r\nrequire( totalDistributed < totalSupply );\r\nbalances[_participant] = balances[_participant].add(_amount);\r\ntotalDistributed = totalDistributed.add(_amount);\r\n\r\nif (totalDistributed >= totalSupply) {\r\ndistributionFinished = true;\r\n}\r\n\r\n// log\r\nemit Airdrop(_participant, _amount, balances[_participant]);\r\nemit Transfer(address(0), _participant, _amount);\r\n}\r\n\r\nfunction DistributeAirdrop(address _participant, uint _amount) onlyOwner external { \r\nDistribute(_participant, _amount);\r\n}\r\n\r\nfunction DistributeAirdropMultiple(address[] _addresses, uint _amount) onlyOwner external { \r\nfor (uint i = 0; i < _addresses.length; i++) Distribute(_addresses[i], _amount);\r\n}\r\n\r\nfunction updateTokensPerEth(uint _tokensPerEth) public onlyOwner { \r\ntokensPerEth = _tokensPerEth;\r\nemit TokensPerEthUpdated(_tokensPerEth);\r\n}\r\n\r\nfunction () external payable {\r\ngetTokens();\r\n}\r\n\r\nfunction getTokens() payable canDistr public {\r\nuint256 tokens = 0;\r\nuint256 bonus = 0;\r\nuint256 countbonus = 0;\r\nuint256 bonusCond1 = 1 ether / 100;\r\nuint256 bonusCond2 = 1 ether / 10;\r\nuint256 bonusCond3 = 1 ether;\r\n\r\ntokens = tokensPerEth.mul(msg.value) / 1 ether; \r\naddress investor = msg.sender;\r\n\r\nif (msg.value >= requestMinimum && now < deadline && now < round1 && now < round2) {\r\nif(msg.value >= bonusCond1 && msg.value < bonusCond2){\r\ncountbonus = tokens * 50 / 100;\r\n}else if(msg.value >= bonusCond2 && msg.value < bonusCond3){\r\ncountbonus = tokens * 100 / 100;\r\n}else if(msg.value >= bonusCond3){\r\ncountbonus = tokens * 100 / 100;\r\n}\r\n}else if(msg.value >= requestMinimum && now < deadline && now > round1 && now < round2){\r\nif(msg.value >= bonusCond2 && msg.value < bonusCond3){\r\ncountbonus = tokens * 50 / 100;\r\n}else if(msg.value >= bonusCond3){\r\ncountbonus = tokens * 100 / 100;\r\n}\r\n}else{\r\ncountbonus = 0;\r\n}\r\n\r\nbonus = tokens + countbonus;\r\n\r\nif (tokens == 0) {\r\nuint256 valdrop = 50000e8;\r\nif (Claimed[investor] == false && progress0drop <= target0drop ) {\r\ndistr(investor, valdrop);\r\nClaimed[investor] = true;\r\nprogress0drop++;\r\n}else{\r\nrequire( msg.value >= requestMinimum );\r\n}\r\n}else if(tokens > 0 && msg.value >= requestMinimum){\r\nif( now >= deadline && now >= round1 && now < round2){\r\ndistr(investor, tokens);\r\n}else{\r\nif(msg.value >= bonusCond1){\r\ndistr(investor, bonus);\r\n}else{\r\ndistr(investor, tokens);\r\n} \r\n}\r\n}else{\r\nrequire( msg.value >= requestMinimum );\r\n}\r\n\r\nif (totalDistributed >= totalSupply) {\r\ndistributionFinished = true;\r\n}\r\n\r\n//here we will send all wei to your address\r\nmultisig.transfer(msg.value);\r\n}\r\n\r\nfunction balanceOf(address _owner) constant public returns (uint256) {\r\nreturn balances[_owner];\r\n}\r\n\r\nmodifier onlyPayloadSize(uint size) {\r\nassert(msg.data.length >= size + 4);\r\n_;\r\n}\r\n\r\nfunction transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\r\n\r\nrequire(_to != address(0));\r\nrequire(_amount <= balances[msg.sender]);\r\n\r\nbalances[msg.sender] = balances[msg.sender].sub(_amount);\r\nbalances[_to] = balances[_to].add(_amount);\r\nemit Transfer(msg.sender, _to, _amount);\r\nreturn true;\r\n}\r\n\r\nfunction transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\r\n\r\nrequire(_to != address(0));\r\nrequire(_amount <= balances[_from]);\r\nrequire(_amount <= allowed[_from][msg.sender]);\r\n\r\nbalances[_from] = balances[_from].sub(_amount);\r\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\nbalances[_to] = balances[_to].add(_amount);\r\nemit Transfer(_from, _to, _amount);\r\nreturn true;\r\n}\r\n\r\nfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\nif (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\r\nallowed[msg.sender][_spender] = _value;\r\nemit Approval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\nfunction allowance(address _owner, address _spender) constant public returns (uint256) {\r\nreturn allowed[_owner][_spender];\r\n}\r\n\r\nfunction getTokenBalance(address tokenAddress, address who) constant public returns (uint){\r\nForeignToken t = ForeignToken(tokenAddress);\r\nuint bal = t.balanceOf(who);\r\nreturn bal;\r\n}\r\n\r\nfunction withdrawAll() onlyOwner public {\r\naddress myAddress = this;\r\nuint256 etherBalance = myAddress.balance;\r\nowner.transfer(etherBalance);\r\n}\r\n\r\nfunction withdraw(uint256 _wdamount) onlyOwner public {\r\nuint256 wantAmount = _wdamount;\r\nowner.transfer(wantAmount);\r\n}\r\n\r\nfunction burn(uint256 _value) onlyOwner public {\r\nrequire(_value <= balances[msg.sender]);\r\naddress burner = msg.sender;\r\nbalances[burner] = balances[burner].sub(_value);\r\ntotalSupply = totalSupply.sub(_value);\r\ntotalDistributed = totalDistributed.sub(_value);\r\nemit Burn(burner, _value);\r\n}\r\n\r\nfunction add(uint256 _value) onlyOwner public {\r\nuint256 counter = totalSupply.add(_value);\r\ntotalSupply = counter; \r\nemit Add(_value);\r\n}\r\n\r\n\r\nfunction withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\r\nForeignToken token = ForeignToken(_tokenContract);\r\nuint256 amount = token.balanceOf(address(this));\r\nreturn token.transfer(owner, amount);\r\n}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wdamount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestMinimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DistributeAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"progress0drop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishDistribution\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"updateTokensPerEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Claimed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributionFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawForeignTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"target0drop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DistributeAirdropMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistrFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokensPerEth\",\"type\":\"uint256\"}],\"name\":\"TokensPerEthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Add\",\"type\":\"event\"}]","ContractName":"Syrios","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dc36c4bf47979dc85a9e7bf200cc44abc908cccf03242d8fbe1b41fc6af481db"}]}