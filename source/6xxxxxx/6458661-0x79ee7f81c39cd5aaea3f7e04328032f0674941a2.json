{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity  ^0.4.23;\r\n\r\n/**\r\n *  SafeMath <https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol/>\r\n *  Copyright (c) 2016 Smart Contract Solutions, Inc.\r\n *  Released under the MIT License (MIT)\r\n */\r\n\r\n/// @title Math operations with safety checks\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n  /**\r\n   * @dev Allows the current owner t o transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/// ERC Token Standard #20 Interface (https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md)\r\ninterface IERC20 {\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n    function totalSupply() external view returns (uint256);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ninterface ISecurityToken {\r\n\r\n\r\n    /**\r\n     * @dev Add a verified address to the Security Token whitelist\r\n     * @param _whitelistAddress Address attempting to join ST whitelist\r\n     * @return bool success\r\n     */\r\n    function addToWhitelist(address _whitelistAddress) public returns (bool success);\r\n\r\n    /**\r\n     * @dev Add verified addresses to the Security Token whitelist\r\n     * @param _whitelistAddresses Array of addresses attempting to join ST whitelist\r\n     * @return bool success\r\n     */\r\n    function addToWhitelistMulti(address[] _whitelistAddresses) external returns (bool success);\r\n\r\n    /**\r\n     * @dev Removes a previosly verified address to the Security Token blacklist\r\n     * @param _blacklistAddress Address being added to the blacklist\r\n     * @return bool success\r\n     */\r\n    function addToBlacklist(address _blacklistAddress) public returns (bool success);\r\n\r\n    /**\r\n     * @dev Removes previously verified addresseses to the Security Token whitelist\r\n     * @param _blacklistAddresses Array of addresses attempting to join ST whitelist\r\n     * @return bool success\r\n     */\r\n    function addToBlacklistMulti(address[] _blacklistAddresses) external returns (bool success);\r\n\r\n    /// Get token decimals\r\n    function decimals() view external returns (uint);\r\n\r\n\r\n    // @notice it will return status of white listing\r\n    // @return true if user is white listed and false if is not\r\n    function isWhiteListed(address _user) external view returns (bool);\r\n}\r\n\r\n// The  Exchange token\r\ncontract SecurityToken is IERC20, Ownable, ISecurityToken {\r\n\r\n    using SafeMath for uint;\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals; // How many decimals to show.\r\n    string public version;\r\n    uint public totalSupply;\r\n    uint public tokenPrice;\r\n    bool public exchangeEnabled;    \r\n    bool public codeExportEnabled;\r\n    address public commissionAddress;           // address to deposit commissions\r\n    uint public deploymentCost;                 // cost of deployment with exchange feature\r\n    uint public tokenOnlyDeploymentCost;        // cost of deployment with basic ERC20 feature\r\n    uint public exchangeEnableCost;             // cost of upgrading existing ERC20 to exchange feature\r\n    uint public codeExportCost;                 // cost of exporting the code\r\n    string public securityISIN;\r\n\r\n\r\n    // Security token shareholders\r\n    struct Shareholder {                        // Structure that contains the data of the shareholders        \r\n        bool allowed;                           // allowed - whether the shareholder is allowed to transfer or recieve the security token       \r\n        uint receivedAmt;\r\n        uint releasedAmt;\r\n        uint vestingDuration;\r\n        uint vestingCliff;\r\n        uint vestingStart;\r\n    }\r\n\r\n    mapping(address => uint) public balances;\r\n    mapping(address => mapping(address => uint)) public allowed;\r\n    mapping(address => Shareholder) public shareholders; // Mapping that holds the data of the shareholder corresponding to investor address\r\n\r\n\r\n    modifier onlyWhitelisted(address _to) {\r\n        require(shareholders[_to].allowed && shareholders[msg.sender].allowed);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlyVested(address _from) {\r\n\r\n        require(availableAmount(_from) > 0);\r\n        _;\r\n    }\r\n\r\n    // The Token constructor     \r\n    constructor (\r\n        uint _initialSupply,\r\n        string _tokenName,\r\n        string _tokenSymbol,\r\n        uint _decimalUnits,        \r\n        string _version,                       \r\n        uint _tokenPrice,\r\n        string _securityISIN\r\n                        ) public payable\r\n    {\r\n\r\n        totalSupply = _initialSupply * (10**_decimalUnits);                                             \r\n        name = _tokenName;          // Set the name for display purposes\r\n        symbol = _tokenSymbol;      // Set the symbol for display purposes\r\n        decimals = _decimalUnits;   // Amount of decimals for display purposes\r\n        version = _version;         // Version of token\r\n        tokenPrice = _tokenPrice;   // Token price in Wei     \r\n        securityISIN = _securityISIN;// ISIN security registration number        \r\n            \r\n        balances[owner] = totalSupply;    \r\n\r\n        deploymentCost = 25e17;             \r\n        tokenOnlyDeploymentCost = 15e17;\r\n        exchangeEnableCost = 15e17;\r\n        codeExportCost = 1e19;   \r\n\r\n        codeExportEnabled = true;\r\n        exchangeEnabled = true;  \r\n            \r\n        commissionAddress = 0x80eFc17CcDC8fE6A625cc4eD1fdaf71fD81A2C99;                                   \r\n        commissionAddress.transfer(msg.value);       \r\n        addToWhitelist(owner);  \r\n\r\n    }\r\n\r\n    event LogTransferSold(address indexed to, uint value);\r\n    event LogTokenExchangeEnabled(address indexed caller, uint exchangeCost);\r\n    event LogTokenExportEnabled(address indexed caller, uint enableCost);\r\n    event LogNewWhitelistedAddress( address indexed shareholder);\r\n    event LogNewBlacklistedAddress(address indexed shareholder);\r\n    event logVestingAllocation(address indexed shareholder, uint amount, uint duration, uint cliff, uint start);\r\n    event logISIN(string isin);\r\n\r\n\r\n\r\n    function updateISIN(string _securityISIN) external onlyOwner() {\r\n\r\n        bytes memory tempISIN = bytes(_securityISIN);\r\n\r\n        require(tempISIN.length > 0);  // ensure that ISIN has been passed\r\n        securityISIN = _securityISIN;// ISIN security registration number  \r\n        emit logISIN(_securityISIN);  \r\n    }\r\n\r\n    function allocateVestedTokens(address _to, uint _value, uint _duration, uint _cliff, uint _vestingStart ) \r\n                                  external onlyWhitelisted(_to) onlyOwner() returns (bool) \r\n    {\r\n\r\n        require(_to != address(0));        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);        \r\n        if (shareholders[_to].receivedAmt == 0) {\r\n            shareholders[_to].vestingDuration = _duration;\r\n            shareholders[_to].vestingCliff = _cliff;\r\n            shareholders[_to].vestingStart = _vestingStart;\r\n        }\r\n        shareholders[_to].receivedAmt = shareholders[_to].receivedAmt.add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        \r\n        emit logVestingAllocation(_to, _value, _duration, _cliff, _vestingStart);\r\n        return true;\r\n    }\r\n\r\n    function availableAmount(address _from) public view returns (uint256) {                \r\n        \r\n        if (block.timestamp < shareholders[_from].vestingCliff) {            \r\n            return balanceOf(_from).sub(shareholders[_from].receivedAmt);\r\n        } else if (block.timestamp >= shareholders[_from].vestingStart.add(shareholders[_from].vestingDuration)) {\r\n            return balanceOf(_from);\r\n        } else {\r\n            uint totalVestedBalance = shareholders[_from].receivedAmt;\r\n            uint totalAvailableVestedBalance = totalVestedBalance.mul(block.timestamp.sub(shareholders[_from].vestingStart)).div(shareholders[_from].vestingDuration);\r\n            uint lockedBalance = totalVestedBalance - totalAvailableVestedBalance;\r\n            return balanceOf(_from).sub(lockedBalance);\r\n        }\r\n    }\r\n\r\n    // @noice To be called by owner of the contract to enable exchange functionality\r\n    // @param _tokenPrice {uint} cost of token in ETH\r\n    // @return true {bool} if successful\r\n    function enableExchange(uint _tokenPrice) public payable {\r\n        \r\n        require(!exchangeEnabled);\r\n        require(exchangeEnableCost == msg.value);\r\n        exchangeEnabled = true;\r\n        tokenPrice = _tokenPrice;\r\n        commissionAddress.transfer(msg.value);\r\n        emit LogTokenExchangeEnabled(msg.sender, _tokenPrice);                          \r\n    }\r\n\r\n    // @notice to enable code export functionality\r\n    function enableCodeExport() public payable {   \r\n        \r\n        require(!codeExportEnabled);\r\n        require(codeExportCost == msg.value);     \r\n        codeExportEnabled = true;\r\n        commissionAddress.transfer(msg.value);  \r\n        emit LogTokenExportEnabled(msg.sender, msg.value);        \r\n    }\r\n\r\n    // @notice It will send tokens to sender based on the token price    \r\n    function swapTokens() public payable onlyWhitelisted(msg.sender) {     \r\n\r\n        require(exchangeEnabled);   \r\n        uint tokensToSend;\r\n        tokensToSend = (msg.value * (10**decimals)) / tokenPrice; \r\n        require(balances[owner] >= tokensToSend);\r\n        balances[msg.sender] = balances[msg.sender].add(tokensToSend);\r\n        balances[owner] = balances[owner].sub(tokensToSend);\r\n        owner.transfer(msg.value);\r\n        emit Transfer(owner, msg.sender, tokensToSend);\r\n        emit LogTransferSold(msg.sender, tokensToSend);       \r\n    }\r\n\r\n    // @notice will be able to mint tokens in the future\r\n    // @param _target {address} address to which new tokens will be assigned\r\n    // @parm _mintedAmount {uint256} amouont of tokens to mint\r\n    function mintToken(address _target, uint256 _mintedAmount) public onlyWhitelisted(_target) onlyOwner() {        \r\n        \r\n        balances[_target] += _mintedAmount;\r\n        totalSupply += _mintedAmount;\r\n        emit Transfer(0, _target, _mintedAmount);       \r\n    }\r\n  \r\n    // @notice transfer tokens to given address\r\n    // @param _to {address} address or recipient\r\n    // @param _value {uint} amount to transfer\r\n    // @return  {bool} true if successful\r\n    function transfer(address _to, uint _value) external onlyVested(_to) onlyWhitelisted(_to)  returns(bool) {\r\n\r\n        require(_to != address(0));\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // @notice transfer tokens from given address to another address\r\n    // @param _from {address} from whom tokens are transferred\r\n    // @param _to {address} to whom tokens are transferred\r\n    // @param _value {uint} amount of tokens to transfer\r\n    // @return  {bool} true if successful\r\n    function transferFrom(address _from, address _to, uint256 _value) \r\n                          external onlyVested(_to)  onlyWhitelisted(_to) returns(bool success) {\r\n\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value); // Check if the sender has enough\r\n        require(_value <= allowed[_from][msg.sender]); // Check if allowed is greater or equal\r\n\r\n        balances[_from] = balances[_from].sub(_value); // Subtract from the sender\r\n        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // adjust allowed\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // @notice to query balance of account\r\n    // @return _owner {address} address of user to query balance\r\n    function balanceOf(address _owner) public view returns(uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    *\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint _value) external returns(bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // @notice to query of allowance of one user to the other\r\n    // @param _owner {address} of the owner of the account\r\n    // @param _spender {address} of the spender of the account\r\n    // @return remaining {uint} amount of remaining allowance\r\n    function allowance(address _owner, address _spender) external view returns(uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    */\r\n    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n     /**\r\n     * @dev Add a verified address to the Security Token whitelist\r\n     * The Issuer can add an address to the whitelist by themselves by\r\n     * creating their own KYC provider and using it to verify the accounts\r\n     * they want to add to the whitelist.\r\n     * @param _whitelistAddress Address attempting to join ST whitelist\r\n     * @return bool success\r\n     */\r\n    function addToWhitelist(address _whitelistAddress) onlyOwner public returns (bool success) {       \r\n        shareholders[_whitelistAddress].allowed = true;\r\n        emit LogNewWhitelistedAddress(_whitelistAddress);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Add verified addresses to the Security Token whitelist\r\n     * @param _whitelistAddresses Array of addresses attempting to join ST whitelist\r\n     * @return bool success\r\n     */\r\n    function addToWhitelistMulti(address[] _whitelistAddresses) onlyOwner external returns (bool success) {\r\n        for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\r\n            addToWhitelist(_whitelistAddresses[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a verified address to the Security Token blacklist\r\n     * @param _blacklistAddress Address being added to the blacklist\r\n     * @return bool success\r\n     */\r\n    function addToBlacklist(address _blacklistAddress) onlyOwner public returns (bool success) {\r\n        require(shareholders[_blacklistAddress].allowed);\r\n        shareholders[_blacklistAddress].allowed = false;\r\n        emit LogNewBlacklistedAddress(_blacklistAddress);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes previously verified addresseses to the Security Token whitelist\r\n     * @param _blacklistAddresses Array of addresses attempting to join ST whitelist\r\n     * @return bool success\r\n     */\r\n    function addToBlacklistMulti(address[] _blacklistAddresses) onlyOwner external returns (bool success) {\r\n        for (uint256 i = 0; i < _blacklistAddresses.length; i++) {\r\n            addToBlacklist(_blacklistAddresses[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // @notice it will return status of white listing\r\n    // @return true if user is white listed and false if is not\r\n    function isWhiteListed(address _user) external view returns (bool) {\r\n\r\n        return shareholders[_user].allowed;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function decimals() external view returns (uint) {\r\n        return decimals;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"securityISIN\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"codeExportCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blacklistAddresses\",\"type\":\"address[]\"}],\"name\":\"addToBlacklistMulti\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"enableExchange\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blacklistAddress\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholders\",\"outputs\":[{\"name\":\"allowed\",\"type\":\"bool\"},{\"name\":\"receivedAmt\",\"type\":\"uint256\"},{\"name\":\"releasedAmt\",\"type\":\"uint256\"},{\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"name\":\"vestingCliff\",\"type\":\"uint256\"},{\"name\":\"vestingStart\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"availableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_securityISIN\",\"type\":\"string\"}],\"name\":\"updateISIN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"codeExportEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"swapTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeEnableCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelistAddresses\",\"type\":\"address[]\"}],\"name\":\"addToWhitelistMulti\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"},{\"name\":\"_cliff\",\"type\":\"uint256\"},{\"name\":\"_vestingStart\",\"type\":\"uint256\"}],\"name\":\"allocateVestedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deploymentCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOnlyDeploymentCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whitelistAddress\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableCodeExport\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint256\"},{\"name\":\"_version\",\"type\":\"string\"},{\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"name\":\"_securityISIN\",\"type\":\"string\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogTransferSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"exchangeCost\",\"type\":\"uint256\"}],\"name\":\"LogTokenExchangeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enableCost\",\"type\":\"uint256\"}],\"name\":\"LogTokenExportEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"LogNewWhitelistedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"LogNewBlacklistedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"shareholder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"logVestingAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isin\",\"type\":\"string\"}],\"name\":\"logISIN\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SecurityToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000003faa2522600000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000947454f424c4f434b530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000447424c58000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003312e3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://ac55cd64dbdc45e05e3cc263938dd7f12252b8a0f65aab4c51444514a2e60ce6"}]}