{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"You are not owner.\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"Invalid address.\");\r\n\r\n        owner = _newOwner;\r\n\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n    }\r\n}\r\n\r\ncontract Foundation is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) public depositOf;\r\n\r\n    struct Share {\r\n        address member;\r\n        uint256 amount;\r\n    }\r\n    Share[] private shares;\r\n\r\n    event Deposited(address indexed member, uint256 amount);\r\n    event Withdrawn(address indexed member, uint256 amount);\r\n\r\n    constructor() public {\r\n        shares.push(Share(address(0), 0));\r\n\r\n        shares.push(Share(0x05dEbE8428CAe653eBA92a8A887CCC73C7147bB8, 60));\r\n        shares.push(Share(0xF53e5f0Af634490D33faf1133DE452cd9fF987e1, 20));\r\n        shares.push(Share(0x34D26e1325352d7B3F91DF22ae97894B0C5343b7, 20));\r\n    }\r\n\r\n    function() public payable {\r\n        deposit();\r\n    }\r\n\r\n    function deposit() public payable {\r\n        uint256 amount = msg.value;\r\n        require(amount > 0, \"Deposit failed - zero deposits not allowed\");\r\n\r\n        for (uint256 i = 1; i < shares.length; i++) {\r\n            if (shares[i].amount > 0) {\r\n                depositOf[shares[i].member] = depositOf[shares[i].member].add(amount.mul(shares[i].amount).div(100));\r\n            }\r\n        }\r\n\r\n        emit Deposited(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(address _who) public {\r\n        uint256 amount = depositOf[_who];\r\n        require(amount > 0 && amount <= address(this).balance, \"Insufficient amount.\");\r\n\r\n        depositOf[_who] = depositOf[_who].sub(amount);\r\n\r\n        _who.transfer(amount);\r\n\r\n        emit Withdrawn(_who, amount);\r\n    }\r\n\r\n    function getShares(address _who) public view returns(uint256 amount) {\r\n        for (uint256 i = 1; i < shares.length; i++) {\r\n            if (shares[i].member == _who) {\r\n                amount = shares[i].amount;\r\n                break;\r\n            }\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function setShares(address _who, uint256 _amount) public onlyOwner {\r\n        uint256 index = 0;\r\n        uint256 total = 100;\r\n        for (uint256 i = 1; i < shares.length; i++) {\r\n            if (shares[i].member == _who) {\r\n                index = i;\r\n            } else if (shares[i].amount > 0) {\r\n                total = total.sub(shares[i].amount);\r\n            }\r\n        }\r\n        require(_amount <= total, \"Insufficient shares.\");\r\n\r\n        if (index > 0) {\r\n            shares[index].amount = _amount;\r\n        } else {\r\n            shares.push(Share(_who, _amount));\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setShares\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getShares\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Foundation","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://28fd2166e3d7f56c112447ac838d5f3603f80fd4f5c9b37aacd8aa7d6ad38dec"}]}