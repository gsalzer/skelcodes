{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\ncontract ExchangeOracle is Ownable {\n\n    using SafeMath for uint256;\n\n    uint256 public rate;\n    uint256 public lastRate;\n    uint256 public rateMultiplier = 1000;\n    uint256 public usdMultiplier = 100;\n    address public admin;\n\n    event RateChanged(uint256 _oldRate, uint256 _newRate);\n    event RateMultiplierChanged(uint256 _oldRateMultiplier, uint256 _newRateMultiplier);\n    event USDMultiplierChanged(uint256 _oldUSDMultiplier, uint256 _newUSDMultiplier);\n    event AdminChanged(address _oldAdmin, address _newAdmin);\n\n    constructor(address _initialAdmin, uint256 _initialRate) public {\n        require(_initialAdmin != address(0), \"Invalid initial admin address\");\n        require(_initialRate > 0, \"Invalid initial rate value\");\n\n        admin = _initialAdmin;\n        rate = _initialRate;\n        lastRate = _initialRate;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Not allowed to execute\");\n        _;\n    }\n\n    /*\n     * The new rate has to be passed in format:\n     *      250.567 rate = 250 567 passed rate ( 1 ether = 250.567 USD )\n     *      100 rate = 100 000 passed rate ( 1 ether = 100 USD )\n     *      1 rate = 1 000 passed rate ( 1 ether = 1 USD )\n     *      0.01 rate = 10 passed rate ( 100 ethers = 1 USD )\n     */\n    function setRate(uint256 _newRate) public onlyAdmin {\n        require(_newRate > 0, \"Invalid rate value\");\n\n        lastRate = rate;\n        rate = _newRate;\n\n        emit RateChanged(lastRate, _newRate);\n    }\n\n    /*\n     * By default rateMultiplier = 1000.\n     * With rate multiplier we can set the rate to be a float number.\n     *\n     * We use it as a multiplier because we can not pass float numbers in Ethereum.\n     * If the USD price becomes bigger than ether one, for example -> 1 USD = 10 ethers.\n     * We will pass 100 as rate and this will be relevant to 0.1 USD = 1 ether.\n     */\n    function setRateMultiplier(uint256 _newRateMultiplier) public onlyAdmin {\n        require(_newRateMultiplier > 0, \"Invalid rate multiplier value\");\n\n        uint256 oldRateMultiplier = rateMultiplier;\n        rateMultiplier = _newRateMultiplier;\n\n        emit RateMultiplierChanged(oldRateMultiplier, _newRateMultiplier);\n    }\n\n    /*\n     * By default usdMultiplier is = 100.\n     * With usd multiplier we can set the usd amount to be a float number.\n     *\n     * We use it as a multiplier because we can not pass float numbers in Ethereum.\n     * We will pass 100 as usd amount and this will be relevant to 1 USD.\n     */\n    function setUSDMultiplier(uint256 _newUSDMultiplier) public onlyAdmin {\n        require(_newUSDMultiplier > 0, \"Invalid USD multiplier value\");\n\n        uint256 oldUSDMultiplier = usdMultiplier;\n        usdMultiplier = _newUSDMultiplier;\n\n        emit USDMultiplierChanged(oldUSDMultiplier, _newUSDMultiplier);\n    }\n\n    /*\n     * Set address with admin rights, allowed to execute:\n     *    - setRate()\n     *    - setRateMultiplier()\n     *    - setUSDMultiplier()\n     */\n    function setAdmin(address _newAdmin) public onlyOwner {\n        require(_newAdmin != address(0), \"Invalid admin address\");\n\n        address oldAdmin = admin;\n        admin = _newAdmin;\n\n        emit AdminChanged(oldAdmin, _newAdmin);\n    }\n\n}\n\n\ncontract TokenExchangeOracle is ExchangeOracle {\n\n    constructor(address _admin, uint256 _initialRate) ExchangeOracle(_admin, _initialRate) public {}\n\n    /*\n     * Converts the specified USD amount in tokens (usdAmount is multiplied by\n     * corresponding usdMultiplier value, which by default is 100).\n     */\n    function convertUSDToTokens(uint256 _usdAmount) public view returns (uint256) {\n        return usdToTokens(_usdAmount, rate);\n    }\n\n    /*\n     * Converts the specified USD amount in tokens (usdAmount is multiplied by\n     * corresponding usdMultiplier value, which by default is 100) using the\n     * lastRate value for the calculation.\n     */\n    function convertUSDToTokensByLastRate(uint256 _usdAmount) public view returns (uint256) {\n        return usdToTokens(_usdAmount, lastRate);\n    }\n\n    /*\n     * Converts the specified USD amount in tokens.\n     *\n     * Example:\n     *    Token/USD -> 298.758\n     *    convert -> 39.99 USD\n     *\n     *               usdAmount     rateMultiplier\n     *    tokens = ------------- * -------------- * ONE_ETHER_IN_WEI\n     *             usdMultiplier        rate\n     *\n     */\n    function usdToTokens(uint256 _usdAmount, uint256 _rate) internal view returns (uint256) {\n        require(_usdAmount > 0, \"Invalid USD amount\");\n\n        uint256 tokens = _usdAmount.mul(rateMultiplier);\n        tokens = tokens.mul(1 ether);\n        tokens = tokens.div(usdMultiplier);\n        tokens = tokens.div(_rate);\n\n        return tokens;\n    }\n\n    /*\n     * Converts the specified tokens amount in USD. The returned value is multiplied\n     * by the usdMultiplier value, which is by default 100.\n     */\n    function convertTokensToUSD(uint256 _tokens) public view returns (uint256) {\n        return tokensToUSD(_tokens, rate);\n    }\n\n    /*\n     * Converts the specified tokens amount in USD, using the lastRate value for the\n     * calculation. The returned value is multiplied by the usdMultiplier value,\n     * which is by default 100.\n     */\n    function convertTokensToUSDByLastRate(uint256 _tokens) public view returns (uint256) {\n        return tokensToUSD(_tokens, lastRate);\n    }\n\n    /*\n     * Converts the specified tokens amount in USD.\n     *\n     *                     tokens             rate\n     *    usdAmount = ---------------- * -------------- * usdMultiplier\n     *                ONE_ETHER_IN_WEI   rateMultiplier\n     *\n     */\n    function tokensToUSD(uint256 _tokens, uint256 _rate) internal view returns (uint256) {\n        require(_tokens > 0, \"Invalid token amount\");\n\n        uint256 usdAmount = _tokens.mul(_rate);\n        usdAmount = usdAmount.mul(usdMultiplier);\n        usdAmount = usdAmount.div(rateMultiplier);\n        usdAmount = usdAmount.div(1 ether);\n\n        return usdAmount;\n    }\n\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"convertUSDToTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_usdAmount\",\"type\":\"uint256\"}],\"name\":\"convertUSDToTokensByLastRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"convertTokensToUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"convertTokensToUSDByLastRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRateMultiplier\",\"type\":\"uint256\"}],\"name\":\"setRateMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUSDMultiplier\",\"type\":\"uint256\"}],\"name\":\"setUSDMultiplier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_initialRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldRateMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newRateMultiplier\",\"type\":\"uint256\"}],\"name\":\"RateMultiplierChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldUSDMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newUSDMultiplier\",\"type\":\"uint256\"}],\"name\":\"USDMultiplierChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenExchangeOracle","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f5568294546e104cfcc95257d9b07eeda6fa70ad0000000000000000000000000000000000000000000000000000000000005bcc","Library":"","SwarmSource":"bzzr://fc5408082392bc7b32177f5822912f8bba85cc434422925f2884ce271ffba41d"}]}