{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max(uint a, uint b) internal pure returns (uint) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min(uint a, uint b) internal pure returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n}\r\n\r\n// @title The Contract is EDR Standard Token Design.\r\n//\r\n// @Author: Tim Wars\r\n// @Date: 2018.8.3\r\n// @Seealso: ERC20\r\n//\r\ncontract IscToken {\r\n\r\n    // === Event ===\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Burn(address indexed from, uint value);\r\n\tevent Owner(address indexed from, address indexed to);\r\n    event TransferEdrIn(address indexed from, uint value);\r\n    event TransferEdrOut(address indexed from, uint value);\r\n\r\n    // === Defined ===\r\n    using SafeMath for uint;\r\n\r\n    // --- Owner Section ---\r\n    address public owner;\r\n    bool public frozen = false; //\r\n\r\n    // --- ERC20 EDR Token Section ---\r\n    uint8 constant public decimals = 5;\r\n    uint public totalSupply = 1000 * 10 ** (8+uint256(decimals));  // ***** 1 * 100 Million\r\n    string constant public name = \"ISChain Token\";\r\n    string constant public symbol = \"ISC\";\r\n\r\n    mapping(address => uint) ownerance; // Owner Balance\r\n    mapping(address => mapping(address => uint)) public allowance; // Allower Balance\r\n\r\n    // --- EDR Token Section ---\r\n    address private EDRADDR  = 0x245580fc423Bd82Ab531d325De0Ba5ff8Ec79402;\r\n\r\n    uint public edrBalance; // Current EDR hold EDR balance\r\n    uint public totalCirculating; // Total EDR out circulating\r\n\r\n\r\n    // === Modifier ===\r\n    // --- Functional Section ---\r\n    modifier onlyPayloadSize(uint size) {\r\n      assert(msg.data.length == size + 4);\r\n      _;\r\n    }\r\n\r\n    // --- Owner Section ---\r\n    modifier isOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier isNotFrozen() {\r\n        require(!frozen);\r\n        _;\r\n    }\r\n\r\n    // --- ERC20 Section ---\r\n    modifier hasEnoughBalance(uint _amount) {\r\n        require(ownerance[msg.sender] >= _amount);\r\n        _;\r\n    }\r\n\r\n    modifier overflowDetected(address _owner, uint _amount) {\r\n        require(ownerance[_owner] + _amount >= ownerance[_owner]);\r\n        _;\r\n    }\r\n\r\n    modifier hasAllowBalance(address _owner, address _allower, uint _amount) {\r\n        require(allowance[_owner][_allower] >= _amount);\r\n        _;\r\n    }\r\n\r\n    modifier isNotEmpty(address _addr, uint _value) {\r\n        require(_addr != address(0));\r\n        require(_value != 0);\r\n        _;\r\n    }\r\n\r\n    modifier isValidAddress {\r\n        assert(0x0 != msg.sender);\r\n        _;\r\n    }\r\n\r\n    // === Constructor ===\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        ownerance[EDRADDR] = totalSupply;\r\n        edrBalance = totalSupply;\r\n        totalCirculating = 0;\r\n        emit Transfer(address(0), EDRADDR, totalSupply);\r\n    }\r\n\r\n\r\n    // --- ERC20 Token Section ---\r\n    function approve(address _spender, uint _value)\r\n        isNotFrozen\r\n        isValidAddress\r\n        public returns (bool success)\r\n    {\r\n        require(_value == 0 || allowance[msg.sender][_spender] == 0); // must spend to 0 where pre approve balance.\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        isNotFrozen\r\n        isValidAddress\r\n        overflowDetected(_to, _value)\r\n        public returns (bool success)\r\n    {\r\n        require(ownerance[_from] >= _value);\r\n        require(allowance[_from][msg.sender] >= _value);\r\n\r\n        ownerance[_to] = ownerance[_to].add(_value);\r\n        ownerance[_from] = ownerance[_from].sub(_value);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public\r\n        constant returns (uint balance)\r\n    {\r\n        return ownerance[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public\r\n        isNotFrozen\r\n        isValidAddress\r\n        isNotEmpty(_to, _value)\r\n        hasEnoughBalance(_value)\r\n        overflowDetected(_to, _value)\r\n        onlyPayloadSize(2 * 32)\r\n        returns (bool success)\r\n    {\r\n        ownerance[msg.sender] = ownerance[msg.sender].sub(_value);\r\n        ownerance[_to] = ownerance[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        if (msg.sender == EDRADDR) {\r\n            totalCirculating = totalCirculating.add(_value);\r\n            edrBalance = totalSupply - totalCirculating;\r\n            emit TransferEdrOut(_to, _value);\r\n        }\r\n        if (_to == EDRADDR) {\r\n            totalCirculating = totalCirculating.sub(_value);\r\n            edrBalance = totalSupply - totalCirculating;\r\n            emit TransferEdrIn(_to, _value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // --- Owner Section ---\r\n    function transferOwner(address _newOwner)\r\n        isOwner\r\n        public returns (bool success)\r\n    {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n            emit Owner(msg.sender, owner);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function freeze()\r\n        isOwner\r\n        public returns (bool success)\r\n    {\r\n        frozen = true;\r\n        return true;\r\n    }\r\n\r\n    function unfreeze()\r\n        isOwner\r\n        public returns (bool success)\r\n    {\r\n        frozen = false;\r\n        return true;\r\n    }\r\n\r\n    function burn(uint _value)\r\n        isNotFrozen\r\n        isValidAddress\r\n        hasEnoughBalance(_value)\r\n        public returns (bool success)\r\n    {\r\n        ownerance[msg.sender] = ownerance[msg.sender].sub(_value);\r\n        ownerance[0x0] = ownerance[0x0].add(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        totalCirculating = totalCirculating.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    // --- Extension Section ---\r\n    function transferMultiple(address[] _dests, uint[] _values)\r\n        isNotFrozen\r\n        isValidAddress\r\n        public returns (uint)\r\n    {\r\n        uint i = 0;\r\n        if (msg.sender == EDRADDR) {\r\n            while (i < _dests.length) {\r\n                require(ownerance[msg.sender] >= _values[i]);\r\n                ownerance[msg.sender] = ownerance[msg.sender].sub(_values[i]);\r\n                ownerance[_dests[i]] = ownerance[_dests[i]].add(_values[i]);\r\n                totalCirculating = totalCirculating.add(_values[i]);\r\n                emit Transfer(msg.sender, _dests[i], _values[i]);\r\n                emit TransferEdrOut(_dests[i], _values[i]);\r\n                i += 1;\r\n            }\r\n            edrBalance = totalSupply - totalCirculating;\r\n        } else {\r\n            while (i < _dests.length) {\r\n                require(ownerance[msg.sender] >= _values[i]);\r\n                ownerance[msg.sender] = ownerance[msg.sender].sub(_values[i]);\r\n                ownerance[_dests[i]] = ownerance[_dests[i]].add(_values[i]);\r\n                emit Transfer(msg.sender, _dests[i], _values[i]);\r\n                i += 1;\r\n            }\r\n        }\r\n        return(i);\r\n    }\r\n\r\n    // --- Edr Section ---\r\n    function transferEdrAddr(address _newEddr)\r\n        isOwner\r\n        isValidAddress\r\n        onlyPayloadSize(32)\r\n        public returns (bool success)\r\n    {\r\n        if (_newEddr != address(0)) {\r\n            address _oldaddr = EDRADDR;\r\n            ownerance[_newEddr] = ownerance[EDRADDR];\r\n            ownerance[EDRADDR] = 0;\r\n            EDRADDR = _newEddr;\r\n            emit Transfer(_oldaddr, EDRADDR, ownerance[_newEddr]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCirculating\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newEddr\",\"type\":\"address\"}],\"name\":\"transferEdrAddr\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"edrBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dests\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"transferMultiple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Owner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferEdrIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferEdrOut\",\"type\":\"event\"}]","ContractName":"IscToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://388c391c1ba8a5ce99ffdab0d8a4c8a692c0761e81b900725d02ec4d3ab4ac65"}]}