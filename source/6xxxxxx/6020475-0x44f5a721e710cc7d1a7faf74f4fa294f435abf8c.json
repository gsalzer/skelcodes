{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\ncontract WhiteListedBasic {\r\n    function addWhiteListed(address[] addrs) external;\r\n    function removeWhiteListed(address addr) external;\r\n    function isWhiteListed(address addr) external view returns (bool);\r\n}\r\ncontract OperatableBasic {\r\n    function setMinter (address addr) external;\r\n    function setWhiteLister (address addr) external;\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract Operatable is Claimable, OperatableBasic {\r\n    address public minter;\r\n    address public whiteLister;\r\n    address public launcher;\r\n\r\n    event NewMinter(address newMinter);\r\n    event NewWhiteLister(address newwhiteLister);\r\n\r\n    modifier canOperate() {\r\n        require(msg.sender == minter || msg.sender == whiteLister || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        minter = owner;\r\n        whiteLister = owner;\r\n        launcher = owner;\r\n    }\r\n\r\n    function setMinter (address addr) external onlyOwner {\r\n        minter = addr;\r\n        emit NewMinter(minter);\r\n    }\r\n\r\n    function setWhiteLister (address addr) external onlyOwner {\r\n        whiteLister = addr;\r\n        emit NewWhiteLister(whiteLister);\r\n    }\r\n\r\n    modifier ownerOrMinter()  {\r\n        require ((msg.sender == minter) || (msg.sender == owner));\r\n        _;\r\n    }\r\n\r\n    modifier onlyLauncher()  {\r\n        require (msg.sender == launcher);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhiteLister()  {\r\n        require (msg.sender == whiteLister);\r\n        _;\r\n    }\r\n}\r\ncontract WhiteListed is Operatable, WhiteListedBasic {\r\n\r\n\r\n    uint public count;\r\n    mapping (address => bool) public whiteList;\r\n\r\n    event Whitelisted(address indexed addr, uint whitelistedCount, bool isWhitelisted);\r\n\r\n    function addWhiteListed(address[] addrs) external canOperate {\r\n        uint c = count;\r\n        for (uint i = 0; i < addrs.length; i++) {\r\n            if (!whiteList[addrs[i]]) {\r\n                whiteList[addrs[i]] = true;\r\n                c++;\r\n                emit Whitelisted(addrs[i], count, true);\r\n            }\r\n        }\r\n        count = c;\r\n    }\r\n\r\n    function removeWhiteListed(address addr) external canOperate {\r\n        require(whiteList[addr]);\r\n        whiteList[addr] = false;\r\n        count--;\r\n        emit Whitelisted(addr, count, false);\r\n    }\r\n\r\n    function isWhiteListed(address addr) external view returns (bool) {\r\n        return whiteList[addr];\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"launcher\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setWhiteLister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addWhiteListed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeWhiteListed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteLister\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"whitelistedCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"NewMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newwhiteLister\",\"type\":\"address\"}],\"name\":\"NewWhiteLister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WhiteListed","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a5134500ed306fb90907a3efaea83fc9c0b1de5f25f488008a82b75eaaf44d86"}]}