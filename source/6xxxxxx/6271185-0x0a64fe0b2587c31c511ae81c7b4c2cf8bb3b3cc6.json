{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract Extendable is Ownable {\r\n    struct ProviderItem {\r\n        uint start;\r\n        uint end;\r\n        address providerAddress;\r\n    }\r\n\r\n    uint public currentId = 10000;\r\n    uint16 public currentVersion = 0;\r\n    mapping (uint => ProviderItem) internal providers;\r\n\r\n    function upgradeProvider(address _address) \r\n        public onlyOwner returns (bool) \r\n    {\r\n        require(_address != 0x0);\r\n        require(providers[currentVersion].providerAddress != _address);\r\n\r\n        // first time\r\n        if (providers[currentVersion].providerAddress == 0x0) {\r\n            providers[currentVersion].start = currentId;\r\n            providers[currentVersion].end = 10 ** 18;\r\n            providers[currentVersion].providerAddress = _address;\r\n            return true;            \r\n        }\r\n\r\n        providers[currentVersion].end = currentId - 1;\r\n\r\n        ProviderItem memory newProvider = ProviderItem({\r\n            start: currentId,\r\n            end: 10**18,\r\n            providerAddress: _address\r\n        });\r\n\r\n        providers[++currentVersion] = newProvider;\r\n\r\n        return true;\r\n    }\r\n\r\n    function getProviderDetails(uint _version) public view returns (uint _start, uint _end, address _address) \r\n    {\r\n        ProviderItem memory provider = providers[_version];\r\n        return (provider.start, provider.end, provider.providerAddress);\r\n    }\r\n\r\n    function getProviderById(uint _id) public view returns (address) {\r\n        for (uint i = currentVersion; i >= 0; i--) {\r\n            ProviderItem memory item = providers[i];\r\n            if (item.start <= _id && item.end >= _id) {\r\n                return item.providerAddress;\r\n            }\r\n        }\r\n\r\n        return getCurrentProvider();\r\n    }\r\n\r\n    function getCurrentProvider() public view returns(address) {\r\n        return providers[currentVersion].providerAddress;\r\n    }   \r\n\r\n    function getAllProviders() public view returns (address[] memory addresses) {\r\n        addresses = new address[](currentVersion + 1);\r\n        for (uint i=0; i <= currentVersion; i++) {\r\n            addresses[i] = providers[i].providerAddress;\r\n        }\r\n\r\n        return addresses;\r\n    }\r\n\r\n    function resetCurrentIdTo(uint _newId) public onlyOwner returns (bool success) {\r\n        currentId = _newId;\r\n        return true;\r\n    }\r\n}\r\n\r\ninterface Provider {\r\n    function isBrickOwner(uint _brickId, address _address) external view returns (bool success);\r\n    function addBrick(uint _brickId, string _title, string _url, uint _expired, string _description, bytes32[] _tags, uint _value)\r\n        external returns (bool success);\r\n    function changeBrick(\r\n        uint _brickId,\r\n        string _title,\r\n        string _url,\r\n        string _description,\r\n        bytes32[] _tags,\r\n        uint _value) external returns (bool success);\r\n    function accept(uint _brickId, address[] _builderAddresses, uint[] percentages, uint _additionalValue) external returns (uint total);\r\n    function cancel(uint _brickId) external returns (uint value);\r\n    function startWork(uint _brickId, bytes32 _builderId, bytes32 _nickName, address _builderAddress) external returns(bool success);\r\n    function getBrickIds() external view returns(uint[]);\r\n    function getBrickSize() external view returns(uint);\r\n    function getBrick(uint _brickId) external view returns(\r\n        string title,\r\n        string url, \r\n        address owner,\r\n        uint value,\r\n        uint32 dateCreated,\r\n        uint32 dateCompleted, \r\n        uint32 expired,\r\n        uint status\r\n    );\r\n\r\n    function getBrickDetail(uint _brickId) external view returns(\r\n        bytes32[] tags, \r\n        string description, \r\n        uint32 builders, \r\n        address[] winners\r\n    );\r\n\r\n    function getBrickBuilders(uint _brickId) external view returns (\r\n        address[] addresses,\r\n        uint[] dates,\r\n        bytes32[] keys,\r\n        bytes32[] names\r\n    );\r\n\r\n    function filterBrick(\r\n        uint _brickId, \r\n        bytes32[] _tags, \r\n        uint _status, \r\n        uint _started,\r\n        uint _expired\r\n        ) external view returns (\r\n      bool\r\n    );\r\n\r\n\r\n    function participated( \r\n        uint _brickId,\r\n        address _builder\r\n        ) external view returns (\r\n        bool\r\n    ); \r\n}\r\n\r\n// solhint-disable-next-line compiler-fixed, compiler-gt-0_4\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract WeBuildWorld is Extendable {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant VERSION = \"0.1\";\r\n    uint public constant DENOMINATOR = 10000;\r\n    enum AddressRole { Owner, Builder }\r\n\r\n\r\n    modifier onlyBrickOwner(uint _brickId) {\r\n        require(getProvider(_brickId).isBrickOwner(_brickId, msg.sender));\r\n        _;\r\n    }\r\n\r\n    event BrickAdded (uint _brickId);\r\n    event BrickUpdated (uint _brickId);\r\n    event BrickCancelled (uint _brickId);\r\n    event WorkStarted (uint _brickId, address _builderAddress);\r\n    event WorkAccepted (uint _brickId, address[] _winners);\r\n \r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n    function getBrickIdsByOwner(address _owner) public view returns(uint[] brickIds) {\r\n        return _getBrickIdsByAddress(_owner, AddressRole.Owner);\r\n    }\r\n\r\n    function getBrickIdsByBuilder(address _builder) public view returns(uint[] brickIds) {\r\n        return _getBrickIdsByAddress(_builder, AddressRole.Builder);\r\n    }\r\n \r\n    function _getBrickIdsByAddress(\r\n        address _address,\r\n        AddressRole role\r\n      ) \r\n        private view returns(uint[] brickIds) { \r\n        address[] memory providers = getAllProviders();\r\n        uint[] memory temp; \r\n        uint total = 0;\r\n        uint index = 0; \r\n\r\n        for (uint i = providers.length; i > 0; i--) {\r\n            Provider provider = Provider(providers[i-1]);\r\n            total = total + provider.getBrickSize();  \r\n        }\r\n\r\n        brickIds = new uint[](total);  \r\n    \r\n        for(i = 0; i < providers.length; i++){\r\n            temp = provider.getBrickIds();\r\n            for (uint j = 0; j < temp.length; j++) {\r\n                bool cond = true;\r\n                if(role == AddressRole.Owner){\r\n                    cond = provider.isBrickOwner(temp[j], _address);\r\n                }else{\r\n                    cond = provider.participated(temp[j], _address);\r\n                } \r\n                if(cond){\r\n                    brickIds[index] = temp[j]; \r\n                    index++;\r\n                }\r\n            }\r\n        }\r\n\r\n        return brickIds;\r\n    }\r\n\r\n    function getBrickIds(\r\n        uint _skip,\r\n        uint _take,\r\n        bytes32[] _tags, \r\n        uint _status, \r\n        uint _started, \r\n        uint _expired\r\n        ) \r\n        public view returns(uint[] brickIds) {\r\n\r\n        address[] memory providers = getAllProviders();\r\n        uint[] memory temp;\r\n\r\n        brickIds = new uint[](_take);\r\n        uint counter = 0; \r\n        uint taken = 0;\r\n\r\n        for (uint i = providers.length; i > 0; i--) {\r\n            if (taken >= _take) {\r\n                break;\r\n            }\r\n\r\n            Provider provider = Provider(providers[i-1]);\r\n            temp = provider.getBrickIds();\r\n            \r\n            for (uint j = 0; j < temp.length; j++) { \r\n                if (taken >= _take) {\r\n                    break;\r\n                }\r\n                \r\n                bool exist = provider.filterBrick(temp[j], _tags, _status, _started, _expired);\r\n                if(exist){\r\n                    if (counter >= _skip) { \r\n                        brickIds[taken] = temp[j];                     \r\n                        taken++;\r\n                    }\r\n                    counter++;\r\n                }\r\n            }\r\n        }\r\n\r\n        return brickIds;\r\n    }\r\n\r\n    function addBrick(string _title, string _url, uint _expired, string _description, bytes32[] _tags) \r\n        public payable\r\n        returns (uint id)\r\n    {\r\n        id = getId();\r\n        require(getProvider(id).addBrick(id, _title, _url, _expired, _description, _tags, msg.value));\r\n        emit BrickAdded(id);\r\n    }\r\n\r\n    function changeBrick(uint _brickId, string _title, string _url, string _description, bytes32[] _tags) \r\n        public onlyBrickOwner(_brickId) payable\r\n        returns (bool success) \r\n    {\r\n        success = getProvider(_brickId).changeBrick(_brickId, _title, _url, _description, _tags, msg.value);\r\n        emit BrickUpdated(_brickId);\r\n\r\n        return success;\r\n    }\r\n\r\n    // msg.value is tip.\r\n    function accept(uint _brickId, address[] _winners, uint[] _weights) \r\n        public onlyBrickOwner(_brickId) \r\n        payable\r\n        returns (bool success) \r\n    {\r\n        uint total = getProvider(_brickId).accept(_brickId, _winners, _weights, msg.value);\r\n        require(total > 0);\r\n        for (uint i=0; i < _winners.length; i++) {\r\n            _winners[i].transfer(total.mul(_weights[i]).div(DENOMINATOR));    \r\n        }     \r\n\r\n        emit WorkAccepted(_brickId, _winners);\r\n        return true;   \r\n    }\r\n\r\n    function cancel(uint _brickId) \r\n        public onlyBrickOwner(_brickId) \r\n        returns (bool success) \r\n    {\r\n        uint value = getProvider(_brickId).cancel(_brickId);\r\n        require(value > 0);\r\n\r\n        msg.sender.transfer(value);  \r\n        emit BrickCancelled(_brickId);\r\n        return true;      \r\n    }    \r\n\r\n    function startWork(uint _brickId, bytes32 _builderId, bytes32 _nickName) \r\n        public returns(bool success)\r\n    {\r\n        success = getProvider(_brickId).startWork(_brickId, _builderId, _nickName, msg.sender);    \r\n        emit WorkStarted(_brickId, msg.sender);\r\n    }\r\n\r\n    function getBrick(uint _brickId) public view returns (\r\n        string title,\r\n        string url,\r\n        address owner,\r\n        uint value,\r\n        uint dateCreated,\r\n        uint dateCompleted,\r\n        uint expired,\r\n        uint status\r\n    ) {\r\n        return getProvider(_brickId).getBrick(_brickId);\r\n    }\r\n\r\n    function getBrickDetail(uint _brickId) public view returns (\r\n        bytes32[] tags,\r\n        string description,\r\n        uint32 builders,\r\n        address[] winners        \r\n    ) {\r\n        return getProvider(_brickId).getBrickDetail(_brickId);\r\n    }\r\n\r\n    function getBrickBuilders(uint _brickId) public view returns (\r\n        address[] addresses,\r\n        uint[] dates,\r\n        bytes32[] keys,\r\n        bytes32[] names\r\n    )\r\n    {\r\n        return getProvider(_brickId).getBrickBuilders(_brickId);\r\n    }\r\n\r\n    function getProvider(uint _brickId) private view returns (Provider) {\r\n        return Provider(getProviderById(_brickId));\r\n    }\r\n\r\n    function getId() private returns (uint) {\r\n        return currentId++;\r\n    }      \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"upgradeProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_skip\",\"type\":\"uint256\"},{\"name\":\"_take\",\"type\":\"uint256\"},{\"name\":\"_tags\",\"type\":\"bytes32[]\"},{\"name\":\"_status\",\"type\":\"uint256\"},{\"name\":\"_started\",\"type\":\"uint256\"},{\"name\":\"_expired\",\"type\":\"uint256\"}],\"name\":\"getBrickIds\",\"outputs\":[{\"name\":\"brickIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"getProviderDetails\",\"outputs\":[{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_end\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getProviderById\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllProviders\",\"outputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_brickId\",\"type\":\"uint256\"}],\"name\":\"getBrickDetail\",\"outputs\":[{\"name\":\"tags\",\"type\":\"bytes32[]\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"builders\",\"type\":\"uint32\"},{\"name\":\"winners\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_brickId\",\"type\":\"uint256\"},{\"name\":\"_winners\",\"type\":\"address[]\"},{\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"accept\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_brickId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_brickId\",\"type\":\"uint256\"},{\"name\":\"_builderId\",\"type\":\"bytes32\"},{\"name\":\"_nickName\",\"type\":\"bytes32\"}],\"name\":\"startWork\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBrickIdsByOwner\",\"outputs\":[{\"name\":\"brickIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_brickId\",\"type\":\"uint256\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_tags\",\"type\":\"bytes32[]\"}],\"name\":\"changeBrick\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newId\",\"type\":\"uint256\"}],\"name\":\"resetCurrentIdTo\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_builder\",\"type\":\"address\"}],\"name\":\"getBrickIdsByBuilder\",\"outputs\":[{\"name\":\"brickIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"_expired\",\"type\":\"uint256\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_tags\",\"type\":\"bytes32[]\"}],\"name\":\"addBrick\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_brickId\",\"type\":\"uint256\"}],\"name\":\"getBrickBuilders\",\"outputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"dates\",\"type\":\"uint256[]\"},{\"name\":\"keys\",\"type\":\"bytes32[]\"},{\"name\":\"names\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_brickId\",\"type\":\"uint256\"}],\"name\":\"getBrick\",\"outputs\":[{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"dateCreated\",\"type\":\"uint256\"},{\"name\":\"dateCompleted\",\"type\":\"uint256\"},{\"name\":\"expired\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_brickId\",\"type\":\"uint256\"}],\"name\":\"BrickAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_brickId\",\"type\":\"uint256\"}],\"name\":\"BrickUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_brickId\",\"type\":\"uint256\"}],\"name\":\"BrickCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_brickId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_builderAddress\",\"type\":\"address\"}],\"name\":\"WorkStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_brickId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_winners\",\"type\":\"address[]\"}],\"name\":\"WorkAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WeBuildWorld","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://786c34e34a7ce50d66db752fea52efd7ceb4f067c02f1227fdb62655cad4a929"}]}