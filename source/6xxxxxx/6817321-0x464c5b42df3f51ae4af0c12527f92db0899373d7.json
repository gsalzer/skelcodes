{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n// File: contracts\\lib\\NameFilter.sol\r\n\r\nlibrary NameFilter {\r\n    \r\n    /**\r\n     * @dev filters name strings\r\n     * -converts uppercase to lower case.  \r\n     * -makes sure it does not start/end with a space\r\n     * -makes sure it does not contain multiple spaces in a row\r\n     * -cannot be only numbers\r\n     * -cannot start with 0x \r\n     * -restricts characters to A-Z, a-z, 0-9, and space.\r\n     * @return reprocessed string in bytes32 format\r\n     */\r\n    function nameFilter(string _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n        \r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n        \r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n        \r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n                \r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    // require character is a space\r\n                    _temp[i] == 0x20 || \r\n                    // OR lowercase a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    // or 0-9\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n                \r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;    \r\n            }\r\n        }\r\n        \r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n        \r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\n// File: contracts\\lib\\SafeMath.sol\r\n\r\n/// @title SafeMath v0.1.9\r\n/// @dev Math operations with safety checks that throw on error\r\n/// change notes: original SafeMath library from OpenZeppelin modified by Inventor\r\n/// - added sqrt\r\n/// - added sq\r\n/// - added pwr \r\n/// - changed asserts to requires with error log outputs\r\n/// - removed div, its useless\r\nlibrary SafeMath {\r\n    \r\n    /// @dev Multiplies two numbers, throws on overflow.\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n\r\n    /// @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n\r\n    /// @dev Adds two numbers, throws on overflow.\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n\r\n    /// @dev gives square root of given x.\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x, 1)) / 2);\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = ((add((x / z), z)) / 2);\r\n        }\r\n    }\r\n\r\n\r\n    /// @dev gives square. multiplies x by x\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n\r\n    /// @dev x to the power of y \r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x == 0) {\r\n            return (0);\r\n        } else if (y == 0) {\r\n            return (1);\r\n        } else {\r\n            uint256 z = x;\r\n            for (uint256 i = 1; i < y; i++) {\r\n                z = mul(z,x);\r\n            }\r\n            return (z);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\lib\\Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    address public dev;\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the dev.\r\n    */\r\n    modifier onlyDev() {\r\n        require(msg.sender == dev, \"only dev\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner or dev.\r\n    */\r\n    modifier onlyDevOrOwner() {\r\n        require(msg.sender == owner || msg.sender == dev, \"only owner or dev\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set a new dev address.\r\n    * @param newDev The new dev address.\r\n    */\r\n    function setDev(address newDev) onlyOwner public {\r\n        if (newDev != address(0)) {\r\n            dev = newDev;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\interface\\BMForwarderInterface.sol\r\n\r\ninterface BMForwarderInterface {\r\n    function deposit() external payable;\r\n}\r\n\r\n// File: contracts\\BMPlayerBook.sol\r\n\r\n/// @title Contract for managing player names and affiliate payments.\r\n/// @notice This contract manages player names and affiliate payments\r\n/// from registered games. Players can buy multiple names and select\r\n/// which name to be used. Players who buy affiliate memberships can\r\n/// receive affiliate payments from registered games.\r\n/// Players can withdraw affiliate payments at any time.\r\n/// @dev The address of the forwarder is hardcoded. Check 'TODO' before\r\n/// deploy.\r\ncontract BMPlayerBook is Ownable {\r\n    using NameFilter for string;\r\n    using SafeMath for uint256;\r\n\r\n    // TODO : CHECK THE ADDRESS!!!\r\n    BMForwarderInterface private Banker_Address;\r\n\r\n    // data    \r\n    uint256 public registrationFee_ = 10 finney;            // price to register a name\r\n    uint256 public affiliateFee_ = 500 finney;              // price to become an affiliate\r\n    uint256 public pID_;        // total number of players\r\n\r\n    // (addr => pID) returns player id by address\r\n    mapping (address => uint256) public pIDxAddr_;\r\n    // (name => pID) returns player id by name\r\n    mapping (bytes32 => uint256) public pIDxName_;\r\n    // (pID => data) player data\r\n    mapping (uint256 => Player) public plyr_;\r\n    // (pID => name => bool) list of names a player owns.  (used so you can change your display name amoungst any name you own)\r\n    mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_;\r\n    // (pID => nameNum => name) list of names a player owns\r\n    mapping (uint256 => mapping (uint256 => bytes32)) public plyrNameList_;\r\n    // registered games\r\n    mapping (address => bool) public registeredGames_;\r\n\r\n\r\n    struct Player {\r\n        address addr;\r\n        bytes32 name;\r\n        bool hasAff;\r\n\r\n        uint256 aff;\r\n        uint256 withdrawnAff;\r\n\r\n        uint256 laff;\r\n        uint256 affT2;\r\n        uint256 names;\r\n    }\r\n\r\n\r\n    // constructor\r\n    constructor()\r\n        public\r\n    {\r\n        pID_ = 0;\r\n    }\r\n\r\n    // modifiers\r\n    \r\n    /// @dev prevents contracts from interacting with playerbook\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        require (_addr == tx.origin, \"Human only\");\r\n\r\n        uint256 _codeLength;\r\n        assembly { _codeLength := extcodesize(_addr) }\r\n        require(_codeLength == 0, \"Human only\");\r\n        _;\r\n    }\r\n    \r\n    /// @dev Check if caller is registered.\r\n    modifier isRegisteredGame() {\r\n        require(registeredGames_[msg.sender] == true, \"sender is not registered\");\r\n        _;\r\n    }\r\n    \r\n    // events\r\n\r\n    event onNewName\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        bool isNewPlayer,\r\n        uint256 affiliateID,\r\n        address affiliateAddress,\r\n        bytes32 affiliateName,\r\n        uint256 amountPaid,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event onNewAffiliate\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        uint256 amountPaid,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event onUseOldName\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event onGameRegistered\r\n    (\r\n        address indexed gameAddress,\r\n        bool enabled,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event onWithdraw\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        uint256 amount,\r\n        uint256 timestamp  \r\n    );\r\n\r\n    // getters:\r\n    function checkIfNameValid(string _nameStr)\r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        bytes32 _name = _nameStr.nameFilter();\r\n        if (pIDxName_[_name] == 0)\r\n            return (true);\r\n        else \r\n            return (false);\r\n    }\r\n\r\n    // public functions:\r\n    /**\r\n     * @dev registers a name.  UI will always display the last name you registered.\r\n     * but you will still own all previously registered names to use as affiliate \r\n     * links.\r\n     * - must pay a registration fee.\r\n     * - name must be unique\r\n     * - names will be converted to lowercase\r\n     * - name cannot start or end with a space \r\n     * - cannot have more than 1 space in a row\r\n     * - cannot be only numbers\r\n     * - cannot start with 0x \r\n     * - name must be at least 1 char\r\n     * - max length of 32 characters long\r\n     * - allowed characters: a-z, 0-9, and space\r\n     * -functionhash- 0x921dec21 (using ID for affiliate)\r\n     * -functionhash- 0x3ddd4698 (using address for affiliate)\r\n     * -functionhash- 0x685ffd83 (using name for affiliate)\r\n     * @param _nameString players desired name\r\n     * @param _affCode affiliate ID, address, or name of who refered you\r\n     * (this might cost a lot of gas)\r\n     */\r\n\r\n    function registerNameXID(string _nameString, uint256 _affCode)\r\n        external\r\n        payable \r\n        isHuman()\r\n    {\r\n        // make sure name fees paid\r\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\r\n        \r\n        // filter name + condition checks\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n        \r\n        // set up address \r\n        address _addr = msg.sender;\r\n        \r\n        // set up our tx event data and determine if player is new or not\r\n        bool _isNewPlayer = determinePID(_addr);\r\n        \r\n        // fetch player id\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        \r\n        // manage affiliate residuals\r\n        // if no affiliate code was given, no new affiliate code was given, or the \r\n        // player tried to use their own pID as an affiliate code, lolz\r\n        uint256 _affID = _affCode;\r\n        if (_affCode != 0 && _affCode != plyr_[_pID].laff && _affCode != _pID) \r\n        {\r\n            // update last affiliate \r\n            plyr_[_pID].laff = _affCode;\r\n        } else if (_affCode == _pID) {\r\n            _affID = 0;\r\n        }\r\n        \r\n        // register name \r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer);\r\n    }\r\n    \r\n\r\n    function registerNameXaddr(string _nameString, address _affCode)\r\n        external\r\n        payable \r\n        isHuman()\r\n    {\r\n        // make sure name fees paid\r\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\r\n        \r\n        // filter name + condition checks\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n        \r\n        // set up address \r\n        address _addr = msg.sender;\r\n        \r\n        // set up our tx event data and determine if player is new or not\r\n        bool _isNewPlayer = determinePID(_addr);\r\n        \r\n        // fetch player id\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        \r\n        // manage affiliate residuals\r\n        // if no affiliate code was given or player tried to use their own, lolz\r\n        uint256 _affID;\r\n        if (_affCode != address(0) && _affCode != _addr)\r\n        {\r\n            // get affiliate ID from aff Code \r\n            _affID = pIDxAddr_[_affCode];\r\n            \r\n            // if affID is not the same as previously stored \r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // update last affiliate\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n        \r\n        // register name \r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer);\r\n    }\r\n    \r\n\r\n    function registerNameXname(string _nameString, bytes32 _affCode)\r\n        external\r\n        payable \r\n        isHuman()\r\n    {\r\n        // make sure name fees paid\r\n        require (msg.value >= registrationFee_, \"umm.....  you have to pay the name fee\");\r\n        \r\n        // filter name + condition checks\r\n        bytes32 _name = NameFilter.nameFilter(_nameString);\r\n        \r\n        // set up address \r\n        address _addr = msg.sender;\r\n        \r\n        // set up our tx event data and determine if player is new or not\r\n        bool _isNewPlayer = determinePID(_addr);\r\n        \r\n        // fetch player id\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        \r\n        // manage affiliate residuals\r\n        // if no affiliate code was given or player tried to use their own, lolz\r\n        uint256 _affID;\r\n        if (_affCode != \"\" && _affCode != _name)\r\n        {\r\n            // get affiliate ID from aff Code \r\n            _affID = pIDxName_[_affCode];\r\n            \r\n            // if affID is not the same as previously stored \r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                // update last affiliate\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n        \r\n        // register name \r\n        registerNameCore(_pID, _addr, _affID, _name, _isNewPlayer);\r\n    }\r\n\r\n\r\n    function registerAffiliate()\r\n        external\r\n        payable\r\n        isHuman()\r\n    {\r\n        // make sure name fees paid\r\n        require (msg.value >= affiliateFee_, \"umm.....  you have to pay the name fee\");\r\n\r\n        // set up address \r\n        address _addr = msg.sender;\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        require (_pID > 0, \"you need to be registered\");\r\n        require (plyr_[_pID].hasAff == false, \"already registered as affiliate\");\r\n\r\n        Banker_Address.deposit.value(msg.value)();\r\n        plyr_[_pID].hasAff = true;\r\n\r\n        bytes32 _name = plyr_[_pID].name;\r\n\r\n        // fire event\r\n        emit onNewAffiliate(_pID, _addr, _name, msg.value, now);\r\n    }\r\n\r\n\r\n    function registerGame(address _contract, bool _enable)\r\n        external\r\n        isHuman()\r\n        onlyOwner()\r\n    {\r\n        registeredGames_[_contract] = _enable;\r\n\r\n        emit onGameRegistered(_contract, _enable, now);\r\n    }\r\n    \r\n    /**\r\n     * @dev players use this to change back to one of your old names.  tip, you'll\r\n     * still need to push that info to existing games.\r\n     * -functionhash- 0xb9291296\r\n     * @param _nameString the name you want to use \r\n     */\r\n    function useMyOldName(string _nameString)\r\n        external\r\n        isHuman()\r\n    {\r\n        // filter name, and get pID\r\n        bytes32 _name = _nameString.nameFilter();\r\n        address _addr = msg.sender;\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        \r\n        // make sure they own the name \r\n        require(plyrNames_[_pID][_name] == true, \"umm... thats not a name you own\");\r\n        \r\n        // update their current name \r\n        plyr_[_pID].name = _name;\r\n\r\n        emit onUseOldName(_pID, _addr, _name, now);\r\n    }\r\n\r\n    // deposit affiliate to a code\r\n    function depositAffiliate(uint256 _pID)\r\n        external\r\n        payable\r\n        isRegisteredGame()\r\n    {\r\n        require(plyr_[_pID].hasAff == true, \"Not registered as affiliate\");\r\n\r\n        uint256 value = msg.value;\r\n        plyr_[_pID].aff = value.add(plyr_[_pID].aff);\r\n    }\r\n\r\n    // withdraw money\r\n    function withdraw()\r\n        external\r\n        isHuman()\r\n    {\r\n        address _addr = msg.sender;\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        bytes32 _name = plyr_[_pID].name;\r\n        require(_pID != 0, \"need to be registered\");\r\n\r\n        uint256 _remainValue = (plyr_[_pID].aff).sub(plyr_[_pID].withdrawnAff);\r\n        if (_remainValue > 0) {\r\n            plyr_[_pID].withdrawnAff = plyr_[_pID].aff;\r\n            address(msg.sender).transfer(_remainValue);\r\n        }\r\n\r\n        emit onWithdraw(_pID, _addr, _name, _remainValue, now);\r\n    }\r\n    \r\n    // core logics:\r\n    function registerNameCore(uint256 _pID, address _addr, uint256 _affID, bytes32 _name, bool _isNewPlayer)\r\n        private\r\n    {\r\n        // if names already has been used, require that current msg sender owns the name\r\n        if (pIDxName_[_name] != 0)\r\n            require(plyrNames_[_pID][_name] == true, \"sorry that names already taken\");\r\n        \r\n        // add name to player profile, registry, and name book\r\n        plyr_[_pID].name = _name;\r\n        plyr_[_pID].affT2 = _affID;\r\n        pIDxName_[_name] = _pID;\r\n        if (plyrNames_[_pID][_name] == false)\r\n        {\r\n            plyrNames_[_pID][_name] = true;\r\n            plyr_[_pID].names++;\r\n            plyrNameList_[_pID][plyr_[_pID].names] = _name;\r\n        }\r\n        \r\n        // TODO: MODIFY THIS\r\n        // registration fee goes directly to community rewards\r\n        //Banker_Address.deposit.value(address(this).balance)();\r\n        Banker_Address.deposit.value(msg.value)();\r\n        \r\n        // fire event\r\n        emit onNewName(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, msg.value, now);\r\n    }\r\n\r\n    function determinePID(address _addr)\r\n        private\r\n        returns (bool)\r\n    {\r\n        if (pIDxAddr_[_addr] == 0)\r\n        {\r\n            pID_++;\r\n            pIDxAddr_[_addr] = pID_;\r\n            plyr_[pID_].addr = _addr;\r\n            \r\n            // set the new player bool to true\r\n            return (true);\r\n        } else {\r\n            return (false);\r\n        }\r\n    }\r\n\r\n    // external calls:\r\n    function getPlayerID(address _addr)\r\n        external\r\n        isRegisteredGame()\r\n        returns (uint256)\r\n    {\r\n        determinePID(_addr);\r\n        return (pIDxAddr_[_addr]);\r\n    }\r\n\r\n    function getPlayerName(uint256 _pID)\r\n        external\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return (plyr_[_pID].name);\r\n    }\r\n\r\n    function getPlayerLAff(uint256 _pID)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (plyr_[_pID].laff);\r\n    }\r\n\r\n    function setPlayerLAff(uint256 _pID, uint256 _lAff)\r\n        external\r\n        isRegisteredGame()\r\n    {\r\n        if (_pID != _lAff && plyr_[_pID].laff != _lAff) {\r\n            plyr_[_pID].laff = _lAff;\r\n        }\r\n    }\r\n\r\n    function getPlayerAffT2(uint256 _pID)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (plyr_[_pID].affT2);\r\n    }\r\n\r\n    function getPlayerAddr(uint256 _pID)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        return (plyr_[_pID].addr);\r\n    }\r\n\r\n    function getPlayerHasAff(uint256 _pID)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (plyr_[_pID].hasAff);\r\n    }\r\n\r\n    function getNameFee()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return(registrationFee_);\r\n    }\r\n\r\n    function getAffiliateFee()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (affiliateFee_);\r\n    }\r\n    \r\n    function setRegistrationFee(uint256 _fee)\r\n        external\r\n        onlyOwner()\r\n    {\r\n        registrationFee_ = _fee;\r\n    }\r\n\r\n    function setAffiliateFee(uint256 _fee)\r\n        external\r\n        onlyOwner()\r\n    {\r\n        affiliateFee_ = _fee;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer Banker_Address to a new banker.\r\n    * @param banker The address to transfer Banker_Address to.\r\n    */\r\n    function transferBanker(BMForwarderInterface banker) \r\n        public\r\n        onlyOwner()\r\n    {\r\n        if (banker != address(0)) {\r\n            Banker_Address = banker;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"bytes32\"}],\"name\":\"registerNameXname\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registrationFee_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"banker\",\"type\":\"address\"}],\"name\":\"transferBanker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNameFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"plyrNames_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"address\"}],\"name\":\"registerNameXaddr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerAffT2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"registerGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_lAff\",\"type\":\"uint256\"}],\"name\":\"setPlayerLAff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nameStr\",\"type\":\"string\"}],\"name\":\"checkIfNameValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliateFee_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setAffiliateFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerHasAff\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrNameList_\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"}],\"name\":\"useMyOldName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"depositAffiliate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerAffiliate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setRegistrationFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDev\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAffiliateFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"registeredGames_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"hasAff\",\"type\":\"bool\"},{\"name\":\"aff\",\"type\":\"uint256\"},{\"name\":\"withdrawnAff\",\"type\":\"uint256\"},{\"name\":\"laff\",\"type\":\"uint256\"},{\"name\":\"affT2\",\"type\":\"uint256\"},{\"name\":\"names\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerLAff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"uint256\"}],\"name\":\"registerNameXID\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isNewPlayer\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"affiliateID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliateName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onNewName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onNewAffiliate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onUseOldName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onGameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"}]","ContractName":"BMPlayerBook","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d29f450b3dac1cc4c18dafa23ece3591a30f5c101625fc442dff819409bc1288"}]}