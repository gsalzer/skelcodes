{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// EnsSubdomainFactory - allows creating and configuring custom ENS subdomains with one contract call.\r\n//\r\n// (c) Radek Ostrowski / https://startonchain.com - The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n* @title EnsRegistry\r\n* @dev Extract of the interface for ENS Registry\r\n*/\r\ncontract EnsRegistry {\r\n\tfunction setOwner(bytes32 node, address owner) public;\r\n\tfunction setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\r\n\tfunction setResolver(bytes32 node, address resolver) public;\r\n}\r\n\r\n/**\r\n* @title EnsResolver\r\n* @dev Extract of the interface for ENS Resolver\r\n*/\r\ncontract EnsResolver {\r\n\tfunction setAddr(bytes32 node, address addr) public;\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a new owner.\r\n   * @param _owner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _owner) public onlyOwner {\r\n    require(_owner != address(0));\r\n    owner = _owner;\r\n    emit OwnershipTransferred(owner, _owner);\r\n  }\r\n}\r\n\r\n/**\r\n* @title EnsSubdomainFactory\r\n* @dev Allows to create and configure a subdomain for Ethereum ENS in one call.\r\n* After deploying this contract, change the owner of the top level domain you want to use\r\n* to this deployed contract address.\r\n*/\r\ncontract EnsSubdomainFactory is Ownable {\r\n\tEnsRegistry public registry = EnsRegistry(0x314159265dD8dbb310642f98f50C066173C1259b);\r\n\tEnsResolver public resolver = EnsResolver(0x5FfC014343cd971B7eb70732021E26C35B744cc4);\r\n\r\n\tevent SubdomainCreated(bytes32 indexed subdomain, address indexed owner);\r\n\r\n\tconstructor() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev The owner can take away the ownership of any top level domain owned by this contract.\r\n\t*/\r\n\tfunction setDomainOwner(bytes32 _node, address _owner) onlyOwner public {\r\n\t\tregistry.setOwner(_node, _owner);\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Allows to create a subdomain, set its resolver and set its target address\r\n\t* @param _node - namehash of parent domain name e.g. namehash(\"startonchain.eth\")\r\n\t* @param _subnode - namehash of sub with parent domain name e.g. namehash(\"radek.startonchain.eth\")\r\n\t* @param _label - hash of subdomain name only e.g. \"radek\"\r\n\t* @param _owner - address that will become owner of this new subdomain\r\n\t* @param _target - address that this new domain will resolve to\r\n\t*/\r\n\tfunction newSubdomain(bytes32 _node, bytes32 _subnode, bytes32 _label, address _owner, address _target) public {\r\n\t\t//create new subdomain, temporarily this smartcontract is the owner\r\n\t\tregistry.setSubnodeOwner(_node, _label, address(this));\r\n\t\t//set public resolver for this domain\r\n\t\tregistry.setResolver(_subnode, resolver);\r\n\t\t//set the destination address\r\n\t\tresolver.setAddr(_subnode, _target);\r\n\t\t//change the ownership back to requested owner\r\n\t\tregistry.setOwner(_subnode, _owner);\r\n\t\temit SubdomainCreated(_label, _owner);\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setDomainOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_node\",\"type\":\"bytes32\"},{\"name\":\"_subnode\",\"type\":\"bytes32\"},{\"name\":\"_label\",\"type\":\"bytes32\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"newSubdomain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"subdomain\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SubdomainCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EnsSubdomainFactory","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c5df441c33ff1ac4c993b8d0549e1d2abf14f5fd5a8055942a6975960f06e613"}]}