{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ContractReceiver {\r\n  struct TKN {\r\n    address sender;\r\n    uint value;\r\n    bytes data;\r\n    bytes4 sig;\r\n  }\r\n\r\n  function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n    TKN memory tkn;\r\n    tkn.sender = _from;\r\n    tkn.value = _value;\r\n    tkn.data = _data;\r\n    uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\r\n    tkn.sig = bytes4(u);\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC223 {\r\n  uint public totalSupply;\r\n\r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function decimals() public view returns (uint8 _decimals);\r\n  function totalSupply() public view returns (uint256 _supply);\r\n  function balanceOf(address who) public view returns (uint);\r\n\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) public returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\r\n  event Transfer(address indexed _from, address indexed _to, uint _value, bytes indexed _data);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\ncontract BintechToken is ERC223, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  string public name = \"BintechToken\";\r\n  string public symbol = \"BTT\";\r\n  uint8 public decimals = 8;\r\n  uint256 public initialSupply = 2e8 * 1e8;\r\n  uint256 public totalSupply;\r\n  uint256 public distributeAmount = 0;\r\n  bool public mintingFinished = false;\r\n  \r\n  mapping (address => uint) balances;\r\n  mapping (address => bool) public frozenAccount;\r\n  mapping (address => uint256) public unlockUnixTime;\r\n\r\n  event FrozenFunds(address indexed target, bool frozen);\r\n  event LockedFunds(address indexed target, uint256 locked);\r\n  event Burn(address indexed burner, uint256 value);\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  constructor() public {\r\n    totalSupply = initialSupply;\r\n    balances[msg.sender] = totalSupply;\r\n  }\r\n\r\n  function name() public view returns (string _name) {\r\n      return name;\r\n  }\r\n\r\n  function symbol() public view returns (string _symbol) {\r\n      return symbol;\r\n  }\r\n\r\n  function decimals() public view returns (uint8 _decimals) {\r\n      return decimals;\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256 _totalSupply) {\r\n      return totalSupply;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  modifier onlyPayloadSize(uint256 size){\r\n    assert(msg.data.length >= size + 4);\r\n    _;\r\n  }\r\n\r\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\r\n    require(_value > 0\r\n            && frozenAccount[msg.sender] == false\r\n            && frozenAccount[_to] == false\r\n            && now > unlockUnixTime[msg.sender]\r\n            && now > unlockUnixTime[_to]);\r\n\r\n    if(isContract(_to)) {\r\n        if (balanceOf(msg.sender) < _value) revert();\r\n        balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\r\n        balances[_to] = SafeMath.add(balanceOf(_to), _value);\r\n        assert(_to.call.value(0)(bytes4(keccak256(abi.encodePacked(_custom_fallback))), msg.sender, _value, _data));\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n  }\r\n\r\n  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\r\n    require(_value > 0\r\n            && frozenAccount[msg.sender] == false\r\n            && frozenAccount[_to] == false\r\n            && now > unlockUnixTime[msg.sender]\r\n            && now > unlockUnixTime[_to]);\r\n\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, _data);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n  }\r\n\r\n  function transfer(address _to, uint _value) public returns (bool success) {\r\n    require(_value > 0\r\n            && frozenAccount[msg.sender] == false\r\n            && frozenAccount[_to] == false\r\n            && now > unlockUnixTime[msg.sender]\r\n            && now > unlockUnixTime[_to]);\r\n\r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, empty);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, empty);\r\n    }\r\n  }\r\n\r\n  function isContract(address _addr) private view returns (bool is_contract) {\r\n    uint length;\r\n    assembly {\r\n      length := extcodesize(_addr)\r\n    }\r\n    return (length>0);\r\n  }\r\n\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\r\n    balances[_to] = SafeMath.add(balanceOf(_to), _value);\r\n    emit Transfer(msg.sender, _to, _value, _data);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\r\n    balances[_to] = SafeMath.add(balanceOf(_to), _value);\r\n    ContractReceiver receiver = ContractReceiver(_to);\r\n    receiver.tokenFallback(msg.sender, _value, _data);\r\n    emit Transfer(msg.sender, _to, _value, _data);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function freezeAccounts(address[] targets, bool isFrozen) onlyOwner public {\r\n    require(targets.length > 0);\r\n\r\n    for (uint i = 0; i < targets.length; i++) {\r\n      require(targets[i] != 0x0);\r\n      frozenAccount[targets[i]] = isFrozen;\r\n      emit FrozenFunds(targets[i], isFrozen);\r\n    }\r\n  }\r\n\r\n  function lockupAccounts(address[] targets, uint[] unixTimes) onlyOwner public {\r\n    require(targets.length > 0\r\n            && targets.length == unixTimes.length);\r\n\r\n    for(uint i = 0; i < targets.length; i++){\r\n      require(unlockUnixTime[targets[i]] < unixTimes[i]);\r\n      unlockUnixTime[targets[i]] = unixTimes[i];\r\n      emit LockedFunds(targets[i], unixTimes[i]);\r\n    }\r\n  }\r\n\r\n  function burn(address _from, uint256 _unitAmount) onlyOwner public {\r\n    require(_unitAmount > 0\r\n            && balanceOf(_from) >= _unitAmount);\r\n\r\n    balances[_from] = SafeMath.sub(balances[_from], _unitAmount);\r\n    totalSupply = SafeMath.sub(totalSupply, _unitAmount);\r\n    emit Burn(_from, _unitAmount);\r\n  }\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function mint(address _to, uint256 _unitAmount) onlyOwner canMint public returns (bool) {\r\n    require(_unitAmount > 0);\r\n\r\n    totalSupply = SafeMath.add(totalSupply, _unitAmount);\r\n    balances[_to] = SafeMath.add(balances[_to], _unitAmount);\r\n    emit Mint(_to, _unitAmount);\r\n    emit Transfer(address(0), _to, _unitAmount);\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n\r\n  function distributeTokens(address[] addresses, uint256 amount) public returns (bool) {\r\n    require(amount > 0\r\n            && addresses.length > 0\r\n            && frozenAccount[msg.sender] == false\r\n            && now > unlockUnixTime[msg.sender]);\r\n\r\n    amount = SafeMath.mul(amount, 1e8);\r\n    uint256 totalAmount = SafeMath.mul(amount, addresses.length);\r\n    require(balances[msg.sender] >= totalAmount);\r\n\r\n    for (uint i = 0; i < addresses.length; i++) {\r\n      require(addresses[i] != 0x0\r\n              && frozenAccount[addresses[i]] == false\r\n              && now > unlockUnixTime[addresses[i]]);\r\n\r\n      balances[addresses[i]] = SafeMath.add(balances[addresses[i]], amount);\r\n      emit Transfer(msg.sender, addresses[i], amount);\r\n    }\r\n    balances[msg.sender] = SafeMath.sub(balances[msg.sender], totalAmount);\r\n    return true;\r\n  }\r\n  \r\n  function distributeTokens(address[] addresses, uint[] amounts) public returns (bool) {\r\n    require(addresses.length > 0\r\n            && addresses.length == amounts.length\r\n            && frozenAccount[msg.sender] == false\r\n            && now > unlockUnixTime[msg.sender]);\r\n\r\n    uint256 totalAmount = 0;\r\n        \r\n    for(uint i = 0; i < addresses.length; i++){\r\n      require(amounts[i] > 0\r\n      && addresses[i] != 0x0\r\n      && frozenAccount[addresses[i]] == false\r\n      && now > unlockUnixTime[addresses[i]]);\r\n      \r\n      amounts[i] = amounts[i].mul(1e8);\r\n      totalAmount = SafeMath.add(totalAmount, amounts[i]);\r\n    }\r\n    require(balances[msg.sender] >= totalAmount);\r\n        \r\n    for (i = 0; i < addresses.length; i++) {\r\n      balances[addresses[i]] = SafeMath.add(balances[addresses[i]], amounts[i]);\r\n      emit Transfer(msg.sender, addresses[i], amounts[i]);\r\n    }\r\n    balances[msg.sender] = balances[msg.sender].sub(totalAmount);\r\n    return true;\r\n  }\r\n\r\n  function collectTokens(address[] addresses, uint[] amounts) onlyOwner public returns (bool) {\r\n    require(addresses.length > 0\r\n            && addresses.length == amounts.length);\r\n\r\n    uint256 totalAmount = 0;\r\n\r\n    for (uint i = 0; i < addresses.length; i++) {\r\n      require(amounts[i] > 0\r\n              && addresses[i] != 0x0\r\n              && frozenAccount[addresses[i]] == false\r\n              && now > unlockUnixTime[addresses[i]]);\r\n\r\n      amounts[i] = SafeMath.mul(amounts[i], 1e8);\r\n      require(balances[addresses[i]] >= amounts[i]);\r\n      balances[addresses[i]] = SafeMath.sub(balances[addresses[i]], amounts[i]);\r\n      totalAmount = SafeMath.add(totalAmount, amounts[i]);\r\n      emit Transfer(addresses[i], msg.sender, amounts[i]);\r\n    }\r\n    balances[msg.sender] = SafeMath.add(balances[msg.sender], totalAmount);\r\n    return true;\r\n  }\r\n\r\n  function setDistributeAmount(uint256 _unitAmount) onlyOwner public {\r\n    distributeAmount = _unitAmount;\r\n  }\r\n\r\n  function autoDistribute() payable public {\r\n    require(distributeAmount > 0\r\n            && balanceOf(owner) >= distributeAmount\r\n            && frozenAccount[msg.sender] == false\r\n            && now > unlockUnixTime[msg.sender]);\r\n    if (msg.value > 0) owner.transfer(msg.value);\r\n    \r\n    balances[owner] = SafeMath.sub(balances[owner], distributeAmount);\r\n    balances[msg.sender] = SafeMath.add(balances[msg.sender], distributeAmount);\r\n    emit Transfer(owner, msg.sender, distributeAmount);\r\n  }\r\n\r\n  function() payable public {\r\n    autoDistribute();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"distributeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"unixTimes\",\"type\":\"uint256[]\"}],\"name\":\"lockupAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"autoDistribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"targets\",\"type\":\"address[]\"},{\"name\":\"isFrozen\",\"type\":\"bool\"}],\"name\":\"freezeAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockUnixTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_unitAmount\",\"type\":\"uint256\"}],\"name\":\"setDistributeAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"collectTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_custom_fallback\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked\",\"type\":\"uint256\"}],\"name\":\"LockedFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BintechToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://01c0addc80dd91f0e0d69897d279db6f9f648eacc1456b6b13530195d6215087"}]}