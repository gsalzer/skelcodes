{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Scouting module for tokenstars.com\r\n * @dev scouting logic\r\n */\r\ncontract Scouting is Ownable {\r\n    using SafeMath for uint32;\r\n    \r\n    struct TalentData {\r\n        uint8 eventName; // only 4,5,6,9,10,12\r\n        string data;\r\n    }\r\n    struct TalentInfo {\r\n        uint32 scoutId;\r\n        uint8 numData;\r\n        mapping (uint8 => TalentData) data;\r\n    }\r\n    mapping (uint32 => TalentInfo) talents;\r\n    mapping (uint8 => string) eventNames;\r\n    \r\n    event playerSubmitted(\r\n        uint32 indexed _talentId, \r\n        uint32 indexed _scoutId, \r\n        string _data\r\n    );\r\n    \r\n    event playerAssessed(\r\n        uint32 indexed _talentId, \r\n        uint32 indexed _scoutId, \r\n        string _data\r\n    );\r\n    \r\n    event playerRejected(\r\n        uint32 indexed _talentId, \r\n        uint32 indexed _scoutId, \r\n        string _data\r\n    );\r\n    \r\n    event playerVotepro(\r\n        uint32 indexed _talentId, \r\n        uint32 indexed _scoutId, \r\n        string _data\r\n    );\r\n    \r\n    event playerVotecontra(\r\n        uint32 indexed _talentId, \r\n        uint32 indexed _scoutId, \r\n        string _data\r\n    );\r\n    \r\n    \r\n    event playerSupportContracted(\r\n        uint32 indexed _talentId, \r\n        uint32 indexed _scoutId, \r\n        string _data\r\n    );\r\n    \r\n    constructor() public{\r\n        eventNames[4] = \"player_submitted\";\r\n        eventNames[5] = \"player_assessed\";\r\n        eventNames[6] = \"player_rejected\";\r\n        eventNames[9] = \"player_votepro\";\r\n        eventNames[10] = \"player_votecontra\";\r\n        eventNames[12] = \"player_support_contracted\";\r\n    }\r\n    \r\n    /**\r\n     * @dev Function add talent by owner contract\r\n     * @param talentId in tokenstars platform\r\n     * @param data information talent\r\n     */\r\n    function addTalent(uint32 talentId, uint32 scoutId, uint8 eventName, string data) public onlyOwner{\r\n        if(eventName == 4 || eventName == 5 || eventName == 6 || eventName == 9 || eventName == 10 || eventName == 12){\r\n            if(talents[talentId].scoutId == 0){\r\n                talents[talentId] = TalentInfo(scoutId, 0);\r\n                fillData(talentId, eventName, data);\r\n            }\r\n            else{\r\n                fillData(talentId, eventName, data);\r\n            }    \r\n        }\r\n    }\r\n    \r\n    function fillData(uint32 talentId, uint8 eventName, string data) private onlyOwner{\r\n        TalentInfo storage ti = talents[talentId];\r\n        ti.data[ti.numData++] =  TalentData(eventName, data);\r\n        \r\n        // player_submitted\r\n        if(eventName == 4){\r\n            emit playerSubmitted(talentId, ti.scoutId, data);\r\n        }\r\n        else{\r\n           // player_assessed\r\n            if(eventName == 5){   \r\n                emit playerAssessed(talentId, ti.scoutId, data);\r\n           }\r\n           else{\r\n              // player_rejected\r\n              if(eventName == 6){\r\n                emit playerRejected(talentId, ti.scoutId, data);\r\n               }\r\n               else{\r\n                   // player_votepro\r\n                   if(eventName == 9){\r\n                    emit playerVotepro(talentId, ti.scoutId, data);\r\n                   }\r\n                   else{\r\n                      // player_votecontra\r\n                        if(eventName == 10){  \r\n                        emit playerVotecontra(talentId, ti.scoutId, data);\r\n                       }\r\n                       else{\r\n                          // player_support_contracted\r\n                          if(eventName == 12){  \r\n                            emit playerSupportContracted(talentId, ti.scoutId, data);\r\n                           }  \r\n                       } \r\n                   } \r\n               }  \r\n           } \r\n        }\r\n    }\r\n   \r\n    \r\n    /**\r\n     * @dev Function view talent\r\n     * @param _talentId in tokenstars platform\r\n     * @return data\r\n     */\r\n    function viewTalent(uint32 _talentId) public constant returns (uint talentId, uint scoutId, uint8 countRecords, string eventName, string data) {\r\n        return (\r\n            _talentId, \r\n            talents[_talentId].scoutId, \r\n            talents[_talentId].numData, \r\n            eventNames[talents[_talentId].data[talents[_talentId].numData-1].eventName], \r\n            talents[_talentId].data[talents[_talentId].numData-1].data\r\n            );\r\n    }\r\n    \r\n    function viewTalentNum(uint32 talentId, uint8 numData) public constant returns (uint _talentId, uint scoutId, string eventName, string data) {\r\n        return (\r\n            talentId, \r\n            talents[talentId].scoutId, \r\n            eventNames[talents[talentId].data[numData].eventName], \r\n            talents[talentId].data[numData].data\r\n            );\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"talentId\",\"type\":\"uint32\"},{\"name\":\"scoutId\",\"type\":\"uint32\"},{\"name\":\"eventName\",\"type\":\"uint8\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"addTalent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_talentId\",\"type\":\"uint32\"}],\"name\":\"viewTalent\",\"outputs\":[{\"name\":\"talentId\",\"type\":\"uint256\"},{\"name\":\"scoutId\",\"type\":\"uint256\"},{\"name\":\"countRecords\",\"type\":\"uint8\"},{\"name\":\"eventName\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"talentId\",\"type\":\"uint32\"},{\"name\":\"numData\",\"type\":\"uint8\"}],\"name\":\"viewTalentNum\",\"outputs\":[{\"name\":\"_talentId\",\"type\":\"uint256\"},{\"name\":\"scoutId\",\"type\":\"uint256\"},{\"name\":\"eventName\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_talentId\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_scoutId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"playerSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_talentId\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_scoutId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"playerAssessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_talentId\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_scoutId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"playerRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_talentId\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_scoutId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"playerVotepro\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_talentId\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_scoutId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"playerVotecontra\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_talentId\",\"type\":\"uint32\"},{\"indexed\":true,\"name\":\"_scoutId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"playerSupportContracted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Scouting","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://544a89f3e876a4bb0c49d7a7fb8d10388240badae59718de3cd370f51a268696"}]}