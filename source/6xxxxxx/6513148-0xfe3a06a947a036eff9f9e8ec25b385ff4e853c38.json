{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() public onlyPendingOwner {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Claimable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n/**\r\n * @title JZMLock\r\n * @author http://jzm.one\r\n * @dev JZMLock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract JZMLock {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n  uint256 public releaseTime;\r\n\r\n  constructor(\r\n    ERC20Basic _token,\r\n    address _beneficiary,\r\n    uint256 _releaseTime\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(_releaseTime > block.timestamp);\r\n    token = _token;\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by JZMLock to beneficiary.\r\n   */\r\n  function release() public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= releaseTime);\r\n    uint256 amount = token.balanceOf(address(this));\r\n    require(amount > 0);\r\n    token.safeTransfer(beneficiary, amount);\r\n  }\r\n  \r\n  function canRelease() public view returns (bool){\r\n    return block.timestamp >= releaseTime;\r\n  }\r\n}\r\n\r\n/**\r\n * @title JZMToken\r\n * @author http://jzm.one\r\n * @dev JZMToken is a token that provide lock function\r\n */\r\ncontract JZMToken is PausableToken {\r\n\r\n    event TransferWithLock(address indexed from, address indexed to, address indexed locked, uint256 amount, uint256 releaseTime);\r\n    \r\n    mapping (address => address[] ) public balancesLocked;\r\n\r\n    function transferWithLock(address _to, uint256 _amount, uint256 _releaseTime) public returns (bool) {\r\n        JZMLock lock = new JZMLock(this, _to, _releaseTime);\r\n        transfer(address(lock), _amount);\r\n        balancesLocked[_to].push(lock);\r\n        emit TransferWithLock(msg.sender, _to, address(lock), _amount, _releaseTime);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the locked balance of the specified address.\r\n     * @param _owner The address to query the locked balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOfLocked(address _owner) public view returns (uint256) {\r\n        address[] memory lockTokenAddrs = balancesLocked[_owner];\r\n\r\n        uint256 totalLockedBalance = 0;\r\n        for (uint i = 0; i < lockTokenAddrs.length; i++) {\r\n            totalLockedBalance = totalLockedBalance.add(balances[lockTokenAddrs[i]]);\r\n        }\r\n        \r\n        return totalLockedBalance;\r\n    }\r\n\r\n    function releaseToken(address _owner) public returns (bool) {\r\n        address[] memory lockTokenAddrs = balancesLocked[_owner];\r\n        for (uint i = 0; i < lockTokenAddrs.length; i++) {\r\n            JZMLock lock = JZMLock(lockTokenAddrs[i]);\r\n            if (lock.canRelease() && balanceOf(lock)>0) {\r\n                lock.release();\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title TUToken\r\n * @dev Trust Union Token Contract\r\n */\r\ncontract TUToken is JZMToken {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"Trust Union\";\r\n    string public constant symbol = \"TUT\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 private constant TOKEN_UNIT = 10 ** uint256(decimals);\r\n    uint256 private constant INITIAL_SUPPLY = (10 ** 9) * TOKEN_UNIT;\r\n\r\n    //init wallet address\r\n    address private constant ADDR_MARKET          = 0xEd3998AA7F255Ade06236776f9FD429eECc91357;\r\n    address private constant ADDR_FOUNDTEAM       = 0x1867812567f42e2Da3C572bE597996B1309593A7;\r\n    address private constant ADDR_ECO             = 0xF7549be7449aA2b7D708d39481fCBB618C9Fb903;\r\n    address private constant ADDR_PRIVATE_SALE    = 0x252c4f77f1cdCCEBaEBbce393804F4c8f3D5703D;\r\n    address private constant ADDR_SEED_INVESTOR   = 0x03a59D08980A5327a958860e346d020ec8bb33dC;\r\n    address private constant ADDR_FOUNDATION      = 0xC138d62b3E34391964852Cf712454492DC7eFF68;\r\n\r\n    //init supply for market = 5%\r\n    uint256 private constant S_MARKET_TOTAL = INITIAL_SUPPLY * 5 / 100;\r\n    uint256 private constant S_MARKET_20181030 = 5000000  * TOKEN_UNIT;\r\n    uint256 private constant S_MARKET_20190130 = 10000000 * TOKEN_UNIT;\r\n    uint256 private constant S_MARKET_20190430 = 15000000 * TOKEN_UNIT;\r\n    uint256 private constant S_MARKET_20190730 = 20000000 * TOKEN_UNIT;\r\n\r\n    //init supply for founding team = 15%\r\n    uint256 private constant S_FOUNDTEAM_TOTAL = INITIAL_SUPPLY * 15 / 100;\r\n    uint256 private constant S_FOUNDTEAM_20191030 = INITIAL_SUPPLY * 5 / 100;\r\n    uint256 private constant S_FOUNDTEAM_20200430 = INITIAL_SUPPLY * 5 / 100;\r\n    uint256 private constant S_FOUNDTEAM_20201030 = INITIAL_SUPPLY * 5 / 100;\r\n\r\n    //init supply for ecological incentive = 40%\r\n    uint256 private constant S_ECO_TOTAL = INITIAL_SUPPLY * 40 / 100;\r\n    uint256 private constant S_ECO_20190401 = 45000000 * TOKEN_UNIT;\r\n    uint256 private constant S_ECO_20191001 = 45000000 * TOKEN_UNIT;\r\n    uint256 private constant S_ECO_20200401 = 40000000 * TOKEN_UNIT;\r\n    uint256 private constant S_ECO_20201001 = 40000000 * TOKEN_UNIT;\r\n    uint256 private constant S_ECO_20210401 = 35000000 * TOKEN_UNIT;\r\n    uint256 private constant S_ECO_20211001 = 35000000 * TOKEN_UNIT;\r\n    uint256 private constant S_ECO_20220401 = 30000000 * TOKEN_UNIT;\r\n    uint256 private constant S_ECO_20221001 = 30000000 * TOKEN_UNIT;\r\n    uint256 private constant S_ECO_20230401 = 25000000 * TOKEN_UNIT;\r\n    uint256 private constant S_ECO_20231001 = 25000000 * TOKEN_UNIT;\r\n    uint256 private constant S_ECO_20240401 = 25000000 * TOKEN_UNIT;\r\n    uint256 private constant S_ECO_20241001 = 25000000 * TOKEN_UNIT;\r\n\r\n    //init supply for private sale = 10%\r\n    uint256 private constant S_PRIVATE_SALE = INITIAL_SUPPLY * 10 / 100;\r\n\r\n    //init supply for seed investor = 10%\r\n    uint256 private constant S_SEED_INVESTOR = INITIAL_SUPPLY * 10 / 100;\r\n\r\n    //init supply for foundation = 20%\r\n    uint256 private constant S_FOUNDATION = INITIAL_SUPPLY * 20 / 100;\r\n    \r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[owner] = totalSupply_;\r\n\r\n        _initWallet();\r\n        _invokeLockLogic();\r\n    }\r\n\r\n    /**\r\n     * @dev init the wallets\r\n     */\r\n    function _initWallet() internal onlyOwner {\r\n        transfer(ADDR_PRIVATE_SALE, S_PRIVATE_SALE);\r\n        transfer(ADDR_SEED_INVESTOR, S_SEED_INVESTOR);\r\n        transfer(ADDR_FOUNDATION, S_FOUNDATION);\r\n    }\r\n\r\n    /**\r\n     * @dev invoke lock logic\r\n     */\r\n    function _invokeLockLogic() internal onlyOwner {\r\n        //lock for market\r\n        //2018/10/30 0:00:00 UTC +8\r\n        transferWithLock(ADDR_MARKET, S_MARKET_20181030, 1540828800);\r\n        //2019/01/30 0:00:00 UTC +8\r\n        transferWithLock(ADDR_MARKET, S_MARKET_20190130, 1548777600); \r\n        //2019/04/30 0:00:00 UTC +8     \r\n        transferWithLock(ADDR_MARKET, S_MARKET_20190430, 1556553600);\r\n        //2019/07/30 0:00:00 UTC +8\r\n        transferWithLock(ADDR_MARKET, S_MARKET_20190730, 1564416000);\r\n        \r\n        //lock for found team\r\n        //2019/10/30 0:00:00 UTC +8\r\n        transferWithLock(ADDR_FOUNDTEAM, S_FOUNDTEAM_20191030, 1572364800);\r\n        //2020/04/30 0:00:00 UTC +8\r\n        transferWithLock(ADDR_FOUNDTEAM, S_FOUNDTEAM_20200430, 1588176000);\r\n        //2020/10/30 0:00:00 UTC +8\r\n        transferWithLock(ADDR_FOUNDTEAM, S_FOUNDTEAM_20201030, 1603987200);\r\n        \r\n        //lock for eco\r\n        //2019/04/01 0:00:00 UTC +8\r\n        transferWithLock(ADDR_ECO, S_ECO_20190401, 1554048000);\r\n        //2019/10/01 0:00:00 UTC +8\r\n        transferWithLock(ADDR_ECO, S_ECO_20191001, 1569859200);\r\n        //2020/04/01 0:00:00 UTC +8\r\n        transferWithLock(ADDR_ECO, S_ECO_20200401, 1585670400);\r\n        //2020/10/01 0:00:00 UTC +8\r\n        transferWithLock(ADDR_ECO, S_ECO_20201001, 1601481600);\r\n        //2021/04/01 0:00:00 UTC +8\r\n        transferWithLock(ADDR_ECO, S_ECO_20210401, 1617206400);\r\n        //2021/10/01 0:00:00 UTC +8\r\n        transferWithLock(ADDR_ECO, S_ECO_20211001, 1633017600);\r\n        //2022/04/01 0:00:00 UTC +8\r\n        transferWithLock(ADDR_ECO, S_ECO_20220401, 1648742400);\r\n        //2022/10/01 0:00:00 UTC +8\r\n        transferWithLock(ADDR_ECO, S_ECO_20221001, 1664553600);\r\n        //2023/04/01 0:00:00 UTC +8\r\n        transferWithLock(ADDR_ECO, S_ECO_20230401, 1680278400);\r\n        //2023/10/01 0:00:00 UTC +8\r\n        transferWithLock(ADDR_ECO, S_ECO_20231001, 1696089600);\r\n        //2024/04/01 0:00:00 UTC +8\r\n        transferWithLock(ADDR_ECO, S_ECO_20240401, 1711900800);\r\n        //2024/10/01 0:00:00 UTC +8\r\n        transferWithLock(ADDR_ECO, S_ECO_20241001, 1727712000);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"transferWithLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"releaseToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOfLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balancesLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"locked\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"TransferWithLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"TUToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://727727fb73bf248cbca65afadbb15bf06410b669b29755c12e76747bf11b56ff"}]}