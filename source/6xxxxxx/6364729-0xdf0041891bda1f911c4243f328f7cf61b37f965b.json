{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract BoostoToken is StandardToken {\r\n    using SafeMath for uint256;\r\n\r\n    struct HourlyReward{\r\n        uint passedHours;\r\n        uint percent;\r\n    }\r\n\r\n    string public name = \"Boosto\";\r\n    string public symbol = \"BST\";\r\n    uint8 public decimals = 18;\r\n\r\n    // 1B total supply\r\n    uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);\r\n    \r\n    uint256 public totalRaised; // total ether raised (in wei)\r\n\r\n    uint256 public startTimestamp; // timestamp after which ICO will start\r\n    \r\n    // 1 month = 1 * 30 * 24 * 60 * 60\r\n    uint256 public durationSeconds;\r\n\r\n    // the ICO ether max cap (in wei)\r\n    uint256 public maxCap;\r\n\r\n    \r\n     // Minimum Transaction Amount(0.1 ETH)\r\n    uint256 public minAmount = 0.1 ether;\r\n\r\n    // 1 ETH = X BST\r\n    uint256 public coinsPerETH = 1000;\r\n\r\n    /**\r\n     * hourlyRewards[hours from start timestamp] = percent\r\n     * for example hourlyRewards[10] = 20 -- 20% more coins for first 10 hoours after ICO start\r\n     */\r\n    HourlyReward[] public hourlyRewards;\r\n\r\n    /**\r\n     * if true, everyone can participate in ICOs.\r\n     * otherwise just whitelisted wallets can participate\r\n     */\r\n    bool isPublic = false;\r\n\r\n    /**\r\n     * mapping to save whitelisted users\r\n     */\r\n    mapping(address => bool) public whiteList;\r\n    \r\n    /**\r\n     * Address which will receive raised funds \r\n     * and owns the total supply of tokens\r\n     */\r\n    address public fundsWallet = 0x776EFa46B4b39Aa6bd2D65ce01480B31042aeAA5;\r\n\r\n    /**\r\n     * Address which will manage whitelist\r\n     * and ICOs\r\n     */\r\n    address private adminWallet = 0xc6BD816331B1BddC7C03aB51215bbb9e2BE62dD2;    \r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor() public{\r\n        //fundsWallet = msg.sender;\r\n\r\n        startTimestamp = now;\r\n\r\n        // ICO is not active by default. Admin can set it later\r\n        durationSeconds = 0;\r\n\r\n        //initially assign all tokens to the fundsWallet\r\n        balances[fundsWallet] = totalSupply;\r\n        Transfer(0x0, fundsWallet, totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if an ICO is open\r\n     */\r\n    modifier isIcoOpen() {\r\n        require(isIcoInProgress());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the investment amount is greater than min amount\r\n     */\r\n    modifier checkMin(){\r\n        require(msg.value >= minAmount);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if msg.sender can participate in the ICO\r\n     */\r\n    modifier isWhiteListed(){\r\n        require(isPublic || whiteList[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if msg.sender is admin\r\n     * both fundsWallet and adminWallet are considered as admin\r\n     */\r\n\r\n    modifier isAdmin(){\r\n        require(msg.sender == fundsWallet || msg.sender == adminWallet);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Payable fallback. This function will be called\r\n     * when investors send ETH to buy BST\r\n     */\r\n    function() public isIcoOpen checkMin isWhiteListed payable{\r\n        totalRaised = totalRaised.add(msg.value);\r\n\r\n        uint256 tokenAmount = calculateTokenAmount(msg.value);\r\n        balances[fundsWallet] = balances[fundsWallet].sub(tokenAmount);\r\n        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\r\n\r\n        Transfer(fundsWallet, msg.sender, tokenAmount);\r\n\r\n        // immediately transfer ether to fundsWallet\r\n        fundsWallet.transfer(msg.value);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates token amount for investors based on weekly rewards\r\n     * and msg.value\r\n     * @param weiAmount ETH amount in wei amount\r\n     * @return Total BST amount\r\n     */\r\n    function calculateTokenAmount(uint256 weiAmount) public constant returns(uint256) {\r\n        uint256 tokenAmount = weiAmount.mul(coinsPerETH);\r\n        // setting rewards is possible only for 4 weeks\r\n        for (uint i = 0; i < hourlyRewards.length; i++) {\r\n            if (now <= startTimestamp + (hourlyRewards[i].passedHours * 1 hours)) {\r\n                return tokenAmount.mul(100+hourlyRewards[i].percent).div(100);    \r\n            }\r\n        }\r\n        return tokenAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Update WhiteList for an address\r\n     * @param _address The address\r\n     * @param _value Boolean to represent the status\r\n     */\r\n    function adminUpdateWhiteList(address _address, bool _value) public isAdmin{\r\n        whiteList[_address] = _value;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows admin to launch a new ICO\r\n     * @param _startTimestamp Start timestamp in epochs\r\n     * @param _durationSeconds ICO time in seconds(1 day=24*60*60)\r\n     * @param _coinsPerETH BST price in ETH(1 ETH = ? BST)\r\n     * @param _maxCap Max ETH capture in wei amount\r\n     * @param _minAmount Min ETH amount per user in wei amount\r\n     * @param _isPublic Boolean to represent that the ICO is public or not\r\n     */\r\n    function adminAddICO(\r\n        uint256 _startTimestamp,\r\n        uint256 _durationSeconds, \r\n        uint256 _coinsPerETH,\r\n        uint256 _maxCap,\r\n        uint256 _minAmount, \r\n        uint[] _rewardHours,\r\n        uint256[] _rewardPercents,\r\n        bool _isPublic\r\n        ) public isAdmin{\r\n\r\n        // we can't add a new ICO when an ICO is already in progress\r\n        assert(!isIcoInProgress());\r\n        assert(_rewardPercents.length == _rewardHours.length);\r\n\r\n        startTimestamp = _startTimestamp;\r\n        durationSeconds = _durationSeconds;\r\n        coinsPerETH = _coinsPerETH;\r\n        maxCap = _maxCap;\r\n        minAmount = _minAmount;\r\n\r\n        hourlyRewards.length = 0;\r\n        for(uint i=0; i < _rewardHours.length; i++){\r\n            hourlyRewards[hourlyRewards.length++] = HourlyReward({\r\n                    passedHours: _rewardHours[i],\r\n                    percent: _rewardPercents[i]\r\n                });\r\n        }\r\n\r\n        isPublic = _isPublic;\r\n        // reset totalRaised\r\n        totalRaised = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Return true if an ICO is already in progress;\r\n     * otherwise returns false\r\n     */\r\n    function isIcoInProgress() public constant returns(bool){\r\n        if(now < startTimestamp){\r\n            return false;\r\n        }\r\n        if(now > (startTimestamp + durationSeconds)){\r\n            return false;\r\n        }\r\n        if(totalRaised >= maxCap){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIcoInProgress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hourlyRewards\",\"outputs\":[{\"name\":\"passedHours\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"durationSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"adminUpdateWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coinsPerETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"name\":\"_durationSeconds\",\"type\":\"uint256\"},{\"name\":\"_coinsPerETH\",\"type\":\"uint256\"},{\"name\":\"_maxCap\",\"type\":\"uint256\"},{\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"name\":\"_rewardHours\",\"type\":\"uint256[]\"},{\"name\":\"_rewardPercents\",\"type\":\"uint256[]\"},{\"name\":\"_isPublic\",\"type\":\"bool\"}],\"name\":\"adminAddICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"BoostoToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://64b224fd95f4a4d0f5ddbb5b03f3f62af56666c4121a5f8bf4449a73092f3c7c"}]}