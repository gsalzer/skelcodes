{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n  Multiplier2 contract: returns 111% of each investment!\r\n  Automatic payouts!\r\n  No bugs, no backdoors, NO OWNER - fully automatic!\r\n  Made and checked by professionals!\r\n\r\n  1. Send any sum to smart contract address\r\n     - sum from 0.01 to 3 ETH\r\n     - min 280000 gas limit\r\n     - you are added to a queue\r\n  2. Wait a little bit\r\n  3. ...\r\n  4. PROFIT! You have got 111%\r\n\r\n  How is that?\r\n  1. The first investor in the queue (you will become the\r\n     first in some time) receives next investments until\r\n     it become 111% of his initial investment.\r\n  2. You will receive payments in several parts or all at once\r\n  3. Once you receive 111% of your initial investment you are\r\n     removed from the queue.\r\n  4. You can make multiple deposits\r\n  5. The balance of this contract should normally be 0 because\r\n     all the money are immediately go to payouts\r\n\r\n\r\n     So the last pays to the first (or to several first ones\r\n     if the deposit big enough) and the investors paid 111% are removed from the queue\r\n\r\n                new investor --|               brand new investor --|\r\n                 investor5     |                 new investor       |\r\n                 investor4     |     =======>      investor5        |\r\n                 investor3     |                   investor4        |\r\n    (part. paid) investor2    <|                   investor3        |\r\n    (fully paid) investor1   <-|                   investor2   <----|  (pay until 111%)\r\n\r\n\r\n  Контракт Умножитель2: возвращает 111% от вашего депозита!\r\n  Автоматические выплаты!\r\n  Без ошибок, дыр, автоматический - для выплат НЕ НУЖНА администрация!\r\n  Создан и проверен профессионалами!\r\n\r\n  1. Пошлите любую ненулевую сумму на адрес контракта\r\n     - сумма от 0.01 до 3 ETH\r\n     - gas limit минимум 280000\r\n     - вы встанете в очередь\r\n  2. Немного подождите\r\n  3. ...\r\n  4. PROFIT! Вам пришло 111% от вашего депозита.\r\n\r\n  Как это возможно?\r\n  1. Первый инвестор в очереди (вы станете первым очень скоро) получает выплаты от\r\n     новых инвесторов до тех пор, пока не получит 111% от своего депозита\r\n  2. Выплаты могут приходить несколькими частями или все сразу\r\n  3. Как только вы получаете 111% от вашего депозита, вы удаляетесь из очереди\r\n  4. Вы можете делать несколько депозитов сразу\r\n  5. Баланс этого контракта должен обычно быть в районе 0, потому что все поступления\r\n     сразу же направляются на выплаты\r\n\r\n     Таким образом, последние платят первым, и инвесторы, достигшие выплат 111% от депозита,\r\n     удаляются из очереди, уступая место остальным\r\n\r\n              новый инвестор --|            совсем новый инвестор --|\r\n                 инвестор5     |                новый инвестор      |\r\n                 инвестор4     |     =======>      инвестор5        |\r\n                 инвестор3     |                   инвестор4        |\r\n (част. выплата) инвестор2    <|                   инвестор3        |\r\n(полная выплата) инвестор1   <-|                   инвестор2   <----|  (доплата до 111%)\r\n\r\n*/\r\n\r\ncontract Multiplier2 {\r\n    //Address of old Multiplier\r\n    address constant private FATHER = 0x7CDfA222f37f5C4CCe49b3bBFC415E8C911D1cD8;\r\n    //Address for tech and promo expences\r\n    address constant private TECH_AND_PROMO = 0xdA149b17C154e964456553C749B7B4998c152c9E;\r\n    //Percent for first multiplier donation\r\n    uint constant public FATHER_PERCENT = 6;\r\n    uint constant public TECH_AND_PROMO_PERCENT = 1;\r\n    uint constant public MAX_INVESTMENT = 3 ether;\r\n\r\n    //How many percent for your deposit to be multiplied\r\n    uint constant public MULTIPLIER = 111;\r\n\r\n    //The deposit structure holds all the info about the deposit made\r\n    struct Deposit {\r\n        address depositor; //The depositor address\r\n        uint128 deposit;   //The deposit amount\r\n        uint128 expect;    //How much we should pay out (initially it is 111% of deposit)\r\n    }\r\n\r\n    Deposit[] private queue;  //The queue\r\n    uint public currentReceiverIndex = 0; //The index of the first depositor in the queue. The receiver of investments!\r\n    mapping(address => uint) public numInQueue; //The number of a depositor in queue\r\n\r\n    //This function receives all the deposits\r\n    //stores them and make immediate payouts\r\n    function () public payable {\r\n        //If money are from first multiplier, just add them to the balance\r\n        //All these money will be distributed to current investors\r\n        if(msg.value > 0 && msg.sender != FATHER){\r\n            require(gasleft() >= 250000, \"We require more gas!\"); //We need gas to process queue\r\n            require(msg.value <= MAX_INVESTMENT); //Do not allow too big investments to stabilize payouts\r\n\r\n            //Send donation to the first multiplier for it to spin faster\r\n            uint donation = msg.value*FATHER_PERCENT/100;\r\n            require(FATHER.call.value(donation).gas(gasleft())());\r\n\r\n            require(numInQueue[msg.sender] == 0, \"Only one deposit at a time!\");\r\n            \r\n            //Add the investor into the queue. Mark that he expects to receive 111% of deposit back\r\n            queue.push(Deposit(msg.sender, uint128(msg.value), uint128(msg.value*MULTIPLIER/100)));\r\n            numInQueue[msg.sender] = queue.length; //Remember this depositor is already in queue\r\n\r\n            //Send small part to tech support\r\n            uint support = msg.value*TECH_AND_PROMO_PERCENT/100;\r\n            TECH_AND_PROMO.send(support);\r\n\r\n            //Pay to first investors in line\r\n            pay();\r\n        }\r\n    }\r\n\r\n    //Used to pay to current investors\r\n    //Each new transaction processes 1 - 4+ investors in the head of queue\r\n    //depending on balance and gas left\r\n    function pay() private {\r\n        //Try to send all the money on contract to the first investors in line\r\n        uint128 money = uint128(address(this).balance);\r\n\r\n        //We will do cycle on the queue\r\n        for(uint i=currentReceiverIndex; i<queue.length; i++){\r\n\r\n            Deposit storage dep = queue[i]; //get the info of the first investor\r\n\r\n            if(money >= dep.expect){  //If we have enough money on the contract to fully pay to investor\r\n                dep.depositor.send(dep.expect); //Send money to him\r\n                money -= dep.expect;            //update money left\r\n\r\n                //this investor is fully paid, so remove him\r\n                delete numInQueue[dep.depositor];\r\n                delete queue[i];\r\n            }else{\r\n                //Here we don't have enough money so partially pay to investor\r\n                dep.depositor.send(money); //Send to him everything we have\r\n                dep.expect -= money;       //Update the expected amount\r\n                break;                     //Exit cycle\r\n            }\r\n\r\n            if(gasleft() <= 50000)         //Check the gas left. If it is low, exit the cycle\r\n                break;                     //The next investor will process the line further\r\n        }\r\n\r\n        currentReceiverIndex = i; //Update the index of the current first investor\r\n    }\r\n\r\n    //Get the deposit info by its index\r\n    //You can get deposit index from\r\n    function getDeposit(uint idx) public view returns (address depositor, uint deposit, uint expect){\r\n        Deposit storage dep = queue[idx];\r\n        return (dep.depositor, dep.deposit, dep.expect);\r\n    }\r\n\r\n    //Get the count of deposits of specific investor\r\n    function getDepositsCount(address depositor) public view returns (uint) {\r\n        uint c = 0;\r\n        for(uint i=currentReceiverIndex; i<queue.length; ++i){\r\n            if(queue[i].depositor == depositor)\r\n                c++;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    //Get all deposits (index, deposit, expect) of a specific investor\r\n    function getDeposits(address depositor) public view returns (uint[] idxs, uint128[] deposits, uint128[] expects) {\r\n        uint c = getDepositsCount(depositor);\r\n\r\n        idxs = new uint[](c);\r\n        deposits = new uint128[](c);\r\n        expects = new uint128[](c);\r\n\r\n        if(c > 0) {\r\n            uint j = 0;\r\n            for(uint i=currentReceiverIndex; i<queue.length; ++i){\r\n                Deposit storage dep = queue[i];\r\n                if(dep.depositor == depositor){\r\n                    idxs[j] = i;\r\n                    deposits[j] = dep.deposit;\r\n                    expects[j] = dep.expect;\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Get current queue size\r\n    function getQueueLength() public view returns (uint) {\r\n        return queue.length - currentReceiverIndex;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"numInQueue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentReceiverIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TECH_AND_PROMO_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FATHER_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_INVESTMENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"name\":\"idxs\",\"type\":\"uint256[]\"},{\"name\":\"deposits\",\"type\":\"uint128[]\"},{\"name\":\"expects\",\"type\":\"uint128[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"name\":\"depositor\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"expect\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getQueueLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"getDepositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Multiplier2","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://18d9b5708324d2c35ddf18d7747d5bfd8f487bcc34ed2c805da54d5565abefa8"}]}