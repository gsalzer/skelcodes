{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract DiscountToken { mapping (address => uint256) public balanceOf; }\r\n\r\ncontract TwoCoinsOneMoonGame {\r\n    struct Bettor {\r\n        address account;\r\n        uint256 amount;\r\n        uint256 amountEth;\r\n    }\r\n\r\n    struct Event {\r\n        uint256 winner; //0 - blue; 1 - red\r\n        uint256 newMoonLevel;\r\n        uint256 block;\r\n        uint256 blueCap;\r\n        uint256 redCap;\r\n    }\r\n\r\n    uint256 public lastLevelChangeBlock;\r\n    uint256 public lastEventId;\r\n    uint256 public lastActionBlock;\r\n    uint256 public moonLevel;\r\n\r\n    uint256 public marketCapBlue;\r\n    uint256 public marketCapRed;\r\n\r\n    uint256 public jackpotBlue;\r\n    uint256 public jackpotRed;\r\n    \r\n    uint256 public startBetBlue;\r\n    uint256 public endBetBlue;\r\n    uint256 public startBetRed;\r\n    uint256 public endBetRed;\r\n\r\n    Bettor[] public bettorsBlue;\r\n    Bettor[] public bettorsRed;\r\n\r\n    Event[] public history;\r\n\r\n    mapping (address => uint) public balance;\r\n\r\n    address private feeCollector;\r\n\r\n    DiscountToken discountToken;\r\n\r\n    string public publisherMessage;\r\n    address publisher;\r\n\r\n    bool isPaused;\r\n\r\n    constructor() public {\r\n        marketCapBlue = 0;\r\n        marketCapRed = 0;\r\n\r\n        jackpotBlue = 0;\r\n        jackpotRed = 0;\r\n        \r\n        startBetBlue = 0;\r\n        startBetRed = 0;\r\n\r\n        endBetBlue = 0;\r\n        endBetRed = 0;\r\n\r\n        publisher = msg.sender;\r\n        feeCollector = 0xfD4e7B9F4F97330356F7d1b5DDB9843F2C3e9d87;\r\n        discountToken = DiscountToken(0x25a803EC5d9a14D41F1Af5274d3f2C77eec80CE9);\r\n        lastLevelChangeBlock = block.number;\r\n\r\n        lastActionBlock = block.number;\r\n        moonLevel = 5 * (uint256(10) ** 17);\r\n        isPaused = false;\r\n    }\r\n\r\n    function getBetAmountGNC(uint256 marketCap, uint256 tokenCount, uint256 betAmount) private view returns (uint256) {\r\n        require (msg.value >= 100 finney);\r\n\r\n        uint256 betAmountGNC = 0;\r\n        if (marketCap < 1 * moonLevel / 100) {\r\n            betAmountGNC += 10 * betAmount;\r\n        }\r\n        else if (marketCap < 2 * moonLevel / 100) {\r\n            betAmountGNC += 8 * betAmount;\r\n        }\r\n        else if (marketCap < 5 * moonLevel / 100) {\r\n            betAmountGNC += 5 * betAmount;\r\n        }\r\n        else if (marketCap < 10 * moonLevel / 100) {\r\n            betAmountGNC += 4 * betAmount;\r\n        }\r\n        else if (marketCap < 20 * moonLevel / 100) {\r\n            betAmountGNC += 3 * betAmount;\r\n        }\r\n        else if (marketCap < 33 * moonLevel / 100) {\r\n            betAmountGNC += 2 * betAmount;\r\n        }\r\n        else {\r\n            betAmountGNC += betAmount;\r\n        }\r\n\r\n        if (tokenCount != 0) {\r\n            if (tokenCount >= 2 && tokenCount <= 4) {\r\n                betAmountGNC = betAmountGNC *  105 / 100;\r\n            }\r\n            if (tokenCount >= 5 && tokenCount <= 9) {\r\n                betAmountGNC = betAmountGNC *  115 / 100;\r\n            }\r\n            if (tokenCount >= 10 && tokenCount <= 20) {\r\n                betAmountGNC = betAmountGNC *  135 / 100;\r\n            }\r\n            if (tokenCount >= 21 && tokenCount <= 41) {\r\n                betAmountGNC = betAmountGNC *  170 / 100;\r\n            }\r\n            if (tokenCount >= 42) {\r\n                betAmountGNC = betAmountGNC *  200 / 100;\r\n            }\r\n        }\r\n        return betAmountGNC;\r\n    }\r\n\r\n    function putMessage(string message) public {\r\n        if (msg.sender == publisher) {\r\n            publisherMessage = message;\r\n        }\r\n    }\r\n\r\n    function togglePause(bool paused) public {\r\n        if (msg.sender == publisher) {\r\n            isPaused = paused;\r\n        }\r\n    }\r\n\r\n    function getBetAmountETH(uint256 tokenCount) private returns (uint256) {\r\n        uint256 betAmount = msg.value;\r\n        if (tokenCount == 0) {\r\n            uint256 comission = betAmount * 38 / 1000;\r\n            betAmount -= comission;\r\n            balance[feeCollector] += comission;\r\n        }\r\n        return betAmount;\r\n    }\r\n\r\n    function betBlueCoin(uint256 actionBlock) public payable {\r\n        require (!isPaused || marketCapBlue > 0 || actionBlock == lastActionBlock);\r\n\r\n        uint256 tokenCount = discountToken.balanceOf(msg.sender);\r\n        uint256 betAmountETH = getBetAmountETH(tokenCount);\r\n        uint256 betAmountGNC = getBetAmountGNC(marketCapBlue, tokenCount, betAmountETH);\r\n\r\n        jackpotBlue += betAmountETH;\r\n        marketCapBlue += betAmountGNC;\r\n        bettorsBlue.push(Bettor({account:msg.sender, amount:betAmountGNC, amountEth:betAmountETH}));\r\n        endBetBlue = bettorsBlue.length;\r\n        lastActionBlock = block.number;\r\n\r\n        checkMoon();\r\n    }\r\n\r\n    function betRedCoin(uint256 actionBlock) public payable {\r\n        require (!isPaused || marketCapRed > 0 || actionBlock == lastActionBlock);\r\n\r\n        uint256 tokenCount = discountToken.balanceOf(msg.sender);\r\n        uint256 betAmountETH = getBetAmountETH(tokenCount);\r\n        uint256 betAmountGNC = getBetAmountGNC(marketCapBlue, tokenCount, betAmountETH);\r\n\r\n        jackpotRed += betAmountETH;\r\n        marketCapRed += betAmountGNC;\r\n        bettorsRed.push(Bettor({account:msg.sender, amount:betAmountGNC, amountEth: betAmountETH}));\r\n        endBetRed = bettorsRed.length;\r\n        lastActionBlock = block.number;\r\n\r\n        checkMoon();\r\n    }\r\n\r\n    function withdraw() public {\r\n        if (balance[feeCollector] != 0) {\r\n            uint256 fee = balance[feeCollector];\r\n            balance[feeCollector] = 0;\r\n            feeCollector.call.value(fee)();\r\n        }\r\n\r\n        uint256 amount = balance[msg.sender];\r\n        balance[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function depositBalance(uint256 winner) private {\r\n        uint256 i;\r\n        if (winner == 0) {\r\n            for (i = startBetBlue; i < bettorsBlue.length; i++) {\r\n                balance[bettorsBlue[i].account] += bettorsBlue[i].amountEth;\r\n                balance[bettorsBlue[i].account] += 10**18 * bettorsBlue[i].amount / marketCapBlue * jackpotRed / 10**18;\r\n            }\r\n        }\r\n        else {\r\n            for (i = startBetRed; i < bettorsRed.length; i++) {\r\n                balance[bettorsRed[i].account] += bettorsRed[i].amountEth;\r\n                balance[bettorsRed[i].account] += 10**18 * bettorsRed[i].amount / marketCapRed * jackpotBlue / 10**18;\r\n            }\r\n        }\r\n    }\r\n\r\n    function addEvent(uint256 winner) private {\r\n        history.push(Event({winner: winner, newMoonLevel: moonLevel, block: block.number, blueCap: marketCapBlue, redCap: marketCapRed}));\r\n        lastEventId = history.length - 1;\r\n        lastLevelChangeBlock = block.number;\r\n    }\r\n\r\n    function burstBubble() private {\r\n        uint256 winner;\r\n        if (marketCapBlue == marketCapRed) {\r\n            winner = block.number % 2;\r\n        }\r\n        else if (marketCapBlue > marketCapRed) {\r\n            winner = 0;\r\n        }\r\n        else {\r\n            winner = 1;\r\n        }\r\n        depositBalance(winner);\r\n        moonLevel = moonLevel * 2;\r\n        addEvent(winner);\r\n\r\n        marketCapBlue = 0;\r\n        marketCapRed = 0;\r\n\r\n        jackpotBlue = 0;\r\n        jackpotRed = 0;\r\n        \r\n        startBetBlue = bettorsBlue.length;\r\n        startBetRed = bettorsRed.length;\r\n    }\r\n\r\n    function checkMoon() private {\r\n        if (block.number - lastLevelChangeBlock > 2880) {\r\n           moonLevel = moonLevel / 2;\r\n           addEvent(2);\r\n        }\r\n        if (marketCapBlue >= moonLevel || marketCapRed >= moonLevel) {\r\n            burstBubble();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lastEventId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBetRed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"message\",\"type\":\"string\"}],\"name\":\"putMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"actionBlock\",\"type\":\"uint256\"}],\"name\":\"betRedCoin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"actionBlock\",\"type\":\"uint256\"}],\"name\":\"betBlueCoin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"togglePause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotRed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpotBlue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastLevelChangeBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBetRed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastActionBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"history\",\"outputs\":[{\"name\":\"winner\",\"type\":\"uint256\"},{\"name\":\"newMoonLevel\",\"type\":\"uint256\"},{\"name\":\"block\",\"type\":\"uint256\"},{\"name\":\"blueCap\",\"type\":\"uint256\"},{\"name\":\"redCap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBetBlue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBetBlue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bettorsRed\",\"outputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"amountEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketCapRed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moonLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketCapBlue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publisherMessage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bettorsBlue\",\"outputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"amountEth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"TwoCoinsOneMoonGame","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2a2eac722e5198bd49291284546ebb411c980499fe4180ecf806f5dbc27d796b"}]}