{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/*\r\n*　　　　　　　　　　　　　　　　　　　　 　 　 ＿＿＿\r\n*　　　　　　　　　　　　　　　　　　　　　　　|三三三i\r\n*　　　　　　　　　　　　　　　　　　　　　　　|三三三|  \r\n*　　神さま　かなえて　happy-end　　　　　　ノ三三三.廴        \r\n*　　　　　　　　　　　　　　　　　　　　　　从ﾉ_八ﾑ_}ﾉ\r\n*　　　＿＿}ヽ__　　　　　　　　　　 　 　 　 ヽ‐个‐ｱ.     © Team EC Present. \r\n*　　 　｀ﾋｙ　　ﾉ三ﾆ==ｪ- ＿＿＿ ｨｪ=ｧ='ﾌ)ヽ-''Lヽ         \r\n*　　　　 ｀‐⌒L三ﾆ=ﾆ三三三三三三三〈oi 人 ）o〉三ﾆ、　　　 \r\n*　　　　　　　　　　 　 ｀￣￣￣￣｀弌三三}. !　ｒ三三三iｊ　　　　　　\r\n*　　　　　　　　　　 　 　 　 　 　 　,': ::三三|. ! ,'三三三刈、\r\n*　　　　　　　　　 　 　 　 　 　 　 ,': : :::｀i三|人|三三ﾊ三j: ;　　　　　\r\n*　                  　　　　　　 ,': : : : : 比|　 |三三i |三|: ',\r\n*　　　　　　　　　　　　　　　　　,': : : : : : :Vi|　 |三三i |三|: : ',\r\n*　　　　　　　　　　　　　　　　, ': : : : : : : ﾉ }乂{三三| |三|: : :;\r\n*    BigOne Game v0.1　　  ,': : : : : : : : ::ｊ三三三三|: |三i: : ::,\r\n*　　　　　　　　　　　 　 　 ,': : : : : : : : :/三三三三〈: :!三!: : ::;\r\n*　　　　　　　　　 　 　 　 ,': : : : : : : : /三三三三三!, |三!: : : ,\r\n*　　　　　　　 　 　 　 　 ,': : : : : : : : ::ｊ三三八三三Y {⌒i: : : :,\r\n*　　　　　　　　 　 　 　 ,': : : : : : : : : /三//: }三三ｊ: : ー': : : : ,\r\n*　　　　　　 　 　 　 　 ,': : : : : : : : :.//三/: : |三三|: : : : : : : : :;\r\n*　　　　 　 　 　 　 　 ,': : : : : : : : ://三/: : : |三三|: : : : : : : : ;\r\n*　　 　 　 　 　 　 　 ,': : : : : : : : :/三ii/ : : : :|三三|: : : : : : : : :;\r\n*　　　 　 　 　 　 　 ,': : : : : : : : /三//: : : : ::!三三!: : : : : : : : ;\r\n*　　　　 　 　 　 　 ,': : : : : : : : :ｊ三// : : : : ::|三三!: : : : : : : : :;\r\n*　　 　 　 　 　 　 ,': : : : : : : : : |三ij: : : : : : ::ｌ三ﾆ:ｊ: : : : : : : : : ;\r\n*　　　 　 　 　 　 ,': : : : : : : : ::::|三ij: : : : : : : !三刈: : : : : : : : : ;\r\n*　 　 　 　 　 　 ,': : : : : : : : : : :|三ij: : : : : : ::ｊ三iiﾃ: : : : : : : : : :;\r\n*　　 　 　 　 　 ,': : : : : : : : : : : |三ij: : : : : : ::|三iiﾘ: : : : : : : : : : ;\r\n*　　　 　 　 　 ,':: : : : : : : : : : : :|三ij::: : :: :: :::|三リ: : : : : : : : : : :;\r\n*　　　　　　　 ,': : : : : : : : : : : : :|三ij : : : : : ::ｌ三iﾘ: : : : : : : : : : : ',\r\n*           　　　　　　　　　　　　　　   ｒ'三三jiY, : : : : : ::|三ij : : : : : : : : : : : ',\r\n*　 　 　 　 　 　      　　                |三 j´　　　　　　　　｀',    signature:\r\n*　　　　　　　　　　　　 　 　 　 　 　 　 　  |三三k、\r\n*                            　　　　　　　　｀ー≠='.  93511761c3aa73c0a197c55537328f7f797c4429 \r\n*/\r\ncontract BigOneEvents {\r\n    event onNewPlayer\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        bool isNewPlayer,\r\n        uint256 affiliateID,\r\n        address affiliateAddress,\r\n        bytes32 affiliateName,\r\n        uint256 amountPaid,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    event onEndTx\r\n    (\r\n        bytes32 playerName,\r\n        address playerAddress,\r\n        uint256 ethIn,\r\n        uint256 keyCount,\r\n        uint256 newPot\r\n    );\r\n\r\n    event onWithdraw\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethOut,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    event onAffiliatePayout\r\n    (\r\n        uint256 indexed affiliateID,\r\n        address affiliateAddress,\r\n        bytes32 affiliateName,\r\n        uint256 indexed roundID,\r\n        uint256 indexed buyerID,\r\n        uint256 amount,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    event onEndRound\r\n    (\r\n        uint256 roundID,\r\n        uint256 roundTypeID,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon\r\n    );\r\n}\r\n\r\ncontract BigOne is BigOneEvents {\r\n    using SafeMath for *;\r\n    using NameFilter for string;\r\n\r\n    UserDataManagerInterface constant private UserDataManager = UserDataManagerInterface(0x2E1c02A6Bc5fC77bfc740A505000846545193Beb);\r\n\r\n    //****************\r\n    // constant\r\n    //****************\r\n    address private admin = msg.sender;\r\n    address private shareCom = 0x2F0839f736197117796967452310F025a330DA45;\r\n    address private groupCut = 0x9ebfB7a9105124204E4E18BE73B2B1979aDbc713;\r\n\r\n    string constant public name = \"bigOne\";\r\n    string constant public symbol = \"bigOne\";   \r\n\r\n    //****************\r\n    // var\r\n    //****************\r\n    uint256 public rID_;    \r\n    uint256 public rTypeID_;   \r\n    //****************\r\n    // PLAYER DATA\r\n    //****************\r\n    mapping (address => uint256) public pIDxAddr_;          // (addr => pID) returns player id by address\r\n    mapping (bytes32 => uint256) public pIDxName_;          // (name => pID) returns player id by name\r\n    mapping (uint256 => BigOneData.Player) public plyr_;   // (pID => data) player data\r\n    mapping (uint256 => mapping (uint256 => BigOneData.PlayerRoundData)) public plyrRnds_;   // (pID => rID => data) \r\n\r\n    //****************\r\n    // ROUND DATA\r\n    //****************\r\n    mapping (uint256 => BigOneData.RoundSetting) public rSettingXTypeID_;   //(rType => setting)\r\n    mapping (uint256 => BigOneData.Round) public round_;   // (rID => data) round data\r\n    mapping (uint256 => uint256) public currentRoundxType_;\r\n\r\n    mapping (uint256 => address[]) private winners_; //(rType => winners_)\r\n    mapping (uint256 => uint256[]) private winNumbers_; //(rType => winNumbers_)\r\n\r\n    //==============================================================================\r\n    // init\r\n    //==============================================================================\r\n    constructor() public {\r\n        rID_ = 0;\r\n        rTypeID_ = 0;\r\n    }\r\n\r\n    //==============================================================================\r\n    // checks\r\n    //==============================================================================\r\n    modifier isActivated() {\r\n        require(activated_ == true, \"its not ready yet.  check ?eta in discord\");\r\n        _;\r\n    }\r\n\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDevs() {\r\n        require(admin == msg.sender, \"msg sender is not a dev\");\r\n        _;\r\n    }\r\n\r\n    modifier isWithinLimits(uint256 _eth,uint256 _typeID) {\r\n        require(rSettingXTypeID_[_typeID].isValue, \"invaild mode id\");\r\n        require(_eth >= rSettingXTypeID_[_typeID].perShare, \"less than min allow\");\r\n        require(_eth <= rSettingXTypeID_[_typeID].limit, \"more than max allow\");\r\n        _;\r\n    }\r\n\r\n    modifier modeCheck(uint256 _typeID) {\r\n        require(rSettingXTypeID_[_typeID].isValue, \"invaild mode id\");\r\n        _;\r\n    }\r\n\r\n    //==============================================================================\r\n    // admin\r\n    //==============================================================================\r\n    bool public activated_ = false;\r\n    function activate()\r\n        onlyDevs()\r\n        public\r\n    {\r\n        require(activated_ == false, \"BigOne already activated\");\r\n        require(rTypeID_ > 0, \"No round mode setup\");\r\n        activated_ = true;\r\n\r\n        for(uint256 i = 0; i < rTypeID_; i++) {\r\n            rID_++;\r\n            round_[rID_].start = now;\r\n            round_[rID_].typeID = i + 1;\r\n            round_[rID_].count = 1;\r\n            round_[rID_].pot = 0;\r\n\r\n            currentRoundxType_[i + 1] = rID_;\r\n        }\r\n    }\r\n\r\n    function addRoundMode(uint256 _limit, uint256 _perShare, uint256 _shareMax)\r\n        onlyDevs()\r\n        public\r\n    {\r\n        require(activated_ == false, \"BigOne already started\");\r\n\r\n        rTypeID_++;\r\n        rSettingXTypeID_[rTypeID_].limit = _limit;\r\n        rSettingXTypeID_[rTypeID_].perShare = _perShare;\r\n        rSettingXTypeID_[rTypeID_].shareMax = _shareMax;\r\n        rSettingXTypeID_[rTypeID_].isValue = true;\r\n    }\r\n\r\n    //==============================================================================\r\n    // public\r\n    //==============================================================================\r\n\r\n    function()\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value,1)\r\n        public\r\n        payable\r\n    {\r\n        determinePID();\r\n\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        buyCore(_pID, plyr_[_pID].laff,1);\r\n    }\r\n\r\n    function buyXid(uint256 _affCode, uint256 _mode)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value,_mode)\r\n        public\r\n        payable\r\n    {\r\n        determinePID();\r\n\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        if (_affCode == 0 || _affCode == _pID)\r\n        {\r\n            _affCode = plyr_[_pID].laff;\r\n\r\n        } else if (_affCode != plyr_[_pID].laff) {\r\n            plyr_[_pID].laff = _affCode;\r\n        }\r\n\r\n        buyCore(_pID, _affCode, _mode);\r\n    }\r\n\r\n    function buyXaddr(address _affCode, uint256 _mode)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value,_mode)\r\n        public\r\n        payable\r\n    {\r\n        determinePID();\r\n\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        uint256 _affID;\r\n        if (_affCode == address(0) || _affCode == msg.sender)\r\n        {\r\n            _affID = plyr_[_pID].laff;\r\n\r\n        } else {\r\n            _affID = pIDxAddr_[_affCode];\r\n\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        buyCore(_pID, _affID, _mode);\r\n    }\r\n\r\n    function buyXname(bytes32 _affCode, uint256 _mode)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(msg.value,_mode)\r\n        public\r\n        payable\r\n    {\r\n        determinePID();\r\n\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        uint256 _affID;\r\n        if (_affCode == '' || _affCode == plyr_[_pID].name)\r\n        {\r\n            _affID = plyr_[_pID].laff;\r\n\r\n        } else {\r\n            _affID = pIDxName_[_affCode];\r\n\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        buyCore(_pID, _affID, _mode);\r\n    }\r\n\r\n    function reLoadXid(uint256 _affCode, uint256 _eth, uint256 _mode)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(_eth,_mode)\r\n        public\r\n    {\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        if (_affCode == 0 || _affCode == _pID)\r\n        {\r\n            _affCode = plyr_[_pID].laff;\r\n\r\n        } else if (_affCode != plyr_[_pID].laff) {\r\n            plyr_[_pID].laff = _affCode;\r\n        }\r\n\r\n        reLoadCore(_pID, _affCode, _eth, _mode);\r\n    }\r\n\r\n    function reLoadXaddr(address _affCode, uint256 _eth, uint256 _mode)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(_eth,_mode)\r\n        public\r\n    {\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        uint256 _affID;\r\n        if (_affCode == address(0) || _affCode == msg.sender)\r\n        {\r\n            _affID = plyr_[_pID].laff;\r\n        } else {\r\n            _affID = pIDxAddr_[_affCode];\r\n\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n\r\n        reLoadCore(_pID, _affID, _eth, _mode);\r\n    }\r\n\r\n    function reLoadXname(bytes32 _affCode, uint256 _eth, uint256 _mode)\r\n        isActivated()\r\n        isHuman()\r\n        isWithinLimits(_eth,_mode)\r\n        public\r\n    {\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        uint256 _affID;\r\n        if (_affCode == '' || _affCode == plyr_[_pID].name)\r\n        {\r\n            _affID = plyr_[_pID].laff;\r\n        } else {\r\n            _affID = pIDxName_[_affCode];\r\n\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n        reLoadCore(_pID, _affID, _eth,_mode);\r\n    }\r\n\r\n    function withdraw()\r\n        isActivated()\r\n        isHuman()\r\n        public\r\n    {\r\n        // grab time\r\n        uint256 _now = now;\r\n\r\n        // fetch player ID\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        // setup temp var for player eth\r\n        uint256 _eth;\r\n        uint256 _withdrawFee;\r\n    \r\n        // get their earnings\r\n        _eth = withdrawEarnings(_pID);\r\n\r\n        // gib moni\r\n        if (_eth > 0)\r\n        {\r\n            //10% trade tax\r\n            _withdrawFee = _eth / 10;\r\n            uint256 _p1 = _withdrawFee / 2;\r\n            uint256 _p2 = _withdrawFee / 2;\r\n            shareCom.transfer(_p1);\r\n            admin.transfer(_p2);\r\n\r\n            plyr_[_pID].addr.transfer(_eth.sub(_withdrawFee));\r\n        }\r\n\r\n        // fire withdraw event\r\n        emit BigOneEvents.onWithdraw(_pID, msg.sender, plyr_[_pID].name, _eth, _now);\r\n    }\r\n\r\n    function registerNameXID(string _nameString, uint256 _affCode, bool _all)\r\n        isHuman()\r\n        public\r\n        payable\r\n    {\r\n        bytes32 _name = _nameString.nameFilter();\r\n        address _addr = msg.sender;\r\n        uint256 _paid = msg.value;\r\n        (bool _isNewPlayer, uint256 _affID) = UserDataManager.registerNameXIDFromDapp.value(_paid)(_addr, _name, _affCode, _all);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        emit BigOneEvents.onNewPlayer(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\r\n    }\r\n\r\n    function registerNameXaddr(string _nameString, address _affCode, bool _all)\r\n        isHuman()\r\n        public\r\n        payable\r\n    {\r\n        bytes32 _name = _nameString.nameFilter();\r\n        address _addr = msg.sender;\r\n        uint256 _paid = msg.value;\r\n        (bool _isNewPlayer, uint256 _affID) = UserDataManager.registerNameXaddrFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        emit BigOneEvents.onNewPlayer(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\r\n    }\r\n\r\n    function registerNameXname(string _nameString, bytes32 _affCode, bool _all)\r\n        isHuman()\r\n        public\r\n        payable\r\n    {\r\n        bytes32 _name = _nameString.nameFilter();\r\n        address _addr = msg.sender;\r\n        uint256 _paid = msg.value;\r\n        (bool _isNewPlayer, uint256 _affID) = UserDataManager.registerNameXnameFromDapp.value(msg.value)(msg.sender, _name, _affCode, _all);\r\n\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        emit BigOneEvents.onNewPlayer(_pID, _addr, _name, _isNewPlayer, _affID, plyr_[_affID].addr, plyr_[_affID].name, _paid, now);\r\n    }\r\n\r\n//==============================================================================\r\n// query\r\n//==============================================================================\r\n\r\n    function iWantXKeys(uint256 _keys,uint256 _mode)\r\n        modeCheck(_mode)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return _keys.mul(rSettingXTypeID_[_mode].perShare);\r\n    }\r\n\r\n    function getWinners(uint256 _mode)\r\n        modeCheck(_mode)\r\n        public\r\n        view\r\n        returns(address[])\r\n    {\r\n        return winners_[_mode];\r\n    }\r\n\r\n    function getWinNumbers(uint256 _mode)\r\n        modeCheck(_mode)\r\n        public\r\n        view\r\n        returns(uint256[])\r\n    {\r\n        return winNumbers_[_mode];\r\n    }\r\n\r\n    function getPlayerVaults(uint256 _pID)\r\n        public\r\n        view\r\n        //win,gen,aff\r\n        returns(uint256,uint256,uint256)\r\n    {\r\n        return (plyr_[_pID].win,plyr_[_pID].gen,plyr_[_pID].aff);\r\n    }\r\n\r\n    function getCurrentRoundInfo(uint256 _mode)\r\n        modeCheck(_mode)\r\n        public\r\n        view\r\n        returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, address, bytes32)\r\n    {\r\n        uint256 _rID = currentRoundxType_[_mode];\r\n\r\n        return \r\n        (\r\n            _rID,                           //0\r\n            round_[_rID].count,             //1            \r\n            round_[_rID].keyCount,          //2\r\n\r\n            round_[_rID].start,              //3\r\n            round_[_rID].end,               //4\r\n\r\n            round_[_rID].eth,               //5    \r\n            round_[_rID].pot,               //6\r\n\r\n            plyr_[round_[_rID].plyr].addr,  //7\r\n            plyr_[round_[_rID].plyr].name   //8\r\n        );\r\n    }\r\n\r\n    function getPlayerInfoByAddress(address _addr,uint256 _mode)\r\n        modeCheck(_mode)\r\n        public\r\n        view\r\n        returns(uint256, bytes32, uint256[], uint256, uint256, uint256, uint256)\r\n    {\r\n        uint256 _rID = currentRoundxType_[_mode];\r\n\r\n        if (_addr == address(0))\r\n        {\r\n            _addr == msg.sender;\r\n        }\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n\r\n        return\r\n        (\r\n            _pID,                               //0\r\n            plyr_[_pID].name,                   //1\r\n            getPlayerKeys(_pID,_rID),           //2\r\n            plyr_[_pID].win,                    //3\r\n            plyr_[_pID].gen,  \r\n            plyr_[_pID].aff,                    //5\r\n            plyrRnds_[_pID][_rID].eth           //6\r\n        );\r\n    }\r\n\r\n    function getPlayerKeys(uint256 _pID, uint256 _rID)\r\n        private\r\n        view\r\n        returns(uint256[]) \r\n    {\r\n        uint256[] memory _keys = new uint256[](plyrRnds_[_pID][_rID].keyCount);\r\n        uint256 _keyIndex = 0;\r\n        for(uint256 i = 0;i < plyrRnds_[_pID][_rID].purchaseIDs.length;i++) {\r\n            uint256 _pIndex = plyrRnds_[_pID][_rID].purchaseIDs[i];\r\n            BigOneData.PurchaseRecord memory _pr = round_[_rID].purchases[_pIndex];\r\n            if(_pr.plyr == _pID) {\r\n                for(uint256 j = _pr.start; j <= _pr.end; j++) {\r\n                    _keys[_keyIndex] = j;\r\n                    _keyIndex++;\r\n                }\r\n            }\r\n        }\r\n        return _keys;\r\n    }\r\n\r\n    function getPlayerAff(uint256 _pID)\r\n        public\r\n        view\r\n        returns (uint256,uint256,uint256)\r\n    {\r\n        uint256 _affID = plyr_[_pID].laffID;\r\n        if (_affID != 0)\r\n        {\r\n            //second level aff\r\n            uint256 _secondLaff = plyr_[_affID].laffID;\r\n\r\n            if(_secondLaff != 0)\r\n            {\r\n                //third level aff\r\n                uint256 _thirdAff = plyr_[_secondLaff].laffID;\r\n            }\r\n        }\r\n        return (_affID,_secondLaff,_thirdAff);\r\n    }\r\n\r\n//==============================================================================\r\n// private\r\n//==============================================================================\r\n\r\n    function buyCore(uint256 _pID, uint256 _affID, uint256 _mode)\r\n        private\r\n    {\r\n        uint256 _rID = currentRoundxType_[_mode];\r\n\r\n        if (round_[_rID].pot < rSettingXTypeID_[_mode].limit && round_[_rID].plyr == 0)\r\n        {\r\n            core(_rID, _pID, msg.value, _affID,_mode);\r\n        } else {\r\n            if (round_[_rID].pot >= rSettingXTypeID_[_mode].limit && round_[_rID].plyr == 0 && round_[_rID].ended == false)\r\n            {\r\n                round_[_rID].ended = true;\r\n                endRound(_mode);\r\n            }\r\n\r\n            plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value);\r\n        }\r\n    }\r\n\r\n    function reLoadCore(uint256 _pID, uint256 _affID, uint256 _eth, uint _mode)\r\n        private\r\n    {\r\n        uint256 _rID = currentRoundxType_[_mode];\r\n\r\n        if (round_[_rID].pot < rSettingXTypeID_[_mode].limit && round_[_rID].plyr == 0)\r\n        {\r\n            plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth);\r\n\r\n            core(_rID, _pID, _eth, _affID,_mode);\r\n        } else if (round_[_rID].pot >= rSettingXTypeID_[_mode].limit && round_[_rID].plyr == 0 && round_[_rID].ended == false) {\r\n            round_[_rID].ended = true;\r\n            endRound(_mode);\r\n        }\r\n    }\r\n\r\n    function core(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, uint256 _mode)\r\n        private\r\n    {\r\n        if (plyrRnds_[_pID][_rID].keyCount == 0) \r\n        {\r\n            managePlayer(_pID,_rID);\r\n        }\r\n\r\n        if (round_[_rID].keyCount < rSettingXTypeID_[_mode].shareMax)\r\n        {\r\n            uint256 _ethAdd = ((rSettingXTypeID_[_mode].shareMax).sub(round_[_rID].keyCount)).mul(rSettingXTypeID_[_mode].perShare);\r\n            if(_eth > _ethAdd) {\r\n                plyr_[_pID].gen = plyr_[_pID].gen.add(_eth.sub(_ethAdd)); \r\n            } else {\r\n                _ethAdd = _eth;\r\n            }\r\n\r\n            uint256 _keyAdd = _ethAdd.div(rSettingXTypeID_[_mode].perShare);\r\n            uint256 _ketEnd = (round_[_rID].keyCount).add(_keyAdd);\r\n            \r\n            BigOneData.PurchaseRecord memory _pr;\r\n            _pr.plyr = _pID;\r\n            _pr.start = round_[_rID].keyCount;\r\n            _pr.end = _ketEnd - 1;\r\n            round_[_rID].purchases.push(_pr);\r\n            plyrRnds_[_pID][_rID].purchaseIDs.push(round_[_rID].purchases.length - 1);\r\n            plyrRnds_[_pID][_rID].keyCount += _keyAdd;\r\n\r\n            plyrRnds_[_pID][_rID].eth = _ethAdd.add(plyrRnds_[_pID][_rID].eth);\r\n            round_[_rID].keyCount = _ketEnd;\r\n            round_[_rID].eth = _ethAdd.add(round_[_rID].eth);\r\n            round_[_rID].pot = (round_[_rID].pot).add((_ethAdd.mul(80)).div(100));\r\n\r\n            distributeExternal(_rID, _pID, _ethAdd, _affID);\r\n\r\n            if (round_[_rID].pot >= rSettingXTypeID_[_mode].limit && round_[_rID].plyr == 0 && round_[_rID].ended == false) \r\n            {\r\n                round_[_rID].ended = true;\r\n                endRound(_mode);\r\n            }\r\n\r\n            emit BigOneEvents.onEndTx\r\n            (\r\n                plyr_[_pID].name,\r\n                msg.sender,\r\n                _eth,\r\n                round_[_rID].keyCount,\r\n                round_[_rID].pot\r\n            );\r\n\r\n        } else {\r\n            // put back eth in players vault\r\n            plyr_[_pID].gen = plyr_[_pID].gen.add(_eth);    \r\n        }\r\n\r\n    }\r\n\r\n\r\n//==============================================================================\r\n// util\r\n//==============================================================================\r\n\r\n    function receivePlayerInfo(uint256 _pID, address _addr, bytes32 _name, uint256 _laff)\r\n        external\r\n    {\r\n        require (msg.sender == address(UserDataManager), \"your not userManager contract\");\r\n        if (pIDxAddr_[_addr] != _pID)\r\n            pIDxAddr_[_addr] = _pID;\r\n        if (pIDxName_[_name] != _pID)\r\n            pIDxName_[_name] = _pID;\r\n        if (plyr_[_pID].addr != _addr)\r\n            plyr_[_pID].addr = _addr;\r\n        if (plyr_[_pID].name != _name)\r\n            plyr_[_pID].name = _name;\r\n        if (plyr_[_pID].laff != _laff)\r\n            plyr_[_pID].laff = _laff;\r\n    }\r\n\r\n    function determinePID()\r\n        private\r\n    {\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        if (_pID == 0)\r\n        {\r\n            _pID = UserDataManager.getPlayerID(msg.sender);\r\n            bytes32 _name = UserDataManager.getPlayerName(_pID);\r\n            uint256 _laff = UserDataManager.getPlayerLaff(_pID);\r\n\r\n            pIDxAddr_[msg.sender] = _pID;\r\n            plyr_[_pID].addr = msg.sender;\r\n\r\n            if (_name != \"\")\r\n            {\r\n                pIDxName_[_name] = _pID;\r\n                plyr_[_pID].name = _name;\r\n            }\r\n\r\n            if (_laff != 0 && _laff != _pID) \r\n            {\r\n                plyr_[_pID].laff = _laff;\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawEarnings(uint256 _pID)\r\n        private\r\n        returns(uint256)\r\n    {\r\n        uint256 _earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff);\r\n        if (_earnings > 0)\r\n        {\r\n            plyr_[_pID].win = 0;\r\n            plyr_[_pID].gen = 0;\r\n            plyr_[_pID].aff = 0;\r\n        }\r\n\r\n        return(_earnings);\r\n    }\r\n\r\n    function managePlayer(uint256 _pID,uint256 _rID)\r\n        private\r\n    {\r\n        plyr_[_pID].lrnd = _rID;\r\n    }\r\n\r\n    function distributeExternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID)\r\n        private\r\n    {\r\n         // pay community rewards\r\n        uint256 _com = _eth / 50;\r\n        uint256 _p3d;\r\n\r\n        if (address(admin).call.value((_com / 2))() == false)\r\n        {\r\n            _p3d = _com / 2;\r\n            _com = _com / 2;\r\n        }\r\n\r\n        if (address(shareCom).call.value((_com / 2))() == false)\r\n        {\r\n            _p3d = _p3d.add(_com / 2);\r\n            _com = _com.sub(_com / 2);\r\n        }\r\n\r\n        _p3d = _p3d.add(distributeAff(_rID,_pID,_eth,_affID));\r\n\r\n        if (_p3d > 0)\r\n        {\r\n            shareCom.transfer((_p3d / 2));\r\n            admin.transfer((_p3d / 2));\r\n        }\r\n    }\r\n\r\n    function distributeAff(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID)\r\n        private\r\n        returns(uint256)\r\n    {\r\n        uint256 _addP3d = 0;\r\n\r\n        // distribute share to affiliate\r\n        uint256 _aff1 = _eth.div(10);\r\n        uint256 _aff2 = _eth.div(20);\r\n        uint256 _aff3 = _eth.div(100).mul(3);\r\n\r\n        groupCut.transfer(_aff1);\r\n\r\n        // decide what to do with affiliate share of fees\r\n        // affiliate must not be self, and must have a name registered\r\n        if ((_affID != 0) && (_affID != _pID) && (plyr_[_affID].name != ''))\r\n        {\r\n            plyr_[_pID].laffID = _affID;\r\n            plyr_[_affID].aff = _aff2.add(plyr_[_affID].aff);\r\n\r\n            emit BigOneEvents.onAffiliatePayout(_affID, plyr_[_affID].addr, plyr_[_affID].name, _rID, _pID, _aff2, now);\r\n\r\n            //second level aff\r\n            uint256 _secLaff = plyr_[_affID].laffID;\r\n            if((_secLaff != 0) && (_secLaff != _pID))\r\n            {\r\n                plyr_[_secLaff].aff = _aff3.add(plyr_[_secLaff].aff);\r\n                emit BigOneEvents.onAffiliatePayout(_secLaff, plyr_[_secLaff].addr, plyr_[_secLaff].name, _rID, _pID, _aff3, now);\r\n            } else {\r\n                _addP3d = _addP3d.add(_aff3);\r\n            }\r\n        } else {\r\n            _addP3d = _addP3d.add(_aff2);\r\n        }\r\n        return(_addP3d);\r\n    }\r\n\r\n    function endRound(uint256 _mode)\r\n        private\r\n    {\r\n        uint256 _rID = currentRoundxType_[_mode];\r\n\r\n        // grab our winning player and team id's\r\n        uint256 _winKey = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty))).mod(round_[_rID].keyCount);\r\n        uint256 _winPID;\r\n        for(uint256 i = 0;i < round_[_rID].purchases.length; i++) {\r\n            if(round_[_rID].purchases[i].start <= _winKey && round_[_rID].purchases[i].end >= _winKey) {\r\n                _winPID = round_[_rID].purchases[i].plyr;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(_winPID != 0) {\r\n            // pay our winner\r\n            plyr_[_winPID].win = (round_[_rID].pot).add(plyr_[_winPID].win);\r\n\r\n            winners_[_mode].push(plyr_[_winPID].addr);\r\n            winNumbers_[_mode].push(_winKey);\r\n        }\r\n\r\n        round_[_rID].plyr = _winPID;\r\n        round_[_rID].end = now;\r\n\r\n        emit BigOneEvents.onEndRound\r\n        (\r\n            _rID,\r\n            _mode,\r\n            plyr_[_winPID].addr,\r\n            plyr_[_winPID].name,\r\n            round_[_rID].pot\r\n        );\r\n\r\n        // start next round\r\n        rID_++;\r\n        round_[rID_].start = now;\r\n        round_[rID_].typeID = _mode;\r\n        round_[rID_].count = round_[_rID].count + 1;\r\n        round_[rID_].pot = 0;\r\n\r\n        currentRoundxType_[_mode] = rID_;\r\n    }\r\n\r\n}\r\n\r\n//==============================================================================\r\n// interface\r\n//==============================================================================\r\n\r\ninterface UserDataManagerInterface {\r\n    function getPlayerID(address _addr) external returns (uint256);\r\n    function getPlayerName(uint256 _pID) external view returns (bytes32);\r\n    function getPlayerLaff(uint256 _pID) external view returns (uint256);\r\n    function getPlayerAddr(uint256 _pID) external view returns (address);\r\n    function getNameFee() external view returns (uint256);\r\n    function registerNameXIDFromDapp(address _addr, bytes32 _name, uint256 _affCode, bool _all) external payable returns(bool, uint256);\r\n    function registerNameXaddrFromDapp(address _addr, bytes32 _name, address _affCode, bool _all) external payable returns(bool, uint256);\r\n    function registerNameXnameFromDapp(address _addr, bytes32 _name, bytes32 _affCode, bool _all) external payable returns(bool, uint256);\r\n}\r\n\r\n//==============================================================================\r\n// struct\r\n//==============================================================================\r\nlibrary BigOneData {\r\n\r\n    struct Player {\r\n        address addr;   // player address\r\n        bytes32 name;   // player name\r\n        uint256 win;    // winnings vault\r\n        uint256 gen;    // general vault\r\n        uint256 aff;    // affiliate vault\r\n        uint256 lrnd;   // last round played\r\n        uint256 laff;   // last affiliate id used\r\n        uint256 laffID;   // last affiliate id unaffected\r\n    }\r\n    struct PlayerRoundData {\r\n        uint256 eth;    // eth player has added to round \r\n        uint256[] purchaseIDs;   // keys\r\n        uint256 keyCount;\r\n    }\r\n    struct RoundSetting {\r\n        uint256 limit;   \r\n        uint256 perShare; \r\n        uint256 shareMax;   \r\n        bool isValue;\r\n    }\r\n    struct Round {\r\n        uint256 plyr;   // pID of player in win\r\n        uint256 end;    // time ends/ended\r\n        bool ended;     // has round end function been ran\r\n        uint256 start;   // time round started\r\n\r\n        uint256 keyCount;   // keys\r\n        BigOneData.PurchaseRecord[] purchases;  \r\n        uint256 eth;    // total eth in\r\n        uint256 pot;    // eth to pot (during round) / final amount paid to winner (after round ends)\r\n\r\n        uint256 typeID;\r\n        uint256 count;\r\n    }\r\n    struct PurchaseRecord {\r\n        uint256 plyr;   \r\n        uint256 start;\r\n        uint256 end;\r\n    }\r\n\r\n}\r\n\r\n\r\nlibrary NameFilter {\r\n\r\n    function nameFilter(string _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n\r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n\r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n\r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    // require character is a space\r\n                    _temp[i] == 0x20 ||\r\n                    // OR lowercase a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    // or 0-9\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n\r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;\r\n            }\r\n        }\r\n\r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n\r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath \r\n{\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"reLoadXname\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"getCurrentRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentRoundxType_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round_\",\"outputs\":[{\"name\":\"plyr\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"keyCount\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"typeID\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rTypeID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"reLoadXid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXaddr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_laff\",\"type\":\"uint256\"}],\"name\":\"receivePlayerInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerVaults\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerAff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rSettingXTypeID_\",\"outputs\":[{\"name\":\"limit\",\"type\":\"uint256\"},{\"name\":\"perShare\",\"type\":\"uint256\"},{\"name\":\"shareMax\",\"type\":\"uint256\"},{\"name\":\"isValue\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXname\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"getWinners\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_keys\",\"type\":\"uint256\"},{\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"iWantXKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"reLoadXaddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"getWinNumbers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"buyXid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"},{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_all\",\"type\":\"bool\"}],\"name\":\"registerNameXID\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"buyXaddr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limit\",\"type\":\"uint256\"},{\"name\":\"_perShare\",\"type\":\"uint256\"},{\"name\":\"_shareMax\",\"type\":\"uint256\"}],\"name\":\"addRoundMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrRnds_\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"keyCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"buyXname\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_mode\",\"type\":\"uint256\"}],\"name\":\"getPlayerInfoByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"aff\",\"type\":\"uint256\"},{\"name\":\"lrnd\",\"type\":\"uint256\"},{\"name\":\"laff\",\"type\":\"uint256\"},{\"name\":\"laffID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isNewPlayer\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"affiliateID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliateName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onNewPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"keyCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"}],\"name\":\"onEndTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"affiliateID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliateName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onAffiliatePayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"roundTypeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"}],\"name\":\"onEndRound\",\"type\":\"event\"}]","ContractName":"BigOne","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1d438d5878c0f783bf673dda8242894bc708e933fd02297e56e04f226255f601"}]}