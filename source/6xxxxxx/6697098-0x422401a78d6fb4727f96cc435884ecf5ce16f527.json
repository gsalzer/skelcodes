{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract FollowersToken is ERC721 {\r\n\r\n\tstring public constant NAME \t\t= \"FollowersToken\";\r\n\tstring public constant SYMBOL \t\t= \"FWTK\";\r\n\r\n\tuint256 private startingPrice\t= 0.05 ether;\r\n\tuint256 private firstStepLimit \t= 6.4 ether;\r\n\tuint256 private secondStepLimit = 120.9324 ether;\r\n\tuint256 private thirdStepLimit \t= 792.5423 ether;\r\n\r\n\tbool \tprivate isPresale;\r\n\r\n\tmapping (uint256 => address) public personIndexToOwner;\r\n\tmapping (address => uint256) private ownershipTokenCount;\r\n\tmapping (uint256 => address) public personIndexToApproved;\r\n\tmapping (uint256 => uint256) private personIndexToPrice;\r\n\tmapping (uint256 => uint256) private personIndexToPriceLevel;\r\n\r\n\taddress public ceoAddress;\r\n\taddress public cooAddress;\r\n\r\n\tstruct Person {\r\n\t\tstring name;\r\n\t}\r\n\r\n\tPerson[] private persons;\r\n\r\n\tmodifier onlyCEO() {\r\n\t\trequire(msg.sender == ceoAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyCOO() {\r\n\t\trequire(msg.sender == cooAddress);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyCLevel() {\r\n\t\trequire( msg.sender == ceoAddress || msg.sender == cooAddress );\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor() public {\r\n\t\tceoAddress = msg.sender;\r\n\t\tcooAddress = msg.sender;\r\n\t\tisPresale  = true;\r\n\t}\r\n\r\n\tfunction startPresale() public onlyCLevel {\r\n\t\tisPresale = true;\r\n\t}\r\n\r\n\tfunction stopPresale() public onlyCLevel {\r\n\t\tisPresale = false;\r\n\t}\r\n\r\n\tfunction presale() public view returns ( bool presaleStatus ) {\r\n\t\treturn isPresale;\r\n\t}\r\n\r\n\tfunction approve( address _to, uint256 _tokenId ) public {\r\n\t\t// Caller must own token.\r\n\t\trequire( _owns( msg.sender , _tokenId ) );\r\n\t\tpersonIndexToApproved[_tokenId] = _to;\r\n\t\temit Approval( msg.sender , _to , _tokenId );\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\r\n\t\treturn ownershipTokenCount[_owner];\r\n\t}\r\n\r\n\tfunction createContractPerson( string _name , uint256 _price , address _owner ) public onlyCOO {\r\n\t\tif ( _price <= 0 ) {\r\n\t\t\t_price = startingPrice;\r\n\t\t}\r\n\t\t_createPerson( _name , _owner , _price );\r\n\t}\r\n\r\n\tfunction getPerson(uint256 _tokenId) public view returns ( string personName, uint256 sellingPrice, address owner , uint256 sellingPriceNext , uint256 priceLevel ) {\r\n\t\tPerson storage person = persons[_tokenId];\r\n\t\tpersonName \t\t\t= person.name;\r\n\t\tsellingPrice \t\t= personIndexToPrice[_tokenId];\r\n\t\towner \t\t\t\t= personIndexToOwner[_tokenId];\r\n\t\tpriceLevel \t\t\t= personIndexToPriceLevel[ _tokenId ];\r\n\t\tsellingPriceNext \t= _calcNextPrice( _tokenId );\r\n\t}\r\n\r\n\tfunction _calcNextPrice( uint256 _tokenId ) private view returns ( uint256 nextSellingPrice ) {\r\n\t\tuint256 sellingPrice \t= priceOf( _tokenId );\r\n\t\tif( isPresale == true ){\r\n\t\t\tnextSellingPrice =  uint256( SafeMath.div( SafeMath.mul( sellingPrice, 400 ) , 100 ) );\r\n\t\t}else{\r\n\t\t\tif ( sellingPrice < firstStepLimit ) {\r\n\t\t\t\tnextSellingPrice =  uint256( SafeMath.div( SafeMath.mul( sellingPrice, 200 ) , 100 ) );\r\n\t\t\t} else if ( sellingPrice < secondStepLimit ) {\r\n\t\t\t\tnextSellingPrice =  uint256( SafeMath.div( SafeMath.mul( sellingPrice, 180 ) , 100 ) );\r\n\t\t\t} else if ( sellingPrice < thirdStepLimit ) {\r\n\t\t\t\tnextSellingPrice =  uint256( SafeMath.div( SafeMath.mul( sellingPrice, 160 ) , 100 ) );\r\n\t\t\t} else {\r\n\t\t\t\tnextSellingPrice  =  uint256( SafeMath.div( SafeMath.mul( sellingPrice, 140 ) , 100 ) );\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nextSellingPrice;\r\n\t}\r\n\r\n\tfunction implementsERC721() public pure returns (bool) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction name() public pure returns (string) {\r\n\t\treturn NAME;\r\n\t}\r\n\r\n\tfunction ownerOf( uint256 _tokenId ) public view returns ( address owner ){\r\n\t\towner = personIndexToOwner[_tokenId];\r\n\t\trequire( owner != address(0) );\r\n\t}\r\n\r\n\tfunction payout( address _to ) public onlyCLevel {\r\n\t\t_payout( _to );\r\n\t}\r\n\r\n\tfunction purchase(uint256 _tokenId) public payable {\r\n\t\taddress oldOwner \t\t= personIndexToOwner[_tokenId];\r\n\t\taddress newOwner \t\t= msg.sender;\r\n\t\tuint256 sellingPrice \t= personIndexToPrice[_tokenId];\r\n\r\n\t\trequire( oldOwner != newOwner );\r\n\t\trequire( _addressNotNull( newOwner ) );\r\n\t\trequire( msg.value >= sellingPrice );\r\n\r\n\t\tuint256 payment \t\t= uint256( SafeMath.div( SafeMath.mul( sellingPrice , 94 ) , 100 ) );\r\n\t\tuint256 purchaseExcess \t= SafeMath.sub( msg.value , sellingPrice );\r\n\r\n\t\tif( isPresale == true ){\r\n\t\t\trequire( personIndexToPriceLevel[ _tokenId ] == 0 );\r\n\t\t}\r\n\t\tpersonIndexToPrice[ _tokenId ] \t\t= _calcNextPrice( _tokenId );\r\n\t\tpersonIndexToPriceLevel[ _tokenId ] = SafeMath.add( personIndexToPriceLevel[ _tokenId ] , 1 );\r\n\r\n\t\t_transfer( oldOwner , newOwner , _tokenId );\r\n\r\n\t\tif ( oldOwner != address(this) ) {\r\n\t\t\toldOwner.transfer( payment );\r\n\t\t}\r\n\r\n\t\tmsg.sender.transfer( purchaseExcess );\r\n\t}\r\n\r\n\tfunction priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n\t\treturn personIndexToPrice[_tokenId];\r\n\t}\r\n\r\n\tfunction setCEO(address _newCEO) public onlyCEO {\r\n\t\trequire(_newCEO != address(0));\r\n\t\tceoAddress = _newCEO;\r\n\t}\r\n\r\n\tfunction setCOO(address _newCOO) public onlyCEO {\r\n\t\trequire(_newCOO != address(0));\r\n\t\tcooAddress = _newCOO;\r\n\t}\r\n\r\n\tfunction symbol() public pure returns (string) {\r\n\t\treturn SYMBOL;\r\n\t}\r\n\r\n\tfunction takeOwnership(uint256 _tokenId) public {\r\n\t\taddress newOwner = msg.sender;\r\n\t\taddress oldOwner = personIndexToOwner[_tokenId];\r\n\t\trequire(_addressNotNull(newOwner));\r\n\t\trequire(_approved(newOwner, _tokenId));\r\n\t\t_transfer(oldOwner, newOwner, _tokenId);\r\n\t}\r\n\r\n\tfunction tokensOfOwner(address _owner) public view returns( uint256[] ownerTokens ) {\r\n\t\tuint256 tokenCount = balanceOf(_owner);\r\n\t\tif (tokenCount == 0) {\r\n\t\t\treturn new uint256[](0);\r\n\t\t} else {\r\n\t\t\tuint256[] memory result = new uint256[](tokenCount);\r\n\t\t\tuint256 totalPersons = totalSupply();\r\n\t\t\tuint256 resultIndex = 0;\r\n\t\t\tuint256 personId;\r\n\t\t\tfor (personId = 0; personId <= totalPersons; personId++) {\r\n\t\t\t\tif (personIndexToOwner[personId] == _owner) {\r\n\t\t\t\t\tresult[resultIndex] = personId;\r\n\t\t\t\t\tresultIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256 total) {\r\n\t\treturn persons.length;\r\n\t}\r\n\r\n\tfunction transfer( address _to, uint256 _tokenId ) public {\r\n\t\trequire( _owns(msg.sender, _tokenId ) );\r\n\t\trequire( _addressNotNull( _to ) );\r\n\t\t_transfer( msg.sender, _to, _tokenId );\r\n\t}\r\n\r\n\tfunction transferFrom( address _from, address _to, uint256 _tokenId ) public {\r\n\t\trequire(_owns(_from, _tokenId));\r\n\t\trequire(_approved(_to, _tokenId));\r\n\t\trequire(_addressNotNull(_to));\r\n\t\t_transfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n\tfunction _addressNotNull(address _to) private pure returns (bool) {\r\n\t\treturn _to != address(0);\r\n\t}\r\n\r\n\tfunction _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n\t\treturn personIndexToApproved[_tokenId] == _to;\r\n\t}\r\n\r\n\tfunction _createPerson( string _name, address _owner, uint256 _price ) private {\r\n\t\tPerson memory _person = Person({\r\n\t\t\tname: _name\r\n\t\t});\r\n\r\n\t\tuint256 newPersonId = persons.push(_person) - 1;\r\n\t\trequire(newPersonId == uint256(uint32(newPersonId)));\r\n\t\tpersonIndexToPrice[newPersonId] = _price;\r\n\t\tpersonIndexToPriceLevel[ newPersonId ] = 0;\r\n\t\t_transfer( address(0) , _owner, newPersonId);\r\n\t}\r\n\r\n\tfunction _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n\t\treturn claimant == personIndexToOwner[_tokenId];\r\n\t}\r\n\r\n\tfunction _payout(address _to) private {\r\n\t\tif (_to == address(0)) {\r\n\t\t\tceoAddress.transfer( address( this ).balance );\r\n\t\t} else {\r\n\t\t\t_to.transfer( address( this ).balance );\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _transfer(address _from, address _to, uint256 _tokenId) private {\r\n\t\townershipTokenCount[_to] = SafeMath.add( ownershipTokenCount[_to] , 1 );\r\n\t\tpersonIndexToOwner[_tokenId] = _to;\r\n\t\tif (_from != address(0)) {\r\n\t\t\townershipTokenCount[_from] = SafeMath.sub( ownershipTokenCount[_from] , 1 );\r\n\t\t\tdelete personIndexToApproved[_tokenId];\r\n\t\t}\r\n\t\temit Transfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getPerson\",\"outputs\":[{\"name\":\"personName\",\"type\":\"string\"},{\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"sellingPriceNext\",\"type\":\"uint256\"},{\"name\":\"priceLevel\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createContractPerson\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"personIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"personIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"name\":\"presaleStatus\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FollowersToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://59dd1558164b17ca4a47af763275232cf864eaf7416c3c91c8368ee08d982eee"}]}