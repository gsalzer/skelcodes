{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n * ETHCutter v2.0\r\n * \r\n * - 6% per day for 20 days (120% total)\r\n * - 6% referral program (1 level)\r\n * - 0.1-100 ETH per deposit (unlimited deposits count)\r\n * - Each deposit live for 20 days. Unlimited deposits for 1 adress.\r\n * \r\n *  1. Send 0.1-100 ETH to contract address. Gas limit: 300000.\r\n *  2. Send from 0 to 0.1 ETH and get your profit. You can get profit at any time (every minute, every hour, every day).\r\n *\r\n * \r\n */\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n        c = _a * _b;\r\n        require(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        return _a / _b;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n        c = _a + _b;\r\n        require(c >= _a);\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary AddressUtils {\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {size := extcodesize(_addr)}\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary Helpers {\r\n    function walletFromData(bytes data) internal pure returns (address wallet) {\r\n        assembly {\r\n            wallet := mload(add(data, 20))\r\n        }\r\n    }\r\n}\r\n\r\ncontract ETHCutter20 {\r\n    using SafeMath for uint256;\r\n    using AddressUtils for address;\r\n\r\n    address internal adminWallet;\r\n\r\n    uint256 constant internal DEPOSIT_MIN = 10 finney;\r\n    uint256 constant internal DEPOSIT_MAX = 10 ether;\r\n    uint256 constant internal DEPOSIT_PERIOD = 20 days;\r\n    uint256 constant internal TOTAL_PERCENT = 120;\r\n    uint256 constant internal UPLINE_PERCENT = 6;\r\n    uint256 constant internal EXPENSES_PERCENT = 15;\r\n\r\n    uint256 public totalDeposited = 0;\r\n    uint256 public totalWithdrawn = 0;\r\n    uint256 public usersCount = 0;\r\n    uint256 public depositsCount = 0;\r\n    uint256 internal expenses = 0;\r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => Deposit) public deposits;\r\n\r\n    struct Deposit {\r\n        uint256 createdAt;\r\n        uint256 endAt;\r\n        uint256 amount;\r\n        uint256 accrued;\r\n        uint256 totalForAccrual;\r\n        bool active;\r\n    }\r\n\r\n    struct User {\r\n        uint256 createdAt;\r\n        address upline;\r\n        uint256 totalDeposited;\r\n        uint256 totalWithdrawn;\r\n        uint256 depositsCount;\r\n        uint256[] deposits;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminWallet);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        adminWallet = msg.sender;\r\n        createUser(msg.sender, address(0));\r\n    }\r\n\r\n    function createUser(address wallet, address upline) internal {\r\n        users[wallet] = User({\r\n            createdAt : now,\r\n            upline : upline,\r\n            totalDeposited : 0,\r\n            totalWithdrawn : 0,\r\n            depositsCount : 0,\r\n            deposits : new uint256[](0)\r\n            });\r\n        usersCount++;\r\n    }\r\n\r\n    function createDeposit(address wallet, uint256 amount) internal {\r\n        User storage user = users[wallet];\r\n\r\n        Deposit memory deposit = Deposit({\r\n            createdAt : now,\r\n            endAt : now.add(DEPOSIT_PERIOD),\r\n            amount : amount,\r\n            accrued : 0,\r\n            totalForAccrual : amount.div(100).mul(TOTAL_PERCENT),\r\n            active : true\r\n        });\r\n\r\n        deposits[depositsCount] = deposit;\r\n        user.deposits.push(depositsCount);\r\n\r\n        user.totalDeposited = user.totalDeposited.add(amount);\r\n        totalDeposited = amount.add(totalDeposited);\r\n\r\n        user.depositsCount++;\r\n        depositsCount++;\r\n        expenses = expenses.add(amount.div(100).mul(EXPENSES_PERCENT));\r\n\r\n        uint256 referralFee = amount.div(100).mul(UPLINE_PERCENT);\r\n        transferReferralFee(user.upline, referralFee);\r\n    }\r\n\r\n    function transferReferralFee(address to, uint256 amount) internal {\r\n        if (to != address(0)) {\r\n            to.transfer(amount);\r\n        }\r\n    }\r\n\r\n    function getUpline() internal view returns (address){\r\n        address uplineWallet = Helpers.walletFromData(msg.data);\r\n        return users[uplineWallet].createdAt > 0 && msg.sender != uplineWallet\r\n        ? uplineWallet\r\n        : adminWallet;\r\n    }\r\n\r\n    function() payable public {\r\n        address wallet = msg.sender;\r\n        uint256 amount = msg.value;\r\n\r\n        require(wallet != address(0), 'Address incorrect');\r\n        require(!wallet.isContract(), 'Address is contract');\r\n        require(amount <= DEPOSIT_MAX, 'Amount too big');\r\n\r\n        if (users[wallet].createdAt == 0) {\r\n            createUser(wallet, getUpline());\r\n        }\r\n\r\n        if (amount >= DEPOSIT_MIN) {\r\n            createDeposit(wallet, amount);\r\n        } else {\r\n            accrualDeposits();\r\n        }\r\n    }\r\n\r\n    function accrualDeposits() internal {\r\n        address wallet = msg.sender;\r\n        User storage user = users[wallet];\r\n\r\n        for (uint i = 0; i < user.depositsCount; i++) {\r\n            if (deposits[user.deposits[i]].active) {\r\n                accrual(user.deposits[i], wallet);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAccrualAmount(Deposit deposit) internal view returns (uint256){\r\n        uint256 amount = deposit.totalForAccrual\r\n        .div(DEPOSIT_PERIOD)\r\n        .mul(\r\n            now.sub(deposit.createdAt)\r\n        )\r\n        .sub(deposit.accrued);\r\n\r\n        if (amount.add(deposit.accrued) > deposit.totalForAccrual) {\r\n            amount = deposit.totalForAccrual.sub(deposit.accrued);\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function accrual(uint256 depositId, address wallet) internal {\r\n        uint256 amount = getAccrualAmount(deposits[depositId]);\r\n        Deposit storage deposit = deposits[depositId];\r\n\r\n        withdraw(wallet, amount);\r\n\r\n        deposits[depositId].accrued = deposit.accrued.add(amount);\r\n\r\n        if (deposits[depositId].accrued >= deposit.totalForAccrual) {\r\n            deposits[depositId].active = false;\r\n        }\r\n    }\r\n\r\n    function withdraw(address wallet, uint256 amount) internal {\r\n        wallet.transfer(amount);\r\n        totalWithdrawn = totalWithdrawn.add(amount);\r\n        users[wallet].totalWithdrawn = users[wallet].totalWithdrawn.add(amount);\r\n    }\r\n\r\n    function withdrawExpenses() public onlyAdmin {\r\n        adminWallet.transfer(expenses);\r\n        expenses = 0;\r\n    }\r\n\r\n    function getUserDeposits(address _address) public view returns (uint256[]){\r\n        return users[_address].deposits;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawExpenses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"upline\",\"type\":\"address\"},{\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"name\":\"depositsCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"endAt\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"accrued\",\"type\":\"uint256\"},{\"name\":\"totalForAccrual\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"ETHCutter20","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://daca98a32e6fb3e357d150a93d1171fbaa21f2a905a8090b34020366508dfc6b"}]}