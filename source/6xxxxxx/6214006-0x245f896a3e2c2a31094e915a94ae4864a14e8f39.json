{"status":"1","message":"OK","result":[{"SourceCode":"/* Author: Victor Mezrin  victor@mezrin.com */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title CommonModifiersInterface\r\n * @dev Base contract which contains common checks.\r\n */\r\ncontract CommonModifiersInterface {\r\n\r\n  /**\r\n   * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n   */\r\n  function isContract(address _targetAddress) internal constant returns (bool);\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the _targetAddress is a contract.\r\n   */\r\n  modifier onlyContractAddress(address _targetAddress) {\r\n    require(isContract(_targetAddress) == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title CommonModifiers\r\n * @dev Base contract which contains common checks.\r\n */\r\ncontract CommonModifiers is CommonModifiersInterface {\r\n\r\n  /**\r\n   * @dev Assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n   */\r\n  function isContract(address _targetAddress) internal constant returns (bool) {\r\n    require (_targetAddress != address(0x0));\r\n\r\n    uint256 length;\r\n    assembly {\r\n      //retrieve the size of the code on target address, this needs assembly\r\n      length := extcodesize(_targetAddress)\r\n    }\r\n    return (length > 0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title AssetIDInterface\r\n * @dev Interface of a contract that assigned to an asset (JNT, JUSD etc.)\r\n * @dev Contracts for the same asset (like JNT, JUSD etc.) will have the same AssetID.\r\n * @dev This will help to avoid misconfiguration of contracts\r\n */\r\ncontract AssetIDInterface {\r\n  function getAssetID() public constant returns (string);\r\n  function getAssetIDHash() public constant returns (bytes32);\r\n}\r\n\r\n\r\n/**\r\n * @title AssetID\r\n * @dev Base contract implementing AssetIDInterface\r\n */\r\ncontract AssetID is AssetIDInterface {\r\n\r\n  /* Storage */\r\n\r\n  string assetID;\r\n\r\n\r\n  /* Constructor */\r\n\r\n  constructor (string _assetID) public {\r\n    require(bytes(_assetID).length > 0);\r\n\r\n    assetID = _assetID;\r\n  }\r\n\r\n\r\n  /* Getters */\r\n\r\n  function getAssetID() public constant returns (string) {\r\n    return assetID;\r\n  }\r\n\r\n  function getAssetIDHash() public constant returns (bytes32) {\r\n    return keccak256(assetID);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title OwnableInterface\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract OwnableInterface {\r\n\r\n  /**\r\n   * @dev The getter for \"owner\" contract variable\r\n   */\r\n  function getOwner() public constant returns (address);\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the current owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require (msg.sender == getOwner());\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is OwnableInterface {\r\n\r\n  /* Storage */\r\n\r\n  address owner = address(0x0);\r\n  address proposedOwner = address(0x0);\r\n\r\n\r\n  /* Events */\r\n\r\n  event OwnerAssignedEvent(address indexed newowner);\r\n  event OwnershipOfferCreatedEvent(address indexed currentowner, address indexed proposedowner);\r\n  event OwnershipOfferAcceptedEvent(address indexed currentowner, address indexed proposedowner);\r\n  event OwnershipOfferCancelledEvent(address indexed currentowner, address indexed proposedowner);\r\n\r\n\r\n  /**\r\n   * @dev The constructor sets the initial `owner` to the passed account.\r\n   */\r\n  constructor () public {\r\n    owner = msg.sender;\r\n\r\n    emit OwnerAssignedEvent(owner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Old owner requests transfer ownership to the new owner.\r\n   * @param _proposedOwner The address to transfer ownership to.\r\n   */\r\n  function createOwnershipOffer(address _proposedOwner) external onlyOwner {\r\n    require (proposedOwner == address(0x0));\r\n    require (_proposedOwner != address(0x0));\r\n    require (_proposedOwner != address(this));\r\n\r\n    proposedOwner = _proposedOwner;\r\n\r\n    emit OwnershipOfferCreatedEvent(owner, _proposedOwner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the new owner to accept an ownership offer to contract control.\r\n   */\r\n  //noinspection UnprotectedFunction\r\n  function acceptOwnershipOffer() external {\r\n    require (proposedOwner != address(0x0));\r\n    require (msg.sender == proposedOwner);\r\n\r\n    address _oldOwner = owner;\r\n    owner = proposedOwner;\r\n    proposedOwner = address(0x0);\r\n\r\n    emit OwnerAssignedEvent(owner);\r\n    emit OwnershipOfferAcceptedEvent(_oldOwner, owner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Old owner cancels transfer ownership to the new owner.\r\n   */\r\n  function cancelOwnershipOffer() external {\r\n    require (proposedOwner != address(0x0));\r\n    require (msg.sender == owner || msg.sender == proposedOwner);\r\n\r\n    address _oldProposedOwner = proposedOwner;\r\n    proposedOwner = address(0x0);\r\n\r\n    emit OwnershipOfferCancelledEvent(owner, _oldProposedOwner);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev The getter for \"owner\" contract variable\r\n   */\r\n  function getOwner() public constant returns (address) {\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev The getter for \"proposedOwner\" contract variable\r\n   */\r\n  function getProposedOwner() public constant returns (address) {\r\n    return proposedOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ManageableInterface\r\n * @dev Contract that allows to grant permissions to any address\r\n * @dev In real life we are no able to perform all actions with just one Ethereum address\r\n * @dev because risks are too high.\r\n * @dev Instead owner delegates rights to manage an contract to the different addresses and\r\n * @dev stay able to revoke permissions at any time.\r\n */\r\ncontract ManageableInterface {\r\n\r\n  /**\r\n   * @dev Function to check if the manager can perform the action or not\r\n   * @param _manager        address Manager`s address\r\n   * @param _permissionName string  Permission name\r\n   * @return True if manager is enabled and has been granted needed permission\r\n   */\r\n  function isManagerAllowed(address _manager, string _permissionName) public constant returns (bool);\r\n\r\n  /**\r\n   * @dev Modifier to use in derived contracts\r\n   */\r\n  modifier onlyAllowedManager(string _permissionName) {\r\n    require(isManagerAllowed(msg.sender, _permissionName) == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\ncontract Manageable is OwnableInterface,\r\n                       ManageableInterface {\r\n\r\n  /* Storage */\r\n\r\n  mapping (address => bool) managerEnabled;  // hard switch for a manager - on/off\r\n  mapping (address => mapping (string => bool)) managerPermissions;  // detailed info about manager`s permissions\r\n\r\n\r\n  /* Events */\r\n\r\n  event ManagerEnabledEvent(address indexed manager);\r\n  event ManagerDisabledEvent(address indexed manager);\r\n  event ManagerPermissionGrantedEvent(address indexed manager, bytes32 permission);\r\n  event ManagerPermissionRevokedEvent(address indexed manager, bytes32 permission);\r\n\r\n\r\n  /* Configure contract */\r\n\r\n  /**\r\n   * @dev Function to add new manager\r\n   * @param _manager address New manager\r\n   */\r\n  function enableManager(address _manager) external onlyOwner onlyValidManagerAddress(_manager) {\r\n    require(managerEnabled[_manager] == false);\r\n\r\n    managerEnabled[_manager] = true;\r\n\r\n    emit ManagerEnabledEvent(_manager);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to remove existing manager\r\n   * @param _manager address Existing manager\r\n   */\r\n  function disableManager(address _manager) external onlyOwner onlyValidManagerAddress(_manager) {\r\n    require(managerEnabled[_manager] == true);\r\n\r\n    managerEnabled[_manager] = false;\r\n\r\n    emit ManagerDisabledEvent(_manager);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to grant new permission to the manager\r\n   * @param _manager        address Existing manager\r\n   * @param _permissionName string  Granted permission name\r\n   */\r\n  function grantManagerPermission(\r\n    address _manager, string _permissionName\r\n  )\r\n    external\r\n    onlyOwner\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n  {\r\n    require(managerPermissions[_manager][_permissionName] == false);\r\n\r\n    managerPermissions[_manager][_permissionName] = true;\r\n\r\n    emit ManagerPermissionGrantedEvent(_manager, keccak256(_permissionName));\r\n  }\r\n\r\n  /**\r\n   * @dev Function to revoke permission of the manager\r\n   * @param _manager        address Existing manager\r\n   * @param _permissionName string  Revoked permission name\r\n   */\r\n  function revokeManagerPermission(\r\n    address _manager, string _permissionName\r\n  )\r\n    external\r\n    onlyOwner\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n  {\r\n    require(managerPermissions[_manager][_permissionName] == true);\r\n\r\n    managerPermissions[_manager][_permissionName] = false;\r\n\r\n    emit ManagerPermissionRevokedEvent(_manager, keccak256(_permissionName));\r\n  }\r\n\r\n\r\n  /* Getters */\r\n\r\n  /**\r\n   * @dev Function to check manager status\r\n   * @param _manager address Manager`s address\r\n   * @return True if manager is enabled\r\n   */\r\n  function isManagerEnabled(\r\n    address _manager\r\n  )\r\n    public\r\n    constant\r\n    onlyValidManagerAddress(_manager)\r\n    returns (bool)\r\n  {\r\n    return managerEnabled[_manager];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check permissions of a manager\r\n   * @param _manager        address Manager`s address\r\n   * @param _permissionName string  Permission name\r\n   * @return True if manager has been granted needed permission\r\n   */\r\n  function isPermissionGranted(\r\n    address _manager, string _permissionName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n    returns (bool)\r\n  {\r\n    return managerPermissions[_manager][_permissionName];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check if the manager can perform the action or not\r\n   * @param _manager        address Manager`s address\r\n   * @param _permissionName string  Permission name\r\n   * @return True if manager is enabled and has been granted needed permission\r\n   */\r\n  function isManagerAllowed(\r\n    address _manager, string _permissionName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidManagerAddress(_manager)\r\n    onlyValidPermissionName(_permissionName)\r\n    returns (bool)\r\n  {\r\n    return (managerEnabled[_manager] && managerPermissions[_manager][_permissionName]);\r\n  }\r\n\r\n\r\n  /* Helpers */\r\n\r\n  /**\r\n   * @dev Modifier to check manager address\r\n   */\r\n  modifier onlyValidManagerAddress(address _manager) {\r\n    require(_manager != address(0x0));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to check name of manager permission\r\n   */\r\n  modifier onlyValidPermissionName(string _permissionName) {\r\n    require(bytes(_permissionName).length != 0);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title PausableInterface\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n * @dev Based on zeppelin's Pausable, but integrated with Manageable\r\n * @dev Contract is in paused state by default and should be explicitly unlocked\r\n */\r\ncontract PausableInterface {\r\n\r\n  /**\r\n   * Events\r\n   */\r\n\r\n  event PauseEvent();\r\n  event UnpauseEvent();\r\n\r\n\r\n  /**\r\n   * @dev called by the manager to pause, triggers stopped state\r\n   */\r\n  function pauseContract() public;\r\n\r\n  /**\r\n   * @dev called by the manager to unpause, returns to normal state\r\n   */\r\n  function unpauseContract() public;\r\n\r\n  /**\r\n   * @dev The getter for \"paused\" contract variable\r\n   */\r\n  function getPaused() public constant returns (bool);\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenContractNotPaused() {\r\n    require(getPaused() == false);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenContractPaused {\r\n    require(getPaused() == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n * @dev Based on zeppelin's Pausable, but integrated with Manageable\r\n * @dev Contract is in paused state by default and should be explicitly unlocked\r\n */\r\ncontract Pausable is ManageableInterface,\r\n                     PausableInterface {\r\n\r\n  /**\r\n   * Storage\r\n   */\r\n\r\n  bool paused = true;\r\n\r\n\r\n  /**\r\n   * @dev called by the manager to pause, triggers stopped state\r\n   */\r\n  function pauseContract() public onlyAllowedManager('pause_contract') whenContractNotPaused {\r\n    paused = true;\r\n    emit PauseEvent();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the manager to unpause, returns to normal state\r\n   */\r\n  function unpauseContract() public onlyAllowedManager('unpause_contract') whenContractPaused {\r\n    paused = false;\r\n    emit UnpauseEvent();\r\n  }\r\n\r\n  /**\r\n   * @dev The getter for \"paused\" contract variable\r\n   */\r\n  function getPaused() public constant returns (bool) {\r\n    return paused;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title BytecodeExecutorInterface interface\r\n * @dev Implementation of a contract that execute any bytecode on behalf of the contract\r\n * @dev Last resort for the immutable and not-replaceable contract :)\r\n */\r\ncontract BytecodeExecutorInterface {\r\n\r\n  /* Events */\r\n\r\n  event CallExecutedEvent(address indexed target,\r\n                          uint256 suppliedGas,\r\n                          uint256 ethValue,\r\n                          bytes32 transactionBytecodeHash);\r\n  event DelegatecallExecutedEvent(address indexed target,\r\n                                  uint256 suppliedGas,\r\n                                  bytes32 transactionBytecodeHash);\r\n\r\n\r\n  /* Functions */\r\n\r\n  function executeCall(address _target, uint256 _suppliedGas, uint256 _ethValue, bytes _transactionBytecode) external;\r\n  function executeDelegatecall(address _target, uint256 _suppliedGas, bytes _transactionBytecode) external;\r\n}\r\n\r\n\r\n/**\r\n * @title BytecodeExecutor\r\n * @dev Implementation of a contract that execute any bytecode on behalf of the contract\r\n * @dev Last resort for the immutable and not-replaceable contract :)\r\n */\r\ncontract BytecodeExecutor is ManageableInterface,\r\n                             BytecodeExecutorInterface {\r\n\r\n  /* Storage */\r\n\r\n  bool underExecution = false;\r\n\r\n\r\n  /* BytecodeExecutorInterface */\r\n\r\n  function executeCall(\r\n    address _target,\r\n    uint256 _suppliedGas,\r\n    uint256 _ethValue,\r\n    bytes _transactionBytecode\r\n  )\r\n    external\r\n    onlyAllowedManager('execute_call')\r\n  {\r\n    require(underExecution == false);\r\n\r\n    underExecution = true; // Avoid recursive calling\r\n    _target.call.gas(_suppliedGas).value(_ethValue)(_transactionBytecode);\r\n    underExecution = false;\r\n\r\n    emit CallExecutedEvent(_target, _suppliedGas, _ethValue, keccak256(_transactionBytecode));\r\n  }\r\n\r\n  function executeDelegatecall(\r\n    address _target,\r\n    uint256 _suppliedGas,\r\n    bytes _transactionBytecode\r\n  )\r\n    external\r\n    onlyAllowedManager('execute_delegatecall')\r\n  {\r\n    require(underExecution == false);\r\n\r\n    underExecution = true; // Avoid recursive calling\r\n    _target.delegatecall.gas(_suppliedGas)(_transactionBytecode);\r\n    underExecution = false;\r\n\r\n    emit DelegatecallExecutedEvent(_target, _suppliedGas, keccak256(_transactionBytecode));\r\n  }\r\n}\r\n\r\n\r\ncontract CrydrViewBaseInterface {\r\n\r\n  /* Events */\r\n\r\n  event CrydrControllerChangedEvent(address indexed crydrcontroller);\r\n\r\n\r\n  /* Configuration */\r\n\r\n  function setCrydrController(address _crydrController) external;\r\n  function getCrydrController() public constant returns (address);\r\n\r\n  function getCrydrViewStandardName() public constant returns (string);\r\n  function getCrydrViewStandardNameHash() public constant returns (bytes32);\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrViewERC20MintableInterface\r\n * @dev Contract is able to create Mint/Burn events with the cal from controller\r\n */\r\ncontract CrydrViewERC20MintableInterface {\r\n  event MintEvent(address indexed owner, uint256 value);\r\n  event BurnEvent(address indexed owner, uint256 value);\r\n\r\n  function emitMintEvent(address _owner, uint256 _value) external;\r\n  function emitBurnEvent(address _owner, uint256 _value) external;\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrViewERC20LoggableInterface\r\n * @dev Contract is able to create Transfer/Approval events with the cal from controller\r\n */\r\ncontract CrydrViewERC20LoggableInterface {\r\n\r\n  function emitTransferEvent(address _from, address _to, uint256 _value) external;\r\n  function emitApprovalEvent(address _owner, address _spender, uint256 _value) external;\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrStorageBalanceInterface interface\r\n * @dev Interface of a contract that manages balance of an CryDR\r\n */\r\ncontract CrydrStorageBalanceInterface {\r\n\r\n  /* Events */\r\n\r\n  event AccountBalanceIncreasedEvent(address indexed account, uint256 value);\r\n  event AccountBalanceDecreasedEvent(address indexed account, uint256 value);\r\n\r\n\r\n  /* Low-level change of balance. Implied that totalSupply kept in sync. */\r\n\r\n  function increaseBalance(address _account, uint256 _value) public;\r\n  function decreaseBalance(address _account, uint256 _value) public;\r\n  function getBalance(address _account) public constant returns (uint256);\r\n  function getTotalSupply() public constant returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrStorageBlocksInterface interface\r\n * @dev Interface of a contract that manages balance of an CryDR\r\n */\r\ncontract CrydrStorageBlocksInterface {\r\n\r\n  /* Events */\r\n\r\n  event AccountBlockedEvent(address indexed account);\r\n  event AccountUnblockedEvent(address indexed account);\r\n  event AccountFundsBlockedEvent(address indexed account, uint256 value);\r\n  event AccountFundsUnblockedEvent(address indexed account, uint256 value);\r\n\r\n\r\n  /* Low-level change of blocks and getters */\r\n\r\n  function blockAccount(address _account) public;\r\n  function unblockAccount(address _account) public;\r\n  function getAccountBlocks(address _account) public constant returns (uint256);\r\n\r\n  function blockAccountFunds(address _account, uint256 _value) public;\r\n  function unblockAccountFunds(address _account, uint256 _value) public;\r\n  function getAccountBlockedFunds(address _account) public constant returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrStorageAllowanceInterface interface\r\n * @dev Interface of a contract that manages balance of an CryDR\r\n */\r\ncontract CrydrStorageAllowanceInterface {\r\n\r\n  /* Events */\r\n\r\n  event AccountAllowanceIncreasedEvent(address indexed owner, address indexed spender, uint256 value);\r\n  event AccountAllowanceDecreasedEvent(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n  /* Low-level change of allowance */\r\n\r\n  function increaseAllowance(address _owner, address _spender, uint256 _value) public;\r\n  function decreaseAllowance(address _owner, address _spender, uint256 _value) public;\r\n  function getAllowance(address _owner, address _spender) public constant returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrStorageERC20Interface interface\r\n * @dev Interface of a contract that manages balance of an CryDR and have optimization for ERC20 controllers\r\n */\r\ncontract CrydrStorageERC20Interface {\r\n\r\n  /* Events */\r\n\r\n  event CrydrTransferredEvent(address indexed from, address indexed to, uint256 value);\r\n  event CrydrTransferredFromEvent(address indexed spender, address indexed from, address indexed to, uint256 value);\r\n  event CrydrSpendingApprovedEvent(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n  /* ERC20 optimization. _msgsender - account that invoked CrydrView */\r\n\r\n  function transfer(address _msgsender, address _to, uint256 _value) public;\r\n  function transferFrom(address _msgsender, address _from, address _to, uint256 _value) public;\r\n  function approve(address _msgsender, address _spender, uint256 _value) public;\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title CrydrControllerBaseInterface interface\r\n * @dev Interface of a contract that implement business-logic of an CryDR, mediates CryDR views and storage\r\n */\r\ncontract CrydrControllerBaseInterface {\r\n\r\n  /* Events */\r\n\r\n  event CrydrStorageChangedEvent(address indexed crydrstorage);\r\n  event CrydrViewAddedEvent(address indexed crydrview, bytes32 standardname);\r\n  event CrydrViewRemovedEvent(address indexed crydrview, bytes32 standardname);\r\n\r\n\r\n  /* Configuration */\r\n\r\n  function setCrydrStorage(address _newStorage) external;\r\n  function getCrydrStorageAddress() public constant returns (address);\r\n\r\n  function setCrydrView(address _newCrydrView, string _viewApiStandardName) external;\r\n  function removeCrydrView(string _viewApiStandardName) external;\r\n  function getCrydrViewAddress(string _viewApiStandardName) public constant returns (address);\r\n\r\n  function isCrydrViewAddress(address _crydrViewAddress) public constant returns (bool);\r\n  function isCrydrViewRegistered(string _viewApiStandardName) public constant returns (bool);\r\n\r\n\r\n  /* Helpers */\r\n\r\n  modifier onlyValidCrydrViewStandardName(string _viewApiStandard) {\r\n    require(bytes(_viewApiStandard).length > 0);\r\n    _;\r\n  }\r\n\r\n  modifier onlyCrydrView() {\r\n    require(isCrydrViewAddress(msg.sender) == true);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrControllerBase\r\n * @dev Implementation of a contract with business-logic of an CryDR, mediates CryDR views and storage\r\n */\r\ncontract CrydrControllerBase is CommonModifiersInterface,\r\n                                ManageableInterface,\r\n                                PausableInterface,\r\n                                CrydrControllerBaseInterface {\r\n\r\n  /* Storage */\r\n\r\n  address crydrStorage = address(0x0);\r\n  mapping (string => address) crydrViewsAddresses;\r\n  mapping (address => bool) isRegisteredView;\r\n\r\n\r\n  /* CrydrControllerBaseInterface */\r\n\r\n  function setCrydrStorage(\r\n    address _crydrStorage\r\n  )\r\n    external\r\n    onlyContractAddress(_crydrStorage)\r\n    onlyAllowedManager('set_crydr_storage')\r\n    whenContractPaused\r\n  {\r\n    require(_crydrStorage != address(this));\r\n    require(_crydrStorage != address(crydrStorage));\r\n\r\n    crydrStorage = _crydrStorage;\r\n\r\n    emit CrydrStorageChangedEvent(_crydrStorage);\r\n  }\r\n\r\n  function getCrydrStorageAddress() public constant returns (address) {\r\n    return address(crydrStorage);\r\n  }\r\n\r\n\r\n  function setCrydrView(\r\n    address _newCrydrView, string _viewApiStandardName\r\n  )\r\n    external\r\n    onlyContractAddress(_newCrydrView)\r\n    onlyValidCrydrViewStandardName(_viewApiStandardName)\r\n    onlyAllowedManager('set_crydr_view')\r\n    whenContractPaused\r\n  {\r\n    require(_newCrydrView != address(this));\r\n    require(crydrViewsAddresses[_viewApiStandardName] == address(0x0));\r\n\r\n    CrydrViewBaseInterface crydrViewInstance = CrydrViewBaseInterface(_newCrydrView);\r\n    bytes32 standardNameHash = crydrViewInstance.getCrydrViewStandardNameHash();\r\n    require(standardNameHash == keccak256(_viewApiStandardName));\r\n\r\n    crydrViewsAddresses[_viewApiStandardName] = _newCrydrView;\r\n    isRegisteredView[_newCrydrView] = true;\r\n\r\n    emit CrydrViewAddedEvent(_newCrydrView, keccak256(_viewApiStandardName));\r\n  }\r\n\r\n  function removeCrydrView(\r\n    string _viewApiStandardName\r\n  )\r\n    external\r\n    onlyValidCrydrViewStandardName(_viewApiStandardName)\r\n    onlyAllowedManager('remove_crydr_view')\r\n    whenContractPaused\r\n  {\r\n    require(crydrViewsAddresses[_viewApiStandardName] != address(0x0));\r\n\r\n    address removedView = crydrViewsAddresses[_viewApiStandardName];\r\n\r\n    // make changes to the storage\r\n    crydrViewsAddresses[_viewApiStandardName] == address(0x0);\r\n    isRegisteredView[removedView] = false;\r\n\r\n    emit CrydrViewRemovedEvent(removedView, keccak256(_viewApiStandardName));\r\n  }\r\n\r\n  function getCrydrViewAddress(\r\n    string _viewApiStandardName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidCrydrViewStandardName(_viewApiStandardName)\r\n    returns (address)\r\n  {\r\n    require(crydrViewsAddresses[_viewApiStandardName] != address(0x0));\r\n\r\n    return crydrViewsAddresses[_viewApiStandardName];\r\n  }\r\n\r\n  function isCrydrViewAddress(\r\n    address _crydrViewAddress\r\n  )\r\n    public\r\n    constant\r\n    returns (bool)\r\n  {\r\n    require(_crydrViewAddress != address(0x0));\r\n\r\n    return isRegisteredView[_crydrViewAddress];\r\n  }\r\n\r\n  function isCrydrViewRegistered(\r\n    string _viewApiStandardName\r\n  )\r\n    public\r\n    constant\r\n    onlyValidCrydrViewStandardName(_viewApiStandardName)\r\n    returns (bool)\r\n  {\r\n    return (crydrViewsAddresses[_viewApiStandardName] != address(0x0));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrControllerBlockableInterface interface\r\n * @dev Interface of a contract that allows block/unlock accounts\r\n */\r\ncontract CrydrControllerBlockableInterface {\r\n\r\n  /* blocking/unlocking */\r\n\r\n  function blockAccount(address _account) public;\r\n  function unblockAccount(address _account) public;\r\n\r\n  function blockAccountFunds(address _account, uint256 _value) public;\r\n  function unblockAccountFunds(address _account, uint256 _value) public;\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrControllerBlockable interface\r\n * @dev Implementation of a contract that allows blocking/unlocking accounts\r\n */\r\ncontract CrydrControllerBlockable is ManageableInterface,\r\n                                     CrydrControllerBaseInterface,\r\n                                     CrydrControllerBlockableInterface {\r\n\r\n\r\n  /* blocking/unlocking */\r\n\r\n  function blockAccount(\r\n    address _account\r\n  )\r\n    public\r\n    onlyAllowedManager('block_account')\r\n  {\r\n    CrydrStorageBlocksInterface(getCrydrStorageAddress()).blockAccount(_account);\r\n  }\r\n\r\n  function unblockAccount(\r\n    address _account\r\n  )\r\n    public\r\n    onlyAllowedManager('unblock_account')\r\n  {\r\n    CrydrStorageBlocksInterface(getCrydrStorageAddress()).unblockAccount(_account);\r\n  }\r\n\r\n  function blockAccountFunds(\r\n    address _account,\r\n    uint256 _value\r\n  )\r\n    public\r\n    onlyAllowedManager('block_account_funds')\r\n  {\r\n    CrydrStorageBlocksInterface(getCrydrStorageAddress()).blockAccountFunds(_account, _value);\r\n  }\r\n\r\n  function unblockAccountFunds(\r\n    address _account,\r\n    uint256 _value\r\n  )\r\n    public\r\n    onlyAllowedManager('unblock_account_funds')\r\n  {\r\n    CrydrStorageBlocksInterface(getCrydrStorageAddress()).unblockAccountFunds(_account, _value);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrControllerMintableInterface interface\r\n * @dev Interface of a contract that allows minting/burning of tokens\r\n */\r\ncontract CrydrControllerMintableInterface {\r\n\r\n  /* Events */\r\n\r\n  event MintEvent(address indexed owner, uint256 value);\r\n  event BurnEvent(address indexed owner, uint256 value);\r\n\r\n  /* minting/burning */\r\n\r\n  function mint(address _account, uint256 _value) public;\r\n  function burn(address _account, uint256 _value) public;\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrControllerMintable interface\r\n * @dev Implementation of a contract that allows minting/burning of tokens\r\n * @dev We do not use events Transfer(0x0, owner, amount) for minting as described in the EIP20\r\n * @dev because that are not transfers\r\n */\r\ncontract CrydrControllerMintable is ManageableInterface,\r\n                                    PausableInterface,\r\n                                    CrydrControllerBaseInterface,\r\n                                    CrydrControllerMintableInterface {\r\n\r\n  /* minting/burning */\r\n\r\n  function mint(\r\n    address _account, uint256 _value\r\n  )\r\n    public\r\n    whenContractNotPaused\r\n    onlyAllowedManager('mint_crydr')\r\n  {\r\n    // input parameters checked by the storage\r\n\r\n    CrydrStorageBalanceInterface(getCrydrStorageAddress()).increaseBalance(_account, _value);\r\n\r\n    emit MintEvent(_account, _value);\r\n    if (isCrydrViewRegistered('erc20') == true) {\r\n      CrydrViewERC20MintableInterface(getCrydrViewAddress('erc20')).emitMintEvent(_account, _value);\r\n      CrydrViewERC20LoggableInterface(getCrydrViewAddress('erc20')).emitTransferEvent(address(0x0), _account, _value);\r\n    }\r\n  }\r\n\r\n  function burn(\r\n    address _account, uint256 _value\r\n  )\r\n    public\r\n    whenContractNotPaused\r\n    onlyAllowedManager('burn_crydr')\r\n  {\r\n    // input parameters checked by the storage\r\n\r\n    CrydrStorageBalanceInterface(getCrydrStorageAddress()).decreaseBalance(_account, _value);\r\n\r\n    emit BurnEvent(_account, _value);\r\n    if (isCrydrViewRegistered('erc20') == true) {\r\n      CrydrViewERC20MintableInterface(getCrydrViewAddress('erc20')).emitBurnEvent(_account, _value);\r\n      CrydrViewERC20LoggableInterface(getCrydrViewAddress('erc20')).emitTransferEvent(_account, address(0x0), _value);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrControllerERC20Interface interface\r\n * @dev Interface of a contract that implement business-logic of an ERC20 CryDR\r\n */\r\ncontract CrydrControllerERC20Interface {\r\n\r\n  /* ERC20 support. _msgsender - account that invoked CrydrView */\r\n\r\n  function transfer(address _msgsender, address _to, uint256 _value) public;\r\n  function getTotalSupply() public constant returns (uint256);\r\n  function getBalance(address _owner) public constant returns (uint256);\r\n\r\n  function approve(address _msgsender, address _spender, uint256 _value) public;\r\n  function transferFrom(address _msgsender, address _from, address _to, uint256 _value) public;\r\n  function getAllowance(address _owner, address _spender) public constant returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrControllerERC20Interface interface\r\n * @dev Interface of a contract that implement business-logic of an ERC20 CryDR\r\n */\r\ncontract CrydrControllerERC20 is PausableInterface,\r\n                                 CrydrControllerBaseInterface,\r\n                                 CrydrControllerERC20Interface {\r\n\r\n  /* ERC20 support. _msgsender - account that invoked CrydrView */\r\n\r\n  function transfer(\r\n    address _msgsender,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    onlyCrydrView\r\n    whenContractNotPaused\r\n  {\r\n    CrydrStorageERC20Interface(getCrydrStorageAddress()).transfer(_msgsender, _to, _value);\r\n\r\n    if (isCrydrViewRegistered('erc20') == true) {\r\n      CrydrViewERC20LoggableInterface(getCrydrViewAddress('erc20')).emitTransferEvent(_msgsender, _to, _value);\r\n    }\r\n  }\r\n\r\n  function getTotalSupply() public constant returns (uint256) {\r\n    return CrydrStorageBalanceInterface(getCrydrStorageAddress()).getTotalSupply();\r\n  }\r\n\r\n  function getBalance(address _owner) public constant returns (uint256) {\r\n    return CrydrStorageBalanceInterface(getCrydrStorageAddress()).getBalance(_owner);\r\n  }\r\n\r\n  function approve(\r\n    address _msgsender,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    onlyCrydrView\r\n    whenContractNotPaused\r\n  {\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    // We decided to enforce users to set 0 before set new value\r\n    uint256 allowance = CrydrStorageAllowanceInterface(getCrydrStorageAddress()).getAllowance(_msgsender, _spender);\r\n    require((allowance > 0 && _value == 0) || (allowance == 0 && _value > 0));\r\n\r\n    CrydrStorageERC20Interface(getCrydrStorageAddress()).approve(_msgsender, _spender, _value);\r\n\r\n    if (isCrydrViewRegistered('erc20') == true) {\r\n      CrydrViewERC20LoggableInterface(getCrydrViewAddress('erc20')).emitApprovalEvent(_msgsender, _spender, _value);\r\n    }\r\n  }\r\n\r\n  function transferFrom(\r\n    address _msgsender,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    onlyCrydrView\r\n    whenContractNotPaused\r\n  {\r\n    CrydrStorageERC20Interface(getCrydrStorageAddress()).transferFrom(_msgsender, _from, _to, _value);\r\n\r\n    if (isCrydrViewRegistered('erc20') == true) {\r\n      CrydrViewERC20LoggableInterface(getCrydrViewAddress('erc20')).emitTransferEvent(_from, _to, _value);\r\n    }\r\n  }\r\n\r\n  function getAllowance(address _owner, address _spender) public constant returns (uint256 ) {\r\n    return CrydrStorageAllowanceInterface(getCrydrStorageAddress()).getAllowance(_owner, _spender);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrControllerForcedTransferInterface interface\r\n * @dev Interface of a contract that allows manager to transfer funds from one account to another\r\n */\r\ncontract CrydrControllerForcedTransferInterface {\r\n\r\n  /* Events */\r\n\r\n  event ForcedTransferEvent(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n  /* Methods */\r\n\r\n  function forcedTransfer(address _from, address _to, uint256 _value) public;\r\n  function forcedTransferAll(address _from, address _to) public;\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CrydrControllerForcedTransfer\r\n * @dev Implementation of a contract that allows manager to transfer funds from one account to another\r\n */\r\ncontract CrydrControllerForcedTransfer is ManageableInterface,\r\n                                          PausableInterface,\r\n                                          CrydrControllerBaseInterface,\r\n                                          CrydrControllerForcedTransferInterface {\r\n\r\n  /* minting/burning */\r\n\r\n  function forcedTransfer(\r\n    address _from, address _to, uint256 _value\r\n  )\r\n    public\r\n    whenContractNotPaused\r\n    onlyAllowedManager('forced_transfer')\r\n  {\r\n    // input parameters checked by the storage\r\n\r\n    CrydrStorageBalanceInterface(getCrydrStorageAddress()).decreaseBalance(_from, _value);\r\n    CrydrStorageBalanceInterface(getCrydrStorageAddress()).increaseBalance(_to, _value);\r\n\r\n    emit ForcedTransferEvent(_from, _to, _value);\r\n    if (isCrydrViewRegistered('erc20') == true) {\r\n      CrydrViewERC20LoggableInterface(getCrydrViewAddress('erc20')).emitTransferEvent(_from, _to, _value);\r\n    }\r\n  }\r\n\r\n  function forcedTransferAll(\r\n    address _from, address _to\r\n  )\r\n    public\r\n    whenContractNotPaused\r\n    onlyAllowedManager('forced_transfer')\r\n  {\r\n    // input parameters checked by the storage\r\n\r\n    uint256 value = CrydrStorageBalanceInterface(getCrydrStorageAddress()).getBalance(_from);\r\n    CrydrStorageBalanceInterface(getCrydrStorageAddress()).decreaseBalance(_from, value);\r\n    CrydrStorageBalanceInterface(getCrydrStorageAddress()).increaseBalance(_to, value);\r\n\r\n    emit ForcedTransferEvent(_from, _to, value);\r\n    if (isCrydrViewRegistered('erc20') == true) {\r\n      CrydrViewERC20LoggableInterface(getCrydrViewAddress('erc20')).emitTransferEvent(_from, _to, value);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title JNTPaymentGatewayInterface\r\n * @dev Allows to charge users by JNT\r\n */\r\ncontract JNTPaymentGatewayInterface {\r\n\r\n  /* Events */\r\n\r\n  event JNTChargedEvent(address indexed payableservice, address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n  /* Actions */\r\n\r\n  function chargeJNT(address _from, address _to, uint256 _value) public;\r\n}\r\n\r\n\r\n/**\r\n * @title JNTPaymentGateway\r\n * @dev Allows to charge users by JNT\r\n */\r\ncontract JNTPaymentGateway is ManageableInterface,\r\n                              CrydrControllerBaseInterface,\r\n                              JNTPaymentGatewayInterface {\r\n\r\n  function chargeJNT(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    onlyAllowedManager('jnt_payable_service')\r\n  {\r\n    CrydrStorageERC20Interface(getCrydrStorageAddress()).transfer(_from, _to, _value);\r\n\r\n    emit JNTChargedEvent(msg.sender, _from, _to, _value);\r\n    if (isCrydrViewRegistered('erc20') == true) {\r\n      CrydrViewERC20LoggableInterface(getCrydrViewAddress('erc20')).emitTransferEvent(_from, _to, _value);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title JNTController\r\n * @dev Mediates views and storage of JNT, provides additional methods for Jibrel contracts\r\n */\r\ncontract JNTController is CommonModifiers,\r\n                          AssetID,\r\n                          Ownable,\r\n                          Manageable,\r\n                          Pausable,\r\n                          BytecodeExecutor,\r\n                          CrydrControllerBase,\r\n                          CrydrControllerBlockable,\r\n                          CrydrControllerMintable,\r\n                          CrydrControllerERC20,\r\n                          CrydrControllerForcedTransfer,\r\n                          JNTPaymentGateway {\r\n\r\n  /* Constructor */\r\n\r\n  constructor () AssetID('JNT') public {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"isManagerAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"getAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crydrStorage\",\"type\":\"address\"}],\"name\":\"setCrydrStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_msgsender\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelOwnershipOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"isPermissionGranted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unblockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"enableManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetID\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_viewApiStandardName\",\"type\":\"string\"}],\"name\":\"removeCrydrView\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"blockAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"revokeManagerPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unblockAccountFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_permissionName\",\"type\":\"string\"}],\"name\":\"grantManagerPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_suppliedGas\",\"type\":\"uint256\"},{\"name\":\"_ethValue\",\"type\":\"uint256\"},{\"name\":\"_transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"executeCall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCrydrStorageAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"createOwnershipOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"isManagerEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"forcedTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetIDHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_viewApiStandardName\",\"type\":\"string\"}],\"name\":\"getCrydrViewAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_msgsender\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"chargeJNT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"blockAccountFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_suppliedGas\",\"type\":\"uint256\"},{\"name\":\"_transactionBytecode\",\"type\":\"bytes\"}],\"name\":\"executeDelegatecall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_crydrViewAddress\",\"type\":\"address\"}],\"name\":\"isCrydrViewAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"disableManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_viewApiStandardName\",\"type\":\"string\"}],\"name\":\"isCrydrViewRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_msgsender\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCrydrView\",\"type\":\"address\"},{\"name\":\"_viewApiStandardName\",\"type\":\"string\"}],\"name\":\"setCrydrView\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProposedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnershipOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"forcedTransferAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"payableservice\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"JNTChargedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ForcedTransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MintEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BurnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"crydrstorage\",\"type\":\"address\"}],\"name\":\"CrydrStorageChangedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"crydrview\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"standardname\",\"type\":\"bytes32\"}],\"name\":\"CrydrViewAddedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"crydrview\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"standardname\",\"type\":\"bytes32\"}],\"name\":\"CrydrViewRemovedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"suppliedGas\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionBytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"CallExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"suppliedGas\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transactionBytecodeHash\",\"type\":\"bytes32\"}],\"name\":\"DelegatecallExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PauseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UnpauseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerEnabledEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ManagerDisabledEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"permission\",\"type\":\"bytes32\"}],\"name\":\"ManagerPermissionGrantedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"permission\",\"type\":\"bytes32\"}],\"name\":\"ManagerPermissionRevokedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"OwnerAssignedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposedowner\",\"type\":\"address\"}],\"name\":\"OwnershipOfferCreatedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposedowner\",\"type\":\"address\"}],\"name\":\"OwnershipOfferAcceptedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"currentowner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"proposedowner\",\"type\":\"address\"}],\"name\":\"OwnershipOfferCancelledEvent\",\"type\":\"event\"}]","ContractName":"JNTController","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://87919bfcba834a36071b346f37b38f72a612784c538424bba1124cb803de7086"}]}