{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract MultiEthSender {\r\n  using SafeMath for uint256;\r\n\r\n  event Send(uint256 _amount, address indexed _receiver);\r\n  \r\n  function() public payable {\r\n  }\r\n\r\n  function multiSendEth(\r\n    uint256 amount, \r\n    address[] list\r\n  ) \r\n  external \r\n  returns (bool) \r\n  {\r\n\r\n    uint256 totalList = list.length;\r\n    uint256 totalAmount = amount.mul(totalList);\r\n    require(address(this).balance > totalAmount);\r\n\r\n    for (uint256 i = 0; i < list.length; i++) {\r\n      require(list[i] != address(0));\r\n      require(list[i].send(amount));\r\n\r\n      emit Send(amount, list[i]);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"list\",\"type\":\"address[]\"}],\"name\":\"multiSendEth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"Send\",\"type\":\"event\"}]","ContractName":"MultiEthSender","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://80925ec1ea8602f8ac8f9abe37c86fd5a2a08b6870c487a8ae3df3eb96df78f6"}]}