{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n* http://ethedge.co\r\n* https://gosutech.github.io (backup)\r\n*\r\n* Decentralized token exchange concept\r\n* A sustainable business model (non-zero-sum game)\r\n*\r\n* [✓] 5% Withdraw fee\r\n* [✓] 5+9+1%=15% Deposit fee\r\n*       9% Trade capital fee. Use to do profit on different crypto assets and pay dividends back, if success.\r\n*       5% To token holders\r\n*       1% devs costs\r\n* [✓] 1% Token transfer.\r\n* [✓] 15% Referal link. Lifetime.\r\n*\r\n* ---How to use:\r\n*  1. Send from ETH wallet to the smart contract address any amount ETH.\r\n*  2.   1) Reinvest your profit by sending 0.00000001 ETH transaction to contract address\r\n*       2) Claim your profit by sending 0.00000002 ETH transaction to contract address\r\n*       3) Full exit (sell all and withdraw) by sending 0.00000003 ETH transaction to contract address\r\n*  3. If you have innactive period more than 1 year - your account can be burned. Funds divided for token holders.\r\n*  4. We use trade capital to invest to different crypto assets\r\n*  5. Top big token holders can request audit.\r\n*/\r\n\r\n    interface DevsInterface {\r\n    function payDividends(string _sourceDesc) public payable;\r\n}\r\n\r\n\r\ncontract ETHedgeToken {\r\n\r\n    modifier onlyBagholders {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyStronghands {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n    \r\n    //added section\r\n    //Modifier that only allows owner of the bag to Smart Contract AKA Good to use the function\r\n    modifier onlyOwner{\r\n        require(msg.sender == owner_, \"Only owner can do this!\");\r\n        _;\r\n    }\r\n    \r\n    event onPayDividends(\r\n        uint256 incomingDividends,\r\n        string sourceDescription,\r\n        address indexed customerAddress,\r\n        uint timestamp\r\n);\r\n\r\n    event onBurn(\r\n        uint256 DividentsFromNulled,\r\n        address indexed customerAddress,\r\n        address indexed senderAddress,\r\n        uint timestamp\r\n);\r\n\r\n    event onNewRefferal(\r\n        address indexed userAddress,\r\n        address indexed refferedByAddress,\r\n        uint timestamp\r\n);\r\n\r\n    event onTakeCapital(\r\n        address indexed capitalAddress,\r\n        address indexed devAddress,\r\n        uint256 capitalEth,\r\n        uint256 devEth,\r\n        address indexed senderAddress,\r\n        uint timestamp\r\n);\r\n\r\n    event Approval(\r\n        address indexed tokenOwner,\r\n        address indexed spender,\r\n        uint tokens\r\n);\r\n\r\n//end added section\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy,\r\n        uint timestamp,\r\n        uint256 price\r\n);\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned,\r\n        uint timestamp,\r\n        uint256 price\r\n);\r\n\r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n);\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n);\r\n\r\n    string public name = \"ETH hedge token\";\r\n    string public symbol = \"EHT\";\r\n    uint8 constant public decimals = 18;\r\n    uint8 constant internal entryFee_ = 15;//full costs\r\n    uint8 constant internal transferFee_ = 1;\r\n    uint8 constant internal exitFee_ = 5;\r\n    uint8 constant internal refferalFee_ = 15;\r\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\n    uint256 constant internal magnitude = 2 ** 64;\r\n    uint256 public stakingRequirement = 50e18;\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    mapping(address => address) internal refferals_;\r\n    // Owner of account approves the transfer of an amount to another account. ERC20 needed.\r\n    mapping(address => mapping (address => uint256)) allowed_;\r\n    uint256 internal tokenSupply_;\r\n    uint256 internal profitPerShare_;\r\n    //added section\r\n    address private owner_=msg.sender;\r\n    mapping(address => uint256) internal lastupdate_;\r\n    //time through your account cant be nulled\r\n    uint private constant timePassive_ = 365 days;\r\n    //uint private constant timePassive_ = 1 minutes; // for test\r\n    //Percents go to exchange bots\r\n    uint8 constant internal entryFeeCapital_ = 9;\r\n    //Admins reward percent\r\n    uint8 constant internal entryFeeReward_ = 1;\r\n    address public capital_=msg.sender;\r\n    address public devReward_=0xafC1D46163308c81BFb12d305CCb7deAbb39E1fE;//devs contract address\r\n    uint256 public capitalAmount_;\r\n    uint256 public AdminRewardAmount_;\r\n    \r\n    \r\n    //This function transfer ownership of contract from one entity to another\r\n    function transferOwnership(address _newOwner) public onlyOwner{\r\n        require(_newOwner != address(0));\r\n        owner_ = _newOwner;\r\n    }\r\n    \r\n    //This function change addresses for exchange capital and admin reward\r\n    function changeOuts(address _newCapital) public onlyOwner{\r\n        //check if not empty\r\n        require(_newCapital != address(0));\r\n        capital_ = _newCapital;\r\n    }\r\n\r\n    //Pay dividends\r\n    function payDividends(string _sourceDesc) public payable {\r\n        payDivsValue(msg.value,_sourceDesc);\r\n    }\r\n\r\n    //Pay dividends internal with value\r\n    function payDivsValue(uint256 _amountOfDivs,string _sourceDesc) internal {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = _amountOfDivs;\r\n        if (tokenSupply_ > 0) {\r\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\r\n        }\r\n        emit onPayDividends(_dividends,_sourceDesc,_customerAddress,now);\r\n    }\r\n\r\n    //If account dont have buy, sell, reinvest, transfer(from), trasfer(to, if more stakingRequirement) action for 1 year - it can be burned. All ETH go to dividends\r\n    function burn(address _checkForInactive) public {\r\n        address _customerAddress = _checkForInactive;\r\n        require(lastupdate_[_customerAddress]!=0 && now >= SafeMath.add(lastupdate_[_customerAddress],timePassive_), \"This account cant be nulled!\");\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if (_tokens > 0) sell(_tokens);\r\n        \r\n        uint256 _dividends = dividendsOf(_customerAddress);\r\n        _dividends += referralBalance_[_customerAddress];\r\n        payDivsValue(_dividends,'Burn coins');\r\n\r\n        delete tokenBalanceLedger_[_customerAddress];\r\n        delete referralBalance_[_customerAddress];\r\n        delete payoutsTo_[_customerAddress];\r\n        delete lastupdate_[_customerAddress];\r\n        emit onBurn(_dividends,_customerAddress,msg.sender,now);\r\n    }\r\n  \r\n    //Owner can get trade capital and reward \r\n    function takeCapital() public{\r\n        require(capitalAmount_>0 && AdminRewardAmount_>0, \"No fundz, sorry!\");\r\n        uint256 capitalAmountTrans=capitalAmount_;\r\n        uint256 adminAmountTrans=AdminRewardAmount_;\r\n        capitalAmount_=0;\r\n        AdminRewardAmount_=0;\r\n//        capital_.transfer(capitalAmountTrans); // to trade capital\r\n        capital_.call.value(capitalAmountTrans)(); // to trade capital, can use another contract\r\n        DevsInterface devContract_ = DevsInterface(devReward_);\r\n        devContract_.payDividends.value(adminAmountTrans)('ethedge.co source');\r\n        emit onTakeCapital(capital_,devReward_,capitalAmountTrans,adminAmountTrans,msg.sender,now);\r\n    }\r\n    \r\n     // Send `tokens` amount of tokens from address `from` to address `to`\r\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n    // fees in sub-currencies; the command should fail unless the _from account has\r\n    // deliberately authorized the sender of the message via some mechanism; we propose\r\n    // these standardized APIs for approval:\r\n     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        uint256 allowance = allowed_[_from][_to];\r\n        uint256 _amountOfTokens=_value;\r\n        require(tokenBalanceLedger_[_from] >= _amountOfTokens && allowance >= _amountOfTokens);\r\n        if ((dividendsOf(_from) + referralBalance_[_from])>0){\r\n            withdrawAddr(_from);\r\n        }\r\n        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n        tokenBalanceLedger_[_from] = SafeMath.sub(tokenBalanceLedger_[_from],_amountOfTokens);\r\n        tokenBalanceLedger_[_to] =SafeMath.add(tokenBalanceLedger_[_to],_taxedTokens);\r\n        payoutsTo_[_from] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_to] += (int256) (profitPerShare_ * _taxedTokens);\r\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        allowed_[_from][_to] = SafeMath.sub(allowed_[_from][_to],_amountOfTokens);\r\n        emit Transfer(_from, _to, _amountOfTokens);\r\n        return true;\r\n    }\r\n \r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed_[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed_[_owner][_spender];\r\n    }\r\n    //end added section\r\n    \r\n    function buy(address _referredBy) public payable returns (uint256) {\r\n        purchaseTokens(msg.value, _referredBy);\r\n    }\r\n\r\n    function() payable public {\r\n        if (msg.value == 1e10) {\r\n            reinvest();\r\n        }\r\n        else if (msg.value == 2e10) {\r\n            withdraw();\r\n        }\r\n        else if (msg.value == 3e10) {\r\n            exit();\r\n        }\r\n        else {\r\n            purchaseTokens(msg.value, 0x0);\r\n        }\r\n    }\r\n\r\n    function reinvest() onlyStronghands public {\r\n        uint256 _dividends = myDividends(false);\r\n        address _customerAddress = msg.sender;\r\n        lastupdate_[_customerAddress] = now;\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\r\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n\r\n    function exit() public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if (_tokens > 0) sell(_tokens);\r\n        withdraw();\r\n    }\r\n\r\n    function withdraw() onlyStronghands public {\r\n        address _customerAddress = msg.sender;\r\n        withdrawAddr(_customerAddress);\r\n    }\r\n\r\n    function withdrawAddr(address _fromAddress) onlyStronghands internal {\r\n        address _customerAddress = _fromAddress;\r\n        lastupdate_[_customerAddress] = now;\r\n        uint256 _dividends = myDividends(false);\r\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        _customerAddress.transfer(_dividends);\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\r\n        address _customerAddress = msg.sender;\r\n        lastupdate_[_customerAddress] = now;\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n        if (tokenSupply_ > 0) {\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        }\r\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\r\n    }\r\n\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\r\n        address _customerAddress = msg.sender;\r\n        lastupdate_[_customerAddress] = now;\r\n        if (_amountOfTokens>stakingRequirement) {\r\n            lastupdate_[_toAddress] = now;\r\n        }\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n        if (myDividends(true) > 0) {\r\n            withdraw();\r\n        }\r\n\r\n        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\r\n\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\r\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    function totalEthereumBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    function refferedBy(address _customerAddress) public view returns (address) {\r\n        return refferals_[_customerAddress];\r\n    }\r\n\r\n    function myTokens() public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n\r\n    function balanceOf(address _customerAddress) public view returns (uint256) {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\r\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n\r\n    function sellPrice() public view returns (uint256) {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    function buyPrice() public view returns (uint256) {\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\r\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\r\n\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\r\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n        return _taxedEthereum;\r\n    }\r\n\r\n\r\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        lastupdate_[_customerAddress] = now;\r\n\r\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_-entryFeeCapital_-entryFeeReward_), 100);\r\n//        uint256 _fullTax = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\r\n        uint256 _capitalTrade = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFeeCapital_), 100);\r\n        uint256 _adminReward = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFeeReward_), 100);\r\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _taxedEthereum = SafeMath.div(SafeMath.mul(_incomingEthereum, 100-entryFee_), 100);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\r\n\r\n//set refferal. lifetime\r\n        if (\r\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\r\n            _referredBy != _customerAddress &&\r\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement &&\r\n            refferals_[_customerAddress] == 0x0\r\n        ) {\r\n            refferals_[_customerAddress] = _referredBy;\r\n            emit onNewRefferal(_customerAddress,_referredBy, now);\r\n        }\r\n\r\n//use refferal\r\n        if (\r\n            refferals_[_customerAddress] != 0x0 &&\r\n            tokenBalanceLedger_[refferals_[_customerAddress]] >= stakingRequirement\r\n        ) {\r\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n        } else {\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n\r\n        if (tokenSupply_ > 0) {\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\r\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\r\n        } else {\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n        \r\n        capitalAmount_=SafeMath.add(capitalAmount_,_capitalTrade);\r\n        AdminRewardAmount_=SafeMath.add(AdminRewardAmount_,_adminReward);\r\n        if (capitalAmount_>1e17){ //more than 0.1 ETH - send outs\r\n            takeCapital();\r\n        }\r\n\r\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived =\r\n            (\r\n                (\r\n                    SafeMath.sub(\r\n                        (sqrt\r\n                            (\r\n                                (_tokenPriceInitial ** 2)\r\n                                +\r\n                                (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\r\n                                +\r\n                                ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\r\n                                +\r\n                                (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\r\n                            )\r\n                        ), _tokenPriceInitial\r\n                    )\r\n                ) / (tokenPriceIncremental_)\r\n            ) - (tokenSupply_);\r\n\r\n        return _tokensReceived;\r\n    }\r\n\r\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _etherReceived =\r\n            (\r\n                SafeMath.sub(\r\n                    (\r\n                        (\r\n                            (\r\n                                tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\r\n                            ) - tokenPriceIncremental_\r\n                        ) * (tokens_ - 1e18)\r\n                    ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\r\n                )\r\n                / 1e18);\r\n\r\n        return _etherReceived;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = (x + 1) / 2;\r\n        y = x;\r\n\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"takeCapital\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sourceDesc\",\"type\":\"string\"}],\"name\":\"payDividends\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCapital\",\"type\":\"address\"}],\"name\":\"changeOuts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devReward_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capitalAmount_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_checkForInactive\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"refferedBy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capital_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AdminRewardAmount_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"incomingDividends\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sourceDescription\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onPayDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"DividentsFromNulled\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"refferedByAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onNewRefferal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"capitalAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"devAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"capitalEth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"devEth\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"senderAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTakeCapital\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"referredBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ETHedgeToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://db878a6ca2a623c60bd7b1228562345876f844a36c8658bc20c25906d042dd93"}]}