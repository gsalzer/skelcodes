{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title HydrogenBlueICO\r\n * @dev   HydrogenBlueICO accepting contributions only within a time frame.\r\n */\r\ncontract HydrogenBlueICO is ERC20Interface, Owned {\r\n  using SafeMath for uint256;\r\n  string  public symbol; \r\n  string  public name;\r\n  uint8   public decimals;\r\n  uint256 public fundsRaised;\r\n  uint256 public reserveTokens;\r\n  string  public TokenPrice;\r\n  uint256 public saleTokens;\r\n  uint    internal _totalSupply;\r\n  uint internal _totalRemaining;\r\n  address public wallet;\r\n  uint256 internal firststageopeningTime;\r\n  uint256 internal secondstageopeningTime;\r\n  uint256 internal laststageopeningTime;\r\n  bool    internal Open;\r\n  bool internal distributionFinished;\r\n  \r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n  event Burned(address burner, uint burnedAmount);\r\n\r\n    modifier onlyWhileOpen {\r\n        require(now >= firststageopeningTime && Open);\r\n        _;\r\n    }\r\n    \r\n    modifier canDistribut {\r\n        require(!distributionFinished);\r\n        _;\r\n    }\r\n  \r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor (address _owner, address _wallet) public {\r\n        Open = true;\r\n        symbol = \"HydroB\";\r\n        name = \" HydrogenBlue\";\r\n        decimals = 18;\r\n        owner = _owner;\r\n        wallet = _wallet;\r\n        _totalSupply = 2700000000; // 2.7 billion\r\n        _totalRemaining = totalSupply();\r\n        balances[0xEA40d7bEF6ae216c4218E9bA28f92aF06cC77886] = 2e21;\r\n        emit Transfer(address(0),0xEA40d7bEF6ae216c4218E9bA28f92aF06cC77886, 2e21);\r\n        _totalRemaining = _totalRemaining.sub(2e21);\r\n        balances[0x30D344806E8c13A592F54a123f560ad1976f5eC2] = 2e21;\r\n        emit Transfer(address(0),0x30D344806E8c13A592F54a123f560ad1976f5eC2, 2e21);\r\n        _totalRemaining = _totalRemaining.sub(2e21);\r\n        _allocateTokens();\r\n        _setTimes();\r\n        distributionFinished = false;\r\n    }\r\n    \r\n    function _setTimes() internal {\r\n        firststageopeningTime    = 1539561600; // 15th OCT 2018 00:00:00 GMT\r\n        secondstageopeningTime   = 1540166400; // 22nd OCT 2018 00:00:00 GMT \r\n        laststageopeningTime     = 1540771200; // 29th OCT 2018 00:00:00 GMT\r\n    }\r\n  \r\n    function _allocateTokens() internal {\r\n        reserveTokens         = (_totalSupply.mul(5)).div(100) *10 **uint(decimals);  // 5% of totalSupply\r\n        saleTokens            = (_totalSupply.mul(95)).div(100) *10 **uint(decimals); // 95% of totalSupply\r\n        TokenPrice            = \"0.00000023 ETH\";\r\n    }\r\n    \r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address _beneficiary) public payable onlyWhileOpen {\r\n    \r\n        uint256 weiAmount = msg.value;\r\n    \r\n        _preValidatePurchase(_beneficiary, weiAmount);\r\n        \r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n        \r\n        tokens = _getBonus(tokens, weiAmount);\r\n        \r\n        fundsRaised = fundsRaised.add(weiAmount);\r\n\r\n        _processPurchase(_beneficiary, tokens);\r\n        emit TokenPurchase(this, _beneficiary, weiAmount, tokens);\r\n\r\n        _forwardFunds(msg.value);\r\n    }\r\n    \r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal{\r\n        require(_beneficiary != address(0));\r\n        require(_weiAmount != 0);\r\n    }\r\n  \r\n    function _getTokenAmount(uint256 _weiAmount) internal returns (uint256) {\r\n        uint256 rate = 4347826; //per wei\r\n        return _weiAmount.mul(rate);\r\n    }\r\n    \r\n    function _getBonus(uint256 tokens, uint256 weiAmount) internal returns (uint256) {\r\n        // DURING FIRST STAGE\r\n        if(now >= firststageopeningTime && now <= secondstageopeningTime) { \r\n            if(weiAmount >= 10e18) { // greater than 10 eths \r\n                // give 80% bonus\r\n                tokens = tokens.add((tokens.mul(80)).div(100));\r\n            } else {\r\n                // give 60% bonus\r\n                tokens = tokens.add((tokens.mul(60)).div(100));\r\n            }\r\n        } \r\n        // DURING SECOND STAGE\r\n        else if (now >= secondstageopeningTime && now <= laststageopeningTime) { \r\n            if(weiAmount >= 10e18) { // greater than 10 eths \r\n                // give 60% bonus\r\n                tokens = tokens.add((tokens.mul(60)).div(100));\r\n            } else {\r\n                // give 30% bonus\r\n                tokens = tokens.add((tokens.mul(30)).div(100));\r\n            }\r\n        } \r\n        // DURING LAST STAGE\r\n        else { \r\n            if(weiAmount >= 10e18) { // greater than 10 eths \r\n                // give 30% bonus\r\n                tokens = tokens.add((tokens.mul(30)).div(100));\r\n            } else {\r\n                // give 10% bonus\r\n                tokens = tokens.add((tokens.mul(10)).div(100));\r\n            }\r\n        }\r\n        \r\n        return tokens;\r\n    }\r\n    \r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        if(_totalRemaining != 0 && _totalRemaining >= _tokenAmount) {\r\n            balances[_beneficiary] = _tokenAmount;\r\n            emit Transfer(address(0),_beneficiary, _tokenAmount);\r\n            _totalRemaining = _totalRemaining.sub(_tokenAmount);\r\n        }\r\n        \r\n        if(_totalRemaining <= 0) {\r\n            distributionFinished = true;\r\n        }\r\n    }\r\n\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        _deliverTokens(_beneficiary, _tokenAmount);\r\n    }\r\n    \r\n    function _forwardFunds(uint256 _amount) internal {\r\n        wallet.transfer(_amount);\r\n    }\r\n    \r\n    function stopICO() public onlyOwner{\r\n        Open = false;\r\n        if(_totalRemaining != 0){\r\n            uint tenpercentTokens = (_totalRemaining.mul(10)).div(100);\r\n            uint twentypercentTokens = (_totalRemaining.mul(20)).div(100);\r\n            _totalRemaining = _totalRemaining.sub(tenpercentTokens.add(twentypercentTokens));\r\n            emit Transfer(address(0), owner, tenpercentTokens);\r\n            emit Transfer(address(0), wallet, twentypercentTokens);\r\n            _burnRemainingTokens(); // burn the remaining tokens\r\n        }\r\n    }\r\n    \r\n    function _burnRemainingTokens() internal {\r\n        _totalSupply = _totalSupply.sub(_totalRemaining.div(1e18));\r\n    }\r\n    /* ERC20Interface function's implementation */\r\n    function totalSupply() public constant returns (uint){\r\n       return _totalSupply* 10**uint(decimals);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        // prevent transfer to 0x0, use burn instead\r\n        require(to != 0x0);\r\n        require(balances[msg.sender] >= tokens );\r\n        require(balances[to] + tokens >= balances[to]);\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender,to,tokens);\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success){\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender,spender,tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success){\r\n        require(tokens <= allowed[from][msg.sender]); //check allowance\r\n        require(balances[from] >= tokens);\r\n        balances[from] = balances[from].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        emit Transfer(from,to,tokens);\r\n        return true;\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"burnedAmount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"HydrogenBlueICO","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000063cf35c9111f65ba07ec7355a744bd0113fcf668000000000000000000000000164ce394ba9e968f1c3a88a1ac68d62e09781ac2","Library":"","SwarmSource":"bzzr://db2b321557a266a5539226ca32bfce96ebe614cf91c7bea11b31e19c6ba2ff24"}]}