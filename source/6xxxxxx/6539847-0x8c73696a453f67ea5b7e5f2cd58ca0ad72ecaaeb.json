{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * ERC 20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract MD  {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"MD Token\";\r\n    string public constant symbol = \"MD\";\r\n\r\n    uint public constant decimals = 18;\r\n\r\n    // Total supply is 3.5 billion\r\n    uint256 _totalSupply = 3500000000 * 10**decimals;\r\n\r\n    mapping(address => uint256) balances; //list of balance of each address\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n    address public owner;\r\n\r\n    modifier ownerOnly {\r\n      require(\r\n            msg.sender == owner,\r\n            \"Sender not authorized.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 supply) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    //constructor\r\n    constructor(address _owner) public{\r\n        owner = _owner;\r\n        balances[owner] = _totalSupply;\r\n        emit Transfer(0x0, _owner, _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * ERC 20 Standard Token interface transfer function\r\n     *\r\n     * Prevent transfers until lock period is over.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        if (balances[msg.sender] >= _value && balances[_to].add(_value) > balances[_to]) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ERC 20 Standard Token interface transfer function\r\n     *\r\n     * Prevent transfers until freeze period is over.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to].add(_value) > balances[_to]) {\r\n            balances[_to] = _value.add(balances[_to]);\r\n            balances[_from] = balances[_from].sub(_value);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n            emit Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change owner address (where ICO ETH is being forwarded).\r\n     */\r\n    function changeOwner(address _newowner) public ownerOnly returns (bool success) {\r\n        owner = _newowner;\r\n        return true;\r\n    }\r\n\r\n    // only owner can kill\r\n    function kill() public ownerOnly {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\n\r\ncontract TokenLock {\r\n    using SafeMath for uint256;\r\n    address public owner;\r\n    address public md_address;\r\n    \r\n    struct LockRecord {\r\n        address userAddress;\r\n        uint256 amount;\r\n        uint256 releaseTime;\r\n    }\r\n    \r\n    LockRecord[] lockRecords;\r\n    mapping(uint256 => bool) lockStatus;\r\n    \r\n    MD md;\r\n\r\n    event Deposit(address indexed _userAddress, uint256 _amount, uint256 _releaseTime, uint256 _index);\r\n    event Release(address indexed _userAddress, address indexed _merchantAddress, uint256 _merchantAmount, uint256 _releaseTime, uint256 _index);\r\n    \r\n    modifier ownerOnly {\r\n      require(\r\n            msg.sender == owner,\r\n            \"Sender not authorized.\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    //constructor\r\n    constructor(address _owner, address _md_address) public{\r\n        owner = _owner;\r\n        md_address = _md_address;\r\n        md = MD(md_address);\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint256 _balance) {\r\n        return md.balanceOf(this);\r\n    }\r\n    \r\n    function deposit(address _userAddress, uint256 _amount, uint256 _days) public ownerOnly {\r\n        require(_amount > 0);\r\n        require(md.transferFrom(_userAddress, this, _amount));\r\n        uint256 releaseTime = block.timestamp + _days * 1 days;\r\n        LockRecord memory r = LockRecord(_userAddress, _amount, releaseTime);\r\n        uint256 l = lockRecords.push(r);\r\n        emit Deposit(_userAddress, _amount, releaseTime, l.sub(1));\r\n    }\r\n    \r\n    function release(uint256 _index, address _merchantAddress, uint256 _merchantAmount) public ownerOnly {\r\n        require(\r\n            lockStatus[_index] == false,\r\n            \"Already released.\"\r\n        );\r\n        \r\n        LockRecord storage r = lockRecords[_index];\r\n        \r\n        require(\r\n            r.releaseTime <= block.timestamp,\r\n            \"Release time not reached\"\r\n        );\r\n        \r\n        require(\r\n            _merchantAmount <= r.amount,\r\n            \"Merchant amount larger than locked amount.\"\r\n        );\r\n\r\n        \r\n        if (_merchantAmount > 0) {\r\n            require(md.transfer(_merchantAddress, _merchantAmount));\r\n        }\r\n        \r\n        uint256 remainingAmount = r.amount.sub(_merchantAmount);\r\n        if (remainingAmount > 0){\r\n            require(md.transfer(r.userAddress, remainingAmount));\r\n        }\r\n\r\n        lockStatus[_index] = true;\r\n        emit Release(r.userAddress, _merchantAddress, _merchantAmount, r.releaseTime, _index);\r\n    }\r\n    \r\n    /**\r\n     * Change owner address (where ICO ETH is being forwarded).\r\n     */\r\n    function changeOwner(address _newowner) public ownerOnly returns (bool success) {\r\n        owner = _newowner;\r\n        return true;\r\n    }\r\n    \r\n    // forward all eth to owner\r\n    function() payable public {\r\n        if (!owner.call.value(msg.value)()) revert();\r\n    }\r\n\r\n    // only owner can kill\r\n    function kill() public ownerOnly {\r\n        md.transfer(owner, getContractBalance());\r\n        selfdestruct(owner);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_merchantAddress\",\"type\":\"address\"},{\"name\":\"_merchantAmount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newowner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"md_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_md_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_merchantAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_merchantAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"Release\",\"type\":\"event\"}]","ContractName":"TokenLock","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000b8ad94052295e4ecab14a29e70c12592b8fb7ef2000000000000000000000000b801f917bcfa3da003ec64ae9b90526add3377ef","Library":"","SwarmSource":"bzzr://d15aeb8328e9f3f4b1a7d947c52681b49667997469bce5e31d3c2437c2097650"}]}