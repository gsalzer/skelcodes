{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n    Copyright (c) 2018 SmartTaylor\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy\r\n    of this software and associated documentation files (the \"Software\"), to deal\r\n    in the Software without restriction, including without limitation the rights\r\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the Software is\r\n    furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in\r\n    all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n    THE SOFTWARE.\r\n\r\n    based on the contracts of OpenZeppelin:\r\n    https://github.com/OpenZeppelin/zeppelin-solidity/tree/master/contracts\r\n\r\n**/\r\n\r\npragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n  @title TaylorToken\r\n**/\r\ncontract TaylorToken is Ownable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n        EVENTS\r\n    **/\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Burn(address indexed _owner, uint256 _amount);\r\n    /**\r\n        CONTRACT VARIABLES\r\n    **/\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    //this address can transfer even when transfer is disabled.\r\n    mapping (address => bool) public whitelistedTransfer;\r\n    mapping (address => bool) public whitelistedBurn;\r\n\r\n    string public name = \"Taylor\";\r\n    string public symbol = \"TAY\";\r\n    uint8 public decimals = 18;\r\n    uint256 constant internal DECIMAL_CASES = 10**18;\r\n    uint256 public totalSupply = 10**7 * DECIMAL_CASES;\r\n    bool public transferable = false;\r\n\r\n    /**\r\n        MODIFIERS\r\n    **/\r\n    modifier onlyWhenTransferable(){\r\n      if(!whitelistedTransfer[msg.sender]){\r\n        require(transferable);\r\n      }\r\n      _;\r\n    }\r\n\r\n    /**\r\n        CONSTRUCTOR\r\n    **/\r\n\r\n    /**\r\n      @dev Constructor function executed on contract creation\r\n    **/\r\n    function TaylorToken()\r\n      Ownable()\r\n      public\r\n    {\r\n      balances[owner] = balances[owner].add(totalSupply);\r\n      whitelistedTransfer[msg.sender] = true;\r\n      whitelistedBurn[msg.sender] = true;\r\n      Transfer(address(0),owner, totalSupply);\r\n    }\r\n\r\n    /**\r\n        OWNER ONLY FUNCTIONS\r\n    **/\r\n\r\n    /**\r\n      @dev Activates the trasfer for all users\r\n    **/\r\n    function activateTransfers()\r\n      public\r\n      onlyOwner\r\n    {\r\n      transferable = true;\r\n    }\r\n\r\n    /**\r\n      @dev Allows the owner to add addresse that can bypass the\r\n      transfer lock. Eg: ICO contract, TGE contract.\r\n      @param _address address Address to be added\r\n    **/\r\n    function addWhitelistedTransfer(address _address)\r\n      public\r\n      onlyOwner\r\n    {\r\n      whitelistedTransfer[_address] = true;\r\n    }\r\n\r\n    /**\r\n      @dev Sends all avaible TAY to the TGE contract to be properly\r\n      distribute\r\n      @param _tgeAddress address Address of the token distribution\r\n      contract\r\n    **/\r\n    function distribute(address _tgeAddress)\r\n      public\r\n      onlyOwner\r\n    {\r\n      whitelistedTransfer[_tgeAddress] = true;\r\n      transfer(_tgeAddress, balances[owner]);\r\n    }\r\n\r\n\r\n    /**\r\n      @dev Allows the owner to add addresse that can burn tokens\r\n      Eg: ICO contract, TGE contract.\r\n      @param _address address Address to be added\r\n    **/\r\n    function addWhitelistedBurn(address _address)\r\n      public\r\n      onlyOwner\r\n    {\r\n      whitelistedBurn[_address] = true;\r\n    }\r\n\r\n    /**\r\n        PUBLIC FUNCTIONS\r\n    **/\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value)\r\n      public\r\n      onlyWhenTransferable\r\n      returns (bool success)\r\n    {\r\n      require(_to != address(0));\r\n      require(_value <= balances[msg.sender]);\r\n\r\n      balances[msg.sender] = balances[msg.sender].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      Transfer(msg.sender, _to, _value);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n    function transferFrom\r\n      (address _from,\r\n        address _to,\r\n        uint256 _value)\r\n        public\r\n        onlyWhenTransferable\r\n        returns (bool success) {\r\n      require(_to != address(0));\r\n      require(_value <= balances[_from]);\r\n      require(_value <= allowed[_from][msg.sender]);\r\n\r\n      balances[_from] = balances[_from].sub(_value);\r\n      balances[_to] = balances[_to].add(_value);\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n      Transfer(_from, _to, _value);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    For security reasons, if one need to change the value from a existing allowance, it must furst sets\r\n    it to zero and then sets the new value\r\n\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n    function approve(address _spender, uint256 _value)\r\n      public\r\n      onlyWhenTransferable\r\n      returns (bool success)\r\n    {\r\n      allowed[msg.sender][_spender] = _value;\r\n      Approval(msg.sender, _spender, _value);\r\n      return true;\r\n    }\r\n\r\n      /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue)\r\n      public\r\n      returns (bool)\r\n    {\r\n      allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue)\r\n      public\r\n      returns (bool)\r\n    {\r\n      uint oldValue = allowed[msg.sender][_spender];\r\n      if (_subtractedValue > oldValue) {\r\n        allowed[msg.sender][_spender] = 0;\r\n      } else {\r\n        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n      }\r\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n      return true;\r\n    }\r\n\r\n    /**\r\n      @dev Allows for msg.sender to burn his on tokens\r\n      @param _amount uint256 The amount of tokens to be burned\r\n    **/\r\n    function burn(uint256 _amount)\r\n      public\r\n      returns (bool success)\r\n    {\r\n      require(whitelistedBurn[msg.sender]);\r\n      require(_amount <= balances[msg.sender]);\r\n      balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n      totalSupply =  totalSupply.sub(_amount);\r\n      Burn(msg.sender, _amount);\r\n      return true;\r\n    }\r\n\r\n\r\n    /**\r\n        CONSTANT FUNCTIONS\r\n    **/\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) view public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n    function allowance(address _owner, address _spender)\r\n      view\r\n      public\r\n      returns (uint256 remaining)\r\n    {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period.\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  event Released(uint256 amount);\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  TaylorToken public token;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  uint256 public released;\r\n\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n   * of the balance will have vested.\r\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param _duration duration in seconds of the period in which the tokens will vest\r\n   * @param _token The token to be vested\r\n   */\r\n  function TokenVesting(address _beneficiary,address _token, uint256 _start, uint256 _cliff, uint256 _duration) public {\r\n    require(_beneficiary != address(0));\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    duration = _duration;\r\n    token = TaylorToken(_token);\r\n    cliff = _start.add(_cliff);\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   */\r\n  function release() public {\r\n    uint256 unreleased = releasableAmount();\r\n    require(unreleased > 0);\r\n\r\n    released = released.add(unreleased);\r\n\r\n    token.transfer(beneficiary, unreleased);\r\n\r\n    Released(unreleased);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   */\r\n  function releasableAmount() public view returns (uint256) {\r\n    return vestedAmount().sub(released);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   */\r\n  function vestedAmount() public view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(this);\r\n    uint256 totalBalance = currentBalance.add(released);\r\n\r\n    if (now < cliff) {\r\n      return 0;\r\n    } else if (now >= cliff && now < start.add(duration)) {\r\n      return totalBalance / 2;\r\n    } else {\r\n      return totalBalance;\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_start\",\"type\":\"uint256\"},{\"name\":\"_cliff\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenVesting","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fc93b57b65c4c5e5af991af2d320a54de4e9a8cc000000000000000000000000320e2cbd104d276b37f012465cc6bc7408be8bb5000000000000000000000000000000000000000000000000000000005b3819800000000000000000000000000000000000000000000000000000000000f0c8a00000000000000000000000000000000000000000000000000000000001e19140","Library":"","SwarmSource":"bzzr://3fd646e49d1e147d4bf11bc0baac3d4a5c8af8cffea34c512f4581547c22dbf4"}]}