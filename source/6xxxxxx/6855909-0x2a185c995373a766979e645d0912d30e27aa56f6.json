{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/* SNAILFARM 3\r\n\r\n// SnailFarm 3 is an idlegame in which you buy or sell eggs,\r\n// Which you can hatch into snails, who continuously produce more eggs\r\n// The goal of the game is to reach 1 million snails.\r\n// At that point, you win the round (and the ETH jackpot that comes with it)\r\n\r\n// SnailFarm 3 is the latest of a series of iterations over a few months.\r\n// We will attempt to identify the key strengths of each of these iterations\r\n// Focus on refining these features, in order to make for a fun, simple and\r\n// Sustainable experience.\r\n\r\n// Shrimpfarm's killer feature: buying and selling eggs directly to the smart contract.\r\n// Snailfarm 1: capturing and holding the Snailmaster position, a ruler collecting dividends.\r\n// Snailfarm 2: juggling with hot potato boosts to increase hatch size.\r\n\r\n// SnailFarm 3 in a nutshell:\r\n\r\n// The game is played in rounds.\r\n// Buy your starting snails once, play every round at your convenience.\r\n// Player snails are reinitialised at the end of each round.\r\n// Losing players receive \"red eggs\" as a percentage of their snails.\r\n// Red eggs persist from round to round.\r\n// Red eggs can be hatched as regular eggs for no ETH cost, or used to claim boosts.\r\n\r\n// Eggs can be bought and sold directly to the contract.\r\n// No more than 20% of the egg supply can be bought at once.\r\n// On sale, price is divided by 2.\r\n\r\n// Hatching eggs into snails come with a slight, fixed, ETH cost.\r\n// The size of a hatch can be improved with special boosts.\r\n// Each boost adds a fixed bonus of an extra full hatch.\r\n// One boost means double hatch. Three boosts means quadruple hatch.\r\n// Two types of boosts exist: hot potato, and personal.\r\n\r\n// Hot potato boosts: only one player can hold any of these at a time.\r\n// The price of hot potato boosts rises with each player claim.\r\n// The price of hot potato boosts is reinitialised as the round ends.\r\n// Owners keep hot potato boosts between rounds, until another player claims them.\r\n// SPIDERQUEEN- requires snails. Amount doubles with each claim.\r\n// SQUIRRELDUKE- requires red eggs. Amount doubles with each claim.\r\n// TADPOLEPRINCE- requires ETH. Amount raises by 20% with each claim,\r\n// and the previous owner receives 110% of the ETH he spent.\r\n\r\n// Personal boosts: all players can hold them.\r\n// Each personal boost has different rules.\r\n\r\n// SLUG- this boost persists between rounds.\r\n// Slug requires a snail sacrifice of at least 100,000 snails.\r\n// It will sacrifice ALL the snails the player own at the moment of the claim.\r\n\r\n// LETTUCE- this boost lasts for only one round.\r\n// Lettuce requires red eggs.\r\n// The price of lettuce starts high, and decreases with each lettuce buy.\r\n// The price of lettuce is reinitialised and increases from round to round.\r\n\r\n// CARROT- this boost lasts for three rounds in a row.\r\n// Carrot requires ETH.\r\n// The price of carrot is fixed at 0.02 ETH.\r\n\r\n// The Snailmaster position as in SnailFarm 1 returns with a twist.\r\n// While still a hot potato, becoming the Snailmaster now requires red eggs.\r\n// That requirement doubles with each claim, and halves between each round.\r\n// Being the Snailmaster persists between rounds.\r\n// The Snailmaster gets a significant cut of every ETH transaction.\r\n\r\n// New mechanic: Red Harvest\r\n// The red harvest lets players purchase red eggs for ETH.\r\n// The red harvest works as a dutch auction, similar to cryptokitties.\r\n// Starting price is equal to the current round pot.\r\n// End price is a trivial amount of ETH.\r\n// The auction lasts at most 4 hours.\r\n// Price drops sharply at first, and slower near the end.\r\n// The red harvest contains as many red eggs as the starting snail amount.\r\n// When a player buys the red harvest, a new one is immediately put for sale.\r\n\r\n// Bankroll: players can fund the game and receive acorns in exchange.\r\n// Acorns cannot be sold or actively used in any way.\r\n// Acorn holders receive 10% of the ETH invested, proportional to their share.\r\n// Acorns start at half-price to encourage early funding kickstarting the game.\r\n// After that, acorn price slowly decreases from round to round.\r\n// Potential dilution of early holdings encourages refunding the bankroll later on.\r\n\r\n// SnailFarm 3 is part of the SnailThrone ecosystem.\r\n// A portion of the ETH spent in SnailFarm 3 is saved as throneDivs.\r\n// SnailThrone holders are rewarded proportionally by throneDivs.\r\n\r\n// ETH of every SnailFarm 3 transaction is split as such:\r\n// 50% to the snailPot\r\n// 25% to the eggPot\r\n// 10% to the acorn holders\r\n// 10% to the throneDivs\r\n// 5% to the SnailMaster\r\n\r\n*/\r\n\r\ncontract SnailFarm3 {\r\n    using SafeMath for uint;\r\n    \r\n    /* Event */\r\n    \r\n    event FundedTree (address indexed player, uint eth, uint acorns);\r\n    event ClaimedShare (address indexed player, uint eth, uint acorns);\r\n    event BecameMaster (address indexed player, uint indexed round);\r\n    event WithdrewBalance (address indexed player, uint eth);\r\n    event Hatched (address indexed player, uint eggs, uint snails, uint hatchery);\r\n    event SoldEgg (address indexed player, uint eggs, uint eth);\r\n    event BoughtEgg (address indexed player, uint eggs, uint eth, uint playereggs);\r\n    event StartedSnailing (address indexed player, uint indexed round);\r\n    event BecameQueen (address indexed player, uint indexed round, uint spiderreq, uint hatchery);\r\n    event BecameDuke (address indexed player, uint indexed round, uint squirrelreq, uint playerreds);\r\n    event BecamePrince (address indexed player, uint indexed round, uint tadpolereq);\r\n    event WonRound (address indexed roundwinner, uint indexed round, uint eth);\r\n    event BeganRound (uint indexed round);\r\n    event JoinedRound (address indexed player, uint indexed round, uint playerreds);\r\n    event GrabbedHarvest (address indexed player, uint indexed round, uint eth, uint playerreds);\r\n    event UsedRed (address indexed player, uint eggs, uint snails, uint hatchery);\r\n    event FoundSlug (address indexed player, uint indexed round, uint snails);\r\n    event FoundLettuce (address indexed player, uint indexed round, uint lettucereq, uint playerreds);\r\n    event FoundCarrot (address indexed player, uint indexed round);\r\n    event PaidThrone (address indexed player, uint eth);\r\n    event BoostedPot (address indexed player, uint eth);\r\n\r\n    /* Constants */\r\n    \r\n    uint256 public constant FUND_TIMESTAMP       = 1544385600; // funding launch on 9th Dec 8pm GMT\r\n    uint256 public constant START_TIMESTAMP      = 1544904000; // game launch on 15th Dec 8pm GMT\r\n    uint256 public constant TIME_TO_HATCH_1SNAIL = 86400; //seconds in a day\r\n    uint256 public constant STARTING_SNAIL       = 300;\r\n    uint256 public constant FROGKING_REQ         = 1000000;\r\n    uint256 public constant ACORN_PRICE          = 0.001 ether;\r\n    uint256 public constant ACORN_MULT           = 10;\r\n    uint256 public constant STARTING_SNAIL_COST  = 0.004 ether;\r\n    uint256 public constant HATCHING_COST        = 0.0008 ether;\r\n    uint256 public constant SPIDER_BASE_REQ      = 80;\r\n    uint256 public constant SQUIRREL_BASE_REQ    = 2;\r\n    uint256 public constant TADPOLE_BASE_REQ     = 0.02 ether;\r\n    uint256 public constant SLUG_MIN_REQ         = 100000;\r\n    uint256 public constant LETTUCE_BASE_REQ     = 20;\r\n    uint256 public constant CARROT_COST          = 0.02 ether;\r\n    uint256 public constant HARVEST_COUNT        = 300;\r\n    uint256 public constant HARVEST_DURATION     = 14400; //4 hours in seconds\r\n    uint256 public constant HARVEST_DUR_ROOT     = 120; //saves computation\r\n    uint256 public constant HARVEST_MIN_COST     = 0.002 ether;\r\n    uint256 public constant SNAILMASTER_REQ      = 4096;\r\n    uint256 public constant ROUND_DOWNTIME       = 43200; //12 hours between rounds\r\n    address public constant SNAILTHRONE          = 0x261d650a521103428C6827a11fc0CBCe96D74DBc;\r\n\r\n    /* Variables */\r\n    \r\n\t//False for downtime between rounds, true when round is ongoing\r\n    bool public gameActive             = false;\r\n\t\r\n\t//Used to ensure a proper game start\r\n    address public dev;\r\n\t\r\n\t//Current round\r\n    uint256 public round                = 0;\r\n\t\r\n\t//Current top snail holder\r\n\taddress public currentLeader;\r\n\t\r\n\t//Owners of hot potatoes\r\n    address public currentSpiderOwner;\r\n    address public currentTadpoleOwner;\r\n\taddress public currentSquirrelOwner;\r\n\taddress public currentSnailmaster;\r\n\t\r\n\t//Current requirement for hot potatoes\r\n\tuint256 public spiderReq;\r\n    uint256 public tadpoleReq;\r\n\tuint256 public squirrelReq;\r\n\t\r\n\t//Current requirement for lettuce\r\n\tuint256 public lettuceReq;\r\n\t\r\n\t//Current requirement for Snailmaster\r\n\tuint256 public snailmasterReq       = SNAILMASTER_REQ;\r\n\t\r\n\t//Starting time for next round\r\n\tuint256 public nextRoundStart;\r\n\t\r\n\t//Starting price for Red Harvest auction\r\n\tuint256 public harvestStartCost;\r\n\t\r\n\t//Starting time for Red Harvest auction\r\n\tuint256 public harvestStartTime;\r\n\t\r\n\t//Current number of acorns over all holders\r\n\tuint256 public maxAcorn             = 0;\r\n\t\r\n\t//Current divs per acorn\r\n\tuint256 public divPerAcorn          = 0;\r\n\t\r\n\t//Current number of eggs for sale\r\n    uint256 public marketEgg            = 0;\r\n\t\t\r\n\t//Reserve pot and round jackpot\r\n    uint256 public snailPot             = 0;\r\n    uint256 public roundPot             = 0;\r\n    \r\n\t//Egg pot\r\n    uint256 public eggPot               = 0;\r\n    \r\n    //SnailThrone div pot\r\n    uint256 public thronePot            = 0;\r\n\r\n    /* Mappings */\r\n    \r\n\tmapping (address => bool) public hasStartingSnail;\r\n\tmapping (address => bool) public hasSlug;\r\n\tmapping (address => bool) public hasLettuce;\r\n\tmapping (address => uint256) public gotCarrot;\r\n\tmapping (address => uint256) public playerRound;\r\n    mapping (address => uint256) public hatcherySnail;\r\n    mapping (address => uint256) public claimedEgg;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => uint256) public redEgg;\r\n    mapping (address => uint256) public playerBalance;\r\n    mapping (address => uint256) public prodBoost;\r\n    mapping (address => uint256) public acorn;\r\n    mapping (address => uint256) public claimedShare;\r\n    \r\n    /* Functions */\r\n    \r\n    // Constructor\r\n    // Assigns all hot potatoes to dev for a proper game start\r\n    // (dev is banned from playing the game)\r\n    \r\n    constructor() public {\r\n        nextRoundStart = START_TIMESTAMP;\r\n        \r\n        //Assigns hot potatoes to dev originally\r\n        dev = msg.sender;\r\n        currentSnailmaster = msg.sender;\r\n        currentTadpoleOwner = msg.sender;\r\n        currentSquirrelOwner = msg.sender;\r\n        currentSpiderOwner = msg.sender;\r\n        currentLeader = msg.sender;\r\n        prodBoost[msg.sender] = 4; //base+tadpole+squirrel+spider\r\n    }\r\n    \r\n    // BeginRound\r\n    // Can be called by anyone to start a new round once downtime is over\r\n    // Sets appropriate values, and starts new round\r\n    \r\n    function BeginRound() public {\r\n        require(gameActive == false, \"cannot start round while game is active\");\r\n        require(now > nextRoundStart, \"round downtime isn't over\");\r\n        require(snailPot > 0, \"cannot start round on empty pot\");\r\n        \r\n        round = round.add(1);\r\n\t\tmarketEgg = STARTING_SNAIL;\r\n        roundPot = snailPot.div(10);\r\n        spiderReq = SPIDER_BASE_REQ;\r\n        tadpoleReq = TADPOLE_BASE_REQ;\r\n        squirrelReq = SQUIRREL_BASE_REQ;\r\n        lettuceReq = LETTUCE_BASE_REQ.mul(round);\r\n        if(snailmasterReq > 2) {\r\n            snailmasterReq = snailmasterReq.div(2);\r\n        }\r\n        harvestStartTime = now;\r\n        harvestStartCost = roundPot;\r\n        \r\n        gameActive = true;\r\n        \r\n        emit BeganRound(round);\r\n    }\r\n    \r\n    // FundTree\r\n    // Buy a share of the bankroll\r\n    // Acorn price lowers from round to round\r\n    \r\n    function FundTree() public payable {\r\n        require(tx.origin == msg.sender, \"no contracts allowed\");\r\n        require(now > FUND_TIMESTAMP, \"funding hasn't started yet\");\r\n        \r\n        uint256 _acornsBought = ComputeAcornBuy(msg.value);\r\n        \r\n        //Previous divs are considered claimed\r\n        claimedShare[msg.sender] = claimedShare[msg.sender].add(_acornsBought.mul(divPerAcorn));\r\n        \r\n        //Add to maxAcorn\r\n        maxAcorn = maxAcorn.add(_acornsBought);\r\n        \r\n        //Split ETH to pot\r\n        PotSplit(msg.value);\r\n        \r\n        //Add player acorns\r\n        acorn[msg.sender] = acorn[msg.sender].add(_acornsBought);\r\n        \r\n        emit FundedTree(msg.sender, msg.value, _acornsBought);\r\n    }\r\n    \r\n    // ClaimAcornShare\r\n    // Sends unclaimed dividends to playerBalance\r\n    // Adjusts claimable dividends\r\n    \r\n    function ClaimAcornShare() public {\r\n        \r\n        uint256 _playerShare = ComputeMyShare();\r\n        \r\n        if(_playerShare > 0) {\r\n            \r\n            //Add new divs to claimed divs\r\n            claimedShare[msg.sender] = claimedShare[msg.sender].add(_playerShare);\r\n            \r\n            //Send divs to playerEarnings\r\n            playerBalance[msg.sender] = playerBalance[msg.sender].add(_playerShare);\r\n            \r\n            emit ClaimedShare(msg.sender, _playerShare, acorn[msg.sender]);\r\n        }\r\n    }\r\n    \r\n    // BecomeSnailmaster\r\n    // Hot potato with red eggs \r\n    // Receives 5% of all incoming ETH\r\n    // Requirement halves every round, doubles on every claim\r\n\t\r\n    function BecomeSnailmaster() public {\r\n        require(gameActive, \"game is paused\");\r\n        require(playerRound[msg.sender] == round, \"join new round to play\");\r\n        require(redEgg[msg.sender] >= snailmasterReq, \"not enough red eggs\");\r\n        \r\n        redEgg[msg.sender] = redEgg[msg.sender].sub(snailmasterReq);\r\n        snailmasterReq = snailmasterReq.mul(2);\r\n        currentSnailmaster = msg.sender;\r\n        \r\n        emit BecameMaster(msg.sender, round);\r\n    }\r\n    \r\n    // WithdrawBalance\r\n    // Withdraws the ETH balance of a player to his wallet\r\n    \r\n    function WithdrawBalance() public {\r\n        require(playerBalance[msg.sender] > 0, \"no ETH in player balance\");\r\n        \r\n        uint _amount = playerBalance[msg.sender];\r\n        playerBalance[msg.sender] = 0;\r\n        msg.sender.transfer(_amount);\r\n        \r\n        emit WithdrewBalance(msg.sender, _amount);\r\n    }\r\n    \r\n    // PotSplit\r\n\t// Allocates the ETH of every transaction\r\n\t// 50% snailpot, 25% eggpot, 10% to acorn holders, 10% thronepot, 5% snailmaster\r\n    \r\n    function PotSplit(uint256 _msgValue) private {\r\n        \r\n        snailPot = snailPot.add(_msgValue.div(2));\r\n        eggPot = eggPot.add(_msgValue.div(4));\r\n        thronePot = thronePot.add(_msgValue.div(10));\r\n        \r\n        //Increase div per acorn proportionally\r\n        divPerAcorn = divPerAcorn.add(_msgValue.div(10).div(maxAcorn));\r\n        \r\n        //Snailmaster\r\n        playerBalance[currentSnailmaster] = playerBalance[currentSnailmaster].add(_msgValue.div(20));\r\n    }\r\n    \r\n    // JoinRound\r\n    // Gives red egg reward to player and lets them join the new round\r\n    \r\n    function JoinRound() public {\r\n        require(gameActive, \"game is paused\");\r\n        require(playerRound[msg.sender] != round, \"player already in current round\");\r\n        require(hasStartingSnail[msg.sender] == true, \"buy starting snails first\");\r\n        \r\n        uint256 _bonusRed = hatcherySnail[msg.sender].div(100);\r\n        hatcherySnail[msg.sender] = STARTING_SNAIL;\r\n        redEgg[msg.sender] = redEgg[msg.sender].add(_bonusRed);\r\n        \r\n        //Check if carrot is owned, remove 1 to count if so\r\n        if(gotCarrot[msg.sender] > 0) {\r\n            gotCarrot[msg.sender] = gotCarrot[msg.sender].sub(1);\r\n            \r\n            //Check if result puts us at 0, lower prodBoost if so\r\n            if(gotCarrot[msg.sender] == 0) {\r\n                prodBoost[msg.sender] = prodBoost[msg.sender].sub(1);\r\n            }\r\n        }\r\n        \r\n        //Check if lettuce is owned, lower prodBoost if so\r\n        if(hasLettuce[msg.sender]) {\r\n            prodBoost[msg.sender] = prodBoost[msg.sender].sub(1);\r\n            hasLettuce[msg.sender] = false;\r\n        }\r\n        \r\n\t\t//Set lastHatch to now\r\n\t\tlastHatch[msg.sender] = now;\r\n        playerRound[msg.sender] = round;\r\n        \r\n        emit JoinedRound(msg.sender, round, redEgg[msg.sender]);\r\n    }\r\n    \r\n    // WinRound\r\n    // Called when a player meets the snail requirement\r\n    // Gives his earnings to winner\r\n    // Pauses the game for 12 hours\r\n    \r\n    function WinRound(address _msgSender) private {\r\n        \r\n        gameActive = false;\r\n        nextRoundStart = now.add(ROUND_DOWNTIME);\r\n        \r\n        hatcherySnail[_msgSender] = 0;\r\n        snailPot = snailPot.sub(roundPot);\r\n        playerBalance[_msgSender] = playerBalance[_msgSender].add(roundPot);\r\n        \r\n        emit WonRound(_msgSender, round, roundPot);\r\n    }\r\n    \r\n    // HatchEgg\r\n    // Hatches eggs into snails for a slight fixed ETH cost\r\n    // If the player owns boosts, adjust result accordingly\r\n    \r\n    function HatchEgg() public payable {\r\n        require(gameActive, \"game is paused\");\r\n        require(playerRound[msg.sender] == round, \"join new round to play\");\r\n        require(msg.value == HATCHING_COST, \"wrong ETH cost\");\r\n        \r\n        PotSplit(msg.value);\r\n        uint256 eggUsed = ComputeMyEgg(msg.sender);\r\n        uint256 newSnail = eggUsed.mul(prodBoost[msg.sender]);\r\n        claimedEgg[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].add(newSnail);\r\n        \r\n        if(hatcherySnail[msg.sender] > hatcherySnail[currentLeader]) {\r\n            currentLeader = msg.sender;\r\n        }\r\n        \r\n        if(hatcherySnail[msg.sender] >= FROGKING_REQ) {\r\n            WinRound(msg.sender);\r\n        }\r\n        \r\n        emit Hatched(msg.sender, eggUsed, newSnail, hatcherySnail[msg.sender]);\r\n    }\r\n    \r\n    // SellEgg\r\n    // Exchanges player eggs for ETH\r\n\t// Eggs sold are added to the market\r\n    \r\n    function SellEgg() public {\r\n        require(gameActive, \"game is paused\");\r\n        require(playerRound[msg.sender] == round, \"join new round to play\");\r\n        \r\n        uint256 eggSold = ComputeMyEgg(msg.sender);\r\n        uint256 eggValue = ComputeSell(eggSold);\r\n        claimedEgg[msg.sender] = 0;\r\n        lastHatch[msg.sender] = now;\r\n        marketEgg = marketEgg.add(eggSold);\r\n        eggPot = eggPot.sub(eggValue);\r\n        playerBalance[msg.sender] = playerBalance[msg.sender].add(eggValue);\r\n        \r\n        emit SoldEgg(msg.sender, eggSold, eggValue);\r\n    }\r\n    \r\n    // BuyEgg\r\n    // Buy a calculated amount of eggs for a given amount of ETH\r\n\t\r\n\t// Eggs bought are removed from the market\r\n    \r\n    function BuyEgg() public payable {\r\n        require(gameActive, \"game is paused\");\r\n        require(playerRound[msg.sender] == round, \"join new round to play\");\r\n        \r\n        uint256 _eggBought = ComputeBuy(msg.value);\r\n        \r\n        //Define final buy price\r\n        uint256 _ethSpent = msg.value;\r\n        \r\n        //Refund player if he overpays. maxBuy is a fourth of eggPot\r\n        //(a/a+b) implies 1/4 of b gets the maximum 20% supply\r\n        uint256 _maxBuy = eggPot.div(4);\r\n        if (msg.value > _maxBuy) {\r\n            uint _excess = msg.value.sub(_maxBuy);\r\n            playerBalance[msg.sender] = playerBalance[msg.sender].add(_excess);\r\n            _ethSpent = _maxBuy;\r\n        }  \r\n        \r\n        PotSplit(_ethSpent);\r\n        marketEgg = marketEgg.sub(_eggBought);\r\n        claimedEgg[msg.sender] = claimedEgg[msg.sender].add(_eggBought);\r\n        \r\n        emit BoughtEgg(msg.sender, _eggBought, _ethSpent, hatcherySnail[msg.sender]);\r\n    }\r\n    \r\n    // BuyStartingSnail\r\n    // Gives starting snails and sets prodBoost to 1\r\n    \r\n    function BuyStartingSnail() public payable {\r\n        require(gameActive, \"game is paused\");\r\n        require(tx.origin == msg.sender, \"no contracts allowed\");\r\n        require(hasStartingSnail[msg.sender] == false, \"player already active\");\r\n        require(msg.value == STARTING_SNAIL_COST, \"wrongETH cost\");\r\n        require(msg.sender != dev, \"shoo shoo, developer\");\r\n\r\n        PotSplit(msg.value);\r\n\t\thasStartingSnail[msg.sender] = true;\r\n        lastHatch[msg.sender] = now;\r\n\t\tprodBoost[msg.sender] = 1;\r\n\t\tplayerRound[msg.sender] = round;\r\n        hatcherySnail[msg.sender] = STARTING_SNAIL;\r\n        \r\n        emit StartedSnailing(msg.sender, round);\r\n    }\r\n    \r\n    // GrabRedHarvest\r\n    // Gets red eggs for ETH\r\n    // Works as a dutch auction\r\n    \r\n    function GrabRedHarvest() public payable {\r\n        require(gameActive, \"game is paused\");\r\n        require(playerRound[msg.sender] == round, \"join new round to play\");\r\n        \r\n        //Check current harvest cost\r\n        uint256 _harvestCost = ComputeHarvest();\r\n        require(msg.value >= _harvestCost);\r\n        \r\n        //If player sent more ETH than needed, refund excess to playerBalance\r\n        if (msg.value > _harvestCost) {\r\n            uint _excess = msg.value.sub(_harvestCost);\r\n            playerBalance[msg.sender] = playerBalance[msg.sender].add(_excess);\r\n        }\r\n        \r\n        PotSplit(_harvestCost);\r\n        \r\n        //Reset the harvest\r\n        harvestStartCost = roundPot;\r\n        harvestStartTime = now;\r\n        \r\n        //Give red eggs to player\r\n        redEgg[msg.sender] = redEgg[msg.sender].add(HARVEST_COUNT);\r\n        \r\n        emit GrabbedHarvest(msg.sender, round, msg.value, redEgg[msg.sender]);\r\n    }\r\n    \r\n    // UseRedEgg\r\n    // Hatches a defined number of red eggs into snails\r\n    // No ETH cost\r\n    \r\n    function UseRedEgg(uint256 _redAmount) public {\r\n        require(gameActive, \"game is paused\");\r\n        require(playerRound[msg.sender] == round, \"join new round to play\");\r\n        require(redEgg[msg.sender] >= _redAmount, \"not enough red eggs\");\r\n        \r\n        redEgg[msg.sender] = redEgg[msg.sender].sub(_redAmount);\r\n        uint256 _newSnail = _redAmount.mul(prodBoost[msg.sender]);\r\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].add(_newSnail);\r\n        \r\n        if(hatcherySnail[msg.sender] > hatcherySnail[currentLeader]) {\r\n            currentLeader = msg.sender;\r\n        }\r\n        \r\n        if(hatcherySnail[msg.sender] >= FROGKING_REQ) {\r\n            WinRound(msg.sender);\r\n        }\r\n        \r\n        emit UsedRed(msg.sender, _redAmount, _newSnail, hatcherySnail[msg.sender]);\r\n    }\r\n    \r\n    // FindSlug\r\n    // Sacrifices all the snails the player owns (minimum 100k)\r\n    // Raises his prodBoost by 1 permanently\r\n    \r\n    function FindSlug() public {\r\n        require(gameActive, \"game is paused\");\r\n        require(playerRound[msg.sender] == round, \"join new round to play\");\r\n        require(hasSlug[msg.sender] == false, \"already owns slug\");\r\n        require(hatcherySnail[msg.sender] >= SLUG_MIN_REQ, \"not enough snails\");\r\n        \r\n\t\tuint256 _sacrifice = hatcherySnail[msg.sender];\r\n        hatcherySnail[msg.sender] = 0;\r\n        hasSlug[msg.sender] = true;\r\n        prodBoost[msg.sender] = prodBoost[msg.sender].add(1);\r\n\r\n        emit FoundSlug(msg.sender, round, _sacrifice);\r\n    }\r\n    \r\n    // FindLettuce\r\n    // Exchanges red eggs for lettuce (+1 prodBoost for the round)\r\n    // Lowers next lettuce requirement\r\n    \r\n    function FindLettuce() public {\r\n        require(gameActive, \"game is paused\");\r\n        require(playerRound[msg.sender] == round, \"join new round to play\");\r\n        require(hasLettuce[msg.sender] == false, \"already owns lettuce\");\r\n        require(redEgg[msg.sender] >= lettuceReq, \"not enough red eggs\");\r\n        \r\n        uint256 _eventLettuceReq = lettuceReq;\r\n        redEgg[msg.sender] = redEgg[msg.sender].sub(lettuceReq);\r\n        lettuceReq = lettuceReq.sub(LETTUCE_BASE_REQ);\r\n        if(lettuceReq < LETTUCE_BASE_REQ) {\r\n            lettuceReq = LETTUCE_BASE_REQ;\r\n        }\r\n        \r\n        hasLettuce[msg.sender] = true;\r\n        prodBoost[msg.sender] = prodBoost[msg.sender].add(1);\r\n\r\n        emit FoundLettuce(msg.sender, round, _eventLettuceReq, redEgg[msg.sender]);\r\n    }\r\n    \r\n    // FindCarrot\r\n    // Trades ETH for carrot (+1 prodBoost for 3 rounds)\r\n    \r\n    function FindCarrot() public payable {\r\n        require(gameActive, \"game is paused\");\r\n        require(playerRound[msg.sender] == round, \"join new round to play\");\r\n        require(gotCarrot[msg.sender] == 0, \"already owns carrot\");\r\n        require(msg.value == CARROT_COST);\r\n        \r\n        PotSplit(msg.value);\r\n        gotCarrot[msg.sender] = 3;\r\n        prodBoost[msg.sender] = prodBoost[msg.sender].add(1);\r\n\r\n        emit FoundCarrot(msg.sender, round);\r\n    }\r\n    \r\n    // PayThrone\r\n    // Sends thronePot to SnailThrone\r\n    \r\n    function PayThrone() public {\r\n        uint256 _payThrone = thronePot;\r\n        thronePot = 0;\r\n        if (!SNAILTHRONE.call.value(_payThrone)()){\r\n            revert();\r\n        }\r\n        \r\n        emit PaidThrone(msg.sender, _payThrone);\r\n    }\r\n    \r\n    // BecomeSpiderQueen\r\n    // Increases playerProdBoost while held, obtained with a snail sacrifice\r\n\t// Hot potato item, requirement doubles with every buy\r\n    \r\n    function BecomeSpiderQueen() public {\r\n        require(gameActive, \"game is paused\");\r\n        require(playerRound[msg.sender] == round, \"join new round to play\");\r\n        require(hatcherySnail[msg.sender] >= spiderReq, \"not enough snails\");\r\n\r\n        // Remove sacrificed snails, increase req\r\n        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].sub(spiderReq);\r\n        spiderReq = spiderReq.mul(2);\r\n        \r\n        // Lower prodBoost of old spider owner\r\n        prodBoost[currentSpiderOwner] = prodBoost[currentSpiderOwner].sub(1);\r\n        \r\n        // Give ownership to msg.sender, then increases his prodBoost\r\n        currentSpiderOwner = msg.sender;\r\n        prodBoost[currentSpiderOwner] = prodBoost[currentSpiderOwner].add(1);\r\n        \r\n        emit BecameQueen(msg.sender, round, spiderReq, hatcherySnail[msg.sender]);\r\n    }\r\n\t\r\n\t// BecomeSquirrelDuke\r\n\t// Increases playerProdBoost while held, obtained with a red egg sacrifice\r\n    // Hot potato item, requirement doubles with every buy\r\n    \r\n    function BecomeSquirrelDuke() public {\r\n        require(gameActive, \"game is paused\");\r\n        require(playerRound[msg.sender] == round, \"join new round to play\");\r\n        require(redEgg[msg.sender] >= squirrelReq, \"not enough red eggs\");\r\n        \r\n        // Remove red eggs spent, increase req\r\n        redEgg[msg.sender] = redEgg[msg.sender].sub(squirrelReq);\r\n        squirrelReq = squirrelReq.mul(2);\r\n        \r\n        // Lower prodBoost of old squirrel owner\r\n        prodBoost[currentSquirrelOwner] = prodBoost[currentSquirrelOwner].sub(1);\r\n        \r\n        // Give ownership to msg.sender, then increases his prodBoost\r\n        currentSquirrelOwner = msg.sender;\r\n        prodBoost[currentSquirrelOwner] = prodBoost[currentSquirrelOwner].add(1);\r\n        \r\n        emit BecameDuke(msg.sender, round, squirrelReq, redEgg[msg.sender]);\r\n    }\r\n    \r\n    // BecomeTadpolePrince\r\n    // Increases playerProdBoost while held, obtained with ETH\r\n\t\r\n    // Hot potato item, price increases by 20% with every buy\r\n    \r\n    function BecomeTadpolePrince() public payable {\r\n        require(gameActive, \"game is paused\");\r\n        require(playerRound[msg.sender] == round, \"join new round to play\");\r\n        require(msg.value >= tadpoleReq, \"not enough ETH\");\r\n        \r\n        // If player sent more ETH than needed, refund excess to playerBalance\r\n        if (msg.value > tadpoleReq) {\r\n            uint _excess = msg.value.sub(tadpoleReq);\r\n            playerBalance[msg.sender] = playerBalance[msg.sender].add(_excess);\r\n        }  \r\n        \r\n        // Calculate +10% from previous price\r\n        // Give result to the potsplit\r\n        uint _extra = tadpoleReq.div(12); \r\n        PotSplit(_extra);\r\n        \r\n        // Calculate 110% of previous price\r\n        // Give result to the previous owner\r\n        uint _previousFlip = tadpoleReq.mul(11).div(12);\r\n        playerBalance[currentTadpoleOwner] = playerBalance[currentTadpoleOwner].add(_previousFlip);\r\n        \r\n        // Increase ETH required for next buy by 20%\r\n        tadpoleReq = (tadpoleReq.mul(6)).div(5); \r\n        \r\n        // Lower prodBoost of old tadpole owner\r\n        prodBoost[currentTadpoleOwner] = prodBoost[currentTadpoleOwner].sub(1);\r\n        \r\n        // Give ownership to msg.sender, then increase his prodBoost\r\n        currentTadpoleOwner = msg.sender;\r\n        prodBoost[currentTadpoleOwner] = prodBoost[currentTadpoleOwner].add(1);\r\n        \r\n        emit BecamePrince(msg.sender, round, tadpoleReq);\r\n    }\r\n    \r\n    // fallback function\r\n    // Feeds the snailPot\r\n    \r\n    function() public payable {\r\n        snailPot = snailPot.add(msg.value);\r\n        \r\n        emit BoostedPot(msg.sender, msg.value);\r\n    }\r\n    \r\n    // ComputeAcornCost\r\n    // Returns acorn cost at the current time\r\n    // Before the game starts, acorns are at half cost\r\n    // After the game is started, cost is multiplied by 10/(10+round)\r\n    \r\n    function ComputeAcornCost() public view returns(uint256) {\r\n        uint256 _acornCost;\r\n        if(round != 0) {\r\n            _acornCost = ACORN_PRICE.mul(ACORN_MULT).div(ACORN_MULT.add(round));\r\n        } else {\r\n            _acornCost = ACORN_PRICE.div(2);\r\n        }\r\n        return _acornCost;\r\n    }\r\n    \r\n    // ComputeAcornBuy\r\n    // Returns acorn amount for a given amount of ETH\r\n    \r\n    function ComputeAcornBuy(uint256 _ether) public view returns(uint256) {\r\n        uint256 _costPerAcorn = ComputeAcornCost();\r\n        return _ether.div(_costPerAcorn);\r\n    }\r\n    \r\n    // ComputeMyShare\r\n    // Returns unclaimed share for the player\r\n    \r\n    function ComputeMyShare() public view returns(uint256) {\r\n        //Calculate share of player\r\n        uint256 _playerShare = divPerAcorn.mul(acorn[msg.sender]);\r\n\t\t\r\n        //Subtract already claimed divs\r\n    \t_playerShare = _playerShare.sub(claimedShare[msg.sender]);\r\n        return _playerShare;\r\n    }\r\n    \r\n    // ComputeHarvest\r\n    // Calculates current ETH cost to claim red harvest\r\n    // Dutch auction\r\n    \r\n    function ComputeHarvest() public view returns(uint256) {\r\n\r\n        //Time spent since auction start\r\n        uint256 _timeLapsed = now.sub(harvestStartTime);\r\n        \r\n        //Make sure we're not beyond the end point\r\n        if(_timeLapsed > HARVEST_DURATION) {\r\n            _timeLapsed = HARVEST_DURATION;\r\n        }\r\n        \r\n        //Get the square root of timeLapsed\r\n        _timeLapsed = ComputeSquare(_timeLapsed);\r\n        \r\n        //Price differential between start and end of auction\r\n        uint256 _priceChange = harvestStartCost.sub(HARVEST_MIN_COST);\r\n        \r\n        //Multiply priceChange by timeLapsed root then divide by end root\r\n        uint256 _harvestFactor = _priceChange.mul(_timeLapsed).div(HARVEST_DUR_ROOT);\r\n        \r\n        //Subtract result to starting price to get current price\r\n        return harvestStartCost.sub(_harvestFactor);\r\n    }\r\n    \r\n    // ComputeSquare\r\n    // Approximate square root\r\n    \r\n    function ComputeSquare(uint256 base) public pure returns (uint256 squareRoot) {\r\n        uint256 z = (base + 1) / 2;\r\n        squareRoot = base;\r\n        while (z < squareRoot) {\r\n            squareRoot = z;\r\n            z = (base / z + z) / 2;\r\n        }\r\n    }\r\n    \r\n    // ComputeSell\r\n\t// Calculates ether value for a given amount of eggs being sold\r\n\t// ETH = (eggs / (eggs + marketeggs)) * eggpot / 2\r\n\t// A sale can never give more than half of the eggpot\r\n    \r\n    function ComputeSell(uint256 eggspent) public view returns(uint256) {\r\n        uint256 _eggPool = eggspent.add(marketEgg);\r\n        uint256 _eggFactor = eggspent.mul(eggPot).div(_eggPool);\r\n        return _eggFactor.div(2);\r\n    }\r\n    \r\n    // ComputeBuy\r\n\t// Calculates number of eggs bought for a given amount of ether\r\n    // Eggs bought = ETH spent / (ETH spent + eggpot) * marketegg\r\n    // No more than 20% of the supply can be bought at once\r\n    \r\n    function ComputeBuy(uint256 ethspent) public view returns(uint256) {\r\n        uint256 _ethPool = ethspent.add(eggPot);\r\n        uint256 _ethFactor = ethspent.mul(marketEgg).div(_ethPool);\r\n        uint256 _maxBuy = marketEgg.div(5);\r\n        if(_ethFactor > _maxBuy) {\r\n            _ethFactor = _maxBuy;\r\n        }\r\n        return _ethFactor;\r\n    }\r\n    \r\n    // ComputeMyEgg\r\n    // Returns eggs produced since last hatch or sacrifice\r\n\t// Egg amount can never be above current snail count\r\n    \r\n    function ComputeMyEgg(address adr) public view returns(uint256) {\r\n        uint256 _eggs = now.sub(lastHatch[adr]);\r\n        _eggs = _eggs.mul(hatcherySnail[adr]).div(TIME_TO_HATCH_1SNAIL);\r\n        if (_eggs > hatcherySnail[adr]) {\r\n            _eggs = hatcherySnail[adr];\r\n        }\r\n        _eggs = _eggs.add(claimedEgg[adr]);\r\n        return _eggs;\r\n    }\r\n\r\n    // Gets\r\n    \r\n    function GetSnail(address adr) public view returns(uint256) {\r\n        return hatcherySnail[adr];\r\n    }\r\n    \r\n    function GetAcorn(address adr) public view returns(uint256) {\r\n        return acorn[adr];\r\n    }\r\n\t\r\n\tfunction GetProd(address adr) public view returns(uint256) {\r\n\t\treturn prodBoost[adr];\r\n\t}\r\n    \r\n    function GetMyEgg() public view returns(uint256) {\r\n        return ComputeMyEgg(msg.sender);\r\n    }\r\n\t\r\n\tfunction GetMyBalance() public view returns(uint256) {\r\n\t    return playerBalance[msg.sender];\r\n\t}\r\n\t\r\n\tfunction GetRed(address adr) public view returns(uint256) {\r\n\t    return redEgg[adr];\r\n\t}\r\n\t\r\n\tfunction GetLettuce(address adr) public view returns(bool) {\r\n\t    return hasLettuce[adr];\r\n\t}\r\n\t\r\n\tfunction GetCarrot(address adr) public view returns(uint256) {\r\n\t    return gotCarrot[adr];\r\n\t}\r\n\t\r\n\tfunction GetSlug(address adr) public view returns(bool) {\r\n\t    return hasSlug[adr];\r\n\t}\r\n\t\r\n\tfunction GetMyRound() public view returns(uint256) {\r\n\t    return playerRound[msg.sender];\r\n\t}\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"ACORN_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LETTUCE_BASE_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPIDER_BASE_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetAcorn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gotCarrot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeHarvest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetRed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ClaimAcornShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"JoinRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyStartingSnail\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcherySnail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasSlug\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"divPerAcorn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_redAmount\",\"type\":\"uint256\"}],\"name\":\"UseRedEgg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARVEST_MIN_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasStartingSnail\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"ComputeSquare\",\"outputs\":[{\"name\":\"squareRoot\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FundTree\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"ComputeAcornBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"redEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUND_TIMESTAMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeAcornCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TADPOLE_BASE_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggspent\",\"type\":\"uint256\"}],\"name\":\"ComputeSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetSnail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SNAILTHRONE\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"PayThrone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACORN_MULT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"ComputeMyEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"acorn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FindLettuce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"SellEgg\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetLettuce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeSpiderQueen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snailPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BuyEgg\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetProd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SQUIRREL_BASE_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROUND_DOWNTIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"START_TIMESTAMP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"GrabRedHarvest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HATCHING_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetSlug\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"snailmasterReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_SNAIL_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSpiderOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SLUG_MIN_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eggPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"HatchEgg\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FROGKING_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BeginRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeTadpolePrince\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SNAILMASTER_REQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"prodBoost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FindCarrot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestStartCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_SNAIL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ComputeMyShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSnailmaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARVEST_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tadpoleReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thronePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethspent\",\"type\":\"uint256\"}],\"name\":\"ComputeBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAcorn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"spiderReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_TO_HATCH_1SNAIL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CARROT_COST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeSquirrelDuke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"GetCarrot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasLettuce\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextRoundStart\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARVEST_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"BecomeSnailmaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMyRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEgg\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HARVEST_DUR_ROOT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lettuceReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"FindSlug\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"squirrelReq\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSquirrelOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTadpoleOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"acorns\",\"type\":\"uint256\"}],\"name\":\"FundedTree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"acorns\",\"type\":\"uint256\"}],\"name\":\"ClaimedShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"BecameMaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"WithdrewBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snails\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hatchery\",\"type\":\"uint256\"}],\"name\":\"Hatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"SoldEgg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playereggs\",\"type\":\"uint256\"}],\"name\":\"BoughtEgg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"StartedSnailing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"spiderreq\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hatchery\",\"type\":\"uint256\"}],\"name\":\"BecameQueen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"squirrelreq\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerreds\",\"type\":\"uint256\"}],\"name\":\"BecameDuke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tadpolereq\",\"type\":\"uint256\"}],\"name\":\"BecamePrince\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"roundwinner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"WonRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"BeganRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerreds\",\"type\":\"uint256\"}],\"name\":\"JoinedRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerreds\",\"type\":\"uint256\"}],\"name\":\"GrabbedHarvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eggs\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snails\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hatchery\",\"type\":\"uint256\"}],\"name\":\"UsedRed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"snails\",\"type\":\"uint256\"}],\"name\":\"FoundSlug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lettucereq\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerreds\",\"type\":\"uint256\"}],\"name\":\"FoundLettuce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"FoundCarrot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"PaidThrone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"BoostedPot\",\"type\":\"event\"}]","ContractName":"SnailFarm3","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://beb75179dcc1a1279d057b080936230583c23da803e481305f5df8e2c964210e"}]}