{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract KickvardUniversity {\r\n\r\n    address owner;\r\n\r\n    mapping (address => Certificate[]) certificates;\r\n\r\n    mapping (string => address) member2address;\r\n\r\n    struct Certificate {\r\n        string memberId;\r\n        string program;\r\n        string subjects;\r\n        string dateStart;\r\n        string dateEnd;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setCertificate(address toAddress, string memory memberId, string memory program, string memory subjects, string memory dateStart, string memory dateEnd) public {\r\n        require(msg.sender == owner);\r\n        certificates[toAddress].push(Certificate(memberId, program, subjects, dateStart, dateEnd));\r\n        member2address[memberId] = toAddress;\r\n    }\r\n\r\n    function getCertificateByAddress(address toAddress) public view returns (string memory) {\r\n        return renderCertificate(certificates[toAddress]);\r\n    }\r\n\r\n    function getCertificateByMember(string memory memberId) public view returns (string memory) {\r\n        return renderCertificate(certificates[member2address[memberId]]);\r\n    }\r\n\r\n    function renderCertificate(Certificate[] memory memberCertificates) private pure returns (string memory) {\r\n        if (memberCertificates.length < 1) {\r\n            return \"Certificate not found\";\r\n        }\r\n        string memory result;\r\n        string memory delimiter;\r\n        for (uint i = 0; i < memberCertificates.length; i++) {\r\n            result = string(abi.encodePacked(\r\n                result,\r\n                delimiter,\r\n                \"[ This is to certify that member ID in Sessia: \",\r\n                memberCertificates[i].memberId,\r\n                \" between \",\r\n                memberCertificates[i].dateStart,\r\n                \" and \",\r\n                memberCertificates[i].dateEnd,\r\n                \" successfully finished the educational program \",\r\n                memberCertificates[i].program,\r\n                \" that included the following subjects: \",\r\n                memberCertificates[i].subjects,\r\n                \". The President of the KICKVARD UNIVERSITY Narek Sirakanyan ]\"\r\n            ));\r\n            delimiter = \", \";\r\n        }\r\n        return result;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"toAddress\",\"type\":\"address\"},{\"name\":\"memberId\",\"type\":\"string\"},{\"name\":\"program\",\"type\":\"string\"},{\"name\":\"subjects\",\"type\":\"string\"},{\"name\":\"dateStart\",\"type\":\"string\"},{\"name\":\"dateEnd\",\"type\":\"string\"}],\"name\":\"setCertificate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"memberId\",\"type\":\"string\"}],\"name\":\"getCertificateByMember\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"getCertificateByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"KickvardUniversity","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0c08e9ee03e3ca71c2886ad60286621ddd838900cfaa168d97acb883ba1133ab"}]}