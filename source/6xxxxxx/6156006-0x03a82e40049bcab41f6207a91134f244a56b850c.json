{"status":"1","message":"OK","result":[{"SourceCode":"//This file contains an eRAY token contract along with some other accompanying contracts\r\n//Generally speaking, the difference between plain ERC20 token is in way of generating token via prescribed TGR (Token Generation Rounds)\r\n//and possibility to burn token to receive contributed Ether back\r\n\r\n// Authors: Alexander Shevtsov <randomlogin76@gmail.com>\r\n//          Vladimir Bobrov <v@decenturygroup.com>\r\n//          vladiuz1 <vs@array.io>\r\n// License: see the repository file\r\n// Last updated: 16 August 2018\r\npragma solidity ^0.4.22;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Base {\r\n\r\n    uint private bitlocks = 0;\r\n\r\n    modifier noAnyReentrancy {\r\n        uint _locks = bitlocks;\r\n        require(_locks <= 0);\r\n        bitlocks = uint(-1);\r\n        _;\r\n        bitlocks = _locks;\r\n    }\r\n\r\n    modifier only(address allowed) {\r\n        require(msg.sender == allowed);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length == size + 4);\r\n        _;\r\n    } \r\n\r\n}\r\n\r\n\r\ncontract ERC20 is Base {\r\n    \r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n    using SafeMath for uint;\r\n    uint public totalSupply;\r\n    bool public isFrozen = false; //it's not part of ERC20 specification, however it has to be here to place modifiers on usual ERC20 functions\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n\r\n    modifier isNotFrozenOnly() {\r\n        require(!isFrozen);\r\n        _;\r\n    }\r\n\r\n    modifier isFrozenOnly(){\r\n        require(isFrozen);\r\n        _;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public isNotFrozenOnly onlyPayloadSize(3 * 32) returns (bool success) {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve_fixed(address _spender, uint _currentValue, uint _value) public isNotFrozenOnly onlyPayloadSize(3 * 32) returns (bool success) {\r\n        if(allowed[msg.sender][_spender] == _currentValue){\r\n            allowed[msg.sender][_spender] = _value;\r\n            emit Approval(msg.sender, _spender, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public isNotFrozenOnly onlyPayloadSize(2 * 32) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\ncontract Whitelist {\r\n\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => bool) operators;\r\n    address authority;\r\n\r\n    constructor(address _authority) {\r\n        authority = _authority;\r\n        operators[_authority] = true;\r\n    }\r\n    \r\n    function add(address _address) public {\r\n        require(operators[msg.sender]);\r\n        whitelist[_address] = true;\r\n    }\r\n\r\n    function remove(address _address) public {\r\n        require(operators[msg.sender]);\r\n        whitelist[_address] = false;\r\n    }\r\n\r\n    function addOperator(address _address) public {\r\n        require(authority == msg.sender);\r\n        operators[_address] = true;\r\n    }\r\n\r\n    function removeOperator(address _address) public {\r\n        require(authority == msg.sender);\r\n        operators[_address] = false;\r\n    }\r\n}\r\n\r\n\r\ncontract Token is ERC20 {\r\n\r\n    //some ERC20 definitions\r\n    string public constant name = \"Array.io Token\";\r\n    string public constant symbol = \"eRAY\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    //these are settings, i.e. the values set by the initiator at the beginning of each token generation round\r\n    uint public tgrSettingsAmount; //how much is needed for current round goals. It doesn't depend on how much total funds is contributed, rather than on how much has the project received.\r\n    uint public tgrSettingsMinimalContribution; \r\n    uint public tgrSettingsPartContributor;\r\n    uint public tgrSettingsPartProject;\r\n    uint public tgrSettingsPartFounders;\r\n    uint public tgrSettingsBlocksPerStage;\r\n    uint public tgrSettingsPartContributorIncreasePerStage;\r\n    uint public tgrSettingsMaxStages;\r\n\r\n    //these are properties, i.e. some valuable variables which are changed automatically in the process of execution of this smart contract\r\n    uint public tgrStartBlock; //current token generation round initial block number\r\n    uint public tgrNumber; //how many rounds has been started. That means it equals the oridnal number of current active round starting from 1\r\n    uint public tgrAmountCollected; //total amount of funds received by PROJECT\r\n    uint public tgrContributedAmount; //total contributed amount for current round\r\n\r\n    address public projectWallet;\r\n    address public foundersWallet;\r\n    address constant public burnAddress = address(0);\r\n    mapping (address => uint) public invBalances;\r\n    uint public totalInvSupply;\r\n    Whitelist public whitelist;\r\n\r\n\r\n    modifier isTgrLive(){\r\n        require(tgrLive());\r\n        _;\r\n    }\r\n\r\n    modifier isNotTgrLive(){\r\n        require(!tgrLive());\r\n        _;\r\n    }\r\n\r\n    event Burn(address indexed _owner,  uint _value);\r\n    event TGRStarted(uint tgrSettingsAmount,\r\n                     uint tgrSettingsMinimalContribution,\r\n                     uint tgrSettingsPartContributor,\r\n                     uint tgrSettingsPartProject, \r\n                     uint tgrSettingsPartFounders, \r\n                     uint tgrSettingsBlocksPerStage, \r\n                     uint tgrSettingsPartContributorIncreasePerStage,\r\n                     uint tgrSettingsMaxStages,\r\n                     uint blockNumber,\r\n                     uint tgrNumber); \r\n\r\n    event TGRFinished(uint blockNumber, uint amountCollected);\r\n\r\n\r\n    /// @dev Constructor\r\n    /// @param _projectWallet Wallet of project\r\n    /// @param _foundersWallet Wallet of founders\r\n    constructor(address _projectWallet, address _foundersWallet) public {\r\n        projectWallet = _projectWallet;\r\n        foundersWallet = _foundersWallet;\r\n    }\r\n\r\n    /// @dev Fallback function allows to buy tokens\r\n    function () public payable isTgrLive isNotFrozenOnly noAnyReentrancy {\r\n        require(whitelist.whitelist(msg.sender)); //checking if sender is allowed to send Ether\r\n        require(tgrAmountCollected < tgrSettingsAmount); //checking if target amount is not achieved\r\n        require(msg.value >= tgrSettingsMinimalContribution); \r\n\r\n        uint stage = block.number.sub(tgrStartBlock).div(tgrSettingsBlocksPerStage);\r\n        require(stage < tgrSettingsMaxStages); //checking if max stage is not reached\r\n\r\n        //if the value sent is bigger than remaining amount to achieve the target, the difference is refunded\r\n        uint etherToRefund = 0;\r\n        uint etherContributed = msg.value;\r\n\r\n        uint currentPartContributor = tgrSettingsPartContributor.add(stage.mul(tgrSettingsPartContributorIncreasePerStage));\r\n\r\n        uint allStakes = currentPartContributor.add(tgrSettingsPartProject).add(tgrSettingsPartFounders);\r\n        uint remainsToContribute = (tgrSettingsAmount.sub(tgrAmountCollected)).mul(allStakes).div(tgrSettingsPartProject);\r\n\r\n        if ((tgrSettingsAmount.sub(tgrAmountCollected)).mul(allStakes) % tgrSettingsPartProject != 0) {\r\n            remainsToContribute = remainsToContribute + allStakes;\r\n        }\r\n\r\n        if (remainsToContribute < msg.value) {\r\n            etherToRefund = msg.value.sub(remainsToContribute);\r\n            etherContributed = remainsToContribute;\r\n        }\r\n\r\n        uint tokensProject = etherContributed.mul(tgrSettingsPartProject).div(allStakes);\r\n        uint tokensFounders = etherContributed.mul(tgrSettingsPartFounders).div(allStakes);\r\n        uint tokensContributor = etherContributed.sub(tokensProject).sub(tokensFounders);\r\n        \r\n        tgrAmountCollected = tgrAmountCollected.add(tokensProject);\r\n        tgrContributedAmount = tgrContributedAmount.add(etherContributed);\r\n        _mint(tokensProject, tokensFounders, tokensContributor);\r\n        msg.sender.transfer(etherToRefund);\r\n    }\r\n\r\n    /// @dev Start new tgr stage\r\n    function tgrSetLive() public only(projectWallet) isNotTgrLive isNotFrozenOnly {\r\n        tgrNumber +=1;\r\n        tgrStartBlock = block.number;\r\n        tgrAmountCollected = 0;\r\n        tgrContributedAmount = 0;\r\n        emit TGRStarted(tgrSettingsAmount,\r\n                     tgrSettingsMinimalContribution,\r\n                     tgrSettingsPartContributor,\r\n                     tgrSettingsPartProject, \r\n                     tgrSettingsPartFounders, \r\n                     tgrSettingsBlocksPerStage, \r\n                     tgrSettingsPartContributorIncreasePerStage,\r\n                     tgrSettingsMaxStages,\r\n                     block.number,\r\n                     tgrNumber); \r\n    }\r\n\r\n    function tgrSetFinished() public only(projectWallet) isTgrLive isNotFrozenOnly {\r\n        emit TGRFinished(block.number, tgrAmountCollected); \r\n        tgrStartBlock = 0;\r\n    }\r\n\r\n    /// @dev Burn tokens to burnAddress from msg.sender wallet\r\n    /// @param _amount Amount of tokens\r\n    function burn(uint _amount) public isNotFrozenOnly noAnyReentrancy returns(bool _success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[burnAddress] = balances[burnAddress].add(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        msg.sender.transfer(_amount);\r\n        emit Transfer(msg.sender, burnAddress, _amount);\r\n        emit Burn(burnAddress, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public isNotFrozenOnly onlyPayloadSize(2 * 32) returns (bool success) {\r\n        require(_to != address(0));\r\n        require(_to != address(this));\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev _foundersWallet Wallet of founders\r\n    /// @param dests array of addresses \r\n    /// @param values array amount of tokens to transfer    \r\n    function multiTransfer(address[] dests, uint[] values) public isNotFrozenOnly returns(uint) {\r\n        uint i = 0;\r\n        while (i < dests.length) {\r\n           transfer(dests[i], values[i]);\r\n           i += 1;\r\n        }\r\n        return i;\r\n    }\r\n    \r\n    /// @dev Allows to users withdraw eth in frozen stage \r\n    function withdrawFrozen() public isFrozenOnly noAnyReentrancy {\r\n        uint amountWithdraw = totalSupply.mul(invBalances[msg.sender]).div(totalInvSupply);\r\n        // fix possible rounding errors for last withdrawal:\r\n        if (amountWithdraw > address(this).balance) {\r\n            amountWithdraw = address(this).balance;\r\n        }\r\n        invBalances[msg.sender] = 0;\r\n        msg.sender.transfer(amountWithdraw);\r\n    }\r\n\r\n    function setWhitelist(address _address) public only(projectWallet) isNotFrozenOnly returns (bool) {\r\n        whitelist = Whitelist(_address);\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm a change settings request.\r\n    function executeSettingsChange(\r\n        uint amount, \r\n        uint minimalContribution,\r\n        uint partContributor,\r\n        uint partProject, \r\n        uint partFounders, \r\n        uint blocksPerStage, \r\n        uint partContributorIncreasePerStage,\r\n        uint maxStages\r\n    ) \r\n    public\r\n    only(projectWallet)\r\n    isNotTgrLive \r\n    isNotFrozenOnly\r\n    returns(bool success) \r\n    {\r\n        tgrSettingsAmount = amount;\r\n        tgrSettingsMinimalContribution = minimalContribution;\r\n        tgrSettingsPartContributor = partContributor;\r\n        tgrSettingsPartProject = partProject;\r\n        tgrSettingsPartFounders = partFounders;\r\n        tgrSettingsBlocksPerStage = blocksPerStage;\r\n        tgrSettingsPartContributorIncreasePerStage = partContributorIncreasePerStage;\r\n        tgrSettingsMaxStages = maxStages;\r\n        return true;\r\n    }\r\n\r\n    /// @dev Allows an owner to confirm freezeng process\r\n    function setFreeze() public only(projectWallet) isNotFrozenOnly returns (bool) {\r\n        isFrozen = true;\r\n        return true;\r\n    }\r\n\r\n    function _mint(uint _tokensProject, uint _tokensFounders, uint _tokensContributor) internal {\r\n        balances[projectWallet] = balances[projectWallet].add(_tokensProject);\r\n        balances[foundersWallet] = balances[foundersWallet].add(_tokensFounders);\r\n        balances[msg.sender] = balances[msg.sender].add(_tokensContributor);\r\n\r\n        invBalances[msg.sender] = invBalances[msg.sender].add(_tokensContributor).add(_tokensFounders).add(_tokensProject);\r\n        totalInvSupply = totalInvSupply.add(_tokensContributor).add(_tokensFounders).add(_tokensProject);\r\n        totalSupply = totalSupply.add(_tokensProject).add(_tokensFounders).add(_tokensContributor);\r\n\r\n        emit Transfer(0x0, msg.sender, _tokensContributor);\r\n        emit Transfer(0x0, projectWallet, _tokensProject);\r\n        emit Transfer(0x0, foundersWallet, _tokensFounders);\r\n    }\r\n\r\n\r\n    //Status of tgr is initially defined by the start block of the tgr, if it's zero then tgr is not live\r\n    function tgrLive() view public returns(bool) {\r\n        if (tgrStartBlock == 0) {\r\n            return false;\r\n        }\r\n        uint stage = block.number.sub(tgrStartBlock).div(tgrSettingsBlocksPerStage);\r\n        if (stage < tgrSettingsMaxStages) {\r\n            if (tgrAmountCollected >= tgrSettingsAmount){\r\n                return false;\r\n            } else { \r\n                return true;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    //These functions are used to show information at the website.\r\n    //-1 shows that information is not accurate, for example numbers of blocks left is nonsense when the stage is not\r\n    //active. This way is easier handle than throwing errors.\r\n\r\n    /// @dev Amount of blocks left to the end of this stage of TGR \r\n    function tgrStageBlockLeft() public view returns(int) {\r\n        if (tgrLive()) {\r\n            uint stage = block.number.sub(tgrStartBlock).div(tgrSettingsBlocksPerStage);\r\n            return int(tgrStartBlock.add((stage+1).mul(tgrSettingsBlocksPerStage)).sub(block.number));\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    function tgrCurrentPartContributor() public view returns(int) {\r\n        if (tgrLive()) {\r\n            uint stage = block.number.sub(tgrStartBlock).div(tgrSettingsBlocksPerStage);\r\n            return int(tgrSettingsPartContributor.add(stage.mul(tgrSettingsPartContributorIncreasePerStage)));\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    function tgrNextPartContributor() public view returns(int) {\r\n        if (tgrLive()) {\r\n            uint stage = block.number.sub(tgrStartBlock).div(tgrSettingsBlocksPerStage).add(1);        \r\n            return int(tgrSettingsPartContributor.add(stage.mul(tgrSettingsPartContributorIncreasePerStage)));\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    //Keep in mind that internally stage count is started from 0 while user receives it incremented, i.e. starting from 1\r\n    function tgrCurrentStage() public view returns(int) {\r\n        if (tgrLive()) {\r\n            return int(block.number.sub(tgrStartBlock).div(tgrSettingsBlocksPerStage).add(1));        \r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrSettingsMinimalContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrSettingsPartProject\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"foundersWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dests\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrSettingsPartFounders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrSettingsBlocksPerStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tgrSetLive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFrozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"_success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFrozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrAmountCollected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve_fixed\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrContributedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrSettingsMaxStages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrSettingsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrLive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrNextPartContributor\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrSettingsPartContributorIncreasePerStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrCurrentPartContributor\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrCurrentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrSettingsPartContributor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"minimalContribution\",\"type\":\"uint256\"},{\"name\":\"partContributor\",\"type\":\"uint256\"},{\"name\":\"partProject\",\"type\":\"uint256\"},{\"name\":\"partFounders\",\"type\":\"uint256\"},{\"name\":\"blocksPerStage\",\"type\":\"uint256\"},{\"name\":\"partContributorIncreasePerStage\",\"type\":\"uint256\"},{\"name\":\"maxStages\",\"type\":\"uint256\"}],\"name\":\"executeSettingsChange\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalInvSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tgrSetFinished\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrStageBlockLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tgrStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_projectWallet\",\"type\":\"address\"},{\"name\":\"_foundersWallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tgrSettingsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tgrSettingsMinimalContribution\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tgrSettingsPartContributor\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tgrSettingsPartProject\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tgrSettingsPartFounders\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tgrSettingsBlocksPerStage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tgrSettingsPartContributorIncreasePerStage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tgrSettingsMaxStages\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tgrNumber\",\"type\":\"uint256\"}],\"name\":\"TGRStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountCollected\",\"type\":\"uint256\"}],\"name\":\"TGRFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005e5a14be6b31ab275347bd28bb1d0f425c14f817000000000000000000000000160e529055d084add9634fe1c2059109c8ce044e","Library":"","SwarmSource":"bzzr://210424f58fad530c919b228a205aba79c6d2bf9f7d1204e4c71c911eb50082a4"}]}