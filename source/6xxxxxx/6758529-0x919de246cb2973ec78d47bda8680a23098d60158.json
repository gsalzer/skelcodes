{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n  contract SafeMath {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n  }\r\n  contract Ownership is SafeMath {\r\n\taddress public fundWallet;\r\n\tmodifier onlyFundWallet {\r\n        require(msg.sender == fundWallet);\r\n        _;\r\n    }\r\n\tfunction changeFundWallet(address newFundWallet) external onlyFundWallet {\r\n        require(newFundWallet != address(0));\r\n        fundWallet = newFundWallet;\r\n    }\r\n\r\n\t}    \r\n  contract Token { // ERC20 standard\r\n\t\tfunction balanceOf(address _owner) public  view returns (uint256 balance);\r\n\t\tfunction transfer(address _to, uint256 _value) public  returns (bool success);\r\n\t\tfunction transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\r\n\t\tfunction approve(address _spender, uint256 _value)  returns (bool success);\r\n\t\tfunction allowance(address _owner, address _spender) public  view returns (uint256 remaining);\r\n\t\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\t\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\t}\r\n\t\r\n  contract STCDRListing is Ownership {\r\n\tstring public name = \"STCDR Listing\";\r\n\tbool public enable = true;\r\n\tuint256 public count =0 ;\r\n\t\r\n\t// MAPPING\r\n\tmapping (uint256 => Sendvalue) public receivedEther;\r\n\t\t\r\n\t  // EVENTS\r\n    event Received(address indexed participant,uint256 amountEther);\r\n\tevent Withdraw(uint256 amountEther);\r\n\t \r\n\t// TYPES\r\n\tstruct Sendvalue { // tokensPerEth\r\n\t\taddress sender;\r\n\t\tuint256 value;\r\n\t}\t\t\r\n\t // CONSTRUCTOR\r\n\tfunction STCDRListing() public  {\r\n        fundWallet = msg.sender;\r\n    }\r\n\tfunction removeLiquidity(uint256 amount) external onlyFundWallet {\r\n        require(amount <= this.balance);\r\n        fundWallet.transfer(amount);\r\n\t\tWithdraw(amount);\r\n    }\t\r\n\tfunction stop() external onlyFundWallet {\r\n        enable = false;\r\n    }\r\n\tfunction start() external onlyFundWallet {\r\n        enable = true;\r\n    }\r\n\tfunction() payable {\r\n\t\trequire(tx.origin == msg.sender);\r\n\t\trequire(enable);\r\n\t\trequire(msg.value>0);\r\n\t\tcount =\tsafeAdd(count,1);\t\t\r\n\t\treceivedEther[count] = Sendvalue(msg.sender,msg.value);\r\n\t\tReceived(msg.sender,msg.value);\r\n\t}\r\n\tfunction claimTokens(address _token) external onlyFundWallet {\r\n\t\t\trequire(_token != address(0));\r\n\t\t\tToken token = Token(_token);\r\n\t\t\tuint256 balance = token.balanceOf(this);\r\n\t\t\ttoken.transfer(fundWallet, balance);\r\n\t}\t \r\n  }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receivedEther\",\"outputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFundWallet\",\"type\":\"address\"}],\"name\":\"changeFundWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountEther\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountEther\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"STCDRListing","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4b11013c453bcbe700a091f3882600144c950943d52055e3029b660e0206cb0a"}]}