{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/***********************************************************\r\n * MultiInvest contract\r\n *  - GAIN 5.3% PER 24 HOURS (every 5900 blocks) 40 days  0.01~500eth\r\n *  - GAIN 5.6% PER 24 HOURS (every 5900 blocks) 30 days  1~1000eth\r\n *  - GAIN 6.6% PER 24 HOURS (every 5900 blocks) 20 days  2~10000eth\r\n *  - GAIN 7.6% PER 24 HOURS (every 5900 blocks) 15 days  5~10000eth\r\n *  - GAIN 8.5% PER 24 HOURS (every 5900 blocks) 12 days    10~10000eth\r\n *  - GAIN 3% PER 24 HOURS (every 5900 blocks) forever    0.01~10000eth\r\n *  \r\n *  website:  https://www.MultiInvest.biz\r\n *  telegram: https://t.me/MultiInvest\r\n ***********************************************************/\r\n\r\n/***********************************************************\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr \r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n ***********************************************************/\r\n library SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}\r\n\r\n/***********************************************************\r\n * SDDatasets library\r\n ***********************************************************/\r\nlibrary SDDatasets {\r\n    struct Player {\r\n        address addr;   // player address\r\n        uint256 aff;    // affiliate vault,directly send\r\n        uint256 laff;   // parent id\r\n        uint256 planCount;\r\n        mapping(uint256=>PalyerPlan) plans;\r\n        uint256 aff1sum; //4 level\r\n        uint256 aff2sum;\r\n        uint256 aff3sum;\r\n        uint256 aff4sum;\r\n    }\r\n    \r\n    struct PalyerPlan {\r\n        uint256 planId;\r\n        uint256 startTime;\r\n        uint256 startBlock;\r\n        uint256 invested;    //\r\n        uint256 atBlock;    // \r\n        uint256 payEth;\r\n        bool isClose;\r\n    }\r\n\r\n    struct Plan {\r\n        uint256 interest;    // interest per day %%\r\n        uint256 dayRange;    // days, 0 means No time limit\r\n        uint256 min;\r\n        uint256 max;\r\n    }    \r\n}\r\n\r\ncontract MultiInvest {\r\n    using SafeMath              for *;\r\n\r\n    address public devAddr_ = address(0xe6CE2a354a0BF26B5b383015B7E61701F6adb39C);\r\n    address public commuAddr_ = address(0x08F521636a2B117B554d04dc9E54fa4061161859);\r\n    \r\n    //partner address\r\n    address public partnerAddr_ = address(0xEc31176d4df0509115abC8065A8a3F8275aafF2b);\r\n\r\n    bool public activated_ = false;\r\n    \r\n    uint256 ruleSum_ = 6;\r\n    modifier isActivated() {\r\n        require(activated_ == true, \"its not active yet.\"); \r\n        _;\r\n    }\r\n\r\n    function activate() isAdmin() public {\r\n        require(address(devAddr_) != address(0x0), \"Must setup devAddr_.\");\r\n        require(address(partnerAddr_) != address(0x0), \"Must setup partnerAddr_.\");\r\n        require(address(commuAddr_) != address(0x0), \"Must setup affiAddr_.\");\r\n\r\n        require(activated_ == false, \"Only once\");\r\n        activated_ = true ;\r\n\t}\r\n\t\r\n    mapping(address => uint256)     private g_users ;\r\n    function initUsers() private {\r\n        g_users[msg.sender] = 9 ;\r\n        \r\n        uint256 pId = G_NowUserId;\r\n        pIDxAddr_[msg.sender] = pId;\r\n        player_[pId].addr = msg.sender;\r\n    }\r\n    modifier isAdmin() {\r\n        uint256 role = g_users[msg.sender];\r\n        require((role==9), \"Must be admin.\");\r\n        _;\r\n    }\t\r\n\r\n    uint256 public G_NowUserId = 1000; //first user\r\n    uint256 public G_AllEth = 0;\r\n    uint256 G_DayBlocks = 5900;\r\n    \r\n    mapping (address => uint256) public pIDxAddr_;  \r\n    mapping (uint256 => SDDatasets.Player) public player_; \r\n    mapping (uint256 => SDDatasets.Plan) private plan_;   \r\n\t\r\n\tfunction GetIdByAddr(address addr) public \r\n\t    view returns(uint256)\r\n\t{\r\n\t    return pIDxAddr_[addr];\r\n\t}\r\n\t\r\n\r\n\tfunction GetPlayerByUid(uint256 uid) public \r\n\t    view returns(uint256,uint256,uint256,uint256,uint256,uint256,uint256)\r\n\t{\r\n\t    SDDatasets.Player storage player = player_[uid];\r\n\r\n\t    return\r\n\t    (\r\n\t        player.aff,\r\n\t        player.laff,\r\n\t        player.aff1sum,\r\n\t        player.aff2sum,\r\n\t        player.aff3sum,\r\n\t        player.aff4sum,\r\n\t        player.planCount\r\n\t    );\r\n\t}\r\n\t\r\n    function GetPlanByUid(uint256 uid) public \r\n\t    view returns(uint256[],uint256[],uint256[],uint256[],uint256[],bool[])\r\n\t{\r\n\t    uint256[] memory planIds = new  uint256[] (player_[uid].planCount);\r\n\t    uint256[] memory startBlocks = new  uint256[] (player_[uid].planCount);\r\n\t    uint256[] memory investeds = new  uint256[] (player_[uid].planCount);\r\n\t    uint256[] memory atBlocks = new  uint256[] (player_[uid].planCount);\r\n\t    uint256[] memory payEths = new  uint256[] (player_[uid].planCount);\r\n\t    bool[] memory isCloses = new  bool[] (player_[uid].planCount);\r\n\t    \r\n        for(uint i = 0; i < player_[uid].planCount; i++) {\r\n\t        planIds[i] = player_[uid].plans[i].planId;\r\n\t        startBlocks[i] = player_[uid].plans[i].startBlock;\r\n\t        investeds[i] = player_[uid].plans[i].invested;\r\n\t        atBlocks[i] = player_[uid].plans[i].atBlock;\r\n\t        payEths[i] = player_[uid].plans[i].payEth;\r\n\t        isCloses[i] = player_[uid].plans[i].isClose;\r\n\t    }\r\n\t    \r\n\t    return\r\n\t    (\r\n\t        planIds,\r\n\t        startBlocks,\r\n\t        investeds,\r\n\t        atBlocks,\r\n\t        payEths,\r\n\t        isCloses\r\n\t    );\r\n\t}\r\n\t\r\nfunction GetPlanTimeByUid(uint256 uid) public \r\n\t    view returns(uint256[])\r\n\t{\r\n\t    uint256[] memory startTimes = new  uint256[] (player_[uid].planCount);\r\n\r\n        for(uint i = 0; i < player_[uid].planCount; i++) {\r\n\t        startTimes[i] = player_[uid].plans[i].startTime;\r\n\t    }\r\n\t    \r\n\t    return\r\n\t    (\r\n\t        startTimes\r\n\t    );\r\n\t}\t\r\n\r\n    constructor() public {\r\n        plan_[1] = SDDatasets.Plan(530,40,1e16, 5e20);\r\n        plan_[2] = SDDatasets.Plan(560,30,1e18, 1e21);\r\n        plan_[3] = SDDatasets.Plan(660,20,2e18, 1e22);\r\n        plan_[4] = SDDatasets.Plan(760,15,5e18, 1e22);\r\n        plan_[5] = SDDatasets.Plan(850,12,1e19, 1e22);\r\n        plan_[6] = SDDatasets.Plan(300,0,1e16, 1e22);\r\n        \r\n        initUsers();\r\n    }\r\n\t\r\n\tfunction register_(address addr, uint256 _affCode) private{\r\n        G_NowUserId = G_NowUserId.add(1);\r\n        \r\n        address _addr = addr;\r\n        \r\n        pIDxAddr_[_addr] = G_NowUserId;\r\n\r\n        player_[G_NowUserId].addr = _addr;\r\n        player_[G_NowUserId].laff = _affCode;\r\n        player_[G_NowUserId].planCount = 0;\r\n        \r\n        uint256 _affID1 = _affCode;\r\n        uint256 _affID2 = player_[_affID1].laff;\r\n        uint256 _affID3 = player_[_affID2].laff;\r\n        uint256 _affID4 = player_[_affID3].laff;\r\n        \r\n        player_[_affID1].aff1sum = player_[_affID1].aff1sum.add(1);\r\n        player_[_affID2].aff2sum = player_[_affID2].aff2sum.add(1);\r\n        player_[_affID3].aff3sum = player_[_affID3].aff3sum.add(1);\r\n        player_[_affID4].aff4sum = player_[_affID4].aff4sum.add(1);\r\n\t}\r\n\t\r\n    \r\n    // this function called every time anyone sends a transaction to this contract\r\n    function () isActivated() external payable {\r\n        if (msg.value == 0) {\r\n            withdraw();\r\n        } else {\r\n            invest(1000, 1);\r\n        }\r\n    } \t\r\n    \r\n    function invest(uint256 _affCode, uint256 _planId) isActivated() public payable {\r\n\t    require(_planId >= 1 && _planId <= ruleSum_, \"_planId error\");\r\n        \r\n\t\t//get uid\r\n\t\tuint256 uid = pIDxAddr_[msg.sender];\r\n\t\t\r\n\t\t//first\r\n\t\tif (uid == 0) {\r\n\t\t    if (player_[_affCode].addr != address(0x0)) {\r\n\t\t        register_(msg.sender, _affCode);\r\n\t\t    } else {\r\n\t\t\t    register_(msg.sender, 1000);\r\n\t\t    }\r\n\t\t    \r\n\t\t\tuid = G_NowUserId;\r\n\t\t}\r\n\t\t\r\n\t    require(msg.value >= plan_[_planId].min && msg.value <= plan_[_planId].max, \"invest amount error, please set the exact amount\");\r\n\r\n        // record block number and invested amount (msg.value) of this transaction\r\n        uint256 planCount = player_[uid].planCount;\r\n        player_[uid].plans[planCount].planId = _planId;\r\n        player_[uid].plans[planCount].startTime = now;\r\n        player_[uid].plans[planCount].startBlock = block.number;\r\n        player_[uid].plans[planCount].atBlock = block.number;\r\n        player_[uid].plans[planCount].invested = msg.value;\r\n        player_[uid].plans[planCount].payEth = 0;\r\n        player_[uid].plans[planCount].isClose = false;\r\n        \r\n        player_[uid].planCount = player_[uid].planCount.add(1);\r\n\r\n        G_AllEth = G_AllEth.add(msg.value);\r\n        \r\n        if (msg.value > 1000000000) {\r\n            distributeRef(msg.value, player_[uid].laff);\r\n            \r\n            uint256 devFee = (msg.value.mul(2)).div(100);\r\n            devAddr_.transfer(devFee);\r\n            \r\n            uint256 partnerFee = (msg.value.mul(2)).div(100);\r\n            partnerAddr_.transfer(partnerFee);\r\n        } \r\n        \r\n    }\r\n   \r\n\t\r\n\tfunction withdraw() isActivated() public payable {\r\n\t    require(msg.value == 0, \"withdraw fee is 0 ether, please set the exact amount\");\r\n\t    \r\n\t    uint256 uid = pIDxAddr_[msg.sender];\r\n\t    require(uid != 0, \"no invest\");\r\n\r\n        for(uint i = 0; i < player_[uid].planCount; i++) {\r\n\t        if (player_[uid].plans[i].isClose) {\r\n\t            continue;\r\n\t        }\r\n\r\n            SDDatasets.Plan plan = plan_[player_[uid].plans[i].planId];\r\n            \r\n            uint256 blockNumber = block.number;\r\n            bool bClose = false;\r\n            if (plan.dayRange > 0) {\r\n                \r\n                uint256 endBlockNumber = player_[uid].plans[i].startBlock.add(plan.dayRange*G_DayBlocks);\r\n                if (blockNumber > endBlockNumber){\r\n                    blockNumber = endBlockNumber;\r\n                    bClose = true;\r\n                }\r\n            }\r\n            \r\n            uint256 amount = player_[uid].plans[i].invested * plan.interest / 10000 * (blockNumber - player_[uid].plans[i].atBlock) / G_DayBlocks;\r\n\r\n            // send calculated amount of ether directly to sender (aka YOU)\r\n            address sender = msg.sender;\r\n            sender.send(amount);\r\n\r\n            // record block number and invested amount (msg.value) of this transaction\r\n            player_[uid].plans[i].atBlock = block.number;\r\n            player_[uid].plans[i].isClose = bClose;\r\n            player_[uid].plans[i].payEth += amount;\r\n        }\r\n\t}\r\n\r\n\t\r\n    function distributeRef(uint256 _eth, uint256 _affID) private{\r\n        \r\n        uint256 _allaff = (_eth.mul(8)).div(100);\r\n        \r\n        uint256 _affID1 = _affID;\r\n        uint256 _affID2 = player_[_affID1].laff;\r\n        uint256 _affID3 = player_[_affID2].laff;\r\n        uint256 _aff = 0;\r\n\r\n        if (_affID1 != 0) {   \r\n            _aff = (_eth.mul(5)).div(100);\r\n            _allaff = _allaff.sub(_aff);\r\n            player_[_affID1].aff = _aff.add(player_[_affID1].aff);\r\n            player_[_affID1].addr.transfer(_aff);\r\n        }\r\n\r\n        if (_affID2 != 0) {   \r\n            _aff = (_eth.mul(2)).div(100);\r\n            _allaff = _allaff.sub(_aff);\r\n            player_[_affID2].aff = _aff.add(player_[_affID2].aff);\r\n            player_[_affID2].addr.transfer(_aff);\r\n        }\r\n\r\n        if (_affID3 != 0) {   \r\n            _aff = (_eth.mul(1)).div(100);\r\n            _allaff = _allaff.sub(_aff);\r\n            player_[_affID3].aff = _aff.add(player_[_affID3].aff);\r\n            player_[_affID3].addr.transfer(_aff);\r\n       }\r\n\r\n        if(_allaff > 0 ){\r\n            commuAddr_.transfer(_allaff);\r\n        }      \r\n    }\t\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commuAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"partnerAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GetIdByAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"G_NowUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"player_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"aff\",\"type\":\"uint256\"},{\"name\":\"laff\",\"type\":\"uint256\"},{\"name\":\"planCount\",\"type\":\"uint256\"},{\"name\":\"aff1sum\",\"type\":\"uint256\"},{\"name\":\"aff2sum\",\"type\":\"uint256\"},{\"name\":\"aff3sum\",\"type\":\"uint256\"},{\"name\":\"aff4sum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_planId\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"G_AllEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"GetPlayerByUid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"GetPlanTimeByUid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"uid\",\"type\":\"uint256\"}],\"name\":\"GetPlanByUid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"MultiInvest","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bc481a110c674f46ba8b8bbeda4d79db41f26c678c4bdb5cefb0f3eba4f00831"}]}