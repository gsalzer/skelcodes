{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract EMPresale {\r\n    \r\n    bool inMaintainance;\r\n    bool isRefundable;\r\n    \r\n    // Data -----------------------------\r\n    \r\n    struct Player {\r\n        uint32 id;  // if 0, then player don't exist\r\n        mapping(uint8 => uint8) bought;\r\n        uint256 weiSpent;\r\n        bool hasSpent;\r\n    }\r\n    \r\n    struct Sale {\r\n        uint8 bought;\r\n        uint8 maxBought;\r\n        uint32 cardTypeID;\r\n        uint256 price;\r\n        uint256 saleEndTime;\r\n        \r\n        bool isAirdrop;     // enables minting (+maxBought per hour until leftToMint==0)\r\n                            // + each player can only buy once\r\n                            // + is free\r\n        uint256 nextMintTime;\r\n        uint8 leftToMint;\r\n    }\r\n    \r\n    address admin;\r\n    address[] approverArr; // for display purpose only\r\n    mapping(address => bool) approvers;\r\n    \r\n    address[] playerAddrs;      // 0 index not used\r\n    uint32[] playerRefCounts;   // 0 index not used\r\n    \r\n    mapping(address => Player) players;\r\n    mapping(uint8 => Sale) sales;   // use from 1 onwards\r\n    uint256 refPrize;\r\n    \r\n    // CONSTRUCTOR =======================\r\n    \r\n    function EMPresale() public {\r\n        admin = msg.sender;\r\n        approverArr.push(admin);\r\n        approvers[admin] = true;\r\n        \r\n        playerAddrs.push(address(0));\r\n        playerRefCounts.push(0);\r\n    }\r\n    \r\n    // ADMIN FUNCTIONS =======================\r\n    \r\n    function setSaleType_Presale(uint8 saleID, uint8 maxBought, uint32 cardTypeID, uint256 price, uint256 saleEndTime) external onlyAdmin {\r\n        Sale storage sale = sales[saleID];\r\n        \r\n        // assign sale type\r\n        sale.bought = 0;\r\n        sale.maxBought = maxBought;\r\n        sale.cardTypeID = cardTypeID;\r\n        sale.price = price;\r\n        sale.saleEndTime = saleEndTime;\r\n        \r\n        // airdrop type\r\n        sale.isAirdrop = false;\r\n    }\r\n    \r\n    function setSaleType_Airdrop(uint8 saleID, uint8 maxBought, uint32 cardTypeID, uint8 leftToMint, uint256 firstMintTime) external onlyAdmin {\r\n        Sale storage sale = sales[saleID];\r\n        \r\n        // assign sale type\r\n        sale.bought = 0;\r\n        sale.maxBought = maxBought;\r\n        sale.cardTypeID = cardTypeID;\r\n        sale.price = 0;\r\n        sale.saleEndTime = 2000000000;\r\n        \r\n        // airdrop type\r\n        require(leftToMint >= maxBought);\r\n        sale.isAirdrop = true;\r\n        sale.nextMintTime = firstMintTime;\r\n        sale.leftToMint = leftToMint - maxBought;\r\n    }\r\n    \r\n    function stopSaleType(uint8 saleID) external onlyAdmin {\r\n        delete sales[saleID].saleEndTime;\r\n    }\r\n    \r\n    function redeemCards(address playerAddr, uint8 saleID) external onlyApprover returns(uint8) {\r\n        Player storage player = players[playerAddr];\r\n        uint8 owned = player.bought[saleID];\r\n        player.bought[saleID] = 0;\r\n        return owned;\r\n    }\r\n    \r\n    function setRefundable(bool refundable) external onlyAdmin {\r\n        isRefundable = refundable;\r\n    }\r\n    \r\n    function refund() external {\r\n        require(isRefundable);\r\n        Player storage player = players[msg.sender];\r\n        uint256 spent = player.weiSpent;\r\n        player.weiSpent = 0;\r\n        msg.sender.transfer(spent);\r\n    }\r\n    \r\n    // PLAYER FUNCTIONS ========================\r\n    \r\n    function buySaleNonReferral(uint8 saleID) external payable {\r\n        buySale(saleID, address(0));\r\n    }\r\n    \r\n    function buySaleReferred(uint8 saleID, address referral) external payable {\r\n        buySale(saleID, referral);\r\n    }\r\n    \r\n    function buySale(uint8 saleID, address referral) private {\r\n        \r\n        require(!inMaintainance);\r\n        require(msg.sender != address(0));\r\n        \r\n        // check that sale is still on\r\n        Sale storage sale = sales[saleID];\r\n        require(sale.saleEndTime > now);\r\n        \r\n        bool isAirdrop = sale.isAirdrop;\r\n        if(isAirdrop) {\r\n            // airdrop minting\r\n            if(now >= sale.nextMintTime) {  // hit a cycle\r\n            \r\n                sale.nextMintTime += ((now-sale.nextMintTime)/3600)*3600+3600;   // mint again next hour\r\n                if(sale.bought != 0) {\r\n                    uint8 leftToMint = sale.leftToMint;\r\n                    if(leftToMint < sale.bought) { // not enough to recover, set maximum left to be bought\r\n                        sale.maxBought = sale.maxBought + leftToMint - sale.bought;\r\n                        sale.leftToMint = 0;\r\n                    } else\r\n                        sale.leftToMint -= sale.bought;\r\n                    sale.bought = 0;\r\n                }\r\n            }\r\n        } else {\r\n            // check ether is paid\r\n            require(msg.value >= sale.price);\r\n        }\r\n\r\n        // check not all is bought\r\n        require(sale.bought < sale.maxBought);\r\n        sale.bought++;\r\n        \r\n        bool toRegisterPlayer = false;\r\n        bool toRegisterReferral = false;\r\n        \r\n        // register player if unregistered\r\n        Player storage player = players[msg.sender];\r\n        if(player.id == 0)\r\n            toRegisterPlayer = true;\r\n            \r\n        // cannot buy more than once if airdrop\r\n        if(isAirdrop)\r\n            require(player.bought[saleID] == 0);\r\n        \r\n        // give ownership\r\n        player.bought[saleID]++;\r\n        if(!isAirdrop)  // is free otherwise\r\n            player.weiSpent += msg.value;\r\n        \r\n        // if hasn't referred, add referral\r\n        if(!player.hasSpent) {\r\n            player.hasSpent = true;\r\n            if(referral != address(0) && referral != msg.sender) {\r\n                Player storage referredPlayer = players[referral];\r\n                if(referredPlayer.id == 0) {    // add referred player if unregistered\r\n                    toRegisterReferral = true;\r\n                } else {                        // if already registered, just up ref count\r\n                    playerRefCounts[referredPlayer.id]++;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // register player(s)\r\n        if(toRegisterPlayer && toRegisterReferral) {\r\n            uint256 length = (uint32)(playerAddrs.length);\r\n            player.id = (uint32)(length);\r\n            referredPlayer.id = (uint32)(length+1);\r\n            playerAddrs.length = length+2;\r\n            playerRefCounts.length = length+2;\r\n            playerAddrs[length] = msg.sender;\r\n            playerAddrs[length+1] = referral;\r\n            playerRefCounts[length+1] = 1;\r\n            \r\n        } else if(toRegisterPlayer) {\r\n            player.id = (uint32)(playerAddrs.length);\r\n            playerAddrs.push(msg.sender);\r\n            playerRefCounts.push(0);\r\n            \r\n        } else if(toRegisterReferral) {\r\n            referredPlayer.id = (uint32)(playerAddrs.length);\r\n            playerAddrs.push(referral);\r\n            playerRefCounts.push(1);\r\n        }\r\n        \r\n        // referral prize\r\n        refPrize += msg.value/40;    // 2.5% added to prize money\r\n    }\r\n    \r\n    function GetSaleInfo_Presale(uint8 saleID) external view returns (uint8, uint8, uint8, uint32, uint256, uint256) {\r\n        uint8 playerOwned = 0;\r\n        if(msg.sender != address(0))\r\n            playerOwned = players[msg.sender].bought[saleID];\r\n        \r\n        Sale storage sale = sales[saleID];\r\n        return (playerOwned, sale.bought, sale.maxBought, sale.cardTypeID, sale.price, sale.saleEndTime);\r\n    }\r\n    \r\n    function GetSaleInfo_Airdrop(uint8 saleID) external view returns (uint8, uint8, uint8, uint32, uint256, uint8) {\r\n        uint8 playerOwned = 0;\r\n        if(msg.sender != address(0))\r\n            playerOwned = players[msg.sender].bought[saleID];\r\n        \r\n        Sale storage sale = sales[saleID];\r\n        uint8 bought = sale.bought;\r\n        uint8 maxBought = sale.maxBought;\r\n        uint256 nextMintTime = sale.nextMintTime;\r\n        uint8 leftToMintResult = sale.leftToMint;\r\n    \r\n        // airdrop minting\r\n        if(now >= nextMintTime) {  // hit a cycle\r\n            nextMintTime += ((now-nextMintTime)/3600)*3600+3600;   // mint again next hour\r\n            if(bought != 0) {\r\n                uint8 leftToMint = leftToMintResult;\r\n                if(leftToMint < bought) { // not enough to recover, set maximum left to be bought\r\n                    maxBought = maxBought + leftToMint - bought;\r\n                    leftToMintResult = 0;\r\n                } else\r\n                    leftToMintResult -= bought;\r\n                bought = 0;\r\n            }\r\n        }\r\n        \r\n        return (playerOwned, bought, maxBought, sale.cardTypeID, nextMintTime, leftToMintResult);\r\n    }\r\n    \r\n    function GetReferralInfo() external view returns(uint256, uint32) {\r\n        uint32 refCount = 0;\r\n        uint32 id = players[msg.sender].id;\r\n        if(id != 0)\r\n            refCount = playerRefCounts[id];\r\n        return (refPrize, refCount);\r\n    }\r\n    \r\n    function GetPlayer_FromAddr(address playerAddr, uint8 saleID) external view returns(uint32, uint8, uint256, bool, uint32) {\r\n        Player storage player = players[playerAddr];\r\n        return (player.id, player.bought[saleID], player.weiSpent, player.hasSpent, playerRefCounts[player.id]);\r\n    }\r\n    \r\n    function GetPlayer_FromID(uint32 id, uint8 saleID) external view returns(address, uint8, uint256, bool, uint32) {\r\n        address playerAddr = playerAddrs[id];\r\n        Player storage player = players[playerAddr];\r\n        return (playerAddr, player.bought[saleID], player.weiSpent, player.hasSpent, playerRefCounts[id]);\r\n    }\r\n    \r\n    function getAddressesCount() external view returns(uint) {\r\n        return playerAddrs.length;\r\n    }\r\n    \r\n    function getAddresses() external view returns(address[]) {\r\n        return playerAddrs;\r\n    }\r\n    \r\n    function getAddress(uint256 id) external view returns(address) {\r\n        return playerAddrs[id];\r\n    }\r\n    \r\n    function getReferralCounts() external view returns(uint32[]) {\r\n        return playerRefCounts;\r\n    }\r\n    \r\n    function getReferralCount(uint256 playerID) external view returns(uint32) {\r\n        return playerRefCounts[playerID];\r\n    }\r\n    \r\n    function GetNow() external view returns (uint256) {\r\n        return now;\r\n    }\r\n\r\n    // PAYMENT FUNCTIONS =======================\r\n    \r\n    function getEtherBalance() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function depositEtherBalance() external payable {\r\n    }\r\n    \r\n    function withdrawEtherBalance(uint256 amt) external onlyAdmin {\r\n        admin.transfer(amt);\r\n    }\r\n    \r\n    // RIGHTS FUNCTIONS =======================\r\n    \r\n    function setMaintainance(bool maintaining) external onlyAdmin {\r\n        inMaintainance = maintaining;\r\n    }\r\n    \r\n    function isInMaintainance() external view returns(bool) {\r\n        return inMaintainance;\r\n    }\r\n    \r\n    function getApprovers() external view returns(address[]) {\r\n        return approverArr;\r\n    }\r\n    \r\n    // change admin\r\n    // only admin can perform this function\r\n    function switchAdmin(address newAdmin) external onlyAdmin {\r\n        admin = newAdmin;\r\n    }\r\n\r\n    // add a new approver\r\n    // only admin can perform this function\r\n    function addApprover(address newApprover) external onlyAdmin {\r\n        require(!approvers[newApprover]);\r\n        approvers[newApprover] = true;\r\n        approverArr.push(newApprover);\r\n    }\r\n\r\n    // remove an approver\r\n    // only admin can perform this function\r\n    function removeApprover(address oldApprover) external onlyAdmin {\r\n        require(approvers[oldApprover]);\r\n        delete approvers[oldApprover];\r\n        \r\n        // swap last address with deleted address (for array)\r\n        uint256 length = approverArr.length;\r\n        address swapAddr = approverArr[length - 1];\r\n        for(uint8 i=0; i<length; i++) {\r\n            if(approverArr[i] == oldApprover) {\r\n                approverArr[i] = swapAddr;\r\n                break;\r\n            }\r\n        }\r\n        approverArr.length--;\r\n    }\r\n    \r\n    // MODIFIERS =======================\r\n    \r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyApprover() {\r\n        require(approvers[msg.sender]);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"saleID\",\"type\":\"uint8\"},{\"name\":\"maxBought\",\"type\":\"uint8\"},{\"name\":\"cardTypeID\",\"type\":\"uint32\"},{\"name\":\"leftToMint\",\"type\":\"uint8\"},{\"name\":\"firstMintTime\",\"type\":\"uint256\"}],\"name\":\"setSaleType_Airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"playerAddr\",\"type\":\"address\"},{\"name\":\"saleID\",\"type\":\"uint8\"}],\"name\":\"redeemCards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint32\"},{\"name\":\"saleID\",\"type\":\"uint8\"}],\"name\":\"GetPlayer_FromID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEtherBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"refundable\",\"type\":\"bool\"}],\"name\":\"setRefundable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"saleID\",\"type\":\"uint8\"}],\"name\":\"GetSaleInfo_Presale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressesCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInMaintainance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"saleID\",\"type\":\"uint8\"}],\"name\":\"buySaleNonReferral\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"saleID\",\"type\":\"uint8\"}],\"name\":\"GetSaleInfo_Airdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"saleID\",\"type\":\"uint8\"},{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buySaleReferred\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getApprovers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldApprover\",\"type\":\"address\"}],\"name\":\"removeApprover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"switchAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"saleID\",\"type\":\"uint8\"}],\"name\":\"stopSaleType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetReferralInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerID\",\"type\":\"uint256\"}],\"name\":\"getReferralCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"withdrawEtherBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetNow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newApprover\",\"type\":\"address\"}],\"name\":\"addApprover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maintaining\",\"type\":\"bool\"}],\"name\":\"setMaintainance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEtherBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerAddr\",\"type\":\"address\"},{\"name\":\"saleID\",\"type\":\"uint8\"}],\"name\":\"GetPlayer_FromAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"saleID\",\"type\":\"uint8\"},{\"name\":\"maxBought\",\"type\":\"uint8\"},{\"name\":\"cardTypeID\",\"type\":\"uint32\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"saleEndTime\",\"type\":\"uint256\"}],\"name\":\"setSaleType_Presale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReferralCounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"EMPresale","CompilerVersion":"v0.4.21-nightly.2018.3.7+commit.bd7bc7c4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e0d5dee7f753720de3e5ba3d28531e6e4103f9cab4fcaa125bc19fc83dc21dee"}]}