{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract TokenRelay {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 constant Ilen = 5;\r\n    \r\n    struct Interval {\r\n        uint256 start;\r\n        address contractAddr;\r\n        uint256[Ilen] tick;\r\n        uint256[Ilen] fee; // for example, 100 means 100%\r\n    }\r\n    \r\n    mapping (address => uint256) private balances;\r\n    mapping (address => Interval) private position;\r\n    address private feeOwner;\r\n    \r\n    event Deposit(address _tokenAddr, address _beneficary, uint256 _amount);\r\n    event Redeem(address _addr, uint256 _amount, uint256 _fee);\r\n    \r\n    constructor() public {\r\n        feeOwner = msg.sender;\r\n    }\r\n    \r\n    function tokenStorage(\r\n        address _tokenAddr,\r\n        address _beneficary,\r\n        uint256 _amount,\r\n        uint256[Ilen] _tick,\r\n        uint256[Ilen] _fee\r\n    ) public {\r\n        require(balances[_beneficary] <= 0, \"Require balance of this address is zero.\");\r\n        balances[_beneficary] = 0;\r\n        ERC20Token erc20 = ERC20Token(_tokenAddr);\r\n        if (erc20.transferFrom(msg.sender, address(this), _amount) == true) {\r\n            balances[_beneficary] = _amount;\r\n            position[_beneficary] = Interval(block.timestamp, _tokenAddr, _tick, _fee);\r\n        }\r\n        emit Deposit(_tokenAddr, _beneficary, _amount);\r\n    }\r\n    \r\n    function redeem(uint256 _amount) public {\r\n        require(_amount > 0, \"You should give a number more than zero!\");\r\n        require(balances[msg.sender] > _amount, \"You don't have enough balance to redeem!\");\r\n        \r\n        uint256 feeRatio = getRedeemFee(msg.sender);\r\n        uint256 total = _amount;\r\n        balances[msg.sender] =  balances[msg.sender].sub(_amount);\r\n        uint256 fee = total.mul(feeRatio).div(100);\r\n        uint256 left = total.sub(fee);\r\n        \r\n        ERC20Token erc20 = ERC20Token(position[msg.sender].contractAddr);\r\n        if (erc20.transfer(msg.sender, left) == true) {\r\n            balances[feeOwner].add(fee);\r\n        }\r\n        emit Redeem(msg.sender, left, fee);\r\n    }\r\n    \r\n    /* internal function */\r\n    function getRedeemFee(address _addr) internal view returns(uint256) {\r\n        for (uint i = 0; i < Ilen; i++) {\r\n            if (block.timestamp <= position[_addr].tick[i]) {\r\n                return position[_addr].fee[i];\r\n            }\r\n        }\r\n        return position[_addr].fee[4];\r\n    }\r\n\r\n    /* readonly */\r\n    function balanceOf(address _addr) public view returns(uint256) {\r\n        return balances[_addr];\r\n    }\r\n    \r\n    function redeemFee(address _addr) public view returns(uint256 feeInRatio) {\r\n        return getRedeemFee(_addr);\r\n    }\r\n    \r\n    function redeemInterval(address _addr) public view returns(uint256 start, uint256[5] tick, uint256[5] fee) {\r\n        start = position[_addr].start;\r\n        tick = position[_addr].tick;\r\n        fee = position[_addr].fee;\r\n    }\r\n    \r\n}\r\n\r\ninterface ERC20Token {\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"redeemInterval\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"tick\",\"type\":\"uint256[5]\"},{\"name\":\"fee\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_beneficary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tick\",\"type\":\"uint256[5]\"},{\"name\":\"_fee\",\"type\":\"uint256[5]\"}],\"name\":\"tokenStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"redeemFee\",\"outputs\":[{\"name\":\"feeInRatio\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_beneficary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"}]","ContractName":"TokenRelay","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://baed039131d4d3aa33f6c95eb18497a17147fd64e7d6b2c202687afa461adc9c"}]}