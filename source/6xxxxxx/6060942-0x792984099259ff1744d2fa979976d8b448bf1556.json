{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    hasMintPermission\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Pausable token\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n\r\ncontract LittlePhilCoin is MintableToken, PausableToken {\r\n    string public name = \"Little Phil Coin\";\r\n    string public symbol = \"LPC\";\r\n    uint8 public decimals = 18;\r\n\r\n    constructor () public {\r\n        // Pause token on creation and only unpause after ICO\r\n        pause();\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropiate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20;\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // How many token units a buyer gets per wei.\r\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\r\n  // 1 wei will give you 1 unit, or 0.001 TOK.\r\n  uint256 public rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @param _rate Number of token units a buyer gets per wei\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   * @param _token Address of the token being sold\r\n   */\r\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = _token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(_beneficiary, tokens);\r\n    emit TokenPurchase(\r\n      msg.sender,\r\n      _beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n    _forwardFunds();\r\n    _postValidatePurchase(_beneficiary, weiAmount);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    token.safeTransfer(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    return _weiAmount.mul(rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title MintedCrowdsale\r\n * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\r\n * Token ownership should be transferred to MintedCrowdsale for minting.\r\n */\r\ncontract MintedCrowdsale is Crowdsale {\r\n\r\n  /**\r\n   * @dev Overrides delivery by minting tokens upon purchase.\r\n   * @param _beneficiary Token purchaser\r\n   * @param _tokenAmount Number of tokens to be minted\r\n   */\r\n  function _deliverTokens(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title CappedCrowdsale\r\n * @dev Crowdsale with a limit for total contributions.\r\n */\r\ncontract CappedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public cap;\r\n\r\n  /**\r\n   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\r\n   * @param _cap Max amount of wei to be contributed\r\n   */\r\n  constructor(uint256 _cap) public {\r\n    require(_cap > 0);\r\n    cap = _cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the cap has been reached.\r\n   * @return Whether the cap was reached\r\n   */\r\n  function capReached() public view returns (bool) {\r\n    return weiRaised >= cap;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring purchase to respect the funding cap.\r\n   * @param _beneficiary Token purchaser\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    require(weiRaised.add(_weiAmount) <= cap);\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title TokenCappedCrowdsale\r\n * @dev Crowdsale with a limit for total minted tokens.\r\n */\r\ncontract TokenCappedCrowdsale is Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public tokenCap = 0;\r\n\r\n    // Amount of LPC raised\r\n    uint256 public tokensRaised = 0;\r\n\r\n    // Event for manual refund of cap overflow\r\n    event CapOverflow(address sender, uint256 weiAmount, uint256 receivedTokens);\r\n\r\n    /**\r\n     * @notice Checks whether the tokenCap has been reached.\r\n     * @return Whether the tokenCap was reached\r\n     */\r\n    function capReached() public view returns (bool) {\r\n        return tokensRaised >= tokenCap;\r\n    }\r\n\r\n    /**\r\n     * @notice Update the amount of tokens raised & emit cap overflow events.\r\n     */\r\n    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n        super._updatePurchasingState(_beneficiary, _weiAmount);\r\n        uint256 purchasedTokens = _getTokenAmount(_weiAmount);\r\n        tokensRaised = tokensRaised.add(purchasedTokens);\r\n\r\n        if (capReached()) {\r\n            // manual process unused eth amount to sender\r\n            emit CapOverflow(_beneficiary, _weiAmount, purchasedTokens);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Tiered Crowdsale\r\n * @dev Extension of Crowdsale contract that decreases the number of LPC tokens purchases dependent on the current number of tokens sold.\r\n */\r\ncontract TieredCrowdsale is TokenCappedCrowdsale, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    SalesState enum for use in state machine to manage sales rates\r\n    */\r\n    enum SaleState { \r\n        Initial,              // All contract initialization calls\r\n        PrivateSale,          // Private sale for industy and closed group investors\r\n        FinalisedPrivateSale, // Close private sale\r\n        PreSale,              // Pre sale ICO (40% bonus LPC hard-capped at 180 million tokens)\r\n        FinalisedPreSale,     // Close presale\r\n        PublicSaleTier1,      // Tier 1 ICO public sale (30% bonus LPC capped at 85 million tokens)\r\n        PublicSaleTier2,      // Tier 2 ICO public sale (20% bonus LPC capped at 65 million tokens)\r\n        PublicSaleTier3,      // Tier 3 ICO public sale (10% bonus LPC capped at 45 million tokens)\r\n        PublicSaleTier4,      // Tier 4 ICO public sale (standard rate capped at 25 million tokens)\r\n        FinalisedPublicSale,  // Close public sale\r\n        Closed                // ICO has finished, all tokens must have been claimed\r\n    }\r\n    SaleState public state = SaleState.Initial;\r\n\r\n    struct TierConfig {\r\n        string stateName;\r\n        uint256 tierRatePercentage;\r\n        uint256 hardCap;\r\n    }\r\n\r\n    mapping(bytes32 => TierConfig) private tierConfigs;\r\n\r\n    // Event for manual refund of cap overflow\r\n    event IncrementTieredState(string stateName);\r\n\r\n    /**\r\n     * @notice Checks the state when validating a purchase\r\n     */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n        require(\r\n            state == SaleState.PrivateSale ||\r\n            state == SaleState.PreSale ||\r\n            state == SaleState.PublicSaleTier1 ||\r\n            state == SaleState.PublicSaleTier2 ||\r\n            state == SaleState.PublicSaleTier3 ||\r\n            state == SaleState.PublicSaleTier4\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @dev Caveat emptor: this base contract is intended for inheritance by the Little Phil crowdsale only\r\n     */\r\n    constructor() public {\r\n        // setup the map of bonus-rates for each SaleState tier\r\n        createSalesTierConfigMap();\r\n    }\r\n\r\n    /**\r\n     * @dev Overrides parent method taking into account variable rate (as a percentage).\r\n     * @param _weiAmount The value in wei to be converted into tokens\r\n     * @return The number of tokens _weiAmount wei will buy at present time.\r\n     */\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        uint256 currentTierRate = getCurrentTierRatePercentage();\r\n\r\n        uint256 requestedTokenAmount = _weiAmount.mul(rate).mul(currentTierRate).div(100);\r\n\r\n        uint256 remainingTokens = tokenCap.sub(tokensRaised);\r\n\r\n        // Return number of LPC to provide\r\n        if (requestedTokenAmount > remainingTokens) {\r\n            return remainingTokens;\r\n        }\r\n\r\n        return requestedTokenAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Setup the map of bonus-rates (as a percentage) and total hardCap for each SaleState tier\r\n     * to be called by the constructor.\r\n     */\r\n    function createSalesTierConfigMap() private {\r\n\r\n        tierConfigs [keccak256(SaleState.Initial)] = TierConfig({\r\n            stateName: \"Initial\",\r\n            tierRatePercentage: 0,\r\n            hardCap: 0\r\n        });\r\n        tierConfigs [keccak256(SaleState.PrivateSale)] = TierConfig({\r\n            stateName: \"PrivateSale\",\r\n            tierRatePercentage: 100,\r\n            hardCap: SafeMath.mul(400000000, (10 ** 18))\r\n        });\r\n        tierConfigs [keccak256(SaleState.FinalisedPrivateSale)] = TierConfig({\r\n            stateName: \"FinalisedPrivateSale\",\r\n            tierRatePercentage: 0,\r\n            hardCap: 0\r\n        });\r\n        tierConfigs [keccak256(SaleState.PreSale)] = TierConfig({\r\n            stateName: \"PreSale\",\r\n            tierRatePercentage: 140,\r\n            hardCap: SafeMath.mul(180000000, (10 ** 18))\r\n        });\r\n        tierConfigs [keccak256(SaleState.FinalisedPreSale)] = TierConfig({\r\n            stateName: \"FinalisedPreSale\",\r\n            tierRatePercentage: 0,\r\n            hardCap: 0\r\n        });\r\n        tierConfigs [keccak256(SaleState.PublicSaleTier1)] = TierConfig({\r\n            stateName: \"PublicSaleTier1\",\r\n            tierRatePercentage: 130,\r\n            hardCap: SafeMath.mul(265000000, (10 ** 18))\r\n        });\r\n        tierConfigs [keccak256(SaleState.PublicSaleTier2)] = TierConfig({\r\n            stateName: \"PublicSaleTier2\",\r\n            tierRatePercentage: 120,\r\n            hardCap: SafeMath.mul(330000000, (10 ** 18))\r\n        });\r\n        tierConfigs [keccak256(SaleState.PublicSaleTier3)] = TierConfig({\r\n            stateName: \"PublicSaleTier3\",\r\n            tierRatePercentage: 110,\r\n            hardCap: SafeMath.mul(375000000, (10 ** 18))\r\n        });\r\n        tierConfigs [keccak256(SaleState.PublicSaleTier4)] = TierConfig({\r\n            stateName: \"PublicSaleTier4\",\r\n            tierRatePercentage: 100,\r\n            hardCap: SafeMath.mul(400000000, (10 ** 18))\r\n        });\r\n        tierConfigs [keccak256(SaleState.FinalisedPublicSale)] = TierConfig({\r\n            stateName: \"FinalisedPublicSale\",\r\n            tierRatePercentage: 0,\r\n            hardCap: 0\r\n        });\r\n        tierConfigs [keccak256(SaleState.Closed)] = TierConfig({\r\n            stateName: \"Closed\",\r\n            tierRatePercentage: 0,\r\n            hardCap: SafeMath.mul(400000000, (10 ** 18))\r\n        });\r\n        \r\n\r\n    }\r\n\r\n    /**\r\n     * @dev get the current bonus-rate for the current SaleState\r\n     * @return the current rate as a percentage (e.g. 140 = 140% bonus)\r\n     */\r\n    function getCurrentTierRatePercentage() public view returns (uint256) {\r\n        return tierConfigs[keccak256(state)].tierRatePercentage;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current hardCap for the current SaleState\r\n     * @return The current hardCap\r\n     */\r\n    function getCurrentTierHardcap() public view returns (uint256) {\r\n        return tierConfigs[keccak256(state)].hardCap;\r\n    }\r\n\r\n    /**\r\n     * @dev Only allow the owner to set the state.\r\n     */\r\n    function setState(uint256 _state) onlyOwner public {\r\n        state = SaleState(_state);\r\n\r\n        // Update cap when state changes\r\n        tokenCap = getCurrentTierHardcap();\r\n\r\n        if (state == SaleState.Closed) {\r\n            crowdsaleClosed();\r\n        }\r\n    }\r\n\r\n    function getState() public view returns (string) {\r\n        return tierConfigs[keccak256(state)].stateName;\r\n    }\r\n\r\n    /**\r\n     * @dev Change the bonus tier after a purchase.\r\n     */\r\n    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\r\n        super._updatePurchasingState(_beneficiary, _weiAmount);\r\n\r\n        if (capReached()) {\r\n            if (state == SaleState.PrivateSale) {\r\n                state = SaleState.FinalisedPrivateSale;\r\n            }\r\n            else if (state == SaleState.PreSale) {\r\n                state = SaleState.FinalisedPreSale;\r\n            }\r\n            else if (state == SaleState.PublicSaleTier1) {\r\n                state = SaleState.PublicSaleTier2;\r\n            }\r\n            else if (state == SaleState.PublicSaleTier2) {\r\n                state = SaleState.PublicSaleTier3;\r\n            }\r\n            else if (state == SaleState.PublicSaleTier3) {\r\n                state = SaleState.PublicSaleTier4;\r\n            }\r\n            else if (state == SaleState.PublicSaleTier4) {\r\n                state = SaleState.FinalisedPublicSale;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            tokenCap = getCurrentTierHardcap();\r\n            emit IncrementTieredState(getState());\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Override for extensions that require an internal notification when the crowdsale has closed\r\n     */\r\n    function crowdsaleClosed() internal {\r\n        // optional override\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  // ERC20 basic token contract being held\r\n  ERC20Basic public token;\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  // timestamp when token release is enabled\r\n  uint256 public releaseTime;\r\n\r\n  constructor(\r\n    ERC20Basic _token,\r\n    address _beneficiary,\r\n    uint256 _releaseTime\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(_releaseTime > block.timestamp);\r\n    token = _token;\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers tokens held by timelock to beneficiary.\r\n   */\r\n  function release() public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= releaseTime);\r\n\r\n    uint256 amount = token.balanceOf(this);\r\n    require(amount > 0);\r\n\r\n    token.safeTransfer(beneficiary, amount);\r\n  }\r\n}\r\n\r\ncontract InitialSupplyCrowdsale is Crowdsale, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant decimals = 18;\r\n\r\n    // Wallet properties\r\n    address public companyWallet;\r\n    address public teamWallet;\r\n    address public projectWallet;\r\n    address public advisorWallet;\r\n    address public bountyWallet;\r\n    address public airdropWallet;\r\n\r\n    // Team locked tokens\r\n    TokenTimelock public teamTimeLock1;\r\n    TokenTimelock public teamTimeLock2;\r\n\r\n    // Reserved tokens\r\n    uint256 public constant companyTokens    = SafeMath.mul(150000000, (10 ** decimals));\r\n    uint256 public constant teamTokens       = SafeMath.mul(150000000, (10 ** decimals));\r\n    uint256 public constant projectTokens    = SafeMath.mul(150000000, (10 ** decimals));\r\n    uint256 public constant advisorTokens    = SafeMath.mul(100000000, (10 ** decimals));\r\n    uint256 public constant bountyTokens     = SafeMath.mul(30000000, (10 ** decimals));\r\n    uint256 public constant airdropTokens    = SafeMath.mul(20000000, (10 ** decimals));\r\n\r\n    bool private isInitialised = false;\r\n\r\n    constructor(\r\n        address[6] _wallets\r\n    ) public {\r\n        address _companyWallet  = _wallets[0];\r\n        address _teamWallet     = _wallets[1];\r\n        address _projectWallet  = _wallets[2];\r\n        address _advisorWallet  = _wallets[3];\r\n        address _bountyWallet   = _wallets[4];\r\n        address _airdropWallet  = _wallets[5];\r\n\r\n        require(_companyWallet != address(0));\r\n        require(_teamWallet != address(0));\r\n        require(_projectWallet != address(0));\r\n        require(_advisorWallet != address(0));\r\n        require(_bountyWallet != address(0));\r\n        require(_airdropWallet != address(0));\r\n\r\n        // Set reserved wallets\r\n        companyWallet = _companyWallet;\r\n        teamWallet = _teamWallet;\r\n        projectWallet = _projectWallet;\r\n        advisorWallet = _advisorWallet;\r\n        bountyWallet = _bountyWallet;\r\n        airdropWallet = _airdropWallet;\r\n\r\n        // Lock team tokens in wallet over time periods\r\n        teamTimeLock1 = new TokenTimelock(token, teamWallet, uint64(now + 182 days));\r\n        teamTimeLock2 = new TokenTimelock(token, teamWallet, uint64(now + 365 days));\r\n    }\r\n\r\n    /**\r\n     * Function: Distribute initial token supply\r\n     */\r\n    function setupInitialSupply() internal onlyOwner {\r\n        require(isInitialised == false);\r\n        uint256 teamTokensSplit = teamTokens.mul(50).div(100);\r\n\r\n        // Distribute tokens to reserved wallets\r\n        LittlePhilCoin(token).mint(companyWallet, companyTokens);\r\n        LittlePhilCoin(token).mint(projectWallet, projectTokens);\r\n        LittlePhilCoin(token).mint(advisorWallet, advisorTokens);\r\n        LittlePhilCoin(token).mint(bountyWallet, bountyTokens);\r\n        LittlePhilCoin(token).mint(airdropWallet, airdropTokens);\r\n        LittlePhilCoin(token).mint(address(teamTimeLock1), teamTokensSplit);\r\n        LittlePhilCoin(token).mint(address(teamTimeLock2), teamTokensSplit);\r\n\r\n        isInitialised = true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TokenVesting is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  event Released(uint256 amount);\r\n  event Revoked();\r\n\r\n  // beneficiary of tokens after they are released\r\n  address public beneficiary;\r\n\r\n  uint256 public cliff;\r\n  uint256 public start;\r\n  uint256 public duration;\r\n\r\n  bool public revocable;\r\n\r\n  mapping (address => uint256) public released;\r\n  mapping (address => bool) public revoked;\r\n\r\n  /**\r\n   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\r\n   * of the balance will have vested.\r\n   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\r\n   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\r\n   * @param _start the time (as Unix time) at which point vesting starts \r\n   * @param _duration duration in seconds of the period in which the tokens will vest\r\n   * @param _revocable whether the vesting is revocable or not\r\n   */\r\n  constructor(\r\n    address _beneficiary,\r\n    uint256 _start,\r\n    uint256 _cliff,\r\n    uint256 _duration,\r\n    bool _revocable\r\n  )\r\n    public\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(_cliff <= _duration);\r\n\r\n    beneficiary = _beneficiary;\r\n    revocable = _revocable;\r\n    duration = _duration;\r\n    cliff = _start.add(_cliff);\r\n    start = _start;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(ERC20Basic token) public {\r\n    uint256 unreleased = releasableAmount(token);\r\n\r\n    require(unreleased > 0);\r\n\r\n    released[token] = released[token].add(unreleased);\r\n\r\n    token.safeTransfer(beneficiary, unreleased);\r\n\r\n    emit Released(unreleased);\r\n  }\r\n\r\n  /**\r\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n   * remain in the contract, the rest are returned to the owner.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function revoke(ERC20Basic token) public onlyOwner {\r\n    require(revocable);\r\n    require(!revoked[token]);\r\n\r\n    uint256 balance = token.balanceOf(this);\r\n\r\n    uint256 unreleased = releasableAmount(token);\r\n    uint256 refund = balance.sub(unreleased);\r\n\r\n    revoked[token] = true;\r\n\r\n    token.safeTransfer(owner, refund);\r\n\r\n    emit Revoked();\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested but hasn't been released yet.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function releasableAmount(ERC20Basic token) public view returns (uint256) {\r\n    return vestedAmount(token).sub(released[token]);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the amount that has already vested.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function vestedAmount(ERC20Basic token) public view returns (uint256) {\r\n    uint256 currentBalance = token.balanceOf(this);\r\n    uint256 totalBalance = currentBalance.add(released[token]);\r\n\r\n    if (block.timestamp < cliff) {\r\n      return 0;\r\n    } else if (block.timestamp >= start.add(duration) || revoked[token]) {\r\n      return totalBalance;\r\n    } else {\r\n      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract TokenVestingCrowdsale is Crowdsale, Ownable {\r\n\r\n    function addBeneficiaryVestor(\r\n            address beneficiaryWallet, \r\n            uint256 tokenAmount, \r\n            uint256 vestingEpocStart, \r\n            uint256 cliffInSeconds, \r\n            uint256 vestingEpocEnd\r\n        ) external onlyOwner {\r\n        TokenVesting newVault = new TokenVesting(\r\n            beneficiaryWallet, \r\n            vestingEpocStart, \r\n            cliffInSeconds, \r\n            vestingEpocEnd, \r\n            false\r\n        );\r\n        LittlePhilCoin(token).mint(address(newVault), tokenAmount);\r\n    }\r\n\r\n    function releaseVestingTokens(address vaultAddress) external onlyOwner {\r\n        TokenVesting(vaultAddress).release(token);\r\n    }\r\n\r\n}\r\n\r\n\r\n \r\n \r\n\r\ncontract WhitelistedCrowdsale is Crowdsale, Ownable {\r\n\r\n    address public whitelister;\r\n    mapping(address => bool) public whitelist;\r\n\r\n    constructor(address _whitelister) public {\r\n        require(_whitelister != address(0));\r\n        whitelister = _whitelister;\r\n    }\r\n\r\n    modifier isWhitelisted(address _beneficiary) {\r\n        require(whitelist[_beneficiary]);\r\n        _;\r\n    }\r\n\r\n    function addToWhitelist(address _beneficiary) public onlyOwnerOrWhitelister {\r\n        whitelist[_beneficiary] = true;\r\n    }\r\n\r\n    function addManyToWhitelist(address[] _beneficiaries) public onlyOwnerOrWhitelister {\r\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n            whitelist[_beneficiaries[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeFromWhitelist(address _beneficiary) public onlyOwnerOrWhitelister {\r\n        whitelist[_beneficiary] = false;\r\n    }\r\n\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    }\r\n\r\n    modifier onlyOwnerOrWhitelister() {\r\n        require(msg.sender == owner || msg.sender == whitelister);\r\n        _;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Little Phil Crowdsale\r\n */\r\ncontract LittlePhilCrowdsale is MintedCrowdsale, TieredCrowdsale, InitialSupplyCrowdsale, TokenVestingCrowdsale, WhitelistedCrowdsale {\r\n\r\n    /**\r\n     * @notice Event for rate-change logging\r\n     * @param rate the new ETH-to_LPC exchange rate\r\n     */\r\n    event NewRate(uint256 rate);\r\n\r\n    /**\r\n     * @notice Constructor\r\n     */\r\n    constructor(\r\n        uint256 _rate,\r\n        address _fundsWallet,\r\n        address[6] _wallets,\r\n        LittlePhilCoin _token,\r\n        address _whitelister\r\n    ) public\r\n    Crowdsale(_rate, _fundsWallet, _token)\r\n    InitialSupplyCrowdsale(_wallets) \r\n    WhitelistedCrowdsale(_whitelister){}\r\n\r\n    /**\r\n     * @notice Sets up the initial balances\r\n     * @dev This must be called after ownership of the token is transferred to the crowdsale\r\n     */\r\n    function setupInitialState() external onlyOwner {\r\n        setupInitialSupply();\r\n    }\r\n\r\n    /**\r\n     * @notice Ownership management\r\n     */\r\n    function transferTokenOwnership(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0));\r\n        // I assume the crowdsale contract holds a reference to the token contract.\r\n        LittlePhilCoin(token).transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice Crowdsale Closed\r\n     * @dev Called at the end of the crowdsale when it is ended\r\n     */\r\n    function crowdsaleClosed() internal {\r\n        uint256 remainingTokens = tokenCap.sub(tokensRaised);\r\n        _deliverTokens(airdropWallet, remainingTokens);\r\n        LittlePhilCoin(token).finishMinting();\r\n    }\r\n\r\n    /**\r\n     * @notice Checks the state when validating a purchase\r\n     */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n        require(_weiAmount >= 500000000000000000);\r\n    }\r\n\r\n    /**\r\n     * @notice Update the ETH-to-LPC exchange rate\r\n     * @param _rate The Rate that will applied to ETH to derive how many LPC to mint\r\n     * does not affect, nor influenced by the bonus rates based on the current tier.\r\n     */\r\n    function setRate(uint256 _rate) public onlyOwner {\r\n        require(_rate > 0);\r\n        rate = _rate;\r\n        emit NewRate(rate);\r\n    }\r\n\r\n     /**\r\n      * @notice Mint for Private Fiat Transactions\r\n      * @dev Allows for minting from owner account\r\n      */\r\n    function mintForPrivateFiat(address _beneficiary, uint256 _weiAmount) public onlyOwner {\r\n        _preValidatePurchase(_beneficiary, _weiAmount);\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = _getTokenAmount(_weiAmount);\r\n\r\n        // update state\r\n        weiRaised = weiRaised.add(_weiAmount);\r\n\r\n        _processPurchase(_beneficiary, tokens);\r\n        emit TokenPurchase(\r\n            msg.sender,\r\n            _beneficiary,\r\n            _weiAmount,\r\n            tokens\r\n        );\r\n\r\n        _updatePurchasingState(_beneficiary, _weiAmount);\r\n\r\n        _forwardFunds();\r\n        _postValidatePurchase(_beneficiary, _weiAmount);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"projectTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelister\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"capReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaryWallet\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"vestingEpocStart\",\"type\":\"uint256\"},{\"name\":\"cliffInSeconds\",\"type\":\"uint256\"},{\"name\":\"vestingEpocEnd\",\"type\":\"uint256\"}],\"name\":\"addBeneficiaryVestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setupInitialState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTierRatePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTimeLock1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"companyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTierHardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_state\",\"type\":\"uint256\"}],\"name\":\"setState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTimeLock2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"mintForPrivateFiat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"releaseVestingTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_fundsWallet\",\"type\":\"address\"},{\"name\":\"_wallets\",\"type\":\"address[6]\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_whitelister\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"NewRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"stateName\",\"type\":\"string\"}],\"name\":\"IncrementTieredState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receivedTokens\",\"type\":\"uint256\"}],\"name\":\"CapOverflow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"LittlePhilCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000de6da772e05fa12f6f0d205d51d407546b44dca80000000000000000000000006c3e0244b11830635cf1f7f00ea22cc64eed5ef5000000000000000000000000dfd882275fc3492f57be7126be4b4e0e3a145180000000000000000000000000d3c913ba8db2a7fb544cf636bba7879d029d77fc0000000000000000000000005ac6c84ae42319a48c42bc2a1704859dbcabede600000000000000000000000035d30e3836d631789d8112f9c9d83d9001cbf1e2000000000000000000000000ebbd0ad140260f6b915a46f2a9eeaa308b54968e000000000000000000000000808508acb3f5f9aef7950375bedb8f001cccab770000000000000000000000003e18290de4fc1bec45c5bb6db3a94fb7d9cfde57","Library":"","SwarmSource":"bzzr://34c40ab8448ed68c0e0c71d0a034f9ab51479eae8b31316997d0738b5fa79435"}]}