{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract FlyToTheMoonEvents {\r\n\r\n    // buy keys during first stage\r\n    event onFirStage\r\n    (\r\n        address indexed player,\r\n        uint256 indexed rndNo,\r\n        uint256 keys,\r\n        uint256 eth,\r\n        uint256 timeStamp  \r\n    );\r\n\r\n    // become leader during second stage\r\n    event onSecStage\r\n    (\r\n        address indexed player,\r\n        uint256 indexed rndNo,\r\n        uint256 eth,\r\n        uint256 timeStamp  \r\n    );\r\n\r\n    // player withdraw\r\n    event onWithdraw\r\n    (\r\n        address indexed player,\r\n        uint256 indexed rndNo,\r\n        uint256 eth,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    // award\r\n    event onAward\r\n    (\r\n        address indexed player,\r\n        uint256 indexed rndNo,\r\n        uint256 eth,\r\n        uint256 timeStamp\r\n    );\r\n}\r\n\r\ncontract FlyToTheMoon is FlyToTheMoonEvents {\r\n    using SafeMath for *;\r\n    using KeysCalc for uint256;\r\n\r\n    struct Round {\r\n        uint256 eth;        // total eth\r\n        uint256 keys;       // total keys\r\n        uint256 startTime;  // end time\r\n        uint256 endTime;    // end time\r\n        address leader;     // leader\r\n        uint256 lastPrice;  // The latest price for the second stage\r\n        bool award;         // has been accept\r\n    }\r\n\r\n    struct PlayerRound {\r\n        uint256 eth;        // eth player has added to round\r\n        uint256 keys;       // keys\r\n        uint256 withdraw;   // how many eth has been withdraw\r\n    }\r\n\r\n    uint256 public rndNo = 1;                                   // current round number\r\n    uint256 public totalEth = 0;                                // total eth in all round\r\n\r\n    uint256 constant private rndFirStage_ = 12 hours;           // round timer at first stage\r\n    uint256 constant private rndSecStage_ = 12 hours;           // round timer at second stage\r\n\r\n    mapping (uint256 => Round) public round_m;                  // (rndNo => Round)\r\n    mapping (uint256 => mapping (address => PlayerRound)) public playerRound_m;   // (rndNo => addr => PlayerRound)\r\n\r\n    address public owner;               // owner address\r\n    uint256 public ownerWithdraw = 0;   // how many eth has been withdraw by owner\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        round_m[1].startTime = now;\r\n        round_m[1].endTime = now + rndFirStage_;\r\n\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev prevents contracts from interacting\r\n     */\r\n    modifier onlyHuman() \r\n    {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev sets boundaries for incoming tx \r\n     */\r\n    modifier isWithinLimits(uint256 _eth) \r\n    {\r\n        require(_eth >= 1000000000, \"pocket lint: not a valid currency\");\r\n        require(_eth <= 100000000000000000000000, \"no vitalik, no\");\r\n        _;    \r\n    }\r\n\r\n    /**\r\n     * @dev only owner\r\n     */\r\n    modifier onlyOwner() \r\n    {\r\n        require(owner == msg.sender, \"only owner can do it\");\r\n        _;    \r\n    }\r\n\r\n    /**\r\n     * @dev play\r\n     */\r\n    function()\r\n        onlyHuman()\r\n        isWithinLimits(msg.value)\r\n        public\r\n        payable\r\n    {\r\n        uint256 _eth = msg.value;\r\n        uint256 _now = now;\r\n        uint256 _rndNo = rndNo;\r\n        uint256 _ethUse = msg.value;\r\n\r\n        // start next round?\r\n        if (_now > round_m[_rndNo].endTime)\r\n        {\r\n            _rndNo = _rndNo.add(1);\r\n            rndNo = _rndNo;\r\n            round_m[_rndNo].startTime = _now;\r\n            round_m[_rndNo].endTime = _now + rndFirStage_;\r\n        }\r\n\r\n        // first or second stage\r\n        if (round_m[_rndNo].keys < 10000000000000000000000000)\r\n        {\r\n            // first stage\r\n            uint256 _keys = (round_m[_rndNo].eth).keysRec(_eth);\r\n            // keys number 10,000,000, enter the second stage\r\n            if (_keys.add(round_m[_rndNo].keys) >= 10000000000000000000000000)\r\n            {\r\n                _keys = (10000000000000000000000000).sub(round_m[_rndNo].keys);\r\n\r\n                if (round_m[_rndNo].eth >= 8562500000000000000000)\r\n                {\r\n                    _ethUse = 0;\r\n                } else {\r\n                    _ethUse = (8562500000000000000000).sub(round_m[_rndNo].eth);\r\n                }\r\n\r\n                if (_eth > _ethUse)\r\n                {\r\n                    // refund\r\n                    msg.sender.transfer(_eth.sub(_ethUse));\r\n                } else {\r\n                    // fix\r\n                    _ethUse = _eth;\r\n                }\r\n            }\r\n\r\n            // if they bought at least 1 whole key\r\n            if (_keys >= 1000000000000000000)\r\n            {\r\n                round_m[_rndNo].endTime = _now + rndFirStage_;\r\n                round_m[_rndNo].leader = msg.sender;\r\n            }\r\n\r\n            // update playerRound\r\n            playerRound_m[_rndNo][msg.sender].keys = _keys.add(playerRound_m[_rndNo][msg.sender].keys);\r\n            playerRound_m[_rndNo][msg.sender].eth = _ethUse.add(playerRound_m[_rndNo][msg.sender].eth);\r\n\r\n            // update round\r\n            round_m[_rndNo].keys = _keys.add(round_m[_rndNo].keys);\r\n            round_m[_rndNo].eth = _ethUse.add(round_m[_rndNo].eth);\r\n\r\n            // update global variable\r\n            totalEth = _ethUse.add(totalEth);\r\n\r\n            // event\r\n            emit FlyToTheMoonEvents.onFirStage\r\n            (\r\n                msg.sender,\r\n                _rndNo,\r\n                _keys,\r\n                _ethUse,\r\n                _now\r\n            );\r\n        } else {\r\n            // second stage\r\n            // no more keys\r\n            // lastPrice + 0.1Ether <= newPrice <= lastPrice + 10Ether\r\n            uint256 _lastPrice = round_m[_rndNo].lastPrice;\r\n            uint256 _maxPrice = (10000000000000000000).add(_lastPrice);\r\n            // less than (lastPrice + 0.1Ether) ?\r\n            require(_eth >= (100000000000000000).add(_lastPrice), \"Need more Ether\");\r\n            // more than (lastPrice + 10Ether) ?\r\n            if (_eth > _maxPrice)\r\n            {\r\n                _ethUse = _maxPrice;\r\n                // refund\r\n                msg.sender.transfer(_eth.sub(_ethUse));\r\n            }\r\n\r\n            round_m[_rndNo].endTime = _now + rndSecStage_;\r\n            round_m[_rndNo].leader = msg.sender;\r\n            round_m[_rndNo].lastPrice = _ethUse;\r\n\r\n            // update playerRound\r\n            playerRound_m[_rndNo][msg.sender].eth = _ethUse.add(playerRound_m[_rndNo][msg.sender].eth);\r\n\r\n            // update round\r\n            round_m[_rndNo].eth = _ethUse.add(round_m[_rndNo].eth);\r\n\r\n            // update global variable\r\n            totalEth = _ethUse.add(totalEth);\r\n\r\n            // event\r\n            emit FlyToTheMoonEvents.onSecStage\r\n            (\r\n                msg.sender,\r\n                _rndNo,\r\n                _ethUse,\r\n                _now\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev withdraws earnings by rndNo.\r\n     * 0x528ce7de\r\n     * 0x528ce7de0000000000000000000000000000000000000000000000000000000000000001\r\n     */\r\n    function withdrawByRndNo(uint256 _rndNo)\r\n        onlyHuman()\r\n        public\r\n    {\r\n        require(_rndNo <= rndNo, \"You're running too fast\");\r\n        uint256 _total = (((round_m[_rndNo].eth).mul(playerRound_m[_rndNo][msg.sender].keys)).mul(60) / ((round_m[_rndNo].keys).mul(100)));\r\n        uint256 _withdrawed = playerRound_m[_rndNo][msg.sender].withdraw;\r\n        require(_total > _withdrawed, \"No need to withdraw\");\r\n        uint256 _ethOut = _total.sub(_withdrawed);\r\n        playerRound_m[_rndNo][msg.sender].withdraw = _total;\r\n        msg.sender.transfer(_ethOut);\r\n\r\n        // event\r\n        emit FlyToTheMoonEvents.onWithdraw\r\n        (\r\n            msg.sender,\r\n            _rndNo,\r\n            _ethOut,\r\n            now\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Award by rndNo.\r\n     * 0x80ec35ff\r\n     * 0x80ec35ff0000000000000000000000000000000000000000000000000000000000000001\r\n     */\r\n    function awardByRndNo(uint256 _rndNo)\r\n        onlyHuman()\r\n        public\r\n    {\r\n        require(_rndNo <= rndNo, \"You're running too fast\");\r\n        require(now > round_m[_rndNo].endTime, \"Wait patiently\");\r\n        require(round_m[_rndNo].leader == msg.sender, \"The prize is not yours\");\r\n        require(round_m[_rndNo].award == false, \"Can't get prizes repeatedly\");\r\n\r\n        uint256 _ethOut = ((round_m[_rndNo].eth).mul(35) / (100));\r\n        round_m[_rndNo].award = true;\r\n        msg.sender.transfer(_ethOut);\r\n\r\n        // event\r\n        emit FlyToTheMoonEvents.onAward\r\n        (\r\n            msg.sender,\r\n            _rndNo,\r\n            _ethOut,\r\n            now\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev fee withdraw to owner, everyone can do it.\r\n     * 0x6561e6ba\r\n     */\r\n    function feeWithdraw()\r\n        onlyHuman()\r\n        public\r\n    {\r\n        uint256 _total = (totalEth.mul(5) / (100));\r\n        uint256 _withdrawed = ownerWithdraw;\r\n        require(_total > _withdrawed, \"No need to withdraw\");\r\n        ownerWithdraw = _total;\r\n        owner.transfer(_total.sub(_withdrawed));\r\n    }\r\n\r\n    /**\r\n     * @dev change owner.\r\n     */\r\n    function changeOwner(address newOwner)\r\n        onlyOwner()\r\n        public\r\n    {\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev returns all current round info needed for front end\r\n     * 0x747dff42\r\n     * @return round id \r\n     * @return total eth for round\r\n     * @return total keys for round \r\n     * @return time round started\r\n     * @return time round ends\r\n     * @return current leader\r\n     * @return lastest price\r\n     * @return current key price\r\n     */\r\n    function getCurrentRoundInfo()\r\n        public \r\n        view \r\n        returns(uint256, uint256, uint256, uint256, uint256, address, uint256, uint256)\r\n    {\r\n\r\n        uint256 _rndNo = rndNo;\r\n        \r\n        return (\r\n            _rndNo,\r\n            round_m[_rndNo].eth,\r\n            round_m[_rndNo].keys,\r\n            round_m[_rndNo].startTime,\r\n            round_m[_rndNo].endTime,\r\n            round_m[_rndNo].leader,\r\n            round_m[_rndNo].lastPrice,\r\n            getBuyPrice()\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @dev return the price buyer will pay for next 1 individual key during first stage.\r\n     * 0x018a25e8\r\n     * @return price for next key bought (in wei format)\r\n     */\r\n    function getBuyPrice()\r\n        public \r\n        view \r\n        returns(uint256)\r\n    {\r\n        uint256 _rndNo = rndNo;\r\n        uint256 _now = now;\r\n        \r\n        // start next round?\r\n        if (_now > round_m[_rndNo].endTime)\r\n        {\r\n            return (75000000000000);\r\n        }\r\n        if (round_m[_rndNo].keys < 10000000000000000000000000)\r\n        {\r\n            return ((round_m[_rndNo].keys.add(1000000000000000000)).ethRec(1000000000000000000));\r\n        }\r\n        //second stage\r\n        return (0);\r\n    }\r\n}\r\n\r\nlibrary KeysCalc {\r\n    using SafeMath for *;\r\n    /**\r\n     * @dev calculates number of keys received given X eth \r\n     * @param _curEth current amount of eth in contract \r\n     * @param _newEth eth being spent\r\n     * @return amount of ticket purchased\r\n     */\r\n    function keysRec(uint256 _curEth, uint256 _newEth)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));\r\n    }\r\n    \r\n    /**\r\n     * @dev calculates amount of eth received if you sold X keys \r\n     * @param _curKeys current amount of keys that exist \r\n     * @param _sellKeys amount of keys you wish to sell\r\n     * @return amount of eth received\r\n     */\r\n    function ethRec(uint256 _curKeys, uint256 _sellKeys)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));\r\n    }\r\n\r\n    /**\r\n     * @dev calculates how many keys would exist with given an amount of eth\r\n     * @param _eth eth \"in contract\"\r\n     * @return number of keys that would exist\r\n     */\r\n    function keys(uint256 _eth) \r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000);\r\n    }\r\n    \r\n    /**\r\n     * @dev calculates how much eth would be in contract given a number of keys\r\n     * @param _keys number of keys \"in contract\" \r\n     * @return eth that would exists\r\n     */\r\n    function eth(uint256 _keys) \r\n        internal\r\n        pure\r\n        returns(uint256)  \r\n    {\r\n        return ((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq());\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr \r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rndNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rndNo\",\"type\":\"uint256\"}],\"name\":\"withdrawByRndNo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"feeWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round_m\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"leader\",\"type\":\"address\"},{\"name\":\"lastPrice\",\"type\":\"uint256\"},{\"name\":\"award\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rndNo\",\"type\":\"uint256\"}],\"name\":\"awardByRndNo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerRound_m\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"withdraw\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"rndNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"keys\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onFirStage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"rndNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onSecStage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"rndNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"rndNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onAward\",\"type\":\"event\"}]","ContractName":"FlyToTheMoon","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://54ca8c4e33011c9ec47ce0f68687d690a7ba513d570005c0e8e1bac4d62971c0"}]}