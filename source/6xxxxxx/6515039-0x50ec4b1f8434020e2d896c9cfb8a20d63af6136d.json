{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n// Original gameplay and contract by Spielley\r\n// Spielley is not liable for any bugs or exploits the contract may contain\r\n// This game is purely intended for fun purposes\r\n\r\n// Gameplay:\r\n// Send in 0.1 eth to get a soldier in the field and 1 bullet\r\n// Wait till you reach the waiting time needed to shoot\r\n// Each time someone is killed divs are given to the survivors\r\n// 2 ways to shoot: \r\n// semi random, available first\r\n// Chose target\r\n\r\n// there is only a 1 time self kill prevention when semi is used\r\n// if you send in multiple soldiers friendly kills are possible\r\n// => use target instead\r\n\r\n// Social gameplay: Chat with people and Coordinate your shots \r\n// if you want to risk not getting shot by semi bullets first\r\n\r\n// you keep your bullets when you send in new soldiers\r\n\r\n// if your soldier dies your address is added to the back of the refund line\r\n// to get back your initial eth\r\n\r\n// payout structure per 0.1 eth:\r\n// 0.005 eth buy P3D\r\n// 0.005 eth goes to the refund line\r\n// 0.001 eth goes dev cut shared across SPASM(Spielleys profit share aloocation module)\r\n// 0.089 eth is given to survivors upon kill\r\n\r\n// P3D divs: \r\n// 1% to SPASM\r\n// 99% to refund line\r\n\r\n// SPASM: get a part of the dev fee payouts and funds Spielley to go fulltime dev\r\n// https://etherscan.io/address/0xfaae60f2ce6491886c9f7c9356bd92f688ca66a1#writeContract\r\n// => buyshares function , send in eth to get shares\r\n\r\n// P3D MN payouts for UI devs\r\n// payout per 0.1 eth sent in the sendInSoldier function\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = 0x0B0eFad4aE088a88fFDC50BCe5Fb63c6936b9220;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n// Snip3d contract\r\ncontract Snip3D is  Owned {\r\n    using SafeMath for uint;\r\n    uint public _totalSupply;\r\n\r\n    mapping(address => uint256)public  balances;// soldiers on field\r\n    mapping(address => uint256)public  bullets;// amount of bullets Owned\r\n    mapping(uint256 => address)public  formation;// the playing field\r\n    uint256 public nextFormation;// next spot in formation\r\n    mapping(address => uint256)public lastMove;//blocknumber lastMove\r\n    mapping(uint256 => address) public RefundWaitingLine;\r\n    uint256 public  NextInLine;//next person to be refunded\r\n    uint256 public  NextAtLineEnd;//next spot to add loser\r\n    uint256 public Refundpot;\r\n    uint256 public blocksBeforeSemiRandomShoot = 10;\r\n    uint256 public blocksBeforeTargetShoot = 40;\r\n    \r\n    //constructor\r\n    constructor()\r\n        public\r\n    {\r\n        \r\n        \r\n    }\r\n    //mods\r\n    modifier isAlive()\r\n    {\r\n        require(balances[msg.sender] > 0);\r\n        _;\r\n    }\r\n    // divfunctions\r\nHourglassInterface constant P3Dcontract_ = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\r\nSPASMInterface constant SPASM_ = SPASMInterface(0xfaAe60F2CE6491886C9f7C9356bd92F688cA66a1);\r\n// view functions\r\nfunction harvestabledivs()\r\n        view\r\n        public\r\n        returns(uint256)\r\n    {\r\n        return ( P3Dcontract_.dividendsOf(address(this)))  ;\r\n    }\r\nfunction amountofp3d() external view returns(uint256){\r\n    return ( P3Dcontract_.balanceOf(address(this)))  ;\r\n}\r\n    //divsection\r\nuint256 public pointMultiplier = 10e18;\r\nstruct Account {\r\n  uint balance;\r\n  uint lastDividendPoints;\r\n}\r\nmapping(address=>Account) accounts;\r\nmapping(address => string) public Vanity;\r\nuint public ethtotalSupply;\r\nuint public totalDividendPoints;\r\nuint public unclaimedDividends;\r\n\r\nfunction dividendsOwing(address account) public view returns(uint256) {\r\n  uint256 newDividendPoints = totalDividendPoints.sub(accounts[account].lastDividendPoints);\r\n  return (balances[account] * newDividendPoints) / pointMultiplier;\r\n}\r\nmodifier updateAccount(address account) {\r\n  uint256 owing = dividendsOwing(account);\r\n  if(owing > 0) {\r\n    unclaimedDividends = unclaimedDividends.sub(owing);\r\n    \r\n    account.transfer(owing);\r\n  }\r\n  accounts[account].lastDividendPoints = totalDividendPoints;\r\n  _;\r\n}\r\nfunction () external payable{}\r\nfunction fetchdivs(address toupdate) public updateAccount(toupdate){}\r\n// Gamefunctions\r\nfunction sendInSoldier(address masternode) public updateAccount(msg.sender)  payable{\r\n    uint256 value = msg.value;\r\n    require(value >= 100 finney);// sending in sol costs 0.1 eth\r\n    address sender = msg.sender;\r\n    // add life\r\n    balances[sender]++;\r\n    // update totalSupply\r\n    _totalSupply++;\r\n    // add bullet \r\n    bullets[sender]++;\r\n    // add to playing field\r\n    formation[nextFormation] = sender;\r\n    nextFormation++;\r\n    // reset lastMove to prevent people from adding bullets and start shooting\r\n    lastMove[sender] = block.number;\r\n    // buy P3D\r\n    P3Dcontract_.buy.value(5 wei)(masternode);\r\n    // check excess of payed \r\n    if(value > 100 finney){uint256 toRefund = value.sub(100 finney);Refundpot.add(toRefund);}\r\n    // progress refundline\r\n    Refundpot += 5 finney;\r\n    // take SPASM cut\r\n    SPASM_.disburse.value(1 wei)();\r\n\r\n}\r\nfunction shootSemiRandom() public isAlive() {\r\n    address sender = msg.sender;\r\n    require(block.number > lastMove[sender] + blocksBeforeSemiRandomShoot);\r\n    require(bullets[sender] > 0);\r\n    uint256 semiRNG = (block.number.sub(lastMove[sender])) % 200;\r\n    \r\n    uint256 shot = uint256 (blockhash(block.number.sub(semiRNG))) % nextFormation;\r\n    address killed = formation[shot];\r\n    // solo soldiers self kill prevention - shoots next in line instead\r\n    if(sender == killed)\r\n    {\r\n        shot = uint256 (blockhash(block.number.sub(semiRNG).add(1))) % nextFormation;\r\n        killed = formation[shot];\r\n    }\r\n    \r\n    // remove life\r\n    balances[killed]--;\r\n    // update totalSupply\r\n    _totalSupply--;\r\n    // remove bullet \r\n    bullets[sender]--;\r\n    // remove from playing field\r\n    uint256 lastEntry = nextFormation.sub(1);\r\n    formation[shot] = formation[lastEntry];\r\n    nextFormation--;\r\n    // reset lastMove to prevent people from adding bullets and start shooting\r\n    lastMove[sender] = block.number;\r\n    // update divs loser\r\n    fetchdivs(killed);\r\n    // add loser to refundline\r\n    RefundWaitingLine[NextAtLineEnd] = killed;\r\n    NextAtLineEnd++;\r\n    // disburse eth to survivors\r\n    uint256 amount = 89 finney;\r\n    totalDividendPoints = totalDividendPoints.add(amount.mul(pointMultiplier).div(_totalSupply));\r\n    unclaimedDividends = unclaimedDividends.add(amount);\r\n\r\n}\r\nfunction shootTarget(uint256 target) public isAlive() {\r\n    address sender = msg.sender;\r\n    require(target < nextFormation && target > 0);\r\n    require(block.number > lastMove[sender] + blocksBeforeTargetShoot);\r\n    require(bullets[sender] > 0);\r\n    \r\n    address killed = formation[target];\r\n    // solo soldiers self kill prevention - shoots next in line instead\r\n    \r\n    \r\n    // remove life\r\n    balances[killed]--;\r\n    // update totalSupply\r\n    _totalSupply--;\r\n    // remove bullet \r\n    bullets[sender]--;\r\n    // remove from playing field\r\n    uint256 lastEntry = nextFormation.sub(1);\r\n    formation[target] = formation[lastEntry];\r\n    nextFormation--;\r\n    // reset lastMove to prevent people from adding bullets and start shooting\r\n    lastMove[sender] = block.number;\r\n    // update divs loser\r\n    fetchdivs(killed);\r\n    // add loser to refundline\r\n    RefundWaitingLine[NextAtLineEnd] = killed;\r\n    NextAtLineEnd++;\r\n    // fetch contracts divs\r\n    //allocate p3d dividends to contract \r\n            uint256 dividends =  harvestabledivs();\r\n            require(dividends > 0);\r\n            uint256 base = dividends.div(100);\r\n            P3Dcontract_.withdraw();\r\n            SPASM_.disburse.value(base)();// to dev fee sharing contract SPASM\r\n    // disburse eth to survivors\r\n    uint256 amount = 89 finney;\r\n    amount = amount.add(dividends.sub(base));\r\n    totalDividendPoints = totalDividendPoints.add(amount.mul(pointMultiplier).div(_totalSupply));\r\n    unclaimedDividends = unclaimedDividends.add(amount);\r\n\r\n}\r\n\r\nfunction Payoutnextrefund ()public\r\n    {\r\n        //allocate p3d dividends to sacrifice if existing\r\n            uint256 Pot = Refundpot;\r\n            require(Pot > 0.1 ether);\r\n            Refundpot -= 0.1 ether;\r\n            RefundWaitingLine[NextInLine].transfer(0.1 ether);\r\n            NextInLine++;\r\n            //\r\n    }\r\n\r\nfunction disburse() public  payable {\r\n    uint256 amount = msg.value;\r\n    uint256 base = amount.div(100);\r\n    uint256 amt2 = amount.sub(base);\r\n  totalDividendPoints = totalDividendPoints.add(amt2.mul(pointMultiplier).div(_totalSupply));\r\n unclaimedDividends = unclaimedDividends.add(amt2);\r\n \r\n}\r\nfunction changevanity(string van) public payable{\r\n    require(msg.value >= 1  finney);\r\n    Vanity[msg.sender] = van;\r\n    Refundpot += msg.value;\r\n}\r\nfunction P3DDivstocontract() public payable{\r\n    uint256 divs = harvestabledivs();\r\n    require(divs > 0);\r\n \r\nP3Dcontract_.withdraw();\r\n    //1% to owner\r\n    uint256 base = divs.div(100);\r\n    uint256 amt2 = divs.sub(base);\r\n    SPASM_.disburse.value(base)();// to dev fee sharing contract\r\n   totalDividendPoints = totalDividendPoints.add(amt2.mul(pointMultiplier).div(_totalSupply));\r\n unclaimedDividends = unclaimedDividends.add(amt2);\r\n}\r\nfunction die () public onlyOwner {\r\n    selfdestruct(msg.sender);\r\n}\r\n\r\n    \r\n}\r\ninterface HourglassInterface  {\r\n    function() payable external;\r\n    function buy(address _playerAddress) payable external returns(uint256);\r\n    function sell(uint256 _amountOfTokens) external;\r\n    function reinvest() external;\r\n    function withdraw() external;\r\n    function exit() external;\r\n    function dividendsOf(address _playerAddress) external view returns(uint256);\r\n    function balanceOf(address _playerAddress) external view returns(uint256);\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) external returns(bool);\r\n    function stakingRequirement() external view returns(uint256);\r\n}\r\ninterface SPASMInterface  {\r\n    function() payable external;\r\n    function disburse() external  payable;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RefundWaitingLine\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"P3DDivstocontract\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDividendPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksBeforeTargetShoot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toupdate\",\"type\":\"address\"}],\"name\":\"fetchdivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"die\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NextAtLineEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastMove\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unclaimedDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextFormation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"van\",\"type\":\"string\"}],\"name\":\"changevanity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pointMultiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bullets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"shootTarget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"harvestabledivs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Vanity\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountofp3d\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"formation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NextInLine\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethtotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksBeforeSemiRandomShoot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disburse\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"shootSemiRandom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Refundpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Payoutnextrefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"sendInSoldier\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Snip3D","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://788ace5098217c5f03cb3ed24b2ce034f8b0aa48de98f0ee796e749f855050c0"}]}