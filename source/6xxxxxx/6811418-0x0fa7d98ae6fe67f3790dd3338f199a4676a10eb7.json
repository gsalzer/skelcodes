{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public godOwner;\r\n    mapping (address => bool) public owners;\r\n\r\n    constructor() public{\r\n        godOwner = msg.sender;\r\n        owners[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyGodOwner {\r\n        require(msg.sender == godOwner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(owners[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    function addOwner(address _newOwner) onlyGodOwner public{\r\n        owners[_newOwner] = true;\r\n    }\r\n\r\n    function removeOwner(address _oldOwner) onlyGodOwner public{\r\n        owners[_oldOwner] = false;\r\n    }\r\n\r\n    function transferOwnership(address newGodOwner) public onlyGodOwner {\r\n        godOwner = newGodOwner;\r\n        owners[newGodOwner] = true;\r\n        owners[godOwner] = false;\r\n    }\r\n}\r\n\r\n\r\ncontract Erc20Contract {\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n}\r\n\r\n/**\r\n * @title Destructible\r\n * @dev Base token_accessor that can be destroyed by owner. All funds in token_accessor will be sent to the owner.\r\n */\r\ncontract Destructible is Ownable {\r\n\r\n    constructor() public payable { }\r\n\r\n    /**\r\n     * @dev Transfers the current balance to the owner and terminates the token_accessor.\r\n     */\r\n    function destroy() onlyGodOwner public {\r\n        selfdestruct(godOwner);\r\n    }\r\n\r\n    function destroyAndSend(address _recipient) onlyGodOwner public {\r\n        selfdestruct(_recipient);\r\n    }\r\n}\r\n\r\n\r\ncontract Airdrop is Ownable, Destructible {\r\n    using SafeMath for uint256;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 value);\r\n\r\n    constructor() public payable {}\r\n\r\n    function() public payable{}\r\n\r\n    function deposit() public payable {}\r\n\r\n    function batchTransferToken(address _tokenAddr, address[] _toList, uint256[] _values) onlyOwner public {\r\n        require(_toList.length >= 1 && _toList.length == _values.length);\r\n        Erc20Contract erc20 = Erc20Contract(_tokenAddr);\r\n        uint256 i = 0;\r\n        while (i < _toList.length) {\r\n            erc20.transfer(_toList[i], _values[i]);\r\n            i += 1;\r\n        }\r\n    }\r\n\r\n    function transferToken(address _tokenAddr, address _to, uint256 _value) onlyOwner public {\r\n        require(_tokenAddr != address(0x0) && _to != address(0x0) && _value > 0);\r\n        Erc20Contract erc20 = Erc20Contract(_tokenAddr);\r\n        erc20.transfer(_to,_value);\r\n    }\r\n\r\n    function balance(address _tokenAddr) public view returns (uint256){\r\n        Erc20Contract token = Erc20Contract(_tokenAddr);\r\n        return token.balanceOf(msg.sender);\r\n    }\r\n\r\n    function withdrawETH(uint256 _value) onlyOwner public{\r\n        msg.sender.transfer(_value);\r\n    }\r\n\r\n    function batchTransferETH(address[] _toList, uint256[] _values) payable onlyOwner public {\r\n        require(_toList.length >= 1 && _toList.length == _values.length);\r\n        uint256 i = 0;\r\n        while (i < _toList.length) {\r\n            _toList[i].transfer(_values[i]);\r\n            i += 1;\r\n        }\r\n    }\r\n\r\n    function transferETHs(address[] _toList, uint256 _value) payable onlyOwner public {\r\n        require(_toList.length >= 1 && _value > 0);\r\n        uint256 i = 0;\r\n        while (i < _toList.length) {\r\n            _toList[i].transfer(_value);\r\n            i += 1;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldOwner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_toList\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"godOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toList\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferETHs\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toList\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGodOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"destroyAndSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Airdrop","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://334ad0aadec7e19c5451c4b232253730c5574c2aae37ef0e07029049acc14dd0"}]}