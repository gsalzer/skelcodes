{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n\r\ncontract Dice1Win{\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 constant MIN_BET = 0.01 ether;\r\n    mapping(address => uint256) public balanceOf;\r\n    address public owner;\r\n    \r\n    struct Bet {\r\n        uint256 amount;\r\n        uint256 target;\r\n        address gambler;\r\n    }\r\n    \r\n    uint256 public times = 1;\r\n    uint256 public totalBig ;\r\n    uint256 public totalSmall ;\r\n    \r\n    Bet[] public big ;\r\n    Bet[] public small ;\r\n    \r\n    \r\n    event placeBetEvent(uint256 totalCount);\r\n    event settleBetEvent(uint256 random, uint256 times);\r\n    event FailedPayment(address indexed beneficiary, uint256 amount);\r\n    event Payment(address indexed beneficiary, uint256 amount);\r\n    \r\n    \r\n    function placeBet(uint256 _target) external payable {\r\n        require (msg.value >= MIN_BET);\r\n        \r\n        if(_target ==1){\r\n            big.push(\r\n                Bet({\r\n                    amount : msg.value,\r\n                    target : 1,\r\n                    gambler: msg.sender\r\n                })\r\n            );\r\n            totalBig = totalBig.add(msg.value);\r\n        }\r\n        \r\n        if(_target ==0){\r\n            small.push(\r\n                Bet({\r\n                    amount : msg.value,\r\n                    target : 0,\r\n                    gambler: msg.sender\r\n                })\r\n            );\r\n            totalSmall = totalSmall.add(msg.value);\r\n        }\r\n        \r\n        uint256 totalCount = big.length.add(small.length);\r\n        \r\n        if(totalCount >= 20){\r\n            settleBet();\r\n        }\r\n        \r\n        emit placeBetEvent(totalCount);\r\n        \r\n    }\r\n    \r\n    \r\n    function getInfo(uint256 _uint) view public returns(uint256){\r\n        if(_uint ==1){\r\n            return big.length;\r\n        }\r\n        \r\n        if(_uint ==0){\r\n            return small.length;\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    function settleBet() private {\r\n        \r\n        times += 1;\r\n        \r\n        if(totalSmall == 0 || totalBig==0){\r\n            for(uint256 i=0;i<big.length;i++){\r\n                balanceOf[big[i].gambler] = balanceOf[big[i].gambler].add(big[i].amount);\r\n            }\r\n            for( i=0;i<small.length;i++){\r\n                balanceOf[small[i].gambler] = balanceOf[small[i].gambler].add(small[i].amount);\r\n            }\r\n            emit settleBetEvent(100, times);\r\n        }else{\r\n            \r\n            uint _random = random();\r\n            if(_random >=50){\r\n                for( i=0;i<big.length;i++){\r\n                    balanceOf[big[i].gambler] = balanceOf[big[i].gambler].add(big[i].amount * odds(1)/10000);\r\n                }\r\n            }else{\r\n                for( i=0;i<small.length;i++){\r\n                    balanceOf[small[i].gambler] = balanceOf[small[i].gambler].add(small[i].amount * odds(0) / 10000);\r\n                }\r\n            }\r\n            balanceOf[owner] = balanceOf[owner].add((totalSmall + totalBig)  * 1/100);\r\n            emit settleBetEvent(_random, times);\r\n        }\r\n        \r\n        clean();\r\n        \r\n        \r\n    }\r\n    \r\n    function odds(uint256 _target) view public returns(uint256){\r\n        \r\n        if(totalSmall == 0 || totalBig == 0){\r\n            return 0;\r\n        }\r\n        \r\n        if(_target == 1){\r\n            return 10000*(totalSmall.add(totalBig)) / totalBig * 99/100;\r\n        }\r\n        \r\n        if(_target == 0){\r\n            return 10000*(totalSmall.add(totalBig)) / totalSmall * 99/100;\r\n        }\r\n\r\n    }\r\n    \r\n    function withdrawFunds(uint256 withdrawAmount) public  {\r\n        require (balanceOf[msg.sender] >= withdrawAmount);\r\n        require (withdrawAmount >= 0);\r\n        \r\n        if (msg.sender.send(withdrawAmount)) {\r\n            emit Payment(msg.sender, withdrawAmount);\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(withdrawAmount);\r\n        } else {\r\n            emit FailedPayment(msg.sender, withdrawAmount);\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    function random() private view returns(uint256){\r\n        \r\n        if(big.length >0){\r\n            address addr = big[big.length-1].gambler;  \r\n        }else{\r\n             addr = msg.sender; \r\n        }\r\n\r\n        uint256 random = uint(keccak256(now, addr, (totalSmall + totalSmall))) % 100;\r\n        \r\n        if(small.length >0){\r\n             addr = small[big.length-1].gambler;  \r\n        }else{\r\n             addr = msg.sender; \r\n        }\r\n        \r\n        uint256 random2 = uint(keccak256(now, addr, random)) % 100;\r\n        \r\n        return random2;\r\n    }\r\n    \r\n    \r\n    function clean() private{\r\n        delete totalBig;\r\n        delete totalSmall;\r\n        delete big;\r\n        delete small;\r\n    }\r\n    \r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    int256 constant private INT256_MIN = -2**255;\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        require(!(a == -1 && b == INT256_MIN));\r\n        int256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0);\r\n        require(!(b == -1 && a == INT256_MIN)); \r\n        int256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_uint\",\"type\":\"uint256\"}],\"name\":\"getInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"big\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"target\",\"type\":\"uint256\"},{\"name\":\"gambler\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSmall\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"odds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"small\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"target\",\"type\":\"uint256\"},{\"name\":\"gambler\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBig\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"times\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"totalCount\",\"type\":\"uint256\"}],\"name\":\"placeBetEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"random\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"settleBetEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailedPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"}]","ContractName":"Dice1Win","CompilerVersion":"v0.4.24-nightly.2018.4.19+commit.27d79906","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://14dc557812a5eec5a7fda7045f62af149fd3738b43d382449f17b732b625b993"}]}