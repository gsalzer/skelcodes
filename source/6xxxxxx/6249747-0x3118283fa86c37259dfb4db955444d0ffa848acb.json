{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"401: Only the contract owner can call this method.\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract EthEggBase is Ownable{\r\n    enum EggStatus{preSell, selling, brood, finished, notExist}\r\n    enum MsgType{other, buySuccess, buyFail, sellSuccess, prIncome, chickenDie, eggNotEnough, hatch, moneyIncorrect, prSelf, prNotBuy}\r\n    struct Egg{\r\n        uint64 eggId;\r\n        uint8 batchNum;\r\n        EggStatus eggStatus;\r\n        uint32 chickenId;\r\n        address eggOwner;\r\n    }\r\n\r\n    struct Chicken{\r\n        uint32 chickenId;\r\n        uint8 bornNum;\r\n        address chickenOwner;\r\n    }\r\n\r\n    Egg[] eggs;\r\n    Chicken[] chickens;\r\n    mapping(address=>uint32[]) userToChickenIds;\r\n    mapping(address=>uint64[]) userToEggIds;    //the eggs for user's chicken brood only, not include eggs from buying\r\n\r\n\r\n    uint8 currentBatchNum;\r\n    uint64 currentSellEggIndex;\r\n    uint256 currentPrice;\r\n    uint256 initPrice;\r\n    uint256 eggsCount=1;\r\n\r\n    mapping(address=>uint32) userToChickenCnt;\r\n    mapping(address=>uint32) userToDeadChickenCnt;\r\n    mapping(uint8=>uint64) batchNumToCount;\r\n\r\n    uint8 maxHatch;\r\n\r\n    event Message(address _to, uint256 _val1, uint256 _val2, MsgType _msgType, uint64 _msgTime);\r\n    event DebugBuy(address _to, address _from, uint256 _balance, uint64 _eggId, EggStatus _eggStatus, uint32 _chickenId);\r\n\r\n    function calcPrice() internal {\r\n        if (currentBatchNum == 0){\r\n            currentPrice = initPrice;\r\n        }else{\r\n            currentPrice = initPrice * (9**uint256(currentBatchNum)) / (10**uint256(currentBatchNum));\r\n        }\r\n\r\n    }\r\n\r\n    constructor() public {\r\n        currentBatchNum = 0;\r\n\r\n        maxHatch = 99;           //default 99\r\n        batchNumToCount[0]=10;    //set to 100 default;\r\n\r\n        initPrice = 1000000000000000000;\r\n        calcPrice();\r\n    }\r\n\r\n    function initParams(uint64 _alphaEggCnt) public onlyOwner {\r\n        require(eggs.length==0);\r\n        // maxHatch = _maxHatch;           //default 99\r\n        batchNumToCount[0]=_alphaEggCnt;    //set to 100 default;\r\n        batchNumToCount[1]=_alphaEggCnt;\r\n        batchNumToCount[2]=batchNumToCount[1]*2;\r\n        batchNumToCount[3]=batchNumToCount[2]*2;\r\n        batchNumToCount[4]=batchNumToCount[3]*2;\r\n        calcBatchCnt(5,50);\r\n    }\r\n\r\n    //init 100 eggs, price:1 ether\r\n    function initEggs(uint8 _genAmount) external {\r\n        require(eggs.length < batchNumToCount[0], \"402:Init Eth eggs already generated.\");\r\n\r\n        for (uint8 i=1; i <= _genAmount && eggs.length<=batchNumToCount[0]; i++){\r\n            uint64 _eggId = uint64(eggs.length + 1);\r\n            Egg memory _egg = Egg({\r\n                eggId:_eggId,\r\n                batchNum:currentBatchNum,\r\n                eggStatus:EggStatus.selling,\r\n                chickenId:0,    //that means not egg for any chicken\r\n                eggOwner:owner  //the contract's egg\r\n                });\r\n            eggs.push(_egg);\r\n        }\r\n        eggsCount+=_genAmount;\r\n\r\n    }\r\n\r\n    function calcBatchCnt(uint8 _beginIndex, uint8 _endIndex) internal {\r\n        require (_beginIndex >=5);\r\n        require (_endIndex <= 50);\r\n        require (batchNumToCount[_beginIndex]==0);\r\n        for (uint8 _batchIndex=_beginIndex; _batchIndex< _endIndex; _batchIndex++){\r\n            if (batchNumToCount[_batchIndex] == 0){\r\n                batchNumToCount[_batchIndex] = batchNumToCount[_batchIndex-1] * 2 - batchNumToCount[_batchIndex-5];\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\ncontract EthEggInfo is EthEggBase {\r\n\r\n    function getPrice() external view returns (uint256){\r\n        return currentPrice;\r\n    }\r\n\r\n    function getEggsCount() public view returns (uint256){\r\n        return eggsCount - 1;\r\n    }\r\n\r\n\r\n\r\n    function getFarm() external view returns\r\n    (uint32 [] chickenIds,\r\n        EggStatus[] eggStatus1,\r\n        EggStatus[] eggStatus2,\r\n        EggStatus[] eggStatus3,\r\n        EggStatus[] eggStatus4\r\n    ){\r\n        uint32[] memory _chickenIds = userToChickenIds[msg.sender];\r\n        EggStatus[] memory _eggStatus1 = new EggStatus[](_getChickenCnt(msg.sender));\r\n        EggStatus[] memory _eggStatus2 = new EggStatus[](_getChickenCnt(msg.sender));\r\n        EggStatus[] memory _eggStatus3 = new EggStatus[](_getChickenCnt(msg.sender));\r\n        EggStatus[] memory _eggStatus4 = new EggStatus[](_getChickenCnt(msg.sender));\r\n\r\n        for (uint32 _index=0; _index < _chickenIds.length; _index++){\r\n            Chicken memory _c = chickens[_chickenIds[_index]-1];\r\n            uint8 _maxEggCount=4;\r\n            uint64[] memory _eggIds = userToEggIds[msg.sender];\r\n            for (uint64 j=0; j<_eggIds.length; j++){\r\n                Egg memory _e = eggs[_eggIds[j]-1];\r\n                if (_c.chickenId == _e.chickenId){\r\n                    if (_maxEggCount==4){\r\n                        _eggStatus1[_index] = getEggStatus(_e.eggStatus,_e.batchNum);\r\n                    }else if(_maxEggCount==3){\r\n                        _eggStatus2[_index] = getEggStatus(_e.eggStatus,_e.batchNum);\r\n                    }else if(_maxEggCount==2){\r\n                        _eggStatus3[_index] = getEggStatus(_e.eggStatus,_e.batchNum);\r\n                    }else if(_maxEggCount==1){\r\n                        _eggStatus4[_index] = getEggStatus(_e.eggStatus,_e.batchNum);\r\n                    }\r\n                    _maxEggCount--;\r\n                }\r\n            }\r\n            for (;_maxEggCount>0;_maxEggCount--){\r\n                if (_maxEggCount==4){\r\n                    _eggStatus1[_index] = EggStatus.notExist;\r\n                }else if(_maxEggCount==3){\r\n                    _eggStatus2[_index] = EggStatus.notExist;\r\n                }else if(_maxEggCount==2){\r\n                    _eggStatus3[_index] = EggStatus.notExist;\r\n                }else if(_maxEggCount==1){\r\n                    _eggStatus4[_index] = EggStatus.notExist;\r\n                }\r\n            }\r\n        }\r\n        chickenIds = _chickenIds;\r\n        eggStatus1 = _eggStatus1;\r\n        eggStatus2 = _eggStatus2;\r\n        eggStatus3 = _eggStatus3;\r\n        eggStatus4 = _eggStatus4;\r\n    }\r\n\r\n    function getEggStatus(EggStatus _eggStatus, uint8 _batchNum) internal view returns(EggStatus){\r\n        if (_batchNum > currentBatchNum && _eggStatus==EggStatus.selling){\r\n            return EggStatus.preSell;\r\n        }else{\r\n            return _eggStatus;\r\n        }\r\n    }\r\n\r\n    //The Amount of chicken alive\r\n    function getChickenAmount() public view returns (uint32){\r\n        return userToChickenCnt[msg.sender] - userToDeadChickenCnt[msg.sender];\r\n    }\r\n\r\n    //include dead and alive chickens\r\n    function _getChickenCnt(address _user) internal view returns (uint16){\r\n        uint128 _chickenSize = uint128(chickens.length);\r\n        uint16 _userChickenCnt = 0;\r\n        for(uint128 i=_chickenSize; i>0; i--){\r\n            Chicken memory _c = chickens[i-1];\r\n            if (_user == _c.chickenOwner){\r\n                _userChickenCnt++;\r\n            }\r\n        }\r\n        return _userChickenCnt;\r\n    }\r\n\r\n    function getFreeHatchCnt() public view returns(uint32){\r\n        return _getFreeHatchCnt(msg.sender);\r\n    }\r\n\r\n    function _getFreeHatchCnt(address _user) internal view returns(uint32){\r\n        uint32 _maxHatch = uint32(maxHatch);\r\n        if (_maxHatch >= (userToChickenCnt[_user] - userToDeadChickenCnt[_user])){\r\n            return _maxHatch - (userToChickenCnt[_user] - userToDeadChickenCnt[_user]);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n\r\n}\r\ncontract EthEggTx is EthEggInfo{\r\n    function buy(uint8 _buyCount) external payable {\r\n        uint8 _cnt = _buyCount;\r\n        uint256 _val = msg.value;\r\n        require(0<_buyCount && _buyCount<=10);\r\n        if (eggsCount < _cnt){\r\n            msg.sender.transfer(_val);\r\n            emit Message(msg.sender, _val, 0, MsgType.eggNotEnough, uint64(now));\r\n            return;\r\n        }\r\n        if (getFreeHatchCnt() < _buyCount){\r\n            msg.sender.transfer(_val);\r\n            emit Message(msg.sender, _val, 0, MsgType.hatch, uint64(now));\r\n            return;\r\n        }\r\n        if (_val != currentPrice * _buyCount){\r\n            msg.sender.transfer(_val);\r\n            emit Message(msg.sender, _val, 0, MsgType.moneyIncorrect, uint64(now));\r\n            return;\r\n        }\r\n        uint256 _servCharge = 0;\r\n        for (uint64 i=currentSellEggIndex; i<eggs.length; i++){\r\n            Egg storage _egg = eggs[i];\r\n            if (getEggStatus(_egg.eggStatus, _egg.batchNum) == EggStatus.preSell){\r\n                break;\r\n            }\r\n            _egg.eggStatus = EggStatus.brood;\r\n            address _oldOwner = _egg.eggOwner;\r\n            _egg.eggOwner = msg.sender;\r\n\r\n            eggsCount--;\r\n\r\n            _oldOwner.transfer(currentPrice * 7 / 10);\r\n            _servCharge += currentPrice * 3/ 10;\r\n\r\n            chickenBornEgg(_oldOwner, _egg.chickenId);\r\n\r\n            eggBroodToChicken(msg.sender);\r\n\r\n            _cnt--;\r\n\r\n            //send sell success message.\r\n            emit Message(_oldOwner, currentPrice * 7 / 10, uint256(_egg.chickenId), MsgType.sellSuccess, uint64(now));\r\n\r\n            if (_cnt<=0){\r\n                break;\r\n            }\r\n        }\r\n        currentSellEggIndex = currentSellEggIndex + _buyCount - _cnt;\r\n        _preSellToSelling();\r\n        owner.transfer(_servCharge);\r\n\r\n        //send buy success message.\r\n        emit Message(msg.sender, _val, uint256(_buyCount - _cnt), MsgType.buySuccess, uint64(now));\r\n    }\r\n\r\n    //when user purchase an egg use a promote code\r\n    function buyWithPr(uint8 _buyCount, address _prUser) external payable{\r\n        uint8 _cnt = _buyCount;\r\n        uint256 _val = msg.value;\r\n        require(0<_buyCount && _buyCount<=10);\r\n        if (msg.sender == _prUser){\r\n            msg.sender.transfer(_val);\r\n            emit Message(msg.sender, _val, 0, MsgType.prSelf, uint64(now));\r\n            return;\r\n        }\r\n        if (userToChickenCnt[_prUser]==0){\r\n            msg.sender.transfer(_val);\r\n            emit Message(msg.sender, _val, 0, MsgType.prNotBuy, uint64(now));\r\n            return;\r\n        }\r\n        if (eggsCount < _cnt){\r\n            msg.sender.transfer(_val);\r\n            emit Message(msg.sender, _val, 0, MsgType.eggNotEnough, uint64(now));\r\n            return;\r\n        }\r\n        if (getFreeHatchCnt() < _buyCount){\r\n            msg.sender.transfer(_val);\r\n            emit Message(msg.sender, _val, 0, MsgType.hatch, uint64(now));\r\n            return;\r\n        }\r\n        if (_val != currentPrice * _buyCount){\r\n            msg.sender.transfer(_val);\r\n            emit Message(msg.sender, _val, 0, MsgType.moneyIncorrect, uint64(now));\r\n            return;\r\n        }\r\n\r\n        uint256 _servCharge = 0;\r\n        uint256 _prIncome = 0;\r\n        for (uint64 i=currentSellEggIndex; i<eggs.length; i++){\r\n            Egg storage _egg = eggs[i];\r\n            if (getEggStatus(_egg.eggStatus, _egg.batchNum) == EggStatus.preSell){\r\n                break;\r\n            }\r\n\r\n            _egg.eggStatus = EggStatus.brood;\r\n            address _oldOwner = _egg.eggOwner;\r\n            _egg.eggOwner = msg.sender;\r\n\r\n            eggsCount--;\r\n\r\n            //debug message\r\n            // emit DebugBuy(msg.sender, _oldOwner, currentPrice, _egg.eggId, getEggStatus(_egg.eggStatus, _egg.batchNum), _egg.chickenId);\r\n\r\n            _oldOwner.transfer(currentPrice * 7 / 10);\r\n            _prIncome += currentPrice * 8/ 100;\r\n            _servCharge += currentPrice * 22/ 100;\r\n\r\n            chickenBornEgg(_oldOwner, _egg.chickenId);\r\n\r\n            // userToChickenCnt[msg.sender]++;\r\n            eggBroodToChicken(msg.sender);\r\n\r\n            _cnt--;\r\n\r\n            //send sell success message.\r\n            emit Message(_oldOwner, currentPrice * 7 / 10, uint256(_egg.chickenId), MsgType.sellSuccess, uint64(now));\r\n\r\n            if (_cnt<=0){\r\n                break;\r\n            }\r\n        }\r\n        currentSellEggIndex = currentSellEggIndex + _buyCount - _cnt;\r\n        _preSellToSelling();\r\n        _prUser.transfer(_prIncome);\r\n        owner.transfer(_servCharge);\r\n\r\n        //send pr message.\r\n        emit Message(_prUser, _prIncome, uint256(_buyCount - _cnt), MsgType.prIncome, uint64(now));\r\n\r\n        //send buy success message.\r\n        emit Message(msg.sender, _val, uint256(_buyCount - _cnt), MsgType.buySuccess, uint64(now));\r\n    }\r\n\r\n    function chickenBornEgg(address _user, uint32 _chickenId) internal {\r\n        if (_user == owner){\r\n            return;\r\n        }\r\n\r\n        if (_chickenId == 0){\r\n            return;\r\n        }\r\n\r\n        Chicken storage _chicken = chickens[_chickenId-1];\r\n        if (_chicken.bornNum < 4){\r\n            _chicken.bornNum++;\r\n            uint64 _eggId = uint64(eggs.length+1);\r\n            uint8 _batchNum = _getBatchNumByEggId(_eggId);\r\n            EggStatus _status = EggStatus.selling;\r\n            Egg memory _egg = Egg({\r\n                eggId: _eggId,\r\n                batchNum: _batchNum,\r\n                eggStatus: _status,\r\n                chickenId: _chickenId,\r\n                eggOwner: _user\r\n                });\r\n            eggs.push(_egg);\r\n            userToEggIds[_user].push(_eggId);\r\n        } else if (_chicken.bornNum == 4){\r\n            userToDeadChickenCnt[_user]++;\r\n            emit Message(_chicken.chickenOwner, uint256(_chickenId), uint256(_chicken.chickenId), MsgType.chickenDie, uint64(now));\r\n        }\r\n    }\r\n\r\n    function eggBroodToChicken(address _user) internal {\r\n        if (owner != _user && _getFreeHatchCnt(_user) > 0){\r\n            uint32 _chickenId = uint32(chickens.length+1);\r\n            Chicken memory _chicken = Chicken({\r\n                chickenId:_chickenId,\r\n                bornNum:0,\r\n                chickenOwner:_user\r\n                });\r\n            chickens.push(_chicken);\r\n            userToChickenCnt[_user]++;\r\n            userToChickenIds[_user].push(_chickenId);\r\n\r\n            //and then the chicken generate an egg.\r\n            chickenBornEgg(_user, _chickenId);\r\n        }\r\n\r\n    }\r\n\r\n    function _preSellToSelling() internal {\r\n        if (getEggsCount()==0){\r\n            currentBatchNum++;\r\n            uint64 _cnt = 0;\r\n            for(uint64 _index = currentSellEggIndex; _index < eggs.length; _index++){\r\n                Egg memory _egg = eggs[_index];\r\n                if (getEggStatus(_egg.eggStatus, _egg.batchNum) == EggStatus.preSell){\r\n                    break;\r\n                }\r\n                if (getEggStatus(_egg.eggStatus, _egg.batchNum) == EggStatus.selling){\r\n                    _cnt++;\r\n                }\r\n            }\r\n            eggsCount = eggsCount + _cnt;\r\n            if (getEggsCount()>0){\r\n                calcPrice();\r\n            }\r\n        }\r\n    }\r\n\r\n    function _getBatchNumByEggId(uint64 _eggId) internal view returns(uint8){\r\n        int128 _count = int128(_eggId);\r\n        uint8 _batchNo = 0;\r\n        for(;_batchNo<=49;_batchNo++){\r\n            _count = _count - int128(batchNumToCount[_batchNo]);\r\n            if (_count <= 0){\r\n                break;\r\n            }\r\n        }\r\n        return _batchNo;\r\n    }\r\n\r\n\r\n    function testEggIds() public view returns(uint64[]){\r\n        uint64[] memory _ids = new uint64[](eggs.length);\r\n        for(uint64 i=0; i < uint64(eggs.length); i++){\r\n            _ids[i] = eggs[i].eggId;\r\n        }\r\n        return _ids;\r\n    }\r\n\r\n    function testChickenInfo(uint32 _chickenId) public view returns(uint32, uint8, address){\r\n        require(_chickenId>0);\r\n        Chicken memory _chicken = chickens[_chickenId-1];\r\n        return (_chicken.chickenId, _chicken.bornNum, _chicken.chickenOwner);\r\n    }\r\n\r\n    function testEggInfo(uint64 _eggId) public view returns(uint64 cid, uint8 batchNum, EggStatus eggStatus, uint32 chickenId, address eggOwner){\r\n        require(_eggId>0);\r\n        Egg memory _egg = eggs[_eggId-1];\r\n        uint8 _batchNum = _egg.batchNum;\r\n        EggStatus _eggStatus = getEggStatus(_egg.eggStatus, _egg.batchNum);\r\n        uint32 _chickenId = _egg.chickenId;\r\n        address _eggOwner = _egg.eggOwner;\r\n        return (_eggId, _batchNum, _eggStatus, _chickenId, _eggOwner);\r\n    }\r\n\r\n    function testChickenCnt() external view returns(uint32){\r\n        return userToChickenCnt[msg.sender];\r\n    }\r\n\r\n    function testDeadChickenCnt() external view returns(uint32){\r\n        return userToDeadChickenCnt[msg.sender];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_alphaEggCnt\",\"type\":\"uint64\"}],\"name\":\"initParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"testDeadChickenCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyCount\",\"type\":\"uint8\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChickenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFreeHatchCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genAmount\",\"type\":\"uint8\"}],\"name\":\"initEggs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFarm\",\"outputs\":[{\"name\":\"chickenIds\",\"type\":\"uint32[]\"},{\"name\":\"eggStatus1\",\"type\":\"uint8[]\"},{\"name\":\"eggStatus2\",\"type\":\"uint8[]\"},{\"name\":\"eggStatus3\",\"type\":\"uint8[]\"},{\"name\":\"eggStatus4\",\"type\":\"uint8[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"testChickenCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_chickenId\",\"type\":\"uint32\"}],\"name\":\"testChickenInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEggsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"testEggIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyCount\",\"type\":\"uint8\"},{\"name\":\"_prUser\",\"type\":\"address\"}],\"name\":\"buyWithPr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_eggId\",\"type\":\"uint64\"}],\"name\":\"testEggInfo\",\"outputs\":[{\"name\":\"cid\",\"type\":\"uint64\"},{\"name\":\"batchNum\",\"type\":\"uint8\"},{\"name\":\"eggStatus\",\"type\":\"uint8\"},{\"name\":\"chickenId\",\"type\":\"uint32\"},{\"name\":\"eggOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_val1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_val2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_msgType\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_msgTime\",\"type\":\"uint64\"}],\"name\":\"Message\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eggId\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"_eggStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_chickenId\",\"type\":\"uint32\"}],\"name\":\"DebugBuy\",\"type\":\"event\"}]","ContractName":"EthEggTx","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4a694459300303340e1be9504841cc75321b3851f4a4ec77d288f5d949dc8056"}]}