{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/// @title PONZIMOON\r\ncontract ponzimoon is owned {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n    Spaceship[] spaceships;\r\n    Player[] players;\r\n    mapping(address => uint256) addressMPid;\r\n    mapping(uint256 => address) pidXAddress;\r\n    mapping(string => uint256) nameXPid;\r\n    uint256 playerCount;\r\n    uint256 totalTicketCount;\r\n    uint256 airdropPrizePool;\r\n    uint256 moonPrizePool;\r\n    uint256 lotteryTime;\r\n    uint256 editPlayerNamePrice = 0.01 ether;\r\n    uint256 spaceshipPrice = 0.01 ether;\r\n    uint256 addSpaceshipPrice = 0.00000001 ether;\r\n    address maxAirDropAddress;\r\n    uint256 maxTotalTicket;\r\n    uint256 round;\r\n    uint256 totalDividendEarnings;\r\n    uint256 totalEarnings;\r\n    uint256 luckyPayerId;\r\n\r\n\r\n    struct Spaceship {\r\n        uint256 id;\r\n        string name;\r\n        uint256 speed;\r\n        address captain;\r\n        uint256 ticketCount;\r\n        uint256 dividendRatio;\r\n        uint256 spaceshipPrice;\r\n        uint256 addSpeed;\r\n    }\r\n    struct Player {\r\n        address addr;\r\n        string name;\r\n        uint256 earnings;\r\n        uint256 ticketCount;\r\n        uint256 dividendRatio;\r\n        uint256 distributionEarnings;\r\n        uint256 dividendEarnings;\r\n        uint256 withdrawalAmount;\r\n        uint256 parentId;\r\n        uint256 dlTicketCount;\r\n        uint256 xzTicketCount;\r\n        uint256 jcTicketCount;\r\n    }\r\n\r\n    constructor() public {\r\n        lotteryTime = now + 12 hours;\r\n        round = 1;\r\n\r\n        spaceships.push(Spaceship(0, \"dalao\", 100000, msg.sender, 0, 20, 15 ether, 2));\r\n        spaceships.push(Spaceship(1, \"xiaozhuang\", 100000, msg.sender, 0, 50, 15 ether, 5));\r\n        spaceships.push(Spaceship(2, \"jiucai\", 100000, msg.sender, 0, 80, 15 ether, 8));\r\n\r\n        uint256 playerArrayIndex = players.push(Player(msg.sender, \"system\", 0, 0, 3, 0, 0, 0, 0, 0, 0, 0));\r\n        addressMPid[msg.sender] = playerArrayIndex;\r\n        pidXAddress[playerArrayIndex] = msg.sender;\r\n        playerCount = players.length;\r\n        nameXPid[\"system\"] = playerArrayIndex;\r\n    }\r\n\r\n    function getSpaceship(uint256 _spaceshipId) public view returns (\r\n        uint256 _id,\r\n        string _name,\r\n        uint256 _speed,\r\n        address _captain,\r\n        uint256 _ticketCount,\r\n        uint256 _dividendRatio,\r\n        uint256 _spaceshipPrice\r\n    ){\r\n        _id = spaceships[_spaceshipId].id;\r\n        _name = spaceships[_spaceshipId].name;\r\n        _speed = spaceships[_spaceshipId].speed;\r\n        _captain = spaceships[_spaceshipId].captain;\r\n        _ticketCount = spaceships[_spaceshipId].ticketCount;\r\n        _dividendRatio = spaceships[_spaceshipId].dividendRatio;\r\n        _spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice;\r\n    }\r\n    function getNowTime() public view returns (uint256){\r\n        return now;\r\n    }\r\n\r\n    function checkName(string _name) public view returns (bool){\r\n        if (nameXPid[_name] == 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setYxName(address _address, string _name) external onlyOwner {\r\n        if (addressMPid[_address] == 0) {\r\n            uint256 playerArrayIndex = players.push(Player(_address, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\r\n            addressMPid[_address] = playerArrayIndex;\r\n            pidXAddress[playerArrayIndex] = _address;\r\n            playerCount = players.length;\r\n            nameXPid[_name] = playerArrayIndex;\r\n        } else {\r\n            uint256 _pid = addressMPid[_address];\r\n            Player storage _p = players[_pid.sub(1)];\r\n            _p.name = _name;\r\n            nameXPid[_name] = _pid;\r\n        }\r\n    }\r\n\r\n    function setName(string _name) external payable {\r\n        require(msg.value >= editPlayerNamePrice);\r\n        if (addressMPid[msg.sender] == 0) {\r\n            uint256 playerArrayIndex = players.push(Player(msg.sender, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\r\n            addressMPid[msg.sender] = playerArrayIndex;\r\n            pidXAddress[playerArrayIndex] = msg.sender;\r\n            playerCount = players.length;\r\n            nameXPid[_name] = playerArrayIndex;\r\n        } else {\r\n            uint256 _pid = addressMPid[msg.sender];\r\n            Player storage _p = players[_pid.sub(1)];\r\n            _p.name = _name;\r\n            nameXPid[_name] = _pid;\r\n\r\n        }\r\n        Player storage _sysP = players[0];\r\n        _sysP.earnings = _sysP.earnings.add(msg.value);\r\n        _sysP.distributionEarnings = _sysP.distributionEarnings.add(msg.value);\r\n    }\r\n\r\n    function _computePayMoney(uint256 _ticketCount, address _addr) private view returns (bool){\r\n        uint256 _initMoney = 0.01 ether;\r\n        uint256 _eachMoney = 0.0001 ether;\r\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\r\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\r\n        uint256 _tmpPid = addressMPid[_addr];\r\n        Player memory _p = players[_tmpPid.sub(1)];\r\n        if (_p.earnings >= (_initMoney.mul(_ticketCount)) && _p.earnings >= _payMoney) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function checkTicket(uint256 _ticketCount, uint256 _money) private view returns (bool){\r\n        uint256 _initMoney = 0.01 ether;\r\n        uint256 _eachMoney = 0.0001 ether;\r\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\r\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\r\n        if (_money >= (_initMoney.mul(_ticketCount)) && _money >= _payMoney) {\r\n            return true;\r\n        }\r\n        return false;\r\n\r\n\r\n    }\r\n\r\n    function checkNewPlayer(address _player) private {\r\n        if (addressMPid[_player] == 0) {\r\n            uint256 playerArrayIndex = players.push(Player(_player, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\r\n            addressMPid[_player] = playerArrayIndex;\r\n            pidXAddress[playerArrayIndex] = _player;\r\n            playerCount = players.length;\r\n        }\r\n    }\r\n\r\n    function addTicket(uint256 _ticketCount, uint256 _spaceshipNo, uint256 _pid) private {\r\n        spaceshipPrice = spaceshipPrice.add(addSpaceshipPrice.mul(_ticketCount));\r\n\r\n        totalTicketCount = totalTicketCount.add(_ticketCount);\r\n        Player storage _p = players[_pid.sub(1)];\r\n        _p.ticketCount = _p.ticketCount.add(_ticketCount);\r\n        if (_spaceshipNo == 0) {\r\n            _p.dlTicketCount = _p.dlTicketCount.add(_ticketCount);\r\n            Spaceship storage _s = spaceships[0];\r\n            _s.ticketCount = _s.ticketCount.add(_ticketCount);\r\n            _s.speed = _s.speed.add(_ticketCount.mul(_s.addSpeed));\r\n\r\n        }\r\n        if (_spaceshipNo == 1) {\r\n            _p.xzTicketCount = _p.xzTicketCount.add(_ticketCount);\r\n            Spaceship storage _s1 = spaceships[1];\r\n            _s1.ticketCount = _s1.ticketCount.add(_ticketCount);\r\n            _s1.speed = _s1.speed.add(_ticketCount.mul(_s1.addSpeed));\r\n        }\r\n        if (_spaceshipNo == 2) {\r\n            _p.jcTicketCount = _p.jcTicketCount.add(_ticketCount);\r\n            Spaceship storage _s2 = spaceships[2];\r\n            _s2.ticketCount = _s2.ticketCount.add(_ticketCount);\r\n            _s2.speed = _s2.speed.add(_ticketCount.mul(_s2.addSpeed));\r\n        }\r\n    }\r\n\r\n\r\n    function _payTicketByEarnings(uint256 _ticketCount, address _addr) private returns (uint256){\r\n        uint256 _tmpPid = addressMPid[_addr];\r\n        Player storage _p = players[_tmpPid.sub(1)];\r\n        uint256 _tmpMoney = spaceshipPrice.mul(_ticketCount);\r\n        uint256 _tmpMoney2 = addSpaceshipPrice.mul(_ticketCount.sub(1));\r\n        uint256 _returnMoney = _tmpMoney.add(_tmpMoney2);\r\n        _p.earnings = _p.earnings.sub(_returnMoney);\r\n        return _returnMoney;\r\n    }\r\n\r\n\r\n    function buyTicketByEarnings(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external {\r\n        require(now < lotteryTime);\r\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\r\n        require(addressMPid[msg.sender] != 0);\r\n        require(_computePayMoney(_ticketCount, msg.sender));\r\n        updateTime();\r\n        uint256 _money = _payTicketByEarnings(_ticketCount, msg.sender);\r\n\r\n\r\n        totalEarnings = totalEarnings.add(_money);\r\n\r\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\r\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\r\n            _p.parentId = nameXPid[_name];\r\n        }\r\n        luckyPayerId = addressMPid[msg.sender];\r\n\r\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\r\n\r\n\r\n        addSpaceshipMoney(_money.div(100).mul(1));\r\n\r\n        Player storage _player = players[0];\r\n        uint256 _SysMoney = _money.div(100).mul(5);\r\n        _player.earnings = _player.earnings.add(_SysMoney);\r\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\r\n\r\n\r\n        uint256 _distributionMoney = _money.div(100).mul(10);\r\n        if (_p.parentId == 0) {\r\n            _player.earnings = _player.earnings.add(_distributionMoney);\r\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\r\n        } else {\r\n            Player storage _player_ = players[_p.parentId.sub(1)];\r\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\r\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\r\n        }\r\n        if (_ticketCount > maxTotalTicket) {\r\n            maxTotalTicket = _ticketCount;\r\n            maxAirDropAddress = msg.sender;\r\n        }\r\n\r\n        uint256 _airDropMoney = _money.div(100).mul(2);\r\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\r\n        if (airdropPrizePool >= 1 ether) {\r\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\r\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\r\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\r\n            airdropPrizePool = 0;\r\n        }\r\n\r\n        uint256 _remainderMoney = _cMoney(_money, _SysMoney, _distributionMoney, _airDropMoney);\r\n\r\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\r\n    }\r\n\r\n    function _cMoney(uint256 _money, uint256 _SysMoney, uint256 _distributionMoney, uint256 _airDropMoney)\r\n    private pure returns (uint256){\r\n        uint256 _czSpaceshipMoney = _money.div(100).mul(1).mul(3);\r\n        return _money.sub(_czSpaceshipMoney).sub(_SysMoney).\r\n        sub(_distributionMoney).sub(_airDropMoney);\r\n    }\r\n\r\n    function updateTime() private {\r\n        if (totalTicketCount < 50000) {\r\n            lotteryTime = now + 12 hours;\r\n\r\n        } else {\r\n            lotteryTime = now + 1 hours;\r\n        }\r\n    }\r\n\r\n\r\n    function buyTicket(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external payable {\r\n        require(now < lotteryTime);\r\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\r\n        require(checkTicket(_ticketCount, msg.value));\r\n        checkNewPlayer(msg.sender);\r\n        updateTime();\r\n        totalEarnings = totalEarnings.add(msg.value);\r\n\r\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\r\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\r\n            _p.parentId = nameXPid[_name];\r\n        }\r\n        luckyPayerId = addressMPid[msg.sender];\r\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\r\n\r\n\r\n        addSpaceshipMoney(msg.value.div(100).mul(1));\r\n\r\n        Player storage _player = players[0];\r\n        uint256 _SysMoney = msg.value.div(100).mul(5);\r\n        _player.earnings = _player.earnings.add(_SysMoney);\r\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\r\n\r\n\r\n        uint256 _distributionMoney = msg.value.div(100).mul(10);\r\n        if (_p.parentId == 0) {\r\n            _player.earnings = _player.earnings.add(_distributionMoney);\r\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\r\n        } else {\r\n            Player storage _player_ = players[_p.parentId.sub(1)];\r\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\r\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\r\n        }\r\n        if (_ticketCount > maxTotalTicket) {\r\n            maxTotalTicket = _ticketCount;\r\n            maxAirDropAddress = msg.sender;\r\n        }\r\n\r\n        uint256 _airDropMoney = msg.value.div(100).mul(2);\r\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\r\n        if (airdropPrizePool >= 1 ether) {\r\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\r\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\r\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\r\n            airdropPrizePool = 0;\r\n        }\r\n\r\n        uint256 _remainderMoney = msg.value.sub((msg.value.div(100).mul(1)).mul(3)).sub(_SysMoney).\r\n        sub(_distributionMoney).sub(_airDropMoney);\r\n\r\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\r\n\r\n\r\n    }\r\n\r\n    function getFhMoney(uint256 _spaceshipNo, uint256 _money, uint256 _ticketCount, uint256 _targetNo) private view returns (uint256){\r\n        Spaceship memory _fc = spaceships[_spaceshipNo];\r\n        if (_spaceshipNo == _targetNo) {\r\n            uint256 _Ticket = _fc.ticketCount.sub(_ticketCount);\r\n            if (_Ticket == 0) {\r\n                return 0;\r\n            }\r\n            return _money.div(_Ticket);\r\n        } else {\r\n            if (_fc.ticketCount == 0) {\r\n                return 0;\r\n            }\r\n            return _money.div(_fc.ticketCount);\r\n        }\r\n    }\r\n\r\n    function updateGameMoney(uint256 _money, uint256 _spaceshipNo, uint256 _ticketCount, uint256 _arrayPid) private {\r\n        uint256 _lastMoney = addMoonPrizePool(_money, _spaceshipNo);\r\n        uint256 _dlMoney = _lastMoney.div(100).mul(53);\r\n        uint256 _xzMoney = _lastMoney.div(100).mul(33);\r\n        uint256 _jcMoney = _lastMoney.sub(_dlMoney).sub(_xzMoney);\r\n        uint256 _dlFMoney = getFhMoney(0, _dlMoney, _ticketCount, _spaceshipNo);\r\n        uint256 _xzFMoney = getFhMoney(1, _xzMoney, _ticketCount, _spaceshipNo);\r\n        uint256 _jcFMoney = getFhMoney(2, _jcMoney, _ticketCount, _spaceshipNo);\r\n        _fhMoney(_dlFMoney, _xzFMoney, _jcFMoney, _arrayPid, _spaceshipNo, _ticketCount);\r\n\r\n    }\r\n\r\n    function _fhMoney(uint256 _dlFMoney, uint256 _xzFMoney, uint256 _jcFMoney, uint256 arrayPid, uint256 _spaceshipNo, uint256 _ticketCount) private {\r\n        for (uint i = 0; i < players.length; i++) {\r\n            Player storage _tmpP = players[i];\r\n            uint256 _totalMoney = 0;\r\n            if (arrayPid != i) {\r\n                _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\r\n                _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\r\n                _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\r\n            } else {\r\n                if (_spaceshipNo == 0) {\r\n                    _totalMoney = _totalMoney.add((_tmpP.dlTicketCount.sub(_ticketCount)).mul(_dlFMoney));\r\n                } else {\r\n                    _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\r\n                }\r\n                if (_spaceshipNo == 1) {\r\n                    _totalMoney = _totalMoney.add((_tmpP.xzTicketCount.sub(_ticketCount)).mul(_xzFMoney));\r\n                } else {\r\n                    _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\r\n                }\r\n                if (_spaceshipNo == 2) {\r\n                    _totalMoney = _totalMoney.add((_tmpP.jcTicketCount.sub(_ticketCount)).mul(_jcFMoney));\r\n                } else {\r\n                    _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\r\n                }\r\n            }\r\n            _tmpP.earnings = _tmpP.earnings.add(_totalMoney);\r\n            _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_totalMoney);\r\n        }\r\n    }\r\n\r\n    function addMoonPrizePool(uint256 _money, uint256 _spaceshipNo) private returns (uint){\r\n        uint256 _tmpMoney;\r\n        if (_spaceshipNo == 0) {\r\n            _tmpMoney = _money.div(100).mul(80);\r\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\r\n        }\r\n        if (_spaceshipNo == 1) {\r\n            _tmpMoney = _money.div(100).mul(50);\r\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\r\n        }\r\n        if (_spaceshipNo == 2) {\r\n            _tmpMoney = _money.div(100).mul(20);\r\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\r\n        }\r\n        moonPrizePool = moonPrizePool.add(_tmpMoney);\r\n        return _money.sub(_tmpMoney);\r\n    }\r\n\r\n\r\n\r\n    function addSpaceshipMoney(uint256 _money) internal {\r\n        Spaceship storage _spaceship0 = spaceships[0];\r\n        uint256 _pid0 = addressMPid[_spaceship0.captain];\r\n        Player storage _player0 = players[_pid0.sub(1)];\r\n        _player0.earnings = _player0.earnings.add(_money);\r\n        _player0.dividendEarnings = _player0.dividendEarnings.add(_money);\r\n\r\n\r\n        Spaceship storage _spaceship1 = spaceships[1];\r\n        uint256 _pid1 = addressMPid[_spaceship1.captain];\r\n        Player storage _player1 = players[_pid1.sub(1)];\r\n        _player1.earnings = _player1.earnings.add(_money);\r\n        _player1.dividendEarnings = _player1.dividendEarnings.add(_money);\r\n\r\n\r\n\r\n        Spaceship storage _spaceship2 = spaceships[2];\r\n        uint256 _pid2 = addressMPid[_spaceship2.captain];\r\n        Player storage _player2 = players[_pid2.sub(1)];\r\n        _player2.earnings = _player2.earnings.add(_money);\r\n        _player2.dividendEarnings = _player2.dividendEarnings.add(_money);\r\n\r\n\r\n    }\r\n\r\n    function getPlayerInfo(address _playerAddress) public view returns (\r\n        address _addr,\r\n        string _name,\r\n        uint256 _earnings,\r\n        uint256 _ticketCount,\r\n        uint256 _dividendEarnings,\r\n        uint256 _distributionEarnings,\r\n        uint256 _dlTicketCount,\r\n        uint256 _xzTicketCount,\r\n        uint256 _jcTicketCount\r\n    ){\r\n        uint256 _pid = addressMPid[_playerAddress];\r\n        Player storage _player = players[_pid.sub(1)];\r\n        _addr = _player.addr;\r\n        _name = _player.name;\r\n        _earnings = _player.earnings;\r\n        _ticketCount = _player.ticketCount;\r\n        _dividendEarnings = _player.dividendEarnings;\r\n        _distributionEarnings = _player.distributionEarnings;\r\n        _dlTicketCount = _player.dlTicketCount;\r\n        _xzTicketCount = _player.xzTicketCount;\r\n        _jcTicketCount = _player.jcTicketCount;\r\n    }\r\n\r\n    function addSystemUserEarnings(uint256 _money) private {\r\n        Player storage _player = players[0];\r\n        _player.earnings = _player.earnings.add(_money);\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(addressMPid[msg.sender] != 0);\r\n        Player storage _player = players[addressMPid[msg.sender].sub(1)];\r\n        _player.addr.transfer(_player.earnings);\r\n        _player.withdrawalAmount = _player.withdrawalAmount.add(_player.earnings);\r\n        _player.earnings = 0;\r\n        _player.distributionEarnings = 0;\r\n        _player.dividendEarnings = 0;\r\n    }\r\n\r\n    function makeMoney() public {\r\n        require(now > lotteryTime);\r\n        uint256 _pMoney = moonPrizePool.div(2);\r\n        Player storage _luckyPayer = players[luckyPayerId.sub(1)];\r\n        _luckyPayer.earnings = _luckyPayer.earnings.add(_pMoney);\r\n        uint256 _nextMoonPrizePool = moonPrizePool.div(100).mul(2);\r\n        uint256 _luckyCaptainMoney = moonPrizePool.div(100).mul(5);\r\n        uint256 _luckyCrewMoney = moonPrizePool.sub(_nextMoonPrizePool).sub(_luckyCaptainMoney).sub(_pMoney);\r\n        uint256 _no1Spaceship = getFastestSpaceship();\r\n        Spaceship storage _s = spaceships[_no1Spaceship];\r\n        uint256 _pid = addressMPid[_s.captain];\r\n        Player storage _pPayer = players[_pid.sub(1)];\r\n        _pPayer.earnings = _pPayer.earnings.add(_luckyCaptainMoney);\r\n\r\n        uint256 _eachMoney = _getLuckySpaceshipMoney(_no1Spaceship, _luckyCrewMoney);\r\n        for (uint i = 0; i < players.length; i++) {\r\n            Player storage _tmpP = players[i];\r\n            if (_no1Spaceship == 0) {\r\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\r\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\r\n            }\r\n            if (_no1Spaceship == 1) {\r\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\r\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\r\n            }\r\n            if (_no1Spaceship == 2) {\r\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\r\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\r\n            }\r\n            _tmpP.dlTicketCount = 0;\r\n            _tmpP.xzTicketCount = 0;\r\n            _tmpP.jcTicketCount = 0;\r\n            _tmpP.ticketCount = 0;\r\n        }\r\n        _initSpaceship();\r\n        totalTicketCount = 0;\r\n        airdropPrizePool = 0;\r\n        moonPrizePool = _nextMoonPrizePool;\r\n        lotteryTime = now + 12 hours;\r\n        spaceshipPrice = 0.01 ether;\r\n        maxAirDropAddress = pidXAddress[1];\r\n        maxTotalTicket = 0;\r\n        round = round.add(1);\r\n        luckyPayerId = 1;\r\n    }\r\n\r\n    function _initSpaceship() private {\r\n        for (uint i = 0; i < spaceships.length; i++) {\r\n            Spaceship storage _s = spaceships[i];\r\n            _s.captain = pidXAddress[1];\r\n            _s.ticketCount = 0;\r\n            _s.spaceshipPrice = 15 ether;\r\n            _s.speed = 100000;\r\n        }\r\n\r\n    }\r\n\r\n    function _getLuckySpaceshipMoney(uint256 _spaceshipId, uint256 _luckyMoney) private view returns (uint256){\r\n        Spaceship memory _s = spaceships[_spaceshipId];\r\n        uint256 _eachLuckyMoney = _luckyMoney.div(_s.ticketCount);\r\n        return _eachLuckyMoney;\r\n\r\n    }\r\n\r\n    function getFastestSpaceship() private view returns (uint256){\r\n        Spaceship memory _dlSpaceship = spaceships[0];\r\n        Spaceship memory _xzSpaceship = spaceships[1];\r\n        Spaceship memory _jcSpaceship = spaceships[2];\r\n\r\n        uint256 _maxSpeed;\r\n        if (_jcSpaceship.speed >= _xzSpaceship.speed) {\r\n            if (_jcSpaceship.speed >= _dlSpaceship.speed) {\r\n                _maxSpeed = 2;\r\n            } else {\r\n                _maxSpeed = 0;\r\n            }\r\n        } else {\r\n            if (_xzSpaceship.speed >= _dlSpaceship.speed) {\r\n                _maxSpeed = 1;\r\n            } else {\r\n                _maxSpeed = 0;\r\n            }\r\n        }\r\n        return _maxSpeed;\r\n\r\n    }\r\n\r\n    function getGameInfo() public view returns (\r\n        uint256 _totalTicketCount,\r\n        uint256 _airdropPrizePool,\r\n        uint256 _moonPrizePool,\r\n        uint256 _lotteryTime,\r\n        uint256 _nowTime,\r\n        uint256 _spaceshipPrice,\r\n        uint256 _round,\r\n        uint256 _totalEarnings,\r\n        uint256 _totalDividendEarnings\r\n    ){\r\n        _totalTicketCount = totalTicketCount;\r\n        _airdropPrizePool = airdropPrizePool;\r\n        _moonPrizePool = moonPrizePool;\r\n        _lotteryTime = lotteryTime;\r\n        _nowTime = now;\r\n        _spaceshipPrice = spaceshipPrice;\r\n        _round = round;\r\n        _totalEarnings = totalEarnings;\r\n        _totalDividendEarnings = totalDividendEarnings;\r\n    }\r\n\r\n    function _updateSpaceshipPrice(uint256 _spaceshipId) internal {\r\n        spaceships[_spaceshipId].spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice.add(\r\n            spaceships[_spaceshipId].spaceshipPrice.mul(3).div(10));\r\n    }\r\n\r\n    function campaignCaptain(uint _spaceshipId) external payable {\r\n        require(now < lotteryTime);\r\n        require(msg.value == spaceships[_spaceshipId].spaceshipPrice);\r\n        if (addressMPid[msg.sender] == 0) {\r\n            uint256 playerArrayIndex = players.push(Player(msg.sender, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\r\n            addressMPid[msg.sender] = playerArrayIndex;\r\n            pidXAddress[playerArrayIndex] = msg.sender;\r\n            playerCount = players.length;\r\n        }\r\n        spaceships[_spaceshipId].captain.transfer(msg.value);\r\n        spaceships[_spaceshipId].captain = msg.sender;\r\n        _updateSpaceshipPrice(_spaceshipId);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b > 0);\r\n        // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"checkName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGameInfo\",\"outputs\":[{\"name\":\"_totalTicketCount\",\"type\":\"uint256\"},{\"name\":\"_airdropPrizePool\",\"type\":\"uint256\"},{\"name\":\"_moonPrizePool\",\"type\":\"uint256\"},{\"name\":\"_lotteryTime\",\"type\":\"uint256\"},{\"name\":\"_nowTime\",\"type\":\"uint256\"},{\"name\":\"_spaceshipPrice\",\"type\":\"uint256\"},{\"name\":\"_round\",\"type\":\"uint256\"},{\"name\":\"_totalEarnings\",\"type\":\"uint256\"},{\"name\":\"_totalDividendEarnings\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spaceshipId\",\"type\":\"uint256\"}],\"name\":\"campaignCaptain\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticketCount\",\"type\":\"uint256\"},{\"name\":\"_spaceshipNo\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"buyTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setYxName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticketCount\",\"type\":\"uint256\"},{\"name\":\"_spaceshipNo\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"buyTicketByEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"}],\"name\":\"getPlayerInfo\",\"outputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_earnings\",\"type\":\"uint256\"},{\"name\":\"_ticketCount\",\"type\":\"uint256\"},{\"name\":\"_dividendEarnings\",\"type\":\"uint256\"},{\"name\":\"_distributionEarnings\",\"type\":\"uint256\"},{\"name\":\"_dlTicketCount\",\"type\":\"uint256\"},{\"name\":\"_xzTicketCount\",\"type\":\"uint256\"},{\"name\":\"_jcTicketCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNowTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_spaceshipId\",\"type\":\"uint256\"}],\"name\":\"getSpaceship\",\"outputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_speed\",\"type\":\"uint256\"},{\"name\":\"_captain\",\"type\":\"address\"},{\"name\":\"_ticketCount\",\"type\":\"uint256\"},{\"name\":\"_dividendRatio\",\"type\":\"uint256\"},{\"name\":\"_spaceshipPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"makeMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ponzimoon","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7fe1ef6f2bf1122428c597999100f89d383e8412aae0fd5ef177f0a3cd9cc1ad"}]}