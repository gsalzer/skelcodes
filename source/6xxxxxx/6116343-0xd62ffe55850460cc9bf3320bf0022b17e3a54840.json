{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract SmartRouletteToken\r\n{\r\n    function balanceOf( address who ) external view returns (uint256);\r\n    function transfer( address to, uint256 value) returns (bool);\r\n    function decimals()  external view returns (uint8);\r\n}\r\n\r\ncontract SaleTokens is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    SmartRouletteToken tokensContract;\r\n    bool isSale;\r\n    uint256 minInvest;\r\n\r\n    function SaleTokens(){\r\n        tokensContract = SmartRouletteToken(0xdca4ea5f5c154c4feaf22a38ecafb8c71dad816d);\r\n        isSale = true;\r\n        minInvest = 0.01 ether;\r\n    }\r\n\r\n    function stopSale() onlyOwner {\r\n        isSale = false;\r\n        if(tokensContract.balanceOf(this) > 0){\r\n            tokensContract.transfer(msg.sender, tokensContract.balanceOf(this));\r\n        }\r\n        if (this.balance > 0){\r\n            msg.sender.transfer(this.balance);\r\n        }\r\n    }\r\n\r\n    function withdraw() onlyOwner {\r\n        assert(this.balance > 0);\r\n        msg.sender.transfer(this.balance);\r\n    }\r\n\r\n    function getPrice(uint256 value) view public returns (uint256 price){\r\n        price = 0.00015 ether;\r\n        if (value >= 0.075 ether && value < 0.135 ether)\r\n        {\r\n            price = 0.000135 ether;\r\n        }\r\n        else if(value >= 0.135 ether && value < 0.25 ether)\r\n        {\r\n            price = 0.00012 ether;\r\n        }\r\n        else if(value >= 0.25 ether && value < 1 ether)\r\n        {\r\n            price = 0.00011 ether;\r\n        }\r\n        else if (value >= 1 ether)\r\n        {\r\n            price = 0.0001 ether;\r\n        }\r\n    }\r\n\r\n    function () payable {\r\n        assert(isSale);\r\n        assert(tokensContract.balanceOf(this) > 0);\r\n        assert(msg.value > minInvest);\r\n\r\n        uint256 countTokens = msg.value.mul(10**uint256(tokensContract.decimals())).div(getPrice(msg.value));\r\n        assert(tokensContract.balanceOf(this) >= countTokens);\r\n        tokensContract.transfer(msg.sender, countTokens);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SaleTokens","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://eb2c3721a6839d31cb557604d4c7620fe183590de8d1e344e82aec011c648102"}]}