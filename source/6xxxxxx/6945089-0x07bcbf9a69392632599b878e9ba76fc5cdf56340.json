{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ninterface IJoyToken  {\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n\tfunction approve(address _spender, uint256 _value) external returns (bool);\r\n\tfunction allowance(address _owner, address _spender) external view returns (uint256);\r\n\tfunction balanceOf(address who) external view returns (uint256);\r\n\tfunction transfer(address to, uint256 value) external returns (bool);\r\n\tfunction burnUnsold() external returns (bool);\r\n}\r\n\r\n\r\ncontract JoySale is Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tevent NewRound(uint256 round, uint256 at);\r\n\tevent Finish(uint256 at);\r\n\r\n\tuint256 constant round3Duration = 90 days;\r\n\tuint256 constant softCap = 140000000 * 10 ** 8; // $ 2.100.000\r\n\r\n\tIJoyToken public token;\r\n\r\n\tuint256 public round; // 1, 2 or 3. Rounds 1 and 3 are whitelisted. \r\n\tuint256 public round3StartAt;\r\n\tuint256 public tokensSold;\r\n\t\r\n\tbool isFinished;\r\n\tuint256 finishedAt;\r\n\r\n\tmapping(address => bool) public whiteListedWallets;\r\n\r\n\tconstructor(address _token) public {\r\n\t\trequire(_token != address(0));\r\n\t\ttoken = IJoyToken(_token);\r\n\t\tround = 1;\r\n\t\temit NewRound(1, now);\r\n\t}\r\n\r\n\tfunction addWalletToWhitelist(address _wallet) public onlyOwner returns (bool) {\r\n\t\twhiteListedWallets[_wallet] = true;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction removeWalletFromWhitelist(address _wallet) public onlyOwner returns (bool) {\r\n\t\twhiteListedWallets[_wallet] = false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction addWalletsToWhitelist(address[] _wallets) public onlyOwner returns (bool) {\r\n\t\tuint256 i = 0;\r\n\t\twhile (i < _wallets.length) {\r\n\t\t\twhiteListedWallets[_wallets[i]] = true;\r\n\t\t\ti += 1;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction removeWalletsFromWhitelist(address[] _wallets) public onlyOwner returns (bool) {\r\n\t\tuint256 i = 0;\r\n\t\twhile (i < _wallets.length) {\r\n\t\t\twhiteListedWallets[_wallets[i]] = false;\r\n\t\t\ti += 1;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction finishSale() public onlyOwner returns (bool) {\r\n\t\trequire ( (round3StartAt > 0 && now > (round3StartAt + round3Duration)) || token.balanceOf(address(this)) == 0);\r\n\t\trequire (!isFinished);\r\n\t\trequire (tokensSold >= softCap);\r\n\t\tisFinished = true;\r\n\t\tfinishedAt = now;\r\n\t\tif (token.balanceOf(address(this)) > 0) {\r\n\t\t\ttoken.burnUnsold();\r\n\t\t}\r\n\t\temit Finish(now);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction getEndDate() public view returns (uint256) {\r\n\t\treturn finishedAt;\r\n\r\n\t}\r\n\r\n\tfunction setRound(uint256 _round) public onlyOwner returns (bool) {\r\n\t\trequire (_round == 2 || _round == 3);\r\n\t\trequire (_round == round + 1);\r\n\r\n\t\tround = _round;\r\n\t\tif (_round == 3) {\r\n\t\t\tround3StartAt = now;\r\n\t\t}\r\n\t\temit NewRound(_round, now);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction sendTokens(address[] _recipients, uint256[] _values) onlyOwner public returns (bool) {\r\n\t \trequire(_recipients.length == _values.length);\r\n\t \trequire(!isFinished);\r\n\t \tuint256 i = 0;\r\n\t \twhile (i < _recipients.length) {\r\n\t \t\tif (round == 1 || round == 3) {\r\n\t \t\t\trequire(whiteListedWallets[_recipients[i]]);\r\n\t \t\t}\r\n\r\n\t \t\tif (_values[i] > 0) {\r\n\t \t\t\ttoken.transfer(_recipients[i], _values[i]);\r\n\t \t\t\ttokensSold = tokensSold.add(_values[i]);\r\n\t \t\t}\r\n\r\n\t \t\ti += 1;\r\n\t \t}\r\n\t \treturn true;\r\n\t}\r\n\r\n\tfunction sendBonusTokens(address[] _recipients, uint256[] _values) onlyOwner public returns (bool) {\r\n\t \trequire(_recipients.length == _values.length);\r\n\t \trequire(!isFinished);\r\n\t \tuint256 i = 0;\r\n\t \twhile (i < _recipients.length) {\r\n\t \t\tif (round == 1 || round == 3) {\r\n\t \t\t\trequire(whiteListedWallets[_recipients[i]]);\r\n\t \t\t}\r\n\r\n\t \t\tif (_values[i] > 0) {\r\n\t \t\t\ttoken.transfer(_recipients[i], _values[i]);\r\n\t \t\t}\r\n\r\n\t \t\ti += 1;\r\n\t \t}\r\n\t \treturn true;\r\n\t}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"round3StartAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"addWalletToWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListedWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"sendBonusTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"setRound\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"addWalletsToWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"removeWalletFromWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"removeWalletsFromWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"sendTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"Finish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"JoySale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000563ae84c211dae14f9eed81b46014b62fe34ea38","Library":"","SwarmSource":"bzzr://1fc017c8ff4cc9375065bed688f8214655517d28cc26453e6886147c5c1e67eb"}]}