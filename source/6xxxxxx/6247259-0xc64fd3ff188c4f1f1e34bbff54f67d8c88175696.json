{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) whitelist;\r\n    event AddedToWhitelist(address indexed account);\r\n    event RemovedFromWhitelist(address indexed account);\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function add(address _address) public onlyOwner {\r\n        whitelist[_address] = true;\r\n        emit AddedToWhitelist(_address);\r\n    }\r\n\r\n    function remove(address _address) public onlyOwner {\r\n        whitelist[_address] = false;\r\n        emit RemovedFromWhitelist(_address);\r\n    }\r\n\r\n    function isWhitelisted(address _address) public view returns(bool) {\r\n        return whitelist[_address];\r\n    }\r\n}\r\n\r\ncontract LockingContract is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event NotedTokens(address indexed _beneficiary, uint256 _tokenAmount);\r\n    event ReleasedTokens(address indexed _beneficiary);\r\n    event ReducedLockingTime(uint256 _newUnlockTime);\r\n\r\n    ERC20 public tokenContract;\r\n    mapping(address => uint256) public tokens;\r\n    uint256 public totalTokens;\r\n    uint256 public unlockTime;\r\n\r\n    function isLocked() public view returns(bool) {\r\n        return now < unlockTime;\r\n    }\r\n\r\n    modifier onlyWhenUnlocked() {\r\n        require(!isLocked());\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenLocked() {\r\n        require(isLocked());\r\n        _;\r\n    }\r\n\r\n    function LockingContract(ERC20 _tokenContract, uint256 _unlockTime) public {\r\n        require(_unlockTime > now);\r\n        require(address(_tokenContract) != 0x0);\r\n        unlockTime = _unlockTime;\r\n        tokenContract = _tokenContract;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return tokens[_owner];\r\n    }\r\n\r\n    // Should only be done from another contract.\r\n    // To ensure that the LockingContract can release all noted tokens later,\r\n    // one should mint/transfer tokens to the LockingContract's account prior to noting\r\n    function noteTokens(address _beneficiary, uint256 _tokenAmount) external onlyOwner onlyWhenLocked {\r\n        uint256 tokenBalance = tokenContract.balanceOf(this);\r\n        require(tokenBalance >= totalTokens.add(_tokenAmount));\r\n\r\n        tokens[_beneficiary] = tokens[_beneficiary].add(_tokenAmount);\r\n        totalTokens = totalTokens.add(_tokenAmount);\r\n        emit NotedTokens(_beneficiary, _tokenAmount);\r\n    }\r\n\r\n    function releaseTokens(address _beneficiary) public onlyWhenUnlocked {\r\n        require(msg.sender == owner || msg.sender == _beneficiary);\r\n        uint256 amount = tokens[_beneficiary];\r\n        tokens[_beneficiary] = 0;\r\n        require(tokenContract.transfer(_beneficiary, amount)); \r\n        totalTokens = totalTokens.sub(amount);\r\n        emit ReleasedTokens(_beneficiary);\r\n    }\r\n\r\n    function reduceLockingTime(uint256 _newUnlockTime) public onlyOwner onlyWhenLocked {\r\n        require(_newUnlockTime >= now);\r\n        require(_newUnlockTime < unlockTime);\r\n        unlockTime = _newUnlockTime;\r\n        emit ReducedLockingTime(_newUnlockTime);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract CrowdfundableToken is MintableToken {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public cap;\r\n\r\n    function CrowdfundableToken(uint256 _cap, string _name, string _symbol, uint8 _decimals) public {\r\n        require(_cap > 0);\r\n        require(bytes(_name).length > 0);\r\n        require(bytes(_symbol).length > 0);\r\n        cap = _cap;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    // override\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        require(totalSupply_.add(_amount) <= cap);\r\n        return super.mint(_to, _amount);\r\n    }\r\n\r\n    // override\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(mintingFinished == true);\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    // override\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(mintingFinished == true);\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function burn(uint amount) public {\r\n        totalSupply_ = totalSupply_.sub(amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n    }\r\n}\r\n\r\ncontract AllSporterCoin is CrowdfundableToken {\r\n    constructor() public \r\n        CrowdfundableToken(260000000 * (10**18), \"AllSporter Coin\", \"ALL\", 18) {\r\n    }\r\n}\r\n\r\n\r\ncontract Minter is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    /* --- EVENTS --- */\r\n\r\n    event Minted(address indexed account, uint etherAmount, uint tokenAmount);\r\n    event Reserved(uint etherAmount);\r\n    event MintedReserved(address indexed account, uint etherAmount, uint tokenAmount);\r\n    event Unreserved(uint etherAmount);\r\n\r\n    /* --- FIELDS --- */\r\n\r\n    CrowdfundableToken public token;\r\n    uint public saleEtherCap;\r\n    uint public confirmedSaleEther;\r\n    uint public reservedSaleEther;\r\n\r\n    /* --- MODIFIERS --- */\r\n\r\n    modifier onlyInUpdatedState() {\r\n        updateState();\r\n        _;\r\n    }\r\n\r\n    modifier upToSaleEtherCap(uint additionalEtherAmount) {\r\n        uint totalEtherAmount = confirmedSaleEther.add(reservedSaleEther).add(additionalEtherAmount);\r\n        require(totalEtherAmount <= saleEtherCap);\r\n        _;\r\n    }\r\n\r\n    modifier onlyApprovedMinter() {\r\n        require(canMint(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier atLeastMinimumAmount(uint etherAmount) {\r\n        require(etherAmount >= getMinimumContribution());\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidAddress(address account) {\r\n        require(account != 0x0);\r\n        _;\r\n    }\r\n\r\n    /* --- CONSTRUCTOR --- */\r\n\r\n    constructor(CrowdfundableToken _token, uint _saleEtherCap) public onlyValidAddress(address(_token)) {\r\n        require(_saleEtherCap > 0);\r\n\r\n        token = _token;\r\n        saleEtherCap = _saleEtherCap;\r\n    }\r\n\r\n    /* --- PUBLIC / EXTERNAL METHODS --- */\r\n\r\n    function transferTokenOwnership() external onlyOwner {\r\n        token.transferOwnership(owner);\r\n    }\r\n\r\n    function reserve(uint etherAmount) external\r\n        onlyInUpdatedState\r\n        onlyApprovedMinter\r\n        upToSaleEtherCap(etherAmount)\r\n        atLeastMinimumAmount(etherAmount)\r\n    {\r\n        reservedSaleEther = reservedSaleEther.add(etherAmount);\r\n        updateState();\r\n        emit Reserved(etherAmount);\r\n    }\r\n\r\n    function mintReserved(address account, uint etherAmount, uint tokenAmount) external\r\n        onlyInUpdatedState\r\n        onlyApprovedMinter\r\n    {\r\n        reservedSaleEther = reservedSaleEther.sub(etherAmount);\r\n        confirmedSaleEther = confirmedSaleEther.add(etherAmount);\r\n        require(token.mint(account, tokenAmount));\r\n        updateState();\r\n        emit MintedReserved(account, etherAmount, tokenAmount);\r\n    }\r\n\r\n    function unreserve(uint etherAmount) public\r\n        onlyInUpdatedState\r\n        onlyApprovedMinter\r\n    {\r\n        reservedSaleEther = reservedSaleEther.sub(etherAmount);\r\n        updateState();\r\n        emit Unreserved(etherAmount);\r\n    }\r\n\r\n    function mint(address account, uint etherAmount, uint tokenAmount) public\r\n        onlyInUpdatedState\r\n        onlyApprovedMinter\r\n        upToSaleEtherCap(etherAmount)\r\n    {\r\n        confirmedSaleEther = confirmedSaleEther.add(etherAmount);\r\n        require(token.mint(account, tokenAmount));\r\n        updateState();\r\n        emit Minted(account, etherAmount, tokenAmount);\r\n    }\r\n\r\n    // abstract\r\n    function getMinimumContribution() public view returns(uint);\r\n\r\n    // abstract\r\n    function updateState() public;\r\n\r\n    // abstract\r\n    function canMint(address sender) public view returns(bool);\r\n\r\n    // abstract\r\n    function getTokensForEther(uint etherAmount) public view returns(uint);\r\n}\r\n\r\ncontract DeferredKyc is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    /* --- EVENTS --- */\r\n\r\n    event AddedToKyc(address indexed investor, uint etherAmount, uint tokenAmount);\r\n    event Approved(address indexed investor, uint etherAmount, uint tokenAmount);\r\n    event Rejected(address indexed investor, uint etherAmount, uint tokenAmount);\r\n    event RejectedWithdrawn(address indexed investor, uint etherAmount);\r\n    event ApproverTransferred(address newApprover);\r\n    event TreasuryUpdated(address newTreasury);\r\n\r\n    /* --- FIELDS --- */\r\n\r\n    address public treasury;\r\n    Minter public minter;\r\n    address public approver;\r\n    mapping(address => uint) public etherInProgress;\r\n    mapping(address => uint) public tokenInProgress;\r\n    mapping(address => uint) public etherRejected;\r\n\r\n    /* --- MODIFIERS --- */ \r\n\r\n    modifier onlyApprover() {\r\n        require(msg.sender == approver);\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidAddress(address account) {\r\n        require(account != 0x0);\r\n        _;\r\n    }\r\n\r\n    /* --- CONSTRUCTOR --- */\r\n\r\n    constructor(Minter _minter, address _approver, address _treasury)\r\n        public\r\n        onlyValidAddress(address(_minter))\r\n        onlyValidAddress(_approver)\r\n        onlyValidAddress(_treasury)\r\n    {\r\n        minter = _minter;\r\n        approver = _approver;\r\n        treasury = _treasury;\r\n    }\r\n\r\n    /* --- PUBLIC / EXTERNAL METHODS --- */\r\n\r\n    function updateTreasury(address newTreasury) external onlyOwner {\r\n        treasury = newTreasury;\r\n        emit TreasuryUpdated(newTreasury);\r\n    }\r\n\r\n    function addToKyc(address investor) external payable onlyOwner {\r\n        minter.reserve(msg.value);\r\n        uint tokenAmount = minter.getTokensForEther(msg.value);\r\n        require(tokenAmount > 0);\r\n        emit AddedToKyc(investor, msg.value, tokenAmount);\r\n\r\n        etherInProgress[investor] = etherInProgress[investor].add(msg.value);\r\n        tokenInProgress[investor] = tokenInProgress[investor].add(tokenAmount);\r\n    }\r\n\r\n    function approve(address investor) external onlyApprover {\r\n        minter.mintReserved(investor, etherInProgress[investor], tokenInProgress[investor]);\r\n        emit Approved(investor, etherInProgress[investor], tokenInProgress[investor]);\r\n        \r\n        uint value = etherInProgress[investor];\r\n        etherInProgress[investor] = 0;\r\n        tokenInProgress[investor] = 0;\r\n        treasury.transfer(value);\r\n    }\r\n\r\n    function reject(address investor) external onlyApprover {\r\n        minter.unreserve(etherInProgress[investor]);\r\n        emit Rejected(investor, etherInProgress[investor], tokenInProgress[investor]);\r\n\r\n        etherRejected[investor] = etherRejected[investor].add(etherInProgress[investor]);\r\n        etherInProgress[investor] = 0;\r\n        tokenInProgress[investor] = 0;\r\n    }\r\n\r\n    function withdrawRejected() external {\r\n        uint value = etherRejected[msg.sender];\r\n        etherRejected[msg.sender] = 0;\r\n        (msg.sender).transfer(value);\r\n        emit RejectedWithdrawn(msg.sender, value);\r\n    }\r\n\r\n    function forceWithdrawRejected(address investor) external onlyApprover {\r\n        uint value = etherRejected[investor];\r\n        etherRejected[investor] = 0;\r\n        (investor).transfer(value);\r\n        emit RejectedWithdrawn(investor, value);\r\n    }\r\n\r\n    function transferApprover(address newApprover) external onlyApprover {\r\n        approver = newApprover;\r\n        emit ApproverTransferred(newApprover);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"etherRejected\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"approver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"forceWithdrawRejected\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"addToKyc\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newApprover\",\"type\":\"address\"}],\"name\":\"transferApprover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"reject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"etherInProgress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRejected\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInProgress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"},{\"name\":\"_approver\",\"type\":\"address\"},{\"name\":\"_treasury\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"AddedToKyc\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Rejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"RejectedWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newApprover\",\"type\":\"address\"}],\"name\":\"ApproverTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"DeferredKyc","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000006ed0e1c20bf3ff8384570de742cf98cd08f2a012000000000000000000000000f0f32c551ee95ac456757d0f71a097d5c217ee67000000000000000000000000e0f9e3fc3c1d32d2cce5e12cd395e1394c2e70f7","Library":"","SwarmSource":"bzzr://57952e8a74f771996848d60f7f2854b1325954f0ba09b0e6947777c98ed8f4a3"}]}