{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    require(c / a == b, \"Overflow - Multiplication\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"Underflow - Subtraction\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    require(c >= a, \"Overflow - Addition\");\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary Contract {\r\n\r\n  using SafeMath for uint;\r\n\r\n  // Modifiers: //\r\n\r\n  // Runs two functions before and after a function -\r\n  modifier conditions(function () pure first, function () pure last) {\r\n    first();\r\n    _;\r\n    last();\r\n  }\r\n\r\n  bytes32 internal constant EXEC_PERMISSIONS = keccak256('script_exec_permissions');\r\n\r\n  // Sets up contract execution - reads execution id and sender from storage and\r\n  // places in memory, creating getters. Calling this function should be the first\r\n  // action an application does as part of execution, as it sets up memory for\r\n  // execution. Additionally, application functions in the main file should be\r\n  // external, so that memory is not touched prior to calling this function.\r\n  // The 3rd slot allocated will hold a pointer to a storage buffer, which will\r\n  // be reverted to abstract storage to store data, emit events, and forward\r\n  // wei on behalf of the application.\r\n  function authorize(address _script_exec) internal view {\r\n    // Initialize memory\r\n    initialize();\r\n\r\n    // Check that the sender is authorized as a script exec contract for this exec id\r\n    bytes32 perms = EXEC_PERMISSIONS;\r\n    bool authorized;\r\n    assembly {\r\n      // Place the script exec address at 0, and the exec permissions seed after it\r\n      mstore(0, _script_exec)\r\n      mstore(0x20, perms)\r\n      // Hash the resulting 0x34 bytes, and place back into memory at 0\r\n      mstore(0, keccak256(0x0c, 0x34))\r\n      // Place the exec id after the hash -\r\n      mstore(0x20, mload(0x80))\r\n      // Hash the previous hash with the execution id, and check the result\r\n      authorized := sload(keccak256(0, 0x40))\r\n    }\r\n    if (!authorized)\r\n      revert(\"Sender is not authorized as a script exec address\");\r\n  }\r\n\r\n  // Sets up contract execution when initializing an instance of the application\r\n  // First, reads execution id and sender from storage (execution id should be 0xDEAD),\r\n  // then places them in memory, creating getters. Calling this function should be the first\r\n  // action an application does as part of execution, as it sets up memory for\r\n  // execution. Additionally, application functions in the main file should be\r\n  // external, so that memory is not touched prior to calling this function.\r\n  // The 3rd slot allocated will hold a pointer to a storage buffer, which will\r\n  // be reverted to abstract storage to store data, emit events, and forward\r\n  // wei on behalf of the application.\r\n  function initialize() internal view {\r\n    // No memory should have been allocated yet - expect the free memory pointer\r\n    // to point to 0x80 - and throw if it does not\r\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\r\n    // Next, set up memory for execution\r\n    assembly {\r\n      mstore(0x80, sload(0))     // Execution id, read from storage\r\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\r\n      mstore(0xc0, 0)            // Pointer to storage buffer\r\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\r\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\r\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\r\n      mstore(0x140, 0)           // Number of events pushed to buffer\r\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\r\n\r\n      // Update free memory pointer -\r\n      mstore(0x40, 0x180)\r\n    }\r\n    // Ensure that the sender and execution id returned from storage are expected values -\r\n    assert(execID() != bytes32(0) && sender() != address(0));\r\n  }\r\n\r\n  // Calls the passed-in function, performing a memory state check before and after the check\r\n  // is executed.\r\n  function checks(function () view _check) conditions(validState, validState) internal view {\r\n    _check();\r\n  }\r\n\r\n  // Calls the passed-in function, performing a memory state check before and after the check\r\n  // is executed.\r\n  function checks(function () pure _check) conditions(validState, validState) internal pure {\r\n    _check();\r\n  }\r\n\r\n  // Ensures execution completed successfully, and reverts the created storage buffer\r\n  // back to the sender.\r\n  function commit() conditions(validState, none) internal pure {\r\n    // Check value of storage buffer pointer - should be at least 0x180\r\n    bytes32 ptr = buffPtr();\r\n    require(ptr >= 0x180, \"Invalid buffer pointer\");\r\n\r\n    assembly {\r\n      // Get the size of the buffer\r\n      let size := mload(add(0x20, ptr))\r\n      mstore(ptr, 0x20) // Place dynamic data offset before buffer\r\n      // Revert to storage\r\n      revert(ptr, add(0x40, size))\r\n    }\r\n  }\r\n\r\n  // Helpers: //\r\n\r\n  // Checks to ensure the application was correctly executed -\r\n  function validState() private pure {\r\n    if (freeMem() < 0x180)\r\n      revert('Expected Contract.execute()');\r\n\r\n    if (buffPtr() != 0 && buffPtr() < 0x180)\r\n      revert('Invalid buffer pointer');\r\n\r\n    assert(execID() != bytes32(0) && sender() != address(0));\r\n  }\r\n\r\n  // Returns a pointer to the execution storage buffer -\r\n  function buffPtr() private pure returns (bytes32 ptr) {\r\n    assembly { ptr := mload(0xc0) }\r\n  }\r\n\r\n  // Returns the location pointed to by the free memory pointer -\r\n  function freeMem() private pure returns (bytes32 ptr) {\r\n    assembly { ptr := mload(0x40) }\r\n  }\r\n\r\n  // Returns the current storage action\r\n  function currentAction() private pure returns (bytes4 action) {\r\n    if (buffPtr() == bytes32(0))\r\n      return bytes4(0);\r\n\r\n    assembly { action := mload(0xe0) }\r\n  }\r\n\r\n  // If the current action is not storing, reverts\r\n  function isStoring() private pure {\r\n    if (currentAction() != STORES)\r\n      revert('Invalid current action - expected STORES');\r\n  }\r\n\r\n  // If the current action is not emitting, reverts\r\n  function isEmitting() private pure {\r\n    if (currentAction() != EMITS)\r\n      revert('Invalid current action - expected EMITS');\r\n  }\r\n\r\n  // If the current action is not paying, reverts\r\n  function isPaying() private pure {\r\n    if (currentAction() != PAYS)\r\n      revert('Invalid current action - expected PAYS');\r\n  }\r\n\r\n  // Initializes a storage buffer in memory -\r\n  function startBuffer() private pure {\r\n    assembly {\r\n      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\r\n      let ptr := msize()\r\n      mstore(0xc0, ptr)\r\n      // Clear bytes at pointer -\r\n      mstore(ptr, 0)            // temp ptr\r\n      mstore(add(0x20, ptr), 0) // buffer length\r\n      // Update free memory pointer -\r\n      mstore(0x40, add(0x40, ptr))\r\n      // Set expected next function to 'NONE' -\r\n      mstore(0x100, 1)\r\n    }\r\n  }\r\n\r\n  // Checks whether or not it is valid to create a STORES action request -\r\n  function validStoreBuff() private pure {\r\n    // Get pointer to current buffer - if zero, create a new buffer -\r\n    if (buffPtr() == bytes32(0))\r\n      startBuffer();\r\n\r\n    // Ensure that the current action is not 'storing', and that the buffer has not already\r\n    // completed a STORES action -\r\n    if (stored() != 0 || currentAction() == STORES)\r\n      revert('Duplicate request - stores');\r\n  }\r\n\r\n  // Checks whether or not it is valid to create an EMITS action request -\r\n  function validEmitBuff() private pure {\r\n    // Get pointer to current buffer - if zero, create a new buffer -\r\n    if (buffPtr() == bytes32(0))\r\n      startBuffer();\r\n\r\n    // Ensure that the current action is not 'emitting', and that the buffer has not already\r\n    // completed an EMITS action -\r\n    if (emitted() != 0 || currentAction() == EMITS)\r\n      revert('Duplicate request - emits');\r\n  }\r\n\r\n  // Checks whether or not it is valid to create a PAYS action request -\r\n  function validPayBuff() private pure {\r\n    // Get pointer to current buffer - if zero, create a new buffer -\r\n    if (buffPtr() == bytes32(0))\r\n      startBuffer();\r\n\r\n    // Ensure that the current action is not 'paying', and that the buffer has not already\r\n    // completed an PAYS action -\r\n    if (paid() != 0 || currentAction() == PAYS)\r\n      revert('Duplicate request - pays');\r\n  }\r\n\r\n  // Placeholder function when no pre or post condition for a function is needed\r\n  function none() private pure { }\r\n\r\n  // Runtime getters: //\r\n\r\n  // Returns the execution id from memory -\r\n  function execID() internal pure returns (bytes32 exec_id) {\r\n    assembly { exec_id := mload(0x80) }\r\n    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\r\n  }\r\n\r\n  // Returns the original sender from memory -\r\n  function sender() internal pure returns (address addr) {\r\n    assembly { addr := mload(0xa0) }\r\n    require(addr != address(0), \"Sender address overwritten, or not read\");\r\n  }\r\n\r\n  // Reading from storage: //\r\n\r\n  // Reads from storage, resolving the passed-in location to its true location in storage\r\n  // by hashing with the exec id. Returns the data read from that location\r\n  function read(bytes32 _location) internal view returns (bytes32 data) {\r\n    data = keccak256(_location, execID());\r\n    assembly { data := sload(data) }\r\n  }\r\n\r\n  // Storing data, emitting events, and forwarding payments: //\r\n\r\n  bytes4 internal constant EMITS = bytes4(keccak256('Emit((bytes32[],bytes)[])'));\r\n  bytes4 internal constant STORES = bytes4(keccak256('Store(bytes32[])'));\r\n  bytes4 internal constant PAYS = bytes4(keccak256('Pay(bytes32[])'));\r\n  bytes4 internal constant THROWS = bytes4(keccak256('Error(string)'));\r\n\r\n  // Function enums -\r\n  enum NextFunction {\r\n    INVALID, NONE, STORE_DEST, VAL_SET, VAL_INC, VAL_DEC, EMIT_LOG, PAY_DEST, PAY_AMT\r\n  }\r\n\r\n  // Checks that a call pushing a storage destination to the buffer is expected and valid\r\n  function validStoreDest() private pure {\r\n    // Ensure that the next function expected pushes a storage destination -\r\n    if (expected() != NextFunction.STORE_DEST)\r\n      revert('Unexpected function order - expected storage destination to be pushed');\r\n\r\n    // Ensure that the current buffer is pushing STORES actions -\r\n    isStoring();\r\n  }\r\n\r\n  // Checks that a call pushing a storage value to the buffer is expected and valid\r\n  function validStoreVal() private pure {\r\n    // Ensure that the next function expected pushes a storage value -\r\n    if (\r\n      expected() != NextFunction.VAL_SET &&\r\n      expected() != NextFunction.VAL_INC &&\r\n      expected() != NextFunction.VAL_DEC\r\n    ) revert('Unexpected function order - expected storage value to be pushed');\r\n\r\n    // Ensure that the current buffer is pushing STORES actions -\r\n    isStoring();\r\n  }\r\n\r\n  // Checks that a call pushing a payment destination to the buffer is expected and valid\r\n  function validPayDest() private pure {\r\n    // Ensure that the next function expected pushes a payment destination -\r\n    if (expected() != NextFunction.PAY_DEST)\r\n      revert('Unexpected function order - expected payment destination to be pushed');\r\n\r\n    // Ensure that the current buffer is pushing PAYS actions -\r\n    isPaying();\r\n  }\r\n\r\n  // Checks that a call pushing a payment amount to the buffer is expected and valid\r\n  function validPayAmt() private pure {\r\n    // Ensure that the next function expected pushes a payment amount -\r\n    if (expected() != NextFunction.PAY_AMT)\r\n      revert('Unexpected function order - expected payment amount to be pushed');\r\n\r\n    // Ensure that the current buffer is pushing PAYS actions -\r\n    isPaying();\r\n  }\r\n\r\n  // Checks that a call pushing an event to the buffer is expected and valid\r\n  function validEvent() private pure {\r\n    // Ensure that the next function expected pushes an event -\r\n    if (expected() != NextFunction.EMIT_LOG)\r\n      revert('Unexpected function order - expected event to be pushed');\r\n\r\n    // Ensure that the current buffer is pushing EMITS actions -\r\n    isEmitting();\r\n  }\r\n\r\n  // Begins creating a storage buffer - values and locations pushed will be committed\r\n  // to storage at the end of execution\r\n  function storing() conditions(validStoreBuff, isStoring) internal pure {\r\n    bytes4 action_req = STORES;\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\r\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the STORES action\r\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\r\n      // Increment buffer length - 0x24 plus the previous length\r\n      mstore(ptr, add(0x24, mload(ptr)))\r\n      // Set the current action being executed (STORES) -\r\n      mstore(0xe0, action_req)\r\n      // Set the expected next function - STORE_DEST\r\n      mstore(0x100, 2)\r\n      // Set a pointer to the length of the current request within the buffer\r\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  // Sets a passed in location to a value passed in via 'to'\r\n  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push storage destination to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - VAL_SET\r\n      mstore(0x100, 3)\r\n      // Increment STORES action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of storage slots pushed to -\r\n      mstore(0x120, add(1, mload(0x120)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n    return _field;\r\n  }\r\n\r\n  // Sets a previously-passed-in destination in storage to the value\r\n  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push storage value to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _val)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - STORE_DEST\r\n      mstore(0x100, 2)\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  // Sets a previously-passed-in destination in storage to the value\r\n  function to(bytes32 _field, uint _val) internal pure {\r\n    to(_field, bytes32(_val));\r\n  }\r\n\r\n  // Sets a previously-passed-in destination in storage to the value\r\n  function to(bytes32 _field, address _val) internal pure {\r\n    to(_field, bytes32(_val));\r\n  }\r\n\r\n  // Sets a previously-passed-in destination in storage to the value\r\n  function to(bytes32 _field, bool _val) internal pure {\r\n    to(\r\n      _field,\r\n      _val ? bytes32(1) : bytes32(0)\r\n    );\r\n  }\r\n\r\n  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\r\n    // Read value stored at the location in storage -\r\n    val = keccak256(_field, execID());\r\n    assembly {\r\n      val := sload(val)\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push storage destination to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - VAL_INC\r\n      mstore(0x100, 4)\r\n      // Increment STORES action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of storage slots pushed to -\r\n      mstore(0x120, add(1, mload(0x120)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n    return val;\r\n  }\r\n\r\n  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\r\n    // Read value stored at the location in storage -\r\n    val = keccak256(_field, execID());\r\n    assembly {\r\n      val := sload(val)\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push storage destination to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - VAL_DEC\r\n      mstore(0x100, 5)\r\n      // Increment STORES action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of storage slots pushed to -\r\n      mstore(0x120, add(1, mload(0x120)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n    return val;\r\n  }\r\n\r\n  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\r\n    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\r\n    // If it is VAL_DEC, perform safe-sub on the value\r\n    if (expected() == NextFunction.VAL_INC)\r\n      _amt = _amt.add(uint(_val));\r\n    else if (expected() == NextFunction.VAL_DEC)\r\n      _amt = uint(_val).sub(_amt);\r\n    else\r\n      revert('Expected VAL_INC or VAL_DEC');\r\n\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push storage value to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - STORE_DEST\r\n      mstore(0x100, 2)\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  // Decreases the value at some field by a maximum amount, and sets it to 0 if there will be underflow\r\n  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\r\n    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\r\n    // _val and _amt, to a minimum of 0\r\n    if (expected() == NextFunction.VAL_DEC) {\r\n      if (_amt >= uint(_val))\r\n        _amt = 0;\r\n      else\r\n        _amt = uint(_val).sub(_amt);\r\n    } else {\r\n      revert('Expected VAL_DEC');\r\n    }\r\n\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push storage value to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - STORE_DEST\r\n      mstore(0x100, 2)\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  // Begins creating an event log buffer - topics and data pushed will be emitted by\r\n  // storage at the end of execution\r\n  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\r\n    bytes4 action_req = EMITS;\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\r\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the EMITS action\r\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\r\n      // Increment buffer length - 0x24 plus the previous length\r\n      mstore(ptr, add(0x24, mload(ptr)))\r\n      // Set the current action being executed (EMITS) -\r\n      mstore(0xe0, action_req)\r\n      // Set the expected next function - EMIT_LOG\r\n      mstore(0x100, 6)\r\n      // Set a pointer to the length of the current request within the buffer\r\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push 0 to the end of the buffer - event will have 0 topics\r\n      mstore(add(0x20, add(ptr, mload(ptr))), 0)\r\n      // If _data is zero, set data size to 0 in buffer and push -\r\n      if eq(_data, 0) {\r\n        mstore(add(0x40, add(ptr, mload(ptr))), 0)\r\n        // Increment buffer length - 0x40 plus the original length\r\n        mstore(ptr, add(0x40, mload(ptr)))\r\n      }\r\n      // If _data is not zero, set size to 0x20 and push to buffer -\r\n      if iszero(eq(_data, 0)) {\r\n        // Push data size (0x20) to the end of the buffer\r\n        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\r\n        // Push data to the end of the buffer\r\n        mstore(add(0x60, add(ptr, mload(ptr))), _data)\r\n        // Increment buffer length - 0x60 plus the original length\r\n        mstore(ptr, add(0x60, mload(ptr)))\r\n      }\r\n      // Increment EMITS action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of events pushed to buffer -\r\n      mstore(0x140, add(1, mload(0x140)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push 1 to the end of the buffer - event will have 1 topic\r\n      mstore(add(0x20, add(ptr, mload(ptr))), 1)\r\n      // Push topic to end of buffer\r\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\r\n      // If _data is zero, set data size to 0 in buffer and push -\r\n      if eq(_data, 0) {\r\n        mstore(add(0x60, add(ptr, mload(ptr))), 0)\r\n        // Increment buffer length - 0x60 plus the original length\r\n        mstore(ptr, add(0x60, mload(ptr)))\r\n      }\r\n      // If _data is not zero, set size to 0x20 and push to buffer -\r\n      if iszero(eq(_data, 0)) {\r\n        // Push data size (0x20) to the end of the buffer\r\n        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\r\n        // Push data to the end of the buffer\r\n        mstore(add(0x80, add(ptr, mload(ptr))), _data)\r\n        // Increment buffer length - 0x80 plus the original length\r\n        mstore(ptr, add(0x80, mload(ptr)))\r\n      }\r\n      // Increment EMITS action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of events pushed to buffer -\r\n      mstore(0x140, add(1, mload(0x140)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push 2 to the end of the buffer - event will have 2 topics\r\n      mstore(add(0x20, add(ptr, mload(ptr))), 2)\r\n      // Push topics to end of buffer\r\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\r\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\r\n      // If _data is zero, set data size to 0 in buffer and push -\r\n      if eq(_data, 0) {\r\n        mstore(add(0x80, add(ptr, mload(ptr))), 0)\r\n        // Increment buffer length - 0x80 plus the original length\r\n        mstore(ptr, add(0x80, mload(ptr)))\r\n      }\r\n      // If _data is not zero, set size to 0x20 and push to buffer -\r\n      if iszero(eq(_data, 0)) {\r\n        // Push data size (0x20) to the end of the buffer\r\n        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\r\n        // Push data to the end of the buffer\r\n        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\r\n        // Increment buffer length - 0xa0 plus the original length\r\n        mstore(ptr, add(0xa0, mload(ptr)))\r\n      }\r\n      // Increment EMITS action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of events pushed to buffer -\r\n      mstore(0x140, add(1, mload(0x140)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push 3 to the end of the buffer - event will have 3 topics\r\n      mstore(add(0x20, add(ptr, mload(ptr))), 3)\r\n      // Push topics to end of buffer\r\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\r\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\r\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\r\n      // If _data is zero, set data size to 0 in buffer and push -\r\n      if eq(_data, 0) {\r\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\r\n        // Increment buffer length - 0xa0 plus the original length\r\n        mstore(ptr, add(0xa0, mload(ptr)))\r\n      }\r\n      // If _data is not zero, set size to 0x20 and push to buffer -\r\n      if iszero(eq(_data, 0)) {\r\n        // Push data size (0x20) to the end of the buffer\r\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\r\n        // Push data to the end of the buffer\r\n        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\r\n        // Increment buffer length - 0xc0 plus the original length\r\n        mstore(ptr, add(0xc0, mload(ptr)))\r\n      }\r\n      // Increment EMITS action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of events pushed to buffer -\r\n      mstore(0x140, add(1, mload(0x140)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push 4 to the end of the buffer - event will have 4 topics\r\n      mstore(add(0x20, add(ptr, mload(ptr))), 4)\r\n      // Push topics to end of buffer\r\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\r\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\r\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\r\n      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\r\n      // If _data is zero, set data size to 0 in buffer and push -\r\n      if eq(_data, 0) {\r\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\r\n        // Increment buffer length - 0xc0 plus the original length\r\n        mstore(ptr, add(0xc0, mload(ptr)))\r\n      }\r\n      // If _data is not zero, set size to 0x20 and push to buffer -\r\n      if iszero(eq(_data, 0)) {\r\n        // Push data size (0x20) to the end of the buffer\r\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\r\n        // Push data to the end of the buffer\r\n        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\r\n        // Increment buffer length - 0xe0 plus the original length\r\n        mstore(ptr, add(0xe0, mload(ptr)))\r\n      }\r\n      // Increment EMITS action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of events pushed to buffer -\r\n      mstore(0x140, add(1, mload(0x140)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  // Begins creating a storage buffer - destinations entered will be forwarded wei\r\n  // before the end of execution\r\n  function paying() conditions(validPayBuff, isPaying) internal pure {\r\n    bytes4 action_req = PAYS;\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\r\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the PAYS action\r\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\r\n      // Increment buffer length - 0x24 plus the previous length\r\n      mstore(ptr, add(0x24, mload(ptr)))\r\n      // Set the current action being executed (PAYS) -\r\n      mstore(0xe0, action_req)\r\n      // Set the expected next function - PAY_AMT\r\n      mstore(0x100, 8)\r\n      // Set a pointer to the length of the current request within the buffer\r\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  // Pushes an amount of wei to forward to the buffer\r\n  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push payment amount to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - PAY_DEST\r\n      mstore(0x100, 7)\r\n      // Increment PAYS action length -\r\n      mstore(\r\n        mload(sub(ptr, 0x20)),\r\n        add(1, mload(mload(sub(ptr, 0x20))))\r\n      )\r\n      // Update number of payment destinations to be pushed to -\r\n      mstore(0x160, add(1, mload(0x160)))\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n    return _amount;\r\n  }\r\n\r\n  // Push an address to forward wei to, to the buffer\r\n  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\r\n    assembly {\r\n      // Get pointer to buffer length -\r\n      let ptr := add(0x20, mload(0xc0))\r\n      // Push payment destination to the end of the buffer -\r\n      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\r\n      // Increment buffer length - 0x20 plus the previous length\r\n      mstore(ptr, add(0x20, mload(ptr)))\r\n      // Set the expected next function - PAY_AMT\r\n      mstore(0x100, 8)\r\n    }\r\n    // Update free memory pointer\r\n    setFreeMem();\r\n  }\r\n\r\n  // Sets the free memory pointer to point beyond all accessed memory\r\n  function setFreeMem() private pure {\r\n    assembly { mstore(0x40, msize) }\r\n  }\r\n\r\n  // Returns the enum representing the next expected function to be called -\r\n  function expected() private pure returns (NextFunction next) {\r\n    assembly { next := mload(0x100) }\r\n  }\r\n\r\n  // Returns the number of events pushed to the storage buffer -\r\n  function emitted() internal pure returns (uint num_emitted) {\r\n    if (buffPtr() == bytes32(0))\r\n      return 0;\r\n\r\n    // Load number emitted from buffer -\r\n    assembly { num_emitted := mload(0x140) }\r\n  }\r\n\r\n  // Returns the number of storage slots pushed to the storage buffer -\r\n  function stored() internal pure returns (uint num_stored) {\r\n    if (buffPtr() == bytes32(0))\r\n      return 0;\r\n\r\n    // Load number stored from buffer -\r\n    assembly { num_stored := mload(0x120) }\r\n  }\r\n\r\n  // Returns the number of payment destinations and amounts pushed to the storage buffer -\r\n  function paid() internal pure returns (uint num_paid) {\r\n    if (buffPtr() == bytes32(0))\r\n      return 0;\r\n\r\n    // Load number paid from buffer -\r\n    assembly { num_paid := mload(0x160) }\r\n  }\r\n}\r\n\r\nlibrary ManageTokens {\r\n\r\n  using Contract for *;\r\n  using SafeMath for uint;\r\n\r\n  /// EVENTS ///\r\n\r\n  // event TransferAgentStatusUpdate(bytes32 indexed exec_id, address indexed agent, bool current_status)\r\n  bytes32 internal constant TRANSFER_AGENT_STATUS = keccak256('TransferAgentStatusUpdate(bytes32,address,bool)');\r\n  // event CrowdsaleFinalized(bytes32 indexed exec_id)\r\n  bytes32 internal constant FINAL_SEL = keccak256('CrowdsaleFinalized(bytes32)');\r\n  // event TokenConfigured(bytes32 indexed exec_id, bytes32 indexed name, bytes32 indexed symbol, uint decimals)\r\n  bytes32 private constant TOKEN_CONFIGURED = keccak256(\"TokenConfigured(bytes32,bytes32,bytes32,uint256)\");\r\n\r\n  // Returns the topics for a transfer agent status update event -\r\n  function AGENT_STATUS(bytes32 _exec_id, address _agent) private pure returns (bytes32[3] memory)\r\n    { return [TRANSFER_AGENT_STATUS, _exec_id, bytes32(_agent)]; }\r\n\r\n  // Returns the topics for a crowdsale finalization event -\r\n  function FINALIZE(bytes32 _exec_id) private pure returns (bytes32[2] memory)\r\n    { return [FINAL_SEL, _exec_id]; }\r\n\r\n  // Returns the topics for a token initialization event -\r\n  function TOKEN_INIT(bytes32 _exec_id, bytes32 _name, bytes32 _symbol) private pure returns (bytes32[4] memory)\r\n    { return [TOKEN_CONFIGURED, _exec_id, _name, _symbol]; }\r\n\r\n  // Checks input and then creates storage buffer for token initialization\r\n  function initCrowdsaleToken(bytes32 _name, bytes32 _symbol, uint _decimals) internal pure {\r\n    // Ensure valid input\r\n    if (_name == 0 || _symbol == 0 || _decimals > 18)\r\n      revert(\"Improper token initialization\");\r\n\r\n    // Set up STORES action requests -\r\n    Contract.storing();\r\n\r\n    // Store token name, symbol, and decimals\r\n    Contract.set(TokenManager.tokenName()).to(_name);\r\n    Contract.set(TokenManager.tokenSymbol()).to(_symbol);\r\n    Contract.set(TokenManager.tokenDecimals()).to(_decimals);\r\n\r\n    Contract.emitting();\r\n\r\n    // Log token initialization event -\r\n    Contract.log(\r\n      TOKEN_INIT(Contract.execID(), _name, _symbol), bytes32(_decimals)\r\n    );\r\n  }\r\n\r\n  // Checks input and then creates storage buffer for transfer agent updating\r\n  function setTransferAgentStatus(address _agent, bool _is_agent) internal pure {\r\n    // Ensure valid input\r\n    if (_agent == 0)\r\n      revert('invalid transfer agent');\r\n\r\n    Contract.storing();\r\n\r\n    // Store new transfer agent status\r\n    Contract.set(TokenManager.transferAgents(_agent)).to(_is_agent);\r\n\r\n    // Set up EMITS action requests -\r\n    Contract.emitting();\r\n\r\n    // Add TransferAgentStatusUpdate signature and topics\r\n    Contract.log(\r\n      AGENT_STATUS(Contract.execID(), _agent), _is_agent ? bytes32(1) : bytes32(0)\r\n    );\r\n  }\r\n\r\n  // Checks input and then creates storage buffer for reserved token updating\r\n  function updateMultipleReservedTokens(\r\n    address[] _destinations,\r\n    uint[] _num_tokens,\r\n    uint[] _num_percents,\r\n    uint[] _percent_decimals\r\n  ) internal view {\r\n    // Ensure valid input\r\n    if (\r\n      _destinations.length != _num_tokens.length\r\n      || _num_tokens.length != _num_percents.length\r\n      || _num_percents.length != _percent_decimals.length\r\n      || _destinations.length == 0\r\n    ) revert('invalid input length');\r\n\r\n    // Add crowdsale destinations list length location to buffer\r\n    uint num_destinations = uint(Contract.read(TokenManager.reservedDestinations()));\r\n\r\n    Contract.storing();\r\n\r\n    // Loop over read_values and input arrays - for each address which is unique within the passed-in destinations list,\r\n    // place its reservation information in the storage buffer. Ignore duplicates in passed-in array.\r\n    // For every address which is not a local duplicate, and also does not exist yet in the crowdsale storage reserved destination list,\r\n    // push it to the end of the list and increment list length (in storage buffer)\r\n\r\n    for (uint i = 0; i < _destinations.length; i++) {\r\n      address to_add = _destinations[i];\r\n      if (to_add == 0)\r\n        revert('invalid destination');\r\n\r\n      // Check if the destination is unique in storage\r\n      if (Contract.read(TokenManager.destIndex(_destinations[i])) == 0) {\r\n        // Now, check the passed-in destinations list to see if this address is listed multiple times in the input, as we only want to store information on unique addresses\r\n        for (uint j = _destinations.length - 1; j > i; j--) {\r\n          // address is not unique locally - found the same address in destinations\r\n          if (_destinations[j] == to_add) {\r\n            to_add = address(0);\r\n            break;\r\n          }\r\n        }\r\n\r\n        // If to_add is zero, this address is not unique within the passed-in list - skip any additions to storage buffer\r\n        if (to_add == 0)\r\n          continue;\r\n\r\n        // Increment length\r\n        num_destinations = num_destinations.add(1);\r\n        // Ensure reserved destination amount does not exceed 20\r\n        if (num_destinations > 20)\r\n          revert('too many reserved destinations');\r\n        // Push address to reserved destination list\r\n        Contract.set(\r\n          bytes32(32 * num_destinations + uint(TokenManager.reservedDestinations()))\r\n        ).to(to_add);\r\n        // Store reservation index\r\n        Contract.set(TokenManager.destIndex(to_add)).to(num_destinations);\r\n      }\r\n\r\n      // Store reservation info -\r\n      // Number of tokens to reserve\r\n      Contract.set(TokenManager.destTokens(to_add)).to(_num_tokens[i]);\r\n      // Percentage of total tokens sold to reserve\r\n      Contract.set(TokenManager.destPercent(to_add)).to(_num_percents[i]);\r\n      // Precision of percent\r\n      Contract.set(TokenManager.destPrecision(to_add)).to(_percent_decimals[i]);\r\n    }\r\n    // Finally, update array length\r\n    Contract.set(TokenManager.reservedDestinations()).to(num_destinations);\r\n  }\r\n\r\n  // Checks input and then creates storage buffer for reserved token removal\r\n  function removeReservedTokens(address _destination) internal view {\r\n    // Ensure valid input\r\n    if (_destination == 0)\r\n      revert('invalid destination');\r\n\r\n    Contract.storing();\r\n\r\n    // Get reservation list length\r\n    uint reservation_len = uint(Contract.read(TokenManager.reservedDestinations()));\r\n    // Get index of passed-in destination. If zero, sender is not in reserved list - revert\r\n    uint to_remove = uint(Contract.read(TokenManager.destIndex(_destination)));\r\n    // Ensure that to_remove is less than or equal to reservation list length (stored indices are offset by 1)\r\n    if (to_remove > reservation_len || to_remove == 0)\r\n      revert('removing too many reservations');\r\n\r\n    if (to_remove != reservation_len) {\r\n      // Execute read from storage, and store return in buffer\r\n      address last_index =\r\n        address(Contract.read(\r\n          bytes32(32 * reservation_len + uint(TokenManager.reservedDestinations()))\r\n        ));\r\n\r\n      // Update index\r\n      Contract.set(TokenManager.destIndex(last_index)).to(to_remove);\r\n      // Push last index address to correct spot in reservedDestinations() list\r\n      Contract.set(\r\n        bytes32((32 * to_remove) + uint(TokenManager.reservedDestinations()))\r\n      ).to(last_index);\r\n    }\r\n    // Update destination list length\r\n    Contract.decrease(TokenManager.reservedDestinations()).by(1);\r\n    // Update removed address index\r\n    Contract.set(TokenManager.destIndex(_destination)).to(uint(0));\r\n  }\r\n\r\n  // Checks input and then creates storage buffer for reserved token distribution\r\n  function distributeReservedTokens(uint _num_destinations) internal view {\r\n    // Ensure valid input\r\n    if (_num_destinations == 0)\r\n      revert('invalid number of destinations');\r\n\r\n    // Get total tokens sold, total token supply, and reserved destinations list length\r\n    uint total_sold = uint(Contract.read(TokenManager.tokensSold()));\r\n    uint total_supply = uint(Contract.read(TokenManager.tokenTotalSupply()));\r\n    uint reserved_len = uint(Contract.read(TokenManager.reservedDestinations()));\r\n\r\n    Contract.storing();\r\n\r\n    // If no destinations remain to be distributed to, revert\r\n    if (reserved_len == 0)\r\n      revert('no remaining destinations');\r\n\r\n    // If num_destinations is greater than the reserved destinations list length, set amt equal to the list length\r\n    if (_num_destinations > reserved_len)\r\n      _num_destinations = reserved_len;\r\n\r\n    // Update reservedDestinations list length\r\n    Contract.decrease(TokenManager.reservedDestinations()).by(_num_destinations);\r\n\r\n    // For each address, get their new balance and add to storage buffer\r\n    for (uint i = 0; i < _num_destinations; i++) {\r\n      // Get the reserved destination address\r\n      address addr =\r\n        address(Contract.read(\r\n          bytes32(32 * (_num_destinations - i) + uint(TokenManager.reservedDestinations()))\r\n        ));\r\n\r\n      // Get percent reserved and precision\r\n      uint to_add = uint(Contract.read(TokenManager.destPercent(addr)));\r\n\r\n      // Two points of precision are added to ensure at least a percent out of 100\r\n      uint precision = uint(Contract.read(TokenManager.destPrecision(addr))).add(2);\r\n\r\n      // Get percent divisor\r\n      precision = 10 ** precision;\r\n\r\n      // Get number of tokens to add from total_sold and precent reserved\r\n      to_add = total_sold.mul(to_add).div(precision);\r\n\r\n      // Add number of tokens reserved\r\n      to_add = to_add.add(uint(Contract.read(TokenManager.destTokens(addr))));\r\n\r\n      // Increment total supply\r\n      total_supply = total_supply.add(to_add);\r\n\r\n      // Increase destination token balance -\r\n      Contract.increase(TokenManager.balances(addr)).by(to_add);\r\n    }\r\n\r\n    // Update total supply\r\n    Contract.set(TokenManager.tokenTotalSupply()).to(total_supply);\r\n  }\r\n\r\n  // Checks input and then creates storage buffer for crowdsale finalization\r\n  function finalizeCrowdsaleAndToken() internal view {\r\n    // Get reserved token distribution from distributeAndUnlockTokens\r\n    distributeAndUnlockTokens();\r\n\r\n    // Finalize crowdsale\r\n    Contract.set(TokenManager.isFinished()).to(true);\r\n\r\n    Contract.emitting();\r\n\r\n    // Add CrowdsaleFinalized signature and topics\r\n    Contract.log(\r\n      FINALIZE(Contract.execID()), bytes32(0)\r\n    );\r\n  }\r\n\r\n  // Gets number of tokens to distribute -\r\n  function distributeAndUnlockTokens() internal view {\r\n\r\n    // Get total tokens sold, total token supply, and reserved destinations list length\r\n    uint total_sold = uint(Contract.read(TokenManager.tokensSold()));\r\n    uint total_supply = uint(Contract.read(TokenManager.tokenTotalSupply()));\r\n    uint num_destinations = uint(Contract.read(TokenManager.reservedDestinations()));\r\n\r\n    Contract.storing();\r\n\r\n    // If there are no reserved destinations, simply create a storage buffer to unlock token transfers -\r\n    if (num_destinations == 0) {\r\n      // Unlock tokens\r\n      Contract.set(TokenManager.tokensUnlocked()).to(true);\r\n      return;\r\n    }\r\n\r\n    // Set new reserved destination list length\r\n    Contract.set(TokenManager.reservedDestinations()).to(uint(0));\r\n\r\n    // For each address, get their new balance and add to storage buffer\r\n    for (uint i = 0; i < num_destinations; i++) {\r\n\r\n      address addr =\r\n        address(Contract.read(\r\n          bytes32(32 + (32 * i) + uint(TokenManager.reservedDestinations()))\r\n        ));\r\n      // Get percent reserved and precision\r\n      uint to_add = uint(Contract.read(TokenManager.destPercent(addr)));\r\n      // Two points of precision are added to ensure at least a percent out of 100\r\n      uint precision = uint(Contract.read(TokenManager.destPrecision(addr))).add(2);\r\n\r\n      // Get percent divisor\r\n      precision = 10 ** precision;\r\n\r\n      // Get number of tokens to add from total_sold and precent reserved\r\n      to_add = total_sold.mul(to_add).div(precision);\r\n\r\n      // Add number of tokens reserved\r\n      to_add = to_add.add(uint(Contract.read(TokenManager.destTokens(addr))));\r\n\r\n      // Increment total supply\r\n      total_supply = total_supply.add(to_add);\r\n\r\n      // Increase destination token balance -\r\n      Contract.increase(TokenManager.balances(addr)).by(to_add);\r\n    }\r\n    // Update total supply\r\n    Contract.set(TokenManager.tokenTotalSupply()).to(total_supply);\r\n    // Unlock tokens\r\n    Contract.set(TokenManager.tokensUnlocked()).to(true);\r\n  }\r\n\r\n  // Checks input and then creates storage buffer for token distribution\r\n  function finalizeAndDistributeToken() internal view {\r\n    distributeAndUnlockTokens();\r\n  }\r\n}\r\n\r\nlibrary TokenManager {\r\n\r\n  using Contract for *;\r\n\r\n  /// SALE ///\r\n\r\n  // Storage location of crowdsale admin address\r\n  function admin() internal pure returns (bytes32)\r\n    { return keccak256('sale_admin'); }\r\n\r\n  // Whether the crowdsale and token are configured, and the sale is ready to run\r\n  function isConfigured() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_is_configured\"); }\r\n\r\n  // Whether or not the crowdsale is post-purchase\r\n  function isFinished() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_is_completed\"); }\r\n\r\n  // Storage location of the amount of tokens sold in the crowdsale so far. Does not include reserved tokens\r\n  function tokensSold() internal pure returns (bytes32)\r\n    { return keccak256(\"sale_tokens_sold\"); }\r\n\r\n  /// TOKEN ///\r\n\r\n  // Storage location for token name\r\n  function tokenName() internal pure returns (bytes32)\r\n    { return keccak256(\"token_name\"); }\r\n\r\n  // Storage location for token ticker symbol\r\n  function tokenSymbol() internal pure returns (bytes32)\r\n    { return keccak256(\"token_symbol\"); }\r\n\r\n  // Storage location for token decimals\r\n  function tokenDecimals() internal pure returns (bytes32)\r\n    { return keccak256(\"token_decimals\"); }\r\n\r\n  // Storage location for token totalSupply\r\n  function tokenTotalSupply() internal pure returns (bytes32)\r\n    { return keccak256(\"token_total_supply\"); }\r\n\r\n  // Storage seed for user balances mapping\r\n  bytes32 internal constant TOKEN_BALANCES = keccak256(\"token_balances\");\r\n\r\n  function balances(address _owner) internal pure returns (bytes32)\r\n    { return keccak256(_owner, TOKEN_BALANCES); }\r\n\r\n  // Storage seed for token 'transfer agent' status for any address\r\n  // Transfer agents can transfer tokens, even if the crowdsale has not yet been finalized\r\n  bytes32 internal constant TOKEN_TRANSFER_AGENTS = keccak256(\"token_transfer_agents\");\r\n\r\n  function transferAgents(address _agent) internal pure returns (bytes32)\r\n    { return keccak256(_agent, TOKEN_TRANSFER_AGENTS); }\r\n\r\n  // Whether or not the token is unlocked for transfers\r\n  function tokensUnlocked() internal pure returns (bytes32)\r\n    { return keccak256('sale_tokens_unlocked'); }\r\n\r\n  /// RESERVED TOKENS ///\r\n\r\n  // Stores the number of addresses for which tokens are reserved\r\n  function reservedDestinations() internal pure returns (bytes32)\r\n    { return keccak256(\"reserved_token_dest_list\"); }\r\n\r\n  // Stores the index of an address in the reservedDestinations list (1-indexed)\r\n  function destIndex(address _destination) internal pure returns (bytes32)\r\n    { return keccak256(_destination, \"index\", reservedDestinations()); }\r\n\r\n  // Stores the number of tokens reserved for a destination\r\n  function destTokens(address _destination) internal pure returns (bytes32)\r\n    { return keccak256(_destination, \"numtokens\", reservedDestinations()); }\r\n\r\n  // Stores the number of percent of tokens sold reserved for a destination\r\n  function destPercent(address _destination) internal pure returns (bytes32)\r\n    { return keccak256(_destination, \"numpercent\", reservedDestinations()); }\r\n\r\n  // Stores the number of decimals in the previous percentage (2 are added by default)\r\n  function destPrecision(address _destination) internal pure returns (bytes32)\r\n    { return keccak256(_destination, \"precision\", reservedDestinations()); }\r\n\r\n  /// CHECKS ///\r\n\r\n  // Ensures the sale is finalized\r\n  function saleFinalized() internal view {\r\n    if (Contract.read(isFinished()) == 0)\r\n      revert('sale must be finalized');\r\n  }\r\n\r\n  // Ensures that the sender is the admin address\r\n  function onlyAdmin() internal view {\r\n    if (address(Contract.read(admin())) != Contract.sender())\r\n      revert('sender is not admin');\r\n  }\r\n\r\n  // Ensures that the sender is the admin address, and the sale is not initialized\r\n  function onlyAdminAndNotInit() internal view {\r\n    if (address(Contract.read(admin())) != Contract.sender())\r\n      revert('sender is not admin');\r\n\r\n    if (Contract.read(isConfigured()) != 0)\r\n      revert('sale has already been initialized');\r\n  }\r\n\r\n  // Ensures both storage and events have been pushed to the buffer\r\n  function emitAndStore() internal pure {\r\n    if (Contract.emitted() == 0 || Contract.stored() == 0)\r\n      revert('invalid state change');\r\n  }\r\n\r\n  // Ensures the pending state change will only store\r\n  function onlyStores() internal pure {\r\n    if (Contract.paid() != 0 || Contract.emitted() != 0)\r\n      revert('expected only storage');\r\n\r\n    if (Contract.stored() == 0)\r\n      revert('expected storage');\r\n  }\r\n\r\n  // Ensures the sender is the admin, the sale is initialized, and the sale is not finalized\r\n  function senderAdminAndSaleNotFinal() internal view {\r\n    if (Contract.sender() != address(Contract.read(admin())))\r\n      revert('sender is not admin');\r\n\r\n    if (Contract.read(isConfigured()) == 0 || Contract.read(isFinished()) != 0)\r\n      revert('invalid sale state');\r\n  }\r\n\r\n  /// FUNCTIONS ///\r\n\r\n  /*\r\n  Initializes the token to be sold during the crowdsale -\r\n\r\n  @param _name: The name of the token to be sold\r\n  @param _symbol: The symbol of the token to be sold\r\n  @param _decimals: The number of decimals the token will have\r\n  */\r\n  function initCrowdsaleToken(bytes32 _name, bytes32 _symbol, uint _decimals) external view {\r\n    // Begin execution - reads execution id and original sender address from storage\r\n    // and authorizes the sender as script exec\r\n    Contract.authorize(msg.sender);\r\n    // Check that the sender is the sale admin and the sale is not initialized -\r\n    Contract.checks(onlyAdminAndNotInit);\r\n    // Execute token initialization function -\r\n    ManageTokens.initCrowdsaleToken(_name, _symbol, _decimals);\r\n    // Ensures state change will only affect storage and events -\r\n    Contract.checks(emitAndStore);\r\n    // Commit state changes to storage -\r\n    Contract.commit();\r\n  }\r\n\r\n  /*\r\n  Sets the status of an account as a transfer agent. Transfer agents are allowed to transfer tokens at any time\r\n\r\n  @param _agent: The address whose status will be updated\r\n  @param _is_agent: Whether or not the agent is a transfer agent\r\n  */\r\n  function setTransferAgentStatus(address _agent, bool _is_agent) external view {\r\n    // Begin execution - reads execution id and original sender address from storage\r\n    Contract.authorize(msg.sender);\r\n    // Check that the sender is the sale admin -\r\n    Contract.checks(onlyAdmin);\r\n    // Execute function -\r\n    ManageTokens.setTransferAgentStatus(_agent, _is_agent);\r\n    // Ensures state change will only affect storage and log events -\r\n    Contract.checks(emitAndStore);\r\n    // Commit state changes to storage -\r\n    Contract.commit();\r\n  }\r\n\r\n  /*\r\n  Updates multiple reserved token listings\r\n\r\n  @param _destinations: The addresses for which listings will be updated\r\n  @param _num_tokens: The number of tokens each destination will have reserved\r\n  @param _num_percents: The decimal number of percents of total tokens sold each destination will be reserved\r\n  @param _percent_decimals: The number of decimals in each of the percent figures\r\n  */\r\n  function updateMultipleReservedTokens(\r\n    address[] _destinations,\r\n    uint[] _num_tokens,\r\n    uint[] _num_percents,\r\n    uint[] _percent_decimals\r\n  ) external view {\r\n    // Begin execution - reads execution id and original sender address from storage\r\n    Contract.authorize(msg.sender);\r\n    // Check that the sender is the sale admin and the sale is not initialized -\r\n    Contract.checks(onlyAdminAndNotInit);\r\n    // Execute function -\r\n    ManageTokens.updateMultipleReservedTokens(_destinations, _num_tokens, _num_percents, _percent_decimals);\r\n    // Ensures state change will only affect storage -\r\n    Contract.checks(onlyStores);\r\n    // Commit state changes to storage -\r\n    Contract.commit();\r\n  }\r\n\r\n  /*\r\n  Removes a reserved token listing\r\n\r\n  @param _destination: The addresses for which listings will be removed\r\n  */\r\n  function removeReservedTokens(address _destination) external view {\r\n    // Begin execution - reads execution id and original sender address from storage\r\n    Contract.authorize(msg.sender);\r\n    // Check that the sender is the sale admin and the sale is not initialized -\r\n    Contract.checks(onlyAdminAndNotInit);\r\n    // Execute function -\r\n    ManageTokens.removeReservedTokens(_destination);\r\n    // Ensures state change will only affect storage -\r\n    Contract.checks(onlyStores);\r\n    // Commit state changes to storage -\r\n    Contract.commit();\r\n  }\r\n\r\n  /*\r\n  Allows anyone to distribute reserved tokens, assuming the sale is finalized\r\n\r\n  @param _num_destinations: The number of reserved destinations to distribute for\r\n  */\r\n  function distributeReservedTokens(uint _num_destinations) external view {\r\n    // Begin execution - reads execution id and original sender address from storage\r\n    Contract.authorize(msg.sender);\r\n    // Checks that the sale is finalized -\r\n    Contract.checks(saleFinalized);\r\n    // Execute approval function -\r\n    ManageTokens.distributeReservedTokens(_num_destinations);\r\n    // Ensures state change will only affect storage -\r\n    Contract.checks(onlyStores);\r\n    // Commit state changes to storage -\r\n    Contract.commit();\r\n  }\r\n\r\n  // Allows the admin to finalize the crowdsale, distribute reserved tokens, and unlock the token for transfer\r\n  function finalizeCrowdsaleAndToken() external view {\r\n    // Begin execution - reads execution id and original sender address from storage\r\n    Contract.authorize(msg.sender);\r\n    // Check that the sender is the admin, the sale is initialized, and the sale is not finalized -\r\n    Contract.checks(senderAdminAndSaleNotFinal);\r\n    // Execute approval function -\r\n    ManageTokens.finalizeCrowdsaleAndToken();\r\n    // Ensures state change will only affect storage -\r\n    Contract.checks(emitAndStore);\r\n    // Commit state changes to storage -\r\n    Contract.commit();\r\n  }\r\n\r\n  // Allows anyone to unlock token transfers and distribute reserved tokens, as long as the sale is finalized\r\n  function finalizeAndDistributeToken() external view {\r\n    // Begin execution - reads execution id and original sender address from storage\r\n    Contract.authorize(msg.sender);\r\n    // Ensure the sale is finalized\r\n    Contract.checks(saleFinalized);\r\n    // Execute approval function -\r\n    ManageTokens.finalizeAndDistributeToken();\r\n    // Ensures state change will only affect storage -\r\n    Contract.checks(onlyStores);\r\n    // Commit state changes to storage -\r\n    Contract.commit();\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"finalizeAndDistributeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"initCrowdsaleToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"},{\"name\":\"_is_agent\",\"type\":\"bool\"}],\"name\":\"setTransferAgentStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalizeCrowdsaleAndToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_destination\",\"type\":\"address\"}],\"name\":\"removeReservedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_num_destinations\",\"type\":\"uint256\"}],\"name\":\"distributeReservedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_destinations\",\"type\":\"address[]\"},{\"name\":\"_num_tokens\",\"type\":\"uint256[]\"},{\"name\":\"_num_percents\",\"type\":\"uint256[]\"},{\"name\":\"_percent_decimals\",\"type\":\"uint256[]\"}],\"name\":\"updateMultipleReservedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenManager","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d05e7fb9e3485b27df6b3759bf5dcc5770490169464db2a38a20fe8aad67a77c"}]}