{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract ERC20 {\r\n // modifiers\r\n\r\n // mitigate short address attack\r\n // thanks to https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34.\r\n // TODO: doublecheck implication of >= compared to ==\r\n    modifier onlyPayloadSize(uint numWords) {\r\n        assert(msg.data.length >= numWords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    uint256 public totalSupply;\r\n    /*\r\n      *  Public functions\r\n      */\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    /*\r\n      *  Events\r\n      */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event SaleContractActivation(address saleContract, uint256 tokensForSale);\r\n}\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  // it is recommended to define functions which can neither read the state of blockchain nor write in it as pure instead of constant\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public creater;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable(address _owner) public {\r\n        creater = msg.sender;\r\n        if (_owner != 0) {\r\n            owner = _owner;\r\n\r\n        }\r\n        else {\r\n            owner = creater;\r\n        }\r\n\r\n    }\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier isCreator() {\r\n        require(msg.sender == creater);\r\n        _;\r\n    }\r\n\r\n   \r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    mapping(address => uint256) balances;\r\n\r\n  /// @dev Returns number of tokens owned by given address\r\n  /// @param _owner Address of token owner\r\n  /// @return Balance of owner\r\n\r\n  // it is recommended to define functions which can read the state of blockchain but cannot write in it as view instead of constant\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n  /// @dev Transfers sender's tokens to a given address. Returns success\r\n  /// @param _to Address of token receiver\r\n  /// @param _value Number of tokens to transfer\r\n  /// @return Was transfer successful?\r\n\r\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0 && balances[_to].add(_value) > balances[_to]) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n            emit Transfer(msg.sender, _to, _value); // solhint-disable-line\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\r\n    /// @param _from Address from where tokens are withdrawn\r\n    /// @param _to Address to where tokens are sent\r\n    /// @param _value Number of tokens to transfer\r\n    /// @return Was transfer successful?\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value); // solhint-disable-line\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public onlyPayloadSize(2) returns (bool) {\r\n      // To change the approve amount you first have to reduce the addresses`\r\n      //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n      //  already 0 to mitigate the race condition described here:\r\n      //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n        require(_value == 0 && (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value); // solhint-disable-line\r\n        return true;\r\n    }\r\n\r\n    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) public onlyPayloadSize(3) returns (bool success) {\r\n        require(allowed[msg.sender][_spender] == _oldValue);\r\n        allowed[msg.sender][_spender] = _newValue;\r\n        emit Approval(msg.sender, _spender, _newValue); // solhint-disable-line\r\n        return true;\r\n    }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n /**\r\n  * @dev Burns a specific amount of tokens.\r\n  * @param _value The amount of token to be burned.\r\n  */\r\n    function burn(uint256 _value) public returns (bool burnSuccess) {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(burner, _value); // solhint-disable-line\r\n        return true;\r\n    }\r\n\r\n}\r\ncontract TravelHelperToken is StandardToken, Ownable {\r\n\r\n\r\n//Begin: state variables\r\n    address public saleContract;\r\n    string public constant name = \"TravelHelperToken\";\r\n    string public constant symbol = \"TRH\";\r\n    uint public constant decimals = 18;\r\n    bool public fundraising = true;\r\n    uint public totalReleased = 0;\r\n    address public teamAddressOne;\r\n    address public teamAddressTwo;\r\n    address public marketingAddress;\r\n    address public advisorsAddress;\r\n    address public teamAddressThree;\r\n    uint public icoStartBlock;\r\n    uint256 public tokensUnlockPeriod = 37 days / 15; // 7 days presale + 30 days crowdsale\r\n    uint public tokensSupply = 5000000000; // 5 billion\r\n    uint public teamTokens = 1480000000 * 1 ether; // 1.48 billion\r\n    uint public teamAddressThreeTokens = 20000000 * 1 ether; // 20 million\r\n    uint public marketingTeamTokens = 500000000 * 1 ether; // 500 million\r\n    uint public advisorsTokens = 350000000 * 1 ether; // 350 million\r\n    uint public bountyTokens = 150000000 * 1 ether; //150 million\r\n     uint public tokensForSale = 2500000000 * 1 ether; // 2.5 billion\r\n    uint public releasedTeamTokens = 0;\r\n    uint public releasedAdvisorsTokens = 0;\r\n    uint public releasedMarketingTokens = 0;\r\n    bool public tokensLocked = true;\r\n    Ownable ownable;\r\n    mapping (address => bool) public frozenAccounts;\r\n   \r\n //End: state variables\r\n //Begin: events\r\n    event FrozenFund(address target, bool frozen);\r\n    event PriceLog(string text);\r\n//End: events\r\n\r\n//Begin: modifiers\r\n\r\n\r\n    modifier manageTransfer() {\r\n        if (msg.sender == owner) {\r\n            _;\r\n        }\r\n        else {\r\n            require(fundraising == false);\r\n            _;\r\n        }\r\n    }\r\n    \r\n    modifier tokenNotLocked() {\r\n      if (icoStartBlock > 0 && block.number.sub(icoStartBlock) > tokensUnlockPeriod) {\r\n        tokensLocked = false;\r\n        _;\r\n      } else {\r\n        revert();\r\n      }\r\n    \r\n  }\r\n\r\n//End: modifiers\r\n\r\n//Begin: constructor\r\n    function TravelHelperToken(\r\n    address _tokensOwner,\r\n    address _teamAddressOne,\r\n    address _teamAddressTwo,\r\n    address _marketingAddress,\r\n    address _advisorsAddress,\r\n    address _teamAddressThree) public Ownable(_tokensOwner) {\r\n        require(_tokensOwner != 0x0);\r\n        require(_teamAddressOne != 0x0);\r\n        require(_teamAddressTwo != 0x0);\r\n        teamAddressOne = _teamAddressOne;\r\n        teamAddressTwo = _teamAddressTwo;\r\n        advisorsAddress = _advisorsAddress;\r\n        marketingAddress = _marketingAddress;\r\n        teamAddressThree = _teamAddressThree;\r\n        totalSupply = tokensSupply * (uint256(10) ** decimals);\r\n\r\n    }\r\n\r\n   \r\n\r\n//End: constructor\r\n\r\n    \r\n\r\n//Begin: overriden methods\r\n\r\n    function transfer(address _to, uint256 _value) public manageTransfer onlyPayloadSize(2) returns (bool success) {\r\n        require(_to != address(0));\r\n        require(!frozenAccounts[msg.sender]);\r\n        super.transfer(_to,_value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        public\r\n        manageTransfer\r\n        onlyPayloadSize(3) returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        require(_from != address(0));\r\n        require(!frozenAccounts[msg.sender]);\r\n        super.transferFrom(_from,_to,_value);\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n//End: overriden methods\r\n\r\n\r\n//Being: setters\r\n   \r\n    function activateSaleContract(address _saleContract) public onlyOwner {\r\n    require(tokensForSale > 0);\r\n    require(teamTokens > 0);\r\n    require(_saleContract != address(0));\r\n    require(saleContract == address(0));\r\n    saleContract = _saleContract;\r\n    uint  totalValue = teamTokens.mul(50).div(100);\r\n    balances[teamAddressOne] = balances[teamAddressOne].add(totalValue);\r\n    balances[teamAddressTwo] = balances[teamAddressTwo].add(totalValue);\r\n    balances[advisorsAddress] = balances[advisorsAddress].add(advisorsTokens);\r\n    balances[teamAddressThree] = balances[teamAddressThree].add(teamAddressThreeTokens);\r\n    balances[marketingAddress] = balances[marketingAddress].add(marketingTeamTokens);\r\n    releasedTeamTokens = releasedTeamTokens.add(teamTokens);\r\n    releasedAdvisorsTokens = releasedAdvisorsTokens.add(advisorsTokens);\r\n    releasedMarketingTokens = releasedMarketingTokens.add(marketingTeamTokens);\r\n    balances[saleContract] = balances[saleContract].add(tokensForSale);\r\n    totalReleased = totalReleased.add(tokensForSale).add(teamTokens).add(advisorsTokens).add(teamAddressThreeTokens).add(marketingTeamTokens);\r\n    tokensForSale = 0; \r\n    teamTokens = 0; \r\n    teamAddressThreeTokens = 0;\r\n    icoStartBlock = block.number;\r\n    assert(totalReleased <= totalSupply);\r\n    emit Transfer(address(this), teamAddressOne, totalValue);\r\n    emit Transfer(address(this), teamAddressTwo, totalValue);\r\n    emit Transfer(address(this),teamAddressThree,teamAddressThreeTokens);\r\n    emit Transfer(address(this), saleContract, 2500000000 * 1 ether);\r\n    emit SaleContractActivation(saleContract, 2500000000 * 1 ether);\r\n  }\r\n  \r\n function saleTransfer(address _to, uint256 _value) public returns (bool) {\r\n    require(saleContract != address(0));\r\n    require(msg.sender == saleContract);\r\n    return super.transfer(_to, _value);\r\n  }\r\n  \r\n  \r\n  function burnTokensForSale() public returns (bool) {\r\n    require(saleContract != address(0));\r\n    require(msg.sender == saleContract);\r\n    uint256 tokens = balances[saleContract];\r\n    require(tokens > 0);\r\n    require(tokens <= totalSupply);\r\n    balances[saleContract] = 0;\r\n    totalSupply = totalSupply.sub(tokens);\r\n    emit Burn(saleContract, tokens);\r\n    return true;\r\n  }\r\n  \r\n   \r\n \r\n    \r\n\r\n    function finalize() public {\r\n        require(fundraising != false);\r\n        require(msg.sender == saleContract);\r\n        // Switch to Operational state. This is the only place this can happen.\r\n        fundraising = false;\r\n    }\r\n\r\n   function freezeAccount (address target, bool freeze) public onlyOwner {\r\n        require(target != 0x0);\r\n        require(freeze == (true || false));\r\n        frozenAccounts[target] = freeze;\r\n        emit FrozenFund(target, freeze); // solhint-disable-line\r\n    }\r\n    \r\n    function sendBounty(address _to, uint256 _value) public onlyOwner returns (bool) {\r\n    uint256 value = _value.mul(1 ether);\r\n    require(bountyTokens >= value);\r\n    totalReleased = totalReleased.add(value);\r\n    require(totalReleased <= totalSupply);\r\n    balances[_to] = balances[_to].add(value);\r\n    bountyTokens = bountyTokens.sub(value);\r\n    emit Transfer(address(this), _to, value);\r\n    return true;\r\n  }\r\n /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) onlyOwner public  {\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(owner, newOwner); // solhint-disable-line\r\n        \r\n    }\r\n//End: setters\r\n   \r\n    function() public {\r\n        revert();\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddressThreeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnTokensForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"burnSuccess\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creater\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advisorsTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasedAdvisorsTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddressOne\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddressThree\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_oldValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"changeApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"saleTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundraising\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasedTeamTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddressTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingTeamTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensUnlockPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saleContract\",\"type\":\"address\"}],\"name\":\"activateSaleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasedMarketingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokensOwner\",\"type\":\"address\"},{\"name\":\"_teamAddressOne\",\"type\":\"address\"},{\"name\":\"_teamAddressTwo\",\"type\":\"address\"},{\"name\":\"_marketingAddress\",\"type\":\"address\"},{\"name\":\"_advisorsAddress\",\"type\":\"address\"},{\"name\":\"_teamAddressThree\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"}],\"name\":\"PriceLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"saleContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensForSale\",\"type\":\"uint256\"}],\"name\":\"SaleContractActivation\",\"type\":\"event\"}]","ContractName":"TravelHelperToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000067293e151842f13b7401d581e54c4d016c2dc5000000000000000000000000027d2f5ad7ee0c2645407cf6c3d38b35793b5191c00000000000000000000000010ddebc3e33ce309bae84553a1c9f9b2e196775600000000000000000000000003e69050e98c8d5b1ced879d07c3b0ecd277efeb0000000000000000000000009dd5a693d0228565d1f24eeff815481ffeccb000000000000000000000000000b1ed529955e25d0f9ce727d2d71d47399f20a8f8","Library":"","SwarmSource":"bzzr://2ceaff0d98db97b3939d2d307d324dec0f0a1da4d612e54cc51bcd1a60824a10"}]}