{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\ncontract ERC20Token {\r\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public pure returns (string) {}\r\n    function symbol() public pure returns (string) {}\r\n    function decimals() public pure returns (uint8) {}\r\n    function totalSupply() public pure returns (uint256) {}\r\n    function balanceOf(address _owner) public pure returns (uint256) { _owner; }\r\n    function allowance(address _owner, address _spender) public pure returns (uint256) { _owner; _spender; }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract CommonWallet {\r\n    mapping(address => mapping (address => uint256)) public tokenBalance;\r\n    mapping(address => uint) etherBalance;\r\n    address owner = msg.sender;\r\n    \r\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x + _y;\r\n        assert(z >= _x);\r\n        return z;\r\n    }\r\n\r\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        assert(_x >= _y);\r\n        return _x - _y;\r\n    }\r\n    \r\n    function depoEther() public payable{\r\n        etherBalance[msg.sender]+=msg.value;\r\n    }\r\n    \r\n    function depoToken(address tokenAddr, uint256 amount) public {\r\n        if (ERC20Token(tokenAddr).transferFrom(msg.sender, this, amount))\r\n        {\r\n            tokenBalance[tokenAddr][msg.sender] = safeAdd(tokenBalance[tokenAddr][msg.sender], amount);\r\n        }\r\n    }\r\n  \r\n    function wdEther(uint amount) public{\r\n        require(etherBalance[msg.sender]>=amount);\r\n        address sender=msg.sender;\r\n        sender.transfer(amount);\r\n        etherBalance[sender] = safeSub(etherBalance[sender],amount);\r\n    }\r\n    \r\n    function wdToken(address tokenAddr, uint256 amount) public {\r\n        require(tokenBalance[tokenAddr][msg.sender] < amount);\r\n        if(ERC20Token(tokenAddr).transfer(msg.sender, amount))\r\n        {\r\n            tokenBalance[tokenAddr][msg.sender] = safeSub(tokenBalance[tokenAddr][msg.sender], amount);\r\n        }\r\n    }\r\n  \r\n    function getEtherBalance(address user) public view returns(uint256) {\r\n        return etherBalance[user];\r\n    }\r\n    \r\n    function getTokenBalance(address tokenAddr, address user) public view returns (uint256) {\r\n        return tokenBalance[tokenAddr][user];\r\n    }\r\n    \r\n    function sendEtherTo(address to_, uint amount) public {\r\n        require(etherBalance[msg.sender]>=amount);\r\n        require(to_!=msg.sender);\r\n        to_.transfer(amount);\r\n        etherBalance[msg.sender] = safeSub(etherBalance[msg.sender],amount);\r\n    }\r\n    \r\n    function sendTokenTo(address tokenAddr, address to_, uint256 amount) public {\r\n        require(tokenBalance[tokenAddr][msg.sender] < amount);\r\n        require(!ERC20Token(tokenAddr).transfer(to_, amount));\r\n        tokenBalance[tokenAddr][msg.sender] = safeSub(tokenBalance[tokenAddr][msg.sender], amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wdEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendEtherTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depoToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wdToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getEtherBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddr\",\"type\":\"address\"},{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTokenTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depoEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"CommonWallet","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8c13f9de0f85502769ff882358d2cb7a0f3b18b4f5d271ad471f175fff0c4a07"}]}