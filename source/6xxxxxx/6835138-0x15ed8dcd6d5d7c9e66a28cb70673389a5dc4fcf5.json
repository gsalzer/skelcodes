{"status":"1","message":"OK","result":[{"SourceCode":"/* ===============================================\n* Flattened with Solidifier by Coinage\n* \n* https://solidifier.coina.ge\n* ===============================================\n*/\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       Owned.sol\nversion:    1.1\nauthor:     Anton Jurisevic\n            Dominic Romanowski\n\ndate:       2018-2-26\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nAn Owned contract, to be inherited by other contracts.\nRequires its owner to be explicitly set in the constructor.\nProvides an onlyOwner access modifier.\n\nTo change owner, the current owner must nominate the next owner,\nwho then has to accept the nomination. The nomination can be\ncancelled before it is accepted by the new owner by having the\nprevious owner change the nomination (setting it to 0).\n\n-----------------------------------------------------------------\n*/\n\npragma solidity 0.4.25;\n\n/**\n * @title A contract with an owner.\n * @notice Contract ownership can be transferred by first nominating the new owner,\n * who must then accept the ownership, which prevents accidental incorrect ownership transfers.\n */\ncontract Owned {\n    address public owner;\n    address public nominatedOwner;\n\n    /**\n     * @dev Owned Constructor\n     */\n    constructor(address _owner)\n        public\n    {\n        require(_owner != address(0), \"Owner address cannot be 0\");\n        owner = _owner;\n        emit OwnerChanged(address(0), _owner);\n    }\n\n    /**\n     * @notice Nominate a new owner of this contract.\n     * @dev Only the current owner may nominate a new owner.\n     */\n    function nominateNewOwner(address _owner)\n        external\n        onlyOwner\n    {\n        nominatedOwner = _owner;\n        emit OwnerNominated(_owner);\n    }\n\n    /**\n     * @notice Accept the nomination to be owner.\n     */\n    function acceptOwnership()\n        external\n    {\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\n        emit OwnerChanged(owner, nominatedOwner);\n        owner = nominatedOwner;\n        nominatedOwner = address(0);\n    }\n\n    modifier onlyOwner\n    {\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\n        _;\n    }\n\n    event OwnerNominated(address newOwner);\n    event OwnerChanged(address oldOwner, address newOwner);\n}\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       SelfDestructible.sol\nversion:    1.2\nauthor:     Anton Jurisevic\n\ndate:       2018-05-29\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nThis contract allows an inheriting contract to be destroyed after\nits owner indicates an intention and then waits for a period\nwithout changing their mind. All ether contained in the contract\nis forwarded to a nominated beneficiary upon destruction.\n\n-----------------------------------------------------------------\n*/\n\n\n/**\n * @title A contract that can be destroyed by its owner after a delay elapses.\n */\ncontract SelfDestructible is Owned {\n    \n    uint public initiationTime;\n    bool public selfDestructInitiated;\n    address public selfDestructBeneficiary;\n    uint public constant SELFDESTRUCT_DELAY = 4 weeks;\n\n    /**\n     * @dev Constructor\n     * @param _owner The account which controls this contract.\n     */\n    constructor(address _owner)\n        Owned(_owner)\n        public\n    {\n        require(_owner != address(0), \"Owner must not be the zero address\");\n        selfDestructBeneficiary = _owner;\n        emit SelfDestructBeneficiaryUpdated(_owner);\n    }\n\n    /**\n     * @notice Set the beneficiary address of this contract.\n     * @dev Only the contract owner may call this. The provided beneficiary must be non-null.\n     * @param _beneficiary The address to pay any eth contained in this contract to upon self-destruction.\n     */\n    function setSelfDestructBeneficiary(address _beneficiary)\n        external\n        onlyOwner\n    {\n        require(_beneficiary != address(0), \"Beneficiary must not be the zero address\");\n        selfDestructBeneficiary = _beneficiary;\n        emit SelfDestructBeneficiaryUpdated(_beneficiary);\n    }\n\n    /**\n     * @notice Begin the self-destruction counter of this contract.\n     * Once the delay has elapsed, the contract may be self-destructed.\n     * @dev Only the contract owner may call this.\n     */\n    function initiateSelfDestruct()\n        external\n        onlyOwner\n    {\n        initiationTime = now;\n        selfDestructInitiated = true;\n        emit SelfDestructInitiated(SELFDESTRUCT_DELAY);\n    }\n\n    /**\n     * @notice Terminate and reset the self-destruction timer.\n     * @dev Only the contract owner may call this.\n     */\n    function terminateSelfDestruct()\n        external\n        onlyOwner\n    {\n        initiationTime = 0;\n        selfDestructInitiated = false;\n        emit SelfDestructTerminated();\n    }\n\n    /**\n     * @notice If the self-destruction delay has elapsed, destroy this contract and\n     * remit any ether it owns to the beneficiary address.\n     * @dev Only the contract owner may call this.\n     */\n    function selfDestruct()\n        external\n        onlyOwner\n    {\n        require(selfDestructInitiated, \"Self destruct has not yet been initiated\");\n        require(initiationTime + SELFDESTRUCT_DELAY < now, \"Self destruct delay has not yet elapsed\");\n        address beneficiary = selfDestructBeneficiary;\n        emit SelfDestructed(beneficiary);\n        selfdestruct(beneficiary);\n    }\n\n    event SelfDestructTerminated();\n    event SelfDestructed(address beneficiary);\n    event SelfDestructInitiated(uint selfDestructDelay);\n    event SelfDestructBeneficiaryUpdated(address newBeneficiary);\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       Pausable.sol\nversion:    1.0\nauthor:     Kevin Brown\n\ndate:       2018-05-22\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nThis contract allows an inheriting contract to be marked as\npaused. It also defines a modifier which can be used by the\ninheriting contract to prevent actions while paused.\n\n-----------------------------------------------------------------\n*/\n\n\n/**\n * @title A contract that can be paused by its owner\n */\ncontract Pausable is Owned {\n    \n    uint public lastPauseTime;\n    bool public paused;\n\n    /**\n     * @dev Constructor\n     * @param _owner The account which controls this contract.\n     */\n    constructor(address _owner)\n        Owned(_owner)\n        public\n    {\n        // Paused will be false, and lastPauseTime will be 0 upon initialisation\n    }\n\n    /**\n     * @notice Change the paused state of the contract\n     * @dev Only the contract owner may call this.\n     */\n    function setPaused(bool _paused)\n        external\n        onlyOwner\n    {\n        // Ensure we're actually changing the state before we do anything\n        if (_paused == paused) {\n            return;\n        }\n\n        // Set our paused state.\n        paused = _paused;\n        \n        // If applicable, set the last pause time.\n        if (paused) {\n            lastPauseTime = now;\n        }\n\n        // Let everyone know that our pause state has changed.\n        emit PauseChanged(paused);\n    }\n\n    event PauseChanged(bool isPaused);\n\n    modifier notPaused {\n        require(!paused, \"This action cannot be performed while the contract is paused\");\n        _;\n    }\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n\n/*\n\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       SafeDecimalMath.sol\nversion:    2.0\nauthor:     Kevin Brown\n            Gavin Conway\ndate:       2018-10-18\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nA library providing safe mathematical operations for division and\nmultiplication with the capability to round or truncate the results\nto the nearest increment. Operations can return a standard precision\nor high precision decimal. High precision decimals are useful for\nexample when attempting to calculate percentages or fractions\naccurately.\n\n-----------------------------------------------------------------\n*/\n\n\n/**\n * @title Safely manipulate unsigned fixed-point decimals at a given precision level.\n * @dev Functions accepting uints in this contract and derived contracts\n * are taken to be such fixed point decimals of a specified precision (either standard\n * or high).\n */\nlibrary SafeDecimalMath {\n\n    using SafeMath for uint;\n\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint public constant UNIT = 10 ** uint(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint public constant PRECISE_UNIT = 10 ** uint(highPrecisionDecimals);\n    uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10 ** uint(highPrecisionDecimals - decimals);\n\n    /** \n     * @return Provides an interface to UNIT.\n     */\n    function unit()\n        external\n        pure\n        returns (uint)\n    {\n        return UNIT;\n    }\n\n    /** \n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit()\n        external\n        pure \n        returns (uint)\n    {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     * \n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint x, uint y)\n        internal\n        pure\n        returns (uint)\n    {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of the specified precision unit.\n     *\n     * @dev The operands should be in the form of a the specified unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function _multiplyDecimalRound(uint x, uint y, uint precisionUnit)\n        private\n        pure\n        returns (uint)\n    {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a precise unit.\n     *\n     * @dev The operands should be in the precise unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRoundPrecise(uint x, uint y)\n        internal\n        pure\n        returns (uint)\n    {\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a standard unit.\n     *\n     * @dev The operands should be in the standard unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRound(uint x, uint y)\n        internal\n        pure\n        returns (uint)\n    {\n        return _multiplyDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     * \n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint x, uint y)\n        internal\n        pure\n        returns (uint)\n    {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(UNIT).div(y);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * decimal in the precision unit specified in the parameter.\n     *\n     * @dev y is divided after the product of x and the specified precision unit\n     * is evaluated, so the product of x and the specified precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function _divideDecimalRound(uint x, uint y, uint precisionUnit)\n        private\n        pure\n        returns (uint)\n    {\n        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);\n\n        if (resultTimesTen % 10 >= 5) {\n            resultTimesTen += 10;\n        }\n\n        return resultTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * standard precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and the standard precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRound(uint x, uint y)\n        internal\n        pure\n        returns (uint)\n    {\n        return _divideDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * high precision decimal.\n     *\n     * @dev y is divided after the product of x and the high precision unit\n     * is evaluated, so the product of x and the high precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRoundPrecise(uint x, uint y)\n        internal\n        pure\n        returns (uint)\n    {\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint i)\n        internal\n        pure\n        returns (uint)\n    {\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint i)\n        internal\n        pure\n        returns (uint)\n    {\n        uint quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       Proxy.sol\nversion:    1.3\nauthor:     Anton Jurisevic\n\ndate:       2018-05-29\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nA proxy contract that, if it does not recognise the function\nbeing called on it, passes all value and call data to an\nunderlying target contract.\n\nThis proxy has the capacity to toggle between DELEGATECALL\nand CALL style proxy functionality.\n\nThe former executes in the proxy's context, and so will preserve \nmsg.sender and store data at the proxy address. The latter will not.\nTherefore, any contract the proxy wraps in the CALL style must\nimplement the Proxyable interface, in order that it can pass msg.sender\ninto the underlying contract as the state parameter, messageSender.\n\n-----------------------------------------------------------------\n*/\n\n\ncontract Proxy is Owned {\n\n    Proxyable public target;\n    bool public useDELEGATECALL;\n\n    constructor(address _owner)\n        Owned(_owner)\n        public\n    {}\n\n    function setTarget(Proxyable _target)\n        external\n        onlyOwner\n    {\n        target = _target;\n        emit TargetUpdated(_target);\n    }\n\n    function setUseDELEGATECALL(bool value) \n        external\n        onlyOwner\n    {\n        useDELEGATECALL = value;\n    }\n\n    function _emit(bytes callData, uint numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)\n        external\n        onlyTarget\n    {\n        uint size = callData.length;\n        bytes memory _callData = callData;\n\n        assembly {\n            /* The first 32 bytes of callData contain its length (as specified by the abi). \n             * Length is assumed to be a uint256 and therefore maximum of 32 bytes\n             * in length. It is also leftpadded to be a multiple of 32 bytes.\n             * This means moving call_data across 32 bytes guarantees we correctly access\n             * the data itself. */\n            switch numTopics\n            case 0 {\n                log0(add(_callData, 32), size)\n            } \n            case 1 {\n                log1(add(_callData, 32), size, topic1)\n            }\n            case 2 {\n                log2(add(_callData, 32), size, topic1, topic2)\n            }\n            case 3 {\n                log3(add(_callData, 32), size, topic1, topic2, topic3)\n            }\n            case 4 {\n                log4(add(_callData, 32), size, topic1, topic2, topic3, topic4)\n            }\n        }\n    }\n\n    function()\n        external\n        payable\n    {\n        if (useDELEGATECALL) {\n            assembly {\n                /* Copy call data into free memory region. */\n                let free_ptr := mload(0x40)\n                calldatacopy(free_ptr, 0, calldatasize)\n\n                /* Forward all gas and call data to the target contract. */\n                let result := delegatecall(gas, sload(target_slot), free_ptr, calldatasize, 0, 0)\n                returndatacopy(free_ptr, 0, returndatasize)\n\n                /* Revert if the call failed, otherwise return the result. */\n                if iszero(result) { revert(free_ptr, returndatasize) }\n                return(free_ptr, returndatasize)\n            }\n        } else {\n            /* Here we are as above, but must send the messageSender explicitly \n             * since we are using CALL rather than DELEGATECALL. */\n            target.setMessageSender(msg.sender);\n            assembly {\n                let free_ptr := mload(0x40)\n                calldatacopy(free_ptr, 0, calldatasize)\n\n                /* We must explicitly forward ether to the underlying contract as well. */\n                let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)\n                returndatacopy(free_ptr, 0, returndatasize)\n\n                if iszero(result) { revert(free_ptr, returndatasize) }\n                return(free_ptr, returndatasize)\n            }\n        }\n    }\n\n    modifier onlyTarget {\n        require(Proxyable(msg.sender) == target, \"Must be proxy target\");\n        _;\n    }\n\n    event TargetUpdated(Proxyable newTarget);\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       Proxyable.sol\nversion:    1.1\nauthor:     Anton Jurisevic\n\ndate:       2018-05-15\n\nchecked:    Mike Spain\napproved:   Samuel Brooks\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nA proxyable contract that works hand in hand with the Proxy contract\nto allow for anyone to interact with the underlying contract both\ndirectly and through the proxy.\n\n-----------------------------------------------------------------\n*/\n\n\n// This contract should be treated like an abstract contract\ncontract Proxyable is Owned {\n    /* The proxy this contract exists behind. */\n    Proxy public proxy;\n\n    /* The caller of the proxy, passed through to this contract.\n     * Note that every function using this member must apply the onlyProxy or\n     * optionalProxy modifiers, otherwise their invocations can use stale values. */ \n    address messageSender; \n\n    constructor(address _proxy, address _owner)\n        Owned(_owner)\n        public\n    {\n        proxy = Proxy(_proxy);\n        emit ProxyUpdated(_proxy);\n    }\n\n    function setProxy(address _proxy)\n        external\n        onlyOwner\n    {\n        proxy = Proxy(_proxy);\n        emit ProxyUpdated(_proxy);\n    }\n\n    function setMessageSender(address sender)\n        external\n        onlyProxy\n    {\n        messageSender = sender;\n    }\n\n    modifier onlyProxy {\n        require(Proxy(msg.sender) == proxy, \"Only the proxy can call this function\");\n        _;\n    }\n\n    modifier optionalProxy\n    {\n        if (Proxy(msg.sender) != proxy) {\n            messageSender = msg.sender;\n        }\n        _;\n    }\n\n    modifier optionalProxy_onlyOwner\n    {\n        if (Proxy(msg.sender) != proxy) {\n            messageSender = msg.sender;\n        }\n        require(messageSender == owner, \"This action can only be performed by the owner\");\n        _;\n    }\n\n    event ProxyUpdated(address proxyAddress);\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       State.sol\nversion:    1.1\nauthor:     Dominic Romanowski\n            Anton Jurisevic\n\ndate:       2018-05-15\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nThis contract is used side by side with external state token\ncontracts, such as Synthetix and Synth.\nIt provides an easy way to upgrade contract logic while\nmaintaining all user balances and allowances. This is designed\nto make the changeover as easy as possible, since mappings\nare not so cheap or straightforward to migrate.\n\nThe first deployed contract would create this state contract,\nusing it as its store of balances.\nWhen a new contract is deployed, it links to the existing\nstate contract, whose owner would then change its associated\ncontract to the new one.\n\n-----------------------------------------------------------------\n*/\n\n\ncontract State is Owned {\n    // the address of the contract that can modify variables\n    // this can only be changed by the owner of this contract\n    address public associatedContract;\n\n\n    constructor(address _owner, address _associatedContract)\n        Owned(_owner)\n        public\n    {\n        associatedContract = _associatedContract;\n        emit AssociatedContractUpdated(_associatedContract);\n    }\n\n    /* ========== SETTERS ========== */\n\n    // Change the associated contract to a new address\n    function setAssociatedContract(address _associatedContract)\n        external\n        onlyOwner\n    {\n        associatedContract = _associatedContract;\n        emit AssociatedContractUpdated(_associatedContract);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyAssociatedContract\n    {\n        require(msg.sender == associatedContract, \"Only the associated contract can perform this action\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event AssociatedContractUpdated(address associatedContract);\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       TokenState.sol\nversion:    1.1\nauthor:     Dominic Romanowski\n            Anton Jurisevic\n\ndate:       2018-05-15\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nA contract that holds the state of an ERC20 compliant token.\n\nThis contract is used side by side with external state token\ncontracts, such as Synthetix and Synth.\nIt provides an easy way to upgrade contract logic while\nmaintaining all user balances and allowances. This is designed\nto make the changeover as easy as possible, since mappings\nare not so cheap or straightforward to migrate.\n\nThe first deployed contract would create this state contract,\nusing it as its store of balances.\nWhen a new contract is deployed, it links to the existing\nstate contract, whose owner would then change its associated\ncontract to the new one.\n\n-----------------------------------------------------------------\n*/\n\n\n/**\n * @title ERC20 Token State\n * @notice Stores balance information of an ERC20 token contract.\n */\ncontract TokenState is State {\n\n    /* ERC20 fields. */\n    mapping(address => uint) public balanceOf;\n    mapping(address => mapping(address => uint)) public allowance;\n\n    /**\n     * @dev Constructor\n     * @param _owner The address which controls this contract.\n     * @param _associatedContract The ERC20 contract whose state this composes.\n     */\n    constructor(address _owner, address _associatedContract)\n        State(_owner, _associatedContract)\n        public\n    {}\n\n    /* ========== SETTERS ========== */\n\n    /**\n     * @notice Set ERC20 allowance.\n     * @dev Only the associated contract may call this.\n     * @param tokenOwner The authorising party.\n     * @param spender The authorised party.\n     * @param value The total value the authorised party may spend on the\n     * authorising party's behalf.\n     */\n    function setAllowance(address tokenOwner, address spender, uint value)\n        external\n        onlyAssociatedContract\n    {\n        allowance[tokenOwner][spender] = value;\n    }\n\n    /**\n     * @notice Set the balance in a given account\n     * @dev Only the associated contract may call this.\n     * @param account The account whose value to set.\n     * @param value The new balance of the given account.\n     */\n    function setBalanceOf(address account, uint value)\n        external\n        onlyAssociatedContract\n    {\n        balanceOf[account] = value;\n    }\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       ExternStateToken.sol\nversion:    1.0\nauthor:     Kevin Brown\ndate:       2018-08-06\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nThis contract offers a modifer that can prevent reentrancy on\nparticular actions. It will not work if you put it on multiple\nfunctions that can be called from each other. Specifically guard\nexternal entry points to the contract with the modifier only.\n\n-----------------------------------------------------------------\n*/\n\n\ncontract ReentrancyPreventer {\n    /* ========== MODIFIERS ========== */\n    bool isInFunctionBody = false;\n\n    modifier preventReentrancy {\n        require(!isInFunctionBody, \"Reverted to prevent reentrancy\");\n        isInFunctionBody = true;\n        _;\n        isInFunctionBody = false;\n    }\n}\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       TokenFallback.sol\nversion:    1.0\nauthor:     Kevin Brown\ndate:       2018-08-10\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nThis contract provides the logic that's used to call tokenFallback()\nwhen transfers happen.\n\nIt's pulled out into its own module because it's needed in two\nplaces, so instead of copy/pasting this logic and maininting it\nboth in Fee Token and Extern State Token, it's here and depended\non by both contracts.\n\n-----------------------------------------------------------------\n*/\n\n\ncontract TokenFallbackCaller is ReentrancyPreventer {\n    function callTokenFallbackIfNeeded(address sender, address recipient, uint amount, bytes data)\n        internal\n        preventReentrancy\n    {\n        /*\n            If we're transferring to a contract and it implements the tokenFallback function, call it.\n            This isn't ERC223 compliant because we don't revert if the contract doesn't implement tokenFallback.\n            This is because many DEXes and other contracts that expect to work with the standard\n            approve / transferFrom workflow don't implement tokenFallback but can still process our tokens as\n            usual, so it feels very harsh and likely to cause trouble if we add this restriction after having\n            previously gone live with a vanilla ERC20.\n        */\n\n        // Is the to address a contract? We can check the code size on that address and know.\n        uint length;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            // Retrieve the size of the code on the recipient address\n            length := extcodesize(recipient)\n        }\n\n        // If there's code there, it's a contract\n        if (length > 0) {\n            // Now we need to optionally call tokenFallback(address from, uint value).\n            // We can't call it the normal way because that reverts when the recipient doesn't implement the function.\n\n            // solium-disable-next-line security/no-low-level-calls\n            recipient.call(abi.encodeWithSignature(\"tokenFallback(address,uint256,bytes)\", sender, amount, data));\n\n            // And yes, we specifically don't care if this call fails, so we're not checking the return value.\n        }\n    }\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       ExternStateToken.sol\nversion:    1.3\nauthor:     Anton Jurisevic\n            Dominic Romanowski\n            Kevin Brown\n\ndate:       2018-05-29\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nA partial ERC20 token contract, designed to operate with a proxy.\nTo produce a complete ERC20 token, transfer and transferFrom\ntokens must be implemented, using the provided _byProxy internal\nfunctions.\nThis contract utilises an external state for upgradeability.\n\n-----------------------------------------------------------------\n*/\n\n\n/**\n * @title ERC20 Token contract, with detached state and designed to operate behind a proxy.\n */\ncontract ExternStateToken is SelfDestructible, Proxyable, TokenFallbackCaller {\n\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    /* ========== STATE VARIABLES ========== */\n\n    /* Stores balances and allowances. */\n    TokenState public tokenState;\n\n    /* Other ERC20 fields. */\n    string public name;\n    string public symbol;\n    uint public totalSupply;\n    uint8 public decimals;\n\n    /**\n     * @dev Constructor.\n     * @param _proxy The proxy associated with this contract.\n     * @param _name Token's ERC20 name.\n     * @param _symbol Token's ERC20 symbol.\n     * @param _totalSupply The total supply of the token.\n     * @param _tokenState The TokenState contract address.\n     * @param _owner The owner of this contract.\n     */\n    constructor(address _proxy, TokenState _tokenState,\n                string _name, string _symbol, uint _totalSupply,\n                uint8 _decimals, address _owner)\n        SelfDestructible(_owner)\n        Proxyable(_proxy, _owner)\n        public\n    {\n        tokenState = _tokenState;\n\n        name = _name;\n        symbol = _symbol;\n        totalSupply = _totalSupply;\n        decimals = _decimals;\n    }\n\n    /* ========== VIEWS ========== */\n\n    /**\n     * @notice Returns the ERC20 allowance of one party to spend on behalf of another.\n     * @param owner The party authorising spending of their funds.\n     * @param spender The party spending tokenOwner's funds.\n     */\n    function allowance(address owner, address spender)\n        public\n        view\n        returns (uint)\n    {\n        return tokenState.allowance(owner, spender);\n    }\n\n    /**\n     * @notice Returns the ERC20 token balance of a given account.\n     */\n    function balanceOf(address account)\n        public\n        view\n        returns (uint)\n    {\n        return tokenState.balanceOf(account);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice Set the address of the TokenState contract.\n     * @dev This can be used to \"pause\" transfer functionality, by pointing the tokenState at 0x000..\n     * as balances would be unreachable.\n     */ \n    function setTokenState(TokenState _tokenState)\n        external\n        optionalProxy_onlyOwner\n    {\n        tokenState = _tokenState;\n        emitTokenStateUpdated(_tokenState);\n    }\n\n    function _internalTransfer(address from, address to, uint value, bytes data) \n        internal\n        returns (bool)\n    { \n        /* Disallow transfers to irretrievable-addresses. */\n        require(to != address(0), \"Cannot transfer to the 0 address\");\n        require(to != address(this), \"Cannot transfer to the underlying contract\");\n        require(to != address(proxy), \"Cannot transfer to the proxy contract\");\n\n        // Insufficient balance will be handled by the safe subtraction.\n        tokenState.setBalanceOf(from, tokenState.balanceOf(from).sub(value));\n        tokenState.setBalanceOf(to, tokenState.balanceOf(to).add(value));\n\n        // If the recipient is a contract, we need to call tokenFallback on it so they can do ERC223\n        // actions when receiving our tokens. Unlike the standard, however, we don't revert if the\n        // recipient contract doesn't implement tokenFallback.\n        callTokenFallbackIfNeeded(from, to, value, data);\n        \n        // Emit a standard ERC20 transfer event\n        emitTransfer(from, to, value);\n\n        return true;\n    }\n\n    /**\n     * @dev Perform an ERC20 token transfer. Designed to be called by transfer functions possessing\n     * the onlyProxy or optionalProxy modifiers.\n     */\n    function _transfer_byProxy(address from, address to, uint value, bytes data)\n        internal\n        returns (bool)\n    {\n        return _internalTransfer(from, to, value, data);\n    }\n\n    /**\n     * @dev Perform an ERC20 token transferFrom. Designed to be called by transferFrom functions\n     * possessing the optionalProxy or optionalProxy modifiers.\n     */\n    function _transferFrom_byProxy(address sender, address from, address to, uint value, bytes data)\n        internal\n        returns (bool)\n    {\n        /* Insufficient allowance will be handled by the safe subtraction. */\n        tokenState.setAllowance(from, sender, tokenState.allowance(from, sender).sub(value));\n        return _internalTransfer(from, to, value, data);\n    }\n\n    /**\n     * @notice Approves spender to transfer on the message sender's behalf.\n     */\n    function approve(address spender, uint value)\n        public\n        optionalProxy\n        returns (bool)\n    {\n        address sender = messageSender;\n\n        tokenState.setAllowance(sender, spender, value);\n        emitApproval(sender, spender, value);\n        return true;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    bytes32 constant TRANSFER_SIG = keccak256(\"Transfer(address,address,uint256)\");\n    function emitTransfer(address from, address to, uint value) internal {\n        proxy._emit(abi.encode(value), 3, TRANSFER_SIG, bytes32(from), bytes32(to), 0);\n    }\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n    bytes32 constant APPROVAL_SIG = keccak256(\"Approval(address,address,uint256)\");\n    function emitApproval(address owner, address spender, uint value) internal {\n        proxy._emit(abi.encode(value), 3, APPROVAL_SIG, bytes32(owner), bytes32(spender), 0);\n    }\n\n    event TokenStateUpdated(address newTokenState);\n    bytes32 constant TOKENSTATEUPDATED_SIG = keccak256(\"TokenStateUpdated(address)\");\n    function emitTokenStateUpdated(address newTokenState) internal {\n        proxy._emit(abi.encode(newTokenState), 1, TOKENSTATEUPDATED_SIG, 0, 0, 0);\n    }\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       Synth.sol\nversion:    2.0\nauthor:     Kevin Brown\ndate:       2018-09-13\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nSynthetix-backed stablecoin contract.\n\nThis contract issues synths, which are tokens that mirror various\nflavours of fiat currency.\n\nSynths are issuable by Synthetix Network Token (SNX) holders who \nhave to lock up some value of their SNX to issue S * Cmax synths. \nWhere Cmax issome value less than 1.\n\nA configurable fee is charged on synth transfers and deposited\ninto a common pot, which Synthetix holders may withdraw from once\nper fee period.\n\n-----------------------------------------------------------------\n*/\n\n\ncontract Synth is ExternStateToken {\n\n    /* ========== STATE VARIABLES ========== */\n\n    FeePool public feePool;\n    Synthetix public synthetix;\n\n    // Currency key which identifies this Synth to the Synthetix system\n    bytes4 public currencyKey;\n\n    uint8 constant DECIMALS = 18;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address _proxy, TokenState _tokenState, Synthetix _synthetix, FeePool _feePool,\n        string _tokenName, string _tokenSymbol, address _owner, bytes4 _currencyKey\n    )\n        ExternStateToken(_proxy, _tokenState, _tokenName, _tokenSymbol, 0, DECIMALS, _owner)\n        public\n    {\n        require(_proxy != 0, \"_proxy cannot be 0\");\n        require(address(_synthetix) != 0, \"_synthetix cannot be 0\");\n        require(address(_feePool) != 0, \"_feePool cannot be 0\");\n        require(_owner != 0, \"_owner cannot be 0\");\n        require(_synthetix.synths(_currencyKey) == Synth(0), \"Currency key is already in use\");\n\n        feePool = _feePool;\n        synthetix = _synthetix;\n        currencyKey = _currencyKey;\n    }\n\n    /* ========== SETTERS ========== */\n\n    function setSynthetix(Synthetix _synthetix)\n        external\n        optionalProxy_onlyOwner\n    {\n        synthetix = _synthetix;\n        emitSynthetixUpdated(_synthetix);\n    }\n\n    function setFeePool(FeePool _feePool)\n        external\n        optionalProxy_onlyOwner\n    {\n        feePool = _feePool;\n        emitFeePoolUpdated(_feePool);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice Override ERC20 transfer function in order to \n     * subtract the transaction fee and send it to the fee pool\n     * for SNX holders to claim. */\n    function transfer(address to, uint value)\n        public\n        optionalProxy\n        notFeeAddress(messageSender)\n        returns (bool)\n    {\n        uint amountReceived = feePool.amountReceivedFromTransfer(value);\n        uint fee = value.sub(amountReceived);\n\n        // Send the fee off to the fee pool.\n        synthetix.synthInitiatedFeePayment(messageSender, currencyKey, fee);\n\n        // And send their result off to the destination address\n        bytes memory empty;\n        return _internalTransfer(messageSender, to, amountReceived, empty);\n    }\n\n    /**\n     * @notice Override ERC223 transfer function in order to \n     * subtract the transaction fee and send it to the fee pool\n     * for SNX holders to claim. */\n    function transfer(address to, uint value, bytes data)\n        public\n        optionalProxy\n        notFeeAddress(messageSender)\n        returns (bool)\n    {\n        uint amountReceived = feePool.amountReceivedFromTransfer(value);\n        uint fee = value.sub(amountReceived);\n\n        // Send the fee off to the fee pool, which we don't want to charge an additional fee on\n        synthetix.synthInitiatedFeePayment(messageSender, currencyKey, fee);\n\n        // And send their result off to the destination address\n        return _internalTransfer(messageSender, to, amountReceived, data);\n    }\n\n    /**\n     * @notice Override ERC20 transferFrom function in order to \n     * subtract the transaction fee and send it to the fee pool\n     * for SNX holders to claim. */\n    function transferFrom(address from, address to, uint value)\n        public\n        optionalProxy\n        notFeeAddress(from)\n        returns (bool)\n    {\n        // The fee is deducted from the amount sent.\n        uint amountReceived = feePool.amountReceivedFromTransfer(value);\n        uint fee = value.sub(amountReceived);\n\n        // Reduce the allowance by the amount we're transferring.\n        // The safeSub call will handle an insufficient allowance.\n        tokenState.setAllowance(from, messageSender, tokenState.allowance(from, messageSender).sub(value));\n\n        // Send the fee off to the fee pool.\n        synthetix.synthInitiatedFeePayment(from, currencyKey, fee);\n\n        bytes memory empty;\n        return _internalTransfer(from, to, amountReceived, empty);\n    }\n\n    /**\n     * @notice Override ERC223 transferFrom function in order to \n     * subtract the transaction fee and send it to the fee pool\n     * for SNX holders to claim. */\n    function transferFrom(address from, address to, uint value, bytes data)\n        public\n        optionalProxy\n        notFeeAddress(from)\n        returns (bool)\n    {\n        // The fee is deducted from the amount sent.\n        uint amountReceived = feePool.amountReceivedFromTransfer(value);\n        uint fee = value.sub(amountReceived);\n\n        // Reduce the allowance by the amount we're transferring.\n        // The safeSub call will handle an insufficient allowance.\n        tokenState.setAllowance(from, messageSender, tokenState.allowance(from, messageSender).sub(value));\n\n        // Send the fee off to the fee pool, which we don't want to charge an additional fee on\n        synthetix.synthInitiatedFeePayment(from, currencyKey, fee);\n\n        return _internalTransfer(from, to, amountReceived, data);\n    }\n\n    /* Subtract the transfer fee from the senders account so the \n     * receiver gets the exact amount specified to send. */\n    function transferSenderPaysFee(address to, uint value)\n        public\n        optionalProxy\n        notFeeAddress(messageSender)\n        returns (bool)\n    {\n        uint fee = feePool.transferFeeIncurred(value);\n\n        // Send the fee off to the fee pool, which we don't want to charge an additional fee on\n        synthetix.synthInitiatedFeePayment(messageSender, currencyKey, fee);\n\n        // And send their transfer amount off to the destination address\n        bytes memory empty;\n        return _internalTransfer(messageSender, to, value, empty);\n    }\n\n    /* Subtract the transfer fee from the senders account so the \n     * receiver gets the exact amount specified to send. */\n    function transferSenderPaysFee(address to, uint value, bytes data)\n        public\n        optionalProxy\n        notFeeAddress(messageSender)\n        returns (bool)\n    {\n        uint fee = feePool.transferFeeIncurred(value);\n\n        // Send the fee off to the fee pool, which we don't want to charge an additional fee on\n        synthetix.synthInitiatedFeePayment(messageSender, currencyKey, fee);\n\n        // And send their transfer amount off to the destination address\n        return _internalTransfer(messageSender, to, value, data);\n    }\n\n    /* Subtract the transfer fee from the senders account so the \n     * to address receives the exact amount specified to send. */\n    function transferFromSenderPaysFee(address from, address to, uint value)\n        public\n        optionalProxy\n        notFeeAddress(from)\n        returns (bool)\n    {\n        uint fee = feePool.transferFeeIncurred(value);\n\n        // Reduce the allowance by the amount we're transferring.\n        // The safeSub call will handle an insufficient allowance.\n        tokenState.setAllowance(from, messageSender, tokenState.allowance(from, messageSender).sub(value.add(fee)));\n\n        // Send the fee off to the fee pool, which we don't want to charge an additional fee on\n        synthetix.synthInitiatedFeePayment(from, currencyKey, fee);\n\n        bytes memory empty;\n        return _internalTransfer(from, to, value, empty);\n    }\n\n    /* Subtract the transfer fee from the senders account so the \n     * to address receives the exact amount specified to send. */\n    function transferFromSenderPaysFee(address from, address to, uint value, bytes data)\n        public\n        optionalProxy\n        notFeeAddress(from)\n        returns (bool)\n    {\n        uint fee = feePool.transferFeeIncurred(value);\n\n        // Reduce the allowance by the amount we're transferring.\n        // The safeSub call will handle an insufficient allowance.\n        tokenState.setAllowance(from, messageSender, tokenState.allowance(from, messageSender).sub(value.add(fee)));\n\n        // Send the fee off to the fee pool, which we don't want to charge an additional fee on\n        synthetix.synthInitiatedFeePayment(from, currencyKey, fee);\n\n        return _internalTransfer(from, to, value, data);\n    }\n\n    // Override our internal transfer to inject preferred currency support\n    function _internalTransfer(address from, address to, uint value, bytes data)\n        internal\n        returns (bool)\n    {\n        bytes4 preferredCurrencyKey = synthetix.synthetixState().preferredCurrency(to);\n\n        // Do they have a preferred currency that's not us? If so we need to exchange\n        if (preferredCurrencyKey != 0 && preferredCurrencyKey != currencyKey) {\n            return synthetix.synthInitiatedExchange(from, currencyKey, value, preferredCurrencyKey, to);\n        } else {\n            // Otherwise we just transfer\n            return super._internalTransfer(from, to, value, data);\n        }\n    }\n\n    // Allow synthetix to issue a certain number of synths from an account.\n    function issue(address account, uint amount)\n        external\n        onlySynthetixOrFeePool\n    {\n        tokenState.setBalanceOf(account, tokenState.balanceOf(account).add(amount));\n        totalSupply = totalSupply.add(amount);\n        emitTransfer(address(0), account, amount);\n        emitIssued(account, amount);\n    }\n\n    // Allow synthetix or another synth contract to burn a certain number of synths from an account.\n    function burn(address account, uint amount)\n        external\n        onlySynthetixOrFeePool\n    {\n        tokenState.setBalanceOf(account, tokenState.balanceOf(account).sub(amount));\n        totalSupply = totalSupply.sub(amount);\n        emitTransfer(account, address(0), amount);\n        emitBurned(account, amount);\n    }\n\n    // Allow synthetix to trigger a token fallback call from our synths so users get notified on\n    // exchange as well as transfer\n    function triggerTokenFallbackIfNeeded(address sender, address recipient, uint amount)\n        external\n        onlySynthetixOrFeePool\n    {\n        bytes memory empty;\n        callTokenFallbackIfNeeded(sender, recipient, amount, empty);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlySynthetixOrFeePool() {\n        bool isSynthetix = msg.sender == address(synthetix);\n        bool isFeePool = msg.sender == address(feePool);\n\n        require(isSynthetix || isFeePool, \"Only the Synthetix or FeePool contracts can perform this action\");\n        _;\n    }\n\n    modifier notFeeAddress(address account) {\n        require(account != feePool.FEE_ADDRESS(), \"Cannot perform this action with the fee address\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event SynthetixUpdated(address newSynthetix);\n    bytes32 constant SYNTHETIXUPDATED_SIG = keccak256(\"SynthetixUpdated(address)\");\n    function emitSynthetixUpdated(address newSynthetix) internal {\n        proxy._emit(abi.encode(newSynthetix), 1, SYNTHETIXUPDATED_SIG, 0, 0, 0);\n    }\n\n    event FeePoolUpdated(address newFeePool);\n    bytes32 constant FEEPOOLUPDATED_SIG = keccak256(\"FeePoolUpdated(address)\");\n    function emitFeePoolUpdated(address newFeePool) internal {\n        proxy._emit(abi.encode(newFeePool), 1, FEEPOOLUPDATED_SIG, 0, 0, 0);\n    }\n\n    event Issued(address indexed account, uint value);\n    bytes32 constant ISSUED_SIG = keccak256(\"Issued(address,uint256)\");\n    function emitIssued(address account, uint value) internal {\n        proxy._emit(abi.encode(value), 2, ISSUED_SIG, bytes32(account), 0, 0);\n    }\n\n    event Burned(address indexed account, uint value);\n    bytes32 constant BURNED_SIG = keccak256(\"Burned(address,uint256)\");\n    function emitBurned(address account, uint value) internal {\n        proxy._emit(abi.encode(value), 2, BURNED_SIG, bytes32(account), 0, 0);\n    }\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       FeePool.sol\nversion:    1.0\nauthor:     Kevin Brown\ndate:       2018-10-15\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nThe FeePool is a place for users to interact with the fees that\nhave been generated from the Synthetix system if they've helped\nto create the economy.\n\nUsers stake Synthetix to create Synths. As Synth users transact,\na small fee is deducted from each transaction, which collects\nin the fee pool. Fees are immediately converted to XDRs, a type\nof reserve currency similar to SDRs used by the IMF:\nhttps://www.imf.org/en/About/Factsheets/Sheets/2016/08/01/14/51/Special-Drawing-Right-SDR\n\nUsers are entitled to withdraw fees from periods that they participated\nin fully, e.g. they have to stake before the period starts. They\ncan withdraw fees for the last 6 periods as a single lump sum.\nCurrently fee periods are 7 days long, meaning it's assumed\nusers will withdraw their fees approximately once a month. Fees\nwhich are not withdrawn are redistributed to the whole pool,\nenabling these non-claimed fees to go back to the rest of the commmunity.\n\nFees can be withdrawn in any synth currency.\n\n-----------------------------------------------------------------\n*/\n\n\ncontract FeePool is Proxyable, SelfDestructible {\n\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    Synthetix public synthetix;\n\n    // A percentage fee charged on each transfer.\n    uint public transferFeeRate;\n\n    // Transfer fee may not exceed 10%.\n    uint constant public MAX_TRANSFER_FEE_RATE = SafeDecimalMath.unit() / 10;\n\n    // A percentage fee charged on each exchange between currencies.\n    uint public exchangeFeeRate;\n\n    // Exchange fee may not exceed 10%.\n    uint constant public MAX_EXCHANGE_FEE_RATE = SafeDecimalMath.unit() / 10;\n\n    // The address with the authority to distribute fees.\n    address public feeAuthority;\n\n    // Where fees are pooled in XDRs.\n    address public constant FEE_ADDRESS = 0xfeEFEEfeefEeFeefEEFEEfEeFeefEEFeeFEEFEeF;\n\n    // This struct represents the issuance activity that's happened in a fee period.\n    struct FeePeriod {\n        uint feePeriodId;\n        uint startingDebtIndex;\n        uint startTime;\n        uint feesToDistribute;\n        uint feesClaimed;\n    }\n\n    // The last 6 fee periods are all that you can claim from.\n    // These are stored and managed from [0], such that [0] is always\n    // the most recent fee period, and [5] is always the oldest fee\n    // period that users can claim for.\n    uint8 constant public FEE_PERIOD_LENGTH = 6;\n    FeePeriod[FEE_PERIOD_LENGTH] public recentFeePeriods;\n\n    // The next fee period will have this ID.\n    uint public nextFeePeriodId;\n\n    // How long a fee period lasts at a minimum. It is required for the\n    // fee authority to roll over the periods, so they are not guaranteed\n    // to roll over at exactly this duration, but the contract enforces\n    // that they cannot roll over any quicker than this duration.\n    uint public feePeriodDuration = 1 weeks;\n\n    // The fee period must be between 1 day and 60 days.\n    uint public constant MIN_FEE_PERIOD_DURATION = 1 days;\n    uint public constant MAX_FEE_PERIOD_DURATION = 60 days;\n\n    // The last period a user has withdrawn their fees in, identified by the feePeriodId\n    mapping(address => uint) public lastFeeWithdrawal;\n\n    // Users receive penalties if their collateralisation ratio drifts out of our desired brackets\n    // We precompute the brackets and penalties to save gas.\n    uint constant TWENTY_PERCENT = (20 * SafeDecimalMath.unit()) / 100;\n    uint constant TWENTY_FIVE_PERCENT = (25 * SafeDecimalMath.unit()) / 100;\n    uint constant THIRTY_PERCENT = (30 * SafeDecimalMath.unit()) / 100;\n    uint constant FOURTY_PERCENT = (40 * SafeDecimalMath.unit()) / 100;\n    uint constant FIFTY_PERCENT = (50 * SafeDecimalMath.unit()) / 100;\n    uint constant SEVENTY_FIVE_PERCENT = (75 * SafeDecimalMath.unit()) / 100;\n\n    constructor(address _proxy, address _owner, Synthetix _synthetix, address _feeAuthority, uint _transferFeeRate, uint _exchangeFeeRate)\n        SelfDestructible(_owner)\n        Proxyable(_proxy, _owner)\n        public\n    {\n        // Constructed fee rates should respect the maximum fee rates.\n        require(_transferFeeRate <= MAX_TRANSFER_FEE_RATE, \"Constructed transfer fee rate should respect the maximum fee rate\");\n        require(_exchangeFeeRate <= MAX_EXCHANGE_FEE_RATE, \"Constructed exchange fee rate should respect the maximum fee rate\");\n\n        synthetix = _synthetix;\n        feeAuthority = _feeAuthority;\n        transferFeeRate = _transferFeeRate;\n        exchangeFeeRate = _exchangeFeeRate;\n\n        // Set our initial fee period\n        recentFeePeriods[0].feePeriodId = 1;\n        recentFeePeriods[0].startTime = now;\n        // Gas optimisation: These do not need to be initialised. They start at 0.\n        // recentFeePeriods[0].startingDebtIndex = 0;\n        // recentFeePeriods[0].feesToDistribute = 0;\n\n        // And the next one starts at 2.\n        nextFeePeriodId = 2;\n    }\n\n    /**\n     * @notice Set the exchange fee, anywhere within the range 0-10%.\n     * @dev The fee rate is in decimal format, with UNIT being the value of 100%.\n     */\n    function setExchangeFeeRate(uint _exchangeFeeRate)\n        external\n        optionalProxy_onlyOwner\n    {\n        require(_exchangeFeeRate <= MAX_EXCHANGE_FEE_RATE, \"Exchange fee rate must be below MAX_EXCHANGE_FEE_RATE\");\n\n        exchangeFeeRate = _exchangeFeeRate;\n\n        emitExchangeFeeUpdated(_exchangeFeeRate);\n    }\n\n    /**\n     * @notice Set the transfer fee, anywhere within the range 0-10%.\n     * @dev The fee rate is in decimal format, with UNIT being the value of 100%.\n     */\n    function setTransferFeeRate(uint _transferFeeRate)\n        external\n        optionalProxy_onlyOwner\n    {\n        require(_transferFeeRate <= MAX_TRANSFER_FEE_RATE, \"Transfer fee rate must be below MAX_TRANSFER_FEE_RATE\");\n\n        transferFeeRate = _transferFeeRate;\n\n        emitTransferFeeUpdated(_transferFeeRate);\n    }\n\n    /**\n     * @notice Set the address of the user/contract responsible for collecting or\n     * distributing fees.\n     */\n    function setFeeAuthority(address _feeAuthority)\n        external\n        optionalProxy_onlyOwner\n    {\n        feeAuthority = _feeAuthority;\n\n        emitFeeAuthorityUpdated(_feeAuthority);\n    }\n\n    /**\n     * @notice Set the fee period duration\n     */\n    function setFeePeriodDuration(uint _feePeriodDuration)\n        external\n        optionalProxy_onlyOwner\n    {\n        require(_feePeriodDuration >= MIN_FEE_PERIOD_DURATION, \"New fee period cannot be less than minimum fee period duration\");\n        require(_feePeriodDuration <= MAX_FEE_PERIOD_DURATION, \"New fee period cannot be greater than maximum fee period duration\");\n\n        feePeriodDuration = _feePeriodDuration;\n\n        emitFeePeriodDurationUpdated(_feePeriodDuration);\n    }\n\n    /**\n     * @notice Set the synthetix contract\n     */\n    function setSynthetix(Synthetix _synthetix)\n        external\n        optionalProxy_onlyOwner\n    {\n        require(address(_synthetix) != address(0), \"New Synthetix must be non-zero\");\n\n        synthetix = _synthetix;\n\n        emitSynthetixUpdated(_synthetix);\n    }\n\n    /**\n     * @notice The Synthetix contract informs us when fees are paid.\n     */\n    function feePaid(bytes4 currencyKey, uint amount)\n        external\n        onlySynthetix\n    {\n        uint xdrAmount = synthetix.effectiveValue(currencyKey, amount, \"XDR\");\n\n        // Which we keep track of in XDRs in our fee pool.\n        recentFeePeriods[0].feesToDistribute = recentFeePeriods[0].feesToDistribute.add(xdrAmount);\n    }\n\n    /**\n     * @notice Close the current fee period and start a new one. Only callable by the fee authority.\n     */\n    function closeCurrentFeePeriod()\n        external\n        onlyFeeAuthority\n    {\n        require(recentFeePeriods[0].startTime <= (now - feePeriodDuration), \"It is too early to close the current fee period\");\n\n        FeePeriod memory secondLastFeePeriod = recentFeePeriods[FEE_PERIOD_LENGTH - 2];\n        FeePeriod memory lastFeePeriod = recentFeePeriods[FEE_PERIOD_LENGTH - 1];\n\n        // Any unclaimed fees from the last period in the array roll back one period.\n        // Because of the subtraction here, they're effectively proportionally redistributed to those who\n        // have already claimed from the old period, available in the new period.\n        // The subtraction is important so we don't create a ticking time bomb of an ever growing\n        // number of fees that can never decrease and will eventually overflow at the end of the fee pool.\n        recentFeePeriods[FEE_PERIOD_LENGTH - 2].feesToDistribute = lastFeePeriod.feesToDistribute\n            .sub(lastFeePeriod.feesClaimed)\n            .add(secondLastFeePeriod.feesToDistribute);\n\n        // Shift the previous fee periods across to make room for the new one.\n        // Condition checks for overflow when uint subtracts one from zero\n        // Could be written with int instead of uint, but then we have to convert everywhere\n        // so it felt better from a gas perspective to just change the condition to check\n        // for overflow after subtracting one from zero.\n        for (uint i = FEE_PERIOD_LENGTH - 2; i < FEE_PERIOD_LENGTH; i--) {\n            uint next = i + 1;\n\n            recentFeePeriods[next].feePeriodId = recentFeePeriods[i].feePeriodId;\n            recentFeePeriods[next].startingDebtIndex = recentFeePeriods[i].startingDebtIndex;\n            recentFeePeriods[next].startTime = recentFeePeriods[i].startTime;\n            recentFeePeriods[next].feesToDistribute = recentFeePeriods[i].feesToDistribute;\n            recentFeePeriods[next].feesClaimed = recentFeePeriods[i].feesClaimed;\n        }\n\n        // Clear the first element of the array to make sure we don't have any stale values.\n        delete recentFeePeriods[0];\n\n        // Open up the new fee period\n        recentFeePeriods[0].feePeriodId = nextFeePeriodId;\n        recentFeePeriods[0].startingDebtIndex = synthetix.synthetixState().debtLedgerLength();\n        recentFeePeriods[0].startTime = now;\n\n        nextFeePeriodId = nextFeePeriodId.add(1);\n\n        emitFeePeriodClosed(recentFeePeriods[1].feePeriodId);\n    }\n\n    /**\n    * @notice Claim fees for last period when available or not already withdrawn.\n    * @param currencyKey Synth currency you wish to receive the fees in.\n    */\n    function claimFees(bytes4 currencyKey)\n        external\n        optionalProxy\n        returns (bool)\n    {\n        uint availableFees = feesAvailable(messageSender, \"XDR\");\n\n        require(availableFees > 0, \"No fees available for period, or fees already claimed\");\n\n        lastFeeWithdrawal[messageSender] = recentFeePeriods[1].feePeriodId;\n\n        // Record the fee payment in our recentFeePeriods\n        _recordFeePayment(availableFees);\n\n        // Send them their fees\n        _payFees(messageSender, availableFees, currencyKey);\n\n        emitFeesClaimed(messageSender, availableFees);\n\n        return true;\n    }\n\n    /**\n     * @notice Record the fee payment in our recentFeePeriods.\n     * @param xdrAmount The amout of fees priced in XDRs.\n     */\n    function _recordFeePayment(uint xdrAmount)\n        internal\n    {\n        // Don't assign to the parameter\n        uint remainingToAllocate = xdrAmount;\n\n        // Start at the oldest period and record the amount, moving to newer periods\n        // until we've exhausted the amount.\n        // The condition checks for overflow because we're going to 0 with an unsigned int.\n        for (uint i = FEE_PERIOD_LENGTH - 1; i < FEE_PERIOD_LENGTH; i--) {\n            uint delta = recentFeePeriods[i].feesToDistribute.sub(recentFeePeriods[i].feesClaimed);\n\n            if (delta > 0) {\n                // Take the smaller of the amount left to claim in the period and the amount we need to allocate\n                uint amountInPeriod = delta < remainingToAllocate ? delta : remainingToAllocate;\n\n                recentFeePeriods[i].feesClaimed = recentFeePeriods[i].feesClaimed.add(amountInPeriod);\n                remainingToAllocate = remainingToAllocate.sub(amountInPeriod);\n\n                // No need to continue iterating if we've recorded the whole amount;\n                if (remainingToAllocate == 0) return;\n            }\n        }\n\n        // If we hit this line, we've exhausted our fee periods, but still have more to allocate. Wat?\n        // If this happens it's a definite bug in the code, so assert instead of require.\n        assert(remainingToAllocate == 0);\n    }\n\n    /**\n    * @notice Send the fees to claiming address.\n    * @param account The address to send the fees to.\n    * @param xdrAmount The amount of fees priced in XDRs.\n    * @param destinationCurrencyKey The synth currency the user wishes to receive their fees in (convert to this currency).\n    */\n    function _payFees(address account, uint xdrAmount, bytes4 destinationCurrencyKey)\n        internal\n        notFeeAddress(account)\n    {\n        require(account != address(0), \"Account can't be 0\");\n        require(account != address(this), \"Can't send fees to fee pool\");\n        require(account != address(proxy), \"Can't send fees to proxy\");\n        require(account != address(synthetix), \"Can't send fees to synthetix\");\n\n        Synth xdrSynth = synthetix.synths(\"XDR\");\n        Synth destinationSynth = synthetix.synths(destinationCurrencyKey);\n\n        // Note: We don't need to check the fee pool balance as the burn() below will do a safe subtraction which requires\n        // the subtraction to not overflow, which would happen if the balance is not sufficient.\n\n        // Burn the source amount\n        xdrSynth.burn(FEE_ADDRESS, xdrAmount);\n\n        // How much should they get in the destination currency?\n        uint destinationAmount = synthetix.effectiveValue(\"XDR\", xdrAmount, destinationCurrencyKey);\n\n        // There's no fee on withdrawing fees, as that'd be way too meta.\n\n        // Mint their new synths\n        destinationSynth.issue(account, destinationAmount);\n\n        // Nothing changes as far as issuance data goes because the total value in the system hasn't changed.\n\n        // Call the ERC223 transfer callback if needed\n        destinationSynth.triggerTokenFallbackIfNeeded(FEE_ADDRESS, account, destinationAmount);\n    }\n\n    /**\n     * @notice Calculate the Fee charged on top of a value being sent\n     * @return Return the fee charged\n     */\n    function transferFeeIncurred(uint value)\n        public\n        view\n        returns (uint)\n    {\n        return value.multiplyDecimal(transferFeeRate);\n\n        // Transfers less than the reciprocal of transferFeeRate should be completely eaten up by fees.\n        // This is on the basis that transfers less than this value will result in a nil fee.\n        // Probably too insignificant to worry about, but the following code will achieve it.\n        //      if (fee == 0 && transferFeeRate != 0) {\n        //          return _value;\n        //      }\n        //      return fee;\n    }\n\n    /**\n     * @notice The value that you would need to send so that the recipient receives\n     * a specified value.\n     * @param value The value you want the recipient to receive\n     */\n    function transferredAmountToReceive(uint value)\n        external\n        view\n        returns (uint)\n    {\n        return value.add(transferFeeIncurred(value));\n    }\n\n    /**\n     * @notice The amount the recipient will receive if you send a certain number of tokens.\n     * @param value The amount of tokens you intend to send.\n     */\n    function amountReceivedFromTransfer(uint value)\n        external\n        view\n        returns (uint)\n    {\n        return value.divideDecimal(transferFeeRate.add(SafeDecimalMath.unit()));\n    }\n\n    /**\n     * @notice Calculate the fee charged on top of a value being sent via an exchange\n     * @return Return the fee charged\n     */\n    function exchangeFeeIncurred(uint value)\n        public\n        view\n        returns (uint)\n    {\n        return value.multiplyDecimal(exchangeFeeRate);\n\n        // Exchanges less than the reciprocal of exchangeFeeRate should be completely eaten up by fees.\n        // This is on the basis that exchanges less than this value will result in a nil fee.\n        // Probably too insignificant to worry about, but the following code will achieve it.\n        //      if (fee == 0 && exchangeFeeRate != 0) {\n        //          return _value;\n        //      }\n        //      return fee;\n    }\n\n    /**\n     * @notice The value that you would need to get after currency exchange so that the recipient receives\n     * a specified value.\n     * @param value The value you want the recipient to receive\n     */\n    function exchangedAmountToReceive(uint value)\n        external\n        view\n        returns (uint)\n    {\n        return value.add(exchangeFeeIncurred(value));\n    }\n\n    /**\n     * @notice The amount the recipient will receive if you are performing an exchange and the\n     * destination currency will be worth a certain number of tokens.\n     * @param value The amount of destination currency tokens they received after the exchange.\n     */\n    function amountReceivedFromExchange(uint value)\n        external\n        view\n        returns (uint)\n    {\n        return value.divideDecimal(exchangeFeeRate.add(SafeDecimalMath.unit()));\n    }\n\n    /**\n     * @notice The total fees available in the system to be withdrawn, priced in currencyKey currency\n     * @param currencyKey The currency you want to price the fees in\n     */\n    function totalFeesAvailable(bytes4 currencyKey)\n        external\n        view\n        returns (uint)\n    {\n        uint totalFees = 0;\n\n        // Fees in fee period [0] are not yet available for withdrawal\n        for (uint i = 1; i < FEE_PERIOD_LENGTH; i++) {\n            totalFees = totalFees.add(recentFeePeriods[i].feesToDistribute);\n            totalFees = totalFees.sub(recentFeePeriods[i].feesClaimed);\n        }\n\n        return synthetix.effectiveValue(\"XDR\", totalFees, currencyKey);\n    }\n\n    /**\n     * @notice The fees available to be withdrawn by a specific account, priced in currencyKey currency\n     * @param currencyKey The currency you want to price the fees in\n     */\n    function feesAvailable(address account, bytes4 currencyKey)\n        public\n        view\n        returns (uint)\n    {\n        // Add up the fees\n        uint[FEE_PERIOD_LENGTH] memory userFees = feesByPeriod(account);\n\n        uint totalFees = 0;\n\n        // Fees in fee period [0] are not yet available for withdrawal\n        for (uint i = 1; i < FEE_PERIOD_LENGTH; i++) {\n            totalFees = totalFees.add(userFees[i]);\n        }\n\n        // And convert them to their desired currency\n        return synthetix.effectiveValue(\"XDR\", totalFees, currencyKey);\n    }\n\n    /**\n     * @notice The penalty a particular address would incur if its fees were withdrawn right now\n     * @param account The address you want to query the penalty for\n     */\n    function currentPenalty(address account)\n        public\n        view\n        returns (uint)\n    {\n        uint ratio = synthetix.collateralisationRatio(account);\n\n        // Users receive a different amount of fees depending on how their collateralisation ratio looks right now.\n        // 0% - 20%: Fee is calculated based on percentage of economy issued.\n        // 20% - 30%: 25% reduction in fees\n        // 30% - 40%: 50% reduction in fees\n        // >40%: 75% reduction in fees\n        if (ratio <= TWENTY_PERCENT) {\n            return 0;\n        } else if (ratio > TWENTY_PERCENT && ratio <= THIRTY_PERCENT) {\n            return TWENTY_FIVE_PERCENT;\n        } else if (ratio > THIRTY_PERCENT && ratio <= FOURTY_PERCENT) {\n            return FIFTY_PERCENT;\n        }\n\n        return SEVENTY_FIVE_PERCENT;\n    }\n\n    /**\n     * @notice Calculates fees by period for an account, priced in XDRs\n     * @param account The address you want to query the fees by penalty for\n     */\n    function feesByPeriod(address account)\n        public\n        view\n        returns (uint[FEE_PERIOD_LENGTH])\n    {\n        uint[FEE_PERIOD_LENGTH] memory result;\n\n        // What's the user's debt entry index and the debt they owe to the system\n        uint initialDebtOwnership;\n        uint debtEntryIndex;\n        (initialDebtOwnership, debtEntryIndex) = synthetix.synthetixState().issuanceData(account);\n\n        // If they don't have any debt ownership, they don't have any fees\n        if (initialDebtOwnership == 0) return result;\n\n        // If there are no XDR synths, then they don't have any fees\n        uint totalSynths = synthetix.totalIssuedSynths(\"XDR\");\n        if (totalSynths == 0) return result;\n\n        uint debtBalance = synthetix.debtBalanceOf(account, \"XDR\");\n        uint userOwnershipPercentage = debtBalance.divideDecimal(totalSynths);\n        uint penalty = currentPenalty(account);\n        \n        // Go through our fee periods and figure out what we owe them.\n        // The [0] fee period is not yet ready to claim, but it is a fee period that they can have\n        // fees owing for, so we need to report on it anyway.\n        for (uint i = 0; i < FEE_PERIOD_LENGTH; i++) {\n            // Were they a part of this period in its entirety?\n            // We don't allow pro-rata participation to reduce the ability to game the system by\n            // issuing and burning multiple times in a period or close to the ends of periods.\n            if (recentFeePeriods[i].startingDebtIndex > debtEntryIndex &&\n                lastFeeWithdrawal[account] < recentFeePeriods[i].feePeriodId) {\n\n                // And since they were, they're entitled to their percentage of the fees in this period\n                uint feesFromPeriodWithoutPenalty = recentFeePeriods[i].feesToDistribute\n                    .multiplyDecimal(userOwnershipPercentage);\n\n                // Less their penalty if they have one.\n                uint penaltyFromPeriod = feesFromPeriodWithoutPenalty.multiplyDecimal(penalty);\n                uint feesFromPeriod = feesFromPeriodWithoutPenalty.sub(penaltyFromPeriod);\n\n                result[i] = feesFromPeriod;\n            }\n        }\n\n        return result;\n    }\n\n    modifier onlyFeeAuthority\n    {\n        require(msg.sender == feeAuthority, \"Only the fee authority can perform this action\");\n        _;\n    }\n\n    modifier onlySynthetix\n    {\n        require(msg.sender == address(synthetix), \"Only the synthetix contract can perform this action\");\n        _;\n    }\n\n    modifier notFeeAddress(address account) {\n        require(account != FEE_ADDRESS, \"Fee address not allowed\");\n        _;\n    }\n\n    event TransferFeeUpdated(uint newFeeRate);\n    bytes32 constant TRANSFERFEEUPDATED_SIG = keccak256(\"TransferFeeUpdated(uint256)\");\n    function emitTransferFeeUpdated(uint newFeeRate) internal {\n        proxy._emit(abi.encode(newFeeRate), 1, TRANSFERFEEUPDATED_SIG, 0, 0, 0);\n    }\n\n    event ExchangeFeeUpdated(uint newFeeRate);\n    bytes32 constant EXCHANGEFEEUPDATED_SIG = keccak256(\"ExchangeFeeUpdated(uint256)\");\n    function emitExchangeFeeUpdated(uint newFeeRate) internal {\n        proxy._emit(abi.encode(newFeeRate), 1, EXCHANGEFEEUPDATED_SIG, 0, 0, 0);\n    }\n\n    event FeePeriodDurationUpdated(uint newFeePeriodDuration);\n    bytes32 constant FEEPERIODDURATIONUPDATED_SIG = keccak256(\"FeePeriodDurationUpdated(uint256)\");\n    function emitFeePeriodDurationUpdated(uint newFeePeriodDuration) internal {\n        proxy._emit(abi.encode(newFeePeriodDuration), 1, FEEPERIODDURATIONUPDATED_SIG, 0, 0, 0);\n    }\n\n    event FeeAuthorityUpdated(address newFeeAuthority);\n    bytes32 constant FEEAUTHORITYUPDATED_SIG = keccak256(\"FeeAuthorityUpdated(address)\");\n    function emitFeeAuthorityUpdated(address newFeeAuthority) internal {\n        proxy._emit(abi.encode(newFeeAuthority), 1, FEEAUTHORITYUPDATED_SIG, 0, 0, 0);\n    }\n\n    event FeePeriodClosed(uint feePeriodId);\n    bytes32 constant FEEPERIODCLOSED_SIG = keccak256(\"FeePeriodClosed(uint256)\");\n    function emitFeePeriodClosed(uint feePeriodId) internal {\n        proxy._emit(abi.encode(feePeriodId), 1, FEEPERIODCLOSED_SIG, 0, 0, 0);\n    }\n\n    event FeesClaimed(address account, uint xdrAmount);\n    bytes32 constant FEESCLAIMED_SIG = keccak256(\"FeesClaimed(address,uint256)\");\n    function emitFeesClaimed(address account, uint xdrAmount) internal {\n        proxy._emit(abi.encode(account, xdrAmount), 1, FEESCLAIMED_SIG, 0, 0, 0);\n    }\n\n    event SynthetixUpdated(address newSynthetix);\n    bytes32 constant SYNTHETIXUPDATED_SIG = keccak256(\"SynthetixUpdated(address)\");\n    function emitSynthetixUpdated(address newSynthetix) internal {\n        proxy._emit(abi.encode(newSynthetix), 1, SYNTHETIXUPDATED_SIG, 0, 0, 0);\n    }\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       LimitedSetup.sol\nversion:    1.1\nauthor:     Anton Jurisevic\n\ndate:       2018-05-15\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nA contract with a limited setup period. Any function modified\nwith the setup modifier will cease to work after the\nconclusion of the configurable-length post-construction setup period.\n\n-----------------------------------------------------------------\n*/\n\n\n/**\n * @title Any function decorated with the modifier this contract provides\n * deactivates after a specified setup period.\n */\ncontract LimitedSetup {\n\n    uint setupExpiryTime;\n\n    /**\n     * @dev LimitedSetup Constructor.\n     * @param setupDuration The time the setup period will last for.\n     */\n    constructor(uint setupDuration)\n        public\n    {\n        setupExpiryTime = now + setupDuration;\n    }\n\n    modifier onlyDuringSetup\n    {\n        require(now < setupExpiryTime, \"Can only perform this action during setup\");\n        _;\n    }\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       SynthetixEscrow.sol\nversion:    1.1\nauthor:     Anton Jurisevic\n            Dominic Romanowski\n            Mike Spain\n\ndate:       2018-05-29\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nThis contract allows the foundation to apply unique vesting\nschedules to synthetix funds sold at various discounts in the token\nsale. SynthetixEscrow gives users the ability to inspect their\nvested funds, their quantities and vesting dates, and to withdraw\nthe fees that accrue on those funds.\n\nThe fees are handled by withdrawing the entire fee allocation\nfor all SNX inside the escrow contract, and then allowing\nthe contract itself to subdivide that pool up proportionally within\nitself. Every time the fee period rolls over in the main Synthetix\ncontract, the SynthetixEscrow fee pool is remitted back into the\nmain fee pool to be redistributed in the next fee period.\n\n-----------------------------------------------------------------\n*/\n\n\n/**\n * @title A contract to hold escrowed SNX and free them at given schedules.\n */\ncontract SynthetixEscrow is Owned, LimitedSetup(8 weeks) {\n\n    using SafeMath for uint;\n\n    /* The corresponding Synthetix contract. */\n    Synthetix public synthetix;\n\n    /* Lists of (timestamp, quantity) pairs per account, sorted in ascending time order.\n     * These are the times at which each given quantity of SNX vests. */\n    mapping(address => uint[2][]) public vestingSchedules;\n\n    /* An account's total vested synthetix balance to save recomputing this for fee extraction purposes. */\n    mapping(address => uint) public totalVestedAccountBalance;\n\n    /* The total remaining vested balance, for verifying the actual synthetix balance of this contract against. */\n    uint public totalVestedBalance;\n\n    uint constant TIME_INDEX = 0;\n    uint constant QUANTITY_INDEX = 1;\n\n    /* Limit vesting entries to disallow unbounded iteration over vesting schedules. */\n    uint constant MAX_VESTING_ENTRIES = 20;\n\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address _owner, Synthetix _synthetix)\n        Owned(_owner)\n        public\n    {\n        synthetix = _synthetix;\n    }\n\n\n    /* ========== SETTERS ========== */\n\n    function setSynthetix(Synthetix _synthetix)\n        external\n        onlyOwner\n    {\n        synthetix = _synthetix;\n        emit SynthetixUpdated(_synthetix);\n    }\n\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice A simple alias to totalVestedAccountBalance: provides ERC20 balance integration.\n     */\n    function balanceOf(address account)\n        public\n        view\n        returns (uint)\n    {\n        return totalVestedAccountBalance[account];\n    }\n\n    /**\n     * @notice The number of vesting dates in an account's schedule.\n     */\n    function numVestingEntries(address account)\n        public\n        view\n        returns (uint)\n    {\n        return vestingSchedules[account].length;\n    }\n\n    /**\n     * @notice Get a particular schedule entry for an account.\n     * @return A pair of uints: (timestamp, synthetix quantity).\n     */\n    function getVestingScheduleEntry(address account, uint index)\n        public\n        view\n        returns (uint[2])\n    {\n        return vestingSchedules[account][index];\n    }\n\n    /**\n     * @notice Get the time at which a given schedule entry will vest.\n     */\n    function getVestingTime(address account, uint index)\n        public\n        view\n        returns (uint)\n    {\n        return getVestingScheduleEntry(account,index)[TIME_INDEX];\n    }\n\n    /**\n     * @notice Get the quantity of SNX associated with a given schedule entry.\n     */\n    function getVestingQuantity(address account, uint index)\n        public\n        view\n        returns (uint)\n    {\n        return getVestingScheduleEntry(account,index)[QUANTITY_INDEX];\n    }\n\n    /**\n     * @notice Obtain the index of the next schedule entry that will vest for a given user.\n     */\n    function getNextVestingIndex(address account)\n        public\n        view\n        returns (uint)\n    {\n        uint len = numVestingEntries(account);\n        for (uint i = 0; i < len; i++) {\n            if (getVestingTime(account, i) != 0) {\n                return i;\n            }\n        }\n        return len;\n    }\n\n    /**\n     * @notice Obtain the next schedule entry that will vest for a given user.\n     * @return A pair of uints: (timestamp, synthetix quantity). */\n    function getNextVestingEntry(address account)\n        public\n        view\n        returns (uint[2])\n    {\n        uint index = getNextVestingIndex(account);\n        if (index == numVestingEntries(account)) {\n            return [uint(0), 0];\n        }\n        return getVestingScheduleEntry(account, index);\n    }\n\n    /**\n     * @notice Obtain the time at which the next schedule entry will vest for a given user.\n     */\n    function getNextVestingTime(address account)\n        external\n        view\n        returns (uint)\n    {\n        return getNextVestingEntry(account)[TIME_INDEX];\n    }\n\n    /**\n     * @notice Obtain the quantity which the next schedule entry will vest for a given user.\n     */\n    function getNextVestingQuantity(address account)\n        external\n        view\n        returns (uint)\n    {\n        return getNextVestingEntry(account)[QUANTITY_INDEX];\n    }\n\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice Withdraws a quantity of SNX back to the synthetix contract.\n     * @dev This may only be called by the owner during the contract's setup period.\n     */\n    function withdrawSynthetix(uint quantity)\n        external\n        onlyOwner\n        onlyDuringSetup\n    {\n        synthetix.transfer(synthetix, quantity);\n    }\n\n    /**\n     * @notice Destroy the vesting information associated with an account.\n     */\n    function purgeAccount(address account)\n        external\n        onlyOwner\n        onlyDuringSetup\n    {\n        delete vestingSchedules[account];\n        totalVestedBalance = totalVestedBalance.sub(totalVestedAccountBalance[account]);\n        delete totalVestedAccountBalance[account];\n    }\n\n    /**\n     * @notice Add a new vesting entry at a given time and quantity to an account's schedule.\n     * @dev A call to this should be accompanied by either enough balance already available\n     * in this contract, or a corresponding call to synthetix.endow(), to ensure that when\n     * the funds are withdrawn, there is enough balance, as well as correctly calculating\n     * the fees.\n     * This may only be called by the owner during the contract's setup period.\n     * Note; although this function could technically be used to produce unbounded\n     * arrays, it's only in the foundation's command to add to these lists.\n     * @param account The account to append a new vesting entry to.\n     * @param time The absolute unix timestamp after which the vested quantity may be withdrawn.\n     * @param quantity The quantity of SNX that will vest.\n     */\n    function appendVestingEntry(address account, uint time, uint quantity)\n        public\n        onlyOwner\n        onlyDuringSetup\n    {\n        /* No empty or already-passed vesting entries allowed. */\n        require(now < time, \"Time must be in the future\");\n        require(quantity != 0, \"Quantity cannot be zero\");\n\n        /* There must be enough balance in the contract to provide for the vesting entry. */\n        totalVestedBalance = totalVestedBalance.add(quantity);\n        require(totalVestedBalance <= synthetix.balanceOf(this), \"Must be enough balance in the contract to provide for the vesting entry\");\n\n        /* Disallow arbitrarily long vesting schedules in light of the gas limit. */\n        uint scheduleLength = vestingSchedules[account].length;\n        require(scheduleLength <= MAX_VESTING_ENTRIES, \"Vesting schedule is too long\");\n\n        if (scheduleLength == 0) {\n            totalVestedAccountBalance[account] = quantity;\n        } else {\n            /* Disallow adding new vested SNX earlier than the last one.\n             * Since entries are only appended, this means that no vesting date can be repeated. */\n            require(getVestingTime(account, numVestingEntries(account) - 1) < time, \"Cannot add new vested entries earlier than the last one\");\n            totalVestedAccountBalance[account] = totalVestedAccountBalance[account].add(quantity);\n        }\n\n        vestingSchedules[account].push([time, quantity]);\n    }\n\n    /**\n     * @notice Construct a vesting schedule to release a quantities of SNX\n     * over a series of intervals.\n     * @dev Assumes that the quantities are nonzero\n     * and that the sequence of timestamps is strictly increasing.\n     * This may only be called by the owner during the contract's setup period.\n     */\n    function addVestingSchedule(address account, uint[] times, uint[] quantities)\n        external\n        onlyOwner\n        onlyDuringSetup\n    {\n        for (uint i = 0; i < times.length; i++) {\n            appendVestingEntry(account, times[i], quantities[i]);\n        }\n\n    }\n\n    /**\n     * @notice Allow a user to withdraw any SNX in their schedule that have vested.\n     */\n    function vest()\n        external\n    {\n        uint numEntries = numVestingEntries(msg.sender);\n        uint total;\n        for (uint i = 0; i < numEntries; i++) {\n            uint time = getVestingTime(msg.sender, i);\n            /* The list is sorted; when we reach the first future time, bail out. */\n            if (time > now) {\n                break;\n            }\n            uint qty = getVestingQuantity(msg.sender, i);\n            if (qty == 0) {\n                continue;\n            }\n\n            vestingSchedules[msg.sender][i] = [0, 0];\n            total = total.add(qty);\n        }\n\n        if (total != 0) {\n            totalVestedBalance = totalVestedBalance.sub(total);\n            totalVestedAccountBalance[msg.sender] = totalVestedAccountBalance[msg.sender].sub(total);\n            synthetix.transfer(msg.sender, total);\n            emit Vested(msg.sender, now, total);\n        }\n    }\n\n\n    /* ========== EVENTS ========== */\n\n    event SynthetixUpdated(address newSynthetix);\n\n    event Vested(address indexed beneficiary, uint time, uint value);\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       SynthetixState.sol\nversion:    1.0\nauthor:     Kevin Brown\ndate:       2018-10-19\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nA contract that holds issuance state and preferred currency of\nusers in the Synthetix system.\n\nThis contract is used side by side with the Synthetix contract\nto make it easier to upgrade the contract logic while maintaining\nissuance state.\n\nThe Synthetix contract is also quite large and on the edge of\nbeing beyond the contract size limit without moving this information\nout to another contract.\n\nThe first deployed contract would create this state contract,\nusing it as its store of issuance data.\n\nWhen a new contract is deployed, it links to the existing\nstate contract, whose owner would then change its associated\ncontract to the new one.\n\n-----------------------------------------------------------------\n*/\n\n\n/**\n * @title Synthetix State\n * @notice Stores issuance information and preferred currency information of the Synthetix contract.\n */\ncontract SynthetixState is State, LimitedSetup {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    // A struct for handing values associated with an individual user's debt position\n    struct IssuanceData {\n        // Percentage of the total debt owned at the time\n        // of issuance. This number is modified by the global debt\n        // delta array. You can figure out a user's exit price and\n        // collateralisation ratio using a combination of their initial\n        // debt and the slice of global debt delta which applies to them.\n        uint initialDebtOwnership;\n        // This lets us know when (in relative terms) the user entered\n        // the debt pool so we can calculate their exit price and\n        // collateralistion ratio\n        uint debtEntryIndex;\n    }\n\n    // Issued synth balances for individual fee entitlements and exit price calculations\n    mapping(address => IssuanceData) public issuanceData;\n\n    // The total count of people that have outstanding issued synths in any flavour\n    uint public totalIssuerCount;\n\n    // Global debt pool tracking\n    uint[] public debtLedger;\n\n    // A quantity of synths greater than this ratio\n    // may not be issued against a given value of SNX.\n    uint public issuanceRatio = SafeDecimalMath.unit() / 5;\n    // No more synths may be issued than the value of SNX backing them.\n    uint constant MAX_ISSUANCE_RATIO = SafeDecimalMath.unit();\n\n    // Users can specify their preferred currency, in which case all synths they receive\n    // will automatically exchange to that preferred currency upon receipt in their wallet\n    mapping(address => bytes4) public preferredCurrency;\n\n    /**\n     * @dev Constructor\n     * @param _owner The address which controls this contract.\n     * @param _associatedContract The ERC20 contract whose state this composes.\n     */\n    constructor(address _owner, address _associatedContract)\n        State(_owner, _associatedContract)\n        LimitedSetup(1 weeks)\n        public\n    {}\n\n    /* ========== SETTERS ========== */\n\n    /**\n     * @notice Set issuance data for an address\n     * @dev Only the associated contract may call this.\n     * @param account The address to set the data for.\n     * @param initialDebtOwnership The initial debt ownership for this address.\n     */\n    function setCurrentIssuanceData(address account, uint initialDebtOwnership)\n        external\n        onlyAssociatedContract\n    {\n        issuanceData[account].initialDebtOwnership = initialDebtOwnership;\n        issuanceData[account].debtEntryIndex = debtLedger.length;\n    }\n\n    /**\n     * @notice Clear issuance data for an address\n     * @dev Only the associated contract may call this.\n     * @param account The address to clear the data for.\n     */\n    function clearIssuanceData(address account)\n        external\n        onlyAssociatedContract\n    {\n        delete issuanceData[account];\n    }\n\n    /**\n     * @notice Increment the total issuer count\n     * @dev Only the associated contract may call this.\n     */\n    function incrementTotalIssuerCount()\n        external\n        onlyAssociatedContract\n    {\n        totalIssuerCount = totalIssuerCount.add(1);\n    }\n\n    /**\n     * @notice Decrement the total issuer count\n     * @dev Only the associated contract may call this.\n     */\n    function decrementTotalIssuerCount()\n        external\n        onlyAssociatedContract\n    {\n        totalIssuerCount = totalIssuerCount.sub(1);\n    }\n\n    /**\n     * @notice Append a value to the debt ledger\n     * @dev Only the associated contract may call this.\n     * @param value The new value to be added to the debt ledger.\n     */\n    function appendDebtLedgerValue(uint value)\n        external\n        onlyAssociatedContract\n    {\n        debtLedger.push(value);\n    }\n\n    /**\n     * @notice Set preferred currency for a user\n     * @dev Only the associated contract may call this.\n     * @param account The account to set the preferred currency for\n     * @param currencyKey The new preferred currency\n     */\n    function setPreferredCurrency(address account, bytes4 currencyKey)\n        external\n        onlyAssociatedContract\n    {\n        preferredCurrency[account] = currencyKey;\n    }\n\n    /**\n     * @notice Set the issuanceRatio for issuance calculations.\n     * @dev Only callable by the contract owner.\n     */\n    function setIssuanceRatio(uint _issuanceRatio)\n        external\n        onlyOwner\n    {\n        require(_issuanceRatio <= MAX_ISSUANCE_RATIO, \"New issuance ratio cannot exceed MAX_ISSUANCE_RATIO\");\n        issuanceRatio = _issuanceRatio;\n        emit IssuanceRatioUpdated(_issuanceRatio);\n    }\n\n    /**\n     * @notice Import issuer data from the old Synthetix contract before multicurrency\n     * @dev Only callable by the contract owner, and only for 1 week after deployment.\n     */\n    function importIssuerData(address[] accounts, uint[] sUSDAmounts)\n        external\n        onlyOwner\n        onlyDuringSetup\n    {\n        require(accounts.length == sUSDAmounts.length, \"Length mismatch\");\n\n        for (uint8 i = 0; i < accounts.length; i++) {\n            _addToDebtRegister(accounts[i], sUSDAmounts[i]);\n        }\n    }\n\n    /**\n     * @notice Import issuer data from the old Synthetix contract before multicurrency\n     * @dev Only used from importIssuerData above, meant to be disposable\n     */\n    function _addToDebtRegister(address account, uint amount)\n        internal\n    {\n        // This code is duplicated from Synthetix so that we can call it directly here\n        // during setup only.\n        Synthetix synthetix = Synthetix(associatedContract);\n\n        // What is the value of the requested debt in XDRs?\n        uint xdrValue = synthetix.effectiveValue(\"sUSD\", amount, \"XDR\");\n\n        // What is the value of all issued synths of the system (priced in XDRs)?\n        uint totalDebtIssued = synthetix.totalIssuedSynths(\"XDR\");\n\n        // What will the new total be including the new value?\n        uint newTotalDebtIssued = xdrValue.add(totalDebtIssued);\n\n        // What is their percentage (as a high precision int) of the total debt?\n        uint debtPercentage = xdrValue.divideDecimalRoundPrecise(newTotalDebtIssued);\n\n        // And what effect does this percentage have on the global debt holding of other issuers?\n        // The delta specifically needs to not take into account any existing debt as it's already\n        // accounted for in the delta from when they issued previously.\n        // The delta is a high precision integer.\n        uint delta = SafeDecimalMath.preciseUnit().sub(debtPercentage);\n\n        uint existingDebt = synthetix.debtBalanceOf(account, \"XDR\");\n\n        // And what does their debt ownership look like including this previous stake?\n        if (existingDebt > 0) {\n            debtPercentage = xdrValue.add(existingDebt).divideDecimalRoundPrecise(newTotalDebtIssued);\n        }\n\n        // Are they a new issuer? If so, record them.\n        if (issuanceData[account].initialDebtOwnership == 0) {\n            totalIssuerCount = totalIssuerCount.add(1);\n        }\n\n        // Save the debt entry parameters\n        issuanceData[account].initialDebtOwnership = debtPercentage;\n        issuanceData[account].debtEntryIndex = debtLedger.length;\n\n        // And if we're the first, push 1 as there was no effect to any other holders, otherwise push\n        // the change for the rest of the debt holders. The debt ledger holds high precision integers.\n        if (debtLedger.length > 0) {\n            debtLedger.push(\n                debtLedger[debtLedger.length - 1].multiplyDecimalRoundPrecise(delta)\n            );\n        } else {\n            debtLedger.push(SafeDecimalMath.preciseUnit());\n        }\n    }\n\n    /* ========== VIEWS ========== */\n\n    /**\n     * @notice Retrieve the length of the debt ledger array\n     */\n    function debtLedgerLength()\n        external\n        view\n        returns (uint)\n    {\n        return debtLedger.length;\n    }\n\n    /**\n     * @notice Retrieve the most recent entry from the debt ledger\n     */\n    function lastDebtLedgerEntry()\n        external\n        view\n        returns (uint)\n    {\n        return debtLedger[debtLedger.length - 1];\n    }\n\n    /**\n     * @notice Query whether an account has issued and has an outstanding debt balance\n     * @param account The address to query for\n     */\n    function hasIssued(address account)\n        external\n        view\n        returns (bool)\n    {\n        return issuanceData[account].initialDebtOwnership > 0;\n    }\n\n    event IssuanceRatioUpdated(uint newRatio);\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       ExchangeRates.sol\nversion:    1.0\nauthor:     Kevin Brown\ndate:       2018-09-12\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nA contract that any other contract in the Synthetix system can query\nfor the current market value of various assets, including\ncrypto assets as well as various fiat assets.\n\nThis contract assumes that rate updates will completely update\nall rates to their current values. If a rate shock happens\non a single asset, the oracle will still push updated rates\nfor all other assets.\n\n-----------------------------------------------------------------\n*/\n\n\n/**\n * @title The repository for exchange rates\n */\ncontract ExchangeRates is SelfDestructible {\n\n    using SafeMath for uint;\n\n    // Exchange rates stored by currency code, e.g. 'SNX', or 'sUSD'\n    mapping(bytes4 => uint) public rates;\n\n    // Update times stored by currency code, e.g. 'SNX', or 'sUSD'\n    mapping(bytes4 => uint) public lastRateUpdateTimes;\n\n    // The address of the oracle which pushes rate updates to this contract\n    address public oracle;\n\n    // Do not allow the oracle to submit times any further forward into the future than this constant.\n    uint constant ORACLE_FUTURE_LIMIT = 10 minutes;\n\n    // How long will the contract assume the rate of any asset is correct\n    uint public rateStalePeriod = 3 hours;\n\n    // Each participating currency in the XDR basket is represented as a currency key with\n    // equal weighting.\n    // There are 5 participating currencies, so we'll declare that clearly.\n    bytes4[5] public xdrParticipants;\n\n    //\n    // ========== CONSTRUCTOR ==========\n\n    /**\n     * @dev Constructor\n     * @param _owner The owner of this contract.\n     * @param _oracle The address which is able to update rate information.\n     * @param _currencyKeys The initial currency keys to store (in order).\n     * @param _newRates The initial currency amounts for each currency (in order).\n     */\n    constructor(\n        // SelfDestructible (Ownable)\n        address _owner,\n\n        // Oracle values - Allows for rate updates\n        address _oracle,\n        bytes4[] _currencyKeys,\n        uint[] _newRates\n    )\n        /* Owned is initialised in SelfDestructible */\n        SelfDestructible(_owner)\n        public\n    {\n        require(_currencyKeys.length == _newRates.length, \"Currency key length and rate length must match.\");\n\n        oracle = _oracle;\n\n        // The sUSD rate is always 1 and is never stale.\n        rates[\"sUSD\"] = SafeDecimalMath.unit();\n        lastRateUpdateTimes[\"sUSD\"] = now;\n\n        // These are the currencies that make up the XDR basket.\n        // These are hard coded because:\n        //  - This way users can depend on the calculation and know it won't change for this deployment of the contract.\n        //  - Adding new currencies would likely introduce some kind of weighting factor, which\n        //    isn't worth preemptively adding when all of the currencies in the current basket are weighted at 1.\n        //  - The expectation is if this logic needs to be updated, we'll simply deploy a new version of this contract\n        //    then point the system at the new version.\n        xdrParticipants = [\n            bytes4(\"sUSD\"),\n            bytes4(\"sAUD\"),\n            bytes4(\"sCHF\"),\n            bytes4(\"sEUR\"),\n            bytes4(\"sGBP\")\n        ];\n\n        internalUpdateRates(_currencyKeys, _newRates, now);\n    }\n\n    /* ========== SETTERS ========== */\n\n    /**\n     * @notice Set the rates stored in this contract\n     * @param currencyKeys The currency keys you wish to update the rates for (in order)\n     * @param newRates The rates for each currency (in order)\n     * @param timeSent The timestamp of when the update was sent, specified in seconds since epoch (e.g. the same as the now keyword in solidity).contract\n     *                 This is useful because transactions can take a while to confirm, so this way we know how old the oracle's datapoint was exactly even\n     *                 if it takes a long time for the transaction to confirm.\n     */\n    function updateRates(bytes4[] currencyKeys, uint[] newRates, uint timeSent)\n        external\n        onlyOracle\n        returns(bool)\n    {\n        return internalUpdateRates(currencyKeys, newRates, timeSent);\n    }\n\n    /**\n     * @notice Internal function which sets the rates stored in this contract\n     * @param currencyKeys The currency keys you wish to update the rates for (in order)\n     * @param newRates The rates for each currency (in order)\n     * @param timeSent The timestamp of when the update was sent, specified in seconds since epoch (e.g. the same as the now keyword in solidity).contract\n     *                 This is useful because transactions can take a while to confirm, so this way we know how old the oracle's datapoint was exactly even\n     *                 if it takes a long time for the transaction to confirm.\n     */\n    function internalUpdateRates(bytes4[] currencyKeys, uint[] newRates, uint timeSent)\n        internal\n        returns(bool)\n    {\n        require(currencyKeys.length == newRates.length, \"Currency key array length must match rates array length.\");\n        require(timeSent < (now + ORACLE_FUTURE_LIMIT), \"Time is too far into the future\");\n\n        // Loop through each key and perform update.\n        for (uint i = 0; i < currencyKeys.length; i++) {\n            // Should not set any rate to zero ever, as no asset will ever be\n            // truely worthless and still valid. In this scenario, we should\n            // delete the rate and remove it from the system.\n            require(newRates[i] != 0, \"Zero is not a valid rate, please call deleteRate instead.\");\n            require(currencyKeys[i] != \"sUSD\", \"Rate of sUSD cannot be updated, it's always UNIT.\");\n\n            // We should only update the rate if it's at least the same age as the last rate we've got.\n            if (timeSent >= lastRateUpdateTimes[currencyKeys[i]]) {\n                // Ok, go ahead with the update.\n                rates[currencyKeys[i]] = newRates[i];\n                lastRateUpdateTimes[currencyKeys[i]] = timeSent;\n            }\n        }\n\n        emit RatesUpdated(currencyKeys, newRates);\n\n        // Now update our XDR rate.\n        updateXDRRate(timeSent);\n\n        return true;\n    }\n\n    /**\n     * @notice Update the Synthetix Drawing Rights exchange rate based on other rates already updated.\n     */\n    function updateXDRRate(uint timeSent)\n        internal\n    {\n        uint total = 0;\n\n        for (uint i = 0; i < xdrParticipants.length; i++) {\n            total = rates[xdrParticipants[i]].add(total);\n        }\n\n        // Set the rate\n        rates[\"XDR\"] = total;\n\n        // Record that we updated the XDR rate.\n        lastRateUpdateTimes[\"XDR\"] = timeSent;\n\n        // Emit our updated event separate to the others to save\n        // moving data around between arrays.\n        bytes4[] memory eventCurrencyCode = new bytes4[](1);\n        eventCurrencyCode[0] = \"XDR\";\n\n        uint[] memory eventRate = new uint[](1);\n        eventRate[0] = rates[\"XDR\"];\n\n        emit RatesUpdated(eventCurrencyCode, eventRate);\n    }\n\n    /**\n     * @notice Delete a rate stored in the contract\n     * @param currencyKey The currency key you wish to delete the rate for\n     */\n    function deleteRate(bytes4 currencyKey)\n        external\n        onlyOracle\n    {\n        require(rates[currencyKey] > 0, \"Rate is zero\");\n\n        delete rates[currencyKey];\n        delete lastRateUpdateTimes[currencyKey];\n\n        emit RateDeleted(currencyKey);\n    }\n\n    /**\n     * @notice Set the Oracle that pushes the rate information to this contract\n     * @param _oracle The new oracle address\n     */\n    function setOracle(address _oracle)\n        external\n        onlyOwner\n    {\n        oracle = _oracle;\n        emit OracleUpdated(oracle);\n    }\n\n    /**\n     * @notice Set the stale period on the updated rate variables\n     * @param _time The new rateStalePeriod\n     */\n    function setRateStalePeriod(uint _time)\n        external\n        onlyOwner\n    {\n        rateStalePeriod = _time;\n        emit RateStalePeriodUpdated(rateStalePeriod);\n    }\n\n    /* ========== VIEWS ========== */\n\n    /**\n     * @notice Retrieve the rate for a specific currency\n     */\n    function rateForCurrency(bytes4 currencyKey)\n        public\n        view\n        returns (uint)\n    {\n        return rates[currencyKey];\n    }\n\n    /**\n     * @notice Retrieve the rates for a list of currencies\n     */\n    function ratesForCurrencies(bytes4[] currencyKeys)\n        public\n        view\n        returns (uint[])\n    {\n        uint[] memory _rates = new uint[](currencyKeys.length);\n\n        for (uint8 i = 0; i < currencyKeys.length; i++) {\n            _rates[i] = rates[currencyKeys[i]];\n        }\n\n        return _rates;\n    }\n\n    /**\n     * @notice Retrieve a list of last update times for specific currencies\n     */\n    function lastRateUpdateTimeForCurrency(bytes4 currencyKey)\n        public\n        view\n        returns (uint)\n    {\n        return lastRateUpdateTimes[currencyKey];\n    }\n\n    /**\n     * @notice Retrieve the last update time for a specific currency\n     */\n    function lastRateUpdateTimesForCurrencies(bytes4[] currencyKeys)\n        public\n        view\n        returns (uint[])\n    {\n        uint[] memory lastUpdateTimes = new uint[](currencyKeys.length);\n\n        for (uint8 i = 0; i < currencyKeys.length; i++) {\n            lastUpdateTimes[i] = lastRateUpdateTimes[currencyKeys[i]];\n        }\n\n        return lastUpdateTimes;\n    }\n\n    /**\n     * @notice Check if a specific currency's rate hasn't been updated for longer than the stale period.\n     */\n    function rateIsStale(bytes4 currencyKey)\n        external\n        view\n        returns (bool)\n    {\n        // sUSD is a special case and is never stale.\n        if (currencyKey == \"sUSD\") return false;\n\n        return lastRateUpdateTimes[currencyKey].add(rateStalePeriod) < now;\n    }\n\n    /**\n     * @notice Check if any of the currency rates passed in haven't been updated for longer than the stale period.\n     */\n    function anyRateIsStale(bytes4[] currencyKeys)\n        external\n        view\n        returns (bool)\n    {\n        // Loop through each key and check whether the data point is stale.\n        uint256 i = 0;\n\n        while (i < currencyKeys.length) {\n            // sUSD is a special case and is never false\n            if (currencyKeys[i] != \"sUSD\" && lastRateUpdateTimes[currencyKeys[i]].add(rateStalePeriod) < now) {\n                return true;\n            }\n            i += 1;\n        }\n\n        return false;\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyOracle\n    {\n        require(msg.sender == oracle, \"Only the oracle can perform this action\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event OracleUpdated(address newOracle);\n    event RateStalePeriodUpdated(uint rateStalePeriod);\n    event RatesUpdated(bytes4[] currencyKeys, uint[] newRates);\n    event RateDeleted(bytes4 currencyKey);\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       Synthetix.sol\nversion:    2.0\nauthor:     Kevin Brown\n            Gavin Conway\ndate:       2018-09-14\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nSynthetix token contract. SNX is a transferable ERC20 token,\nand also give its holders the following privileges.\nAn owner of SNX has the right to issue synths in all synth flavours.\n\nAfter a fee period terminates, the duration and fees collected for that\nperiod are computed, and the next period begins. Thus an account may only\nwithdraw the fees owed to them for the previous period, and may only do\nso once per period. Any unclaimed fees roll over into the common pot for\nthe next period.\n\n== Average Balance Calculations ==\n\nThe fee entitlement of a synthetix holder is proportional to their average\nissued synth balance over the last fee period. This is computed by\nmeasuring the area under the graph of a user's issued synth balance over\ntime, and then when a new fee period begins, dividing through by the\nduration of the fee period.\n\nWe need only update values when the balances of an account is modified.\nThis occurs when issuing or burning for issued synth balances,\nand when transferring for synthetix balances. This is for efficiency,\nand adds an implicit friction to interacting with SNX.\nA synthetix holder pays for his own recomputation whenever he wants to change\nhis position, which saves the foundation having to maintain a pot dedicated\nto resourcing this.\n\nA hypothetical user's balance history over one fee period, pictorially:\n\n      s ____\n       |    |\n       |    |___ p\n       |____|___|___ __ _  _\n       f    t   n\n\nHere, the balance was s between times f and t, at which time a transfer\noccurred, updating the balance to p, until n, when the present transfer occurs.\nWhen a new transfer occurs at time n, the balance being p,\nwe must:\n\n  - Add the area p * (n - t) to the total area recorded so far\n  - Update the last transfer time to n\n\nSo if this graph represents the entire current fee period,\nthe average SNX held so far is ((t-f)*s + (n-t)*p) / (n-f).\nThe complementary computations must be performed for both sender and\nrecipient.\n\nNote that a transfer keeps global supply of SNX invariant.\nThe sum of all balances is constant, and unmodified by any transfer.\nSo the sum of all balances multiplied by the duration of a fee period is also\nconstant, and this is equivalent to the sum of the area of every user's\ntime/balance graph. Dividing through by that duration yields back the total\nsynthetix supply. So, at the end of a fee period, we really do yield a user's\naverage share in the synthetix supply over that period.\n\nA slight wrinkle is introduced if we consider the time r when the fee period\nrolls over. Then the previous fee period k-1 is before r, and the current fee\nperiod k is afterwards. If the last transfer took place before r,\nbut the latest transfer occurred afterwards:\n\nk-1       |        k\n      s __|_\n       |  | |\n       |  | |____ p\n       |__|_|____|___ __ _  _\n          |\n       f  | t    n\n          r\n\nIn this situation the area (r-f)*s contributes to fee period k-1, while\nthe area (t-r)*s contributes to fee period k. We will implicitly consider a\nzero-value transfer to have occurred at time r. Their fee entitlement for the\nprevious period will be finalised at the time of their first transfer during the\ncurrent fee period, or when they query or withdraw their fee entitlement.\n\nIn the implementation, the duration of different fee periods may be slightly irregular,\nas the check that they have rolled over occurs only when state-changing synthetix\noperations are performed.\n\n== Issuance and Burning ==\n\nIn this version of the synthetix contract, synths can only be issued by\nthose that have been nominated by the synthetix foundation. Synths are assumed\nto be valued at $1, as they are a stable unit of account.\n\nAll synths issued require a proportional value of SNX to be locked,\nwhere the proportion is governed by the current issuance ratio. This\nmeans for every $1 of SNX locked up, $(issuanceRatio) synths can be issued.\ni.e. to issue 100 synths, 100/issuanceRatio dollars of SNX need to be locked up.\n\nTo determine the value of some amount of SNX(S), an oracle is used to push\nthe price of SNX (P_S) in dollars to the contract. The value of S\nwould then be: S * P_S.\n\nAny SNX that are locked up by this issuance process cannot be transferred.\nThe amount that is locked floats based on the price of SNX. If the price\nof SNX moves up, less SNX are locked, so they can be issued against,\nor transferred freely. If the price of SNX moves down, more SNX are locked,\neven going above the initial wallet balance.\n\n-----------------------------------------------------------------\n*/\n\n\n/**\n * @title Synthetix ERC20 contract.\n * @notice The Synthetix contracts not only facilitates transfers, exchanges, and tracks balances,\n * but it also computes the quantity of fees each synthetix holder is entitled to.\n */\ncontract Synthetix is ExternStateToken {\n\n    // ========== STATE VARIABLES ==========\n\n    // Available Synths which can be used with the system\n    Synth[] public availableSynths;\n    mapping(bytes4 => Synth) public synths;\n\n    FeePool public feePool;\n    SynthetixEscrow public escrow;\n    ExchangeRates public exchangeRates;\n    SynthetixState public synthetixState;\n\n    uint constant SYNTHETIX_SUPPLY = 1e8 * SafeDecimalMath.unit();\n    string constant TOKEN_NAME = \"Synthetix Network Token\";\n    string constant TOKEN_SYMBOL = \"SNX\";\n    uint8 constant DECIMALS = 18;\n\n    // ========== CONSTRUCTOR ==========\n\n    /**\n     * @dev Constructor\n     * @param _tokenState A pre-populated contract containing token balances.\n     * If the provided address is 0x0, then a fresh one will be constructed with the contract owning all tokens.\n     * @param _owner The owner of this contract.\n     */\n    constructor(address _proxy, TokenState _tokenState, SynthetixState _synthetixState,\n        address _owner, ExchangeRates _exchangeRates, FeePool _feePool\n    )\n        ExternStateToken(_proxy, _tokenState, TOKEN_NAME, TOKEN_SYMBOL, SYNTHETIX_SUPPLY, DECIMALS, _owner)\n        public\n    {\n        synthetixState = _synthetixState;\n        exchangeRates = _exchangeRates;\n        feePool = _feePool;\n    }\n\n    // ========== SETTERS ========== */\n\n    /**\n     * @notice Add an associated Synth contract to the Synthetix system\n     * @dev Only the contract owner may call this.\n     */\n    function addSynth(Synth synth)\n        external\n        optionalProxy_onlyOwner\n    {\n        bytes4 currencyKey = synth.currencyKey();\n\n        require(synths[currencyKey] == Synth(0), \"Synth already exists\");\n\n        availableSynths.push(synth);\n        synths[currencyKey] = synth;\n\n        emitSynthAdded(currencyKey, synth);\n    }\n\n    /**\n     * @notice Remove an associated Synth contract from the Synthetix system\n     * @dev Only the contract owner may call this.\n     */\n    function removeSynth(bytes4 currencyKey)\n        external\n        optionalProxy_onlyOwner\n    {\n        require(synths[currencyKey] != address(0), \"Synth does not exist\");\n        require(synths[currencyKey].totalSupply() == 0, \"Synth supply exists\");\n        require(currencyKey != \"XDR\", \"Cannot remove XDR synth\");\n\n        // Save the address we're removing for emitting the event at the end.\n        address synthToRemove = synths[currencyKey];\n\n        // Remove the synth from the availableSynths array.\n        for (uint8 i = 0; i < availableSynths.length; i++) {\n            if (availableSynths[i] == synthToRemove) {\n                delete availableSynths[i];\n\n                // Copy the last synth into the place of the one we just deleted\n                // If there's only one synth, this is synths[0] = synths[0].\n                // If we're deleting the last one, it's also a NOOP in the same way.\n                availableSynths[i] = availableSynths[availableSynths.length - 1];\n\n                // Decrease the size of the array by one.\n                availableSynths.length--;\n\n                break;\n            }\n        }\n\n        // And remove it from the synths mapping\n        delete synths[currencyKey];\n\n        emitSynthRemoved(currencyKey, synthToRemove);\n    }\n\n    /**\n     * @notice Set the associated synthetix escrow contract.\n     * @dev Only the contract owner may call this.\n     */\n    function setEscrow(SynthetixEscrow _escrow)\n        external\n        optionalProxy_onlyOwner\n    {\n        escrow = _escrow;\n        // Note: No event here as our contract exceeds max contract size\n        // with these events, and it's unlikely people will need to\n        // track these events specifically.\n    }\n\n    /**\n     * @notice Set the ExchangeRates contract address where rates are held.\n     * @dev Only callable by the contract owner.\n     */\n    function setExchangeRates(ExchangeRates _exchangeRates)\n        external\n        optionalProxy_onlyOwner\n    {\n        exchangeRates = _exchangeRates;\n        // Note: No event here as our contract exceeds max contract size\n        // with these events, and it's unlikely people will need to\n        // track these events specifically.\n    }\n\n    /**\n     * @notice Set the synthetixState contract address where issuance data is held.\n     * @dev Only callable by the contract owner.\n     */\n    function setSynthetixState(SynthetixState _synthetixState)\n        external\n        optionalProxy_onlyOwner\n    {\n        synthetixState = _synthetixState;\n\n        emitStateContractChanged(_synthetixState);\n    }\n\n    /**\n     * @notice Set your preferred currency. Note: This does not automatically exchange any balances you've held previously in\n     * other synth currencies in this address, it will apply for any new payments you receive at this address.\n     */\n    function setPreferredCurrency(bytes4 currencyKey)\n        external\n        optionalProxy\n    {\n        require(currencyKey == 0 || !exchangeRates.rateIsStale(currencyKey), \"Currency rate is stale or doesn't exist.\");\n\n        synthetixState.setPreferredCurrency(messageSender, currencyKey);\n\n        emitPreferredCurrencyChanged(messageSender, currencyKey);\n    }\n\n    // ========== VIEWS ==========\n\n    /**\n     * @notice A function that lets you easily convert an amount in a source currency to an amount in the destination currency\n     * @param sourceCurrencyKey The currency the amount is specified in\n     * @param sourceAmount The source amount, specified in UNIT base\n     * @param destinationCurrencyKey The destination currency\n     */\n    function effectiveValue(bytes4 sourceCurrencyKey, uint sourceAmount, bytes4 destinationCurrencyKey)\n        public\n        view\n        rateNotStale(sourceCurrencyKey)\n        rateNotStale(destinationCurrencyKey)\n        returns (uint)\n    {\n        // If there's no change in the currency, then just return the amount they gave us\n        if (sourceCurrencyKey == destinationCurrencyKey) return sourceAmount;\n\n        // Calculate the effective value by going from source -> USD -> destination\n        return sourceAmount.multiplyDecimalRound(exchangeRates.rateForCurrency(sourceCurrencyKey))\n            .divideDecimalRound(exchangeRates.rateForCurrency(destinationCurrencyKey));\n    }\n\n    /**\n     * @notice Total amount of synths issued by the system, priced in currencyKey\n     * @param currencyKey The currency to value the synths in\n     */\n    function totalIssuedSynths(bytes4 currencyKey)\n        public\n        view\n        rateNotStale(currencyKey)\n        returns (uint)\n    {\n        uint total = 0;\n        uint currencyRate = exchangeRates.rateForCurrency(currencyKey);\n\n        for (uint8 i = 0; i < availableSynths.length; i++) {\n            // Ensure the rate isn't stale.\n            // TODO: Investigate gas cost optimisation of doing a single call with all keys in it vs\n            // individual calls like this.\n            require(!exchangeRates.rateIsStale(availableSynths[i].currencyKey()), \"Rate is stale\");\n\n            // What's the total issued value of that synth in the destination currency?\n            // Note: We're not using our effectiveValue function because we don't want to go get the\n            //       rate for the destination currency and check if it's stale repeatedly on every\n            //       iteration of the loop\n            uint synthValue = availableSynths[i].totalSupply()\n                .multiplyDecimalRound(exchangeRates.rateForCurrency(availableSynths[i].currencyKey()))\n                .divideDecimalRound(currencyRate);\n            total = total.add(synthValue);\n        }\n\n        return total;\n    }\n\n    /**\n     * @notice Returns the count of available synths in the system, which you can use to iterate availableSynths\n     */\n    function availableSynthCount()\n        public\n        view\n        returns (uint)\n    {\n        return availableSynths.length;\n    }\n\n    // ========== MUTATIVE FUNCTIONS ==========\n\n    /**\n     * @notice ERC20 transfer function.\n     */\n    function transfer(address to, uint value)\n        public\n        returns (bool)\n    {\n        bytes memory empty;\n        return transfer(to, value, empty);\n    }\n\n    /**\n     * @notice ERC223 transfer function. Does not conform with the ERC223 spec, as:\n     *         - Transaction doesn't revert if the recipient doesn't implement tokenFallback()\n     *         - Emits a standard ERC20 event without the bytes data parameter so as not to confuse\n     *           tooling such as Etherscan.\n     */\n    function transfer(address to, uint value, bytes data)\n        public\n        optionalProxy\n        returns (bool)\n    {\n        // Ensure they're not trying to exceed their locked amount\n        require(value <= transferableSynthetix(messageSender), \"Insufficient balance\");\n\n        // Perform the transfer: if there is a problem an exception will be thrown in this call.\n        _transfer_byProxy(messageSender, to, value, data);\n\n        return true;\n    }\n\n    /**\n     * @notice ERC20 transferFrom function.\n     */\n    function transferFrom(address from, address to, uint value)\n        public\n        returns (bool)\n    {\n        bytes memory empty;\n        return transferFrom(from, to, value, empty);\n    }\n\n    /**\n     * @notice ERC223 transferFrom function. Does not conform with the ERC223 spec, as:\n     *         - Transaction doesn't revert if the recipient doesn't implement tokenFallback()\n     *         - Emits a standard ERC20 event without the bytes data parameter so as not to confuse\n     *           tooling such as Etherscan.\n     */\n    function transferFrom(address from, address to, uint value, bytes data)\n        public\n        optionalProxy\n        returns (bool)\n    {\n        // Ensure they're not trying to exceed their locked amount\n        require(value <= transferableSynthetix(from), \"Insufficient balance\");\n\n        // Perform the transfer: if there is a problem,\n        // an exception will be thrown in this call.\n        _transferFrom_byProxy(messageSender, from, to, value, data);\n\n        return true;\n    }\n\n    /**\n     * @notice Function that allows you to exchange synths you hold in one flavour for another.\n     * @param sourceCurrencyKey The source currency you wish to exchange from\n     * @param sourceAmount The amount, specified in UNIT of source currency you wish to exchange\n     * @param destinationCurrencyKey The destination currency you wish to obtain.\n     * @param destinationAddress Where the result should go. If this is address(0) then it sends back to the message sender.\n     * @return Boolean that indicates whether the transfer succeeded or failed.\n     */\n    function exchange(bytes4 sourceCurrencyKey, uint sourceAmount, bytes4 destinationCurrencyKey, address destinationAddress)\n        external\n        optionalProxy\n        // Note: We don't need to insist on non-stale rates because effectiveValue will do it for us.\n        returns (bool)\n    {\n        require(sourceCurrencyKey != destinationCurrencyKey, \"Exchange must use different synths\");\n        require(sourceAmount > 0, \"Zero amount\");\n\n        // Pass it along, defaulting to the sender as the recipient.\n        return _internalExchange(\n            messageSender,\n            sourceCurrencyKey,\n            sourceAmount,\n            destinationCurrencyKey,\n            destinationAddress == address(0) ? messageSender : destinationAddress,\n            true // Charge fee on the exchange\n        );\n    }\n\n    /**\n     * @notice Function that allows synth contract to delegate exchanging of a synth that is not the same sourceCurrency\n     * @dev Only the synth contract can call this function\n     * @param from The address to exchange / burn synth from\n     * @param sourceCurrencyKey The source currency you wish to exchange from\n     * @param sourceAmount The amount, specified in UNIT of source currency you wish to exchange\n     * @param destinationCurrencyKey The destination currency you wish to obtain.\n     * @param destinationAddress Where the result should go.\n     * @return Boolean that indicates whether the transfer succeeded or failed.\n     */\n    function synthInitiatedExchange(\n        address from,\n        bytes4 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes4 destinationCurrencyKey,\n        address destinationAddress\n    )\n        external\n        onlySynth\n        returns (bool)\n    {\n        require(sourceCurrencyKey != destinationCurrencyKey, \"Can't be same synth\");\n        require(sourceAmount > 0, \"Zero amount\");\n\n        // Pass it along\n        return _internalExchange(\n            from,\n            sourceCurrencyKey,\n            sourceAmount,\n            destinationCurrencyKey,\n            destinationAddress,\n            false // Don't charge fee on the exchange, as they've already been charged a transfer fee in the synth contract\n        );\n    }\n\n    /**\n     * @notice Function that allows synth contract to delegate sending fee to the fee Pool.\n     * @dev Only the synth contract can call this function.\n     * @param from The address fee is coming from.\n     * @param sourceCurrencyKey source currency fee from.\n     * @param sourceAmount The amount, specified in UNIT of source currency.\n     * @return Boolean that indicates whether the transfer succeeded or failed.\n     */\n    function synthInitiatedFeePayment(\n        address from,\n        bytes4 sourceCurrencyKey,\n        uint sourceAmount\n    )\n        external\n        onlySynth\n        returns (bool)\n    {\n        require(sourceAmount > 0, \"Source can't be 0\");\n\n        // Pass it along, defaulting to the sender as the recipient.\n        bool result = _internalExchange(\n            from,\n            sourceCurrencyKey,\n            sourceAmount,\n            \"XDR\",\n            feePool.FEE_ADDRESS(),\n            false // Don't charge a fee on the exchange because this is already a fee\n        );\n\n        // Tell the fee pool about this.\n        feePool.feePaid(sourceCurrencyKey, sourceAmount);\n\n        return result;\n    }\n\n    /**\n     * @notice Function that allows synth contract to delegate sending fee to the fee Pool.\n     * @dev fee pool contract address is not allowed to call function\n     * @param from The address to move synth from\n     * @param sourceCurrencyKey source currency from.\n     * @param sourceAmount The amount, specified in UNIT of source currency.\n     * @param destinationCurrencyKey The destination currency to obtain.\n     * @param destinationAddress Where the result should go.\n     * @param chargeFee Boolean to charge a fee for transaction.\n     * @return Boolean that indicates whether the transfer succeeded or failed.\n     */\n    function _internalExchange(\n        address from,\n        bytes4 sourceCurrencyKey,\n        uint sourceAmount,\n        bytes4 destinationCurrencyKey,\n        address destinationAddress,\n        bool chargeFee\n    )\n        internal\n        notFeeAddress(from)\n        returns (bool)\n    {\n        require(destinationAddress != address(0), \"Zero destination\");\n        require(destinationAddress != address(this), \"Synthetix is invalid destination\");\n        require(destinationAddress != address(proxy), \"Proxy is invalid destination\");\n\n        // Note: We don't need to check their balance as the burn() below will do a safe subtraction which requires\n        // the subtraction to not overflow, which would happen if their balance is not sufficient.\n\n        // Burn the source amount\n        synths[sourceCurrencyKey].burn(from, sourceAmount);\n\n        // How much should they get in the destination currency?\n        uint destinationAmount = effectiveValue(sourceCurrencyKey, sourceAmount, destinationCurrencyKey);\n\n        // What's the fee on that currency that we should deduct?\n        uint amountReceived = destinationAmount;\n        uint fee = 0;\n\n        if (chargeFee) {\n            amountReceived = feePool.amountReceivedFromExchange(destinationAmount);\n            fee = destinationAmount.sub(amountReceived);\n        }\n\n        // Issue their new synths\n        synths[destinationCurrencyKey].issue(destinationAddress, amountReceived);\n\n        // Remit the fee in XDRs\n        if (fee > 0) {\n            uint xdrFeeAmount = effectiveValue(destinationCurrencyKey, fee, \"XDR\");\n            synths[\"XDR\"].issue(feePool.FEE_ADDRESS(), xdrFeeAmount);\n        }\n\n        // Nothing changes as far as issuance data goes because the total value in the system hasn't changed.\n\n        // Call the ERC223 transfer callback if needed\n        synths[destinationCurrencyKey].triggerTokenFallbackIfNeeded(from, destinationAddress, amountReceived);\n\n        // Gas optimisation:\n        // No event emitted as it's assumed users will be able to track transfers to the zero address, followed\n        // by a transfer on another synth from the zero address and ascertain the info required here.\n\n        return true;\n    }\n\n    /**\n     * @notice Function that registers new synth as they are isseud. Calculate delta to append to synthetixState.\n     * @dev Only internal calls from synthetix address.\n     * @param currencyKey The currency to register synths in, for example sUSD or sAUD\n     * @param amount The amount of synths to register with a base of UNIT\n     */\n    function _addToDebtRegister(bytes4 currencyKey, uint amount)\n        internal\n        optionalProxy\n    {\n        // What is the value of the requested debt in XDRs?\n        uint xdrValue = effectiveValue(currencyKey, amount, \"XDR\");\n\n        // What is the value of all issued synths of the system (priced in XDRs)?\n        uint totalDebtIssued = totalIssuedSynths(\"XDR\");\n\n        // What will the new total be including the new value?\n        uint newTotalDebtIssued = xdrValue.add(totalDebtIssued);\n\n        // What is their percentage (as a high precision int) of the total debt?\n        uint debtPercentage = xdrValue.divideDecimalRoundPrecise(newTotalDebtIssued);\n\n        // And what effect does this percentage have on the global debt holding of other issuers?\n        // The delta specifically needs to not take into account any existing debt as it's already\n        // accounted for in the delta from when they issued previously.\n        // The delta is a high precision integer.\n        uint delta = SafeDecimalMath.preciseUnit().sub(debtPercentage);\n\n        // How much existing debt do they have?\n        uint existingDebt = debtBalanceOf(messageSender, \"XDR\");\n\n        // And what does their debt ownership look like including this previous stake?\n        if (existingDebt > 0) {\n            debtPercentage = xdrValue.add(existingDebt).divideDecimalRoundPrecise(newTotalDebtIssued);\n        }\n\n        // Are they a new issuer? If so, record them.\n        if (!synthetixState.hasIssued(messageSender)) {\n            synthetixState.incrementTotalIssuerCount();\n        }\n\n        // Save the debt entry parameters\n        synthetixState.setCurrentIssuanceData(messageSender, debtPercentage);\n\n        // And if we're the first, push 1 as there was no effect to any other holders, otherwise push\n        // the change for the rest of the debt holders. The debt ledger holds high precision integers.\n        if (synthetixState.debtLedgerLength() > 0) {\n            synthetixState.appendDebtLedgerValue(\n                synthetixState.lastDebtLedgerEntry().multiplyDecimalRoundPrecise(delta)\n            );\n        } else {\n            synthetixState.appendDebtLedgerValue(SafeDecimalMath.preciseUnit());\n        }\n    }\n\n    /**\n     * @notice Issue synths against the sender's SNX.\n     * @dev Issuance is only allowed if the synthetix price isn't stale. Amount should be larger than 0.\n     * @param currencyKey The currency you wish to issue synths in, for example sUSD or sAUD\n     * @param amount The amount of synths you wish to issue with a base of UNIT\n     */\n    function issueSynths(bytes4 currencyKey, uint amount)\n        public\n        optionalProxy\n        nonZeroAmount(amount)\n        // No need to check if price is stale, as it is checked in issuableSynths.\n    {\n        require(amount <= remainingIssuableSynths(messageSender, currencyKey), \"Amount too large\");\n\n        // Keep track of the debt they're about to create\n        _addToDebtRegister(currencyKey, amount);\n\n        // Create their synths\n        synths[currencyKey].issue(messageSender, amount);\n    }\n\n    /**\n     * @notice Issue the maximum amount of Synths possible against the sender's SNX.\n     * @dev Issuance is only allowed if the synthetix price isn't stale.\n     * @param currencyKey The currency you wish to issue synths in, for example sUSD or sAUD\n     */\n    function issueMaxSynths(bytes4 currencyKey)\n        external\n        optionalProxy\n    {\n        // Figure out the maximum we can issue in that currency\n        uint maxIssuable = remainingIssuableSynths(messageSender, currencyKey);\n\n        // And issue them\n        issueSynths(currencyKey, maxIssuable);\n    }\n\n    /**\n     * @notice Burn synths to clear issued synths/free SNX.\n     * @param currencyKey The currency you're specifying to burn\n     * @param amount The amount (in UNIT base) you wish to burn\n     */\n    function burnSynths(bytes4 currencyKey, uint amount)\n        external\n        optionalProxy\n        // No need to check for stale rates as _removeFromDebtRegister calls effectiveValue\n        // which does this for us\n    {\n        // How much debt do they have?\n        uint debt = debtBalanceOf(messageSender, currencyKey);\n\n        require(debt > 0, \"No debt to forgive\");\n\n        // If they're trying to burn more debt than they actually owe, rather than fail the transaction, let's just\n        // clear their debt and leave them be.\n        uint amountToBurn = debt < amount ? debt : amount;\n\n        // Remove their debt from the ledger\n        _removeFromDebtRegister(currencyKey, amountToBurn);\n\n        // synth.burn does a safe subtraction on balance (so it will revert if there are not enough synths).\n        synths[currencyKey].burn(messageSender, amountToBurn);\n    }\n\n    /**\n     * @notice Remove a debt position from the register\n     * @param currencyKey The currency the user is presenting to forgive their debt\n     * @param amount The amount (in UNIT base) being presented\n     */\n    function _removeFromDebtRegister(bytes4 currencyKey, uint amount)\n        internal\n    {\n        // How much debt are they trying to remove in XDRs?\n        uint debtToRemove = effectiveValue(currencyKey, amount, \"XDR\");\n\n        // How much debt do they have?\n        uint existingDebt = debtBalanceOf(messageSender, \"XDR\");\n\n        // What percentage of the total debt are they trying to remove?\n        uint totalDebtIssued = totalIssuedSynths(\"XDR\");\n        uint debtPercentage = debtToRemove.divideDecimalRoundPrecise(totalDebtIssued);\n\n        // And what effect does this percentage have on the global debt holding of other issuers?\n        // The delta specifically needs to not take into account any existing debt as it's already\n        // accounted for in the delta from when they issued previously.\n        uint delta = SafeDecimalMath.preciseUnit().add(debtPercentage);\n\n        // Are they exiting the system, or are they just decreasing their debt position?\n        if (debtToRemove == existingDebt) {\n            synthetixState.clearIssuanceData(messageSender);\n            synthetixState.decrementTotalIssuerCount();\n        } else {\n            // What percentage of the debt will they be left with?\n            uint newDebt = existingDebt.sub(debtToRemove);\n            uint newTotalDebtIssued = totalDebtIssued.sub(debtToRemove);\n            uint newDebtPercentage = newDebt.divideDecimalRoundPrecise(newTotalDebtIssued);\n\n            // Store the debt percentage and debt ledger as high precision integers\n            synthetixState.setCurrentIssuanceData(messageSender, newDebtPercentage);\n        }\n\n        // Update our cumulative ledger. This is also a high precision integer.\n        synthetixState.appendDebtLedgerValue(\n            synthetixState.lastDebtLedgerEntry().multiplyDecimalRoundPrecise(delta)\n        );\n    }\n\n    // ========== Issuance/Burning ==========\n\n    /**\n     * @notice The maximum synths an issuer can issue against their total synthetix quantity, priced in XDRs.\n     * This ignores any already issued synths, and is purely giving you the maximimum amount the user can issue.\n     */\n    function maxIssuableSynths(address issuer, bytes4 currencyKey)\n        public\n        view\n        // We don't need to check stale rates here as effectiveValue will do it for us.\n        returns (uint)\n    {\n        // What is the value of their SNX balance in the destination currency?\n        uint destinationValue = effectiveValue(\"SNX\", collateral(issuer), currencyKey);\n\n        // They're allowed to issue up to issuanceRatio of that value\n        return destinationValue.multiplyDecimal(synthetixState.issuanceRatio());\n    }\n\n    /**\n     * @notice The current collateralisation ratio for a user. Collateralisation ratio varies over time\n     * as the value of the underlying Synthetix asset changes, e.g. if a user issues their maximum available\n     * synths when they hold $10 worth of Synthetix, they will have issued $2 worth of synths. If the value\n     * of Synthetix changes, the ratio returned by this function will adjust accordlingly. Users are\n     * incentivised to maintain a collateralisation ratio as close to the issuance ratio as possible by\n     * altering the amount of fees they're able to claim from the system.\n     */\n    function collateralisationRatio(address issuer)\n        public\n        view\n        returns (uint)\n    {\n        uint totalOwnedSynthetix = collateral(issuer);\n        if (totalOwnedSynthetix == 0) return 0;\n\n        uint debtBalance = debtBalanceOf(issuer, \"SNX\");\n        return debtBalance.divideDecimalRound(totalOwnedSynthetix);\n    }\n\n/**\n     * @notice If a user issues synths backed by SNX in their wallet, the SNX become locked. This function\n     * will tell you how many synths a user has to give back to the system in order to unlock their original\n     * debt position. This is priced in whichever synth is passed in as a currency key, e.g. you can price\n     * the debt in sUSD, XDR, or any other synth you wish.\n     */\n    function debtBalanceOf(address issuer, bytes4 currencyKey)\n        public\n        view\n        // Don't need to check for stale rates here because totalIssuedSynths will do it for us\n        returns (uint)\n    {\n        // What was their initial debt ownership?\n        uint initialDebtOwnership;\n        uint debtEntryIndex;\n        (initialDebtOwnership, debtEntryIndex) = synthetixState.issuanceData(issuer);\n\n        // If it's zero, they haven't issued, and they have no debt.\n        if (initialDebtOwnership == 0) return 0;\n\n        // Figure out the global debt percentage delta from when they entered the system.\n        // This is a high precision integer.\n        uint currentDebtOwnership = synthetixState.lastDebtLedgerEntry()\n            .divideDecimalRoundPrecise(synthetixState.debtLedger(debtEntryIndex))\n            .multiplyDecimalRoundPrecise(initialDebtOwnership);\n\n        // What's the total value of the system in their requested currency?\n        uint totalSystemValue = totalIssuedSynths(currencyKey);\n\n        // Their debt balance is their portion of the total system value.\n        uint highPrecisionBalance = totalSystemValue.decimalToPreciseDecimal()\n            .multiplyDecimalRoundPrecise(currentDebtOwnership);\n\n        return highPrecisionBalance.preciseDecimalToDecimal();\n    }\n\n    /**\n     * @notice The remaining synths an issuer can issue against their total synthetix balance.\n     * @param issuer The account that intends to issue\n     * @param currencyKey The currency to price issuable value in\n     */\n    function remainingIssuableSynths(address issuer, bytes4 currencyKey)\n        public\n        view\n        // Don't need to check for synth existing or stale rates because maxIssuableSynths will do it for us.\n        returns (uint)\n    {\n        uint alreadyIssued = debtBalanceOf(issuer, currencyKey);\n        uint max = maxIssuableSynths(issuer, currencyKey);\n\n        if (alreadyIssued >= max) {\n            return 0;\n        } else {\n            return max.sub(alreadyIssued);\n        }\n    }\n\n    /**\n     * @notice The total SNX owned by this account, both escrowed and unescrowed,\n     * against which synths can be issued.\n     * This includes those already being used as collateral (locked), and those\n     * available for further issuance (unlocked).\n     */\n    function collateral(address account)\n        public\n        view\n        returns (uint)\n    {\n        uint balance = tokenState.balanceOf(account);\n\n        if (escrow != address(0)) {\n            balance = balance.add(escrow.balanceOf(account));\n        }\n\n        return balance;\n    }\n\n    /**\n     * @notice The number of SNX that are free to be transferred by an account.\n     * @dev When issuing, escrowed SNX are locked first, then non-escrowed\n     * SNX are locked last, but escrowed SNX are not transferable, so they are not included\n     * in this calculation.\n     */\n    function transferableSynthetix(address account)\n        public\n        view\n        rateNotStale(\"SNX\")\n        returns (uint)\n    {\n        // How many SNX do they have, excluding escrow?\n        // Note: We're excluding escrow here because we're interested in their transferable amount\n        // and escrowed SNX are not transferable.\n        uint balance = tokenState.balanceOf(account);\n\n        // How many of those will be locked by the amount they've issued?\n        // Assuming issuance ratio is 20%, then issuing 20 SNX of value would require\n        // 100 SNX to be locked in their wallet to maintain their collateralisation ratio\n        // The locked synthetix value can exceed their balance.\n        uint lockedSynthetixValue = debtBalanceOf(account, \"SNX\").divideDecimalRound(synthetixState.issuanceRatio());\n\n        // If we exceed the balance, no SNX are transferable, otherwise the difference is.\n        if (lockedSynthetixValue >= balance) {\n            return 0;\n        } else {\n            return balance.sub(lockedSynthetixValue);\n        }\n    }\n\n    // ========== MODIFIERS ==========\n\n    modifier rateNotStale(bytes4 currencyKey) {\n        require(!exchangeRates.rateIsStale(currencyKey), \"Rate stale or nonexistant currency\");\n        _;\n    }\n\n    modifier notFeeAddress(address account) {\n        require(account != feePool.FEE_ADDRESS(), \"Fee address not allowed\");\n        _;\n    }\n\n    modifier onlySynth() {\n        bool isSynth = false;\n\n        // No need to repeatedly call this function either\n        for (uint8 i = 0; i < availableSynths.length; i++) {\n            if (availableSynths[i] == msg.sender) {\n                isSynth = true;\n                break;\n            }\n        }\n\n        require(isSynth, \"Only synth allowed\");\n        _;\n    }\n\n    modifier nonZeroAmount(uint _amount) {\n        require(_amount > 0, \"Amount needs to be larger than 0\");\n        _;\n    }\n\n    // ========== EVENTS ==========\n\n    event PreferredCurrencyChanged(address indexed account, bytes4 newPreferredCurrency);\n    bytes32 constant PREFERREDCURRENCYCHANGED_SIG = keccak256(\"PreferredCurrencyChanged(address,bytes4)\");\n    function emitPreferredCurrencyChanged(address account, bytes4 newPreferredCurrency) internal {\n        proxy._emit(abi.encode(newPreferredCurrency), 2, PREFERREDCURRENCYCHANGED_SIG, bytes32(account), 0, 0);\n    }\n\n    event StateContractChanged(address stateContract);\n    bytes32 constant STATECONTRACTCHANGED_SIG = keccak256(\"StateContractChanged(address)\");\n    function emitStateContractChanged(address stateContract) internal {\n        proxy._emit(abi.encode(stateContract), 1, STATECONTRACTCHANGED_SIG, 0, 0, 0);\n    }\n\n    event SynthAdded(bytes4 currencyKey, address newSynth);\n    bytes32 constant SYNTHADDED_SIG = keccak256(\"SynthAdded(bytes4,address)\");\n    function emitSynthAdded(bytes4 currencyKey, address newSynth) internal {\n        proxy._emit(abi.encode(currencyKey, newSynth), 1, SYNTHADDED_SIG, 0, 0, 0);\n    }\n\n    event SynthRemoved(bytes4 currencyKey, address removedSynth);\n    bytes32 constant SYNTHREMOVED_SIG = keccak256(\"SynthRemoved(bytes4,address)\");\n    function emitSynthRemoved(bytes4 currencyKey, address removedSynth) internal {\n        proxy._emit(abi.encode(currencyKey, removedSynth), 1, SYNTHREMOVED_SIG, 0, 0, 0);\n    }\n}\n\n\n/*\n-----------------------------------------------------------------\nFILE INFORMATION\n-----------------------------------------------------------------\n\nfile:       Depot.sol\nversion:    3.0\nauthor:     Kevin Brown\ndate:       2018-10-23\n\n-----------------------------------------------------------------\nMODULE DESCRIPTION\n-----------------------------------------------------------------\n\nDepot contract. The Depot provides\na way for users to acquire synths (Synth.sol) and SNX\n(Synthetix.sol) by paying ETH and a way for users to acquire SNX\n(Synthetix.sol) by paying synths. Users can also deposit their synths\nand allow other users to purchase them with ETH. The ETH is sent\nto the user who offered their synths for sale.\n\nThis smart contract contains a balance of each token, and\nallows the owner of the contract (the Synthetix Foundation) to\nmanage the available balance of synthetix at their discretion, while\nusers are allowed to deposit and withdraw their own synth deposits\nif they have not yet been taken up by another user.\n\n-----------------------------------------------------------------\n*/\n\n\n/**\n * @title Depot Contract.\n */\ncontract Depot is SelfDestructible, Pausable {\n    using SafeMath for uint;\n    using SafeDecimalMath for uint;\n\n    /* ========== STATE VARIABLES ========== */\n    Synthetix public synthetix;\n    Synth public synth;\n    FeePool public feePool;\n\n    // Address where the ether and Synths raised for selling SNX is transfered to\n    // Any ether raised for selling Synths gets sent back to whoever deposited the Synths,\n    // and doesn't have anything to do with this address.\n    address public fundsWallet;\n\n    /* The address of the oracle which pushes the USD price SNX and ether to this contract */\n    address public oracle;\n    /* Do not allow the oracle to submit times any further forward into the future than\n       this constant. */\n    uint public constant ORACLE_FUTURE_LIMIT = 10 minutes;\n\n    /* How long will the contract assume the price of any asset is correct */\n    uint public priceStalePeriod = 3 hours;\n\n    /* The time the prices were last updated */\n    uint public lastPriceUpdateTime;\n    /* The USD price of SNX denominated in UNIT */\n    uint public usdToSnxPrice;\n    /* The USD price of ETH denominated in UNIT */\n    uint public usdToEthPrice;\n\n    /* Stores deposits from users. */\n    struct synthDeposit {\n        // The user that made the deposit\n        address user;\n        // The amount (in Synths) that they deposited\n        uint amount;\n    }\n\n    /* User deposits are sold on a FIFO (First in First out) basis. When users deposit\n       synths with us, they get added this queue, which then gets fulfilled in order.\n       Conceptually this fits well in an array, but then when users fill an order we\n       end up copying the whole array around, so better to use an index mapping instead\n       for gas performance reasons.\n\n       The indexes are specified (inclusive, exclusive), so (0, 0) means there's nothing\n       in the array, and (3, 6) means there are 3 elements at 3, 4, and 5. You can obtain\n       the length of the \"array\" by querying depositEndIndex - depositStartIndex. All index\n       operations use safeAdd, so there is no way to overflow, so that means there is a\n       very large but finite amount of deposits this contract can handle before it fills up. */\n    mapping(uint => synthDeposit) public deposits;\n    // The starting index of our queue inclusive\n    uint public depositStartIndex;\n    // The ending index of our queue exclusive\n    uint public depositEndIndex;\n\n    /* This is a convenience variable so users and dApps can just query how much sUSD\n       we have available for purchase without having to iterate the mapping with a\n       O(n) amount of calls for something we'll probably want to display quite regularly. */\n    uint public totalSellableDeposits;\n\n    // The minimum amount of sUSD required to enter the FiFo queue\n    uint public minimumDepositAmount = 50 * SafeDecimalMath.unit();\n\n    // If a user deposits a synth amount < the minimumDepositAmount the contract will keep\n    // the total of small deposits which will not be sold on market and the sender\n    // must call withdrawMyDepositedSynths() to get them back.\n    mapping(address => uint) public smallDeposits;\n\n\n    /* ========== CONSTRUCTOR ========== */\n\n    /**\n     * @dev Constructor\n     * @param _owner The owner of this contract.\n     * @param _fundsWallet The recipient of ETH and Synths that are sent to this contract while exchanging.\n     * @param _synthetix The Synthetix contract we'll interact with for balances and sending.\n     * @param _synth The Synth contract we'll interact with for balances and sending.\n     * @param _oracle The address which is able to update price information.\n     * @param _usdToEthPrice The current price of ETH in USD, expressed in UNIT.\n     * @param _usdToSnxPrice The current price of Synthetix in USD, expressed in UNIT.\n     */\n    constructor(\n        // Ownable\n        address _owner,\n\n        // Funds Wallet\n        address _fundsWallet,\n\n        // Other contracts needed\n        Synthetix _synthetix,\n        Synth _synth,\n\t\tFeePool _feePool,\n\n        // Oracle values - Allows for price updates\n        address _oracle,\n        uint _usdToEthPrice,\n        uint _usdToSnxPrice\n    )\n        /* Owned is initialised in SelfDestructible */\n        SelfDestructible(_owner)\n        Pausable(_owner)\n        public\n    {\n        fundsWallet = _fundsWallet;\n        synthetix = _synthetix;\n        synth = _synth;\n        feePool = _feePool;\n        oracle = _oracle;\n        usdToEthPrice = _usdToEthPrice;\n        usdToSnxPrice = _usdToSnxPrice;\n        lastPriceUpdateTime = now;\n    }\n\n    /* ========== SETTERS ========== */\n\n    /**\n     * @notice Set the funds wallet where ETH raised is held\n     * @param _fundsWallet The new address to forward ETH and Synths to\n     */\n    function setFundsWallet(address _fundsWallet)\n        external\n        onlyOwner\n    {\n        fundsWallet = _fundsWallet;\n        emit FundsWalletUpdated(fundsWallet);\n    }\n\n    /**\n     * @notice Set the Oracle that pushes the synthetix price to this contract\n     * @param _oracle The new oracle address\n     */\n    function setOracle(address _oracle)\n        external\n        onlyOwner\n    {\n        oracle = _oracle;\n        emit OracleUpdated(oracle);\n    }\n\n    /**\n     * @notice Set the Synth contract that the issuance controller uses to issue Synths.\n     * @param _synth The new synth contract target\n     */\n    function setSynth(Synth _synth)\n        external\n        onlyOwner\n    {\n        synth = _synth;\n        emit SynthUpdated(_synth);\n    }\n\n    /**\n     * @notice Set the Synthetix contract that the issuance controller uses to issue SNX.\n     * @param _synthetix The new synthetix contract target\n     */\n    function setSynthetix(Synthetix _synthetix)\n        external\n        onlyOwner\n    {\n        synthetix = _synthetix;\n        emit SynthetixUpdated(_synthetix);\n    }\n\n    /**\n     * @notice Set the stale period on the updated price variables\n     * @param _time The new priceStalePeriod\n     */\n    function setPriceStalePeriod(uint _time)\n        external\n        onlyOwner\n    {\n        priceStalePeriod = _time;\n        emit PriceStalePeriodUpdated(priceStalePeriod);\n    }\n\n    /**\n     * @notice Set the minimum deposit amount required to depoist sUSD into the FIFO queue\n     * @param _amount The new new minimum number of sUSD required to deposit\n     */\n    function setMinimumDepositAmount(uint _amount)\n        external\n        onlyOwner\n    {\n        // Do not allow us to set it less than 1 dollar opening up to fractional desposits in the queue again\n        require(_amount > SafeDecimalMath.unit(), \"Minimum deposit amount must be greater than UNIT\");\n        minimumDepositAmount = _amount;\n        emit MinimumDepositAmountUpdated(minimumDepositAmount);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n    /**\n     * @notice Access point for the oracle to update the prices of SNX / eth.\n     * @param newEthPrice The current price of ether in USD, specified to 18 decimal places.\n     * @param newSynthetixPrice The current price of SNX in USD, specified to 18 decimal places.\n     * @param timeSent The timestamp from the oracle when the transaction was created. This ensures we don't consider stale prices as current in times of heavy network congestion.\n     */\n    function updatePrices(uint newEthPrice, uint newSynthetixPrice, uint timeSent)\n        external\n        onlyOracle\n    {\n        /* Must be the most recently sent price, but not too far in the future.\n         * (so we can't lock ourselves out of updating the oracle for longer than this) */\n        require(lastPriceUpdateTime < timeSent, \"Time must be later than last update\");\n        require(timeSent < (now + ORACLE_FUTURE_LIMIT), \"Time must be less than now + ORACLE_FUTURE_LIMIT\");\n\n        usdToEthPrice = newEthPrice;\n        usdToSnxPrice = newSynthetixPrice;\n        lastPriceUpdateTime = timeSent;\n\n        emit PricesUpdated(usdToEthPrice, usdToSnxPrice, lastPriceUpdateTime);\n    }\n\n    /**\n     * @notice Fallback function (exchanges ETH to sUSD)\n     */\n    function ()\n        external\n        payable\n    {\n        exchangeEtherForSynths();\n    }\n\n    /**\n     * @notice Exchange ETH to sUSD.\n     */\n    function exchangeEtherForSynths()\n        public\n        payable\n        pricesNotStale\n        notPaused\n        returns (uint) // Returns the number of Synths (sUSD) received\n    {\n        uint ethToSend;\n\n        // The multiplication works here because usdToEthPrice is specified in\n        // 18 decimal places, just like our currency base.\n        uint requestedToPurchase = msg.value.multiplyDecimal(usdToEthPrice);\n        uint remainingToFulfill = requestedToPurchase;\n\n        // Iterate through our outstanding deposits and sell them one at a time.\n        for (uint i = depositStartIndex; remainingToFulfill > 0 && i < depositEndIndex; i++) {\n            synthDeposit memory deposit = deposits[i];\n\n            // If it's an empty spot in the queue from a previous withdrawal, just skip over it and\n            // update the queue. It's already been deleted.\n            if (deposit.user == address(0)) {\n\n                depositStartIndex = depositStartIndex.add(1);\n            } else {\n                // If the deposit can more than fill the order, we can do this\n                // without touching the structure of our queue.\n                if (deposit.amount > remainingToFulfill) {\n\n                    // Ok, this deposit can fulfill the whole remainder. We don't need\n                    // to change anything about our queue we can just fulfill it.\n                    // Subtract the amount from our deposit and total.\n                    deposit.amount = deposit.amount.sub(remainingToFulfill);\n                    totalSellableDeposits = totalSellableDeposits.sub(remainingToFulfill);\n\n                    // Transfer the ETH to the depositor. Send is used instead of transfer\n                    // so a non payable contract won't block the FIFO queue on a failed\n                    // ETH payable for synths transaction. The proceeds to be sent to the\n                    // synthetix foundation funds wallet. This is to protect all depositors\n                    // in the queue in this rare case that may occur.\n                    ethToSend = remainingToFulfill.divideDecimal(usdToEthPrice);\n\n                    // We need to use send here instead of transfer because transfer reverts\n                    // if the recipient is a non-payable contract. Send will just tell us it\n                    // failed by returning false at which point we can continue.\n                    // solium-disable-next-line security/no-send\n                    if(!deposit.user.send(ethToSend)) {\n                        fundsWallet.transfer(ethToSend);\n                        emit NonPayableContract(deposit.user, ethToSend);\n                    } else {\n                        emit ClearedDeposit(msg.sender, deposit.user, ethToSend, remainingToFulfill, i);\n                    }\n\n                    // And the Synths to the recipient.\n                    // Note: Fees are calculated by the Synth contract, so when\n                    //       we request a specific transfer here, the fee is\n                    //       automatically deducted and sent to the fee pool.\n                    synth.transfer(msg.sender, remainingToFulfill);\n\n                    // And we have nothing left to fulfill on this order.\n                    remainingToFulfill = 0;\n                } else if (deposit.amount <= remainingToFulfill) {\n                    // We need to fulfill this one in its entirety and kick it out of the queue.\n                    // Start by kicking it out of the queue.\n                    // Free the storage because we can.\n                    delete deposits[i];\n                    // Bump our start index forward one.\n                    depositStartIndex = depositStartIndex.add(1);\n                    // We also need to tell our total it's decreased\n                    totalSellableDeposits = totalSellableDeposits.sub(deposit.amount);\n\n                    // Now fulfill by transfering the ETH to the depositor. Send is used instead of transfer\n                    // so a non payable contract won't block the FIFO queue on a failed\n                    // ETH payable for synths transaction. The proceeds to be sent to the\n                    // synthetix foundation funds wallet. This is to protect all depositors\n                    // in the queue in this rare case that may occur.\n                    ethToSend = deposit.amount.divideDecimal(usdToEthPrice);\n\n                    // We need to use send here instead of transfer because transfer reverts\n                    // if the recipient is a non-payable contract. Send will just tell us it\n                    // failed by returning false at which point we can continue.\n                    // solium-disable-next-line security/no-send\n                    if(!deposit.user.send(ethToSend)) {\n                        fundsWallet.transfer(ethToSend);\n                        emit NonPayableContract(deposit.user, ethToSend);\n                    } else {\n                        emit ClearedDeposit(msg.sender, deposit.user, ethToSend, deposit.amount, i);\n                    }\n\n                    // And the Synths to the recipient.\n                    // Note: Fees are calculated by the Synth contract, so when\n                    //       we request a specific transfer here, the fee is\n                    //       automatically deducted and sent to the fee pool.\n                    synth.transfer(msg.sender, deposit.amount);\n\n                    // And subtract the order from our outstanding amount remaining\n                    // for the next iteration of the loop.\n                    remainingToFulfill = remainingToFulfill.sub(deposit.amount);\n                }\n            }\n        }\n\n        // Ok, if we're here and 'remainingToFulfill' isn't zero, then\n        // we need to refund the remainder of their ETH back to them.\n        if (remainingToFulfill > 0) {\n            msg.sender.transfer(remainingToFulfill.divideDecimal(usdToEthPrice));\n        }\n\n        // How many did we actually give them?\n        uint fulfilled = requestedToPurchase.sub(remainingToFulfill);\n\n        if (fulfilled > 0) {\n            // Now tell everyone that we gave them that many (only if the amount is greater than 0).\n            emit Exchange(\"ETH\", msg.value, \"sUSD\", fulfilled);\n        }\n\n        return fulfilled;\n    }\n\n    /**\n     * @notice Exchange ETH to sUSD while insisting on a particular rate. This allows a user to\n     *         exchange while protecting against frontrunning by the contract owner on the exchange rate.\n     * @param guaranteedRate The exchange rate (ether price) which must be honored or the call will revert.\n     */\n    function exchangeEtherForSynthsAtRate(uint guaranteedRate)\n        public\n        payable\n        pricesNotStale\n        notPaused\n        returns (uint) // Returns the number of Synths (sUSD) received\n    {\n        require(guaranteedRate == usdToEthPrice, \"Guaranteed rate would not be received\");\n\n        return exchangeEtherForSynths();\n    }\n\n\n    /**\n     * @notice Exchange ETH to SNX.\n     */\n    function exchangeEtherForSynthetix()\n        public\n        payable\n        pricesNotStale\n        notPaused\n        returns (uint) // Returns the number of SNX received\n    {\n        // How many SNX are they going to be receiving?\n        uint synthetixToSend = synthetixReceivedForEther(msg.value);\n\n        // Store the ETH in our funds wallet\n        fundsWallet.transfer(msg.value);\n\n        // And send them the SNX.\n        synthetix.transfer(msg.sender, synthetixToSend);\n\n        emit Exchange(\"ETH\", msg.value, \"SNX\", synthetixToSend);\n\n        return synthetixToSend;\n    }\n\n    /**\n     * @notice Exchange ETH to SNX while insisting on a particular set of rates. This allows a user to\n     *         exchange while protecting against frontrunning by the contract owner on the exchange rates.\n     * @param guaranteedEtherRate The ether exchange rate which must be honored or the call will revert.\n     * @param guaranteedSynthetixRate The synthetix exchange rate which must be honored or the call will revert.\n     */\n    function exchangeEtherForSynthetixAtRate(uint guaranteedEtherRate, uint guaranteedSynthetixRate)\n        public\n        payable\n        pricesNotStale\n        notPaused\n        returns (uint) // Returns the number of SNX received\n    {\n        require(guaranteedEtherRate == usdToEthPrice, \"Guaranteed ether rate would not be received\");\n        require(guaranteedSynthetixRate == usdToSnxPrice, \"Guaranteed synthetix rate would not be received\");\n\n        return exchangeEtherForSynthetix();\n    }\n\n\n    /**\n     * @notice Exchange sUSD for SNX\n     * @param synthAmount The amount of synths the user wishes to exchange.\n     */\n    function exchangeSynthsForSynthetix(uint synthAmount)\n        public\n        pricesNotStale\n        notPaused\n        returns (uint) // Returns the number of SNX received\n    {\n        // How many SNX are they going to be receiving?\n        uint synthetixToSend = synthetixReceivedForSynths(synthAmount);\n\n        // Ok, transfer the Synths to our funds wallet.\n        // These do not go in the deposit queue as they aren't for sale as such unless\n        // they're sent back in from the funds wallet.\n        synth.transferFrom(msg.sender, fundsWallet, synthAmount);\n\n        // And send them the SNX.\n        synthetix.transfer(msg.sender, synthetixToSend);\n\n        emit Exchange(\"sUSD\", synthAmount, \"SNX\", synthetixToSend);\n\n        return synthetixToSend;\n    }\n\n    /**\n     * @notice Exchange sUSD for SNX while insisting on a particular rate. This allows a user to\n     *         exchange while protecting against frontrunning by the contract owner on the exchange rate.\n     * @param synthAmount The amount of synths the user wishes to exchange.\n     * @param guaranteedRate A rate (synthetix price) the caller wishes to insist upon.\n     */\n    function exchangeSynthsForSynthetixAtRate(uint synthAmount, uint guaranteedRate)\n        public\n        pricesNotStale\n        notPaused\n        returns (uint) // Returns the number of SNX received\n    {\n        require(guaranteedRate == usdToSnxPrice, \"Guaranteed rate would not be received\");\n\n        return exchangeSynthsForSynthetix(synthAmount);\n    }\n\n    /**\n     * @notice Allows the owner to withdraw SNX from this contract if needed.\n     * @param amount The amount of SNX to attempt to withdraw (in 18 decimal places).\n     */\n    function withdrawSynthetix(uint amount)\n        external\n        onlyOwner\n    {\n        synthetix.transfer(owner, amount);\n\n        // We don't emit our own events here because we assume that anyone\n        // who wants to watch what the Issuance Controller is doing can\n        // just watch ERC20 events from the Synth and/or Synthetix contracts\n        // filtered to our address.\n    }\n\n    /**\n     * @notice Allows a user to withdraw all of their previously deposited synths from this contract if needed.\n     *         Developer note: We could keep an index of address to deposits to make this operation more efficient\n     *         but then all the other operations on the queue become less efficient. It's expected that this\n     *         function will be very rarely used, so placing the inefficiency here is intentional. The usual\n     *         use case does not involve a withdrawal.\n     */\n    function withdrawMyDepositedSynths()\n        external\n    {\n        uint synthsToSend = 0;\n\n        for (uint i = depositStartIndex; i < depositEndIndex; i++) {\n            synthDeposit memory deposit = deposits[i];\n\n            if (deposit.user == msg.sender) {\n                // The user is withdrawing this deposit. Remove it from our queue.\n                // We'll just leave a gap, which the purchasing logic can walk past.\n                synthsToSend = synthsToSend.add(deposit.amount);\n                delete deposits[i];\n                //Let the DApps know we've removed this deposit\n                emit SynthDepositRemoved(deposit.user, deposit.amount, i);\n            }\n        }\n\n        // Update our total\n        totalSellableDeposits = totalSellableDeposits.sub(synthsToSend);\n\n        // Check if the user has tried to send deposit amounts < the minimumDepositAmount to the FIFO\n        // queue which would have been added to this mapping for withdrawal only\n        synthsToSend = synthsToSend.add(smallDeposits[msg.sender]);\n        smallDeposits[msg.sender] = 0;\n\n        // If there's nothing to do then go ahead and revert the transaction\n        require(synthsToSend > 0, \"You have no deposits to withdraw.\");\n\n        // Send their deposits back to them (minus fees)\n        synth.transfer(msg.sender, synthsToSend);\n\n        emit SynthWithdrawal(msg.sender, synthsToSend);\n    }\n\n    /**\n     * @notice depositSynths: Allows users to deposit synths via the approve / transferFrom workflow\n     *         if they'd like. You can equally just transfer synths to this contract and it will work\n     *         exactly the same way but with one less call (and therefore cheaper transaction fees)\n     * @param amount The amount of sUSD you wish to deposit (must have been approved first)\n     */\n    function depositSynths(uint amount)\n        external\n    {\n        // Grab the amount of synths\n        synth.transferFrom(msg.sender, this, amount);\n\n        // Note, we don't need to add them to the deposit list below, as the Synth contract itself will\n        // call tokenFallback when the transfer happens, adding their deposit to the queue.\n    }\n\n    /**\n     * @notice Triggers when users send us SNX or sUSD, but the modifier only allows sUSD calls to proceed.\n     * @param from The address sending the sUSD\n     * @param amount The amount of sUSD\n     */\n    function tokenFallback(address from, uint amount, bytes data)\n        external\n        onlySynth\n        returns (bool)\n    {\n        // A minimum deposit amount is designed to protect purchasers from over paying\n        // gas for fullfilling multiple small synth deposits\n        if (amount < minimumDepositAmount) {\n            // We cant fail/revert the transaction or send the synths back in a reentrant call.\n            // So we will keep your synths balance seperate from the FIFO queue so you can withdraw them\n            smallDeposits[from] = smallDeposits[from].add(amount);\n\n            emit SynthDepositNotAccepted(from, amount, minimumDepositAmount);\n        } else {\n            // Ok, thanks for the deposit, let's queue it up.\n            deposits[depositEndIndex] = synthDeposit({ user: from, amount: amount });\n            emit SynthDeposit(from, amount, depositEndIndex);\n\n            // Walk our index forward as well.\n            depositEndIndex = depositEndIndex.add(1);\n\n            // And add it to our total.\n            totalSellableDeposits = totalSellableDeposits.add(amount);\n        }\n    }\n\n    /* ========== VIEWS ========== */\n    /**\n     * @notice Check if the prices haven't been updated for longer than the stale period.\n     */\n    function pricesAreStale()\n        public\n        view\n        returns (bool)\n    {\n        return lastPriceUpdateTime.add(priceStalePeriod) < now;\n    }\n\n    /**\n     * @notice Calculate how many SNX you will receive if you transfer\n     *         an amount of synths.\n     * @param amount The amount of synths (in 18 decimal places) you want to ask about\n     */\n    function synthetixReceivedForSynths(uint amount)\n        public\n        view\n        returns (uint)\n    {\n        // How many synths would we receive after the transfer fee?\n        uint synthsReceived = feePool.amountReceivedFromTransfer(amount);\n\n        // And what would that be worth in SNX based on the current price?\n        return synthsReceived.divideDecimal(usdToSnxPrice);\n    }\n\n    /**\n     * @notice Calculate how many SNX you will receive if you transfer\n     *         an amount of ether.\n     * @param amount The amount of ether (in wei) you want to ask about\n     */\n    function synthetixReceivedForEther(uint amount)\n        public\n        view\n        returns (uint)\n    {\n        // How much is the ETH they sent us worth in sUSD (ignoring the transfer fee)?\n        uint valueSentInSynths = amount.multiplyDecimal(usdToEthPrice);\n\n        // Now, how many SNX will that USD amount buy?\n        return synthetixReceivedForSynths(valueSentInSynths);\n    }\n\n    /**\n     * @notice Calculate how many synths you will receive if you transfer\n     *         an amount of ether.\n     * @param amount The amount of ether (in wei) you want to ask about\n     */\n    function synthsReceivedForEther(uint amount)\n        public\n        view\n        returns (uint)\n    {\n        // How many synths would that amount of ether be worth?\n        uint synthsTransferred = amount.multiplyDecimal(usdToEthPrice);\n\n        // And how many of those would you receive after a transfer (deducting the transfer fee)\n        return feePool.amountReceivedFromTransfer(synthsTransferred);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyOracle\n    {\n        require(msg.sender == oracle, \"Only the oracle can perform this action\");\n        _;\n    }\n\n    modifier onlySynth\n    {\n        // We're only interested in doing anything on receiving sUSD.\n        require(msg.sender == address(synth), \"Only the synth contract can perform this action\");\n        _;\n    }\n\n    modifier pricesNotStale\n    {\n        require(!pricesAreStale(), \"Prices must not be stale to perform this action\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event FundsWalletUpdated(address newFundsWallet);\n    event OracleUpdated(address newOracle);\n    event SynthUpdated(Synth newSynthContract);\n    event SynthetixUpdated(Synthetix newSynthetixContract);\n    event PriceStalePeriodUpdated(uint priceStalePeriod);\n    event PricesUpdated(uint newEthPrice, uint newSynthetixPrice, uint timeSent);\n    event Exchange(string fromCurrency, uint fromAmount, string toCurrency, uint toAmount);\n    event SynthWithdrawal(address user, uint amount);\n    event SynthDeposit(address indexed user, uint amount, uint indexed depositIndex);\n    event SynthDepositRemoved(address indexed user, uint amount, uint indexed depositIndex);\n    event SynthDepositNotAccepted(address user, uint amount, uint minimum);\n    event MinimumDepositAmountUpdated(uint amount);\n    event NonPayableContract(address indexed receiver, uint amount);\n    event ClearedDeposit(address indexed fromAddress, address indexed toAddress, uint fromETHAmount, uint toAmount, uint indexed depositIndex);\n}\n\n","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"minimumDepositAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guaranteedRate\",\"type\":\"uint256\"}],\"name\":\"exchangeEtherForSynthsAtRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"synthsReceivedForEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"synth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"synthAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeSynthsForSynthetix\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initiationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchangeEtherForSynths\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setSelfDestructBeneficiary\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceStalePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setPriceStalePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminateSelfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_synth\",\"type\":\"address\"}],\"name\":\"setSynth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricesAreStale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEthPrice\",\"type\":\"uint256\"},{\"name\":\"newSynthetixPrice\",\"type\":\"uint256\"},{\"name\":\"timeSent\",\"type\":\"uint256\"}],\"name\":\"updatePrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPriceUpdateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSellableDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"synthAmount\",\"type\":\"uint256\"},{\"name\":\"guaranteedRate\",\"type\":\"uint256\"}],\"name\":\"exchangeSynthsForSynthetixAtRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fundsWallet\",\"type\":\"address\"}],\"name\":\"setFundsWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositStartIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"synthetix\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchangeEtherForSynthetix\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guaranteedEtherRate\",\"type\":\"uint256\"},{\"name\":\"guaranteedSynthetixRate\",\"type\":\"uint256\"}],\"name\":\"exchangeEtherForSynthetixAtRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawMyDepositedSynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"synthetixReceivedForSynths\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SELFDESTRUCT_DELAY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumDepositAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfDestructInitiated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdToEthPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initiateSelfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"selfDestructBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"smallDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"synthetixReceivedForEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositSynths\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSynthetix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdToSnxPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ORACLE_FUTURE_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositEndIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_synthetix\",\"type\":\"address\"}],\"name\":\"setSynthetix\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_fundsWallet\",\"type\":\"address\"},{\"name\":\"_synthetix\",\"type\":\"address\"},{\"name\":\"_synth\",\"type\":\"address\"},{\"name\":\"_feePool\",\"type\":\"address\"},{\"name\":\"_oracle\",\"type\":\"address\"},{\"name\":\"_usdToEthPrice\",\"type\":\"uint256\"},{\"name\":\"_usdToSnxPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newFundsWallet\",\"type\":\"address\"}],\"name\":\"FundsWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newSynthContract\",\"type\":\"address\"}],\"name\":\"SynthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newSynthetixContract\",\"type\":\"address\"}],\"name\":\"SynthetixUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"priceStalePeriod\",\"type\":\"uint256\"}],\"name\":\"PriceStalePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newEthPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newSynthetixPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeSent\",\"type\":\"uint256\"}],\"name\":\"PricesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fromCurrency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toCurrency\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"toAmount\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SynthWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"SynthDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"SynthDepositRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"SynthDepositNotAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinimumDepositAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NonPayableContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fromETHAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"toAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"ClearedDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SelfDestructTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"SelfDestructed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"selfDestructDelay\",\"type\":\"uint256\"}],\"name\":\"SelfDestructInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"SelfDestructBeneficiaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"}]","ContractName":"Depot","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b0a23f40de7f776a4f20153e8995ed3e7d7c8487000000000000000000000000a15184a8c8c3f47a8b54572cdccb30358abfb7a1000000000000000000000000457cd14f384e7d103b17feeb01d2a42ad2eca52900000000000000000000000048414e5b7ed589956070dffebe6e4877dae35ea6000000000000000000000000ebdbac38835a1105851e80c7fa1f1e6e25a86e32000000000000000000000000ac1ed4fabbd5204e02950d68b6fc8c446ac9536200000000000000000000000000000000000000000000001b1ae4d6e2ef500000000000000000000000000000000000000000000000000000016345785d8a0000","Library":"safedecimalmath:84d626b2bb4d0f064067e4bf80fce7055d8f3e7b","SwarmSource":"bzzr://64e559b8ca0c80f016f276cd0f7bcdfcd26eca48b880a7aa5d40e5237b86b591"}]}