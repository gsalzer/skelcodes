{"status":"1","message":"OK","result":[{"SourceCode":"// File: @laborx/solidity-shared-lib/contracts/ERC20Interface.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n/// @title Defines an interface for EIP20 token smart contract\r\ncontract ERC20Interface {\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    string public symbol;\r\n\r\n    function decimals() public view returns (uint8);\r\n    function totalSupply() public view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n}\r\n\r\n// File: @laborx/solidity-shared-lib/contracts/Owned.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\n/// @title Owned contract with safe ownership pass.\r\n///\r\n/// Note: all the non constant functions return false instead of throwing in case if state change\r\n/// didn't happen yet.\r\ncontract Owned {\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address public contractOwner;\r\n    address public pendingContractOwner;\r\n\r\n    modifier onlyContractOwner {\r\n        if (msg.sender == contractOwner) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    constructor()\r\n    public\r\n    {\r\n        contractOwner = msg.sender;\r\n    }\r\n\r\n    /// @notice Prepares ownership pass.\r\n    /// Can only be called by current owner.\r\n    /// @param _to address of the next owner.\r\n    /// @return success.\r\n    function changeContractOwnership(address _to)\r\n    public\r\n    onlyContractOwner\r\n    returns (bool)\r\n    {\r\n        if (_to == 0x0) {\r\n            return false;\r\n        }\r\n        pendingContractOwner = _to;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Finalize ownership pass.\r\n    /// Can only be called by pending owner.\r\n    /// @return success.\r\n    function claimContractOwnership()\r\n    public\r\n    returns (bool)\r\n    {\r\n        if (msg.sender != pendingContractOwner) {\r\n            return false;\r\n        }\r\n\r\n        emit OwnershipTransferred(contractOwner, pendingContractOwner);\r\n        contractOwner = pendingContractOwner;\r\n        delete pendingContractOwner;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Allows the current owner to transfer control of the contract to a newOwner.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(address newOwner)\r\n    public\r\n    onlyContractOwner\r\n    returns (bool)\r\n    {\r\n        if (newOwner == 0x0) {\r\n            return false;\r\n        }\r\n\r\n        emit OwnershipTransferred(contractOwner, newOwner);\r\n        contractOwner = newOwner;\r\n        delete pendingContractOwner;\r\n        return true;\r\n    }\r\n\r\n    /// @notice Allows the current owner to transfer control of the contract to a newOwner.\r\n    /// @dev Backward compatibility only.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferContractOwnership(address newOwner)\r\n    public\r\n    returns (bool)\r\n    {\r\n        return transferOwnership(newOwner);\r\n    }\r\n\r\n    /// @notice Withdraw given tokens from contract to owner.\r\n    /// This method is only allowed for contact owner.\r\n    function withdrawTokens(address[] tokens)\r\n    public\r\n    onlyContractOwner\r\n    {\r\n        address _contractOwner = contractOwner;\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            ERC20Interface token = ERC20Interface(tokens[i]);\r\n            uint balance = token.balanceOf(this);\r\n            if (balance > 0) {\r\n                token.transfer(_contractOwner, balance);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Withdraw ether from contract to owner.\r\n    /// This method is only allowed for contact owner.\r\n    function withdrawEther()\r\n    public\r\n    onlyContractOwner\r\n    {\r\n        uint balance = address(this).balance;\r\n        if (balance > 0)  {\r\n            contractOwner.transfer(balance);\r\n        }\r\n    }\r\n\r\n    /// @notice Transfers ether to another address.\r\n    /// Allowed only for contract owners.\r\n    /// @param _to recepient address\r\n    /// @param _value wei to transfer; must be less or equal to total balance on the contract\r\n    function transferEther(address _to, uint256 _value)\r\n    public\r\n    onlyContractOwner\r\n    {\r\n        require(_to != 0x0, \"INVALID_ETHER_RECEPIENT_ADDRESS\");\r\n        if (_value > address(this).balance) {\r\n            revert(\"INVALID_VALUE_TO_TRANSFER_ETHER\");\r\n        }\r\n\r\n        _to.transfer(_value);\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-storage-lib/contracts/Storage.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\ncontract Manager {\r\n    function isAllowed(address _actor, bytes32 _role) public view returns (bool);\r\n    function hasAccess(address _actor) public view returns (bool);\r\n}\r\n\r\n\r\ncontract Storage is Owned {\r\n    struct Crate {\r\n        mapping(bytes32 => uint) uints;\r\n        mapping(bytes32 => address) addresses;\r\n        mapping(bytes32 => bool) bools;\r\n        mapping(bytes32 => int) ints;\r\n        mapping(bytes32 => uint8) uint8s;\r\n        mapping(bytes32 => bytes32) bytes32s;\r\n        mapping(bytes32 => AddressUInt8) addressUInt8s;\r\n        mapping(bytes32 => string) strings;\r\n    }\r\n\r\n    struct AddressUInt8 {\r\n        address _address;\r\n        uint8 _uint8;\r\n    }\r\n\r\n    mapping(bytes32 => Crate) internal crates;\r\n    Manager public manager;\r\n\r\n    modifier onlyAllowed(bytes32 _role) {\r\n        if (!(msg.sender == address(this) || manager.isAllowed(msg.sender, _role))) {\r\n            revert(\"STORAGE_FAILED_TO_ACCESS_PROTECTED_FUNCTION\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    function setManager(Manager _manager)\r\n    external\r\n    onlyContractOwner\r\n    returns (bool)\r\n    {\r\n        manager = _manager;\r\n        return true;\r\n    }\r\n\r\n    function setUInt(bytes32 _crate, bytes32 _key, uint _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setUInt(_crate, _key, _value);\r\n    }\r\n\r\n    function _setUInt(bytes32 _crate, bytes32 _key, uint _value)\r\n    internal\r\n    {\r\n        crates[_crate].uints[_key] = _value;\r\n    }\r\n\r\n\r\n    function getUInt(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (uint)\r\n    {\r\n        return crates[_crate].uints[_key];\r\n    }\r\n\r\n    function setAddress(bytes32 _crate, bytes32 _key, address _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setAddress(_crate, _key, _value);\r\n    }\r\n\r\n    function _setAddress(bytes32 _crate, bytes32 _key, address _value)\r\n    internal\r\n    {\r\n        crates[_crate].addresses[_key] = _value;\r\n    }\r\n\r\n    function getAddress(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        return crates[_crate].addresses[_key];\r\n    }\r\n\r\n    function setBool(bytes32 _crate, bytes32 _key, bool _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setBool(_crate, _key, _value);\r\n    }\r\n\r\n    function _setBool(bytes32 _crate, bytes32 _key, bool _value)\r\n    internal\r\n    {\r\n        crates[_crate].bools[_key] = _value;\r\n    }\r\n\r\n    function getBool(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (bool)\r\n    {\r\n        return crates[_crate].bools[_key];\r\n    }\r\n\r\n    function setInt(bytes32 _crate, bytes32 _key, int _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setInt(_crate, _key, _value);\r\n    }\r\n\r\n    function _setInt(bytes32 _crate, bytes32 _key, int _value)\r\n    internal\r\n    {\r\n        crates[_crate].ints[_key] = _value;\r\n    }\r\n\r\n    function getInt(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (int)\r\n    {\r\n        return crates[_crate].ints[_key];\r\n    }\r\n\r\n    function setUInt8(bytes32 _crate, bytes32 _key, uint8 _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setUInt8(_crate, _key, _value);\r\n    }\r\n\r\n    function _setUInt8(bytes32 _crate, bytes32 _key, uint8 _value)\r\n    internal\r\n    {\r\n        crates[_crate].uint8s[_key] = _value;\r\n    }\r\n\r\n    function getUInt8(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (uint8)\r\n    {\r\n        return crates[_crate].uint8s[_key];\r\n    }\r\n\r\n    function setBytes32(bytes32 _crate, bytes32 _key, bytes32 _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setBytes32(_crate, _key, _value);\r\n    }\r\n\r\n    function _setBytes32(bytes32 _crate, bytes32 _key, bytes32 _value)\r\n    internal\r\n    {\r\n        crates[_crate].bytes32s[_key] = _value;\r\n    }\r\n\r\n    function getBytes32(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (bytes32)\r\n    {\r\n        return crates[_crate].bytes32s[_key];\r\n    }\r\n\r\n    function setAddressUInt8(bytes32 _crate, bytes32 _key, address _value, uint8 _value2)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setAddressUInt8(_crate, _key, _value, _value2);\r\n    }\r\n\r\n    function _setAddressUInt8(bytes32 _crate, bytes32 _key, address _value, uint8 _value2)\r\n    internal\r\n    {\r\n        crates[_crate].addressUInt8s[_key] = AddressUInt8(_value, _value2);\r\n    }\r\n\r\n    function getAddressUInt8(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (address, uint8)\r\n    {\r\n        return (crates[_crate].addressUInt8s[_key]._address, crates[_crate].addressUInt8s[_key]._uint8);\r\n    }\r\n\r\n    function setString(bytes32 _crate, bytes32 _key, string _value)\r\n    public\r\n    onlyAllowed(_crate)\r\n    {\r\n        _setString(_crate, _key, _value);\r\n    }\r\n\r\n    function _setString(bytes32 _crate, bytes32 _key, string _value)\r\n    internal\r\n    {\r\n        crates[_crate].strings[_key] = _value;\r\n    }\r\n\r\n    function getString(bytes32 _crate, bytes32 _key)\r\n    public\r\n    view\r\n    returns (string)\r\n    {\r\n        return crates[_crate].strings[_key];\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-storage-lib/contracts/StorageInterface.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\nlibrary StorageInterface {\r\n    struct Config {\r\n        Storage store;\r\n        bytes32 crate;\r\n    }\r\n\r\n    struct UInt {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct UInt8 {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct Int {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct Address {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct Bool {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct Bytes32 {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct String {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct Mapping {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct StringMapping {\r\n        String id;\r\n    }\r\n\r\n    struct UIntBoolMapping {\r\n        Bool innerMapping;\r\n    }\r\n\r\n    struct UIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntBytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntAddressMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntEnumMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressBoolMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUInt8Mapping {\r\n        bytes32 id;\r\n    }\r\n\r\n    struct AddressUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressBytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressAddressMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32UIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32UInt8Mapping {\r\n        UInt8 innerMapping;\r\n    }\r\n\r\n    struct Bytes32BoolMapping {\r\n        Bool innerMapping;\r\n    }\r\n\r\n    struct Bytes32Bytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32AddressMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32UIntBoolMapping {\r\n        Bool innerMapping;\r\n    }\r\n\r\n    struct AddressAddressUInt8Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressAddressUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUInt8Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressBytes32Bytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressBytes4BoolMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressBytes4Bytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntAddressUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntAddressAddressMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntAddressBoolMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntUIntAddressMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntUIntBytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntUIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32UIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntStructAddressUInt8Mapping {\r\n        AddressUInt8Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntStructAddressUInt8Mapping {\r\n        AddressUInt8Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntUIntStructAddressUInt8Mapping {\r\n        AddressUInt8Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntUIntUIntStructAddressUInt8Mapping {\r\n        AddressUInt8Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntAddressUInt8Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntAddressUInt8Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct AddressUIntUIntUIntAddressUInt8Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct UIntAddressAddressBoolMapping {\r\n        Bool innerMapping;\r\n    }\r\n\r\n    struct UIntUIntUIntBytes32Mapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32UIntUIntUIntMapping {\r\n        Mapping innerMapping;\r\n    }\r\n\r\n    bytes32 constant SET_IDENTIFIER = \"set\";\r\n\r\n    struct Set {\r\n        UInt count;\r\n        Mapping indexes;\r\n        Mapping values;\r\n    }\r\n\r\n    struct AddressesSet {\r\n        Set innerSet;\r\n    }\r\n\r\n    struct CounterSet {\r\n        Set innerSet;\r\n    }\r\n\r\n    bytes32 constant ORDERED_SET_IDENTIFIER = \"ordered_set\";\r\n\r\n    struct OrderedSet {\r\n        UInt count;\r\n        Bytes32 first;\r\n        Bytes32 last;\r\n        Mapping nextValues;\r\n        Mapping previousValues;\r\n    }\r\n\r\n    struct OrderedUIntSet {\r\n        OrderedSet innerSet;\r\n    }\r\n\r\n    struct OrderedAddressesSet {\r\n        OrderedSet innerSet;\r\n    }\r\n\r\n    struct Bytes32SetMapping {\r\n        Set innerMapping;\r\n    }\r\n\r\n    struct AddressesSetMapping {\r\n        Bytes32SetMapping innerMapping;\r\n    }\r\n\r\n    struct UIntSetMapping {\r\n        Bytes32SetMapping innerMapping;\r\n    }\r\n\r\n    struct Bytes32OrderedSetMapping {\r\n        OrderedSet innerMapping;\r\n    }\r\n\r\n    struct UIntOrderedSetMapping {\r\n        Bytes32OrderedSetMapping innerMapping;\r\n    }\r\n\r\n    struct AddressOrderedSetMapping {\r\n        Bytes32OrderedSetMapping innerMapping;\r\n    }\r\n\r\n    // Can't use modifier due to a Solidity bug.\r\n    function sanityCheck(bytes32 _currentId, bytes32 _newId) internal pure {\r\n        if (_currentId != 0 || _newId == 0) {\r\n            revert();\r\n        }\r\n    }\r\n\r\n    function init(Config storage self, Storage _store, bytes32 _crate) internal {\r\n        self.store = _store;\r\n        self.crate = _crate;\r\n    }\r\n\r\n    function init(UInt8 storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(UInt storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(Int storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(Address storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(Bool storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(Bytes32 storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(String storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(Mapping storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(StringMapping storage self, bytes32 _id) internal {\r\n        init(self.id, _id);\r\n    }\r\n\r\n    function init(UIntAddressMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntEnumMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressAddressUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressBytes32Bytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntAddressUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntAddressBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntUIntAddressMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntAddressAddressMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntUIntBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntAddressAddressBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntUIntUIntBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32UIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32UIntUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(AddressUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressAddressMapping  storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressBytes4BoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressBytes4Bytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntUIntUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressUIntUIntUIntAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32UIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32UInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32BoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32Bytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32AddressMapping  storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32UIntBoolMapping  storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Set storage self, bytes32 _id) internal {\r\n        init(self.count, keccak256(abi.encodePacked(_id, \"count\")));\r\n        init(self.indexes, keccak256(abi.encodePacked(_id, \"indexes\")));\r\n        init(self.values, keccak256(abi.encodePacked(_id, \"values\")));\r\n    }\r\n\r\n    function init(AddressesSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(CounterSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(OrderedSet storage self, bytes32 _id) internal {\r\n        init(self.count, keccak256(abi.encodePacked(_id, \"uint/count\")));\r\n        init(self.first, keccak256(abi.encodePacked(_id, \"uint/first\")));\r\n        init(self.last, keccak256(abi.encodePacked(_id, \"uint/last\")));\r\n        init(self.nextValues, keccak256(abi.encodePacked(_id, \"uint/next\")));\r\n        init(self.previousValues, keccak256(abi.encodePacked(_id, \"uint/prev\")));\r\n    }\r\n\r\n    function init(OrderedUIntSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(OrderedAddressesSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(Bytes32SetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressesSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(Bytes32OrderedSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(UIntOrderedSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(AddressOrderedSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    /** `set` operation */\r\n\r\n    function set(Config storage self, UInt storage item, uint _value) internal {\r\n        self.store.setUInt(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, UInt storage item, bytes32 _salt, uint _value) internal {\r\n        self.store.setUInt(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, UInt8 storage item, uint8 _value) internal {\r\n        self.store.setUInt8(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, UInt8 storage item, bytes32 _salt, uint8 _value) internal {\r\n        self.store.setUInt8(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Int storage item, int _value) internal {\r\n        self.store.setInt(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, Int storage item, bytes32 _salt, int _value) internal {\r\n        self.store.setInt(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Address storage item, address _value) internal {\r\n        self.store.setAddress(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, Address storage item, bytes32 _salt, address _value) internal {\r\n        self.store.setAddress(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Bool storage item, bool _value) internal {\r\n        self.store.setBool(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, Bool storage item, bytes32 _salt, bool _value) internal {\r\n        self.store.setBool(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32 storage item, bytes32 _value) internal {\r\n        self.store.setBytes32(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32 storage item, bytes32 _salt, bytes32 _value) internal {\r\n        self.store.setBytes32(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, String storage item, string _value) internal {\r\n        self.store.setString(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(Config storage self, String storage item, bytes32 _salt, string _value) internal {\r\n        self.store.setString(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Mapping storage item, uint _key, uint _value) internal {\r\n        self.store.setUInt(self.crate, keccak256(abi.encodePacked(item.id, _key)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Mapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        self.store.setBytes32(self.crate, keccak256(abi.encodePacked(item.id, _key)), _value);\r\n    }\r\n\r\n    function set(Config storage self, StringMapping storage item, bytes32 _key, string _value) internal {\r\n        set(self, item.id, _key, _value);\r\n    }\r\n\r\n    function set(Config storage self, AddressUInt8Mapping storage item, bytes32 _key, address _value1, uint8 _value2) internal {\r\n        self.store.setAddressUInt8(self.crate, keccak256(abi.encodePacked(item.id, _key)), _value1, _value2);\r\n    }\r\n\r\n    function set(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2, bytes32 _value) internal {\r\n        set(self, item, keccak256(abi.encodePacked(_key, _key2)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2, bytes32 _key3, bytes32 _value) internal {\r\n        set(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)), _value);\r\n    }\r\n\r\n    function set(Config storage self, Bool storage item, bytes32 _key, bytes32 _key2, bytes32 _key3, bool _value) internal {\r\n        set(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)), _value);\r\n    }\r\n\r\n    function set(Config storage self, UIntAddressMapping storage item, uint _key, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntUIntMapping storage item, uint _key, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntBoolMapping storage item, uint _key, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _value);\r\n    }\r\n\r\n    function set(Config storage self, UIntEnumMapping storage item, uint _key, uint8 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntBytes32Mapping storage item, uint _key, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32UIntMapping storage item, bytes32 _key, uint _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, Bytes32UInt8Mapping storage item, bytes32 _key, uint8 _value) internal {\r\n        set(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32BoolMapping storage item, bytes32 _key, bool _value) internal {\r\n        set(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32Bytes32Mapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        set(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32AddressMapping storage item, bytes32 _key, address _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, Bytes32UIntBoolMapping storage item, bytes32 _key, uint _key2, bool _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)), _value);\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntMapping storage item, address _key, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressBoolMapping storage item, address _key, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), toBytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressBytes32Mapping storage item, address _key, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _value);\r\n    }\r\n\r\n    function set(Config storage self, AddressAddressMapping storage item, address _key, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressAddressUIntMapping storage item, address _key, address _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntMapping storage item, address _key, uint _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressAddressUInt8Mapping storage item, address _key, address _key2, uint8 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUInt8Mapping storage item, address _key, uint _key2, uint8 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressBytes32Bytes32Mapping storage item, address _key, bytes32 _key2, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _key2, _value);\r\n    }\r\n\r\n    function set(Config storage self, UIntAddressUIntMapping storage item, uint _key, address _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntAddressBoolMapping storage item, uint _key, address _key2, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), toBytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntAddressAddressMapping storage item, uint _key, address _key2, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntUIntAddressMapping storage item, uint _key, uint _key2, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntUIntBytes32Mapping storage item, uint _key, uint _key2, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), _value);\r\n    }\r\n\r\n    function set(Config storage self, UIntUIntUIntMapping storage item, uint _key, uint _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, UIntAddressAddressBoolMapping storage item, uint _key, address _key2, address _key3, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3), _value);\r\n    }\r\n\r\n    function set(Config storage self, UIntUIntUIntBytes32Mapping storage item, uint _key, uint _key2,  uint _key3, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3), _value);\r\n    }\r\n\r\n    function set(Config storage self, Bytes32UIntUIntMapping storage item, bytes32 _key, uint _key2, uint _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, Bytes32UIntUIntUIntMapping storage item, bytes32 _key, uint _key2,  uint _key3, uint _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_key2), bytes32(_key3), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntUIntMapping storage item, address _key, uint _key2,  uint _key3, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)), _value, _value2);\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3)), _value, _value2);\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2,  uint _key3, uint _key4, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4)), _value, _value2);\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2,  uint _key3, uint _key4, uint _key5, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5)), _value, _value2);\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntAddressUInt8Mapping storage item, address _key, uint _key2, address _key3, uint8 _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3)), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, address _key4, uint8 _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4)), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressUIntUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2,  uint _key3, uint _key4, address _key5, uint8 _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5)), bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressBytes4BoolMapping storage item, address _key, bytes4 _key2, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), toBytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, AddressBytes4Bytes32Mapping storage item, address _key, bytes4 _key2, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), _value);\r\n    }\r\n\r\n\r\n    /** `add` operation */\r\n\r\n    function add(Config storage self, Set storage item, bytes32 _value) internal {\r\n        add(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function add(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (includes(self, item, _salt, _value)) {\r\n            return;\r\n        }\r\n        uint newCount = count(self, item, _salt) + 1;\r\n        set(self, item.values, _salt, bytes32(newCount), _value);\r\n        set(self, item.indexes, _salt, _value, bytes32(newCount));\r\n        set(self, item.count, _salt, newCount);\r\n    }\r\n\r\n    function add(Config storage self, AddressesSet storage item, address _value) internal {\r\n        add(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, CounterSet storage item) internal {\r\n        add(self, item.innerSet, bytes32(count(self, item) + 1));\r\n    }\r\n\r\n    function add(Config storage self, OrderedSet storage item, bytes32 _value) internal {\r\n        add(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function add(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (_value == 0x0) { revert(); }\r\n\r\n        if (includes(self, item, _salt, _value)) { return; }\r\n\r\n        if (count(self, item, _salt) == 0x0) {\r\n            set(self, item.first, _salt, _value);\r\n        }\r\n\r\n        if (get(self, item.last, _salt) != 0x0) {\r\n            _setOrderedSetLink(self, item.nextValues, _salt, get(self, item.last, _salt), _value);\r\n            _setOrderedSetLink(self, item.previousValues, _salt, _value, get(self, item.last, _salt));\r\n        }\r\n\r\n        _setOrderedSetLink(self, item.nextValues, _salt,  _value, 0x0);\r\n        set(self, item.last, _salt, _value);\r\n        set(self, item.count, _salt, get(self, item.count, _salt) + 1);\r\n    }\r\n\r\n    function add(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        add(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function add(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        add(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function add(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key, address _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, OrderedUIntSet storage item, uint _value) internal {\r\n        add(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function add(Config storage self, OrderedAddressesSet storage item, address _value) internal {\r\n        add(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function set(Config storage self, Set storage item, bytes32 _oldValue, bytes32 _newValue) internal {\r\n        set(self, item, SET_IDENTIFIER, _oldValue, _newValue);\r\n    }\r\n\r\n    function set(Config storage self, Set storage item, bytes32 _salt, bytes32 _oldValue, bytes32 _newValue) private {\r\n        if (!includes(self, item, _salt, _oldValue)) {\r\n            return;\r\n        }\r\n        uint index = uint(get(self, item.indexes, _salt, _oldValue));\r\n        set(self, item.values, _salt, bytes32(index), _newValue);\r\n        set(self, item.indexes, _salt, _newValue, bytes32(index));\r\n        set(self, item.indexes, _salt, _oldValue, bytes32(0));\r\n    }\r\n\r\n    function set(Config storage self, AddressesSet storage item, address _oldValue, address _newValue) internal {\r\n        set(self, item.innerSet, bytes32(_oldValue), bytes32(_newValue));\r\n    }\r\n\r\n    /** `remove` operation */\r\n\r\n    function remove(Config storage self, Set storage item, bytes32 _value) internal {\r\n        remove(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function remove(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (!includes(self, item, _salt, _value)) {\r\n            return;\r\n        }\r\n        uint lastIndex = count(self, item, _salt);\r\n        bytes32 lastValue = get(self, item.values, _salt, bytes32(lastIndex));\r\n        uint index = uint(get(self, item.indexes, _salt, _value));\r\n        if (index < lastIndex) {\r\n            set(self, item.indexes, _salt, lastValue, bytes32(index));\r\n            set(self, item.values, _salt, bytes32(index), lastValue);\r\n        }\r\n        set(self, item.indexes, _salt, _value, bytes32(0));\r\n        set(self, item.values, _salt, bytes32(lastIndex), bytes32(0));\r\n        set(self, item.count, _salt, lastIndex - 1);\r\n    }\r\n\r\n    function remove(Config storage self, AddressesSet storage item, address _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, CounterSet storage item, uint _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, OrderedSet storage item, bytes32 _value) internal {\r\n        remove(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function remove(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (!includes(self, item, _salt, _value)) { return; }\r\n\r\n        _setOrderedSetLink(self, item.nextValues, _salt, get(self, item.previousValues, _salt, _value), get(self, item.nextValues, _salt, _value));\r\n        _setOrderedSetLink(self, item.previousValues, _salt, get(self, item.nextValues, _salt, _value), get(self, item.previousValues, _salt, _value));\r\n\r\n        if (_value == get(self, item.first, _salt)) {\r\n            set(self, item.first, _salt, get(self, item.nextValues, _salt, _value));\r\n        }\r\n\r\n        if (_value == get(self, item.last, _salt)) {\r\n            set(self, item.last, _salt, get(self, item.previousValues, _salt, _value));\r\n        }\r\n\r\n        _deleteOrderedSetLink(self, item.nextValues, _salt, _value);\r\n        _deleteOrderedSetLink(self, item.previousValues, _salt, _value);\r\n\r\n        set(self, item.count, _salt, get(self, item.count, _salt) - 1);\r\n    }\r\n\r\n    function remove(Config storage self, OrderedUIntSet storage item, uint _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, OrderedAddressesSet storage item, address _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        remove(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function remove(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        remove(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function remove(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function remove(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key, address _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    /** 'copy` operation */\r\n\r\n    function copy(Config storage self, Set storage source, Set storage dest) internal {\r\n        uint _destCount = count(self, dest);\r\n        bytes32[] memory _toRemoveFromDest = new bytes32[](_destCount);\r\n        uint _idx;\r\n        uint _pointer = 0;\r\n        for (_idx = 0; _idx < _destCount; ++_idx) {\r\n            bytes32 _destValue = get(self, dest, _idx);\r\n            if (!includes(self, source, _destValue)) {\r\n                _toRemoveFromDest[_pointer++] = _destValue;\r\n            }\r\n        }\r\n\r\n        uint _sourceCount = count(self, source);\r\n        for (_idx = 0; _idx < _sourceCount; ++_idx) {\r\n            add(self, dest, get(self, source, _idx));\r\n        }\r\n\r\n        for (_idx = 0; _idx < _pointer; ++_idx) {\r\n            remove(self, dest, _toRemoveFromDest[_idx]);\r\n        }\r\n    }\r\n\r\n    function copy(Config storage self, AddressesSet storage source, AddressesSet storage dest) internal {\r\n        copy(self, source.innerSet, dest.innerSet);\r\n    }\r\n\r\n    function copy(Config storage self, CounterSet storage source, CounterSet storage dest) internal {\r\n        copy(self, source.innerSet, dest.innerSet);\r\n    }\r\n\r\n    /** `get` operation */\r\n\r\n    function get(Config storage self, UInt storage item) internal view returns (uint) {\r\n        return self.store.getUInt(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, UInt storage item, bytes32 salt) internal view returns (uint) {\r\n        return self.store.getUInt(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, UInt8 storage item) internal view returns (uint8) {\r\n        return self.store.getUInt8(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, UInt8 storage item, bytes32 salt) internal view returns (uint8) {\r\n        return self.store.getUInt8(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, Int storage item) internal view returns (int) {\r\n        return self.store.getInt(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, Int storage item, bytes32 salt) internal view returns (int) {\r\n        return self.store.getInt(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, Address storage item) internal view returns (address) {\r\n        return self.store.getAddress(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, Address storage item, bytes32 salt) internal view returns (address) {\r\n        return self.store.getAddress(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, Bool storage item) internal view returns (bool) {\r\n        return self.store.getBool(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, Bool storage item, bytes32 salt) internal view returns (bool) {\r\n        return self.store.getBool(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32 storage item) internal view returns (bytes32) {\r\n        return self.store.getBytes32(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, Bytes32 storage item, bytes32 salt) internal view returns (bytes32) {\r\n        return self.store.getBytes32(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, String storage item) internal view returns (string) {\r\n        return self.store.getString(self.crate, item.id);\r\n    }\r\n\r\n    function get(Config storage self, String storage item, bytes32 salt) internal view returns (string) {\r\n        return self.store.getString(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(Config storage self, Mapping storage item, uint _key) internal view returns (uint) {\r\n        return self.store.getUInt(self.crate, keccak256(abi.encodePacked(item.id, _key)));\r\n    }\r\n\r\n    function get(Config storage self, Mapping storage item, bytes32 _key) internal view returns (bytes32) {\r\n        return self.store.getBytes32(self.crate, keccak256(abi.encodePacked(item.id, _key)));\r\n    }\r\n\r\n    function get(Config storage self, StringMapping storage item, bytes32 _key) internal view returns (string) {\r\n        return get(self, item.id, _key);\r\n    }\r\n\r\n    function get(Config storage self, AddressUInt8Mapping storage item, bytes32 _key) internal view returns (address, uint8) {\r\n        return self.store.getAddressUInt8(self.crate, keccak256(abi.encodePacked(item.id, _key)));\r\n    }\r\n\r\n    function get(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2) internal view returns (bytes32) {\r\n        return get(self, item, keccak256(abi.encodePacked(_key, _key2)));\r\n    }\r\n\r\n    function get(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2, bytes32 _key3) internal view returns (bytes32) {\r\n        return get(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)));\r\n    }\r\n\r\n    function get(Config storage self, Bool storage item, bytes32 _key, bytes32 _key2, bytes32 _key3) internal view returns (bool) {\r\n        return get(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)));\r\n    }\r\n\r\n    function get(Config storage self, UIntBoolMapping storage item, uint _key) internal view returns (bool) {\r\n        return get(self, item.innerMapping, bytes32(_key));\r\n    }\r\n\r\n    function get(Config storage self, UIntEnumMapping storage item, uint _key) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, UIntUIntMapping storage item, uint _key) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, UIntAddressMapping storage item, uint _key) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32UIntMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32AddressMapping storage item, bytes32 _key) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32UInt8Mapping storage item, bytes32 _key) internal view returns (uint8) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(Config storage self, Bytes32BoolMapping storage item, bytes32 _key) internal view returns (bool) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(Config storage self, Bytes32Bytes32Mapping storage item, bytes32 _key) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(Config storage self, Bytes32UIntBoolMapping storage item, bytes32 _key, uint _key2) internal view returns (bool) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)));\r\n    }\r\n\r\n    function get(Config storage self, UIntBytes32Mapping storage item, uint _key) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntMapping storage item, address _key) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, AddressBoolMapping storage item, address _key) internal view returns (bool) {\r\n        return toBool(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, AddressAddressMapping storage item, address _key) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(Config storage self, AddressBytes32Mapping storage item, address _key) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key));\r\n    }\r\n\r\n    function get(Config storage self, UIntUIntBytes32Mapping storage item, uint _key, uint _key2) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2));\r\n    }\r\n\r\n    function get(Config storage self, UIntUIntAddressMapping storage item, uint _key, uint _key2) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, UIntUIntUIntMapping storage item, uint _key, uint _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32UIntUIntMapping storage item, bytes32 _key, uint _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key, bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32UIntUIntUIntMapping storage item, bytes32 _key, uint _key2, uint _key3) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key, bytes32(_key2), bytes32(_key3)));\r\n    }\r\n\r\n    function get(Config storage self, AddressAddressUIntMapping storage item, address _key, address _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressAddressUInt8Mapping storage item, address _key, address _key2) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntMapping storage item, address _key, uint _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUInt8Mapping storage item, address _key, uint _key2) internal view returns (uint) {\r\n        return uint8(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressBytes32Bytes32Mapping storage item, address _key, bytes32 _key2) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), _key2);\r\n    }\r\n\r\n    function get(Config storage self, AddressBytes4BoolMapping storage item, address _key, bytes4 _key2) internal view returns (bool) {\r\n        return toBool(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressBytes4Bytes32Mapping storage item, address _key, bytes4 _key2) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2));\r\n    }\r\n\r\n    function get(Config storage self, UIntAddressUIntMapping storage item, uint _key, address _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, UIntAddressBoolMapping storage item, uint _key, address _key2) internal view returns (bool) {\r\n        return toBool(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, UIntAddressAddressMapping storage item, uint _key, address _key2) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(Config storage self, UIntAddressAddressBoolMapping storage item, uint _key, address _key2, address _key3) internal view returns (bool) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3));\r\n    }\r\n\r\n    function get(Config storage self, UIntUIntUIntBytes32Mapping storage item, uint _key, uint _key2, uint _key3) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntUIntMapping storage item, address _key, uint _key2, uint _key3) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntStructAddressUInt8Mapping storage item, address _key, uint _key2) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, uint _key4) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, uint _key4, uint _key5) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5)));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntAddressUInt8Mapping storage item, address _key, uint _key2, address _key3) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3))));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, address _key4) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4))));\r\n    }\r\n\r\n    function get(Config storage self, AddressUIntUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, uint _key4, address _key5) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5))));\r\n    }\r\n\r\n    /** `includes` operation */\r\n\r\n    function includes(Config storage self, Set storage item, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function includes(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) internal view returns (bool) {\r\n        return get(self, item.indexes, _salt, _value) != 0;\r\n    }\r\n\r\n    function includes(Config storage self, AddressesSet storage item, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, CounterSet storage item, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, OrderedSet storage item, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function includes(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private view returns (bool) {\r\n        return _value != 0x0 && (get(self, item.nextValues, _salt, _value) != 0x0 || get(self, item.last, _salt) == _value);\r\n    }\r\n\r\n    function includes(Config storage self, OrderedUIntSet storage item, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, OrderedAddressesSet storage item, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function includes(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function includes(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function includes(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(Config storage self, Set storage item, bytes32 _value) internal view returns (uint) {\r\n        return getIndex(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function getIndex(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) private view returns (uint) {\r\n        return uint(get(self, item.indexes, _salt, _value));\r\n    }\r\n\r\n    function getIndex(Config storage self, AddressesSet storage item, address _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(Config storage self, CounterSet storage item, uint _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function getIndex(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    /** `count` operation */\r\n\r\n    function count(Config storage self, Set storage item) internal view returns (uint) {\r\n        return count(self, item, SET_IDENTIFIER);\r\n    }\r\n\r\n    function count(Config storage self, Set storage item, bytes32 _salt) internal view returns (uint) {\r\n        return get(self, item.count, _salt);\r\n    }\r\n\r\n    function count(Config storage self, AddressesSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(Config storage self, CounterSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(Config storage self, OrderedSet storage item) internal view returns (uint) {\r\n        return count(self, item, ORDERED_SET_IDENTIFIER);\r\n    }\r\n\r\n    function count(Config storage self, OrderedSet storage item, bytes32 _salt) private view returns (uint) {\r\n        return get(self, item.count, _salt);\r\n    }\r\n\r\n    function count(Config storage self, OrderedUIntSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(Config storage self, OrderedAddressesSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(Config storage self, Bytes32SetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(Config storage self, AddressesSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(Config storage self, UIntSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(Config storage self, Set storage item) internal view returns (bytes32[] result) {\r\n        result = get(self, item, SET_IDENTIFIER);\r\n    }\r\n\r\n    function get(Config storage self, Set storage item, bytes32 _salt) private view returns (bytes32[] result) {\r\n        uint valuesCount = count(self, item, _salt);\r\n        result = new bytes32[](valuesCount);\r\n        for (uint i = 0; i < valuesCount; i++) {\r\n            result[i] = get(self, item, _salt, i);\r\n        }\r\n    }\r\n\r\n    function get(Config storage self, AddressesSet storage item) internal view returns (address[]) {\r\n        return toAddresses(get(self, item.innerSet));\r\n    }\r\n\r\n    function get(Config storage self, CounterSet storage item) internal view returns (uint[]) {\r\n        return toUInt(get(self, item.innerSet));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32SetMapping storage item, bytes32 _key) internal view returns (bytes32[]) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(Config storage self, AddressesSetMapping storage item, bytes32 _key) internal view returns (address[]) {\r\n        return toAddresses(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(Config storage self, UIntSetMapping storage item, bytes32 _key) internal view returns (uint[]) {\r\n        return toUInt(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(Config storage self, Set storage item, uint _index) internal view returns (bytes32) {\r\n        return get(self, item, SET_IDENTIFIER, _index);\r\n    }\r\n\r\n    function get(Config storage self, Set storage item, bytes32 _salt, uint _index) private view returns (bytes32) {\r\n        return get(self, item.values, _salt, bytes32(_index+1));\r\n    }\r\n\r\n    function get(Config storage self, AddressesSet storage item, uint _index) internal view returns (address) {\r\n        return address(get(self, item.innerSet, _index));\r\n    }\r\n\r\n    function get(Config storage self, CounterSet storage item, uint _index) internal view returns (uint) {\r\n        return uint(get(self, item.innerSet, _index));\r\n    }\r\n\r\n    function get(Config storage self, Bytes32SetMapping storage item, bytes32 _key, uint _index) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, _key, _index);\r\n    }\r\n\r\n    function get(Config storage self, AddressesSetMapping storage item, bytes32 _key, uint _index) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, _key, _index));\r\n    }\r\n\r\n    function get(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _index) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key, _index));\r\n    }\r\n\r\n    function getNextValue(Config storage self, OrderedSet storage item, bytes32 _value) internal view returns (bytes32) {\r\n        return getNextValue(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function getNextValue(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private view returns (bytes32) {\r\n        return get(self, item.nextValues, _salt, _value);\r\n    }\r\n\r\n    function getNextValue(Config storage self, OrderedUIntSet storage item, uint _value) internal view returns (uint) {\r\n        return uint(getNextValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function getNextValue(Config storage self, OrderedAddressesSet storage item, address _value) internal view returns (address) {\r\n        return address(getNextValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function getPreviousValue(Config storage self, OrderedSet storage item, bytes32 _value) internal view returns (bytes32) {\r\n        return getPreviousValue(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function getPreviousValue(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private view returns (bytes32) {\r\n        return get(self, item.previousValues, _salt, _value);\r\n    }\r\n\r\n    function getPreviousValue(Config storage self, OrderedUIntSet storage item, uint _value) internal view returns (uint) {\r\n        return uint(getPreviousValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function getPreviousValue(Config storage self, OrderedAddressesSet storage item, address _value) internal view returns (address) {\r\n        return address(getPreviousValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function toBool(bytes32 self) internal pure returns (bool) {\r\n        return self != bytes32(0);\r\n    }\r\n\r\n    function toBytes32(bool self) internal pure returns (bytes32) {\r\n        return bytes32(self ? 1 : 0);\r\n    }\r\n\r\n    function toAddresses(bytes32[] memory self) internal pure returns (address[]) {\r\n        address[] memory result = new address[](self.length);\r\n        for (uint i = 0; i < self.length; i++) {\r\n            result[i] = address(self[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function toUInt(bytes32[] memory self) internal pure returns (uint[]) {\r\n        uint[] memory result = new uint[](self.length);\r\n        for (uint i = 0; i < self.length; i++) {\r\n            result[i] = uint(self[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function _setOrderedSetLink(Config storage self, Mapping storage link, bytes32 _salt, bytes32 from, bytes32 to) private {\r\n        if (from != 0x0) {\r\n            set(self, link, _salt, from, to);\r\n        }\r\n    }\r\n\r\n    function _deleteOrderedSetLink(Config storage self, Mapping storage link, bytes32 _salt, bytes32 from) private {\r\n        if (from != 0x0) {\r\n            set(self, link, _salt, from, 0x0);\r\n        }\r\n    }\r\n\r\n    /** @title Structure to incapsulate and organize iteration through different kinds of collections */\r\n    struct Iterator {\r\n        uint limit;\r\n        uint valuesLeft;\r\n        bytes32 currentValue;\r\n        bytes32 anchorKey;\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedSet storage item, bytes32 anchorKey, bytes32 startValue, uint limit) internal view returns (Iterator) {\r\n        if (startValue == 0x0) {\r\n            return listIterator(self, item, anchorKey, limit);\r\n        }\r\n\r\n        return createIterator(anchorKey, startValue, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedUIntSet storage item, bytes32 anchorKey, uint startValue, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, bytes32(startValue), limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedAddressesSet storage item, bytes32 anchorKey, address startValue, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, bytes32(startValue), limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedSet storage item, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item, ORDERED_SET_IDENTIFIER, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedSet storage item, bytes32 anchorKey, uint limit) internal view returns (Iterator) {\r\n        return createIterator(anchorKey, get(self, item.first, anchorKey), limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedUIntSet storage item, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedUIntSet storage item, bytes32 anchorKey, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedAddressesSet storage item, uint limit) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedAddressesSet storage item, uint limit, bytes32 anchorKey) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, limit);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedSet storage item) internal view returns (Iterator) {\r\n        return listIterator(self, item, ORDERED_SET_IDENTIFIER);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedSet storage item, bytes32 anchorKey) internal view returns (Iterator) {\r\n        return listIterator(self, item, anchorKey, get(self, item.count, anchorKey));\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedUIntSet storage item) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedUIntSet storage item, bytes32 anchorKey) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedAddressesSet storage item) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet);\r\n    }\r\n\r\n    function listIterator(Config storage self, OrderedAddressesSet storage item, bytes32 anchorKey) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey);\r\n    }\r\n\r\n    function listIterator(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function listIterator(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function listIterator(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key) internal view returns (Iterator) {\r\n        return listIterator(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function createIterator(bytes32 anchorKey, bytes32 startValue, uint limit) internal pure returns (Iterator) {\r\n        return Iterator({\r\n            currentValue: startValue,\r\n            limit: limit,\r\n            valuesLeft: limit,\r\n            anchorKey: anchorKey\r\n        });\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, OrderedSet storage item, Iterator iterator) internal view returns (bytes32 _nextValue) {\r\n        if (!canGetNextWithIterator(self, item, iterator)) { revert(); }\r\n\r\n        _nextValue = iterator.currentValue;\r\n\r\n        iterator.currentValue = getNextValue(self, item, iterator.anchorKey, iterator.currentValue);\r\n        iterator.valuesLeft -= 1;\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, OrderedUIntSet storage item, Iterator iterator) internal view returns (uint _nextValue) {\r\n        return uint(getNextWithIterator(self, item.innerSet, iterator));\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, OrderedAddressesSet storage item, Iterator iterator) internal view returns (address _nextValue) {\r\n        return address(getNextWithIterator(self, item.innerSet, iterator));\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, Bytes32OrderedSetMapping storage item, Iterator iterator) internal view returns (bytes32 _nextValue) {\r\n        return getNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, UIntOrderedSetMapping storage item, Iterator iterator) internal view returns (uint _nextValue) {\r\n        return uint(getNextWithIterator(self, item.innerMapping, iterator));\r\n    }\r\n\r\n    function getNextWithIterator(Config storage self, AddressOrderedSetMapping storage item, Iterator iterator) internal view returns (address _nextValue) {\r\n        return address(getNextWithIterator(self, item.innerMapping, iterator));\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, OrderedSet storage item, Iterator iterator) internal view returns (bool) {\r\n        if (iterator.valuesLeft == 0 || !includes(self, item, iterator.anchorKey, iterator.currentValue)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, OrderedUIntSet storage item, Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerSet, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, OrderedAddressesSet storage item, Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerSet, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, Bytes32OrderedSetMapping storage item, Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, UIntOrderedSetMapping storage item, Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(Config storage self, AddressOrderedSetMapping storage item, Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function count(Iterator iterator) internal pure returns (uint) {\r\n        return iterator.valuesLeft;\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-storage-lib/contracts/StorageContractAdapter.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\ncontract StorageContractAdapter {\r\n\r\n    StorageInterface.Config internal store;\r\n\r\n    constructor(Storage _store, bytes32 _crate) public {\r\n        StorageInterface.init(store, _store, _crate);\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-storage-lib/contracts/StorageInterfaceContract.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\n\r\ncontract StorageInterfaceContract is StorageContractAdapter, Storage {\r\n\r\n    bytes32 constant SET_IDENTIFIER = \"set\";\r\n    bytes32 constant ORDERED_SET_IDENTIFIER = \"ordered_set\";\r\n\r\n    // Can't use modifier due to a Solidity bug.\r\n    function sanityCheck(bytes32 _currentId, bytes32 _newId) internal pure {\r\n        if (_currentId != 0 || _newId == 0) {\r\n            revert(\"STORAGE_INTERFACE_CONTRACT_SANITY_CHECK_FAILED\");\r\n        }\r\n    }\r\n\r\n    function init(StorageInterface.Config storage self, bytes32 _crate) internal {\r\n        self.crate = _crate;\r\n    }\r\n\r\n    function init(StorageInterface.UInt8 storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(StorageInterface.UInt storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(StorageInterface.Int storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(StorageInterface.Address storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(StorageInterface.Bool storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(StorageInterface.Bytes32 storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(StorageInterface.String storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(StorageInterface.Mapping storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(StorageInterface.StringMapping storage self, bytes32 _id) internal {\r\n        init(self.id, _id);\r\n    }\r\n\r\n    function init(StorageInterface.UIntAddressMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.UIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.UIntEnumMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.UIntBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.UIntBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressAddressUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressBytes32Bytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.UIntAddressUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.UIntAddressBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.UIntUIntAddressMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.UIntAddressAddressMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.UIntUIntBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.UIntUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.UIntAddressAddressBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.UIntUIntUIntBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.Bytes32UIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.Bytes32UIntUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressBoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        sanityCheck(self.id, _id);\r\n        self.id = _id;\r\n    }\r\n\r\n    function init(StorageInterface.AddressUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressBytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressAddressMapping  storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressUIntUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressBytes4BoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressBytes4Bytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressUIntUIntUIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressUIntUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressUIntUIntUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressUIntUIntUIntUIntStructAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressUIntAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressUIntUIntAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressUIntUIntUIntAddressUInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.Bytes32UIntMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.Bytes32UInt8Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.Bytes32BoolMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.Bytes32Bytes32Mapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.Bytes32AddressMapping  storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.Bytes32UIntBoolMapping  storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.Set storage self, bytes32 _id) internal {\r\n        init(self.count, keccak256(abi.encodePacked(_id, \"count\")));\r\n        init(self.indexes, keccak256(abi.encodePacked(_id, \"indexes\")));\r\n        init(self.values, keccak256(abi.encodePacked(_id, \"values\")));\r\n    }\r\n\r\n    function init(StorageInterface.AddressesSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(StorageInterface.CounterSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(StorageInterface.OrderedSet storage self, bytes32 _id) internal {\r\n        init(self.count, keccak256(abi.encodePacked(_id, \"uint/count\")));\r\n        init(self.first, keccak256(abi.encodePacked(_id, \"uint/first\")));\r\n        init(self.last, keccak256(abi.encodePacked(_id, \"uint/last\")));\r\n        init(self.nextValues, keccak256(abi.encodePacked(_id, \"uint/next\")));\r\n        init(self.previousValues, keccak256(abi.encodePacked(_id, \"uint/prev\")));\r\n    }\r\n\r\n    function init(StorageInterface.OrderedUIntSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(StorageInterface.OrderedAddressesSet storage self, bytes32 _id) internal {\r\n        init(self.innerSet, _id);\r\n    }\r\n\r\n    function init(StorageInterface.Bytes32SetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressesSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.UIntSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.Bytes32OrderedSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.UIntOrderedSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    function init(StorageInterface.AddressOrderedSetMapping storage self, bytes32 _id) internal {\r\n        init(self.innerMapping, _id);\r\n    }\r\n\r\n    /** `set` operation */\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UInt storage item, uint _value) internal {\r\n        _setUInt(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UInt storage item, bytes32 _salt, uint _value) internal {\r\n        _setUInt(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UInt8 storage item, uint8 _value) internal {\r\n        _setUInt8(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UInt8 storage item, bytes32 _salt, uint8 _value) internal {\r\n        _setUInt8(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Int storage item, int _value) internal {\r\n        _setInt(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Int storage item, bytes32 _salt, int _value) internal {\r\n        _setInt(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Address storage item, address _value) internal {\r\n        _setAddress(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Address storage item, bytes32 _salt, address _value) internal {\r\n        _setAddress(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Bool storage item, bool _value) internal {\r\n        _setBool(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Bool storage item, bytes32 _salt, bool _value) internal {\r\n        _setBool(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Bytes32 storage item, bytes32 _value) internal {\r\n        _setBytes32(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Bytes32 storage item, bytes32 _salt, bytes32 _value) internal {\r\n        _setBytes32(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.String storage item, string _value) internal {\r\n        _setString(self.crate, item.id, _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.String storage item, bytes32 _salt, string _value) internal {\r\n        _setString(self.crate, keccak256(abi.encodePacked(item.id, _salt)), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Mapping storage item, uint _key, uint _value) internal {\r\n        _setUInt(self.crate, keccak256(abi.encodePacked(item.id, _key)), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Mapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        _setBytes32(self.crate, keccak256(abi.encodePacked(item.id, _key)), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.StringMapping storage item, bytes32 _key, string _value) internal {\r\n        set(self, item.id, _key, _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressUInt8Mapping storage item, bytes32 _key, address _value1, uint8 _value2) internal {\r\n        _setAddressUInt8(self.crate, keccak256(abi.encodePacked(item.id, _key)), _value1, _value2);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Mapping storage item, bytes32 _key, bytes32 _key2, bytes32 _value) internal {\r\n        set(self, item, keccak256(abi.encodePacked(_key, _key2)), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Mapping storage item, bytes32 _key, bytes32 _key2, bytes32 _key3, bytes32 _value) internal {\r\n        set(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Bool storage item, bytes32 _key, bytes32 _key2, bytes32 _key3, bool _value) internal {\r\n        set(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UIntAddressMapping storage item, uint _key, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UIntUIntMapping storage item, uint _key, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UIntBoolMapping storage item, uint _key, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UIntEnumMapping storage item, uint _key, uint8 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UIntBytes32Mapping storage item, uint _key, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Bytes32UIntMapping storage item, bytes32 _key, uint _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Bytes32UInt8Mapping storage item, bytes32 _key, uint8 _value) internal {\r\n        set(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Bytes32BoolMapping storage item, bytes32 _key, bool _value) internal {\r\n        set(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Bytes32Bytes32Mapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        set(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Bytes32AddressMapping storage item, bytes32 _key, address _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Bytes32UIntBoolMapping storage item, bytes32 _key, uint _key2, bool _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressUIntMapping storage item, address _key, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressBoolMapping storage item, address _key, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), toBytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressBytes32Mapping storage item, address _key, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressAddressMapping storage item, address _key, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressAddressUIntMapping storage item, address _key, address _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressUIntUIntMapping storage item, address _key, uint _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressAddressUInt8Mapping storage item, address _key, address _key2, uint8 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressUIntUInt8Mapping storage item, address _key, uint _key2, uint8 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressBytes32Bytes32Mapping storage item, address _key, bytes32 _key2, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), _key2, _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UIntAddressUIntMapping storage item, uint _key, address _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UIntAddressBoolMapping storage item, uint _key, address _key2, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), toBytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UIntAddressAddressMapping storage item, uint _key, address _key2, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UIntUIntAddressMapping storage item, uint _key, uint _key2, address _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UIntUIntBytes32Mapping storage item, uint _key, uint _key2, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UIntUIntUIntMapping storage item, uint _key, uint _key2, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UIntAddressAddressBoolMapping storage item, uint _key, address _key2, address _key3, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.UIntUIntUIntBytes32Mapping storage item, uint _key, uint _key2,  uint _key3, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3), _value);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Bytes32UIntUIntMapping storage item, bytes32 _key, uint _key2, uint _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_key2), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Bytes32UIntUIntUIntMapping storage item, bytes32 _key, uint _key2,  uint _key3, uint _value) internal {\r\n        set(self, item.innerMapping, _key, bytes32(_key2), bytes32(_key3), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressUIntUIntUIntMapping storage item, address _key, uint _key2,  uint _key3, uint _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)), _value, _value2);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3)), _value, _value2);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2,  uint _key3, uint _key4, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4)), _value, _value2);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressUIntUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2,  uint _key3, uint _key4, uint _key5, address _value, uint8 _value2) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5)), _value, _value2);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressUIntAddressUInt8Mapping storage item, address _key, uint _key2, address _key3, uint8 _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3)), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, address _key4, uint8 _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4)), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressUIntUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2,  uint _key3, uint _key4, address _key5, uint8 _value) internal {\r\n        set(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5)), bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressBytes4BoolMapping storage item, address _key, bytes4 _key2, bool _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), toBytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressBytes4Bytes32Mapping storage item, address _key, bytes4 _key2, bytes32 _value) internal {\r\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), _value);\r\n    }\r\n\r\n\r\n    /** `add` operation */\r\n\r\n    function add(StorageInterface.Config storage self, StorageInterface.Set storage item, bytes32 _value) internal {\r\n        add(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function add(StorageInterface.Config storage self, StorageInterface.Set storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (includes(self, item, _salt, _value)) {\r\n            return;\r\n        }\r\n        uint newCount = count(self, item, _salt) + 1;\r\n        set(self, item.values, _salt, bytes32(newCount), _value);\r\n        set(self, item.indexes, _salt, _value, bytes32(newCount));\r\n        set(self, item.count, _salt, newCount);\r\n    }\r\n\r\n    function add(StorageInterface.Config storage self, StorageInterface.AddressesSet storage item, address _value) internal {\r\n        add(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function add(StorageInterface.Config storage self, StorageInterface.CounterSet storage item) internal {\r\n        add(self, item.innerSet, bytes32(count(self, item) + 1));\r\n    }\r\n\r\n    function add(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, bytes32 _value) internal {\r\n        add(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function add(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (_value == 0x0) { revert(); }\r\n\r\n        if (includes(self, item, _salt, _value)) { return; }\r\n\r\n        if (count(self, item, _salt) == 0x0) {\r\n            set(self, item.first, _salt, _value);\r\n        }\r\n\r\n        if (get(self, item.last, _salt) != 0x0) {\r\n            _setOrderedSetLink(self, item.nextValues, _salt, get(self, item.last, _salt), _value);\r\n            _setOrderedSetLink(self, item.previousValues, _salt, _value, get(self, item.last, _salt));\r\n        }\r\n\r\n        _setOrderedSetLink(self, item.nextValues, _salt,  _value, 0x0);\r\n        set(self, item.last, _salt, _value);\r\n        set(self, item.count, _salt, get(self, item.count, _salt) + 1);\r\n    }\r\n\r\n    function add(StorageInterface.Config storage self, StorageInterface.Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        add(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function add(StorageInterface.Config storage self, StorageInterface.AddressesSetMapping storage item, bytes32 _key, address _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(StorageInterface.Config storage self, StorageInterface.UIntSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(StorageInterface.Config storage self, StorageInterface.Bytes32OrderedSetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        add(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function add(StorageInterface.Config storage self, StorageInterface.UIntOrderedSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(StorageInterface.Config storage self, StorageInterface.AddressOrderedSetMapping storage item, bytes32 _key, address _value) internal {\r\n        add(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function add(StorageInterface.Config storage self, StorageInterface.OrderedUIntSet storage item, uint _value) internal {\r\n        add(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function add(StorageInterface.Config storage self, StorageInterface.OrderedAddressesSet storage item, address _value) internal {\r\n        add(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Set storage item, bytes32 _oldValue, bytes32 _newValue) internal {\r\n        set(self, item, SET_IDENTIFIER, _oldValue, _newValue);\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.Set storage item, bytes32 _salt, bytes32 _oldValue, bytes32 _newValue) private {\r\n        if (!includes(self, item, _salt, _oldValue)) {\r\n            return;\r\n        }\r\n        uint index = uint(get(self, item.indexes, _salt, _oldValue));\r\n        set(self, item.values, _salt, bytes32(index), _newValue);\r\n        set(self, item.indexes, _salt, _newValue, bytes32(index));\r\n        set(self, item.indexes, _salt, _oldValue, bytes32(0));\r\n    }\r\n\r\n    function set(StorageInterface.Config storage self, StorageInterface.AddressesSet storage item, address _oldValue, address _newValue) internal {\r\n        set(self, item.innerSet, bytes32(_oldValue), bytes32(_newValue));\r\n    }\r\n\r\n    /** `remove` operation */\r\n\r\n    function remove(StorageInterface.Config storage self, StorageInterface.Set storage item, bytes32 _value) internal {\r\n        remove(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function remove(StorageInterface.Config storage self, StorageInterface.Set storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (!includes(self, item, _salt, _value)) {\r\n            return;\r\n        }\r\n        uint lastIndex = count(self, item, _salt);\r\n        bytes32 lastValue = get(self, item.values, _salt, bytes32(lastIndex));\r\n        uint index = uint(get(self, item.indexes, _salt, _value));\r\n        if (index < lastIndex) {\r\n            set(self, item.indexes, _salt, lastValue, bytes32(index));\r\n            set(self, item.values, _salt, bytes32(index), lastValue);\r\n        }\r\n        set(self, item.indexes, _salt, _value, bytes32(0));\r\n        set(self, item.values, _salt, bytes32(lastIndex), bytes32(0));\r\n        set(self, item.count, _salt, lastIndex - 1);\r\n    }\r\n\r\n    function remove(StorageInterface.Config storage self, StorageInterface.AddressesSet storage item, address _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(StorageInterface.Config storage self, StorageInterface.CounterSet storage item, uint _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, bytes32 _value) internal {\r\n        remove(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function remove(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, bytes32 _salt, bytes32 _value) private {\r\n        if (!includes(self, item, _salt, _value)) { return; }\r\n\r\n        _setOrderedSetLink(self, item.nextValues, _salt, get(self, item.previousValues, _salt, _value), get(self, item.nextValues, _salt, _value));\r\n        _setOrderedSetLink(self, item.previousValues, _salt, get(self, item.nextValues, _salt, _value), get(self, item.previousValues, _salt, _value));\r\n\r\n        if (_value == get(self, item.first, _salt)) {\r\n            set(self, item.first, _salt, get(self, item.nextValues, _salt, _value));\r\n        }\r\n\r\n        if (_value == get(self, item.last, _salt)) {\r\n            set(self, item.last, _salt, get(self, item.previousValues, _salt, _value));\r\n        }\r\n\r\n        _deleteOrderedSetLink(self, item.nextValues, _salt, _value);\r\n        _deleteOrderedSetLink(self, item.previousValues, _salt, _value);\r\n\r\n        set(self, item.count, _salt, get(self, item.count, _salt) - 1);\r\n    }\r\n\r\n    function remove(StorageInterface.Config storage self, StorageInterface.OrderedUIntSet storage item, uint _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(StorageInterface.Config storage self, StorageInterface.OrderedAddressesSet storage item, address _value) internal {\r\n        remove(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function remove(StorageInterface.Config storage self, StorageInterface.Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        remove(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function remove(StorageInterface.Config storage self, StorageInterface.AddressesSetMapping storage item, bytes32 _key, address _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function remove(StorageInterface.Config storage self, StorageInterface.UIntSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function remove(StorageInterface.Config storage self, StorageInterface.Bytes32OrderedSetMapping storage item, bytes32 _key, bytes32 _value) internal {\r\n        remove(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function remove(StorageInterface.Config storage self, StorageInterface.UIntOrderedSetMapping storage item, bytes32 _key, uint _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function remove(StorageInterface.Config storage self, StorageInterface.AddressOrderedSetMapping storage item, bytes32 _key, address _value) internal {\r\n        remove(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    /** 'copy` operation */\r\n\r\n    function copy(StorageInterface.Config storage self, StorageInterface.Set storage source, StorageInterface.Set storage dest) internal {\r\n        uint _destCount = count(self, dest);\r\n        bytes32[] memory _toRemoveFromDest = new bytes32[](_destCount);\r\n        uint _idx;\r\n        uint _pointer = 0;\r\n        for (_idx = 0; _idx < _destCount; ++_idx) {\r\n            bytes32 _destValue = get(self, dest, _idx);\r\n            if (!includes(self, source, _destValue)) {\r\n                _toRemoveFromDest[_pointer++] = _destValue;\r\n            }\r\n        }\r\n\r\n        uint _sourceCount = count(self, source);\r\n        for (_idx = 0; _idx < _sourceCount; ++_idx) {\r\n            add(self, dest, get(self, source, _idx));\r\n        }\r\n\r\n        for (_idx = 0; _idx < _pointer; ++_idx) {\r\n            remove(self, dest, _toRemoveFromDest[_idx]);\r\n        }\r\n    }\r\n\r\n    function copy(StorageInterface.Config storage self, StorageInterface.AddressesSet storage source, StorageInterface.AddressesSet storage dest) internal {\r\n        copy(self, source.innerSet, dest.innerSet);\r\n    }\r\n\r\n    function copy(StorageInterface.Config storage self, StorageInterface.CounterSet storage source, StorageInterface.CounterSet storage dest) internal {\r\n        copy(self, source.innerSet, dest.innerSet);\r\n    }\r\n\r\n    /** `get` operation */\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UInt storage item) internal view returns (uint) {\r\n        return getUInt(self.crate, item.id);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UInt storage item, bytes32 salt) internal view returns (uint) {\r\n        return getUInt(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UInt8 storage item) internal view returns (uint8) {\r\n        return getUInt8(self.crate, item.id);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UInt8 storage item, bytes32 salt) internal view returns (uint8) {\r\n        return getUInt8(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Int storage item) internal view returns (int) {\r\n        return getInt(self.crate, item.id);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Int storage item, bytes32 salt) internal view returns (int) {\r\n        return getInt(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Address storage item) internal view returns (address) {\r\n        return getAddress(self.crate, item.id);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Address storage item, bytes32 salt) internal view returns (address) {\r\n        return getAddress(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Bool storage item) internal view returns (bool) {\r\n        return getBool(self.crate, item.id);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Bool storage item, bytes32 salt) internal view returns (bool) {\r\n        return getBool(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Bytes32 storage item) internal view returns (bytes32) {\r\n        return getBytes32(self.crate, item.id);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Bytes32 storage item, bytes32 salt) internal view returns (bytes32) {\r\n        return getBytes32(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.String storage item) internal view returns (string) {\r\n        return getString(self.crate, item.id);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.String storage item, bytes32 salt) internal view returns (string) {\r\n        return getString(self.crate, keccak256(abi.encodePacked(item.id, salt)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Mapping storage item, uint _key) internal view returns (uint) {\r\n        return getUInt(self.crate, keccak256(abi.encodePacked(item.id, _key)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Mapping storage item, bytes32 _key) internal view returns (bytes32) {\r\n        return getBytes32(self.crate, keccak256(abi.encodePacked(item.id, _key)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.StringMapping storage item, bytes32 _key) internal view returns (string) {\r\n        return get(self, item.id, _key);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressUInt8Mapping storage item, bytes32 _key) internal view returns (address, uint8) {\r\n        return getAddressUInt8(self.crate, keccak256(abi.encodePacked(item.id, _key)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Mapping storage item, bytes32 _key, bytes32 _key2) internal view returns (bytes32) {\r\n        return get(self, item, keccak256(abi.encodePacked(_key, _key2)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Mapping storage item, bytes32 _key, bytes32 _key2, bytes32 _key3) internal view returns (bytes32) {\r\n        return get(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Bool storage item, bytes32 _key, bytes32 _key2, bytes32 _key3) internal view returns (bool) {\r\n        return get(self, item, keccak256(abi.encodePacked(_key, _key2, _key3)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UIntBoolMapping storage item, uint _key) internal view returns (bool) {\r\n        return get(self, item.innerMapping, bytes32(_key));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UIntEnumMapping storage item, uint _key) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UIntUIntMapping storage item, uint _key) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UIntAddressMapping storage item, uint _key) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Bytes32UIntMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Bytes32AddressMapping storage item, bytes32 _key) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Bytes32UInt8Mapping storage item, bytes32 _key) internal view returns (uint8) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Bytes32BoolMapping storage item, bytes32 _key) internal view returns (bool) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Bytes32Bytes32Mapping storage item, bytes32 _key) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Bytes32UIntBoolMapping storage item, bytes32 _key, uint _key2) internal view returns (bool) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UIntBytes32Mapping storage item, uint _key) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressUIntMapping storage item, address _key) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressBoolMapping storage item, address _key) internal view returns (bool) {\r\n        return toBool(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressAddressMapping storage item, address _key) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressBytes32Mapping storage item, address _key) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UIntUIntBytes32Mapping storage item, uint _key, uint _key2) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UIntUIntAddressMapping storage item, uint _key, uint _key2) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UIntUIntUIntMapping storage item, uint _key, uint _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Bytes32UIntUIntMapping storage item, bytes32 _key, uint _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key, bytes32(_key2)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Bytes32UIntUIntUIntMapping storage item, bytes32 _key, uint _key2, uint _key3) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key, bytes32(_key2), bytes32(_key3)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressAddressUIntMapping storage item, address _key, address _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressAddressUInt8Mapping storage item, address _key, address _key2) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressUIntUIntMapping storage item, address _key, uint _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressUIntUInt8Mapping storage item, address _key, uint _key2) internal view returns (uint) {\r\n        return uint8(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressBytes32Bytes32Mapping storage item, address _key, bytes32 _key2) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), _key2);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressBytes4BoolMapping storage item, address _key, bytes4 _key2) internal view returns (bool) {\r\n        return toBool(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressBytes4Bytes32Mapping storage item, address _key, bytes4 _key2) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UIntAddressUIntMapping storage item, uint _key, address _key2) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UIntAddressBoolMapping storage item, uint _key, address _key2) internal view returns (bool) {\r\n        return toBool(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UIntAddressAddressMapping storage item, uint _key, address _key2) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UIntAddressAddressBoolMapping storage item, uint _key, address _key2, address _key3) internal view returns (bool) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UIntUIntUIntBytes32Mapping storage item, uint _key, uint _key2, uint _key3) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressUIntUIntUIntMapping storage item, address _key, uint _key2, uint _key3) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressUIntStructAddressUInt8Mapping storage item, address _key, uint _key2) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, uint _key4) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressUIntUIntUIntUIntStructAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, uint _key4, uint _key5) internal view returns (address, uint8) {\r\n        return get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5)));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressUIntAddressUInt8Mapping storage item, address _key, uint _key2, address _key3) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3))));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, address _key4) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4))));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressUIntUIntUIntAddressUInt8Mapping storage item, address _key, uint _key2, uint _key3, uint _key4, address _key5) internal view returns (uint8) {\r\n        return uint8(get(self, item.innerMapping, keccak256(abi.encodePacked(_key, _key2, _key3, _key4, _key5))));\r\n    }\r\n\r\n    /** `includes` operation */\r\n\r\n    function includes(StorageInterface.Config storage self, StorageInterface.Set storage item, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function includes(StorageInterface.Config storage self, StorageInterface.Set storage item, bytes32 _salt, bytes32 _value) internal view returns (bool) {\r\n        return get(self, item.indexes, _salt, _value) != 0;\r\n    }\r\n\r\n    function includes(StorageInterface.Config storage self, StorageInterface.AddressesSet storage item, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(StorageInterface.Config storage self, StorageInterface.CounterSet storage item, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function includes(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, bytes32 _salt, bytes32 _value) private view returns (bool) {\r\n        return _value != 0x0 && (get(self, item.nextValues, _salt, _value) != 0x0 || get(self, item.last, _salt) == _value);\r\n    }\r\n\r\n    function includes(StorageInterface.Config storage self, StorageInterface.OrderedUIntSet storage item, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(StorageInterface.Config storage self, StorageInterface.OrderedAddressesSet storage item, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function includes(StorageInterface.Config storage self, StorageInterface.Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function includes(StorageInterface.Config storage self, StorageInterface.AddressesSetMapping storage item, bytes32 _key, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function includes(StorageInterface.Config storage self, StorageInterface.UIntSetMapping storage item, bytes32 _key, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function includes(StorageInterface.Config storage self, StorageInterface.Bytes32OrderedSetMapping storage item, bytes32 _key, bytes32 _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function includes(StorageInterface.Config storage self, StorageInterface.UIntOrderedSetMapping storage item, bytes32 _key, uint _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function includes(StorageInterface.Config storage self, StorageInterface.AddressOrderedSetMapping storage item, bytes32 _key, address _value) internal view returns (bool) {\r\n        return includes(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(StorageInterface.Config storage self, StorageInterface.Set storage item, bytes32 _value) internal view returns (uint) {\r\n        return getIndex(self, item, SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function getIndex(StorageInterface.Config storage self, StorageInterface.Set storage item, bytes32 _salt, bytes32 _value) private view returns (uint) {\r\n        return uint(get(self, item.indexes, _salt, _value));\r\n    }\r\n\r\n    function getIndex(StorageInterface.Config storage self, StorageInterface.AddressesSet storage item, address _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(StorageInterface.Config storage self, StorageInterface.CounterSet storage item, uint _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerSet, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(StorageInterface.Config storage self, StorageInterface.Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerMapping, _key, _value);\r\n    }\r\n\r\n    function getIndex(StorageInterface.Config storage self, StorageInterface.AddressesSetMapping storage item, bytes32 _key, address _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    function getIndex(StorageInterface.Config storage self, StorageInterface.UIntSetMapping storage item, bytes32 _key, uint _value) internal view returns (uint) {\r\n        return getIndex(self, item.innerMapping, _key, bytes32(_value));\r\n    }\r\n\r\n    /** `count` operation */\r\n\r\n    function count(StorageInterface.Config storage self, StorageInterface.Set storage item) internal view returns (uint) {\r\n        return count(self, item, SET_IDENTIFIER);\r\n    }\r\n\r\n    function count(StorageInterface.Config storage self, StorageInterface.Set storage item, bytes32 _salt) internal view returns (uint) {\r\n        return get(self, item.count, _salt);\r\n    }\r\n\r\n    function count(StorageInterface.Config storage self, StorageInterface.AddressesSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(StorageInterface.Config storage self, StorageInterface.CounterSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item) internal view returns (uint) {\r\n        return count(self, item, ORDERED_SET_IDENTIFIER);\r\n    }\r\n\r\n    function count(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, bytes32 _salt) private view returns (uint) {\r\n        return get(self, item.count, _salt);\r\n    }\r\n\r\n    function count(StorageInterface.Config storage self, StorageInterface.OrderedUIntSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(StorageInterface.Config storage self, StorageInterface.OrderedAddressesSet storage item) internal view returns (uint) {\r\n        return count(self, item.innerSet);\r\n    }\r\n\r\n    function count(StorageInterface.Config storage self, StorageInterface.Bytes32SetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(StorageInterface.Config storage self, StorageInterface.AddressesSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(StorageInterface.Config storage self, StorageInterface.UIntSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(StorageInterface.Config storage self, StorageInterface.Bytes32OrderedSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(StorageInterface.Config storage self, StorageInterface.UIntOrderedSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function count(StorageInterface.Config storage self, StorageInterface.AddressOrderedSetMapping storage item, bytes32 _key) internal view returns (uint) {\r\n        return count(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Set storage item) internal view returns (bytes32[] result) {\r\n        result = get(self, item, SET_IDENTIFIER);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Set storage item, bytes32 _salt) private view returns (bytes32[] result) {\r\n        uint valuesCount = count(self, item, _salt);\r\n        result = new bytes32[](valuesCount);\r\n        for (uint i = 0; i < valuesCount; i++) {\r\n            result[i] = get(self, item, _salt, i);\r\n        }\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressesSet storage item) internal view returns (address[]) {\r\n        return toAddresses(get(self, item.innerSet));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.CounterSet storage item) internal view returns (uint[]) {\r\n        return toUInt(get(self, item.innerSet));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Bytes32SetMapping storage item, bytes32 _key) internal view returns (bytes32[]) {\r\n        return get(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressesSetMapping storage item, bytes32 _key) internal view returns (address[]) {\r\n        return toAddresses(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UIntSetMapping storage item, bytes32 _key) internal view returns (uint[]) {\r\n        return toUInt(get(self, item.innerMapping, _key));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Set storage item, uint _index) internal view returns (bytes32) {\r\n        return get(self, item, SET_IDENTIFIER, _index);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Set storage item, bytes32 _salt, uint _index) private view returns (bytes32) {\r\n        return get(self, item.values, _salt, bytes32(_index+1));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressesSet storage item, uint _index) internal view returns (address) {\r\n        return address(get(self, item.innerSet, _index));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.CounterSet storage item, uint _index) internal view returns (uint) {\r\n        return uint(get(self, item.innerSet, _index));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.Bytes32SetMapping storage item, bytes32 _key, uint _index) internal view returns (bytes32) {\r\n        return get(self, item.innerMapping, _key, _index);\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.AddressesSetMapping storage item, bytes32 _key, uint _index) internal view returns (address) {\r\n        return address(get(self, item.innerMapping, _key, _index));\r\n    }\r\n\r\n    function get(StorageInterface.Config storage self, StorageInterface.UIntSetMapping storage item, bytes32 _key, uint _index) internal view returns (uint) {\r\n        return uint(get(self, item.innerMapping, _key, _index));\r\n    }\r\n\r\n    function getNextValue(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, bytes32 _value) internal view returns (bytes32) {\r\n        return getNextValue(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function getNextValue(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, bytes32 _salt, bytes32 _value) private view returns (bytes32) {\r\n        return get(self, item.nextValues, _salt, _value);\r\n    }\r\n\r\n    function getNextValue(StorageInterface.Config storage self, StorageInterface.OrderedUIntSet storage item, uint _value) internal view returns (uint) {\r\n        return uint(getNextValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function getNextValue(StorageInterface.Config storage self, StorageInterface.OrderedAddressesSet storage item, address _value) internal view returns (address) {\r\n        return address(getNextValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function getPreviousValue(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, bytes32 _value) internal view returns (bytes32) {\r\n        return getPreviousValue(self, item, ORDERED_SET_IDENTIFIER, _value);\r\n    }\r\n\r\n    function getPreviousValue(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, bytes32 _salt, bytes32 _value) private view returns (bytes32) {\r\n        return get(self, item.previousValues, _salt, _value);\r\n    }\r\n\r\n    function getPreviousValue(StorageInterface.Config storage self, StorageInterface.OrderedUIntSet storage item, uint _value) internal view returns (uint) {\r\n        return uint(getPreviousValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function getPreviousValue(StorageInterface.Config storage self, StorageInterface.OrderedAddressesSet storage item, address _value) internal view returns (address) {\r\n        return address(getPreviousValue(self, item.innerSet, bytes32(_value)));\r\n    }\r\n\r\n    function toBool(bytes32 self) internal pure returns (bool) {\r\n        return self != bytes32(0);\r\n    }\r\n\r\n    function toBytes32(bool self) internal pure returns (bytes32) {\r\n        return bytes32(self ? 1 : 0);\r\n    }\r\n\r\n    function toAddresses(bytes32[] memory self) internal pure returns (address[]) {\r\n        address[] memory result = new address[](self.length);\r\n        for (uint i = 0; i < self.length; i++) {\r\n            result[i] = address(self[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function toUInt(bytes32[] memory self) internal pure returns (uint[]) {\r\n        uint[] memory result = new uint[](self.length);\r\n        for (uint i = 0; i < self.length; i++) {\r\n            result[i] = uint(self[i]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function _setOrderedSetLink(StorageInterface.Config storage self, StorageInterface.Mapping storage link, bytes32 _salt, bytes32 from, bytes32 to) private {\r\n        if (from != 0x0) {\r\n            set(self, link, _salt, from, to);\r\n        }\r\n    }\r\n\r\n    function _deleteOrderedSetLink(StorageInterface.Config storage self, StorageInterface.Mapping storage link, bytes32 _salt, bytes32 from) private {\r\n        if (from != 0x0) {\r\n            set(self, link, _salt, from, 0x0);\r\n        }\r\n    }\r\n\r\n    /* ITERABLE */\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, bytes32 anchorKey, bytes32 startValue, uint limit) internal view returns (StorageInterface.Iterator) {\r\n        if (startValue == 0x0) {\r\n            return listIterator(self, item, anchorKey, limit);\r\n        }\r\n\r\n        return createIterator(anchorKey, startValue, limit);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.OrderedUIntSet storage item, bytes32 anchorKey, uint startValue, uint limit) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, bytes32(startValue), limit);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.OrderedAddressesSet storage item, bytes32 anchorKey, address startValue, uint limit) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, bytes32(startValue), limit);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, uint limit) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item, ORDERED_SET_IDENTIFIER, limit);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, bytes32 anchorKey, uint limit) internal view returns (StorageInterface.Iterator) {\r\n        return createIterator(anchorKey, get(self, item.first, anchorKey), limit);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.OrderedUIntSet storage item, uint limit) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item.innerSet, limit);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.OrderedUIntSet storage item, bytes32 anchorKey, uint limit) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, limit);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.OrderedAddressesSet storage item, uint limit) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item.innerSet, limit);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.OrderedAddressesSet storage item, uint limit, bytes32 anchorKey) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey, limit);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item, ORDERED_SET_IDENTIFIER);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, bytes32 anchorKey) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item, anchorKey, get(self, item.count, anchorKey));\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.OrderedUIntSet storage item) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item.innerSet);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.OrderedUIntSet storage item, bytes32 anchorKey) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.OrderedAddressesSet storage item) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item.innerSet);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.OrderedAddressesSet storage item, bytes32 anchorKey) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item.innerSet, anchorKey);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.Bytes32OrderedSetMapping storage item, bytes32 _key) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.UIntOrderedSetMapping storage item, bytes32 _key) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function listIterator(StorageInterface.Config storage self, StorageInterface.AddressOrderedSetMapping storage item, bytes32 _key) internal view returns (StorageInterface.Iterator) {\r\n        return listIterator(self, item.innerMapping, _key);\r\n    }\r\n\r\n    function createIterator(bytes32 anchorKey, bytes32 startValue, uint limit) internal pure returns (StorageInterface.Iterator) {\r\n        return StorageInterface.Iterator({\r\n            currentValue: startValue,\r\n            limit: limit,\r\n            valuesLeft: limit,\r\n            anchorKey: anchorKey\r\n        });\r\n    }\r\n\r\n    function getNextWithIterator(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, StorageInterface.Iterator iterator) internal view returns (bytes32 _nextValue) {\r\n        if (!canGetNextWithIterator(self, item, iterator)) { revert(); }\r\n\r\n        _nextValue = iterator.currentValue;\r\n\r\n        iterator.currentValue = getNextValue(self, item, iterator.anchorKey, iterator.currentValue);\r\n        iterator.valuesLeft -= 1;\r\n    }\r\n\r\n    function getNextWithIterator(StorageInterface.Config storage self, StorageInterface.OrderedUIntSet storage item, StorageInterface.Iterator iterator) internal view returns (uint _nextValue) {\r\n        return uint(getNextWithIterator(self, item.innerSet, iterator));\r\n    }\r\n\r\n    function getNextWithIterator(StorageInterface.Config storage self, StorageInterface.OrderedAddressesSet storage item, StorageInterface.Iterator iterator) internal view returns (address _nextValue) {\r\n        return address(getNextWithIterator(self, item.innerSet, iterator));\r\n    }\r\n\r\n    function getNextWithIterator(StorageInterface.Config storage self, StorageInterface.Bytes32OrderedSetMapping storage item, StorageInterface.Iterator iterator) internal view returns (bytes32 _nextValue) {\r\n        return getNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function getNextWithIterator(StorageInterface.Config storage self, StorageInterface.UIntOrderedSetMapping storage item, StorageInterface.Iterator iterator) internal view returns (uint _nextValue) {\r\n        return uint(getNextWithIterator(self, item.innerMapping, iterator));\r\n    }\r\n\r\n    function getNextWithIterator(StorageInterface.Config storage self, StorageInterface.AddressOrderedSetMapping storage item, StorageInterface.Iterator iterator) internal view returns (address _nextValue) {\r\n        return address(getNextWithIterator(self, item.innerMapping, iterator));\r\n    }\r\n\r\n    function canGetNextWithIterator(StorageInterface.Config storage self, StorageInterface.OrderedSet storage item, StorageInterface.Iterator iterator) internal view returns (bool) {\r\n        if (iterator.valuesLeft == 0 || !includes(self, item, iterator.anchorKey, iterator.currentValue)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function canGetNextWithIterator(StorageInterface.Config storage self, StorageInterface.OrderedUIntSet storage item, StorageInterface.Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerSet, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(StorageInterface.Config storage self, StorageInterface.OrderedAddressesSet storage item, StorageInterface.Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerSet, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(StorageInterface.Config storage self, StorageInterface.Bytes32OrderedSetMapping storage item, StorageInterface.Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(StorageInterface.Config storage self, StorageInterface.UIntOrderedSetMapping storage item, StorageInterface.Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function canGetNextWithIterator(StorageInterface.Config storage self, StorageInterface.AddressOrderedSetMapping storage item, StorageInterface.Iterator iterator) internal view returns (bool) {\r\n        return canGetNextWithIterator(self, item.innerMapping, iterator);\r\n    }\r\n\r\n    function count(StorageInterface.Iterator iterator) internal pure returns (uint) {\r\n        return iterator.valuesLeft;\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-eventshistory-lib/contracts/EventsHistorySourceAdapter.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title EventsHistory Source Adapter.\r\n */\r\ncontract EventsHistorySourceAdapter {\r\n\r\n    // It is address of MultiEventsHistory caller assuming we are inside of delegate call.\r\n    function _self()\r\n    internal\r\n    view\r\n    returns (address)\r\n    {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-eventshistory-lib/contracts/MultiEventsHistoryAdapter.sol\r\n\r\n/**\r\n* Copyright 2017–2018, LaborX PTY\r\n* Licensed under the AGPL Version 3 license.\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n/**\r\n * @title General MultiEventsHistory user.\r\n */\r\ncontract MultiEventsHistoryAdapter is EventsHistorySourceAdapter {\r\n\r\n    address internal localEventsHistory;\r\n\r\n    event ErrorCode(address indexed self, uint errorCode);\r\n\r\n    function getEventsHistory()\r\n    public\r\n    view\r\n    returns (address)\r\n    {\r\n        address _eventsHistory = localEventsHistory;\r\n        return _eventsHistory != 0x0 ? _eventsHistory : this;\r\n    }\r\n\r\n    function emitErrorCode(uint _errorCode) public {\r\n        emit ErrorCode(_self(), _errorCode);\r\n    }\r\n\r\n    function _setEventsHistory(address _eventsHistory) internal returns (bool) {\r\n        localEventsHistory = _eventsHistory;\r\n        return true;\r\n    }\r\n    \r\n    function _emitErrorCode(uint _errorCode) internal returns (uint) {\r\n        MultiEventsHistoryAdapter(getEventsHistory()).emitErrorCode(_errorCode);\r\n        return _errorCode;\r\n    }\r\n}\r\n\r\n// File: contracts/ChronoBankPlatformEmitter.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n/// @title ChronoBank Platform Emitter.\r\n///\r\n/// Contains all the original event emitting function definitions and events.\r\n/// In case of new events needed later, additional emitters can be developed.\r\n/// All the functions is meant to be called using delegatecall.\r\ncontract ChronoBankPlatformEmitter is MultiEventsHistoryAdapter {\r\n\r\n    event Transfer(address indexed from, address indexed to, bytes32 indexed symbol, uint value, string reference);\r\n    event Issue(bytes32 indexed symbol, uint value, address indexed by);\r\n    event Revoke(bytes32 indexed symbol, uint value, address indexed by);\r\n    event RevokeExternal(bytes32 indexed symbol, uint value, address indexed by, string externalReference);\r\n    event OwnershipChange(address indexed from, address indexed to, bytes32 indexed symbol);\r\n    event Approve(address indexed from, address indexed spender, bytes32 indexed symbol, uint value);\r\n    event Recovery(address indexed from, address indexed to, address by);\r\n\r\n    function emitTransfer(address _from, address _to, bytes32 _symbol, uint _value, string _reference) public {\r\n        emit Transfer(_from, _to, _symbol, _value, _reference);\r\n    }\r\n\r\n    function emitIssue(bytes32 _symbol, uint _value, address _by) public {\r\n        emit Issue(_symbol, _value, _by);\r\n    }\r\n\r\n    function emitRevoke(bytes32 _symbol, uint _value, address _by) public {\r\n        emit Revoke(_symbol, _value, _by);\r\n    }\r\n\r\n    function emitRevokeExternal(bytes32 _symbol, uint _value, address _by, string _externalReference) public {\r\n        emit RevokeExternal(_symbol, _value, _by, _externalReference);\r\n    }\r\n\r\n    function emitOwnershipChange(address _from, address _to, bytes32 _symbol) public {\r\n        emit OwnershipChange(_from, _to, _symbol);\r\n    }\r\n\r\n    function emitApprove(address _from, address _spender, bytes32 _symbol, uint _value) public {\r\n        emit Approve(_from, _spender, _symbol, _value);\r\n    }\r\n\r\n    function emitRecovery(address _from, address _to, address _by) public {\r\n        emit Recovery(_from, _to, _by);\r\n    }\r\n}\r\n\r\n// File: @laborx/solidity-shared-lib/contracts/BaseByzantiumRouter.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/// @title Routing contract that is able to provide a way for delegating invocations with dynamic destination address.\r\ncontract BaseByzantiumRouter {\r\n\r\n    function() external payable {\r\n        address _implementation = implementation();\r\n\r\n        assembly {\r\n            let calldataMemoryOffset := mload(0x40)\r\n            mstore(0x40, add(calldataMemoryOffset, calldatasize))\r\n            calldatacopy(calldataMemoryOffset, 0x0, calldatasize)\r\n            let r := delegatecall(sub(gas, 10000), _implementation, calldataMemoryOffset, calldatasize, 0, 0)\r\n\r\n            let returndataMemoryOffset := mload(0x40)\r\n            mstore(0x40, add(returndataMemoryOffset, returndatasize))\r\n            returndatacopy(returndataMemoryOffset, 0x0, returndatasize)\r\n\r\n            switch r\r\n            case 1 {\r\n                return(returndataMemoryOffset, returndatasize)\r\n            }\r\n            default {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Returns destination address for future calls\r\n    /// @dev abstract definition. should be implemented in sibling contracts\r\n    /// @return destination address\r\n    function implementation() internal view returns (address);\r\n}\r\n\r\n// File: @laborx/solidity-storage-lib/contracts/StorageAdapter.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.23;\r\n\r\n\r\n\r\ncontract StorageAdapter {\r\n\r\n    using StorageInterface for *;\r\n\r\n    StorageInterface.Config internal store;\r\n\r\n    constructor(Storage _store, bytes32 _crate) public {\r\n        store.init(_store, _crate);\r\n    }\r\n}\r\n\r\n// File: contracts/ChronoBankPlatformInterface.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n\r\ncontract ChronoBankPlatformInterface is ChronoBankPlatformEmitter {\r\n    mapping(bytes32 => address) public proxies;\r\n\r\n    function symbols(uint _idx) public view returns (bytes32);\r\n    function symbolsCount() public view returns (uint);\r\n    function isCreated(bytes32 _symbol) public view returns(bool);\r\n    function isOwner(address _owner, bytes32 _symbol) public view returns(bool);\r\n    function owner(bytes32 _symbol) public view returns(address);\r\n\r\n    function setProxy(address _address, bytes32 _symbol) public returns(uint errorCode);\r\n\r\n    function name(bytes32 _symbol) public view returns(string);\r\n\r\n    function totalSupply(bytes32 _symbol) public view returns(uint);\r\n    function balanceOf(address _holder, bytes32 _symbol) public view returns(uint);\r\n    function allowance(address _from, address _spender, bytes32 _symbol) public view returns(uint);\r\n    function baseUnit(bytes32 _symbol) public view returns(uint8);\r\n    function description(bytes32 _symbol) public view returns(string);\r\n    function isReissuable(bytes32 _symbol) public view returns(bool);\r\n    function blockNumber(bytes32 _symbol) public view returns (uint);\r\n\r\n    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns(uint errorCode);\r\n    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns(uint errorCode);\r\n\r\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) public returns(uint errorCode);\r\n\r\n    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable, uint _blockNumber) public returns(uint errorCode);\r\n    function issueAssetWithInitialReceiver(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable, uint _blockNumber, address _account) public returns(uint errorCode);\r\n\r\n    function reissueAsset(bytes32 _symbol, uint _value) public returns(uint errorCode);\r\n    function reissueAssetToRecepient(bytes32 _symbol, uint _value, address _to) public returns (uint);\r\n\r\n    function revokeAsset(bytes32 _symbol, uint _value) public returns(uint errorCode);\r\n    function revokeAssetWithExternalReference(bytes32 _symbol, uint _value, string _externalReference) public returns (uint);\r\n\r\n    function hasAssetRights(address _owner, bytes32 _symbol) public view returns (bool);\r\n    function isDesignatedAssetManager(address _account, bytes32 _symbol) public view returns (bool);\r\n    function changeOwnership(bytes32 _symbol, address _newOwner) public returns(uint errorCode);\r\n}\r\n\r\n// File: contracts/ChronoBankPlatformBackendProvider.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\ncontract ChronoBankPlatformBackendProvider is Owned {\r\n\r\n    ChronoBankPlatformInterface public platformBackend;\r\n\r\n    constructor(ChronoBankPlatformInterface _platformBackend) public {\r\n        updatePlatformBackend(_platformBackend);\r\n    }\r\n\r\n    function updatePlatformBackend(ChronoBankPlatformInterface _updatedPlatformBackend) \r\n    public\r\n    onlyContractOwner\r\n    returns (bool)\r\n    {\r\n        require(address(_updatedPlatformBackend) != 0x0, \"PLATFORM_BACKEND_PROVIDER_INVALID_PLATFORM_ADDRESS\");\r\n\r\n        platformBackend = _updatedPlatformBackend;\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/ChronoBankPlatformRouter.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ChronoBankPlatformRouterCore {\r\n    address internal platformBackendProvider;\r\n}\r\n\r\n\r\ncontract ChronoBankPlatformCore {\r\n\r\n    bytes32 constant CHRONOBANK_PLATFORM_CRATE = \"ChronoBankPlatform\";\r\n\r\n    /// @dev Asset's owner id\r\n    StorageInterface.Bytes32UIntMapping internal assetOwnerIdStorage;\r\n    /// @dev Asset's total supply\r\n    StorageInterface.Bytes32UIntMapping internal assetTotalSupply;\r\n    /// @dev Asset's name, for information purposes.\r\n    StorageInterface.StringMapping internal assetName;\r\n    /// @dev Asset's description, for information purposes.\r\n    StorageInterface.StringMapping internal assetDescription;\r\n    /// @dev Indicates if asset have dynamic or fixed supply\r\n    StorageInterface.Bytes32BoolMapping internal assetIsReissuable;\r\n    /// @dev Proposed number of decimals\r\n    StorageInterface.Bytes32UInt8Mapping internal assetBaseUnit;\r\n    /// @dev Holders wallets partowners\r\n    StorageInterface.Bytes32UIntBoolMapping internal assetPartowners;\r\n    /// @dev Holders wallets balance\r\n    StorageInterface.Bytes32UIntUIntMapping internal assetWalletBalance;\r\n    /// @dev Holders wallets allowance\r\n    StorageInterface.Bytes32UIntUIntUIntMapping internal assetWalletAllowance;\r\n    /// @dev Block number from which asset can be used\r\n    StorageInterface.Bytes32UIntMapping internal assetBlockNumber;\r\n\r\n    /// @dev Iterable mapping pattern is used for holders.\r\n    StorageInterface.UInt internal holdersCountStorage;\r\n    /// @dev Current address of the holder.\r\n    StorageInterface.UIntAddressMapping internal holdersAddressStorage;\r\n    /// @dev Addresses that are trusted with recovery proocedure.\r\n    StorageInterface.UIntAddressBoolMapping internal holdersTrustStorage;\r\n    /// @dev This is an access address mapping. Many addresses may have access to a single holder.\r\n    StorageInterface.AddressUIntMapping internal holderIndexStorage;\r\n\r\n    /// @dev List of symbols that exist in a platform\r\n    StorageInterface.Set internal symbolsStorage;\r\n\r\n    /// @dev Asset symbol to asset proxy mapping.\r\n    StorageInterface.Bytes32AddressMapping internal proxiesStorage;\r\n\r\n    /// @dev Co-owners of a platform. Has less access rights than a root contract owner\r\n    StorageInterface.AddressBoolMapping internal partownersStorage;\r\n}\r\n\r\n\r\ncontract ChronoBankPlatformRouter is\r\n    BaseByzantiumRouter,\r\n    ChronoBankPlatformRouterCore,\r\n    ChronoBankPlatformEmitter,\r\n    StorageAdapter\r\n{\r\n    /// @dev memory layout from Owned contract\r\n    address public contractOwner;\r\n\r\n    bytes32 constant CHRONOBANK_PLATFORM_CRATE = \"ChronoBankPlatform\";\r\n\r\n    constructor(address _platformBackendProvider)\r\n    StorageAdapter(Storage(address(this)), CHRONOBANK_PLATFORM_CRATE)\r\n    public\r\n    {\r\n        require(_platformBackendProvider != 0x0, \"PLATFORM_ROUTER_INVALID_BACKEND_ADDRESS\");\r\n\r\n        contractOwner = msg.sender;\r\n        platformBackendProvider = _platformBackendProvider;\r\n    }\r\n\r\n    function implementation()\r\n    internal\r\n    view\r\n    returns (address)\r\n    {\r\n        return ChronoBankPlatformBackendProvider(platformBackendProvider).platformBackend();\r\n    }\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/// @title SafeMath\r\n/// @dev Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b, \"SAFE_MATH_INVALID_MUL\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SAFE_MATH_INVALID_SUB\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SAFE_MATH_INVALID_ADD\");\r\n        return c;\r\n    }\r\n}\r\n\r\n// File: contracts/ChronoBankPlatform.sol\r\n\r\n/**\r\n * Copyright 2017–2018, LaborX PTY\r\n * Licensed under the AGPL Version 3 license.\r\n */\r\n\r\npragma solidity ^0.4.21;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ProxyEventsEmitter {\r\n    function emitTransfer(address _from, address _to, uint _value) public;\r\n    function emitApprove(address _from, address _spender, uint _value) public;\r\n}\r\n\r\n\r\n///  @title ChronoBank Platform.\r\n///\r\n///  The official ChronoBank assets platform powering TIME and LHT tokens, and possibly\r\n///  other unknown tokens needed later.\r\n///  Platform uses MultiEventsHistory contract to keep events, so that in case it needs to be redeployed\r\n///  at some point, all the events keep appearing at the same place.\r\n///\r\n///  Every asset is meant to be used through a proxy contract. Only one proxy contract have access\r\n///  rights for a particular asset.\r\n///\r\n///  Features: transfers, allowances, supply adjustments, lost wallet access recovery.\r\n///\r\n///  Note: all the non constant functions return false instead of throwing in case if state change\r\n/// didn't happen yet.\r\ncontract ChronoBankPlatform is\r\n    ChronoBankPlatformRouterCore,\r\n    ChronoBankPlatformEmitter,\r\n    StorageInterfaceContract,\r\n    ChronoBankPlatformCore\r\n{\r\n    uint constant OK = 1;\r\n\r\n    using SafeMath for uint;\r\n\r\n    uint constant CHRONOBANK_PLATFORM_SCOPE = 15000;\r\n    uint constant CHRONOBANK_PLATFORM_PROXY_ALREADY_EXISTS = CHRONOBANK_PLATFORM_SCOPE + 0;\r\n    uint constant CHRONOBANK_PLATFORM_CANNOT_APPLY_TO_ONESELF = CHRONOBANK_PLATFORM_SCOPE + 1;\r\n    uint constant CHRONOBANK_PLATFORM_INVALID_VALUE = CHRONOBANK_PLATFORM_SCOPE + 2;\r\n    uint constant CHRONOBANK_PLATFORM_INSUFFICIENT_BALANCE = CHRONOBANK_PLATFORM_SCOPE + 3;\r\n    uint constant CHRONOBANK_PLATFORM_NOT_ENOUGH_ALLOWANCE = CHRONOBANK_PLATFORM_SCOPE + 4;\r\n    uint constant CHRONOBANK_PLATFORM_ASSET_ALREADY_ISSUED = CHRONOBANK_PLATFORM_SCOPE + 5;\r\n    uint constant CHRONOBANK_PLATFORM_CANNOT_ISSUE_FIXED_ASSET_WITH_INVALID_VALUE = CHRONOBANK_PLATFORM_SCOPE + 6;\r\n    uint constant CHRONOBANK_PLATFORM_CANNOT_REISSUE_FIXED_ASSET = CHRONOBANK_PLATFORM_SCOPE + 7;\r\n    uint constant CHRONOBANK_PLATFORM_SUPPLY_OVERFLOW = CHRONOBANK_PLATFORM_SCOPE + 8;\r\n    uint constant CHRONOBANK_PLATFORM_NOT_ENOUGH_TOKENS = CHRONOBANK_PLATFORM_SCOPE + 9;\r\n    uint constant CHRONOBANK_PLATFORM_INVALID_NEW_OWNER = CHRONOBANK_PLATFORM_SCOPE + 10;\r\n    uint constant CHRONOBANK_PLATFORM_ALREADY_TRUSTED = CHRONOBANK_PLATFORM_SCOPE + 11;\r\n    uint constant CHRONOBANK_PLATFORM_SHOULD_RECOVER_TO_NEW_ADDRESS = CHRONOBANK_PLATFORM_SCOPE + 12;\r\n    uint constant CHRONOBANK_PLATFORM_ASSET_IS_NOT_ISSUED = CHRONOBANK_PLATFORM_SCOPE + 13;\r\n    uint constant CHRONOBANK_PLATFORM_INVALID_INVOCATION = CHRONOBANK_PLATFORM_SCOPE + 17;\r\n\r\n    string public version = \"0.2.0\";\r\n\r\n    struct TransactionContext {\r\n        address from;\r\n        address to;\r\n        address sender;\r\n        uint fromHolderId;\r\n        uint toHolderId;\r\n        uint senderHolderId;\r\n        uint balanceFrom;\r\n        uint balanceTo;\r\n        uint allowanceValue;\r\n    }\r\n\r\n    /// @dev Emits Error if called not by asset owner.\r\n    modifier onlyOwner(bytes32 _symbol) {\r\n        if (isOwner(msg.sender, _symbol)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    modifier onlyDesignatedManager(bytes32 _symbol) {\r\n        if (isDesignatedAssetManager(msg.sender, _symbol)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /// @dev UNAUTHORIZED if called not by one of partowners or contract's owner\r\n    modifier onlyOneOfContractOwners() {\r\n        if (contractOwner == msg.sender || partowners(msg.sender)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /// @dev Emits Error if called not by asset proxy.\r\n    modifier onlyProxy(bytes32 _symbol) {\r\n        if (proxies(_symbol) == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /// @dev Emits Error if _from doesn't trust _to.\r\n    modifier checkTrust(address _from, address _to) {\r\n        if (isTrusted(_from, _to)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /// @dev Emits Error if asset block number > current block number.\r\n    modifier onlyAfterBlock(bytes32 _symbol) {\r\n        if (block.number >= blockNumber(_symbol)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    constructor() StorageContractAdapter(this, CHRONOBANK_PLATFORM_CRATE) public {\r\n    }\r\n\r\n    function initStorage()\r\n    public\r\n    {\r\n        init(partownersStorage, \"partowners\");\r\n        init(proxiesStorage, \"proxies\");\r\n        init(symbolsStorage, \"symbols\");\r\n\r\n        init(holdersCountStorage, \"holdersCount\");\r\n        init(holderIndexStorage, \"holderIndex\");\r\n        init(holdersAddressStorage, \"holdersAddress\");\r\n        init(holdersTrustStorage, \"holdersTrust\");\r\n\r\n        init(assetOwnerIdStorage, \"assetOwner\");\r\n        init(assetTotalSupply, \"assetTotalSupply\");\r\n        init(assetName, \"assetName\");\r\n        init(assetDescription, \"assetDescription\");\r\n        init(assetIsReissuable, \"assetIsReissuable\");\r\n        init(assetBlockNumber, \"assetBlockNumber\");\r\n        init(assetBaseUnit, \"assetBaseUnit\");\r\n        init(assetPartowners, \"assetPartowners\");\r\n        init(assetWalletBalance, \"assetWalletBalance\");\r\n        init(assetWalletAllowance, \"assetWalletAllowance\");\r\n    }\r\n\r\n    /// @dev Asset symbol to asset details.\r\n    /// @return {\r\n    ///     \"_description\": \"will be null, since cannot store and return dynamic-sized types in storage (fixed in v0.4.24),\r\n    /// }\r\n    function assets(bytes32 _symbol) public view returns (\r\n        uint _owner,\r\n        uint _totalSupply,\r\n        string _name,\r\n        string _description,\r\n        bool _isReissuable,\r\n        uint8 _baseUnit,\r\n        uint _blockNumber\r\n    ) {\r\n        _owner = _assetOwner(_symbol);\r\n        _totalSupply = totalSupply(_symbol);\r\n        _name = name(_symbol);\r\n        _description = description(_symbol);\r\n        _isReissuable = isReissuable(_symbol);\r\n        _baseUnit = baseUnit(_symbol);\r\n        _blockNumber = blockNumber(_symbol);\r\n    }\r\n\r\n    function holdersCount() public view returns (uint) {\r\n        return get(store, holdersCountStorage);\r\n    }\r\n\r\n    function holders(uint _holderId) public view returns (address) {\r\n        return get(store, holdersAddressStorage, _holderId);\r\n    }\r\n\r\n    function symbols(uint _idx) public view returns (bytes32) {\r\n        return get(store, symbolsStorage, _idx);\r\n    }\r\n\r\n    /// @notice Provides a cheap way to get number of symbols registered in a platform\r\n    /// @return number of symbols\r\n    function symbolsCount() public view returns (uint) {\r\n        return count(store, symbolsStorage);\r\n    }\r\n\r\n    function proxies(bytes32 _symbol) public view returns (address) {\r\n        return get(store, proxiesStorage, _symbol);\r\n    }\r\n\r\n    function partowners(address _address) public view returns (bool) {\r\n        return get(store, partownersStorage, _address);\r\n    }\r\n\r\n    /// @notice Adds a co-owner of a contract. Might be more than one co-owner\r\n    /// @dev Allowed to only contract onwer\r\n    /// @param _partowner a co-owner of a contract\r\n    /// @return result code of an operation\r\n    function addPartOwner(address _partowner)\r\n    public\r\n    onlyContractOwner\r\n    returns (uint)\r\n    {\r\n        set(store, partownersStorage, _partowner, true);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Removes a co-owner of a contract\r\n    /// @dev Should be performed only by root contract owner\r\n    /// @param _partowner a co-owner of a contract\r\n    /// @return result code of an operation\r\n    function removePartOwner(address _partowner)\r\n    public\r\n    onlyContractOwner\r\n    returns (uint)\r\n    {\r\n        set(store, partownersStorage, _partowner, false);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Sets EventsHistory contract address.\r\n    /// @dev Can be set only by owner.\r\n    /// @param _eventsHistory MultiEventsHistory contract address.\r\n    /// @return success.\r\n    function setupEventsHistory(address _eventsHistory)\r\n    public\r\n    onlyContractOwner\r\n    returns (uint errorCode)\r\n    {\r\n        _setEventsHistory(_eventsHistory);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Check asset existance.\r\n    /// @param _symbol asset symbol.\r\n    /// @return asset existance.\r\n    function isCreated(bytes32 _symbol) public view returns (bool) {\r\n        return _assetOwner(_symbol) != 0;\r\n    }\r\n\r\n    /// @notice Returns asset decimals.\r\n    /// @param _symbol asset symbol.\r\n    /// @return asset decimals.\r\n    function baseUnit(bytes32 _symbol) public view returns (uint8) {\r\n        return get(store, assetBaseUnit, _symbol);\r\n    }\r\n\r\n    /// @notice Returns asset name.\r\n    /// @param _symbol asset symbol.\r\n    /// @return asset name.\r\n    function name(bytes32 _symbol) public view returns (string) {\r\n        return get(store, assetName, _symbol);\r\n    }\r\n\r\n    /// @notice Returns asset description.\r\n    /// @param _symbol asset symbol.\r\n    /// @return asset description.\r\n    function description(bytes32 _symbol) public view returns (string) {\r\n        return get(store, assetDescription, _symbol);\r\n    }\r\n\r\n    /// @notice Returns asset reissuability.\r\n    /// @param _symbol asset symbol.\r\n    /// @return asset reissuability.\r\n    function isReissuable(bytes32 _symbol) public view returns (bool) {\r\n        return get(store, assetIsReissuable, _symbol);\r\n    }\r\n\r\n    /// @notice Returns block number from which asset can be used.\r\n    /// @param _symbol asset symbol.\r\n    /// @return block number.\r\n    function blockNumber(bytes32 _symbol) public view returns (uint) {\r\n        return get(store, assetBlockNumber, _symbol);\r\n    }\r\n\r\n    /// @notice Returns asset owner address.\r\n    /// @param _symbol asset symbol.\r\n    /// @return asset owner address.\r\n    function owner(bytes32 _symbol) public view returns (address) {\r\n        return _address(_assetOwner(_symbol));\r\n    }\r\n\r\n    /// @notice Check if specified address has asset owner rights.\r\n    /// @param _owner address to check.\r\n    /// @param _symbol asset symbol.\r\n    /// @return owner rights availability.\r\n    function isOwner(address _owner, bytes32 _symbol) public view returns (bool) {\r\n        return isCreated(_symbol) && (_assetOwner(_symbol) == getHolderId(_owner));\r\n    }\r\n\r\n    /// @notice Checks if a specified address has asset owner or co-owner rights.\r\n    /// @param _owner address to check.\r\n    /// @param _symbol asset symbol.\r\n    /// @return owner rights availability.\r\n    function hasAssetRights(address _owner, bytes32 _symbol) public view returns (bool) {\r\n        uint holderId = getHolderId(_owner);\r\n        return isCreated(_symbol) && (_assetOwner(_symbol) == holderId || get(store, assetPartowners, _symbol, holderId));\r\n    }\r\n\r\n    /// @notice Checks if a provided address `_manager` has designated access to asset `_symbol`.\r\n    /// @param _manager address that will become the asset manager\r\n    /// @param _symbol asset symbol\r\n    /// @return true if address is one of designated asset managers, false otherwise\r\n    function isDesignatedAssetManager(address _manager, bytes32 _symbol) public view returns (bool) {\r\n        uint managerId = getHolderId(_manager);\r\n        return isCreated(_symbol) && get(store, assetPartowners, _symbol, managerId);\r\n    }\r\n\r\n    /// @notice Returns asset total supply.\r\n    /// @param _symbol asset symbol.\r\n    /// @return asset total supply.\r\n    function totalSupply(bytes32 _symbol) public view returns (uint) {\r\n        return get(store, assetTotalSupply, _symbol);\r\n    }\r\n\r\n    /// @notice Returns asset balance for a particular holder.\r\n    /// @param _holder holder address.\r\n    /// @param _symbol asset symbol.\r\n    /// @return holder balance.\r\n    function balanceOf(address _holder, bytes32 _symbol) public view returns (uint) {\r\n        return _balanceOf(getHolderId(_holder), _symbol);\r\n    }\r\n\r\n    /// @notice Returns asset balance for a particular holder id.\r\n    /// @param _holderId holder id.\r\n    /// @param _symbol asset symbol.\r\n    /// @return holder balance.\r\n    function _balanceOf(uint _holderId, bytes32 _symbol) public view returns (uint) {\r\n        return get(store, assetWalletBalance, _symbol, _holderId);\r\n    }\r\n\r\n    /// @notice Returns current address for a particular holder id.\r\n    /// @param _holderId holder id.\r\n    /// @return holder address.\r\n    function _address(uint _holderId) public view returns (address) {\r\n        return get(store, holdersAddressStorage, _holderId);\r\n    }\r\n\r\n    /// @notice Adds a asset manager for an asset with provided symbol.\r\n    /// @dev Should be performed by a platform owner or its co-owners\r\n    /// @param _symbol asset's symbol\r\n    /// @param _manager asset manager of the asset\r\n    /// @return errorCode result code of an operation\r\n    function addDesignatedAssetManager(bytes32 _symbol, address _manager)\r\n    public\r\n    onlyOneOfContractOwners\r\n    returns (uint)\r\n    {\r\n        uint holderId = _createHolderId(_manager);\r\n        set(store, assetPartowners, _symbol, holderId, true);\r\n        _emitter().emitOwnershipChange(0x0, _manager, _symbol);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Removes a asset manager for an asset with provided symbol.\r\n    /// @dev Should be performed by a platform owner or its co-owners\r\n    /// @param _symbol asset's symbol\r\n    /// @param _manager asset manager of the asset\r\n    /// @return errorCode result code of an operation\r\n    function removeDesignatedAssetManager(bytes32 _symbol, address _manager)\r\n    public\r\n    onlyOneOfContractOwners\r\n    returns (uint)\r\n    {\r\n        uint holderId = getHolderId(_manager);\r\n        set(store, assetPartowners, _symbol, holderId, false);\r\n        _emitter().emitOwnershipChange(_manager, 0x0, _symbol);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Sets Proxy contract address for a particular asset.\r\n    /// @dev Can be set only once for each asset and only by contract owner.\r\n    /// @param _proxyAddress Proxy contract address.\r\n    /// @param _symbol asset symbol.\r\n    /// @return success.\r\n    function setProxy(address _proxyAddress, bytes32 _symbol)\r\n    public\r\n    onlyOneOfContractOwners\r\n    returns (uint)\r\n    {\r\n        if (proxies(_symbol) != 0x0) {\r\n            return CHRONOBANK_PLATFORM_PROXY_ALREADY_EXISTS;\r\n        }\r\n\r\n        set(store, proxiesStorage, _symbol, _proxyAddress);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Performes asset transfer for multiple destinations\r\n    /// @param addresses list of addresses to receive some amount\r\n    /// @param values list of asset amounts for according addresses\r\n    /// @param _symbol asset symbol\r\n    /// @return {\r\n    ///     \"errorCode\": \"resultCode of an operation\",\r\n    ///     \"count\": \"an amount of succeeded transfers\"\r\n    /// }\r\n    function massTransfer(address[] addresses, uint[] values, bytes32 _symbol)\r\n    external\r\n    onlyAfterBlock(_symbol)\r\n    returns (uint errorCode, uint count)\r\n    {\r\n        require(addresses.length == values.length, \"Different length of addresses and values for mass transfer\");\r\n        require(_symbol != 0x0, \"Asset's symbol cannot be 0\");\r\n\r\n        return _massTransferDirect(addresses, values, _symbol);\r\n    }\r\n\r\n    function _massTransferDirect(address[] addresses, uint[] values, bytes32 _symbol)\r\n    private\r\n    returns (uint errorCode, uint count)\r\n    {\r\n        uint success = 0;\r\n\r\n        TransactionContext memory txContext;\r\n        txContext.from = msg.sender;\r\n        txContext.fromHolderId = _createHolderId(txContext.from);\r\n\r\n        for (uint idx = 0; idx < addresses.length && gasleft() > 110000; idx++) {\r\n            uint value = values[idx];\r\n\r\n            if (value == 0) {\r\n                _emitErrorCode(CHRONOBANK_PLATFORM_INVALID_VALUE);\r\n                continue;\r\n            }\r\n\r\n            txContext.balanceFrom = _balanceOf(txContext.fromHolderId, _symbol);\r\n\r\n            if (txContext.balanceFrom < value) {\r\n                _emitErrorCode(CHRONOBANK_PLATFORM_INSUFFICIENT_BALANCE);\r\n                continue;\r\n            }\r\n\r\n            if (txContext.from == addresses[idx]) {\r\n                _emitErrorCode(CHRONOBANK_PLATFORM_CANNOT_APPLY_TO_ONESELF);\r\n                continue;\r\n            }\r\n\r\n            txContext.toHolderId = _createHolderId(addresses[idx]);\r\n            txContext.balanceTo = _balanceOf(txContext.toHolderId, _symbol);\r\n            _transferDirect(value, _symbol, txContext);\r\n            _emitter().emitTransfer(txContext.from, addresses[idx], _symbol, value, \"\");\r\n\r\n            success++;\r\n        }\r\n\r\n        return (OK, success);\r\n    }\r\n\r\n    /// @dev Transfers asset balance between holders wallets.\r\n    /// @param _value amount to transfer.\r\n    /// @param _symbol asset symbol.\r\n    function _transferDirect(\r\n        uint _value,\r\n        bytes32 _symbol,\r\n        TransactionContext memory _txContext\r\n    )\r\n    internal\r\n    {\r\n        set(store, assetWalletBalance, _symbol, _txContext.fromHolderId, _txContext.balanceFrom.sub(_value));\r\n        set(store, assetWalletBalance, _symbol, _txContext.toHolderId, _txContext.balanceTo.add(_value));\r\n    }\r\n\r\n    /// @dev Transfers asset balance between holders wallets.\r\n    /// Performs sanity checks and takes care of allowances adjustment.\r\n    ///\r\n    /// @param _value amount to transfer.\r\n    /// @param _symbol asset symbol.\r\n    /// @param _reference transfer comment to be included in a Transfer event.\r\n    ///\r\n    /// @return success.\r\n    function _transfer(\r\n        uint _value,\r\n        bytes32 _symbol,\r\n        string _reference,\r\n        TransactionContext memory txContext\r\n    )\r\n    internal\r\n    returns (uint)\r\n    {\r\n        // Should not allow to send to oneself.\r\n        if (txContext.fromHolderId == txContext.toHolderId) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_CANNOT_APPLY_TO_ONESELF);\r\n        }\r\n\r\n        // Should have positive value.\r\n        if (_value == 0) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_INVALID_VALUE);\r\n        }\r\n\r\n        // Should have enough balance.\r\n        txContext.balanceFrom = _balanceOf(txContext.fromHolderId, _symbol);\r\n        txContext.balanceTo = _balanceOf(txContext.toHolderId, _symbol);\r\n        if (txContext.balanceFrom < _value) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_INSUFFICIENT_BALANCE);\r\n        }\r\n\r\n        // Should have enough allowance.\r\n        txContext.allowanceValue = _allowance(txContext.fromHolderId, txContext.senderHolderId, _symbol);\r\n        if (txContext.fromHolderId != txContext.senderHolderId &&\r\n            txContext.allowanceValue < _value\r\n        ) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_NOT_ENOUGH_ALLOWANCE);\r\n        }\r\n\r\n        _transferDirect(_value, _symbol, txContext);\r\n        // Adjust allowance.\r\n        _decrementWalletAllowance(_value, _symbol, txContext);\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Call Stack Depth Limit reached: n/a after HF 4;\r\n        // Recursive Call: safe, all changes already made.\r\n        _emitter().emitTransfer(txContext.from, txContext.to, _symbol, _value, _reference);\r\n        _proxyTransferEvent(_value, _symbol, txContext);\r\n        return OK;\r\n    }\r\n\r\n    function _decrementWalletAllowance(\r\n        uint _value,\r\n        bytes32 _symbol,\r\n        TransactionContext memory txContext\r\n    )\r\n    private\r\n    {\r\n        if (txContext.fromHolderId != txContext.senderHolderId) {\r\n            set(store, assetWalletAllowance, _symbol, txContext.fromHolderId, txContext.senderHolderId, txContext.allowanceValue.sub(_value));\r\n        }\r\n    }\r\n\r\n    /// @dev Transfers asset balance between holders wallets.\r\n    /// Can only be called by asset proxy.\r\n    ///\r\n    /// @param _to holder address to give to.\r\n    /// @param _value amount to transfer.\r\n    /// @param _symbol asset symbol.\r\n    /// @param _reference transfer comment to be included in a Transfer event.\r\n    /// @param _sender transfer initiator address.\r\n    ///\r\n    /// @return success.\r\n    function proxyTransferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        bytes32 _symbol,\r\n        string _reference,\r\n        address _sender\r\n    )\r\n    public\r\n    onlyProxy(_symbol)\r\n    onlyAfterBlock(_symbol)\r\n    returns (uint)\r\n    {\r\n        TransactionContext memory txContext;\r\n        txContext.sender = _sender;\r\n        txContext.to = _to;\r\n        txContext.from = _sender;\r\n        txContext.senderHolderId = getHolderId(_sender);\r\n        txContext.toHolderId = _createHolderId(_to);\r\n        txContext.fromHolderId = txContext.senderHolderId;\r\n        return _transfer(_value, _symbol, _reference, txContext);\r\n    }\r\n\r\n    /// @dev Ask asset Proxy contract to emit ERC20 compliant Transfer event.\r\n    /// @param _value amount to transfer.\r\n    /// @param _symbol asset symbol.\r\n    function _proxyTransferEvent(uint _value, bytes32 _symbol, TransactionContext memory txContext) internal {\r\n        address _proxy = proxies(_symbol);\r\n        if (_proxy != 0x0) {\r\n            // Internal Out Of Gas/Throw: revert this transaction too;\r\n            // Call Stack Depth Limit reached: n/a after HF 4;\r\n            // Recursive Call: safe, all changes already made.\r\n            ProxyEventsEmitter(_proxy).emitTransfer(txContext.from, txContext.to, _value);\r\n        }\r\n    }\r\n\r\n    /// @notice Returns holder id for the specified address.\r\n    /// @param _holder holder address.\r\n    /// @return holder id.\r\n    function getHolderId(address _holder) public view returns (uint) {\r\n        return get(store, holderIndexStorage, _holder);\r\n    }\r\n\r\n    /// @dev Returns holder id for the specified address, creates it if needed.\r\n    /// @param _holder holder address.\r\n    /// @return holder id.\r\n    function _createHolderId(address _holder) internal returns (uint) {\r\n        uint _holderId = getHolderId(_holder);\r\n        if (_holderId == 0) {\r\n            _holderId = holdersCount() + 1;\r\n            set(store, holderIndexStorage, _holder, _holderId);\r\n            set(store, holdersAddressStorage, _holderId, _holder);\r\n            set(store, holdersCountStorage, _holderId);\r\n        }\r\n\r\n        return _holderId;\r\n    }\r\n\r\n    function _assetOwner(bytes32 _symbol) internal view returns (uint) {\r\n        return get(store, assetOwnerIdStorage, _symbol);\r\n    }\r\n\r\n    function stringToBytes32(string memory source) internal pure returns (bytes32 result) {\r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n\r\n    /// @notice Issues new asset token on the platform.\r\n    ///\r\n    /// Tokens issued with this call go straight to contract owner.\r\n    /// Each symbol can be issued only once, and only by contract owner.\r\n    ///\r\n    /// @param _symbol asset symbol.\r\n    /// @param _value amount of tokens to issue immediately.\r\n    /// @param _name name of the asset.\r\n    /// @param _description description for the asset.\r\n    /// @param _baseUnit number of decimals.\r\n    /// @param _isReissuable dynamic or fixed supply.\r\n    /// @param _blockNumber block number from which asset can be used.\r\n    ///\r\n    /// @return success.\r\n    function issueAsset(\r\n        bytes32 _symbol,\r\n        uint _value,\r\n        string _name,\r\n        string _description,\r\n        uint8 _baseUnit,\r\n        bool _isReissuable,\r\n        uint _blockNumber\r\n    )\r\n    public\r\n    returns (uint)\r\n    {\r\n        return issueAssetWithInitialReceiver(_symbol, _value, _name, _description, _baseUnit, _isReissuable, _blockNumber, msg.sender);\r\n    }\r\n\r\n    /// @notice Issues new asset token on the platform.\r\n    ///\r\n    /// Tokens issued with this call go straight to contract owner.\r\n    /// Each symbol can be issued only once, and only by contract owner.\r\n    ///\r\n    /// @param _symbol asset symbol.\r\n    /// @param _value amount of tokens to issue immediately.\r\n    /// @param _name name of the asset.\r\n    /// @param _description description for the asset.\r\n    /// @param _baseUnit number of decimals.\r\n    /// @param _isReissuable dynamic or fixed supply.\r\n    /// @param _blockNumber block number from which asset can be used.\r\n    /// @param _account address where issued balance will be held\r\n    ///\r\n    /// @return success.\r\n    function issueAssetWithInitialReceiver(\r\n        bytes32 _symbol,\r\n        uint _value,\r\n        string _name,\r\n        string _description,\r\n        uint8 _baseUnit,\r\n        bool _isReissuable,\r\n        uint _blockNumber,\r\n        address _account\r\n    )\r\n    public\r\n    onlyOneOfContractOwners\r\n    returns (uint)\r\n    {\r\n        // Should have positive value if supply is going to be fixed.\r\n        if (_value == 0 && !_isReissuable) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_CANNOT_ISSUE_FIXED_ASSET_WITH_INVALID_VALUE);\r\n        }\r\n        // Should not be issued yet.\r\n        if (isCreated(_symbol)) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_ASSET_ALREADY_ISSUED);\r\n        }\r\n        uint holderId = _createHolderId(_account);\r\n        uint creatorId = _account == msg.sender ? holderId : _createHolderId(msg.sender);\r\n        add(store, symbolsStorage, _symbol);\r\n        set(store, assetOwnerIdStorage, _symbol, creatorId);\r\n        set(store, assetTotalSupply, _symbol, _value);\r\n        set(store, assetName, _symbol, _name);\r\n        set(store, assetDescription, _symbol, _description);\r\n        set(store, assetIsReissuable, _symbol, _isReissuable);\r\n        set(store, assetBaseUnit, _symbol, _baseUnit);\r\n        set(store, assetWalletBalance, _symbol, holderId, _value);\r\n        set(store, assetBlockNumber, _symbol, _blockNumber);\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Call Stack Depth Limit reached: n/a after HF 4;\r\n        // Recursive Call: safe, all changes already made.\r\n        _emitter().emitIssue(_symbol, _value, _address(holderId));\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Issues additional asset tokens if the asset have dynamic supply.\r\n    ///\r\n    /// Tokens issued with this call go straight to asset owner.\r\n    /// Can only be called by designated asset manager only.\r\n    /// Inherits all modifiers from reissueAssetToRecepient' function.\r\n    ///\r\n    /// @param _symbol asset symbol.\r\n    /// @param _value amount of additional tokens to issue.\r\n    ///\r\n    /// @return success.\r\n    function reissueAsset(bytes32 _symbol, uint _value)\r\n    public\r\n    returns (uint)\r\n    {\r\n        return reissueAssetToRecepient(_symbol, _value, msg.sender);\r\n    }\r\n\r\n    /// @notice Issues additional asset tokens `_symbol` if the asset have dynamic supply\r\n    ///     and sends them to recepient address `_to`.\r\n    ///\r\n    /// Can only be called by designated asset manager only.\r\n    ///\r\n    /// @param _symbol asset symbol.\r\n    /// @param _value amount of additional tokens to issue.\r\n    /// @param _to recepient address; instead of caller issued amount will be sent to this address\r\n    ///\r\n    /// @return success.\r\n    function reissueAssetToRecepient(bytes32 _symbol, uint _value, address _to)\r\n    public\r\n    onlyDesignatedManager(_symbol)\r\n    onlyAfterBlock(_symbol)\r\n    returns (uint)\r\n    {\r\n        return _reissueAsset(_symbol, _value, _to);\r\n    }\r\n\r\n    function _reissueAsset(bytes32 _symbol, uint _value, address _to)\r\n    private\r\n    returns (uint)\r\n    {\r\n        require(_to != 0x0, \"CHRONOBANK_PLATFORM_INVALID_RECEPIENT_ADDRESS\");\r\n\r\n        TransactionContext memory txContext;\r\n        txContext.to = _to;\r\n\r\n        // Should have positive value.\r\n        if (_value == 0) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_INVALID_VALUE);\r\n        }\r\n\r\n        // Should have dynamic supply.\r\n        if (!isReissuable(_symbol)) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_CANNOT_REISSUE_FIXED_ASSET);\r\n        }\r\n\r\n        uint _totalSupply = totalSupply(_symbol);\r\n        // Resulting total supply should not overflow.\r\n        if (_totalSupply + _value < _totalSupply) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_SUPPLY_OVERFLOW);\r\n        }\r\n\r\n        txContext.toHolderId = _createHolderId(_to);\r\n        txContext.balanceTo = _balanceOf(txContext.toHolderId, _symbol);\r\n        set(store, assetWalletBalance, _symbol, txContext.toHolderId, txContext.balanceTo.add(_value));\r\n        set(store, assetTotalSupply, _symbol, _totalSupply.add(_value));\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Call Stack Depth Limit reached: n/a after HF 4;\r\n        // Recursive Call: safe, all changes already made.\r\n        _emitter().emitIssue(_symbol, _value, _to);\r\n        _proxyTransferEvent(_value, _symbol, txContext);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Destroys specified amount of senders asset tokens.\r\n    ///\r\n    /// @param _symbol asset symbol.\r\n    /// @param _value amount of tokens to destroy.\r\n    ///\r\n    /// @return success.\r\n    function revokeAsset(bytes32 _symbol, uint _value) public returns (uint _resultCode) {\r\n        TransactionContext memory txContext;\r\n        txContext.from = msg.sender;\r\n        txContext.fromHolderId = getHolderId(txContext.from);\r\n\r\n        _resultCode = _revokeAsset(_symbol, _value, txContext);\r\n        if (_resultCode != OK) {\r\n            return _emitErrorCode(_resultCode);\r\n        }\r\n\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Call Stack Depth Limit reached: n/a after HF 4;\r\n        // Recursive Call: safe, all changes already made.\r\n        _emitter().emitRevoke(_symbol, _value, txContext.from);\r\n        _proxyTransferEvent(_value, _symbol, txContext);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Destroys specified amount of senders asset tokens.\r\n    ///\r\n    /// @param _symbol asset symbol.\r\n    /// @param _value amount of tokens to destroy.\r\n    ///\r\n    /// @return success.\r\n    function revokeAssetWithExternalReference(bytes32 _symbol, uint _value, string _externalReference) public returns (uint _resultCode) {\r\n        TransactionContext memory txContext;\r\n        txContext.from = msg.sender;\r\n        txContext.fromHolderId = getHolderId(txContext.from);\r\n\r\n        _resultCode = _revokeAsset(_symbol, _value, txContext);\r\n        if (_resultCode != OK) {\r\n            return _emitErrorCode(_resultCode);\r\n        }\r\n\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Call Stack Depth Limit reached: n/a after HF 4;\r\n        // Recursive Call: safe, all changes already made.\r\n        _emitter().emitRevokeExternal(_symbol, _value, txContext.from, _externalReference);\r\n        _proxyTransferEvent(_value, _symbol, txContext);\r\n        return OK;\r\n    }\r\n\r\n    function _revokeAsset(bytes32 _symbol, uint _value, TransactionContext memory txContext) private returns (uint) {\r\n        // Should have positive value.\r\n        if (_value == 0) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_INVALID_VALUE);\r\n        }\r\n\r\n        // Should have enough tokens.\r\n        txContext.balanceFrom = _balanceOf(txContext.fromHolderId, _symbol);\r\n        if (txContext.balanceFrom < _value) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_NOT_ENOUGH_TOKENS);\r\n        }\r\n\r\n        txContext.balanceFrom = txContext.balanceFrom.sub(_value);\r\n        set(store, assetWalletBalance, _symbol, txContext.fromHolderId, txContext.balanceFrom);\r\n        set(store, assetTotalSupply, _symbol, totalSupply(_symbol).sub(_value));\r\n\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Passes asset ownership to specified address.\r\n    ///\r\n    /// Only ownership is changed, balances are not touched.\r\n    /// Can only be called by asset owner.\r\n    ///\r\n    /// @param _symbol asset symbol.\r\n    /// @param _newOwner address to become a new owner.\r\n    ///\r\n    /// @return success.\r\n    function changeOwnership(bytes32 _symbol, address _newOwner)\r\n    public\r\n    onlyOwner(_symbol)\r\n    returns (uint)\r\n    {\r\n        if (_newOwner == 0x0) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_INVALID_NEW_OWNER);\r\n        }\r\n\r\n        uint newOwnerId = _createHolderId(_newOwner);\r\n        uint assetOwner = _assetOwner(_symbol);\r\n        // Should pass ownership to another holder.\r\n        if (assetOwner == newOwnerId) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_CANNOT_APPLY_TO_ONESELF);\r\n        }\r\n        address oldOwner = _address(assetOwner);\r\n        set(store, assetOwnerIdStorage, _symbol, newOwnerId);\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Call Stack Depth Limit reached: n/a after HF 4;\r\n        // Recursive Call: safe, all changes already made.\r\n        _emitter().emitOwnershipChange(oldOwner, _newOwner, _symbol);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Check if specified holder trusts an address with recovery procedure.\r\n    /// @param _from truster.\r\n    /// @param _to trustee.\r\n    /// @return trust existance.\r\n    function isTrusted(address _from, address _to) public view returns (bool) {\r\n        return get(store, holdersTrustStorage, getHolderId(_from), _to);\r\n    }\r\n\r\n    /// @notice Trust an address to perform recovery procedure for the caller.\r\n    /// @param _to trustee.\r\n    /// @return success.\r\n    function trust(address _to) public returns (uint) {\r\n        uint fromId = _createHolderId(msg.sender);\r\n        // Should trust to another address.\r\n        if (fromId == getHolderId(_to)) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_CANNOT_APPLY_TO_ONESELF);\r\n        }\r\n        // Should trust to yet untrusted.\r\n        if (isTrusted(msg.sender, _to)) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_ALREADY_TRUSTED);\r\n        }\r\n\r\n        set(store, holdersTrustStorage, fromId, _to, true);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Revoke trust to perform recovery procedure from an address.\r\n    /// @param _to trustee.\r\n    /// @return success.\r\n    function distrust(address _to)\r\n    public\r\n    checkTrust(msg.sender, _to)\r\n    returns (uint)\r\n    {\r\n        set(store, holdersTrustStorage, getHolderId(msg.sender), _to, false);\r\n        return OK;\r\n    }\r\n\r\n    /// @notice Perform recovery procedure.\r\n    ///\r\n    /// This function logic is actually more of an addAccess(uint _holderId, address _to).\r\n    /// It grants another address access to recovery subject wallets.\r\n    /// Can only be called by trustee of recovery subject.\r\n    ///\r\n    /// @param _from holder address to recover from.\r\n    /// @param _to address to grant access to.\r\n    ///\r\n    /// @return success.\r\n    function recover(address _from, address _to)\r\n    public\r\n    checkTrust(_from, msg.sender)\r\n    returns (uint errorCode)\r\n    {\r\n        // Should recover to previously unused address.\r\n        if (getHolderId(_to) != 0) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_SHOULD_RECOVER_TO_NEW_ADDRESS);\r\n        }\r\n        // We take current holder address because it might not equal _from.\r\n        // It is possible to recover from any old holder address, but event should have the current one.\r\n        uint _fromHolderId = getHolderId(_from);\r\n        address _fromRef = _address(_fromHolderId);\r\n        set(store, holdersAddressStorage, _fromHolderId, _to);\r\n        set(store, holderIndexStorage, _to, _fromHolderId);\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Call Stack Depth Limit reached: revert this transaction too;\r\n        // Recursive Call: safe, all changes already made.\r\n        _emitter().emitRecovery(_fromRef, _to, msg.sender);\r\n        return OK;\r\n    }\r\n\r\n    /// @dev Sets asset spending allowance for a specified spender.\r\n    ///\r\n    /// Note: to revoke allowance, one needs to set allowance to 0.\r\n    ///\r\n    /// @param _value amount to allow.\r\n    /// @param _symbol asset symbol.\r\n    ///\r\n    /// @return success.\r\n    function _approve(\r\n        uint _value,\r\n        bytes32 _symbol,\r\n        TransactionContext memory txContext\r\n    )\r\n    internal\r\n    returns (uint)\r\n    {\r\n        // Asset should exist.\r\n        if (!isCreated(_symbol)) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_ASSET_IS_NOT_ISSUED);\r\n        }\r\n        // Should allow to another holder.\r\n        if (txContext.fromHolderId == txContext.senderHolderId) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_CANNOT_APPLY_TO_ONESELF);\r\n        }\r\n\r\n        // Double Spend Attack checkpoint\r\n        txContext.allowanceValue = _allowance(txContext.fromHolderId, txContext.senderHolderId, _symbol);\r\n        if (!(txContext.allowanceValue == 0 || _value == 0)) {\r\n            return _emitErrorCode(CHRONOBANK_PLATFORM_INVALID_INVOCATION);\r\n        }\r\n\r\n        set(store, assetWalletAllowance, _symbol, txContext.fromHolderId, txContext.senderHolderId, _value);\r\n\r\n        // Internal Out Of Gas/Throw: revert this transaction too;\r\n        // Call Stack Depth Limit reached: revert this transaction too;\r\n        // Recursive Call: safe, all changes already made.\r\n        _emitter().emitApprove(txContext.from, txContext.sender, _symbol, _value);\r\n        address _proxy = proxies(_symbol);\r\n        if (_proxy != 0x0) {\r\n            // Internal Out Of Gas/Throw: revert this transaction too;\r\n            // Call Stack Depth Limit reached: n/a after HF 4;\r\n            // Recursive Call: safe, all changes already made.\r\n            ProxyEventsEmitter(_proxy).emitApprove(txContext.from, txContext.sender, _value);\r\n        }\r\n        return OK;\r\n    }\r\n\r\n    /// @dev Sets asset spending allowance for a specified spender.\r\n    ///\r\n    /// Can only be called by asset proxy.\r\n    ///\r\n    /// @param _spender holder address to set allowance to.\r\n    /// @param _value amount to allow.\r\n    /// @param _symbol asset symbol.\r\n    /// @param _sender approve initiator address.\r\n    ///\r\n    /// @return success.\r\n    function proxyApprove(\r\n        address _spender,\r\n        uint _value,\r\n        bytes32 _symbol,\r\n        address _sender\r\n    )\r\n    public\r\n    onlyProxy(_symbol)\r\n    returns (uint)\r\n    {\r\n        TransactionContext memory txContext;\r\n        txContext.sender = _spender;\r\n        txContext.senderHolderId = _createHolderId(_spender);\r\n        txContext.from = _sender;\r\n        txContext.fromHolderId = _createHolderId(_sender);\r\n        return _approve(_value, _symbol, txContext);\r\n    }\r\n\r\n    /// @notice Performs allowance transfer of asset balance between holders wallets.\r\n    ///\r\n    /// @dev Can only be called by asset proxy.\r\n    ///\r\n    /// @param _from holder address to take from.\r\n    /// @param _to holder address to give to.\r\n    /// @param _value amount to transfer.\r\n    /// @param _symbol asset symbol.\r\n    /// @param _reference transfer comment to be included in a Transfer event.\r\n    /// @param _sender allowance transfer initiator address.\r\n    ///\r\n    /// @return success.\r\n    function proxyTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        bytes32 _symbol,\r\n        string _reference,\r\n        address _sender\r\n    )\r\n    public\r\n    onlyProxy(_symbol)\r\n    onlyAfterBlock(_symbol)\r\n    returns (uint)\r\n    {\r\n        TransactionContext memory txContext;\r\n        txContext.sender = _sender;\r\n        txContext.to = _to;\r\n        txContext.from = _from;\r\n        txContext.toHolderId = _createHolderId(_to);\r\n        txContext.fromHolderId = getHolderId(_from);\r\n        txContext.senderHolderId = _to == _sender ? txContext.toHolderId : getHolderId(_sender);\r\n        return _transfer(_value, _symbol, _reference, txContext);\r\n    }\r\n\r\n    /// @dev Returns asset allowance from one holder to another.\r\n    /// @param _from holder that allowed spending.\r\n    /// @param _spender holder that is allowed to spend.\r\n    /// @param _symbol asset symbol.\r\n    /// @return holder to spender allowance.\r\n    function allowance(address _from, address _spender, bytes32 _symbol) public view returns (uint) {\r\n        return _allowance(getHolderId(_from), getHolderId(_spender), _symbol);\r\n    }\r\n\r\n    /// @dev Returns asset allowance from one holder to another.\r\n    /// @param _fromId holder id that allowed spending.\r\n    /// @param _toId holder id that is allowed to spend.\r\n    /// @param _symbol asset symbol.\r\n    /// @return holder to spender allowance.\r\n    function _allowance(uint _fromId, uint _toId, bytes32 _symbol) internal view returns (uint) {\r\n        return get(store, assetWalletAllowance, _symbol, _fromId, _toId);\r\n    }\r\n\r\n    function _emitter() private view returns (ChronoBankPlatformEmitter) {\r\n        return ChronoBankPlatformEmitter(getEventsHistory());\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_eventsHistory\",\"type\":\"address\"}],\"name\":\"setupEventsHistory\",\"outputs\":[{\"name\":\"errorCode\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"int256\"}],\"name\":\"setInt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_baseUnit\",\"type\":\"uint8\"},{\"name\":\"_isReissuable\",\"type\":\"bool\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"issueAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getHolderId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partowner\",\"type\":\"address\"}],\"name\":\"removePartOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"proxyApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"proxyTransferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"removeDesignatedAssetManager\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setString\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint8\"}],\"name\":\"setUInt8\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holderId\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"address\"},{\"name\":\"_value2\",\"type\":\"uint8\"}],\"name\":\"setAddressUInt8\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"isCreated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getBytes32\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getUInt8\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"trust\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getUInt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUInt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"changeContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"proxyTransferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_externalReference\",\"type\":\"string\"}],\"name\":\"revokeAssetWithExternalReference\",\"outputs\":[{\"name\":\"_resultCode\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingContractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holderId\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"_balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proxyAddress\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"setProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[{\"name\":\"errorCode\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"isTrusted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holderId\",\"type\":\"uint256\"}],\"name\":\"_address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"proxies\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"holdersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addDesignatedAssetManager\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_errorCode\",\"type\":\"uint256\"}],\"name\":\"emitErrorCode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_baseUnit\",\"type\":\"uint8\"},{\"name\":\"_isReissuable\",\"type\":\"bool\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"issueAssetWithInitialReceiver\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getBool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"assets\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"uint256\"},{\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_isReissuable\",\"type\":\"bool\"},{\"name\":\"_baseUnit\",\"type\":\"uint8\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setBytes32\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getInt\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partowner\",\"type\":\"address\"}],\"name\":\"addPartOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferContractOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"emitOwnershipChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_by\",\"type\":\"address\"}],\"name\":\"emitIssue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_by\",\"type\":\"address\"},{\"name\":\"_externalReference\",\"type\":\"string\"}],\"name\":\"emitRevokeExternal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"reissueAssetToRecepient\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"isReissuable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_by\",\"type\":\"address\"}],\"name\":\"emitRevoke\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"revokeAsset\",\"outputs\":[{\"name\":\"_resultCode\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"partowners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"hasAssetRights\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"symbols\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"massTransfer\",\"outputs\":[{\"name\":\"errorCode\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"baseUnit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reissueAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getAddressUInt8\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"isDesignatedAssetManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_by\",\"type\":\"address\"}],\"name\":\"emitRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbolsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"}],\"name\":\"blockNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"distrust\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crate\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setBool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"bytes32\"},{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEventsHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reference\",\"type\":\"string\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"externalReference\",\"type\":\"string\"}],\"name\":\"RevokeExternal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"OwnershipChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"}],\"name\":\"Recovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"self\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"ErrorCode\",\"type\":\"event\"}]","ContractName":"ChronoBankPlatform","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU LGPLv3","SwarmSource":"bzzr://968db71d9caa2c3f305d84de3a5269b6abf3ca5eb6d0d625cca83084cd4044b1"}]}