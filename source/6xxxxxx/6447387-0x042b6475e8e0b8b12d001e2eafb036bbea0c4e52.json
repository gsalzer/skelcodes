{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\ncontract Chance {\r\n    address owner;\r\n    uint public pot;\r\n    uint SEKU_PRICE;\r\n    uint private _random;\r\n    address[] public participants;\r\n    mapping (address => uint) public sekus;\r\n    mapping (uint => address) public invitation;\r\n    uint public reflink;\r\n    \r\n    event Payout(address target, uint amount, uint nrOfParticipants, uint sekus);\r\n\t\r\n    modifier onlyBy(address _account)\r\n    {\r\n        require(msg.sender == _account);\r\n        _;\r\n    }\r\n    \r\n    constructor () public {\r\n        owner = msg.sender;\r\n        pot= address(this).balance;\r\n        SEKU_PRICE=0.001 ether;\r\n    }\r\n\t function setSEKU(uint price) public onlyBy(owner){\r\n        SEKU_PRICE = price* 1 ether;\r\n    }\r\n    function withdrawal()payable public onlyBy(owner){\r\n        terminate();\r\n    }\r\n\t\r\n    function getref() constant returns (uint) { \r\n        return uint32(keccak256(abi.encodePacked(msg.sender)));\r\n    }\r\n    \r\n     function buySEKU(uint amount,uint ref) payable public {\r\n        require(msg.value == amount*SEKU_PRICE && amount>0 && amount<201 );\r\n        bool _ref=false;\r\n        if(ref != 0 && invitation[ref] != msg.sender && sekus[invitation[ref]]>amount){\r\n            _ref=true;\r\n        }\r\n        for (uint i=0; i<amount; i++) {\r\n            participants.push(msg.sender);\r\n            if( _ref==true && (i%4==0)){\r\n                participants.push(invitation[ref]);\r\n        }\r\n    }\r\n        sekus[msg.sender]+=amount;\r\n        reflink=uint32(keccak256(abi.encodePacked(msg.sender)));\r\n        invitation[reflink]= msg.sender;\r\n        pot+=msg.value;\r\n    }\r\n   \r\n    function terminate() private {\r\n        uint totalPayout = pot;\r\n        _random= random();\r\n        uint ownerFee = totalPayout / 10;\r\n        uint payoutToFirstWinner = (totalPayout) / 2;\r\n        uint payoutToSecondWinner = (totalPayout) / 4;\r\n        uint payoutToThirdWinner = (totalPayout)  / 20;\r\n        \r\n        owner.transfer(ownerFee);\r\n        \r\n        uint firstWinnerIndex =  uint(blockhash(block.number-1-_random))  % participants.length;\r\n        address firstWinner = participants[firstWinnerIndex];\r\n        firstWinner.transfer(payoutToFirstWinner);\r\n        emit Payout(firstWinner, payoutToFirstWinner, participants.length,sekus[firstWinner]);\r\n        uint secondWinnerIndex =  uint(blockhash(block.number-2-_random)) % participants.length;\r\n        address secondWinner = participants[secondWinnerIndex];\r\n        while (secondWinner==firstWinner || secondWinner==owner){\r\n            _random+=1;\r\n            secondWinnerIndex =  uint(blockhash(block.number-2-_random)) % participants.length;\r\n            secondWinner = participants[secondWinnerIndex];\r\n        }\r\n        \r\n        secondWinner.transfer(payoutToSecondWinner);\r\n        emit Payout(secondWinner, payoutToSecondWinner, participants.length,sekus[secondWinner]);\r\n        uint thirdWinnerIndex =  uint(blockhash(block.number-3-_random)) % participants.length;\r\n        address thirdWinner = participants[thirdWinnerIndex];\r\n        while (thirdWinner==firstWinner || thirdWinner==secondWinner || secondWinner==owner){\r\n            _random+=1;\r\n            thirdWinnerIndex =  uint(blockhash(block.number-3-_random)) % participants.length;\r\n            thirdWinner = participants[thirdWinnerIndex];\r\n        }\r\n        \r\n        thirdWinner.transfer(payoutToThirdWinner);\r\n        emit Payout(thirdWinner, payoutToThirdWinner, participants.length,sekus[thirdWinner]);\r\n        pot-=(ownerFee+payoutToThirdWinner+payoutToSecondWinner+payoutToFirstWinner);\r\n        delete participants;\r\n    }\r\n      function random() private view returns (uint8) {\r\n        return uint8(uint256(keccak256(abi.encodePacked(now, block.difficulty)))%251);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"reflink\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sekus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invitation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"ref\",\"type\":\"uint256\"}],\"name\":\"buySEKU\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setSEKU\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getref\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nrOfParticipants\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sekus\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"}]","ContractName":"Chance","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ce19bd9b6fb65ad54121dfa419a4cd90d77cb2e7da08597c2813c7fe36ccf130"}]}