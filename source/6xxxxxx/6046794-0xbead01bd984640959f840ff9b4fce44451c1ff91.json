{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface ERC721 /* is ERC165 */ {\r\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\r\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\r\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n    ///  may be created and assigned without emitting Transfer. At the time of\r\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    /// @dev This emits when the approved address for an NFT is changed or\r\n    ///  reaffirmed. The zero address indicates there is no approved address.\r\n    ///  When a Transfer event emits, this also indicates that the approved\r\n    ///  address for that NFT (if any) is reset to none.\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    ///  The operator can manage all NFTs of the owner.\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    /// @notice Count all NFTs assigned to an owner\r\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\r\n    ///  function throws for queries about the zero address.\r\n    /// @param _owner An address for whom to query the balance\r\n    /// @return The number of NFTs owned by `_owner`, possibly zero\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n    /// @notice Find the owner of an NFT\r\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\r\n    ///  about them do throw.\r\n    /// @param _tokenId The identifier for an NFT\r\n    /// @return The address of the owner of the NFT\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n    ///  `onERC721Received` on `_to` and throws if the return value is not\r\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\r\n\r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev This works identically to the other function with an extra data parameter,\r\n    ///  except this function just sets data to \"\".\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n    ///  THEY MAY BE PERMANENTLY LOST\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    /// @notice Change or reaffirm the approved address for an NFT\r\n    /// @dev The zero address indicates there is no approved address.\r\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n    ///  operator of the current owner.\r\n    /// @param _approved The new approved NFT controller\r\n    /// @param _tokenId The NFT to approve\r\n    function approve(address _approved, uint256 _tokenId) external;\r\n\r\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\r\n    ///  all of `msg.sender`'s assets\r\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\r\n    ///  multiple operators per owner.\r\n    /// @param _operator Address to add to the set of authorized operators\r\n    /// @param _approved True if the operator is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    /// @notice Get the approved address for a single NFT\r\n    /// @dev Throws if `_tokenId` is not a valid NFT.\r\n    /// @param _tokenId The NFT to find the approved address for\r\n    /// @return The approved address for this NFT, or the zero address if there is none\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n\r\n    /// @notice Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the NFTs\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\ninterface AvatarService {\r\n  function updateAvatarInfo(address _owner, uint256 _tokenId, string _name, uint256 _dna) external;\r\n  function createAvatar(address _owner, string _name, uint256 _dna) external  returns(uint256);\r\n  function getMountTokenIds(address _owner,uint256 _tokenId, address _avatarItemAddress) external view returns(uint256[]); \r\n  function getAvatarInfo(uint256 _tokenId) external view returns (string _name, uint256 _dna);\r\n  function getOwnedTokenIds(address _owner) external view returns(uint256[] _tokenIds);\r\n}\r\n\r\n\r\n/**\r\n * @title BitGuildAccessAdmin\r\n * @dev Allow two roles: 'owner' or 'operator'\r\n *      - owner: admin/superuser (e.g. with financial rights)\r\n *      - operator: can update configurations\r\n */\r\ncontract BitGuildAccessAdmin {\r\n  address public owner;\r\n  address[] public operators;\r\n\r\n  uint public MAX_OPS = 20; // Default maximum number of operators allowed\r\n\r\n  mapping(address => bool) public isOperator;\r\n\r\n  event OwnershipTransferred(\r\n      address indexed previousOwner,\r\n      address indexed newOwner\r\n  );\r\n  event OperatorAdded(address operator);\r\n  event OperatorRemoved(address operator);\r\n\r\n  // @dev The BitGuildAccessAdmin constructor: sets owner to the sender account\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  // @dev Throws if called by any account other than the owner.\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // @dev Throws if called by any non-operator account. Owner has all ops rights.\r\n  modifier onlyOperator {\r\n    require(\r\n      isOperator[msg.sender] || msg.sender == owner,\r\n      \"Permission denied. Must be an operator or the owner.\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(\r\n      _newOwner != address(0),\r\n      \"Invalid new owner address.\"\r\n    );\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n  /**\r\n    * @dev Allows the current owner or operators to add operators\r\n    * @param _newOperator New operator address\r\n    */\r\n  function addOperator(address _newOperator) public onlyOwner {\r\n    require(\r\n      _newOperator != address(0),\r\n      \"Invalid new operator address.\"\r\n    );\r\n\r\n    // Make sure no dups\r\n    require(\r\n      !isOperator[_newOperator],\r\n      \"New operator exists.\"\r\n    );\r\n\r\n    // Only allow so many ops\r\n    require(\r\n      operators.length < MAX_OPS,\r\n      \"Overflow.\"\r\n    );\r\n\r\n    operators.push(_newOperator);\r\n    isOperator[_newOperator] = true;\r\n\r\n    emit OperatorAdded(_newOperator);\r\n  }\r\n\r\n  /**\r\n    * @dev Allows the current owner or operators to remove operator\r\n    * @param _operator Address of the operator to be removed\r\n    */\r\n  function removeOperator(address _operator) public onlyOwner {\r\n    // Make sure operators array is not empty\r\n    require(\r\n      operators.length > 0,\r\n      \"No operator.\"\r\n    );\r\n\r\n    // Make sure the operator exists\r\n    require(\r\n      isOperator[_operator],\r\n      \"Not an operator.\"\r\n    );\r\n\r\n    // Manual array manipulation:\r\n    // - replace the _operator with last operator in array\r\n    // - remove the last item from array\r\n    address lastOperator = operators[operators.length - 1];\r\n    for (uint i = 0; i < operators.length; i++) {\r\n      if (operators[i] == _operator) {\r\n        operators[i] = lastOperator;\r\n      }\r\n    }\r\n    operators.length -= 1; // remove the last element\r\n\r\n    isOperator[_operator] = false;\r\n    emit OperatorRemoved(_operator);\r\n  }\r\n\r\n  // @dev Remove ALL operators\r\n  function removeAllOps() public onlyOwner {\r\n    for (uint i = 0; i < operators.length; i++) {\r\n      isOperator[operators[i]] = false;\r\n    }\r\n    operators.length = 0;\r\n  } \r\n\r\n}\r\n\r\ncontract AvatarOperator is BitGuildAccessAdmin {\r\n\r\n  // every user can own avatar count\r\n  uint8 public PER_USER_MAX_AVATAR_COUNT = 1;\r\n\r\n  event AvatarCreateSuccess(address indexed _owner, uint256 tokenId);\r\n\r\n  AvatarService internal avatarService;\r\n  address internal avatarAddress;\r\n\r\n  modifier nameValid(string _name){\r\n    bytes memory nameBytes = bytes(_name);\r\n    require(nameBytes.length > 0);\r\n    require(nameBytes.length < 16);\r\n    for(uint8 i = 0; i < nameBytes.length; ++i) {\r\n      uint8 asc = uint8(nameBytes[i]);\r\n      require (\r\n        asc == 95 || (asc >= 48 && asc <= 57) || (asc >= 65 && asc <= 90) || (asc >= 97 && asc <= 122), \"Invalid name\"); \r\n    }\r\n    _;\r\n  }\r\n\r\n  function setMaxAvatarNumber(uint8 _maxNumber) external onlyOwner {\r\n    PER_USER_MAX_AVATAR_COUNT = _maxNumber;\r\n  }\r\n\r\n  function injectAvatarService(address _addr) external onlyOwner {\r\n    avatarService = AvatarService(_addr);\r\n    avatarAddress = _addr;\r\n  }\r\n  \r\n  function updateAvatarInfo(uint256 _tokenId, string _name, uint256 _dna) external nameValid(_name){\r\n    avatarService.updateAvatarInfo(msg.sender, _tokenId, _name, _dna);\r\n  }\r\n\r\n  function createAvatar(string _name, uint256 _dna) external nameValid(_name) returns (uint256 _tokenId){\r\n    require(ERC721(avatarAddress).balanceOf(msg.sender) < PER_USER_MAX_AVATAR_COUNT);\r\n    _tokenId = avatarService.createAvatar(msg.sender, _name, _dna);\r\n    emit AvatarCreateSuccess(msg.sender, _tokenId);\r\n  }\r\n\r\n  function getMountTokenIds(uint256 _tokenId, address _avatarItemAddress) external view returns(uint256[]){\r\n    return avatarService.getMountTokenIds(msg.sender, _tokenId, _avatarItemAddress);\r\n  }\r\n\r\n  function getAvatarInfo(uint256 _tokenId) external view returns (string _name, uint256 _dna) {\r\n    return avatarService.getAvatarInfo(_tokenId);\r\n  }\r\n\r\n  function getOwnedTokenIds() external view returns(uint256[] _tokenIds) {\r\n    return avatarService.getOwnedTokenIds(msg.sender);\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"PER_USER_MAX_AVATAR_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAvatarInfo\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_dna\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"injectAvatarService\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_OPS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_dna\",\"type\":\"uint256\"}],\"name\":\"updateAvatarInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnedTokenIds\",\"outputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeAllOps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_dna\",\"type\":\"uint256\"}],\"name\":\"createAvatar\",\"outputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxNumber\",\"type\":\"uint8\"}],\"name\":\"setMaxAvatarNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_avatarItemAddress\",\"type\":\"address\"}],\"name\":\"getMountTokenIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AvatarCreateSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"}]","ContractName":"AvatarOperator","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8836f72f3d8a3405730a7d0d1baa8e066ee361902f26dcbf81593233b8d93ca3"}]}