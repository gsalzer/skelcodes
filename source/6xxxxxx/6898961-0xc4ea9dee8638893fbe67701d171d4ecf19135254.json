{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract Conquest {\r\n    \r\n    /*=================================\r\n    =             EVENTS              =\r\n    =================================*/\r\n\tevent onHiveCreated (\r\n        address indexed player,\r\n\t\tuint256 number,\r\n\t\tuint256 time\r\n    );\r\n\t\r\n\tevent onDroneCreated (\r\n        address indexed player,\r\n\t\tuint256 number,\r\n\t\tuint256 time\r\n    );\r\n\t\r\n\tevent onEnemyDestroyed (\r\n\t\taddress indexed player,\r\n\t\tuint256 time\r\n\t);\r\n    \r\n    \r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n\tmodifier onlyAdministrator() {\r\n        address _customerAddress = msg.sender;\r\n        require(administrator_ == _customerAddress);\r\n        _;\r\n    }\r\n    \r\n    \r\n    /*=================================\r\n    =         CONFIGURABLES           =\r\n    ==================================*/\r\n    uint256 internal ACTIVATION_TIME = 1544988600;  // when hives can be created\r\n\tbool internal contractActivated_ = true;\r\n\tbool internal payedOut_ = false;\r\n    \r\n    uint256 internal hiveCost_ = 0.075 ether;\r\n    uint256 internal droneCost_ = 0.01 ether;\r\n\t\r\n\tuint256 internal hiveXCommanderFee_ = 50;\t// 50% from Hives to Commander\r\n\tuint256 internal droneXCommanderFee_ = 15;\t// 15% from Drones to Commander\r\n    uint256 internal droneXHiveFee_ = 415;\t\t// 41.5% from Drones to Commander (base 1000)\r\n\t\r\n    uint8 internal amountHives_ = 8;\r\n    uint8 internal dronesPerDay_ = 20;\t\t\t// default 20\r\n\tbool internal conquesting_ = true;\r\n\tbool internal conquested_ = false;\r\n    \r\n    \r\n    /*=================================\r\n    =             DATASET             =\r\n    =================================*/\r\n    address internal administrator_;\r\n    address internal fundTHCAddress_;\r\n\taddress internal fundP3DAddress_;\r\n    uint256 internal pot_;\r\n    mapping (address => Pilot) internal pilots_;\r\n    \r\n    address internal commander_;\r\n    address[] internal hives_;\r\n    address[] internal drones_;\r\n    \r\n    //uint256 internal DEATH_TIME;\r\n    uint256 internal dronePopulation_;\r\n    \r\n    \r\n    /*=================================\r\n    =         PUBLIC FUNCTIONS        =\r\n    =================================*/\r\n    constructor() \r\n        public \r\n    {\r\n        commander_ = address(this);\r\n        administrator_ = 0x28436C7453EbA01c6EcbC8a9cAa975f0ADE6Fff1;\r\n        fundTHCAddress_ = 0x9674D14AF3EE5dDcD59D3bdcA7435E11bA0ced18;\r\n\t\tfundP3DAddress_ = 0xC0c001140319C5f114F8467295b1F22F86929Ad0;\r\n    }\r\n\t\r\n\tfunction startNewRound() \r\n\t\tpublic \r\n\t{\r\n\t\t// Conquesting needs to be finished\r\n\t\trequire(!conquesting_);\r\n\t\t\r\n\t\t// payout everybody into their vaults\r\n\t\tif (!payedOut_) {\r\n\t\t\t_payout();\r\n\t\t}\r\n\t\t\r\n\t\t// reset all values\r\n\t\t_resetGame();\r\n\t}\r\n\t\r\n\t// VAULT\r\n\tfunction withdrawVault() \r\n\t\tpublic \r\n\t{\r\n\t\taddress _player = msg.sender;\r\n\t\tuint256 _balance = pilots_[_player].vault;\r\n\t\t\r\n\t\t// Player must have ether in vault\r\n\t\trequire(_balance > 0);\r\n\t\t\r\n\t\t// withdraw everything\r\n\t\tpilots_[_player].vault = 0;\r\n\t\t\r\n\t\t// payouts\r\n\t\t_player.transfer(_balance);\r\n\t}\r\n\t\r\n\tfunction createCarrierFromVault()\r\n\t\tpublic \r\n\t{\r\n\t\taddress _player = msg.sender;\r\n\t\tuint256 _vault = pilots_[_player].vault;\r\n\t\t\r\n\t\t// Player must have enough ether available in vault\r\n\t\trequire(_vault >= hiveCost_);\r\n\t\tpilots_[_player].vault = _vault - hiveCost_;\r\n\t\t\r\n\t\t_createHiveInternal(_player);\r\n\t}\r\n\t\r\n\tfunction createDroneFromVault()\r\n\t\tpublic \r\n\t{\r\n\t\taddress _player = msg.sender;\r\n\t\tuint256 _vault = pilots_[_player].vault;\r\n\t\t\r\n\t\t// Player must have enough ether available in vault\r\n\t\trequire(_vault >= droneCost_);\r\n\t\tpilots_[_player].vault = _vault - droneCost_;\r\n\t\t\r\n\t\t_createDroneInternal(_player);\r\n\t}    \r\n    \r\n\t// WALLET\r\n    function createCarrier() \r\n\t\tpublic \r\n\t\tpayable\r\n\t{\r\n        address _player = msg.sender;\r\n        \r\n\t\trequire(msg.value == hiveCost_);\t\t\t// requires exact amount of ether\r\n        \r\n        _createHiveInternal(_player);\r\n    }\t\r\n    \r\n    function createDrone()\r\n        public \r\n\t\tpayable\r\n    {\r\n\t\taddress _player = msg.sender;\r\n\t\t\r\n\t\trequire(msg.value == droneCost_);\t\t\t// requires exact amount of ether\r\n        \r\n        _createDroneInternal(_player);\r\n    }\r\n    \r\n    /* View Functions and Helpers */\r\n    function openAt()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return ACTIVATION_TIME;\r\n    }\r\n    \r\n    function getHives()\r\n\t    public\r\n\t    view\r\n\t    returns(address[])\r\n\t{\r\n\t    return hives_;\r\n\t}\r\n\t\r\n\tfunction getDrones()\r\n\t    public\r\n\t    view\r\n\t    returns(address[])\r\n\t{\r\n\t    return drones_;\r\n\t}\r\n\t\r\n\t/*function populationIncrease()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns(uint256)\r\n\t{\r\n\t\treturn drones_.length - dronePopulation_;\r\n\t}*/\r\n    \r\n    function commander()\r\n        public\r\n        view\r\n        returns(address)\r\n    {\r\n        return commander_;\r\n    }\r\n    \r\n    function conquesting() \r\n        public\r\n        view\r\n        returns(bool)\r\n    {\r\n        return conquesting_;\r\n    }\r\n\t\r\n\tfunction getCommanderPot()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n\t\t// total values\r\n        uint256 _hivesIncome = hives_.length * hiveCost_;\t\t// total hives pot addition\r\n        uint256 _dronesIncome = drones_.length * droneCost_;\t// total drones pot addition\r\n        uint256 _pot = pot_ + _hivesIncome + _dronesIncome; \t// old pot may feeds this round\r\n\t\tuint256 _fee = _pot / 10;       \t\t\t\t\t\t// 10%\r\n        _pot = _pot - _fee;\t\t\t\t\t\t\t\t\t\t// 90% residual\r\n\t\t\r\n\t\t_hivesIncome = (_hivesIncome * 9) / 10;\r\n        _dronesIncome = (_dronesIncome * 9) / 10;\r\n\t\t\r\n        // relative values\r\n        uint256 _toCommander = (_hivesIncome * hiveXCommanderFee_) / 100 +\t\t// 50% from Hives to Commander\r\n                               (_dronesIncome * droneXCommanderFee_) / 100;  \t// 15% from Drones to Commander\r\n\t\t\r\n\t\treturn _toCommander;\r\n\t}\r\n\t\r\n\tfunction getHivePot()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n\t\t// total values\r\n        uint256 _hivesIncome = hives_.length * hiveCost_;\t\t// total hives pot addition\r\n        uint256 _dronesIncome = drones_.length * droneCost_;\t// total drones pot addition\r\n        uint256 _pot = pot_ + _hivesIncome + _dronesIncome; \t// old pot may feeds this round\r\n\t\tuint256 _fee = _pot / 10;       \t\t\t\t\t\t// 10%\r\n        _pot = _pot - _fee;\t\t\t\t\t\t\t\t\t\t// 90% residual\r\n        \r\n\t\t_hivesIncome = (_hivesIncome * 9) / 10;\r\n        _dronesIncome = (_dronesIncome * 9) / 10;\r\n\t\t\r\n        // relative values\r\n        uint256 _toHives = (_dronesIncome * droneXHiveFee_) / 1000;    \t\t\t// 41,5% from Drones to Hives\r\n\t\t\r\n\t\treturn _toHives;\r\n    }\r\n\t\r\n\tfunction getDronePot()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n\t\t// total values\r\n        uint256 _hivesIncome = hives_.length * hiveCost_;\t\t// total hives pot addition\r\n        uint256 _dronesIncome = drones_.length * droneCost_;\t// total drones pot addition\r\n        uint256 _pot = pot_ + _hivesIncome + _dronesIncome; \t// old pot may feeds this round\r\n\t\tuint256 _fee = _pot / 10;       \t\t\t\t\t\t// 10%\r\n        _pot = _pot - _fee;\t\t\t\t\t\t\t\t\t\t// 90% residual\r\n        \r\n\t\t_hivesIncome = (_hivesIncome * 9) / 10;\r\n        _dronesIncome = (_dronesIncome * 9) / 10;\r\n\t\t\r\n        // relative values\r\n        uint256 _toCommander = (_hivesIncome * hiveXCommanderFee_) / 100 +\t\t// 50% from Hives to Commander\r\n                               (_dronesIncome * droneXCommanderFee_) / 100;  \t// 15% from Drones to Commander\r\n        uint256 _toHives = (_dronesIncome * droneXHiveFee_) / 1000;    \t\t\t// 41,5% from Drones to Hives\r\n\t\tuint256 _toDrones = _pot - _toHives - _toCommander; \t\t\t\t\t// residual goes to squad\r\n\t\t\r\n\t\treturn _toDrones;\r\n    }\r\n\t\r\n\tfunction vaultOf(address _player)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns(uint256)\r\n\t{\r\n\t\treturn pilots_[_player].vault;\r\n\t}\r\n\t\r\n\tfunction lastFlight(address _player)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns(uint256)\r\n\t{\r\n\t\treturn pilots_[_player].lastFlight;\r\n\t}\r\n\t\r\n\t/* Setter */\r\n    function setGameStatus(bool _active) \r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        contractActivated_ = _active;\r\n    }\r\n    \r\n    \r\n    /*=================================\r\n    =        PRIVATE FUNCTIONS        =\r\n    =================================*/\r\n\tfunction _createDroneInternal(address _player)\r\n\t\tinternal \r\n\t{\r\n\t    require(hives_.length == amountHives_);    \t\t\t\t\t// all hives must be created\r\n\t\trequire(conquesting_);\t\t\t\t\t\t\t\t\t\t// Conquesting must be in progress\r\n\t\trequire(now > pilots_[_player].lastFlight + 60 seconds);\t// 1 drone per minute per address\r\n\t    \r\n\t    // check if certain amount of Drones have been built\r\n\t    // otherwise round ends\r\n\t    /*if (now > DEATH_TIME) {\r\n\t        if (populationIncrease() >= dronesPerDay_) {\r\n\t            dronePopulation_ = drones_.length;\t\t// remember last drone population\r\n\t            DEATH_TIME = DEATH_TIME + 24 hours;\t\t// set new death time limit\r\n\t\t\t\t\r\n\t\t\t\t// after increasing death time, \"now\" can still have exceeded it\r\n\t\t\t\tif (now > DEATH_TIME) {\r\n\t\t\t\t\tconquesting_ = false;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t        } else {\r\n\t            conquesting_ = false;\r\n\t            return;\r\n\t        }\r\n\t    }*/\r\n\t    \r\n\t\t// release new drone\r\n        drones_.push(_player);\r\n\t\tpilots_[_player].lastFlight = now;\r\n\t\t\r\n\t\temit onDroneCreated(_player, drones_.length, now);\r\n        \r\n\t\t// try to kill the Enemy\r\n\t\t_figthEnemy(_player);\r\n\t}\r\n\t\r\n\tfunction _createHiveInternal(address _player) \r\n\t\tinternal \r\n\t{\r\n\t    require(now >= ACTIVATION_TIME);                                // round starts automatically at this time\r\n\t    require(hives_.length < amountHives_);                          // limited hive amount\r\n        require(!ownsHive(_player), \"Player already owns a hive\");      // does not own a hive yet\r\n        \r\n\t\t// open hive\r\n        hives_.push(_player);\r\n        \r\n        // activate death time of 24 hours\r\n        /*if (hives_.length == amountHives_) {\r\n            DEATH_TIME = now + 24 hours;\r\n        }*/\r\n\t\t\r\n\t\temit onHiveCreated(_player, hives_.length, now);\r\n\t}\r\n    \r\n    function _figthEnemy(address _player)\r\n        internal\r\n    {\r\n        uint256 _drones = drones_.length;\r\n        \r\n        // is that Drone the killer?\r\n        uint256 _drone = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, _player, _drones))) % 289;\r\n        \r\n\t\t// Enemy has been killed\r\n\t\tif (_drone == 42) {\r\n\t\t\tconquesting_ = false;\r\n\t\t\tconquested_ = true;\r\n\t\t\t\r\n\t\t\temit onEnemyDestroyed(_player, now);\r\n\t\t}\r\n    }\r\n    \r\n    /**\r\n     * Payout Commander, Hives and Drone Squad\r\n     */\r\n    function _payout()\r\n        internal\r\n    {\r\n        // total values\r\n        uint256 _hivesIncome = amountHives_ * hiveCost_;\r\n        uint256 _dronesIncome = drones_.length * droneCost_;\r\n        uint256 _pot = pot_ + _hivesIncome + _dronesIncome; \t// old pot may feeds this round\r\n\t\tuint256 _fee = _pot / 10;       \t\t\t\t\t\t// 10%\r\n        _pot = _pot - _fee;\t\t\t\t\t\t\t\t\t\t// 90% residual\r\n\t\t_hivesIncome = (_hivesIncome * 9) / 10;\r\n        _dronesIncome = (_dronesIncome * 9) / 10;\r\n\t\t\r\n        // relative values\r\n        uint256 _toCommander = (_hivesIncome * hiveXCommanderFee_) / 100 +\t\t// 50% from Hives to Commander\r\n                               (_dronesIncome * droneXCommanderFee_) / 100;  \t// 15% from Drones to Commander\r\n        uint256 _toHives = (_dronesIncome * droneXHiveFee_) / 1000;    \t\t\t// 41,5% from Drones to Hives\r\n        uint256 _toHive = _toHives / 8;\t\t\t\t\t\t\t\t\t\t\t// 1/8 to each hive\r\n        uint256 _toDrones = _pot - _toHives - _toCommander; \t\t\t\t\t// residual goes to squad\r\n        \r\n        // only payout Hives and Drones if they have conquested\r\n        if (conquested_) {\r\n            // payout hives\r\n            for (uint8 i = 0; i < 8; i++) {\r\n                address _ownerHive = hives_[i];\r\n                pilots_[_ownerHive].vault = pilots_[_ownerHive].vault + _toHive;\r\n                _pot = _pot - _toHive;\r\n            }\r\n            \r\n            // payout drones\r\n            uint256 _squadSize;\r\n            if (drones_.length >= 4) { _squadSize = 4; }\t\t\t\t// 4 drones available\r\n    \t\telse                     { _squadSize = drones_.length; }\t// less than 4 drones available\r\n            \r\n            // iterate 1-4 drones\r\n            for (uint256 j = (drones_.length - _squadSize); j < drones_.length; j++) {\r\n                address _ownerDrone = drones_[j];\r\n                pilots_[_ownerDrone].vault = pilots_[_ownerDrone].vault + (_toDrones / _squadSize);\r\n                _pot = _pot - (_toDrones / _squadSize);\r\n            }\r\n        }\r\n        \r\n        // payout Commander if contract is not queen\r\n        if (commander_ != address(this)) {\r\n            pilots_[commander_].vault = pilots_[commander_].vault + _toCommander;\r\n            _pot = _pot - _toCommander;\r\n        }\r\n        \r\n        // payout Fee\r\n        fundTHCAddress_.transfer(_fee / 2);\t\t// 50% -> THC\r\n\t\tfundP3DAddress_.transfer(_fee / 2);\t\t// 50% -> P3D\r\n\t\t\r\n\t\t// excess goes to next rounds pot\r\n\t\tpot_ = _pot;\r\n\t\t\r\n\t\tpayedOut_ = true;\r\n    }\r\n\t\r\n\t/**\r\n\t * Prepare next round by resetting all values to default\r\n\t */\r\n\tfunction _resetGame() \r\n\t\tinternal \r\n\t{\r\n\t\t// start new round if contract is active\r\n\t\tif (contractActivated_) {\r\n\t\t\taddress _winner = drones_[drones_.length - 1];\r\n\t\t\t\r\n\t\t\tcommander_ = _winner;\r\n\t\t\thives_.length = 0;\r\n\t\t\tdrones_.length = 0;\r\n\t\t\tdronePopulation_ = 0;\r\n\t\t\t\r\n\t\t\tconquesting_ = true;\r\n\t\t\tconquested_ = false;\r\n\t\t\t\r\n\t\t\tpayedOut_ = false;\r\n\t\t\t\r\n\t\t\tACTIVATION_TIME = now + 5 minutes;\r\n\t\t}\r\n\t}\r\n    \r\n    /* Helper */\r\n    function ownsHive(address _player) \r\n        internal\r\n        view\r\n        returns(bool)\r\n    {\r\n        for (uint8 i = 0; i < hives_.length; i++) {\r\n            if (hives_[i] == _player) {\r\n                return true;\r\n            }\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    \r\n    /*=================================\r\n    =            DATA TYPES           =\r\n    =================================*/\r\n\tstruct Pilot {\r\n\t\tuint256 vault;\r\n\t\tuint256 lastFlight;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"vaultOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDrones\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commander\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"conquesting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"lastFlight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHivePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createCarrier\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDronePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHives\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createCarrierFromVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startNewRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCommanderPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setGameStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createDroneFromVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"createDrone\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onHiveCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onDroneCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"onEnemyDestroyed\",\"type\":\"event\"}]","ContractName":"Conquest","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b4435285e1df881ee407a5b0870d3344b4decf233d89304b6071ee7b7aea72c8"}]}