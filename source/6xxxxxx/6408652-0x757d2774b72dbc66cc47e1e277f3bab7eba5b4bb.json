{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ncontract ERC20 {\r\n    bytes32 public standard;\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public totalSupply;\r\n    uint8 public decimals;\r\n    bool public allowTransactions;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n}\r\n\r\n\r\ncontract ExToke {\r\n\r\n    string public name = \"ExToke Token\";\r\n    string public symbol = \"XTE\";\r\n    uint8 public decimals = 18;\r\n    \r\n    uint256 public crowdSaleSupply = 500000000  * (uint256(10) ** decimals);\r\n    uint256 public tokenSwapSupply = 3000000000 * (uint256(10) ** decimals);\r\n    uint256 public dividendSupply = 2400000000 * (uint256(10) ** decimals);\r\n    uint256 public totalSupply = 7000000000 * (uint256(10) ** decimals);\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    \r\n    \r\n    address public oldAddress = 0x28925299Ee1EDd8Fd68316eAA64b651456694f0f;\r\n    address tokenAdmin = 0xEd86f5216BCAFDd85E5875d35463Aca60925bF16;\r\n    \r\n    uint256 public finishTime = 1548057600;\r\n    \r\n    uint256[] public releaseDates = \r\n    [1543665600, 1546344000, 1549022400, 1551441600, 1554120000, 1556712000,\r\n    1559390400, 1561982400, 1564660800, 1567339200, 1569931200, 1572609600,\r\n    1575201600, 1577880000, 1580558400, 1583064000, 1585742400, 1588334400,\r\n    1591012800, 1593604800, 1596283200, 1598961600, 1601553600, 1604232000];\r\n    \r\n    uint256 public nextRelease = 0;\r\n\r\n    function ExToke() public {\r\n        balanceOf[tokenAdmin] = 1100000000 * (uint256(10) ** decimals);\r\n    }\r\n\r\n    uint256 public scaling = uint256(10) ** 8;\r\n\r\n    mapping(address => uint256) public scaledDividendBalanceOf;\r\n\r\n    uint256 public scaledDividendPerToken;\r\n\r\n    mapping(address => uint256) public scaledDividendCreditedTo;\r\n\r\n    function update(address account) internal {\r\n        if(nextRelease < 24 && block.timestamp > releaseDates[nextRelease]){\r\n            releaseDivTokens();\r\n        }\r\n        uint256 owed =\r\n            scaledDividendPerToken - scaledDividendCreditedTo[account];\r\n        scaledDividendBalanceOf[account] += balanceOf[account] * owed;\r\n        scaledDividendCreditedTo[account] = scaledDividendPerToken;\r\n        \r\n        \r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Withdraw(address indexed from, uint256 value);\r\n    event Swap(address indexed from, uint256 value);\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= value);\r\n\r\n        update(msg.sender);\r\n        update(to);\r\n\r\n        balanceOf[msg.sender] -= value;\r\n        balanceOf[to] += value;\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        require(value <= balanceOf[from]);\r\n        require(value <= allowance[from][msg.sender]);\r\n\r\n        update(from);\r\n        update(to);\r\n\r\n        balanceOf[from] -= value;\r\n        balanceOf[to] += value;\r\n        allowance[from][msg.sender] -= value;\r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    uint256 public scaledRemainder = 0;\r\n    \r\n    function() public payable{\r\n        tokenAdmin.transfer(msg.value);\r\n        if(finishTime >= block.timestamp && crowdSaleSupply >= msg.value * 100000){\r\n            balanceOf[msg.sender] += msg.value * 100000;\r\n            crowdSaleSupply -= msg.value * 100000;\r\n            \r\n        }\r\n        else if(finishTime < block.timestamp){\r\n            balanceOf[tokenAdmin] += crowdSaleSupply;\r\n            crowdSaleSupply = 0;\r\n        }\r\n    }\r\n\r\n    function releaseDivTokens() public returns (bool success){\r\n        require(block.timestamp > releaseDates[nextRelease]);\r\n        uint256 releaseAmount = 100000000 * (uint256(10) ** decimals);\r\n        dividendSupply -= releaseAmount;\r\n        uint256 available = (releaseAmount * scaling) + scaledRemainder;\r\n        scaledDividendPerToken += available / totalSupply;\r\n        scaledRemainder = available % totalSupply;\r\n        nextRelease += 1;\r\n        return true;\r\n    }\r\n\r\n    function withdraw() public returns (bool success){\r\n        update(msg.sender);\r\n        uint256 amount = scaledDividendBalanceOf[msg.sender] / scaling;\r\n        scaledDividendBalanceOf[msg.sender] %= scaling;  // retain the remainder\r\n        balanceOf[msg.sender] += amount;\r\n        emit Withdraw(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n        public\r\n        returns (bool success)\r\n    {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    \r\n\r\n    function swap(uint256 sendAmount) returns (bool success){\r\n        require(tokenSwapSupply >= sendAmount * 3);\r\n        if(ERC20(oldAddress).transferFrom(msg.sender, tokenAdmin, sendAmount)){\r\n            balanceOf[msg.sender] += sendAmount * 3;\r\n            tokenSwapSupply -= sendAmount * 3;\r\n        }\r\n        emit Swap(msg.sender, sendAmount);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"releaseDates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSwapSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseDivTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"scaledDividendBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scaledRemainder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"scaledDividendCreditedTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sendAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scaledDividendPerToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdSaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextRelease\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"scaling\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"}]","ContractName":"ExToke","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c58de42bf250fa22e3b23a54b059c56841a101716071b43605ff503105b7c5c5"}]}