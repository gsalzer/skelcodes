{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that revert on error\r\n*/\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(IERC20 token, address to, uint256 value) internal{\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract TalaRCrowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  // The token being sold\r\n  IERC20 private _token;\r\n\r\n  // Address where funds are collected\r\n  address private _wallet;\r\n\r\n  // How many token units a buyer gets per wei.\r\n  uint256 private _rate;\r\n\r\n  // Same as _rate but in bonus time\r\n  uint256 private _bonusRate;\r\n\r\n  // bonus cap in wei\r\n  uint256 private _bonusCap;\r\n\r\n  // Amount of wei raised\r\n  uint256 private _weiRaised;\r\n\r\n  // Timestamps\r\n  uint256 private _openingTime;\r\n  uint256 private _bonusEndTime;\r\n  uint256 private _closingTime;\r\n\r\n  // Minimal contribution - 0.05 ETH\r\n  uint256 private constant MINIMAL_CONTRIBUTION = 50000000000000000;\r\n\r\n  event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  constructor(uint256 rate, uint256 bonusRate, uint256 bonusCap, uint256 openingTime, uint256 bonusEndTime, uint256 closingTime, address wallet, IERC20 token) public {\r\n    require(rate > 0);\r\n    require(bonusRate > 0);\r\n    require(bonusCap > 0);\r\n    require(openingTime >= block.timestamp);\r\n    require(bonusEndTime >= openingTime);\r\n    require(closingTime >= bonusEndTime);\r\n    require(wallet != address(0));\r\n\r\n    _rate = rate;\r\n    _bonusRate = bonusRate;\r\n    _bonusCap = bonusCap;\r\n    _wallet = wallet;\r\n    _token = token;\r\n    _openingTime = openingTime;\r\n    _closingTime = closingTime;\r\n    _bonusEndTime = bonusEndTime;\r\n  }\r\n\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  function token() public view returns(IERC20) {\r\n    return _token;\r\n  }\r\n\r\n  function wallet() public view returns(address) {\r\n    return _wallet;\r\n  }\r\n\r\n  function rate() public view returns(uint256) {\r\n    return _rate;\r\n  }\r\n\r\n  function bonusRate() public view returns(uint256) {\r\n    return _bonusRate;\r\n  }\r\n\r\n  function bonusCap() public view returns(uint256) {\r\n    return _bonusCap;\r\n  }\r\n\r\n  function weiRaised() public view returns (uint256) {\r\n    return _weiRaised;\r\n  }\r\n\r\n  function openingTime() public view returns(uint256) {\r\n    return _openingTime;\r\n  }\r\n\r\n  function closingTime() public view returns(uint256) {\r\n    return _closingTime;\r\n  }\r\n\r\n  function bonusEndTime() public view returns(uint256) {\r\n    return _bonusEndTime;\r\n  }\r\n\r\n  function buyTokens(address beneficiary) public payable {\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(beneficiary, weiAmount);\r\n\r\n    uint256 tokenAmount = _getTokenAmount(weiAmount);\r\n\r\n    _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n    _token.safeTransfer(beneficiary, tokenAmount);\r\n    emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokenAmount);\r\n\r\n    _forwardFunds();\r\n  }\r\n\r\n  function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal {\r\n    require(isOpen());\r\n    require(beneficiary != address(0));\r\n    require(weiAmount >= MINIMAL_CONTRIBUTION);\r\n  }\r\n\r\n  function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n    return weiAmount.mul(_getCurrentRate());\r\n  }\r\n\r\n  function _forwardFunds() internal {\r\n    _wallet.transfer(msg.value);\r\n  }\r\n\r\n  function _getCurrentRate() internal view returns (uint256) {\r\n    return isBonusTime() ? _bonusRate : _rate;\r\n  }\r\n\r\n  function isOpen() public view returns (bool) {\r\n    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\r\n  }\r\n\r\n  function hasClosed() public view returns (bool) {\r\n    return block.timestamp > _closingTime;\r\n  }\r\n\r\n  function isBonusTime() public view returns (bool) {\r\n    return block.timestamp >= _openingTime && block.timestamp <= _bonusEndTime && _weiRaised <= _bonusCap;\r\n  }\r\n\r\n  // ETH balance is always expected to be 0.\r\n  // but in case something went wrong, owner can extract ETH\r\n  function emergencyETHDrain() external onlyOwner {\r\n    _wallet.transfer(address(this).balance);\r\n  }\r\n\r\n  // owner can drain tokens that are sent here by mistake\r\n  function emergencyERC20Drain(IERC20 tokenDrained, uint amount) external onlyOwner {\r\n    tokenDrained.transfer(owner, amount);\r\n  }\r\n\r\n  // when sale is closed owner can drain any tokens left \r\n  function tokensLeftDrain(uint amount) external onlyOwner {\r\n    require(hasClosed());\r\n    _token.transfer(owner, amount);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyETHDrain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tokensLeftDrain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBonusTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenDrained\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"bonusRate\",\"type\":\"uint256\"},{\"name\":\"bonusCap\",\"type\":\"uint256\"},{\"name\":\"openingTime\",\"type\":\"uint256\"},{\"name\":\"bonusEndTime\",\"type\":\"uint256\"},{\"name\":\"closingTime\",\"type\":\"uint256\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TalaRCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000001130000000000000000000000000000000000000000000000000000000000000157c000000000000000000000000000000000000000000000454d735f16a138a0000000000000000000000000000000000000000000000000000000000005bbceca0000000000000000000000000000000000000000000000000000000005bcfb5ff000000000000000000000000000000000000000000000000000000005c2aad7f0000000000000000000000007837072010b19f1eeaecdda7f0efb7364871d6100000000000000000000000003aa531e07a0d13a0ea39baaba183c32a1b0cffb1","Library":"","SwarmSource":"bzzr://88d560bd1ed23e7ed7499a022a5ad386b05af4042a44aafeb62ff8a5b5ac4e13"}]}