{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary OwnershipTypes{\r\n    using Serializer for Serializer.DataComponent;\r\n\r\n    struct Ownership\r\n    {\r\n        address m_Owner; // 0\r\n        uint32 m_OwnerInventoryIndex; // 20\r\n    }\r\n\r\n    function SerializeOwnership(Ownership ownership) internal pure returns (bytes32)\r\n    {\r\n        Serializer.DataComponent memory data;\r\n        data.WriteAddress(0, ownership.m_Owner);\r\n        data.WriteUint32(20, ownership.m_OwnerInventoryIndex);\r\n\r\n        return data.m_Raw;\r\n    }\r\n\r\n    function DeserializeOwnership(bytes32 raw) internal pure returns (Ownership)\r\n    {\r\n        Ownership memory ownership;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = raw;\r\n\r\n        ownership.m_Owner = data.ReadAddress(0);\r\n        ownership.m_OwnerInventoryIndex = data.ReadUint32(20);\r\n\r\n        return ownership;\r\n    }\r\n}\r\nlibrary LibStructs{\r\n    using Serializer for Serializer.DataComponent;\r\n    // HEROES\r\n\r\n    struct Hero {\r\n        uint16 stockID;\r\n        uint8 rarity;\r\n        uint16 hp;\r\n        uint16 atk;\r\n        uint16 def;\r\n        uint16 agi;\r\n        uint16 intel;\r\n        uint16 cHp;\r\n        //uint8 cenas;\r\n        // uint8 critic;\r\n        // uint8 healbonus;\r\n        // uint8 atackbonus;\r\n        // uint8 defensebonus;\r\n\r\n        uint8 isForSale;\r\n        uint8 lvl;\r\n        uint16 xp;\r\n    }\r\n    struct StockHero {uint16 price;uint8 stars;uint8 mainOnePosition;uint8 mainTwoPosition;uint16 stock;uint8 class;}\r\n\r\n    function SerializeHero(Hero hero) internal pure returns (bytes32){\r\n        Serializer.DataComponent memory data;\r\n        data.WriteUint16(0, hero.stockID);\r\n        data.WriteUint8(2, hero.rarity);\r\n        //data.WriteUint8(2, hero.m_IsForSale);\r\n        //data.WriteUint8(3, rocket.m_Unused3);\r\n        data.WriteUint16(4, hero.hp);\r\n        data.WriteUint16(6, hero.atk);\r\n        data.WriteUint16(8, hero.def);\r\n        data.WriteUint16(10, hero.agi);\r\n        data.WriteUint16(12, hero.intel);\r\n        data.WriteUint16(14, hero.cHp);\r\n\r\n        // data.WriteUint8(16, hero.class);\r\n        // data.WriteUint8(17, hero.healbonus);\r\n        // data.WriteUint8(18, hero.atackbonus);\r\n        // data.WriteUint8(19, hero.defensebonus);\r\n\r\n        data.WriteUint8(20, hero.isForSale);\r\n        data.WriteUint8(21, hero.lvl);\r\n        data.WriteUint16(23, hero.xp);\r\n\r\n        return data.m_Raw;\r\n    }\r\n    function DeserializeHero(bytes32 raw) internal pure returns (Hero){\r\n        Hero memory hero;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = raw;\r\n\r\n        hero.stockID = data.ReadUint16(0);\r\n        //hero.rarity = data.ReadUint8(1);\r\n        hero.rarity = data.ReadUint8(2);\r\n        //rocket.m_Unused3 = data.ReadUint8(3);\r\n        hero.hp = data.ReadUint16(4);\r\n        hero.atk = data.ReadUint16(6);\r\n        hero.def = data.ReadUint16(8);\r\n        hero.agi = data.ReadUint16(10);\r\n        hero.intel = data.ReadUint16(12);\r\n        hero.cHp = data.ReadUint16(14);\r\n\r\n        // hero.class = data.ReadUint8(16);\r\n        // hero.healbonus = data.ReadUint8(17);\r\n        // hero.atackbonus = data.ReadUint8(18);\r\n        // hero.defensebonus = data.ReadUint8(19);\r\n\r\n        hero.isForSale = data.ReadUint8(20);\r\n        hero.lvl = data.ReadUint8(21);\r\n        hero.xp = data.ReadUint16(23);\r\n\r\n        return hero;\r\n    }\r\n    function SerializeStockHero(StockHero stockhero) internal pure returns (bytes32){\r\n        // string name;uint64 price;uint8 stars;uint8 mainOnePosition;uint8 mainTwoPosition;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.WriteUint16(0, stockhero.price);\r\n        data.WriteUint8(2, stockhero.stars);\r\n        data.WriteUint8(3, stockhero.mainOnePosition);\r\n        data.WriteUint8(4, stockhero.mainTwoPosition);\r\n        data.WriteUint16(5, stockhero.stock);\r\n        data.WriteUint8(7, stockhero.class);\r\n\r\n\r\n        return data.m_Raw;\r\n    }\r\n    function DeserializeStockHero(bytes32 raw) internal pure returns (StockHero){\r\n        StockHero memory stockhero;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = raw;\r\n\r\n        stockhero.price = data.ReadUint16(0);\r\n        stockhero.stars = data.ReadUint8(2);\r\n        stockhero.mainOnePosition = data.ReadUint8(3);\r\n        stockhero.mainTwoPosition = data.ReadUint8(4);\r\n        stockhero.stock = data.ReadUint16(5);\r\n        stockhero.class = data.ReadUint8(7);\r\n\r\n        return stockhero;\r\n    }\r\n    // ITEMS\r\n    struct Item {\r\n        uint16 stockID;\r\n        uint8 lvl;\r\n        uint8 rarity;\r\n        uint16 hp;\r\n        uint16 atk;\r\n        uint16 def;\r\n        uint16 agi;\r\n        uint16 intel;\r\n\r\n        uint8 critic;\r\n        uint8 healbonus;\r\n        uint8 atackbonus;\r\n        uint8 defensebonus;\r\n\r\n        uint8 isForSale;\r\n        uint8 grade;\r\n    }\r\n    struct StockItem {uint16 price;uint8 stars;uint8 lvl;uint8 mainOnePosition;uint8 mainTwoPosition;uint16[5] stats;uint8[4] secstats;uint8 cat;uint8 subcat;} // 1 finney = 0.0001 ether\r\n\r\n    function SerializeItem(Item item) internal pure returns (bytes32){\r\n        Serializer.DataComponent memory data;\r\n\r\n        data.WriteUint16(0, item.stockID);\r\n        data.WriteUint8(4, item.lvl);\r\n        data.WriteUint8(5, item.rarity);\r\n        data.WriteUint16(6, item.hp);\r\n        data.WriteUint16(8, item.atk);\r\n        data.WriteUint16(10, item.def);\r\n        data.WriteUint16(12, item.agi);\r\n        data.WriteUint16(14, item.intel);\r\n        // data.WriteUint32(14, item.cHp);\r\n\r\n        data.WriteUint8(16, item.critic);\r\n        data.WriteUint8(17, item.healbonus);\r\n        data.WriteUint8(18, item.atackbonus);\r\n        data.WriteUint8(19, item.defensebonus);\r\n\r\n        data.WriteUint8(20, item.isForSale);\r\n        data.WriteUint8(21, item.grade);\r\n\r\n\r\n        return data.m_Raw;\r\n\r\n    }\r\n    function DeserializeItem(bytes32 raw) internal pure returns (Item){\r\n        Item memory item;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = raw;\r\n\r\n        item.stockID = data.ReadUint16(0);\r\n\r\n        item.lvl = data.ReadUint8(4);\r\n        item.rarity = data.ReadUint8(5);\r\n        item.hp = data.ReadUint16(6);\r\n        item.atk = data.ReadUint16(8);\r\n        item.def = data.ReadUint16(10);\r\n        item.agi = data.ReadUint16(12);\r\n        item.intel = data.ReadUint16(14);\r\n\r\n        item.critic = data.ReadUint8(16);\r\n        item.healbonus = data.ReadUint8(17);\r\n        item.atackbonus = data.ReadUint8(18);\r\n        item.defensebonus = data.ReadUint8(19);\r\n\r\n        item.isForSale = data.ReadUint8(20);\r\n        item.grade = data.ReadUint8(21);\r\n\r\n\r\n        return item;\r\n    }\r\n    function SerializeStockItem(StockItem stockitem) internal pure returns (bytes32){\r\n        // string name;uint64 price;uint8 stars;uint8 mainOnePosition;uint8 mainTwoPosition;uint8 mainThreePosition;\r\n        // uint16[] stats;uint8[] secstats;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.WriteUint16(0, stockitem.price);\r\n        data.WriteUint8(2, stockitem.stars);\r\n        data.WriteUint8(3, stockitem.lvl);\r\n        data.WriteUint8(4, stockitem.mainOnePosition);\r\n        data.WriteUint8(5, stockitem.mainTwoPosition);\r\n        //data.WriteUint8(12, stockitem.mainThreePosition);\r\n        //stats\r\n        data.WriteUint16(6, stockitem.stats[0]);\r\n        data.WriteUint16(8, stockitem.stats[1]);\r\n        data.WriteUint16(10, stockitem.stats[2]);\r\n        data.WriteUint16(12, stockitem.stats[3]);\r\n        data.WriteUint16(14, stockitem.stats[4]);\r\n        //secstats\r\n        data.WriteUint8(16, stockitem.secstats[0]);\r\n        data.WriteUint8(17, stockitem.secstats[1]);\r\n        data.WriteUint8(18, stockitem.secstats[2]);\r\n        data.WriteUint8(19, stockitem.secstats[3]);\r\n\r\n        data.WriteUint8(20, stockitem.cat);\r\n        data.WriteUint8(21, stockitem.subcat);\r\n\r\n\r\n        return data.m_Raw;\r\n    }\r\n    function DeserializeStockItem(bytes32 raw) internal pure returns (StockItem){\r\n        StockItem memory stockitem;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = raw;\r\n\r\n        stockitem.price = data.ReadUint16(0);\r\n        stockitem.stars = data.ReadUint8(2);\r\n        stockitem.lvl = data.ReadUint8(3);\r\n        stockitem.mainOnePosition = data.ReadUint8(4);\r\n        stockitem.mainTwoPosition = data.ReadUint8(5);\r\n        //stockitem.mainThreePosition = data.ReadUint8(12);\r\n\r\n        stockitem.stats[0] = data.ReadUint16(6);\r\n        stockitem.stats[1] = data.ReadUint16(8);\r\n        stockitem.stats[2] = data.ReadUint16(10);\r\n        stockitem.stats[3] = data.ReadUint16(12);\r\n        stockitem.stats[4] = data.ReadUint16(14);\r\n\r\n        stockitem.secstats[0] = data.ReadUint8(16);\r\n        stockitem.secstats[1] = data.ReadUint8(17);\r\n        stockitem.secstats[2] = data.ReadUint8(18);\r\n        stockitem.secstats[3] = data.ReadUint8(19);\r\n\r\n        stockitem.cat = data.ReadUint8(20);\r\n        stockitem.subcat = data.ReadUint8(21);\r\n\r\n        return stockitem;\r\n    }\r\n\r\n    struct Action {uint16 actionID;uint8 actionType;uint16 finneyCost;uint32 cooldown;uint8 lvl;uint8 looted;uint8 isDaily;}\r\n    function SerializeAction(Action action) internal pure returns (bytes32){\r\n        Serializer.DataComponent memory data;\r\n        data.WriteUint16(0, action.actionID);\r\n        data.WriteUint8(2, action.actionType);\r\n        data.WriteUint16(3, action.finneyCost);\r\n        data.WriteUint32(5, action.cooldown);\r\n        data.WriteUint8(9, action.lvl);\r\n        data.WriteUint8(10, action.looted);\r\n        data.WriteUint8(11, action.isDaily);\r\n\r\n        return data.m_Raw;\r\n    }\r\n    function DeserializeAction(bytes32 raw) internal pure returns (Action){\r\n        Action memory action;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = raw;\r\n\r\n        action.actionID = data.ReadUint16(0);\r\n        action.actionType = data.ReadUint8(2);\r\n        action.finneyCost = data.ReadUint16(3);\r\n        action.cooldown = data.ReadUint32(5);\r\n        action.lvl = data.ReadUint8(9);\r\n        action.looted = data.ReadUint8(10);\r\n        action.isDaily = data.ReadUint8(11);\r\n\r\n        return action;\r\n    }\r\n\r\n    struct Mission {uint8 dificulty;uint16[4] stockitemId_drops;uint16[5] statsrequired;uint16 count;}\r\n    function SerializeMission(Mission mission) internal pure returns (bytes32){\r\n        Serializer.DataComponent memory data;\r\n        data.WriteUint8(0, mission.dificulty);\r\n        data.WriteUint16(1, mission.stockitemId_drops[0]);\r\n        data.WriteUint16(5, mission.stockitemId_drops[1]);\r\n        data.WriteUint16(9, mission.stockitemId_drops[2]);\r\n        data.WriteUint16(13, mission.stockitemId_drops[3]);\r\n\r\n        data.WriteUint16(15, mission.statsrequired[0]);\r\n        data.WriteUint16(17, mission.statsrequired[1]);\r\n        data.WriteUint16(19, mission.statsrequired[2]);\r\n        data.WriteUint16(21, mission.statsrequired[3]);\r\n        data.WriteUint16(23, mission.statsrequired[4]);\r\n\r\n        data.WriteUint16(25, mission.count);\r\n\r\n        return data.m_Raw;\r\n    }\r\n    function DeserializeMission(bytes32 raw) internal pure returns (Mission){\r\n        Mission memory mission;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = raw;\r\n\r\n        mission.dificulty = data.ReadUint8(0);\r\n        mission.stockitemId_drops[0] = data.ReadUint16(1);\r\n        mission.stockitemId_drops[1] = data.ReadUint16(5);\r\n        mission.stockitemId_drops[2] = data.ReadUint16(9);\r\n        mission.stockitemId_drops[3] = data.ReadUint16(13);\r\n\r\n        mission.statsrequired[0] = data.ReadUint16(15);\r\n        mission.statsrequired[1] = data.ReadUint16(17);\r\n        mission.statsrequired[2] = data.ReadUint16(19);\r\n        mission.statsrequired[3] = data.ReadUint16(21);\r\n        mission.statsrequired[4] = data.ReadUint16(23);\r\n\r\n        mission.count = data.ReadUint16(25);\r\n\r\n        return mission;\r\n    }\r\n\r\n    function toWei(uint80 price) public returns(uint256 value){\r\n        value = price;\r\n        value = value * 1 finney;\r\n\r\n    }\r\n\r\n}\r\nlibrary GlobalTypes{\r\n    using Serializer for Serializer.DataComponent;\r\n\r\n    struct Global\r\n    {\r\n        uint32 m_LastHeroId; // 0\r\n        uint32 m_LastItem; // 4\r\n        uint8 m_Unused8; // 8\r\n        uint8 m_Unused9; // 9\r\n        uint8 m_Unused10; // 10\r\n        uint8 m_Unused11; // 11\r\n    }\r\n\r\n    function SerializeGlobal(Global global) internal pure returns (bytes32)\r\n    {\r\n        Serializer.DataComponent memory data;\r\n        data.WriteUint32(0, global.m_LastHeroId);\r\n        data.WriteUint32(4, global.m_LastItem);\r\n        data.WriteUint8(8, global.m_Unused8);\r\n        data.WriteUint8(9, global.m_Unused9);\r\n        data.WriteUint8(10, global.m_Unused10);\r\n        data.WriteUint8(11, global.m_Unused11);\r\n\r\n        return data.m_Raw;\r\n    }\r\n\r\n    function DeserializeGlobal(bytes32 raw) internal pure returns (Global)\r\n    {\r\n        Global memory global;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = raw;\r\n\r\n        global.m_LastHeroId = data.ReadUint32(0);\r\n        global.m_LastItem = data.ReadUint32(4);\r\n        global.m_Unused8 = data.ReadUint8(8);\r\n        global.m_Unused9 = data.ReadUint8(9);\r\n        global.m_Unused10 = data.ReadUint8(10);\r\n        global.m_Unused11 = data.ReadUint8(11);\r\n\r\n        return global;\r\n    }\r\n\r\n\r\n}\r\nlibrary MarketTypes{\r\n    using Serializer for Serializer.DataComponent;\r\n\r\n    struct MarketListing\r\n    {\r\n        uint128 m_Price; // 0\r\n    }\r\n\r\n    function SerializeMarketListing(MarketListing listing) internal pure returns (bytes32)\r\n    {\r\n        Serializer.DataComponent memory data;\r\n        data.WriteUint128(0, listing.m_Price);\r\n\r\n        return data.m_Raw;\r\n    }\r\n\r\n    function DeserializeMarketListing(bytes32 raw) internal pure returns (MarketListing)\r\n    {\r\n        MarketListing memory listing;\r\n\r\n        Serializer.DataComponent memory data;\r\n        data.m_Raw = raw;\r\n\r\n        listing.m_Price = data.ReadUint128(0);\r\n\r\n        return listing;\r\n    }\r\n}\r\nlibrary Serializer{\r\n    struct DataComponent\r\n    {\r\n        bytes32 m_Raw;\r\n    }\r\n\r\n    function ReadUint8(DataComponent memory self, uint32 offset) internal pure returns (uint8)\r\n    {\r\n        return uint8((self.m_Raw >> (offset * 8)) & 0xFF);\r\n    }\r\n\r\n    function WriteUint8(DataComponent memory self, uint32 offset, uint8 value) internal pure\r\n    {\r\n        self.m_Raw |= (bytes32(value) << (offset * 8));\r\n    }\r\n\r\n    function ReadUint16(DataComponent memory self, uint32 offset) internal pure returns (uint16)\r\n    {\r\n        return uint16((self.m_Raw >> (offset * 8)) & 0xFFFF);\r\n    }\r\n\r\n    function WriteUint16(DataComponent memory self, uint32 offset, uint16 value) internal pure\r\n    {\r\n        self.m_Raw |= (bytes32(value) << (offset * 8));\r\n    }\r\n\r\n    function ReadUint32(DataComponent memory self, uint32 offset) internal pure returns (uint32)\r\n    {\r\n        return uint32((self.m_Raw >> (offset * 8)) & 0xFFFFFFFF);\r\n    }\r\n\r\n    function WriteUint32(DataComponent memory self, uint32 offset, uint32 value) internal pure\r\n    {\r\n        self.m_Raw |= (bytes32(value) << (offset * 8));\r\n    }\r\n\r\n    function ReadUint64(DataComponent memory self, uint32 offset) internal pure returns (uint64)\r\n    {\r\n        return uint64((self.m_Raw >> (offset * 8)) & 0xFFFFFFFFFFFFFFFF);\r\n    }\r\n\r\n    function WriteUint64(DataComponent memory self, uint32 offset, uint64 value) internal pure\r\n    {\r\n        self.m_Raw |= (bytes32(value) << (offset * 8));\r\n    }\r\n\r\n    function ReadUint80(DataComponent memory self, uint32 offset) internal pure returns (uint80)\r\n    {\r\n        return uint80((self.m_Raw >> (offset * 8)) & 0xFFFFFFFFFFFFFFFFFFFF);\r\n    }\r\n\r\n    function WriteUint80(DataComponent memory self, uint32 offset, uint80 value) internal pure\r\n    {\r\n        self.m_Raw |= (bytes32(value) << (offset * 8));\r\n    }\r\n\r\n    function ReadUint128(DataComponent memory self, uint128 offset) internal pure returns (uint128)\r\n    {\r\n        return uint128((self.m_Raw >> (offset * 8)) & 0xFFFFFFFFFFFFFFFFFFFF);\r\n    }\r\n\r\n    function WriteUint128(DataComponent memory self, uint32 offset, uint128 value) internal pure\r\n    {\r\n        self.m_Raw |= (bytes32(value) << (offset * 8));\r\n    }\r\n\r\n    function ReadAddress(DataComponent memory self, uint32 offset) internal pure returns (address)\r\n    {\r\n        return address((self.m_Raw >> (offset * 8)) & (\r\n        (0xFFFFFFFF << 0)  |\r\n        (0xFFFFFFFF << 32) |\r\n        (0xFFFFFFFF << 64) |\r\n        (0xFFFFFFFF << 96) |\r\n        (0xFFFFFFFF << 128)\r\n        ));\r\n    }\r\n\r\n    function WriteAddress(DataComponent memory self, uint32 offset, address value) internal pure\r\n    {\r\n        self.m_Raw |= (bytes32(value) << (offset * 8));\r\n    }\r\n}\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\nlibrary SafeMath32 {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint32 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint32 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint32 a, uint32 b) internal pure returns (uint32) {\r\n        uint32 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\nlibrary SafeMath16 {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint16 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint16 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        uint16 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\nlibrary SafeMath8 {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint8 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint8 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint8 a, uint8 b) internal pure returns (uint8) {\r\n        uint8 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ProfitManager\r\n{\r\n    address public m_Owner;\r\n    bool public m_Paused;\r\n    AbstractDatabase m_Database= AbstractDatabase(0x400d188e1c21d592820df1f2f8cf33b3a13a377e);\r\n\r\n    modifier NotWhilePaused()\r\n    {\r\n        require(m_Paused == false);\r\n        _;\r\n    }\r\n    modifier OnlyOwner(){\r\n    require(msg.sender == m_Owner);\r\n    _;\r\n}\r\n\r\n    address constant NullAddress = 0;\r\n\r\n    //Market\r\n    uint256 constant ProfitFundsCategory = 14;\r\n    uint256 constant WithdrawalFundsCategory = 15;\r\n    uint256 constant HeroMarketCategory = 16;\r\n    \r\n    //ReferalCategory\r\n    uint256 constant ReferalCategory = 237;\r\n\r\n    function ProfitManager() public {\r\n    m_Owner = msg.sender;\r\n    m_Paused = true;\r\n}\r\n    function Unpause() public OnlyOwner()\r\n    {\r\n        m_Paused = false;\r\n    }\r\n\r\n    function Pause() public OnlyOwner()\r\n    {\r\n        require(m_Paused == false);\r\n\r\n        m_Paused = true;\r\n    }\r\n\r\n    // 1 write\r\n    function WithdrawProfitFunds(uint256 withdraw_amount, address beneficiary) public NotWhilePaused() OnlyOwner()\r\n    {\r\n        uint256 profit_funds = uint256(m_Database.Load(NullAddress, ProfitFundsCategory, 0));\r\n        require(withdraw_amount > 0);\r\n        require(withdraw_amount <= profit_funds);\r\n        require(beneficiary != address(0));\r\n        require(beneficiary != address(this));\r\n        require(beneficiary != address(m_Database));\r\n\r\n        profit_funds -= withdraw_amount;\r\n\r\n        m_Database.Store(NullAddress, ProfitFundsCategory, 0, bytes32(profit_funds));\r\n\r\n        m_Database.TransferFunds(beneficiary, withdraw_amount);\r\n    }\r\n\r\n    // 1 write\r\n    function WithdrawWinnings(uint256 withdraw_amount) public NotWhilePaused()\r\n    {\r\n\r\n        require(withdraw_amount > 0);\r\n\r\n        uint256 withdrawal_funds = uint256(m_Database.Load(msg.sender, WithdrawalFundsCategory, 0));\r\n        require(withdraw_amount <= withdrawal_funds);\r\n\r\n        withdrawal_funds -= withdraw_amount;\r\n\r\n        m_Database.Store(msg.sender, WithdrawalFundsCategory, 0, bytes32(withdrawal_funds));\r\n\r\n        m_Database.TransferFunds(msg.sender, withdraw_amount);\r\n    }\r\n\r\n    function GetProfitFunds() view public OnlyOwner() returns (uint256 funds)\r\n    {\r\n        uint256 profit_funds = uint256(m_Database.Load(NullAddress, ProfitFundsCategory, 0));\r\n        return profit_funds;\r\n    }\r\n    function GetWithdrawalFunds(address target) view public NotWhilePaused() returns (uint256 funds)\r\n    {\r\n        funds = uint256(m_Database.Load(target, WithdrawalFundsCategory, 0));\r\n    }\r\n\r\n}\r\n\r\ncontract AbstractDatabase\r\n{\r\n    function() public payable;\r\n    function ChangeOwner(address new_owner) public;\r\n    function ChangeOwner2(address new_owner) public;\r\n    function Store(address user, uint256 category, uint256 slot, bytes32 data) public;\r\n    function Load(address user, uint256 category, uint256 index) public view returns (bytes32);\r\n    function TransferFunds(address target, uint256 transfer_amount) public;\r\n    function getRandom(uint256 upper, uint8 seed) public returns (uint256 number);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"withdraw_amount\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"WithdrawProfitFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"GetWithdrawalFunds\",\"outputs\":[{\"name\":\"funds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"withdraw_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawWinnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_Paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"m_Owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetProfitFunds\",\"outputs\":[{\"name\":\"funds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"ProfitManager","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://137a6e9dcffb848f2f786d22c5e38b2bd67373ce2ce6094bdd6a44b1b9fe938c"}]}