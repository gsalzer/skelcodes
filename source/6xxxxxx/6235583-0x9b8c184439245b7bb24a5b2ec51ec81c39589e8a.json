{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\ncontract Owner {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Owner(address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    function changeOwner(address _newOwnerAddr) public onlyOwner {\r\n        require(_newOwnerAddr != address(0));\r\n        owner = _newOwnerAddr;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract KIMEX is Owner {\r\n    using SafeMath for uint256;\r\n\r\n    string public constant name = \"KIMEX\";\r\n    string public constant symbol = \"KMX\";\r\n    uint public constant decimals = 18;\r\n    uint256 constant public totalSupply = 250000000 * 10 ** 18; // 375 mil tokens will be supplied\r\n  \r\n    mapping(address => uint256) internal balances;\r\n    mapping(address => mapping (address => uint256)) internal allowed;\r\n\r\n    address public adminAddress;\r\n    address public walletAddress;\r\n    address public founderAddress;\r\n    address public teamAddress;\r\n\r\n    mapping(address => bool) public whiteList;\r\n    mapping(address => uint256) public totalInvestedAmountOf;\r\n\r\n    uint constant lockPeriod1 = 1 years; // 1nd locked period for tokens allocation of founder and team\r\n   \r\n    uint constant NOT_SALE = 0; // Not in sales\r\n    uint constant IN_SALE = 1;  // In sales\r\n    uint constant END_SALE = 2; // End sales\r\n\r\n    uint256 public constant salesAllocation = 150000000 * 10 ** 18; // 150 mil tokens allocated for sales\r\n    uint256 public constant reservedAllocation = 22500000 * 10 ** 18; // 22.5 mil tokens allocated for reserved, bounty campaigns, ICO partners, and bonus fund\r\n    uint256 public constant founderAllocation = 50000000 * 10 ** 18; // 50 mil tokens allocated for founders\r\n    uint256 public constant teamAllocation = 22500000 * 10 ** 18; // 22.5 mil tokens allocated for team\r\n    uint256 public constant minInvestedCap = 5000 * 10 ** 18; // 5000 ether for softcap \r\n    uint256 public constant minInvestedAmount = 0.1 * 10 ** 18; // 0.1 ether for mininum ether contribution per transaction\r\n    \r\n    uint saleState;\r\n    uint256 totalInvestedAmount;\r\n    uint public icoStartTime;\r\n    uint public icoEndTime;\r\n    bool public inActive;\r\n    bool public isSelling;\r\n    bool public isTransferable;\r\n    uint public founderAllocatedTime = 1;\r\n    uint public teamAllocatedTime = 1;\r\n    uint256 public icoStandardPrice;\r\n \r\n    uint256 public totalRemainingTokensForSales; // Total tokens remaining for sales\r\n    uint256 public totalReservedTokenAllocation; // Total tokens allocated for reserved and bonuses\r\n    uint256 public totalLoadedRefund; // Total ether will be loaded to contract for refund\r\n    uint256 public totalRefundedAmount; // Total ether refunded to investors\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value); // ERC20 standard event\r\n    event Transfer(address indexed from, address indexed to, uint256 value); // ERC20 standard event\r\n\r\n    event ModifyWhiteList(address investorAddress, bool isWhiteListed);  // Add or remove investor's address to or from white list\r\n    event StartICO(uint state); // Start ICO sales\r\n    event EndICO(uint state); // End ICO sales\r\n    \r\n    event SetICOPrice(uint256 price); // Set ICO standard price\r\n    \r\n    \r\n    event IssueTokens(address investorAddress, uint256 amount, uint256 tokenAmount, uint state); // Issue tokens to investor\r\n    event AllocateTokensForFounder(address founderAddress, uint256 founderAllocatedTime, uint256 tokenAmount); // Allocate tokens to founders' address\r\n    event AllocateTokensForTeam(address teamAddress, uint256 teamAllocatedTime, uint256 tokenAmount); // Allocate tokens to team's address\r\n    event AllocateReservedTokens(address reservedAddress, uint256 tokenAmount); // Allocate reserved tokens\r\n    event AllocateSalesTokens(address salesAllocation, uint256 tokenAmount); // Allocate sales tokens\r\n    \r\n\r\n    modifier isActive() {\r\n        require(inActive == false);\r\n        _;\r\n    }\r\n\r\n    modifier isInSale() {\r\n        require(isSelling == true);\r\n        _;\r\n    }\r\n\r\n    modifier transferable() {\r\n        require(isTransferable == true);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrAdminOrPortal() {\r\n        require(msg.sender == owner || msg.sender == adminAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrAdmin() {\r\n        require(msg.sender == owner || msg.sender == adminAddress);\r\n        _;\r\n    }\r\n\r\n    function KIMEX(address _walletAddr, address _adminAddr) public Owner(msg.sender) {\r\n        require(_walletAddr != address(0));\r\n        require(_adminAddr != address(0));\r\n\t\t\r\n        walletAddress = _walletAddr;\r\n        adminAddress = _adminAddr;\r\n        inActive = true;\r\n        totalInvestedAmount = 0;\r\n        totalRemainingTokensForSales = salesAllocation;\r\n        totalReservedTokenAllocation = reservedAllocation;\r\n    }\r\n\r\n    // Fallback function for token purchasing  \r\n    function () external payable isActive isInSale {\r\n        uint state = getCurrentState();\r\n        require(state < END_SALE);\r\n        require(msg.value >= minInvestedAmount);\r\n       \r\n        if (state <= IN_SALE) {\r\n            return issueTokensForICO(state);\r\n        }\r\n        revert();\r\n    }\r\n\r\n    // Load ether amount to contract for refunding or revoking\r\n    function loadFund() external payable {\r\n        require(msg.value > 0);\r\n\t\t\r\n        totalLoadedRefund = totalLoadedRefund.add(msg.value);\r\n    }\r\n\r\n    // ERC20 standard function\r\n    function transfer(address _to, uint256 _value) external transferable returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // ERC20 standard function\r\n    function transferFrom(address _from, address _to, uint256 _value) external transferable returns (bool) {\r\n        require(_to != address(0));\r\n        require(_from != address(0));\r\n        require(_value > 0);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // ERC20 standard function\r\n    function approve(address _spender, uint256 _value) external transferable returns (bool) {\r\n        require(_spender != address(0));\r\n        require(_value > 0);\r\n\t\t\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // Modify white list\r\n    function modifyWhiteList(address[] _investorAddrs, bool _isWhiteListed) external isActive onlyOwnerOrAdminOrPortal returns(bool) {\r\n        for (uint256 i = 0; i < _investorAddrs.length; i++) {\r\n            whiteList[_investorAddrs[i]] = _isWhiteListed;\r\n            emit ModifyWhiteList(_investorAddrs[i], _isWhiteListed);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Start ICO\r\n    function startICO() external isActive onlyOwnerOrAdmin returns (bool) {\r\n        require(icoStandardPrice > 0);\r\n        saleState = IN_SALE;\r\n        icoStartTime = now;\r\n        isSelling = true;\r\n        emit StartICO(saleState);\r\n        return true;\r\n    }\r\n\r\n    // End ICO\r\n    function endICO() external isActive onlyOwnerOrAdmin returns (bool) {\r\n        require(icoEndTime == 0);\r\n\t\t\r\n        saleState = END_SALE;\r\n        isSelling = false;\r\n        icoEndTime = now;\r\n        emit EndICO(saleState);\r\n        return true;\r\n    }\r\n    \r\n    // Set ICO price including ICO standard price\r\n    function setICOPrice(uint256 _tokenPerEther) external onlyOwnerOrAdmin returns(bool) {\r\n        require(_tokenPerEther > 0);\r\n    \t\t\r\n        icoStandardPrice = _tokenPerEther;\r\n        emit SetICOPrice(icoStandardPrice);\r\n        return true;\r\n    }\r\n    // Activate token sale function\r\n    function activate() external onlyOwner {\r\n        inActive = false;\r\n    }\r\n\r\n    // Deacivate token sale function\r\n    function deActivate() external onlyOwner {\r\n        inActive = true;\r\n    }\r\n\r\n    // Enable transfer feature of tokens\r\n    function enableTokenTransfer() external isActive onlyOwner {\r\n        isTransferable = true;\r\n    }\r\n\r\n    // Modify wallet\r\n    function changeWallet(address _newAddress) external onlyOwner {\r\n        require(_newAddress != address(0));\r\n        require(walletAddress != _newAddress);\r\n        walletAddress = _newAddress;\r\n    }\r\n\r\n    // Modify admin\r\n    function changeAdminAddress(address _newAddress) external onlyOwner {\r\n        require(_newAddress != address(0));\r\n        require(adminAddress != _newAddress);\r\n        adminAddress = _newAddress;\r\n    }\r\n  \r\n    // Modify founder address to receive founder tokens allocation\r\n    function changeFounderAddress(address _newAddress) external onlyOwnerOrAdmin {\r\n        require(_newAddress != address(0));\r\n        require(founderAddress != _newAddress);\r\n        founderAddress = _newAddress;\r\n    }\r\n\r\n    // Modify team address to receive team tokens allocation\r\n    function changeTeamAddress(address _newAddress) external onlyOwnerOrAdmin {\r\n        require(_newAddress != address(0));\r\n        require(teamAddress != _newAddress);\r\n        teamAddress = _newAddress;\r\n    }\r\n\r\n    // Allocate tokens for founder vested gradually for 1 year\r\n    function allocateTokensForFounder() external isActive onlyOwnerOrAdmin {\r\n        require(saleState == END_SALE);\r\n        require(founderAddress != address(0));\r\n        uint256 amount;\r\n        if (founderAllocatedTime == 1) {\r\n            amount = founderAllocation;\r\n            balances[founderAddress] = balances[founderAddress].add(amount);\r\n            emit AllocateTokensForFounder(founderAddress, founderAllocatedTime, amount);\r\n            founderAllocatedTime = 2;\r\n            return;\r\n        }\r\n        revert();\r\n    }\r\n\r\n    // Allocate tokens for team vested gradually for 1 year\r\n    function allocateTokensForTeam() external isActive onlyOwnerOrAdmin {\r\n        require(saleState == END_SALE);\r\n        require(teamAddress != address(0));\r\n        uint256 amount;\r\n        if (teamAllocatedTime == 1) {\r\n            amount = teamAllocation * 40/100;\r\n            balances[teamAddress] = balances[teamAddress].add(amount);\r\n            emit AllocateTokensForTeam(teamAddress, teamAllocatedTime, amount);\r\n            teamAllocatedTime = 2;\r\n            return;\r\n        }\r\n        if (teamAllocatedTime == 2) {\r\n            require(now >= icoEndTime + lockPeriod1);\r\n            amount = teamAllocation * 60/100;\r\n            balances[teamAddress] = balances[teamAddress].add(amount);\r\n            emit AllocateTokensForTeam(teamAddress, teamAllocatedTime, amount);\r\n            teamAllocatedTime = 3;\r\n            return;\r\n        }\r\n        revert();\r\n    }\r\n\r\n    // Allocate reserved tokens\r\n    function allocateReservedTokens(address _addr, uint _amount) external isActive onlyOwnerOrAdmin {\r\n        require(_amount > 0);\r\n        require(_addr != address(0));\r\n\t\t\r\n        balances[_addr] = balances[_addr].add(_amount);\r\n        totalReservedTokenAllocation = totalReservedTokenAllocation.sub(_amount);\r\n        emit AllocateReservedTokens(_addr, _amount);\r\n    }\r\n    \r\n    // Allocate sales tokens\r\n    function allocateSalesTokens(address _addr, uint _amount) external isActive onlyOwnerOrAdmin {\r\n        require(_amount > 0);\r\n        require(_addr != address(0));\r\n\t\t\r\n        balances[_addr] = balances[_addr].add(_amount);\r\n        totalRemainingTokensForSales = totalRemainingTokensForSales.sub(_amount);\r\n        emit AllocateSalesTokens(_addr, _amount);\r\n    }\r\n\r\n    // ERC20 standard function\r\n    function allowance(address _owner, address _spender) external constant returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // ERC20 standard function\r\n    function balanceOf(address _owner) external constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Get current sales state\r\n    function getCurrentState() public view returns(uint256) {\r\n        return saleState;\r\n    }\r\n\r\n    // Get softcap reaching status\r\n    function isSoftCapReached() public view returns (bool) {\r\n        return totalInvestedAmount >= minInvestedCap;\r\n    }\r\n    \r\n     // Issue tokens to normal investors through ICO rounds\r\n    function issueTokensForICO(uint _state) private {\r\n        uint256 price = icoStandardPrice;\r\n        issueTokens(price, _state);\r\n    }\r\n\r\n    // Issue tokens to investors and transfer ether to wallet\r\n    function issueTokens(uint256 _price, uint _state) private {\r\n        require(walletAddress != address(0));\r\n\t\t\r\n        uint tokenAmount = msg.value.mul(_price).mul(10**18).div(1 ether);\r\n        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\r\n        totalInvestedAmountOf[msg.sender] = totalInvestedAmountOf[msg.sender].add(msg.value);\r\n        totalRemainingTokensForSales = totalRemainingTokensForSales.sub(tokenAmount);\r\n        totalInvestedAmount = totalInvestedAmount.add(msg.value);\r\n        walletAddress.transfer(msg.value);\r\n        emit IssueTokens(msg.sender, msg.value, tokenAmount, _state);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"loadFund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeAdminAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isTransferable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeFounderAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReservedTokenAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenPerEther\",\"type\":\"uint256\"}],\"name\":\"setICOPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allocateSalesTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"salesAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeTeamAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLoadedRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allocateReservedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateTokensForTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStandardPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"walletAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalInvestedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startICO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSoftCapReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerAddr\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRemainingTokensForSales\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investorAddrs\",\"type\":\"address[]\"},{\"name\":\"_isWhiteListed\",\"type\":\"bool\"}],\"name\":\"modifyWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSelling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRefundedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocateTokensForFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderAllocatedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestedCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAllocatedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"inActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deActivate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_walletAddr\",\"type\":\"address\"},{\"name\":\"_adminAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isWhiteListed\",\"type\":\"bool\"}],\"name\":\"ModifyWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"StartICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"EndICO\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetICOPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"IssueTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"founderAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"founderAllocatedTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"AllocateTokensForFounder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"teamAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"teamAllocatedTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"AllocateTokensForTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"reservedAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"AllocateReservedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"salesAllocation\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"AllocateSalesTokens\",\"type\":\"event\"}]","ContractName":"KIMEX","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007f17751fc1381f337ec67f3e6b02776ad079d31400000000000000000000000044922948f3bb63ae25a73043128feec8f514e33f","Library":"","SwarmSource":"bzzr://70115fbe0f1fb59e260709461faa8f57ad1758a768e080e956aaee65ab52a722"}]}