{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/v2/auctions/ArtistAcceptingBids.sol\r\n\r\n/**\r\n* Auction interface definition - event and method definitions\r\n*\r\n* https://www.knownorigin.io/\r\n*/\r\ninterface IAuction {\r\n\r\n  event BidPlaced(\r\n    address indexed _bidder,\r\n    uint256 indexed _editionNumber,\r\n    uint256 indexed _amount\r\n  );\r\n\r\n  event BidIncreased(\r\n    address indexed _bidder,\r\n    uint256 indexed _editionNumber,\r\n    uint256 indexed _amount\r\n  );\r\n\r\n  event BidWithdrawn(\r\n    address indexed _bidder,\r\n    uint256 indexed _editionNumber\r\n  );\r\n\r\n  event BidAccepted(\r\n    address indexed _bidder,\r\n    uint256 indexed _editionNumber,\r\n    uint256 indexed _tokenId,\r\n    uint256 _amount\r\n  );\r\n\r\n  event BidderRefunded(\r\n    uint256 indexed _editionNumber,\r\n    address indexed _bidder,\r\n    uint256 indexed _amount\r\n  );\r\n\r\n  event AuctionCancelled(\r\n    uint256 indexed _editionNumber\r\n  );\r\n\r\n  function placeBid(uint256 _editionNumber) public payable returns (bool success);\r\n\r\n  function increaseBid(uint256 _editionNumber) public payable returns (bool success);\r\n\r\n  function withdrawBid(uint256 _editionNumber) public returns (bool success);\r\n\r\n  function acceptBid(uint256 _editionNumber) public returns (uint256 tokenId);\r\n\r\n  function cancelAuction(uint256 _editionNumber) public returns (bool success);\r\n}\r\n\r\n/**\r\n* Minimal interface definition for KODA V2 contract calls\r\n*\r\n* https://www.knownorigin.io/\r\n*/\r\ninterface IKODAV2 {\r\n  function mint(address _to, uint256 _editionNumber) external returns (uint256);\r\n\r\n  function editionExists(uint256 _editionNumber) external returns (bool);\r\n\r\n  function totalRemaining(uint256 _editionNumber) external view returns (uint256);\r\n\r\n  function artistCommission(uint256 _editionNumber) external view returns (address _artistAccount, uint256 _artistCommission);\r\n}\r\n\r\n/**\r\n* @title Artists accepting bidding contract for KnownOrigin (KODA)\r\n*\r\n* Rules:\r\n* Can only bid for an edition which is enabled\r\n* Can only add new bids higher than previous highest bid plus minimum bid amount\r\n* Can increase your bid, only if you are the top current bidder\r\n* Once outbid, original bidder has ETH returned\r\n* Cannot double bid once you are already the highest bidder, can only call increaseBid()\r\n* Only the defined controller address can accept the bid\r\n* If a bid is revoked, the auction remains open however no highest bid exists\r\n* If the contract is Paused, no public actions can happen e.g. bids, increases, withdrawals\r\n* Managers of contract have full control over it act as a fallback in-case funds go missing or errors are found\r\n* On accepting of any bid, funds are split to KO and Artists - optional 3rd party split not currently supported\r\n* If an edition is sold out, the auction is stopped, manual refund required by bidder or owner\r\n* Upon cancelling a bid which is in flight, funds are returned and contract stops further bids on the edition\r\n* Artists commissions and address are pulled from the KODA contract and are not based on the controller address\r\n*\r\n* Scenario:\r\n* 1) Config artist (Dave) & edition (1000)\r\n* 2) Bob places a bid on edition 1000 for 1 ETH\r\n* 3) Alice places a higher bid of 1.5ETH, overriding Bobs position as the leader, sends Bobs 1 ETH back and taking 1st place\r\n* 4) Dave accepts Alice's bid\r\n* 5) KODA token generated and transferred to Alice, funds are split between KO and Artist\r\n*\r\n* https://www.knownorigin.io/\r\n*\r\n* BE ORIGINAL. BUY ORIGINAL.\r\n*/\r\ncontract ArtistAcceptingBids is Ownable, Pausable, IAuction {\r\n  using SafeMath for uint256;\r\n\r\n  // A mapping of the controller address to the edition number\r\n  mapping(uint256 => address) internal editionNumberToArtistControlAddress;\r\n\r\n  // Enabled/disable the auction for the edition number\r\n  mapping(uint256 => bool) internal enabledEditions;\r\n\r\n  // Edition to current highest bidders address\r\n  mapping(uint256 => address) internal editionHighestBid;\r\n\r\n  // Mapping for edition -> bidder -> bid amount\r\n  mapping(uint256 => mapping(address => uint256)) internal editionBids;\r\n\r\n  // Min increase in bid amount\r\n  uint256 public minBidAmount = 0.01 ether;\r\n\r\n  // Interface into the KODA world\r\n  IKODAV2 public kodaAddress;\r\n\r\n  // KO account which can receive commission\r\n  address public koCommissionAccount;\r\n\r\n  ///////////////\r\n  // Modifiers //\r\n  ///////////////\r\n\r\n  // Checks the auction is enabled\r\n  modifier whenAuctionEnabled(uint256 _editionNumber) {\r\n    require(enabledEditions[_editionNumber], \"Edition is not enabled for auctions\");\r\n    _;\r\n  }\r\n\r\n  // Checks the msg.sender is the artists control address or the auction owner\r\n  modifier whenCallerIsController(uint256 _editionNumber) {\r\n    require(editionNumberToArtistControlAddress[_editionNumber] == msg.sender || msg.sender == owner, \"Edition not managed by calling address\");\r\n    _;\r\n  }\r\n\r\n  // Checks the bid is higher than the current amount + min bid\r\n  modifier whenPlacedBidIsAboveMinAmount(uint256 _editionNumber) {\r\n    address currentHighestBidder = editionHighestBid[_editionNumber];\r\n    uint256 currentHighestBidderAmount = editionBids[_editionNumber][currentHighestBidder];\r\n    require(currentHighestBidderAmount.add(minBidAmount) <= msg.value, \"Bids must be higher than previous bids plus minimum bid\");\r\n    _;\r\n  }\r\n\r\n  // Checks the bid is higher than the min bid\r\n  modifier whenBidIncreaseIsAboveMinAmount() {\r\n    require(minBidAmount <= msg.value, \"Bids must be higher than minimum bid amount\");\r\n    _;\r\n  }\r\n\r\n  // Check the caller in not already the highest bidder\r\n  modifier whenCallerNotAlreadyTheHighestBidder(uint256 _editionNumber) {\r\n    address currentHighestBidder = editionHighestBid[_editionNumber];\r\n    require(currentHighestBidder != msg.sender, \"Cant bid anymore, you are already the current highest\");\r\n    _;\r\n  }\r\n\r\n  // Checks msg.sender is the highest bidder\r\n  modifier whenCallerIsHighestBidder(uint256 _editionNumber) {\r\n    require(editionHighestBid[_editionNumber] == msg.sender, \"Can only withdraw a bid if you are the highest bidder\");\r\n    _;\r\n  }\r\n\r\n  // Only when editions are not sold out in KODA\r\n  modifier whenEditionNotSoldOut(uint256 _editionNumber) {\r\n    uint256 totalRemaining = kodaAddress.totalRemaining(_editionNumber);\r\n    require(totalRemaining > 0, \"Unable to accept any more bids, edition is sold out\");\r\n    _;\r\n  }\r\n\r\n  // Only when edition exists in KODA\r\n  modifier whenEditionExists(uint256 _editionNumber) {\r\n    bool editionExists = kodaAddress.editionExists(_editionNumber);\r\n    require(editionExists, \"Edition does not exist\");\r\n    _;\r\n  }\r\n\r\n  /////////////////\r\n  // Constructor //\r\n  /////////////////\r\n\r\n  // Set the caller as the default KO account\r\n  constructor(IKODAV2 _kodaAddress) public {\r\n    kodaAddress = _kodaAddress;\r\n    koCommissionAccount = msg.sender;\r\n  }\r\n\r\n  //////////////////////////\r\n  // Core Auction Methods //\r\n  //////////////////////////\r\n\r\n  /**\r\n   * @dev Public method for placing a bid, reverts if:\r\n   * - Contract is Paused\r\n   * - Edition provided is not valid\r\n   * - Edition provided is not configured for auctions\r\n   * - Edition provided is sold out\r\n   * - msg.sender is already the highest bidder\r\n   * - msg.value is not greater than highest bid + minimum amount\r\n   * @dev refunds the previous bidders ether if the bid is overwritten\r\n   * @return true on success\r\n   */\r\n  function placeBid(uint256 _editionNumber)\r\n  public\r\n  payable\r\n  whenNotPaused\r\n  whenEditionExists(_editionNumber)\r\n  whenAuctionEnabled(_editionNumber)\r\n  whenPlacedBidIsAboveMinAmount(_editionNumber)\r\n  whenCallerNotAlreadyTheHighestBidder(_editionNumber)\r\n  whenEditionNotSoldOut(_editionNumber)\r\n  returns (bool success)\r\n  {\r\n    // Grab the previous holders bid so we can refund it\r\n    _refundHighestBidder(_editionNumber);\r\n\r\n    // Keep a record of the current users bid (previous bidder has been refunded)\r\n    editionBids[_editionNumber][msg.sender] = msg.value;\r\n\r\n    // Update the highest bid to be the latest bidder\r\n    editionHighestBid[_editionNumber] = msg.sender;\r\n\r\n    // Emit event\r\n    emit BidPlaced(msg.sender, _editionNumber, msg.value);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Public method for increasing your bid, reverts if:\r\n   * - Contract is Paused\r\n   * - Edition provided is not valid\r\n   * - Edition provided is not configured for auctions\r\n   * - Edition provided is sold out\r\n   * - msg.sender is not the current highest bidder\r\n   * @return true on success\r\n   */\r\n  function increaseBid(uint256 _editionNumber)\r\n  public\r\n  payable\r\n  whenNotPaused\r\n  whenBidIncreaseIsAboveMinAmount\r\n  whenEditionExists(_editionNumber)\r\n  whenAuctionEnabled(_editionNumber)\r\n  whenEditionNotSoldOut(_editionNumber)\r\n  whenCallerIsHighestBidder(_editionNumber)\r\n  returns (bool success)\r\n  {\r\n    // Bump the current highest bid by provided amount\r\n    editionBids[_editionNumber][msg.sender] = editionBids[_editionNumber][msg.sender].add(msg.value);\r\n\r\n    // Emit event\r\n    emit BidIncreased(msg.sender, _editionNumber, editionBids[_editionNumber][msg.sender]);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Public method for withdrawing your bid, reverts if:\r\n   * - Contract is Paused\r\n   * - msg.sender is not the current highest bidder\r\n   * @dev removes current highest bid so there is no current highest bidder\r\n   * @return true on success\r\n   */\r\n  function withdrawBid(uint256 _editionNumber)\r\n  public\r\n  whenNotPaused\r\n  whenEditionExists(_editionNumber)\r\n  whenCallerIsHighestBidder(_editionNumber)\r\n  returns (bool success)\r\n  {\r\n    // get current highest bid and refund it\r\n    _refundHighestBidder(_editionNumber);\r\n\r\n    // Fire event\r\n    emit BidWithdrawn(msg.sender, _editionNumber);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Method for cancelling an auction, only called from contract owner\r\n   * @dev refunds previous highest bidders bid\r\n   * @dev removes current highest bid so there is no current highest bidder\r\n   * @return true on success\r\n   */\r\n  function cancelAuction(uint256 _editionNumber)\r\n  public\r\n  onlyOwner\r\n  whenEditionExists(_editionNumber)\r\n  returns (bool success)\r\n  {\r\n    // get current highest bid and refund it\r\n    _refundHighestBidder(_editionNumber);\r\n\r\n    // Disable the auction\r\n    enabledEditions[_editionNumber] = false;\r\n\r\n    // Fire event\r\n    emit AuctionCancelled(_editionNumber);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Method for accepting the highest bid, only called by edition creator, reverts if:\r\n   * - Contract is Paused\r\n   * - msg.sender is not the edition controller\r\n   * - Edition provided is not valid\r\n   * @dev Mints a new token in KODA contract\r\n   * @dev Splits bid amount to KO and Artist, based on KODA contract defined values\r\n   * @dev Removes current highest bid so there is no current highest bidder\r\n   * @dev If no more editions are available the auction is stopped\r\n   * @return the generated tokenId on success\r\n   */\r\n  function acceptBid(uint256 _editionNumber)\r\n  public\r\n  whenNotPaused\r\n  whenCallerIsController(_editionNumber) // Checks only the controller can call this\r\n  whenAuctionEnabled(_editionNumber) // Checks auction is still enabled\r\n  returns (uint256 tokenId)\r\n  {\r\n    // Get total remaining here so we can use it below\r\n    uint256 totalRemaining = kodaAddress.totalRemaining(_editionNumber);\r\n    require(totalRemaining > 0, \"Unable to accept bid, edition is sold out\");\r\n\r\n    // Get the winner of the bidding action\r\n    address winningAccount = editionHighestBid[_editionNumber];\r\n    require(winningAccount != address(0), \"Cannot win an auction when there is no highest bidder\");\r\n\r\n    uint256 winningBidAmount = editionBids[_editionNumber][winningAccount];\r\n    require(winningBidAmount >= 0, \"Cannot win an auction when no bid amount set\");\r\n\r\n    // Mint a new token to the winner\r\n    uint256 _tokenId = kodaAddress.mint(winningAccount, _editionNumber);\r\n    require(_tokenId != 0, \"Failed to mint new token\");\r\n\r\n    // Get the commission and split bid amount accordingly\r\n    address artistAccount;\r\n    uint256 artistCommission;\r\n    (artistAccount, artistCommission) = kodaAddress.artistCommission(_editionNumber);\r\n\r\n    // Extract the artists commission and send it\r\n    uint256 artistPayment = winningBidAmount.div(100).mul(artistCommission);\r\n    if (artistPayment > 0) {\r\n      artistAccount.transfer(artistPayment);\r\n    }\r\n\r\n    // Send KO remaining amount\r\n    uint256 remainingCommission = winningBidAmount.sub(artistPayment);\r\n    if (remainingCommission > 0) {\r\n      koCommissionAccount.transfer(remainingCommission);\r\n    }\r\n\r\n    // Clear out highest bidder for this auction\r\n    delete editionHighestBid[_editionNumber];\r\n\r\n    // If the edition is sold out, disable the auction\r\n    if (totalRemaining.sub(1) == 0) {\r\n      enabledEditions[_editionNumber] = false;\r\n    }\r\n\r\n    // Fire event\r\n    emit BidAccepted(winningAccount, _editionNumber, _tokenId, winningBidAmount);\r\n\r\n    return _tokenId;\r\n  }\r\n\r\n  /**\r\n   * Returns funds of the previous highest bidder back to them if present\r\n   */\r\n  function _refundHighestBidder(uint256 _editionNumber) internal {\r\n    // Get current highest bidder\r\n    address currentHighestBidder = editionHighestBid[_editionNumber];\r\n\r\n    // Get current highest bid amount\r\n    uint256 currentHighestBiddersAmount = editionBids[_editionNumber][currentHighestBidder];\r\n\r\n    if (currentHighestBidder != address(0) && currentHighestBiddersAmount > 0) {\r\n\r\n      // Clear out highest bidder as there is no long one\r\n      delete editionHighestBid[_editionNumber];\r\n\r\n      // Refund it\r\n      currentHighestBidder.transfer(currentHighestBiddersAmount);\r\n\r\n      // Emit event\r\n      emit BidderRefunded(_editionNumber, currentHighestBidder, currentHighestBiddersAmount);\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////\r\n  // Public management methods //\r\n  ///////////////////////////////\r\n\r\n  /**\r\n   * @dev Enables the edition for auctions\r\n   * @dev Only callable from owner\r\n   */\r\n  function enableEdition(uint256 _editionNumber) onlyOwner public returns (bool) {\r\n    enabledEditions[_editionNumber] = true;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Disables the edition for auctions\r\n   * @dev Only callable from owner\r\n   */\r\n  function disableEdition(uint256 _editionNumber) onlyOwner public returns (bool) {\r\n    enabledEditions[_editionNumber] = false;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the edition artist control address\r\n   * @dev Only callable from owner\r\n   */\r\n  function setArtistsControlAddress(uint256 _editionNumber, address _address) onlyOwner public returns (bool) {\r\n    editionNumberToArtistControlAddress[_editionNumber] = _address;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the edition artist control address and enables the edition for auction\r\n   * @dev Only callable from owner\r\n   */\r\n  function setArtistsControlAddressAndEnabledEdition(uint256 _editionNumber, address _address) onlyOwner public returns (bool) {\r\n    enabledEditions[_editionNumber] = true;\r\n    editionNumberToArtistControlAddress[_editionNumber] = _address;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the minimum bid amount\r\n   * @dev Only callable from owner\r\n   */\r\n  function setMinBidAmount(uint256 _minBidAmount) onlyOwner public {\r\n    minBidAmount = _minBidAmount;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the KODA address\r\n   * @dev Only callable from owner\r\n   */\r\n  function setKodavV2(IKODAV2 _kodaAddress) onlyOwner public {\r\n    kodaAddress = _kodaAddress;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the KODA address\r\n   * @dev Only callable from owner\r\n   */\r\n  function setKoCommissionAccount(address _koCommissionAccount) public onlyOwner {\r\n    require(_koCommissionAccount != address(0), \"Invalid address\");\r\n    koCommissionAccount = _koCommissionAccount;\r\n  }\r\n\r\n  /////////////////////////////\r\n  // Manual Override methods //\r\n  /////////////////////////////\r\n\r\n  /**\r\n   * @dev Allows for the ability to extract ether so we can distribute to the correct bidders accordingly\r\n   * @dev Only callable from owner\r\n   */\r\n  function withdrawStuckEther(address _withdrawalAccount) onlyOwner public {\r\n    require(_withdrawalAccount != address(0), \"Invalid address provided\");\r\n    require(address(this).balance != 0, \"No more ether to withdraw\");\r\n    _withdrawalAccount.transfer(address(this).balance);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows for the ability to extract specific ether amounts so we can distribute to the correct bidders accordingly\r\n   * @dev Only callable from owner\r\n   */\r\n  function withdrawStuckEtherOfAmount(address _withdrawalAccount, uint256 _amount) onlyOwner public {\r\n    require(_withdrawalAccount != address(0), \"Invalid address provided\");\r\n    require(_amount != 0, \"Invalid amount to withdraw\");\r\n    require(address(this).balance >= _amount, \"No more ether to withdraw\");\r\n    _withdrawalAccount.transfer(_amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Manual override method for setting edition highest bid & the highest bidder to the provided address\r\n   * @dev Only callable from owner\r\n   */\r\n  function manualOverrideEditionHighestBidAndBidder(uint256 _editionNumber, address _bidder, uint256 _amount) onlyOwner public returns (bool) {\r\n    editionBids[_editionNumber][_bidder] = _amount;\r\n    editionHighestBid[_editionNumber] = _bidder;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Manual override method removing bidding values\r\n   * @dev Only callable from owner\r\n   */\r\n  function manualDeleteEditionBids(uint256 _editionNumber, address _bidder) onlyOwner public returns (bool) {\r\n    delete editionHighestBid[_editionNumber];\r\n    delete editionBids[_editionNumber][_bidder];\r\n    return true;\r\n  }\r\n\r\n  //////////////////////////\r\n  // Public query methods //\r\n  //////////////////////////\r\n\r\n  /**\r\n   * @dev Look up all the known data about the latest edition bidding round\r\n   * @dev Returns zeros for all values when not valid\r\n   */\r\n  function auctionDetails(uint256 _editionNumber) public view returns (bool _enabled, address _bidder, uint256 _value, address _controller) {\r\n    address highestBidder = editionHighestBid[_editionNumber];\r\n    uint256 bidValue = editionBids[_editionNumber][highestBidder];\r\n    address controlAddress = editionNumberToArtistControlAddress[_editionNumber];\r\n    return (\r\n    enabledEditions[_editionNumber],\r\n    highestBidder,\r\n    bidValue,\r\n    controlAddress\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Look up all the current highest bidder for the latest edition\r\n   * @dev Returns zeros for all values when not valid\r\n   */\r\n  function highestBidForEdition(uint256 _editionNumber) public view returns (address _bidder, uint256 _value) {\r\n    address highestBidder = editionHighestBid[_editionNumber];\r\n    uint256 bidValue = editionBids[_editionNumber][highestBidder];\r\n    return (highestBidder, bidValue);\r\n  }\r\n\r\n  /**\r\n   * @dev Check an edition is enabled for auction\r\n   */\r\n  function isEditionEnabled(uint256 _editionNumber) public view returns (bool) {\r\n    return enabledEditions[_editionNumber];\r\n  }\r\n\r\n  /**\r\n   * @dev Check which address can action a bid for the given edition\r\n   */\r\n  function editionController(uint256 _editionNumber) public view returns (address) {\r\n    return editionNumberToArtistControlAddress[_editionNumber];\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"increaseBid\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"highestBidForEdition\",\"outputs\":[{\"name\":\"_bidder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"withdrawBid\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawalAccount\",\"type\":\"address\"}],\"name\":\"withdrawStuckEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBidAmount\",\"type\":\"uint256\"}],\"name\":\"setMinBidAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBidAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"editionController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"koCommissionAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"disableEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"auctionDetails\",\"outputs\":[{\"name\":\"_enabled\",\"type\":\"bool\"},{\"name\":\"_bidder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_controller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_bidder\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manualOverrideEditionHighestBidAndBidder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_koCommissionAccount\",\"type\":\"address\"}],\"name\":\"setKoCommissionAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"manualDeleteEditionBids\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setArtistsControlAddressAndEnabledEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawalAccount\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckEtherOfAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kodaAddress\",\"type\":\"address\"}],\"name\":\"setKodavV2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setArtistsControlAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kodaAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"isEditionEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"enableEdition\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kodaAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BidIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"BidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_editionNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_bidder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BidderRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_editionNumber\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ArtistAcceptingBids","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fbeef911dc5821886e1dda71586d90ed28174b7d","Library":"","SwarmSource":"bzzr://01ed0b6b88e1a4af3c6a8fb273333a903e2d72b23b0c91c0df8bde0bb2904d3f"}]}