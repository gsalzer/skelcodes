{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity \"0.4.25\";\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\n// input  C:\\projects\\BTCS.CHFToken\\contracts\\Chftoken\\CryptoFranc.sol\r\n// flattened :  Wednesday, 24-Oct-18 14:07:18 UTC\r\ncontract InterestRateInterface {\r\n\r\n    uint256 public constant SCALEFACTOR = 1e18;\r\n\r\n    /// @notice get compounding level for currenct day\r\n    function getCurrentCompoundingLevel() public view returns (uint256);\r\n\r\n    /// @notice get compounding level for _date `_date`\r\n    /// @param _date The date \r\n    function getCompoundingLevelDate(uint256 _date) public view returns (uint256);\r\n\r\n}\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    /// total amount of tokens\r\n    function totalSupply() public view returns(uint256 supply);\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    // EVENTS\r\n    \r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\ncontract Ownable {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    // MODIFIERS\r\n\r\n    /// @dev Throws if called by any account other than the owner.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Throws if called by any account other than the new owner.\r\n    modifier onlyNewOwner() {\r\n        require(msg.sender == newOwner, \"Only New Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != 0,\"address is Null\");\r\n        _;\r\n    }\r\n\r\n    // CONSTRUCTORS\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    /// @param _newOwner The address to transfer ownership to.\r\n    \r\n    function transferOwnership(address _newOwner) public notNull(_newOwner) onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /// @dev Allow the new owner to claim ownership and so proving that the newOwner is valid.\r\n    function acceptOwnership() public onlyNewOwner {\r\n        address oldOwner = owner;\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n        emit OwnershipTransferred(oldOwner, owner);\r\n    }\r\n\r\n    // EVENTS\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n}\r\n\r\ncontract InterestRateNone is InterestRateInterface {\r\n    \r\n    /// @notice get compounding level for currenct day\r\n    function getCurrentCompoundingLevel() public view returns (uint256) {\r\n        return SCALEFACTOR;\r\n    }\r\n\r\n    /// @notice get compounding level for day `_date`\r\n    /// param _date The daynumber \r\n    function getCompoundingLevelDate(uint256 /* _date */) public view returns (uint256) {\r\n        return SCALEFACTOR;\r\n    }\r\n\r\n}\r\ncontract MigrationAgent is Ownable {\r\n\r\n    address public migrationToContract; // the contract to migrate to\r\n    address public migrationFromContract; // the conttactto migate from\r\n\r\n    // MODIFIERS\r\n    \r\n    modifier onlyMigrationFromContract() {\r\n        require(msg.sender == migrationFromContract, \"Only from migration contract\");\r\n        _;\r\n    }\r\n    // EXTERNAL FUNCTIONS\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /// @dev set contract to migrate to \r\n    /// @param _toContract Then contract address to migrate to\r\n    function startMigrateToContract(address _toContract) public onlyOwner {\r\n        migrationToContract = _toContract;\r\n        require(MigrationAgent(migrationToContract).isMigrationAgent(), \"not a migratable contract\");\r\n        emit StartMigrateToContract(address(this), _toContract);\r\n    }\r\n\r\n    /// @dev set contract to migrate from\r\n    /// @param _fromConstract Then contract address to migrate from\r\n    function startMigrateFromContract(address _fromConstract) public onlyOwner {\r\n        migrationFromContract = _fromConstract;\r\n        require(MigrationAgent(migrationFromContract).isMigrationAgent(), \"not a migratable contract\");\r\n        emit StartMigrateFromContract(_fromConstract, address(this));\r\n    }\r\n\r\n    /// @dev Each user calls the migrate function on the original contract to migrate the usersâ€™ tokens to the migration agent migrateFrom on the `migrationToContract` contract\r\n    function migrate() public;   \r\n\r\n    /// @dev migrageFrom is called from the migrating contract `migrationFromContract`\r\n    /// @param _from The account to be migrated into new contract\r\n    /// @param _value The token balance to be migrated\r\n    function migrateFrom(address _from, uint256 _value) public returns(bool);\r\n\r\n    /// @dev is a valid migration agent\r\n    /// @return true if contract is a migratable contract\r\n    function isMigrationAgent() public pure returns(bool) {\r\n        return true;\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n    // EVENTS\r\n\r\n    event StartMigrateToContract(address indexed fromConstract, address indexed toContract);\r\n\r\n    event StartMigrateFromContract(address indexed fromConstract, address indexed toContract);\r\n\r\n    event MigratedTo(address indexed owner, address indexed _contract, uint256 value);\r\n\r\n    event MigratedFrom(address indexed owner, address indexed _contract, uint256 value);\r\n}\r\ncontract Pausable is Ownable {\r\n\r\n    bool public paused = false;\r\n\r\n    // MODIFIERS\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"only when not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused, \"only when paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n\r\n    // EVENTS\r\n\r\n    event Pause();\r\n\r\n    event Unpause();\r\n}\r\n\r\ncontract Operator is Ownable {\r\n\r\n    address public operator;\r\n\r\n    // MODIFIERS\r\n\r\n    /**\r\n     * @dev modifier check for operator\r\n     */\r\n    modifier onlyOperator {\r\n        require(msg.sender == operator, \"Only Operator\");\r\n        _;\r\n    }\r\n\r\n    // CONSTRUCTORS\r\n\r\n    constructor() public {\r\n        operator = msg.sender;\r\n    }\r\n    /**\r\n     * @dev Transfer operator to `newOperator`.\r\n     *\r\n     * @param _newOperator   The address of the new operator\r\n     * @return balance Balance of the `_owner`.\r\n     */\r\n    function transferOperator(address _newOperator) public notNull(_newOperator) onlyOwner {\r\n        operator = _newOperator;\r\n        emit TransferOperator(operator, _newOperator);\r\n    }\r\n\r\n    // EVENTS\r\n    \r\n    event TransferOperator(address indexed from, address indexed to);\r\n}\r\n\r\ncontract ERC20Token is Ownable, ERC20Interface {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    // CONSTRUCTORS\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    // EXTERNAL FUNCTIONS\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n\r\n        return transferInternal(msg.sender, _to, _value);\r\n    }\r\n\r\n    /* ALLOW FUNCTIONS */\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    *\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    */\r\n   \r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens   \r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public notNull(_spender) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowed[_from][msg.sender], \"insufficient tokens\");\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        return transferInternal(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns balance of the `_owner`.\r\n     *\r\n     * @param _owner   The address whose balance will be returned.\r\n     * @return balance Balance of the `_owner`.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    /// @notice internal send `_value` token to `_to` from `_from` \r\n    /// @param _from The address of the sender (null check performed in subTokens)\r\n    /// @param _to The address of the recipient (null check performed in addTokens)\r\n    /// @param _value The amount of token to be transferred \r\n    /// @return Whether the transfer was successful or not\r\n    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool) {\r\n        uint256 value = subTokens(_from, _value);\r\n        addTokens(_to, value);\r\n        emit Transfer(_from, _to, value);\r\n        return true;\r\n    }\r\n   \r\n    /// @notice add tokens `_value` tokens to `owner`\r\n    /// @param _owner The address of the account\r\n    /// @param _value The amount of tokens to be added\r\n    function addTokens(address _owner, uint256 _value) internal;\r\n\r\n    /// @notice subtract tokens `_value` tokens from `owner`\r\n    /// @param _owner The address of the account\r\n    /// @param _value The amount of tokens to be subtracted\r\n    function subTokens(address _owner, uint256 _value) internal returns (uint256 _valueDeducted );\r\n    \r\n    /// @notice set balance of account `owner` to `_value`\r\n    /// @param _owner The address of the account\r\n    /// @param _value The new balance \r\n    function setBalance(address _owner, uint256 _value) internal notNull(_owner) {\r\n        balances[_owner] = _value;\r\n    }\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n}\r\n\r\ncontract PausableToken is ERC20Token, Pausable {\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool success) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool success) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n}\r\n\r\ncontract MintableToken is PausableToken\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    address public minter; // minter\r\n\r\n    uint256 internal minted; // total minted tokens\r\n    uint256 internal burned; // total burned tokens\r\n\r\n    // MODIFIERS\r\n\r\n    modifier onlyMinter {\r\n        assert(msg.sender == minter);\r\n        _; \r\n    }\r\n\r\n    constructor() public {\r\n        minter = msg.sender;   // Set the owner to minter\r\n    }\r\n\r\n    // EXTERNAL FUNCTIONS\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /// @dev  mint tokens to address\r\n    /// @notice mint `_value` token to `_to`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be minted\r\n    function mint(address _to, uint256 _value) public notNull(_to) onlyMinter {\r\n        addTokens(_to, _value);\r\n        notifyMinted(_to, _value);\r\n    }\r\n\r\n    /// @dev burn tokens, e.g. when migrating\r\n    /// @notice burn `_value` token to `_to`\r\n    /// @param _value The amount of token to be burned from the callers account\r\n    function burn(uint256 _value) public whenNotPaused {\r\n        uint256 value = subTokens(msg.sender, _value);\r\n        notifyBurned(msg.sender, value);\r\n    }\r\n\r\n    /// @dev transfer minter to new address\r\n    /// @notice transfer minter addres from  `minter` to `_newMinter`\r\n    /// @param _newMinter The address of the recipient\r\n    function transferMinter(address _newMinter) public notNull(_newMinter) onlyOwner {\r\n        address oldMinter = minter;\r\n        minter = _newMinter;\r\n        emit TransferMinter(oldMinter, _newMinter);\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    /// @dev update burned and emit Transfer event of burned tokens\r\n    /// @notice burn `_value` token from `_owner`\r\n    /// @param _owner The address of the owner\r\n    /// @param _value The amount of token burned\r\n    function notifyBurned(address _owner, uint256 _value) internal {\r\n        burned = burned.add(_value);\r\n        emit Transfer(_owner, address(0), _value);\r\n    }\r\n\r\n    /// @dev update burned and emit Transfer event of burned tokens\r\n    /// @notice mint `_value` token to `_to`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token minted\r\n    function notifyMinted(address _to, uint256 _value) internal {\r\n        minted = minted.add(_value);\r\n        emit Transfer(address(0), _to, _value);\r\n    }\r\n\r\n    /// @dev helper function to update token supply state and emit events \r\n    /// @notice checkMintOrBurn for account `_owner` tokens chainging  from `_balanceBefore` to `_balanceAfter`\r\n    /// @param _owner The address of the owner\r\n    /// @param _balanceBefore The balance before the transaction\r\n    /// @param _balanceAfter The balance after the tranaaction\r\n    function checkMintOrBurn(address _owner, uint256 _balanceBefore, uint256 _balanceAfter) internal {\r\n        if (_balanceBefore > _balanceAfter) {\r\n            uint256 burnedTokens = _balanceBefore.sub(_balanceAfter);\r\n            notifyBurned(_owner, burnedTokens);\r\n        } else if (_balanceBefore < _balanceAfter) {\r\n            uint256 mintedTokens = _balanceAfter.sub(_balanceBefore);\r\n            notifyMinted(_owner, mintedTokens);\r\n        }\r\n    }\r\n\r\n    /// @dev return total amount of tokens\r\n    function totalSupply() public view returns(uint256 supply) {\r\n        return minted.sub(burned);\r\n    }\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n    // EVENTS\r\n    \r\n    event TransferMinter(address indexed from, address indexed to);\r\n}\r\n\r\ncontract CryptoFranc is MintableToken, MigrationAgent, Operator, InterestRateNone {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string constant public name = \"CryptoFranc\";\r\n    string constant public symbol = \"XCHF\";\r\n    uint256 constant public decimals = 18;\r\n    string constant public version = \"1.0.0.0\";\r\n    uint256 public dustAmount;\r\n\r\n    // Changes as the token is converted to the next vintage\r\n    string public currentFullName;\r\n    string public announcedFullName;\r\n    uint256 public currentMaturityDate;\r\n    uint256 public announcedMaturityDate;\r\n    uint256 public currentTermEndDate;\r\n    uint256 public announcedTermEndDate;\r\n    InterestRateInterface public currentTerms;\r\n    InterestRateInterface public announcedTerms;\r\n\r\n    mapping(address => uint256) internal compoundedInterestFactor;\r\n\r\n    // CONSTRUCTORS\r\n\r\n    constructor(string _initialFullName, uint256 _dustAmount) public {\r\n        // initially, there is no interest. This contract has an interest-free default implementation\r\n        // of the InterestRateInterface. Having this internalized saves gas in comparison to having an\r\n        // external, separate smart contract.\r\n        currentFullName = _initialFullName;\r\n        announcedFullName = _initialFullName;\r\n        dustAmount = _dustAmount;    \r\n        currentTerms = this;\r\n        announcedTerms = this;\r\n        announcedMaturityDate = block.timestamp;\r\n        announcedTermEndDate = block.timestamp;\r\n    }\r\n\r\n    // EXTERNAL FUNCTIONS\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    /// @dev Invoked by the issuer to convert all the outstanding tokens into bonds of the latest vintage.\r\n    /// @param _newName Name of announced bond\r\n    /// @param _newTerms Address of announced bond\r\n    /// @param _newMaturityDate Maturity Date of announced bond\r\n    /// @param _newTermEndDate End Date of announced bond\r\n    function announceRollover(string _newName, address _newTerms, uint256 _newMaturityDate, uint256 _newTermEndDate) public notNull(_newTerms) onlyOperator {\r\n        // a new term can not be announced before the current is expired\r\n        require(block.timestamp >= announcedMaturityDate);\r\n\r\n        // for test purposes\r\n        uint256 newMaturityDate;\r\n        if (_newMaturityDate == 0)\r\n            newMaturityDate = block.timestamp;\r\n        else\r\n            newMaturityDate = _newMaturityDate;\r\n\r\n        // new newMaturityDate must be at least or greater than the existing announced terms end date\r\n        require(newMaturityDate >= announcedTermEndDate);\r\n\r\n        //require new term dates not too far in the future\r\n        //this is to prevent severe operator time calculaton errors\r\n        require(newMaturityDate <= block.timestamp.add(100 days),\"sanitycheck on newMaturityDate\");\r\n        require(newMaturityDate <= _newTermEndDate,\"term must start before it ends\");\r\n        require(_newTermEndDate <= block.timestamp.add(200 days),\"sanitycheck on newTermEndDate\");\r\n\r\n        InterestRateInterface terms = InterestRateInterface(_newTerms);\r\n        \r\n        // ensure that _newTerms begins at the compoundLevel that the announcedTerms ends\r\n        // they must align\r\n        uint256 newBeginLevel = terms.getCompoundingLevelDate(newMaturityDate);\r\n        uint256 annEndLevel = announcedTerms.getCompoundingLevelDate(newMaturityDate);\r\n        require(annEndLevel == newBeginLevel,\"new initialCompoundingLevel <> old finalCompoundingLevel\");\r\n\r\n        //rollover\r\n        currentTerms = announcedTerms;\r\n        currentFullName = announcedFullName;\r\n        currentMaturityDate = announcedMaturityDate;\r\n        currentTermEndDate = announcedTermEndDate;\r\n        announcedTerms = terms;\r\n        announcedFullName = _newName;\r\n        announcedMaturityDate = newMaturityDate;\r\n        announcedTermEndDate = _newTermEndDate;\r\n\r\n        emit AnnounceRollover(_newName, _newTerms, newMaturityDate, _newTermEndDate);\r\n    }\r\n\r\n    /// @dev collectInterest is called to update the internal state of `_owner` balance and force a interest payment\r\n    /// This function does not change the effective amount of the `_owner` as returned by balanceOf\r\n    /// and thus, can be called by anyone willing to pay for the gas.\r\n    /// The designed usage for this function is to allow the CryptoFranc owner to collect interest from inactive accounts, \r\n    /// since interest collection is updated automatically in normal transfers\r\n    /// calling collectInterest is functional equivalent to transfer 0 tokens to `_owner`\r\n    /// @param _owner The account being updated\r\n    function collectInterest( address _owner) public notNull(_owner) whenNotPaused {\r\n        uint256 rawBalance = super.balanceOf(_owner);\r\n        uint256 adjustedBalance = getAdjustedValue(_owner);\r\n        setBalance(_owner, adjustedBalance);\r\n        checkMintOrBurn(_owner, rawBalance, adjustedBalance);\r\n    }\r\n\r\n    /*\r\n        MIGRATE FUNCTIONS\r\n     */\r\n    // safe migrate function\r\n    /// @dev migrageFrom is called from the migrating contract `migrationFromContract`\r\n    /// @param _from The account to be migrated into new contract\r\n    /// @param _value The token balance to be migrated\r\n    function migrateFrom(address _from, uint256 _value) public onlyMigrationFromContract returns(bool) {\r\n        addTokens(_from, _value);\r\n        notifyMinted(_from, _value);\r\n\r\n        emit MigratedFrom(_from, migrationFromContract, _value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev Each user calls the migrate function on the original contract to migrate the usersâ€™ tokens to the migration agent migrateFrom on the `migrationToContract` contract\r\n    function migrate() public whenNotPaused {\r\n        require(migrationToContract != 0, \"not in migration mode\"); // revert if not in migrate mode\r\n        uint256 value = balanceOf(msg.sender);\r\n        require (value > 0, \"no balance\"); // revert if not value left to transfer\r\n        value = subTokens(msg.sender, value);\r\n        notifyBurned(msg.sender, value);\r\n        require(MigrationAgent(migrationToContract).migrateFrom(msg.sender, value)==true, \"migrateFrom must return true\");\r\n\r\n        emit MigratedTo(msg.sender, migrationToContract, value);\r\n    }\r\n\r\n    /*\r\n        Helper FUNCTIONS\r\n    */\r\n\r\n    /// @dev helper function to return foreign tokens accidental send to contract address\r\n    /// @param _tokenaddress Address of foreign ERC20 contract\r\n    /// @param _to Address to send foreign tokens to\r\n    function refundForeignTokens(address _tokenaddress,address _to) public notNull(_to) onlyOperator {\r\n        ERC20Interface token = ERC20Interface(_tokenaddress);\r\n        // transfer current balance for this contract to _to  in token contract\r\n        token.transfer(_to, token.balanceOf(this));\r\n    }\r\n\r\n    /// @dev get fullname of active interest contract\r\n    function getFullName() public view returns (string) {\r\n        if ((block.timestamp <= announcedMaturityDate))\r\n            return currentFullName;\r\n        else\r\n            return announcedFullName;\r\n    }\r\n\r\n    /// @dev get compounding level of an owner account\r\n    /// @param _owner tokens address\r\n    /// @return The compouding level\r\n    function getCompoundingLevel(address _owner) public view returns (uint256) {\r\n        uint256 level = compoundedInterestFactor[_owner];\r\n        if (level == 0) {\r\n            // important note that for InterestRateNone or empty accounts the compoundedInterestFactor is newer stored by setBalance\r\n            return SCALEFACTOR;\r\n        } else {\r\n            return level;\r\n        }\r\n    }\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return getAdjustedValue(_owner);\r\n    }\r\n\r\n    // INTERNAL FUNCTIONS\r\n\r\n    /// @notice add tokens `_value` tokens to `owner`\r\n    /// @param _owner The address of the account\r\n    /// @param _value The amount of tokens to be added\r\n    function addTokens(address _owner,uint256 _value) notNull(_owner) internal {\r\n        uint256 rawBalance = super.balanceOf(_owner);\r\n        uint256 adjustedBalance = getAdjustedValue(_owner);\r\n        setBalance(_owner, adjustedBalance.add(_value));\r\n        checkMintOrBurn(_owner, rawBalance, adjustedBalance);\r\n    }\r\n\r\n    /// @notice subtract tokens `_value` tokens from `owner`\r\n    /// @param _owner The address of the account\r\n    /// @param _value The amount of tokens to be subtracted\r\n    function subTokens(address _owner, uint256 _value) internal notNull(_owner) returns (uint256 _valueDeducted ) {\r\n        uint256 rawBalance = super.balanceOf(_owner);\r\n        uint256 adjustedBalance = getAdjustedValue(_owner);\r\n        uint256 newBalance = adjustedBalance.sub(_value);\r\n        if (newBalance <= dustAmount) {\r\n            // dont leave balance below dust, empty account\r\n            _valueDeducted = _value.add(newBalance);\r\n            newBalance =  0;\r\n        } else {\r\n            _valueDeducted = _value;\r\n        }\r\n        setBalance(_owner, newBalance);\r\n        checkMintOrBurn(_owner, rawBalance, adjustedBalance);\r\n    }\r\n\r\n    /// @notice set balance of account `owner` to `_value`\r\n    /// @param _owner The address of the account\r\n    /// @param _value The new balance \r\n    function setBalance(address _owner, uint256 _value) internal {\r\n        super.setBalance(_owner, _value);\r\n        // update `owner`s compoundLevel\r\n        if (_value == 0) {\r\n            // stall account release storage\r\n            delete compoundedInterestFactor[_owner];\r\n        } else {\r\n            // only update compoundedInterestFactor when value has changed \r\n            // important note: for InterestRateNone the compoundedInterestFactor is newer stored because the default value for getCompoundingLevel is SCALEFACTOR\r\n            uint256 currentLevel = getInterestRate().getCurrentCompoundingLevel();\r\n            if (currentLevel != getCompoundingLevel(_owner)) {\r\n                compoundedInterestFactor[_owner] = currentLevel;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev get address of active bond\r\n    function getInterestRate() internal view returns (InterestRateInterface) {\r\n        if ((block.timestamp <= announcedMaturityDate))\r\n            return currentTerms;\r\n        else\r\n            return announcedTerms;\r\n    }\r\n\r\n    /// @notice get adjusted balance of account `owner`\r\n    /// @param _owner The address of the account\r\n    function getAdjustedValue(address _owner) internal view returns (uint256) {\r\n        uint256 _rawBalance = super.balanceOf(_owner);\r\n        // if _rawBalance is 0 dont perform calculations\r\n        if (_rawBalance == 0)\r\n            return 0;\r\n        // important note: for empty/new account the getCompoundingLevel value is not meaningfull\r\n        uint256 startLevel = getCompoundingLevel(_owner);\r\n        uint256 currentLevel = getInterestRate().getCurrentCompoundingLevel();\r\n        return _rawBalance.mul(currentLevel).div(startLevel);\r\n    }\r\n\r\n    /// @notice get adjusted balance of account `owner` at data `date`\r\n    /// @param _owner The address of the account\r\n    /// @param _date The date of the balance NB: MUST be within valid current and announced Terms date range\r\n    function getAdjustedValueDate(address _owner,uint256 _date) public view returns (uint256) {\r\n        uint256 _rawBalance = super.balanceOf(_owner);\r\n        // if _rawBalance is 0 dont perform calculations\r\n        if (_rawBalance == 0)\r\n            return 0;\r\n        // important note: for empty/new account the getCompoundingLevel value is not meaningfull\r\n        uint256 startLevel = getCompoundingLevel(_owner);\r\n\r\n        InterestRateInterface dateTerms;\r\n        if (_date <= announcedMaturityDate)\r\n            dateTerms = currentTerms;\r\n        else\r\n            dateTerms = announcedTerms;\r\n\r\n        uint256 dateLevel = dateTerms.getCompoundingLevelDate(_date);\r\n        return _rawBalance.mul(dateLevel).div(startLevel);\r\n    }\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n    // EVENTS\r\n\r\n    event AnnounceRollover(string newName, address indexed newTerms, uint256 indexed newMaturityDate, uint256 indexed newTermEndDate);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_toContract\",\"type\":\"address\"}],\"name\":\"startMigrateToContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dustAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTermEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"getAdjustedValueDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"collectInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getCompoundingLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentFullName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"announcedTerms\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"migrateFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFullName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationFromContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenaddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"refundForeignTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SCALEFACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"announcedTermEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentCompoundingLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"announcedFullName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentMaturityDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newName\",\"type\":\"string\"},{\"name\":\"_newTerms\",\"type\":\"address\"},{\"name\":\"_newMaturityDate\",\"type\":\"uint256\"},{\"name\":\"_newTermEndDate\",\"type\":\"uint256\"}],\"name\":\"announceRollover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fromConstract\",\"type\":\"address\"}],\"name\":\"startMigrateFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTerms\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMigrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"announcedMaturityDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getCompoundingLevelDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationToContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"transferMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialFullName\",\"type\":\"string\"},{\"name\":\"_dustAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newName\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"newTerms\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newMaturityDate\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newTermEndDate\",\"type\":\"uint256\"}],\"name\":\"AnnounceRollover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromConstract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toContract\",\"type\":\"address\"}],\"name\":\"StartMigrateToContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromConstract\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"toContract\",\"type\":\"address\"}],\"name\":\"StartMigrateFromContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MigratedTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MigratedFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptoFranc","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000000000000000c584348465f47454e455349530000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://6facbe743f91d65d3989dfc2fcd8e75d33840d112aa26d37d0f15830a61f642c"}]}