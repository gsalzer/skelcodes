{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n*\r\nWaitOrReinvest HYIP strategy:\r\nWithdraw dividends will reduce investments.\r\nReinvest dividends will increase investments.\r\n50% dividends per day.\r\n*/\r\ncontract WaitOrReinvest{\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) investments;\r\n    mapping(address => uint256) joined;\r\n    mapping(address => address) referrer;\r\n\t\r\n    uint256 public stepUp = 50; //50% per day\r\n    address public ownerWallet;\r\n\r\n    event Invest(address investor, uint256 amount);\r\n    event Withdraw(address investor, uint256 amount);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    /**\r\n     * @dev Ð¡onstructor Sets the original roles of the contract \r\n     */\r\n     \r\n    constructor() public {\r\n        ownerWallet = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifiers\r\n     */\r\n     \r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerWallet);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwnerWallet The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwnerWallet) public onlyOwner {\r\n        require(newOwnerWallet != address(0));\r\n        emit OwnershipTransferred(ownerWallet, newOwnerWallet);\r\n        ownerWallet = newOwnerWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Investments\r\n     */\r\n\t \r\n    function () public payable {\r\n\t\tinvest(address(0));\r\n\t}\r\n\t\r\n    function invest(address _ref) public payable {\r\n        require(msg.value >= 0);\r\n        if (investments[msg.sender] > 0){\r\n            reinvest(); \r\n        }\r\n        investments[msg.sender] = investments[msg.sender].add(msg.value);\r\n        joined[msg.sender] = now;\r\n\t\t\r\n\t\tuint256 dfFee = msg.value.div(100).mul(5); //dev or ref fee\r\n        ownerWallet.transfer(dfFee);\r\n\t\t\r\n\t\t\r\n\t\tif (referrer[msg.sender] == address(0) && address(_ref) > 0 && address(_ref) != msg.sender)\r\n\t\t\treferrer[msg.sender] = _ref;\r\n\t\t\r\n\t\taddress ref = referrer[msg.sender];\t\r\n        if (ref > 0 ) \r\n\t\t\tref.transfer(dfFee); // bounty program\r\n\t\t\t\r\n        emit Invest(msg.sender, msg.value);\r\n    }\r\n\t\r\n    function reinvest() public {\r\n\t\trequire(investments[msg.sender] > 0);\r\n\t\trequire((now - joined[msg.sender]) > 5);\r\n\t\t\r\n\t\tuint256 balance = getDivsBalance(msg.sender);\r\n\t\t\r\n\t\tuint256 dfFee = balance.div(100).mul(5); //dev or ref fee\r\n\t\t\r\n\t\tif (address(this).balance > dfFee) {\r\n\t\t\taddress ref = referrer[msg.sender];\t \r\n\t\t\tif (ref != address(0))\r\n\t\t\t\tref.transfer(dfFee); // bounty program\r\n\t\t\telse \r\n\t\t\t\townerWallet.transfer(dfFee); // or dev fee\r\n\t\t\tbalance = balance.sub(dfFee); \r\n\t\t}\r\n\t\t\t\r\n\t\tinvestments[msg.sender] += balance;\r\n\t\tjoined[msg.sender] = now;\r\n\t}\t\r\n\r\n    /**\r\n    * @dev Evaluate current balance\r\n    * @param _address Address of investor\r\n    */\r\n    function getDivsBalance(address _address) view public returns (uint256) {\r\n        uint256 secondsCount = now.sub(joined[_address]);\r\n        uint256 percentDivs = investments[_address].mul(stepUp).div(100);\r\n        uint256 dividends = percentDivs.mul(secondsCount).div(86400);\r\n\r\n        return dividends;\r\n    }\r\n\r\n    /**\r\n    * @dev Withdraw dividends from contract\r\n    */\r\n    function withdraw() public returns (bool){\r\n        require(joined[msg.sender] > 0);\r\n        uint256 balance = getDivsBalance(msg.sender);\r\n        if (address(this).balance > balance){\r\n            if (balance > 0){\r\n\t\t\t\tjoined[msg.sender]=now;\r\n                msg.sender.transfer(balance);\r\n\t\t\t\t\r\n\t\t\t\tif (investments[msg.sender] > balance)\r\n\t\t\t\t\tinvestments[msg.sender] = SafeMath.sub(investments[msg.sender],balance);\r\n\t\t\t\telse \r\n\t\t\t\t\tinvestments[msg.sender] = 0;\r\n\t\t\t\t\t\r\n                emit Withdraw(msg.sender, balance);\r\n            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n\r\n    /**\r\n    * @dev Gets balance of the sender address.\r\n    * @return An uint256 representing the amount owned by the msg.sender.\r\n    */\r\n    function checkDivsBalance() public view returns (uint256) {\r\n        return getDivsBalance(msg.sender);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Gets investments of the specified address.\r\n    * @param _investor The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function checkInvestments(address _investor) public view returns (uint256) {\r\n        return investments[_investor];\r\n    }\r\n\r\n    \r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepUp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"checkInvestments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getDivsBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkDivsBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwnerWallet\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"WaitOrReinvest","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://26c84c4385e51c1ac68b47c6824727fed9068ab73fe0aea01c7cc65be59f7fde"}]}