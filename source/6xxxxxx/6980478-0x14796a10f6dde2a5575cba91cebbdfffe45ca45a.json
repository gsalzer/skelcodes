{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity > 0.4.99 <0.6.0;\r\n\r\ninterface IERC20Token {\r\n    function balanceOf(address owner) external returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function burn(uint256 _value) external returns (bool);\r\n    function decimals() external returns (uint256);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n}\r\n\r\ncontract Ownable {\r\n  address payable public _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n  * account.\r\n  */\r\n  constructor() internal {\r\n    _owner = tx.origin;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n  * @return the address of the owner.\r\n  */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Throws if called by any account other than the owner.\r\n  */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @return true if `msg.sender` is the owner of the contract.\r\n  */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Allows the current owner to relinquish control of the contract.\r\n  * @notice Renouncing to ownership will leave the contract without an owner.\r\n  * It will not be possible to call the functions with the `onlyOwner`\r\n  * modifier anymore.\r\n  */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n  * @param newOwner The address to transfer ownership to.\r\n  */\r\n  function transferOwnership(address payable newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers control of the contract to a newOwner.\r\n  * @param newOwner The address to transfer ownership to.\r\n  */\r\n  function _transferOwnership(address payable newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract PayeeShare is Ownable{\r\n    \r\n    struct Payee {\r\n        address payable payee;\r\n        uint payeePercentage;\r\n    }\r\n    \r\n    Payee[] public payees;\r\n    \r\n    string public constant createdBy = \"AssetSplit.org - the guys who cut the pizza\";\r\n    \r\n    IERC20Token public tokenContract;\r\n    \r\n    bool processingPayout = false;\r\n    \r\n    uint256 public payeePartsLeft = 100;\r\n    uint256 public payeePartsToSell = 0;\r\n    uint256 public payeePricePerPart = 0;\r\n    \r\n    uint256 public lockedToken;\r\n    uint256 public lockedTokenTime;\r\n    uint256 minTokenTransfer = 1;\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    event TokenPayout(address receiver, uint256 value, string memberOf);\r\n    event EtherPayout(address receiver, uint256 value, string memberOf);\r\n    event PayeeAdded(address payee, uint256 partsPerFull);\r\n    event LockedTokensUnlocked();\r\n    \r\n    constructor(address _tokenContract, uint256 _lockedToken, uint256 _lockedTokenTime) public {\r\n        tokenContract = IERC20Token(_tokenContract);\r\n        lockedToken = _lockedToken;\r\n        lockedTokenTime = _lockedTokenTime;\r\n    }\r\n  \r\n    function getPayeeLenght() public view returns (uint256) {\r\n        return payees.length;\r\n    }\r\n    \r\n     function getLockedToken() public view returns (uint256) {\r\n        return lockedToken;\r\n    }\r\n    \r\n    function addPayee(address payable _address, uint _payeePercentage) public payable {\r\n        if (msg.sender == _owner) {\r\n        require(payeePartsLeft >= _payeePercentage);\r\n        payeePartsLeft = payeePartsLeft.sub(_payeePercentage);\r\n        payees.push(Payee(_address, _payeePercentage));\r\n        emit PayeeAdded(_address, _payeePercentage);\r\n        }\r\n        else if (msg.value == _payeePercentage.mul(payeePricePerPart)) {\r\n        if (address(this).balance > 0) {\r\n          etherPayout();\r\n        }\r\n        if (tokenContract.balanceOf(address(this)).sub(lockedToken) > 1) {\r\n          tokenPayout();\r\n        }\r\n            require(payeePartsLeft >= _payeePercentage);\r\n            require(payeePartsToSell >= _payeePercentage);\r\n            require(tx.origin == msg.sender);\r\n            payeePartsToSell = payeePartsToSell.sub(_payeePercentage);\r\n            payeePartsLeft = payeePartsLeft.sub(_payeePercentage);\r\n            payees.push(Payee(tx.origin, _payeePercentage));\r\n            emit PayeeAdded(tx.origin, _payeePercentage);\r\n        } else revert();\r\n    } \r\n    \r\n    function setPartsToSell(uint256 _parts, uint256 _price) public onlyOwner {\r\n        require(payeePartsLeft >= _parts);\r\n        payeePartsToSell = _parts;\r\n        payeePricePerPart = _price;\r\n    }\r\n    \r\n    function etherPayout() public {\r\n        require(processingPayout == false);\r\n        processingPayout = true;\r\n        uint256 receivedValue = address(this).balance;\r\n        uint counter = 0;\r\n        for (uint i = 0; i < payees.length; i++) {\r\n           Payee memory myPayee = payees[i];\r\n           myPayee.payee.transfer((receivedValue.mul(myPayee.payeePercentage).div(100)));\r\n           emit EtherPayout(myPayee.payee, receivedValue.mul(myPayee.payeePercentage).div(100), \"Shareholder\");\r\n            counter++;\r\n          }\r\n        if(address(this).balance > 0) {\r\n            _owner.transfer(address(this).balance);\r\n            emit EtherPayout(_owner, address(this).balance, \"Owner\");\r\n        }\r\n        processingPayout = false;\r\n    }\r\n    \r\n     function tokenPayout() public payable {\r\n        require(processingPayout == false);\r\n        require(tokenContract.balanceOf(address(this)) >= lockedToken.add((minTokenTransfer.mul(10 ** tokenContract.decimals()))));\r\n        processingPayout = true;\r\n        uint256 receivedValue = tokenContract.balanceOf(address(this)).sub(lockedToken);\r\n        uint counter = 0;\r\n        for (uint i = 0; i < payees.length; i++) {\r\n           Payee memory myPayee = payees[i];\r\n           tokenContract.transfer(myPayee.payee, receivedValue.mul(myPayee.payeePercentage).div(100));\r\n           emit TokenPayout(myPayee.payee, receivedValue.mul(myPayee.payeePercentage).div(100), \"Shareholder\");\r\n            counter++;\r\n          } \r\n        if (tokenContract.balanceOf(address(this)).sub(lockedToken) > 0) {\r\n            tokenContract.transfer(_owner, tokenContract.balanceOf(address(this)).sub(lockedToken));\r\n            emit TokenPayout(_owner, tokenContract.balanceOf(address(this)).sub(lockedToken), \"Owner\");\r\n        }\r\n        processingPayout = false;\r\n    }\r\n    \r\n    function payoutLockedToken() public payable onlyOwner {\r\n        require(processingPayout == false);\r\n        require(now > lockedTokenTime);\r\n        require(tokenContract.balanceOf(address(this)) >= lockedToken);\r\n        lockedToken = 0;\r\n        if (address(this).balance > 0) {\r\n          etherPayout();\r\n        }\r\n        if (tokenContract.balanceOf(address(this)).sub(lockedToken) > 1) {\r\n          tokenPayout();\r\n        }\r\n        processingPayout = true;\r\n        emit LockedTokensUnlocked();\r\n        tokenContract.transfer(_owner, tokenContract.balanceOf(address(this)));\r\n        processingPayout = false;\r\n    }\r\n    \r\n    function() external payable {\r\n    }\r\n}\r\n\r\ncontract ShareManager is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    IERC20Token public tokenContract;\r\n    \r\n    struct Share {\r\n        address payable share;\r\n        uint sharePercentage;\r\n    }\r\n    \r\n    Share[] public shares;\r\n    \r\n    mapping (uint => address) public sharesToManager;\r\n    mapping (address => uint) ownerShareCount;\r\n    \r\n    string public constant createdBy = \"AssetSplit.org - the guys who cut the pizza\";\r\n    \r\n    bool processingPayout = false;\r\n    bool processingShare = false;\r\n    \r\n    PayeeShare payeeShareContract;\r\n    \r\n    uint256 public sharesMaxLength;\r\n    uint256 public sharesSold;\r\n    uint256 public percentagePerShare;\r\n    uint256 public tokenPerShare;\r\n    uint256 public tokenLockDays;\r\n    address payable ownerAddress;\r\n    \r\n    event TokenPayout(address receiver, uint256 value, string memberOf);\r\n    event EtherPayout(address receiver, uint256 value, string memberOf);\r\n    event ShareSigned(address shareOwner, address shareContract, uint256 lockTime);\r\n    \r\n    constructor(address _tokenContract, uint256 _tokenPerShare, address payable _contractOwner, uint _ownerPercentage, uint _percentagePerShare) public {\r\n        tokenContract = IERC20Token(_tokenContract);\r\n        shares.push(Share(_contractOwner, _ownerPercentage));\r\n        sharesMaxLength = (uint256(100).sub(_ownerPercentage)).div(_percentagePerShare);\r\n        percentagePerShare = _percentagePerShare;\r\n        tokenPerShare = _tokenPerShare;\r\n        ownerAddress = _owner;\r\n        tokenLockDays = 100;\r\n    }\r\n    \r\n    function tokenPayout() public payable {\r\n        require(processingPayout == false);\r\n        require(tokenContract.balanceOf(address(this)) >= uint256(1).mul(10 ** tokenContract.decimals()));\r\n        processingPayout = true;\r\n        uint256 receivedValue = tokenContract.balanceOf(address(this));\r\n        uint counter = 0;\r\n        for (uint i = 0; i < shares.length; i++) {\r\n           Share memory myShare = shares[i];\r\n           if (i > 0) {\r\n               payeeShareContract = PayeeShare(myShare.share);\r\n               if (payeeShareContract.getLockedToken() == tokenPerShare.mul(10 ** tokenContract.decimals())) {\r\n                 tokenContract.transfer(myShare.share, receivedValue.mul(myShare.sharePercentage).div(100));\r\n                 emit TokenPayout(myShare.share, receivedValue.mul(myShare.sharePercentage).div(100), \"Shareholder\");\r\n               }\r\n           } else {\r\n               tokenContract.transfer(myShare.share, receivedValue.mul(myShare.sharePercentage).div(100));\r\n               emit TokenPayout(myShare.share, receivedValue.mul(myShare.sharePercentage).div(100), \"Owner\");\r\n           }\r\n           \r\n            counter++;\r\n          } \r\n        if(tokenContract.balanceOf(address(this)) > 0) {\r\n            tokenContract.transfer(_owner, tokenContract.balanceOf(address(this)));\r\n            emit TokenPayout(_owner, tokenContract.balanceOf(address(this)), \"Owner - left from shares\");\r\n        }\r\n        processingPayout = false;\r\n    }\r\n    \r\n    function etherPayout() public payable {\r\n        require(address(this).balance > uint256(1).mul(10 ** 18).div(100));\r\n        require(processingPayout == false);\r\n        processingPayout = true;\r\n        uint256 receivedValue = address(this).balance;\r\n        uint counter = 0;\r\n        for (uint i = 0; i < shares.length; i++) {\r\n           Share memory myShare = shares[i];\r\n           if (i > 0) {\r\n           payeeShareContract = PayeeShare(myShare.share);\r\n               if (payeeShareContract.getLockedToken() == tokenPerShare.mul(10 ** tokenContract.decimals())) {\r\n                 myShare.share.transfer((receivedValue.mul(myShare.sharePercentage).div(100)));\r\n                 emit EtherPayout(myShare.share, receivedValue.mul(myShare.sharePercentage).div(100), \"Shareholder\");\r\n               }\r\n           } else {\r\n               myShare.share.transfer((receivedValue.mul(myShare.sharePercentage).div(100)));\r\n               emit EtherPayout(myShare.share, receivedValue.mul(myShare.sharePercentage).div(100), \"Owner\");\r\n           }\r\n            counter++;\r\n          }\r\n        if(address(this).balance > 0) {\r\n            _owner.transfer(address(this).balance);\r\n            emit EtherPayout(_owner, address(this).balance, \"Owner - left from shares\");\r\n        }\r\n        processingPayout = false;\r\n    }\r\n    function() external payable {\r\n     \r\n    }\r\n    \r\n    function newShare() public payable returns (address) {\r\n        require(shares.length <= sharesMaxLength);\r\n        require(tokenContract.balanceOf(msg.sender) >= tokenPerShare.mul((10 ** tokenContract.decimals())));\r\n        if (address(this).balance > uint256(1).mul(10 ** 18).div(100)) {\r\n            etherPayout();\r\n        }\r\n        if (tokenContract.balanceOf(address(this)) >= uint256(1).mul(10 ** tokenContract.decimals())) {\r\n            tokenPayout();\r\n        }\r\n        require(processingShare == false);\r\n        uint256 lockedUntil = now.add((tokenLockDays).mul(1 days));\r\n        processingShare = true;\r\n        PayeeShare c = (new PayeeShare)(address(tokenContract), tokenPerShare.mul(10 ** tokenContract.decimals()), lockedUntil); \r\n        require(tokenContract.transferFrom(msg.sender, address(c), tokenPerShare.mul(10 ** tokenContract.decimals())));\r\n        uint id = shares.push(Share(address(c), percentagePerShare)).sub(1);\r\n        sharesToManager[id] = msg.sender;\r\n        ownerShareCount[msg.sender] = ownerShareCount[msg.sender].add(1);\r\n        emit ShareSigned(msg.sender, address(c), lockedUntil);\r\n        if (tokenLockDays > 0) {\r\n        tokenLockDays = tokenLockDays.sub(1);\r\n        }\r\n        sharesSold = sharesSold.add(1);\r\n        processingShare = false;\r\n        return address(c);\r\n    }\r\n    \r\n    function getSharesByShareOwner(address _shareOwner) external view returns (uint[] memory) {\r\n    uint[] memory result = new uint[](ownerShareCount[_shareOwner]);\r\n    uint counter = 0;\r\n    for (uint i = 0; i < shares.length; i++) {\r\n      if (sharesToManager[i] == _shareOwner) {\r\n        result[counter] = i;\r\n        counter++;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"sharesSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"etherPayout\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenLockDays\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_shareOwner\",\"type\":\"address\"}],\"name\":\"getSharesByShareOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createdBy\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shares\",\"outputs\":[{\"name\":\"share\",\"type\":\"address\"},{\"name\":\"sharePercentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sharesMaxLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentagePerShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tokenPayout\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"newShare\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sharesToManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPerShare\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_tokenPerShare\",\"type\":\"uint256\"},{\"name\":\"_contractOwner\",\"type\":\"address\"},{\"name\":\"_ownerPercentage\",\"type\":\"uint256\"},{\"name\":\"_percentagePerShare\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"memberOf\",\"type\":\"string\"}],\"name\":\"TokenPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"memberOf\",\"type\":\"string\"}],\"name\":\"EtherPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"shareOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"shareContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"ShareSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ShareManager","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002d1e23144b89fc7364ed3efcd5af04093f7d9a3d00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000f001f2be101bca44997a3d3fcd6327dc3d8bd45c00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://1e3c6c92a9f0f5e866d5b789969e8fb26ef5a1b5f94ce5b7ea7b2e6c6be0c223"}]}