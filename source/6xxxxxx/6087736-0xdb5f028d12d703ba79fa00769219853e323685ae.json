{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ncontract PoHwhale \r\n{\r\n    \r\n    /**\r\n     * Modifiers\r\n     */\r\n    modifier onlyOwner()\r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    modifier notPoH(address aContract)\r\n    {\r\n        require(aContract != address(pohContract));\r\n        _;\r\n    }\r\n   \r\n    /**\r\n     * Events\r\n     */\r\n    event Deposit(uint256 amount, address depositer);\r\n    event Purchase(uint256 amountSpent, uint256 tokensReceived);\r\n    event Sell();\r\n    event Payout(uint256 amount, address creditor);\r\n    event Transfer(uint256 amount, address paidTo);\r\n\r\n   /**\r\n     * Global Variables\r\n     */\r\n    address owner;\r\n    uint256 tokenBalance;\r\n    PoH pohContract;\r\n   \r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() \r\n    public \r\n    {\r\n        owner = msg.sender;\r\n        pohContract = PoH(address(0x4798480a81Fe05D4194B1922Dd4e20fE1742f51b));\r\n        tokenBalance = 0;\r\n    }\r\n    \r\n    function() payable public \r\n    {\r\n    }\r\n     \r\n    /**\r\n     * Only way to give PoHwhale ETH is via by using fallback\r\n     */\r\n    function donate() \r\n    public payable // make it public payable instead of internal  \r\n    {\r\n        //You have to send more than 1000000 wei\r\n        require(msg.value > 1000000 wei);\r\n        uint256 ethToTransfer = address(this).balance;\r\n        uint256 PoHEthInContract = address(pohContract).balance;\r\n       \r\n        // if PoH contract balance is less than 5 ETH, PoH is dead and there's no use pumping it\r\n        if(PoHEthInContract < 5 ether)\r\n        {\r\n\r\n            pohContract.exit();\r\n            tokenBalance = 0;\r\n            ethToTransfer = address(this).balance;\r\n\r\n            owner.transfer(ethToTransfer);\r\n            emit Transfer(ethToTransfer, address(owner));\r\n        }\r\n\r\n        //let's buy/sell tokens to give dividends to PoH tokenholders\r\n        else\r\n        {\r\n            tokenBalance = myTokens();\r\n             //if token balance is greater than 0, sell and rebuy \r\n            if(tokenBalance > 0)\r\n            {\r\n                pohContract.exit();\r\n                tokenBalance = 0; \r\n\r\n                ethToTransfer = address(this).balance;\r\n\r\n                if(ethToTransfer > 0)\r\n                {\r\n                    pohContract.buy.value(ethToTransfer)(0x0);\r\n                }\r\n                else\r\n                {\r\n                    pohContract.buy.value(msg.value)(0x0);\r\n\r\n                }\r\n   \r\n            }\r\n            else\r\n            {   \r\n                //we have no tokens, let's buy some if we have eth\r\n                if(ethToTransfer > 0)\r\n                {\r\n                    pohContract.buy.value(ethToTransfer)(0x0);\r\n                    tokenBalance = myTokens();\r\n                    //Emit a deposit event.\r\n                    emit Deposit(msg.value, msg.sender);\r\n                }\r\n            }\r\n     \r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Number of tokens the contract owns.\r\n     */\r\n    function myTokens() \r\n    public \r\n    view \r\n    returns(uint256)\r\n    {\r\n        return pohContract.myTokens();\r\n    }\r\n    \r\n    /**\r\n     * Number of dividends owed to the contract.\r\n     */\r\n    function myDividends() \r\n    public \r\n    view \r\n    returns(uint256)\r\n    {\r\n        return pohContract.myDividends(true);\r\n    }\r\n\r\n    /**\r\n     * ETH balance of contract\r\n     */\r\n    function ethBalance() \r\n    public \r\n    view \r\n    returns (uint256)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    /**\r\n     * A trap door for when someone sends tokens other than the intended ones so the overseers can decide where to send them.\r\n     */\r\n    function transferAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens) \r\n    public \r\n    onlyOwner() \r\n    notPoH(tokenAddress) \r\n    returns (bool success) \r\n    {\r\n        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\r\n    }\r\n  \r\n\r\n}\r\n\r\n//Define the POH token for the PoHwhale\r\ncontract PoH \r\n{\r\n    function buy(address) public payable returns(uint256);\r\n    function sell(uint256) public;\r\n    function withdraw() public;\r\n    function myTokens() public view returns(uint256);\r\n    function myDividends(bool) public view returns(uint256);\r\n    function exit() public;\r\n    function totalEthereumBalance() public view returns(uint);\r\n}\r\n\r\n\r\n//Define ERC20Interface.transfer, so PoHwhale can transfer tokens accidently sent to it.\r\ncontract ERC20Interface \r\n{\r\n    function transfer(address to, uint256 tokens) \r\n    public \r\n    returns (bool success);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"depositer\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"creditor\",\"type\":\"address\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"paidTo\",\"type\":\"address\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PoHwhale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d74e7a79dc5c73125aafb6eb879616504a121959917e1a074c9cb9b6bebed03d"}]}