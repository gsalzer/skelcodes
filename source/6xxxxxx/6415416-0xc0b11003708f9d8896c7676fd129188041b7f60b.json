{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\ncontract Whitelist is Ownable {\r\n\r\n  address public opsAddress;\r\n  mapping(address => uint8) public whitelist;\r\n\r\n  event WhitelistUpdated(address indexed _account, uint8 _phase);\r\n\r\n  function isWhitelisted(address _account) public constant returns (bool) {\r\n      return whitelist[_account] == 1;\r\n  }\r\n\r\n  /**\r\n *  @notice function to whitelist an address which can be called only by the ops address.\r\n *\r\n *  @param _account account address to be whitelisted\r\n *  @param _phase 0: unwhitelisted, 1: whitelisted\r\n\r\n *\r\n *  @return bool address is successfully whitelisted/unwhitelisted.\r\n */\r\nfunction updateWhitelist(\r\n    address _account,\r\n    uint8 _phase) public\r\n    returns (bool)\r\n{\r\n    require(_account != address(0));\r\n    require(_phase <= 1);\r\n    require(isOps(msg.sender));\r\n\r\n    whitelist[_account] = _phase;\r\n\r\n    emit WhitelistUpdated(_account, _phase);\r\n\r\n    return true;\r\n}\r\n\r\n\r\n  /** Internal Functions */\r\n  /**\r\n   *  @notice checks If the sender is the owner of the contract.\r\n   *\r\n   *  @param _address address to be checked if valid owner or not.\r\n   *\r\n   *  @return bool valid owner or not.\r\n   */\r\n  function isOwner(\r\n      address _address)\r\n      internal\r\n      view\r\n      returns (bool)\r\n  {\r\n      return (_address == owner);\r\n  }\r\n  /**\r\n   *  @notice check If the sender is the ops address.\r\n   *\r\n   *  @param _address address to be checked for ops.\r\n   *\r\n   *  @return bool valid ops or not.\r\n   */\r\n  function isOps(\r\n      address _address)\r\n      internal\r\n      view\r\n      returns (bool)\r\n  {\r\n      return (opsAddress != address(0) && _address == opsAddress) || isOwner(_address);\r\n  }\r\n\r\n  /** External Functions */\r\n\r\n  /**\r\n   *  @notice Owner can change the verified operator address.\r\n   *\r\n   *  @param _opsAddress address to be set as ops.\r\n   *\r\n   *  @return bool address is successfully set as ops or not.\r\n   */\r\n  function setOpsAddress(\r\n      address _opsAddress)\r\n      external\r\n      onlyOwner\r\n      returns (bool)\r\n  {\r\n      require(_opsAddress != owner);\r\n      require(_opsAddress != address(this));\r\n      require(_opsAddress != address(0));\r\n\r\n      opsAddress = _opsAddress;\r\n\r\n      return true;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_phase\",\"type\":\"uint8\"}],\"name\":\"updateWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_opsAddress\",\"type\":\"address\"}],\"name\":\"setOpsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"opsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_phase\",\"type\":\"uint8\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Whitelist","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://54ecf558a822e05b0795ef3b1a53046540921e84819a6e51aac9c1b00d082318"}]}