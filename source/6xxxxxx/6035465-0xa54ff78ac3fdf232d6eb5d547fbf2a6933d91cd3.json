{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);  _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract TokenTimelock {\r\n  using SafeERC20 for ERC20Basic;\r\n  ERC20Basic public token;\r\n  address public beneficiary;\r\n  uint256 public releaseTime;\r\n\r\n  constructor(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\r\n    require(_releaseTime > now);\r\n    token = _token;\r\n    beneficiary = _beneficiary;\r\n    releaseTime = _releaseTime;\r\n  }\r\n\r\n  function release() public {\r\n    require(now >= releaseTime);\r\n\r\n    uint256 amount = token.balanceOf(this);\r\n    require(amount > 0);\r\n\r\n    token.safeTransfer(beneficiary, amount);\r\n  }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  function finishMinting() onlyOwner canMint public returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract YiqiniuToken is MintableToken {\r\n    string public constant name\t\t= 'Yiqiniu';\r\n    string public constant symbol\t= 'KEY';\r\n    uint256 public constant decimals\t= 18;\r\n    event Burned(address indexed burner, uint256 value);\r\n    \r\n    function burn(uint256 _value) public onlyOwner {\r\n        require(_value > 0);\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burned(burner, _value);\r\n    }\r\n}\r\n\r\ncontract CrowdsaleConfig {\r\n    uint256 public constant TOKEN_DECIMALS\t    = 18;\r\n    uint256 public constant MIN_TOKEN_UNIT\t    = 10 ** uint256(TOKEN_DECIMALS);\r\n    uint256 public constant TOTAL_SUPPLY_CAP        = 100000000 * MIN_TOKEN_UNIT;\r\n    uint256 public constant PUBLIC_SALE_TOKEN_CAP   = TOTAL_SUPPLY_CAP / 100 * 30;\r\n    uint256 public constant AGENCY_TOKEN_CAP        = TOTAL_SUPPLY_CAP / 100 * 20;\r\n    uint256 public constant TEAM_TOKEN_CAP          = TOTAL_SUPPLY_CAP / 100 * 50;\r\n    address public constant TEAM_ADDR\t\t    = 0xd589737E4CbeC49E862D3A54c75aF16e27dD8fC1;\r\n    address public constant AGENCY_ADDR\t            = 0xc849e7225fF088e187136A670662e36adE5A89FC;\r\n    address public constant WALLET_ADDR\t            = 0xd589737E4CbeC49E862D3A54c75aF16e27dD8fC1;\r\n}\r\n\r\ncontract YiqiniuCrowdsale is Ownable, CrowdsaleConfig{\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for YiqiniuToken;\r\n\r\n    // Token contract\r\n    YiqiniuToken public token;\r\n\r\n    uint64 public startTime;\r\n    uint64 public endTime;\r\n    uint256 public rate = 10000;\r\n    uint256 public goalSale;\r\n    uint256 public totalPurchased = 0;\r\n    bool public CrowdsaleEnabled = false;\r\n    mapping(address => bool) public isVerified;\r\n    mapping(address => uint256) public tokensPurchased;\r\n    uint256 public maxTokenPurchase = 100000 * MIN_TOKEN_UNIT;\r\n    uint256 public minTokenPurchase = 1 * MIN_TOKEN_UNIT;\r\n    TokenTimelock public AgencyLock1;\r\n    TokenTimelock public AgencyLock2;\r\n    \r\n    event NewYiqiniuToken(address _add);\r\n\r\n    constructor() public {\r\n        startTime = uint64(now);\r\n        endTime = uint64(now + 3600*24*4);\r\n        goalSale = PUBLIC_SALE_TOKEN_CAP / 100 * 50;\r\n        \r\n        token = new YiqiniuToken();\r\n        emit NewYiqiniuToken(address(token));\r\n        \r\n        token.mint(address(this), TOTAL_SUPPLY_CAP);\r\n        token.finishMinting();\r\n\r\n        uint64 TimeLock1 = uint64(now + 3600*24*5);\r\n        uint64 TimeLock2 = uint64(now + 3600*24*6);\r\n\r\n        AgencyLock1 = new TokenTimelock(token, AGENCY_ADDR, TimeLock1);\r\n        AgencyLock2 = new TokenTimelock(token, AGENCY_ADDR, TimeLock2);\r\n\r\n        token.safeTransfer(AgencyLock1, AGENCY_TOKEN_CAP/2);\r\n        token.safeTransfer(AgencyLock2, AGENCY_TOKEN_CAP/2);\r\n\r\n        token.safeTransfer(TEAM_ADDR,TEAM_TOKEN_CAP);\r\n    }\r\n\r\n    function releaseLockAgencyLock1() public {\r\n        AgencyLock1.release();\r\n    }\r\n    function releaseLockAgencyLock2() public {\r\n        AgencyLock2.release();\r\n    }\r\n\r\n    function () external payable {   \r\n        buyTokens(msg.sender);\r\n    }\r\n    \r\n    modifier canCrowdsale() {\r\n        require(CrowdsaleEnabled);\r\n        _;\r\n    }\r\n    \r\n    function enableCrowdsale() public onlyOwner {\r\n        CrowdsaleEnabled = true;\r\n    }\r\n    \r\n    function closeCrowdsale() public onlyOwner {\r\n        CrowdsaleEnabled = false;\r\n    }\r\n    \r\n    function buyTokens(address participant) internal canCrowdsale {\r\n        require(now >= startTime);\r\n        require(now < endTime);\r\n        require(msg.value != 0);\r\n        require(isVerified[participant]);\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = weiAmount.mul(rate);\r\n        \r\n        tokensPurchased[participant] = tokensPurchased[participant].add(tokens);\r\n        require(tokensPurchased[participant] >= minTokenPurchase);\r\n        require(tokensPurchased[participant] <= maxTokenPurchase);\r\n        \r\n        totalPurchased = totalPurchased.add(tokens);\r\n        token.safeTransfer(participant, tokens);\r\n    }\r\n    \r\n    function setTokenPrice(uint256 _tokenRate) public onlyOwner {\r\n        require(now > startTime);\r\n        require(_tokenRate > 0);\r\n        rate = _tokenRate;\r\n    }\r\n    \r\n    function setLimitTokenPurchase(uint256 _minToken, uint256 _maxToken) public onlyOwner {\r\n        require(goalSale >= maxTokenPurchase);\r\n        minTokenPurchase = _minToken;\r\n        maxTokenPurchase = _maxToken;\r\n    }\r\n\r\n    function addVerified (address[] _ads) public onlyOwner {\r\n        for(uint i = 0; i < _ads.length; i++){\r\n            isVerified[_ads[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeVerified (address _address) public onlyOwner {\r\n        isVerified[_address] = false;\r\n    }\r\n    \r\n    function close() onlyOwner public {\r\n        require(now >= endTime || totalPurchased >= goalSale);\r\n        token.burn(token.balanceOf(this));\r\n        WALLET_ADDR.transfer(address(this).balance);\r\n   }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"YiqiniuToken","CompilerVersion":"v0.4.25-nightly.2018.7.25+commit.ff8e9300","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6ca894ff803728473d048f35d7823521cd110db315b16657c0c82acd9d856109"}]}