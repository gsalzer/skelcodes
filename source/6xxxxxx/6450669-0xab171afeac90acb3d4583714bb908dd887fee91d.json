{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/IZCDistribution.sol\r\n\r\n/**\r\n * @title IZCDistribution\r\n * \r\n * Interface for the ZCDistribuition contract\r\n *\r\n * (c) Philip Louw / Zero Carbon Project 2018. The MIT Licence.\r\n */\r\ninterface IZCDistribution {\r\n\r\n    /**\r\n     * @dev Returns the Amount of tokens issued to consumers \r\n     */\r\n    function getSentAmount() external pure returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/ZCVesting.sol\r\n\r\n/**\r\n * @title ZCVesting\r\n * \r\n * Used to hold tokens and release once configured amount has been released to consumers.\r\n *\r\n * 10% of initial tokens in contract can be claimed for every 15 million tokens that are distributed to consumers.\r\n * After 150 million tokens are distributed consumer the full balanceof the vesting contract is transferable.\r\n *\r\n * (c) Philip Louw / Zero Carbon Project 2018. The MIT Licence.\r\n */\r\ncontract ZCVesting {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Total amount of tokens released\r\n    uint256 public releasedAmount = 0;\r\n    // Address of the Token\r\n    ERC20Basic public token;\r\n    // Address of the Distribution Contract\r\n    IZCDistribution public dist;\r\n    // Release to Address\r\n    address public releaseAddress;\r\n\r\n    // Every amount of tokens to release funds\r\n    uint256 internal constant STEP_DIST_TOKENS = 15000000 * (10**18);\r\n    // Max amount of tokens before all is released\r\n    uint256 internal constant MAX_DIST_TOKENS = 150000000 * (10**18);\r\n\r\n    /**\r\n     * @param _tokenAddr The Address of the Token\r\n     * @param _distAddr The Address of the Distribution contract\r\n     * @param _releaseAddr The Address where to release funds to\r\n     */\r\n    constructor(ERC20Basic _tokenAddr, IZCDistribution _distAddr, address _releaseAddr) public {\r\n        token = _tokenAddr;\r\n        dist = _distAddr;\r\n        releaseAddress = _releaseAddr;\r\n    }\r\n\r\n    /**\r\n     * @dev Event when Tokens are released\r\n     * @param releaseAmount Amount of tokens released\r\n     */\r\n    event TokenReleased(uint256 releaseAmount);\r\n\r\n\r\n    /**\r\n     * @dev Releases the current allowed amount to the releaseAddress. Returns the amount released    \r\n     */\r\n    function release() public  returns (uint256) {\r\n        \r\n        uint256 distAmount = dist.getSentAmount();\r\n        if (distAmount < STEP_DIST_TOKENS) \r\n            return 0;\r\n\r\n        uint256 currBalance = token.balanceOf(address(this));\r\n\r\n        if (distAmount >= MAX_DIST_TOKENS) {\r\n            assert(token.transfer(releaseAddress, currBalance));\r\n            releasedAmount = releasedAmount.add(currBalance);\r\n            return currBalance;\r\n        }\r\n\r\n        uint256 releaseAllowed = currBalance.add(releasedAmount).div(10).mul(distAmount.div(STEP_DIST_TOKENS));\r\n\r\n        if (releaseAllowed <= releasedAmount)\r\n            return 0;\r\n\r\n        uint256 releaseAmount = releaseAllowed.sub(releasedAmount);\r\n        releasedAmount = releasedAmount.add(releaseAmount);\r\n        assert(token.transfer(releaseAddress, releaseAmount));\r\n        emit TokenReleased(releaseAmount);\r\n        return releaseAmount;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the token balance of this ZCVesting contract\r\n    */\r\n    function currentBalance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"releasedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dist\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"name\":\"_distAddr\",\"type\":\"address\"},{\"name\":\"_releaseAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"releaseAmount\",\"type\":\"uint256\"}],\"name\":\"TokenReleased\",\"type\":\"event\"}]","ContractName":"ZCVesting","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006737fe98389ffb356f64ebb726aa1a92390d94fb","Library":"","SwarmSource":"bzzr://7eef47ae8b8270f891289ed1aa3d1caa32a975e7ef9c7c72e19c64cddb6eb771"}]}