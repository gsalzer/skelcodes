{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ninterface ERC20TokenInterface {\r\n    function balanceOf(address _who) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n}\r\n\r\ncontract WorldByEth {\r\n\r\n    using SafeMath for *;\r\n    string constant public name = \"ETH world top\";\r\n    string constant public symbol = \"cqwt\";\r\n    uint public gap = 2 minutes;\r\n    uint public ctnum = 217;\r\n    uint public deadline;\r\n    bool public active = false;\r\n    uint public max = 1 hours;\r\n    uint constant min_purchase = 0.05 ether;\r\n    address public owner;\r\n    address private nextOwner;\r\n    address public lastplayer = 0x8F92200Dd83E8f25cB1daFBA59D5532507998307;\r\n    address public comaddr = 0x8F92200Dd83E8f25cB1daFBA59D5532507998307;\r\n    address public lastwinner;\r\n    uint[] public validplayers;\r\n    uint256 public rID_;\r\n    mapping(uint256 => uint256) public pot_;\r\n    mapping(uint256 => mapping(uint256 => Ctry)) public ctry_;\r\n    mapping(uint256 => uint256) public totalinvest_;\r\n\r\n    uint public _rate = 1000;\r\n\r\n    struct Ctry {\r\n        uint256 id;\r\n        uint256 price;\r\n        bytes32 name;\r\n        bytes32 mem;\r\n        address owner;\r\n    }\r\n\r\n    event LOG_Winner(address addr, uint amount);\r\n    constructor()\r\n    public {\r\n        rID_++;\r\n        validplayers.length = 0;\r\n        deadline = now + max;\r\n        owner = msg.sender;\r\n    }\r\n    modifier isActive {\r\n        if (!active) revert();\r\n        _;\r\n    }\r\n\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        require(_addr == tx.origin);\r\n\r\n        uint256 _codeLength;\r\n\r\n        assembly {\r\n            _codeLength: = extcodesize(_addr)\r\n        }\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDevs() {\r\n        require(\r\n            owner == 0x4E10a18A23d1BD1DF6331C48CFD75d31F125cA30 ||\r\n            owner == 0x8F92200Dd83E8f25cB1daFBA59D5532507998307,\r\n            \"only team just can activate\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function getvalid() constant\r\n    public\r\n    returns(uint[]) {\r\n        return validplayers;\r\n    }\r\n\r\n    function changeRemark(uint id, bytes32 mem) isActive\r\n    isHuman\r\n    public\r\n    payable {\r\n        require(msg.sender == ctry_[rID_][id].owner, \"msgSender should be countryOwner.\");\r\n        if (mem != \"\") {\r\n            ctry_[rID_][id].mem = mem;\r\n        }\r\n    }\r\n\r\n    function pot() isActive\r\n    public\r\n    payable {\r\n        pot_[rID_] += msg.value;\r\n    }\r\n\r\n    function setActive(uint idnum)\r\n    onlyDevs\r\n    public {\r\n        if (active) {\r\n            return;\r\n        }\r\n        active = true;\r\n        ctnum = idnum;\r\n    }\r\n\r\n    function withcom()\r\n    onlyDevs\r\n    public {\r\n        if (address(this).balance > pot_[rID_]) {\r\n            comaddr.transfer(address(this).balance - pot_[rID_]);\r\n        }\r\n    }\r\n\r\n    function settimmer(uint _gap)\r\n    private {\r\n        deadline += _gap;\r\n        if (deadline > now + max) {\r\n            deadline = now + max;\r\n        }\r\n    }\r\n\r\n    function turnover()\r\n    private\r\n    returns(bool) {\r\n        if (validplayers.length < ctnum) {\r\n            settimmer(max);\r\n            return true;\r\n        }\r\n\r\n        if (now > deadline) {\r\n            uint win = pot_[rID_].mul(6).div(10);\r\n            lastplayer.transfer(win);\r\n            lastwinner = lastplayer;\r\n            emit LOG_Winner(lastwinner, win);\r\n            pot_[rID_ + 1] += pot_[rID_] - win;\r\n            pot_[rID_] = 0;\r\n            deadline = now + max;\r\n            return false;\r\n        }\r\n\r\n        settimmer(gap);\r\n        return true;\r\n    }\r\n\r\n    function ()\r\n    public\r\n    payable {}\r\n\r\n    function buyOne(uint id, bytes32 memo) isHuman external payable {\r\n        require(msg.value >= min_purchase, \"Amount should be within range.\");\r\n        require(msg.value >= ctry_[rID_][id].price, \"Price should be within range.\");\r\n        require(id>0 && id <= ctnum, \"CountryNum should be within ctnum.\");\r\n        buy(id, memo, msg.value);\r\n    }\r\n    \r\n    function buyManyCountries(uint[] countryIds) isHuman\r\n    external\r\n    payable {\r\n        uint restValue = msg.value;\r\n        require(restValue >= countryIds.length.mul(min_purchase), \"Amount should be within range.\");\r\n\r\n        for (uint i = 0; i < countryIds.length; i++) {\r\n            uint countryid = countryIds[i];\r\n            if (countryid == 0 || countryid > ctnum) {\r\n                continue;\r\n            }\r\n\r\n            uint buyprice = min_purchase;\r\n            if (ctry_[rID_][countryid].price > 0) {\r\n                buyprice = ctry_[rID_][countryid].price;\r\n            }\r\n\r\n            if (restValue < buyprice) {\r\n                continue;\r\n            }\r\n\r\n            buy(countryid, \"\", buyprice);\r\n            restValue = restValue.sub(buyprice);\r\n        }\r\n\r\n        if (restValue > 0 ){\r\n            (msg.sender).transfer(restValue);\r\n        }\r\n    }\r\n\r\n    function devi(uint id,uint _price)\r\n    private\r\n    {\r\n        if( rID_ <= 1){\r\n            return;\r\n        }\r\n\r\n        if (rID_ > 2){\r\n            if (ctry_[rID_ - 1][id].owner != address(0x0)) {\r\n                ctry_[rID_ - 1][id].owner.transfer((_price).mul(15).div(1000));\r\n            }\r\n        }\r\n\r\n        if (ctry_[1][id].owner != address(0x0)) {\r\n            ctry_[1][id].owner.transfer((_price).mul(15).div(1000));\r\n        }\r\n    }\r\n\r\n    function buy(uint id, bytes32 memo, uint _price) isActive private {\r\n        if (memo != \"\") {\r\n            ctry_[rID_][id].mem = memo;\r\n        }\r\n\r\n        if (turnover() == true) {\r\n            uint gamepot = (_price).mul(7).div(100);\r\n            pot_[rID_] += gamepot;\r\n\r\n            devi(id,_price);\r\n            \r\n            if (ctry_[rID_][id].owner != address(0x0)) {\r\n                ctry_[rID_][id].owner.transfer((_price).mul(88).div(100)); \r\n            } else {\r\n                validplayers.push(id);\r\n            }\r\n\r\n            ctry_[rID_][id].owner = msg.sender;\r\n            ctry_[rID_][id].price = (_price).mul(14).div(10);\r\n            \r\n        } else {\r\n            rID_++;\r\n            validplayers.length = 0;\r\n            ctry_[rID_][id].owner = msg.sender;\r\n            ctry_[rID_][id].price = 0.07 ether;\r\n            validplayers.push(id);\r\n            (msg.sender).transfer(_price - min_purchase);\r\n            _price = min_purchase;\r\n        }\r\n        lastplayer = msg.sender;\r\n        totalinvest_[rID_] += _price;\r\n        ctry_[rID_][id].id = id;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns(uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns(uint256) {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b)\r\n    internal\r\n    pure\r\n    returns(uint256 c) {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x)\r\n    internal\r\n    pure\r\n    returns(uint256 y) {\r\n        uint256 z = ((add(x, 1)) / 2);\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = ((add((x / z), z)) / 2);\r\n        }\r\n    }\r\n\r\n\r\n    function sq(uint256 x)\r\n    internal\r\n    pure\r\n    returns(uint256) {\r\n        return (mul(x, x));\r\n    }\r\n\r\n\r\n    function pwr(uint256 x, uint256 y)\r\n    internal\r\n    pure\r\n    returns(uint256) {\r\n        if (x == 0)\r\n            return (0);\r\n        else if (y == 0)\r\n            return (1);\r\n        else {\r\n            uint256 z = x;\r\n            for (uint256 i = 1; i < y; i++)\r\n                z = mul(z, x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"idnum\",\"type\":\"uint256\"}],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastplayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pot_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withcom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validplayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"mem\",\"type\":\"bytes32\"}],\"name\":\"changeRemark\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ctry_\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"mem\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"countryIds\",\"type\":\"uint256[]\"}],\"name\":\"buyManyCountries\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comaddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"memo\",\"type\":\"bytes32\"}],\"name\":\"buyOne\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ctnum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalinvest_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getvalid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastwinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LOG_Winner\",\"type\":\"event\"}]","ContractName":"WorldByEth","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://32f807228fb92efd38d4becfc0fdc8981ea864c6bbbf73e9b8958b3b401adf96"}]}