{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4 .25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\nThe development of the contract is entirely owned by the X2invest campaign, any copying of the source code is not legal.\r\n*/\r\ncontract x15invest {\r\n    //use of library of safe mathematical operations    \r\n    using SafeMath for uint;\r\n    // array containing information about beneficiaries\r\n    mapping(address => uint) public userDeposit;\r\n    //array containing information about the time of payment\r\n    mapping(address => uint) public userTime;\r\n    //array containing information on interest paid\r\n    mapping(address => uint) public userBonus;\r\n    //array containing information on interest paid\r\n    mapping(address => uint) public percentWithdraw;\r\n    //fund fo transfer percent\r\n    address public projectFund = 0x15e3aAD84394012f450d7A6965f2f4C59Ca7071a;\r\n    //percentage deducted to the advertising fund\r\n    uint projectPercent = 9;\r\n    //time through which you can take dividends\r\n    uint public chargingTime = 1 hours;\r\n    //start persent 0.25% per hour\r\n    uint public startPercent = 175;\r\n    uint public lowPercent = 200;\r\n    uint public middlePercent = 225;\r\n    uint public highPersent = 250;\r\n    //interest rate increase steps\r\n    uint public stepLow = 1000 ether;\r\n    uint public stepMiddle = 2500 ether;\r\n    uint public stepHigh = 5000 ether;\r\n    uint public countOfInvestors = 0;\r\n    \r\n    modifier userExists() {\r\n        require(userDeposit[msg.sender] > 0, \"Deposit not found\");\r\n        _;\r\n    }\r\n\r\n    modifier timePayment() {\r\n        require(now >= userTime[msg.sender].add(chargingTime), \"Too fast payout request\");\r\n        _;\r\n    }\r\n\r\n    //return of interest on the deposit\r\n    function collectPercent() userExists timePayment internal {\r\n        //if the user received 200% or more of his contribution, delete the user\r\n        if ((userDeposit[msg.sender].mul(2)) <= percentWithdraw[msg.sender]) {\r\n            userDeposit[msg.sender] = 0;\r\n            userTime[msg.sender] = 0;\r\n            percentWithdraw[msg.sender] = 0;\r\n        } else {\r\n            uint payout = payoutAmount();\r\n            userTime[msg.sender] = now;\r\n            percentWithdraw[msg.sender] += payout;\r\n            msg.sender.transfer(payout);\r\n        }\r\n    }\r\n\r\n    //calculation of the current interest rate on the deposit\r\n    function persentRate() public view returns(uint) {\r\n        //get contract balance\r\n        uint balance = address(this).balance;\r\n        //calculate persent rate\r\n        if (balance < stepLow) {\r\n            return (startPercent);\r\n        }\r\n        if (balance >= stepLow && balance < stepMiddle) {\r\n            return (lowPercent);\r\n        }\r\n        if (balance >= stepMiddle && balance < stepHigh) {\r\n            return (middlePercent);\r\n        }\r\n        if (balance >= stepHigh) {\r\n            return (highPersent);\r\n        }\r\n    }\r\n\r\n    //refund of the amount available for withdrawal on deposit\r\n    function payoutAmount() public view returns(uint) {\r\n        uint persent = persentRate();\r\n        uint rate = userDeposit[msg.sender].mul(persent).div(100000);\r\n        uint interestRate = now.sub(userTime[msg.sender]).div(chargingTime);\r\n        uint withdrawalAmount = rate.mul(interestRate);\r\n        return (withdrawalAmount);\r\n    }\r\n    \r\n    function calculateBonus(uint _value)public pure returns(uint) {\r\n        uint bonus;\r\n        if(_value >= 5 ether && _value < 10 ether){\r\n            bonus = _value.mul(5).div(1000);\r\n        }else if(_value >= 10 ether && _value < 25 ether){\r\n            bonus = _value.div(100);\r\n        }else if(_value >= 25 ether && _value < 50 ether){\r\n            bonus = _value.mul(15).div(1000);\r\n        }else if(_value >= 50 ether && _value < 100 ether){\r\n            bonus = _value.mul(2).div(100);\r\n        }else if(_value >= 100 ether){\r\n            bonus = _value.mul(25).div(1000);\r\n        }else if(_value < 5 ether){\r\n            bonus = 0;\r\n        }\r\n        return(bonus);\r\n    }\r\n\r\n    //make a contribution to the system\r\n    function makeDeposit() private {\r\n        if (msg.value > 0) {\r\n            if (userDeposit[msg.sender] == 0) {\r\n                countOfInvestors += 1;\r\n            }\r\n            if (userDeposit[msg.sender] > 0 && now > userTime[msg.sender].add(chargingTime)) {\r\n                collectPercent();\r\n            }\r\n            uint bonus = calculateBonus(msg.value);\r\n            userDeposit[msg.sender] += msg.value.add(bonus);\r\n            userTime[msg.sender] = now;\r\n            userBonus[msg.sender] += bonus;\r\n            //sending money for advertising\r\n            projectFund.transfer(msg.value.mul(projectPercent).div(100));\r\n        } else {\r\n            collectPercent();\r\n        }\r\n    }\r\n\r\n    //return of deposit balance\r\n    function returnDeposit() userExists private {\r\n        \r\n        uint clearDeposit = userDeposit[msg.sender].sub(userBonus[msg.sender]); \r\n        uint withdrawalAmount = clearDeposit.sub(percentWithdraw[msg.sender]).sub(clearDeposit.mul(projectPercent).div(100));\r\n        //delete user record\r\n        userDeposit[msg.sender] = 0;\r\n        userTime[msg.sender] = 0;\r\n        userBonus[msg.sender] = 0;\r\n        percentWithdraw[msg.sender] = 0;\r\n        msg.sender.transfer(withdrawalAmount);\r\n    }\r\n\r\n    function() external payable {\r\n        //refund of remaining funds when transferring to a contract 0.00000112 ether\r\n        if (msg.value == 0.00000112 ether) {\r\n            returnDeposit();\r\n        } else {\r\n            makeDeposit();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepHigh\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"calculateBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chargingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepLow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepMiddle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highPersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"persentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"middlePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"x15invest","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://970afd74bba938959aa0a6fb7b10faf86f558bdd6302989dfe3dcb883298b7dd"}]}