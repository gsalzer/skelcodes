{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20Interface {\r\n    function balanceOf(address _owner) external returns (uint256);\r\n    function transfer(address _to, uint256 _value) external;\r\n}\r\n\r\ncontract Donations {\r\n    struct Project\r\n    {\r\n        uint16 Id;\r\n        uint256 Target;\r\n        uint256 Current;\r\n    }\r\n    mapping(uint16 => Project) public projects;\r\n    address owner;\r\n    uint8 public projectsCount;\r\n    \r\n    address queen;\r\n    address joker;\r\n    address knight;\r\n    address paladin;\r\n\r\n    ERC20Interface horseToken;\r\n    address horseTokenAddress = 0x5B0751713b2527d7f002c0c4e2a37e1219610A6B;\r\n    \r\n    uint8 jokerDivs = 50;\r\n    uint8 knightDivs = 30;\r\n    uint8 paladinDivs = 10;\r\n    \r\n    uint256 private toDistribute;\r\n    uint256 private toDistributeHorse;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => uint256) private _balancesHorse;\r\n   \r\n    constructor(address _queen, address _joker, address _knight, address _paladin) public {\r\n        owner = msg.sender;\r\n        queen = _queen;\r\n        joker = _joker;\r\n        knight = _knight;\r\n        paladin = _paladin;\r\n\r\n        horseToken = ERC20Interface(horseTokenAddress);\r\n    }\r\n /*   \r\n    function changeAddressQueen(address newAddr) external {\r\n        require(msg.sender == queen,\"wrong role\");\r\n        _transferCeo(newAddr);\r\n        queen = newAddr;\r\n    }\r\n    function changeAddressJoker(address newAddr) external {\r\n        require(msg.sender == joker,\"wrong role\");\r\n        _transferCeo(newAddr);\r\n        joker = newAddr;\r\n    }\r\n    function changeAddressKnight(address newAddr) external {\r\n        require(msg.sender == knight,\"wrong role\");\r\n        _transferCeo(newAddr);\r\n        knight = newAddr;\r\n    }\r\n    function changeAddressPaladin(address newAddr) external {\r\n        require(msg.sender == paladin,\"wrong role\");\r\n        _transferCeo(newAddr);\r\n        paladin = newAddr;\r\n    }\r\n*/    \r\n    function addProject(uint256 target) external\r\n    onlyOwner()\r\n    returns (uint16) {\r\n        uint16 newid = uint16(projectsCount);\r\n        projectsCount = projectsCount + 1;\r\n        Project storage proj = projects[newid];\r\n        proj.Id = newid;\r\n        proj.Target = target;\r\n        return newid;\r\n    }\r\n    \r\n    function donateToProject(uint16 id) external payable {\r\n        require(id < projectsCount,\"project doesnt exist\");\r\n        require(msg.value > 0,\"non null donations only\");\r\n        projects[id].Current = projects[id].Current + msg.value;\r\n        toDistribute = toDistribute + msg.value;\r\n    }\r\n    \r\n    function () external payable {\r\n       //fallback function just accept the funds\r\n    }\r\n    \r\n    function withdraw() external {\r\n        //check for pure transfer ETH and HORSe donations\r\n        _distributeRest();\r\n        if(toDistribute > 0)\r\n            _distribute();\r\n        if(toDistributeHorse > 0)\r\n            _distributeHorse();\r\n        if(_balances[msg.sender] > 0) {\r\n            msg.sender.transfer(_balances[msg.sender]);\r\n            _balances[msg.sender] = 0;\r\n        }\r\n\r\n        if(_balancesHorse[msg.sender] > 0) {\r\n            horseToken.transfer(msg.sender,_balancesHorse[msg.sender]);\r\n            _balancesHorse[msg.sender] = 0;\r\n        }\r\n    }\r\n    \r\n    function checkBalance() external view\r\n    onlyCeo() returns (uint256,uint256) {\r\n        return (_balances[msg.sender],_balancesHorse[msg.sender]);\r\n    }\r\n\r\n    function _distributeRest() internal {\r\n        int rest = int(address(this).balance)\r\n        - int(_balances[joker]) \r\n        - int(_balances[knight]) \r\n        - int(_balances[paladin]) \r\n        - int(_balances[queen]) \r\n        - int(toDistribute);\r\n        if(rest > 0) {\r\n            toDistribute = toDistribute + uint256(rest);\r\n        }\r\n\r\n        uint256 ownedHorse = horseToken.balanceOf(address(this));\r\n        if(ownedHorse > 0) {\r\n            int restHorse = int(ownedHorse)\r\n            - int(_balancesHorse[joker]) \r\n            - int(_balancesHorse[knight]) \r\n            - int(_balancesHorse[paladin]) \r\n            - int(_balancesHorse[queen]) \r\n            - int(toDistributeHorse);\r\n\r\n            if(restHorse > 0) {\r\n                toDistributeHorse = toDistributeHorse + uint256(restHorse);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _distribute() private {\r\n        uint256 parts = toDistribute / 100;\r\n        uint256 jokerDue = parts * 50;\r\n        uint256 knightDue = parts * 30;\r\n        uint256 paladinDue = parts * 10;\r\n\r\n        _balances[joker] = _balances[joker] + jokerDue;\r\n        _balances[knight] = _balances[knight] + knightDue;\r\n        _balances[paladin] = _balances[paladin] + paladinDue;\r\n        _balances[queen] = _balances[queen] + (toDistribute - jokerDue - knightDue - paladinDue);\r\n        \r\n        toDistribute = 0;\r\n    }\r\n\r\n    function _distributeHorse() private {\r\n        uint256 parts = toDistributeHorse / 100;\r\n        uint256 jokerDue = parts * 50;\r\n        uint256 knightDue = parts * 30;\r\n        uint256 paladinDue = parts * 10;\r\n\r\n        _balancesHorse[joker] = _balancesHorse[joker] + jokerDue;\r\n        _balancesHorse[knight] = _balancesHorse[knight] + knightDue;\r\n        _balancesHorse[paladin] = _balancesHorse[paladin] + paladinDue;\r\n        _balancesHorse[queen] = _balancesHorse[queen] + (toDistributeHorse - jokerDue - knightDue - paladinDue);\r\n\r\n        toDistributeHorse = 0;\r\n    }\r\n /*   \r\n    function _transferCeo(address newAddr) internal\r\n    unique(newAddr)\r\n    {\r\n        require(newAddr != address(0),\"address is 0\");\r\n\r\n        _balances[newAddr] = _balances[msg.sender];\r\n        _balances[msg.sender] = 0;\r\n\r\n        _balancesHorse[newAddr] = _balancesHorse[msg.sender];\r\n        _balancesHorse[msg.sender] = 0;\r\n    }\r\n */   \r\n    function _isCeo(address addr) internal view returns (bool) {\r\n        return ((addr == queen) || (addr == joker) || (addr == knight) || (addr == paladin));\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyCeo() {\r\n        require(_isCeo(msg.sender), \"not ceo\");\r\n        _;\r\n    }\r\n    \r\n    modifier unique(address newAddr) {\r\n        require(!_isCeo(newAddr),\"not unique\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"addProject\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"projects\",\"outputs\":[{\"name\":\"Id\",\"type\":\"uint16\"},{\"name\":\"Target\",\"type\":\"uint256\"},{\"name\":\"Current\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"donateToProject\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_queen\",\"type\":\"address\"},{\"name\":\"_joker\",\"type\":\"address\"},{\"name\":\"_knight\",\"type\":\"address\"},{\"name\":\"_paladin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Donations","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b21a510fe31b160663fd768b8b074ef00f41a30c0000000000000000000000004864919ea695eef41d68c587322514ef76e766b60000000000000000000000008d7f18531e01c1e352a7c86575d13c20861d0a6e000000000000000000000000edbbd360da94ca21f9ee6d9e43ad4b1b90a897bd","Library":"","SwarmSource":"bzzr://644acbe908194fa4e3a7381d1f3891a96f1b302c17197d37ce3216fd3a4288e9"}]}