{"status":"1","message":"OK","result":[{"SourceCode":"contract Owner {\r\n    address public owner;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function Owner(address _owner) public {\r\n        owner = _owner;\r\n    }\r\n\r\n    function changeOwner(address _newOwnerAddr) public onlyOwner {\r\n        require(_newOwnerAddr != address(0));\r\n        owner = _newOwnerAddr;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract PIPOT is Owner {\r\n    using SafeMath for uint256;\r\n    event Game(uint _game, uint indexed _time);\r\n    event ChangePrice(uint _price);\r\n    event Ticket(\r\n        address indexed _address,\r\n        uint indexed _game,\r\n        uint _number,\r\n        uint _time,\r\n        uint _price\r\n    );\r\n    \r\n    event ChangeFee(uint _fee);\r\n    event Winner(address _winnerAddress, uint _price, uint _jackpot);\r\n    event Lose(uint _price, uint _currentJackpot);\r\n    \r\n    // Game fee.\r\n    uint public fee = 20;\r\n    // Current game number.\r\n    uint public game;\r\n    // Ticket price.\r\n    uint public ticketPrice = 0.1 ether;\r\n    // All-time game jackpot.\r\n    uint public allTimeJackpot = 0;\r\n    // All-time game players count\r\n    uint public allTimePlayers = 0;\r\n    \r\n    // Game status.\r\n    bool public isActive = true;\r\n    // The variable that indicates game status switching.\r\n    bool public toogleStatus = false;\r\n    // The array of all games\r\n    uint[] public games;\r\n    \r\n    // Store game jackpot.\r\n    mapping(uint => uint) jackpot;\r\n    // Store game players.\r\n    mapping(uint => address[]) players;\r\n    mapping(uint => mapping(uint => address[])) orders;\r\n\r\n    \r\n    // Funds distributor address.\r\n    address public fundsDistributor;\r\n\r\n    /**\r\n    * @dev Check sender address and compare it to an owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function PIPOT(\r\n        address distributor\r\n    )\r\n    public Owner(msg.sender)\r\n    {\r\n        fundsDistributor = distributor;\r\n        startGame();\r\n    }\r\n\r\n    function getPlayedGamePlayers() \r\n        public\r\n        view\r\n        returns (uint)\r\n    {\r\n        return getPlayersInGame(game);\r\n    }\r\n\r\n    function getPlayersInGame(uint playedGame) \r\n        public \r\n        view\r\n        returns (uint)\r\n    {\r\n        return players[playedGame].length;\r\n    }\r\n\r\n    function getPlayedGameJackpot() \r\n        public \r\n        view\r\n        returns (uint) \r\n    {\r\n        return getGameJackpot(game);\r\n    }\r\n    \r\n    function getGameJackpot(uint playedGame) \r\n        public \r\n        view \r\n        returns(uint)\r\n    {\r\n        return jackpot[playedGame];\r\n    }\r\n    \r\n    function toogleActive() public onlyOwner() {\r\n        if (!isActive) {\r\n            isActive = true;\r\n        } else {\r\n            toogleStatus = !toogleStatus;\r\n        }\r\n    }\r\n    \r\n    function start(uint winPrice) public onlyOwner() {\r\n        if (players[game].length > 0) {\r\n            pickTheWinner(winPrice);\r\n        }\r\n        startGame();\r\n    }\r\n\r\n    function changeTicketPrice(uint price) \r\n        public \r\n        onlyOwner() \r\n    {\r\n        ticketPrice = price;\r\n        emit ChangePrice(price);\r\n    }\r\n    \r\n    function changeFee(uint _fee) \r\n        public \r\n        onlyOwner() \r\n    {\r\n        fee = _fee;\r\n        emit ChangeFee(_fee);\r\n    }\r\n    \r\n    function buyTicket(uint betPrice) public payable {\r\n        require(isActive);\r\n        require(msg.value == ticketPrice);\r\n        \r\n        \r\n        uint playerNumber =  players[game].length;\r\n        \r\n        players[game].push(msg.sender);\r\n        orders[game][betPrice].push(msg.sender);\r\n        \r\n        uint distribute = msg.value * fee / 100;\r\n        \r\n        jackpot[game] += (msg.value - distribute);\r\n        \r\n        fundsDistributor.transfer(distribute);\r\n        \r\n        emit Ticket(msg.sender, game, playerNumber, now, betPrice);\r\n    }\r\n\r\n    /**\r\n    * @dev Start the new game.\r\n    * @dev Checks ticket price changes, if exists new ticket price the price will be changed.\r\n    * @dev Checks game status changes, if exists request for changing game status game status \r\n    * @dev will be changed.\r\n    */\r\n    function startGame() internal {\r\n        require(isActive);\r\n\r\n        game = block.number;\r\n        if (toogleStatus) {\r\n            isActive = !isActive;\r\n            toogleStatus = false;\r\n        }\r\n        emit Game(game, now);\r\n    }\r\n\r\n    function pickTheWinner(uint winPrice) internal {\r\n        \r\n        uint toPlayer;\r\n        \r\n        toPlayer = jackpot[game]/orders[game][winPrice].length;\r\n        \r\n        if(orders[game][winPrice].length > 0){\r\n            for(uint i = 0; i < orders[game][winPrice].length;i++){\r\n                orders[game][winPrice][i].transfer(toPlayer);\r\n                emit Winner(orders[game][winPrice][i], winPrice, toPlayer);\r\n            }   \r\n        }else{\r\n            emit Lose(winPrice, jackpot[game]);\r\n        }\r\n        \r\n        allTimeJackpot += toPlayer;\r\n        allTimePlayers += players[game].length;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"toogleActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playedGame\",\"type\":\"uint256\"}],\"name\":\"getGameJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTimePlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"changeTicketPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allTimeJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"betPrice\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playedGame\",\"type\":\"uint256\"}],\"name\":\"getPlayersInGame\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundsDistributor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toogleStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"winPrice\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwnerAddr\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayedGamePlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayedGameJackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"distributor\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Game\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"ChangePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Ticket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"ChangeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_winnerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_jackpot\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentJackpot\",\"type\":\"uint256\"}],\"name\":\"Lose\",\"type\":\"event\"}]","ContractName":"PIPOT","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000484f8abaea1b7d7d25961a193da2d2ef3c611de6","Library":"","SwarmSource":"bzzr://e38ebe0bc21491ede297f8c0568833b1e1741924e07947de9a57c52f6ee3151c"}]}