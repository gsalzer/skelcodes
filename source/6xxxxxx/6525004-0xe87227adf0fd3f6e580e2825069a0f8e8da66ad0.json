{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/IAccessToken.sol\r\n\r\ninterface IAccessToken {\r\n  function lockBBK(\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool);\r\n\r\n  function unlockBBK(\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool);\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool);\r\n\r\n  function distribute(\r\n    uint256 _amount\r\n  )\r\n    external\r\n    returns (bool);\r\n\r\n  function burn(\r\n    address _address,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IRegistry.sol\r\n\r\n// limited ContractRegistry definition\r\ninterface IRegistry {\r\n  function owner()\r\n    external\r\n    returns(address);\r\n\r\n  function updateContractAddress(\r\n    string _name,\r\n    address _address\r\n  )\r\n    external\r\n    returns (address);\r\n\r\n  function getContractAddress(\r\n    string _name\r\n  )\r\n    external\r\n    view\r\n    returns (address);\r\n}\r\n\r\n// File: contracts/FeeManager.sol\r\n\r\ncontract FeeManager {\r\n  using SafeMath for uint256;\r\n\r\n  uint8 public constant version = 1;\r\n  uint256 actRate = 1000;\r\n\r\n  IRegistry private registry;\r\n  constructor(\r\n    address _registryAddress\r\n  )\r\n    public\r\n  {\r\n    require(_registryAddress != address(0));\r\n    registry = IRegistry(_registryAddress);\r\n  }\r\n\r\n  function weiToAct(uint256 _wei)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n\r\n    return _wei.mul(actRate);\r\n  }\r\n\r\n  function actToWei(uint256 _act)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _act.div(actRate);\r\n  }\r\n\r\n  function payFee()\r\n    public\r\n    payable\r\n    returns (bool)\r\n  {\r\n    IAccessToken act = IAccessToken(\r\n      registry.getContractAddress(\"AccessToken\")\r\n    );\r\n    require(act.distribute(weiToAct(msg.value)));\r\n    return true;\r\n  }\r\n\r\n  function claimFee(\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    IAccessToken act = IAccessToken(\r\n      registry.getContractAddress(\"AccessToken\")\r\n    );\r\n    require(act.burn(msg.sender, _value));\r\n    msg.sender.transfer(actToWei(_value));\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"payFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_act\",\"type\":\"uint256\"}],\"name\":\"actToWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"weiToAct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"claimFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registryAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"FeeManager","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005973376b603268fe4251d13040226078257014f8","Library":"","SwarmSource":"bzzr://de35d014ab33df3dc3fd8cc8ee429e30e85faa968829a62b1ef645b3a6b6be1f"}]}