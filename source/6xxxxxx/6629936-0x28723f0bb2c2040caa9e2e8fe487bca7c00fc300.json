{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, reverts on overflow.\r\n     */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        require(_b <= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, reverts on overflow.\r\n     */\r\n    function add(uint256 _a, uint256 _b) internal pure returns(uint256) {\r\n        uint256 c = _a + _b;\r\n        require(c >= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary ExtendedMath {\r\n    function limitLessThan(uint a, uint b) internal pure returns(uint c) {\r\n        if (a > b) return b;\r\n        return a;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @dev Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract InterfaceContracts is Ownable {\r\n    InterfaceContracts public _internalMod;\r\n    \r\n    function setModifierContract (address _t) onlyOwner public {\r\n        _internalMod = InterfaceContracts(_t);\r\n    }\r\n\r\n    modifier onlyMiningContract() {\r\n      require(msg.sender == _internalMod._contract_miner(), \"Wrong sender\");\r\n          _;\r\n      }\r\n\r\n    modifier onlyTokenContract() {\r\n      require(msg.sender == _internalMod._contract_token(), \"Wrong sender\");\r\n      _;\r\n    }\r\n    \r\n    modifier onlyMasternodeContract() {\r\n      require(msg.sender == _internalMod._contract_masternode(), \"Wrong sender\");\r\n      _;\r\n    }\r\n    \r\n    modifier onlyVotingOrOwner() {\r\n      require(msg.sender == _internalMod._contract_voting() || msg.sender == owner, \"Wrong sender\");\r\n      _;\r\n    }\r\n    \r\n    modifier onlyVotingContract() {\r\n      require(msg.sender == _internalMod._contract_voting() || msg.sender == owner, \"Wrong sender\");\r\n      _;\r\n    }\r\n      \r\n    function _contract_voting () public view returns (address) {\r\n        return _internalMod._contract_voting();\r\n    }\r\n    \r\n    function _contract_masternode () public view returns (address) {\r\n        return _internalMod._contract_masternode();\r\n    }\r\n    \r\n    function _contract_token () public view returns (address) {\r\n        return _internalMod._contract_token();\r\n    }\r\n    \r\n    function _contract_miner () public view returns (address) {\r\n        return _internalMod._contract_miner();\r\n    }\r\n}\r\n\r\ninterface ICaelumMasternode {\r\n    function _externalArrangeFlow() external;\r\n    function rewardsProofOfWork() external returns (uint) ;\r\n    function rewardsMasternode() external returns (uint) ;\r\n    function masternodeIDcounter() external returns (uint) ;\r\n    function masternodeCandidate() external returns (uint) ;\r\n    function getUserFromID(uint) external view returns  (address) ;\r\n    function contractProgress() external view returns (uint, uint, uint, uint, uint, uint, uint, uint);\r\n}\r\n\r\ninterface ICaelumToken {\r\n    function rewardExternal(address, uint) external;\r\n}\r\n\r\ninterface EIP918Interface  {\r\n\r\n    /*\r\n     * Externally facing mint function that is called by miners to validate challenge digests, calculate reward,\r\n     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Once complete,\r\n     * a Mint event is emitted before returning a success indicator.\r\n     **/\r\n  \tfunction mint(uint256 nonce, bytes32 challenge_digest) external returns (bool success);\r\n\r\n\r\n\t/*\r\n     * Returns the challenge number\r\n     **/\r\n    function getChallengeNumber() external view returns (bytes32);\r\n\r\n    /*\r\n     * Returns the mining difficulty. The number of digits that the digest of the PoW solution requires which\r\n     * typically auto adjusts during reward generation.\r\n     **/\r\n    function getMiningDifficulty() external view returns (uint);\r\n\r\n    /*\r\n     * Returns the mining target\r\n     **/\r\n    function getMiningTarget() external view returns (uint);\r\n\r\n    /*\r\n     * Return the current reward amount. Depending on the algorithm, typically rewards are divided every reward era\r\n     * as tokens are mined to provide scarcity\r\n     **/\r\n    function getMiningReward() external view returns (uint);\r\n\r\n    /*\r\n     * Upon successful verification and reward the mint method dispatches a Mint Event indicating the reward address,\r\n     * the reward amount, the epoch count and newest challenge number.\r\n     **/\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n\r\n}\r\n\r\ncontract AbstractERC918 is EIP918Interface {\r\n\r\n    // generate a new challenge number after a new reward is minted\r\n    bytes32 public challengeNumber;\r\n\r\n    // the current mining difficulty\r\n    uint public difficulty;\r\n\r\n    // cumulative counter of the total minted tokens\r\n    uint public tokensMinted;\r\n\r\n    // track read only minting statistics\r\n    struct Statistics {\r\n        address lastRewardTo;\r\n        uint lastRewardAmount;\r\n        uint lastRewardEthBlockNumber;\r\n        uint lastRewardTimestamp;\r\n    }\r\n\r\n    Statistics public statistics;\r\n\r\n    /*\r\n     * Externally facing mint function that is called by miners to validate challenge digests, calculate reward,\r\n     * populate statistics, mutate epoch variables and adjust the solution difficulty as required. Once complete,\r\n     * a Mint event is emitted before returning a success indicator.\r\n     **/\r\n    function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success);\r\n\r\n\r\n    /*\r\n     * Internal interface function _hash. Overide in implementation to define hashing algorithm and\r\n     * validation\r\n     **/\r\n    function _hash(uint256 nonce, bytes32 challenge_digest) internal returns (bytes32 digest);\r\n\r\n    /*\r\n     * Internal interface function _reward. Overide in implementation to calculate and return reward\r\n     * amount\r\n     **/\r\n    function _reward() internal returns (uint);\r\n\r\n    /*\r\n     * Internal interface function _newEpoch. Overide in implementation to define a cutpoint for mutating\r\n     * mining variables in preparation for the next epoch\r\n     **/\r\n    function _newEpoch(uint256 nonce) internal returns (uint);\r\n\r\n    /*\r\n     * Internal interface function _adjustDifficulty. Overide in implementation to adjust the difficulty\r\n     * of the mining as required\r\n     **/\r\n    function _adjustDifficulty() internal returns (uint);\r\n\r\n}\r\n\r\ncontract CaelumAbstractMiner is InterfaceContracts, AbstractERC918 {\r\n    /**\r\n     * CaelumMiner contract.\r\n     *\r\n     * We need to make sure the contract is 100% compatible when using the EIP918Interface.\r\n     * This contract is an abstract Caelum miner contract.\r\n     *\r\n     * Function 'mint', and '_reward' are overriden in the CaelumMiner contract.\r\n     * Function '_reward_masternode' is added and needs to be overriden in the CaelumMiner contract.\r\n     */\r\n\r\n    using SafeMath for uint;\r\n    using ExtendedMath for uint;\r\n\r\n    uint256 public totalSupply = 2100000000000000;\r\n\r\n    uint public latestDifficultyPeriodStarted;\r\n    uint public epochCount;\r\n    uint public baseMiningReward = 50;\r\n    uint public blocksPerReadjustment = 512;\r\n    uint public _MINIMUM_TARGET = 2 ** 16;\r\n    uint public _MAXIMUM_TARGET = 2 ** 234;\r\n    uint public rewardEra = 0;\r\n\r\n    uint public maxSupplyForEra;\r\n    uint public MAX_REWARD_ERA = 39;\r\n    uint public MINING_RATE_FACTOR = 60; //mint the token 60 times less often than ether\r\n\r\n    uint public MAX_ADJUSTMENT_PERCENT = 100;\r\n    uint public TARGET_DIVISOR = 2000;\r\n    uint public QUOTIENT_LIMIT = TARGET_DIVISOR.div(2);\r\n    mapping(bytes32 => bytes32) solutionForChallenge;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    bytes32 public challengeNumber;\r\n    uint public difficulty;\r\n    uint public tokensMinted;\r\n\r\n    Statistics public statistics;\r\n\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n    event RewardMasternode(address candidate, uint amount);\r\n\r\n    constructor() public {\r\n        tokensMinted = 0;\r\n        maxSupplyForEra = totalSupply.div(2);\r\n        difficulty = _MAXIMUM_TARGET;\r\n        latestDifficultyPeriodStarted = block.number;\r\n        _newEpoch(0);\r\n    }\r\n\r\n    function _newEpoch(uint256 nonce) internal returns(uint) {\r\n        if (tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < MAX_REWARD_ERA) {\r\n            rewardEra = rewardEra + 1;\r\n        }\r\n        maxSupplyForEra = totalSupply - totalSupply.div(2 ** (rewardEra + 1));\r\n        epochCount = epochCount.add(1);\r\n        challengeNumber = blockhash(block.number - 1);\r\n        return (epochCount);\r\n    }\r\n\r\n    function mint(uint256 nonce, bytes32 challenge_digest) public returns(bool success);\r\n\r\n    function _hash(uint256 nonce, bytes32 challenge_digest) internal returns(bytes32 digest) {\r\n        digest = keccak256(challengeNumber, msg.sender, nonce);\r\n        if (digest != challenge_digest) revert();\r\n        if (uint256(digest) > difficulty) revert();\r\n        bytes32 solution = solutionForChallenge[challengeNumber];\r\n        solutionForChallenge[challengeNumber] = digest;\r\n        if (solution != 0x0) revert(); //prevent the same answer from awarding twice\r\n    }\r\n\r\n    function _reward() internal returns(uint);\r\n\r\n    function _reward_masternode() internal returns(uint);\r\n\r\n    function _adjustDifficulty() internal returns(uint) {\r\n        //every so often, readjust difficulty. Dont readjust when deploying\r\n        if (epochCount % blocksPerReadjustment != 0) {\r\n            return difficulty;\r\n        }\r\n\r\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\r\n        //assume 360 ethereum blocks per hour\r\n        //we want miners to spend 10 minutes to mine each 'block', about 60 ethereum blocks = one 0xbitcoin epoch\r\n        uint epochsMined = blocksPerReadjustment;\r\n        uint targetEthBlocksPerDiffPeriod = epochsMined * MINING_RATE_FACTOR;\r\n        //if there were less eth blocks passed in time than expected\r\n        if (ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod) {\r\n            uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(MAX_ADJUSTMENT_PERCENT)).div(ethBlocksSinceLastDifficultyPeriod);\r\n            uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(QUOTIENT_LIMIT);\r\n            // If there were 5% more blocks mined than expected then this is 5.  If there were 100% more blocks mined than expected then this is 100.\r\n            //make it harder\r\n            difficulty = difficulty.sub(difficulty.div(TARGET_DIVISOR).mul(excess_block_pct_extra)); //by up to 50 %\r\n        } else {\r\n            uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(MAX_ADJUSTMENT_PERCENT)).div(targetEthBlocksPerDiffPeriod);\r\n            uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(QUOTIENT_LIMIT); //always between 0 and 1000\r\n            //make it easier\r\n            difficulty = difficulty.add(difficulty.div(TARGET_DIVISOR).mul(shortage_block_pct_extra)); //by up to 50 %\r\n        }\r\n        latestDifficultyPeriodStarted = block.number;\r\n        if (difficulty < _MINIMUM_TARGET) //very difficult\r\n        {\r\n            difficulty = _MINIMUM_TARGET;\r\n        }\r\n        if (difficulty > _MAXIMUM_TARGET) //very easy\r\n        {\r\n            difficulty = _MAXIMUM_TARGET;\r\n        }\r\n    }\r\n\r\n    function getChallengeNumber() public view returns(bytes32) {\r\n        return challengeNumber;\r\n    }\r\n\r\n    function getMiningDifficulty() public view returns(uint) {\r\n        return _MAXIMUM_TARGET.div(difficulty);\r\n    }\r\n\r\n    function getMiningTarget() public view returns(uint) {\r\n        return difficulty;\r\n    }\r\n\r\n    function getMiningReward() public view returns(uint) {\r\n        return (baseMiningReward * 1e8).div(2 ** rewardEra);\r\n    }\r\n\r\n    function getMintDigest(\r\n        uint256 nonce,\r\n        bytes32 challenge_digest,\r\n        bytes32 challenge_number\r\n    )\r\n    public view returns(bytes32 digesttest) {\r\n        bytes32 digest = keccak256(challenge_number, msg.sender, nonce);\r\n        return digest;\r\n    }\r\n\r\n    function checkMintSolution(\r\n        uint256 nonce,\r\n        bytes32 challenge_digest,\r\n        bytes32 challenge_number,\r\n        uint testTarget\r\n    )\r\n    public view returns(bool success) {\r\n        bytes32 digest = keccak256(challenge_number, msg.sender, nonce);\r\n        if (uint256(digest) > testTarget) revert();\r\n        return (digest == challenge_digest);\r\n    }\r\n}\r\n\r\ncontract CaelumMiner is CaelumAbstractMiner {\r\n\r\n    ICaelumToken public tokenInterface;\r\n    ICaelumMasternode public masternodeInterface;\r\n    bool public ACTIVE_STATE = false;\r\n    uint swapStartedBlock = now;\r\n    uint public gasPriceLimit = 999;\r\n\r\n    /**\r\n     * @dev Allows the owner to set a gas limit on submitting solutions.\r\n     * courtesy of KiwiToken.\r\n     * See https://github.com/liberation-online/MineableToken for more details why.\r\n     */\r\n\r\n    modifier checkGasPrice(uint txnGasPrice) {\r\n        require(txnGasPrice <= gasPriceLimit * 1000000000, \"Gas above gwei limit!\");\r\n        _;\r\n    }\r\n\r\n    event GasPriceSet(uint8 _gasPrice);\r\n\r\n    function setGasPriceLimit(uint8 _gasPrice) onlyOwner public {\r\n        require(_gasPrice > 0);\r\n        gasPriceLimit = _gasPrice;\r\n\r\n        emit GasPriceSet(_gasPrice); //emit event\r\n    }\r\n\r\n    function setTokenContract() internal {\r\n        tokenInterface = ICaelumToken(_contract_token());\r\n    }\r\n\r\n    function setMasternodeContract() internal {\r\n        masternodeInterface = ICaelumMasternode(_contract_masternode());\r\n    }\r\n\r\n    /**\r\n     * Override; For some reason, truffle testing does not recognize function.\r\n     */\r\n    function setModifierContract (address _contract) onlyOwner public {\r\n        require (now <= swapStartedBlock + 10 days);\r\n        _internalMod = InterfaceContracts(_contract);\r\n        setMasternodeContract();\r\n        setTokenContract();\r\n    }\r\n\r\n    /**\r\n    * @dev Move the voting away from token. All votes will be made from the voting\r\n    */\r\n    function VoteModifierContract (address _contract) onlyVotingContract external {\r\n        //_internalMod = CaelumModifierAbstract(_contract);\r\n        _internalMod = InterfaceContracts(_contract);\r\n        setMasternodeContract();\r\n        setTokenContract();\r\n    }\r\n\r\n    function mint(uint256 nonce, bytes32 challenge_digest) checkGasPrice(tx.gasprice) public returns(bool success) {\r\n        require(ACTIVE_STATE);\r\n\r\n        _hash(nonce, challenge_digest);\r\n\r\n        masternodeInterface._externalArrangeFlow();\r\n\r\n        uint rewardAmount = _reward();\r\n        uint rewardMasternode = _reward_masternode();\r\n\r\n        tokensMinted += rewardAmount.add(rewardMasternode);\r\n\r\n        uint epochCounter = _newEpoch(nonce);\r\n\r\n        _adjustDifficulty();\r\n\r\n        statistics = Statistics(msg.sender, rewardAmount, block.number, now);\r\n\r\n        emit Mint(msg.sender, rewardAmount, epochCounter, challengeNumber);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _reward() internal returns(uint) {\r\n\r\n        uint _pow = masternodeInterface.rewardsProofOfWork();\r\n\r\n        tokenInterface.rewardExternal(msg.sender, 1 * 1e8);\r\n\r\n        return _pow;\r\n    }\r\n\r\n    function _reward_masternode() internal returns(uint) {\r\n\r\n        uint _mnReward = masternodeInterface.rewardsMasternode();\r\n        if (masternodeInterface.masternodeIDcounter() == 0) return 0;\r\n\r\n        address _mnCandidate = masternodeInterface.getUserFromID(masternodeInterface.masternodeCandidate()); // userByIndex[masternodeCandidate].accountOwner;\r\n        if (_mnCandidate == 0x0) return 0;\r\n\r\n        tokenInterface.rewardExternal(_mnCandidate, _mnReward);\r\n\r\n        emit RewardMasternode(_mnCandidate, _mnReward);\r\n\r\n        return _mnReward;\r\n    }\r\n\r\n    /**\r\n     * @dev Fetch data from the actual reward. We do this to prevent pools payout out\r\n     * the global reward instead of the calculated ones.\r\n     * By default, pools fetch the `getMiningReward()` value and will payout this amount.\r\n     */\r\n    function getMiningRewardForPool() public view returns(uint) {\r\n        return masternodeInterface.rewardsProofOfWork();\r\n    }\r\n\r\n    function getMiningReward() public view returns(uint) {\r\n        return (baseMiningReward * 1e8).div(2 ** rewardEra);\r\n    }\r\n\r\n    function contractProgress() public view returns\r\n        (\r\n            uint epoch,\r\n            uint candidate,\r\n            uint round,\r\n            uint miningepoch,\r\n            uint globalreward,\r\n            uint powreward,\r\n            uint masternodereward,\r\n            uint usercounter\r\n        ) {\r\n            return ICaelumMasternode(_contract_masternode()).contractProgress();\r\n\r\n        }\r\n\r\n    /**\r\n     * @dev Call this function prior to mining to copy all old contract values.\r\n     * This included minted tokens, difficulty, etc..\r\n     */\r\n\r\n    function getDataFromContract(address _previous_contract) onlyOwner public {\r\n        require(ACTIVE_STATE == false);\r\n        require(_contract_token() != 0);\r\n        require(_contract_masternode() != 0);\r\n\r\n        CaelumAbstractMiner prev = CaelumAbstractMiner(_previous_contract);\r\n        difficulty = prev.difficulty();\r\n        rewardEra = prev.rewardEra();\r\n        MINING_RATE_FACTOR = prev.MINING_RATE_FACTOR();\r\n        maxSupplyForEra = prev.maxSupplyForEra();\r\n        tokensMinted = prev.tokensMinted();\r\n        epochCount = prev.epochCount();\r\n\r\n        ACTIVE_STATE = true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"TARGET_DIVISOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningRewardForPool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contract_miner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masternodeInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"VoteModifierContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningDifficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"difficulty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_ADJUSTMENT_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setModifierContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_previous_contract\",\"type\":\"address\"}],\"name\":\"getDataFromContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardEra\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINING_RATE_FACTOR\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_REWARD_ERA\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChallengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupplyForEra\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseMiningReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractProgress\",\"outputs\":[{\"name\":\"epoch\",\"type\":\"uint256\"},{\"name\":\"candidate\",\"type\":\"uint256\"},{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"miningepoch\",\"type\":\"uint256\"},{\"name\":\"globalreward\",\"type\":\"uint256\"},{\"name\":\"powreward\",\"type\":\"uint256\"},{\"name\":\"masternodereward\",\"type\":\"uint256\"},{\"name\":\"usercounter\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"},{\"name\":\"testTarget\",\"type\":\"uint256\"}],\"name\":\"checkMintSolution\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contract_voting\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACTIVE_STATE\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MAXIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"statistics\",\"outputs\":[{\"name\":\"lastRewardTo\",\"type\":\"address\"},{\"name\":\"lastRewardAmount\",\"type\":\"uint256\"},{\"name\":\"lastRewardEthBlockNumber\",\"type\":\"uint256\"},{\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasPriceLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"name\":\"challenge_number\",\"type\":\"bytes32\"}],\"name\":\"getMintDigest\",\"outputs\":[{\"name\":\"digesttest\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contract_masternode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"QUOTIENT_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_contract_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_internalMod\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestDifficultyPeriodStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksPerReadjustment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MINIMUM_TARGET\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint8\"}],\"name\":\"setGasPriceLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_gasPrice\",\"type\":\"uint8\"}],\"name\":\"GasPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"epochCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newChallengeNumber\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardMasternode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CaelumMiner","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a7e563a5ef82360e8128579db92e871780997725bf37ea1d7c381d3fc273024c"}]}