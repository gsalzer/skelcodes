{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\ninterface IExchangeFormula {\r\n    function calculatePurchaseReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _depositAmount) external view returns (uint256);\r\n    function calculateSaleReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _sellAmount) external view returns (uint256);\r\n}\r\n\r\ninterface ITradeableAsset {\r\n    function totalSupply() external view returns (uint256);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n    function decimals() external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external;\r\n    function balanceOf(address _address) external view returns (uint256);\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract Administered {\r\n    address public creator;\r\n\r\n    mapping (address => bool) public admins;\r\n\r\n    constructor() public {\r\n        creator = msg.sender;\r\n        admins[creator] = true;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(creator == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(admins[msg.sender] || creator == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function grantAdmin(address newAdmin) onlyOwner  public {\r\n        _grantAdmin(newAdmin);\r\n    }\r\n\r\n    function _grantAdmin(address newAdmin) internal\r\n    {\r\n        admins[newAdmin] = true;\r\n    }\r\n\r\n    function changeOwner(address newOwner) onlyOwner public {\r\n        creator = newOwner;\r\n    }\r\n\r\n    function revokeAdminStatus(address user) onlyOwner public {\r\n        admins[user] = false;\r\n    }\r\n}\r\n\r\ncontract ExchangerV4 is Administered, tokenRecipient {\r\n    bool public enabled = false;\r\n\r\n    ITradeableAsset public tokenContract;\r\n    IExchangeFormula public formulaContract;\r\n    uint32 public weight;\r\n    uint32 public fee=5000; //0.5%\r\n    uint256 public uncirculatedSupplyCount=0;\r\n    uint256 public collectedFees=0;\r\n    uint256 public virtualReserveBalance=0;\r\n\r\n    uint public thresholdSendToSafeWallet = 100000000000000000; \r\n    uint public sendToSafeWalletPercentage = 10; \r\n\r\n    constructor(address _token,\r\n                uint32 _weight,\r\n                address _formulaContract) {\r\n        require (_weight > 0 && weight <= 1000000);\r\n\r\n        weight = _weight;\r\n        tokenContract = ITradeableAsset(_token);\r\n        formulaContract = IExchangeFormula(_formulaContract);\r\n    }\r\n\r\n    event Buy(address indexed purchaser, uint256 amountInWei, uint256 amountInToken);\r\n    event Sell(address indexed seller, uint256 amountInToken, uint256 amountInWei);\r\n\r\n    function depositTokens(uint amount) onlyOwner public {\r\n        tokenContract.transferFrom(msg.sender, this, amount);\r\n    }\r\n\r\n    function depositEther() onlyOwner public payable {\r\n    //return getQuotePrice();\r\n    }\r\n\r\n    function withdrawTokens(uint amount) onlyOwner public {\r\n        tokenContract.transfer(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawEther(uint amountInWei) onlyOwner public {\r\n        msg.sender.transfer(amountInWei); //Transfers in wei\r\n    }\r\n\r\n    function extractFees(uint amountInWei) onlyAdmin public {\r\n        require (amountInWei <= collectedFees);\r\n        msg.sender.transfer(amountInWei);\r\n    }\r\n\r\n    function enable() onlyAdmin public {\r\n        enabled = true;\r\n    }\r\n\r\n    function disable() onlyAdmin public {\r\n        enabled = false;\r\n    }\r\n\r\n    function setReserveWeight(uint ppm) onlyAdmin public {\r\n        require (ppm>0 && ppm<=1000000);\r\n        weight = uint32(ppm);\r\n    }\r\n\r\n    function setFee(uint ppm) onlyAdmin public {\r\n        require (ppm >= 0 && ppm <= 1000000);\r\n        fee = uint32(ppm);\r\n    }\r\n\r\n    function setUncirculatedSupplyCount(uint newValue) onlyAdmin public {\r\n        require (newValue > 0);\r\n        uncirculatedSupplyCount = uint256(newValue);\r\n    }\r\n\r\n    function setVirtualReserveBalance(uint256 amountInWei) onlyAdmin public {\r\n        virtualReserveBalance = amountInWei;\r\n    }\r\n\r\n    function getReserveBalances() public view returns (uint256, uint256) {\r\n        return (tokenContract.balanceOf(this), address(this).balance+virtualReserveBalance);\r\n    }\r\n\r\n    function getPurchasePrice(uint256 amountInWei) public view returns(uint) {\r\n        uint256 purchaseReturn = formulaContract.calculatePurchaseReturn(\r\n            (tokenContract.totalSupply() - uncirculatedSupplyCount) - tokenContract.balanceOf(this),\r\n            address(this).balance + virtualReserveBalance,\r\n            weight,\r\n            amountInWei\r\n        );\r\n\r\n        purchaseReturn = (purchaseReturn - ((purchaseReturn * fee) / 1000000));\r\n\r\n        if (purchaseReturn > tokenContract.balanceOf(this)){\r\n            return tokenContract.balanceOf(this);\r\n        }\r\n        return purchaseReturn;\r\n    }\r\n\r\n    function getSalePrice(uint256 tokensToSell) public view returns(uint) {\r\n        uint256 saleReturn = formulaContract.calculateSaleReturn(\r\n            (tokenContract.totalSupply() - uncirculatedSupplyCount) - tokenContract.balanceOf(this),\r\n            address(this).balance + virtualReserveBalance,\r\n            weight,\r\n            tokensToSell\r\n        );\r\n        saleReturn = (saleReturn - ((saleReturn * fee) / 1000000));\r\n        if (saleReturn > address(this).balance) {\r\n            return address(this).balance;\r\n        }\r\n        return saleReturn;\r\n    }\r\n\r\n    function buy(uint minPurchaseReturn) public payable {\r\n        uint amount = formulaContract.calculatePurchaseReturn(\r\n            (tokenContract.totalSupply() - uncirculatedSupplyCount) - tokenContract.balanceOf(this),\r\n            (address(this).balance + virtualReserveBalance) - msg.value,\r\n            weight,\r\n            msg.value);\r\n        amount = (amount - ((amount * fee) / 1000000));\r\n\r\n        require (enabled);\r\n        require (amount >= minPurchaseReturn);\r\n        require (tokenContract.balanceOf(this) >= amount);\r\n\r\n        if(msg.value > thresholdSendToSafeWallet){\r\n            uint transferToSafeWallet = msg.value * sendToSafeWalletPercentage / 100;\r\n            creator.transfer(transferToSafeWallet);\r\n            virtualReserveBalance += transferToSafeWallet;\r\n        }\r\n\r\n        collectedFees += (msg.value * fee) / 1000000;\r\n\r\n        emit Buy(msg.sender, msg.value, amount);\r\n        tokenContract.transfer(msg.sender, amount);\r\n    }\r\n\r\n    function sell(uint quantity, uint minSaleReturn) public {\r\n        uint amountInWei = formulaContract.calculateSaleReturn(\r\n            (tokenContract.totalSupply()- uncirculatedSupplyCount) - tokenContract.balanceOf(this),\r\n             address(this).balance + virtualReserveBalance,\r\n             weight,\r\n             quantity\r\n        );\r\n        amountInWei = (amountInWei - ((amountInWei * fee) / 1000000));\r\n\r\n        require (enabled);\r\n        require (amountInWei >= minSaleReturn);\r\n        require (amountInWei <= address(this).balance);\r\n        require (tokenContract.transferFrom(msg.sender, this, quantity));\r\n\r\n        collectedFees += (amountInWei * fee) / 1000000;\r\n\r\n        emit Sell(msg.sender, quantity, amountInWei);\r\n        msg.sender.transfer(amountInWei);\r\n    }\r\n\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external {\r\n        sellOneStep(_value, 0, _from);\r\n    }\r\n\r\n    function sellOneStep(uint quantity, uint minSaleReturn, address seller) public {\r\n        uint amountInWei = formulaContract.calculateSaleReturn(\r\n            (tokenContract.totalSupply() - uncirculatedSupplyCount) - tokenContract.balanceOf(this),\r\n             address(this).balance + virtualReserveBalance,\r\n             weight,\r\n             quantity\r\n        );\r\n        amountInWei = (amountInWei - ((amountInWei * fee) / 1000000));\r\n\r\n        require (enabled);\r\n        require (amountInWei >= minSaleReturn);\r\n        require (amountInWei <= address(this).balance);\r\n        require (tokenContract.transferFrom(seller, this, quantity));\r\n\r\n        collectedFees += (amountInWei * fee) / 1000000;\r\n\r\n        emit Sell(seller, quantity, amountInWei);\r\n        seller.transfer(amountInWei);\r\n    }\r\n\r\n    function setSendToSafeWalletPercentage(uint newValue) onlyOwner public {\r\n        require (newValue > 0);\r\n        sendToSafeWalletPercentage = uint(newValue);\r\n    }\r\n\r\n    function setThresholdSendToSafeWallet(uint256 amountInWei) onlyOwner public {\r\n        thresholdSendToSafeWallet = amountInWei;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setSendToSafeWalletPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setUncirculatedSupplyCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sendToSafeWalletPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"grantAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uncirculatedSupplyCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"formulaContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"quantity\",\"type\":\"uint256\"},{\"name\":\"minSaleReturn\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"sellOneStep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ppm\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReserveBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"thresholdSendToSafeWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"setThresholdSendToSafeWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"virtualReserveBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collectedFees\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"extractFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"setVirtualReserveBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"getPurchasePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"quantity\",\"type\":\"uint256\"},{\"name\":\"minSaleReturn\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minPurchaseReturn\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ppm\",\"type\":\"uint256\"}],\"name\":\"setReserveWeight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokensToSell\",\"type\":\"uint256\"}],\"name\":\"getSalePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"revokeAdminStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_weight\",\"type\":\"uint32\"},{\"name\":\"_formulaContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountInToken\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountInToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountInWei\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"}]","ContractName":"ExchangerV4","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cd8e566587d94787ae5beb28e284cc600000000000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000003ae6abeb18dfa54daa7dd8798b46a18c00000000","Library":"","SwarmSource":"bzzr://c01382235733c3ce3c9414b6e36fcadc66bd75573c1e20fbc36428d419934621"}]}