{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * EtherDice - fully transparent and decentralized betting\r\n *\r\n * Web              - https://etherdice.biz\r\n * Telegram chat    - https://t.me/EtherDice\r\n * Telegram channel - https://t.me/EtherDiceInfo\r\n *\r\n * Recommended gas limit: 200000\r\n * Recommended gas price: https://ethgasstation.info/\r\n */\r\ncontract EtherDice {\r\n    \r\n    address public constant OWNER = 0x8026F25c6f898b4afE03d05F87e6c2AFeaaC3a3D;\r\n    address public constant MANAGER = 0xD25BD6c44D6cF3C0358AB30ed5E89F2090409a79;\r\n    uint constant public FEE_PERCENT = 2;\r\n    \r\n    uint public minBet;\r\n    uint public maxBet;\r\n    uint public currentIndex;\r\n    uint public lockBalance;\r\n    uint public betsOfBlock;\r\n    uint entropy;\r\n    \r\n    struct Bet {\r\n        address player;\r\n        uint deposit;\r\n        uint block;\r\n    }\r\n\r\n    Bet[] public bets;\r\n\r\n    event PlaceBet(uint num, address player, uint bet, uint payout, uint roll, uint time);\r\n\r\n    // Modifier on methods invokable only by contract owner and manager\r\n    modifier onlyOwner {\r\n        require(OWNER == msg.sender || MANAGER == msg.sender);\r\n        _;\r\n    }\r\n\r\n    // This function called every time anyone sends a transaction to this contract\r\n    function() public payable {\r\n        if (msg.value > 0) {\r\n            createBet(msg.sender, msg.value);\r\n        }\r\n        \r\n        placeBets();\r\n    }\r\n    \r\n    // Records a new bet to the public storage\r\n    function createBet(address _player, uint _deposit) internal {\r\n        \r\n        require(_deposit >= minBet && _deposit <= maxBet); // check deposit limits\r\n        \r\n        uint lastBlock = bets.length > 0 ? bets[bets.length-1].block : 0;\r\n        \r\n        require(block.number != lastBlock || betsOfBlock < 50); // maximum 50 bets per block\r\n        \r\n        uint fee = _deposit * FEE_PERCENT / 100;\r\n        uint betAmount = _deposit - fee; \r\n        \r\n        require(betAmount * 2 + fee <= address(this).balance - lockBalance); // profit check\r\n        \r\n        sendOwner(fee);\r\n        \r\n        betsOfBlock = block.number != lastBlock ? 1 : betsOfBlock + 1;\r\n        lockBalance += betAmount * 2;\r\n        bets.push(Bet(_player, _deposit, block.number));\r\n    }\r\n\r\n    // process all the bets of previous players\r\n    function placeBets() internal {\r\n        \r\n        for (uint i = currentIndex; i < bets.length; i++) {\r\n            \r\n            Bet memory bet = bets[i];\r\n            \r\n            if (bet.block < block.number) {\r\n                \r\n                uint betAmount = bet.deposit - bet.deposit * FEE_PERCENT / 100;\r\n                lockBalance -= betAmount * 2;\r\n\r\n                // Bets made more than 256 blocks ago are considered failed - this has to do\r\n                // with EVM limitations on block hashes that are queryable \r\n                if (block.number - bet.block <= 256) {\r\n                    entropy = uint(keccak256(abi.encodePacked(blockhash(bet.block), entropy)));\r\n                    uint roll = entropy % 100 + 1;\r\n                    uint payout = roll < 50 ? betAmount * 2 : 0;\r\n                    send(bet.player, payout);\r\n                    emit PlaceBet(i + 1, bet.player, bet.deposit, payout, roll, now); \r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        \r\n        currentIndex = i;\r\n    }\r\n    \r\n    // Safely sends the ETH by the passed parameters\r\n    function send(address _receiver, uint _amount) internal {\r\n        if (_amount > 0 && _receiver != address(0)) {\r\n            _receiver.send(_amount);\r\n        }\r\n    }\r\n    \r\n    // Sends funds to the owner and manager\r\n    function sendOwner(uint _amount) internal {\r\n        send(OWNER, _amount * 7 / 10);\r\n        send(MANAGER, _amount * 3 / 10);\r\n    }\r\n    \r\n    // Funds withdrawal\r\n    function withdraw(uint _amount) public onlyOwner {\r\n        require(_amount <= address(this).balance - lockBalance);\r\n        sendOwner(_amount);\r\n    }\r\n    \r\n    // Set limits for deposits\r\n    function configure(uint _minBet, uint _maxBet) onlyOwner public {\r\n        require(_minBet >= 0.001 ether && _minBet <= _maxBet);\r\n        minBet = _minBet;\r\n        maxBet = _maxBet;\r\n    }\r\n\r\n    // This function deliberately left empty. It's primary use case is to top up the bank roll\r\n    function deposit() public payable {}\r\n    \r\n    // Returns the number of bets created\r\n    function totalBets() public view returns(uint) {\r\n        return bets.length;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"player\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBet\",\"type\":\"uint256\"},{\"name\":\"_maxBet\",\"type\":\"uint256\"}],\"name\":\"configure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betsOfBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"num\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bet\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"roll\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PlaceBet\",\"type\":\"event\"}]","ContractName":"EtherDice","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ce0ed0a7f34edff2f2f46b5c125eea8be7d197faf52820c0767eac85a09ac0e1"}]}