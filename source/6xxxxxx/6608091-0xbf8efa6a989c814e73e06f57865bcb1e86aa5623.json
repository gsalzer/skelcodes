{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title String\r\n * @dev ConcatenationString, uintToString, stringsEqual, stringToBytes32, bytes32ToString\r\n */\r\ncontract String {\r\n\r\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string memory) {\r\n    bytes memory _ba = bytes(_a);\r\n    bytes memory _bb = bytes(_b);\r\n    bytes memory _bc = bytes(_c);\r\n    bytes memory _bd = bytes(_d);\r\n    bytes memory _be = bytes(_e);\r\n    bytes memory abcde = bytes(new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length));\r\n    uint k = 0;\r\n    uint i;\r\n    for (i = 0; i < _ba.length; i++) {\r\n      abcde[k++] = _ba[i];\r\n    }\r\n    for (i = 0; i < _bb.length; i++) {\r\n      abcde[k++] = _bb[i];\r\n    }\r\n    for (i = 0; i < _bc.length; i++) {\r\n      abcde[k++] = _bc[i];\r\n    }\r\n    for (i = 0; i < _bd.length; i++) {\r\n      abcde[k++] = _bd[i];\r\n    }\r\n    for (i = 0; i < _be.length; i++) {\r\n      abcde[k++] = _be[i];\r\n    }\r\n    return string(abcde);\r\n  }\r\n\r\n  function strConcat(string _a, string _b, string _c, string _d) internal pure returns(string) {\r\n    return strConcat(_a, _b, _c, _d, \"\");\r\n  }\r\n\r\n  function strConcat(string _a, string _b, string _c) internal pure returns(string) {\r\n    return strConcat(_a, _b, _c, \"\", \"\");\r\n  }\r\n\r\n  function strConcat(string _a, string _b) internal pure returns(string) {\r\n    return strConcat(_a, _b, \"\", \"\", \"\");\r\n  }\r\n\r\n  function uint2str(uint i) internal pure returns(string) {\r\n    if (i == 0) {\r\n      return \"0\";\r\n    }\r\n    uint j = i;\r\n    uint length;\r\n    while (j != 0) {\r\n      length++;\r\n      j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(length);\r\n    uint k = length - 1;\r\n    while (i != 0) {\r\n      bstr[k--] = byte(uint8(48 + i % 10));\r\n      i /= 10;\r\n    }\r\n    return string(bstr);\r\n  }\r\n\r\n  function stringsEqual(string memory _a, string memory _b) internal pure returns(bool) {\r\n    bytes memory a = bytes(_a);\r\n    bytes memory b = bytes(_b);\r\n\r\n    if (a.length != b.length)\r\n      return false;\r\n\r\n    for (uint i = 0; i < a.length; i++) {\r\n      if (a[i] != b[i]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function stringToBytes32(string memory source) internal pure returns(bytes32 result) {\r\n    bytes memory _tmp = bytes(source);\r\n    if (_tmp.length == 0) {\r\n      return 0x0;\r\n    }\r\n    assembly {\r\n      result := mload(add(source, 32))\r\n    }\r\n  }\r\n\r\n  function bytes32ToString(bytes32 x) internal pure returns (string) {\r\n    bytes memory bytesString = new bytes(32);\r\n    uint charCount = 0;\r\n    uint j;\r\n    for (j = 0; j < 32; j++) {\r\n      byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n      if (char != 0) {\r\n        bytesString[charCount] = char;\r\n        charCount++;\r\n      }\r\n    }\r\n    bytes memory bytesStringTrimmed = new bytes(charCount);\r\n    for (j = 0; j < charCount; j++) {\r\n      bytesStringTrimmed[j] = bytesString[j];\r\n    }\r\n    return string(bytesStringTrimmed);\r\n  }\r\n\r\n  function inArray(string[] _array, string _value) internal pure returns(bool result) {\r\n    if (_array.length == 0 || bytes(_value).length == 0) {\r\n      return false;\r\n    }\r\n    result = false;\r\n    for (uint i = 0; i < _array.length; i++) {\r\n      if (stringsEqual(_array[i],_value)) {\r\n        result = true;\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\n/**\r\n * @title MultiOwnable\r\n * @dev The MultiOwnable contract has an owner address[], and provides basic authorization control\r\n */\r\ncontract MultiOwnable is Ownable {\r\n\r\n  struct Types {\r\n    mapping (address => bool) access;\r\n  }\r\n  mapping (uint => Types) private multiOwnersTypes;\r\n\r\n  event AddOwner(uint _type, address addr);\r\n  event AddOwner(uint[] types, address addr);\r\n  event RemoveOwner(uint _type, address addr);\r\n\r\n  modifier onlyMultiOwnersType(uint _type) {\r\n    require(multiOwnersTypes[_type].access[msg.sender] || msg.sender == owner, \"403\");\r\n    _;\r\n  }\r\n\r\n  function onlyMultiOwnerType(uint _type, address _sender) public view returns(bool) {\r\n    if (multiOwnersTypes[_type].access[_sender] || _sender == owner) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function addMultiOwnerType(uint _type, address _owner) public onlyOwner returns(bool) {\r\n    require(_owner != address(0));\r\n    multiOwnersTypes[_type].access[_owner] = true;\r\n    emit AddOwner(_type, _owner);\r\n    return true;\r\n  }\r\n  \r\n  function addMultiOwnerTypes(uint[] types, address _owner) public onlyOwner returns(bool) {\r\n    require(_owner != address(0));\r\n    require(types.length > 0);\r\n    for (uint i = 0; i < types.length; i++) {\r\n      multiOwnersTypes[types[i]].access[_owner] = true;\r\n    }\r\n    emit AddOwner(types, _owner);\r\n    return true;\r\n  }\r\n\r\n  function removeMultiOwnerType(uint types, address _owner) public onlyOwner returns(bool) {\r\n    require(_owner != address(0));\r\n    multiOwnersTypes[types].access[_owner] = false;\r\n    emit RemoveOwner(types, _owner);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract IBonus {\r\n  function getCurrentDayBonus(uint startSaleDate, bool saleState) public view returns(uint);\r\n  function _currentDay(uint startSaleDate, bool saleState) public view returns(uint);\r\n  function getBonusData() public view returns(string);\r\n  function getPreSaleBonusPercent() public view returns(uint);\r\n  function getMinReachUsdPayInCents() public view returns(uint);\r\n}\r\n\r\ncontract ShipCoinBonusSystem is IBonus, MultiOwnable, String {\r\n  using SafeMath for uint256;\r\n\r\n  struct Bonus {\r\n    uint startDay;\r\n    uint endDay;\r\n    uint percent;\r\n  }\r\n\r\n  Bonus[] public bonus;\r\n\r\n  uint256 private constant ONE_DAY = 86400;\r\n\r\n  uint private preSaleBonusPercent = 40;\r\n  uint private minReachUsdPayInCents = 1000000;\r\n\r\n  event AddBonus(uint startDay, uint endDay, uint percent);\r\n  event ChangeBonus(uint startDay, uint endDay, uint percentOld, uint percentNew);\r\n  event DeleteBonus(uint startDay, uint endDay, uint percent);\r\n\r\n  /**\r\n   * @dev constructor\r\n   */\r\n  constructor() public {\r\n    bonus.push(Bonus(0, 2, 20)); // 20% for the first 48 hours | 0 - 2 days\r\n    bonus.push(Bonus(3, 14, 15)); // 15% for weeks 1-2 starting from day 3 | 3 - 14 days\r\n    bonus.push(Bonus(15, 28, 10)); // 10% for weeks 3-4 | 15 - 28 days\r\n    bonus.push(Bonus(29, 42, 5));// 5% for weeks 5-6 | 29 - 42 days\r\n  }\r\n\r\n  /**\r\n   * @dev Add or change bonus data\r\n   * @param _startDay timestamp\r\n   * @param _endDay timestamp\r\n   * @param _percent uint\r\n   */\r\n  function addChangeBonus(uint _startDay, uint _endDay, uint _percent) public onlyMultiOwnersType(1) returns(bool) {\r\n    for (uint i = 0; i < bonus.length; i++) {\r\n      if (bonus[i].startDay == _startDay && bonus[i].endDay == _endDay) {\r\n        uint oldPercent = bonus[i].percent;\r\n        if (bonus[i].percent != _percent) {\r\n          bonus[i].percent = _percent;\r\n          emit ChangeBonus(_startDay, _endDay, oldPercent, _percent);\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    bonus.push(Bonus(_startDay, _endDay, _percent));\r\n    emit AddBonus(_startDay, _endDay, _percent);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Delete bonus data\r\n   * @param _startDay timestamp\r\n   * @param _endDay timestamp\r\n   * @param _percent uint\r\n   */\r\n  function delBonus(uint _startDay, uint _endDay, uint _percent) public onlyMultiOwnersType(2) returns(bool) {\r\n    for (uint i = 0; i < bonus.length; i++) {\r\n      if (bonus[i].startDay == _startDay && bonus[i].endDay == _endDay && bonus[i].percent == _percent) {\r\n        delete bonus[i];\r\n        emit DeleteBonus(_startDay, _endDay, _percent);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @dev Get current day bonus percent.\r\n   * @param startSaleDate timestamp\r\n   * @param saleState bool\r\n   */\r\n  function getCurrentDayBonus(uint startSaleDate, bool saleState) public view returns(uint) {\r\n    if (saleState) {\r\n      for (uint i = 0; i < bonus.length; i++) {\r\n        if ((startSaleDate > 0 && block.timestamp >= startSaleDate) && (_currentDay(startSaleDate, saleState) >= bonus[i].startDay) && (_currentDay(startSaleDate, saleState) <= bonus[i].endDay)) {\r\n          if (bonus[i].percent > 0) {\r\n            return bonus[i].percent;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Change preSale bonus percent\r\n   * @param _bonus uint\r\n   */\r\n  function changePreSaleBonus(uint _bonus) public onlyOwner returns(bool) {\r\n    require(_bonus > 20);\r\n    preSaleBonusPercent = _bonus;\r\n  }\r\n\r\n  /**\r\n   * @dev Change the minimum required amount to participate in the PreSale.\r\n   * @param _minUsdInCents minReachUsdPayInCents\r\n   */\r\n  function changePreSaleMinUsd(uint _minUsdInCents) public onlyOwner returns(bool) {\r\n    require(_minUsdInCents > 100000);\r\n    minReachUsdPayInCents = _minUsdInCents;\r\n  }\r\n\r\n  /**\r\n   * @dev Сurrent day from the moment of start sale\r\n   * @param startSaleDate timestamp\r\n   * @param saleState bool\r\n   */\r\n  function _currentDay(uint startSaleDate, bool saleState) public view returns(uint) {\r\n    if (!saleState || startSaleDate == 0 || startSaleDate > block.timestamp) {\r\n      return 0;\r\n    }\r\n    return block.timestamp.sub(startSaleDate).div(ONE_DAY);\r\n  }\r\n\r\n  /**\r\n   * @dev get all bonus data in json format\r\n   */\r\n  function getBonusData() public view returns(string) {\r\n    string memory _array = \"[\";\r\n    for (uint i = 0; i < bonus.length; i++) {\r\n      _array = strConcat(\r\n          _array,\r\n          strConcat(\"{\\\"startDay\\\":\", uint2str(bonus[i].startDay), \",\\\"endDay\\\":\", uint2str(bonus[i].endDay), \",\\\"percent\\\":\"),\r\n          uint2str(bonus[i].percent),\r\n          (i+1 == bonus.length) ? \"}]\" : \"},\"\r\n        );\r\n    }\r\n    return _array;\r\n  }\r\n\r\n  /**\r\n   * @dev get preSale bonus prcent\r\n   */\r\n  function getPreSaleBonusPercent() public view returns(uint) {\r\n    return preSaleBonusPercent;\r\n  }\r\n\r\n  /**\r\n   * @dev get minimum required amount to participate in the PreSale\r\n   */\r\n  function getMinReachUsdPayInCents() public view returns(uint) {\r\n    return minReachUsdPayInCents;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPreSaleBonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addMultiOwnerType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonus\",\"outputs\":[{\"name\":\"startDay\",\"type\":\"uint256\"},{\"name\":\"endDay\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBonusData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startDay\",\"type\":\"uint256\"},{\"name\":\"_endDay\",\"type\":\"uint256\"},{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"delBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"onlyMultiOwnerType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startDay\",\"type\":\"uint256\"},{\"name\":\"_endDay\",\"type\":\"uint256\"},{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"addChangeBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minUsdInCents\",\"type\":\"uint256\"}],\"name\":\"changePreSaleMinUsd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"startSaleDate\",\"type\":\"uint256\"},{\"name\":\"saleState\",\"type\":\"bool\"}],\"name\":\"getCurrentDayBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"types\",\"type\":\"uint256[]\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addMultiOwnerTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMinReachUsdPayInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"types\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeMultiOwnerType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bonus\",\"type\":\"uint256\"}],\"name\":\"changePreSaleBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"startSaleDate\",\"type\":\"uint256\"},{\"name\":\"saleState\",\"type\":\"bool\"}],\"name\":\"_currentDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"AddBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percentOld\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percentNew\",\"type\":\"uint256\"}],\"name\":\"ChangeBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"startDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endDay\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"DeleteBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"types\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemoveOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ShipCoinBonusSystem","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://01b8398db73c0042f3b4806fe7adffda05ae72e6bf4266c9058527352b1989fd"}]}