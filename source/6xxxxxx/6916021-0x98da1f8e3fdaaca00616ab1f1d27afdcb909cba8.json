{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.1;\r\n// Saltyness token\r\n// Known bug: Doesn't solve the oracle problem. Tweet @ARitzCracker with proof of salt. Saltyness will be sent to the provided address.\r\n\r\ninterface ERC223Handler { \r\n    function tokenFallback(address _from, uint _value, bytes calldata _data) external;\r\n}\r\n\r\ncontract SaltynessToken{\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint;\r\n    \r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n    \r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n\taddress owner;\r\n\taddress newOwner;\r\n    \r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping (address => uint256)) allowances;\r\n    \r\n    string constant public name = \"Saltyness\";\r\n    string constant public symbol = \"SALT\";\r\n    uint8 constant public decimals = 18;\r\n    uint256 public totalSupply;\r\n    \r\n    // --Events\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n    // --Events--\r\n    \r\n    // --Owner only functions\r\n    function setNewOwner(address o) public onlyOwner {\r\n\t\tnewOwner = o;\r\n\t}\r\n\r\n\tfunction acceptNewOwner() public {\r\n\t\trequire(msg.sender == newOwner);\r\n\t\towner = msg.sender;\r\n\t}\r\n\t\r\n    // Known bug: Token supply is theoretically infinite as @peter_szilagyi produces a never-ending stream of salt in extremly high amounts.\r\n\tfunction giveSalt(address _saltee, uint256 _salt) public onlyOwner {\r\n\t    totalSupply = totalSupply.add(_salt);\r\n\t    balanceOf[_saltee] = balanceOf[_saltee].add(_salt);\r\n        emit Transfer(address(this), _saltee, _salt, \"\");\r\n        emit Transfer(address(this), _saltee, _salt);\r\n\t}\r\n\t// --Owner only functions--\r\n    \r\n    // --Public write functions\r\n    function transfer(address _to, uint _value, bytes memory _data, string memory _function) public returns(bool ok){\r\n        actualTransfer(msg.sender, _to, _value, _data, _function, true);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address _to, uint _value, bytes memory _data) public returns(bool ok){\r\n        actualTransfer(msg.sender, _to, _value, _data, \"\", true);\r\n        return true;\r\n    }\r\n    function transfer(address _to, uint _value) public returns(bool ok){\r\n        actualTransfer(msg.sender, _to, _value, \"\", \"\", true);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n        allowances[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\r\n        uint256 _allowance = allowances[_from][msg.sender];\r\n        require(_allowance > 0, \"Not approved\");\r\n        require(_allowance >= _value, \"Over spending limit\");\r\n        allowances[_from][msg.sender] = _allowance.sub(_value);\r\n        actualTransfer(_from, _to, _value, \"\", \"\", false);\r\n        return true;\r\n    }\r\n    \r\n    // --Public write functions--\r\n     \r\n    // --Public read-only functions\r\n    \r\n    function allowance(address _sugardaddy, address _spender) public view returns (uint remaining) {\r\n        return allowances[_sugardaddy][_spender];\r\n    }\r\n    \r\n    // --Public read-only functions--\r\n    \r\n    \r\n    \r\n    // Internal functions\r\n    \r\n    function actualTransfer(address _from, address _to, uint _value, bytes memory _data, string memory _function, bool _careAboutHumanity) private{\r\n        require(balanceOf[_from] >= _value, \"Insufficient balance\"); // You see, I want to be helpful.\r\n        require(_to != address(this), \"You can't sell back your tokens\");\r\n        \r\n        // Throwing an exception undos all changes. Otherwise changing the balance now would be a shitshow\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        \r\n        if(_careAboutHumanity && isContract(_to)) {\r\n            if (bytes(_function).length == 0){\r\n                ERC223Handler receiver = ERC223Handler(_to);\r\n                receiver.tokenFallback(_from, _value, _data);\r\n            }else{\r\n                bool success;\r\n                bytes memory returnData;\r\n                (success, returnData) = _to.call.value(0)(abi.encodeWithSignature(_function, _from, _value, _data));\r\n                assert(success);\r\n            }\r\n        }\r\n        emit Transfer(_from, _to, _value, _data);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n    \r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            // Peter hates this opcode because it forces him to realize that it's the only blockchain-related function in the EVM which effects aren't applied until _after_ confirmation.\r\n            // But no, it's totally a feature as he intended because he is always right.\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length>0);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0 || b == 0) {\r\n           return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_saltee\",\"type\":\"address\"},{\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"giveSalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sugardaddy\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"o\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_function\",\"type\":\"string\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SaltynessToken","CompilerVersion":"v0.5.1+commit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2c7de5b17d4ef5caf65fc7b5348830bd02141949e46e004f04b5585282c93181"}]}