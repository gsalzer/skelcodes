{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface token { \r\n  function transfer(address, uint) external returns (bool);\r\n  function transferFrom(address, address, uint) external returns (bool); \r\n  function allowance(address, address) external constant returns (uint256);\r\n  function balanceOf(address) external constant returns (uint256);\r\n}\r\n\r\n/** LOGIC DESCRIPTION\r\n * 11% fees in and out for ETH\r\n * 11% fees in and out for NOVA\r\n *\r\n * ETH fees split: \r\n * 6% to nova holders\r\n * 4% to eth holders\r\n * 1% to fixed address\r\n * \r\n * NOVA fees split: \r\n * 6% to nova holders\r\n * 4% to eth holders\r\n * 1% airdrop to a random address based on their nova shares\r\n * rules: \r\n * - you need to have both nova and eth to get dividends\r\n */\r\n\r\ncontract NovaBox is Ownable {\r\n  \r\n  using SafeMath for uint;\r\n  token tokenReward;\r\n\r\n  \r\n  constructor() public {\r\n    tokenReward = token(0x72FBc0fc1446f5AcCC1B083F0852a7ef70a8ec9f);\r\n  }\r\n\r\n  event AirDrop(address to, uint amount, uint randomTicket);\r\n  event DividendsTransferred(address to, uint ethAmount, uint novaAmount);\r\n\r\n\r\n  // ether contributions\r\n  mapping (address => uint) public contributionsEth;\r\n  // token contributions\r\n  mapping (address => uint) public contributionsToken;\r\n\r\n  // investors list who have deposited BOTH ether and token\r\n  mapping (address => uint) public indexes;\r\n  mapping (uint => address) public addresses;\r\n  uint256 public lastIndex = 0;\r\n\r\n  mapping (address => bool) public addedToList;\r\n  uint _totalTokens = 0;\r\n  uint _totalWei = 0;\r\n\r\n  uint pointMultiplier = 1e18;\r\n\r\n  mapping (address => uint) public last6EthDivPoints;\r\n  uint public total6EthDivPoints = 0;\r\n  // uint public unclaimed6EthDivPoints = 0;\r\n\r\n  mapping (address => uint) public last4EthDivPoints;\r\n  uint public total4EthDivPoints = 0;\r\n  // uint public unclaimed4EthDivPoints = 0;\r\n\r\n  mapping (address => uint) public last6TokenDivPoints;\r\n  uint public total6TokenDivPoints = 0;\r\n  // uint public unclaimed6TokenDivPoints = 0;\r\n\r\n  mapping (address => uint) public last4TokenDivPoints;\r\n  uint public total4TokenDivPoints = 0;\r\n  // uint public unclaimed4TokenDivPoints = 0;\r\n\r\n  function ethDivsOwing(address _addr) public view returns (uint) {\r\n    return eth4DivsOwing(_addr).add(eth6DivsOwing(_addr));\r\n  }\r\n\r\n  function eth6DivsOwing(address _addr) public view returns (uint) {\r\n    if (!addedToList[_addr]) return 0;\r\n    uint newEth6DivPoints = total6EthDivPoints.sub(last6EthDivPoints[_addr]);\r\n\r\n    return contributionsToken[_addr].mul(newEth6DivPoints).div(pointMultiplier);\r\n  }\r\n\r\n  function eth4DivsOwing(address _addr) public view returns (uint) {\r\n    if (!addedToList[_addr]) return 0;\r\n    uint newEth4DivPoints = total4EthDivPoints.sub(last4EthDivPoints[_addr]);\r\n    return contributionsEth[_addr].mul(newEth4DivPoints).div(pointMultiplier);\r\n  }\r\n\r\n  function tokenDivsOwing(address _addr) public view returns (uint) {\r\n    return token4DivsOwing(_addr).add(token6DivsOwing(_addr));    \r\n  }\r\n\r\n  function token6DivsOwing(address _addr) public view returns (uint) {\r\n    if (!addedToList[_addr]) return 0;\r\n    uint newToken6DivPoints = total6TokenDivPoints.sub(last6TokenDivPoints[_addr]);\r\n    return contributionsToken[_addr].mul(newToken6DivPoints).div(pointMultiplier);\r\n  }\r\n\r\n  function token4DivsOwing(address _addr) public view returns (uint) {\r\n    if (!addedToList[_addr]) return 0;\r\n\r\n    uint newToken4DivPoints = total4TokenDivPoints.sub(last4TokenDivPoints[_addr]);\r\n    return contributionsEth[_addr].mul(newToken4DivPoints).div(pointMultiplier);\r\n  }\r\n\r\n  function updateAccount(address account) private {\r\n    uint owingEth6 = eth6DivsOwing(account);\r\n    uint owingEth4 = eth4DivsOwing(account);\r\n    uint owingEth = owingEth4.add(owingEth6);\r\n\r\n    uint owingToken6 = token6DivsOwing(account);\r\n    uint owingToken4 = token4DivsOwing(account);\r\n    uint owingToken = owingToken4.add(owingToken6);\r\n\r\n    if (owingEth > 0) {\r\n      // send ether dividends to account\r\n      account.transfer(owingEth);\r\n    }\r\n\r\n    if (owingToken > 0) {\r\n      // send token dividends to account\r\n      tokenReward.transfer(account, owingToken);\r\n    }\r\n\r\n    last6EthDivPoints[account] = total6EthDivPoints;\r\n    last4EthDivPoints[account] = total4EthDivPoints;\r\n    last6TokenDivPoints[account] = total6TokenDivPoints;\r\n    last4TokenDivPoints[account] = total4TokenDivPoints;\r\n\r\n    emit DividendsTransferred(account, owingEth, owingToken);\r\n\r\n  }\r\n\r\n\r\n\r\n  function addToList(address sender) private {\r\n    addedToList[sender] = true;\r\n    // if the sender is not in the list\r\n    if (indexes[sender] == 0) {\r\n      _totalTokens = _totalTokens.add(contributionsToken[sender]);\r\n      _totalWei = _totalWei.add(contributionsEth[sender]);\r\n\r\n      // add the sender to the list\r\n      lastIndex++;\r\n      addresses[lastIndex] = sender;\r\n      indexes[sender] = lastIndex;\r\n    }\r\n  }\r\n  function removeFromList(address sender) private {\r\n    addedToList[sender] = false;\r\n    // if the sender is in temp eth list \r\n    if (indexes[sender] > 0) {\r\n      _totalTokens = _totalTokens.sub(contributionsToken[sender]);\r\n      _totalWei = _totalWei.sub(contributionsEth[sender]);\r\n\r\n      // remove the sender from temp eth list\r\n      addresses[indexes[sender]] = addresses[lastIndex];\r\n      indexes[addresses[lastIndex]] = indexes[sender];\r\n      indexes[sender] = 0;\r\n      delete addresses[lastIndex];\r\n      lastIndex--;\r\n    }\r\n  }\r\n\r\n  // desposit ether\r\n  function () payable public {\r\n    address sender = msg.sender;\r\n    // size of code at target address\r\n    uint codeLength;\r\n\r\n    // get the length of code at the sender address\r\n    assembly {\r\n      codeLength := extcodesize(sender)\r\n    }\r\n\r\n    // don't allow contracts to deposit ether\r\n    require(codeLength == 0);\r\n    \r\n    uint weiAmount = msg.value;\r\n    \r\n\r\n    updateAccount(sender);\r\n\r\n    // number of ether sent must be greater than 0\r\n    require(weiAmount > 0);\r\n\r\n    uint _89percent = weiAmount.mul(89).div(100);\r\n    uint _6percent = weiAmount.mul(6).div(100);\r\n    uint _4percent = weiAmount.mul(4).div(100);\r\n    uint _1percent = weiAmount.mul(1).div(100);\r\n\r\n\r\n    \r\n\r\n\r\n    distributeEth(\r\n      _6percent, // to nova investors\r\n      _4percent  // to eth investors\r\n    ); \r\n    //1% goes to REX Investors\r\n    owner.transfer(_1percent);\r\n\r\n    contributionsEth[sender] = contributionsEth[sender].add(_89percent);\r\n    // if the sender is in list\r\n    if (indexes[sender]>0) {\r\n      // increase _totalWei\r\n      _totalWei = _totalWei.add(_89percent);\r\n    }\r\n\r\n    // if the sender has also deposited tokens, add sender to list\r\n    if (contributionsToken[sender]>0) addToList(sender);\r\n  }\r\n\r\n  // withdraw ether\r\n  function withdrawEth(uint amount) public {\r\n    address sender = msg.sender;\r\n    require(amount>0 && contributionsEth[sender] >= amount);\r\n\r\n    updateAccount(sender);\r\n\r\n    uint _89percent = amount.mul(89).div(100);\r\n    uint _6percent = amount.mul(6).div(100);\r\n    uint _4percent = amount.mul(4).div(100);\r\n    uint _1percent = amount.mul(1).div(100);\r\n\r\n    contributionsEth[sender] = contributionsEth[sender].sub(amount);\r\n    // if sender is in list\r\n    if (indexes[sender]>0) {\r\n      // decrease total wei\r\n      _totalWei = _totalWei.sub(amount);\r\n    }\r\n\r\n    // if the sender has withdrawn all their eth\r\n      // remove the sender from list\r\n    if (contributionsEth[sender] == 0) removeFromList(sender);\r\n\r\n    sender.transfer(_89percent);\r\n    distributeEth(\r\n      _6percent, // to nova investors\r\n      _4percent  // to eth investors\r\n    );\r\n    owner.transfer(_1percent);  //1% goes to REX Investors\r\n  }\r\n\r\n  // deposit tokens\r\n  function depositTokens(address randomAddr, uint randomTicket) public {\r\n    updateAccount(msg.sender);\r\n    \r\n\r\n    address sender = msg.sender;\r\n    uint amount = tokenReward.allowance(sender, address(this));\r\n    \r\n    // number of allowed tokens must be greater than 0\r\n    // if it is then transfer the allowed tokens from sender to the contract\r\n    // if not transferred then throw\r\n    require(amount>0 && tokenReward.transferFrom(sender, address(this), amount));\r\n\r\n\r\n    uint _89percent = amount.mul(89).div(100);\r\n    uint _6percent = amount.mul(6).div(100);\r\n    uint _4percent = amount.mul(4).div(100);\r\n    uint _1percent = amount.mul(1).div(100);\r\n    \r\n    \r\n\r\n    distributeTokens(\r\n      _6percent, // to nova investors\r\n      _4percent  // to eth investors\r\n      );\r\n    tokenReward.transfer(randomAddr, _1percent);\r\n    // 1% for Airdrop\r\n    emit AirDrop(randomAddr, _1percent, randomTicket);\r\n\r\n    contributionsToken[sender] = contributionsToken[sender].add(_89percent);\r\n\r\n    // if sender is in list\r\n    if (indexes[sender]>0) {\r\n      // increase totaltokens\r\n      _totalTokens = _totalTokens.add(_89percent);\r\n    }\r\n\r\n    // if the sender has also contributed ether add sender to list\r\n    if (contributionsEth[sender]>0) addToList(sender);\r\n  }\r\n\r\n  // withdraw tokens\r\n  function withdrawTokens(uint amount, address randomAddr, uint randomTicket) public {\r\n    address sender = msg.sender;\r\n    updateAccount(sender);\r\n    // requested amount must be greater than 0 and \r\n    // the sender must have contributed tokens no less than `amount`\r\n    require(amount>0 && contributionsToken[sender]>=amount);\r\n\r\n    uint _89percent = amount.mul(89).div(100);\r\n    uint _6percent = amount.mul(6).div(100);\r\n    uint _4percent = amount.mul(4).div(100);\r\n    uint _1percent = amount.mul(1).div(100);\r\n\r\n    contributionsToken[sender] = contributionsToken[sender].sub(amount);\r\n    // if sender is in list\r\n    if (indexes[sender]>0) {\r\n      // decrease total tokens\r\n      _totalTokens = _totalTokens.sub(amount);\r\n    }\r\n\r\n    // if sender withdrawn all their tokens, remove them from list\r\n    if (contributionsToken[sender] == 0) removeFromList(sender);\r\n\r\n    tokenReward.transfer(sender, _89percent);\r\n    distributeTokens(\r\n      _6percent, // to nova investors\r\n      _4percent  // to eth investors\r\n    );\r\n    // airdropToRandom(_1percent);  \r\n    tokenReward.transfer(randomAddr, _1percent);\r\n    emit AirDrop(randomAddr, _1percent, randomTicket);\r\n  }\r\n\r\n  function distributeTokens(uint _6percent, uint _4percent) private {\r\n    uint totalTokens = getTotalTokens();\r\n    uint totalWei = getTotalWei();\r\n\r\n    if (totalWei == 0 || totalTokens == 0) return; \r\n\r\n    total4TokenDivPoints = total4TokenDivPoints.add(_4percent.mul(pointMultiplier).div(totalWei));\r\n    // unclaimed4TokenDivPoints = unclaimed4TokenDivPoints.add(_4percent);\r\n\r\n    total6TokenDivPoints = total6TokenDivPoints.add(_6percent.mul(pointMultiplier).div(totalTokens));\r\n    // unclaimed6TokenDivPoints = unclaimed6TokenDivPoints.add(_6percent);\r\n    \r\n  }\r\n\r\n  function distributeEth(uint _6percent, uint _4percent) private {\r\n    uint totalTokens = getTotalTokens();\r\n    uint totalWei = getTotalWei();\r\n\r\n    if (totalWei ==0 || totalTokens == 0) return;\r\n\r\n    total4EthDivPoints = total4EthDivPoints.add(_4percent.mul(pointMultiplier).div(totalWei));\r\n    // unclaimed4EthDivPoints += _4percent;\r\n\r\n    total6EthDivPoints = total6EthDivPoints.add(_6percent.mul(pointMultiplier).div(totalTokens));\r\n    // unclaimed6EthDivPoints += _6percent;\r\n\r\n  }\r\n\r\n\r\n  // get sum of tokens contributed by the ether investors\r\n  function getTotalTokens() public view returns (uint) {\r\n    return _totalTokens;\r\n  }\r\n\r\n  // get the sum of wei contributed by the token investors\r\n  function getTotalWei() public view returns (uint) {\r\n    return _totalWei;\r\n  }\r\n\r\n  function withdrawDivs() public {\r\n    updateAccount(msg.sender);\r\n  }\r\n\r\n\r\n  // get the list of investors\r\n  function getList() public view returns (address[], uint[]) {\r\n    address[] memory _addrs = new address[](lastIndex);\r\n    uint[] memory _contributions = new uint[](lastIndex);\r\n\r\n    for (uint i = 1; i <= lastIndex; i++) {\r\n      _addrs[i-1] = addresses[i];\r\n      _contributions[i-1] = contributionsToken[addresses[i]];\r\n    }\r\n    return (_addrs, _contributions);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"last6EthDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total6EthDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"token4DivsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"tokenDivsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributionsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"eth4DivsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"last6TokenDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"indexes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"token6DivsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"eth6DivsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ethDivsOwing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"randomAddr\",\"type\":\"address\"},{\"name\":\"randomTicket\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"addedToList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total4EthDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDivs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total4TokenDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributionsEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"last4EthDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"last4TokenDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"total6TokenDivPoints\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"randomAddr\",\"type\":\"address\"},{\"name\":\"randomTicket\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"randomTicket\",\"type\":\"uint256\"}],\"name\":\"AirDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"novaAmount\",\"type\":\"uint256\"}],\"name\":\"DividendsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NovaBox","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8011c7a7eec6c9cfaea3bb152f7e5d15f65ca63c5e8d3156a4a671ba3e05b9e5"}]}