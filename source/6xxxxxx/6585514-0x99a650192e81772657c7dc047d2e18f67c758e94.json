{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.4.24; \r\n\r\n/***\r\n *     __   __   ___      ___    ___   \r\n *     \\ \\ / /  / _ \\    | _ \\  / _ \\  \r\n *      \\ V /  | (_) |   |  _/ | (_) | \r\n *      _|_|_   \\___/   _|_|_   \\___/  \r\n *    _| \"\"\" |_|\"\"\"\"\"|_| \"\"\" |_|\"\"\"\"\"| \r\n *    \"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-' \r\n *   \r\n *   https://a21.app\r\n */\r\n\r\ninterface IGameBuilder{\r\n    function buildGame (address _manager, string _name, string _title, uint256 _price, uint256 _timespan,\r\n        uint8 _profitOfManager, uint8 _profitOfFirstPlayer, uint8 _profitOfWinner) payable external returns(address);\r\n} \r\ncontract IGame {\r\n     \r\n    address public owner; \r\n    address public creator;\r\n    address public manager;\r\n\tuint256 public poolValue = 0;\r\n\tuint256 public round = 0;\r\n\tuint256 public totalBets = 0;\r\n\tuint256 public startTime = now;\r\n    bytes32 public name;\r\n    string public title;\r\n\tuint256 public price;\r\n\tuint256 public timespan;\r\n\tuint32 public gameType;\r\n\r\n    /* profit divisions */\r\n\tuint256 public profitOfSociety = 5;  \r\n\tuint256 public profitOfManager = 1; \r\n\tuint256 public profitOfFirstPlayer = 15;\r\n\tuint256 public profitOfWinner = 40;\r\n\t\r\n\tfunction getGame() view public returns(\r\n        address, uint256, address, uint256, \r\n        uint256, uint256, uint256, \r\n        uint256, uint256, uint256, uint256);\r\n} \r\n/***\r\n *       ___     ___      _    \r\n *      /   \\   |_  )    / |   \r\n *      | - |    / /     | |   \r\n *      |_|_|   /___|   _|_|_  \r\n *    _|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"| \r\n *    \"`-0-0-'\"`-0-0-'\"`-0-0-' \r\n */\r\ncontract Owned {\r\n    modifier isActivated {\r\n        require(activated == true, \"its not ready yet.\"); \r\n        _;\r\n    }\r\n    \r\n    modifier isHuman {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n \r\n    modifier limits(uint256 _eth) {\r\n        require(_eth >= 1000000000, \"pocket lint: not a valid currency\");\r\n        require(_eth <= 100000000000000000000000, \"no vitalik, no\");\r\n        _;    \r\n    }\r\n \r\n    modifier onlyOwner {\r\n        require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\r\n        _;\r\n    }\r\n\r\n    address public owner;\r\n\tbool public activated = true;\r\n\r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n\tfunction terminate() public onlyOwner {\r\n\t\tselfdestruct(owner);\r\n\t}\r\n\r\n\tfunction setIsActivated(bool _activated) public onlyOwner {\r\n\t\tactivated = _activated;\r\n\t}\r\n} \r\n \r\n/**\r\n * @title NameFilter\r\n * @dev filter string\r\n */\r\nlibrary NameFilter {\r\n    /**\r\n     * @dev filters name strings\r\n     * -converts uppercase to lower case.  \r\n     * -makes sure it does not start/end with a space\r\n     * -makes sure it does not contain multiple spaces in a row\r\n     * -cannot be only numbers\r\n     * -cannot start with 0x \r\n     * -restricts characters to A-Z, a-z, 0-9, and space.\r\n     * @return reprocessed string in bytes32 format\r\n     */\r\n    function nameFilter(string _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n        \r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n        \r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n        \r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n                \r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    // require character is a space\r\n                    _temp[i] == 0x20 || \r\n                    // OR lowercase a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    // or 0-9\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n                \r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;    \r\n            }\r\n        }\r\n        \r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n        \r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract GameFactory is Owned {\r\n\tuint256 private constant MINIMUM_PRICE = 0.01 ether;\r\n\tuint256 private constant MAXIMUM_PRICE = 100 ether;\r\n\tuint256 private constant MINIMUM_TIMESPAN = 1 minutes;  \r\n\tuint256 private constant MAXIMUM_TIMESPAN = 24 hours;  \r\n\r\n    using NameFilter for string;\r\n\tmapping(bytes32 => address) public games; \r\n\tmapping(uint256 => address) public builders; \r\n    bytes32[] public names;\r\n    address[] public addresses;\r\n    address[] public approved;\r\n    address[] public offlines;\r\n    uint256 public fee = 0.2 ether;\r\n    uint8 public numberOfEarlybirds = 10;\r\n    uint256 public numberOfGames = 0;\r\n\r\n    event onNewGame (address sender, bytes32 gameName, address gameAddress, uint256 fee, uint256 timestamp);\r\n\r\n    function newGame (address _manager, string _name, string _title, uint256 _price, uint256 _timespan,\r\n        uint8 _profitOfManager, uint8 _profitOfFirstPlayer, uint8 _profitOfWinner, uint256 _gameType) \r\n        limits(msg.value) isActivated payable public \r\n    {\r\n\t\trequire(address(_manager)!=0x0, \"invaild address\");\r\n\t\trequire(_price >= MINIMUM_PRICE && _price <= MAXIMUM_PRICE, \"price not in range (MINIMUM_PRICE, MAXIMUM_PRICE)\");\r\n\t\trequire(_timespan >= MINIMUM_TIMESPAN && _timespan <= MAXIMUM_TIMESPAN, \"timespan not in range(MINIMUM_TIMESPAN, MAXIMUM_TIMESPAN)\");\r\n\t\tbytes32 name = _name.nameFilter();\r\n        require(name[0] != 0, \"invaild name\");\r\n        require(checkName(name), \"duplicate name\");\r\n        require(_profitOfManager <=20, \"[profitOfManager] don't take too much commission :)\");\r\n        require(_profitOfFirstPlayer <=50, \"[profitOfFirstPlayer] don't take too much commission :)\");\r\n        require(_profitOfWinner <=100 && (_profitOfManager + _profitOfWinner + _profitOfFirstPlayer) <=100, \"[profitOfWinner] don't take too much commission :)\");\r\n        require(msg.value >= getTicketPrice(_profitOfManager), \"fee is not enough\");\r\n\r\n        address builderAddress = builders[_gameType];\r\n\t\trequire(address(builderAddress)!=0x0, \"invaild game type\");\r\n        \r\n        IGameBuilder builder = IGameBuilder(builderAddress);\r\n        address game = builder.buildGame(_manager, _name, _title, _price, _timespan, _profitOfManager, _profitOfFirstPlayer, _profitOfWinner);\r\n        games[name] = game; \r\n        names.push(name);\r\n        addresses.push(game);\r\n        numberOfGames ++;\r\n        owner.transfer(msg.value); \r\n\r\n        if(numberOfGames > numberOfEarlybirds){\r\n            // plus 10% fee everytime    \r\n            // might overflow? I wish as well, however, at that time no one can afford the fee.\r\n            fee +=  (fee/10);        \r\n        }\r\n\r\n        emit onNewGame(msg.sender, name, game, fee, now);\r\n    } \r\n\r\n    function checkName(bytes32 _name) view public returns(bool){\r\n        return address(games[_name]) == 0x0;\r\n    }\r\n\r\n\tfunction addGame(address _addr) public payable onlyOwner {\r\n\t    IGame game = IGame(_addr);  \r\n        require(checkName(game.name()), \"duplicate name\");\r\n        \r\n\t    games[game.name()] = _addr;\r\n        names.push(game.name());\r\n\t    addresses.push(_addr);\r\n        approved.push(_addr);\r\n        numberOfGames ++;\r\n\t}\r\n\t\r\n\tfunction addBuilder(uint256 _gameType, address _builderAddress) public payable onlyOwner {\r\n        builders[_gameType] = _builderAddress;\r\n\t}\r\n\t\r\n\tfunction approveGame(address _addr) public payable onlyOwner {\r\n        approved.push(_addr);\r\n\t}\r\n\t\r\n\tfunction offlineGame(address _addr) public payable onlyOwner {\r\n        offlines.push(_addr);\r\n\t}\r\n\t\r\n\tfunction setFee(uint256 _fee) public payable onlyOwner {\r\n        fee = _fee;\r\n\t}\r\n\r\n    function getTicketPrice(uint8 _profitOfManager) view public returns(uint256){\r\n        // might overflow? I wish as well, however, at that time no one can afford the fee.\r\n        return fee * _profitOfManager; \r\n    }\r\n\r\n    function getNames() view public returns(bytes32[]){\r\n        return names;\r\n    }\r\n\r\n    function getAddresses() view public returns(address[]){\r\n        return addresses;\r\n    }\r\n\r\n    function getGame(bytes32 _name) view public returns(\r\n        address, uint256, address, uint256, \r\n        uint256, uint256, uint256, \r\n        uint256, uint256, uint256, uint256) {\r\n        require(!checkName(_name), \"name not found!\");\r\n        address gameAddress = games[_name];\r\n        IGame game = IGame(gameAddress);  \r\n        return game.getGame();\r\n    }\r\n\r\n\tfunction withdraw() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_activated\",\"type\":\"bool\"}],\"name\":\"setIsActivated\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameType\",\"type\":\"uint256\"},{\"name\":\"_builderAddress\",\"type\":\"address\"}],\"name\":\"addBuilder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"names\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"builders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"offlineGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"checkName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getGame\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"approveGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_profitOfManager\",\"type\":\"uint8\"}],\"name\":\"getTicketPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNames\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_title\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_timespan\",\"type\":\"uint256\"},{\"name\":\"_profitOfManager\",\"type\":\"uint8\"},{\"name\":\"_profitOfFirstPlayer\",\"type\":\"uint8\"},{\"name\":\"_profitOfWinner\",\"type\":\"uint8\"},{\"name\":\"_gameType\",\"type\":\"uint256\"}],\"name\":\"newGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfGames\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"offlines\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfEarlybirds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"gameName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"gameAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onNewGame\",\"type\":\"event\"}]","ContractName":"GameFactory","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8a51d9f2310d38731bf67246e2b83b46dfdb40c2d3f7c550ac6aeaeedf2938e5"}]}