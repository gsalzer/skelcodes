{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = false;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ncontract EMONTInterface {\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function transfer(address to, uint tokens) public;\r\n}\r\n\r\ncontract CubegoCoreInterface {\r\n    function buyMaterials(address _owner, uint _mId1, uint _amount1, uint _mId2, uint _amount2, \r\n                            uint _mId3, uint _amount3, uint _mId4, uint _amount4) external returns(uint);\r\n    function addMaterials(address _owner, uint _mId1, uint _amount1, uint _mId2, uint _amount2, \r\n                            uint _mId3, uint _amount3, uint _mId4, uint _amount4) external;\r\n    function removeMaterials(address _owner, uint _mId1, uint _amount1, uint _mId2, uint _amount2, \r\n                            uint _mId3, uint _amount3, uint _mId4, uint _amount4) external;\r\n}\r\n\r\ncontract CubegonNFTInterface {\r\n    function mineCubegon(address _owner, bytes32 _ch, uint _mId1, uint _amount1, uint _mId2, uint _amount2, \r\n        uint _mId3, uint _amount3, uint _mId4, uint _amount4, uint _energyLimit) external returns(uint);\r\n    function updateCubegon(address _owner, uint _tokenId, uint _energyLimit) external;\r\n    function dismantleCubegon(address _owner, uint _tokenId) external returns(uint mId1, uint amount1, uint mId2, uint amount2,\r\n        uint mId3, uint amount3, uint mId4, uint amount4);\r\n}\r\n\r\ncontract CubegonBuilder is BasicAccessControl {\r\n    bytes constant SIG_PREFIX = \"\\x19Ethereum Signed Message:\\n32\";\r\n    \r\n    struct CubegonMaterial {\r\n        uint mId1;\r\n        uint amount1;\r\n        uint mId2;\r\n        uint amount2;\r\n        uint mId3;\r\n        uint amount3;\r\n        uint mId4;\r\n        uint amount4;\r\n        uint energyLimit;\r\n    }\r\n    \r\n    CubegoCoreInterface public cubegoCore;\r\n    CubegonNFTInterface public cubegonNFT;\r\n    EMONTInterface public emontToken;\r\n    address public verifyAddress;\r\n    mapping (uint => uint) public energyPrices;\r\n    uint public ethEmontRate = 1500 * 10 ** 8; // each 10 ** 18 ETH\r\n    \r\n    function setAddress(address _cubegoCoreAddress, address _emontTokenAddress, address _cubegonNFTAddress, address _verifyAddress) onlyModerators external {\r\n        cubegoCore = CubegoCoreInterface(_cubegoCoreAddress);\r\n        emontToken = EMONTInterface(_emontTokenAddress);\r\n        cubegonNFT = CubegonNFTInterface(_cubegonNFTAddress);\r\n        verifyAddress = _verifyAddress;\r\n    }\r\n    \r\n    function setEnergyPrice(uint _energy, uint _price) onlyModerators external {\r\n        energyPrices[_energy] = _price;\r\n    }\r\n    \r\n    function setConfig(uint _ethEmontRate) onlyModerators external {\r\n        ethEmontRate = _ethEmontRate;\r\n    }\r\n    \r\n    function withdrawEther(address _sendTo, uint _amount) onlyModerators public {\r\n        if (_amount > address(this).balance) {\r\n            revert();\r\n        }\r\n        _sendTo.transfer(_amount);\r\n    }\r\n    \r\n    function withdrawToken(address _sendTo, uint _amount) onlyModerators external {\r\n        if (_amount > emontToken.balanceOf(address(this))) {\r\n            revert();\r\n        }\r\n        emontToken.transfer(_sendTo, _amount);\r\n    }\r\n    \r\n    // emont payment\r\n    function updateCubegonEnergyLimitByToken(address _owner, uint _tokens, uint _tokenId, uint _energyLimit) onlyModerators external {\r\n        uint payAmount = energyPrices[_energyLimit];\r\n        if (payAmount == 0) revert();\r\n        uint payTokenAmount = payAmount * ethEmontRate / 10 ** 18;\r\n        if (payTokenAmount > _tokens) revert();\r\n        \r\n        cubegonNFT.updateCubegon(_owner, _tokenId, _energyLimit);\r\n    }\r\n    \r\n    // public \r\n    function extractMaterialToken(bytes32 _mt) public pure returns(uint mId1, uint amount1, uint mId2, uint amount2, \r\n        uint mId3, uint amount3, uint mId4, uint amount4) {\r\n        amount4 = uint32(_mt);\r\n        mId4 = uint32(_mt>>32);\r\n        amount3 = uint32(_mt>>64);\r\n        mId3 = uint32(_mt>>96);\r\n        amount2 = uint32(_mt>>128);\r\n        mId2 = uint32(_mt>>160);\r\n        amount1 = uint32(_mt>>192);\r\n        mId1 = uint32(_mt>>224);\r\n    }\r\n    \r\n    function getVerifySignature(address sender, bytes32 _ch, bytes32 _cmt, bytes32 _tmt, uint _energyLimit, uint _expiryTime) public pure returns(bytes32) {\r\n        return keccak256(abi.encodePacked(sender, _ch, _cmt, _tmt, _energyLimit, _expiryTime));\r\n    }\r\n    \r\n    function getVerifyAddress(address sender, bytes32 _ch, bytes32 _cmt, bytes32 _tmt, uint _energyLimit, uint _expiryTime, uint8 _v, bytes32 _r, bytes32 _s) public pure returns(address) {\r\n        bytes32 hashValue = keccak256(abi.encodePacked(sender, _ch, _cmt, _tmt, _energyLimit, _expiryTime));\r\n        bytes32 prefixedHash = keccak256(abi.encodePacked(SIG_PREFIX, hashValue));\r\n        return ecrecover(prefixedHash, _v, _r, _s);\r\n    }\r\n    \r\n    function createCubegon(bytes32 _ch, bytes32 _cmt, bytes32 _tmt, uint _energyLimit, uint _expiryTime, uint8 _v, bytes32 _r, bytes32 _s) isActive payable external {\r\n        if (verifyAddress == address(0)) revert();\r\n        if (_expiryTime < block.timestamp) revert();\r\n        if (getVerifyAddress(msg.sender, _ch, _cmt, _tmt, _energyLimit, _expiryTime, _v, _r, _s) != verifyAddress) revert();\r\n        uint payAmount = energyPrices[_energyLimit];\r\n        if (payAmount == 0 || payAmount > msg.value) revert();\r\n        \r\n        CubegonMaterial memory cm;\r\n        (cm.mId1, cm.amount1, cm.mId2, cm.amount2, cm.mId3, cm.amount3, cm.mId4, cm.amount4) = extractMaterialToken(_tmt);\r\n        payAmount += cubegoCore.buyMaterials(msg.sender, cm.mId1, cm.amount1, cm.mId2, cm.amount2, cm.mId3, cm.amount3, cm.mId4, cm.amount4);\r\n        if (payAmount > msg.value) revert();\r\n\r\n        (cm.mId1, cm.amount1, cm.mId2, cm.amount2, cm.mId3, cm.amount3, cm.mId4, cm.amount4) = extractMaterialToken(_cmt);\r\n        cubegoCore.removeMaterials(msg.sender, cm.mId1, cm.amount1, cm.mId2, cm.amount2, cm.mId3, cm.amount3, cm.mId4, cm.amount4);\r\n        \r\n        // refund extra\r\n        if (msg.value > payAmount) {\r\n            msg.sender.transfer((msg.value - payAmount));\r\n        }\r\n        \r\n        cm.energyLimit = _energyLimit;\r\n        cubegonNFT.mineCubegon(msg.sender, _ch, cm.mId1, cm.amount1, cm.mId2, cm.amount2, cm.mId3, cm.amount3, cm.mId4, cm.amount4, cm.energyLimit);\r\n    }\r\n    \r\n    function dismantleCubegon(uint _tokenId) isActive external {\r\n        CubegonMaterial memory cm;\r\n        (cm.mId1, cm.amount1, cm.mId2, cm.amount2, cm.mId3, cm.amount3, cm.mId4, cm.amount4) = cubegonNFT.dismantleCubegon(msg.sender, _tokenId);\r\n        cubegoCore.addMaterials(msg.sender, cm.mId1, cm.amount1, cm.mId2, cm.amount2, cm.mId3, cm.amount3, cm.mId4, cm.amount4);\r\n    }\r\n    \r\n    function updateCubegonEnergyLimit(uint _tokenId, uint _energyLimit) isActive payable external {\r\n        uint payAmount = energyPrices[_energyLimit];\r\n        if (payAmount == 0) revert();\r\n        if (msg.value < payAmount) revert();\r\n        \r\n        cubegonNFT.updateCubegon(msg.sender, _tokenId, _energyLimit);\r\n        \r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"dismantleCubegon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"_ch\",\"type\":\"bytes32\"},{\"name\":\"_cmt\",\"type\":\"bytes32\"},{\"name\":\"_tmt\",\"type\":\"bytes32\"},{\"name\":\"_energyLimit\",\"type\":\"uint256\"},{\"name\":\"_expiryTime\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"getVerifyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethEmontRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_energyLimit\",\"type\":\"uint256\"}],\"name\":\"updateCubegonEnergyLimit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cubegoCore\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cubegonNFT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"verifyAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ch\",\"type\":\"bytes32\"},{\"name\":\"_cmt\",\"type\":\"bytes32\"},{\"name\":\"_tmt\",\"type\":\"bytes32\"},{\"name\":\"_energyLimit\",\"type\":\"uint256\"},{\"name\":\"_expiryTime\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"createCubegon\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emontToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"_ch\",\"type\":\"bytes32\"},{\"name\":\"_cmt\",\"type\":\"bytes32\"},{\"name\":\"_tmt\",\"type\":\"bytes32\"},{\"name\":\"_energyLimit\",\"type\":\"uint256\"},{\"name\":\"_expiryTime\",\"type\":\"uint256\"}],\"name\":\"getVerifySignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethEmontRate\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"energyPrices\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_energyLimit\",\"type\":\"uint256\"}],\"name\":\"updateCubegonEnergyLimitByToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cubegoCoreAddress\",\"type\":\"address\"},{\"name\":\"_emontTokenAddress\",\"type\":\"address\"},{\"name\":\"_cubegonNFTAddress\",\"type\":\"address\"},{\"name\":\"_verifyAddress\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_mt\",\"type\":\"bytes32\"}],\"name\":\"extractMaterialToken\",\"outputs\":[{\"name\":\"mId1\",\"type\":\"uint256\"},{\"name\":\"amount1\",\"type\":\"uint256\"},{\"name\":\"mId2\",\"type\":\"uint256\"},{\"name\":\"amount2\",\"type\":\"uint256\"},{\"name\":\"mId3\",\"type\":\"uint256\"},{\"name\":\"amount3\",\"type\":\"uint256\"},{\"name\":\"mId4\",\"type\":\"uint256\"},{\"name\":\"amount4\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_energy\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setEnergyPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CubegonBuilder","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://399dba56286b0697c1b89783c9f7b992275ec06eda22a21d20b537f498263baa"}]}