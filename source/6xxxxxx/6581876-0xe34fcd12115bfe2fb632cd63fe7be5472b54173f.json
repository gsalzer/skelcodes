{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-zos/contracts/introspection/ERC165.sol\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: openzeppelin-zos/contracts/token/ERC721/ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: openzeppelin-zos/contracts/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: openzeppelin-zos/contracts/token/ERC721/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the \r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: openzeppelin-zos/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-zos/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-zos/contracts/introspection/ERC165Support.sol\r\n\r\n/**\r\n * @title ERC165Support\r\n * @dev Implements ERC165 returning true for ERC165 interface identifier\r\n */\r\ncontract ERC165Support is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool) \r\n  {\r\n    return _supportsInterface(_interfaceId);\r\n  }\r\n\r\n  function _supportsInterface(bytes4 _interfaceId)\r\n    internal\r\n    view\r\n    returns (bool) \r\n  {\r\n    return _interfaceId == InterfaceId_ERC165;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-zos/contracts/token/ERC721/ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is ERC165Support, ERC721Basic {\r\n\r\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n   * @dev Guarantees msg.sender is owner of the given token\r\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n   */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n   * @param _tokenId uint256 ID of the token to validate\r\n   */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  function _supportsInterface(bytes4 _interfaceId)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return super._supportsInterface(_interfaceId) || \r\n      _interfaceId == InterfaceId_ERC721 || _interfaceId == InterfaceId_ERC721Exists;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: zos-lib/contracts/migrations/Migratable.sol\r\n\r\n/**\r\n * @title Migratable\r\n * Helper contract to support intialization and migration schemes between\r\n * different implementations of a contract in the context of upgradeability.\r\n * To use it, replace the constructor with a function that has the\r\n * `isInitializer` modifier starting with `\"0\"` as `migrationId`.\r\n * When you want to apply some migration code during an upgrade, increase\r\n * the `migrationId`. Or, if the migration code must be applied only after\r\n * another migration has been already applied, use the `isMigration` modifier.\r\n * This helper supports multiple inheritance.\r\n * WARNING: It is the developer's responsibility to ensure that migrations are\r\n * applied in a correct order, or that they are run at all.\r\n * See `Initializable` for a simpler version.\r\n */\r\ncontract Migratable {\r\n  /**\r\n   * @dev Emitted when the contract applies a migration.\r\n   * @param contractName Name of the Contract.\r\n   * @param migrationId Identifier of the migration applied.\r\n   */\r\n  event Migrated(string contractName, string migrationId);\r\n\r\n  /**\r\n   * @dev Mapping of the already applied migrations.\r\n   * (contractName => (migrationId => bool))\r\n   */\r\n  mapping (string => mapping (string => bool)) internal migrated;\r\n\r\n  /**\r\n   * @dev Internal migration id used to specify that a contract has already been initialized.\r\n   */\r\n  string constant private INITIALIZED_ID = \"initialized\";\r\n\r\n\r\n  /**\r\n   * @dev Modifier to use in the initialization function of a contract.\r\n   * @param contractName Name of the contract.\r\n   * @param migrationId Identifier of the migration.\r\n   */\r\n  modifier isInitializer(string contractName, string migrationId) {\r\n    validateMigrationIsPending(contractName, INITIALIZED_ID);\r\n    validateMigrationIsPending(contractName, migrationId);\r\n    _;\r\n    emit Migrated(contractName, migrationId);\r\n    migrated[contractName][migrationId] = true;\r\n    migrated[contractName][INITIALIZED_ID] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to use in the migration of a contract.\r\n   * @param contractName Name of the contract.\r\n   * @param requiredMigrationId Identifier of the previous migration, required\r\n   * to apply new one.\r\n   * @param newMigrationId Identifier of the new migration to be applied.\r\n   */\r\n  modifier isMigration(string contractName, string requiredMigrationId, string newMigrationId) {\r\n    require(isMigrated(contractName, requiredMigrationId), \"Prerequisite migration ID has not been run yet\");\r\n    validateMigrationIsPending(contractName, newMigrationId);\r\n    _;\r\n    emit Migrated(contractName, newMigrationId);\r\n    migrated[contractName][newMigrationId] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the contract migration was applied.\r\n   * @param contractName Name of the contract.\r\n   * @param migrationId Identifier of the migration.\r\n   * @return true if the contract migration was applied, false otherwise.\r\n   */\r\n  function isMigrated(string contractName, string migrationId) public view returns(bool) {\r\n    return migrated[contractName][migrationId];\r\n  }\r\n\r\n  /**\r\n   * @dev Initializer that marks the contract as initialized.\r\n   * It is important to run this if you had deployed a previous version of a Migratable contract.\r\n   * For more information see https://github.com/zeppelinos/zos-lib/issues/158.\r\n   */\r\n  function initialize() isInitializer(\"Migratable\", \"1.2.1\") public {\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the requested migration was already executed.\r\n   * @param contractName Name of the contract.\r\n   * @param migrationId Identifier of the migration.\r\n   */\r\n  function validateMigrationIsPending(string contractName, string migrationId) private view {\r\n    require(!isMigrated(contractName, migrationId), \"Requested target migration ID has already been run\");\r\n  }\r\n}\r\n\r\n// File: openzeppelin-zos/contracts/token/ERC721/ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is Migratable, ERC165Support, ERC721BasicToken, ERC721 {\r\n\r\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  function initialize(string _name, string _symbol) public isInitializer(\"ERC721Token\", \"1.9.0\") {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n  }\r\n\r\n  function _supportsInterface(bytes4 _interfaceId)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return super._supportsInterface(_interfaceId) || \r\n      _interfaceId == InterfaceId_ERC721Enumerable || _interfaceId == InterfaceId_ERC721Metadata;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-zos/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable is Migratable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function initialize(address _sender) public isInitializer(\"Ownable\", \"1.9.0\") {\r\n    owner = _sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/estate/IEstateRegistry.sol\r\n\r\ncontract IEstateRegistry {\r\n  function mint(address to, string metadata) external returns (uint256);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner); // from ERC721\r\n\r\n  // Events\r\n\r\n  event CreateEstate(\r\n    address indexed _owner,\r\n    uint256 indexed _estateId,\r\n    string _data\r\n  );\r\n\r\n  event AddLand(\r\n    uint256 indexed _estateId,\r\n    uint256 indexed _landId\r\n  );\r\n\r\n  event RemoveLand(\r\n    uint256 indexed _estateId,\r\n    uint256 indexed _landId,\r\n    address indexed _destinatary\r\n  );\r\n\r\n  event Update(\r\n    uint256 indexed _assetId,\r\n    address indexed _holder,\r\n    address indexed _operator,\r\n    string _data\r\n  );\r\n\r\n  event UpdateOperator(\r\n    uint256 indexed _estateId,\r\n    address indexed _operator\r\n  );\r\n\r\n  event SetLANDRegistry(\r\n    address indexed _registry\r\n  );\r\n}\r\n\r\n// File: contracts/estate/EstateStorage.sol\r\n\r\ncontract LANDRegistry {\r\n  function decodeTokenId(uint value) external pure returns (int, int);\r\n  function updateLandData(int x, int y, string data) external;\r\n  function ping() public;\r\n  function ownerOf(uint256 tokenId) public returns (address);\r\n  function safeTransferFrom(address, address, uint256) public;\r\n}\r\n\r\n\r\ncontract EstateStorage {\r\n  bytes4 internal constant InterfaceId_GetMetadata = bytes4(keccak256(\"getMetadata(uint256)\"));\r\n  bytes4 internal constant InterfaceId_VerifyFingerprint = bytes4(\r\n    keccak256(\"verifyFingerprint(uint256,bytes)\")\r\n  );\r\n\r\n  LANDRegistry public registry;\r\n\r\n  // From Estate to list of owned LAND ids (LANDs)\r\n  mapping(uint256 => uint256[]) public estateLandIds;\r\n\r\n  // From LAND id (LAND) to its owner Estate id\r\n  mapping(uint256 => uint256) public landIdEstate;\r\n\r\n  // From Estate id to mapping of LAND id to index on the array above (estateLandIds)\r\n  mapping(uint256 => mapping(uint256 => uint256)) public estateLandIndex;\r\n\r\n  // Metadata of the Estate\r\n  mapping(uint256 => string) internal estateData;\r\n\r\n  // Operator of the Estate\r\n  mapping (uint256 => address) public updateOperator;\r\n}\r\n\r\n// File: contracts/estate/EstateRegistry.sol\r\n\r\n/**\r\n * @title ERC721 registry of every minted Estate and their owned LANDs\r\n * @dev Usings we are inheriting and depending on:\r\n * From ERC721Token:\r\n *   - using SafeMath for uint256;\r\n *   - using AddressUtils for address;\r\n */\r\n// solium-disable-next-line max-len\r\ncontract EstateRegistry is Migratable, IEstateRegistry, ERC721Token, ERC721Receiver, Ownable, EstateStorage {\r\n  modifier canTransfer(uint256 estateId) {\r\n    require(isApprovedOrOwner(msg.sender, estateId), \"Only owner or operator can transfer\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyRegistry() {\r\n    require(msg.sender == address(registry), \"Only the registry can make this operation\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyUpdateAuthorized(uint256 estateId) {\r\n    require(_isUpdateAuthorized(msg.sender, estateId), \"Unauthorized user\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Mint a new Estate with some metadata\r\n   * @param to The address that will own the minted token\r\n   * @param metadata Set an initial metadata\r\n   * @return An uint256 representing the new token id\r\n   */\r\n  function mint(address to, string metadata) external onlyRegistry returns (uint256) {\r\n    return _mintEstate(to, metadata);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer a LAND owned by an Estate to a new owner\r\n   * @param estateId Current owner of the token\r\n   * @param landId LAND to be transfered\r\n   * @param destinatary New owner\r\n   */\r\n  function transferLand(\r\n    uint256 estateId,\r\n    uint256 landId,\r\n    address destinatary\r\n  )\r\n    external\r\n    canTransfer(estateId)\r\n  {\r\n    return _transferLand(estateId, landId, destinatary);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer many tokens owned by an Estate to a new owner\r\n   * @param estateId Current owner of the token\r\n   * @param landIds LANDs to be transfered\r\n   * @param destinatary New owner\r\n   */\r\n  function transferManyLands(\r\n    uint256 estateId,\r\n    uint256[] landIds,\r\n    address destinatary\r\n  )\r\n    external\r\n    canTransfer(estateId)\r\n  {\r\n    uint length = landIds.length;\r\n    for (uint i = 0; i < length; i++) {\r\n      _transferLand(estateId, landIds[i], destinatary);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Get the Estate id for a given LAND id\r\n   * @dev This information also lives on estateLandIds,\r\n   *   but it being a mapping you need to know the Estate id beforehand.\r\n   * @param landId LAND to search\r\n   * @return The corresponding Estate id\r\n   */\r\n  function getLandEstateId(uint256 landId) external view returns (uint256) {\r\n    return landIdEstate[landId];\r\n  }\r\n\r\n  function setLANDRegistry(address _registry) external onlyOwner {\r\n    require(_registry.isContract(), \"The LAND registry address should be a contract\");\r\n    require(_registry != 0, \"The LAND registry address should be valid\");\r\n    registry = LANDRegistry(_registry);\r\n    emit SetLANDRegistry(registry);\r\n  }\r\n\r\n  function ping() external {\r\n    registry.ping();\r\n  }\r\n\r\n  /**\r\n   * @notice Return the amount of tokens for a given Estate\r\n   * @param estateId Estate id to search\r\n   * @return Tokens length\r\n   */\r\n  function getEstateSize(uint256 estateId) external view returns (uint256) {\r\n    return estateLandIds[estateId].length;\r\n  }\r\n\r\n  /**\r\n   * @notice Update the metadata of an Estate\r\n   * @dev Reverts if the Estate does not exist or the user is not authorized\r\n   * @param estateId Estate id to update\r\n   * @param metadata string metadata\r\n   */\r\n  function updateMetadata(\r\n    uint256 estateId,\r\n    string metadata\r\n  )\r\n    external\r\n    onlyUpdateAuthorized(estateId)\r\n  {\r\n    _updateMetadata(estateId, metadata);\r\n\r\n    emit Update(\r\n      estateId,\r\n      ownerOf(estateId),\r\n      msg.sender,\r\n      metadata\r\n    );\r\n  }\r\n\r\n  function getMetadata(uint256 estateId) external view returns (string) {\r\n    return estateData[estateId];\r\n  }\r\n\r\n  function setUpdateOperator(uint256 estateId, address operator) external canTransfer(estateId) {\r\n    updateOperator[estateId] = operator;\r\n    emit UpdateOperator(estateId, operator);\r\n  }\r\n\r\n  function isUpdateAuthorized(address operator, uint256 estateId) external view returns (bool) {\r\n    return _isUpdateAuthorized(operator, estateId);\r\n  }\r\n\r\n  function initialize(\r\n    string _name,\r\n    string _symbol,\r\n    address _registry\r\n  )\r\n    public\r\n    isInitializer(\"EstateRegistry\", \"0.0.2\")\r\n  {\r\n    require(_registry != 0, \"The registry should be a valid address\");\r\n\r\n    ERC721Token.initialize(_name, _symbol);\r\n    Ownable.initialize(msg.sender);\r\n    registry = LANDRegistry(_registry);\r\n  }\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    onlyRegistry\r\n    returns (bytes4)\r\n  {\r\n    uint256 estateId = _bytesToUint(_data);\r\n    _pushLandId(estateId, _tokenId);\r\n    return ERC721_RECEIVED;\r\n  }\r\n\r\n  /**\r\n   * @dev Creates a checksum of the contents of the Estate\r\n   * @param estateId the estateId to be verified\r\n   */\r\n  function getFingerprint(uint256 estateId)\r\n    public\r\n    view\r\n    returns (bytes32 result)\r\n  {\r\n    result = keccak256(abi.encodePacked(\"estateId\", estateId));\r\n\r\n    uint256 length = estateLandIds[estateId].length;\r\n    for (uint i = 0; i < length; i++) {\r\n      result ^= keccak256(abi.encodePacked(estateLandIds[estateId][i]));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @dev Verifies a checksum of the contents of the Estate\r\n   * @param estateId the estateid to be verified\r\n   * @param fingerprint the user provided identification of the Estate contents\r\n   */\r\n  function verifyFingerprint(uint256 estateId, bytes fingerprint) public view returns (bool) {\r\n    return getFingerprint(estateId) == _bytesToBytes32(fingerprint);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of multiple Estate IDs to another address\r\n   * @dev Delegates to safeTransferFrom for each transfer\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param estateIds uint256 array of IDs to be transferred\r\n  */\r\n  function safeTransferManyFrom(address from, address to, uint256[] estateIds) public {\r\n    safeTransferManyFrom(\r\n      from,\r\n      to,\r\n      estateIds,\r\n      \"\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of multiple Estate IDs to another address\r\n   * @dev Delegates to safeTransferFrom for each transfer\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param from current owner of the token\r\n   * @param to address to receive the ownership of the given token ID\r\n   * @param estateIds uint256 array of IDs to be transferred\r\n   * @param data bytes data to send along with a safe transfer check\r\n  */\r\n  function safeTransferManyFrom(\r\n    address from,\r\n    address to,\r\n    uint256[] estateIds,\r\n    bytes data\r\n  )\r\n    public\r\n  {\r\n    for (uint i = 0; i < estateIds.length; i++) {\r\n      safeTransferFrom(\r\n        from,\r\n        to,\r\n        estateIds[i],\r\n        data\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev update LAND data owned by an Estate\r\n   * @param estateId Estate\r\n   * @param landId LAND to be updated\r\n   * @param data string metadata\r\n   */\r\n  function updateLandData(uint256 estateId, uint256 landId, string data) public {\r\n    _updateLandData(estateId, landId, data);\r\n  }\r\n\r\n  /**\r\n   * @dev update LANDs data owned by an Estate\r\n   * @param estateId Estate id\r\n   * @param landIds LANDs to be updated\r\n   * @param data string metadata\r\n   */\r\n  function updateManyLandData(uint256 estateId, uint256[] landIds, string data) public {\r\n    uint length = landIds.length;\r\n    for (uint i = 0; i < length; i++) {\r\n      _updateLandData(estateId, landIds[i], data);\r\n    }\r\n  }\r\n\r\n  // check the supported interfaces via ERC165\r\n  function _supportsInterface(bytes4 _interfaceId) internal view returns (bool) {\r\n    // solium-disable-next-line operator-whitespace\r\n    return super._supportsInterface(_interfaceId) ||\r\n      _interfaceId == InterfaceId_GetMetadata ||\r\n      _interfaceId == InterfaceId_VerifyFingerprint;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new Estate with some metadata\r\n   * @param to The address that will own the minted token\r\n   * @param metadata Set an initial metadata\r\n   * @return An uint256 representing the new token id\r\n   */\r\n  function _mintEstate(address to, string metadata) internal returns (uint256) {\r\n    require(to != address(0), \"You can not mint to an empty address\");\r\n    uint256 estateId = _getNewEstateId();\r\n    _mint(to, estateId);\r\n    _updateMetadata(estateId, metadata);\r\n    emit CreateEstate(to, estateId, metadata);\r\n    return estateId;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to update an Estate metadata\r\n   * @dev Does not require the Estate to exist, for a public interface use `updateMetadata`\r\n   * @param estateId Estate id to update\r\n   * @param metadata string metadata\r\n   */\r\n  function _updateMetadata(uint256 estateId, string metadata) internal {\r\n    estateData[estateId] = metadata;\r\n  }\r\n\r\n  /**\r\n   * @notice Return a new unique id\r\n   * @dev It uses totalSupply to determine the next id\r\n   * @return uint256 Representing the new Estate id\r\n   */\r\n  function _getNewEstateId() internal view returns (uint256) {\r\n    return totalSupply().add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Appends a new LAND id to an Estate updating all related storage\r\n   * @param estateId Estate where the LAND should go\r\n   * @param landId Transfered LAND\r\n   */\r\n  function _pushLandId(uint256 estateId, uint256 landId) internal {\r\n    require(exists(estateId), \"The Estate id should exist\");\r\n    require(landIdEstate[landId] == 0, \"The LAND is already owned by an Estate\");\r\n    require(registry.ownerOf(landId) == address(this), \"The EstateRegistry cannot manage the LAND\");\r\n\r\n    estateLandIds[estateId].push(landId);\r\n\r\n    landIdEstate[landId] = estateId;\r\n\r\n    estateLandIndex[estateId][landId] = estateLandIds[estateId].length;\r\n\r\n    emit AddLand(estateId, landId);\r\n  }\r\n\r\n  /**\r\n   * @dev Removes a LAND from an Estate and transfers it to a new owner\r\n   * @param estateId Current owner of the LAND\r\n   * @param landId LAND to be transfered\r\n   * @param destinatary New owner\r\n   */\r\n  function _transferLand(\r\n    uint256 estateId,\r\n    uint256 landId,\r\n    address destinatary\r\n  )\r\n    internal\r\n  {\r\n    require(destinatary != address(0), \"You can not transfer LAND to an empty address\");\r\n\r\n    uint256[] storage landIds = estateLandIds[estateId];\r\n    mapping(uint256 => uint256) landIndex = estateLandIndex[estateId];\r\n\r\n    /**\r\n     * Using 1-based indexing to be able to make this check\r\n     */\r\n    require(landIndex[landId] != 0, \"The LAND is not part of the Estate\");\r\n\r\n    uint lastIndexInArray = landIds.length.sub(1);\r\n\r\n    /**\r\n     * Get the landIndex of this token in the landIds list\r\n     */\r\n    uint indexInArray = landIndex[landId].sub(1);\r\n\r\n    /**\r\n     * Get the landId at the end of the landIds list\r\n     */\r\n    uint tempTokenId = landIds[lastIndexInArray];\r\n\r\n    /**\r\n     * Store the last token in the position previously occupied by landId\r\n     */\r\n    landIndex[tempTokenId] = indexInArray.add(1);\r\n    landIds[indexInArray] = tempTokenId;\r\n\r\n    /**\r\n     * Delete the landIds[last element]\r\n     */\r\n    delete landIds[lastIndexInArray];\r\n    landIds.length = lastIndexInArray;\r\n\r\n    /**\r\n     * Drop this landId from both the landIndex and landId list\r\n     */\r\n    landIndex[landId] = 0;\r\n\r\n    /**\r\n     * Drop this landId Estate\r\n     */\r\n    landIdEstate[landId] = 0;\r\n\r\n    registry.safeTransferFrom(this, destinatary, landId);\r\n\r\n    emit RemoveLand(estateId, landId, destinatary);\r\n  }\r\n\r\n  function _isUpdateAuthorized(address operator, uint256 estateId) internal view returns (bool) {\r\n    return isApprovedOrOwner(operator, estateId) || updateOperator[estateId] == operator;\r\n  }\r\n\r\n  function _bytesToUint(bytes b) internal pure returns (uint256) {\r\n    return uint256(_bytesToBytes32(b));\r\n  }\r\n\r\n  function _bytesToBytes32(bytes b) internal pure returns (bytes32) {\r\n    bytes32 out;\r\n\r\n    for (uint i = 0; i < b.length; i++) {\r\n      out |= bytes32(b[i] & 0xFF) >> i.mul(8);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  function _updateLandData(\r\n    uint256 estateId,\r\n    uint256 landId,\r\n    string data\r\n  )\r\n    internal\r\n    onlyUpdateAuthorized(estateId)\r\n  {\r\n    require(landIdEstate[landId] == estateId, \"The LAND is not part of the Estate\");\r\n    int x;\r\n    int y;\r\n    (x, y) = registry.decodeTokenId(landId);\r\n    registry.updateLandData(x, y, data);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"landIdEstate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"getFingerprint\",\"outputs\":[{\"name\":\"result\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"},{\"name\":\"landId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"updateLandData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"estateLandIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"},{\"name\":\"landIds\",\"type\":\"uint256[]\"},{\"name\":\"destinatary\",\"type\":\"address\"}],\"name\":\"transferManyLands\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"},{\"name\":\"landIds\",\"type\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"updateManyLandData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setLANDRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"},{\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"updateMetadata\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ping\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"isUpdateAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"estateIds\",\"type\":\"uint256[]\"}],\"name\":\"safeTransferManyFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"},{\"name\":\"fingerprint\",\"type\":\"bytes\"}],\"name\":\"verifyFingerprint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"updateOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"estateLandIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"},{\"name\":\"landId\",\"type\":\"uint256\"},{\"name\":\"destinatary\",\"type\":\"address\"}],\"name\":\"transferLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"getMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"setUpdateOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"landId\",\"type\":\"uint256\"}],\"name\":\"getLandEstateId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"isMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"estateIds\",\"type\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferManyFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"getEstateSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_estateId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"CreateEstate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_estateId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_landId\",\"type\":\"uint256\"}],\"name\":\"AddLand\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_estateId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_landId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_destinatary\",\"type\":\"address\"}],\"name\":\"RemoveLand\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_holder\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_estateId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"UpdateOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"SetLANDRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"migrationId\",\"type\":\"string\"}],\"name\":\"Migrated\",\"type\":\"event\"}]","ContractName":"EstateRegistry","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://622e0444b64fabfa02e58380bceff02ec4c143fb0bc97c779f8fc2d464e47c60"}]}