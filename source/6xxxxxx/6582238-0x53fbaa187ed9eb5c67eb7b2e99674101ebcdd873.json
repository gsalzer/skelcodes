{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * Elementium, 2018/10\r\n */\r\n\r\npragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title ElementiumVesting\r\n * @dev ElementiumVesting is a token manager contract that \r\n * constrols token extraction to beneficiaries.\r\n */\r\ncontract ElementiumVesting {\r\n  using SafeMath for uint256;\r\n\r\n  struct StagedLockingPlan {\r\n    address beneficiary;\r\n    uint256 managedAmount;\r\n    uint256 start;\r\n    uint256 stages;\r\n    uint256 durationPerStage;\r\n    uint256 releaseRatio;\r\n    uint256 currentyStage;\r\n    uint256 released;\r\n  }\r\n\r\n  uint256 private _milestone1 = 1540425600;     // GMT 2018/10/25 00:00:00\r\n  uint256 private _milestone2 = 1571961600;     // GMT 2019/10/25 00:00:00\r\n  uint256 private _durationMonth = 2592000;     // seconds of a month (30 days)\r\n  uint256 private _durationYear = 31536000;     // seconds of a year (365 days)\r\n\r\n  // Managed token\r\n  IERC20 private _token;\r\n\r\n  // Locking plans\r\n  uint256 private _numPlans;\r\n  mapping (uint256 => StagedLockingPlan) private _plans;\r\n\r\n  constructor(IERC20 token) public {\r\n    _token = token;\r\n\r\n    // USAGE: Invoke [TOKEN].release(0) to release vested tokens of Plan-1 to the beneficiary.\r\n    _addLockingPlan(\r\n      address(0xcCDAb5791D3d11209f5bEEE58003Aa4EAb3E9b63),    // beneficiary\r\n      150000000000000000,   // amount managed\r\n      _milestone2,          // start from milestone 2\r\n      1,                    // single stage\r\n      _durationYear,        // a year of each stage\r\n      0);                   // average amount releasing\r\n\r\n    // USAGE: Invoke [TOKEN].release(1) to release vested tokens of Plan-2 to the beneficiary.\r\n    _addLockingPlan(\r\n      address(0x8D4Db0c0cB4b937523eBcfd86A8038eb0475166A),    // beneficiary\r\n      250000000000000000,   // amount managed\r\n      _milestone1,          // start from milestone 1\r\n      4,                    // 4 stages\r\n      _durationMonth,       // a month of each stage\r\n      0);                   // average amount releasing\r\n\r\n    // USAGE: Invoke [TOKEN].release(2) to release vested tokens of Plan-3 to the beneficiary.\r\n    _addLockingPlan(\r\n      address(0xCFc030Fb11d88772a58BFE30a296C6c215A912Bb),    // beneficiary\r\n      400000000000000000,   // amount managed\r\n      _milestone1,          // start from milestone 1\r\n      20,                   // 20 stages\r\n      _durationYear,        // a year of each stage\r\n      4);                   // ratio amount releasing, 25% for each time\r\n  }\r\n\r\n  function _addLockingPlan (\r\n    address beneficiary,\r\n    uint256 managedAmount,\r\n    uint256 start,\r\n    uint256 stages,\r\n    uint256 durationPerStage,\r\n    uint256 releaseRatio\r\n  ) \r\n    private \r\n  {\r\n    require(beneficiary != address(0));\r\n    require(managedAmount > 0);\r\n    require(stages > 0);\r\n\r\n    _plans[_numPlans] = StagedLockingPlan({\r\n      beneficiary: beneficiary,\r\n      managedAmount: managedAmount,\r\n      start: start,\r\n      stages: stages,\r\n      durationPerStage: durationPerStage,\r\n      releaseRatio: releaseRatio,\r\n      currentyStage: 0,\r\n      released: 0\r\n    });\r\n    _numPlans = _numPlans.add(1);\r\n  }\r\n\r\n  function _releasableAmount(uint256 i, uint256 nextStage) private view returns (uint256) {\r\n    uint256 cliff = _plans[i].released;\r\n    if(nextStage < _plans[i].stages) {\r\n      // Average amount releasing\r\n      if(_plans[i].releaseRatio == 0) {\r\n        uint256 amountPerStage = _plans[i].managedAmount.div(_plans[i].stages);\r\n        cliff = nextStage.mul(amountPerStage);\r\n      }\r\n      // Ratio amount releasing\r\n      else {\r\n        cliff = 0;\r\n        // sum all historical stages\r\n        for(uint j = 0; j < nextStage; j++) {\r\n          uint256 remained = _plans[i].managedAmount.sub(cliff);\r\n          cliff = cliff.add(remained.div(_plans[i].releaseRatio));\r\n        }\r\n      }\r\n    }\r\n    // The last stage\r\n    else {\r\n      cliff = _plans[i].managedAmount;    // release all remained in the last stage\r\n    }\r\n    return cliff.sub(_plans[i].released);\r\n  }\r\n\r\n  function release(uint256 iPlan) public {\r\n    require(iPlan >= 0 && iPlan < _numPlans);\r\n    require(_plans[iPlan].currentyStage < _plans[iPlan].stages);\r\n    uint256 duration = block.timestamp.sub(_plans[iPlan].start);\r\n    uint256 nextStage = duration.div(_plans[iPlan].durationPerStage);\r\n    nextStage = nextStage.add(1);   // point to the next stage\r\n    if(nextStage > _plans[iPlan].stages) {\r\n      nextStage = _plans[iPlan].stages;    // round to the last stage\r\n    }\r\n    uint256 unreleased = _releasableAmount(iPlan, nextStage);\r\n    require(unreleased > 0);\r\n    _plans[iPlan].currentyStage = nextStage;\r\n    _plans[iPlan].released = _plans[iPlan].released.add(unreleased);\r\n    _token.transfer(_plans[iPlan].beneficiary, unreleased);\r\n  }\r\n\r\n  function token() public view returns (address) {\r\n    return address(_token);\r\n  }\r\n\r\n  function balance() public view returns (uint256) {\r\n    return _token.balanceOf(address(this));\r\n  }\r\n\r\n  function locked() public view \r\n    returns (uint256 total, uint256 plan1, uint256 plan2, uint256 plan3) \r\n  {\r\n    plan1 = _plans[0].managedAmount.sub(_plans[0].released);\r\n    plan2 = _plans[1].managedAmount.sub(_plans[1].released);\r\n    plan3 = _plans[2].managedAmount.sub(_plans[2].released);\r\n    total = plan1.add(plan2.add(plan3));\r\n  }\r\n\r\n  function released() public view \r\n    returns (uint256 total, uint256 plan1, uint256 plan2, uint256 plan3) \r\n  {\r\n    plan1 = _plans[0].released;\r\n    plan2 = _plans[1].released;\r\n    plan3 = _plans[2].released;\r\n    total = plan1.add(plan2.add(plan3));\r\n  }\r\n\r\n  function currentyStage() public view \r\n    returns (uint256 plan1, uint256 plan2, uint256 plan3) \r\n  {\r\n    plan1 = _plans[0].currentyStage;\r\n    plan2 = _plans[1].currentyStage;\r\n    plan3 = _plans[2].currentyStage;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"iPlan\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"plan1\",\"type\":\"uint256\"},{\"name\":\"plan2\",\"type\":\"uint256\"},{\"name\":\"plan3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"plan1\",\"type\":\"uint256\"},{\"name\":\"plan2\",\"type\":\"uint256\"},{\"name\":\"plan3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentyStage\",\"outputs\":[{\"name\":\"plan1\",\"type\":\"uint256\"},{\"name\":\"plan2\",\"type\":\"uint256\"},{\"name\":\"plan3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"ElementiumVesting","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000568025c55c21bda4bc488f3107ebfc8b3d3ef2d","Library":"","SwarmSource":"bzzr://5e68dc8b18a27ac171e87a0703117989e1892ab34f30803e6f96f1e69e92c3ca"}]}