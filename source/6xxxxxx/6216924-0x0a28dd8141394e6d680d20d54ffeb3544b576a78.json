{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        \r\n        \r\n        \r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract BaseGame {\r\n    using SafeMath for uint256;\r\n    \r\n    string public officialGameUrl;  \r\n    string public gameName = \"SelectOne\";    \r\n    uint public gameType = 3002;               \r\n\r\n    mapping (address => uint256) public userEtherOf;\r\n    \r\n    function userRefund() public  returns(bool _result);\r\n}\r\n\r\ncontract Base is  BaseGame{\r\n    uint public createTime = now;\r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner)  public  onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    bool public globalLocked = false;     \r\n\r\n    function lock() internal {             \r\n        require(!globalLocked);\r\n        globalLocked = true;\r\n    }\r\n\r\n    function unLock() internal {\r\n        require(globalLocked);\r\n        globalLocked = false;\r\n    }\r\n\r\n    function setLock()  public onlyOwner{\r\n        globalLocked = false;\r\n    }\r\n\r\n\r\n    uint public currentEventId = 1;\r\n\r\n    function getEventId() internal returns(uint _result) { \r\n        _result = currentEventId;\r\n        currentEventId ++;\r\n    }\r\n\r\n    function setOfficialGameUrl(string _newOfficialGameUrl) public onlyOwner{\r\n        officialGameUrl = _newOfficialGameUrl;\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IDividendToken{                           \r\n    function profitOrgPay() payable external ;    \r\n}\r\n\r\ninterface IGameToken{                                             \r\n    function mineToken(address _player, uint256 _etherAmount) external returns (uint _toPlayerToken);\r\n    function balanceOf(address _owner) constant  external returns (uint256 _balance);\r\n}\r\n\r\ncontract Loan is Base{     \r\n\r\n    address public shareholder;               \r\n\r\n    bool public shareholderIsToken = false;\r\n    bool public isStopPlay = false;\r\n    uint public stopTime = 0;\r\n    \r\n    function setStopPlay(bool _isStopPlay) public onlyOwner\r\n    {\r\n        isStopPlay = _isStopPlay;\r\n        stopTime = now;\r\n    }\r\n\r\n    function userRefund() public  returns(bool _result) {\r\n        return _userRefund(msg.sender);\r\n    }\r\n\r\n    function _userRefund(address _to) internal  returns(bool _result){    \r\n        require (_to != 0x0);\r\n        _result = false;\r\n        lock();\r\n        uint256 amount = userEtherOf[msg.sender];\r\n        if(amount > 0){\r\n            if(msg.sender == shareholder){       \r\n\t\tcheckPayShareholder();\r\n            }\r\n            else{       \r\n                userEtherOf[msg.sender] = 0;\r\n                _to.transfer(amount);\r\n            }\r\n            _result = true;\r\n        }\r\n        else{   \r\n            _result = false;\r\n        }\r\n        unLock();\r\n    }\r\n\r\n    uint256 maxShareholderEther = 20 ether;                                \r\n\r\n    function setMaxShareholderEther(uint256 _value) public onlyOwner {     \r\n        require(_value >= minBankerEther * 2);\r\n        require(_value <= minBankerEther * 20);\r\n        maxShareholderEther = _value;\r\n    }\r\n\r\n    function autoCheckPayShareholder() internal {                             \r\n        if (userEtherOf[shareholder] > maxShareholderEther){\r\n            checkPayShareholder();\r\n         }\r\n    }\r\n\r\n    function checkPayShareholder() internal {               \r\n        uint256 amount = userEtherOf[shareholder];\r\n        if(currentLoanPerson == 0x0 || checkPayLoan()){       \r\n            uint256 me = minBankerEther;                    \r\n            if(isStopPlay){\r\n                me = 0;\r\n            }\r\n            if(amount >= me){     \r\n                uint256 toShareHolder = amount - me;\r\n                if(shareholderIsToken){     \r\n                    IDividendToken token = IDividendToken(shareholder);\r\n                    token.profitOrgPay.value(toShareHolder)();  \r\n                }else{\r\n                    shareholder.transfer(toShareHolder);\r\n                }\r\n                userEtherOf[shareholder] = me;\r\n            }\r\n        }\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n    uint256 public gameMaxBetAmount = 0.4 ether;        \r\n    uint256 public gameMinBetAmount = 0.04 ether;      \r\n    uint256 public minBankerEther = gameMaxBetAmount * 20;\r\n\r\n    function setMinBankerEther(uint256 _value) public onlyOwner {          \r\n        require(_value >= gameMinBetAmount *  18 * 1);\r\n        require(_value <= gameMaxBetAmount *  18 * 10);\r\n        minBankerEther = _value;\r\n    }\r\n\r\n    uint256 public currentDayRate10000 = 0;\r\n    address public currentLoanPerson;       \r\n    uint256 public currentLoanAmount;       \r\n    uint public currentLoanDayTime;      \r\n\r\n    function depositEther() public payable\r\n    {  \r\n        if (msg.value > 0){\r\n            userEtherOf[msg.sender] = userEtherOf[msg.sender].add(msg.value);\r\n        }\r\n    }\r\n\r\n    event OnBidLoan(bool indexed _success, address indexed _user, uint256 indexed _dayRate10000,  uint256 _etherAmount);\r\n    event OnPayLoan(address _sender,uint _eventTime,uint256 _toLoan);\r\n\r\n    function bidLoan(uint256 _dayRate10000) public payable returns(bool _result) {      \r\n        _result = false;\r\n        require(!isStopPlay);\r\n        require(msg.sender != shareholder);\r\n\r\n        require(_dayRate10000 < 1000);\r\n        depositEther();\r\n        \r\n        if(checkPayLoan()){\r\n            emit OnBidLoan(false, msg.sender, _dayRate10000,  0);\r\n            return;\r\n        }\r\n        \r\n        uint256 toLoan = calLoanAmount();\r\n        uint256 toGame = 0;\r\n        if (userEtherOf[shareholder] < minBankerEther){       \r\n            toGame = minBankerEther.sub(userEtherOf[shareholder]);\r\n        }\r\n\r\n        if(toLoan > 0 && toGame == 0 && currentLoanPerson != 0x0){                   \r\n            require(_dayRate10000 < currentDayRate10000);\r\n        }\r\n\r\n        require(toLoan + toGame > 0);\r\n        require(userEtherOf[msg.sender] >= toLoan + toGame);\r\n\r\n        userEtherOf[msg.sender] = userEtherOf[msg.sender].sub(toLoan + toGame);\r\n        userEtherOf[currentLoanPerson] = userEtherOf[currentLoanPerson].add(toLoan);\r\n        userEtherOf[shareholder] = userEtherOf[shareholder].add(toGame);\r\n\r\n        currentLoanPerson = msg.sender;\r\n        currentDayRate10000 = _dayRate10000;\r\n        currentLoanAmount = toLoan + toGame;\r\n        currentLoanDayTime = now;\r\n\r\n        emit OnBidLoan(false, msg.sender, _dayRate10000,  currentLoanAmount);\r\n\r\n        _result = true;\r\n        return;\r\n    }\r\n\r\n    function getCanLoanAmount() public view returns(uint256  _result){                 \r\n        uint256 toLoan = calLoanAmount();\r\n\r\n        uint256 toGame = 0;\r\n        if (userEtherOf[shareholder] <= minBankerEther){\r\n            toGame = minBankerEther - userEtherOf[shareholder];\r\n            _result =  toLoan + toGame;\r\n            return;\r\n        }\r\n        else if (userEtherOf[shareholder] > minBankerEther){\r\n            uint256 c = userEtherOf[shareholder] - minBankerEther;\r\n            if(toLoan > c){\r\n                _result =  toLoan - c;\r\n                return;\r\n            }\r\n            else{\r\n                _result =  0;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function calLoanAmount() public view returns (uint256 _result){\r\n      _result = 0;\r\n      if(currentLoanPerson != 0x0 && currentLoanAmount > 0){\r\n          _result = currentLoanAmount;\r\n          uint d = now.sub(currentLoanDayTime).div(1 days);\r\n          for(uint i = 0; i < d; i++){\r\n              _result = _result.mul(currentDayRate10000.add(10000)).div(10000);\r\n          }\r\n        }\r\n    }\r\n\r\n\r\n    function checkPayLoan() public returns (bool _result) {                        \r\n        _result = false;\r\n        uint256 toLoan = calLoanAmount();\r\n        if(toLoan > 0){\r\n            if(isStopPlay && now  > stopTime.add(1 days)){         \r\n                if(toLoan > userEtherOf[shareholder]){\r\n                    toLoan = userEtherOf[shareholder];\r\n                    userEtherOf[currentLoanPerson] = userEtherOf[currentLoanPerson].add(toLoan);\r\n                    userEtherOf[shareholder] = userEtherOf[shareholder].sub(toLoan);\r\n                }\r\n                else{\r\n                    userEtherOf[currentLoanPerson] = userEtherOf[currentLoanPerson].add(toLoan);\r\n                    userEtherOf[shareholder] = userEtherOf[shareholder].sub(toLoan);\r\n                }\r\n\r\n                currentLoanPerson = 0x0;\r\n                currentDayRate10000 = 0;\r\n                currentLoanAmount = 0;\r\n                currentLoanDayTime = now;\r\n                _result = true;\r\n                emit OnPayLoan(msg.sender, now, toLoan);\r\n                return;\r\n            }                             \r\n            if (userEtherOf[shareholder] >= minBankerEther.add(toLoan)){            \r\n                userEtherOf[currentLoanPerson] = userEtherOf[currentLoanPerson].add(toLoan);\r\n                userEtherOf[shareholder] = userEtherOf[shareholder].sub(toLoan);\r\n                currentLoanPerson = 0x0;\r\n                currentDayRate10000 = 0;\r\n                currentLoanAmount = 0;\r\n                currentLoanDayTime = now;\r\n                _result = true;\r\n                emit OnPayLoan(msg.sender,now,toLoan);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract SelectOne is Loan\r\n{\r\n  uint public playNo = 1;      \r\n  uint public constant minNum = 1; \r\n  uint public constant maxNum = 22;         \r\n  uint public constant winMultiplePer = 1800;\r\n\r\n  struct betInfo              \r\n  {\r\n    address Player;         \r\n    uint[] BetNums;\r\n    uint AwardNum;\r\n    uint256[] BetAmounts;      \r\n    uint256 BlockNumber;    \r\n    uint EventId;           \r\n    bool IsReturnAward;     \r\n  }\r\n  mapping (uint => betInfo) public playerBetInfoOf;               \r\n  IGameToken public GameToken;\r\n\r\n\r\n  //function SelectOne(uint _maxNum, uint256 _gameMinBetAmount,uint256 _gameMaxBetAmount,uint _winMultiplePer,string _gameName,address _gameToken,bool _isToken) public{\r\n  function SelectOne(uint256 _gameMinBetAmount,uint256 _gameMaxBetAmount, string _gameName,address _gameToken) public{\r\n    //require(1 < _maxNum);\r\n    //require(_maxNum < 100);\r\n    require(_gameMinBetAmount > 0); \r\n    require(_gameMaxBetAmount >= _gameMinBetAmount);\r\n    //require(_winMultiplePer < _maxNum.mul(100));\r\n    owner = msg.sender;             \r\n    //maxNum = _maxNum;\r\n    gameMinBetAmount = _gameMinBetAmount;\r\n    gameMaxBetAmount = _gameMaxBetAmount;\r\n    minBankerEther = gameMaxBetAmount * 20;\r\n    //winMultiplePer = _winMultiplePer;\r\n    gameName = _gameName;   \r\n    GameToken = IGameToken(_gameToken);\r\n    shareholder = _gameToken;\r\n    shareholderIsToken = true;\r\n    officialGameUrl='http://select.donquixote.games/';\r\n  }\r\n  \r\n\r\n  function tokenOf(address _user) view public returns(uint _result){\r\n    _result = GameToken.balanceOf(_user);\r\n  }\r\n\r\n  event OnPlay(address indexed _player, uint[] _betNums,uint256[] _betAmounts,uint256 _giftToken, uint _blockNumber,uint _playNo, uint _eventTime, uint eventId);\r\n  event OnGetAward(address indexed _player, uint256 _playNo, uint[] _betNums,uint _blockNumber,uint256[] _betAmounts ,uint _eventId,uint _awardNum,uint256 _awardAmount);\r\n\r\n\r\n  function play(uint[] _betNums,uint256[] _betAmounts) public  payable returns(bool _result){       \r\n    _result = false;\r\n    require(_betNums.length > 0);\r\n    require(_betNums.length == _betAmounts.length);\r\n    depositEther();\r\n    _result = _play(_betNums,_betAmounts);\r\n  }\r\n\r\n  function _play(uint[] _betNums, uint256[] _betAmounts) private  returns(bool _result){            \r\n    _result = false;\r\n    require (!isStopPlay);\r\n\r\n    uint maxBetAmount = 0;\r\n    uint totalBetAmount = 0;\r\n    uint8[22] memory betNumOf;                      \r\n\r\n    for(uint i=0;i < _betNums.length;i++){\r\n      require(_betNums[i] > 0 && _betNums[i] <= maxNum );\r\n      require(betNumOf[_betNums[i] - 1] == 0);       \r\n\t  betNumOf[_betNums[i] - 1] = 1;      \r\n      if(_betAmounts[i] > gameMaxBetAmount){\r\n        _betAmounts[i] = gameMaxBetAmount;\r\n      }\r\n      if(_betAmounts[i] > maxBetAmount){\r\n        maxBetAmount = _betAmounts[i];\r\n      }\r\n      totalBetAmount = totalBetAmount.add(_betAmounts[i]);\r\n    }\r\n\r\n    uint256 needAmount = maxBetAmount.mul(winMultiplePer).div(100);\r\n    if(totalBetAmount > needAmount){\r\n      needAmount = 0;\r\n    }else{\r\n      needAmount = needAmount.sub(totalBetAmount);\r\n    }\r\n    require(userEtherOf[shareholder] >= needAmount);\r\n    require(userEtherOf[msg.sender] >= totalBetAmount);\r\n    lock();\r\n    betInfo memory bi = betInfo({\r\n      Player :  msg.sender,              \r\n      BetNums : _betNums,                       \r\n      AwardNum : 0,\r\n      BetAmounts : _betAmounts,                     \r\n      BlockNumber : block.number,         \r\n      EventId : currentEventId,           \r\n      IsReturnAward: false               \r\n    });\r\n    playerBetInfoOf[playNo] = bi;\r\n    userEtherOf[msg.sender] = userEtherOf[msg.sender].sub(totalBetAmount);                  \r\n    userEtherOf[shareholder] = userEtherOf[shareholder].sub(needAmount);             \r\n    userEtherOf[this] = userEtherOf[this].add(needAmount).add(totalBetAmount);\r\n    \r\n    uint256 _giftToken = GameToken.mineToken(msg.sender,totalBetAmount);\r\n    emit OnPlay(msg.sender,_betNums,_betAmounts,_giftToken,block.number,playNo,now, getEventId());      \r\n    playNo++;       \r\n    _result = true;\r\n    unLock();\r\n\t  autoCheckPayShareholder();             \r\n  }\r\n\r\n  function getAward(uint[] _playNos) public returns(bool _result){\r\n    require(_playNos.length > 0);\r\n    _result = false;\r\n    for(uint i = 0;i < _playNos.length;i++){\r\n      _result = _getAward(_playNos[i]);\r\n    }\r\n  }\r\n\r\n  function _getAward(uint _playNo) private  returns(bool _result){\r\n    require(_playNo < playNo);       \r\n    _result = false;        \r\n    betInfo storage bi = playerBetInfoOf[_playNo];        \r\n    require(block.number > bi.BlockNumber);\r\n    require(!bi.IsReturnAward);      \r\n\r\n    lock();\r\n    uint awardNum = 0;\r\n    uint256 awardAmount = 0;\r\n    uint256 totalBetAmount = 0;\r\n    uint256 maxBetAmount = 0;\r\n    uint256 totalAmount = 0;\r\n    for(uint i=0;i <bi.BetNums.length;i++){\r\n      if(bi.BetAmounts[i] > maxBetAmount){\r\n        maxBetAmount = bi.BetAmounts[i];\r\n      }\r\n      totalBetAmount = totalBetAmount.add(bi.BetAmounts[i]);\r\n    }\r\n    totalAmount = maxBetAmount.mul(winMultiplePer).div(100);\r\n    if(totalBetAmount >= totalAmount){\r\n      totalAmount = totalBetAmount;\r\n    }\r\n    if(bi.BlockNumber.add(256) >= block.number){\r\n      uint256 randomNum = bi.EventId%1000000;\r\n      bytes32 encrptyHash = keccak256(bi.Player,block.blockhash(bi.BlockNumber),uintToString(randomNum));\r\n      awardNum = uint(encrptyHash)%22;\r\n      awardNum = awardNum.add(1);\r\n      bi.AwardNum = awardNum;\r\n      for(uint n=0;n <bi.BetNums.length;n++){\r\n        if(bi.BetNums[n] == awardNum){\r\n          awardAmount = bi.BetAmounts[n].mul(winMultiplePer).div(100);\r\n          bi.IsReturnAward = true;  \r\n          userEtherOf[this] = userEtherOf[this].sub(totalAmount);\r\n          userEtherOf[bi.Player] = userEtherOf[bi.Player].add(awardAmount);\r\n          userEtherOf[shareholder] = userEtherOf[shareholder].add(totalAmount.sub(awardAmount));\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if(!bi.IsReturnAward){\r\n      bi.IsReturnAward = true;\r\n      userEtherOf[this] = userEtherOf[this].sub(totalAmount);\r\n      userEtherOf[shareholder] = userEtherOf[shareholder].add(totalAmount);\r\n    }\r\n    emit OnGetAward(bi.Player,_playNo,bi.BetNums,bi.BlockNumber,bi.BetAmounts,getEventId(),awardNum,awardAmount);  \r\n    _result = true; \r\n    unLock();\r\n  }\r\n  function getAwardNum(uint _playNo) view public returns(uint _awardNum){\r\n    betInfo memory bi = playerBetInfoOf[_playNo];\r\n    if(bi.BlockNumber.add(256) >= block.number){\r\n      uint256 randomNum = bi.EventId%1000000;\r\n      bytes32 encrptyHash = keccak256(bi.Player,block.blockhash(bi.BlockNumber),uintToString(randomNum));\r\n      _awardNum = uint(encrptyHash)%22;\r\n      _awardNum = _awardNum.add(1);\r\n    }\r\n  }\r\n\r\n  function uintToString(uint v) private pure returns (string)    \r\n  {\r\n    uint maxlength = 10;                     \r\n    bytes memory reversed = new bytes(maxlength);\r\n    uint i = 0;\r\n    while (v != 0) {\r\n      uint remainder = v % 10;\r\n      v = v / 10;\r\n      reversed[i++] = byte(48 + remainder);\r\n    }\r\n    bytes memory s = new bytes(i);          \r\n    for (uint j = 0; j < i; j++) {\r\n      s[j] = reversed[i - j - 1];         \r\n    }\r\n    string memory str = string(s);         \r\n    return str;                            \r\n  }\r\n\r\n  function () public payable {        \r\n    if(msg.value > 0){\r\n      userEtherOf[msg.sender] = userEtherOf[msg.sender].add(msg.value);\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"stopTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEventId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareholder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerBetInfoOf\",\"outputs\":[{\"name\":\"Player\",\"type\":\"address\"},{\"name\":\"AwardNum\",\"type\":\"uint256\"},{\"name\":\"BlockNumber\",\"type\":\"uint256\"},{\"name\":\"EventId\",\"type\":\"uint256\"},{\"name\":\"IsReturnAward\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calLoanAmount\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"officialGameUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkPayLoan\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOfficialGameUrl\",\"type\":\"string\"}],\"name\":\"setOfficialGameUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLoanPerson\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDayRate10000\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tokenOf\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareholderIsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEtherOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameMaxBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GameToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userRefund\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBankerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLoanAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dayRate10000\",\"type\":\"uint256\"}],\"name\":\"bidLoan\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winMultiplePer\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLoanDayTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_playNo\",\"type\":\"uint256\"}],\"name\":\"getAwardNum\",\"outputs\":[{\"name\":\"_awardNum\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxShareholderEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopPlay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameMinBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCanLoanAmount\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playNos\",\"type\":\"uint256[]\"}],\"name\":\"getAward\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betNums\",\"type\":\"uint256[]\"},{\"name\":\"_betAmounts\",\"type\":\"uint256[]\"}],\"name\":\"play\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isStopPlay\",\"type\":\"bool\"}],\"name\":\"setStopPlay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinBankerEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_gameMinBetAmount\",\"type\":\"uint256\"},{\"name\":\"_gameMaxBetAmount\",\"type\":\"uint256\"},{\"name\":\"_gameName\",\"type\":\"string\"},{\"name\":\"_gameToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_betNums\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"_betAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"_giftToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_playNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"OnPlay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_playNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_betNums\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_betAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_awardNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_awardAmount\",\"type\":\"uint256\"}],\"name\":\"OnGetAward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_dayRate10000\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"name\":\"OnBidLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_toLoan\",\"type\":\"uint256\"}],\"name\":\"OnPayLoan\",\"type\":\"event\"}]","ContractName":"SelectOne","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000008e1bc9bf040000000000000000000000000000000000000000000000000000058d15e1762800000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000af7c176eb40ae42e26dce5ad7aa125ecbd735cc1000000000000000000000000000000000000000000000000000000000000001157696e73746f6e20436875726368696c6c000000000000000000000000000000","Library":"","SwarmSource":"bzzr://60581287ee6d46388e62d13c635c84694a94021328c162ae9611dd4b20334e3a"}]}