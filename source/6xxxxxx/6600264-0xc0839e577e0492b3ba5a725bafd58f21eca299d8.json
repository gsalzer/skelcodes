{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4 .25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\nThe development of the contract is entirely owned by the oneplus1 campaign, any copying of the source code is not legal.\r\n*/\r\ncontract oneplus1 {\r\n    //use of library of safe mathematical operations    \r\n    using SafeMath\r\n    for uint;\r\n    // array containing information about beneficiaries\r\n    mapping(address => uint) public userDeposit;\r\n    //array containing information about the time of payment\r\n    mapping(address => uint) public userTime;\r\n    //array containing information on interest paid\r\n    mapping(address => uint) public persentWithdraw;\r\n    //fund fo transfer percent\r\n    address public projectFund = 0x5765ad757423719B323E9BeCfE5d7fec2EDA1525;\r\n    //wallet for a charitable foundation\r\n    address public charityFund = 0x1ca5FEAb9630620a347053a24Eee6679345fC2Aa;\r\n    //percentage deducted to the advertising fund\r\n    uint projectPercent = 8;\r\n    //percent for a charitable foundation\r\n    uint public charityPercent = 1;\r\n    //percent for a reserve fund\r\n    uint public reservePercent = 1;\r\n    //time through which you can take dividends\r\n    uint public chargingTime = 1 hours;\r\n    //start persent 0.25% per hour\r\n    uint public startPercent = 250;\r\n    uint public lowPersent = 300;\r\n    uint public middlePersent = 350;\r\n    uint public highPersent = 375;\r\n    //interest rate increase steps\r\n    uint public stepLow = 1000 ether;\r\n    uint public stepMiddle = 2500 ether;\r\n    uint public stepHigh = 5000 ether;\r\n    uint public countOfInvestors = 0;\r\n    uint public countOfCharity = 0;\r\n    uint public countOfReserves = 0;\r\n    // array of all investors\r\n    address[] investors;\r\n    \r\n    modifier isIssetUser() {\r\n        require(userDeposit[msg.sender] > 0, \"Deposit not found\");\r\n        _;\r\n    }\r\n\r\n    modifier timePayment() {\r\n        require(now >= userTime[msg.sender].add(chargingTime), \"Too fast payout request\");\r\n        _;\r\n    }\r\n\r\n    //return of interest on the deposit\r\n    function collectPercent() isIssetUser timePayment internal {\r\n        require(address(this).balance > 0);\r\n        //if the user received 200% or more of his contribution, delete the user\r\n        if ((userDeposit[msg.sender].mul(2)) <= persentWithdraw[msg.sender]) {\r\n            userDeposit[msg.sender] = 0;\r\n            userTime[msg.sender] = 0;\r\n            persentWithdraw[msg.sender] = 0;\r\n        } else {\r\n            uint payout = payoutAmount();\r\n            userTime[msg.sender] = now;\r\n            uint withdrawalAmount = persentWithdraw[msg.sender] + payout;\r\n            // it will not allow more than 200% of deposit to be paid\r\n            if(withdrawalAmount > userDeposit[msg.sender].mul(2)){ \r\n                payout = userDeposit[msg.sender].mul(2).sub(persentWithdraw[msg.sender]);\r\n            }\r\n            persentWithdraw[msg.sender] += payout;\r\n            msg.sender.transfer(payout);\r\n        }\r\n    }\r\n    \r\n    function checkContractBalance() internal {\r\n        //get contract balance\r\n        uint balance = address(this).balance;\r\n        // if balance is less than 0.89 ethers, distribute reserve Funds\r\n        if (balance.sub(countOfReserves) < 0.89 ether) {\r\n            //distribute reserve Funds\r\n            distributeReserveFunds();\r\n        }\r\n    }\r\n    \r\n    function distributeReserveFunds() internal {\r\n        uint reserveFundsCollector = 0;\r\n        for(uint index = 0; index < investors.length; index++){\r\n           address depositor = investors[index];\r\n           // user exists but have not withdrawal amount\r\n           if(userDeposit[depositor] != 0 && persentWithdraw[depositor] == 0){\r\n               reserveFundsCollector++;\r\n           }\r\n        }\r\n        \r\n        for(index = 0; index < investors.length; index++){\r\n           depositor = investors[index];\r\n           uint eachInvestorsReservedPortion = countOfReserves.div(reserveFundsCollector);\r\n           // user exists but have not withdrawal amount\r\n           if(userDeposit[depositor] != 0 && persentWithdraw[depositor] == 0){\r\n               depositor.transfer(eachInvestorsReservedPortion);\r\n           }\r\n        }\r\n        \r\n        if(address(this).balance > 0){\r\n            charityFund.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    //calculation of the current interest rate on the deposit\r\n    function persentRate() public view returns(uint) {\r\n        //get contract balance\r\n        uint balance = address(this).balance;\r\n        //calculate persent rate\r\n        if (balance < stepLow) {\r\n            return (startPercent);\r\n        }\r\n        if (balance >= stepLow && balance < stepMiddle) {\r\n            return (lowPersent);\r\n        }\r\n        if (balance >= stepMiddle && balance < stepHigh) {\r\n            return (middlePersent);\r\n        }\r\n        if (balance >= stepHigh) {\r\n            return (highPersent);\r\n        }\r\n    }\r\n\r\n    //refund of the amount available for withdrawal on deposit\r\n    function payoutAmount() public view returns(uint) {\r\n        uint persent = persentRate();\r\n        uint rate = userDeposit[msg.sender].mul(persent).div(100000);\r\n        uint interestRate = now.sub(userTime[msg.sender]).div(chargingTime);\r\n        uint withdrawalAmount = rate.mul(interestRate);\r\n        return (withdrawalAmount);\r\n    }\r\n\r\n    //make a contribution to the system\r\n    function makeDeposit() private {\r\n        if (msg.value > 0) {\r\n            require(userDeposit[msg.sender] == 0, \"Deposit already exists\");\r\n            require (msg.value == 1 ether, \"investment should be more or less than 1 ether\"); // 1 eth investment\r\n                if (userDeposit[msg.sender] == 0) {\r\n                    countOfInvestors += 1;\r\n                }\r\n                if (userDeposit[msg.sender] > 0 && now > userTime[msg.sender].add(chargingTime)) {\r\n                    collectPercent();\r\n                }\r\n                userDeposit[msg.sender] = userDeposit[msg.sender].add(msg.value);\r\n                userTime[msg.sender] = now;\r\n                investors.push(msg.sender);\r\n                //sending money for advertising\r\n                projectFund.transfer(msg.value.mul(projectPercent).div(100));\r\n                //sending money to charity\r\n                uint charityMoney = msg.value.mul(charityPercent).div(100);\r\n                countOfCharity+=charityMoney;\r\n                charityFund.transfer(charityMoney);\r\n                //sending money for reserves\r\n                uint reserveMoney = msg.value.mul(reservePercent).div(100);\r\n                countOfReserves += reserveMoney;\r\n                // reserveFund.transfer(reserveMoney);\r\n            // }\r\n        } else {\r\n            checkContractBalance();\r\n            collectPercent();\r\n        }\r\n    }\r\n\r\n    //return of deposit balance\r\n    function returnDeposit() isIssetUser private {\r\n        //userDeposit-persentWithdraw-(userDeposit*(8+1+1)/100)\r\n        uint withdrawalAmount = userDeposit[msg.sender].sub(persentWithdraw[msg.sender]).sub(userDeposit[msg.sender].mul(projectPercent.add(charityPercent).add(reservePercent)).div(100));\r\n        //check that the user's balance is greater than the interest paid\r\n        require(userDeposit[msg.sender] > withdrawalAmount, 'You have already repaid your deposit');\r\n        //delete user record\r\n        userDeposit[msg.sender] = 0;\r\n        userTime[msg.sender] = 0;\r\n        persentWithdraw[msg.sender] = 0;\r\n        msg.sender.transfer(withdrawalAmount);\r\n    }\r\n\r\n    function() external payable {\r\n        //refund of remaining funds when transferring to a contract 0.00001001 ether\r\n        if (msg.value == 0.00001001 ether) {\r\n            returnDeposit();\r\n        } else {\r\n            makeDeposit();\r\n        }\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lowPersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepHigh\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chargingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepLow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfCharity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepMiddle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfReserves\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highPersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"persentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"middlePersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"persentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"oneplus1","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://75b28a3c38dd72c7094f529d3f2cf75efe8b26f4a75cc1c09ac59b8efa548030"}]}