{"status":"1","message":"OK","result":[{"SourceCode":"// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract AmmuNationStore is Claimable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    GTAInterface public token;\r\n\r\n    uint256 private tokenSellPrice; //wei\r\n    uint256 private tokenBuyPrice; //wei\r\n    uint256 public buyDiscount; //%\r\n\r\n    event Buy(address buyer, uint256 amount, uint256 payed);\r\n    event Robbery(address robber);\r\n\r\n    constructor (address _tokenAddress) public {\r\n        token = GTAInterface(_tokenAddress);\r\n    }\r\n\r\n    /** Owner's operations to fill and empty the stock */\r\n\r\n    // Important! remember to call GoldenThalerToken(address).approve(this, amount)\r\n    // or this contract will not be able to do the transfer on your behalf.\r\n    function depositGTA(uint256 amount) onlyOwner public {\r\n        require(token.transferFrom(msg.sender, this, amount), \"Insufficient funds\");\r\n    }\r\n\r\n    function withdrawGTA(uint256 amount) onlyOwner public {\r\n        require(token.transfer(msg.sender, amount), \"Amount exceeds the available balance\");\r\n    }\r\n\r\n    function robCashier() onlyOwner public {\r\n        msg.sender.transfer(address(this).balance);\r\n        emit Robbery(msg.sender);\r\n    }\r\n\r\n    /** */\r\n\r\n    /**\r\n   * @dev Set the prices in wei for 1 GTA\r\n   * @param _newSellPrice The price people can sell GTA for\r\n   * @param _newBuyPrice The price people can buy GTA for\r\n   */\r\n    function setTokenPrices(uint256 _newSellPrice, uint256 _newBuyPrice) onlyOwner public {\r\n        tokenSellPrice = _newSellPrice;\r\n        tokenBuyPrice = _newBuyPrice;\r\n    }\r\n\r\n\r\n    function buy() payable public returns (uint256){\r\n        //note: the price of 1 GTA is in wei, but the token transfer expects the amount in 'token wei'\r\n        //so we're missing 10*18\r\n        uint256 value = msg.value.mul(1 ether);\r\n        uint256 _buyPrice = tokenBuyPrice;\r\n        if (buyDiscount > 0) {\r\n            //happy discount!\r\n            _buyPrice = _buyPrice.sub(_buyPrice.mul(buyDiscount).div(100));\r\n        }\r\n        uint256 amount = value.div(_buyPrice);\r\n        require(token.balanceOf(this) >= amount, \"Sold out\");\r\n        require(token.transfer(msg.sender, amount), \"Couldn't transfer token\");\r\n        emit Buy(msg.sender, amount, msg.value);\r\n        return amount;\r\n    }\r\n\r\n    // Important! remember to call GoldenThalerToken(address).approve(this, amount)\r\n    // or this contract will not be able to do the transfer on your behalf.\r\n    //TODO No sell at this moment\r\n    /*function sell(uint256 amount) public returns (uint256){\r\n        require(token.balanceOf(msg.sender) >= amount, \"Insufficient funds\");\r\n        require(token.transferFrom(msg.sender, this, amount), \"Couldn't transfer token\");\r\n        uint256 revenue = amount.mul(tokenSellPrice).div(1 ether);\r\n        msg.sender.transfer(revenue);\r\n        return revenue;\r\n    }*/\r\n\r\n    function applyDiscount(uint256 discount) onlyOwner public {\r\n        buyDiscount = discount;\r\n    }\r\n\r\n    function getTokenBuyPrice() public view returns (uint256) {\r\n        uint256 _buyPrice = tokenBuyPrice;\r\n        if (buyDiscount > 0) {\r\n            _buyPrice = _buyPrice.sub(_buyPrice.mul(buyDiscount).div(100));\r\n        }\r\n        return _buyPrice;\r\n    }\r\n\r\n    function getTokenSellPrice() public view returns (uint256) {\r\n        return tokenSellPrice;\r\n    }\r\n}\r\n\r\n/**\r\n * @title GTA contract interface\r\n */\r\ninterface GTAInterface {\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newSellPrice\",\"type\":\"uint256\"},{\"name\":\"_newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyDiscount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGTA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositGTA\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"robCashier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenSellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"applyDiscount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"payed\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"robber\",\"type\":\"address\"}],\"name\":\"Robbery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AmmuNationStore","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000ef26c2766972cbac10575aa85c0ab0691b967d20","Library":"","SwarmSource":"bzzr://1edcc5453441700f85a83f0bb1f5471e4a91c83c31440a94221c0068e621b0d0"}]}