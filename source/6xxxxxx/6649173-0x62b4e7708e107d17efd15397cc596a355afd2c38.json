{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n \r\n/**\r\n * @title ERC20 interface + Mint function\r\n * \r\n */\r\ncontract ERC20 {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  function mint(address _to, uint256 _amount) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n \r\n/**\r\n * @title OwnableWithAdmin \r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract OwnableWithAdmin {\r\n  address public owner;\r\n  address public adminOwner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    adminOwner = msg.sender;\r\n  }\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the admin.\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == adminOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner or admin.\r\n   */\r\n  modifier onlyOwnerOrAdmin() {\r\n    require(msg.sender == adminOwner || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current adminOwner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferAdminOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(adminOwner, newOwner);\r\n    adminOwner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n \r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function uint2str(uint i) internal pure returns (string){\r\n      if (i == 0) return \"0\";\r\n      uint j = i;\r\n      uint length;\r\n      while (j != 0){\r\n          length++;\r\n          j /= 10;\r\n      }\r\n      bytes memory bstr = new bytes(length);\r\n      uint k = length - 1;\r\n      while (i != 0){\r\n          bstr[k--] = byte(48 + i % 10);\r\n          i /= 10;\r\n      }\r\n      return string(bstr);\r\n  }\r\n \r\n  \r\n}\r\n\r\n \r\n/**\r\n * @title Crowdsale\r\n * Contract is payable.\r\n * Direct transfer of tokens with no allocation.\r\n *\r\n *\r\n */\r\ncontract Crowdsale is OwnableWithAdmin {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 private constant DECIMALFACTOR = 10**uint256(18);\r\n\r\n  event FundTransfer(address backer, uint256 amount, bool isContribution);\r\n  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount  );\r\n   \r\n  //Is active\r\n  bool internal crowdsaleActive = true;\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // How many weis one token costs \r\n  uint256 public rate;\r\n\r\n  // Minimum weis one token costs \r\n  uint256 public minRate; \r\n\r\n  // Minimum buy in weis \r\n  uint256 public minWeiAmount = 100000000000000000; \r\n\r\n  // Amount of tokens Raised\r\n  uint256 public tokensTotal = 0;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  // Max token amount\r\n  uint256 public hardCap = 0;\r\n\r\n  \r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n  \r\n  //Whitelist\r\n  mapping(address => bool) public whitelist;\r\n  \r\n \r\n  constructor(uint256 _startTime, uint256 _endTime, address _wallet, ERC20 _token) public {\r\n     \r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n     \r\n\r\n    startTime   = _startTime;\r\n    endTime     = _endTime;\r\n  \r\n    wallet = _wallet;\r\n    token = _token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () public payable  {\r\n\r\n    //Check if msg sender value is more then 0\r\n    require( msg.value > 0 );\r\n\r\n    //Validate crowdSale\r\n    require(isCrowdsaleActive());\r\n\r\n    //Validate whitelisted\r\n    require(isWhitelisted(msg.sender));\r\n\r\n    // wei sent\r\n    uint256 _weiAmount = msg.value;\r\n\r\n    // Minimum buy in weis \r\n    require(_weiAmount>minWeiAmount);\r\n\r\n    // calculate token amount to be created after rate update\r\n    uint256 _tokenAmount = _calculateTokens(_weiAmount);\r\n\r\n    //Check hardCap \r\n    require(_validateHardCap(_tokenAmount));\r\n\r\n    //Mint tokens and transfer tokens to buyer\r\n    require(token.mint(msg.sender, _tokenAmount));\r\n\r\n    //Update state\r\n    tokensTotal = tokensTotal.add(_tokenAmount);\r\n\r\n    //Update state\r\n    weiRaised = weiRaised.add(_weiAmount);\r\n\r\n    //Funds log function\r\n    emit TokenPurchase(msg.sender, _tokenAmount , _weiAmount);\r\n\r\n    //Transfer funds to wallet\r\n    _forwardFunds();\r\n\r\n \r\n  }\r\n\r\n \r\n  // send ether to the fund collection wallet\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n\r\n  /*\r\n   * @dev fiat and btc transfer\r\n   * The company received FIAT or BTC and admin will mint the \r\n   * amount of tokens directly to the receiving partyâ€™s wallet\r\n   *\r\n  **/\r\n  function fiatTransfer(address _recipient, uint256 _tokenAmount, uint256 _weiAmount) onlyOwnerOrAdmin public{\r\n    \r\n    require(_tokenAmount > 0);      \r\n    require(_recipient != address(0)); \r\n\r\n    //Validate crowdSale\r\n    require(isCrowdsaleActive());\r\n\r\n    //Validate whitelisted\r\n    require(isWhitelisted(_recipient));\r\n\r\n    // Minimum buy in weis \r\n    require(_weiAmount>minWeiAmount); \r\n\r\n    //Check hardCap \r\n    require(_validateHardCap(_tokenAmount));\r\n\r\n    //Mint tokens and transfer tokens to buyer\r\n    require(token.mint(_recipient, _tokenAmount));\r\n\r\n    //Update state\r\n    tokensTotal = tokensTotal.add(_tokenAmount);\r\n\r\n    //Update state\r\n    weiRaised = weiRaised.add(_weiAmount);\r\n\r\n    //Funds log function\r\n    emit TokenPurchase(_recipient, _tokenAmount, _weiAmount);\r\n\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function isCrowdsaleActive() public view returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    return withinPeriod;\r\n  }\r\n\r\n  function _validateHardCap(uint256 _tokenAmount) internal view returns (bool) {\r\n      return tokensTotal.add(_tokenAmount) <= hardCap;\r\n  }\r\n\r\n\r\n  function _calculateTokens(uint256 _wei) internal view returns (uint256) {\r\n    return _wei.mul(DECIMALFACTOR).div(rate);\r\n  }\r\n\r\n \r\n\r\n  /**\r\n   * @dev Update current rate\r\n   * @param _rate How many wei one token costs\r\n   * We need to be able to update the rate as the eth rate changes\r\n   */ \r\n  function setRate(uint256 _rate) onlyOwnerOrAdmin public{\r\n    require(_rate > minRate);\r\n    rate = _rate;\r\n  }\r\n\r\n\r\n  function addToWhitelist(address _buyer) onlyOwnerOrAdmin public{\r\n    require(_buyer != 0x0);     \r\n    whitelist[_buyer] = true;\r\n  }\r\n  \r\n\r\n  function addManyToWhitelist(address[] _beneficiaries) onlyOwnerOrAdmin public{\r\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\r\n      if(_beneficiaries[i] != 0x0){\r\n        whitelist[_beneficiaries[i]] = true;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function removeFromWhitelist(address _buyer) onlyOwnerOrAdmin public{\r\n    whitelist[_buyer] = false;\r\n  }\r\n\r\n\r\n  // @return true if buyer is whitelisted\r\n  function isWhitelisted(address _buyer) public view returns (bool) {\r\n      return whitelist[_buyer];\r\n  }\r\n\r\n\r\n  \r\n\r\n  // Owner can transfer tokens that are sent here by mistake\r\n  function refundTokens(address _recipient, ERC20 _token) public onlyOwner {\r\n    uint256 balance = _token.balanceOf(this);\r\n    require(_token.transfer(_recipient, balance));\r\n  }\r\n\r\n\r\n}\r\n\r\n \r\n/**\r\n * @title BYTMCrowdsale\r\n *  \r\n *\r\n*/\r\ncontract BYTMCrowdsale is Crowdsale {\r\n  constructor(   \r\n    uint256 _startTime, \r\n    uint256 _endTime,  \r\n    address _wallet, \r\n    ERC20 _token\r\n  ) public Crowdsale( _startTime, _endTime,  _wallet, _token) {\r\n\r\n    // Initial rate\r\n    //What one token cost in wei\r\n    rate = 870000000000000;   \r\n\r\n    // Initial minimum rate\r\n    // rate can't be set below this\r\n    // 0.12 euro\r\n    minRate = 670000000000000;  \r\n\r\n    // HardCap 1,000,000,000\r\n    hardCap = 1000000000 * (10**uint256(18)); \r\n\r\n    //min buy amount in wei\r\n    // 100euro\r\n    minWeiAmount = 545000000000000000;\r\n\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsaleActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferAdminOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWeiAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"fiatTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"refundTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiaries\",\"type\":\"address[]\"}],\"name\":\"addManyToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BYTMCrowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005af4c0e0000000000000000000000000000000000000000000000000000000005c5620f0000000000000000000000000ea51f149ede013ed26fd015228eaf9582b4784ca000000000000000000000000bd79bca023a7cc4a92d1db1b57338d5c69ad07db","Library":"","SwarmSource":"bzzr://b16f2692c0d899aaa321b6a389a9feb94df9454cd8d640daf889ec33ee14c844"}]}