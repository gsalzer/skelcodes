{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ContributorPool is Claimable {\r\n    LikeCoin public like = LikeCoin(0x0);\r\n    uint public mintCoolDown = 0;\r\n    uint256 public mintValue = 0;\r\n    uint public nextMintTime = 0;\r\n\r\n    function ContributorPool(address _likeAddr, uint _mintCoolDown, uint256 _mintValue) public {\r\n        require(_mintValue > 0);\r\n        require(_mintCoolDown > 0);\r\n        like = LikeCoin(_likeAddr);\r\n        mintCoolDown = _mintCoolDown;\r\n        mintValue = _mintValue;\r\n    }\r\n\r\n    function mint() onlyOwner public {\r\n        require(now > nextMintTime);\r\n        nextMintTime = now + mintCoolDown;\r\n        like.mintForContributorPool(mintValue);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) onlyOwner public {\r\n        require(_value > 0);\r\n        like.transfer(_to, _value);\r\n    }\r\n}\r\n\r\ncontract HasOperator is Claimable {\r\n    address public operator;\r\n\r\n    function setOperator(address _operator) onlyOwner public {\r\n        operator = _operator;\r\n    }\r\n\r\n    modifier ownerOrOperator {\r\n        require(msg.sender == owner || msg.sender == operator);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract LikeCoin is ERC20, HasOperator {\r\n    using SafeMath for uint256;\r\n\r\n    string constant public name = \"LikeCoin\";\r\n    string constant public symbol = \"LIKE\";\r\n\r\n    // Synchronized to Ether -> Wei ratio, which is important\r\n    uint8 constant public decimals = 18;\r\n\r\n    uint256 public supply = 0;\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n\r\n    address public crowdsaleAddr = 0x0;\r\n    address public contributorPoolAddr = 0x0;\r\n    uint256 public contributorPoolMintQuota = 0;\r\n    address[] public creatorsPoolAddrs;\r\n    mapping(address => bool) isCreatorsPool;\r\n    uint256 public creatorsPoolMintQuota = 0;\r\n    mapping(address => uint256) public lockedBalances;\r\n    uint public unlockTime = 0;\r\n    SignatureChecker public signatureChecker = SignatureChecker(0x0);\r\n    bool public signatureCheckerFreezed = false;\r\n    address public signatureOwner = 0x0;\r\n    bool public allowDelegate = true;\r\n    mapping (address => mapping (uint256 => bool)) public usedNonce;\r\n    mapping (address => bool) public transferAndCallWhitelist;\r\n\r\n    event Lock(address indexed _addr, uint256 _value);\r\n    event SignatureCheckerChanged(address _newSignatureChecker);\r\n\r\n    function LikeCoin(uint256 _initialSupply, address _signatureOwner, address _sigCheckerAddr) public {\r\n        supply = _initialSupply;\r\n        balances[owner] = _initialSupply;\r\n        signatureOwner = _signatureOwner;\r\n        signatureChecker = SignatureChecker(_sigCheckerAddr);\r\n        Transfer(0x0, owner, _initialSupply);\r\n    }\r\n\r\n    function totalSupply() public constant returns (uint256) {\r\n        return supply;\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner] + lockedBalances[_owner];\r\n    }\r\n\r\n    function _tryUnlockBalance(address _from) internal {\r\n        if (unlockTime != 0 && now >= unlockTime && lockedBalances[_from] > 0) {\r\n            balances[_from] = balances[_from].add(lockedBalances[_from]);\r\n            delete lockedBalances[_from];\r\n        }\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool success) {\r\n        _tryUnlockBalance(_from);\r\n        require(_from != 0x0);\r\n        require(_to != 0x0);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        return _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferAndLock(address _to, uint256 _value) public returns (bool success) {\r\n        require(msg.sender != 0x0);\r\n        require(_to != 0x0);\r\n        require(now < unlockTime);\r\n        require(msg.sender == crowdsaleAddr || msg.sender == owner || msg.sender == operator);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        lockedBalances[_to] = lockedBalances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        Lock(_to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function _transferMultiple(address _from, address[] _addrs, uint256[] _values) internal returns (bool success) {\r\n        require(_from != 0x0);\r\n        require(_addrs.length > 0);\r\n        require(_values.length == _addrs.length);\r\n        _tryUnlockBalance(_from);\r\n        uint256 total = 0;\r\n        for (uint i = 0; i < _addrs.length; ++i) {\r\n            address addr = _addrs[i];\r\n            require(addr != 0x0);\r\n            uint256 value = _values[i];\r\n            balances[addr] = balances[addr].add(value);\r\n            total = total.add(value);\r\n            Transfer(_from, addr, value);\r\n        }\r\n        balances[_from] = balances[_from].sub(total);\r\n        return true;\r\n    }\r\n\r\n    function transferMultiple(address[] _addrs, uint256[] _values) public returns (bool success) {\r\n        return _transferMultiple(msg.sender, _addrs, _values);\r\n    }\r\n\r\n    function _isContract(address _addr) internal constant returns (bool) {\r\n        uint256 length;\r\n        assembly {\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length > 0);\r\n    }\r\n\r\n    function _transferAndCall(address _from, address _to, uint256 _value, bytes _data) internal returns (bool success) {\r\n        require(_isContract(_to));\r\n        require(transferAndCallWhitelist[_to]);\r\n        require(_transfer(_from, _to, _value));\r\n        TransferAndCallReceiver(_to).tokenCallback(_from, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    function transferAndCall(address _to, uint256 _value, bytes _data) public returns (bool success) {\r\n        return _transferAndCall(msg.sender, _to, _value, _data);\r\n    }\r\n\r\n    function setSignatureChecker(address _sigCheckerAddr) public {\r\n        require(msg.sender == signatureOwner);\r\n        require(!signatureCheckerFreezed);\r\n        require(signatureChecker != _sigCheckerAddr);\r\n        signatureChecker = SignatureChecker(_sigCheckerAddr);\r\n        SignatureCheckerChanged(_sigCheckerAddr);\r\n    }\r\n\r\n    function freezeSignatureChecker() public {\r\n        require(msg.sender == signatureOwner);\r\n        require(!signatureCheckerFreezed);\r\n        signatureCheckerFreezed = true;\r\n    }\r\n\r\n    modifier isDelegated(address _from, uint256 _maxReward, uint256 _claimedReward, uint256 _nonce) {\r\n        require(allowDelegate);\r\n        require(_from != 0x0);\r\n        require(_claimedReward <= _maxReward);\r\n        require(!usedNonce[_from][_nonce]);\r\n        usedNonce[_from][_nonce] = true;\r\n        require(_transfer(_from, msg.sender, _claimedReward));\r\n        _;\r\n    }\r\n\r\n    function transferDelegated(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _maxReward,\r\n        uint256 _claimedReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) isDelegated(_from, _maxReward, _claimedReward, _nonce) public returns (bool success) {\r\n        require(signatureChecker.checkTransferDelegated(_from, _to, _value, _maxReward, _nonce, _signature));\r\n        return _transfer(_from, _to, _value);\r\n    }\r\n\r\n    function transferAndCallDelegated(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data,\r\n        uint256 _maxReward,\r\n        uint256 _claimedReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) isDelegated(_from, _maxReward, _claimedReward, _nonce) public returns (bool success) {\r\n        require(signatureChecker.checkTransferAndCallDelegated(_from, _to, _value, _data, _maxReward, _nonce, _signature));\r\n        return _transferAndCall(_from, _to, _value, _data);\r\n    }\r\n\r\n    function transferMultipleDelegated(\r\n        address _from,\r\n        address[] _addrs,\r\n        uint256[] _values,\r\n        uint256 _maxReward,\r\n        uint256 _claimedReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) isDelegated(_from, _maxReward, _claimedReward, _nonce) public returns (bool success) {\r\n        require(signatureChecker.checkTransferMultipleDelegated(_from, _addrs, _values, _maxReward, _nonce, _signature));\r\n        return _transferMultiple(_from, _addrs, _values);\r\n    }\r\n\r\n    function switchDelegate(bool _allowed) ownerOrOperator public {\r\n        require(allowDelegate != _allowed);\r\n        allowDelegate = _allowed;\r\n    }\r\n\r\n    function addTransferAndCallWhitelist(address _contract) ownerOrOperator public {\r\n        require(_isContract(_contract));\r\n        require(!transferAndCallWhitelist[_contract]);\r\n        transferAndCallWhitelist[_contract] = true;\r\n    }\r\n\r\n    function removeTransferAndCallWhitelist(address _contract) ownerOrOperator public {\r\n        require(transferAndCallWhitelist[_contract]);\r\n        delete transferAndCallWhitelist[_contract];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function burn(uint256 _value) public {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        supply = supply.sub(_value);\r\n        Transfer(msg.sender, 0x0, _value);\r\n    }\r\n\r\n    function registerCrowdsales(address _crowdsaleAddr, uint256 _value, uint256 _privateFundUnlockTime) onlyOwner public {\r\n        require(crowdsaleAddr == 0x0);\r\n        require(_crowdsaleAddr != 0x0);\r\n        require(_isContract(_crowdsaleAddr));\r\n        require(_privateFundUnlockTime > now);\r\n        require(_value != 0);\r\n        unlockTime = _privateFundUnlockTime;\r\n        crowdsaleAddr = _crowdsaleAddr;\r\n        supply = supply.add(_value);\r\n        balances[_crowdsaleAddr] = balances[_crowdsaleAddr].add(_value);\r\n        Transfer(0x0, crowdsaleAddr, _value);\r\n    }\r\n\r\n    function registerContributorPool(address _contributorPoolAddr, uint256 _mintLimit) onlyOwner public {\r\n        require(contributorPoolAddr == 0x0);\r\n        require(_contributorPoolAddr != 0x0);\r\n        require(_isContract(_contributorPoolAddr));\r\n        require(_mintLimit != 0);\r\n        contributorPoolAddr = _contributorPoolAddr;\r\n        contributorPoolMintQuota = _mintLimit;\r\n    }\r\n\r\n    function mintForContributorPool(uint256 _value) public {\r\n        require(msg.sender == contributorPoolAddr);\r\n        require(_value != 0);\r\n        contributorPoolMintQuota = contributorPoolMintQuota.sub(_value);\r\n        supply = supply.add(_value);\r\n        balances[msg.sender] = balances[msg.sender].add(_value);\r\n        Transfer(0x0, msg.sender, _value);\r\n    }\r\n\r\n    function registerCreatorsPools(address[] _poolAddrs, uint256 _mintLimit) onlyOwner public {\r\n        require(creatorsPoolAddrs.length == 0);\r\n        require(_poolAddrs.length > 0);\r\n        require(_mintLimit > 0);\r\n        for (uint i = 0; i < _poolAddrs.length; ++i) {\r\n            require(_isContract(_poolAddrs[i]));\r\n            creatorsPoolAddrs.push(_poolAddrs[i]);\r\n            isCreatorsPool[_poolAddrs[i]] = true;\r\n        }\r\n        creatorsPoolMintQuota = _mintLimit;\r\n    }\r\n\r\n    function mintForCreatorsPool(uint256 _value) public {\r\n        require(isCreatorsPool[msg.sender]);\r\n        require(_value != 0);\r\n        creatorsPoolMintQuota = creatorsPoolMintQuota.sub(_value);\r\n        supply = supply.add(_value);\r\n        balances[msg.sender] = balances[msg.sender].add(_value);\r\n        Transfer(0x0, msg.sender, _value);\r\n    }\r\n}\r\n\r\ncontract SignatureChecker {\r\n    function checkTransferDelegated(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _maxReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) public constant returns (bool);\r\n\r\n    function checkTransferAndCallDelegated(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes _data,\r\n        uint256 _maxReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) public constant returns (bool);\r\n\r\n    function checkTransferMultipleDelegated(\r\n        address _from,\r\n        address[] _addrs,\r\n        uint256[] _values,\r\n        uint256 _maxReward,\r\n        uint256 _nonce,\r\n        bytes _signature\r\n    ) public constant returns (bool);\r\n}\r\n\r\ncontract TransferAndCallReceiver {\r\n    function tokenCallback(address _from, uint256 _value, bytes _data) public;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintCoolDown\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextMintTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"like\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_likeAddr\",\"type\":\"address\"},{\"name\":\"_mintCoolDown\",\"type\":\"uint256\"},{\"name\":\"_mintValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ContributorPool","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000002f61fd266da6e8b102d4121f5ce7b992640cf98000000000000000000000000000000000000000000000000000000000076a7000000000000000000000000000000000000000000000a56fa5b99019a5c800000","Library":"","SwarmSource":"bzzr://1c745e10048fc1aeb8c3ff4bac675330bfa8f028d1f0a0433cc2090a629d780c"}]}