{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25; \r\n\r\n\r\n\r\ncontract EtherGarden{\r\n\r\n\tmapping (uint256 => uint256) public VegetablesTradeBalance;\r\n \tmapping (address => mapping (uint256 => uint256)) public OwnerVegetableStartGrowing;\r\n \tmapping (address => mapping (uint256 => uint256)) public OwnerVegetableFieldSize;\r\n\tmapping (address => address) public Referrals;\r\n\r\n\tuint256 VegetableCount=4;\r\n\tuint256 minimum=0.0001 ether;\r\n\tuint256 growingSpeed=86400; //1 day\r\n\tuint256 public FreeFieldSize=50;\r\n\r\n\tbool public initialized=false;\r\n\taddress public coOwner;\r\n\t\r\n\t\r\n    /**\r\n     * @dev Ð¡onstructor Sets the original roles of the contract \r\n     */\r\n     \r\n    constructor() public {\r\n        coOwner=msg.sender;\r\n    }\r\n\t\r\n    /**\r\n     * @dev Modifiers\r\n     */\t\r\n\t \r\n    modifier onlyOwner() {\r\n        require(msg.sender == coOwner);\r\n        _;\r\n    }\r\n    modifier isInitialized() {\r\n        require(initialized);\r\n        _;\r\n    }\t\r\n\r\n    /**\r\n     * @dev Market functions\r\n     */\t\t\r\n\r\n    function sellVegetables(uint256 _VegetableId) public isInitialized {\r\n        require(_VegetableId < VegetableCount);\r\n\t\t\r\n\t\tuint256 value=vegetablesValue(_VegetableId);\r\n        if (value>0) {\r\n\t\t\tuint256 price=SafeMath.mul(vegetablePrice(_VegetableId),value);\r\n\t\t\tuint256 fee=devFee(price);\r\n\t\t\t\r\n\t\t\tOwnerVegetableStartGrowing[msg.sender][_VegetableId]=now;\r\n\t\t\tVegetablesTradeBalance[_VegetableId]=SafeMath.add(VegetablesTradeBalance[_VegetableId],value);\r\n\t\t\t\r\n\t\t\tcoOwner.transfer(fee);\r\n\t\t\tmsg.sender.transfer(SafeMath.sub(price,fee));\r\n\t\t}\r\n    }\t \r\n\t\r\n    function buyField(uint256 _VegetableId, address _referral) public payable isInitialized {\r\n        require(_VegetableId < VegetableCount);\r\n\t\trequire(msg.value > minimum);\r\n\t\t\r\n\t\tuint256 acres=SafeMath.div(msg.value,fieldPrice(msg.value));\r\n        \r\n\t\tif (OwnerVegetableStartGrowing[msg.sender][_VegetableId]>0)\r\n\t\t\tsellVegetables(_VegetableId);\r\n\t\t\r\n\t\tOwnerVegetableStartGrowing[msg.sender][_VegetableId]=now;\r\n\t\tOwnerVegetableFieldSize[msg.sender][_VegetableId]=SafeMath.add(OwnerVegetableFieldSize[msg.sender][_VegetableId],acres);\r\n\t\tVegetablesTradeBalance[_VegetableId]=SafeMath.add(VegetablesTradeBalance[_VegetableId],acres);\r\n\t\t\r\n        uint256 fee=devFee(msg.value);\r\n\t\tcoOwner.transfer(fee);\r\n\t\t\r\n\t\tif (address(_referral)>0 && address(_referral)!=msg.sender && Referrals[msg.sender]==address(0)) {\r\n\t\t\tReferrals[msg.sender]=_referral;\r\n\t\t}\r\n\t\tif (Referrals[msg.sender]!=address(0)) {\r\n\t\t    address refAddr=Referrals[msg.sender];\r\n\t\t\trefAddr.transfer(fee);\r\n\t\t}\r\n\t\t\r\n    }\r\n\t \r\n\tfunction reInvest(uint256 _VegetableId) public isInitialized {\r\n\t\trequire(_VegetableId < VegetableCount);\r\n\t\tuint256 value=vegetablesValue(_VegetableId);\r\n\t\trequire(value>0);\r\n\t\t\r\n\t\tOwnerVegetableFieldSize[msg.sender][_VegetableId]=SafeMath.add(OwnerVegetableFieldSize[msg.sender][_VegetableId],value);\r\n\t\tOwnerVegetableStartGrowing[msg.sender][_VegetableId]=now;\r\n\t}\r\n\t\r\n    function getFreeField(uint256 _VegetableId) public isInitialized {\r\n\t\trequire(OwnerVegetableFieldSize[msg.sender][_VegetableId]==0);\r\n\t\tOwnerVegetableFieldSize[msg.sender][_VegetableId]=FreeFieldSize;\r\n\t\tOwnerVegetableStartGrowing[msg.sender][_VegetableId]=now;\r\n\t\t\r\n    }\r\n\t\r\n    function initMarket(uint256 _init_value) public payable onlyOwner{\r\n        require(!initialized);\r\n        initialized=true;\r\n\r\n\t\tfor (uint256 vegetableId=0; vegetableId<VegetableCount; vegetableId++)\r\n\t\t\tVegetablesTradeBalance[vegetableId]=_init_value;\r\n    }\t\r\n\t\r\n    /**\r\n     * @dev Views\r\n     */\t\t\r\n\t \r\n    function vegetablePrice(uint256 _VegetableId) public view returns(uint256){\r\n\t\treturn SafeMath.div(SafeMath.div(address(this).balance,VegetableCount),VegetablesTradeBalance[_VegetableId]);\r\n    }\r\n\r\n    function vegetablesValue(uint256 _VegetableId) public view returns(uint256){\r\n\t\t//1 acre gives 1 vegetable per day\r\n\t\treturn SafeMath.div(SafeMath.mul(OwnerVegetableFieldSize[msg.sender][_VegetableId], SafeMath.sub(now,OwnerVegetableStartGrowing[msg.sender][_VegetableId])),growingSpeed);\t\t\r\n    }\t\r\n\t\r\n    function fieldPrice(uint256 subValue) public view returns(uint256){\r\n\t    uint256 CommonTradeBalance;\r\n\t\t\r\n\t\tfor (uint256 vegetableId=0; vegetableId<VegetableCount; vegetableId++)\r\n\t\t\tCommonTradeBalance=SafeMath.add(CommonTradeBalance,VegetablesTradeBalance[vegetableId]);\r\n\t\t\r\n\t\treturn SafeMath.div(SafeMath.sub(address(this).balance,subValue), CommonTradeBalance);\r\n    }\r\n\t\r\n\tfunction devFee(uint256 _amount) internal pure returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(_amount,4),100);\r\n    }\r\n\t\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_VegetableId\",\"type\":\"uint256\"}],\"name\":\"reInvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"OwnerVegetableFieldSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_VegetableId\",\"type\":\"uint256\"},{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"buyField\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_VegetableId\",\"type\":\"uint256\"}],\"name\":\"vegetablePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_VegetableId\",\"type\":\"uint256\"}],\"name\":\"sellVegetables\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FreeFieldSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_VegetableId\",\"type\":\"uint256\"}],\"name\":\"vegetablesValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subValue\",\"type\":\"uint256\"}],\"name\":\"fieldPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"coOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"OwnerVegetableStartGrowing\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_init_value\",\"type\":\"uint256\"}],\"name\":\"initMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_VegetableId\",\"type\":\"uint256\"}],\"name\":\"getFreeField\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"VegetablesTradeBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"EtherGarden","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://941fe59b3019888a543807dbf95a86f1dfe8675acb88da0f731e38f1b2eb4440"}]}