{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract ERC20 is IERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(value <= _allowed[from][msg.sender]);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n    _transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseAllowance(\r\n    address spender,\r\n    uint256 addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed_[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender,\r\n    uint256 subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(spender != address(0));\r\n\r\n    _allowed[msg.sender][spender] = (\r\n      _allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified addresses\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    require(value <= _balances[from]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n    _balances[to] = _balances[to].add(value);\r\n    emit Transfer(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that mints an amount of the token and assigns it to\r\n   * an account. This encapsulates the modification of balances such that the\r\n   * proper events are emitted.\r\n   * @param account The account that will receive the created tokens.\r\n   * @param value The amount that will be created.\r\n   */\r\n  function _mint(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[account] = _balances[account].add(value);\r\n    emit Transfer(address(0), account, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burn(address account, uint256 value) internal {\r\n    require(account != 0);\r\n    require(value <= _balances[account]);\r\n\r\n    _totalSupply = _totalSupply.sub(value);\r\n    _balances[account] = _balances[account].sub(value);\r\n    emit Transfer(account, address(0), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function that burns an amount of the token of a given\r\n   * account, deducting from the sender's allowance for said account. Uses the\r\n   * internal burn function.\r\n   * @param account The account whose tokens will be burnt.\r\n   * @param value The amount that will be burnt.\r\n   */\r\n  function _burnFrom(address account, uint256 value) internal {\r\n    require(value <= _allowed[account][msg.sender]);\r\n\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n      value);\r\n    _burn(account, value);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string name, string symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  /**\r\n   * @return the name of the token.\r\n   */\r\n  function name() public view returns(string) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @return the symbol of the token.\r\n   */\r\n  function symbol() public view returns(string) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @return the number of decimals of the token.\r\n   */\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\r\n\r\ncontract MinterRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event MinterAdded(address indexed account);\r\n  event MinterRemoved(address indexed account);\r\n\r\n  Roles.Role private minters;\r\n\r\n  constructor() internal {\r\n    _addMinter(msg.sender);\r\n  }\r\n\r\n  modifier onlyMinter() {\r\n    require(isMinter(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isMinter(address account) public view returns (bool) {\r\n    return minters.has(account);\r\n  }\r\n\r\n  function addMinter(address account) public onlyMinter {\r\n    _addMinter(account);\r\n  }\r\n\r\n  function renounceMinter() public {\r\n    _removeMinter(msg.sender);\r\n  }\r\n\r\n  function _addMinter(address account) internal {\r\n    minters.add(account);\r\n    emit MinterAdded(account);\r\n  }\r\n\r\n  function _removeMinter(address account) internal {\r\n    minters.remove(account);\r\n    emit MinterRemoved(account);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\r\n\r\n/**\r\n * @title ERC20Mintable\r\n * @dev ERC20 minting logic\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param to The address that will receive the minted tokens.\r\n   * @param value The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address to,\r\n    uint256 value\r\n  )\r\n    public\r\n    onlyMinter\r\n    returns (bool)\r\n  {\r\n    _mint(to, value);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/KDO.sol\r\n\r\ncontract KDO is Ownable, ERC20Detailed, ERC20Mintable {\r\n  struct Ticket {\r\n    // Type of the ticket\r\n    string tType;\r\n\r\n    // Creation date and expiration date\r\n    uint createdAt;\r\n    uint expireAt;\r\n\r\n    address contractor;\r\n\r\n    // The ticket has published a review\r\n    bool hasReviewed;\r\n  }\r\n\r\n  // A contractor is someone that will be credited by tickets (clients)\r\n  struct Contractor {\r\n    // Its reviews\r\n    mapping (uint => uint) reviews;\r\n\r\n    // Total of tickets\r\n    uint256 nbCredittedTickets;\r\n\r\n    // Total of debitted tokens\r\n    uint256 debittedBalance;\r\n  }\r\n\r\n  // Commission regarding the review average, the index is about the rating value\r\n  // the value is the commission in %\r\n  uint8[5] public commissions;\r\n\r\n  mapping (address => Ticket) public tickets;\r\n\r\n  // A contractor is a person who can consume ticketTypes and be credited for\r\n  mapping (address => Contractor) public contractors;\r\n\r\n  event CreditEvt(address ticket, address contractor, string tType, uint256 date);\r\n  event DebitEvt(address contractor, uint256 amount, uint256 commission, uint256 date);\r\n  event ReviewEvt(address reviewer, address contractor, uint rate, uint256 date);\r\n  event CommissionsChangeEvt(uint8[5] commissions, uint256 date);\r\n\r\n  mapping (uint256 => string) public ticketTypes;\r\n\r\n  // Minimum base value for tickets 150000 Gwei\r\n  uint256 constant public MIN_TICKET_BASE_VALUE = 150000000000000;\r\n\r\n  // Min and Max commission in %\r\n  uint256 constant public MIN_COMMISSION = 8;\r\n  uint256 constant public MAX_COMMISSION = 30;\r\n\r\n  // Value to transfer to tickets when allocated\r\n  uint256 public ticketBaseValue;\r\n\r\n  // .0% of 10e18 (1 = 0.1%, 10 = 1%)\r\n  uint256 public ticketCostBase;\r\n\r\n  address private _businessOwner;\r\n\r\n  constructor(uint8[5] _commissions, address __businessOwner)\r\n    ERC20Detailed(\"KDO Coin\", \"KDO\", 0)\r\n    public\r\n  {\r\n    ticketBaseValue = MIN_TICKET_BASE_VALUE;\r\n    ticketCostBase = 3;\r\n\r\n    updateCommissions(_commissions);\r\n\r\n    _businessOwner = __businessOwner;\r\n  }\r\n\r\n  // Only listed tickets\r\n  modifier onlyExistingTicketAmount(uint256 _amount) {\r\n    require(bytes(ticketTypes[_amount]).length > 0, '{error: UNKNOWN_TICKET}');\r\n    _;\r\n  }\r\n\r\n  // Update the ticket base cost for following market value in case of crash or\r\n  // pump\r\n  // @param _value new ticket base cost\r\n  function updateTicketCostBase(uint256 _value) public\r\n    onlyOwner()\r\n  {\r\n    require(_value > 0 && _value <= 500, '{error: BAD_VALUE, message: \"Should be > 0 and <= 500\"}');\r\n    ticketCostBase = _value;\r\n  }\r\n\r\n  // Update the ticket base value\r\n  // a ticket value is the amount of ether allowed to the ticket in order to\r\n  // be used\r\n  // @param _value is the base value change, in wei\r\n  function updateTicketBaseValue(uint256 _value) public\r\n    onlyOwner()\r\n  {\r\n    // Cant put a value below the minimal value\r\n    require(_value >= MIN_TICKET_BASE_VALUE, '{error: BAD_VALUE, message: \"Value too low\"}');\r\n    ticketBaseValue = _value;\r\n  }\r\n\r\n  // Update the commissions\r\n  // @param _c are the new commissions\r\n  function updateCommissions(uint8[5] _c) public\r\n    onlyOwner()\r\n  {\r\n    for (uint i = 0; i <= 4; i++) {\r\n        require(_c[i] <= MAX_COMMISSION && _c[i] >= MIN_COMMISSION, '{error: BAD_VALUE, message: \"A commission it too low or too high\"}');\r\n    }\r\n    commissions = _c;\r\n    emit CommissionsChangeEvt(_c, now);\r\n  }\r\n\r\n  // Add a new ticket type\r\n  // Can update an old ticket type, for instance :\r\n  // ticketTypes[99] = \"bronze\"\r\n  // addTicketType(99, \"wood\")\r\n  // ticketTypes[99] = \"wood\"\r\n  // ticket 99 has been updated from \"bronze\" to \"wood\"\r\n  // @param _amount is the ticket amount to update\r\n  // @param _key is the key to attribute to the amount\r\n  function addTicketType(uint256 _amount, string _key) public\r\n    onlyOwner()\r\n  {\r\n    ticketTypes[_amount] = _key;\r\n  }\r\n\r\n  // Create a ticket using KDO tokens\r\n  // @param _to ticket to create\r\n  // @param _KDOAmount amount to allocate to the ticket\r\n  function allocateNewTicketWithKDO(address _to, uint256 _KDOAmount)\r\n    public\r\n    payable\r\n    onlyExistingTicketAmount(_KDOAmount)\r\n    returns (bool success)\r\n  {\r\n      require(msg.value >= ticketBaseValue, '{error: BAD_VALUE, message: \"Value too low\"}');\r\n\r\n      _to.transfer(ticketBaseValue);\r\n\r\n      super.transfer(_to, _KDOAmount);\r\n\r\n      _createTicket(_to, _KDOAmount);\r\n\r\n      return true;\r\n  }\r\n\r\n  // Allocates a ticket to an address and create tokens (accordingly to the value of the allocated ticket)\r\n  // @param _to ticket to create\r\n  // @param _amount amount to allocate to the ticket\r\n  function allocateNewTicket(address _to, uint256 _amount)\r\n    public\r\n    payable\r\n    onlyExistingTicketAmount(_amount)\r\n    returns (bool success)\r\n  {\r\n    uint256 costInWei = costOfTicket(_amount);\r\n    require(msg.value == costInWei, '{error: BAD_VALUE, message: \"Value should be equal to the cost of the ticket\"}');\r\n\r\n    // Give minimal WEI value to a ticket\r\n    _to.transfer(ticketBaseValue);\r\n\r\n    // Price of the ticket transfered to the business owner address\r\n    _businessOwner.transfer(costInWei - ticketBaseValue);\r\n\r\n    super.mint(_to, _amount);\r\n\r\n    _createTicket(_to, _amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  // Checks if an address can handle the ticket type\r\n  // @param _ticketAddr tocket to check\r\n  function isTicketValid(address _ticketAddr)\r\n    public\r\n    view\r\n    returns (bool valid)\r\n  {\r\n    if (tickets[_ticketAddr].contractor == 0x0 && now < tickets[_ticketAddr].expireAt) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // A ticket credit the contractor balance\r\n  // It triggers Consume event for logs\r\n  // @param _contractor contractor to credit\r\n  // @param _amount amount that will be creditted\r\n  function creditContractor(address _contractor, uint256 amount)\r\n    public\r\n    onlyExistingTicketAmount(amount)\r\n    returns (bool success)\r\n  {\r\n    require(isTicketValid(msg.sender), '{error: INVALID_TICKET}');\r\n\r\n    super.transfer(_contractor, amount);\r\n\r\n    contractors[_contractor].nbCredittedTickets += 1;\r\n\r\n    tickets[msg.sender].contractor = _contractor;\r\n\r\n    emit CreditEvt(msg.sender, _contractor, tickets[msg.sender].tType, now);\r\n\r\n    return true;\r\n  }\r\n\r\n  // Publish a review and rate the ticket's contractor (only consumed tickets can\r\n  // perform this action)\r\n  // @param _reviewRate rating of the review\r\n  function publishReview(uint _reviewRate) public {\r\n    // Only ticket that hasn't published any review and that has been consumed\r\n    require(!tickets[msg.sender].hasReviewed && tickets[msg.sender].contractor != 0x0, '{error: INVALID_TICKET}');\r\n\r\n    // Only between 0 and 5\r\n    require(_reviewRate >= 0 && _reviewRate <= 5, '{error: INVALID_RATE, message: \"A rate should be between 0 and 5 included\"}');\r\n\r\n    // Add the review to the contractor of the ticket\r\n    contractors[tickets[msg.sender].contractor].reviews[_reviewRate] += 1;\r\n\r\n    tickets[msg.sender].hasReviewed = true;\r\n\r\n    emit ReviewEvt(msg.sender, tickets[msg.sender].contractor, _reviewRate, now);\r\n  }\r\n\r\n  // Calculate the average rating of a contractor\r\n  // @param _address contractor address\r\n  function reviewAverageOfContractor(address _address) public view returns (uint avg) {\r\n    // Percentage threshold\r\n    uint decreaseThreshold = 60;\r\n\r\n    // Apply a penalty of -1 for reviews = 0\r\n    int totReviews = int(contractors[_address].reviews[0]) * -1;\r\n\r\n    uint nbReviews = contractors[_address].reviews[0];\r\n\r\n    for (uint i = 1; i <= 5; i++) {\r\n      totReviews += int(contractors[_address].reviews[i] * i);\r\n      nbReviews += contractors[_address].reviews[i];\r\n    }\r\n\r\n    if (nbReviews == 0) {\r\n      return 250;\r\n    }\r\n\r\n    // Too much penalties leads to 0, then force it to be 0, the average\r\n    // can't be negative\r\n    if (totReviews < 0) {\r\n      totReviews = 0;\r\n    }\r\n\r\n    uint percReviewsTickets = (nbReviews * 100 / contractors[_address].nbCredittedTickets);\r\n\r\n    avg = (uint(totReviews) * 100) / nbReviews;\r\n\r\n    if (percReviewsTickets >= decreaseThreshold) {\r\n      return avg;\r\n    }\r\n\r\n    // A rate < 60% on the number of reviews will decrease the rating average of\r\n    // the difference between the threshold and the % of reviews\r\n    // for instance a percent reviews of 50% will decrease the rating average\r\n    // of 10% (60% - 50%)\r\n    // This is to avoid abuse of the system, without this mecanism a contractor\r\n    // could stay with a average of 500 (the max) regardless of the number\r\n    // of ticket he used.\r\n    uint decreasePercent = decreaseThreshold - percReviewsTickets;\r\n\r\n    return avg - (avg / decreasePercent);\r\n  }\r\n\r\n  // Returns the commission for the contractor\r\n  // @param _address contractor address\r\n  function commissionForContractor(address _address) public view returns (uint8 c) {\r\n    return commissionForReviewAverageOf(reviewAverageOfContractor(_address));\r\n  }\r\n\r\n  // Returns the info of a ticket\r\n  // @param _address ticket address\r\n  function infoOfTicket(address _address) public view returns (uint256 balance, string tType, bool isValid, uint createdAt, uint expireAt, address contractor, bool hasReviewed) {\r\n    return (super.balanceOf(_address), tickets[_address].tType, isTicketValid(_address), tickets[_address].createdAt, tickets[_address].expireAt, tickets[_address].contractor, tickets[_address].hasReviewed);\r\n  }\r\n\r\n  // Returns the contractor info\r\n  // @param _address contractor address\r\n  function infoOfContractor(address _address) public view returns(uint256 balance, uint256 debittedBalance, uint256 nbReviews, uint256 nbCredittedTickets, uint256 avg) {\r\n    for (uint i = 0; i <= 5; i++) {\r\n      nbReviews += contractors[_address].reviews[i];\r\n    }\r\n\r\n    return (super.balanceOf(_address), contractors[_address].debittedBalance, nbReviews, contractors[_address].nbCredittedTickets, reviewAverageOfContractor(_address));\r\n  }\r\n\r\n  // Transfers contractors tokens to the owner\r\n  // It triggers Debit event\r\n  // @param _amount amount to debit\r\n  function debit(uint256 _amount) public {\r\n    super.transfer(super.owner(), _amount);\r\n\r\n    emit DebitEvt(msg.sender, _amount, commissionForContractor(msg.sender), now);\r\n  }\r\n\r\n  // Returns the cost of a ticket regarding its amount\r\n  // Returned value is represented in Wei\r\n  // @param _amount amount of the ticket\r\n  function costOfTicket(uint256 _amount) public view returns(uint256 cost) {\r\n    return (_amount * (ticketCostBase * 1000000000000000)) + ticketBaseValue;\r\n  }\r\n\r\n  // Calculate the commission regarding the rating (review average)\r\n  // Example with a commissions = [30, 30, 30, 25, 20]\r\n  // [0,3[ = 30% (DefaultCommission)\r\n  // [3,4[ = 25%\r\n  // [4,5[ = 20%\r\n  // A rating average of 3.8 = 25% of commission\r\n  // @param _avg commission average\r\n  function commissionForReviewAverageOf(uint _avg) public view returns (uint8 c) {\r\n    if (_avg >= 500) {\r\n      return commissions[4];\r\n    }\r\n\r\n    for (uint i = 0; i < 5; i++) {\r\n      if (_avg <= i * 100 || _avg < (i + 1) * 100) {\r\n        return commissions[i];\r\n      }\r\n    }\r\n\r\n    // Default commission when there is something wrong\r\n    return commissions[0];\r\n  }\r\n\r\n  function _createTicket(address _address, uint256 _amount) private {\r\n    tickets[_address] = Ticket({\r\n      tType: ticketTypes[_amount],\r\n      createdAt: now,\r\n      expireAt: now + 2 * 365 days,\r\n      contractor: 0x0,\r\n      hasReviewed: false\r\n    });\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_TICKET_BASE_VALUE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commissions\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"commissionForContractor\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_avg\",\"type\":\"uint256\"}],\"name\":\"commissionForReviewAverageOf\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"reviewAverageOfContractor\",\"outputs\":[{\"name\":\"avg\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"costOfTicket\",\"outputs\":[{\"name\":\"cost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketBaseValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_c\",\"type\":\"uint8[5]\"}],\"name\":\"updateCommissions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"infoOfTicket\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"tType\",\"type\":\"string\"},{\"name\":\"isValid\",\"type\":\"bool\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"expireAt\",\"type\":\"uint256\"},{\"name\":\"contractor\",\"type\":\"address\"},{\"name\":\"hasReviewed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateTicketBaseValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tickets\",\"outputs\":[{\"name\":\"tType\",\"type\":\"string\"},{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"expireAt\",\"type\":\"uint256\"},{\"name\":\"contractor\",\"type\":\"address\"},{\"name\":\"hasReviewed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ticketCostBase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allocateNewTicket\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"addTicketType\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_COMMISSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_KDOAmount\",\"type\":\"uint256\"}],\"name\":\"allocateNewTicketWithKDO\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateTicketCostBase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractors\",\"outputs\":[{\"name\":\"nbCredittedTickets\",\"type\":\"uint256\"},{\"name\":\"debittedBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"debit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_COMMISSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"infoOfContractor\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"debittedBalance\",\"type\":\"uint256\"},{\"name\":\"nbReviews\",\"type\":\"uint256\"},{\"name\":\"nbCredittedTickets\",\"type\":\"uint256\"},{\"name\":\"avg\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ticketAddr\",\"type\":\"address\"}],\"name\":\"isTicketValid\",\"outputs\":[{\"name\":\"valid\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reviewRate\",\"type\":\"uint256\"}],\"name\":\"publishReview\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractor\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"creditContractor\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_commissions\",\"type\":\"uint8[5]\"},{\"name\":\"__businessOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ticket\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"CreditEvt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"commission\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"DebitEvt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"reviewer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"ReviewEvt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"commissions\",\"type\":\"uint8[5]\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"CommissionsChangeEvt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"KDO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000012000000000000000000000000e914b0cbee1c950802c1b7db7b1948d4c0acaab2","Library":"","SwarmSource":"bzzr://296ec62d656f7cb986f5a8ab6ea250bedaabadc18c41552a986ebbcf6cc3d29c"}]}