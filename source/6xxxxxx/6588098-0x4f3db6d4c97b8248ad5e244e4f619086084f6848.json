{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n* It is \"Smart Contract Bank\" smart-contract.\r\n* - You can take profit 4% per day.\r\n* - You can buy insurance and receive part of insurance fund when balance will be lesser then 0.01 ETH.\r\n* - You can increase your percent on 0.5% if you have 10 CBC Token (0x790bFaCaE71576107C068f494c8A6302aea640cb ico.cryptoboss.me)\r\n*    1. To buy CBC Tokens send 0.01 ETH on Sale Token Address 0x369fc7de8aee87a167244eb10b87eb3005780872\r\n*    2. To increase your profit percent if you already have tokens, you should send to SmartContractBank address 0.0001 ETH\r\n* - If your percent balance will be beyond of 200% you will able to take your profit only once time.\r\n* HODL your profit and take more then 200% percents.\r\n* - If balance of contract will be lesser then 0.1 ETH every user able stop contract and start insurance payments.\r\n*\r\n* - Percent of profit depends on balance of contract. Percent chart below:\r\n* - If balance < 100 ETH - 4% per day\r\n* - If balance >= 100 ETH and < 600 - 2% per day\r\n* - If balance >= 600 ETH and < 1000 - 1% per day\r\n* - If balance >= 1000 ETH and < 3000 - 0.9% per day\r\n* - If balance >= 3000 ETH and < 5000 - 0.8% per day\r\n* - If balance >= 5000  - 0.7% per day\r\n* - If balance of contract will be beyond threshold, your payout will be reevaluate depends on currently balance of contract\r\n* -\r\n* - You can calm your profit every 5 minutes\r\n*\r\n* To invest:\r\n* - Send minimum 0.01 ETH to contract address\r\n*\r\n* To calm profit:\r\n* - Send 0 ETH to contract address\r\n*/\r\ncontract SmartContractBank {\r\n    using SafeMath for uint256;\r\n    struct Investor {\r\n        uint256 deposit;\r\n        uint256 paymentTime;\r\n        uint256 withdrawals;\r\n        bool increasedPercent;\r\n        bool insured;\r\n    }\r\n    uint public countOfInvestors;\r\n    mapping (address => Investor) public investors;\r\n\r\n    uint256 public minimum = 0.01 ether;\r\n    uint step = 5 minutes;\r\n    uint ownerPercent = 4;\r\n    uint promotionPercent = 8;\r\n    uint insurancePercent = 2;\r\n    bool public closed = false;\r\n\r\n    address public ownerAddressOne = 0xaB5007407d8A686B9198079816ebBaaa2912ecC1;\r\n    address public ownerAddressTwo = 0x4A5b00cDDAeE928B8De7a7939545f372d6727C06;\r\n    address public promotionAddress = 0x3878E2231f7CA61c0c1D0Aa3e6962d7D23Df1B3b;\r\n    address public insuranceFundAddress;\r\n    address public CBCTokenAddress = 0x790bFaCaE71576107C068f494c8A6302aea640cb;\r\n    address public MainSaleAddress = 0x369fc7de8aee87a167244eb10b87eb3005780872;\r\n\r\n    InsuranceFund IFContract;\r\n    CBCToken CBCTokenContract = CBCToken(CBCTokenAddress);\r\n    MainSale MainSaleContract = MainSale(MainSaleAddress);\r\n    \r\n    event Invest(address investor, uint256 amount);\r\n    event Withdraw(address investor, uint256 amount);\r\n    event UserDelete(address investor);\r\n\r\n    /**\r\n    * @dev Modifier for access from the InsuranceFund\r\n    */\r\n    modifier onlyIF() {\r\n        require(insuranceFundAddress == msg.sender, \"access denied\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev  Setter the InsuranceFund address. Address can be set only once.\r\n    * @param _insuranceFundAddress Address of the InsuranceFund\r\n    */\r\n    function setInsuranceFundAddress(address _insuranceFundAddress) public{\r\n        require(insuranceFundAddress == address(0x0));\r\n        insuranceFundAddress = _insuranceFundAddress;\r\n        IFContract = InsuranceFund(insuranceFundAddress);\r\n    }\r\n\r\n    /**\r\n    * @dev  Set insured from the InsuranceFund.\r\n    * @param _address Investor's address\r\n    * @return Object of investor's information\r\n    */\r\n    function setInsured(address _address) public onlyIF returns(uint256, uint256, bool){\r\n        Investor storage investor = investors[_address];\r\n        investor.insured = true;\r\n        return (investor.deposit, investor.withdrawals, investor.insured);\r\n    }\r\n\r\n    /**\r\n    * @dev  Function for close entrance.\r\n    */\r\n    function closeEntrance() public {\r\n        require(address(this).balance < 0.1 ether && !closed);\r\n        closed = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Get percent depends on balance of contract\r\n    * @return Percent\r\n    */\r\n    function getPhasePercent() view public returns (uint){\r\n        Investor storage investor = investors[msg.sender];\r\n        uint contractBalance = address(this).balance;\r\n        uint percent;\r\n        if (contractBalance < 100 ether) {\r\n            percent = 40;\r\n        }\r\n        if (contractBalance >= 100 ether && contractBalance < 600 ether) {\r\n            percent = 20;\r\n        }\r\n        if (contractBalance >= 600 ether && contractBalance < 1000 ether) {\r\n            percent = 10;\r\n        }\r\n        if (contractBalance >= 1000 ether && contractBalance < 3000 ether) {\r\n            percent = 9;\r\n        }\r\n        if (contractBalance >= 3000 ether && contractBalance < 5000 ether) {\r\n            percent = 8;\r\n        }\r\n        if (contractBalance >= 5000 ether) {\r\n            percent = 7;\r\n        }\r\n\r\n        if (investor.increasedPercent){\r\n            percent = percent.add(5);\r\n        }\r\n\r\n        return percent;\r\n    }\r\n\r\n    /**\r\n    * @dev Allocation budgets\r\n    */\r\n    function allocation() private{\r\n        ownerAddressOne.transfer(msg.value.mul(ownerPercent.div(2)).div(100));\r\n        ownerAddressTwo.transfer(msg.value.mul(ownerPercent.div(2)).div(100));\r\n        promotionAddress.transfer(msg.value.mul(promotionPercent).div(100));\r\n        insuranceFundAddress.transfer(msg.value.mul(insurancePercent).div(100));\r\n    }\r\n\r\n    /**\r\n    * @dev Evaluate current balance\r\n    * @param _address Address of investor\r\n    * @return Payout amount\r\n    */\r\n    function getUserBalance(address _address) view public returns (uint256) {\r\n        Investor storage investor = investors[_address];\r\n        uint percent = getPhasePercent();\r\n        uint256 differentTime = now.sub(investor.paymentTime).div(step);\r\n        uint256 differentPercent = investor.deposit.mul(percent).div(1000);\r\n        uint256 payout = differentPercent.mul(differentTime).div(288);\r\n\r\n        return payout;\r\n    }\r\n\r\n    /**\r\n    * @dev Withdraw profit from contract. Investor will be deleted if he will try withdraw after received x2\r\n    */\r\n    function withdraw() private {\r\n        Investor storage investor = investors[msg.sender];\r\n        uint256 balance = getUserBalance(msg.sender);\r\n        if (investor.deposit > 0 && address(this).balance > balance && balance > 0) {\r\n            uint256 tempWithdrawals = investor.withdrawals;\r\n\r\n            investor.withdrawals = investor.withdrawals.add(balance);\r\n            investor.paymentTime = now;\r\n\r\n            if (investor.withdrawals >= investor.deposit.mul(2)){\r\n                investor.deposit = 0;\r\n                investor.paymentTime = 0;\r\n                investor.withdrawals = 0;\r\n                investor.increasedPercent = false;\r\n                investor.insured = false;\r\n                countOfInvestors--;\r\n                if (investor.insured)\r\n                    IFContract.deleteInsured(msg.sender);\r\n                emit UserDelete(msg.sender);\r\n            } else {\r\n                if (investor.insured && tempWithdrawals < investor.deposit){\r\n                    IFContract.setInfo(msg.sender, investor.deposit, investor.withdrawals);\r\n                }\r\n            }\r\n            msg.sender.transfer(balance);\r\n            emit Withdraw(msg.sender, balance);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Increase percent with CBC Token\r\n    */\r\n    function increasePercent() public {\r\n        Investor storage investor = investors[msg.sender];\r\n        if (CBCTokenContract.balanceOf(msg.sender) >= 10 ether){\r\n            MainSaleContract.authorizedBurnTokens(msg.sender, 10 ether);\r\n            investor.increasedPercent = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev  Payable function for\r\n    * - receive funds (send minimum 0.01 ETH),\r\n    * - increase percent and receive profit (send 0.0001 ETH if you already have CBC Tokens on your address).\r\n    * - calm your profit (send 0 ETH)\r\n    */\r\n    function () external payable {\r\n        require(!closed);\r\n        Investor storage investor = investors[msg.sender];\r\n        if (msg.value >= minimum){\r\n        \r\n            withdraw();\r\n\r\n            if (investor.deposit == 0){\r\n                countOfInvestors++;\r\n            }\r\n\r\n            investor.deposit = investor.deposit.add(msg.value);\r\n            investor.paymentTime = now;\r\n\r\n            if (investor.insured){\r\n                IFContract.setInfo(msg.sender, investor.deposit, investor.withdrawals);\r\n            }\r\n            allocation();\r\n            emit Invest(msg.sender, msg.value);\r\n        } else if (msg.value == 0.0001 ether) {\r\n            increasePercent();\r\n        } else {\r\n            withdraw();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Authorizable\r\n * @dev Allows to authorize access to certain function calls\r\n *\r\n * ABI\r\n * [{\"constant\":true,\"inputs\":[{\"name\":\"authorizerIndex\",\"type\":\"uint256\"}],\"name\":\"getAuthorizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"}]\r\n */\r\ncontract Authorizable {\r\n\r\n    address[] authorizers;\r\n    mapping(address => uint) authorizerIndex;\r\n\r\n    /**\r\n     * @dev Throws if called by any account tat is not authorized.\r\n     */\r\n    modifier onlyAuthorized {\r\n        require(isAuthorized(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Contructor that authorizes the msg.sender.\r\n     */\r\n    function Authorizable() public {\r\n        authorizers.length = 2;\r\n        authorizers[1] = msg.sender;\r\n        authorizerIndex[msg.sender] = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to get a specific authorizer\r\n     * @param authorizerIndex index of the authorizer to be retrieved.\r\n     * @return The address of the authorizer.\r\n     */\r\n    function getAuthorizer(uint authorizerIndex) external constant returns(address) {\r\n        return address(authorizers[authorizerIndex + 1]);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check if an address is authorized\r\n     * @param _addr the address to check if it is authorized.\r\n     * @return boolean flag if address is authorized.\r\n     */\r\n    function isAuthorized(address _addr) public constant returns(bool) {\r\n        return authorizerIndex[_addr] > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to add a new authorizer\r\n     * @param _addr the address to add as a new authorizer.\r\n     */\r\n    function addAuthorized(address _addr) external onlyAuthorized {\r\n        authorizerIndex[_addr] = authorizers.length;\r\n        authorizers.length++;\r\n        authorizers[authorizers.length - 1] = _addr;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ExchangeRate\r\n * @dev Allows updating and retrieveing of Conversion Rates for PAY tokens\r\n *\r\n * ABI\r\n * [{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"updateRates\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"getRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"symbol\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"}]\r\n */\r\ncontract ExchangeRate is Ownable {\r\n\r\n    event RateUpdated(uint timestamp, bytes32 symbol, uint rate);\r\n\r\n    mapping(bytes32 => uint) public rates;\r\n\r\n    /**\r\n     * @dev Allows the current owner to update a single rate.\r\n     * @param _symbol The symbol to be updated.\r\n     * @param _rate the rate for the symbol.\r\n     */\r\n    function updateRate(string _symbol, uint _rate) public onlyOwner {\r\n        rates[keccak256(_symbol)] = _rate;\r\n        RateUpdated(now, keccak256(_symbol), _rate);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to update multiple rates.\r\n     * @param data an array that alternates keccak256 hashes of the symbol and the corresponding rate .\r\n     */\r\n    function updateRates(uint[] data) public onlyOwner {\r\n        require (data.length % 2 <= 0);\r\n        uint i = 0;\r\n        while (i < data.length / 2) {\r\n            bytes32 symbol = bytes32(data[i * 2]);\r\n            uint rate = data[i * 2 + 1];\r\n            rates[symbol] = rate;\r\n            RateUpdated(now, symbol, rate);\r\n            i++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the anyone to read the current rate.\r\n     * @param _symbol the symbol to be retrieved.\r\n     */\r\n    function getRate(string _symbol) public constant returns(uint) {\r\n        return rates[keccak256(_symbol)];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint a, uint b) internal returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function assert(bool assertion) internal {\r\n        require(assertion);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20Basic {\r\n    uint public totalSupply;\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public;\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant returns (uint);\r\n    function transferFrom(address from, address to, uint value);\r\n    function approve(address spender, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) balances;\r\n\r\n    /**\r\n     * @dev Fix for the ERC20 short address attack.\r\n     */\r\n    modifier onlyPayloadSize(uint size) {\r\n        require (size + 4 <= msg.data.length);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implemantation of the basic standart token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\r\n    mapping (address => mapping (address => uint)) allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint the amout of tokens to be transfered\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n        var _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // if (_value > _allowance) throw;\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint _value) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint specifing the amount of tokens still avaible for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint value);\r\n    event MintFinished();\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    bool public mintingFinished = false;\r\n    uint public totalSupply = 0;\r\n\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will recieve the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint _amount) onlyOwner canMint returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(address _who, uint256 _value) onlyOwner public {\r\n        _burn(_who, _value);\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(_who, _value);\r\n        Transfer(_who, address(0), _value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title CBCToken\r\n * @dev The main CBC token contract\r\n *\r\n * ABI\r\n * [{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradingStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]\r\n */\r\ncontract CBCToken is MintableToken {\r\n\r\n    string public name = \"Crypto Boss Coin\";\r\n    string public symbol = \"CBC\";\r\n    uint public decimals = 18;\r\n\r\n    bool public tradingStarted = false;\r\n    /**\r\n     * @dev modifier that throws if trading has not started yet\r\n     */\r\n    modifier hasStartedTrading() {\r\n        require(tradingStarted);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the owner to enable the trading. This can not be undone\r\n     */\r\n    function startTrading() onlyOwner {\r\n        tradingStarted = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to transfer the PAY tokens once trading has started\r\n     * @param _to the recipient address of the tokens.\r\n     * @param _value number of tokens to be transfered.\r\n     */\r\n    function transfer(address _to, uint _value) hasStartedTrading {\r\n        super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows anyone to transfer the CBC tokens once trading has started\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint the amout of tokens to be transfered\r\n    */\r\n    function transferFrom(address _from, address _to, uint _value) hasStartedTrading {\r\n        super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title MainSale\r\n * @dev The main CBC token sale contract\r\n *\r\n * ABI\r\n * [{\"constant\":false,\"inputs\":[{\"name\":\"_multisigVault\",\"type\":\"address\"}],\"name\":\"setMultisigVault\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"authorizerIndex\",\"type\":\"uint256\"}],\"name\":\"getAuthorizer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"altDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"authorizedCreateTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exchangeRate\",\"type\":\"address\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"totalAltDeposits\",\"type\":\"uint256\"}],\"name\":\"setAltDeposit\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":!1,\"inputs\":[{\"name\":\"victim\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":!1,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createTokens\",\"outputs\":[],\"payable\":true,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardcap\",\"type\":\"uint256\"}],\"name\":\"setHardCap\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ether_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exchangerate\",\"type\":\"uint256\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pay_amount\",\"type\":\"uint256\"}],\"name\":\"AuthorizedCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MainSaleClosed\",\"type\":\"event\"}]\r\n */\r\ncontract MainSale is Ownable, Authorizable {\r\n    using SafeMath for uint;\r\n    event TokenSold(address recipient, uint ether_amount, uint pay_amount, uint exchangerate);\r\n    event AuthorizedCreate(address recipient, uint pay_amount);\r\n    event AuthorizedBurn(address receiver, uint value);\r\n    event AuthorizedStartTrading();\r\n    event MainSaleClosed();\r\n    CBCToken public token = new CBCToken();\r\n\r\n    address public multisigVault;\r\n\r\n    uint hardcap = 100000000000000 ether;\r\n    ExchangeRate public exchangeRate;\r\n\r\n    uint public altDeposits = 0;\r\n    uint public start = 1525996800;\r\n\r\n    /**\r\n     * @dev modifier to allow token creation only when the sale IS ON\r\n     */\r\n    modifier saleIsOn() {\r\n        require(now > start && now < start + 28 days);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow token creation only when the hardcap has not been reached\r\n     */\r\n    modifier isUnderHardCap() {\r\n        require(multisigVault.balance + altDeposits <= hardcap);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to create tokens by depositing ether.\r\n     * @param recipient the recipient to receive tokens.\r\n     */\r\n    function createTokens(address recipient) public isUnderHardCap saleIsOn payable {\r\n        uint rate = exchangeRate.getRate(\"ETH\");\r\n        uint tokens = rate.mul(msg.value).div(1 ether);\r\n        token.mint(recipient, tokens);\r\n        require(multisigVault.send(msg.value));\r\n        TokenSold(recipient, msg.value, tokens, rate);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to set the toal alt deposit measured in ETH to make sure the hardcap includes other deposits\r\n     * @param totalAltDeposits total amount ETH equivalent\r\n     */\r\n    function setAltDeposit(uint totalAltDeposits) public onlyOwner {\r\n        altDeposits = totalAltDeposits;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows authorized acces to create tokens. This is used for Bitcoin and ERC20 deposits\r\n     * @param recipient the recipient to receive tokens.\r\n     * @param tokens number of tokens to be created.\r\n     */\r\n    function authorizedCreateTokens(address recipient, uint tokens) public onlyAuthorized {\r\n        token.mint(recipient, tokens);\r\n        AuthorizedCreate(recipient, tokens);\r\n    }\r\n\r\n    function authorizedStartTrading() public onlyAuthorized {\r\n        token.startTrading();\r\n        AuthorizedStartTrading();\r\n    }\r\n\r\n    /**\r\n     * @dev Allows authorized acces to burn tokens.\r\n     * @param receiver the receiver to receive tokens.\r\n     * @param value number of tokens to be created.\r\n     */\r\n    function authorizedBurnTokens(address receiver, uint value) public onlyAuthorized {\r\n        token.burn(receiver, value);\r\n        AuthorizedBurn(receiver, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to set the hardcap.\r\n     * @param _hardcap the new hardcap\r\n     */\r\n    function setHardCap(uint _hardcap) public onlyOwner {\r\n        hardcap = _hardcap;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to set the starting time.\r\n     * @param _start the new _start\r\n     */\r\n    function setStart(uint _start) public onlyOwner {\r\n        start = _start;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to set the multisig contract.\r\n     * @param _multisigVault the multisig contract address\r\n     */\r\n    function setMultisigVault(address _multisigVault) public onlyOwner {\r\n        if (_multisigVault != address(0)) {\r\n            multisigVault = _multisigVault;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to set the exchangerate contract.\r\n     * @param _exchangeRate the exchangerate address\r\n     */\r\n    function setExchangeRate(address _exchangeRate) public onlyOwner {\r\n        exchangeRate = ExchangeRate(_exchangeRate);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to finish the minting. This will create the\r\n     * restricted tokens and then close the minting.\r\n     * Then the ownership of the PAY token contract is transfered\r\n     * to this owner.\r\n     */\r\n    function finishMinting() public onlyOwner {\r\n        uint issuedTokenSupply = token.totalSupply();\r\n        uint restrictedTokens = issuedTokenSupply.mul(49).div(51);\r\n        token.mint(multisigVault, restrictedTokens);\r\n        token.finishMinting();\r\n        token.transferOwnership(owner);\r\n        MainSaleClosed();\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the owner to transfer ERC20 tokens to the multi sig vault\r\n     * @param _token the contract address of the ERC20 contract\r\n     */\r\n    function retrieveTokens(address _token) public onlyOwner {\r\n        ERC20 token = ERC20(_token);\r\n        token.transfer(multisigVault, token.balanceOf(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function which receives ether and created the appropriate number of tokens for the\r\n     * msg.sender.\r\n     */\r\n    function() external payable {\r\n        createTokens(msg.sender);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n* It is insurance smart-contract for the SmartContractBank.\r\n* You can buy insurance for 0.1 ETH and if you do not take 100% profit when balance of\r\n* the SmartContractBank will be lesser then 0.01 you can receive part of insurance fund depend on your not received money.\r\n*\r\n* To buy insurance:\r\n* Send to the contract address 0.01 ETH, and you will be accounted to.\r\n*\r\n* To receive insurance payout:\r\n* Send to the contract address 0 ETH, and you will receive part of insurance depend on your not received money.\r\n* If you already received 100% from your deposit, you will take error.\r\n*/\r\ncontract InsuranceFund {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev Structure for evaluating payout\r\n    * @param deposit Duplicated from SmartContractBank deposit\r\n    * @param withdrawals Duplicated from SmartContractBank withdrawals\r\n    * @param insured Flag for available payout\r\n    */\r\n    struct Investor {\r\n        uint256 deposit;\r\n        uint256 withdrawals;\r\n        bool insured;\r\n    }\r\n    mapping (address => Investor) public investors;\r\n    uint public countOfInvestors;\r\n\r\n    bool public startOfPayments = false;\r\n    uint256 public totalSupply;\r\n\r\n    uint256 public totalNotReceived;\r\n    address public SCBAddress;\r\n\r\n    SmartContractBank SCBContract;\r\n\r\n    event Paid(address investor, uint256 amount, uint256  notRecieve, uint256  partOfNotReceived);\r\n    event SetInfo(address investor, uint256  notRecieve, uint256 deposit, uint256 withdrawals);\r\n\r\n    /**\r\n    * @dev  Modifier for access from the SmartContractBank\r\n    */\r\n    modifier onlySCB() {\r\n        require(msg.sender == SCBAddress, \"access denied\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev  Setter the SmartContractBank address. Address can be set only once.\r\n    * @param _SCBAddress Address of the SmartContractBank\r\n    */\r\n    function setSCBAddress(address _SCBAddress) public {\r\n        require(SCBAddress == address(0x0));\r\n        SCBAddress = _SCBAddress;\r\n        SCBContract = SmartContractBank(SCBAddress);\r\n    }\r\n\r\n    /**\r\n    * @dev  Private setter info about investor. Can be call if payouts not started.\r\n    * Needing for evaluating not received total amount without loops.\r\n    * @param _address Investor's address\r\n    * @param _address Investor's deposit\r\n    * @param _address Investor's withdrawals\r\n    */\r\n    function privateSetInfo(address _address, uint256 deposit, uint256 withdrawals) private{\r\n        if (!startOfPayments) {\r\n            Investor storage investor = investors[_address];\r\n\r\n            if (investor.deposit != deposit){\r\n                totalNotReceived = totalNotReceived.add(deposit.sub(investor.deposit));\r\n                investor.deposit = deposit;\r\n            }\r\n\r\n            if (investor.withdrawals != withdrawals){\r\n                uint256 different;\r\n                if (deposit <= withdrawals){\r\n                    different = deposit.sub(withdrawals);\r\n                    if (totalNotReceived >= different)\r\n                        totalNotReceived = totalNotReceived.sub(different);\r\n                    else\r\n                        totalNotReceived = 0;\r\n                } else {\r\n                    different = withdrawals.sub(investor.withdrawals);\r\n                    if (totalNotReceived >= different)\r\n                        totalNotReceived = totalNotReceived.sub(different);\r\n                    else\r\n                        totalNotReceived = 0;\r\n                }\r\n                investor.withdrawals = withdrawals;\r\n            }\r\n\r\n            emit SetInfo(_address, totalNotReceived, investor.deposit, investor.withdrawals);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev  Setter info about investor from the SmartContractBank.\r\n    * @param _address Investor's address\r\n    * @param _address Investor's deposit\r\n    * @param _address Investor's withdrawals\r\n    */\r\n    function setInfo(address _address, uint256 deposit, uint256 withdrawals) public onlySCB {\r\n        privateSetInfo(_address, deposit, withdrawals);\r\n    }\r\n\r\n    /**\r\n    * @dev  Delete insured from the SmartContractBank.\r\n    * @param _address Investor's address\r\n    */\r\n    function deleteInsured(address _address) public onlySCB {\r\n        Investor storage investor = investors[_address];\r\n        investor.deposit = 0;\r\n        investor.withdrawals = 0;\r\n        investor.insured = false;\r\n        countOfInvestors--;\r\n    }\r\n\r\n    /**\r\n    * @dev  Function for starting payouts and stopping receive funds.\r\n    */\r\n    function beginOfPayments() public {\r\n        require(address(SCBAddress).balance < 0.1 ether && !startOfPayments);\r\n        startOfPayments = true;\r\n        totalSupply = address(this).balance;\r\n    }\r\n\r\n    /**\r\n    * @dev  Payable function for receive funds, buying insurance and receive insurance payouts .\r\n    */\r\n    function () external payable {\r\n        Investor storage investor = investors[msg.sender];\r\n        if (msg.value > 0 ether){\r\n            require(!startOfPayments);\r\n            if (msg.sender != SCBAddress && msg.value >= 0.1 ether) {\r\n                uint256 deposit;\r\n                uint256 withdrawals;\r\n                (deposit, withdrawals, investor.insured) = SCBContract.setInsured(msg.sender);\r\n                countOfInvestors++;\r\n                privateSetInfo(msg.sender, deposit, withdrawals);\r\n            }\r\n        } else if (msg.value == 0){\r\n            uint256 notReceived = investor.deposit.sub(investor.withdrawals);\r\n            uint256 partOfNotReceived = notReceived.mul(100).div(totalNotReceived);\r\n            uint256 payAmount = totalSupply.div(100).mul(partOfNotReceived);\r\n            require(startOfPayments && investor.insured && notReceived > 0);\r\n            investor.insured = false;\r\n            msg.sender.transfer(payAmount);\r\n            emit Paid(msg.sender, payAmount, notReceived, partOfNotReceived);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"closeEntrance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPhasePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"increasePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setInsured\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MainSaleAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_insuranceFundAddress\",\"type\":\"address\"}],\"name\":\"setInsuranceFundAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"paymentTime\",\"type\":\"uint256\"},{\"name\":\"withdrawals\",\"type\":\"uint256\"},{\"name\":\"increasedPercent\",\"type\":\"bool\"},{\"name\":\"insured\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CBCTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddressTwo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddressOne\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promotionAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"insuranceFundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"UserDelete\",\"type\":\"event\"}]","ContractName":"SmartContractBank","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://660de5bd0ae644e80e295d640674f967dd57b90488da4da15502168bd743e100"}]}