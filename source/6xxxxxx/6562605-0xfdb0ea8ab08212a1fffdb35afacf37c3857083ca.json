{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/// @title Registry for IN3-Nodes\r\ncontract ServerRegistry {\r\n\r\n    uint internal constant unregisterDeposit = 100000;\r\n\r\n    event LogServerRegistered(string url, uint props, address owner, uint deposit);\r\n    event LogServerUnregisterRequested(string url, address owner, address caller);\r\n    event LogServerUnregisterCanceled(string url, address owner);\r\n    event LogServerConvicted(string url, address owner);\r\n    event LogServerRemoved(string url, address owner);\r\n\r\n    struct Web3Server {\r\n        string url;  // the url of the server\r\n        address owner; // the owner, which is also the key to sign blockhashes\r\n        uint deposit; // stored deposit\r\n        uint props; // a list of properties-flags representing the capabilities of the server\r\n\r\n        // unregister state\r\n        uint unregisterTime; // earliest timestamp in to to call unregister\r\n        address unregisterCaller; // address of the caller requesting the unregister\r\n    }\r\n    \r\n    Web3Server[] public servers;\r\n\r\n    function totalServers() public constant returns (uint)  {\r\n        return servers.length;\r\n    }\r\n\r\n    /// register a new Server with the sender as owner    \r\n    function registerServer(string _url, uint _props) public payable {\r\n        // make sure this url and also this owner was not registered before.\r\n        bytes32 hash = keccak256(_url);\r\n        for (uint i=0;i<servers.length;i++) \r\n            require(keccak256(servers[i].url)!=hash && servers[i].owner!=msg.sender);\r\n\r\n        // create new Webserver\r\n        Web3Server memory m;\r\n        m.url = _url;\r\n        m.props = _props;\r\n        m.owner = msg.sender;\r\n        m.deposit = msg.value;\r\n        servers.push(m);\r\n        emit LogServerRegistered(_url, _props, msg.sender,msg.value);\r\n    }\r\n\r\n    /// this should be called before unregistering a server.\r\n    /// there are 2 use cases:\r\n    /// a) the owner wants to stop offering this.\r\n    ///    in this case he has to wait for one hour before actually removing the server.\r\n    ///    This is needed in order to give others a chance to convict it in case this server signs wrong hashes\r\n    /// b) anybody can request to remove a server because it has been inactive.\r\n    ///    in this case he needs to pay a small deposit, which he will lose \r\n    //       if the owner become active again \r\n    //       or the caller will receive 20% of the deposit in case the owner does not react.\r\n    function requestUnregisteringServer(uint _serverIndex) payable public {\r\n        Web3Server storage server = servers[_serverIndex];\r\n        // this can only be called if nobody requested it before\r\n        require(server.unregisterCaller==address(0x0));\r\n\r\n        if (server.unregisterCaller == server.owner) \r\n           server.unregisterTime = now + 1 hours;\r\n        else {\r\n            server.unregisterTime = now + 28 days; // 28 days are always good ;-) \r\n            // the requester needs to pay the unregisterDeposit in order to spam-protect the server\r\n            require(msg.value==unregisterDeposit);\r\n        }\r\n        server.unregisterCaller = msg.sender;\r\n        emit LogServerUnregisterRequested(server.url, server.owner, msg.sender );\r\n    }\r\n    \r\n    function confirmUnregisteringServer(uint _serverIndex) public {\r\n        Web3Server storage server = servers[_serverIndex];\r\n        // this can only be called if somebody requested it before\r\n        require(server.unregisterCaller!=address(0x0) && server.unregisterTime < now);\r\n\r\n        uint payBackOwner = server.deposit;\r\n        if (server.unregisterCaller != server.owner) {\r\n            payBackOwner -= server.deposit/5;  // the owner will only receive 80% of his deposit back.\r\n            server.unregisterCaller.transfer( unregisterDeposit + server.deposit - payBackOwner );\r\n        }\r\n\r\n        if (payBackOwner>0)\r\n            server.owner.transfer( payBackOwner );\r\n\r\n        removeServer(_serverIndex);\r\n    }\r\n\r\n    function cancelUnregisteringServer(uint _serverIndex) public {\r\n        Web3Server storage server = servers[_serverIndex];\r\n\r\n        // this can only be called by the owner and if somebody requested it before\r\n        require(server.unregisterCaller!=address(0) &&  server.owner == msg.sender);\r\n\r\n        // if this was requested by somebody who does not own this server,\r\n        // the owner will get his deposit\r\n        if (server.unregisterCaller != server.owner) \r\n            server.owner.transfer( unregisterDeposit );\r\n\r\n        server.unregisterCaller = address(0);\r\n        server.unregisterTime = 0;\r\n        \r\n        emit LogServerUnregisterCanceled(server.url, server.owner);\r\n    }\r\n\r\n\r\n    function convict(uint _serverIndex, bytes32 _blockhash, uint _blocknumber, uint8 _v, bytes32 _r, bytes32 _s) public {\r\n        // if the blockhash is correct you cannot convict the server\r\n        require(blockhash(_blocknumber) != _blockhash);\r\n\r\n        // make sure the hash was signed by the owner of the server\r\n        require(ecrecover(keccak256(_blockhash, _blocknumber), _v, _r, _s) == servers[_serverIndex].owner);\r\n\r\n        // remove the deposit\r\n        if (servers[_serverIndex].deposit>0) {\r\n            uint payout = servers[_serverIndex].deposit/2;\r\n            // send 50% to the caller of this function\r\n            msg.sender.transfer(payout);\r\n\r\n            // and burn the rest by sending it to the 0x0-address\r\n            address(0).transfer(servers[_serverIndex].deposit-payout);\r\n        }\r\n\r\n        emit LogServerConvicted(servers[_serverIndex].url, servers[_serverIndex].owner );\r\n        removeServer(_serverIndex);\r\n\r\n    }\r\n    \r\n    // internal helpers\r\n    \r\n    function removeServer(uint _serverIndex) internal {\r\n        emit LogServerRemoved(servers[_serverIndex].url, servers[_serverIndex].owner );\r\n        uint length = servers.length;\r\n        Web3Server memory m = servers[length - 1];\r\n        servers[_serverIndex] = m;\r\n        servers.length--;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalServers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"_props\",\"type\":\"uint256\"}],\"name\":\"registerServer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"servers\",\"outputs\":[{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"},{\"name\":\"props\",\"type\":\"uint256\"},{\"name\":\"unregisterTime\",\"type\":\"uint256\"},{\"name\":\"unregisterCaller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_serverIndex\",\"type\":\"uint256\"}],\"name\":\"cancelUnregisteringServer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_serverIndex\",\"type\":\"uint256\"},{\"name\":\"_blockhash\",\"type\":\"bytes32\"},{\"name\":\"_blocknumber\",\"type\":\"uint256\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"convict\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_serverIndex\",\"type\":\"uint256\"}],\"name\":\"confirmUnregisteringServer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_serverIndex\",\"type\":\"uint256\"}],\"name\":\"requestUnregisteringServer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"props\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"LogServerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LogServerUnregisterRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogServerUnregisterCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogServerConvicted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"LogServerRemoved\",\"type\":\"event\"}]","ContractName":"ServerRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3c98e7413b5ce4f1816a07aaa3bb6a5afb5b4fbbdc4f2f05cc08692ca18be8ec"}]}