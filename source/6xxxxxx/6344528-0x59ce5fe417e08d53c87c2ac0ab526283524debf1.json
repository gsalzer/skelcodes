{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\ncontract TokenRecoverable is Ownable {\r\n    using SafeERC20 for ERC20Basic;\r\n\r\n    function recoverTokens(ERC20Basic token, address to, uint256 amount) public onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(balance >= amount);\r\n        token.safeTransfer(to, amount);\r\n    }\r\n}\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC820Registry {\r\n    function getManager(address addr) public view returns(address);\r\n    function setManager(address addr, address newManager) public;\r\n    function getInterfaceImplementer(address addr, bytes32 iHash) public constant returns (address);\r\n    function setInterfaceImplementer(address addr, bytes32 iHash, address implementer) public;\r\n}\r\n\r\n\r\ncontract ERC820Implementer {\r\n    ERC820Registry erc820Registry = ERC820Registry(0x991a1bcb077599290d7305493c9A630c20f8b798);\r\n\r\n    function setInterfaceImplementation(string ifaceLabel, address impl) internal {\r\n        bytes32 ifaceHash = keccak256(abi.encodePacked(ifaceLabel));\r\n        erc820Registry.setInterfaceImplementer(this, ifaceHash, impl);\r\n    }\r\n\r\n    function interfaceAddr(address addr, string ifaceLabel) internal constant returns(address) {\r\n        bytes32 ifaceHash = keccak256(abi.encodePacked(ifaceLabel));\r\n        return erc820Registry.getInterfaceImplementer(addr, ifaceHash);\r\n    }\r\n\r\n    function delegateManagement(address newManager) internal {\r\n        erc820Registry.setManager(this, newManager);\r\n    }\r\n}\r\n\r\ncontract ERC20Token {\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function decimals() public view returns (uint8);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address owner) public view returns (uint256);\r\n    function transfer(address to, uint256 amount) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) public returns (bool);\r\n    function approve(address spender, uint256 amount) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n}\r\n\r\ncontract ERC777Token {\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address owner) public view returns (uint256);\r\n    function granularity() public view returns (uint256);\r\n\r\n    function defaultOperators() public view returns (address[]);\r\n    function isOperatorFor(address operator, address tokenHolder) public view returns (bool);\r\n    function authorizeOperator(address operator) public;\r\n    function revokeOperator(address operator) public;\r\n\r\n    function send(address to, uint256 amount, bytes holderData) public;\r\n    function operatorSend(address from, address to, uint256 amount, bytes holderData, bytes operatorData) public;\r\n\r\n    function burn(uint256 amount, bytes holderData) public;\r\n    function operatorBurn(address from, uint256 amount, bytes holderData, bytes operatorData) public;\r\n\r\n    event Sent(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        bytes holderData,\r\n        bytes operatorData\r\n    ); // solhint-disable-next-line separate-by-one-line-in-contract\r\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes operatorData);\r\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes holderData, bytes operatorData);\r\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n}\r\n\r\n\r\ncontract ERC777TokensRecipient {\r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint amount,\r\n        bytes userData,\r\n        bytes operatorData\r\n    ) public;\r\n}\r\n\r\n\r\ncontract ERC777TokensSender {\r\n    function tokensToSend(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint amount,\r\n        bytes userData,\r\n        bytes operatorData\r\n    ) public;\r\n}\r\n\r\ncontract ERC777BaseToken is ERC777Token, ERC820Implementer {\r\n    using SafeMath for uint256;\r\n\r\n    string internal mName;\r\n    string internal mSymbol;\r\n    uint256 internal mGranularity;\r\n    uint256 internal mTotalSupply;\r\n\r\n\r\n    mapping(address => uint) internal mBalances;\r\n    mapping(address => mapping(address => bool)) internal mAuthorized;\r\n\r\n    address[] internal mDefaultOperators;\r\n    mapping(address => bool) internal mIsDefaultOperator;\r\n    mapping(address => mapping(address => bool)) internal mRevokedDefaultOperator;\r\n\r\n    /* -- Constructor -- */\r\n    //\r\n    /// @notice Constructor to create a ReferenceToken\r\n    /// @param _name Name of the new token\r\n    /// @param _symbol Symbol of the new token.\r\n    /// @param _granularity Minimum transferable chunk.\r\n    constructor(string _name, string _symbol, uint256 _granularity, address[] _defaultOperators) internal {\r\n        mName = _name;\r\n        mSymbol = _symbol;\r\n        mTotalSupply = 0;\r\n        require(_granularity >= 1);\r\n        mGranularity = _granularity;\r\n\r\n        mDefaultOperators = _defaultOperators;\r\n        for (uint i = 0; i < mDefaultOperators.length; i++) { mIsDefaultOperator[mDefaultOperators[i]] = true; }\r\n\r\n        setInterfaceImplementation(\"ERC777Token\", this);\r\n    }\r\n\r\n    /* -- ERC777 Interface Implementation -- */\r\n    //\r\n    /// @return the name of the token\r\n    function name() public view returns (string) { return mName; }\r\n\r\n    /// @return the symbol of the token\r\n    function symbol() public view returns (string) { return mSymbol; }\r\n\r\n    /// @return the granularity of the token\r\n    function granularity() public view returns (uint256) { return mGranularity; }\r\n\r\n    /// @return the total supply of the token\r\n    function totalSupply() public view returns (uint256) { return mTotalSupply; }\r\n\r\n    /// @notice Return the account balance of some account\r\n    /// @param _tokenHolder Address for which the balance is returned\r\n    /// @return the balance of `_tokenAddress`.\r\n    function balanceOf(address _tokenHolder) public view returns (uint256) { return mBalances[_tokenHolder]; }\r\n\r\n    /// @notice Return the list of default operators\r\n    /// @return the list of all the default operators\r\n    function defaultOperators() public view returns (address[]) { return mDefaultOperators; }\r\n\r\n    /// @notice Send `_amount` of tokens to address `_to` passing `_userData` to the recipient\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be sent\r\n    function send(address _to, uint256 _amount, bytes _userData) public {\r\n        doSend(msg.sender, msg.sender, _to, _amount, _userData, \"\", true);\r\n    }\r\n\r\n    /// @notice Authorize a third party `_operator` to manage (send) `msg.sender`'s tokens.\r\n    /// @param _operator The operator that wants to be Authorized\r\n    function authorizeOperator(address _operator) public {\r\n        require(_operator != msg.sender);\r\n        if (mIsDefaultOperator[_operator]) {\r\n            mRevokedDefaultOperator[_operator][msg.sender] = false;\r\n        } else {\r\n            mAuthorized[_operator][msg.sender] = true;\r\n        }\r\n        emit AuthorizedOperator(_operator, msg.sender);\r\n    }\r\n\r\n    /// @notice Revoke a third party `_operator`'s rights to manage (send) `msg.sender`'s tokens.\r\n    /// @param _operator The operator that wants to be Revoked\r\n    function revokeOperator(address _operator) public {\r\n        require(_operator != msg.sender);\r\n        if (mIsDefaultOperator[_operator]) {\r\n            mRevokedDefaultOperator[_operator][msg.sender] = true;\r\n        } else {\r\n            mAuthorized[_operator][msg.sender] = false;\r\n        }\r\n        emit RevokedOperator(_operator, msg.sender);\r\n    }\r\n\r\n    /// @notice Check whether the `_operator` address is allowed to manage the tokens held by `_tokenHolder` address.\r\n    /// @param _operator address to check if it has the right to manage the tokens\r\n    /// @param _tokenHolder address which holds the tokens to be managed\r\n    /// @return `true` if `_operator` is authorized for `_tokenHolder`\r\n    function isOperatorFor(address _operator, address _tokenHolder) public view returns (bool) {\r\n        return (_operator == _tokenHolder\r\n            || mAuthorized[_operator][_tokenHolder]\r\n            || (mIsDefaultOperator[_operator] && !mRevokedDefaultOperator[_operator][_tokenHolder]));\r\n    }\r\n\r\n    /// @notice Send `_amount` of tokens on behalf of the address `from` to the address `to`.\r\n    /// @param _from The address holding the tokens being sent\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be sent\r\n    /// @param _userData Data generated by the user to be sent to the recipient\r\n    /// @param _operatorData Data generated by the operator to be sent to the recipient\r\n    function operatorSend(address _from, address _to, uint256 _amount, bytes _userData, bytes _operatorData) public {\r\n        require(isOperatorFor(msg.sender, _from));\r\n        doSend(msg.sender, _from, _to, _amount, _userData, _operatorData, true);\r\n    }\r\n\r\n    function burn(uint256 _amount, bytes _holderData) public {\r\n        doBurn(msg.sender, msg.sender, _amount, _holderData, \"\");\r\n    }\r\n\r\n    function operatorBurn(address _tokenHolder, uint256 _amount, bytes _holderData, bytes _operatorData) public {\r\n        require(isOperatorFor(msg.sender, _tokenHolder));\r\n        doBurn(msg.sender, _tokenHolder, _amount, _holderData, _operatorData);\r\n    }\r\n\r\n    /* -- Helper Functions -- */\r\n    //\r\n    /// @notice Internal function that ensures `_amount` is multiple of the granularity\r\n    /// @param _amount The quantity that want's to be checked\r\n    function requireMultiple(uint256 _amount) internal view {\r\n        require(_amount.div(mGranularity).mul(mGranularity) == _amount);\r\n    }\r\n\r\n    /// @notice Check whether an address is a regular address or not.\r\n    /// @param _addr Address of the contract that has to be checked\r\n    /// @return `true` if `_addr` is a regular address (not a contract)\r\n    function isRegularAddress(address _addr) internal view returns(bool) {\r\n        if (_addr == 0) { return false; }\r\n        uint size;\r\n        assembly { size := extcodesize(_addr) } // solhint-disable-line no-inline-assembly\r\n        return size == 0;\r\n    }\r\n\r\n    /// @notice Helper function actually performing the sending of tokens.\r\n    /// @param _operator The address performing the send\r\n    /// @param _from The address holding the tokens being sent\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be sent\r\n    /// @param _userData Data generated by the user to be passed to the recipient\r\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\r\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\r\n    ///  implementing `erc777_tokenHolder`.\r\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\r\n    ///  functions SHOULD set this parameter to `false`.\r\n    function doSend(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes _userData,\r\n        bytes _operatorData,\r\n        bool _preventLocking\r\n    )\r\n        internal\r\n    {\r\n        requireMultiple(_amount);\r\n\r\n        callSender(_operator, _from, _to, _amount, _userData, _operatorData);\r\n\r\n        require(_to != address(0));          // forbid sending to 0x0 (=burning)\r\n        require(mBalances[_from] >= _amount); // ensure enough funds\r\n\r\n        mBalances[_from] = mBalances[_from].sub(_amount);\r\n        mBalances[_to] = mBalances[_to].add(_amount);\r\n\r\n        callRecipient(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\r\n\r\n        emit Sent(_operator, _from, _to, _amount, _userData, _operatorData);\r\n    }\r\n\r\n    /// @notice Helper function actually performing the burning of tokens.\r\n    /// @param _operator The address performing the burn\r\n    /// @param _tokenHolder The address holding the tokens being burn\r\n    /// @param _amount The number of tokens to be burnt\r\n    /// @param _holderData Data generated by the token holder\r\n    /// @param _operatorData Data generated by the operator\r\n    function doBurn(address _operator, address _tokenHolder, uint256 _amount, bytes _holderData, bytes _operatorData)\r\n        internal\r\n    {\r\n        requireMultiple(_amount);\r\n        require(balanceOf(_tokenHolder) >= _amount);\r\n\r\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].sub(_amount);\r\n        mTotalSupply = mTotalSupply.sub(_amount);\r\n\r\n        callSender(_operator, _tokenHolder, 0x0, _amount, _holderData, _operatorData);\r\n        emit Burned(_operator, _tokenHolder, _amount, _holderData, _operatorData);\r\n    }\r\n\r\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\r\n    ///  May throw according to `_preventLocking`\r\n    /// @param _operator The address performing the send or mint\r\n    /// @param _from The address holding the tokens being sent\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be sent\r\n    /// @param _userData Data generated by the user to be passed to the recipient\r\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\r\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\r\n    ///  implementing `ERC777TokensRecipient`.\r\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\r\n    ///  functions SHOULD set this parameter to `false`.\r\n    function callRecipient(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes _userData,\r\n        bytes _operatorData,\r\n        bool _preventLocking\r\n    )\r\n        internal\r\n    {\r\n        address recipientImplementation = interfaceAddr(_to, \"ERC777TokensRecipient\");\r\n        if (recipientImplementation != 0) {\r\n            ERC777TokensRecipient(recipientImplementation).tokensReceived(\r\n                _operator, _from, _to, _amount, _userData, _operatorData);\r\n        } else if (_preventLocking) {\r\n            require(isRegularAddress(_to));\r\n        }\r\n    }\r\n\r\n    /// @notice Helper function that checks for ERC777TokensSender on the sender and calls it.\r\n    ///  May throw according to `_preventLocking`\r\n    /// @param _from The address holding the tokens being sent\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be sent\r\n    /// @param _userData Data generated by the user to be passed to the recipient\r\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\r\n    ///  implementing `ERC777TokensSender`.\r\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\r\n    ///  functions SHOULD set this parameter to `false`.\r\n    function callSender(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes _userData,\r\n        bytes _operatorData\r\n    )\r\n        internal\r\n    {\r\n        address senderImplementation = interfaceAddr(_from, \"ERC777TokensSender\");\r\n        if (senderImplementation == 0) { return; }\r\n        ERC777TokensSender(senderImplementation).tokensToSend(_operator, _from, _to, _amount, _userData, _operatorData);\r\n    }\r\n}\r\n\r\n\r\ncontract ERC777ERC20BaseToken is ERC20Token, ERC777BaseToken {\r\n    bool internal mErc20compatible;\r\n\r\n    mapping(address => mapping(address => bool)) internal mAuthorized;\r\n    mapping(address => mapping(address => uint256)) internal mAllowed;\r\n\r\n    constructor(\r\n        string _name,\r\n        string _symbol,\r\n        uint256 _granularity,\r\n        address[] _defaultOperators\r\n    )\r\n        internal ERC777BaseToken(_name, _symbol, _granularity, _defaultOperators)\r\n    {\r\n        mErc20compatible = true;\r\n        setInterfaceImplementation(\"ERC20Token\", this);\r\n    }\r\n\r\n    /// @notice This modifier is applied to erc20 obsolete methods that are\r\n    ///  implemented only to maintain backwards compatibility. When the erc20\r\n    ///  compatibility is disabled, this methods will fail.\r\n    modifier erc20 () {\r\n        require(mErc20compatible);\r\n        _;\r\n    }\r\n\r\n    /// @notice For Backwards compatibility\r\n    /// @return The decimls of the token. Forced to 18 in ERC777.\r\n    function decimals() public erc20 view returns (uint8) { return uint8(18); }\r\n\r\n    /// @notice ERC20 backwards compatible transfer.\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be transferred\r\n    /// @return `true`, if the transfer can't be done, it should fail.\r\n    function transfer(address _to, uint256 _amount) public erc20 returns (bool success) {\r\n        doSend(msg.sender, msg.sender, _to, _amount, \"\", \"\", false);\r\n        return true;\r\n    }\r\n\r\n    /// @notice ERC20 backwards compatible transferFrom.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be transferred\r\n    /// @return `true`, if the transfer can't be done, it should fail.\r\n    function transferFrom(address _from, address _to, uint256 _amount) public erc20 returns (bool success) {\r\n        require(_amount <= mAllowed[_from][msg.sender]);\r\n\r\n        // Cannot be after doSend because of tokensReceived re-entry\r\n        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\r\n        doSend(msg.sender, _from, _to, _amount, \"\", \"\", false);\r\n        return true;\r\n    }\r\n\r\n    /// @notice ERC20 backwards compatible approve.\r\n    ///  `msg.sender` approves `_spender` to spend `_amount` tokens on its behalf.\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The number of tokens to be approved for transfer\r\n    /// @return `true`, if the approve can't be done, it should fail.\r\n    function approve(address _spender, uint256 _amount) public erc20 returns (bool success) {\r\n        mAllowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice ERC20 backwards compatible allowance.\r\n    ///  This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender) public erc20 view returns (uint256 remaining) {\r\n        return mAllowed[_owner][_spender];\r\n    }\r\n\r\n    function doSend(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes _userData,\r\n        bytes _operatorData,\r\n        bool _preventLocking\r\n    )\r\n        internal\r\n    {\r\n        super.doSend(_operator, _from, _to, _amount, _userData, _operatorData, _preventLocking);\r\n        if (mErc20compatible) { emit Transfer(_from, _to, _amount); }\r\n    }\r\n\r\n    function doBurn(address _operator, address _tokenHolder, uint256 _amount, bytes _holderData, bytes _operatorData)\r\n        internal\r\n    {\r\n        super.doBurn(_operator, _tokenHolder, _amount, _holderData, _operatorData);\r\n        if (mErc20compatible) { emit Transfer(_tokenHolder, 0x0, _amount); }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Eliptic curve signature operations\r\n *\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n *\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n *\r\n */\r\nlibrary ECRecovery {\r\n\r\n    /**\r\n    * @dev Recover signer address from a message by using their signature\r\n    * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n    * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n    */\r\n    function recover(bytes32 hash, bytes sig)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // Check the signature length\r\n        if (sig.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n        if (v < 27) {\r\n            v += 27;\r\n        }\r\n\r\n        // If the version is correct return the signer address\r\n        if (v != 27 && v != 28) {\r\n            return (address(0));\r\n        } else {\r\n        // solium-disable-next-line arg-overflow\r\n            return ecrecover(hash, v, r, s);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * toEthSignedMessageHash\r\n    * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n    * @dev and hash the result\r\n    */\r\n    function toEthSignedMessageHash(bytes32 hash)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19Ethereum Signed Message:\\n32\",\r\n                hash\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\ncontract FilesFMToken is TokenRecoverable, ERC777ERC20BaseToken {\r\n    using SafeMath for uint256;\r\n    using ECRecovery for bytes32;\r\n\r\n    string private constant name_ = \"Files.fm Token\";\r\n    string private constant symbol_ = \"FFM\";\r\n    uint256 private constant granularity_ = 1;\r\n    \r\n    mapping(bytes => bool) private signatures;\r\n    address public tokenMinter;\r\n    address public tokenBag;\r\n    bool public throwOnIncompatibleContract = true;\r\n    bool public burnEnabled = false;\r\n    bool public transfersEnabled = false;\r\n    bool public defaultOperatorsComplete = false;\r\n\r\n    event TokenBagChanged(address indexed oldAddress, address indexed newAddress, uint256 balance);\r\n    event DefaultOperatorAdded(address indexed operator);\r\n    event DefaultOperatorRemoved(address indexed operator);\r\n    event DefaultOperatorsCompleted();\r\n\r\n    /// @notice Constructor to create a token\r\n    constructor() public ERC777ERC20BaseToken(name_, symbol_, granularity_, new address[](0)) {\r\n    }\r\n\r\n    modifier canTransfer(address from, address to) {\r\n        require(transfersEnabled || from == tokenBag || to == tokenBag);\r\n        _;\r\n    }\r\n\r\n    modifier canBurn() {\r\n        require(burnEnabled);\r\n        _;\r\n    }\r\n\r\n    modifier hasMintPermission() {\r\n        require(msg.sender == owner || msg.sender == tokenMinter, \"Only owner or token minter can mint tokens\");\r\n        _;\r\n    }\r\n\r\n    modifier canManageDefaultOperator() {\r\n        require(!defaultOperatorsComplete, \"Default operator list is not editable\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Disables the ERC20 interface. This function can only be called\r\n    ///  by the owner.\r\n    function disableERC20() public onlyOwner {\r\n        mErc20compatible = false;\r\n        setInterfaceImplementation(\"ERC20Token\", 0x0);\r\n    }\r\n\r\n    /// @notice Re enables the ERC20 interface. This function can only be called\r\n    ///  by the owner.\r\n    function enableERC20() public onlyOwner {\r\n        mErc20compatible = true;\r\n        setInterfaceImplementation(\"ERC20Token\", this);\r\n    }\r\n\r\n    function send(address _to, uint256 _amount, bytes _userData) public canTransfer(msg.sender, _to) {\r\n        super.send(_to, _amount, _userData);\r\n    }\r\n\r\n    function operatorSend(\r\n        address _from, \r\n        address _to, \r\n        uint256 _amount, \r\n        bytes _userData, \r\n        bytes _operatorData) public canTransfer(_from, _to) {\r\n        super.operatorSend(_from, _to, _amount, _userData, _operatorData);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount) public erc20 canTransfer(msg.sender, _to) returns (bool success) {\r\n        return super.transfer(_to, _amount);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _amount) public erc20 canTransfer(_from, _to) returns (bool success) {\r\n        return super.transferFrom(_from, _to, _amount);\r\n    }\r\n\r\n    /* -- Mint And Burn Functions (not part of the ERC777 standard, only the Events/tokensReceived call are) -- */\r\n    //\r\n    /// @notice Generates `_amount` tokens to be assigned to `_tokenHolder`\r\n    ///  Sample mint function to showcase the use of the `Minted` event and the logic to notify the recipient.\r\n    /// @param _tokenHolder The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @param _operatorData Data that will be passed to the recipient as a first transfer\r\n    function mint(address _tokenHolder, uint256 _amount, bytes _operatorData) public hasMintPermission {\r\n        doMint(_tokenHolder, _amount, _operatorData);\r\n    }\r\n\r\n    function mintToken(address _tokenHolder, uint256 _amount) public hasMintPermission {\r\n        doMint(_tokenHolder, _amount, \"\");\r\n    }\r\n\r\n    function mintTokens(address[] _tokenHolders, uint256[] _amounts) public hasMintPermission {\r\n        require(_tokenHolders.length > 0 && _tokenHolders.length <= 100);\r\n        require(_tokenHolders.length == _amounts.length);\r\n\r\n        for (uint256 i = 0; i < _tokenHolders.length; i++) {\r\n            doMint(_tokenHolders[i], _amounts[i], \"\");\r\n        }\r\n    }\r\n\r\n    /// @notice Burns `_amount` tokens from `_tokenHolder`\r\n    ///  Sample burn function to showcase the use of the `Burned` event.\r\n    /// @param _amount The quantity of tokens to burn\r\n    function burn(uint256 _amount, bytes _holderData) public canBurn {\r\n        super.burn(_amount, _holderData);\r\n    }\r\n\r\n    function permitTransfers() public onlyOwner {\r\n        require(!transfersEnabled);\r\n        transfersEnabled = true;\r\n    }\r\n\r\n    function setThrowOnIncompatibleContract(bool _throwOnIncompatibleContract) public onlyOwner {\r\n        throwOnIncompatibleContract = _throwOnIncompatibleContract;\r\n    }\r\n\r\n    function permitBurning(bool _enable) public onlyOwner {\r\n        burnEnabled = _enable;\r\n    }\r\n\r\n    function completeDefaultOperators() public onlyOwner canManageDefaultOperator {\r\n        defaultOperatorsComplete = true;\r\n        emit DefaultOperatorsCompleted();\r\n    }\r\n\r\n    function setTokenMinter(address _tokenMinter) public onlyOwner {\r\n        tokenMinter = _tokenMinter;\r\n    }\r\n\r\n    function setTokenBag(address _tokenBag) public onlyOwner {\r\n        uint256 balance = mBalances[tokenBag];\r\n        \r\n        if (_tokenBag == address(0)) {\r\n            require(balance == 0, \"Token Bag balance must be 0\");\r\n        } else if (balance > 0) {\r\n            doSend(msg.sender, tokenBag, _tokenBag, balance, \"\", \"\", false);\r\n        }\r\n\r\n        emit TokenBagChanged(tokenBag, _tokenBag, balance);\r\n        tokenBag = _tokenBag;\r\n    }\r\n    \r\n    function renounceOwnership() public onlyOwner {\r\n        tokenMinter = address(0);\r\n        super.renounceOwnership();\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        tokenMinter = address(0);\r\n        super.transferOwnership(_newOwner);\r\n    }\r\n\r\n    /// @notice sends tokens using signature to recover token sender\r\n    /// @param _to the address of the recepient\r\n    /// @param _amount tokens to send\r\n    /// @param _fee amound of tokens which goes to msg.sender\r\n    /// @param _data arbitrary user data\r\n    /// @param _nonce value to protect from replay attacks\r\n    /// @param _sig concatenated r,s,v values\r\n    /// @return `true` if the token transfer is success, otherwise should fail\r\n    function sendWithSignature(address _to, uint256 _amount, uint256 _fee, bytes _data, uint256 _nonce, bytes _sig) public returns (bool) {\r\n        doSendWithSignature(_to, _amount, _fee, _data, _nonce, _sig, true);\r\n        return true;\r\n    }\r\n\r\n    /// @notice transfers tokens in ERC20 compatible way using signature to recover token sender\r\n    /// @param _to the address of the recepient\r\n    /// @param _amount tokens to transfer\r\n    /// @param _fee amound of tokens which goes to msg.sender\r\n    /// @param _data arbitrary user data\r\n    /// @param _nonce value to protect from replay attacks\r\n    /// @param _sig concatenated r,s,v values\r\n    /// @return `true` if the token transfer is success, otherwise should fail\r\n    function transferWithSignature(address _to, uint256 _amount, uint256 _fee, bytes _data, uint256 _nonce, bytes _sig) public returns (bool) {\r\n        doSendWithSignature(_to, _amount, _fee, _data, _nonce, _sig, false);\r\n        return true;\r\n    }\r\n\r\n    function addDefaultOperator(address _operator) public onlyOwner canManageDefaultOperator {\r\n        require(_operator != address(0), \"Default operator cannot be set to address 0x0\");\r\n        require(mIsDefaultOperator[_operator] == false, \"This is already default operator\");\r\n        mDefaultOperators.push(_operator);\r\n        mIsDefaultOperator[_operator] = true;\r\n        emit DefaultOperatorAdded(_operator);\r\n    }\r\n\r\n    function removeDefaultOperator(address _operator) public onlyOwner canManageDefaultOperator {\r\n        require(mIsDefaultOperator[_operator] == true, \"This operator is not default operator\");\r\n        uint256 operatorIndex;\r\n        uint256 count = mDefaultOperators.length;\r\n        for (operatorIndex = 0; operatorIndex < count; operatorIndex++) {\r\n            if (mDefaultOperators[operatorIndex] == _operator) {\r\n                break;\r\n            }\r\n        }\r\n        if (operatorIndex + 1 < count) {\r\n            mDefaultOperators[operatorIndex] = mDefaultOperators[count - 1];\r\n        }\r\n        mDefaultOperators.length = mDefaultOperators.length - 1;\r\n        mIsDefaultOperator[_operator] = false;\r\n        emit DefaultOperatorRemoved(_operator);\r\n    }\r\n\r\n    function doMint(address _tokenHolder, uint256 _amount, bytes _operatorData) private {\r\n        require(_tokenHolder != address(0), \"Cannot mint to address 0x0\");\r\n        requireMultiple(_amount);\r\n\r\n        mTotalSupply = mTotalSupply.add(_amount);\r\n        mBalances[_tokenHolder] = mBalances[_tokenHolder].add(_amount);\r\n\r\n        callRecipient(msg.sender, address(0), _tokenHolder, _amount, \"\", _operatorData, false);\r\n\r\n        emit Minted(msg.sender, _tokenHolder, _amount, _operatorData);\r\n        if (mErc20compatible) { emit Transfer(address(0), _tokenHolder, _amount); }\r\n    }\r\n\r\n    function doSendWithSignature(address _to, uint256 _amount, uint256 _fee, bytes _data, uint256 _nonce, bytes _sig, bool _preventLocking) private {\r\n        require(_to != address(0));\r\n        require(_to != address(this)); // token contract does not accept own tokens\r\n\r\n        require(signatures[_sig] == false);\r\n        signatures[_sig] = true;\r\n\r\n        bytes memory packed;\r\n        if (_preventLocking) {\r\n            packed = abi.encodePacked(address(this), _to, _amount, _fee, _data, _nonce);\r\n        } else {\r\n            packed = abi.encodePacked(address(this), _to, _amount, _fee, _data, _nonce, \"ERC20Compat\");\r\n        }\r\n\r\n        address signer = keccak256(packed)\r\n            .toEthSignedMessageHash()\r\n            .recover(_sig); // same security considerations as in Ethereum TX\r\n        \r\n        require(signer != address(0));\r\n        require(transfersEnabled || signer == tokenBag || _to == tokenBag);\r\n\r\n        uint256 total = _amount.add(_fee);\r\n        require(mBalances[signer] >= total);\r\n\r\n        doSend(msg.sender, signer, _to, _amount, _data, \"\", _preventLocking);\r\n        if (_fee > 0) {\r\n            doSend(msg.sender, signer, msg.sender, _fee, \"\", \"\", _preventLocking);\r\n        }\r\n    }\r\n\r\n    /// @notice Helper function that checks for ERC777TokensRecipient on the recipient and calls it.\r\n    ///  May throw according to `_preventLocking`\r\n    /// @param _from The address holding the tokens being sent\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The number of tokens to be sent\r\n    /// @param _userData Data generated by the user to be passed to the recipient\r\n    /// @param _operatorData Data generated by the operator to be passed to the recipient\r\n    /// @param _preventLocking `true` if you want this function to throw when tokens are sent to a contract not\r\n    ///  implementing `ERC777TokensRecipient`.\r\n    ///  ERC777 native Send functions MUST set this parameter to `true`, and backwards compatible ERC20 transfer\r\n    ///  functions SHOULD set this parameter to `false`.\r\n    function callRecipient(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes _userData,\r\n        bytes _operatorData,\r\n        bool _preventLocking\r\n    ) internal {\r\n        address recipientImplementation = interfaceAddr(_to, \"ERC777TokensRecipient\");\r\n        if (recipientImplementation != 0) {\r\n            ERC777TokensRecipient(recipientImplementation).tokensReceived(\r\n                _operator, _from, _to, _amount, _userData, _operatorData);\r\n        } else if (throwOnIncompatibleContract && _preventLocking) {\r\n            require(isRegularAddress(_to));\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addDefaultOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"transferWithSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_throwOnIncompatibleContract\",\"type\":\"bool\"}],\"name\":\"setThrowOnIncompatibleContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"permitBurning\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_userData\",\"type\":\"bytes\"},{\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"sendWithSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenBag\",\"type\":\"address\"}],\"name\":\"setTokenBag\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenMinter\",\"type\":\"address\"}],\"name\":\"setTokenMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeDefaultOperators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_userData\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultOperatorsComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenBag\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolders\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeDefaultOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"permitTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_holderData\",\"type\":\"bytes\"},{\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"throwOnIncompatibleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_holderData\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TokenBagChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"DefaultOperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"DefaultOperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DefaultOperatorsCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"holderData\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"holderData\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"FilesFMToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1228e67642484284dba2ce4c4f4e27aee65e0002e996da0a6d4644572dcbdcc5"}]}