{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n/*\r\n                                                                  \r\nSuperCountries War Game #2 - Nuke countries and share a huge war chest                                           \r\nSuperCountries Original Game #1 - Each player earns ether forever\r\n\r\n\r\n███████╗██╗   ██╗██████╗ ███████╗██████╗                                    \r\n██╔════╝██║   ██║██╔══██╗██╔════╝██╔══██╗                                   \r\n███████╗██║   ██║██████╔╝█████╗  ██████╔╝                                   \r\n╚════██║██║   ██║██╔═══╝ ██╔══╝  ██╔══██╗                                   \r\n███████║╚██████╔╝██║     ███████╗██║  ██║                                   \r\n╚══════╝ ╚═════╝ ╚═╝     ╚══════╝╚═╝  ╚═╝                                   \r\n                                                                            \r\n     ██████╗ ██████╗ ██╗   ██╗███╗   ██╗████████╗██████╗ ██╗███████╗███████╗\r\n    ██╔════╝██╔═══██╗██║   ██║████╗  ██║╚══██╔══╝██╔══██╗██║██╔════╝██╔════╝\r\n    ██║     ██║   ██║██║   ██║██╔██╗ ██║   ██║   ██████╔╝██║█████╗  ███████╗\r\n    ██║     ██║   ██║██║   ██║██║╚██╗██║   ██║   ██╔══██╗██║██╔══╝  ╚════██║\r\n    ╚██████╗╚██████╔╝╚██████╔╝██║ ╚████║   ██║   ██║  ██║██║███████╗███████║\r\n     ╚═════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝╚═╝╚══════╝╚══════╝\r\n                                                                            \r\n          ██╗    ██╗ █████╗ ██████╗                                         \r\n          ██║    ██║██╔══██╗██╔══██╗                                        \r\n█████╗    ██║ █╗ ██║███████║██████╔╝    █████╗                              \r\n╚════╝    ██║███╗██║██╔══██║██╔══██╗    ╚════╝                              \r\n          ╚███╔███╔╝██║  ██║██║  ██║                                        \r\n           ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝                                        \r\n                                                                            \r\n\r\n                                                                                                                                                     \r\n\r\n© 2018 SuperCountries\r\n\r\n所有权 - 4CE434B6058EC7C24889EC2512734B5DBA26E39891C09DF50C3CE3191CE9C51E\r\n\r\nXuxuxu - LB - Xufo - MyPartridge\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \r\n*/\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n//////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////\r\n/////\t\t                                                 /////\r\n/////\t\t\t\tCALLING EXTERNAL CONTRACTS   \t\t\t /////\r\n/////\t\t                                                 /////\r\n//////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////\r\n\r\n\r\n////////////////////////////////////////////////\r\n/// \tSUPERCOUNTRIES CONTRACT\tFUNCTIONS\t ///\t\r\n////////////////////////////////////////////////\r\n\r\ncontract SuperCountriesExternal {\r\n  using SafeMath for uint256; \r\n\r\n\tfunction ownerOf(uint256) public pure returns (address) {\t}\r\n\t\r\n\tfunction priceOf(uint256) public pure returns (uint256) { }\r\n}\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////\r\n/// \tSUPERCOUNTRIES TROPHY CARDS CONTRACT FUNCTIONS\t ///\t\r\n////////////////////////////////////////////////////////////\r\n\r\ncontract SuperCountriesTrophyCardsExternal {\r\n  using SafeMath for uint256;\r\n  \r\n\tfunction countTrophyCards() public pure returns (uint256) {\t}\r\n\t\r\n\tfunction getTrophyCardIdFromIndex(uint256) public pure returns (uint256) {\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n//////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////\r\n/////\t\t                                         /////\r\n/////\t\tSUPERCOUNTRIES WAR - NEW CONTRACT    \t /////\r\n/////\t\t                                         /////\r\n//////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////\r\n\r\ncontract SuperCountriesWar {\r\n  using SafeMath for uint256;\r\n\r\n \r\n////////////////////////////\r\n/// \tCONSTRUCTOR\t\t ///\t\r\n////////////////////////////\r\n   \r\n\tconstructor () public {\r\n\t\towner = msg.sender;\r\n\r\n\t\tcontinentKing.length = 16;\r\n\t\tnewOwner.length = 256;\r\n\t\tnukerAddress.length = 256;\t\t\r\n\t}\r\n\t\r\n\taddress public owner;  \r\n\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n////////////////////////////////\r\n/// \tUSEFUL MODIFIERS\t ///\t\r\n////////////////////////////////\r\n\t\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner == msg.sender);\r\n\t\t_;\r\n\t}\r\n\r\n\t\r\n\t\r\n  /**\r\n   * @dev Throws if called by address 0x0\r\n   */\r\n\tmodifier onlyRealAddress() {\r\n\t\trequire(msg.sender != address(0));\r\n\t\t_;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n  /**\r\n   * @dev Can only be called when a game is running / unpaused\r\n   */\t\r\n\tmodifier onlyGameNOTPaused() {\r\n\t\trequire(gameRunning == true);\r\n\t\t_;\r\n\t}\r\n\r\n\t\r\n\r\n\t/**\r\n   * @dev Can only be called when a game is paused / ended\r\n   */\t\r\n\tmodifier onlyGamePaused() {\r\n\t\trequire(gameRunning == false);\r\n\t\t_;\r\n\t}\r\n    \r\n\t\r\n\t\r\n\t\r\n\r\n\r\n\t\r\n///////////////////////////////////////\r\n/// \tTROPHY CARDS FUNCTIONS \t\t///\r\n///////////////////////////////////////\r\n\r\n///Update the index of the next trophy card to get dividends, after each buy a new card will get divs\r\n\tfunction nextTrophyCardUpdateAndGetOwner() internal returns (address){\r\n\t\tuint256 cardsLength = getTrophyCount();\r\n\t\taddress trophyCardOwner;\r\n\t\t\r\n\t\tif (nextTrophyCardToGetDivs < cardsLength){\r\n\t\t\t\tuint256 nextCard = getTrophyFromIndex(nextTrophyCardToGetDivs);\r\n\t\t\t\ttrophyCardOwner = getCountryOwner(nextCard);\t\r\n\t\t}\r\n\t\t\r\n\t\t/// Update for next time\r\n\t\tif (nextTrophyCardToGetDivs.add(1) < cardsLength){\r\n\t\t\t\tnextTrophyCardToGetDivs++;\t\t\t\r\n\t\t}\r\n\t\t\telse nextTrophyCardToGetDivs = 0;\r\n\t\t\t\r\n\t\treturn trophyCardOwner;\t\t\t\r\n\t} \r\n\r\n\t\r\n\r\n/// Get the address of the owner of the \"next trophy card to get divs\"\r\n\tfunction getNextTrophyCardOwner() \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (\r\n\t\t\taddress nextTrophyCardOwner_,\r\n\t\t\tuint256 nextTrophyCardIndex_,\r\n\t\t\tuint256 nextTrophyCardId_\r\n\t\t)\r\n\t{\r\n\t\tuint256 cardsLength = getTrophyCount();\r\n\t\taddress trophyCardOwner;\r\n\t\t\r\n\t\tif (nextTrophyCardToGetDivs < cardsLength){\r\n\t\t\t\tuint256 nextCard = getTrophyFromIndex(nextTrophyCardToGetDivs);\r\n\t\t\t\ttrophyCardOwner = getCountryOwner(nextCard);\r\n\t\t}\r\n\t\t\t\r\n\t\treturn (\r\n\t\t\ttrophyCardOwner,\r\n\t\t\tnextTrophyCardToGetDivs,\r\n\t\t\tnextCard\r\n\t\t);\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\r\n\t\r\n\t\r\n////////////////////////////////////////////////////////\r\n/// \tCALL OF OTHER SUPERCOUNTRIES CONTRACTS\t\t ///\t\r\n////////////////////////////////////////////////////////\r\n\t\r\n/// EXTERNAL VALUES\r\n\taddress private contractSC = 0xdf203118A954c918b967a94E51f3570a2FAbA4Ac; /// SuperCountries Original game\r\n\taddress private contractTrophyCards = 0xEaf763328604e6e54159aba7bF1394f2FbcC016e; /// SuperCountries Trophy Cards\r\n\t\t\r\n\tSuperCountriesExternal SC = SuperCountriesExternal(contractSC);\r\n\tSuperCountriesTrophyCardsExternal SCTrophy = SuperCountriesTrophyCardsExternal(contractTrophyCards);\r\n\t\r\n\t\r\n\r\n\r\n\t\r\n////////////////////////////////////////////////////\r\n/// \tGET FUNCTIONS FROM EXTERNAL CONTRACTS\t ///\t\r\n////////////////////////////////////////////////////\r\n\t\r\n/// SuperCountries Original\r\n\tfunction getCountryOwner(uint256 _countryId) public view returns (address){        \r\n\t\treturn SC.ownerOf(_countryId);\r\n    }\r\n\t\r\n\t\r\n/// SuperCountries Original\r\n\tfunction getPriceOfCountry(uint256 _countryId) public view returns (uint256){\t\t\t\r\n\t\treturn SC.priceOf(_countryId);\r\n\t}\r\n\r\n\t\r\n/// SuperCountries Trophy Cards\r\n\tfunction getTrophyFromIndex(uint256 _index) public view returns (uint256){\t\t\t\r\n\t\treturn SCTrophy.getTrophyCardIdFromIndex(_index);\r\n\t}\r\n\r\n\t\r\n/// SuperCountries Trophy Cards\t\r\n\tfunction getTrophyCount() public view returns (uint256){\t\t\t\r\n\t\treturn SCTrophy.countTrophyCards();\r\n\t}\r\n\t\r\n\r\n\r\n\r\n\r\n\t\r\n////////////////////////////////////////\r\n/// \tVARIABLES & MAPPINGS\t\t ///\t\r\n////////////////////////////////////////\r\n\t\r\n/// Game enabled?\t\r\n\tbool private gameRunning;\r\n\tuint256 private gameVersion = 1; /// game Id\t\r\n\r\n\t\r\n/// Dates & timestamps\r\n\tuint256 private jackpotTimestamp; /// if this timestamp is reached, the jackpot can be shared\r\n\tmapping(uint256 => bool) private thisJackpotIsPlayedAndNotWon; /// true if currently played and not won, false if already won or not yet played\r\n\r\n\t\r\n/// *** J A C K P O T *** ///\r\n/// Unwithdrawn jackpot per winner\r\n\tmapping(uint256 => mapping(address => uint256)) private winnersJackpot; \r\n\tmapping(uint256 => uint256) private winningCountry; /// List of winning countries\r\n\r\n\t\r\n/// Payable functions prices: nuke a country, become a king ///\r\n\tuint256 private startingPrice = 1e16; /// ETHER /// First raw price to nuke a country /// nuke = nextPrice (or startingPrice) + kCountry*LastKnownCountryPrice\r\n\tmapping(uint256 => uint256) private nextPrice; /// ETHER /// Current raw price to nuke a country /// nuke = nextPrice + kCountry*LastKnownCountryPrice\r\n\tuint256 private kingPrice = 9e15; /// ETHER /// Current king price\r\n\r\n\t\r\n/// Factors ///\r\n\tuint256 private kCountry = 4; /// PERCENTS /// nuke = nextPrice + kCountry*LastKnownCountryPrice (4 = 4%)\r\n\tuint256 private kCountryLimit = 5e17; /// ETHER /// kCountry * lastKnownPrice cannot exceed this limit\r\n\tuint256 private kNext = 1037; /// PERTHOUSAND /// price increase after each nuke (1037 = 3.7% increase)\r\n\tuint256 private maxFlips = 16; /// king price will increase after maxFlips kings\r\n\tuint256 private continentFlips; /// Current kings flips\r\n\tuint256 private kKings = 101; /// king price increase (101 = 1% increase)\r\n\t\r\n\r\n/// Kings //\r\n\taddress[] private continentKing;\r\n\r\n\t\r\n/// Nukers ///\r\n\taddress[] private nukerAddress;\r\n\r\n\t\r\n/// Lovers ///\r\n\tstruct LoverStructure {\r\n\t\tmapping(uint256 => mapping(address => uint256)) loves; /// howManyNuked => lover address => number of loves\r\n\t\tmapping(uint256 => uint256) maxLoves; /// highest number of loves for this country\r\n\t\taddress bestLover; /// current best lover for this country (highest number of loves)\r\n\t\t}\r\n\r\n\tmapping(uint256 => mapping(uint256 => LoverStructure)) private loversSTR; /// GameVersion > CountryId > LoverStructure\r\n\tuint256 private mostLovedCountry; /// The mostLovedCountry cannot be nuked if > 4 countries on the map\r\n\t\r\n\tmapping(address => uint256) private firstLove; /// timestamp for loves \r\n\tmapping(address => uint256) private remainingLoves; /// remaining loves for today\r\n\tuint256 private freeRemainingLovesPerDay = 2; /// Number of free loves per day sub 1\r\n\r\n\t\r\n/// Cuts in perthousand /// the rest = potCut\r\n\tuint256 private devCut = 280; /// Including riddles and medals rewards\r\n\tuint256 private playerCut = 20; /// trophy card, best lover & country owner\r\n\tuint256 private potCutSuperCountries = 185;\r\n\t\r\n\r\n/// Jackpot redistribution /// 10 000 = 100%\r\n\tuint256 private lastNukerShare = 5000;\r\n\tuint256 private winningCountryShare = 4400; /// if 1 country stands, the current owner takes it all, otherwise shared between owners of remaining countries (of the winning continent)\r\n\tuint256 private continentShare = 450;\r\n\tuint256 private freePlayerShare = 150;\r\n\r\n\r\n/// Minimal jackpot guarantee /// Initial funding by SuperCountries\t\r\n\tuint256 private lastNukerMin = 3e18; /// 3 ethers\r\n\tuint256 private countryOwnerMin = 3e18; /// 3 ethers\r\n\tuint256 private continentMin = 1e18; /// 1 ether\r\n\tuint256 private freePlayerMin = 1e18; /// 1 ether\r\n\tuint256 private withdrawMinOwner; /// Dev can withdraw his initial funding if the jackpot equals this value.\r\n\r\n\r\n/// Trophy cards\r\n\tuint256 private nextTrophyCardToGetDivs; /// returns next trophy card INDEX to get dividends\r\n\t\r\n\t\r\n/// Countries ///\r\n\tuint256 private allCountriesLength = 256; /// how many countries\r\n\tmapping(uint256 => mapping(uint256 => bool)) private eliminated; /// is this country eliminated? gameVersion > countryId > bool\r\n\tuint256 private howManyEliminated; /// how many eliminated countries\r\n\tuint256 private howManyNuked; /// how many nuked countries\r\n\tuint256 private howManyReactivated; /// players are allowed to reactivate 1 country for 8 nukes\r\n\tuint256 private lastNukedCountry; /// last nuked country ID\r\n\tmapping(uint256 => uint256) lastKnownCountryPrice; ///\r\n\taddress[] private newOwner; /// Latest known country owners /// A new buyer must send at least one love or reanimate its country to be in the array\r\n\r\n/// Continents ///\t\r\n\tmapping(uint256 => uint256) private countryToContinent; /// country Id to Continent Id\r\n\r\n\t\r\n/// Time (seconds) ///\t\r\n\tuint256 public SLONG = 86400; /// 1 day\r\n\tuint256 public DLONG = 172800; /// 2 days\r\n\tuint256 public DSHORT = 14400; /// 4 hrs\r\n\t\r\n\t\r\n\t\r\n\r\n\t\r\n////////////////////////\r\n/// \tEVENTS\t\t ///\t\r\n////////////////////////\r\n\r\n\t/// Pause / UnPause\r\n\tevent PausedOrUnpaused(uint256 indexed blockTimestamp_, bool indexed gameRunning_);\r\n\t\r\n\t/// New Game ///\r\n\tevent NewGameLaunched(uint256 indexed gameVersion_, uint256 indexed blockTimestamp_, address indexed msgSender_, uint256 jackpotTimestamp_);\r\n\tevent ErrorCountry(uint256 indexed countryId_);\r\n\t\r\n\t/// Updates ///\r\n\tevent CutsUpdated(uint256 indexed newDevcut_, uint256 newPlayercut_, uint256 newJackpotCountriescut_, uint256 indexed blockTimestamp_);\t\r\n\tevent ConstantsUpdated(uint256 indexed newStartPrice_, uint256 indexed newkKingPrice_, uint256 newKNext_, uint256 newKCountry_, uint256 newKLimit_, uint256 newkKings, uint256 newMaxFlips);\r\n\tevent NewContractAddress(address indexed newAddress_);\r\n\tevent NewValue(uint256 indexed code_, uint256 indexed newValue_, uint256 indexed blockTimestamp_);\r\n\tevent NewCountryToContinent(uint256 indexed countryId_, uint256 indexed continentId_, uint256 indexed blockTimestamp_);\t\t\r\n\t\r\n\t/// Players Events ///\r\n\tevent PlayerEvent(uint256 indexed eventCode_, uint256 indexed countryId_, address indexed player_, uint256 timestampNow_, uint256 customValue_, uint256 gameId_);\r\n\tevent Nuked(address indexed player_, uint256 indexed lastNukedCountry_, uint256 priceToPay_, uint256 priceRaw_);\t\r\n\tevent Reactivation(uint256 indexed countryId_, uint256 indexed howManyReactivated_);\r\n\tevent NewKingContinent(address indexed player_, uint256 indexed continentId_, uint256 priceToPay_);\r\n\tevent newMostLovedCountry(uint256 indexed countryId_, uint256 indexed maxLovesBest_);\r\n\tevent NewBestLover(address indexed lover_, uint256 indexed countryId_, uint256 maxLovesBest_);\t\r\n\tevent NewLove(address indexed lover_, uint256 indexed countryId_, uint256 playerLoves_, uint256 indexed gameId_, uint256 nukeCount_);\r\n\tevent LastCountryStanding(uint256 indexed countryId_, address indexed player_, uint256 contractBalance_, uint256 indexed gameId_, uint256 jackpotTimestamp);\r\n\tevent ThereIsANewOwner(address indexed newOwner_, uint256 indexed countryId_);\r\n\t\r\n\t/// Payments /// \r\n\tevent CutsPaidInfos(uint256 indexed blockTimestamp_, uint256 indexed countryId_, address countryOwner_, address trophyCardOwner_, address bestLover_);\r\n\tevent CutsPaidValue(uint256 indexed blockTimestamp_, uint256 indexed paidPrice_, uint256 thisBalance_, uint256 devCut_, uint256 playerCut_, uint256 indexed SuperCountriesCut_);\r\n\tevent CutsPaidLight(uint256 indexed blockTimestamp_, uint256 indexed paidPrice_, uint256 thisBalance_, uint256 devCut_, uint256 playerCut_, address trophyCardOwner_, uint256 indexed SuperCountriesCut_);\r\n\tevent NewKingPrice(uint256 indexed kingPrice_, uint256 indexed kKings_);\r\n\t\t\r\n\t/// Jackpot & Withdraws ///\r\n\tevent NewJackpotTimestamp(uint256 indexed jackpotTimestamp_, uint256 indexed timestamp_);\r\n\tevent WithdrawByDev(uint256 indexed blockTimestamp_, uint256 indexed withdrawn_, uint256 indexed withdrawMinOwner_, uint256 jackpot_);\r\n\tevent WithdrawJackpot(address indexed winnerAddress_, uint256 indexed jackpotToTransfer_, uint256 indexed gameVersion_);\t\r\n\tevent JackpotDispatch(address indexed winner, uint256 indexed jackpotShare_, uint256 customValue_, bytes32 indexed customText_);\r\n\tevent JackpotDispatchAll(uint256 indexed gameVersion_, uint256 indexed winningCountry_, uint256 indexed continentId_, uint256 timestampNow_, uint256 jackpotTimestamp_, uint256 pot_,uint256 potDispatched_, uint256 thisBalance);\r\n\r\n\t\r\n\r\n\t\r\n\t\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t\r\n////////////////////////////\r\n/// PUBLIC GET FUNCTIONS ///\r\n////////////////////////////\r\n\r\n/// Checks if a player can nuke or be a king\r\n\tfunction canPlayTimestamp() public view returns (bool ok_){\r\n\t\tuint256 timestampNow = block.timestamp;\r\n\t\tuint256 jT = jackpotTimestamp;\r\n\t\tbool canPlayTimestamp_;\r\n\t\t\r\n\t\t\tif (timestampNow < jT || timestampNow > jT.add(DSHORT)){\r\n\t\t\t\tcanPlayTimestamp_ = true;\t\t\r\n\t\t\t}\r\n\t\t\r\n\t\treturn canPlayTimestamp_;\t\r\n\t}\r\n\r\n\r\n\t\r\n\t\r\n/// When eliminated, the country cannot be eliminated again unless someone rebuys this country\t\r\n\tfunction isEliminated(uint256 _countryId) public view returns (bool isEliminated_){\r\n\t\treturn eliminated[gameVersion][_countryId];\r\n\t}\r\n\r\n\r\n\t\r\n\t\r\n/// The player can love few times a day (or more if loved yesterday)\r\n\tfunction canPlayerLove(address _player) public view returns (bool playerCanLove_){\t\r\n\t\tif (firstLove[_player].add(SLONG) > block.timestamp && remainingLoves[_player] == 0){\r\n\t\t\tbool canLove = false;\r\n\t\t} else canLove = true;\t\r\n\r\n\t\treturn canLove;\r\n\t}\r\n\r\n\t\r\n\t\r\n\t\r\n/// To reanimate a country, a player must rebuy it first on the marketplace then click the reanima button\r\n/// Reanimations are limited: 1 allowed for 8 nukes ; disallowed if only 8 countries on the map\r\n\tfunction canPlayerReanimate(\r\n\t\tuint256 _countryId,\r\n\t\taddress _player\r\n\t)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (bool canReanimate_)\r\n\t{\t\r\n\t\tif (\r\n\t\t\t(lastKnownCountryPrice[_countryId] < getPriceOfCountry(_countryId))\t&&\r\n\t\t\t(isEliminated(_countryId) == true) &&\r\n\t\t\t(_countryId != lastNukedCountry) &&\r\n\t\t\t(block.timestamp.add(SLONG) < jackpotTimestamp || block.timestamp > jackpotTimestamp.add(DSHORT)) &&\r\n\t\t\t(allCountriesLength.sub(howManyEliminated) > 8) && /// If only 8 countries left, no more reactivation allowed even if other requires could allow\r\n\t\t\t((howManyReactivated.add(1)).mul(8) < howManyNuked) && /// 1 reactivation for 8 Nukes\r\n\t\t\t(lastKnownCountryPrice[_countryId] > 0) &&\r\n\t\t\t(_player == getCountryOwner(_countryId))\r\n\t\t\t) {\r\n\t\t\t\tbool canReanima = true;\t\t\t\t\r\n\t\t\t} else canReanima = false;\t\t\r\n\t\t\r\n\t\treturn canReanima;\r\n\t}\t\r\n\r\n\t\r\n\t\r\n\t\r\n/// Get the current gameVersion\t\r\n\tfunction constant_getGameVersion() public view returns (uint256 currentGameVersion_){\r\n\t\treturn gameVersion;\r\n\t}\r\n\r\n\r\n\t\r\n\t\r\n/// Returns some useful informations for a country\r\n\tfunction country_getInfoForCountry(uint256 _countryId) \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (\r\n\t\t\tbool eliminatedBool_,\r\n\t\t\tuint256 whichContinent_,\r\n\t\t\taddress currentBestLover_,\r\n\t\t\tuint256 maxLovesForTheBest_,\r\n\t\t\taddress countryOwner_,\r\n\t\t\tuint256 lastKnownPrice_\r\n\t\t) \r\n\t{\t\t\r\n\t\tLoverStructure storage c = loversSTR[gameVersion][_countryId];\r\n\t\tif (eliminated[gameVersion][_countryId]){uint256 nukecount = howManyNuked.sub(1);} else nukecount = howManyNuked;\r\n\t\t\r\n\t\treturn (\r\n\t\t\teliminated[gameVersion][_countryId],\r\n\t\t\tcountryToContinent[_countryId],\r\n\t\t\tc.bestLover,\r\n\t\t\tc.maxLoves[nukecount],\r\n\t\t\tnewOwner[_countryId],\r\n\t\t\tlastKnownCountryPrice[_countryId]\r\n\t\t);\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t\r\n/// Returns the number of loves\r\n\tfunction loves_getLoves(uint256 _countryId, address _player) public view returns (uint256 loves_) {\t\t\t\t\r\n\t\tLoverStructure storage c = loversSTR[gameVersion][_countryId];\r\n\t\treturn c.loves[howManyNuked][_player];\r\n\t}\r\n\r\n\t\r\n\t\r\n\t\r\n/// Returns the number of loves of a player for a country for an old gameId for howManyNukedId (loves reset after each nuke)\r\n\tfunction loves_getOldLoves(\r\n\t\tuint256 _countryId,\r\n\t\taddress _player,\r\n\t\tuint256 _gameId,\r\n\t\tuint256 _oldHowManyNuked\r\n\t) \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (uint256 loves_) \r\n\t{\t\t\r\n\t\treturn loversSTR[_gameId][_countryId].loves[_oldHowManyNuked][_player];\r\n\t}\r\n\r\n\t\r\n\t\r\n\t\r\n/// Calculate how many loves left for a player for today\r\n\tfunction loves_getPlayerInfo(address _player) \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (\r\n\t\t\tuint256 playerFirstLove_,\r\n\t\t\tuint256 playerRemainingLoves_,\r\n\t\t\tuint256 realRemainingLoves_\r\n\t\t) \r\n\t{\r\n\t\tuint256 timestampNow = block.timestamp;\r\n\t\tuint256 firstLoveAdd24 = firstLove[_player].add(SLONG);\r\n\t\tuint256 firstLoveAdd48 = firstLove[_player].add(DLONG);\r\n\t\tuint256 remainStored = remainingLoves[_player];\r\n\t\t\r\n\t\t/// This player loved today but has some loves left, remainingLoves are correct\r\n\t\tif (firstLoveAdd24 > timestampNow && remainStored > 0){\r\n\t\t\tuint256 remainReal = remainStored;\r\n\t\t}\r\n\t\t\t/// This player loved yesterday but not today, he can love \"howManyEliminated.div(4)\" + \"freeRemainingLovesPerDay + 1\" times today\r\n\t\t\telse if (firstLoveAdd24 < timestampNow && firstLoveAdd48 > timestampNow){\r\n\t\t\t\tremainReal = (howManyEliminated.div(4)).add(freeRemainingLovesPerDay).add(1);\r\n\t\t\t}\t\t\r\n\t\t\t\t/// This player didn't love for 48h, he can love \"freeRemainingLovesPerDay + 1\" today\r\n\t\t\t\telse if (firstLoveAdd48 < timestampNow){\r\n\t\t\t\t\tremainReal = freeRemainingLovesPerDay.add(1);\r\n\t\t\t\t}\t\t\r\n\t\t\t\t\telse remainReal = 0;\r\n\t\t\t\r\n\t\treturn (\r\n\t\t\tfirstLove[_player],\r\n\t\t\tremainStored,\r\n\t\t\tremainReal\r\n\t\t); \r\n\t}\r\n\r\n\t\r\n\t\r\n\r\n/// Returns the unwithdrawn jackpot of a player for a GameId\r\n\tfunction player_getPlayerJackpot(\r\n\t\taddress _player,\r\n\t\tuint256 _gameId\r\n\t) \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (\r\n\t\t\tuint256 playerNowPot_,\r\n\t\t\tuint256 playerOldPot_\r\n\t\t)\r\n\t{\r\n\t\treturn (\r\n\t\t\twinnersJackpot[gameVersion][_player],\r\n\t\t\twinnersJackpot[_gameId][_player]\r\n\t\t);\r\n\t}\t\r\n\r\n\r\n\t\r\n\t\r\n/// Returns informations for a country for previous games\t\r\n\tfunction country_getOldInfoForCountry(uint256 _countryId, uint256 _gameId)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tbool oldEliminatedBool_,\r\n\t\t\tuint256 oldMaxLovesForTheBest_\r\n\t\t) \r\n\t{\t\r\n\t\tLoverStructure storage c = loversSTR[_gameId][_countryId];\r\n\t\t\r\n\t\treturn (\r\n\t\t\teliminated[_gameId][_countryId],\r\n\t\t\tc.maxLoves[howManyNuked]\r\n\t\t\t);\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t\r\n/// Returns informations for a country for previous games requiring more parameters\t\r\n\tfunction loves_getOldNukesMaxLoves(\r\n\t\tuint256 _countryId,\r\n\t\tuint256 _gameId,\r\n\t\tuint256 _howManyNuked\r\n\t) \r\n\t\tpublic view returns (uint256 oldMaxLovesForTheBest2_)\r\n\t{\t\t\r\n\t\treturn (loversSTR[_gameId][_countryId].maxLoves[_howManyNuked]);\r\n\t}\t\r\n\t\r\n\r\n\t\r\n\r\n/// Returns other informations for a country for previous games\t\r\n\tfunction country_getCountriesGeneralInfo()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 lastNuked_,\r\n\t\t\taddress lastNukerAddress_,\r\n\t\t\tuint256 allCountriesLength_,\r\n\t\t\tuint256 howManyEliminated_,\r\n\t\t\tuint256 howManyNuked_,\r\n\t\t\tuint256 howManyReactivated_,\r\n\t\t\tuint256 mostLovedNation_\r\n\t\t) \r\n\t{\t\t\r\n\t\treturn (\r\n\t\t\tlastNukedCountry,\r\n\t\t\tnukerAddress[lastNukedCountry],\r\n\t\t\tallCountriesLength,\t\t\t\r\n\t\t\thowManyEliminated,\r\n\t\t\thowManyNuked,\r\n\t\t\thowManyReactivated,\r\n\t\t\tmostLovedCountry\r\n\t\t\t);\r\n\t}\r\n\r\n\r\n\t\r\n\t\r\n/// Get the address of the king for a continent\t\r\n\tfunction player_getKingOne(uint256 _continentId) public view returns (address king_) {\t\t\r\n\t\treturn continentKing[_continentId];\r\n\t}\r\n\r\n\t\r\n\r\n\t\r\n/// Return all kings\t\r\n\tfunction player_getKingsAll() public view returns (address[] _kings) {\t\r\n\t\t\r\n\t\tuint256 kingsLength = continentKing.length;\r\n\t\taddress[] memory kings = new address[](kingsLength);\r\n\t\tuint256 kingsCounter = 0;\r\n\t\t\t\r\n\t\tfor (uint256 i = 0; i < kingsLength; i++) {\r\n\t\t\tkings[kingsCounter] = continentKing[i];\r\n\t\t\tkingsCounter++;\t\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn kings;\r\n\t}\r\n\t\r\n\r\n\t\r\n\r\n/// Return lengths of arrays\r\n\tfunction constant_getLength()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 kingsLength_,\r\n\t\t\tuint256 newOwnerLength_,\r\n\t\t\tuint256 nukerLength_\r\n\t\t)\r\n\t{\t\t\r\n\t\treturn (\r\n\t\t\tcontinentKing.length,\r\n\t\t\tnewOwner.length,\r\n\t\t\tnukerAddress.length\r\n\t\t);\r\n\t}\r\n\r\n\t\r\n\t\r\n\r\n/// Return the nuker's address - If a country was nuked twice (for example after a reanimation), we store the last nuker only\r\n\tfunction player_getNuker(uint256 _countryId) public view returns (address nuker_) {\t\t\r\n\t\treturn nukerAddress[_countryId];\t\t\r\n\t}\r\n\r\n\t\r\n\t\r\n\t\r\n/// How many countries were nuked by a player? \r\n/// Warning: if a country was nuked twice (for example after a reanimation), only the last nuker counts\r\n\tfunction player_howManyNuked(address _player) public view returns (uint256 nukeCount_) {\t\t\r\n\t\tuint256 counter = 0;\r\n\r\n\t\tfor (uint256 i = 0; i < nukerAddress.length; i++) {\r\n\t\t\tif (nukerAddress[i] == _player) {\r\n\t\t\t\tcounter++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn counter;\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t\r\n/// Which countries were nuked by a player?\t\r\n\tfunction player_getNukedCountries(address _player) public view returns (uint256[] myNukedCountriesIds_) {\t\t\r\n\t\t\r\n\t\tuint256 howLong = player_howManyNuked(_player);\r\n\t\tuint256[] memory myNukedCountries = new uint256[](howLong);\r\n\t\tuint256 nukeCounter = 0;\r\n\t\t\r\n\t\tfor (uint256 i = 0; i < allCountriesLength; i++) {\r\n\t\t\tif (nukerAddress[i] == _player){\r\n\t\t\t\tmyNukedCountries[nukeCounter] = i;\r\n\t\t\t\tnukeCounter++;\r\n\t\t\t}\r\n\r\n\t\t\tif (nukeCounter == howLong){break;}\r\n\t\t}\r\n\t\t\r\n\t\treturn myNukedCountries;\r\n\t}\r\n\r\n\r\n\t\r\n\t\r\n/// Which percentage of the jackpot will the winners share?\r\n\tfunction constant_getPriZZZes() \r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (\r\n\t\t\tuint256 lastNukeShare_,\r\n\t\t\tuint256 countryOwnShare_,\r\n\t\t\tuint256 contintShare_,\r\n\t\t\tuint256 freePlayerShare_\r\n\t\t) \r\n\t{\r\n\t\treturn (\r\n\t\t\tlastNukerShare,\r\n\t\t\twinningCountryShare,\r\n\t\t\tcontinentShare,\r\n\t\t\tfreePlayerShare\r\n\t\t);\r\n\t}\r\n\r\n\t\r\n\t\t\r\n\t\r\n/// Returns the minimal jackpot part for each winner (if accurate)\r\n/// Only accurate for the first game. If new games are started later, these values will be set to 0\r\n\tfunction constant_getPriZZZesMini()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 lastNukeMini_,\r\n\t\t\tuint256 countryOwnMini_,\r\n\t\t\tuint256 contintMini_,\r\n\t\t\tuint256 freePlayerMini_,\r\n\t\t\tuint256 withdrMinOwner_\r\n\t\t)\r\n\t{\r\n\t\treturn (\r\n\t\t\tlastNukerMin,\r\n\t\t\tcountryOwnerMin,\r\n\t\t\tcontinentMin,\r\n\t\t\tfreePlayerMin,\r\n\t\t\twithdrawMinOwner\r\n\t\t);\r\n\t}\r\n\r\n\t\r\n\t\r\n\r\n/// Returns some values for the current game\t\r\n\tfunction constant_getPrices()\r\n\t\tpublic \r\n\t\tview \r\n\t\treturns (\r\n\t\t\tuint256 nextPrice_,\r\n\t\t\tuint256 startingPrice_,\r\n\t\t\tuint256 kingPrice_,\r\n\t\t\tuint256 kNext_,\r\n\t\t\tuint256 kCountry_,\r\n\t\t\tuint256 kCountryLimit_,\r\n\t\t\tuint256 kKings_)\r\n\t{\r\n\t\treturn (\r\n\t\t\tnextPrice[gameVersion],\r\n\t\t\tstartingPrice,\r\n\t\t\tkingPrice,\r\n\t\t\tkNext,\r\n\t\t\tkCountry,\r\n\t\t\tkCountryLimit,\r\n\t\t\tkKings\r\n\t\t);\r\n\t}\r\n\r\n\t\r\n\t\r\n\t\r\n/// Returns other values for the current game\r\n\tfunction constant_getSomeDetails()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tbool gameRunng_,\r\n\t\t\tuint256 currentContractBalance_,\r\n\t\t\tuint256 jackptTimstmp_,\r\n\t\t\tuint256 maxFlip_,\r\n\t\t\tuint256 continentFlip_,\r\n\t\t\tbool jackpotNotWonYet_) \r\n\t{\r\n\t\treturn (\r\n\t\t\tgameRunning,\r\n\t\t\taddress(this).balance,\r\n\t\t\tjackpotTimestamp,\r\n\t\t\tmaxFlips,\r\n\t\t\tcontinentFlips,\r\n\t\t\tthisJackpotIsPlayedAndNotWon[gameVersion]\r\n\t\t);\r\n\t}\r\n\r\n\t\r\n\t\r\n\r\n/// Returns some values for previous games\t\r\n\tfunction constant_getOldDetails(uint256 _gameId)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 oldWinningCountry_,\r\n\t\t\tbool oldJackpotBool_,\r\n\t\t\tuint256 oldNextPrice_\r\n\t\t) \r\n\t{\r\n\t\treturn (\r\n\t\t\twinningCountry[_gameId],\r\n\t\t\tthisJackpotIsPlayedAndNotWon[_gameId],\r\n\t\t\tnextPrice[_gameId]\r\n\t\t);\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t\r\n/// Returns cuts\r\n\tfunction constant_getCuts()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 playerCut_,\r\n\t\t\tuint256 potCutSC,\r\n\t\t\tuint256 developerCut_)\r\n\t{\r\n\t\treturn (\r\n\t\t\tplayerCut,\r\n\t\t\tpotCutSuperCountries,\r\n\t\t\tdevCut\r\n\t\t);\r\n\t}\r\n\r\n\t\r\n\t\r\n\r\n/// Returns linked contracts addresses: SuperCountries core contract, Trophy Cards Contract\r\n\tfunction constant_getContracts() public view returns (address SuperCountries_, address TrophyCards_) {\r\n\t\treturn (contractSC, contractTrophyCards);\r\n\t}\t\r\n\r\n\r\n\t\r\n\t\r\n/// Calculates the raw price of a next nuke\r\n/// This value will be used to calculate a nuke price for a specified country depending of its market price\r\n\tfunction war_getNextNukePriceRaw() public view returns (uint256 price_) {\r\n\t\t\r\n\t\tif (nextPrice[gameVersion] != 0) {\r\n\t\t\tuint256 price = nextPrice[gameVersion];\r\n\t\t}\r\n\t\t\telse price = startingPrice;\r\n\t\t\r\n\t\treturn price;\t\t\r\n\t}\r\n\r\n\t\r\n\t\r\n\t\t\r\n/// Calculates the exact price to nuke a country using the raw price (calculated above) and the market price of a country\r\n\tfunction war_getNextNukePriceForCountry(uint256 _countryId) public view returns (uint256 priceOfThisCountry_) {\r\n\r\n\t\tuint256 priceRaw = war_getNextNukePriceRaw();\r\n\t\tuint256 k = lastKnownCountryPrice[_countryId].mul(kCountry).div(100);\r\n\t\t\r\n\t\tif (k > kCountryLimit){\r\n\t\t\tuint256 priceOfThisCountry = priceRaw.add(kCountryLimit);\r\n\t\t}\r\n\t\t\telse priceOfThisCountry = priceRaw.add(k);\t\t\t\t\r\n\t\r\n\t\treturn priceOfThisCountry;\t\t\r\n\t}\r\n\t\r\n\r\n\t\r\n\r\n/// Returns all countries for a continent\r\n\tfunction country_getAllCountriesForContinent(uint256 _continentId) public view returns (uint256[] countries_) {\t\t\t\t\t\r\n\t\t\r\n\t\tuint256 howManyCountries = country_countCountriesForContinent(_continentId);\r\n\t\tuint256[] memory countries = new uint256[](howManyCountries);\r\n\t\tuint256 countryCounter = 0;\r\n\t\t\t\t\r\n\t\tfor (uint256 i = 0; i < allCountriesLength; i++) {\r\n\t\t\tif (countryToContinent[i] == _continentId){\r\n\t\t\t\tcountries[countryCounter] = i;\r\n\t\t\t\tcountryCounter++;\t\t\t\t\t\t\r\n\t\t\t}\t\r\n\t\t\t\tif (countryCounter == howManyCountries){break;}\r\n\t\t}\r\n\r\n\t\treturn countries;\r\n\t}\r\n\r\n\t\r\n\r\n\t\r\n/// Count all countries for a continent (standing and non standing)\r\n\tfunction country_countCountriesForContinent(uint256 _continentId) public view returns (uint256 howManyCountries_) {\r\n\t\tuint256 countryCounter = 0;\r\n\t\t\t\t\r\n\t\tfor (uint256 i = 0; i < allCountriesLength; i++) {\r\n\t\t\tif (countryToContinent[i] == _continentId){\r\n\t\t\t\tcountryCounter++;\t\t\t\t\t\t\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn countryCounter;\r\n\t}\t\r\n\r\n\r\n\t\r\n\t\t\r\n/// Return the ID of all STANDING countries for a continent (or not Standing if FALSE)\r\n\tfunction country_getAllStandingCountriesForContinent(\r\n\t\tuint256 _continentId,\r\n\t\tbool _standing\r\n\t) \r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256[] countries_)\r\n\t{\t\t\t\t\t\r\n\t\tuint256 howManyCountries = country_countStandingCountriesForContinent(_continentId, _standing);\r\n\t\tuint256[] memory countries = new uint256[](howManyCountries);\r\n\t\tuint256 countryCounter = 0;\r\n\t\tuint256 gameId = gameVersion;\r\n\t\t\t\t\r\n\t\tfor (uint256 i = 0; i < allCountriesLength; i++) {\r\n\t\t\tif (countryToContinent[i] == _continentId && eliminated[gameId][i] != _standing){\r\n\t\t\t\tcountries[countryCounter] = i;\r\n\t\t\t\tcountryCounter++;\t\t\t\t\t\t\r\n\t\t\t}\t\r\n\t\t\t\tif (countryCounter == howManyCountries){break;}\r\n\t\t}\r\n\r\n\t\treturn countries;\r\n\t}\t\r\n\r\n\t\r\n\r\n\r\n/// Count all STANDING countries for a continent (or not Standing if FALSE)\t\r\n\tfunction country_countStandingCountriesForContinent(\r\n\t\tuint256 _continentId,\r\n\t\tbool _standing\r\n\t)\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (uint256 howManyCountries_)\r\n\t{\r\n\t\tuint256 standingCountryCounter = 0;\r\n\t\tuint256 gameId = gameVersion;\r\n\t\t\t\t\r\n\t\tfor (uint256 i = 0; i < allCountriesLength; i++) {\r\n\t\t\tif (countryToContinent[i] == _continentId && eliminated[gameId][i] != _standing){\r\n\t\t\t\tstandingCountryCounter++;\t\t\t\t\t\t\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn standingCountryCounter;\r\n\t}\r\n\r\n\r\n\t\r\n\t\r\n/// Calculate the jackpot to share between all winners\r\n/// realJackpot: the real value to use when sharing\r\n/// expected: this is the jackpot as we should expect if there was no minimal guarantee. It can be different from the real one if we have not reached the minimal value yet. \r\n/// WARNING: between the real and the expected, the REAL one is the only value to use ; the expected one is for information only and will never be used in any calculation\r\n\tfunction calculateJackpot()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 nukerJackpot_,\r\n\t\t\tuint256 countryJackpot_,\r\n\t\t\tuint256 continentJackpot_,\r\n\t\t\tuint256 freeJackpot_,\r\n\t\t\tuint256 realJackpot_,\r\n\t\t\tuint256 expectedJackpot_\r\n\t\t)\r\n\t{\r\n\t\t/// If thisJackpot = false, that would mean it was already won or not yet played,\r\n\t\t///\tif true it's currently played and not won yet\r\n\t\tif (thisJackpotIsPlayedAndNotWon[gameVersion] != true) {\r\n\t\t\tuint256 nukerJPT = 0;\r\n\t\t\tuint256 countryJPT = 0;\r\n\t\t\tuint256 continentJPT = 0;\r\n\t\t\tuint256 freeJPT = 0;\r\n\t\t\tuint256 realJackpotToShare = 0;\r\n\t\t\tuint256 expectedJackpotFromRates = 0;\r\n\t\t}\r\n\t\t\r\n\t\t\telse {\r\n\t\t\t\tuint256 devGift = lastNukerMin.add(countryOwnerMin).add(continentMin).add(freePlayerMin);\r\n\t\t\t\texpectedJackpotFromRates = ((address(this).balance).add(withdrawMinOwner).sub(devGift)).div(10000);\r\n\t\t\t\t\r\n\t\t\t\t\tuint256 temp_share = expectedJackpotFromRates.mul(lastNukerShare);\r\n\t\t\t\t\tif (temp_share > lastNukerMin){\r\n\t\t\t\t\t\tnukerJPT = temp_share;\r\n\t\t\t\t\t} else nukerJPT = lastNukerMin;\r\n\t\t\t\t\t\r\n\t\t\t\t\ttemp_share = expectedJackpotFromRates.mul(winningCountryShare);\r\n\t\t\t\t\tif (temp_share > countryOwnerMin){\r\n\t\t\t\t\t\tcountryJPT = temp_share;\r\n\t\t\t\t\t} else countryJPT = countryOwnerMin;\r\n\r\n\t\t\t\t\ttemp_share = expectedJackpotFromRates.mul(continentShare);\r\n\t\t\t\t\tif (temp_share > continentMin){\r\n\t\t\t\t\t\tcontinentJPT = temp_share;\r\n\t\t\t\t\t} else continentJPT = continentMin;\r\n\r\n\t\t\t\t\ttemp_share = expectedJackpotFromRates.mul(freePlayerShare);\r\n\t\t\t\t\tif (temp_share > freePlayerMin){\r\n\t\t\t\t\t\tfreeJPT = temp_share;\r\n\t\t\t\t\t} else freeJPT = freePlayerMin;\t\t\r\n\t\t\t\t\r\n\t\t\t\t\trealJackpotToShare = nukerJPT.add(countryJPT).add(continentJPT).add(freeJPT);\r\n\t\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\tnukerJPT,\r\n\t\t\tcountryJPT,\r\n\t\t\tcontinentJPT,\r\n\t\t\tfreeJPT,\r\n\t\t\trealJackpotToShare,\r\n\t\t\texpectedJackpotFromRates.mul(10000)\r\n\t\t);\t\r\n\t}\r\n\r\n\r\n\t\r\n\r\n/// Calculate how much the dev can withdraw now\r\n/// If the dev funded a minimal guarantee, he can withdraw gradually its funding when jackpot rises up to its funding amount\r\n\tfunction whatDevCanWithdraw() public view returns(uint256 toWithdrawByDev_){\r\n\t\tuint256 devGift = lastNukerMin.add(countryOwnerMin).add(continentMin).add(freePlayerMin);\r\n\t\tuint256 balance = address(this).balance;\r\n\t\t\r\n\t\t(,,,,uint256 jackpotToDispatch,) = calculateJackpot();\r\n\t\tuint256 leftToWithdraw = devGift.sub(withdrawMinOwner);\r\n\t\tuint256 leftInTheContract = balance.sub(jackpotToDispatch);\r\n\t\t\t\r\n\t\tif (leftToWithdraw > 0 && balance > jackpotToDispatch){\r\n\t\t\t/// ok he can still withdraw\r\n\t\t\tif (leftInTheContract > leftToWithdraw){\r\n\t\t\t\tuint256 devToWithdraw = leftToWithdraw;\t\t\t\t\r\n\t\t\t} else devToWithdraw = leftInTheContract;\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn devToWithdraw;\r\n\t}\r\n\r\n\r\n\r\n\r\n\t\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t\r\n//////////////////////////\r\n/// INTERNAL FUNCTIONS ///\r\n//////////////////////////\r\n\r\n/// Heavy pay function for Nukes ///\r\n\tfunction payCuts(\r\n\t\tuint256 _value,\r\n\t\tuint256 _balance,\r\n\t\tuint256 _countryId,\r\n\t\tuint256 _timestamp\r\n\t) \r\n\t\tinternal\r\n\t{\r\n\t\trequire(_value <= _balance);\r\n\t\trequire(_value != 0);\r\n\t\t\r\n\t\t/// Get the next trophy card owner to send cuts\r\n\t\taddress nextTrophyOwner = nextTrophyCardUpdateAndGetOwner();\r\n\t\t\r\n\t\t\tif (nextTrophyOwner == 0) {\r\n\t\t\t\tnextTrophyOwner = owner;\r\n\t\t\t}\r\n\t\t\r\n\t\t\r\n\t\t/// Get the country owner to send cuts\r\n\t\taddress countryOwner = newOwner[_countryId];\r\n\t\t\r\n\t\t\tif (countryOwner == 0) {\r\n\t\t\t\tcountryOwner = owner;\r\n\t\t\t}\t\t\r\n\r\n\t\t\t\r\n\t\t/// Get the best lover to send cuts\r\n\t\taddress bestLoverToGetDivs = loversSTR[gameVersion][_countryId].bestLover;\r\n\t\t\r\n\t\t\tif (bestLoverToGetDivs == 0) {\r\n\t\t\t\tbestLoverToGetDivs = owner;\r\n\t\t\t}\r\n\r\n\t\t\t\r\n\t\t/// Calculate cuts\r\n\t\tuint256 devCutPay = _value.mul(devCut).div(1000);\r\n\t\tuint256 superCountriesPotCutPay = _value.mul(potCutSuperCountries).div(1000);\r\n\t\tuint256 trophyAndOwnerCutPay = _value.mul(playerCut).div(1000);\r\n\t\t\r\n\t\t\r\n\t\t/// Pay cuts ///\t\t\t\r\n\t\towner.transfer(devCutPay);\r\n\t\tcontractSC.transfer(superCountriesPotCutPay);\r\n\t\tnextTrophyOwner.transfer(trophyAndOwnerCutPay);\r\n\t\tcountryOwner.transfer(trophyAndOwnerCutPay);\r\n\t\tbestLoverToGetDivs.transfer(trophyAndOwnerCutPay);\r\n\t\t\r\n\t\temit CutsPaidInfos(_timestamp, _countryId, countryOwner, nextTrophyOwner, bestLoverToGetDivs);\r\n\t\temit CutsPaidValue(_timestamp, _value, address(this).balance, devCutPay, trophyAndOwnerCutPay, superCountriesPotCutPay);\r\n\t\t\r\n\t\tassert(_balance.sub(_value) <= address(this).balance); \r\n\t\tassert((trophyAndOwnerCutPay.mul(3).add(devCutPay).add(superCountriesPotCutPay)) < _value);\t\r\n\t}\r\n\r\n\r\n\r\n/// Light pay function for Kings ///\r\n\tfunction payCutsLight(\r\n\t\tuint256 _value,\r\n\t\tuint256 _balance,\r\n\t\tuint256 _timestamp\r\n\t) \r\n\t\tinternal\r\n\t{\r\n\t\trequire(_value <= _balance);\r\n\t\trequire(_value != 0);\t\t\r\n\r\n\t\t/// Get the next trophy card owner to send cuts\r\n\t\taddress nextTrophyOwner = nextTrophyCardUpdateAndGetOwner();\r\n\t\t\r\n\t\t\tif (nextTrophyOwner == 0) {\r\n\t\t\t\tnextTrophyOwner = owner;\r\n\t\t\t}\r\n\r\n\t\t/// Get the last nuker to send cuts\r\n\t\taddress lastNuker = nukerAddress[lastNukedCountry];\r\n\t\t\r\n\t\t\tif (lastNuker == 0) {\r\n\t\t\t\tlastNuker = owner;\r\n\t\t\t}\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t/// Calculate cuts\r\n\t\tuint256 trophyCutPay = _value.mul(playerCut).div(1000);\r\n\t\tuint256 superCountriesPotCutPay = ((_value.mul(potCutSuperCountries).div(1000)).add(trophyCutPay)).div(2); /// Divide by 2: one part for SCPot, one for lastNuker\r\n\t\tuint256 devCutPay = (_value.mul(devCut).div(1000)).add(trophyCutPay);\t\t\t\r\n\r\n\t\t\r\n\t\t/// Pay cuts ///\t\t\t\r\n\t\towner.transfer(devCutPay);\r\n\t\tcontractSC.transfer(superCountriesPotCutPay);\r\n\t\tlastNuker.transfer(superCountriesPotCutPay);\r\n\t\tnextTrophyOwner.transfer(trophyCutPay);\r\n\t\t\r\n\t\temit CutsPaidLight(_timestamp, _value, address(this).balance, devCutPay, trophyCutPay, nextTrophyOwner, superCountriesPotCutPay);\r\n\t\t\r\n\t\tassert(_balance.sub(_value) <= address(this).balance); \r\n\t\tassert((trophyCutPay.add(devCutPay).add(superCountriesPotCutPay)) < _value);\r\n\t}\r\n\t\r\n\r\n\t\r\n/// Refund the nuker / new king if excess\r\n\tfunction excessRefund(\r\n\t\taddress _payer,\r\n\t\tuint256 _priceToPay,\r\n\t\tuint256 paidPrice\r\n\t) \r\n\t\tinternal\r\n\t{\t\t\r\n\t\tuint256 excess = paidPrice.sub(_priceToPay);\r\n\t\t\r\n\t\tif (excess > 0) {\r\n\t\t\t_payer.transfer(excess);\r\n\t\t}\r\n\t}\t\t\r\n\t\r\n\t\r\n\t\r\n/// Update the jackpot timestamp each time a country is nuked or a new king crowned\t\r\n\tfunction updateJackpotTimestamp(uint256 _timestamp) internal {\t\t\r\n\r\n\t\tjackpotTimestamp = _timestamp.add(604800);  /// 1 week\r\n\t\t\r\n\t\temit NewJackpotTimestamp(jackpotTimestamp, _timestamp);\t\t\t\r\n\t}\r\n\r\n\r\n\r\n/// If first love > 24h, the player can love again\r\n/// and get extra loves if loved yesterday\r\n\tfunction updateLovesForToday(address _player, uint256 _timestampNow) internal {\t\t\r\n\t\t\r\n\t\tuint256 firstLoveAdd24 = firstLove[_player].add(SLONG);\r\n\t\tuint256 firstLoveAdd48 = firstLove[_player].add(DLONG);\r\n\t\tuint256 remainV = remainingLoves[_player];\r\n\t\t\r\n\t\t/// This player loved today but has some loves left\r\n\t\tif (firstLoveAdd24 > _timestampNow && remainV > 0){\r\n\t\t\tremainingLoves[_player] = remainV.sub(1);\r\n\t\t}\r\n\t\t\t/// This player loved yesterday but not today\r\n\t\t\telse if (firstLoveAdd24 < _timestampNow && firstLoveAdd48 > _timestampNow){\r\n\t\t\t\tremainingLoves[_player] = (howManyEliminated.div(4)).add(freeRemainingLovesPerDay);\r\n\t\t\t\tfirstLove[_player] = _timestampNow;\r\n\t\t\t}\r\n\t\t\r\n\t\t\t\t/// This player didn't love for 48h, he can love today\r\n\t\t\t\telse if (firstLoveAdd48 < _timestampNow){\r\n\t\t\t\t\tremainingLoves[_player] = freeRemainingLovesPerDay;\r\n\t\t\t\t\tfirstLove[_player] = _timestampNow;\r\n\t\t\t\t}\t\r\n\t\t\t\t\t/// This player is a zombie\r\n\t\t\t\t\telse remainingLoves[_player] = 0;\r\n\r\n\t}\r\n\r\n\t\r\n\t\r\n\t\r\n\t\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t\r\n////////////////////////////////////\r\n/// \tWAR - PUBLIC FUNCTIONS\t ///\r\n////////////////////////////////////\r\n\r\n//////////////////////\r\n/// NUKE A COUNTRY ///\r\n//////////////////////\r\n\tfunction nuke(uint256 _countryId) payable public onlyGameNOTPaused{\r\n\t\trequire(_countryId < allCountriesLength);\r\n\t\trequire(msg.value >= war_getNextNukePriceForCountry(_countryId)); \r\n\t\trequire(war_getNextNukePriceForCountry(_countryId) > 0); \r\n\t\trequire(isEliminated(_countryId) == false);\r\n\t\trequire(canPlayTimestamp()); /// Impossible to nuke 2 hours after the jackpot\r\n\t\trequire(loversSTR[gameVersion][_countryId].bestLover != msg.sender); /// The best lover cannot nuke his favorite country\r\n\t\trequire(_countryId != mostLovedCountry || allCountriesLength.sub(howManyEliminated) < 5); /// We cannot nuke the mostLovedCountry if more than 4 countries stand\r\n\t\t\t\t\r\n\t\taddress player = msg.sender;\r\n\t\tuint256 timestampNow = block.timestamp;\r\n\t\tuint256 gameId = gameVersion;\r\n\t\tuint256 thisBalance = address(this).balance;\t\t\r\n\t\tuint256 priceToPay = war_getNextNukePriceForCountry(_countryId);\r\n\t\t\r\n\t\t/// Update the latest nuker of the game in the nukerAddress array\r\n\t\tnukerAddress[_countryId] = player;\r\n\t\t\r\n\t\t/// Get last known price of this country for next time\r\n\t\tuint256 lastPriceOld = lastKnownCountryPrice[_countryId];\r\n\t\tlastKnownCountryPrice[_countryId] = getPriceOfCountry(_countryId);\r\n\t\t\r\n\t\t/// Change the activation of this country\r\n\t\teliminated[gameId][_countryId] = true;\r\n\t\thowManyEliminated++;\r\n\t\t\r\n\t\tif (howManyEliminated.add(1) == allCountriesLength){\r\n\t\t\tjackpotTimestamp = block.timestamp;\r\n\t\t\temit LastCountryStanding(_countryId, player, thisBalance, gameId, jackpotTimestamp);\r\n\t\t}\t\r\n\t\t\telse {\r\n\t\t\t\t/// Update next price\r\n\t\t\t\tuint priceRaw = war_getNextNukePriceRaw();\t\t\t\r\n\t\t\t\tnextPrice[gameId] = priceRaw.mul(kNext).div(1000);\r\n\t\t\t\t\r\n\t\t\t\t/// and update the jackpot\r\n\t\t\t\tupdateJackpotTimestamp(timestampNow);\r\n\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\tlastNukedCountry = _countryId;\t\t\r\n\t\tpayCuts(priceToPay, thisBalance, _countryId, timestampNow);\r\n\t\texcessRefund(player, priceToPay, msg.value);\r\n\t\thowManyNuked++;\r\n\t\t\r\n\t\t/// emit the event\r\n\t\temit Nuked(player, _countryId, priceToPay, priceRaw);\r\n\t\temit PlayerEvent(1, _countryId, player, timestampNow, howManyEliminated, gameId);\r\n\r\n\t\tassert(lastKnownCountryPrice[_countryId] >= lastPriceOld);\r\n\t}\r\n\r\n\t\r\n\t\r\n///////////////////////////\r\n/// REANIMATE A COUNTRY ///\r\n///////////////////////////\t\r\n\tfunction reanimateCountry(uint256 _countryId) public onlyGameNOTPaused{\r\n\t\trequire(canPlayerReanimate(_countryId, msg.sender) == true);\r\n\t\t\r\n\t\taddress player = msg.sender;\r\n\t\teliminated[gameVersion][_countryId] = false;\r\n\t\t\r\n\t\tnewOwner[_countryId] = player;\r\n\t\t\r\n\t\thowManyEliminated = howManyEliminated.sub(1);\r\n\t\thowManyReactivated++;\r\n\t\t\r\n\t\temit Reactivation(_countryId, howManyReactivated);\r\n\t\temit PlayerEvent(2, _countryId, player, block.timestamp, howManyEliminated, gameVersion);\t\t\r\n\t} \r\n\r\n\r\n\r\n/////////////////////\r\n/// BECOME A KING ///\r\n/////////////////////\t\t\r\n\tfunction becomeNewKing(uint256 _continentId) payable public onlyGameNOTPaused{\r\n\t\trequire(msg.value >= kingPrice);\r\n\t\trequire(canPlayTimestamp()); /// Impossible to play 2 hours after the jackpot\r\n\t\t\t\t\r\n\t\taddress player = msg.sender;\r\n\t\tuint256 timestampNow = block.timestamp;\r\n\t\tuint256 gameId = gameVersion;\r\n\t\tuint256 thisBalance = address(this).balance;\r\n\t\tuint256 priceToPay = kingPrice;\r\n\t\t\r\n\t\tcontinentKing[_continentId] = player;\r\n\t\t\r\n\t\tupdateJackpotTimestamp(timestampNow);\r\n\r\n\t\tif (continentFlips >= maxFlips){\r\n\t\t\tkingPrice = priceToPay.mul(kKings).div(100);\r\n\t\t\tcontinentFlips = 0;\r\n\t\t\temit NewKingPrice(kingPrice, kKings);\r\n\t\t\t} else continentFlips++;\r\n\t\t\r\n\t\tpayCutsLight(priceToPay, thisBalance, timestampNow);\r\n\t\t\r\n\t\texcessRefund(player, priceToPay, msg.value);\r\n\t\t\r\n\t\t/// emit the event\r\n\t\temit NewKingContinent(player, _continentId, priceToPay);\r\n\t\temit PlayerEvent(3, _continentId, player, timestampNow, continentFlips, gameId);\t\t\r\n\t}\t\r\n\r\n\r\n\r\n//////////////////////////////\t\r\n/// SEND LOVE TO A COUNTRY ///\r\n//////////////////////////////\t\r\n/// Everybody can love few times a day, and get extra loves if loved yesterday\r\n\tfunction upLove(uint256 _countryId) public onlyGameNOTPaused{\r\n\t\trequire(canPlayerLove(msg.sender)); \r\n\t\trequire(_countryId < allCountriesLength);\t\r\n\t\trequire(!isEliminated(_countryId)); /// We cannot love an eliminated country\r\n\t\trequire(block.timestamp.add(DSHORT) < jackpotTimestamp || block.timestamp > jackpotTimestamp.add(DSHORT)); \r\n\t\r\n\t\taddress lover = msg.sender;\r\n\t\taddress countryOwner = getCountryOwner(_countryId);\r\n\t\tuint256 gameId = gameVersion;\r\n\t\t\r\n\t\tLoverStructure storage c = loversSTR[gameId][_countryId];\r\n\t\tuint256 nukecount = howManyNuked;\r\n\t\t\r\n\t\t/// Increase the number of loves for this lover for this country\r\n\t\tc.loves[nukecount][lover]++;\r\n\t\tuint256 playerLoves = c.loves[nukecount][lover];\r\n\t\tuint256 maxLovesBest = c.maxLoves[nukecount];\r\n\t\t\t\t\r\n\t\t/// Update the bestlover if this is the case\r\n\t\tif \t(playerLoves > maxLovesBest){\r\n\t\t\tc.maxLoves[nukecount]++;\r\n\t\t\t\r\n\t\t\t/// Update the mostLovedCountry\r\n\t\t\tif (_countryId != mostLovedCountry && playerLoves > loversSTR[gameId][mostLovedCountry].maxLoves[nukecount]){\r\n\t\t\t\tmostLovedCountry = _countryId;\r\n\t\t\t\t\r\n\t\t\t\temit newMostLovedCountry(_countryId, playerLoves);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/// If the best lover is a new bets lover, update\r\n\t\t\tif (c.bestLover != lover){\r\n\t\t\t\tc.bestLover = lover;\r\n\t\t\t\t\r\n\t\t\t\t/// Send a free love to the king of this continent if he is not the best lover and remaining loves lesser than 16\r\n\t\t\t\taddress ourKing = continentKing[countryToContinent[_countryId]];\r\n\t\t\t\tif (ourKing != lover && remainingLoves[ourKing] < 16){\r\n\t\t\t\tremainingLoves[ourKing]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\temit NewBestLover(lover, _countryId, playerLoves);\r\n\t\t}\r\n\t\t\r\n\t\t/// Update the ownership if this is the case\r\n\t\tif (newOwner[_countryId] != countryOwner){\r\n\t\t\tnewOwner[_countryId] = countryOwner;\r\n\t\t\temit ThereIsANewOwner(countryOwner, _countryId);\r\n\t\t}\t\t\r\n\t\t\r\n\t\t/// Update the number of loves for today\r\n\t\tupdateLovesForToday(lover, block.timestamp);\r\n\t\t\r\n\t\t/// Emit the event\t\t\r\n\t\temit NewLove(lover, _countryId, playerLoves, gameId, nukecount);\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t\r\n////////////////////////\r\n/// UPDATE FUNCTIONS ///\r\n////////////////////////\r\n\r\n/// Get the price of all countries before the start of the game\r\n\tfunction storePriceOfAllCountries(uint256 _limitDown, uint256 _limitUp) public onlyOwner {\r\n\t\trequire (_limitDown < _limitUp);\r\n\t\trequire (_limitUp <= allCountriesLength);\r\n\t\t\r\n\t\tuint256 getPrice;\r\n\t\taddress getTheOwner;\r\n\t\t\r\n\t\tfor (uint256 i = _limitDown; i < _limitUp; i++) {\r\n\t\t\tgetPrice = getPriceOfCountry(i);\r\n\t\t\tgetTheOwner = getCountryOwner(i);\r\n\t\t\t\r\n\t\t\tlastKnownCountryPrice[i] = getPrice;\r\n\t\t\tnewOwner[i] = getTheOwner;\r\n\t\t\t\r\n\t\t\tif (getPrice == 0 || getTheOwner ==0){\r\n\t\t\t\temit ErrorCountry(i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\t\r\n\r\n/// Update cuts ///\t\r\n/// Beware, cuts are PERTHOUSAND, not percent\r\n\tfunction updateCuts(uint256 _newDevcut, uint256 _newPlayercut, uint256 _newSuperCountriesJackpotCut) public onlyOwner {\r\n\t\trequire(_newPlayercut.mul(3).add(_newDevcut).add(_newSuperCountriesJackpotCut) <= 700);\r\n\t\trequire(_newDevcut > 100);\t\t\r\n\t\t\r\n\t\tdevCut = _newDevcut;\r\n\t\tplayerCut = _newPlayercut;\r\n\t\tpotCutSuperCountries = _newSuperCountriesJackpotCut;\r\n\r\n\t\temit CutsUpdated(_newDevcut, _newPlayercut, _newSuperCountriesJackpotCut, block.timestamp);\r\n\t\t\r\n\t}\r\n\r\n\t\r\n\r\n\r\n/// Change nuke and kings prices and other price parameters\r\n\tfunction updatePrices(\r\n\t\tuint256 _newStartingPrice,\r\n\t\tuint256 _newKingPrice,\r\n\t\tuint256 _newKNext,\r\n\t\tuint256 _newKCountry,\r\n\t\tuint256 _newKLimit,\r\n\t\tuint256 _newkKings,\r\n\t\tuint256 _newMaxFlips\r\n\t)\r\n\t\tpublic \r\n\t\tonlyOwner\r\n\t{\r\n\t\tstartingPrice = _newStartingPrice;\r\n\t\tkingPrice = _newKingPrice;\r\n\t\tkNext = _newKNext;\r\n\t\tkCountry = _newKCountry;\r\n\t\tkCountryLimit = _newKLimit;\r\n\t\tkKings = _newkKings;\r\n\t\tmaxFlips = _newMaxFlips;\r\n\r\n\t\temit ConstantsUpdated(_newStartingPrice, _newKingPrice, _newKNext, _newKCountry, _newKLimit, _newkKings, _newMaxFlips);\t\t\r\n\t}\r\n\r\n\r\n\t\r\n\r\n/// Change various parameters\r\n\tfunction updateValue(uint256 _code, uint256 _newValue) public onlyOwner {\t\t\t\t\t\r\n\t\tif (_code == 1 ){\r\n\t\t\tcontinentKing.length = _newValue;\r\n\t\t} \r\n\t\t\telse if (_code == 2 ){\r\n\t\t\t\tallCountriesLength = _newValue;\r\n\t\t\t} \r\n\t\t\t\telse if (_code == 3 ){\r\n\t\t\t\t\tfreeRemainingLovesPerDay = _newValue;\r\n\t\t\t\t\t} \t\t\r\n\t\t\r\n\t\temit NewValue(_code, _newValue, block.timestamp);\t\t\r\n\t}\r\n\r\n\r\n\r\n\r\n/// Store countries into continents - multi countries for 1 continent function\r\n\tfunction updateCountryToContinentMany(uint256[] _countryIds, uint256 _continentId) external onlyOwner {\t\t\t\t\t\r\n\t\tfor (uint256 i = 0; i < _countryIds.length; i++) {\r\n\t\t\tupdateCountryToContinent(_countryIds[i], _continentId);\r\n\t\t}\t\t\r\n\t}\r\n\r\n\r\n\r\n\r\n/// Store countries into continents\t- 1 country for 1 continent function\r\n\tfunction updateCountryToContinent(uint256 _countryId, uint256 _continentId) public onlyOwner {\t\t\t\t\t\r\n\t\trequire(_countryId < allCountriesLength);\r\n\t\trequire(_continentId < continentKing.length);\r\n\t\t\r\n\t\tcountryToContinent[_countryId] = _continentId;\r\n\t\t\r\n\t\temit NewCountryToContinent(_countryId, _continentId, block.timestamp);\t\t\r\n\t}\r\n\r\n\r\n\t\r\n\t\r\n/// If needed, update the external Trophy Cards contract address\r\n\tfunction updateTCContract(address _newAddress) public onlyOwner() {\r\n\t\tcontractTrophyCards = _newAddress;\r\n\t\tSCTrophy = SuperCountriesTrophyCardsExternal(_newAddress);\r\n\t\t\r\n\t\temit NewContractAddress(_newAddress);\t\t\t\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t\r\n/////////////////////////////////\r\n/// WIN THE JACKPOT FUNCTIONS ///\r\n/////////////////////////////////\t\r\n\r\n\r\n\tfunction jackpotShareDispatch(\r\n\t\taddress _winner,\r\n\t\tuint256 _share,\r\n\t\tuint256 _customValue,\r\n\t\tbytes32 _customText\r\n\t) \r\n\t\tinternal\r\n\t\treturns (uint256 shareDispatched_)\r\n\t{\r\n\t\tif (_winner == 0){\r\n\t\t\t_winner = owner;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 potDispatched = _share;\t\t\t\t\t\t\t\t\r\n\t\twinnersJackpot[gameVersion][_winner] += _share;\t\r\n\t\t\r\n\t\temit JackpotDispatch(_winner, _share, _customValue, _customText);\r\n\r\n\t\treturn potDispatched;\r\n\t}\r\n\t\r\n\t\r\n\r\n\r\n/// Internal jackpot function for Country Owners ///\r\n\tfunction jackpotCountryReward(uint256 _countryPot) internal returns (uint256 winningCountry_, uint256 dispatched_){\r\n\t\t\r\n\t\t/// Is there a last standing country or not?\r\n\t\tuint256 potDispatched;\r\n\t\t\r\n\t\tif (howManyStandingOrNot(true) == 1){\r\n\t\t\t\r\n\t\t\t/// There is only one country left: the winning country is the last standing country\r\n\t\t\t/// And the owner of this country will not share the countryPot with other owners, all is for him!\r\n\t\t\tuint256 winningCountryId = lastStanding();\r\n\t\t\taddress tempWinner = newOwner[winningCountryId];\r\n\t\t\tpotDispatched = jackpotShareDispatch(tempWinner, _countryPot, winningCountryId, \"lastOwner\");\r\n\t\t} \t\r\n\t\t\telse {\r\n\t\t\t\t/// if else, there is more than one country standing, \r\n\t\t\t\t/// we will reward the standing countries of the last nuked country continent\r\n\t\t\t\twinningCountryId = lastNukedCountry;\r\n\t\t\t\tuint256 continentId = countryToContinent[winningCountryId];\r\n\t\t\t\t\r\n\t\t\t\tuint256[] memory standingNations = country_getAllStandingCountriesForContinent(continentId, true);\r\n\t\t\t\tuint256 howManyCountries = standingNations.length;\r\n\t\t\t\t\r\n\t\t\t\t/// If there is at least one standing country in this continent\r\n\t\t\t\tif (howManyCountries > 0) {\r\n\t\t\t\t\r\n\t\t\t\t\tuint256 winningCounter;\r\n\t\t\t\t\tuint256 countryPotForOne = _countryPot.div(howManyCountries);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (uint256 i = 0; i < howManyCountries && potDispatched <= _countryPot; i++) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tuint256 tempCountry = standingNations[i];\r\n\t\t\t\t\t\t/// Get the current owner\r\n\t\t\t\t\t\ttempWinner = newOwner[tempCountry];\r\n\t\t\t\t\t\tpotDispatched += jackpotShareDispatch(tempWinner, countryPotForOne, tempCountry, \"anOwner\");\r\n\t\t\t\t\t\twinningCounter++;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (winningCounter == howManyCountries || potDispatched.add(countryPotForOne) > _countryPot){\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t/// There is no standing country in this continent, the owner of the last nuked country wins the jackpot (owner's share)\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttempWinner = newOwner[winningCountryId];\r\n\t\t\t\t\t\tpotDispatched = jackpotShareDispatch(tempWinner, _countryPot, winningCountryId, \"lastNukedOwner\");\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\r\n\t\t\t\r\n\t\treturn (winningCountryId, potDispatched);\r\n\t}\r\n\r\n\r\n\r\n\r\n\t\r\n/// PUBLIC JACKPOT FUNCTION TO CALL TO SHARE THE JACKPOT\r\n/// After the jackpot, anyone can call the jackpotWIN function, it will dispatch prizes between winners\r\n\tfunction jackpotWIN() public onlyGameNOTPaused {\r\n\t\trequire(block.timestamp > jackpotTimestamp); /// True if latestPayer + 7 days or Only one country standing\r\n\t\trequire(address(this).balance >= 1e11);\r\n\t\trequire(thisJackpotIsPlayedAndNotWon[gameVersion]); /// if true, we are currently playing this jackpot and it's not won yet \r\n\t\t\r\n\t\tuint256 gameId = gameVersion;\r\n\t\t\r\n\t\t/// Pause the game\r\n\t\tgameRunning = false;\r\n\r\n\t\t\r\n\t\t///////////////////////////////////////////////\r\n\t\t////////// How much for the winners? //////////\r\n\t\t///////////////////////////////////////////////\t\r\n\t\t\r\n\t\t/// Calculate shares\r\n\t\t(uint256 nukerPot, uint256 countryPot, uint256 continentPot, uint256 freePot, uint256 pot,) = calculateJackpot();\r\n\t\t\r\n\t\t/// This jackpot is won, disable it\r\n\t\t/// If false, this function will not be callable again\r\n\t\tthisJackpotIsPlayedAndNotWon[gameId] = false;\t\t\r\n\r\n\t\t\t\t\r\n\t\t////////////////////////////////////////////////////\r\n\t\t////////// Which country won the jackpot? //////////\r\n\t\t////////////////////////////////////////////////////\r\n\r\n\t\t/// Dispatch shares between country owners and save the winning country ///\t\r\n\t\t(uint256 winningCountryId, uint256 potDispatched) = jackpotCountryReward(countryPot);\t\r\n\t\twinningCountry[gameId] = winningCountryId;\r\n\t\tuint256 continentId = countryToContinent[winningCountryId];\r\n\r\n\t\t\t\r\n\t\t////////////////////////////////////////////////\r\n\t\t////////// Who are the other winners? //////////\r\n\t\t////////////////////////////////////////////////\t\r\n\r\n\t\t/// The king of the right continent\r\n\t\tpotDispatched += jackpotShareDispatch(continentKing[continentId], continentPot, continentId, \"continent\");\r\n\t\t\r\n\t\t\r\n\t\t/// The best lover for this country\r\n\t\tpotDispatched += jackpotShareDispatch(loversSTR[gameId][winningCountryId].bestLover, freePot, 0, \"free\");\r\n\t\t\r\n\t\t\r\n\t\t/// The last nuker\r\n\t\tpotDispatched += jackpotShareDispatch(nukerAddress[winningCountryId], nukerPot, 0, \"nuker\");\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t/// Emit the events ///\r\n\t\temit JackpotDispatchAll(gameId, winningCountryId, continentId, block.timestamp, jackpotTimestamp, pot, potDispatched, address(this).balance);\r\n\t\temit PausedOrUnpaused(block.timestamp, gameRunning);\r\n\r\n\t\t\r\n\t\t/// Last check ///\r\n\t\tassert(potDispatched <= address(this).balance);\t\t\r\n\t}\r\n\t\t\t\r\n\r\n\t\t\t\r\n\r\n/// After the sharing, all winners will be able to call this function to withdraw the won share to the their wallets\r\n\tfunction withdrawWinners() public onlyRealAddress {\r\n\t\trequire(winnersJackpot[gameVersion][msg.sender] > 0);\r\n\t\t\r\n\t\taddress _winnerAddress = msg.sender;\r\n        uint256 gameId = gameVersion;\r\n\t\t\r\n        /// Prepare for the withdrawal\r\n\t\tuint256 jackpotToTransfer = winnersJackpot[gameId][_winnerAddress];\r\n\t\twinnersJackpot[gameId][_winnerAddress] = 0;\r\n\t\t\r\n        /// fire event\r\n        emit WithdrawJackpot(_winnerAddress, jackpotToTransfer, gameId);\r\n\t\t\r\n\t\t/// Withdraw\r\n        _winnerAddress.transfer(jackpotToTransfer);\r\n\t}\r\n\r\n\r\n\t\r\n\r\n\t\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\r\n\r\n///////////////////////////////\r\n///\t\tRESTART A NEW GAME \t///\r\n///////////////////////////////\t\r\n\r\n/// After the jackpot, restart a new game with same settings ///\r\n/// The owner can restart 2 hrs after the jackpot\r\n/// If the owner doesn't restart the game 30 days after the jackpot, all players can restart the game\r\n\tfunction restartNewGame() public onlyGamePaused{\r\n\t\trequire((msg.sender == owner && block.timestamp > jackpotTimestamp.add(DSHORT)) || block.timestamp > jackpotTimestamp.add(2629000));\r\n\t\t\r\n\t\tuint256 timestampNow = block.timestamp;\r\n\t\t\r\n\t\t/// Clear all values, loves, nextPrices...\tbut bestlovers, lovers will remain\r\n\t\tif (nextPrice[gameVersion] !=0){\r\n\t\t\tgameVersion++;\r\n\t\t\tlastNukedCountry = 0;\r\n\t\t\thowManyNuked = 0;\r\n\t\t\thowManyReactivated = 0;\r\n\t\t\thowManyEliminated = 0;\r\n\t\t\t\r\n\t\t\tlastNukerMin = 0;\r\n\t\t\tcountryOwnerMin = 0;\r\n\t\t\tcontinentMin = 0;\r\n\t\t\tfreePlayerMin = 0;\r\n\t\t\twithdrawMinOwner = 0;\r\n\r\n\t\t\tkingPrice = 1e16;\r\n\t\t\t\r\n\t\t\tnewOwner.length = 0;\r\n\t\t\tnukerAddress.length = 0;\r\n\t\t\tnewOwner.length = allCountriesLength;\r\n\t\t\tnukerAddress.length = allCountriesLength;\r\n\t\t}\r\n\t\t\r\n\t\t/// Set new jackpot timestamp\r\n\t\tupdateJackpotTimestamp(timestampNow);\r\n\t\t\r\n\t\t/// Restart\r\n\t\tgameRunning = true;\t\r\n\t\tthisJackpotIsPlayedAndNotWon[gameVersion] = true;\r\n\r\n        /// fire event\r\n        emit NewGameLaunched(gameVersion, timestampNow, msg.sender, jackpotTimestamp);\r\n\t\temit PausedOrUnpaused(block.timestamp, gameRunning);\t\t\r\n\t}\r\n\r\n\t\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t\r\n////////////////////////\r\n/// USEFUL FUNCTIONS ///\r\n////////////////////////\r\n\r\n  /** \r\n   * @dev Fallback function to accept all ether sent directly to the contract\r\n   * Nothing is lost, it will raise the jackpot!\r\n   */\r\n\tfunction() payable public {    }\t\r\n\r\n\r\n\r\n\r\n\t\r\n/// After the jackpot, the owner can restart a new game or withdraw if winners don't want their part\r\n\tfunction withdraw() public onlyOwner {\r\n\t\trequire(block.timestamp > jackpotTimestamp.add(DSHORT) || address(this).balance <= 1e11 || whatDevCanWithdraw() > 0);\r\n\t\t\r\n\t\tuint256 thisBalance = address(this).balance;\r\n\t\t\r\n\t\tif (block.timestamp > jackpotTimestamp.add(DSHORT) || thisBalance <= 1e11 ){\r\n\t\t\tuint256 toWithdraw = thisBalance;\r\n\t\t}\r\n\t\t\r\n\t\telse {\r\n\t\t\t\r\n\t\t\ttoWithdraw = whatDevCanWithdraw();\r\n\t\t\twithdrawMinOwner += toWithdraw;\r\n\t\t}\t\t\t\r\n\t\t\r\n\t\temit WithdrawByDev(block.timestamp, toWithdraw, withdrawMinOwner, thisBalance);\r\n\t\t\r\n\t\towner.transfer(toWithdraw);\t\r\n\t}\r\n\r\n\t\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n///////////////////////////////\r\n/// LAST STANDING FUNCTIONS ///\r\n///////////////////////////////\t\r\n\r\n\tfunction trueStandingFalseEliminated(bool _standing) public view returns (uint256[] countries_) {\r\n\t\tuint256 howLong = howManyStandingOrNot(_standing);\r\n\t\tuint256[] memory countries = new uint256[](howLong);\r\n\t\tuint256 standingCounter = 0;\r\n\t\tuint256 gameId = gameVersion;\r\n\t\t\r\n\t\tfor (uint256 i = 0; i < allCountriesLength; i++) {\r\n\t\t\tif (eliminated[gameId][i] != _standing){\r\n\t\t\t\tcountries[standingCounter] = i;\r\n\t\t\t\tstandingCounter++;\r\n\t\t\t}\r\n\r\n\t\t\tif (standingCounter == howLong){break;}\r\n\t\t}\r\n\t\t\r\n\t\treturn countries;\r\n\t}\t\r\n\r\n\t\r\n\r\n\t\r\n\tfunction howManyStandingOrNot(bool _standing) public view returns (uint256 howManyCountries_) {\r\n\t\tuint256 standingCounter = 0;\r\n\t\tuint256 gameId = gameVersion;\r\n\t\t\r\n\t\tfor (uint256 i = 0; i < allCountriesLength; i++) {\r\n\t\t\tif (eliminated[gameId][i] != _standing){\r\n\t\t\t\tstandingCounter++;\r\n\t\t\t}\t\t\t\t\t\r\n\t\t}\t\r\n\t\t\r\n\t\treturn standingCounter;\r\n\t}\r\n\r\n\t\r\n\r\n\t\r\n\tfunction lastStanding() public view returns (uint256 lastStandingNation_) {\r\n\t\trequire (howManyStandingOrNot(true) == 1);\r\n\r\n\t\treturn trueStandingFalseEliminated(true)[0];\r\n\t}\r\n\t\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"player_getKingsAll\",\"outputs\":[{\"name\":\"_kings\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"constant_getLength\",\"outputs\":[{\"name\":\"kingsLength_\",\"type\":\"uint256\"},{\"name\":\"newOwnerLength_\",\"type\":\"uint256\"},{\"name\":\"nukerLength_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"}],\"name\":\"getCountryOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"}],\"name\":\"nuke\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_continentId\",\"type\":\"uint256\"},{\"name\":\"_standing\",\"type\":\"bool\"}],\"name\":\"country_countStandingCountriesForContinent\",\"outputs\":[{\"name\":\"howManyCountries_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limitDown\",\"type\":\"uint256\"},{\"name\":\"_limitUp\",\"type\":\"uint256\"}],\"name\":\"storePriceOfAllCountries\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"constant_getPriZZZesMini\",\"outputs\":[{\"name\":\"lastNukeMini_\",\"type\":\"uint256\"},{\"name\":\"countryOwnMini_\",\"type\":\"uint256\"},{\"name\":\"contintMini_\",\"type\":\"uint256\"},{\"name\":\"freePlayerMini_\",\"type\":\"uint256\"},{\"name\":\"withdrMinOwner_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawWinners\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"}],\"name\":\"war_getNextNukePriceForCountry\",\"outputs\":[{\"name\":\"priceOfThisCountry_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restartNewGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"},{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_oldHowManyNuked\",\"type\":\"uint256\"}],\"name\":\"loves_getOldLoves\",\"outputs\":[{\"name\":\"loves_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNextTrophyCardOwner\",\"outputs\":[{\"name\":\"nextTrophyCardOwner_\",\"type\":\"address\"},{\"name\":\"nextTrophyCardIndex_\",\"type\":\"uint256\"},{\"name\":\"nextTrophyCardId_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SLONG\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_countryIds\",\"type\":\"uint256[]\"},{\"name\":\"_continentId\",\"type\":\"uint256\"}],\"name\":\"updateCountryToContinentMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_standing\",\"type\":\"bool\"}],\"name\":\"trueStandingFalseEliminated\",\"outputs\":[{\"name\":\"countries_\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateJackpot\",\"outputs\":[{\"name\":\"nukerJackpot_\",\"type\":\"uint256\"},{\"name\":\"countryJackpot_\",\"type\":\"uint256\"},{\"name\":\"continentJackpot_\",\"type\":\"uint256\"},{\"name\":\"freeJackpot_\",\"type\":\"uint256\"},{\"name\":\"realJackpot_\",\"type\":\"uint256\"},{\"name\":\"expectedJackpot_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTrophyFromIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStartingPrice\",\"type\":\"uint256\"},{\"name\":\"_newKingPrice\",\"type\":\"uint256\"},{\"name\":\"_newKNext\",\"type\":\"uint256\"},{\"name\":\"_newKCountry\",\"type\":\"uint256\"},{\"name\":\"_newKLimit\",\"type\":\"uint256\"},{\"name\":\"_newkKings\",\"type\":\"uint256\"},{\"name\":\"_newMaxFlips\",\"type\":\"uint256\"}],\"name\":\"updatePrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"}],\"name\":\"upLove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDevcut\",\"type\":\"uint256\"},{\"name\":\"_newPlayercut\",\"type\":\"uint256\"},{\"name\":\"_newSuperCountriesJackpotCut\",\"type\":\"uint256\"}],\"name\":\"updateCuts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"player_getNukedCountries\",\"outputs\":[{\"name\":\"myNukedCountriesIds_\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"player_getPlayerJackpot\",\"outputs\":[{\"name\":\"playerNowPot_\",\"type\":\"uint256\"},{\"name\":\"playerOldPot_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canPlayTimestamp\",\"outputs\":[{\"name\":\"ok_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_code\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"updateValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastStanding\",\"outputs\":[{\"name\":\"lastStandingNation_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"country_getCountriesGeneralInfo\",\"outputs\":[{\"name\":\"lastNuked_\",\"type\":\"uint256\"},{\"name\":\"lastNukerAddress_\",\"type\":\"address\"},{\"name\":\"allCountriesLength_\",\"type\":\"uint256\"},{\"name\":\"howManyEliminated_\",\"type\":\"uint256\"},{\"name\":\"howManyNuked_\",\"type\":\"uint256\"},{\"name\":\"howManyReactivated_\",\"type\":\"uint256\"},{\"name\":\"mostLovedNation_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateTCContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"player_howManyNuked\",\"outputs\":[{\"name\":\"nukeCount_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"}],\"name\":\"country_getInfoForCountry\",\"outputs\":[{\"name\":\"eliminatedBool_\",\"type\":\"bool\"},{\"name\":\"whichContinent_\",\"type\":\"uint256\"},{\"name\":\"currentBestLover_\",\"type\":\"address\"},{\"name\":\"maxLovesForTheBest_\",\"type\":\"uint256\"},{\"name\":\"countryOwner_\",\"type\":\"address\"},{\"name\":\"lastKnownPrice_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTrophyCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whatDevCanWithdraw\",\"outputs\":[{\"name\":\"toWithdrawByDev_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"}],\"name\":\"player_getNuker\",\"outputs\":[{\"name\":\"nuker_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"}],\"name\":\"isEliminated\",\"outputs\":[{\"name\":\"isEliminated_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"constant_getGameVersion\",\"outputs\":[{\"name\":\"currentGameVersion_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"war_getNextNukePriceRaw\",\"outputs\":[{\"name\":\"price_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"constant_getSomeDetails\",\"outputs\":[{\"name\":\"gameRunng_\",\"type\":\"bool\"},{\"name\":\"currentContractBalance_\",\"type\":\"uint256\"},{\"name\":\"jackptTimstmp_\",\"type\":\"uint256\"},{\"name\":\"maxFlip_\",\"type\":\"uint256\"},{\"name\":\"continentFlip_\",\"type\":\"uint256\"},{\"name\":\"jackpotNotWonYet_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_standing\",\"type\":\"bool\"}],\"name\":\"howManyStandingOrNot\",\"outputs\":[{\"name\":\"howManyCountries_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DSHORT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"},{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"canPlayerReanimate\",\"outputs\":[{\"name\":\"canReanimate_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"},{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_howManyNuked\",\"type\":\"uint256\"}],\"name\":\"loves_getOldNukesMaxLoves\",\"outputs\":[{\"name\":\"oldMaxLovesForTheBest2_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"constant_getCuts\",\"outputs\":[{\"name\":\"playerCut_\",\"type\":\"uint256\"},{\"name\":\"potCutSC\",\"type\":\"uint256\"},{\"name\":\"developerCut_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"canPlayerLove\",\"outputs\":[{\"name\":\"playerCanLove_\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_continentId\",\"type\":\"uint256\"}],\"name\":\"player_getKingOne\",\"outputs\":[{\"name\":\"king_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_continentId\",\"type\":\"uint256\"}],\"name\":\"becomeNewKing\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"constant_getPriZZZes\",\"outputs\":[{\"name\":\"lastNukeShare_\",\"type\":\"uint256\"},{\"name\":\"countryOwnShare_\",\"type\":\"uint256\"},{\"name\":\"contintShare_\",\"type\":\"uint256\"},{\"name\":\"freePlayerShare_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"constant_getPrices\",\"outputs\":[{\"name\":\"nextPrice_\",\"type\":\"uint256\"},{\"name\":\"startingPrice_\",\"type\":\"uint256\"},{\"name\":\"kingPrice_\",\"type\":\"uint256\"},{\"name\":\"kNext_\",\"type\":\"uint256\"},{\"name\":\"kCountry_\",\"type\":\"uint256\"},{\"name\":\"kCountryLimit_\",\"type\":\"uint256\"},{\"name\":\"kKings_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"},{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"loves_getLoves\",\"outputs\":[{\"name\":\"loves_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"}],\"name\":\"reanimateCountry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_continentId\",\"type\":\"uint256\"}],\"name\":\"country_getAllCountriesForContinent\",\"outputs\":[{\"name\":\"countries_\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"constant_getContracts\",\"outputs\":[{\"name\":\"SuperCountries_\",\"type\":\"address\"},{\"name\":\"TrophyCards_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_continentId\",\"type\":\"uint256\"}],\"name\":\"country_countCountriesForContinent\",\"outputs\":[{\"name\":\"howManyCountries_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"jackpotWIN\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"},{\"name\":\"_continentId\",\"type\":\"uint256\"}],\"name\":\"updateCountryToContinent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"}],\"name\":\"getPriceOfCountry\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"constant_getOldDetails\",\"outputs\":[{\"name\":\"oldWinningCountry_\",\"type\":\"uint256\"},{\"name\":\"oldJackpotBool_\",\"type\":\"bool\"},{\"name\":\"oldNextPrice_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DLONG\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"loves_getPlayerInfo\",\"outputs\":[{\"name\":\"playerFirstLove_\",\"type\":\"uint256\"},{\"name\":\"playerRemainingLoves_\",\"type\":\"uint256\"},{\"name\":\"realRemainingLoves_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_continentId\",\"type\":\"uint256\"},{\"name\":\"_standing\",\"type\":\"bool\"}],\"name\":\"country_getAllStandingCountriesForContinent\",\"outputs\":[{\"name\":\"countries_\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_countryId\",\"type\":\"uint256\"},{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"country_getOldInfoForCountry\",\"outputs\":[{\"name\":\"oldEliminatedBool_\",\"type\":\"bool\"},{\"name\":\"oldMaxLovesForTheBest_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blockTimestamp_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"gameRunning_\",\"type\":\"bool\"}],\"name\":\"PausedOrUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameVersion_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"blockTimestamp_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"msgSender_\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"jackpotTimestamp_\",\"type\":\"uint256\"}],\"name\":\"NewGameLaunched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"countryId_\",\"type\":\"uint256\"}],\"name\":\"ErrorCountry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newDevcut_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPlayercut_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newJackpotCountriescut_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"blockTimestamp_\",\"type\":\"uint256\"}],\"name\":\"CutsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newStartPrice_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newkKingPrice_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newKNext_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newKCountry_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newKLimit_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newkKings\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newMaxFlips\",\"type\":\"uint256\"}],\"name\":\"ConstantsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newAddress_\",\"type\":\"address\"}],\"name\":\"NewContractAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"code_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"newValue_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"blockTimestamp_\",\"type\":\"uint256\"}],\"name\":\"NewValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"countryId_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"continentId_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"blockTimestamp_\",\"type\":\"uint256\"}],\"name\":\"NewCountryToContinent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"eventCode_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"countryId_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"player_\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestampNow_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customValue_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"gameId_\",\"type\":\"uint256\"}],\"name\":\"PlayerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"lastNukedCountry_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceToPay_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceRaw_\",\"type\":\"uint256\"}],\"name\":\"Nuked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"countryId_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"howManyReactivated_\",\"type\":\"uint256\"}],\"name\":\"Reactivation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"player_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"continentId_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"priceToPay_\",\"type\":\"uint256\"}],\"name\":\"NewKingContinent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"countryId_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maxLovesBest_\",\"type\":\"uint256\"}],\"name\":\"newMostLovedCountry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lover_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"countryId_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxLovesBest_\",\"type\":\"uint256\"}],\"name\":\"NewBestLover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lover_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"countryId_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerLoves_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"gameId_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nukeCount_\",\"type\":\"uint256\"}],\"name\":\"NewLove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"countryId_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"player_\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"contractBalance_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"gameId_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotTimestamp\",\"type\":\"uint256\"}],\"name\":\"LastCountryStanding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"countryId_\",\"type\":\"uint256\"}],\"name\":\"ThereIsANewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blockTimestamp_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"countryId_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"countryOwner_\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"trophyCardOwner_\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bestLover_\",\"type\":\"address\"}],\"name\":\"CutsPaidInfos\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blockTimestamp_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"paidPrice_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"thisBalance_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"devCut_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerCut_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"SuperCountriesCut_\",\"type\":\"uint256\"}],\"name\":\"CutsPaidValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blockTimestamp_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"paidPrice_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"thisBalance_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"devCut_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerCut_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"trophyCardOwner_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"SuperCountriesCut_\",\"type\":\"uint256\"}],\"name\":\"CutsPaidLight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"kingPrice_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"kKings_\",\"type\":\"uint256\"}],\"name\":\"NewKingPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"jackpotTimestamp_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"timestamp_\",\"type\":\"uint256\"}],\"name\":\"NewJackpotTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blockTimestamp_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"withdrawn_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"withdrawMinOwner_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpot_\",\"type\":\"uint256\"}],\"name\":\"WithdrawByDev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winnerAddress_\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"jackpotToTransfer_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"gameVersion_\",\"type\":\"uint256\"}],\"name\":\"WithdrawJackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"jackpotShare_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customValue_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"customText_\",\"type\":\"bytes32\"}],\"name\":\"JackpotDispatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameVersion_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"winningCountry_\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"continentId_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestampNow_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"jackpotTimestamp_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pot_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"potDispatched_\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"thisBalance\",\"type\":\"uint256\"}],\"name\":\"JackpotDispatchAll\",\"type\":\"event\"}]","ContractName":"SuperCountriesWar","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1351020b44735e02df1c9ed47cdfdf4129d8ff3fcc27dd791e5f084138b5c6da"}]}