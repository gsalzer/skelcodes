{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// SafeMath library\r\nlibrary SafeMath {\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        assert(_a >= _b);\r\n        return _a - _b;\r\n    }\r\n\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        return _a / _b;\r\n    }\r\n}\r\n\r\n// Contract must have an owner\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _owner) onlyOwner public {\r\n        owner = _owner;\r\n    }\r\n}\r\n\r\n// Standard ERC20 Token Interface\r\ninterface ERC20Token {\r\n    function name() external view returns (string _name);\r\n    function symbol() external view returns (string _symbol);\r\n    function decimals() external view returns (uint8 _decimals);\r\n    function totalSupply() external view returns (uint256 _totalSupply);\r\n    function balanceOf(address _owner) external view returns (uint256 _balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool _success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool _success);\r\n    function approve(address _spender, uint256 _value) external returns (bool _success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 _remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n// SUPM financial product contract\r\ncontract FinPro is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private constant name = \"FinPro\";\r\n    string private constant version = \"v0.96\";\r\n\r\n    uint256[] private fplowerlim;\r\n    uint256[] private fplocktime;\r\n    uint256[] private fpinterest;\r\n    uint256 private fpcount;\r\n\r\n    ERC20Token private token;\r\n\r\n    struct investedData {\r\n        uint256 fpnum;\r\n        uint256 buytime;\r\n        uint256 unlocktime;\r\n        uint256 value;\r\n        bool withdrawn;\r\n    }\r\n\r\n    mapping (address => uint256) private investedAmount;\r\n    mapping (address => mapping (uint256 => investedData)) private investorVault;\r\n\r\n    address[] public admins;\r\n    mapping (address => bool) public isAdmin;\r\n    mapping (address => mapping (uint256 => mapping (address => mapping (address => bool)))) public adminWithdraw;\r\n    mapping (address => mapping (uint256 => mapping (address => bool))) public adminTokenWithdraw;\r\n\r\n    event FPBought(address _buyer, uint256 _amount, uint256 _investednum,\r\n    uint256 _fpnum, uint256 _buytime, uint256 _unlocktime, uint256 _interestrate);\r\n    event FPWithdrawn(address _investor, uint256 _amount, uint256 _investednum, uint256 _fpnum);\r\n\r\n    // admin events\r\n    event FPWithdrawnByAdmins(address indexed _addr, uint256 _amount, address indexed _investor, uint256 _investednum, uint256 _fpnum);\r\n    event TokenWithdrawnByAdmins(address indexed _addr, uint256 _amount);\r\n\r\n    // safety method-related events\r\n    event WrongTokenEmptied(address indexed _token, address indexed _addr, uint256 _amount);\r\n    event WrongEtherEmptied(address indexed _addr, uint256 _amount);\r\n\r\n    constructor (address _tokenAddress, uint256[] _fplowerlim, uint256[] _fplocktime, uint256[] _fpinterest, address[] _admins) public {\r\n        require(_fplowerlim.length == _fplocktime.length && _fplocktime.length == _fpinterest.length && _fpinterest.length > 0);\r\n        fplowerlim = _fplowerlim;\r\n        fplocktime = _fplocktime;\r\n        fpinterest = _fpinterest;\r\n        fpcount = fplowerlim.length;\r\n        token = ERC20Token(_tokenAddress);\r\n        admins = _admins;\r\n        for (uint256 i = 0; i < admins.length; i++) {\r\n            isAdmin[admins[i]] = true;\r\n        }\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(isAdmin[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function tokenInfo() public view returns (address _tokenAddress, uint8 _decimals,\r\n    string _name, string _symbol, uint256 _tokenBalance) {\r\n        return (address(token), token.decimals(), token.name(), token.symbol(), token.balanceOf(address(this)));\r\n    }\r\n\r\n    function showFPCount() public view returns (uint256) {\r\n        return fplowerlim.length;\r\n    }\r\n\r\n    function showFPLowerlim() public view returns (uint256[]) {\r\n        return fplowerlim;\r\n    }\r\n\r\n    function showFPLocktime() public view returns (uint256[]) {\r\n        return fplocktime;\r\n    }\r\n\r\n    function showFPInterest() public view returns (uint256[]) {\r\n        return fpinterest;\r\n    }\r\n\r\n    function showFPInfoAll() public view returns (uint256[] _fplowerlim, uint256[] _fplocktime, uint256[] _fpinterest) {\r\n        return (fplowerlim, fplocktime, fpinterest);\r\n    }\r\n\r\n    function showInvestedNum(address _addr) public view returns (uint256) {\r\n        return investedAmount[_addr];\r\n    }\r\n\r\n    function showInvestorVault(address _addr, uint256 _investednum) public view\r\n    returns (uint256 _fpnum, uint256 _buytime, uint256 _unlocktime, uint256 _value, bool _withdrawn, bool _withdrawable) {\r\n        require(_investednum > 0 && investedAmount[_addr] >= _investednum);\r\n        return (investorVault[_addr][_investednum].fpnum, investorVault[_addr][_investednum].buytime,\r\n        investorVault[_addr][_investednum].unlocktime, investorVault[_addr][_investednum].value,\r\n        investorVault[_addr][_investednum].withdrawn,\r\n        (now > investorVault[_addr][_investednum].unlocktime && !investorVault[_addr][_investednum].withdrawn));\r\n    }\r\n\r\n    function showInvestorVaultFull(address _addr) external view\r\n    returns (uint256[] _fpnum, uint256[] _buytime, uint256[] _unlocktime, uint256[] _value,\r\n    uint256[] _interestrate, bool[] _withdrawn, bool[] _withdrawable) {\r\n        require(investedAmount[_addr] > 0);\r\n\r\n        _fpnum = new uint256[](investedAmount[_addr]);\r\n        _buytime = new uint256[](investedAmount[_addr]);\r\n        _unlocktime = new uint256[](investedAmount[_addr]);\r\n        _value = new uint256[](investedAmount[_addr]);\r\n        _interestrate = new uint256[](investedAmount[_addr]);\r\n        _withdrawn = new bool[](investedAmount[_addr]);\r\n        _withdrawable = new bool[](investedAmount[_addr]);\r\n\r\n        for(uint256 i = 0; i < investedAmount[_addr]; i++) {\r\n            (_fpnum[i], _buytime[i], _unlocktime[i], _value[i], _withdrawn[i], _withdrawable[i]) = showInvestorVault(_addr, i + 1);\r\n            _interestrate[i] = fpinterest[_fpnum[i]];\r\n        }\r\n\r\n        return (_fpnum, _buytime, _unlocktime, _value, _interestrate, _withdrawn, _withdrawable);\r\n    }\r\n\r\n    function buyfp(uint256 _fpnum, uint256 _amount) public {\r\n        require(_fpnum < fpcount);\r\n        require(_amount >= fplowerlim[_fpnum]);\r\n        require(token.transferFrom(msg.sender, address(this), _amount));\r\n        investedAmount[msg.sender]++;\r\n        investorVault[msg.sender][investedAmount[msg.sender]] = investedData({fpnum: _fpnum, buytime: now,\r\n        unlocktime: now.add(fplocktime[_fpnum]), value: _amount, withdrawn: false});\r\n        emit FPBought(msg.sender, _amount, investedAmount[msg.sender], _fpnum, now, now.add(fplocktime[_fpnum]), fpinterest[_fpnum]);\r\n    }\r\n\r\n    function withdraw(uint256 _investednum) public {\r\n        require(_investednum > 0 && investedAmount[msg.sender] >= _investednum);\r\n        require(!investorVault[msg.sender][_investednum].withdrawn);\r\n        require(now > investorVault[msg.sender][_investednum].unlocktime);\r\n        require(token.balanceOf(address(this)) >= investorVault[msg.sender][_investednum].value);\r\n        require(token.transfer(msg.sender, investorVault[msg.sender][_investednum].value));\r\n        investorVault[msg.sender][_investednum].withdrawn = true;\r\n        emit FPWithdrawn(msg.sender, investorVault[msg.sender][_investednum].value,\r\n        _investednum, investorVault[msg.sender][_investednum].fpnum);\r\n    }\r\n\r\n    // admin methods\r\n    function withdrawByAdmin(address _investor, uint256 _investednum, address _target) onlyAdmin public {\r\n        require(_investednum > 0 && investedAmount[_investor] >= _investednum);\r\n        require(!investorVault[_investor][_investednum].withdrawn);\r\n        require(token.balanceOf(address(this)) >= investorVault[_investor][_investednum].value);\r\n        adminWithdraw[_investor][_investednum][_target][msg.sender] = true;\r\n        for (uint256 i = 0; i < admins.length; i++) {\r\n            if (!adminWithdraw[_investor][_investednum][_target][admins[i]]) {\r\n                return;\r\n            }\r\n        }\r\n        require(token.transfer(_target, investorVault[_investor][_investednum].value));\r\n        investorVault[_investor][_investednum].withdrawn = true;\r\n        emit FPWithdrawnByAdmins(_target, investorVault[_investor][_investednum].value, _investor,\r\n        _investednum, investorVault[_investor][_investednum].fpnum);\r\n    }\r\n\r\n    function withdrawTokenByAdmin(address _target, uint256 _amount) onlyAdmin public {\r\n        adminTokenWithdraw[_target][_amount][msg.sender] = true;\r\n        uint256 i;\r\n        for (i = 0; i < admins.length; i++) {\r\n            if (!adminTokenWithdraw[_target][_amount][admins[i]]) {\r\n                return;\r\n            }\r\n        }\r\n        for (i = 0; i < admins.length; i++) {\r\n            adminTokenWithdraw[_target][_amount][admins[i]] = false;\r\n        }\r\n        require(token.transfer(_target, _amount));\r\n        emit TokenWithdrawnByAdmins(_target, _amount);\r\n    }\r\n\r\n    // safety methods\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n    function emptyWrongToken(address _addr) onlyOwner public {\r\n        require(_addr != address(token));\r\n        ERC20Token wrongToken = ERC20Token(_addr);\r\n        uint256 amount = wrongToken.balanceOf(address(this));\r\n        require(amount > 0);\r\n        require(wrongToken.transfer(msg.sender, amount));\r\n\r\n        emit WrongTokenEmptied(_addr, msg.sender, amount);\r\n    }\r\n\r\n    // shouldn't happen, just in case\r\n    function emptyWrongEther() onlyOwner public {\r\n        uint256 amount = address(this).balance;\r\n        require(amount > 0);\r\n        msg.sender.transfer(amount);\r\n\r\n        emit WrongEtherEmptied(msg.sender, amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_investednum\",\"type\":\"uint256\"}],\"name\":\"showInvestorVault\",\"outputs\":[{\"name\":\"_fpnum\",\"type\":\"uint256\"},{\"name\":\"_buytime\",\"type\":\"uint256\"},{\"name\":\"_unlocktime\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_withdrawn\",\"type\":\"bool\"},{\"name\":\"_withdrawable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showFPLocktime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investednum\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showFPInfoAll\",\"outputs\":[{\"name\":\"_fplowerlim\",\"type\":\"uint256[]\"},{\"name\":\"_fplocktime\",\"type\":\"uint256[]\"},{\"name\":\"_fpinterest\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminTokenWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenInfo\",\"outputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_tokenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showFPInterest\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"showInvestorVaultFull\",\"outputs\":[{\"name\":\"_fpnum\",\"type\":\"uint256[]\"},{\"name\":\"_buytime\",\"type\":\"uint256[]\"},{\"name\":\"_unlocktime\",\"type\":\"uint256[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"},{\"name\":\"_interestrate\",\"type\":\"uint256[]\"},{\"name\":\"_withdrawn\",\"type\":\"bool[]\"},{\"name\":\"_withdrawable\",\"type\":\"bool[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showFPLowerlim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"showInvestedNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fpnum\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyfp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showFPCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"emptyWrongToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emptyWrongEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_investednum\",\"type\":\"uint256\"},{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"withdrawByAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_fplowerlim\",\"type\":\"uint256[]\"},{\"name\":\"_fplocktime\",\"type\":\"uint256[]\"},{\"name\":\"_fpinterest\",\"type\":\"uint256[]\"},{\"name\":\"_admins\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_investednum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fpnum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_buytime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_unlocktime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_interestrate\",\"type\":\"uint256\"}],\"name\":\"FPBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_investednum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fpnum\",\"type\":\"uint256\"}],\"name\":\"FPWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_investednum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fpnum\",\"type\":\"uint256\"}],\"name\":\"FPWithdrawnByAdmins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawnByAdmins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WrongTokenEmptied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WrongEtherEmptied\",\"type\":\"event\"}]","ContractName":"FinPro","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007200d6ba3dae1eb92415dbc9a059433126cfb25f00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000a2a15d09519be0000000000000000000000000000000000000000000000000043c41a24a290be40000000000000000000000000000000000000000000000000a968f44a75922a40000000000000000000000000000000000000000000000002a5a13707949946400000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000076a7000000000000000000000000000000000000000000000000000000000000ed4e00000000000000000000000000000000000000000000000000000000000163f5000000000000000000000000000000000000000000000000000000000001da9c000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000009600000000000000000000000000000000000000000000000000000000000000c800000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000401d4f659e4d68dc2da46b7a2df7c19a3bafa0f4","Library":"","SwarmSource":"bzzr://456650dd61604a55ba1aca8ce3d4f36a53895ee8cccf010862c7ef3698d0a3d6"}]}