{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Transfer {\r\n  function safeTransfer(\r\n    IERC20 token,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transfer(to, value));\r\n  }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale,\r\n * allowing investors to purchase tokens with ether. This contract implements\r\n * such functionality in its most fundamental form and can be extended to provide additional\r\n * functionality and/or custom behavior.\r\n * The external interface represents the basic interface for purchasing tokens, and conform\r\n * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\r\n * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\r\n * the methods to add functionality. Consider using 'super' where appropriate to concatenate\r\n * behavior.\r\n */\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20Transfer for IERC20;\r\n\r\n  // The token being sold\r\n  IERC20 private _token;\r\n\r\n  // Address where funds are collected\r\n  address private _wallet;\r\n\r\n  // How many token units a buyer gets per 1 ETH.\r\n  uint256 private _rate = 5000;\r\n\r\n  // Amount of wei raised\r\n  uint256 private _weiRaised;\r\n\r\n  // Accrued tokens amount\r\n  uint256 private _accruedTokensAmount;\r\n\r\n  // freezing periods in seconds\r\n  uint256 private _threeMonths = 5256000;\r\n  uint256 private _sixMonths = 15768000;\r\n  uint256 private _nineMonths = 21024000;\r\n  uint256 private _twelveMonths = 31536000;\r\n\r\n  // ICO configuration\r\n  uint256 private _foundersTokens = 4e7;\r\n  uint256 private _distributedTokens = 1e9;\r\n  uint256 public softCap = 1000 ether;\r\n  uint256 public hardCap = 35000 ether;\r\n  uint256 public preICO_1_Start = 1541030400; // 01/11/2018 00:00:00\r\n  uint256 public preICO_2_Start = 1541980800; // 12/11/2018 00:00:00\r\n  uint256 public preICO_3_Start = 1542844800; // 22/11/2018 00:00:00\r\n  uint256 public ICO_Start = 1543622400; // 01/12/2018 00:00:00\r\n  uint256 public ICO_End = 1548979199; // 31/01/2019 23:59:59\r\n  uint32 public bonus1 = 30; // pre ICO phase 1\r\n  uint32 public bonus2 = 20; // pre ICO phase 2\r\n  uint32 public bonus3 = 10; // pre ICO phase 3\r\n  uint32 public whitelistedBonus = 10;\r\n\r\n  mapping (address => bool) private _whitelist;\r\n\r\n  // tokens accrual\r\n  mapping (address => uint256) public threeMonthsFreezingAccrual;\r\n  mapping (address => uint256) public sixMonthsFreezingAccrual;\r\n  mapping (address => uint256) public nineMonthsFreezingAccrual;\r\n  mapping (address => uint256) public twelveMonthsFreezingAccrual;\r\n\r\n  // investors ledger\r\n  mapping (address => uint256) public ledger;\r\n\r\n  /**\r\n   * Event for tokens accrual logging\r\n   * @param to who tokens where accrued to\r\n   * @param accruedAmount amount of tokens accrued\r\n   * @param freezingTime period for freezing in seconds\r\n   * @param purchasedAmount amount of tokens purchased\r\n   * @param weiValue amount of ether contributed\r\n   */\r\n  event Accrual(\r\n    address to,\r\n    uint256 accruedAmount,\r\n    uint256 freezingTime,\r\n    uint256 purchasedAmount,\r\n    uint256 weiValue\r\n  );\r\n\r\n  /**\r\n   * Event for accrued tokens releasing logging\r\n   * @param to who tokens where release to\r\n   * @param amount amount of tokens released\r\n   */\r\n  event Released(\r\n    address to,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * Event for refund logging\r\n   * @param to who have got refund\r\n   * @param value ether refunded\r\n   */\r\n  event Refunded(\r\n    address to,\r\n    uint256 value\r\n  );\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokensPurchased(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @dev The rate is the conversion between wei and the smallest and indivisible\r\n   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\r\n   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\r\n   * @param wallet Address where collected funds will be forwarded to\r\n   * @param founders Address for founders tokens accrual\r\n   * @param token Address of the token being sold\r\n   */\r\n  constructor(address newOwner, address wallet, address founders, IERC20 token) public {\r\n    require(wallet != address(0));\r\n    require(founders != address(0));\r\n    require(token != address(0));\r\n    require(newOwner != address(0));\r\n    transferOwnership(newOwner);\r\n\r\n    _wallet = wallet;\r\n    _token = token;\r\n\r\n    twelveMonthsFreezingAccrual[founders] = _foundersTokens;\r\n    _accruedTokensAmount = _foundersTokens;\r\n    emit Accrual(founders, _foundersTokens, _twelveMonths, 0, 0);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @return the token being sold.\r\n   */\r\n  function token() public view returns(IERC20) {\r\n    return _token;\r\n  }\r\n\r\n  /**\r\n   * @return the address where funds are collected.\r\n   */\r\n  function wallet() public view returns(address) {\r\n    return _wallet;\r\n  }\r\n\r\n  /**\r\n   * @return the number of token units a buyer gets per wei.\r\n   */\r\n  function rate() public view returns(uint256) {\r\n    return _rate;\r\n  }\r\n\r\n  /**\r\n   * @return the amount of wei raised.\r\n   */\r\n  function weiRaised() public view returns (uint256) {\r\n    return _weiRaised;\r\n  }\r\n\r\n  /**\r\n   * @return if who is whitelisted.\r\n   * @param who investors address\r\n   */\r\n  function whitelist(address who) public view returns (bool) {\r\n    return _whitelist[who];\r\n  }\r\n\r\n  /**\r\n   * add investor to whitelist\r\n   * @param who investors address\r\n   */\r\n  function addToWhitelist(address who) public onlyOwner {\r\n    _whitelist[who] = true;\r\n  }\r\n\r\n  /**\r\n   * remove investor from whitelist\r\n   * @param who investors address\r\n   */\r\n  function removeFromWhitelist(address who) public onlyOwner {\r\n    _whitelist[who] = false;\r\n  }\r\n\r\n  /**\r\n   * Accrue bonuses to advisors\r\n   * @param to address for accrual\r\n   * @param amount tokem amount\r\n   */\r\n  function accrueAdvisorsTokens(address to, uint256 amount) public onlyOwner {\r\n    require(now > ICO_End);\r\n    uint256 tokenBalance = _token.balanceOf(address(this));\r\n    require(tokenBalance >= _accruedTokensAmount.add(amount));\r\n\r\n    _accruedTokensAmount = _accruedTokensAmount.add(amount);\r\n    \r\n    sixMonthsFreezingAccrual[to] = sixMonthsFreezingAccrual[to].add(amount);\r\n\r\n    emit Accrual(to, amount, _sixMonths, 0, 0);    \r\n  }\r\n\r\n  /**\r\n   * Accrue bonuses to partners\r\n   * @param to address for accrual\r\n   * @param amount tokem amount\r\n   */\r\n  function accruePartnersTokens(address to, uint256 amount) public onlyOwner {\r\n    require(now > ICO_End);\r\n    uint256 tokenBalance = _token.balanceOf(address(this));\r\n    require(tokenBalance >= _accruedTokensAmount.add(amount));\r\n\r\n    _accruedTokensAmount = _accruedTokensAmount.add(amount);\r\n    \r\n    nineMonthsFreezingAccrual[to] = nineMonthsFreezingAccrual[to].add(amount);\r\n\r\n    emit Accrual(to, amount, _nineMonths, 0, 0);    \r\n  }\r\n\r\n  /**\r\n   * Accrue bounty and airdrop bonuses\r\n   * @param to address for accrual\r\n   * @param amount tokem amount\r\n   */\r\n  function accrueBountyTokens(address to, uint256 amount) public onlyOwner {\r\n    require(now > ICO_End);\r\n    uint256 tokenBalance = _token.balanceOf(address(this));\r\n    require(tokenBalance >= _accruedTokensAmount.add(amount));\r\n\r\n    _accruedTokensAmount = _accruedTokensAmount.add(amount);\r\n    \r\n    twelveMonthsFreezingAccrual[to] = twelveMonthsFreezingAccrual[to].add(amount);\r\n\r\n    emit Accrual(to, amount, _twelveMonths, 0, 0);    \r\n  }\r\n\r\n  /**\r\n   * release accrued tokens\r\n   */\r\n  function release() public {\r\n    address who = msg.sender;\r\n    uint256 amount;\r\n    if (now > ICO_End.add(_twelveMonths) && twelveMonthsFreezingAccrual[who] > 0) {\r\n      amount = amount.add(twelveMonthsFreezingAccrual[who]);\r\n      _accruedTokensAmount = _accruedTokensAmount.sub(twelveMonthsFreezingAccrual[who]);\r\n      twelveMonthsFreezingAccrual[who] = 0;\r\n    }\r\n    if (now > ICO_End.add(_nineMonths) && nineMonthsFreezingAccrual[who] > 0) {\r\n      amount = amount.add(nineMonthsFreezingAccrual[who]);\r\n      _accruedTokensAmount = _accruedTokensAmount.sub(nineMonthsFreezingAccrual[who]);\r\n      nineMonthsFreezingAccrual[who] = 0;\r\n    }\r\n    if (now > ICO_End.add(_sixMonths) && sixMonthsFreezingAccrual[who] > 0) {\r\n      amount = amount.add(sixMonthsFreezingAccrual[who]);\r\n      _accruedTokensAmount = _accruedTokensAmount.sub(sixMonthsFreezingAccrual[who]);\r\n      sixMonthsFreezingAccrual[who] = 0;\r\n    }\r\n    if (now > ICO_End.add(_threeMonths) && threeMonthsFreezingAccrual[who] > 0) {\r\n      amount = amount.add(threeMonthsFreezingAccrual[who]);\r\n      _accruedTokensAmount = _accruedTokensAmount.sub(threeMonthsFreezingAccrual[who]);\r\n      threeMonthsFreezingAccrual[who] = 0;\r\n    }\r\n    if (amount > 0) {\r\n      _deliverTokens(who, amount);\r\n      emit Released(who, amount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * refund ether\r\n   */\r\n  function refund() public {\r\n    address investor = msg.sender;\r\n    require(now > ICO_End);\r\n    require(_weiRaised < softCap);\r\n    require(ledger[investor] > 0);\r\n    uint256 value = ledger[investor];\r\n    ledger[investor] = 0;\r\n    investor.transfer(value);\r\n    emit Refunded(investor, value);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address beneficiary) public payable {\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // bonus tokens accrual and ensure token balance is enough for accrued tokens release\r\n    _accrueBonusTokens(beneficiary, tokens, weiAmount);\r\n\r\n    // update state\r\n    _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(beneficiary, tokens);\r\n    emit TokensPurchased(\r\n      msg.sender,\r\n      beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    if (_weiRaised >= softCap) _forwardFunds();\r\n\r\n    ledger[msg.sender] = ledger[msg.sender].add(msg.value);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n    /**\r\n   * @dev Accrue bonus tokens.\r\n   * @param beneficiary Address for tokens accrual\r\n   * @param tokenAmount amount of tokens that beneficiary get\r\n   */\r\n  function _accrueBonusTokens(address beneficiary, uint256 tokenAmount, uint256 weiAmount) internal {\r\n    uint32 bonus = 0;\r\n    uint256 bonusTokens = 0;\r\n    uint256 tokenBalance = _token.balanceOf(address(this));\r\n    if (_whitelist[beneficiary] && now < ICO_Start) bonus = bonus + whitelistedBonus;\r\n    if (now < preICO_2_Start) {\r\n      bonus = bonus + bonus1;\r\n      bonusTokens = tokenAmount.mul(bonus).div(100);\r\n\r\n      require(tokenBalance >= _accruedTokensAmount.add(bonusTokens).add(tokenAmount));\r\n\r\n      _accruedTokensAmount = _accruedTokensAmount.add(bonusTokens);\r\n\r\n      nineMonthsFreezingAccrual[beneficiary] = nineMonthsFreezingAccrual[beneficiary].add(bonusTokens);\r\n\r\n      emit Accrual(beneficiary, bonusTokens, _nineMonths, tokenAmount, weiAmount);\r\n    } else if (now < preICO_3_Start) {\r\n      bonus = bonus + bonus2;\r\n      bonusTokens = tokenAmount.mul(bonus).div(100);\r\n\r\n      require(tokenBalance >= _accruedTokensAmount.add(bonusTokens).add(tokenAmount));\r\n\r\n      _accruedTokensAmount = _accruedTokensAmount.add(bonusTokens);\r\n      \r\n      sixMonthsFreezingAccrual[beneficiary] = sixMonthsFreezingAccrual[beneficiary].add(bonusTokens);\r\n\r\n      emit Accrual(beneficiary, bonusTokens, _sixMonths, tokenAmount, weiAmount);\r\n    } else if (now < ICO_Start) {\r\n      bonus = bonus + bonus3;\r\n      bonusTokens = tokenAmount.mul(bonus).div(100);\r\n\r\n      require(tokenBalance >= _accruedTokensAmount.add(bonusTokens).add(tokenAmount));\r\n\r\n      _accruedTokensAmount = _accruedTokensAmount.add(bonusTokens);\r\n      \r\n      threeMonthsFreezingAccrual[beneficiary] = threeMonthsFreezingAccrual[beneficiary].add(bonusTokens);\r\n\r\n      emit Accrual(beneficiary, bonusTokens, _threeMonths, tokenAmount, weiAmount);\r\n    } else {\r\n      require(tokenBalance >= _accruedTokensAmount.add(tokenAmount));\r\n\r\n      emit Accrual(beneficiary, 0, 0, tokenAmount, weiAmount);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\r\n   *   super._preValidatePurchase(beneficiary, weiAmount);\r\n   *   require(weiRaised().add(weiAmount) <= cap);\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(\r\n    address beneficiary,\r\n    uint256 weiAmount\r\n  )\r\n    internal view\r\n  {\r\n    require(beneficiary != address(0));\r\n    require(weiAmount != 0);\r\n    require(_weiRaised.add(weiAmount) <= hardCap);\r\n    require(now >= preICO_1_Start);\r\n    require(now <= ICO_End);\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param beneficiary Address performing the token purchase\r\n   * @param tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _token.safeTransfer(beneficiary, tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param beneficiary Address receiving the tokens\r\n   * @param tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address beneficiary,\r\n    uint256 tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(beneficiary, tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev The way in which ether is converted to tokens.\r\n   * @param weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(\r\n    uint256 weiAmount\r\n  )\r\n    internal view returns (uint256)\r\n  {\r\n    return weiAmount.mul(_rate).div(1e18);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    uint256 balance = address(this).balance;\r\n    _wallet.transfer(balance);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nineMonthsFreezingAccrual\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"accrueBountyTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICO_3_Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICO_2_Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"accruePartnersTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"accrueAdvisorsTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"twelveMonthsFreezingAccrual\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sixMonthsFreezingAccrual\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICO_End\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonus3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICO_1_Start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistedBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"threeMonthsFreezingAccrual\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"ledger\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"},{\"name\":\"wallet\",\"type\":\"address\"},{\"name\":\"founders\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"accruedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"freezingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"purchasedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiValue\",\"type\":\"uint256\"}],\"name\":\"Accrual\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d0dff57971c7e064fefa475b4547652183d8da1f000000000000000000000000161efcf7a6a38ec690954fc427630dd4ba7c6454000000000000000000000000d0dff57971c7e064fefa475b4547652183d8da1f0000000000000000000000009ce3ddb8885cd217392b3fc29bc648965029192f","Library":"","SwarmSource":"bzzr://8f3e78455d248ab8a56f01da363766a8b8b5a0887171c0bec12c56f22a30c796"}]}