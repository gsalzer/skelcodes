{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint8 public decimals;\r\n\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n    \r\n\r\n/**\r\n * Copyright (C) 2018  Smartz, LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\").\r\n * You may not use this file except in compliance with the License.\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\r\n */\r\n \r\n/**\r\n * @title SwapTokenForEther\r\n * Swap tokens of participant1 for ether of participant2\r\n *\r\n * @author Vladimir Khramov <vladimir.khramov@smartz.io>\r\n */\r\ncontract Swap {\r\n\r\n    address public participant1;\r\n    address public participant2;\r\n\r\n    ERC20Basic public participant1Token;\r\n    uint256 public participant1TokensCount;\r\n\r\n    uint256 public participant2EtherCount;\r\n\r\n    bool public isFinished = false;\r\n\r\n\r\n    function Swap() public payable {\r\n\r\n        participant1 = msg.sender;\r\n        participant2 = 0x6422665474ff39b0cfce217587123521c56cf33d;\r\n\r\n        participant1Token = ERC20Basic(0x6422665474fF39B0Cfce217587123521C56cF33d);\r\n        require(participant1Token.decimals() <= 18);\r\n        \r\n        participant1TokensCount = 1000 ether / 10**(18-uint256(participant1Token.decimals()));\r\n\r\n        participant2EtherCount = 0.001 ether;\r\n        \r\n        assert(participant1 != participant2);\r\n        assert(participant1Token != address(0));\r\n        assert(participant1TokensCount > 0);\r\n        assert(participant2EtherCount > 0);\r\n        \r\n        \r\n    }\r\n\r\n    /**\r\n     * Ether accepted\r\n     */\r\n    function () external payable {\r\n        require(!isFinished);\r\n        require(msg.sender == participant2);\r\n\r\n        if (msg.value > participant2EtherCount) {\r\n            msg.sender.transfer(msg.value - participant2EtherCount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Swap tokens for ether\r\n     */\r\n    function swap() external {\r\n        require(!isFinished);\r\n\r\n        require(this.balance >= participant2EtherCount);\r\n\r\n        uint256 tokensBalance = participant1Token.balanceOf(this);\r\n        require(tokensBalance >= participant1TokensCount);\r\n\r\n        isFinished = true;\r\n        \r\n        \r\n        //check transfer\r\n        uint token1Participant2InitialBalance = participant1Token.balanceOf(participant2);\r\n    \r\n\r\n        require(participant1Token.transfer(participant2, participant1TokensCount));\r\n        if (tokensBalance > participant1TokensCount) {\r\n            require(\r\n                participant1Token.transfer(participant1, tokensBalance - participant1TokensCount)\r\n            );\r\n        }\r\n\r\n        participant1.transfer(this.balance);\r\n        \r\n        \r\n        //check transfer\r\n        assert(participant1Token.balanceOf(participant2) >= token1Participant2InitialBalance+participant1TokensCount);\r\n    \r\n    }\r\n\r\n    /**\r\n     * Refund tokens or ether by participants\r\n     */\r\n    function refund() external {\r\n        if (msg.sender == participant1) {\r\n            uint256 tokensBalance = participant1Token.balanceOf(this);\r\n            require(tokensBalance>0);\r\n\r\n            participant1Token.transfer(participant1, tokensBalance);\r\n        } else if (msg.sender == participant2) {\r\n            require(this.balance > 0);\r\n            participant2.transfer(this.balance);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n\r\n    /**\r\n     * Tokens count sent by participant #1\r\n     */\r\n    function participant1SentTokensCount() public view returns (uint256) {\r\n        return participant1Token.balanceOf(this);\r\n    }\r\n\r\n    /**\r\n     * Ether count sent by participant #2\r\n     */\r\n    function participant2SentEtherCount() public view returns (uint256) {\r\n        return this.balance;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"participant2EtherCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"participant1TokensCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"participant1Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"participant2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"participant1SentTokensCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"participant1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"participant2SentEtherCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Swap","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d06c8f3ee0a3dbfe2db48c7e1b229d86b909d974e41b2d59608f3efb52eae0f0"}]}