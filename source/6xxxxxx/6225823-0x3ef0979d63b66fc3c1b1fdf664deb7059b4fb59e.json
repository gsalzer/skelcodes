{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ECRecovery.sol\r\n\r\n/**\r\n * @title Eliptic curve signature operations\r\n *\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n *\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n *\r\n */\r\n\r\nlibrary ECRecovery {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using their signature\r\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 hash, bytes sig)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    // Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    // ecrecover takes the signature parameters, and the only way to get them\r\n    // currently is to use assembly.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      // solium-disable-next-line arg-overflow\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * toEthSignedMessageHash\r\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n   * @dev and hash the result\r\n   */\r\n  function toEthSignedMessageHash(bytes32 hash)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    // 32 is the length in bytes of hash,\r\n    // enforced by the type signature above\r\n    return keccak256(\r\n      \"\\x19Ethereum Signed Message:\\n32\",\r\n      hash\r\n    );\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/LuckySeven.sol\r\n\r\ncontract LuckySeven is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public minBet;\r\n  uint256 public maxBet;\r\n  bool public paused;\r\n  address public signer;\r\n  address public house;\r\n\r\n  mapping (address => uint256) public balances;\r\n  mapping (address => bool) public diceRolled;\r\n  mapping (address => bytes) public betSignature;\r\n  mapping (address => uint256) public betAmount;\r\n  mapping (address => uint256) public betValue;\r\n  mapping (bytes => bool) usedSignatures;\r\n\r\n  mapping (address => uint256) public totalDiceRollsByAddress;\r\n  mapping (address => uint256) public totalBetsByAddress;\r\n  mapping (address => uint256) public totalBetsWonByAddress;\r\n  mapping (address => uint256) public totalBetsLostByAddress;\r\n\r\n  uint256 public pendingBetsBalance;\r\n  uint256 public belowSevenBets;\r\n  uint256 public aboveSevenBets;\r\n  uint256 public luckySevenBets;\r\n\r\n  uint256 public betsWon;\r\n  uint256 public betsLost;\r\n\r\n  event Event (\r\n      string name,\r\n      address indexed _better,\r\n      uint256 num1,\r\n      uint256 num2\r\n  );\r\n\r\n  constructor(uint256 _minBet, uint256 _maxBet, address _signer, address _house) public {\r\n    minBet = _minBet;\r\n    maxBet = _maxBet;\r\n    signer = _signer;\r\n    house = _house;\r\n  }\r\n\r\n  function setSigner(address _signer) public onlyOwner {\r\n    signer = _signer;\r\n  }\r\n\r\n  function setHouse(address _house) public onlyOwner {\r\n    // note previous house balance\r\n    uint256 existingHouseBalance = balances[house];\r\n\r\n    // drain existing house\r\n    balances[house] = 0;\r\n\r\n    // update house\r\n    house = _house;\r\n\r\n    // update balance for new house\r\n    balances[house] = balances[house].add(existingHouseBalance);\r\n  }\r\n\r\n  function setMinBet(uint256 _minBet) public onlyOwner {\r\n    minBet = _minBet;\r\n  }\r\n\r\n  function setMaxBet(uint256 _maxBet) public onlyOwner {\r\n    maxBet = _maxBet;\r\n  }\r\n\r\n  function setPaused(bool _paused) public onlyOwner {\r\n    paused = _paused;\r\n  }\r\n\r\n  function () external payable {\r\n    topup();\r\n  }\r\n\r\n  function topup() payable public {\r\n    require(msg.value > 0);\r\n    balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n  }\r\n\r\n  function withdraw(uint256 amount) public {\r\n    require(amount > 0);\r\n    require(balances[msg.sender] >= amount);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(amount);\r\n    msg.sender.transfer(amount);\r\n  }\r\n\r\n  function rollDice(bytes signature) public {\r\n    require(!paused);\r\n\r\n    // validate hash is not used before\r\n    require(!usedSignatures[signature]);\r\n\r\n    // mark the hash as used\r\n    usedSignatures[signature] = true;\r\n\r\n    // no existing bet placed\r\n    require(betAmount[msg.sender] == 0);\r\n\r\n    // set dice rolled to true\r\n    diceRolled[msg.sender] = true;\r\n    betSignature[msg.sender] = signature;\r\n\r\n    totalDiceRollsByAddress[msg.sender] = totalDiceRollsByAddress[msg.sender].add(1);\r\n    emit Event('dice-rolled', msg.sender, 0, 0);\r\n  }\r\n\r\n  function placeBet(uint256 amount, uint256 value) public {\r\n    require(!paused);\r\n\r\n    // validate inputs\r\n    require(amount >= minBet && amount <= maxBet);\r\n    require(value >= 1 && value <= 3);\r\n\r\n    // validate dice rolled\r\n    require(diceRolled[msg.sender]);\r\n\r\n    // validate no existing bet placed\r\n    require(betAmount[msg.sender] == 0);\r\n\r\n    // validate user has balance to place the bet\r\n    require(balances[msg.sender] >= amount);\r\n\r\n    // transfer balance to house\r\n    balances[msg.sender] = balances[msg.sender].sub(amount);\r\n    balances[house] = balances[house].add(amount);\r\n    pendingBetsBalance = pendingBetsBalance.add(amount);\r\n\r\n    // store bet amount and value\r\n    betValue[msg.sender] = value;\r\n    betAmount[msg.sender] = amount;\r\n\r\n    totalBetsByAddress[msg.sender] = totalBetsByAddress[msg.sender].add(1);\r\n    emit Event('bet-placed', msg.sender, amount, 0);\r\n  }\r\n\r\n  function completeBet(bytes32 hash) public returns (uint256, uint256){\r\n    // validate there is bet placed\r\n    require(betAmount[msg.sender] > 0);\r\n\r\n    // validate input hash\r\n    require(ECRecovery.recover(hash, betSignature[msg.sender]) == signer);\r\n\r\n    // compute dice number and calculate amount won\r\n    uint256 num1 = (\r\n      uint256(\r\n        ECRecovery.toEthSignedMessageHash(\r\n          keccak256(\r\n            abi.encodePacked(hash)\r\n          )\r\n        )\r\n      ) % 6\r\n    ) + 1;\r\n\r\n    uint256 num2 = (\r\n      uint256(\r\n        ECRecovery.toEthSignedMessageHash(\r\n          sha256(\r\n            abi.encodePacked(hash)\r\n          )\r\n        )\r\n      ) % 6\r\n    ) + 1;\r\n    uint256 num = num1 + num2;\r\n    uint256 value = betValue[msg.sender];\r\n    uint256 winRate = 0;\r\n    if (num <= 6) {\r\n      belowSevenBets = belowSevenBets.add(1);\r\n      if (value == 1) {\r\n        winRate = 2;\r\n      }\r\n    } else if (num == 7) {\r\n      luckySevenBets = luckySevenBets.add(1);\r\n      if (value == 2) {\r\n        winRate = 3;\r\n      }\r\n    } else {\r\n      aboveSevenBets = aboveSevenBets.add(1);\r\n      if (value == 3) {\r\n        winRate = 2;\r\n      }\r\n    }\r\n\r\n    uint256 amountWon = betAmount[msg.sender] * winRate;\r\n\r\n    // transfer balance from house\r\n    if (amountWon > 0) {\r\n      balances[house] = balances[house].sub(amountWon);\r\n      balances[msg.sender] = balances[msg.sender].add(amountWon);\r\n      totalBetsWonByAddress[msg.sender] = totalBetsWonByAddress[msg.sender].add(1);\r\n      betsWon = betsWon.add(1);\r\n      emit Event('bet-won', msg.sender, amountWon, num);\r\n    } else {\r\n      totalBetsLostByAddress[msg.sender] = totalBetsLostByAddress[msg.sender].add(1);\r\n      betsLost = betsLost.add(1);\r\n      emit Event('bet-lost', msg.sender, betAmount[msg.sender], num);\r\n    }\r\n    pendingBetsBalance = pendingBetsBalance.sub(betAmount[msg.sender]);\r\n\r\n    // reset diceRolled and amount\r\n    diceRolled[msg.sender] = false;\r\n    betAmount[msg.sender] = 0;\r\n    betValue[msg.sender] = 0;\r\n    betSignature[msg.sender] = '0x';\r\n\r\n    return (amountWon, num);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"pendingBetsBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"diceRolled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBetsByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"betValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"betAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betsWon\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"aboveSevenBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDiceRollsByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"topup\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_house\",\"type\":\"address\"}],\"name\":\"setHouse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_maxBet\",\"type\":\"uint256\"}],\"name\":\"setMaxBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBet\",\"type\":\"uint256\"}],\"name\":\"setMinBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"betSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"rollDice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"belowSevenBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"completeBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBetsWonByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalBetsLostByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"betsLost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"luckySevenBets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"house\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_minBet\",\"type\":\"uint256\"},{\"name\":\"_maxBet\",\"type\":\"uint256\"},{\"name\":\"_signer\",\"type\":\"address\"},{\"name\":\"_house\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"_better\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"num1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"num2\",\"type\":\"uint256\"}],\"name\":\"Event\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LuckySeven","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000bb03f21b16dbda9fd50534ff2db0f9af1c2417c300000000000000000000000016f59d8073b9053c9ea2b3a121a5f04bb3e7718e","Library":"","SwarmSource":"bzzr://d7d94732dcdb369b07e78fb0061adbc582ece508d456db3cbdc06572e7d1fadb"}]}