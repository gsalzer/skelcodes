{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*--------------------------------------------------\r\n ____                           ____              _ \r\n/ ___| _   _ _ __   ___ _ __   / ___|__ _ _ __ __| |\r\n\\___ \\| | | | '_ \\ / _ \\ '__| | |   / _` | '__/ _` |\r\n ___) | |_| | |_) |  __/ |    | |__| (_| | | | (_| |\r\n|____/ \\__,_| .__/ \\___|_|     \\____\\__,_|_|  \\__,_|\r\n            |_|                                   \r\n\r\n                                    2018-08-31 V1.0\r\n---------------------------------------------------*/\r\n\r\ncontract SuperCard {\r\n\tevent onRecieveEth\r\n    (\r\n        address user,\r\n\t\tuint256 ethIn,\r\n        uint256 timeStamp\r\n    );\r\n\t\r\n    event onSendEth\r\n    (\r\n        address user,\r\n\t\tuint256 ethOut,\r\n        uint256 timeStamp\r\n    );\r\n\r\n\tevent onPotAddup\r\n    (\r\n        address operator,\r\n\t\tuint256 amount\r\n    );\r\n\r\n\tusing SafeMath for *;\r\n\r\n    string constant public name   = \"SuperCard\";\r\n    string constant public symbol = \"SPC\";\r\n\r\n\tstruct Player \r\n\t{\r\n        uint256 ethIn;  // total input\r\n        uint256 ethOut; // total output\r\n\t}\r\n\r\n\tstruct txRecord \r\n\t{\r\n        address user; // player address\r\n\t\tbool used;    // replay\r\n\t\tbool todo;    // \r\n\t}\r\n\r\n\tmapping( address => Player) public plyr_;    // (address => data) player data\r\n\tmapping( bytes32 => txRecord) public txRec_; // (hashCode => data) hashCode data\r\n\r\n    address _admin;\r\n\taddress _cfo;\r\n\r\n\tbool public activated_ = false;\r\n\r\n    //uint256 public plan_active_time = now + 7200 seconds;\r\n\tuint256 public plan_active_time = 1535709600;\r\n\r\n\t// total received\r\n\tuint256 totalETHin = 0;\r\n\r\n\t// total sendout\r\n\tuint256 totalETHout = 0;\r\n\r\n\tuint256 _pot = 0;\r\n\r\n//==============================================================================\r\n//     _ _  _  __|_ _    __|_ _  _  .\r\n//    (_(_)| |_\\ | | |_|(_ | (_)|   .  (initial data setup upon contract deploy)\r\n//==============================================================================\r\n\tconstructor()\r\n\t\tpublic\r\n\t{\r\n\t\t_admin = msg.sender;\r\n\t\t_cfo = 0x39db0822a5eb167f2f92607d5c77566e23a88aa7;\r\n\t}\r\n\r\n\tmodifier onlyCFOAndAdmin()\r\n\t{\r\n\t\trequire(((msg.sender == _cfo) || (msg.sender == _admin)), \"sorry, not cfo/admin\");\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyCFO()\r\n\t{\r\n\t\trequire(msg.sender == _cfo, \"sorry, not cfo\");\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier isHuman() \r\n\t{\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry, humans only\");\r\n        _;\r\n    }\r\n\r\n\tmodifier isActivated()\r\n\t{\r\n        if ( activated_ == false )\r\n\t\t{\r\n          if (now >= plan_active_time)\r\n\t\t  {\r\n\t\t\t  activated_ = true;\r\n          }\r\n        }\r\n        require(activated_ == true, \"sorry, its not start yet.\");\r\n        _;\r\n    }\r\n\r\n    function setPlanActiveTime(uint256 _time)\r\n\t\tonlyCFOAndAdmin()\r\n\t\tpublic\r\n    {\r\n        plan_active_time = _time;\r\n    }\r\n\r\n\tfunction getPlanActiveTime()\r\n\t\tpublic\r\n\t\tview\r\n\t\treturns(uint256, uint256)\r\n    {\r\n        return(plan_active_time, now);\r\n    }\r\n\r\n\tfunction newCFO(string addr)\r\n\t\tonlyCFOAndAdmin()\r\n\t\tpublic \r\n\t\treturns (bool)\r\n\t{\r\n\t\taddress newCFOaddress;\r\n\r\n\t\tnewCFOaddress = parseAddr(addr);\r\n\r\n\t\tif (newCFOaddress != _cfo)\r\n\t\t{\r\n\t\t\t_cfo = newCFOaddress;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction distribute(address addr, uint256 ethPay)\r\n\t\tpublic\r\n\t\tonlyCFOAndAdmin()\r\n\t\tisActivated()\r\n\t{\r\n\t\trequire((ethPay <= address(this).balance), \"sorry, demand more than balance\");\r\n\t\trequire((ethPay > 0), \"sorry, pay zero\");\r\n\r\n\t\taddr.transfer(ethPay);\r\n\r\n\t\temit onSendEth\r\n\t\t(\r\n\t\t\taddr,\r\n\t\t\tethPay,\r\n\t\t\tnow\r\n\t\t);\r\n\t}\r\n\r\n\tfunction potAddup()\r\n        external\r\n\t\tonlyCFOAndAdmin()\r\n        payable\r\n    {\r\n        _pot = _pot.add(msg.value);\r\n\r\n\t\temit onPotAddup\r\n\t\t(\r\n\t\t\tmsg.sender,\r\n\t\t\tmsg.value\r\n\t\t);\r\n    }\r\n\r\n\tfunction buy()\r\n        public\r\n\t\tisHuman()\r\n        payable\r\n    {\r\n\t\tuint256 _now = now;\r\n\r\n\t\tif (activated_ == false)\r\n\t\t{\r\n\t\t\trequire((_now >= plan_active_time), \"sorry, buy before start\");\r\n\t\t\tactivated_ = true;\r\n\t\t}\r\n\r\n\t\trequire((msg.value > 0), \"sorry, buy zero eth\");\r\n\t\taddress buyer = msg.sender;\r\n\r\n\t\tplyr_[buyer].ethIn = (plyr_[buyer].ethIn).add(msg.value);\r\n\t\ttotalETHin = totalETHin.add(msg.value);\r\n\t\temit onRecieveEth\r\n\t\t(\r\n\t\t\tbuyer,\r\n\t\t\tmsg.value,\r\n\t\t\t_now\r\n\t\t);\r\n    }\r\n\t\r\n    function()\r\n        public\r\n\t\tisHuman()\r\n\t\tisActivated()\r\n        payable\r\n    {\r\n\t\tuint256 _now = now;\r\n\t\taddress buyer = msg.sender;\r\n\r\n\t\trequire((_now >= plan_active_time), \"sorry, buy before start\");\r\n\t\trequire((msg.value > 0), \"sorry, buy zero eth\");\r\n\r\n\t\tplyr_[buyer].ethIn = (plyr_[buyer].ethIn).add(msg.value);\r\n\t\ttotalETHin = totalETHin.add(msg.value);\r\n\t\temit onRecieveEth\r\n\t\t(\r\n\t\t\tbuyer,\r\n\t\t\tmsg.value,\r\n\t\t\t_now\r\n\t\t);\r\n    }\r\n\r\n\tfunction queryhashcodeused(bytes32 hashCode)\r\n\t\tpublic\r\n\t\tview\r\n\t\tisActivated()\r\n\t\tisHuman()\r\n\t\treturns(bool)\r\n\t{\r\n\t\tif((txRec_[hashCode].user != 0) || (txRec_[hashCode].used == true))\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction query2noactive(bytes32 hashCode)\r\n\t\tpublic\r\n\t\tview\r\n\t\tisHuman()\r\n\t\treturns(bool)\r\n\t{\r\n\t\tif((txRec_[hashCode].user != 0) || (txRec_[hashCode].used == true))\r\n\t\t{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdraw(bytes32 hashCode)\r\n        public\r\n\t\tisActivated()\r\n\t\tisHuman()\r\n    {\r\n\t\trequire((plyr_[msg.sender].ethIn > 0), \"sorry, not user\");\r\n\t\trequire((txRec_[hashCode].used != true), \"sorry, user replay withdraw\");\r\n\r\n\t\ttxRec_[hashCode].user = msg.sender;\r\n\t\ttxRec_[hashCode].todo = true;\r\n\t\ttxRec_[hashCode].used = true;\r\n\t}\r\n\r\n\t// uint256 amount, wei format\r\n\tfunction approve(string orderid, string addr, string amt, string txtime, uint256 amount)\r\n\t\tpublic\r\n        onlyCFO()\r\n\t\tisActivated()\r\n\t{\r\n\t\taddress user;\r\n\t\tbytes32 hashCode;\r\n\t\tuint256 ethOut;\r\n\r\n\t\tuser = parseAddr(addr);\r\n\r\n\t\thashCode = sha256(orderid, addr, amt, txtime);\r\n\r\n\t\trequire((txRec_[hashCode].user == user), \"sorry, hashcode error\");\r\n\t\trequire((txRec_[hashCode].todo == true), \"sorry, hashcode replay\");\r\n\r\n\t\ttxRec_[hashCode].todo = false;\r\n\r\n\t\tethOut = amount; // wei format\r\n\t\trequire(((ethOut > 0) && (ethOut <= address(this).balance)), \"sorry, approve amount error\");\r\n\r\n\t\ttotalETHout = totalETHout.add(ethOut);\r\n\t\tplyr_[user].ethOut = (plyr_[user].ethOut).add(ethOut);\r\n\t\tuser.transfer(ethOut);\r\n\r\n\t\temit onSendEth\r\n\t\t(\r\n\t        user,\r\n\t\t\tethOut,\r\n\t\t\tnow\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getUserInfo(string useraddress)\r\n\t\tpublic\r\n\t\tview\r\n\t\tonlyCFOAndAdmin()\r\n\t\treturns(address, uint256, uint256)\r\n\t{\r\n\t\taddress user;\r\n\r\n\t\tuser = parseAddr(useraddress);\r\n\r\n\t\treturn\r\n\t\t(\r\n\t\t\tuser,   // player address\r\n\t\t\tplyr_[user].ethIn,  // total input\r\n\t\t\tplyr_[user].ethOut  // total output\r\n\t\t);\r\n\t}\r\n\r\n\tfunction parseAddr(string _a)\r\n\t    internal\r\n\t    returns (address)\r\n\t{\r\n        bytes memory tmp = bytes(_a);\r\n        uint160 iaddr = 0;\r\n        uint160 b1;\r\n        uint160 b2;\r\n        for (uint i=2; i<2+2*20; i+=2){\r\n            iaddr *= 256;\r\n            b1 = uint160(tmp[i]);\r\n            b2 = uint160(tmp[i+1]);\r\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\r\n            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\r\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\r\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\r\n            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\r\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\r\n            iaddr += (b1*16+b2);\r\n        }\r\n        return address(iaddr);\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr\r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"plan_active_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"string\"}],\"name\":\"newCFO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hashCode\",\"type\":\"bytes32\"}],\"name\":\"query2noactive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setPlanActiveTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"useraddress\",\"type\":\"string\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"hashCode\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orderid\",\"type\":\"string\"},{\"name\":\"addr\",\"type\":\"string\"},{\"name\":\"amt\",\"type\":\"string\"},{\"name\":\"txtime\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"potAddup\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hashCode\",\"type\":\"bytes32\"}],\"name\":\"queryhashcodeused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"ethIn\",\"type\":\"uint256\"},{\"name\":\"ethOut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlanActiveTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"txRec_\",\"outputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"used\",\"type\":\"bool\"},{\"name\":\"todo\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"ethPay\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onRecieveEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onSendEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onPotAddup\",\"type\":\"event\"}]","ContractName":"SuperCard","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://670ef648286e79fcb159989ebcdf49f7e9258bea490fa1c8bf8890fdc8d0bcc2"}]}