{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n/**\r\n* @title ROC ICO Contract\r\n*/\r\n\r\n/**\r\n * @title SafeMath by OpenZeppelin\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ninterface ERC20Basic {\r\n    function totalSupply() constant external returns (uint256 supply);\r\n    function balanceOf(address _owner) constant external returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title admined\r\n * @notice This contract is administered\r\n */\r\ncontract admined {\r\n    mapping(address => uint8) public level;\r\n    //Levels are\r\n    //0 normal user (default)\r\n    //1 basic admin\r\n    //2 master admin\r\n\r\n    /**\r\n    * @dev This contructor takes the msg.sender (deployer wallet) as the first master admin\r\n    */\r\n    constructor() internal {\r\n        level[msg.sender] = 2; //Set initial admin to contract creator\r\n        emit AdminshipUpdated(msg.sender,2);\r\n    }\r\n\r\n    /**\r\n    * @dev This modifier limits function execution to the admin\r\n    */\r\n    modifier onlyAdmin(uint8 _level) { //A modifier to define admin-only functions\r\n        require(level[msg.sender] >= _level );\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice This function set adminship on the contract to _newAdmin\r\n    * @param _newAdmin The new admin of the contract\r\n    * @param _level The level assigned\r\n    */\r\n    function adminshipLevel(address _newAdmin, uint8 _level) onlyAdmin(2) public { //Admin can be set\r\n        require(_newAdmin != address(0));\r\n        level[_newAdmin] = _level;\r\n        emit AdminshipUpdated(_newAdmin,_level);\r\n    }\r\n\r\n    /**\r\n    * @dev Log Events\r\n    */\r\n    event AdminshipUpdated(address _newAdmin, uint8 _level);\r\n\r\n}\r\n\r\ncontract ROCICO is admined {\r\n\r\n    using SafeMath for uint256;\r\n    //This ico have these possible states\r\n    enum State {\r\n        Stage1,\r\n        Stage2,\r\n        Stage3,\r\n        Successful\r\n    }\r\n    //Public variables\r\n\r\n    //Time-state Related\r\n    State public state = State.Stage1; //Set initial stage\r\n    uint256 public startTime = 1536883200; //Human time (GMT): Friday, 14 September 2018 0:00:00\r\n    uint256 public Stage1Deadline = 1537833600; //Human time (GMT): Tuesday, 25 September 2018 0:00:00\r\n    uint256 public Stage2Deadline = 1538697600; //Human time (GMT): Friday, 5 October 2018 0:00:00\r\n    uint256 public Stage3Deadline = 1539647999; //Human time (GMT): Monday, 15 October 2018 23:59:59\r\n    uint256 public completedAt; //Set when ico finish\r\n\r\n    //Token-eth related\r\n    uint256 public totalRaised; //eth collected in wei\r\n    uint256 public totalDistributed; //Whole sale tokens distributed\r\n    ERC20Basic public tokenReward; //Token contract address\r\n\r\n    //Contract details\r\n    address public creator;\r\n    address public beneficiary;\r\n    string public version = '1';\r\n\r\n    //Tokens per eth rates\r\n    uint256[3] rates = [1000000,800000,700000];\r\n\r\n    //events for log\r\n    event LogFundrisingInitialized(address _creator);\r\n    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\r\n    event LogBeneficiaryPaid(address _beneficiaryAddress);\r\n    event LogContributorsPayout(address _addr, uint _amount);\r\n    event LogFundingSuccessful(uint _totalRaised);\r\n\r\n    //Modifier to prevent execution if ico has ended\r\n    modifier notFinished() {\r\n        require(state != State.Successful);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @notice ICO constructor\r\n    */\r\n    constructor(address _beneficiaryAddress, address _tokenAddress) public {\r\n\r\n        require(_beneficiaryAddress != address(0));\r\n\r\n        beneficiary = _beneficiaryAddress;\r\n        creator = msg.sender; //Creator is set on deployment\r\n        tokenReward = ERC20Basic(_tokenAddress); //Token contract address\r\n\r\n        emit LogFundrisingInitialized(beneficiary);\r\n    }\r\n\r\n    /**\r\n    * @notice contribution handler\r\n    */\r\n    function contribute() public notFinished payable {\r\n\r\n        //Minimum contribution 0.001 eth\r\n        require(msg.value >= 1 finney);\r\n\r\n        uint256 tokenBought = 0; //tokens bought variable\r\n\r\n        totalRaised = totalRaised.add(msg.value); //ether received counter updated\r\n\r\n        emit LogFundingReceived(msg.sender, msg.value, totalRaised); //log\r\n\r\n        if(state == State.Stage1){\r\n\r\n            tokenBought = msg.value.mul(rates[0]); //Stage1 rate\r\n\r\n            //Bonus 25%\r\n            tokenBought = tokenBought.mul(125);\r\n            tokenBought = tokenBought.div(100);\r\n\r\n        } else if(state == State.Stage2){\r\n\r\n            tokenBought = msg.value.mul(rates[1]); //Stage2 rate\r\n\r\n            //Bonus 15%\r\n            tokenBought = tokenBought.mul(115);\r\n            tokenBought = tokenBought.div(100);\r\n\r\n        } else {\r\n\r\n            tokenBought = msg.value.mul(rates[2]); //Stage3 rate\r\n\r\n            //Bonus 5%\r\n            tokenBought = tokenBought.mul(105);\r\n            tokenBought = tokenBought.div(100);\r\n\r\n        }\r\n\r\n        tokenBought = tokenBought.div(1e10); //Decimals correction\r\n\r\n        if(msg.value >= 5 ether){\r\n          tokenBought = tokenBought.mul(2); //+100%\r\n        }\r\n\r\n        totalDistributed = totalDistributed.add(tokenBought); //whole tokens sold counter updated\r\n\r\n        beneficiary.transfer(address(this).balance);\r\n\r\n        emit LogBeneficiaryPaid(creator);\r\n\r\n        require(tokenReward.transfer(msg.sender,tokenBought));\r\n\r\n        emit LogContributorsPayout(msg.sender,tokenBought); //Log the claim\r\n\r\n        checkIfFundingCompleteOrExpired(); //State check\r\n    }\r\n\r\n    /**\r\n    * @notice function to check status\r\n    */\r\n    function checkIfFundingCompleteOrExpired() public {\r\n\r\n        if( now >= Stage3Deadline && state != State.Successful ){//If deadline is reached\r\n\r\n            state = State.Successful; //ICO becomes Successful\r\n            completedAt = now; //ICO is complete\r\n\r\n            emit LogFundingSuccessful(totalRaised); //we log the finish\r\n            successful(); //and execute closure\r\n\r\n        } else if (state == State.Stage1 && now >= Stage1Deadline){\r\n\r\n            state = State.Stage2;\r\n\r\n        } else if (state == State.Stage2 && now >= Stage2Deadline){\r\n\r\n            state = State.Stage3;\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice successful closure handler\r\n    */\r\n    function successful() public {\r\n        //When successful\r\n        require(state == State.Successful);\r\n\r\n        //If there is any token left after ico\r\n        uint256 remanent = tokenReward.balanceOf(this); //Total tokens remaining\r\n        require(tokenReward.transfer(beneficiary,remanent));//Tokens are send back to creator\r\n\r\n        //After successful ico all remaining eth is send to beneficiary\r\n        beneficiary.transfer(address(this).balance);\r\n        emit LogBeneficiaryPaid(creator);\r\n    }\r\n\r\n    /**\r\n    * @notice Function to claim any token stuck on contract\r\n    */\r\n    function externalTokensRecovery(ERC20Basic _address) onlyAdmin(2) public{\r\n\r\n        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\r\n        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\r\n\r\n    }\r\n\r\n    /*\r\n    * @dev Direct payments handler\r\n    */\r\n    function () public payable {\r\n\r\n        contribute();\r\n\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Stage2Deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"externalTokensRecovery\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Stage1Deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkIfFundingCompleteOrExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"successful\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"},{\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"adminshipLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"level\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Stage3Deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_beneficiaryAddress\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"LogFundrisingInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_currentTotal\",\"type\":\"uint256\"}],\"name\":\"LogFundingReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiaryAddress\",\"type\":\"address\"}],\"name\":\"LogBeneficiaryPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogContributorsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_totalRaised\",\"type\":\"uint256\"}],\"name\":\"LogFundingSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"AdminshipUpdated\",\"type\":\"event\"}]","ContractName":"ROCICO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006a930f02991cd37315580edbfa41a8d0f6869902000000000000000000000000ab3087081352ca53cc86a977d2c33d6d172438b1","Library":"","SwarmSource":"bzzr://15d78b2e0bc5a1d3d074c6a13eda51f6cb8f3f5af7f5eb2d66a0719d38a87c03"}]}