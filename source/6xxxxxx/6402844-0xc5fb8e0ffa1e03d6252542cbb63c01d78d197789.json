{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract OneEther {\r\n\r\n    event onOpenNewBet(\r\n        uint256 indexed bID,\r\n        address owner,\r\n        uint256 check,\r\n        uint256 unit,\r\n        uint256 recordTime\r\n    );\r\n    event onEditBet(\r\n        uint256 indexed bID,\r\n        address owner,\r\n        uint256 check,\r\n        uint256 unit,\r\n        uint256 recordTime\r\n    );\r\n    event onOpenNewRound(\r\n        uint256 indexed bID,\r\n        uint256 indexed rID,\r\n        uint256 total,\r\n        uint256 current,\r\n        uint256 ethAmount,\r\n        uint256 recordTime\r\n    );\r\n    event RoundMask(\r\n        uint256 rID,\r\n        bytes32 hashmask\r\n    );\r\n    event onReveal(\r\n        uint256 indexed rID,\r\n        address winner,\r\n        uint256 reward,\r\n        uint256 teamFee,\r\n        uint256 scretNumber,\r\n        uint256 randomNumber,\r\n        uint256 recordTime\r\n    );\r\n    event onBuyBet(\r\n        uint256 indexed bID,\r\n        uint256 indexed rID,\r\n        address playerAddress,\r\n        uint256 amount,\r\n        uint256 key,\r\n        uint256 playerCode,\r\n        uint256 invator,\r\n        uint256 recordTime\r\n    );\r\n\r\n    event onRoundUpdate(\r\n        uint256 indexed bID,\r\n        uint256 indexed rID,\r\n        uint256 totalKey,\r\n        uint256 currentKey,\r\n        uint256 lastUpdate\r\n    );\r\n    event onRoundEnd(\r\n        uint256 indexed bID,\r\n        uint256 indexed rID,\r\n        uint256 lastUpdate\r\n    );\r\n    event onWithdraw\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        uint256 ethOut,\r\n        uint256 recordTime\r\n    );\r\n    event onRegistLink\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        uint256 recordTime\r\n    );\r\n    event onBuyFailed\r\n    (\r\n        uint256 indexed playerID,\r\n        uint256 indexed rID,\r\n        uint256 ethIn,\r\n        uint256 recordTime\r\n    );\r\n    using SafeMath for *;\r\n\r\n    address private owner = msg.sender;\r\n    address private admin = msg.sender;\r\n    bytes32 constant public name = \"OneEther\";\r\n    bytes32 constant public symbol = \"OneEther\";\r\n    uint256 constant  MIN_BUY = 0.001 ether;\r\n    uint256 constant  MAX_BUY = 30000 ether;\r\n    uint256 public linkPrice_ = 0.01 ether;\r\n    bool public activated_ = false;\r\n    uint256 private teamFee_ = 0; //team Fee Pot\r\n\r\n    uint256 public bID = 10;\r\n    uint256 public pID = 100;\r\n    uint256 public rID = 1000;\r\n\r\n    mapping (address => uint256) public pIDAddr_;//(addr => pID) returns player id by address\r\n    mapping(uint256 => OneEtherDatasets.BetInfo) public bIDBet_;\r\n    mapping(uint256 => OneEtherDatasets.stake[]) public betList_;\r\n    mapping(uint256 => OneEtherDatasets.BetState) public rIDBet_;\r\n    mapping(uint256 => OneEtherDatasets.Player) public pIDPlayer_;\r\n    mapping (uint256 => uint256) public bIDrID_;\r\n    uint256[] public bIDList_;\r\n\r\n//===============================================================\r\n//   construct\r\n//==============================================================\r\n    constructor()payable public{\r\n    }\r\n//===============================================================\r\n//   The following are safety checks\r\n//==============================================================\r\n    //isActivated\r\n    modifier isbetActivated(uint256 _bID){require(bIDBet_[_bID].bID != 0 && bIDBet_[_bID].isActivated == true,\"cant find this bet\");_;}\r\n    modifier isActivated() {require(activated_ == true,\"its not ready yet. \");_;}\r\n    //isAdmin\r\n    modifier isAdmin(){require(msg.sender == admin,\"its can only be call by admin\");_;}\r\n    //limits\r\n    modifier isWithinLimits(uint256 _eth){require(_eth >= MIN_BUY,\"too small\");require(_eth <= MAX_BUY,\"too big\"); _;}\r\n    //activate game\r\n    function activate()isAdmin()public{require(activated_ == false,\"the game is running\");activated_ = true;}\r\n    //close game  dangerous!\r\n    function close() isAdmin() isActivated() public{activated_ = false;}\r\n\r\n//===============================================================\r\n//   Functions call by admin\r\n//==============================================================\r\n\r\n    //set new admin\r\n    function setNewAdmin(address _addr)\r\n    public\r\n    {\r\n        require(msg.sender == owner);\r\n        admin = _addr;\r\n    }\r\n\r\n    function openNewBet(address _owner,uint256 _check,uint256 _unit)\r\n    isAdmin()\r\n    isActivated()\r\n    public\r\n    {\r\n        require((_check >= MIN_BUY) && (_check <= MAX_BUY),\"out of range\");\r\n        require((_unit * 2) <= _check,\"unit of payment dennied\");\r\n        bID++;\r\n        bIDBet_[bID].bID = bID;\r\n        uint256 _now = now;\r\n        if(_owner == address(0))\r\n        {\r\n            bIDBet_[bID].owner = admin;\r\n        }\r\n        else\r\n        {\r\n            bIDBet_[bID].owner = _owner;\r\n        }\r\n        bIDBet_[bID].check = _check;\r\n        bIDBet_[bID].unit = _unit;\r\n        bIDBet_[bID].isActivated = true;\r\n        bIDList_.push(bID);\r\n        //emit\r\n        emit onOpenNewBet(bID,bIDBet_[bID].owner,_check,_unit,_now);\r\n    }\r\n\r\n    function openFirstRound(uint256 _bID,bytes32 _maskHash)\r\n    public\r\n    isbetActivated(_bID)\r\n    {\r\n        address addr = msg.sender;\r\n        require(bIDBet_[bID].bID != 0,\"cant find this bet\");\r\n        require(bIDBet_[bID].owner == addr || bIDBet_[bID].owner == admin,\"Permission denied\");\r\n        require(bIDrID_[_bID] == 0,\"One Bet can only open one round\");\r\n        newRound(_bID,_maskHash);\r\n    }\r\n\r\n    function closeBet(uint256 _bID)\r\n    public\r\n    {\r\n        address addr = msg.sender;\r\n        require(bIDBet_[bID].bID != 0,\"cant find this bet\");\r\n        require(bIDBet_[bID].owner == addr || bIDBet_[bID].owner == admin,\"Permission denied\");\r\n        // this means it cant be generated next round. current round would continue to end.\r\n        bIDBet_[_bID].isActivated = false;\r\n        //emit\r\n    }\r\n\r\n    function openBet(uint256 _bID)\r\n    public\r\n    {\r\n        address addr = msg.sender;\r\n        require(bIDBet_[bID].bID != 0,\"cant find this bet\");\r\n        require(bIDBet_[bID].owner == addr || bIDBet_[bID].owner == admin,\"Permission denied\");\r\n        require(bIDBet_[_bID].isActivated = false,\"This bet is opening\");\r\n        bIDBet_[_bID].isActivated = true;\r\n    }\r\n\r\n    function editBet(uint256 _bID,uint256 _check,uint256 _unit)\r\n    public\r\n    {\r\n        require((_check >= MIN_BUY) && (_check <= MAX_BUY),\"out of range\");\r\n        address addr = msg.sender;\r\n        require(bIDBet_[_bID].bID != 0,\"cant find this bet\");\r\n        require(bIDBet_[bID].owner == addr || bIDBet_[bID].owner == admin,\"Permission denied\");\r\n\r\n        bIDBet_[_bID].check = _check;\r\n        bIDBet_[_bID].unit = _unit;\r\n        emit onEditBet(bID,bIDBet_[bID].owner,_check,_unit,now);\r\n\r\n    }\r\n\r\n    function withdrawFee()\r\n    isAdmin()\r\n    public\r\n    {\r\n        uint256 temp = teamFee_;\r\n        teamFee_ = 0;\r\n        msg.sender.transfer(temp);\r\n    }\r\n\r\n\r\n//===============================================================\r\n//   functions call by gameplayer\r\n//==============================================================\r\n    function buySome(uint256 _rID,uint256 _key,uint256 _playerCode,uint256 _linkPID)\r\n    public\r\n    payable\r\n    {\r\n        require(rIDBet_[_rID].rID != 0,\"cant find this round\");\r\n        uint256 _bID = rIDBet_[_rID].bID;\r\n        require(bIDBet_[_bID].bID != 0,\"cant find this bet\");\r\n        require(_key <= rIDBet_[_rID].total,\"key must not beyond limit\");\r\n        require(msg.value >= bIDBet_[_bID].unit,\"too small for this bet\");\r\n        require(bIDBet_[_bID].unit * _key == msg.value,\"not enough payment\");\r\n        require(_playerCode < 100000000000000,\"your random number is too big\");\r\n        uint256 _pID = managePID(_linkPID);\r\n\r\n        if(rIDBet_[_rID].current + _key <= rIDBet_[_rID].total)\r\n        {\r\n            uint256 _value = manageLink(_pID,msg.value);\r\n            manageKey(_pID,_rID,_key);\r\n            rIDBet_[_rID].current = rIDBet_[_rID].current.add(_key);\r\n            rIDBet_[_rID].ethAmount = rIDBet_[_rID].ethAmount.add(_value);\r\n            rIDBet_[_rID].playerCode = rIDBet_[_rID].playerCode.add(_playerCode);\r\n            emit onBuyBet(_bID,_rID,pIDPlayer_[_pID].addr,_value,_key,_playerCode,pIDPlayer_[_pID].invator,now);\r\n\r\n            if(rIDBet_[_rID].current >= rIDBet_[_rID].total)\r\n            {\r\n                emit onRoundEnd(_bID,_rID,now);\r\n            }\r\n        }\r\n        else{\r\n            // failed to pay a bet,the value will be stored in player's balance\r\n            pIDPlayer_[_pID].balance = pIDPlayer_[_pID].balance.add(msg.value);\r\n            emit onBuyFailed(_pID,_rID,msg.value,now);\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function buyWithBalance(uint256 _rID,uint256 _key,uint256 _playerCode)\r\n    public\r\n    payable\r\n    {\r\n        uint256 _pID = pIDAddr_[msg.sender];\r\n        require(_pID != 0,\"player not founded in contract \");\r\n        require(rIDBet_[_rID].rID != 0,\"cant find this round\");\r\n        uint256 _bID = rIDBet_[_rID].bID;\r\n        require(bIDBet_[_bID].bID != 0,\"cant find this bet\");\r\n\r\n        uint256 _balance = pIDPlayer_[_pID].balance;\r\n        require(_key <= rIDBet_[_rID].total,\"key must not beyond limit\");\r\n        require(_balance >= bIDBet_[_bID].unit,\"too small for this bet\");\r\n        require(bIDBet_[_bID].unit * _key <= _balance,\"not enough balance\");\r\n        require(_playerCode < 100000000000000,\"your random number is too big\");\r\n\r\n        require(rIDBet_[_rID].current + _key <= rIDBet_[_rID].total,\"you beyond key\");\r\n        pIDPlayer_[_pID].balance = pIDPlayer_[_pID].balance.sub(bIDBet_[_bID].unit * _key);\r\n        uint256 _value = manageLink(_pID,bIDBet_[_bID].unit * _key);\r\n        manageKey(_pID,_rID,_key);\r\n        rIDBet_[_rID].current = rIDBet_[_rID].current.add(_key);\r\n        rIDBet_[_rID].ethAmount = rIDBet_[_rID].ethAmount.add(_value);\r\n        rIDBet_[_rID].playerCode = rIDBet_[_rID].playerCode.add(_playerCode);\r\n\r\n        emit onBuyBet(_bID,_rID,pIDPlayer_[_pID].addr,_value,_key,_playerCode,pIDPlayer_[_pID].invator,now);\r\n\r\n        if(rIDBet_[_rID].current == rIDBet_[_rID].total)\r\n        {\r\n            emit onRoundEnd(_bID,_rID,now);\r\n        }\r\n    }\r\n\r\n    function buyLink()\r\n    public\r\n    payable\r\n    {\r\n        require(msg.value >= linkPrice_,\"not enough payment to buy link\");\r\n        uint256 _pID = managePID(0);\r\n        pIDPlayer_[_pID].VIP = true;\r\n        teamFee_ = teamFee_.add(msg.value);\r\n\r\n        //emit\r\n        emit onRegistLink(_pID,pIDPlayer_[_pID].addr,now);\r\n\r\n    }\r\n\r\n    function reveal(uint256 _rID,uint256 _scretKey,bytes32 _maskHash)\r\n    public\r\n    {\r\n        require(rIDBet_[_rID].rID != 0,\"cant find this round\");\r\n        uint256 _bID = rIDBet_[_rID].bID;\r\n        require(bIDBet_[_bID].bID != 0,\"cant find this bet\");\r\n        require((bIDBet_[_bID].owner == msg.sender) || admin == msg.sender,\"can only be revealed by admin or owner\");\r\n        bytes32 check = keccak256(abi.encodePacked(_scretKey));\r\n        require(check == rIDBet_[_rID].maskHash,\"scretKey is not match maskHash\");\r\n\r\n        uint256 modulo = rIDBet_[_rID].total;\r\n\r\n         //get random , use secretnumber,playerCode,blockinfo\r\n        bytes32 random = keccak256(abi.encodePacked(check,rIDBet_[_rID].playerCode,(block.number + now)));\r\n        uint result = (uint(random) % modulo) + 1;\r\n        uint256 _winPID = 0;\r\n\r\n        for(uint i = 0;i < betList_[_rID].length;i++)\r\n        {\r\n            if(result >= betList_[_rID][i].start && result <= betList_[_rID][i].end)\r\n            {\r\n                _winPID = betList_[_rID][i].pID;\r\n                break;\r\n            }\r\n        }\r\n        // pay the reward\r\n        uint256 reward = rIDBet_[_rID].ethAmount;\r\n        uint256 teamFee = (bIDBet_[_bID].check.mul(3))/100;\r\n        pIDPlayer_[_winPID].balance = pIDPlayer_[_winPID].balance.add(reward);\r\n        //emit\r\n        emit onReveal(_rID,pIDPlayer_[_winPID].addr,reward,teamFee,_scretKey,result,now);\r\n\r\n        // delete thie round;\r\n        delete rIDBet_[_rID];\r\n        delete betList_[_rID];\r\n        bIDrID_[_bID] = 0;\r\n\r\n        // start to reset round\r\n        newRound(_bID,_maskHash);\r\n    }\r\n\r\n    function getPlayerByAddr(address _addr)\r\n    public\r\n    view\r\n    returns(uint256,uint256,bool)\r\n    {\r\n        uint256 _pID = pIDAddr_[_addr];\r\n        return (_pID,pIDPlayer_[_pID].balance,pIDPlayer_[_pID].VIP);\r\n    }\r\n\r\n    function getRoundInfoByID(uint256 _rID)\r\n    public\r\n    view\r\n    returns(uint256,uint256,uint256,uint256,uint256,bytes32,uint256)\r\n    {\r\n        return\r\n        (\r\n            rIDBet_[_rID].rID,               //0\r\n            rIDBet_[_rID].bID,               //1\r\n            rIDBet_[_rID].total,             //2\r\n            rIDBet_[_rID].current,           //3\r\n            rIDBet_[_rID].ethAmount,         //4\r\n            rIDBet_[_rID].maskHash,          //5\r\n            rIDBet_[_rID].playerCode     //6\r\n            );\r\n    }\r\n\r\n    function getBetInfoByID(uint256 _bID)\r\n    public\r\n    view\r\n    returns(uint256,uint256,address,uint256,uint256,bool)\r\n    {\r\n        return\r\n        (\r\n            bIDrID_[_bID], //get current rID\r\n            bIDBet_[_bID].bID,\r\n            bIDBet_[_bID].owner,\r\n            bIDBet_[_bID].check,\r\n            bIDBet_[_bID].unit,\r\n            bIDBet_[_bID].isActivated\r\n            );\r\n    }\r\n\r\n    function getBIDList()\r\n    public\r\n    view\r\n    returns(uint256[])\r\n    {return(bIDList_);}\r\n\r\n\r\n    function withdraw()\r\n    isActivated()\r\n    public\r\n    {\r\n        uint256 _now = now;\r\n        uint256 _pID = pIDAddr_[msg.sender];\r\n        uint256 _eth;\r\n\r\n        if(_pID != 0)\r\n        {\r\n            _eth = withdrawEarnings(_pID);\r\n            require(_eth > 0,\"no any balance left\");\r\n            pIDPlayer_[_pID].addr.transfer(_eth);\r\n\r\n            emit onWithdraw(_pID,msg.sender,_eth,_now);\r\n        }\r\n    }\r\n\r\n\r\n\r\n//===============================================================\r\n//   internal call\r\n//==============================================================\r\n\r\n\r\n    function manageKey(uint256 _pID,uint256 _rID,uint256 _key)\r\n    private\r\n    {\r\n        uint256 _current = rIDBet_[_rID].current;\r\n\r\n        OneEtherDatasets.stake memory _playerstake = OneEtherDatasets.stake(0,0,0);\r\n        _playerstake.start = _current + 1;\r\n        _playerstake.end = _current + _key;\r\n        _playerstake.pID = _pID;\r\n\r\n        betList_[_rID].push(_playerstake);\r\n\r\n    }\r\n\r\n    function manageLink(uint256 _pID,uint256 _value)\r\n    private\r\n    returns(uint256)\r\n    {\r\n        uint256 cut = (_value.mul(3))/100;//3% for teamFee\r\n        uint256 _value2 = _value.sub(cut);\r\n\r\n        uint256 _invator = pIDPlayer_[_pID].invator;\r\n        if(_invator != 0)\r\n        {\r\n            uint256 cut2 = (cut.mul(60))/100; //2% for the invator\r\n            cut = cut.sub(cut2);\r\n            pIDPlayer_[_invator].balance = pIDPlayer_[_invator].balance.add(cut2);\r\n        }\r\n\r\n        teamFee_ = teamFee_.add(cut);\r\n        return _value2;\r\n    }\r\n\r\n    function managePID(uint256 _linkPID)\r\n    private\r\n    returns (uint256)\r\n    {\r\n        uint256 _pID = pIDAddr_[msg.sender];\r\n\r\n        if(_pID == 0)\r\n        {\r\n            // regist a new player\r\n            pID++;\r\n            pIDAddr_[msg.sender] = pID;\r\n\r\n\r\n            // set new player struct\r\n            pIDPlayer_[pID].addr = msg.sender;\r\n            pIDPlayer_[pID].balance = 0;\r\n            pIDPlayer_[pID].VIP = false;\r\n\r\n            if(pIDPlayer_[_linkPID].addr != address(0) && pIDPlayer_[_linkPID].VIP == true)\r\n            {\r\n                pIDPlayer_[pID].invator = _linkPID;\r\n            }\r\n\r\n            return (pID);\r\n        }\r\n\r\n        else{\r\n            return (_pID);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function newRound(uint256 _bID,bytes32 _maskHash)\r\n    private\r\n    {\r\n        uint256 _total = bIDBet_[_bID].check / bIDBet_[_bID].unit;\r\n        if(bIDBet_[_bID].isActivated == true)\r\n        {\r\n            rID++;\r\n            rIDBet_[rID].rID = rID;\r\n            rIDBet_[rID].bID = _bID;\r\n            rIDBet_[rID].total = _total;\r\n            rIDBet_[rID].current = 0;\r\n            rIDBet_[rID].ethAmount = 0;\r\n            rIDBet_[rID].maskHash = _maskHash;\r\n            rIDBet_[rID].playerCode = 0;\r\n\r\n            bIDrID_[_bID] = rID;\r\n            emit onOpenNewRound(_bID,rID,rIDBet_[rID].total,rIDBet_[rID].current,rIDBet_[rID].ethAmount,now);\r\n            emit RoundMask(rID,_maskHash);\r\n        }\r\n        else\r\n        {\r\n            bIDrID_[_bID] = 0;\r\n        }\r\n\r\n    }\r\n\r\n    function withdrawEarnings(uint256 _pID)\r\n        private\r\n        returns(uint256)\r\n    {\r\n        uint256 _earnings = pIDPlayer_[_pID].balance;\r\n        if (_earnings > 0)\r\n        {\r\n            pIDPlayer_[_pID].balance = 0;\r\n        }\r\n\r\n        return(_earnings);\r\n    }\r\n}\r\n\r\nlibrary OneEtherDatasets {\r\n\r\n    struct BetInfo {\r\n        uint256 bID;\r\n        address owner;\r\n        uint256 check;\r\n        uint256 unit;\r\n        bool isActivated;\r\n    }\r\n\r\n    struct BetState{\r\n        uint256 rID;\r\n        uint256 bID;\r\n        uint256 total;\r\n        uint256 current;\r\n        uint256 ethAmount;\r\n        bytes32 maskHash;\r\n        uint256 playerCode;\r\n    }\r\n\r\n    struct Player{\r\n        address addr;\r\n        uint256 balance;\r\n        uint256 invator;\r\n        bool VIP;\r\n    }\r\n\r\n    struct stake{\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 pID;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c)\r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y)\r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y)\r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n\r\n    /**\r\n     * @dev x to the power of y\r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else\r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i = 1;i < y;i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bIDBet_\",\"outputs\":[{\"name\":\"bID\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"check\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"uint256\"},{\"name\":\"isActivated\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rIDBet_\",\"outputs\":[{\"name\":\"rID\",\"type\":\"uint256\"},{\"name\":\"bID\",\"type\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"current\",\"type\":\"uint256\"},{\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"name\":\"maskHash\",\"type\":\"bytes32\"},{\"name\":\"playerCode\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bID\",\"type\":\"uint256\"},{\"name\":\"_check\",\"type\":\"uint256\"},{\"name\":\"_unit\",\"type\":\"uint256\"}],\"name\":\"editBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBIDList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bID\",\"type\":\"uint256\"},{\"name\":\"_maskHash\",\"type\":\"bytes32\"}],\"name\":\"openFirstRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bIDrID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rID\",\"type\":\"uint256\"},{\"name\":\"_scretKey\",\"type\":\"uint256\"},{\"name\":\"_maskHash\",\"type\":\"bytes32\"}],\"name\":\"reveal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rID\",\"type\":\"uint256\"},{\"name\":\"_key\",\"type\":\"uint256\"},{\"name\":\"_playerCode\",\"type\":\"uint256\"},{\"name\":\"_linkPID\",\"type\":\"uint256\"}],\"name\":\"buySome\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bID\",\"type\":\"uint256\"}],\"name\":\"openBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setNewAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rID\",\"type\":\"uint256\"},{\"name\":\"_key\",\"type\":\"uint256\"},{\"name\":\"_playerCode\",\"type\":\"uint256\"}],\"name\":\"buyWithBalance\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bID\",\"type\":\"uint256\"}],\"name\":\"closeBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"linkPrice_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bIDList_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rID\",\"type\":\"uint256\"}],\"name\":\"getRoundInfoByID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"betList_\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"pID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_check\",\"type\":\"uint256\"},{\"name\":\"_unit\",\"type\":\"uint256\"}],\"name\":\"openNewBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pIDPlayer_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"invator\",\"type\":\"uint256\"},{\"name\":\"VIP\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerByAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bID\",\"type\":\"uint256\"}],\"name\":\"getBetInfoByID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyLink\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"check\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recordTime\",\"type\":\"uint256\"}],\"name\":\"onOpenNewBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"check\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recordTime\",\"type\":\"uint256\"}],\"name\":\"onEditBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"rID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"current\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recordTime\",\"type\":\"uint256\"}],\"name\":\"onOpenNewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"rID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hashmask\",\"type\":\"bytes32\"}],\"name\":\"RoundMask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"rID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"teamFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"scretNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recordTime\",\"type\":\"uint256\"}],\"name\":\"onReveal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"rID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"invator\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recordTime\",\"type\":\"uint256\"}],\"name\":\"onBuyBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"rID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalKey\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentKey\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"name\":\"onRoundUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"rID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"name\":\"onRoundEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recordTime\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recordTime\",\"type\":\"uint256\"}],\"name\":\"onRegistLink\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"rID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recordTime\",\"type\":\"uint256\"}],\"name\":\"onBuyFailed\",\"type\":\"event\"}]","ContractName":"OneEther","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://25f8d5f01c0ff1c06430fc1af8aeb33461c3f7f2652764b910112a87cd2ecd5b"}]}