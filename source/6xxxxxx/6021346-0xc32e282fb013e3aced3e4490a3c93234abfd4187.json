{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b); \r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b; \r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n\r\ncontract Owner {\r\n    address public owner;\r\n    modifier onlyOwner { \r\n      require(msg.sender == owner);\r\n     _;\r\n    }\r\n    function Owner() public { owner = msg.sender; }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract DefensorWallet is ERC20, Owner{\r\n\r\n  using SafeMath for uint;\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  mapping(address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  struct FrozenToken {\r\n    bool isFrozenAll;\r\n    uint256 amount;\r\n    uint256 unfrozenDate;\r\n  }\r\n  mapping(address => FrozenToken) frozenTokens;\r\n\r\n  event FrozenAccount(address target,bool freeze);\r\n  event FrozenAccountToken(address target,uint256 amount,uint256 unforzenDate);\r\n\r\n  function DefensorWallet(uint256 initialSupply,string tokenName,string tokenSymbol,uint8 decimalUnits) public {\r\n    balances[msg.sender] = initialSupply;\r\n    totalSupply = initialSupply;\r\n    name = tokenName;\r\n    decimals = decimalUnits;\r\n    symbol = tokenSymbol;\r\n  }\r\n\r\n  function changeOwner(address newOwner) onlyOwner public {\r\n    owner = newOwner;\r\n  }\r\n\r\n  function freezeAccount(address target,bool freeze) onlyOwner public {\r\n      frozenTokens[target].isFrozenAll = freeze;\r\n      FrozenAccount(target, freeze);\r\n  }\r\n\r\n  function isAccountFreeze(address target) public constant returns (bool) {\r\n    return frozenTokens[target].isFrozenAll;\r\n  }\r\n\r\n  function freezeAccountToken(address target,uint256 amount,uint256 date)  onlyOwner public {\r\n      require(amount > 0);\r\n      require(date > now);\r\n      frozenTokens[target].amount = amount;\r\n      frozenTokens[target].unfrozenDate = date;\r\n\r\n      FrozenAccountToken(target,amount,date);\r\n  }\r\n\r\n  function freezeAccountOf(address target) public view returns (uint256,uint256) {\r\n    return (frozenTokens[target].unfrozenDate,frozenTokens[target].amount);\r\n  }\r\n\r\n  function transfer(address to,uint256 value) public returns (bool) {\r\n    require(msg.sender != to);\r\n    require(value > 0);\r\n    require(balances[msg.sender] >= value);\r\n    require(frozenTokens[msg.sender].isFrozenAll != true);\r\n\r\n    if (frozenTokens[msg.sender].unfrozenDate > now) {\r\n        require(balances[msg.sender] - value >= frozenTokens[msg.sender].amount);\r\n    }\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(value);\r\n    balances[to] = balances[to].add(value);\r\n    Transfer(msg.sender,to,value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address addr) public constant returns (uint256) {\r\n    return balances[addr];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public constant returns (uint256) {\r\n    return allowed[owner][spender];\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require (balances[from] >= value);\r\n    var _allowance = allowed[from][msg.sender];\r\n    require (_allowance >= value);\r\n    \r\n    balances[to] = balances[to].add(value);\r\n    balances[from] = balances[from].sub(value);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\r\n    Transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function kill() onlyOwner public {\r\n    selfdestruct(owner);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"freezeAccountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isAccountFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"freezeAccountToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"FrozenAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unforzenDate\",\"type\":\"uint256\"}],\"name\":\"FrozenAccountToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DefensorWallet","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000006765c793fa10079d0000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000008444546436861696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034445460000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://1ceb45442b0f68869e3cebfb963d45cd8cb7d0618b8c0dbea804a879e6023db6"}]}