{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) returns (bool) {\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n */\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Stoppable\r\n * @dev Base contract which allows children to implement final irreversible stop mechanism.\r\n */\r\ncontract Stoppable is Pausable {\r\n  event Stop();\r\n\r\n  bool public stopped = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not stopped.\r\n   */\r\n  modifier whenNotStopped() {\r\n    require(!stopped);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is stopped.\r\n   */\r\n  modifier whenStopped() {\r\n    require(stopped);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function stop() public onlyOwner whenNotStopped {\r\n    stopped = true;\r\n    emit Stop();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) returns (bool) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title e2pAir Escrow Contract\r\n * @dev Contract sends tokens from airdropper's account to receiver on claim.\r\n * \r\n * When deploying contract, airdroper provides airdrop parametrs: token, amount \r\n * of tokens and amount of eth should be claimed per link and  airdrop transit \r\n * address and deposits ether needed for the airdrop.\r\n * \r\n * Airdrop transit address is used to verify that links are signed by airdropper. \r\n * \r\n * Airdropper generates claim links. Each link contains a private key \r\n * signed by the airdrop transit private key. The link private key can be used \r\n * once to sign receiver's address. Receiver provides signature\r\n * to the Relayer Server, which calls smart contract to withdraw tokens. \r\n * \r\n * On claim smart contract verifies, that receiver provided address signed \r\n * by a link private key. \r\n * If everything is correct smart contract sends tokens and ether to receiver.\r\n * \r\n * Anytime airdropper can get back unclaimed ether using getEtherBack method.\r\n * \r\n */\r\ncontract e2pAirEscrow is Stoppable {\r\n  \r\n  address public TOKEN_ADDRESS; // token to distribute\r\n  uint public CLAIM_AMOUNT; // tokens claimed per link\r\n  uint public REFERRAL_AMOUNT; // referral reward\r\n\r\n  uint public CLAIM_AMOUNT_ETH; // ether claimed per link\r\n  address public AIRDROPPER; // airdropper address, which has tokens to distribute\r\n  address public AIRDROP_TRANSIT_ADDRESS; // special address, used on claim to verify \r\n                                          // that links signed by the airdropper\r\n  \r\n\r\n  // Mappings of transit address => true if link is used.                                                                                                                                \r\n  mapping (address => bool) usedTransitAddresses;\r\n  \r\n// withdraw event\r\nevent LogWithdraw(\r\n    address transitAddress, // link ID\r\n    address receiver,\r\n    uint timestamp\r\n  );\r\n\r\n   /**\r\n   * @dev Contructor that sets airdrop params and receives ether needed for the \r\n   * airdrop. \r\n   * @param _tokenAddress address Token address to distribute\r\n   * @param _claimAmount uint tokens (in atomic values) claimed per link\r\n   * @param _claimAmountEth uint ether (in wei) claimed per link\r\n   * @param _airdropTransitAddress special address, used on claim to verify that links signed by airdropper\r\n   */\r\n  constructor(address _tokenAddress,\r\n              uint _claimAmount, \r\n              uint  _referralAmount, \r\n              uint _claimAmountEth,\r\n              address _airdropTransitAddress) public payable {\r\n    AIRDROPPER = msg.sender;\r\n    TOKEN_ADDRESS = _tokenAddress;\r\n    CLAIM_AMOUNT = _claimAmount;\r\n    REFERRAL_AMOUNT = _referralAmount;\r\n    CLAIM_AMOUNT_ETH = _claimAmountEth;\r\n    AIRDROP_TRANSIT_ADDRESS = _airdropTransitAddress;\r\n  }\r\n\r\n   /**\r\n   * @dev Verify that address is signed with needed private key.\r\n   * @param _transitAddress transit address assigned to transfer\r\n   * @param _addressSigned address Signed address.\r\n   * @param _v ECDSA signature parameter v.\r\n   * @param _r ECDSA signature parameters r.\r\n   * @param _s ECDSA signature parameters s.\r\n   * @return True if signature is correct.\r\n   */\r\n  function verifyLinkPrivateKey(\r\n\t\t\t   address _transitAddress,\r\n\t\t\t   address _addressSigned,\r\n\t\t\t   address _referralAddress,\r\n\t\t\t   uint8 _v,\r\n\t\t\t   bytes32 _r,\r\n\t\t\t   bytes32 _s)\r\n    public pure returns(bool success) {\r\n    bytes32 prefixedHash = keccak256(\"\\x19Ethereum Signed Message:\\n32\", _addressSigned, _referralAddress);\r\n    address retAddr = ecrecover(prefixedHash, _v, _r, _s);\r\n    return retAddr == _transitAddress;\r\n  }\r\n  \r\n  \r\n   /**\r\n   * @dev Verify that address is signed with needed private key.\r\n   * @param _transitAddress transit address assigned to transfer\r\n   * @param _addressSigned address Signed address.\r\n   * @param _v ECDSA signature parameter v.\r\n   * @param _r ECDSA signature parameters r.\r\n   * @param _s ECDSA signature parameters s.\r\n   * @return True if signature is correct.\r\n   */\r\n  function verifyReceiverAddress(\r\n\t\t\t   address _transitAddress,\r\n\t\t\t   address _addressSigned,\r\n\t\t\t   uint8 _v,\r\n\t\t\t   bytes32 _r,\r\n\t\t\t   bytes32 _s)\r\n    public pure returns(bool success) {\r\n    bytes32 prefixedHash = keccak256(\"\\x19Ethereum Signed Message:\\n32\", _addressSigned);\r\n    address retAddr = ecrecover(prefixedHash, _v, _r, _s);\r\n    return retAddr == _transitAddress;\r\n  }\r\n  \r\n/**\r\n   * @dev Verify that claim params are correct and the link key wasn't used before.  \r\n   * @param _recipient address to receive tokens.\r\n   * @param _transitAddress transit address provided by the airdropper\r\n   * @param _keyV ECDSA signature parameter v. Signed by the airdrop transit key.\r\n   * @param _keyR ECDSA signature parameters r. Signed by the airdrop transit key.\r\n   * @param _keyS ECDSA signature parameters s. Signed by the airdrop transit key.\r\n   * @param _recipientV ECDSA signature parameter v. Signed by the link key.\r\n   * @param _recipientR ECDSA signature parameters r. Signed by the link key.\r\n   * @param _recipientS ECDSA signature parameters s. Signed by the link key.\r\n   * @return True if claim params are correct. \r\n   */\r\n  function checkWithdrawal(\r\n            address _recipient, \r\n            address _referralAddress, \r\n\t\t    address _transitAddress,\r\n\t\t    uint8 _keyV, \r\n\t\t    bytes32 _keyR,\r\n\t\t\tbytes32 _keyS,\r\n\t\t\tuint8 _recipientV, \r\n\t\t    bytes32 _recipientR,\r\n\t\t\tbytes32 _recipientS) \r\n    public view returns(bool success) {\r\n    \r\n        // verify that link wasn't used before  \r\n        require(usedTransitAddresses[_transitAddress] == false);\r\n\r\n        // verifying that key is legit and signed by AIRDROP_TRANSIT_ADDRESS's key\r\n        require(verifyLinkPrivateKey(AIRDROP_TRANSIT_ADDRESS, _transitAddress, _referralAddress, _keyV, _keyR, _keyS));\r\n    \r\n        // verifying that recepients address signed correctly\r\n        require(verifyReceiverAddress(_transitAddress, _recipient, _recipientV, _recipientR, _recipientS));\r\n        \r\n        // verifying that there is enough ether to make transfer\r\n        require(address(this).balance >= CLAIM_AMOUNT_ETH);\r\n        \r\n        return true;\r\n  }\r\n  \r\n  /**\r\n   * @dev Withdraw tokens to receiver address if withdraw params are correct.\r\n   * @param _recipient address to receive tokens.\r\n   * @param _transitAddress transit address provided to receiver by the airdropper\r\n   * @param _keyV ECDSA signature parameter v. Signed by the airdrop transit key.\r\n   * @param _keyR ECDSA signature parameters r. Signed by the airdrop transit key.\r\n   * @param _keyS ECDSA signature parameters s. Signed by the airdrop transit key.\r\n   * @param _recipientV ECDSA signature parameter v. Signed by the link key.\r\n   * @param _recipientR ECDSA signature parameters r. Signed by the link key.\r\n   * @param _recipientS ECDSA signature parameters s. Signed by the link key.\r\n   * @return True if tokens (and ether) were successfully sent to receiver.\r\n   */\r\n  function withdraw(\r\n\t\t    address _recipient, \r\n\t\t    address _referralAddress, \r\n\t\t    address _transitAddress,\r\n\t\t    uint8 _keyV, \r\n\t\t    bytes32 _keyR,\r\n\t\t\tbytes32 _keyS,\r\n\t\t\tuint8 _recipientV, \r\n\t\t    bytes32 _recipientR,\r\n\t\t\tbytes32 _recipientS\r\n\t\t    )\r\n    public\r\n    whenNotPaused\r\n    whenNotStopped\r\n    returns (bool success) {\r\n    \r\n    require(checkWithdrawal(_recipient, \r\n    \t\t_referralAddress,\r\n\t\t    _transitAddress,\r\n\t\t    _keyV, \r\n\t\t    _keyR,\r\n\t\t\t_keyS,\r\n\t\t\t_recipientV, \r\n\t\t    _recipientR,\r\n\t\t\t_recipientS));\r\n        \r\n\r\n    // save to state that address was used\r\n    usedTransitAddresses[_transitAddress] = true;\r\n\r\n    // send tokens\r\n    if (CLAIM_AMOUNT > 0 && TOKEN_ADDRESS != 0x0000000000000000000000000000000000000000) {\r\n        StandardToken token = StandardToken(TOKEN_ADDRESS);\r\n        token.transferFrom(AIRDROPPER, _recipient, CLAIM_AMOUNT);\r\n    }\r\n    \r\n    // send tokens to the address who refferred the airdrop \r\n    if (REFERRAL_AMOUNT > 0 && _referralAddress != 0x0000000000000000000000000000000000000000) {\r\n        token.transferFrom(AIRDROPPER, _referralAddress, REFERRAL_AMOUNT);\r\n    }\r\n\r\n    \r\n    // send ether (if needed)\r\n    if (CLAIM_AMOUNT_ETH > 0) {\r\n        _recipient.transfer(CLAIM_AMOUNT_ETH);\r\n    }\r\n    \r\n    // Log Withdrawal\r\n    emit LogWithdraw(_transitAddress, _recipient, now);\r\n    \r\n    return true;\r\n  }\r\n\r\n /**\r\n   * @dev Get boolean if link is already claimed. \r\n   * @param _transitAddress transit address provided to receiver by the airdropper\r\n   * @return True if the transit address was already used. \r\n   */\r\n  function isLinkClaimed(address _transitAddress) \r\n    public view returns (bool claimed) {\r\n        return usedTransitAddresses[_transitAddress];\r\n  }\r\n\r\n   /**\r\n   * @dev Withdraw ether back deposited to the smart contract.  \r\n   * @return True if ether was withdrawn. \r\n   */\r\n  function getEtherBack() public returns (bool success) { \r\n    require(msg.sender == AIRDROPPER);\r\n      \r\n    AIRDROPPER.transfer(address(this).balance);\r\n      \r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_transitAddress\",\"type\":\"address\"},{\"name\":\"_addressSigned\",\"type\":\"address\"},{\"name\":\"_referralAddress\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"verifyLinkPrivateKey\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CLAIM_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AIRDROPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_referralAddress\",\"type\":\"address\"},{\"name\":\"_transitAddress\",\"type\":\"address\"},{\"name\":\"_keyV\",\"type\":\"uint8\"},{\"name\":\"_keyR\",\"type\":\"bytes32\"},{\"name\":\"_keyS\",\"type\":\"bytes32\"},{\"name\":\"_recipientV\",\"type\":\"uint8\"},{\"name\":\"_recipientR\",\"type\":\"bytes32\"},{\"name\":\"_recipientS\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REFERRAL_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AIRDROP_TRANSIT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_transitAddress\",\"type\":\"address\"}],\"name\":\"isLinkClaimed\",\"outputs\":[{\"name\":\"claimed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CLAIM_AMOUNT_ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_transitAddress\",\"type\":\"address\"},{\"name\":\"_addressSigned\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint8\"},{\"name\":\"_r\",\"type\":\"bytes32\"},{\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"verifyReceiverAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_referralAddress\",\"type\":\"address\"},{\"name\":\"_transitAddress\",\"type\":\"address\"},{\"name\":\"_keyV\",\"type\":\"uint8\"},{\"name\":\"_keyR\",\"type\":\"bytes32\"},{\"name\":\"_keyS\",\"type\":\"bytes32\"},{\"name\":\"_recipientV\",\"type\":\"uint8\"},{\"name\":\"_recipientR\",\"type\":\"bytes32\"},{\"name\":\"_recipientS\",\"type\":\"bytes32\"}],\"name\":\"checkWithdrawal\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getEtherBack\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_claimAmount\",\"type\":\"uint256\"},{\"name\":\"_referralAmount\",\"type\":\"uint256\"},{\"name\":\"_claimAmountEth\",\"type\":\"uint256\"},{\"name\":\"_airdropTransitAddress\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"transitAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Stop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]","ContractName":"e2pAirEscrow","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a3b5fdeb5dbc592ffc5e222223376464b9c56fb80000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008fe9cd5a43598701dd8dcbf599b6dab2d5416760","Library":"","SwarmSource":"bzzr://f0fea2675527e4efccbf62fd8de96e747c14073ee8b901064cf2c6fe7e274743"}]}