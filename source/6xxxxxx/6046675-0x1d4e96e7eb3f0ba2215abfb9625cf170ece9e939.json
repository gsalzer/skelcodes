{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: node_modules/@tokenfoundry/sale-contracts/contracts/interfaces/VaultI.sol\r\n\r\ninterface VaultI {\r\n    function deposit(address contributor) external payable;\r\n    function saleSuccessful() external;\r\n    function enableRefunds() external;\r\n    function refund(address contributor) external;\r\n    function close() external;\r\n    function sendFundsToWallet() external;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/Math.sol\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: node_modules/@tokenfoundry/sale-contracts/contracts/Vault.sol\r\n\r\n// Adapted from Open Zeppelin's RefundVault\r\n\r\n/**\r\n * @title Vault\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract Vault is VaultI, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum State { Active, Success, Refunding, Closed }\r\n\r\n    // The timestamp of the first deposit\r\n    uint256 public firstDepositTimestamp; \r\n\r\n    mapping (address => uint256) public deposited;\r\n\r\n    // The amount to be disbursed to the wallet every month\r\n    uint256 public disbursementWei;\r\n    uint256 public disbursementDuration;\r\n\r\n    // Wallet from the project team\r\n    address public trustedWallet;\r\n\r\n    // The eth amount the team will get initially if the sale is successful\r\n    uint256 public initialWei;\r\n\r\n    // Timestamp that has to pass before sending funds to the wallet\r\n    uint256 public nextDisbursement;\r\n    \r\n    // Total amount that was deposited\r\n    uint256 public totalDeposited;\r\n\r\n    // Amount that can be refunded\r\n    uint256 public refundable;\r\n\r\n    State public state;\r\n\r\n    event Closed();\r\n    event RefundsEnabled();\r\n    event Refunded(address indexed contributor, uint256 amount);\r\n\r\n    modifier atState(State _state) {\r\n        require(state == _state);\r\n        _;\r\n    }\r\n\r\n    constructor (\r\n        address _wallet,\r\n        uint256 _initialWei,\r\n        uint256 _disbursementWei,\r\n        uint256 _disbursementDuration\r\n    ) \r\n        public \r\n    {\r\n        require(_wallet != address(0));\r\n        require(_disbursementWei != 0);\r\n        trustedWallet = _wallet;\r\n        initialWei = _initialWei;\r\n        disbursementWei = _disbursementWei;\r\n        disbursementDuration = _disbursementDuration;\r\n        state = State.Active;\r\n    }\r\n\r\n    /// @dev Called by the sale contract to deposit ether for a contributor.\r\n    function deposit(address _contributor) onlyOwner external payable {\r\n        require(state == State.Active || state == State.Success);\r\n        if (firstDepositTimestamp == 0) {\r\n            firstDepositTimestamp = now;\r\n        }\r\n        totalDeposited = totalDeposited.add(msg.value);\r\n        deposited[_contributor] = deposited[_contributor].add(msg.value);\r\n    }\r\n\r\n    /// @dev Sends initial funds to the wallet.\r\n    function saleSuccessful()\r\n        onlyOwner \r\n        external \r\n        atState(State.Active)\r\n    {\r\n        state = State.Success;\r\n        transferToWallet(initialWei);\r\n    }\r\n\r\n    /// @dev Called by the owner if the project didn't deliver the testnet contracts or if we need to stop disbursements for any reasone.\r\n    function enableRefunds() onlyOwner external {\r\n        require(state != State.Refunding);\r\n        state = State.Refunding;\r\n        uint256 currentBalance = address(this).balance;\r\n        refundable = currentBalance <= totalDeposited ? currentBalance : totalDeposited;\r\n        emit RefundsEnabled();\r\n    }\r\n\r\n    /// @dev Refunds ether to the contributors if in the Refunding state.\r\n    function refund(address _contributor) external atState(State.Refunding) {\r\n        require(deposited[_contributor] > 0);\r\n        uint256 refundAmount = deposited[_contributor].mul(refundable).div(totalDeposited);\r\n        deposited[_contributor] = 0;\r\n        _contributor.transfer(refundAmount);\r\n        emit Refunded(_contributor, refundAmount);\r\n    }\r\n\r\n    /// @dev Called by the owner if the sale has ended.\r\n    function close() external atState(State.Success) onlyOwner {\r\n        state = State.Closed;\r\n        nextDisbursement = now;\r\n        emit Closed();\r\n    }\r\n\r\n    /// @dev Sends the disbursement amount to the wallet after the disbursement period has passed. Can be called by anyone.\r\n    function sendFundsToWallet() external atState(State.Closed) {\r\n        require(nextDisbursement <= now);\r\n\r\n        if (disbursementDuration == 0) {\r\n            trustedWallet.transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        uint256 numberOfDisbursements = now.sub(nextDisbursement).div(disbursementDuration).add(1);\r\n\r\n        nextDisbursement = nextDisbursement.add(disbursementDuration.mul(numberOfDisbursements));\r\n\r\n        transferToWallet(disbursementWei.mul(numberOfDisbursements));\r\n    }\r\n\r\n    function transferToWallet(uint256 _amount) internal {\r\n        uint256 amountToSend = Math.min256(_amount, address(this).balance);\r\n        trustedWallet.transfer(amountToSend);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"sendFundsToWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trustedWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"saleSuccessful\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"firstDepositTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"disbursementWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"disbursementDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableRefunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextDisbursement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refundable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_initialWei\",\"type\":\"uint256\"},{\"name\":\"_disbursementWei\",\"type\":\"uint256\"},{\"name\":\"_disbursementDuration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RefundsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Vault","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000003061cfbae69bff0f933353cea20de6c89ab16acc0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000054b40b1f852bda000000000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://beacdcdd4a9f6d152a02bf673775aafd61470a001987c7e12b49f7704e87c754"}]}