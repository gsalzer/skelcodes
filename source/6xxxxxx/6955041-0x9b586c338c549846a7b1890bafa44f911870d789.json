{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n  function totalSupply() public constant returns (uint256);\r\n\r\n  function balanceOf(address _who) public constant returns (uint256);\r\n\r\n  function allowance(address _owner, address _spender) public constant returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _fromValue,uint256 _toValue) public returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n  \r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Paused();\r\n  event Unpaused();\r\n\r\n  bool public paused = false;\r\n\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Paused();\r\n  }\r\n\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpaused();\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Lambda is ERC20, Pausable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  string public symbol;\r\n  string public  name;\r\n  uint256 public decimals;\r\n  uint256 _totalSupply;\r\n\r\n  constructor() public {\r\n    symbol = \"LAMB\";\r\n    name = \"Lambda\";\r\n    decimals = 18;\r\n\r\n    _totalSupply = 6*(10**27);\r\n    balances[owner] = _totalSupply;\r\n    emit Transfer(address(0), owner, _totalSupply);\r\n  }\r\n\r\n  function totalSupply() public  constant returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address _owner) public  constant returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) public  constant returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _fromValue, uint256 _toValue) public whenNotPaused returns (bool) {\r\n    require(_spender != address(0));\r\n    require(allowed[msg.sender][_spender] ==_fromValue);\r\n    allowed[msg.sender][_spender] = _toValue;\r\n    emit Approval(msg.sender, _spender, _toValue);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool){\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  \r\n}\r\n\r\n\r\ncontract LambdaLock {\r\n    using SafeMath for uint256;\r\n    Lambda internal LambdaToken;\r\n    \r\n    uint256 internal genesisTime= block.timestamp;//固定时间  秒 2018-12-27 09:00:00;  //开始时间设为固定值\r\n    \r\n\r\n    uint256 internal ONE_MONTHS = 120;  //1个月的秒\r\n\r\n    address internal beneficiaryAddress;\r\n\r\n    struct Claim {\r\n        \r\n        uint256 pct;\r\n        uint256 delay;\r\n        bool claimed;\r\n    } \r\n\r\n    Claim [] internal beneficiaryClaims;\r\n    uint256 internal totalClaimable;\r\n\r\n    event Claimed(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    function claim() public returns (bool){\r\n        require(msg.sender == beneficiaryAddress); \r\n        for(uint256 i = 0; i < beneficiaryClaims.length; i++){\r\n            Claim memory cur_claim = beneficiaryClaims[i];\r\n            if(cur_claim.claimed == false){\r\n                if(cur_claim.delay.add(genesisTime) < block.timestamp){\r\n        \r\n                    uint256 amount = cur_claim.pct*(10**18);\r\n                    require(LambdaToken.transfer(msg.sender, amount));\r\n                    beneficiaryClaims[i].claimed = true;\r\n                    emit Claimed(msg.sender, amount, block.timestamp);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getBeneficiary() public view returns (address) {\r\n        return beneficiaryAddress;\r\n    }\r\n\r\n    function getTotalClaimable() public view returns (uint256) {\r\n        return totalClaimable;\r\n    }\r\n}\r\n\r\n\r\ncontract lambdaTeam is LambdaLock {\r\n    using SafeMath for uint256;\r\n    \r\n\r\n    constructor(Lambda _LambdaToken) public {\r\n        LambdaToken = _LambdaToken;\r\n        \r\n        \r\n        \r\n        beneficiaryAddress = 0xB969C916B3FDc4CbC611d477b866e96ab8EcC1E2 ;\r\n        totalClaimable = 1000000000 * (10 ** 18);\r\n        for(uint i=0;i<36;i++){\r\n            beneficiaryClaims.push(Claim( 27777777, ONE_MONTHS*(i+1), false));\r\n       }\r\n        \r\n    \r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalClaimable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_LambdaToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"}]","ContractName":"lambdaTeam","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f18465928c57abeddd11dc0d480e47ccc8a14d35","Library":"","SwarmSource":"bzzr://65eaf906fb66c99a1ae3c5b0d71eacbbb8c0ffd3c307878e425e1ae6eabe9258"}]}