{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ApproveAndCallReceiver {\r\n    function receiveApproval(address _from, uint256 _amount, address _token, bytes _data) public;\r\n}\r\n\r\ncontract Controlled {\r\n    modifier onlyController { \r\n        require(msg.sender == controller); \r\n        _; \r\n    }\r\n\r\n    address public controller;\r\n\r\n    constructor() public {\r\n      controller = msg.sender;\r\n    }\r\n\r\n    function changeController(address _newController) onlyController public {\r\n        controller = _newController;\r\n    }\r\n}\r\n\r\ncontract TokenAbout is Controlled {\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n\r\n    function isContract(address _addr) constant internal returns (bool) {\r\n        if (_addr == 0) {\r\n            return false;\r\n        }\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    function claimTokens(address[] tokens) onlyController public {\r\n        address _token;\r\n        uint256 balance;\r\n        ERC20Token token;\r\n        for(uint256 i; i<tokens.length; i++){\r\n            _token = tokens[i];\r\n            if (_token == 0x0) {\r\n                balance = address(this).balance;\r\n                if(balance > 0){\r\n                    msg.sender.transfer(balance);\r\n                }\r\n            }else{\r\n                token = ERC20Token(_token);\r\n                balance = token.balanceOf(address(this));\r\n                token.transfer(msg.sender, balance);\r\n                emit ClaimedTokens(_token, msg.sender, balance);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract TokenController {\r\n    function proxyPayment(address _owner) payable public returns(bool);\r\n    function onTransfer(address _from, address _to, uint _amount) public view returns(bool);\r\n    function onApprove(address _owner, address _spender, uint _amount) public view returns(bool);\r\n}\r\n\r\ncontract ERC20Token {\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract TokenI is ERC20Token, Controlled {\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals = 18;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    function approveAndCall( address _spender, uint256 _amount, bytes _extraData) public returns (bool success);\r\n    function generateTokens(address _owner, uint _amount) public returns (bool);\r\n    function destroyTokens(address _owner, uint _amount) public returns (bool);\r\n    function enableTransfers(bool _transfersEnabled) public;\r\n}\r\n\r\ncontract Token is TokenI, TokenAbout {\r\n    using SafeMath for uint256;\r\n    address public owner;\r\n    string public techProvider = \"WeYii Tech(https://weyii.co)\";\r\n\r\n    mapping (uint8 => uint256[]) public freezeOf; //所有数额，地址与数额合并为uint256，位运算拆分。\r\n    uint8  currUnlockStep; //当前解锁step\r\n    uint256 currUnlockSeq; //当前解锁step 内的游标\r\n\r\n    mapping (uint8 => bool) public stepUnlockInfo; //所有锁仓，key 使用序号向上增加，value,是否已解锁。\r\n    mapping (address => uint256) public freezeOfUser; //用户所有锁仓，方便用户查询自己锁仓余额\r\n    mapping (uint8 => uint256) public stepLockend; //key:锁仓step，value：解锁时\r\n\r\n    bool public transfersEnabled = true;\r\n\r\n    /* This notifies clients about the amount burnt */\r\n    event Burn(address indexed from, uint256 value);\r\n    \r\n    /* This notifies clients about the amount frozen */\r\n    event Freeze(address indexed from, uint256 value);\r\n    \r\n    /* This notifies clients about the amount unfrozen */\r\n    event Unfreeze(address indexed from, uint256 value);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor(uint256 initialSupply, string tokenName, string tokenSymbol, address initialOwner) public {\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        owner = initialOwner;\r\n        totalSupply = initialSupply*uint256(10)**decimals;\r\n        balanceOf[owner] = totalSupply;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier ownerOrController(){\r\n        require(msg.sender == owner || msg.sender == controller);\r\n        _;\r\n    }\r\n\r\n    modifier transable(){\r\n        require(transfersEnabled);\r\n        _;\r\n    }\r\n\r\n    modifier ownerOrUser(address user){\r\n        require(msg.sender == owner || msg.sender == user);\r\n        _;\r\n    }\r\n\r\n    modifier userOrController(address user){\r\n        require(msg.sender == user || msg.sender == owner || msg.sender == controller);\r\n        _;\r\n    }\r\n\r\n    modifier realUser(address user){\r\n        require(user != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier moreThanZero(uint256 _value){\r\n        require(_value > 0);\r\n        _;\r\n    }\r\n\r\n    modifier userEnough(address _user, uint256 _amount) {\r\n        require(balanceOf[_user] >= _amount);\r\n        _;\r\n    }\r\n\r\n    function addLockStep(uint8 _step, uint _endTime) onlyController external returns(bool) {\r\n        stepLockend[_step] = _endTime;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) realUser(_to) moreThanZero(_value) transable public returns (bool) {\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                     // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_value);                            // Add the same to the recipient\r\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) transable public returns (bool success) {\r\n        require(_value == 0 || (allowance[msg.sender][_spender] == 0));\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function unApprove(address _spender, uint256 _value) moreThanZero(_value) transable public returns (bool success) {\r\n        require(_value == 0 || (allowance[msg.sender][_spender] == 0));\r\n        allowance[msg.sender][_spender] = allowance[msg.sender][_spender].sub(_value);\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) transable public returns (bool success) {\r\n        require(approve(_spender, _amount));\r\n        ApproveAndCallReceiver(_spender).receiveApproval(msg.sender, _amount, this, _extraData);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) realUser(_from) realUser(_to) moreThanZero(_value) transable public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the sender has enough\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);  // Check for overflows\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_value);                             // Add the same to the recipient\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferMulti(address[] _to, uint256[] _value) transable public returns (bool success, uint256 amount){\r\n        require(_to.length == _value.length && _to.length <= 1024);\r\n        uint256 balanceOfSender = balanceOf[msg.sender];\r\n        uint256 len = _to.length;\r\n        for(uint256 j; j<len; j++){\r\n            require(_value[j] <= balanceOfSender); //limit transfer value\r\n            amount = amount.add(_value[j]);\r\n        }\r\n        require(balanceOfSender > amount ); //check enough and not overflow\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\r\n        address _toI;\r\n        uint256 _valueI;\r\n        for(uint256 i; i<len; i++){\r\n            _toI = _to[i];\r\n            _valueI = _value[i];\r\n            balanceOf[_toI] = balanceOf[_toI].add(_valueI);\r\n            emit Transfer(msg.sender, _toI, _valueI);\r\n        }\r\n        return (true, amount);\r\n    }\r\n    \r\n    function transferMultiSameValue(address[] _to, uint256 _value) transable public returns (bool){\r\n        require(_to.length <= 1024);\r\n        uint256 len = _to.length;\r\n        uint256 amount = _value.mul(len);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\r\n        address _toI;\r\n        for(uint256 i; i<len; i++){\r\n            _toI = _to[i];\r\n            balanceOf[_toI] = balanceOf[_toI].add(_value);\r\n            emit Transfer(msg.sender, _toI, _value);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function freeze(address _user, uint256[] _value, uint8[] _step) onlyController public returns (bool success) {\r\n        require(_value.length == _step.length);\r\n        uint256 amount; //冻结总额\r\n        for(uint i; i<_value.length; i++){\r\n            amount = amount.add(_value[i]);\r\n        }\r\n        require(balanceOf[_user] >= amount);\r\n        balanceOf[_user] -= amount;\r\n        freezeOfUser[_user] += amount;\r\n        uint256 _valueI;\r\n        uint8 _stepI;\r\n        for(i=0; i<_value.length; i++){\r\n            _valueI = _value[i];\r\n            _stepI = _step[i];\r\n            freezeOf[_stepI].push(uint256(_user)<<96|_valueI);\r\n        }\r\n        emit Freeze(_user, amount);\r\n        return true;\r\n    }\r\n\r\n    function unFreeze(uint8 _step) onlyController public returns (bool unlockOver) {\r\n        require(stepLockend[_step]<now && (currUnlockStep==_step || currUnlockSeq==uint256(0)));\r\n        require(stepUnlockInfo[_step]==false);\r\n        uint256[] memory currArr = freezeOf[_step];\r\n        currUnlockStep = _step;\r\n        if(currUnlockSeq==uint256(0)){\r\n            currUnlockSeq = currArr.length;\r\n        }\r\n        uint256 start = ((currUnlockSeq>99)?(currUnlockSeq-99): 0);\r\n\r\n        uint256 userLockInfo;\r\n        uint256 _amount;\r\n        address userAddress;\r\n        for(uint256 end = currUnlockSeq; end>start; end--){\r\n            userLockInfo = freezeOf[_step][end-1];\r\n            _amount = userLockInfo&0xFFFFFFFFFFFFFFFFFFFFFFFF;\r\n            userAddress = address(userLockInfo>>96);\r\n            balanceOf[userAddress] += _amount;\r\n            freezeOfUser[userAddress] = freezeOfUser[userAddress].sub(_amount);\r\n            emit Unfreeze(userAddress, _amount);\r\n        }\r\n        if(start==0){\r\n            stepUnlockInfo[_step] = true;\r\n            currUnlockSeq = 0;\r\n        }else{\r\n            currUnlockSeq = start;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function() payable public {\r\n        require(isContract(controller), \"controller is not a contract\");\r\n        bool proxyPayment = TokenController(controller).proxyPayment.value(msg.value)(msg.sender);\r\n        require(proxyPayment);\r\n    }\r\n\r\n    function generateTokens(address _user, uint _amount) onlyController userEnough(owner, _amount) public returns (bool) {\r\n        balanceOf[_user] += _amount;\r\n        balanceOf[owner] -= _amount;\r\n        emit Transfer(0, _user, _amount);\r\n        return true;\r\n    }\r\n\r\n    function destroyTokens(address _user, uint _amount) onlyController userEnough(_user, _amount) public returns (bool) {\r\n        require(balanceOf[_user] >= _amount);\r\n        balanceOf[owner] += _amount;\r\n        balanceOf[_user] -= _amount;\r\n        emit Transfer(_user, 0, _amount);\r\n        emit Burn(_user, _amount);\r\n        return true;\r\n    }\r\n\r\n    function changeOwner(address newOwner) onlyOwner public returns (bool) {\r\n        balanceOf[newOwner] = balanceOf[owner];\r\n        balanceOf[owner] = 0;\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n\r\n    function enableTransfers(bool _transfersEnabled) onlyController public {\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"stepUnlockInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"techProvider\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"stepLockend\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unApprove\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"transferMulti\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOfUser\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_step\",\"type\":\"uint8\"}],\"name\":\"unFreeze\",\"outputs\":[{\"name\":\"unlockOver\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256[]\"},{\"name\":\"_step\",\"type\":\"uint8[]\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_step\",\"type\":\"uint8\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"addLockStep\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"destroyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferMultiSameValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"initialOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_controller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000005459bf4d39b7da88a33adca3e57c8553ecc5b466000000000000000000000000000000000000000000000000000000000000001b5175616e74205472656173757265204261636b757020434841494e000000000000000000000000000000000000000000000000000000000000000000000000035154420000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://ca13fde1585eb34e60fb7a0c7e6ac89105e7b4c3b04e61b4bfb43a9dca1b91d7"}]}