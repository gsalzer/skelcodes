{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  function() public payable { }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n   /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract ESCBAirdropper is Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 public airdropTokens;\r\n    uint256 public totalClaimed;\r\n    uint256 public amountOfTokens;\r\n    mapping (address => bool) public tokensReceived;\r\n    mapping (address => bool) public craneList;\r\n    mapping (address => bool) public airdropAgent;\r\n    ERC20 public token;\r\n    bool public craneEnabled = false;\r\n\r\n    modifier onlyAirdropAgent() {\r\n        require(airdropAgent[msg.sender]);\r\n         _;\r\n    }\r\n\r\n    modifier whenCraneEnabled() {\r\n        require(craneEnabled);\r\n         _;\r\n    }\r\n\r\n    function ESCBAirdropper(uint256 _amount, address _tokenAddress) public {\r\n        totalClaimed = 0;\r\n        amountOfTokens = _amount;\r\n        token = ERC20(_tokenAddress);\r\n    }\r\n\r\n    // Send a static number of tokens to each user in an array (e.g. each user receives 100 tokens)\r\n    function airdrop(address[] _recipients) public onlyAirdropAgent {\r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n            require(!tokensReceived[_recipients[i]]); // Probably a race condition between two transactions. Bail to avoid double allocations and to save the gas.\r\n            require(token.transfer(_recipients[i], amountOfTokens));\r\n            tokensReceived[_recipients[i]] = true;\r\n        }\r\n        totalClaimed = totalClaimed.add(amountOfTokens * _recipients.length);\r\n    }\r\n\r\n    // Send a dynamic number of tokens to each user in an array (e.g. each user receives 10% of their original contribution)\r\n    function airdropDynamic(address[] _recipients, uint256[] _amount) public onlyAirdropAgent {\r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n            require(!tokensReceived[_recipients[i]]); // Probably a race condition between two transactions. Bail to avoid double allocations and to save the gas.\r\n            require(token.transfer(_recipients[i], _amount[i]));\r\n            tokensReceived[_recipients[i]] = true;\r\n            totalClaimed = totalClaimed.add(_amount[i]);\r\n        }\r\n    }\r\n\r\n    // Allow this agent to call the airdrop functions\r\n    function setAirdropAgent(address _agentAddress, bool state) public onlyOwner {\r\n        airdropAgent[_agentAddress] = state;\r\n    }\r\n\r\n    // Return any unused tokens back to the contract owner\r\n    function reset() public onlyOwner {\r\n        require(token.transfer(owner, remainingTokens()));\r\n    }\r\n\r\n    // Change the ERC20 token address\r\n    function changeTokenAddress(address _tokenAddress) public onlyOwner {\r\n        token = ERC20(_tokenAddress);\r\n    }\r\n\r\n    // Set the amount of tokens to send each user for a static airdrop\r\n    function changeTokenAmount(uint256 _amount) public onlyOwner {\r\n        amountOfTokens = _amount;\r\n    }\r\n\r\n    // Enable or disable crane\r\n    function changeCraneStatus(bool _status) public onlyOwner {\r\n        craneEnabled = _status;\r\n    }\r\n\r\n    // Return the amount of tokens that the contract currently holds\r\n    function remainingTokens() public view returns (uint256) {\r\n        return token.balanceOf(this);\r\n    }\r\n\r\n    // Add recipient in crane list\r\n    function addAddressToCraneList(address[] _recipients) public onlyAirdropAgent {\r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n            require(!tokensReceived[_recipients[i]]); // If not received yet\r\n            require(!craneList[_recipients[i]]);\r\n            craneList[_recipients[i]] = true;\r\n        }\r\n    }\r\n\r\n    // Get free tokens by crane\r\n    function getFreeTokens() public\r\n      whenCraneEnabled\r\n    {\r\n        require(craneList[msg.sender]);\r\n        require(!tokensReceived[msg.sender]); // Probably a race condition between two transactions. Bail to avoid double allocations and to save the gas.\r\n        require(token.transfer(msg.sender, amountOfTokens));\r\n        tokensReceived[msg.sender] = true;\r\n        totalClaimed = totalClaimed.add(amountOfTokens);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_agentAddress\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAirdropAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airdropDynamic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountOfTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeCraneStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getFreeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeTokenAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"craneList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"addAddressToCraneList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdropAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"changeTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"craneEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ESCBAirdropper","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006400000000000000000000000027bf1f282ee96cdb4bb921c961fe081f397e03e4","Library":"","SwarmSource":"bzzr://9208b82b7b54d23f5ca48d8dc4b1d91ef3eeb6d1fa5b640681e6fc7a0afbe467"}]}