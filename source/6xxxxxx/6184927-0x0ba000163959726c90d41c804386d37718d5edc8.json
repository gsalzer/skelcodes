{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Strings Library\r\n * \r\n * In summary this is a simple library of string functions which make simple \r\n * string operations less tedious in solidity.\r\n * \r\n * Please be aware these functions can be quite gas heavy so use them only when\r\n * necessary not to clog the blockchain with expensive transactions.\r\n * \r\n * @author James Lockhart <james@n3tw0rk.co.uk>\r\n */\r\nlibrary Strings {\r\n\r\n    /**\r\n     * Concat (High gas cost)\r\n     * \r\n     * Appends two strings together and returns a new value\r\n     * \r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string which will be the concatenated\r\n     *              prefix\r\n     * @param _value The value to be the concatenated suffix\r\n     * @return string The resulting string from combinging the base and value\r\n     */\r\n    function concat(string _base, string _value)\r\n        internal\r\n        returns (string) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        bytes memory _valueBytes = bytes(_value);\r\n\r\n        assert(_valueBytes.length > 0);\r\n\r\n        string memory _tmpValue = new string(_baseBytes.length + \r\n            _valueBytes.length);\r\n        bytes memory _newValue = bytes(_tmpValue);\r\n\r\n        uint i;\r\n        uint j;\r\n\r\n        for(i = 0; i < _baseBytes.length; i++) {\r\n            _newValue[j++] = _baseBytes[i];\r\n        }\r\n\r\n        for(i = 0; i<_valueBytes.length; i++) {\r\n            _newValue[j++] = _valueBytes[i];\r\n        }\r\n\r\n        return string(_newValue);\r\n    }\r\n\r\n    /**\r\n     * Index Of\r\n     *\r\n     * Locates and returns the position of a character within a string\r\n     * \r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string acting as the haystack to be\r\n     *              searched\r\n     * @param _value The needle to search for, at present this is currently\r\n     *               limited to one character\r\n     * @return int The position of the needle starting from 0 and returning -1\r\n     *             in the case of no matches found\r\n     */\r\n    function indexOf(string _base, string _value)\r\n        internal\r\n        returns (int) {\r\n        return _indexOf(_base, _value, 0);\r\n    }\r\n\r\n    /**\r\n     * Index Of\r\n     *\r\n     * Locates and returns the position of a character within a string starting\r\n     * from a defined offset\r\n     * \r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string acting as the haystack to be\r\n     *              searched\r\n     * @param _value The needle to search for, at present this is currently\r\n     *               limited to one character\r\n     * @param _offset The starting point to start searching from which can start\r\n     *                from 0, but must not exceed the length of the string\r\n     * @return int The position of the needle starting from 0 and returning -1\r\n     *             in the case of no matches found\r\n     */\r\n    function _indexOf(string _base, string _value, uint _offset)\r\n        internal\r\n        returns (int) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        bytes memory _valueBytes = bytes(_value);\r\n\r\n        assert(_valueBytes.length == 1);\r\n\r\n        for(uint i = _offset; i < _baseBytes.length; i++) {\r\n            if (_baseBytes[i] == _valueBytes[0]) {\r\n                return int(i);\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Length\r\n     * \r\n     * Returns the length of the specified string\r\n     * \r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string to be measured\r\n     * @return uint The length of the passed string\r\n     */\r\n    function length(string _base)\r\n        internal\r\n        returns (uint) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        return _baseBytes.length;\r\n    }\r\n\r\n    /**\r\n     * Sub String\r\n     * \r\n     * Extracts the beginning part of a string based on the desired length\r\n     * \r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string that will be used for \r\n     *              extracting the sub string from\r\n     * @param _length The length of the sub string to be extracted from the base\r\n     * @return string The extracted sub string\r\n     */\r\n    function substring(string _base, int _length)\r\n        internal\r\n        returns (string) {\r\n        return _substring(_base, _length, 0);\r\n    }\r\n\r\n    /**\r\n     * Sub String\r\n     * \r\n     * Extracts the part of a string based on the desired length and offset. The\r\n     * offset and length must not exceed the lenth of the base string.\r\n     * \r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string that will be used for \r\n     *              extracting the sub string from\r\n     * @param _length The length of the sub string to be extracted from the base\r\n     * @param _offset The starting point to extract the sub string from\r\n     * @return string The extracted sub string\r\n     */\r\n    function _substring(string _base, int _length, int _offset)\r\n        internal\r\n        returns (string) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n\r\n        assert(uint(_offset+_length) <= _baseBytes.length);\r\n\r\n        string memory _tmp = new string(uint(_length));\r\n        bytes memory _tmpBytes = bytes(_tmp);\r\n\r\n        uint j = 0;\r\n        for(uint i = uint(_offset); i < uint(_offset+_length); i++) {\r\n          _tmpBytes[j++] = _baseBytes[i];\r\n        }\r\n\r\n        return string(_tmpBytes);\r\n    }\r\n\r\n    /**\r\n     * String Split (Very high gas cost)\r\n     *\r\n     * Splits a string into an array of strings based off the delimiter value.\r\n     * Please note this can be quite a gas expensive function due to the use of\r\n     * storage so only use if really required.\r\n     *\r\n     * @param _base When being used for a data type this is the extended object\r\n     *               otherwise this is the string value to be split.\r\n     * @param _value The delimiter to split the string on which must be a single\r\n     *               character\r\n     * @return string[] An array of values split based off the delimiter, but\r\n     *                  do not container the delimiter.\r\n     */\r\n    function split(string _base, string _value)\r\n        internal\r\n        returns (string[] storage splitArr) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        uint _offset = 0;\r\n\r\n        while(_offset < _baseBytes.length-1) {\r\n\r\n            int _limit = _indexOf(_base, _value, _offset);\r\n            if (_limit == -1) {\r\n                _limit = int(_baseBytes.length);\r\n            }\r\n\r\n            string memory _tmp = new string(uint(_limit)-_offset);\r\n            bytes memory _tmpBytes = bytes(_tmp);\r\n\r\n            uint j = 0;\r\n            for(uint i = _offset; i < uint(_limit); i++) {\r\n                _tmpBytes[j++] = _baseBytes[i];\r\n            }\r\n            _offset = uint(_limit) + 1;\r\n            splitArr.push(string(_tmpBytes));\r\n        }\r\n        return splitArr;\r\n    }\r\n\r\n    /**\r\n     * Compare To\r\n     * \r\n     * Compares the characters of two strings, to ensure that they have an \r\n     * identical footprint\r\n     * \r\n     * @param _base When being used for a data type this is the extended object\r\n     *               otherwise this is the string base to compare against\r\n     * @param _value The string the base is being compared to\r\n     * @return bool Simply notates if the two string have an equivalent\r\n     */\r\n    function compareTo(string _base, string _value) \r\n        internal \r\n        returns (bool) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        bytes memory _valueBytes = bytes(_value);\r\n\r\n        if (_baseBytes.length != _valueBytes.length) {\r\n            return false;\r\n        }\r\n\r\n        for(uint i = 0; i < _baseBytes.length; i++) {\r\n            if (_baseBytes[i] != _valueBytes[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Compare To Ignore Case (High gas cost)\r\n     * \r\n     * Compares the characters of two strings, converting them to the same case\r\n     * where applicable to alphabetic characters to distinguish if the values\r\n     * match.\r\n     * \r\n     * @param _base When being used for a data type this is the extended object\r\n     *               otherwise this is the string base to compare against\r\n     * @param _value The string the base is being compared to\r\n     * @return bool Simply notates if the two string have an equivalent value\r\n     *              discarding case\r\n     */\r\n    function compareToIgnoreCase(string _base, string _value)\r\n        internal\r\n        returns (bool) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        bytes memory _valueBytes = bytes(_value);\r\n\r\n        if (_baseBytes.length != _valueBytes.length) {\r\n            return false;\r\n        }\r\n\r\n        for(uint i = 0; i < _baseBytes.length; i++) {\r\n            if (_baseBytes[i] != _valueBytes[i] && \r\n                _upper(_baseBytes[i]) != _upper(_valueBytes[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Upper\r\n     * \r\n     * Converts all the values of a string to their corresponding upper case\r\n     * value.\r\n     * \r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string base to convert to upper case\r\n     * @return string \r\n     */\r\n    function upper(string _base) \r\n        internal \r\n        returns (string) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        for (uint i = 0; i < _baseBytes.length; i++) {\r\n            _baseBytes[i] = _upper(_baseBytes[i]);\r\n        }\r\n        return string(_baseBytes);\r\n    }\r\n\r\n    /**\r\n     * Lower\r\n     * \r\n     * Converts all the values of a string to their corresponding lower case\r\n     * value.\r\n     * \r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string base to convert to lower case\r\n     * @return string \r\n     */\r\n    function lower(string _base) \r\n        internal \r\n        returns (string) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        for (uint i = 0; i < _baseBytes.length; i++) {\r\n            _baseBytes[i] = _lower(_baseBytes[i]);\r\n        }\r\n        return string(_baseBytes);\r\n    }\r\n\r\n    /**\r\n     * Upper\r\n     * \r\n     * Convert an alphabetic character to upper case and return the original\r\n     * value when not alphabetic\r\n     * \r\n     * @param _b1 The byte to be converted to upper case\r\n     * @return bytes1 The converted value if the passed value was alphabetic\r\n     *                and in a lower case otherwise returns the original value\r\n     */\r\n    function _upper(bytes1 _b1)\r\n        private\r\n        constant\r\n        returns (bytes1) {\r\n\r\n        if (_b1 >= 0x61 && _b1 <= 0x7A) {\r\n            return bytes1(uint8(_b1)-32);\r\n        }\r\n\r\n        return _b1;\r\n    }\r\n\r\n    /**\r\n     * Lower\r\n     * \r\n     * Convert an alphabetic character to lower case and return the original\r\n     * value when not alphabetic\r\n     * \r\n     * @param _b1 The byte to be converted to lower case\r\n     * @return bytes1 The converted value if the passed value was alphabetic\r\n     *                and in a upper case otherwise returns the original value\r\n     */\r\n    function _lower(bytes1 _b1)\r\n        private\r\n        constant\r\n        returns (bytes1) {\r\n\r\n        if (_b1 >= 0x41 && _b1 <= 0x5A) {\r\n            return bytes1(uint8(_b1)+32);\r\n        }\r\n        \r\n        return _b1;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Integers Library\r\n * \r\n * In summary this is a simple library of integer functions which allow a simple\r\n * conversion to and from strings\r\n * \r\n * @author James Lockhart <james@n3tw0rk.co.uk>\r\n */\r\nlibrary Integers {\r\n    /**\r\n     * Parse Int\r\n     * \r\n     * Converts an ASCII string value into an uint as long as the string \r\n     * its self is a valid unsigned integer\r\n     * \r\n     * @param _value The ASCII string to be converted to an unsigned integer\r\n     * @return uint The unsigned value of the ASCII string\r\n     */\r\n    function parseInt(string _value) \r\n        public\r\n        pure\r\n        returns (uint _ret) {\r\n        bytes memory _bytesValue = bytes(_value);\r\n        uint j = 1;\r\n        for(uint i = _bytesValue.length-1; i >= 0 && i < _bytesValue.length; i--) {\r\n            assert(_bytesValue[i] >= 48 && _bytesValue[i] <= 57);\r\n            _ret += (uint(_bytesValue[i]) - 48)*j;\r\n            j*=10;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * To String\r\n     * \r\n     * Converts an unsigned integer to the ASCII string equivalent value\r\n     * \r\n     * @param _base The unsigned integer to be converted to a string\r\n     * @return string The resulting ASCII string value\r\n     */\r\n    function toString(uint _base) \r\n        internal\r\n        pure\r\n        returns (string) {\r\n        bytes memory _tmp = new bytes(32);\r\n        uint i;\r\n        for(i = 0;_base > 0;i++) {\r\n            _tmp[i] = byte((_base % 10) + 48);\r\n            _base /= 10;\r\n        }\r\n        bytes memory _real = new bytes(i--);\r\n        for(uint j = 0; j < _real.length; j++) {\r\n            _real[j] = _tmp[i--];\r\n        }\r\n        return string(_real);\r\n    }\r\n\r\n    /**\r\n     * To Byte\r\n     *\r\n     * Convert an 8 bit unsigned integer to a byte\r\n     *\r\n     * @param _base The 8 bit unsigned integer\r\n     * @return byte The byte equivalent\r\n     */\r\n    function toByte(uint8 _base) \r\n        public\r\n        pure\r\n        returns (byte _ret) {\r\n        assembly {\r\n            let m_alloc := add(msize(),0x1)\r\n            mstore8(m_alloc, _base)\r\n            _ret := mload(m_alloc)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * To Bytes\r\n     *\r\n     * Converts an unsigned integer to bytes\r\n     *\r\n     * @param _base The integer to be converted to bytes\r\n     * @return bytes The bytes equivalent \r\n     */\r\n    function toBytes(uint _base) \r\n        internal\r\n        pure\r\n        returns (bytes _ret) {\r\n        assembly {\r\n            let m_alloc := add(msize(),0x1)\r\n            _ret := mload(m_alloc)\r\n            mstore(_ret, 0x20)\r\n            mstore(add(_ret, 0x20), _base)\r\n        }\r\n    }\r\n}\r\n\r\ncontract HEROES {\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n  using Strings for string;\r\n  using Integers for uint;\r\n\r\n\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n  event Lock(uint256 lockedTo, uint16 lockId);\r\n  event LevelUp(uint32 level);\r\n\r\n\r\n  struct Character {\r\n    uint256 genes;\r\n\r\n    uint256 mintedAt;\r\n    uint256 godfather;\r\n    uint256 mentor;\r\n\r\n    uint32 wins;\r\n    uint32 losses;\r\n    uint32 level;\r\n\r\n    uint256 lockedTo;\r\n    uint16 lockId;\r\n  }\r\n\r\n\r\n  string internal constant name_ = \"⚔ CRYPTOHEROES GAME ⚔\";\r\n  string internal constant symbol_ = \"CRYPTOHEROES\";\r\n  string internal baseURI_;\r\n\r\n  address internal admin;\r\n  mapping(address => bool) internal agents;\r\n\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  mapping(uint256 => address) internal tokenOwner;\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n  mapping(address => uint256) internal ownedTokensCount;\r\n\r\n  mapping(uint256 => address) internal tokenApprovals;\r\n  mapping(address => mapping(address => bool)) internal operatorApprovals;\r\n\r\n  uint256[] internal allTokens;\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  Character[] characters;\r\n  mapping(uint256 => uint256) tokenCharacters; // tokenId => characterId\r\n\r\n\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender ||\r\n            (ownerOf(_tokenId) == tx.origin && isAgent(msg.sender)) ||\r\n            msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isLocked(_tokenId) &&\r\n            (isApprovedOrOwned(msg.sender, _tokenId) ||\r\n             (isApprovedOrOwned(tx.origin, _tokenId) && isAgent(msg.sender)) ||\r\n             msg.sender == admin));\r\n    _;\r\n  }\r\n\r\n  modifier onlyAdmin() {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAgent() {\r\n    require(isAgent(msg.sender));\r\n    _;\r\n  }\r\n\r\n  /* CONTRACT METHODS */\r\n\r\n  constructor(string _baseURI) public {\r\n    baseURI_ = _baseURI;\r\n    admin = msg.sender;\r\n    addAgent(msg.sender);\r\n  }\r\n\r\n  function name() external pure returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  function symbol() external pure returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /* METADATA METHODS */\r\n\r\n  function setBaseURI(string _baseURI) external onlyAdmin {\r\n    baseURI_ = _baseURI;\r\n  }\r\n\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return baseURI_.concat(_tokenId.toString());\r\n  }\r\n\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /* TOKEN METHODS */\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      emit Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public {\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  function safeTransferFrom(address _from,\r\n                            address _to,\r\n                            uint256 _tokenId,\r\n                            bytes _data)\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  function isApprovedOrOwned(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n\r\n    address owner = ownerOf(_tokenId);\r\n\r\n    return (_spender == owner ||\r\n            getApproved(_tokenId) == _spender ||\r\n            isApprovedForAll(owner, _spender));\r\n  }\r\n\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n      emit Approval(_owner, address(0), _tokenId);\r\n    }\r\n  }\r\n\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  function checkAndCallSafeTransfer(address _from,\r\n                                    address _to,\r\n                                    uint256 _tokenId,\r\n                                    bytes _data)\r\n    internal\r\n    returns(bool)\r\n  {\r\n    return true;\r\n  }\r\n\r\n  /* AGENT ROLE */\r\n\r\n  function addAgent(address _agent) public onlyAdmin {\r\n    agents[_agent] = true;\r\n  }\r\n\r\n  function removeAgent(address _agent) external onlyAdmin {\r\n    agents[_agent] = false;\r\n  }\r\n\r\n  function isAgent(address _agent) public view returns (bool) {\r\n    return agents[_agent];\r\n  }\r\n\r\n  /* CHARACTER LOGIC */\r\n\r\n  function getCharacter(uint256 _tokenId)\r\n    external view returns\r\n    (uint256 genes,\r\n     uint256 mintedAt,\r\n     uint256 godfather,\r\n     uint256 mentor,\r\n     uint32 wins,\r\n     uint32 losses,\r\n     uint32 level,\r\n     uint256 lockedTo,\r\n     uint16 lockId) {\r\n\r\n    require(exists(_tokenId));\r\n\r\n    Character memory c = characters[tokenCharacters[_tokenId]];\r\n\r\n    genes = c.genes;\r\n    mintedAt = c.mintedAt;\r\n    godfather = c.godfather;\r\n    mentor = c.mentor;\r\n    wins = c.wins;\r\n    losses = c.losses;\r\n    level = c.level;\r\n    lockedTo = c.lockedTo;\r\n    lockId = c.lockId;\r\n  }\r\n\r\n  function addWin(uint256 _tokenId) external onlyAgent {\r\n\r\n    require(exists(_tokenId));\r\n\r\n    Character storage character = characters[tokenCharacters[_tokenId]];\r\n    character.wins++;\r\n    character.level++;\r\n\r\n    emit LevelUp(character.level);\r\n  }\r\n\r\n  function addLoss(uint256 _tokenId) external onlyAgent {\r\n\r\n    require(exists(_tokenId));\r\n\r\n    Character storage character = characters[tokenCharacters[_tokenId]];\r\n    character.losses++;\r\n    if (character.level > 1) {\r\n      character.level--;\r\n\r\n      emit LevelUp(character.level);\r\n    }\r\n  }\r\n\r\n  /* MINTING */\r\n\r\n  function mintTo(address _to,\r\n                  uint256 _genes,\r\n                  uint256 _godfather,\r\n                  uint256 _mentor,\r\n                  uint32 _level)\r\n    external\r\n    onlyAgent\r\n    returns (uint256)\r\n  {\r\n    uint256 newTokenId = totalSupply().add(1);\r\n    _mint(_to, newTokenId);\r\n    _mintCharacter(newTokenId, _genes, _godfather, _mentor, _level);\r\n\r\n    return newTokenId;\r\n  }\r\n\r\n  function _mintCharacter(uint256 _tokenId,\r\n                          uint256 _genes,\r\n                          uint256 _godfather,\r\n                          uint256 _mentor,\r\n                          uint32 _level)\r\n    internal\r\n  {\r\n\r\n    require(exists(_tokenId));\r\n\r\n    Character memory character = Character({\r\n      genes: _genes,\r\n\r\n          mintedAt: now,\r\n          mentor: _mentor,\r\n          godfather: _godfather,\r\n\r\n          wins: 0,\r\n          losses: 0,\r\n          level: _level,\r\n\r\n          lockedTo: 0,\r\n          lockId: 0\r\n          });\r\n\r\n    uint256 characterId = characters.push(character) - 1;\r\n    tokenCharacters[_tokenId] = characterId;\r\n  }\r\n\r\n  /* LOCKS */\r\n\r\n  function lock(uint256 _tokenId, uint256 _lockedTo, uint16 _lockId)\r\n    external onlyAgent returns (bool) {\r\n\r\n    require(exists(_tokenId));\r\n\r\n    Character storage character = characters[tokenCharacters[_tokenId]];\r\n\r\n    if (character.lockId == 0) {\r\n      character.lockedTo = _lockedTo;\r\n      character.lockId = _lockId;\r\n\r\n      emit Lock(character.lockedTo, character.lockId);\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function unlock(uint256 _tokenId, uint16 _lockId)\r\n    external onlyAgent returns (bool) {\r\n\r\n    require(exists(_tokenId));\r\n\r\n    Character storage character = characters[tokenCharacters[_tokenId]];\r\n\r\n    if (character.lockId == _lockId) {\r\n      character.lockedTo = 0;\r\n      character.lockId = 0;\r\n\r\n      emit Lock(character.lockedTo, character.lockId);\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function getLock(uint256 _tokenId)\r\n    external view returns (uint256 lockedTo, uint16 lockId) {\r\n\r\n    require(exists(_tokenId));\r\n\r\n    lockedTo = characters[tokenCharacters[_tokenId]].lockedTo;\r\n    lockId = characters[tokenCharacters[_tokenId]].lockId;\r\n  }\r\n\r\n  function isLocked(uint _tokenId) public view returns (bool) {\r\n    require(exists(_tokenId));\r\n    //isLocked workaround: lockedTo должен быть =1 для блокировки трансфер\r\n    return ((characters[tokenCharacters[_tokenId]].lockedTo == 0 &&\r\n             characters[tokenCharacters[_tokenId]].lockId != 0) ||\r\n            now <= characters[tokenCharacters[_tokenId]].lockedTo);\r\n  }\r\n\r\n  function test(uint256 _x) returns (bool) {\r\n    return now <= _x;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"addLoss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"addWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"isAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_x\",\"type\":\"uint256\"}],\"name\":\"test\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"addAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_godfather\",\"type\":\"uint256\"},{\"name\":\"_mentor\",\"type\":\"uint256\"},{\"name\":\"_level\",\"type\":\"uint32\"}],\"name\":\"mintTo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"removeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_lockedTo\",\"type\":\"uint256\"},{\"name\":\"_lockId\",\"type\":\"uint16\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_lockId\",\"type\":\"uint16\"}],\"name\":\"unlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLock\",\"outputs\":[{\"name\":\"lockedTo\",\"type\":\"uint256\"},{\"name\":\"lockId\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getCharacter\",\"outputs\":[{\"name\":\"genes\",\"type\":\"uint256\"},{\"name\":\"mintedAt\",\"type\":\"uint256\"},{\"name\":\"godfather\",\"type\":\"uint256\"},{\"name\":\"mentor\",\"type\":\"uint256\"},{\"name\":\"wins\",\"type\":\"uint32\"},{\"name\":\"losses\",\"type\":\"uint32\"},{\"name\":\"level\",\"type\":\"uint32\"},{\"name\":\"lockedTo\",\"type\":\"uint256\"},{\"name\":\"lockId\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_baseURI\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lockedTo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lockId\",\"type\":\"uint16\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"level\",\"type\":\"uint32\"}],\"name\":\"LevelUp\",\"type\":\"event\"}]","ContractName":"HEROES","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002c68747470733a2f2f6170692e63727970746f6865726f65732e6170702f746f6b656e2f6d657461646174612f0000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://989d93606934aad035627a3e6adb81e3854ecea3dd6e95edfc5236e70a91cc70"}]}