{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ERC20Basic\r\n{\r\n\tfunction totalSupply() public view returns (uint256);\r\n\r\n\tfunction balanceOf(address who) public view returns (uint256);\r\n\r\n\tfunction transfer(address to, uint256 value) public returns (bool);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic\r\n{\r\n\tfunction allowance(address owner, address spender) public view returns (uint256);\r\n\r\n\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n\tfunction approve(address spender, uint256 value) public returns (bool);\r\n\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable\r\n{\r\n\taddress public owner;\r\n\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\t/**\r\n\t* @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n\t* account.\r\n\t*/\r\n\tconstructor() public\r\n\t{\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Throws if called by any account other than the owner.\r\n\t*/\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n\t* @param newOwner The address to transfer ownership to.\r\n\t*/\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n\t\trequire(newOwner != address(0));\r\n\r\n\t\temit OwnershipTransferred(owner, newOwner);\r\n\t\towner = newOwner;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract TokenTimelock {\r\n\t// ERC20 basic token contract being held\r\n\tERC20 private _token;\r\n\r\n\t// beneficiary of tokens after they are released\r\n\taddress private _beneficiary;\r\n\r\n\t// timestamp when token release is enabled\r\n\tuint256 private _releaseTime;\r\n\r\n\tconstructor (ERC20 token, address beneficiary, uint256 releaseTime) public {\r\n\t\t// solium-disable-next-line security/no-block-members\r\n\t\trequire(releaseTime > block.timestamp);\r\n\t\t_token = token;\r\n\t\t_beneficiary = beneficiary;\r\n\t\t_releaseTime = releaseTime;\r\n\t}\r\n\r\n\t/**\r\n\t * @return the token being held.\r\n\t */\r\n\tfunction token() public view returns (ERC20) {\r\n\t\treturn _token;\r\n\t}\r\n\r\n\t/**\r\n\t * @return the beneficiary of the tokens.\r\n\t */\r\n\tfunction beneficiary() public view returns (address) {\r\n\t\treturn _beneficiary;\r\n\t}\r\n\r\n\t/**\r\n\t * @return the time when the tokens are released.\r\n\t */\r\n\tfunction releaseTime() public view returns (uint256) {\r\n\t\treturn _releaseTime;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Transfers tokens held by timelock to beneficiary.\r\n\t */\r\n\tfunction release() public {\r\n\t\t// solium-disable-next-line security/no-block-members\r\n\t\trequire(block.timestamp >= _releaseTime);\r\n\r\n\t\tuint256 amount = _token.balanceOf(address(this));\r\n\t\trequire(amount > 0);\r\n\r\n\t\t_token.transfer(_beneficiary, amount);\r\n\t}\r\n}\r\n\r\n\r\ncontract MassVestingSender is Ownable\r\n{\r\n\tmapping(uint32 => bool) processedTransactions;\r\n\r\n\tevent VestingTransfer(\r\n\t\taddress indexed _recipient,\r\n\t\taddress indexed _lock,\r\n\t\tuint32 indexed _vesting,\r\n\t\tuint _amount);\r\n\r\n\tfunction bulkTransfer(ERC20 token, uint32[] payment_ids, address[] receivers, uint256[] transfers, uint32[] vesting) external\r\n\t{\r\n\t\trequire(payment_ids.length == receivers.length);\r\n\t\trequire(payment_ids.length == transfers.length);\r\n\t\trequire(payment_ids.length == vesting.length);\r\n\r\n\t\tfor (uint i = 0; i < receivers.length; i++)\r\n\t\t{\r\n\t\t\tif (!processedTransactions[payment_ids[i]])\r\n\t\t\t{\r\n\t\t\t\tTokenTimelock vault = new TokenTimelock(token, receivers[i], vesting[i]);\r\n\r\n\t\t\t\trequire(token.transfer(address(vault), transfers[i]));\r\n\r\n\t\t\t\tprocessedTransactions[payment_ids[i]] = true;\r\n\r\n\t\t\t\temit VestingTransfer(receivers[i], address(vault), vesting[i], transfers[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction r(ERC20 token) external onlyOwner\r\n\t{\r\n\t\ttoken.transfer(owner, token.balanceOf(address(this)));\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"r\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"payment_ids\",\"type\":\"uint32[]\"},{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"transfers\",\"type\":\"uint256[]\"},{\"name\":\"vesting\",\"type\":\"uint32[]\"}],\"name\":\"bulkTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_lock\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_vesting\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"VestingTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MassVestingSender","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2e613c75f05bd90dcf1e5ff7bbb8699e94418b70b387b7f0bf07394816f6c805"}]}