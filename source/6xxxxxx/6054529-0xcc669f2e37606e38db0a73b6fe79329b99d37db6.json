{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n   function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token,address from,address to,uint256 value) internal{\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n//锁仓操作员\r\ncontract FreezeAdmin is Ownable{\r\n  address public freezeAdmin;\r\n  function FreezeAdmin() public{\r\n    freezeAdmin = msg.sender;\r\n  }\r\n  function setFreezeAdmin(address _freezeAdmin) onlyOwner public {\r\n    freezeAdmin = _freezeAdmin;\r\n  }\r\n\r\n  modifier onlyFreezeAdmin() {\r\n    require(msg.sender == freezeAdmin);\r\n    _;\r\n  }\r\n}\r\n\r\n\r\n//锁仓合约\r\ncontract MyFreezeContract is Ownable,FreezeAdmin{\r\n  \r\n  using SafeMath for uint256;\r\n  \r\n  using SafeERC20 for ERC20;\r\n    \r\n  ERC20 public token;\r\n  \r\n  uint256 public totalAllowedFreeze;\r\n  \r\n  uint256 public totalFreezed = 0;//已锁仓总量 \r\n  \r\n  address[]  public freezedWallets;//用户锁仓钱包地址    \r\n    \r\n  struct FreezeData{\r\n    uint256 balance;//余额\r\n    uint256 amount;//锁仓总额\r\n    uint256 unFreezeCount;//已解锁次数 \r\n  }\r\n  mapping (address => FreezeData) public freezeDatas;\r\n  \r\n \r\n  struct UnFreezeRule{\r\n    uint256 unfreezetime; //释放时间\r\n    uint256 percentage;//释放比例\r\n  } \r\n\r\n  UnFreezeRule[] public unFreezeRules;//锁仓规则--解锁时间及释放比例\r\n  \r\n  event Freeze(address indexed from, uint256 value);  \r\n  event Unfreeze(address indexed from, uint256 value);\r\n    \r\n  function MyFreezeContract(address _token) public {\r\n      \r\n    token = ERC20(_token);\r\n      \r\n    totalAllowedFreeze = token.totalSupply().mul(20).div(100);//分配可锁仓的数量,占总量的20%\r\n      \r\n    uint256 freezeAt = block.timestamp;//设定开始锁仓时间\r\n\t\r\n    //uint256 duration = 1*1 days; //设定解锁时间及释放比例\t    \r\n    uint256 duration = 60; //设定解锁时间及释放比例(测试-秒)\r\n\t\t\r\n    uint256 unfreezeAt1 = freezeAt + duration;\r\n\t\r\n    uint256 unfreezeAt2 = unfreezeAt1 + duration;\r\n\t\r\n    uint256 unfreezeAt3 = unfreezeAt2 + duration;\r\n    \r\n\t\r\n    unFreezeRules.push(UnFreezeRule({unfreezetime:unfreezeAt1,percentage:50}));//锁仓后第1次解锁50%\r\n\t\r\n    unFreezeRules.push(UnFreezeRule({unfreezetime:unfreezeAt2,percentage:30}));//锁仓后第2次解锁30%\r\n\t\r\n    unFreezeRules.push(UnFreezeRule({unfreezetime:unfreezeAt3,percentage:20}));//锁仓后第3次解锁20%\r\n  }\r\n  \r\n  //锁仓\r\n  function freeze(address _investor,uint256 _value) onlyFreezeAdmin public returns (bool) {\r\n  \r\n    require(_investor != 0x0 && !AddressUtils.isContract(_investor));\r\n\t\r\n    require(_value > 0 );\r\n\t\r\n    require(totalAllowedFreeze >= totalFreezed.add(_value));//锁仓总额不能超过上限\r\n\t\r\n    FreezeData storage freezeData =  freezeDatas[_investor];\r\n\t\r\n    require(freezeData.amount == 0);//已经参加过锁仓的地址不要进行锁仓\r\n\t\r\n    freezeData.balance = freezeData.balance.add(_value); \r\n\t\r\n    freezeData.amount = freezeData.amount.add(_value);  \r\n\t\r\n    totalFreezed = totalFreezed.add(_value);  \r\n\t\r\n    freezedWallets.push(_investor);//添加进锁仓地址列表    \r\n\t\r\n    emit Freeze(_investor,_value);\r\n    \r\n    return true;\r\n  }\r\n  \r\n  //已经到了解锁时间节点，按照指定的比例进行释放\r\n  function unFreeze(address _investor) onlyFreezeAdmin public returns(bool){\r\n      \r\n    require(freezeDatas[_investor].balance > 0);\r\n    \r\n    require(freezeDatas[_investor].unFreezeCount < unFreezeRules.length);\r\n    \r\n    uint256 unfreezetime = unFreezeRules[freezeDatas[_investor].unFreezeCount].unfreezetime;\r\n    \r\n    uint256 percentage =  unFreezeRules[freezeDatas[_investor].unFreezeCount].percentage;\r\n    \r\n    require(block.timestamp >= unfreezetime);\r\n    \r\n    uint256  currentUnFreezeAmount = freezeDatas[_investor].amount.mul(percentage).div(100);\r\n    \r\n    require(token.balanceOf(address(this)) >= currentUnFreezeAmount);\r\n    \r\n    freezeDatas[_investor].balance = freezeDatas[_investor].balance.sub(currentUnFreezeAmount);\r\n    \r\n    freezeDatas[_investor].unFreezeCount = freezeDatas[_investor].unFreezeCount.add(1);\r\n    \r\n    token.safeTransfer(_investor,currentUnFreezeAmount);\r\n    \r\n    emit Unfreeze(_investor,currentUnFreezeAmount);    \r\n    \r\n    return true;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_freezeAdmin\",\"type\":\"address\"}],\"name\":\"setFreezeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAllowedFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"unFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeDatas\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"unFreezeCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unFreezeRules\",\"outputs\":[{\"name\":\"unfreezetime\",\"type\":\"uint256\"},{\"name\":\"percentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFreezed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezedWallets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MyFreezeContract","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000759065522fc818a0bcf465021681747eb1d8827","Library":"","SwarmSource":"bzzr://255eab87dcc85b21fd93d72924bfec5046bd3736c77326f7d60cb2d95dd7a1a6"}]}