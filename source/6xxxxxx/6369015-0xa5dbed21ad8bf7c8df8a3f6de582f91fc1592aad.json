{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract Withdrawable is Ownable {\r\n    event ReceiveEther(address _from, uint256 _value);\r\n    event WithdrawEther(address _to, uint256 _value);\r\n    event WithdrawToken(address _token, address _to, uint256 _value);\r\n\r\n    /**\r\n         * @dev recording receiving ether from msn.sender\r\n         */\r\n    function () payable public {\r\n        emit ReceiveEther(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n         * @dev withdraw,send ether to target\r\n         * @param _to is where the ether will be sent to\r\n         *        _amount is the number of the ether\r\n         */\r\n    function withdraw(address _to, uint _amount) public onlyOwner returns (bool) {\r\n        require(_to != address(0));\r\n        _to.transfer(_amount);\r\n        emit WithdrawEther(_to, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n         * @dev withdraw tokens, send tokens to target\r\n     *\r\n     * @param _token the token address that will be withdraw\r\n         * @param _to is where the tokens will be sent to\r\n         *        _value is the number of the token\r\n         */\r\n    function withdrawToken(address _token, address _to, uint256 _value) public onlyOwner returns (bool) {\r\n        require(_to != address(0));\r\n        require(_token != address(0));\r\n\r\n        ERC20 tk = ERC20(_token);\r\n        tk.transfer(_to, _value);\r\n        emit WithdrawToken(_token, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev receive approval from an ERC20 token contract, and then gain the tokens,\r\n     *      then take a record\r\n     *\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _value uint256 the amounts of tokens to be sent\r\n     * @param _token address the ERC20 token address\r\n     * @param _extraData bytes the extra data for the record\r\n     */\r\n    // function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public {\r\n    //     require(_token != address(0));\r\n    //     require(_from != address(0));\r\n\r\n    //     ERC20 tk = ERC20(_token);\r\n    //     require(tk.transferFrom(_from, this, _value));\r\n\r\n    //     emit ReceiveDeposit(_from, _value, _token, _extraData);\r\n    // }\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() public onlyPendingOwner {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract LockedStorage is Withdrawable, Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * account description\r\n     */\r\n    struct Account {\r\n        string name;\r\n        uint256 balance;\r\n        uint256 frozen;\r\n    }\r\n\r\n    // record lock time period and related token amount\r\n    struct TimeRec {\r\n        uint256 amount;\r\n        uint256 remain;\r\n        uint256 endTime;\r\n        uint256 releasePeriodEndTime;\r\n    }\r\n\r\n    mapping (address => Account) accounts;\r\n    mapping (address => bool) public frozenAccounts;\r\n    address[] accountAddresses;\r\n    mapping (address => TimeRec[]) frozenTimes;\r\n\r\n    uint256 public size;\r\n\r\n\r\n    /**\r\n         * @dev add deposit contract address for the default withdraw wallet\r\n     *\r\n     * @param _wallet the default withdraw wallet address\r\n     * @param _name the wallet owner's name\r\n     * @param _value the balance of the wallet need to be stored in this contract\r\n         */\r\n    function addAccount(address _wallet, string _name, uint256 _value) onlyOwner public returns (bool) {\r\n        require(_wallet != address(0));\r\n\r\n        accounts[_wallet].balance = _value;\r\n        accounts[_wallet].frozen = 0;\r\n        accounts[_wallet].name = _name;\r\n\r\n        accountAddresses.push(_wallet);\r\n        size = size.add(1);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an address from the account address list\r\n     *\r\n     * @param _wallet the account address in the list\r\n     */\r\n    function removeAccountAddress(address _wallet) internal returns (bool) {\r\n        uint i = 0;\r\n        for (;i < accountAddresses.length; i = i.add(1)) {\r\n            if (accountAddresses[i] == _wallet) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (i >= accountAddresses.length) {\r\n            return false;\r\n        }\r\n\r\n        while (i < accountAddresses.length.sub(1)) {\r\n            accountAddresses[i] = accountAddresses[i.add(1)];\r\n            i = i.add(1);\r\n        }\r\n\r\n        delete accountAddresses[accountAddresses.length.sub(1)];\r\n        accountAddresses.length = accountAddresses.length.sub(1);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n         * @dev remove deposit contract address from storage\r\n     *\r\n     * @param _wallet the corresponding deposit address\r\n         */\r\n    function removeAccount(address _wallet) onlyOwner public returns (bool) {\r\n        require(_wallet != address(0));\r\n\r\n        delete accounts[_wallet];\r\n        delete frozenAccounts[_wallet];\r\n        removeAccountAddress(_wallet);\r\n\r\n        size = size.sub(1);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev add a time record of one account\r\n     *\r\n     * @param _target the account that holds a list of time records which record the freeze period\r\n     * @param _value the amount of the tokens\r\n     * @param _frozenEndTime the end time of the lock period, unit is second\r\n     * @param _releasePeriod the locking period, unit is second\r\n     */\r\n    function addLockedTime(address _target,\r\n                           uint256 _value,\r\n                           uint256 _frozenEndTime,\r\n                           uint256 _releasePeriod) onlyOwner public returns (bool) {\r\n        require(_target != address(0));\r\n\r\n        TimeRec[] storage lockedTimes = frozenTimes[_target];\r\n        lockedTimes.push(TimeRec(_value, _value, _frozenEndTime, _frozenEndTime.add(_releasePeriod)));\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove a time records from the time records list of one account\r\n     *\r\n     * @param _target the account that holds a list of time records which record the freeze period\r\n     * @param _ind the account address index\r\n     */\r\n    function removeLockedTime(address _target, uint _ind) public returns (bool) {\r\n        require(_target != address(0));\r\n\r\n        TimeRec[] storage lockedTimes = frozenTimes[_target];\r\n        require(_ind < lockedTimes.length);\r\n\r\n        uint256 i = _ind;\r\n        while (i < lockedTimes.length.sub(1)) {\r\n            lockedTimes[i] = lockedTimes[i.add(1)];\r\n            i = i.add(1);\r\n        }\r\n\r\n        delete lockedTimes[lockedTimes.length.sub(1)];\r\n        lockedTimes.length = lockedTimes.length.sub(1);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n         * @dev increase balance of this deposit address\r\n     *\r\n     * @param _wallet the corresponding wallet address\r\n     * @param _value the amount that the balance will be increased\r\n         */\r\n    function increaseBalance(address _wallet, uint256 _value) public returns (bool) {\r\n        require(_wallet != address(0));\r\n        uint256 _balance = accounts[_wallet].balance;\r\n        accounts[_wallet].balance = _balance.add(_value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n         * @dev decrease balance of this deposit address\r\n     *\r\n     * @param _wallet the corresponding wallet address\r\n     * @param _value the amount that the balance will be decreased\r\n         */\r\n    function decreaseBalance(address _wallet, uint256 _value) public returns (bool) {\r\n        require(_wallet != address(0));\r\n        uint256 _balance = accounts[_wallet].balance;\r\n        accounts[_wallet].balance = _balance.sub(_value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n         * @dev freeze the tokens in the deposit address\r\n     *\r\n     * @param _wallet the wallet address\r\n     * @param _freeze to freeze or release\r\n     * @param _value the amount of tokens need to be frozen\r\n         */\r\n    function freezeTokens(address _wallet, bool _freeze, uint256 _value) onlyOwner public returns (bool) {\r\n        require(_wallet != address(0));\r\n        // require(_value <= balanceOf(_deposit));\r\n\r\n        frozenAccounts[_wallet] = _freeze;\r\n        uint256 _frozen = accounts[_wallet].frozen;\r\n        uint256 _balance = accounts[_wallet].balance;\r\n        uint256 freezeAble = _balance.sub(_frozen);\r\n        if (_freeze) {\r\n            if (_value > freezeAble) {\r\n                _value = freezeAble;\r\n            }\r\n            accounts[_wallet].frozen = _frozen.add(_value);\r\n        } else {\r\n            if (_value > _frozen) {\r\n                _value = _frozen;\r\n            }\r\n            accounts[_wallet].frozen = _frozen.sub(_value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n         * @dev get the balance of the deposit account\r\n     *\r\n     * @param _wallet the wallet address\r\n         */\r\n    function isExisted(address _wallet) public view returns (bool) {\r\n        require(_wallet != address(0));\r\n        return (accounts[_wallet].balance != 0);\r\n    }\r\n\r\n    /**\r\n         * @dev get the wallet name for the deposit address\r\n     *\r\n     * @param _wallet the deposit address\r\n         */\r\n    function walletName(address _wallet) onlyOwner public view returns (string) {\r\n        require(_wallet != address(0));\r\n        return accounts[_wallet].name;\r\n    }\r\n\r\n    /**\r\n         * @dev get the balance of the deposit account\r\n     *\r\n     * @param _wallet the deposit address\r\n         */\r\n    function balanceOf(address _wallet) public view returns (uint256) {\r\n        require(_wallet != address(0));\r\n        return accounts[_wallet].balance;\r\n    }\r\n\r\n    /**\r\n         * @dev get the frozen amount of the deposit address\r\n     *\r\n     * @param _wallet the deposit address\r\n         */\r\n    function frozenAmount(address _wallet) public view returns (uint256) {\r\n        require(_wallet != address(0));\r\n        return accounts[_wallet].frozen;\r\n    }\r\n\r\n    /**\r\n         * @dev get the account address by index\r\n     *\r\n     * @param _ind the account address index\r\n         */\r\n    function addressByIndex(uint256 _ind) public view returns (address) {\r\n        return accountAddresses[_ind];\r\n    }\r\n\r\n    /**\r\n     * @dev set the new endtime of the released time of an account\r\n     *\r\n     * @param _target the owner of some amount of tokens\r\n     * @param _ind the stage index of the locked stage\r\n     * @param _newEndTime the new endtime for the lock period\r\n     */\r\n    function changeEndTime(address _target, uint256 _ind, uint256 _newEndTime) onlyOwner public returns (bool) {\r\n        require(_target != address(0));\r\n        require(_newEndTime > 0);\r\n\r\n        if (isExisted(_target)) {\r\n            TimeRec storage timePair = frozenTimes[_target][_ind];\r\n            timePair.endTime = _newEndTime;\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev set the new released period end time of an account\r\n     *\r\n     * @param _target the owner of some amount of tokens\r\n     * @param _ind the stage index of the locked stage\r\n     * @param _newReleaseEndTime the new endtime for the releasing period\r\n     */\r\n    function setNewReleaseEndTime(address _target, uint256 _ind, uint256 _newReleaseEndTime) onlyOwner public returns (bool) {\r\n        require(_target != address(0));\r\n        require(_newReleaseEndTime > 0);\r\n\r\n        if (isExisted(_target)) {\r\n            TimeRec storage timePair = frozenTimes[_target][_ind];\r\n            timePair.releasePeriodEndTime = _newReleaseEndTime;\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev decrease the remaining locked amount of an account\r\n     *\r\n     * @param _target the owner of some amount of tokens\r\n     * @param _ind the stage index of the locked stage\r\n     */\r\n    function decreaseRemainLockedOf(address _target, uint256 _ind, uint256 _value) onlyOwner public returns (bool) {\r\n        require(_target != address(0));\r\n\r\n        if (isExisted(_target)) {\r\n            TimeRec storage timePair = frozenTimes[_target][_ind];\r\n            timePair.remain = timePair.remain.sub(_value);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev get the locked stages of an account\r\n     *\r\n     * @param _target the owner of some amount of tokens\r\n     */\r\n    function lockedStagesNum(address _target) public view returns (uint) {\r\n        require(_target != address(0));\r\n        return (isExisted(_target) ? frozenTimes[_target].length : 0);\r\n    }\r\n\r\n    /**\r\n     * @dev get the endtime of the locked stages of an account\r\n     *\r\n     * @param _target the owner of some amount of tokens\r\n     * @param _ind the stage index of the locked stage\r\n     */\r\n    function endTimeOfStage(address _target, uint _ind) public view returns (uint256) {\r\n        require(_target != address(0));\r\n\r\n        if (isExisted(_target)) {\r\n            TimeRec memory timePair = frozenTimes[_target][_ind];\r\n            return timePair.endTime;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev get the remain unrleased tokens of the locked stages of an account\r\n     *\r\n     * @param _target the owner of some amount of tokens\r\n     * @param _ind the stage index of the locked stage\r\n     */\r\n    function remainOfStage(address _target, uint _ind) public view returns (uint256) {\r\n        require(_target != address(0));\r\n\r\n        if (isExisted(_target)) {\r\n            TimeRec memory timePair = frozenTimes[_target][_ind];\r\n            return timePair.remain;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev get the remain unrleased tokens of the locked stages of an account\r\n     *\r\n     * @param _target the owner of some amount of tokens\r\n     * @param _ind the stage index of the locked stage\r\n     */\r\n    function amountOfStage(address _target, uint _ind) public view returns (uint256) {\r\n        require(_target != address(0));\r\n\r\n        if (isExisted(_target)) {\r\n            TimeRec memory timePair = frozenTimes[_target][_ind];\r\n            return timePair.amount;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev get the remain releasing period end time of an account\r\n     *\r\n     * @param _target the owner of some amount of tokens\r\n     * @param _ind the stage index of the locked stage\r\n     */\r\n    function releaseEndTimeOfStage(address _target, uint _ind) public view returns (uint256) {\r\n        require(_target != address(0));\r\n\r\n        if (isExisted(_target)) {\r\n            TimeRec memory timePair = frozenTimes[_target][_ind];\r\n            return timePair.releasePeriodEndTime;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_frozenEndTime\",\"type\":\"uint256\"},{\"name\":\"_releasePeriod\",\"type\":\"uint256\"}],\"name\":\"addLockedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"walletName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freezeTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_ind\",\"type\":\"uint256\"},{\"name\":\"_newReleaseEndTime\",\"type\":\"uint256\"}],\"name\":\"setNewReleaseEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_ind\",\"type\":\"uint256\"},{\"name\":\"_newEndTime\",\"type\":\"uint256\"}],\"name\":\"changeEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_ind\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseRemainLockedOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_ind\",\"type\":\"uint256\"}],\"name\":\"remainOfStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"lockedStagesNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_ind\",\"type\":\"uint256\"}],\"name\":\"releaseEndTimeOfStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"frozenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_ind\",\"type\":\"uint256\"}],\"name\":\"amountOfStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_ind\",\"type\":\"uint256\"}],\"name\":\"endTimeOfStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isExisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"removeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ind\",\"type\":\"uint256\"}],\"name\":\"addressByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_ind\",\"type\":\"uint256\"}],\"name\":\"removeLockedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ReceiveEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"LockedStorage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aa6bb938dbda3ce32dafe4a40fc379574af830501c8c34027fdd58e1f3fbd133"}]}