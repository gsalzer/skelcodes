{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.11;\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract HZI {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    string public name = \"HZI\";      //  token name\r\n    \r\n    string public symbol = \"HZI\";           //  token symbol\r\n    \r\n    uint256 public decimals = 8;            //  token digit\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    \r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n    mapping (address => uint256) public frozenBalances;\r\n    mapping (address => uint256) public lockedBalances;\r\n    \r\n    mapping (address => uint256) public initTimes;\r\n    \r\n    mapping (address => uint) public initTypes;\r\n    \r\n    uint256 public totalSupply = 0;\r\n\r\n    uint256 constant valueFounder = 1000000000000000000;\r\n    \r\n    address owner = 0x0;\r\n    \r\n    address operator = 0x0;\r\n    bool inited = false;\r\n\r\n    modifier isOwner {\r\n        assert(owner == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    modifier isOperator {\r\n        assert(operator == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier validAddress {\r\n        assert(0x0 != msg.sender);\r\n        _;\r\n    }\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n    event Burn(address indexed from, uint256 value);\r\n    event Frozen(address indexed from, uint256 value);\r\n    event UnFrozen(address indexed from, uint256 value);\r\n\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        operator = msg.sender;\r\n        totalSupply = valueFounder;\r\n        balanceOf[msg.sender] = valueFounder;\r\n        emit Transfer(0x0, msg.sender, valueFounder);\r\n    }\r\n    \r\n    function _transfer(address _from, address _to, uint256 _value) private {\r\n        require(_to != 0x0);\r\n        require(canTransferBalance(_from) >= _value);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) validAddress public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) validAddress public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) validAddress public returns (bool success) {\r\n        require(canTransferBalance(msg.sender) >= _value);\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function burn(uint256 _value) validAddress public  returns (bool success) {\r\n        require(canTransferBalance(msg.sender) >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        emit Transfer(msg.sender, 0x0, _value);\r\n        return true;\r\n    }\r\n\r\n    function initTransferArr(address[] _arr_addr, uint256[] _arr_value,uint[] _arr_initType) validAddress isOperator public returns (bool success) {\r\n        require(_arr_addr.length == _arr_value.length && _arr_value.length == _arr_initType.length);\r\n        require(_arr_addr.length > 0 && _arr_addr.length < 100);\r\n        require(!inited);\r\n        for (uint i = 0; i < _arr_addr.length ; ++i) {\r\n            initTransfer(_arr_addr[i],_arr_value[i],_arr_initType[i]);\r\n        }\r\n        inited = true;\r\n        return true;\r\n    }\r\n\r\n    function initTransfer(address _to, uint256 _value, uint _initType) validAddress isOperator public returns (bool success) {\r\n        require(_initType == 0x1 || _initType == 0x2 || _initType == 0x3);\r\n        require(initTypes[_to]==0x0);\r\n        lockedBalances[_to] = _value;\r\n        initTimes[_to] = now;\r\n        initTypes[_to] = _initType;\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function canTransferBalance(address addr) public view returns (uint256){\r\n        if(initTypes[addr]==0x0){\r\n            return balanceOf[addr].sub(frozenBalances[addr]);\r\n        }else{\r\n            uint256 s = now.sub(initTimes[addr]);\r\n            if(initTypes[addr]==0x1){\r\n                if(s >= 11825 days){\r\n                    return balanceOf[addr].sub(frozenBalances[addr]);    \r\n                }else if(s >= 1825 days){\r\n                    return balanceOf[addr].sub(lockedBalances[addr]).add(lockedBalances[addr].div(10000).mul((s.sub(1825 days).div(1 days) + 1))).sub(frozenBalances[addr]);\r\n                }else{\r\n                    return balanceOf[addr].sub(lockedBalances[addr]).sub(frozenBalances[addr]);\r\n                }\r\n            }else if(initTypes[addr]==0x2){\r\n                if(s >= 11460 days){\r\n                    return balanceOf[addr].sub(frozenBalances[addr]);    \r\n                }else if(s >= 1460 days){\r\n                    return balanceOf[addr].sub(lockedBalances[addr]).add(lockedBalances[addr].div(10000).mul((s.sub(1460 days).div(1 days) + 1))).sub(frozenBalances[addr]);\r\n                }else{\r\n                    return balanceOf[addr].sub(lockedBalances[addr]).sub(frozenBalances[addr]);\r\n                }\r\n            }else if(initTypes[addr]==0x3){\r\n                if(s >= 11095 days){\r\n                    return balanceOf[addr].sub(frozenBalances[addr]);    \r\n                }else if(s >= 1095 days){\r\n                    return balanceOf[addr].sub(lockedBalances[addr]).add(lockedBalances[addr].div(10000).mul((s.sub(1095 days).div(1 days) + 1))).sub(frozenBalances[addr]);\r\n                }else{\r\n                    return balanceOf[addr].sub(lockedBalances[addr]).sub(frozenBalances[addr]);\r\n                }\r\n            }else{\r\n                return 0;\r\n            }\r\n      \r\n        }\r\n    }\r\n\r\n    function frozen(address from,  uint256 value) validAddress isOperator public {\r\n        require(from != 0x0);\r\n        require(canTransferBalance(from) >= value);\r\n        frozenBalances[from] = frozenBalances[from].add(value);\r\n        emit Frozen(from, value);\r\n    }\r\n\r\n    function unFrozen(address from,  uint256 value) validAddress isOperator public {\r\n        require(from != 0x0);\r\n        require(frozenBalances[from] >= value);\r\n        frozenBalances[from] = frozenBalances[from].sub(value);\r\n        emit UnFrozen(from, value);\r\n    }\r\n\r\n    function setOperator(address addr) validAddress isOwner public {\r\n        operator = addr;\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"frozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_arr_addr\",\"type\":\"address[]\"},{\"name\":\"_arr_value\",\"type\":\"uint256[]\"},{\"name\":\"_arr_initType\",\"type\":\"uint256[]\"}],\"name\":\"initTransferArr\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_initType\",\"type\":\"uint256\"}],\"name\":\"initTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"unFrozen\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"canTransferBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"initTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Frozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnFrozen\",\"type\":\"event\"}]","ContractName":"HZI","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://653afcd0dab5cca9891f27d288605e72b56afab2e44f4386551ef37be9d39c73"}]}