{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/*\r\n______ _   _ _   _  _   ___   __\r\n| ___ \\ | | | \\ | || \\ | \\ \\ / /\r\n| |_/ / | | |  \\| ||  \\| |\\ V / \r\n| ___ \\ | | | . ` || . ` | \\ /  \r\n| |_/ / |_| | |\\  || |\\  | | |  \r\n\\____/ \\___/\\_| \\_/\\_| \\_/ \\_/   \r\n _____   ___  ___  ___ _____    \r\n|  __ \\ / _ \\ |  \\/  ||  ___|   \r\n| |  \\// /_\\ \\| .  . || |__     \r\n| | __ |  _  || |\\/| ||  __|    \r\n| |_\\ \\| | | || |  | || |___    \r\n \\____/\\_| |_/\\_|  |_/\\____/ \r\n*\r\n* Author:  Konstantin G...\r\n* Telegram: @bunnygame (en)\r\n* talk : https://bitcointalk.org/index.php?topic=5025885.0\r\n* discord : https://discordapp.com/invite/G2jt4Fw\r\n* email: info@bunnycoin.co\r\n* site : http://bunnycoin.co \r\n*/\r\n \r\ncontract Ownable {\r\n    \r\n    address ownerCEO;\r\n    address ownerMoney;  \r\n    address privAddress = 0x23a9C3452F3f8FF71c7729624f4beCEd4A24fa55; \r\n    address public addressTokenBunny = 0x2Ed020b084F7a58Ce7AC5d86496dC4ef48413a24;\r\n    \r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public { \r\n        ownerCEO = msg.sender; \r\n        ownerMoney = msg.sender;\r\n    }\r\n \r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerCEO);\r\n        _;\r\n    }\r\n   \r\n    function transferOwnership(address add) public onlyOwner {\r\n        if (add != address(0)) {\r\n            ownerCEO = add;\r\n        }\r\n    }\r\n \r\n    function transferOwnerMoney(address _ownerMoney) public  onlyOwner {\r\n        if (_ownerMoney != address(0)) {\r\n            ownerMoney = _ownerMoney;\r\n        }\r\n    }\r\n \r\n    function getOwnerMoney() public view onlyOwner returns(address) {\r\n        return ownerMoney;\r\n    } \r\n    /**\r\n    *  @dev private contract\r\n     */\r\n    function getPrivAddress() public view onlyOwner returns(address) {\r\n        return privAddress;\r\n    }\r\n\r\n} \r\n\r\n\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) public whitelist;\r\n\r\n    mapping(uint  => address)   whitelistCheck;\r\n    uint public countAddress = 0;\r\n\r\n    event WhitelistedAddressAdded(address addr);\r\n    event WhitelistedAddressRemoved(address addr);\r\n \r\n    modifier onlyWhitelisted() {\r\n        require(whitelist[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n            whitelist[msg.sender] = true;  \r\n    }\r\n\r\n    function addAddressToWhitelist(address addr) onlyWhitelisted public returns(bool success) {\r\n        if (!whitelist[addr]) {\r\n            whitelist[addr] = true;\r\n\r\n            countAddress = countAddress + 1;\r\n            whitelistCheck[countAddress] = addr;\r\n\r\n            emit WhitelistedAddressAdded(addr);\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    function getWhitelistCheck(uint key) onlyWhitelisted view public returns(address) {\r\n        return whitelistCheck[key];\r\n    }\r\n\r\n\r\n    function getInWhitelist(address addr) public view returns(bool) {\r\n        return whitelist[addr];\r\n    }\r\n    function getOwnerCEO() public onlyWhitelisted view returns(address) {\r\n        return ownerCEO;\r\n    }\r\n \r\n    function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            if (addAddressToWhitelist(addrs[i])) {\r\n                success = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\r\n        if (whitelist[addr]) {\r\n            whitelist[addr] = false;\r\n            emit WhitelistedAddressRemoved(addr);\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            if (removeAddressFromWhitelist(addrs[i])) {\r\n                success = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n  \r\n}\r\n contract ERC721 {\r\n    // Required methods \r\n\r\n    function ownerOf(uint32 _tokenId) public view returns (address owner);\r\n    function approve(address _to, uint32 _tokenId) public returns (bool success);\r\n    function transfer(address _to, uint32 _tokenId) public;\r\n    function transferFrom(address _from, address _to, uint32 _tokenId) public returns (bool);\r\n    function totalSupply() public view returns (uint total);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n }\r\n/// @title Interface new rabbits address\r\ncontract PrivateRabbitInterface {\r\n    function getNewRabbit(address from)  public view returns (uint);\r\n    function mixDNK(uint dnkmother, uint dnksire, uint genome)  public view returns (uint);\r\n    function isUIntPrivate() public pure returns (bool);\r\n}\r\n\r\ncontract TokenBunnyInterface { \r\n    \r\n    function isPromoPause() public view returns(bool);\r\n    function setTokenBunny(uint32 mother, uint32  sire, uint birthblock, uint birthCount, uint birthLastTime, uint genome, address _owner, uint DNK) external returns(uint32);\r\n    function publicSetTokenBunnyTest(uint32 mother, uint32  sire, uint birthblock, uint birthCount, uint birthLastTime, uint genome, address _owner, uint DNK) public; \r\n    function setMotherCount( uint32 _bunny, uint count) external;\r\n    function setRabbitSirePrice( uint32 _bunny, uint count) external;\r\n    function setAllowedChangeSex( uint32 _bunny, bool canBunny) public;\r\n    function setTotalSalaryBunny( uint32 _bunny, uint count) external;\r\n    function setRabbitMother(uint32 children, uint32[5] _m) external; \r\n    function setDNK( uint32 _bunny, uint dnk) external;\r\n    function setGiffBlock(uint32 _bunny, bool blocked) external;\r\n    function transferFrom(address _from, address _to, uint32 _tokenId) public returns(bool);\r\n    function setOwnerGennezise(address _to, bool canYou) external;\r\n    function setBirthCount(uint32 _bunny, uint birthCount) external;\r\n    function setBirthblock(uint32 _bunny, uint birthblock) external; \r\n    function setBirthLastTime(uint32 _bunny, uint birthLastTime) external;\r\n    // getters\r\n    function getOwnerGennezise(address _to) public view returns(bool);\r\n    function getAllowedChangeSex(uint32 _bunny) public view returns(bool);\r\n    function getRabbitSirePrice(uint32 _bunny) public view returns(uint);\r\n    function getTokenOwner(address owner) public view returns(uint total, uint32[] list); \r\n    function getMotherCount(uint32 _mother) public view returns(uint);\r\n    function getTotalSalaryBunny(uint32 _bunny) public view returns(uint);\r\n    function getRabbitMother( uint32 mother) public view returns(uint32[5]);\r\n    function getRabbitMotherSumm(uint32 mother) public view returns(uint count);\r\n    function getDNK(uint32 bunnyid) public view returns(uint);\r\n    function getSex(uint32 _bunny) public view returns(bool);\r\n    function isUIntPublic() public view returns(bool);\r\n    function balanceOf(address _owner) public view returns (uint);\r\n    function totalSupply() public view returns (uint total); \r\n    function ownerOf(uint32 _tokenId) public view returns (address owner);\r\n    function getBunnyInfo(uint32 _bunny) external view returns( uint32 mother, uint32 sire, uint birthblock, uint birthCount, uint birthLastTime, bool role, uint genome, bool interbreed, uint leftTime, uint lastTime, uint price, uint motherSumm);\r\n    function getTokenBunny(uint32 _bunny) public view returns(uint32 mother, uint32 sire, uint birthblock, uint birthCount, uint birthLastTime, uint genome);\r\n    function getGiffBlock(uint32 _bunny) public view returns(bool);\r\n    function getGenome(uint32 _bunny) public view returns( uint);\r\n    function getParent(uint32 _bunny) public view returns(uint32 mother, uint32 sire);\r\n    function getBirthLastTime(uint32 _bunny) public view returns(uint);\r\n    function getBirthCount(uint32 _bunny) public view returns(uint);\r\n    function getBirthblock(uint32 _bunny) public view returns(uint);\r\n        \r\n}\r\n\r\ncontract BaseRabbit  is Whitelist, ERC721 {\r\n    event EmotherCount(uint32 mother, uint summ); \r\n    event ChengeSex(uint32 bunnyId, bool sex, uint256 price);\r\n    event SalaryBunny(uint32 bunnyId, uint cost); \r\n    event CoolduwnMother(uint32 bunnyId, uint num);\r\n    event Referral(address from, uint32 matronID, uint32 childID, uint currentTime);\r\n    event Approval(address owner, address approved, uint32 tokenId);\r\n    event OwnerBunnies(address owner, uint32  tokenId);\r\n    event Transfer(address from, address to, uint32 tokenId);\r\n    event CreateChildren(uint32 matron, uint32 sire, uint32 child);\r\n    TokenBunnyInterface TokenBunny;\r\n    PrivateRabbitInterface privateContract; \r\n\r\n    /**\r\n    * @dev setting up a new address for a private contract\r\n    */\r\n    function setToken(address _addressTokenBunny ) public returns(bool) {\r\n        addressTokenBunny = _addressTokenBunny;\r\n        TokenBunny = TokenBunnyInterface(_addressTokenBunny);\r\n    } \r\n    /**\r\n    * @dev setting up a new address for a private contract\r\n    */\r\n    function setPriv(address _privAddress) public returns(bool) {\r\n        privAddress = _privAddress;\r\n        privateContract = PrivateRabbitInterface(_privAddress);\r\n    } \r\n    function isPriv() public view returns(bool) {\r\n        return privateContract.isUIntPrivate();\r\n    }\r\n    modifier checkPrivate() {\r\n        require(isPriv());\r\n        _;\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n    bool pauseSave = false;\r\n    uint256 bigPrice = 0.003 ether;\r\n    uint public commission_system = 5;\r\n    uint public totalGen0 = 0;\r\n    uint public promoGen0 = 15000; \r\n    bool public promoPause = false;\r\n\r\n    function setPromoGen0(uint _promoGen0) public onlyWhitelisted() {\r\n        promoGen0 = _promoGen0;\r\n    }\r\n    function setPromoPause() public onlyWhitelisted() {\r\n        promoPause = !promoPause;\r\n    }\r\n    function setBigPrice(uint _bigPrice) public onlyWhitelisted() {\r\n        bigPrice = _bigPrice;\r\n    }\r\n    uint32[12] public cooldowns = [\r\n        uint32(1 minutes),\r\n        uint32(2 minutes),\r\n        uint32(4 minutes),\r\n        uint32(8 minutes),\r\n        uint32(16 minutes),\r\n        uint32(32 minutes),\r\n        uint32(1 hours),\r\n        uint32(2 hours),\r\n        uint32(4 hours),\r\n        uint32(8 hours),\r\n        uint32(16 hours),\r\n        uint32(1 days)\r\n    ];\r\n    struct Rabbit { \r\n        uint32 mother;\r\n        uint32 sire; \r\n        uint birthblock;\r\n        uint birthCount;\r\n        uint birthLastTime;\r\n        uint genome; \r\n    }\r\n}\r\n\r\ncontract BodyRabbit is BaseRabbit {\r\n    uint public totalBunny = 0;\r\n    string public constant name = \"CryptoRabbits\";\r\n    string public constant symbol = \"CRB\";\r\n\r\n    constructor() public { \r\n        setPriv(privAddress); \r\n        setToken(addressTokenBunny ); \r\n    }\r\n    function ownerOf(uint32 _tokenId) public view returns (address owner) {\r\n        return TokenBunny.ownerOf(_tokenId);\r\n    }\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return TokenBunny.balanceOf(_owner);\r\n    }\r\n    function transfer(address _to, uint32 _tokenId) public {\r\n     _to;_tokenId;\r\n    }\r\n  function approve(address _to, uint32 _tokenId) public returns (bool success) {\r\n     _to;_tokenId;\r\n      return false;\r\n  }\r\n  \r\n \r\n    function getSirePrice(uint32 _tokenId) public view returns(uint) {\r\n        if(TokenBunny.getRabbitSirePrice(_tokenId) != 0){\r\n            uint procent = (TokenBunny.getRabbitSirePrice(_tokenId) / 100);\r\n            uint res = procent.mul(25);\r\n            uint system  = procent.mul(commission_system);\r\n            res = res.add( TokenBunny.getRabbitSirePrice(_tokenId));\r\n            return res.add(system); \r\n        } else {\r\n            return 0;\r\n        }\r\n\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint32 _tokenId) public onlyWhitelisted() returns(bool) {\r\n        if(TokenBunny.transferFrom(_from, _to, _tokenId)){ \r\n            emit Transfer(_from, _to, _tokenId);\r\n            return true;\r\n        }\r\n        return false;\r\n    }  \r\n\r\n    function isPauseSave() public view returns(bool) {\r\n        return !pauseSave;\r\n    }\r\n    \r\n    function isPromoPause() public view returns(bool) {\r\n        if (getInWhitelist(msg.sender)) {\r\n            return true;\r\n        } else {\r\n            return !promoPause;\r\n        } \r\n    }\r\n\r\n    function setPauseSave() public onlyWhitelisted()  returns(bool) {\r\n        return pauseSave = !pauseSave;\r\n    }\r\n \r\n\r\n    function getTokenOwner(address owner) public view returns(uint total, uint32[] list) {\r\n        (total, list) = TokenBunny.getTokenOwner(owner);\r\n    } \r\n\r\n\r\n    function setRabbitMother(uint32 children, uint32 mother) internal { \r\n        require(children != mother);\r\n        uint32[11] memory pullMother;\r\n        uint32[5] memory rabbitMother = TokenBunny.getRabbitMother(mother);\r\n        uint32[5] memory arrayChildren;\r\n        uint start = 0;\r\n        for (uint i = 0; i < 5; i++) {\r\n            if (rabbitMother[i] != 0) {\r\n              pullMother[start] = uint32(rabbitMother[i]);\r\n              start++;\r\n            } \r\n        }\r\n        pullMother[start] = mother;\r\n        start++;\r\n        for (uint m = 0; m < 5; m++) {\r\n             if(start >  5){\r\n                    arrayChildren[m] = pullMother[(m+1)];\r\n             }else{\r\n                    arrayChildren[m] = pullMother[m];\r\n             }\r\n        }\r\n        TokenBunny.setRabbitMother(children, arrayChildren);\r\n        uint c = TokenBunny.getMotherCount(mother);\r\n        TokenBunny.setMotherCount( mother, c.add(1));\r\n    }\r\n\r\n    // function uintToBytes(uint v) internal pure returns (bytes32 ret) {\r\n    //     if (v == 0) {\r\n    //         ret = '0';\r\n    //     } else {\r\n    //     while (v > 0) {\r\n    //             ret = bytes32(uint(ret) / (2 ** 8));\r\n    //             ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31));\r\n    //             v /= 10;\r\n    //         }\r\n    //     }\r\n    //     return ret;\r\n    // }\r\n\r\n    function sendMoney(address _to, uint256 _money) internal { \r\n        _to.transfer((_money/100)*95);\r\n        ownerMoney.transfer((_money/100)*5); \r\n    }\r\n\r\n    function getOwnerGennezise(address _to) public view returns(bool) { \r\n        return TokenBunny.getOwnerGennezise(_to);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint total){ \r\n        return TokenBunny.totalSupply();\r\n    }\r\n    \r\n    function getBreed(uint32 _bunny) public view returns(bool interbreed)\r\n        {\r\n            uint birtTime = 0;\r\n            uint birthCount = 0;\r\n            (, , , birthCount, birtTime, ) = TokenBunny.getTokenBunny(_bunny);\r\n\r\n            uint  lastTime = uint(cooldowns[birthCount]);\r\n            lastTime = lastTime.add(birtTime);\r\n \r\n            if(lastTime <= now && TokenBunny.getSex(_bunny) == false) {\r\n                interbreed = true;\r\n            }\r\n    }\r\n    function getcoolduwn(uint32 _mother) public view returns(uint lastTime, uint cd, uint lefttime) {\r\n        uint birthLastTime;\r\n         (, , , cd, birthLastTime, ) = TokenBunny.getTokenBunny(_mother);\r\n\r\n        if(cd > 11) {\r\n            cd = 11;\r\n        }\r\n        lastTime = (cooldowns[cd] + birthLastTime);\r\n        if(lastTime > now) {\r\n            // I can not give birth, it remains until delivery\r\n            lefttime = lastTime.sub(now);\r\n        }\r\n    }\r\n     function getMotherCount(uint32 _mother) public view returns(uint) { //internal\r\n        return TokenBunny.getMotherCount(_mother);\r\n    }\r\n     function getTotalSalaryBunny(uint32 _bunny) public view returns(uint) { //internal\r\n        return TokenBunny.getTotalSalaryBunny(_bunny);\r\n    }\r\n    function getRabbitMother( uint32 mother) public view returns(uint32[5]) {\r\n        return TokenBunny.getRabbitMother(mother);\r\n    }\r\n     function getRabbitMotherSumm(uint32 mother) public view returns(uint count) { //internal\r\n        uint32[5] memory rabbitMother = TokenBunny.getRabbitMother(mother);\r\n        for (uint m = 0; m < 5 ; m++) {\r\n            if(rabbitMother[m] != 0 ) { \r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    function getRabbitDNK(uint32 bunnyid) public view returns(uint) { \r\n        return TokenBunny.getDNK(bunnyid);\r\n    }\r\n    function isUIntPublic() public view returns(bool) {\r\n        require(isPauseSave());\r\n        return true;\r\n    }\r\n}\r\ncontract BunnyGame is BodyRabbit { \r\n\r\n    function createGennezise(uint32 _matron) public {\r\n        bool promo = false;\r\n        require(isPriv());\r\n        require(isPauseSave());\r\n        require(isPromoPause());\r\n        if (totalGen0 > promoGen0) { \r\n            require(getInWhitelist(msg.sender));\r\n        } else if (!(getInWhitelist(msg.sender))) {\r\n            // promo action\r\n                require(!TokenBunny.getOwnerGennezise(msg.sender));\r\n                TokenBunny.setOwnerGennezise(msg.sender, true);\r\n                promo = true;\r\n        }\r\n        uint  localdnk = privateContract.getNewRabbit(msg.sender);\r\n        uint32 _bunnyid = TokenBunny.setTokenBunny(0, 0, block.number, 0, 0, 0, msg.sender, localdnk);\r\n        \r\n        totalGen0++; \r\n        setRabbitMother(_bunnyid, _matron);\r\n\r\n        if(_matron != 0){  \r\n            emit Referral(msg.sender, _matron, _bunnyid, block.timestamp);\r\n        }\r\n        \r\n        if (promo) { \r\n            TokenBunny.setGiffBlock(_bunnyid, true);\r\n        }\r\n        emit Transfer(this, msg.sender, _bunnyid);\r\n    }\r\n    function getGenomeChildren(uint32 _matron, uint32 _sire) internal view returns(uint) {\r\n        uint genome;\r\n        if (TokenBunny.getGenome(_matron) >= TokenBunny.getGenome(_sire)) {\r\n            genome = TokenBunny.getGenome(_matron);\r\n        } else {\r\n            genome = TokenBunny.getGenome(_sire);\r\n        }\r\n        return genome.add(1);\r\n    }\r\n    function createChildren(uint32 _matron, uint32 _sire) public  payable returns(uint32) {\r\n\r\n        require(isPriv());\r\n        require(isPauseSave());\r\n        require(TokenBunny.ownerOf(_matron) == msg.sender);\r\n        require(TokenBunny.getSex(_sire) == true);\r\n        require(_matron != _sire);\r\n        require(getBreed(_matron));\r\n        require(msg.value >= getSirePrice(_sire));\r\n        uint genome = getGenomeChildren(_matron, _sire);\r\n        uint localdnk =  privateContract.mixDNK(TokenBunny.getDNK(_matron), TokenBunny.getDNK(_sire), genome);\r\n \r\n        uint32 bunnyid = TokenBunny.setTokenBunny(_matron, _sire, block.number, 0, 0, genome, msg.sender, localdnk);\r\n        uint _moneyMother = TokenBunny.getRabbitSirePrice(_sire).div(4);\r\n        _transferMoneyMother(_matron, _moneyMother);\r\n\r\n        TokenBunny.ownerOf(_sire).transfer( TokenBunny.getRabbitSirePrice(_sire) );\r\n \r\n        uint system = TokenBunny.getRabbitSirePrice(_sire).div(100);\r\n\r\n        system = system.mul(commission_system);\r\n        ownerMoney.transfer(system);\r\n        coolduwnUP(_matron); \r\n        setRabbitMother(bunnyid, _matron);\r\n        emit Transfer(this, msg.sender, bunnyid);\r\n        return bunnyid;\r\n    } \r\n    function coolduwnUP(uint32 _mother) internal { \r\n        require(isPauseSave());\r\n        uint coolduwn = TokenBunny.getBirthCount(_mother).add(1);\r\n        TokenBunny.setBirthCount(_mother, coolduwn);\r\n        TokenBunny.setBirthLastTime(_mother, now);\r\n        emit CoolduwnMother(_mother, TokenBunny.getBirthCount(_mother));\r\n    }\r\n    function _transferMoneyMother(uint32 _mother, uint _valueMoney) internal {\r\n        require(isPauseSave());\r\n        require(_valueMoney > 0);\r\n        if (getRabbitMotherSumm(_mother) > 0) {\r\n            uint pastMoney = _valueMoney/getRabbitMotherSumm(_mother);\r\n            \r\n            for (uint i=0; i < getRabbitMotherSumm(_mother); i++) {\r\n\r\n                if ( TokenBunny.getRabbitMother(_mother)[i] != 0) { \r\n                    uint32 _parrentMother = TokenBunny.getRabbitMother(_mother)[i];\r\n                    address add = TokenBunny.ownerOf(_parrentMother);\r\n                    TokenBunny.setMotherCount(_parrentMother, TokenBunny.getMotherCount(_parrentMother).add(1));\r\n                    TokenBunny.setTotalSalaryBunny( _parrentMother, TokenBunny.getTotalSalaryBunny(_parrentMother).add(pastMoney));\r\n                    emit SalaryBunny(_parrentMother, TokenBunny.getTotalSalaryBunny(_parrentMother));\r\n                    add.transfer(pastMoney); // refund previous bidder\r\n                }\r\n            } \r\n        }\r\n    }\r\n    /*\r\n    function setRabbitSirePrice(uint32 _rabbitid, uint price) public {\r\n        require(isPauseSave());\r\n        require(TokenBunny.ownerOf(_rabbitid) == msg.sender);\r\n        require(price > bigPrice);\r\n        require(TokenBunny.getAllowedChangeSex(_rabbitid));\r\n        require(TokenBunny.getRabbitSirePrice(_rabbitid) != price);\r\n        uint lastTime;\r\n        (lastTime,,) = getcoolduwn(_rabbitid);\r\n        require(now >= lastTime);\r\n        TokenBunny.setRabbitSirePrice(_rabbitid, price);\r\n        emit ChengeSex(_rabbitid, true, getSirePrice(_rabbitid));\r\n\r\n    }\r\n    function setSireStop(uint32 _rabbitid) public returns(bool) {\r\n        require(isPauseSave());\r\n        require(TokenBunny.getRabbitSirePrice(_rabbitid) !=0);\r\n\r\n        require(TokenBunny.ownerOf(_rabbitid) == msg.sender);\r\n     //   require(rabbits[(_rabbitid-1)].role == 0);\r\n        TokenBunny.setRabbitSirePrice( _rabbitid, 0);\r\n     //   deleteSire(_rabbitid);\r\n        emit ChengeSex(_rabbitid, false, 0);\r\n        return true;\r\n    }*/\r\n    function getMoney(uint _value) public onlyOwner {\r\n        require(address(this).balance >= _value);\r\n        ownerMoney.transfer(_value);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getPrivAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_mother\",\"type\":\"uint32\"}],\"name\":\"getcoolduwn\",\"outputs\":[{\"name\":\"lastTime\",\"type\":\"uint256\"},{\"name\":\"cd\",\"type\":\"uint256\"},{\"name\":\"lefttime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoPause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressTokenBunny\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_promoGen0\",\"type\":\"uint256\"}],\"name\":\"setPromoGen0\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_mother\",\"type\":\"uint32\"}],\"name\":\"getMotherCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"mother\",\"type\":\"uint32\"}],\"name\":\"getRabbitMotherSumm\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getTotalSalaryBunny\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPauseSave\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunny\",\"type\":\"uint32\"}],\"name\":\"getBreed\",\"outputs\":[{\"name\":\"interbreed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"getSirePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_privAddress\",\"type\":\"address\"}],\"name\":\"setPriv\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bunnyid\",\"type\":\"uint32\"}],\"name\":\"getRabbitDNK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPromoPause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressTokenBunny\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bigPrice\",\"type\":\"uint256\"}],\"name\":\"setBigPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoGen0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isUIntPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalGen0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPauseSave\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPriv\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getOwnerGennezise\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBunny\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"getWhitelistCheck\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cooldowns\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matron\",\"type\":\"uint32\"},{\"name\":\"_sire\",\"type\":\"uint32\"}],\"name\":\"createChildren\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint32\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerCEO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getTokenOwner\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"list\",\"type\":\"uint32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"mother\",\"type\":\"uint32\"}],\"name\":\"getRabbitMother\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"add\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commission_system\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPromoPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matron\",\"type\":\"uint32\"}],\"name\":\"createGennezise\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerMoney\",\"type\":\"address\"}],\"name\":\"transferOwnerMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"mother\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"summ\",\"type\":\"uint256\"}],\"name\":\"EmotherCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"sex\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ChengeSex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"SalaryBunny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"CoolduwnMother\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matronID\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"childID\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"OwnerBunnies\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint32\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"matron\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"sire\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"child\",\"type\":\"uint32\"}],\"name\":\"CreateChildren\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"}]","ContractName":"BunnyGame","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f093abe8d3d0dd16866e33e149c0aff623f9a20f5da5d6552fdab10b7b805a5a"}]}