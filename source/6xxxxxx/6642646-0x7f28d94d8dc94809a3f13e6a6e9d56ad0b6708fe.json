{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title NATEE WARRANT 01 ERC20 token\r\n *\r\n * @dev NATEE WARRANT 01 use for airdrop bonus and other for NATEE Token\r\n * User can transfer to NATEE Token by pay at FIX RATE \r\n * if user hold NATEE WARRANT until expride FEE to change will reduce to 0 \r\n */\r\n\r\nlibrary SafeMath256 {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if(a==0 || b==0)\r\n        return 0;  \r\n    uint256 c = a * b;\r\n    require(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b>0);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n   require( b<= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n  \r\n}\r\n\r\n\r\n// Only Owner modifier it support a lot owner but finally should have 1 owner\r\ncontract Ownable {\r\n\r\n  mapping (address=>bool) owners;\r\n  address owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  event AddOwner(address newOwner);\r\n  event RemoveOwner(address owner);\r\n  /**\r\n   * @dev Ownable constructor ตั้งค่าบัญชีของ sender ให้เป็น `owner` ดั้งเดิมของ contract \r\n   *\r\n   */\r\n   constructor() public {\r\n    owner = msg.sender;\r\n    owners[msg.sender] = true;\r\n  }\r\n\r\n  function isContract(address _addr) internal view returns(bool){\r\n     uint256 length;\r\n     assembly{\r\n      length := extcodesize(_addr)\r\n     }\r\n     if(length > 0){\r\n       return true;\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n // For Single Owner\r\n  modifier onlyOwner(){\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner{\r\n    require(isContract(newOwner) == false);\r\n    emit OwnershipTransferred(owner,newOwner);\r\n    owner = newOwner;\r\n\r\n  }\r\n\r\n  //For multiple Owner\r\n  modifier onlyOwners(){\r\n    require(owners[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  function addOwner(address newOwner) public onlyOwners{\r\n    require(owners[newOwner] == false);\r\n    require(newOwner != msg.sender);\r\n\r\n    owners[newOwner] = true;\r\n    emit AddOwner(newOwner);\r\n  }\r\n\r\n  function removeOwner(address _owner) public onlyOwners{\r\n    require(_owner != msg.sender);  // can't remove your self\r\n    owners[_owner] = false;\r\n    emit RemoveOwner(_owner);\r\n  }\r\n\r\n  function isOwner(address _owner) public view returns(bool){\r\n    return owners[_owner];\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n\t     event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n       event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n\r\n   \t   function totalSupply() public view returns (uint256);\r\n       function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n       function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\r\n\r\n       function transfer(address to, uint256 tokens) public returns (bool success);\r\n       \r\n       function approve(address spender, uint256 tokens) public returns (bool success);\r\n       function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\r\n  \r\n\r\n}\r\n\r\n\r\ncontract StandardERC20 is ERC20{\r\n  using SafeMath256 for uint256;  \r\n     \r\n     mapping (address => uint256) balance;\r\n     mapping (address => mapping (address=>uint256)) allowed;\r\n\r\n\r\n     uint256  totalSupply_;  \r\n     \r\n      event Transfer(address indexed from,address indexed to,uint256 value);\r\n      event Approval(address indexed owner,address indexed spender,uint256 value);\r\n\r\n\r\n    function totalSupply() public view returns (uint256){\r\n      return totalSupply_;\r\n    }\r\n\r\n     function balanceOf(address _walletAddress) public view returns (uint256){\r\n        return balance[_walletAddress];\r\n     }\r\n\r\n\r\n     function allowance(address _owner, address _spender) public view returns (uint256){\r\n          return allowed[_owner][_spender];\r\n        }\r\n\r\n     function transfer(address _to, uint256 _value) public returns (bool){\r\n        require(_value <= balance[msg.sender]);\r\n        require(_to != address(0));\r\n\r\n        balance[msg.sender] = balance[msg.sender].sub(_value);\r\n        balance[_to] = balance[_to].add(_value);\r\n        emit Transfer(msg.sender,_to,_value);\r\n        \r\n        return true;\r\n\r\n     }\r\n\r\n     function approve(address _spender, uint256 _value)\r\n            public returns (bool){\r\n            allowed[msg.sender][_spender] = _value;\r\n\r\n            emit Approval(msg.sender, _spender, _value);\r\n            return true;\r\n            }\r\n\r\n      function transferFrom(address _from, address _to, uint256 _value)\r\n            public returns (bool){\r\n               require(_value <= balance[_from]);\r\n               require(_value <= allowed[_from][msg.sender]); \r\n               require(_to != address(0));\r\n\r\n              balance[_from] = balance[_from].sub(_value);\r\n              balance[_to] = balance[_to].add(_value);\r\n              allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n              emit Transfer(_from, _to, _value);\r\n              return true;\r\n      }\r\n\r\n\r\n     \r\n}\r\n\r\n\r\ncontract SGDSInterface{\r\n  function balanceOf(address tokenOwner) public view returns (uint256 balance);\r\n  function intTransfer(address _from, address _to, uint256 _value) external;\r\n  function transferWallet(address _from,address _to) external;\r\n  function getCanControl(address _addr) external view returns(bool); // if true mean user can control by him. false mean Company can control\r\n  function useSGDS(address useAddr,uint256 value) external returns(bool);\r\n}\r\n\r\ncontract NATEE_WARRANT is StandardERC20, Ownable {\r\n  using SafeMath256 for uint256;\r\n  string public name = \"NATEE WARRANT\";\r\n  string public symbol = \"NATEE-W1\"; // Real Name NATEE\r\n  uint256 public decimals = 18;\r\n  uint256 public INITIAL_SUPPLY = 20000000 ether;\r\n  uint256 public totalUndist;  // How many warrant that not distributed\r\n  uint256 public totalRedeem;\r\n  address public NATEE_CONTRACT = address(0);\r\n  uint256 public transFee = 100;\r\n  uint32  public expireDate;\r\n\r\n  SGDSInterface public sgds;\r\n\r\n  event RedeemWarrant(address indexed addr,uint256 _value);\r\n  event SetControlToken(address indexed addr, bool outControl);\r\n  event FeeTransfer(address indexed addr,uint256 _value);\r\n  event TransferWallet(address indexed from,address indexed to,address indexed execute_);\r\n\r\n  mapping(address => bool) userControl;   \r\n\r\n  constructor() public {\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n    totalUndist = INITIAL_SUPPLY;\r\n    expireDate = uint32(now + 1825 days);  // Start 5 Year Expire First\r\n\r\n    sgds = SGDSInterface(0xf7EfaF88B380469084f3018271A49fF743899C89);\r\n  }\r\n\r\n\r\n  function setExpireDate(uint32 newDate) external onlyOwners{\r\n    if(newDate < expireDate && newDate > uint32(now))\r\n    {\r\n        expireDate = newDate;\r\n    }\r\n  }\r\n  function sendWarrant(address _to,uint256 _value) external onlyOwners {\r\n    require(_value <= totalUndist);\r\n    balance[_to] += _value;\r\n    totalUndist -= _value;\r\n\r\n    emit Transfer(address(this),_to,_value);\r\n  }\r\n\r\n// This for use seitee transfer . Seitee will pay for gas\r\n  function intTransfer(address _from, address _to, uint256 _value) external onlyOwners{\r\n    require(userControl[_from] == false);  // Company can do if they still allow compay to do it\r\n    require(balance[_from] >= _value);\r\n    //require(_to != address(0)); // internal Call then can remove this\r\n        \r\n    balance[_from] -= _value; \r\n    balance[_to] += _value;\r\n    \r\n    emit Transfer(_from,_to,_value);\r\n        \r\n  }\r\n\r\n  // THIS IS SOS FUNCTION \r\n  // For transfer all Warrant Token to new Wallet Address. Want to pay 1 SGDS for fee.\r\n  \r\n  function transferWallet(address _from,address _to) external onlyOwners{\r\n    require(userControl[_from] == false); \r\n    require(sgds.getCanControl(_from) == false);\r\n    require(sgds.balanceOf(_from) >= transFee);\r\n\r\n    uint256  value = balance[_from];\r\n\r\n    balance[_from] = balance[_from].sub(value);\r\n    balance[_to] = balance[_to].add(value); // sub with FEE\r\n\r\n    sgds.useSGDS(_from,transFee);\r\n\r\n    emit TransferWallet(_from,_to,msg.sender);\r\n    emit Transfer(_from,_to,value);\r\n  }\r\n\r\n// This function will call direct from Natee Contract To deduct Warrant\r\n  function redeemWarrant(address _from, uint256 _value) external {\r\n    require(msg.sender == NATEE_CONTRACT);\r\n    require(balance[_from] >= _value);\r\n\r\n    balance[_from] = balance[_from].sub(_value);\r\n    totalSupply_ -= _value;\r\n    totalRedeem += _value;\r\n\r\n    emit Transfer(_from,address(0),_value);\r\n    emit RedeemWarrant(_from,_value);\r\n  }\r\n\r\n// Address Owner can set permision by him self. Set to true will stop company control his/her wallet\r\n  function setUserControl(bool _control) public {\r\n    userControl[msg.sender] = _control;\r\n    emit SetControlToken(msg.sender,_control);\r\n  }\r\n\r\n  function getUserControl(address _addr) external view returns(bool){\r\n    return userControl[_addr];\r\n  }\r\n\r\n// This function can set 1 time to make sure no one can cheat \r\n  function setNateeContract(address addr) onlyOwners external{\r\n    require(NATEE_CONTRACT == address(0));\r\n    NATEE_CONTRACT = addr; \r\n  }\r\n\r\n  function setTransFee(uint256 _fee) onlyOwners public{\r\n    transFee = _fee;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRedeem\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NATEE_CONTRACT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getUserControl\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDate\",\"type\":\"uint32\"}],\"name\":\"setExpireDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setNateeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_control\",\"type\":\"bool\"}],\"name\":\"setUserControl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendWarrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"redeemWarrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUndist\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expireDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"intTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sgds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTransFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"RedeemWarrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"outControl\",\"type\":\"bool\"}],\"name\":\"SetControlToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"FeeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"execute_\",\"type\":\"address\"}],\"name\":\"TransferWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemoveOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"NATEE_WARRANT","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://41cd80c527512404d3e772df403e8a64c03ef92cb9ffae31f314272ec75cd452"}]}