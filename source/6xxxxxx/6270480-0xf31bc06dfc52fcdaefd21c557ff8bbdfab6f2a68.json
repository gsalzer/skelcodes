{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n  // mitigate short address attack\r\n  // thanks to https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34.\r\n  // TODO: doublecheck implication of >= compared to ==\r\n  modifier onlyPayloadSize(uint numWords) {\r\n     assert(msg.data.length >= numWords * 32 + 4);\r\n     _;\r\n  }\r\n}\r\ncontract Token { // ERC20 standard\r\n    function balanceOf(address _owner) public  view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public  returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\r\n    function approve(address _spender, uint256 _value)  returns (bool success);\r\n    function allowance(address _owner, address _spender) public  view returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\ncontract StandardToken is Token, SafeMath {\r\n    uint256 public totalSupply;\r\n    \r\n    function transfer(address _to, uint256 _value) public  onlyPayloadSize(2) returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[msg.sender] >= _value && _value > 0);\r\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) returns (bool success) {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\r\n        balances[_from] = safeSub(balances[_from], _value);\r\n        balances[_to] = safeAdd(balances[_to], _value);\r\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    function balanceOf(address _owner) view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    // To change the approve amount you first have to reduce the addresses'\r\n    //  allowance to zero by calling 'approve(_spender, 0)' if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    function approve(address _spender, uint256 _value) onlyPayloadSize(2) returns (bool success) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) onlyPayloadSize(3) returns (bool success) {\r\n        require(allowed[msg.sender][_spender] == _oldValue);\r\n        allowed[msg.sender][_spender] = _newValue;\r\n        Approval(msg.sender, _spender, _newValue);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address _spender) public  view returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    mapping (address => uint256) public  balances;\r\n    mapping (address => mapping (address => uint256)) public  allowed;\r\n}\r\ncontract Ownership is StandardToken {\r\n\taddress public fundWallet;\r\n    address public controlWallet;\r\n\t\r\n\tmodifier onlyFundWallet {\r\n        require(msg.sender == fundWallet);\r\n        _;\r\n    }\r\n    modifier onlyManagingWallets {\r\n        require(msg.sender == controlWallet || msg.sender == fundWallet);\r\n        _;\r\n    }\r\n    modifier only_if_controlWallet {\r\n        if (msg.sender == controlWallet) _;\r\n    }\r\n\r\n\tfunction changeFundWallet(address newFundWallet) external onlyFundWallet {\r\n        require(newFundWallet != address(0));\r\n        fundWallet = newFundWallet;\r\n    }\r\n    function changeControlWallet(address newControlWallet) external onlyFundWallet {\r\n        require(newControlWallet != address(0));\r\n        controlWallet = newControlWallet;\r\n    }\r\n\t\r\n\t}\r\ncontract WhiteBlockList is Ownership {\t\r\n    // maps addresses\r\n    mapping (address => bool) public whitelist;\r\n\tmapping (address => bool) public blocklist;\r\n\t\r\n\tevent Whitelist(address indexed participant);\r\n\tevent BlockList(address indexed participant, bool blocked);\r\n\t\r\n\tmodifier onlyIfAllowed {\r\n        require(whitelist[msg.sender]);\r\n\t\trequire(!blocklist[msg.sender]);\r\n        _;\r\n    }\r\n\t\r\n\tfunction verifyParticipant(address participant) external onlyManagingWallets {\r\n        whitelist[participant] = true;\r\n\t\tblocklist[participant] = false;\r\n        Whitelist(participant);\r\n    }\r\n\tfunction addBlockList(address participant) external onlyManagingWallets {\r\n        blocklist[participant] = true;\r\n        BlockList(participant,  blocklist[participant]);\r\n    }\r\n\tfunction removeBlockList(address participant) external onlyManagingWallets {\r\n        blocklist[participant] = false;\r\n        BlockList(participant,  blocklist[participant]);\r\n    }\r\n\tfunction destroyBlockFunds(address participant) external onlyManagingWallets {\r\n\t\trequire(blocklist[participant] = true);\r\n\t\trequire(balances[participant]>0);\t  \r\n\t\ttotalSupply = safeSub(totalSupply, balances[participant]);\t\t\r\n\t\tbalances[participant] = 0;\t\t\r\n    }\r\n}\r\ncontract FXTOKEN is WhiteBlockList {\r\n    // FIELDS\r\n    string public name = \"FXTOKEN\";\r\n    string public symbol = \"1EUR\";\r\n    uint256 public decimals = 8;\r\n\tstring public version = \"1.0\";\r\n    bool public halted = true;\r\n\tbool public haltedFX  = true;\r\n    bool public tradeable = false;\r\n    uint256 public previousUpdateTime = 0;\r\n    Price public currentPrice;\r\n    uint256 public minAmount = 1 ether;\r\n    uint256 public fxFee  = 50;\r\n\tuint256 public ethFee  = 0;\r\n\r\n    // TYPES\r\n    struct Price { // tokensPerEth\r\n        uint256 numerator;\r\n        uint256 denominator;\r\n    }\r\n    // EVENTS\r\n    event RequestBuywithETH(address indexed participant,uint256 amountTokens);\r\n\tevent RequestBuywithFX(address indexed participant, uint256 amountTokens);\r\n    event SendTokensAfterBuy (address indexed participant, uint256 amountTokens);\r\n    event PriceUpdate(uint256 numerator, uint256 denominator);\r\n    event RequestSellforETH(address indexed participant, uint256 amountTokens, uint256 etherAmount);\r\n\tevent RequestSellforFX(address indexed participant, uint256 amountTokens, uint256 fxValue);\r\n\tevent Burn(uint256 amountTokens);\r\n\r\n    // MODIFIERS\r\n    modifier isTradeable { // exempt  fundWallet\r\n        require(tradeable || msg.sender == fundWallet);\r\n        _;\r\n    }\r\n    // CONSTRUCTOR\r\n\tfunction FXTOKEN(address controlWalletInput, uint256 priceNumeratorInput) public  {\r\n        require(controlWalletInput != address(0));\r\n        require(priceNumeratorInput > 0);\r\n        fundWallet = msg.sender;\r\n        controlWallet = controlWalletInput;\r\n        whitelist[fundWallet] = true;\r\n        whitelist[controlWallet] = true;\r\n        currentPrice = Price(priceNumeratorInput, 10000); // 1 token = 1 usd at start\r\n        previousUpdateTime = now;\r\n    }\t\t\t\r\n    // METHODS\t\r\n    function require_limited_change (uint256 newDenominator)\r\n        private\r\n        only_if_controlWallet\r\n    {\r\n        \r\n\t\tif (newDenominator> currentPrice.denominator){\r\n\t\t\t// controlWallet can only increase denominator by max 20%\r\n\t\t\trequire(safeSub(safeMul(newDenominator, 100) / currentPrice.denominator, 100) <= 20);\r\n\t\t} else {\r\n\t\t\t// controlWallet can only decrease denominator by max 20%\r\n\t\t\trequire(safeMul(newDenominator, 100)/ currentPrice.denominator >= 80);\t\t\r\n\t\t}     \t\t\r\n    }\r\n    function updatePriceAndDenominator(uint256 newNumerator, uint256 newDenominator) external onlyManagingWallets {\r\n\t\t\trequire(newDenominator > 0);\r\n\t\t\trequire(newNumerator > 0);\r\n\t\t\trequire_limited_change(newDenominator);\r\n\t\t\tcurrentPrice.denominator = newDenominator;\r\n\t\t\tcurrentPrice.numerator = newNumerator;\r\n\t\t\tpreviousUpdateTime = now;\r\n\t\t\tPriceUpdate(currentPrice.numerator, newDenominator);\r\n\t\t}\r\n\tfunction allocateTokens(address participant, uint256 amountTokens) private {\r\n        totalSupply = safeAdd(totalSupply, amountTokens);\r\n        balances[participant] = safeAdd(balances[participant], amountTokens);\r\n    }\r\n    function sendTokensAfterBuy(address participant, uint amountTokens) external onlyManagingWallets {       \r\n\t\tallocatetokensAndWL(participant, amountTokens);\r\n    }\t\r\n\tfunction batchAllocate(address[] participants, uint256[] values) external onlyManagingWallets {\r\n      uint256 i = 0;\r\n      while (i < participants.length) {\r\n\t\tallocatetokensAndWL(participants[i], values[i]);\r\n        i++;\r\n      }\r\n\t} \r\n\tfunction allocatetokensAndWL(address participant, uint amountTokens) private {\r\n\t\trequire(participant != address(0));\r\n\t\twhitelist[participant] = true; // automatically whitelist accepted presale\r\n\t\tblocklist[participant] = false;\r\n        allocateTokens(participant, amountTokens);\r\n        Whitelist(participant);\r\n        SendTokensAfterBuy(participant, amountTokens);\t\t\r\n\t}\t\r\n    function sendTokensAfterBuyExp(address participant, uint amountTokens, uint expectedTokens) external onlyManagingWallets {       \r\n\t\tallocatetokensAndWLExp(participant, amountTokens, expectedTokens);\r\n    }\t\r\n\tfunction allocatetokensAndWLExp(address participant, uint amountTokens,  uint expectedTokens ) private {\r\n\t\trequire(participant != address(0));\t\t\r\n\t\trequire(safeAdd(balances[participant], amountTokens) == expectedTokens);\r\n\t\twhitelist[participant] = true; \r\n\t\tblocklist[participant] = false;\r\n        allocateTokens(participant, amountTokens);\r\n        Whitelist(participant);\r\n        SendTokensAfterBuy(participant, amountTokens);\t\t\r\n\t}\r\n\tfunction requestBuywithETH () public payable onlyIfAllowed {\r\n\t\trequire(!halted);\r\n        require(msg.sender != address(0));\r\n        require(msg.value >= minAmount);\t\r\n\t\taddress participant = msg.sender;    \t\t\r\n\t\tuint256 moneyafterfee = safeMul(msg.value , safeSub(10000,ethFee))/10000;\r\n        uint256 tokensToBuy = safeMul(moneyafterfee, currentPrice.numerator) /  safeMul(currentPrice.denominator,10000000000);\r\n\t\tfundWallet.transfer(msg.value);\r\n        RequestBuywithETH(participant, tokensToBuy);\r\n    }\r\n\tfunction requestBuywithFX(uint256 fxcents) external onlyIfAllowed {\r\n        require(!halted);\r\n        require(msg.sender != address(0));\r\n\t\taddress participant = msg.sender;     \r\n\t\tuint256 amountfxcent = safeMul(fxcents , safeSub(10000,fxFee))/10000;\r\n        uint256 amounttokens = safeMul(amountfxcent, 10000000000) / currentPrice.denominator;\t\t  \r\n\t    RequestBuywithFX(participant, amounttokens);\r\n    }\r\n    function burnTokens(uint256 amountTokensToBurn) external onlyManagingWallets {\r\n\t\trequire(balances[fundWallet] >= amountTokensToBurn);\t\t\r\n\t\tbalances[fundWallet] = safeSub(balances[fundWallet], amountTokensToBurn);\r\n\t\ttotalSupply = safeSub(totalSupply,amountTokensToBurn);\r\n\t\tBurn(amountTokensToBurn);\r\n\t}\r\n\tfunction burnTokensExp(uint256 amountTokensToBurn,uint expectedTokens) external onlyManagingWallets {\r\n\t\trequire(balances[fundWallet] >= amountTokensToBurn);\r\n\t\trequire(safeSub(balances[fundWallet], amountTokensToBurn) == expectedTokens);\t\t\r\n\t\tbalances[fundWallet] = safeSub(balances[fundWallet], amountTokensToBurn);\r\n\t\ttotalSupply = safeSub(totalSupply,amountTokensToBurn);\r\n\t\tBurn(amountTokensToBurn);\r\n\t}\r\n\tfunction requestSellforETH(uint256 amountTokensToWithdraw) external  onlyIfAllowed {\r\n\t\trequire(!haltedFX);\r\n\t\trequire(amountTokensToWithdraw > 0);\r\n        address participant = msg.sender;\r\n        require(balanceOf(participant) >= amountTokensToWithdraw);\r\n        balances[participant] = safeSub(balances[participant], amountTokensToWithdraw);\r\n\t\tuint256 tokens = safeMul(amountTokensToWithdraw , safeSub(10000,ethFee))/10000;\r\n\t\tuint256 withdrawValue = safeMul(tokens, safeMul(currentPrice.denominator,10000000000)) / currentPrice.numerator;\r\n\t\tbalances[fundWallet] = safeAdd(balances[fundWallet], amountTokensToWithdraw);\r\n        RequestSellforETH(participant, amountTokensToWithdraw, withdrawValue);\r\n    }\t\r\n\tfunction requestSellforFX(uint256 amountTokensToWithdraw) external  onlyIfAllowed {\r\n        require(!haltedFX);\r\n\t\trequire(amountTokensToWithdraw > 0);\r\n        address participant = msg.sender;\r\n        require(balanceOf(participant) >= amountTokensToWithdraw);\r\n        balances[participant] = safeSub(balances[participant], amountTokensToWithdraw);\r\n\t\tuint256 tokens = safeMul(amountTokensToWithdraw , safeSub(10000,fxFee))/10000;\r\n\t\tuint256 withdrawValue = safeMul(tokens, currentPrice.denominator) / 10000000000;\r\n\t\tbalances[fundWallet] = safeAdd(balances[fundWallet], amountTokensToWithdraw);\r\n        RequestSellforFX(participant, amountTokensToWithdraw, withdrawValue);\r\n    }\r\n    function checkWithdrawValue(uint256 amountTokensToWithdraw) public  view returns (uint256 etherValue) {\r\n        require(amountTokensToWithdraw > 0);\r\n        require(balanceOf(msg.sender) >= amountTokensToWithdraw);\r\n\t\tuint256 tokens = safeMul(amountTokensToWithdraw , safeSub(10000,ethFee))/10000;\r\n        uint256 withdrawValue = safeMul(tokens, safeMul(currentPrice.denominator,10000000000)) / currentPrice.numerator;\r\n        return withdrawValue;\r\n    }\r\n\tfunction checkWithdrawValueForAddress(address participant,uint256 amountTokensToWithdraw) public  view returns (uint256 etherValue) {\r\n        require(amountTokensToWithdraw > 0);\r\n        require(balanceOf(participant) >= amountTokensToWithdraw);\r\n\t\tuint256 tokens = safeMul(amountTokensToWithdraw , safeSub(10000,ethFee))/10000;\r\n        uint256 withdrawValue = safeMul(tokens, safeMul(currentPrice.denominator,10000000000)) / currentPrice.numerator;\r\n        return withdrawValue;\r\n    }\r\n\tfunction checkWithdrawValueFX(uint256 amountTokensToWithdraw) public  view returns (uint256 FXcentValue) {\r\n        require(amountTokensToWithdraw > 0);\r\n        require(balanceOf(msg.sender) >= amountTokensToWithdraw);\r\n\t\tuint256 tokens = safeMul(amountTokensToWithdraw , safeSub(10000,fxFee))/10000;\r\n        uint256 withdrawValue = safeMul(tokens, currentPrice.denominator) / 10000000000;\r\n        return withdrawValue;\r\n    }\r\n\tfunction checkWithdrawValueForAddressFX(address participant,uint256 amountTokensToWithdraw) public  view returns (uint256 FXcentValue) {\r\n        require(amountTokensToWithdraw > 0);\r\n        require(balanceOf(participant) >= amountTokensToWithdraw);\r\n\t\tuint256 tokens = safeMul(amountTokensToWithdraw , safeSub(10000,fxFee))/10000;\r\n        uint256 withdrawValue = safeMul(tokens, currentPrice.denominator) / 10000000000;\t\r\n        return withdrawValue;\r\n    }\r\n    function removeLiquidity(uint256 amount) external onlyManagingWallets {\r\n        require(amount <= this.balance);\r\n        fundWallet.transfer(amount);\r\n    }\r\n    function halt() external onlyManagingWallets {\r\n        halted = true;\r\n    }\r\n    function unhalt() external onlyManagingWallets {\r\n        halted = false;\r\n    }\r\n    function haltFX() external onlyManagingWallets {\r\n        haltedFX = true;\r\n    }\r\n    function unhaltFX() external onlyManagingWallets {\r\n        haltedFX = false;\r\n    }\r\n    function updatefxFee(uint256 newfxFee) external onlyManagingWallets {\r\n\t\trequire(newfxFee >= 0);\r\n\t\tfxFee =newfxFee; //eg 50 for 50 basispoint\r\n\t}\r\n\tfunction updateEthFee(uint256 newethFee) external onlyManagingWallets {\r\n\t\trequire(newethFee >= 0);\r\n\t\tethFee =newethFee; //eg 20 for 20 basispoint\r\n\t}\r\n\tfunction updateminAmount(uint256 newminAmount) external onlyManagingWallets {\r\n\t\trequire(newminAmount > 0);\r\n\t\tminAmount =newminAmount; //eg 1 ether at start\r\n\t}\r\n    function enableTrading() external onlyManagingWallets {\r\n        tradeable = true;\r\n    }\r\n\tfunction disableTrading() external onlyManagingWallets {\r\n        tradeable = false;\r\n    }\r\n    function claimTokens(address _token) external onlyManagingWallets {\r\n        require(_token != address(0));\r\n        Token token = Token(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(fundWallet, balance);\r\n     }\r\n   // fallback function\r\n    function() payable {\r\n        require(tx.origin == msg.sender);\r\n    }\r\n\t// prevent transfers until trading allowed\r\n    function transfer(address _to, uint256 _value) isTradeable onlyIfAllowed returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyIfAllowed isTradeable returns (bool success) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\t}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"fxFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"destroyBlockFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNumerator\",\"type\":\"uint256\"},{\"name\":\"newDenominator\",\"type\":\"uint256\"}],\"name\":\"updatePriceAndDenominator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newethFee\",\"type\":\"uint256\"}],\"name\":\"updateEthFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousUpdateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fxcents\",\"type\":\"uint256\"}],\"name\":\"requestBuywithFX\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"haltFX\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"removeBlockList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newControlWallet\",\"type\":\"address\"}],\"name\":\"changeControlWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"amountTokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"checkWithdrawValueForAddress\",\"outputs\":[{\"name\":\"etherValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"verifyParticipant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participants\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchAllocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountTokensToBurn\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFundWallet\",\"type\":\"address\"}],\"name\":\"changeFundWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountTokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"requestSellforFX\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controlWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amountTokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"checkWithdrawValue\",\"outputs\":[{\"name\":\"etherValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_oldValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"changeApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"haltedFX\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"sendTokensAfterBuy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newminAmount\",\"type\":\"uint256\"}],\"name\":\"updateminAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountTokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"requestSellforETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"name\":\"expectedTokens\",\"type\":\"uint256\"}],\"name\":\"sendTokensAfterBuyExp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhaltFX\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amountTokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"checkWithdrawValueFX\",\"outputs\":[{\"name\":\"FXcentValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestBuywithETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"blocklist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountTokensToBurn\",\"type\":\"uint256\"},{\"name\":\"expectedTokens\",\"type\":\"uint256\"}],\"name\":\"burnTokensExp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"addBlockList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newfxFee\",\"type\":\"uint256\"}],\"name\":\"updatefxFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"amountTokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"checkWithdrawValueForAddressFX\",\"outputs\":[{\"name\":\"FXcentValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"controlWalletInput\",\"type\":\"address\"},{\"name\":\"priceNumeratorInput\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"RequestBuywithETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"RequestBuywithFX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"SendTokensAfterBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"RequestSellforETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fxValue\",\"type\":\"uint256\"}],\"name\":\"RequestSellforFX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"blocked\",\"type\":\"bool\"}],\"name\":\"BlockList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"FXTOKEN","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007d49cf4bf777d4434ea762c800beefbe703fe51c00000000000000000000000000000000000000000000000000000000002c4020","Library":"","SwarmSource":"bzzr://b1cd511b5d728c3b74384cfbe3f99c087a7acd062b4b69255eab326705a69507"}]}