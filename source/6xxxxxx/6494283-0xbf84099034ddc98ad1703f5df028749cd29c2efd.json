{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4 .25;\r\n\r\n/**\r\n * \r\n *   ---About the Project  SAFEInvestRETURNdeps\r\n *  Absolutely honest contract without an owner, your money is safe and no one can take it away, nobody\r\n *  Unique project with the possibility of withdrawal of the deposit at any time\r\n *  The percentage of dynamic depending on the amount of ETH deposit\r\n *  To withdraw interest send 0 to the address of the contract\r\n *  To withdraw the deposit send 0.00000911 ETH to the address of the contract\r\n *  Recommended gas limit 200,000\r\n *  Interest payments are made every 30 minutes\r\n *  The maximum you can get 200 percent, after which the contract will remove your address from memory\r\n *  If you want to withdraw the deposit ahead of time it will be taken fee 15 percent of withdrawal amount\r\n * \r\n * \r\n * \r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n The SAFEInvest rebuilding forkâ„–1\r\n*/\r\ncontract SAFEInvestRETURNdeps {\r\n    //use of library of safe mathematical operations    \r\n    using SafeMath\r\n    for uint;\r\n    // array containing information about beneficiaries\r\n    mapping(address => uint) public userDeposit;\r\n    //array containing information about the time of payment\r\n    mapping(address => uint) public userTime;\r\n    //array containing information on interest paid\r\n    mapping(address => uint) public persentWithdraw;\r\n    //fund fo transfer percent\r\n    address public projectFund = 0x8C267FF25c7311046a75cdd39759Bfc3A92BAf5A;\r\n     //wallet for a advertising fund\r\n    address public advertisFund =  0xcbAd8699654DC5E495C8E21F7411e57210b07d54;\r\n    //percentage deducted to the advertising fund\r\n    uint projectPercent = 2;\r\n    //percent for a advertising foundation\r\n    uint advertisPercent = 3;\r\n     //time through which you can take dividends\r\n    uint public chargingTime = 30 minutes;\r\n    //start persent 0.10% per hour\r\n    uint public startPercent =120;\r\n    uint public lowPersent = 150;\r\n    uint public middlePersent =180;\r\n    uint public highPersent = 195;\r\n    //interest rate increase steps\r\n    uint public stepLow = 10 ether;\r\n    uint public stepMiddle = 20 ether;\r\n    uint public stepHigh = 30 ether;\r\n    uint public countOfInvestors = 0;\r\n    uint public countOfCharity = 0;\r\n\r\n    modifier isIssetUser() {\r\n        require(userDeposit[msg.sender] > 0, \"Deposit not found\");\r\n        _;\r\n    }\r\n\r\n    modifier timePayment() {\r\n        require(now >= userTime[msg.sender].add(chargingTime), \"Too fast payout request\");\r\n        _;\r\n    }\r\n\r\n    //return of interest on the deposit\r\n    function collectPercent() isIssetUser timePayment internal {\r\n        //if the user received 200% or more of his contribution, delete the user\r\n        if ((userDeposit[msg.sender].mul(2)) <= persentWithdraw[msg.sender]) {\r\n            userDeposit[msg.sender] = 0;\r\n            userTime[msg.sender] = 0;\r\n            persentWithdraw[msg.sender] = 0;\r\n        } else {\r\n            uint payout = payoutAmount();\r\n            userTime[msg.sender] = now;\r\n            persentWithdraw[msg.sender] += payout;\r\n            msg.sender.transfer(payout);\r\n        }\r\n    }\r\n\r\n    //calculation of the current interest rate on the deposit\r\n    function persentRate() public view returns(uint) {\r\n        //get contract balance\r\n        uint balance = address(this).balance;\r\n        //calculate persent rate\r\n        if (balance < stepLow) {\r\n            return (startPercent);\r\n        }\r\n        if (balance >= stepLow && balance < stepMiddle) {\r\n            return (lowPersent);\r\n        }\r\n        if (balance >= stepMiddle && balance < stepHigh) {\r\n            return (middlePersent);\r\n        }\r\n        if (balance >= stepHigh) {\r\n            return (highPersent);\r\n        }\r\n    }\r\n\r\n    //refund of the amount available for withdrawal on deposit\r\n    function payoutAmount() public view returns(uint) {\r\n        uint persent = persentRate();\r\n        uint rate = userDeposit[msg.sender].mul(persent).div(100000);\r\n        uint interestRate = now.sub(userTime[msg.sender]).div(chargingTime);\r\n        uint withdrawalAmount = rate.mul(interestRate);\r\n        return (withdrawalAmount);\r\n    }\r\n\r\n    //make a contribution to the system\r\n    function makeDeposit() private {\r\n        if (msg.value > 0) {\r\n            if (userDeposit[msg.sender] == 0) {\r\n                countOfInvestors += 1;\r\n            }\r\n            if (userDeposit[msg.sender] > 0 && now > userTime[msg.sender].add(chargingTime)) {\r\n                collectPercent();\r\n            }\r\n            userDeposit[msg.sender] = userDeposit[msg.sender].add(msg.value);\r\n            userTime[msg.sender] = now;\r\n            //sending money for advertising\r\n            projectFund.transfer(msg.value.mul(projectPercent).div(100));\r\n            //sending money to advertis\r\n            advertisFund.transfer(msg.value.mul(advertisPercent).div(100));\r\n                   } else {\r\n            collectPercent();\r\n        }\r\n    }\r\n\r\n    //return of deposit balance\r\n    function returnDeposit() isIssetUser private {\r\n        //userDeposit-persentWithdraw-(userDeposit*15/100)\r\n        uint withdrawalAmount = userDeposit[msg.sender].sub(persentWithdraw[msg.sender]).sub(userDeposit[msg.sender].mul(projectPercent).div(100));\r\n        //check that the user's balance is greater than the interest paid\r\n        require(userDeposit[msg.sender] > withdrawalAmount, 'You have already repaid your deposit');\r\n        //delete user record\r\n        userDeposit[msg.sender] = 0;\r\n        userTime[msg.sender] = 0;\r\n        persentWithdraw[msg.sender] = 0;\r\n        msg.sender.transfer(withdrawalAmount);\r\n    }\r\n\r\n    function() external payable {\r\n        //refund of remaining funds when transferring to a contract 0.00000911 ether\r\n        if (msg.value == 0.00000911 ether) {\r\n            returnDeposit();\r\n        } else {\r\n            makeDeposit();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lowPersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepHigh\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"chargingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepLow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfCharity\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertisFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepMiddle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highPersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"persentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"middlePersent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"persentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"SAFEInvestRETURNdeps","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://719721ae316b276f3fb0ec5f9fed64f124377f92c909d9982f33351a7303151a"}]}