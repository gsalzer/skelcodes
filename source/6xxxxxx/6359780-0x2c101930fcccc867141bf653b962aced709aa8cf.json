{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Statable {\r\n    uint8 public state; // { 0 = pre event , 1 = during event, 2 = post event, 3 = refunding\r\n    modifier requireState(uint8 _state) {\r\n        require(state == _state);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Fighter is Ownable, Statable {\r\n    using SafeMath for uint256;\r\n    uint256 public minBetAmount = 0;\r\n\r\n    string name;\r\n\r\n    constructor(string contractName, uint256 _minBetAmount) public {\r\n        name = contractName;\r\n        minBetAmount = _minBetAmount;\r\n        state = 0;\r\n    }\r\n\r\n    function changeState(uint8 _state) public onlyOwner {\r\n        state = _state;\r\n    }\r\n\r\n    function getAddress() public view returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    function() public payable requireState(0) {\r\n        require(msg.value >= minBetAmount);\r\n        MasterFighter(address(owner)).addBet(msg.value, msg.sender);\r\n    }\r\n\r\n    function transferMoneyToOwner() public onlyOwner requireState(1) {\r\n        if (address(this).balance > 0) {\r\n            MasterFighter(address(owner)).deposit.value(address(this).balance)();\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract MasterFighter is Ownable, Statable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public percentRake = 5;\r\n    uint256 public constant minBetAmount = 0.01 ether;\r\n\r\n    bool public hasWithdrawnRake = false;\r\n\r\n    address winningFighter;\r\n\r\n    address[] public fighterAddressess;\r\n\r\n    struct Bet {\r\n        uint256 stake;\r\n        bool withdrawn;\r\n    }\r\n\r\n    mapping(address => mapping(address => Bet)) public bets;\r\n    mapping(address => address[]) public bettersForFighter;\r\n    mapping(address => uint256) public totalForFighter;\r\n\r\n    uint256 public amount;\r\n\r\n    event StateChanged(uint8 _state);\r\n    event ReceivedMoney(address _betterAddress, address _fighterAddress, uint256 _stake);\r\n\r\n    function deposit() public payable requireState(1) {\r\n    }\r\n\r\n    constructor() public {\r\n        state = 0;\r\n        addFighter(new Fighter(\"Khabib\", minBetAmount));\r\n        addFighter(new Fighter(\"McGregor\", minBetAmount));\r\n    }\r\n\r\n    function getTotalBettersForFighter(address _address) external view returns (uint256) {\r\n        return bettersForFighter[_address].length;\r\n    }\r\n\r\n    function startEvent() external onlyOwner requireState(0) {\r\n        state = 1;\r\n        for (uint8 i = 0; i < fighterAddressess.length; i++) {\r\n            Fighter(fighterAddressess[i]).changeState(state);\r\n            Fighter(fighterAddressess[i]).transferMoneyToOwner();\r\n        }\r\n        emit StateChanged(state);\r\n    }\r\n\r\n    function refundEverybody() external onlyOwner requireState(1) {\r\n        state = 3;\r\n        emit StateChanged(state);\r\n    }\r\n\r\n    function addFighter(address _address) private requireState(0) {\r\n        fighterAddressess.push(Fighter(_address));\r\n    }\r\n\r\n    function checkValidFighter(address _address) private view returns (bool) {\r\n        for (uint8 i = 0; i < fighterAddressess.length; i++) {\r\n            if (_address == fighterAddressess[i]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addBet(uint256 _stake, address _betterAddress) external {\r\n        require(checkValidFighter(msg.sender));\r\n        if (bets[msg.sender][_betterAddress].stake > 0) {\r\n            bets[msg.sender][_betterAddress].stake = bets[msg.sender][_betterAddress].stake.add(_stake);\r\n        } else {\r\n            bettersForFighter[msg.sender].push(_betterAddress);\r\n            bets[msg.sender][_betterAddress] = Bet(_stake, false);\r\n        }\r\n        amount = amount.add(_stake);\r\n        totalForFighter[msg.sender] = totalForFighter[msg.sender].add(_stake);\r\n        emit ReceivedMoney(_betterAddress, msg.sender, _stake);\r\n    }\r\n\r\n    function totalWagered() public constant returns (uint256) {\r\n        return amount;\r\n    }\r\n\r\n    function totalRake() public constant returns (uint256) {\r\n        return totalWagered().mul(percentRake).div(100);\r\n    }\r\n\r\n    function totalPrizePool() public constant returns (uint256) {\r\n        return totalWagered().sub(totalRake());\r\n    }\r\n\r\n    function declareWininingFighter(address _fighterAddress) external onlyOwner requireState(1) {\r\n        require(checkValidFighter(_fighterAddress));\r\n        state = 2;\r\n        winningFighter = _fighterAddress;\r\n        emit StateChanged(state);\r\n    }\r\n\r\n    function withdrawRake() external onlyOwner requireState(2) {\r\n        require(!hasWithdrawnRake);\r\n        hasWithdrawnRake = true;\r\n        owner.transfer(totalRake());\r\n    }\r\n\r\n    function withdraw(address _betterAddress) public requireState(2) {\r\n        require(bets[winningFighter][_betterAddress].stake > 0);\r\n        require(!bets[winningFighter][_betterAddress].withdrawn);\r\n        address(_betterAddress).transfer(totalPrizePool().mul(bets[winningFighter][_betterAddress].stake).div(totalForFighter[winningFighter]));\r\n        bets[winningFighter][_betterAddress].withdrawn = true;\r\n    }\r\n\r\n    function refund(address _betterAddress) external requireState(3) {\r\n        uint256 stake = 0;\r\n        for (uint8 i = 0; i < fighterAddressess.length; i++) {\r\n            if (bets[fighterAddressess[i]][_betterAddress].stake > 0 && !bets[fighterAddressess[i]][_betterAddress].withdrawn) {\r\n                bets[fighterAddressess[i]][_betterAddress].withdrawn = true;\r\n                stake = stake.add(bets[fighterAddressess[i]][_betterAddress].stake);\r\n            }\r\n        }\r\n        if (stake > 0) {\r\n            address(_betterAddress).transfer(stake);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"percentRake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bettersForFighter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTotalBettersForFighter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPrizePool\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bets\",\"outputs\":[{\"name\":\"stake\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fighterAddress\",\"type\":\"address\"}],\"name\":\"declareWininingFighter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betterAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fighterAddressess\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWagered\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refundEverybody\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalForFighter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stake\",\"type\":\"uint256\"},{\"name\":\"_betterAddress\",\"type\":\"address\"}],\"name\":\"addBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasWithdrawnRake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startEvent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betterAddress\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"StateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_betterAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_fighterAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_stake\",\"type\":\"uint256\"}],\"name\":\"ReceivedMoney\",\"type\":\"event\"}]","ContractName":"MasterFighter","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7e182ae3fa0cdc63f6b9928fa78986ec92f378d04b3828c05c9ebef65a713f8e"}]}