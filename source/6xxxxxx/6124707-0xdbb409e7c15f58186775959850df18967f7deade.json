{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// ****************************************************************************\r\n//\r\n// Symbol          : BECC\r\n// Name            : Beechain Exchange Cross-chain Coin\r\n// Decimals        : 18\r\n// Total supply    : 500,000,000.000000000000000000\r\n// Initial release : 70 percent (350,000,000.000000000000000000)\r\n// Initial Locked  : 30 percent (150,000,000.000000000000000000)\r\n// Contract start  : 2018-08-15 00:00:00 (UTC timestamp: 1534233600)\r\n// Lock duration   : 180 days\r\n// Release rate    : 10 percent / 30 days (15,000,000.000000000000000000)\r\n// Release duration: 300 days.\r\n//\r\n// ****************************************************************************\r\n\r\n\r\n// ****************************************************************************\r\n// Safe math\r\n// ****************************************************************************\r\n\r\nlibrary SafeMath {\r\n    \r\n  function mul(uint _a, uint _b) internal pure returns (uint c) {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint _a, uint _b) internal pure returns (uint) {\r\n    return _a / _b;\r\n  }\r\n\r\n  function sub(uint _a, uint _b) internal pure returns (uint) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  function add(uint _a, uint _b) internal pure returns (uint c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// ****************************************************************************\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ****************************************************************************\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// ****************************************************************************\r\n// Contract function to receive approval and execute function\r\n// ****************************************************************************\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint tokens, address token, bytes data) public;\r\n}\r\n\r\n// ****************************************************************************\r\n// Owned contract\r\n// ****************************************************************************\r\ncontract Owned {\r\n    \r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// ****************************************************************************\r\n// BECC Token, with the addition of symbol, name and decimals and a fixed supply\r\n// ****************************************************************************\r\ncontract BECCToken is ERC20, Owned {\r\n    using SafeMath for uint;\r\n    \r\n    event Pause();\r\n    event Unpause();\r\n    event ReleasedTokens(uint tokens);\r\n    event AllocateTokens(address to, uint tokens);\r\n    \r\n    bool public paused = false;\r\n\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    \r\n    uint private _totalSupply;              //total supply\r\n    uint private _initialRelease;           //initial release\r\n    uint private _locked;                   //locked tokens\r\n    uint private _released = 0;             //alloced tokens\r\n    uint private _allocated = 0;\r\n    uint private _startTime = 1534233600 + 180 days;    //release start time:2018-08-15 00:00:00(UTC) + 180 days\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    // ************************************************************************\r\n    // Modifier to make a function callable only when the contract is not paused.\r\n    // ************************************************************************\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    // ************************************************************************\r\n    // Modifier to make a function callable only when the contract is paused.\r\n    // ************************************************************************\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n  \r\n    // ************************************************************************\r\n    // Constructor\r\n    // ************************************************************************\r\n    constructor() public {\r\n        symbol = \"BECC\";\r\n        name = \"Beechain Exchange Cross-chain Coin\";\r\n        decimals = 18;\r\n        _totalSupply = 500000000 * 10**uint(decimals);\r\n        _initialRelease = _totalSupply * 7 / 10;\r\n        _locked = _totalSupply * 3 / 10;\r\n        balances[owner] = _initialRelease;\r\n        emit Transfer(address(0), owner, _initialRelease);\r\n    }\r\n\r\n    // ************************************************************************\r\n    // Total supply\r\n    // ************************************************************************\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n\r\n    // ************************************************************************\r\n    // Get the token balance for account `tokenOwner`\r\n    // ************************************************************************\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ************************************************************************\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ************************************************************************\r\n    function transfer(address to, uint tokens) public whenNotPaused returns (bool success) {\r\n        require(address(0) != to && tokens <= balances[msg.sender] && 0 <= tokens);\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ************************************************************************\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    // ************************************************************************\r\n    function approve(address spender, uint tokens) public whenNotPaused returns (bool success) {\r\n        require(address(0) != spender && 0 <= tokens);\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ************************************************************************\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ************************************************************************\r\n    function transferFrom(address from, address to, uint tokens) public whenNotPaused returns (bool success) {\r\n        require(address(0) != to && tokens <= balances[from] && tokens <= allowed[from][msg.sender] && 0 <= tokens);\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ************************************************************************\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ************************************************************************\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    // ************************************************************************\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ************************************************************************\r\n    function approveAndCall(address spender, uint tokens, bytes data) public whenNotPaused returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n\r\n    // ************************************************************************\r\n    // Don't accept ETH\r\n    // ************************************************************************\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n    // ************************************************************************\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ************************************************************************\r\n    function transferERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n    // ************************************************************************\r\n    // called by the owner to pause, triggers stopped state\r\n    // ************************************************************************\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    // ************************************************************************\r\n    // called by the owner to unpause, returns to normal state\r\n    // ************************************************************************\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n    \r\n    // ************************************************************************\r\n    // return free Tokens\r\n    // ************************************************************************\r\n    function freeBalance() public view returns (uint tokens) {\r\n        return _released.sub(_allocated);\r\n    }\r\n\r\n    // ************************************************************************\r\n    // return released Tokens\r\n    // ************************************************************************\r\n    function releasedBalance() public view returns (uint tokens) {\r\n        return _released;\r\n    }\r\n\r\n    // ************************************************************************\r\n    // return allocated Tokens\r\n    // ************************************************************************\r\n    function allocatedBalance() public view returns (uint tokens) {\r\n        return _allocated;\r\n    }\r\n    \r\n    // ************************************************************************\r\n    // calculate released Tokens by the owner\r\n    // ************************************************************************\r\n    function calculateReleased() public onlyOwner returns (uint tokens) {\r\n        require(now > _startTime);\r\n        uint _monthDiff = (now.sub(_startTime)).div(30 days);\r\n\r\n        if (_monthDiff >= 10 ) {\r\n            _released = _locked;\r\n        } else {\r\n            _released = _monthDiff.mul(_locked.div(10));\r\n        }\r\n        emit ReleasedTokens(_released);\r\n        return _released;\r\n    }\r\n\r\n    // ************************************************************************\r\n    // called by the owner to alloc the released tokens\r\n    // ************************************************************************     \r\n    function allocateTokens(address to, uint tokens) public onlyOwner returns (bool success){\r\n        require(address(0) != to && 0 <= tokens && tokens <= _released.sub(_allocated));\r\n        balances[to] = balances[to].add(tokens);\r\n        _allocated = _allocated.add(tokens);\r\n        emit AllocateTokens(to, tokens);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freeBalance\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"allocateTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releasedBalance\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"calculateReleased\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocatedBalance\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"ReleasedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"AllocateTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BECCToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://decd73c693444aedfec79fefdec165dcfaba213e2f9f5e43701d860b0a58d873"}]}