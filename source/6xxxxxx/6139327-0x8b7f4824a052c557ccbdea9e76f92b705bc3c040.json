{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n}\r\n\r\ncontract RakuRakuEth {\r\n  using SafeMath for uint256;\r\n\r\n  enum Status {\r\n    Pending,\r\n    Requested,\r\n    Canceled,\r\n    Paid,\r\n    Rejected\r\n  }\r\n  \r\n  struct Payment {\r\n    uint256 amountJpy;\r\n    uint256 amountWei;\r\n    uint256 rateEthJpy;\r\n    uint256 paymentDue;\r\n    uint256 requestedTime;\r\n    Status status; //0: pending, 1: requested, 2: canceled, 3: paid, 4: rejected\r\n  }\r\n  \r\n  address public owner;\r\n  address public creditor;\r\n  address public debtor;\r\n  uint256 ethWei = 10**18;\r\n\r\n  Payment[] payments;\r\n  mapping (address => uint256) balances;\r\n  \r\n  modifier onlyCreditor() {\r\n    require(msg.sender == creditor);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyDebtor() {\r\n    require(msg.sender == debtor);\r\n    _;\r\n  }\r\n  \r\n  modifier onlyStakeholders() {\r\n    require(msg.sender == debtor || msg.sender == creditor);\r\n    _;\r\n  }\r\n\r\n  constructor (address _creditor, address _debtor) public {\r\n    owner = msg.sender;\r\n    creditor = _creditor;\r\n    debtor = _debtor;\r\n  }\r\n  \r\n  // Public Function (anyone can call)\r\n  function getCurrentTimestamp () external view returns (uint256 timestamp) {\r\n    return block.timestamp;\r\n  }\r\n\r\n  function collectPayment(uint256 _index) external returns (bool) {\r\n    require(payments[_index].status == Status.Requested);\r\n    require(payments[_index].requestedTime + 24*60*60 < block.timestamp);\r\n    require(balances[debtor] >= payments[_index].amountWei);\r\n    balances[debtor] = balances[debtor].sub(payments[_index].amountWei);\r\n    balances[creditor] = balances[creditor].add(payments[_index].amountWei);\r\n    payments[_index].status = Status.Paid;\r\n    return true;\r\n  }\r\n  \r\n  // Function for stakeholders (debtor or creditor)\r\n  function getBalance(address _address) external view returns (uint256 balance) {\r\n    return balances[_address];\r\n  }\r\n  \r\n  function getPayment(uint256 _index) external view returns (uint256 amountJpy, uint256 amountWei, uint256 rateEthJpy, uint256 paymentDue, uint256 requestedTime, Status status) {\r\n    Payment memory pm = payments[_index];\r\n    return (pm.amountJpy, pm.amountWei, pm.rateEthJpy, pm.paymentDue, pm.requestedTime, pm.status);\r\n  }\r\n  \r\n  function getNumPayments() external view returns (uint256 num) {\r\n    return payments.length;\r\n  }\r\n  \r\n  function withdraw(uint256 _amount) external returns (bool) {\r\n    require(balances[msg.sender] >= _amount);\r\n    msg.sender.transfer(_amount);\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n    return true;\r\n  }\r\n  \r\n  // Functions for creditor\r\n  function addPayment(uint256 _amountJpy, uint256 _paymentDue) external onlyCreditor returns (uint256 index) {\r\n    payments.push(Payment(_amountJpy, 0, 0, _paymentDue, 0, Status.Pending));\r\n    return payments.length-1;\r\n  }\r\n  \r\n  function requestPayment(uint256 _index, uint256 _rateEthJpy) external onlyCreditor returns (bool) {\r\n    require(payments[_index].status == Status.Pending || payments[_index].status == Status.Rejected);\r\n    require(payments[_index].paymentDue <= block.timestamp);\r\n    payments[_index].rateEthJpy = _rateEthJpy;\r\n    payments[_index].amountWei = payments[_index].amountJpy.mul(ethWei).div(_rateEthJpy);\r\n    payments[_index].requestedTime = block.timestamp;\r\n    payments[_index].status = Status.Requested;\r\n    return true;\r\n  }\r\n  \r\n  function cancelPayment(uint256 _index) external onlyCreditor returns (bool) {\r\n    require(payments[_index].status != Status.Paid);\r\n    payments[_index].status = Status.Canceled;\r\n    return true;\r\n  }\r\n\r\n  // Function for debtor\r\n  function () external payable onlyDebtor {\r\n    balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n  }\r\n  \r\n  function rejectPayment(uint256 _index) external onlyDebtor returns (bool) {\r\n    require(payments[_index].status == Status.Requested);\r\n    require(payments[_index].requestedTime + 24*60*60 > block.timestamp);\r\n    payments[_index].status = Status.Rejected;\r\n    return true;\r\n  }\r\n  \r\n  function approvePayment(uint256 _index) external onlyDebtor returns (bool) {\r\n    require(payments[_index].status == Status.Requested);\r\n    require(balances[debtor] >= payments[_index].amountWei);\r\n    balances[debtor] = balances[debtor].sub(payments[_index].amountWei);\r\n    balances[creditor] = balances[creditor].add(payments[_index].amountWei);\r\n    payments[_index].status = Status.Paid;\r\n    return true;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"},{\"name\":\"_rateEthJpy\",\"type\":\"uint256\"}],\"name\":\"requestPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNumPayments\",\"outputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPayment\",\"outputs\":[{\"name\":\"amountJpy\",\"type\":\"uint256\"},{\"name\":\"amountWei\",\"type\":\"uint256\"},{\"name\":\"rateEthJpy\",\"type\":\"uint256\"},{\"name\":\"paymentDue\",\"type\":\"uint256\"},{\"name\":\"requestedTime\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"collectPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountJpy\",\"type\":\"uint256\"},{\"name\":\"_paymentDue\",\"type\":\"uint256\"}],\"name\":\"addPayment\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentTimestamp\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"cancelPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"rejectPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"approvePayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creditor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_creditor\",\"type\":\"address\"},{\"name\":\"_debtor\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"RakuRakuEth","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004abcda42dcd4604403a4c47debd270c5f219c13a0000000000000000000000009765b1cab156b15cecaec31d17660673ce28ef9a","Library":"","SwarmSource":"bzzr://e02b657ee859ee05631d15a6c99391bb0d0e304fd14261381560103d4d2b9158"}]}