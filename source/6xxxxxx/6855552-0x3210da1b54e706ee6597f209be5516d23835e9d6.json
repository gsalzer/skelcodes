{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity  ^0.4.24;\r\ncontract AllYours {\r\n\r\n    // uint128 private _totalEth = 0.2 ether;\r\n\r\n    // uint128 private _winTotalEth = 0.15 ether;\r\n\r\n    // uint128 private _platformTotalEth = 0.05 ether;\r\n\r\n    // uint16 private _needTimes = 4;\r\n\r\n    // uint128 private _oneceEth = 0.05 ether;\r\n\r\n     // uint24 private _needTimes = 10;\r\n\r\n   \r\n\r\n    address private _platformAddress = 0xbE9C1088FEEB8B48A96Da0231062eA757D0a9613;\r\n\r\n    uint private _totalEth = 0.05 ether;\r\n\r\n \r\n\r\n    uint128 private _oneceEth = 0.01 ether;\r\n\r\n    uint256 private _period = 1;\r\n\r\n    address private _owner;\r\n\r\n    \r\n\r\n    constructor() public{\r\n\r\n        _owner = msg.sender;\r\n\r\n    }\r\n\r\n    \r\n\r\n    // mapping(address => uint16) private _playerOfNumber;\r\n\r\n    mapping(uint24 => address) private _allPlayer;\r\n\r\n    address[] private _allAddress;\r\n\r\n    uint16 private _currentJoinPersonNumber;\r\n\r\n    string private _historyJoin;\r\n\r\n    \r\n\r\n    event drawCallback(address winnerAddress,uint period,uint balance,uint time );\r\n\r\n    \r\n\r\n    function getCurrentJoinPersonNumber() view public returns(uint24) {\r\n\r\n        return _currentJoinPersonNumber;\r\n\r\n    }\r\n\r\n    \r\n\r\n    // function getAddressJoinPersonNumber() view public returns(uint24) {\r\n\r\n    // return _playerOfNumber[msg.sender];\r\n\r\n    // }\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    function getHistory() view public returns(string) {\r\n\r\n        return _historyJoin;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function getPeriod() view public returns(uint256) {\r\n\r\n        return _period;\r\n\r\n    }\r\n\r\n    function getCurrentBalance() view public returns(uint256) {\r\n\r\n        return address(this).balance;\r\n\r\n    }\r\n\r\n \r\n\r\n    \r\n\r\n    function draw() internal view returns (uint24) {\r\n\r\n        bytes32 hash = keccak256(abi.encodePacked(block.number));\r\n\r\n        uint256 random = 0;\r\n\r\n        for(uint i=hash.length-8;i<hash.length;i++) {\r\n\r\n            random += uint256(hash[i])*(10**(hash.length-i));\r\n\r\n        }\r\n\r\n        \r\n\r\n        random += now;\r\n\r\n        \r\n\r\n         bytes memory hashAddress=toBytes(_allAddress[0]); \r\n\r\n         for(uint j=0;j<8;j++) {\r\n\r\n            random += uint(hashAddress[j])*(10**(8-j));\r\n\r\n        }\r\n\r\n        \r\n\r\n        uint24 index = uint24(random % _allAddress.length);\r\n\r\n        \r\n\r\n        return index;\r\n\r\n       \r\n\r\n    }\r\n\r\n    \r\n\r\n    // 销毁当前合约\r\n\r\n    function kill() public payable {\r\n\r\n       \r\n\r\n        if (_owner == msg.sender) {\r\n\r\n             _platformAddress.transfer(address(this).balance);\r\n\r\n            selfdestruct(_owner);\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n   \r\n\r\n    function() public payable {\r\n\r\n        require(msg.value >= _oneceEth);\r\n\r\n        \r\n\r\n        // _playerOfNumber[msg.sender] += 1;\r\n\r\n        uint len = msg.value/_oneceEth;\r\n\r\n        for(uint i=0;i<len;i++) {\r\n\r\n            _allPlayer[_currentJoinPersonNumber ++] = msg.sender;\r\n\r\n            _allAddress.push(msg.sender);\r\n\r\n        }\r\n\r\n        \r\n\r\n        \r\n\r\n        _historyJoin = strConcat(_historyJoin,\"&\",uint2str(now),\"|\",addressToString(msg.sender)) ;\r\n\r\n        \r\n\r\n        if(address(this).balance >= _totalEth) {\r\n\r\n            \r\n\r\n            uint24 index = draw();\r\n\r\n            address drawAddress = _allPlayer[index];\r\n\r\n            uint256 b = address(this).balance;\r\n\r\n            uint256 pay = b*70/100;\r\n\r\n            drawAddress.transfer(pay);\r\n\r\n            _platformAddress.transfer(b*30/100);\r\n\r\n            \r\n\r\n            emit drawCallback(drawAddress,_period,pay,now);\r\n\r\n            _period ++;\r\n\r\n          clear();\r\n\r\n           \r\n\r\n   \r\n\r\n        }\r\n\r\n        \r\n\r\n    }\r\n\r\n    \r\n\r\n    function clear() internal {\r\n\r\n         for(uint16 i=0;i<_allAddress.length;i++) {\r\n\r\n                // delete _playerOfNumber[_allAddress[i]];\r\n\r\n                delete _allPlayer[i];\r\n\r\n            }\r\n\r\n            \r\n\r\n           _currentJoinPersonNumber = 0;\r\n\r\n          _historyJoin = \"\";\r\n\r\n           delete _allAddress;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function toBytes(address x) internal pure returns (bytes b) {\r\n\r\n         b = new bytes(20);\r\n\r\n         for (uint i = 0; i < 20; i++)\r\n\r\n                b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));\r\n\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n   function addressToString(address _addr) internal pure returns (string) {\r\n\r\n               bytes32 value = bytes32(uint256(_addr));\r\n\r\n\r\n\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        bytes memory str = new bytes(42);\r\n\r\n\r\n\r\n        str[0] = '0';\r\n\r\n\r\n\r\n        str[1] = 'x';\r\n\r\n\r\n\r\n        for (uint i = 0; i < 20; i++) {\r\n\r\n\r\n\r\n            str[2+i*2] = alphabet[uint(value[i + 12] >> 4)];\r\n\r\n\r\n\r\n            str[3+i*2] = alphabet[uint(value[i + 12] & 0x0f)];\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        return string(str);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function uint2str(uint256 i) internal pure returns (string){\r\n\r\n        if (i == 0) return \"0\";\r\n\r\n        uint j = i;\r\n\r\n        uint len;\r\n\r\n        while (j != 0){\r\n\r\n            len++;\r\n\r\n            j /= 10;\r\n\r\n        }\r\n\r\n        bytes memory bstr = new bytes(len);\r\n\r\n        uint k = len - 1;\r\n\r\n        while (i != 0){\r\n\r\n            bstr[k--] = byte(48 + i % 10);\r\n\r\n            i /= 10;\r\n\r\n        }\r\n\r\n        return string(bstr);\r\n\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n     function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\r\n\r\n        bytes memory _ba = bytes(_a);\r\n\r\n        bytes memory _bb = bytes(_b);\r\n\r\n        bytes memory _bc = bytes(_c);\r\n\r\n        bytes memory _bd = bytes(_d);\r\n\r\n        bytes memory _be = bytes(_e);\r\n\r\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n\r\n        bytes memory babcde = bytes(abcde);\r\n\r\n        uint k = 0;\r\n\r\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n\r\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n\r\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n\r\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n\r\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n\r\n        return string(babcde);\r\n\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentJoinPersonNumber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint24\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winnerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"drawCallback\",\"type\":\"event\"}]","ContractName":"AllYours","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://37061c4f19518a88a9271e8ef9629cb71d8bbfb4036239cc0e13e125c0714b62"}]}