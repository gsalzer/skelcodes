{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ncontract ERC20Token {\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BatchAirDrop is Ownable {\r\n\r\n    event ApproveToken(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor() public {}\r\n\r\n    function() payable public {}\r\n\r\n\r\n    /**\r\n     * batch transfer for ERC20 token.(the same amount)\r\n     *\r\n     * @param _contractAddress ERC20 token address\r\n     * @param _addresses array of address to sent\r\n     * @param _value transfer amount\r\n     */\r\n    function batchTransferToken(address _contractAddress, address[] _addresses, uint _value) public onlyOwner {\r\n        ERC20Token token = ERC20Token(_contractAddress);\r\n        // transfer circularly\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            token.transfer(_addresses[i], _value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * batch transfer for ERC20 token.\r\n     *\r\n     * @param _contractAddress ERC20 token address\r\n     * @param _addresses array of address to sent\r\n     * @param _values array of transfer amount\r\n     */\r\n    function batchTransferTokenS(address _contractAddress, address[] _addresses, uint[] _values) public onlyOwner {\r\n        require(_addresses.length == _values.length);\r\n\r\n        ERC20Token token = ERC20Token(_contractAddress);\r\n        // transfer circularly\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            token.transfer(_addresses[i], _values[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * batch transfer for ETH.(the same amount)\r\n     *\r\n     * @param _addresses array of address to sent\r\n     */\r\n    function batchTransferETH(address[] _addresses) payable public onlyOwner {\r\n        // transfer circularly\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            _addresses[i].transfer(msg.value / _addresses.length);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * batch transfer for ETH.\r\n     *\r\n     * @param _addresses array of address to sent\r\n     * @param _values array of transfer amount\r\n     */\r\n    function batchTransferETHS(address[] _addresses, uint[] _values) payable public onlyOwner {\r\n        require(_addresses.length == _values.length);\r\n\r\n        // transfer circularly\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            _addresses[i].transfer(_values[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Recovery donated ether\r\n     */\r\n    function collectEtherBack(address collectorAddress) public onlyOwner {\r\n        uint256 b = address(this).balance;\r\n        require(b > 0);\r\n        require(collectorAddress != 0x0);\r\n\r\n        collectorAddress.transfer(b);\r\n    }\r\n\r\n    /**\r\n    *  Recycle other ERC20 tokens\r\n    */\r\n    function collectOtherTokens(address tokenContract, address collectorAddress) onlyOwner public returns (bool) {\r\n        ERC20Token t = ERC20Token(tokenContract);\r\n\r\n        uint256 b = t.balanceOf(address(this));\r\n        return t.transfer(collectorAddress, b);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferETHS\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContract\",\"type\":\"address\"},{\"name\":\"collectorAddress\",\"type\":\"address\"}],\"name\":\"collectOtherTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"batchTransferETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"collectorAddress\",\"type\":\"address\"}],\"name\":\"collectEtherBack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferTokenS\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"},{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"batchTransferToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ApproveToken\",\"type\":\"event\"}]","ContractName":"BatchAirDrop","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv2.1","Proxy":"0","Implementation":"","SwarmSource":"bzzr://371c85e081d30e0ccc2105073aee10eae1d8b34687fb20bc16c7da1b2b2b4d7d"}]}