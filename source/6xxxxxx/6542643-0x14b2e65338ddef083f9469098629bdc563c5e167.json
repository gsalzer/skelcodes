{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract Mortal is Ownable{\r\n    uint public stopTS;\r\n    uint public minimumWait = 1 hours;\r\n    bool public killed;\r\n\r\n    /**\r\n     * keep people from joining games or initiating new ones\r\n     * */\r\n    function stopPlaying() public onlyOwner{\r\n        stopTS = now;\r\n    }\r\n\r\n    /**\r\n     * kills the contract if enough time has passed. time to pass = twice the waiting time for withdrawal of funds of a running game.\r\n     * */\r\n    function kill() public onlyOwner{\r\n        require(stopTS > 0 && stopTS + 2 * minimumWait <= now, \"before killing, playing needs to be stopped and sufficient time has to pass\");\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    /**\r\n     * like killing, because playing will no longer be possible and funds are withdrawn, but keeps the data available on the blockchain\r\n     * (especially scores)\r\n     * */\r\n    function permaStop() public onlyOwner{\r\n        require(stopTS > 0 && stopTS + 2 * minimumWait <= now, \"before killing, playing needs to be stopped and sufficient time has to pass\");\r\n        killed = true;\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * resume playing. stops the killing preparation.\r\n     * */\r\n    function resumePlaying() public onlyOwner{\r\n        require(!killed, \"killed contract cannot be reactivated\");\r\n        stopTS = 0;\r\n    }\r\n\r\n    /**\r\n     * don't allow certain functions if playing has been stopped\r\n     * */\r\n    modifier active(){\r\n        require(stopTS == 0, \"playing has been stopped by the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Administrable is Mortal{\r\n    /** the different pots */\r\n    uint public charityPot;\r\n    uint public highscorePot;\r\n    uint public affiliatePot;\r\n    uint public surprisePot;\r\n    uint public developerPot;\r\n    /** the Percentage of the game stake which go into a pot with one decimal (25 => 2.5%) */\r\n    uint public charityPercent = 25;\r\n    uint public highscorePercent = 50;\r\n    uint public affiliatePercent = 50;\r\n    uint public surprisePercent = 25;\r\n    uint public developerPercent = 50;\r\n    uint public winnerPercent = 800;\r\n    /** the current highscore holder **/\r\n    address public highscoreHolder;\r\n    address public signer;\r\n    /** balance of affiliate partners */\r\n    mapping (address => uint) public affiliateBalance;\r\n    /** tells if a hash has already been used for withdrawal **/\r\n    mapping (bytes32 => bool) public used;\r\n    event Withdrawal(uint8 pot, address receiver, uint value);\r\n\r\n    modifier validAddress(address receiver){\r\n        require(receiver != 0x0, \"invalid receiver\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * set the minimum waiting time for withdrawal of funds of a started but not-finished game\r\n     * */\r\n    function setMinimumWait(uint newMin) public onlyOwner{\r\n        minimumWait = newMin;\r\n    }\r\n\r\n    /**\r\n     * withdraw from the developer pot\r\n     * */\r\n    function withdrawDeveloperPot(address receiver) public onlyOwner validAddress(receiver){\r\n        uint value = developerPot;\r\n        developerPot = 0;\r\n        receiver.transfer(value);\r\n        emit Withdrawal(0, receiver, value);\r\n    }\r\n\r\n    /**\r\n     * withdraw from the charity pot\r\n     * */\r\n    function donate(address charity) public onlyOwner validAddress(charity){\r\n        uint value = charityPot;\r\n        charityPot = 0;\r\n        charity.transfer(value);\r\n        emit Withdrawal(1, charity, value);\r\n    }\r\n\r\n    /**\r\n     * withdraw from the highscorePot\r\n     * */\r\n    function withdrawHighscorePot(address receiver) public validAddress(receiver){\r\n        require(msg.sender == highscoreHolder);\r\n        uint value = highscorePot;\r\n        highscorePot = 0;\r\n        receiver.transfer(value);\r\n        emit Withdrawal(2, receiver, value);\r\n    }\r\n\r\n    /**\r\n     * withdraw from the affiliate pot\r\n     * */\r\n    function withdrawAffiliateBalance(address receiver) public validAddress(receiver){\r\n        uint value = affiliateBalance[msg.sender];\r\n        require(value > 0);\r\n        affiliateBalance[msg.sender] = 0;\r\n        receiver.transfer(value);\r\n        emit Withdrawal(3, receiver, value);\r\n    }\r\n\r\n    /**\r\n     * withdraw from the surprise pot\r\n     * */\r\n    function withdrawSurprisePot(address receiver) public onlyOwner validAddress(receiver){\r\n        uint value = surprisePot;\r\n        surprisePot = 0;\r\n        receiver.transfer(value);\r\n        emit Withdrawal(4, receiver, value);\r\n    }\r\n\r\n    /**\r\n     * allows an user to withdraw from the surprise pot with a valid signature\r\n     * */\r\n    function withdrawSurprisePotUser(uint value, uint expiry, uint8 v, bytes32 r, bytes32 s) public{\r\n        require(expiry >= now, \"signature expired\");\r\n        bytes32 hash = keccak256(abi.encodePacked(msg.sender, value, expiry));\r\n        require(!used[hash], \"same signature was used before\");\r\n        require(ecrecover(hash, v, r, s) == signer, \"invalid signer\");\r\n        require(value <= surprisePot, \"not enough in the pot\");\r\n        surprisePot -= value;\r\n        used[hash] = true;\r\n        msg.sender.transfer(value);\r\n        emit Withdrawal(4, msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * sets the signing address\r\n     * */\r\n    function setSigner(address signingAddress) public onlyOwner{\r\n        signer = signingAddress;\r\n    }\r\n\r\n    /**\r\n     * sets the pot Percentages\r\n     * */\r\n    function setPercentages(uint affiliate, uint charity, uint dev, uint highscore, uint surprise) public onlyOwner{\r\n        uint sum =  affiliate + charity + highscore + surprise + dev;\r\n        require(sum < 500, \"winner should not lose money\");\r\n        charityPercent = charity;\r\n        affiliatePercent = affiliate;\r\n        highscorePercent = highscore;\r\n        surprisePercent = surprise;\r\n        developerPercent = dev;\r\n        winnerPercent = 1000 - sum;\r\n    }\r\n}\r\n\r\ncontract Etherman is Administrable{\r\n\r\n    struct game{\r\n        uint32 timestamp;\r\n        uint128 stake;\r\n        address player1;\r\n        address player2;\r\n    }\r\n\r\n    struct player{\r\n        uint8 team;\r\n        uint64 score;\r\n        address referrer;\r\n    }\r\n\r\n    mapping (bytes32 => game) public games;\r\n    mapping (address => player) public players;\r\n\r\n    event NewGame(bytes32 gameId, address player1, uint stake);\r\n    event GameStarted(bytes32 gameId, address player1, address player2, uint stake);\r\n    event GameDestroyed(bytes32 gameId);\r\n    event GameEnd(bytes32 gameId, address winner, uint value);\r\n    event NewHighscore(address holder, uint score, uint lastPot);\r\n\r\n    modifier onlyHuman(){\r\n        require(msg.sender == tx.origin, \"contract calling\");\r\n        _;\r\n    }\r\n\r\n    constructor(address signingAddress) public{\r\n        setSigner(signingAddress);\r\n    }\r\n\r\n    /**\r\n     * sets the referrer for the lifetime affiliate program and initiates a new game\r\n     * */\r\n    function initGameReferred(address referrer, uint8 team) public payable active onlyHuman validAddress(referrer){\r\n        //new player which does not have a referrer set yet\r\n        if(players[msg.sender].referrer == 0x0 && players[msg.sender].score == 0)\r\n            players[msg.sender] = player(team, 0, referrer);\r\n        initGame();\r\n    }\r\n\r\n    /**\r\n     * sets the team and initiates a game\r\n     * */\r\n    function initGameTeam(uint8 team) public payable active onlyHuman{\r\n        if(players[msg.sender].score == 0)\r\n            players[msg.sender].team = team;\r\n        initGame();\r\n    }\r\n\r\n    /**\r\n     * initiates a new game\r\n     * */\r\n    function initGame() public payable active onlyHuman{\r\n        require(msg.value <= 10 ether, \"stake needs to be lower than or equal to 10 ether\");\r\n        require(msg.value > 1 finney, \"stake needs to be at least 1 finney\");\r\n        bytes32 gameId = keccak256(abi.encodePacked(msg.sender, block.number));\r\n        games[gameId] = game(uint32(now), uint128(msg.value), msg.sender, 0x0);\r\n        emit NewGame(gameId, msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * sets the referrer for the lifetime affiliate program and joins a game\r\n     * */\r\n    function joinGameReferred(bytes32 gameId, address referrer, uint8 team) public payable active onlyHuman validAddress(referrer){\r\n        //new player which does not have a referrer set yet\r\n        if(players[msg.sender].referrer == 0x0 && players[msg.sender].score == 0)\r\n            players[msg.sender] = player(team, 0, referrer);\r\n        joinGame(gameId);\r\n    }\r\n\r\n    /**\r\n     * sets the team and joins a game\r\n     * */\r\n    function joinGameTeam(bytes32 gameId, uint8 team) public payable active onlyHuman{\r\n        if(players[msg.sender].score == 0)\r\n            players[msg.sender].team = team;\r\n        joinGame(gameId);\r\n    }\r\n\r\n    /**\r\n     * join a game\r\n     * */\r\n    function joinGame(bytes32 gameId) public payable active onlyHuman{\r\n        game storage cGame = games[gameId];\r\n        require(cGame.player1!=0x0, \"game id unknown\");\r\n        require(cGame.player1 != msg.sender, \"cannot play with one self\");\r\n        require(msg.value >= cGame.stake, \"value does not suffice to join the game\");\r\n        cGame.player2 = msg.sender;\r\n        cGame.timestamp = uint32(now);\r\n        emit GameStarted(gameId, cGame.player1, msg.sender, cGame.stake);\r\n        if(msg.value > cGame.stake) developerPot += msg.value - cGame.stake;\r\n    }\r\n\r\n    /**\r\n     * withdraw from the game stake in case no second player joined or the game was not ended within the\r\n     * minimum waiting time\r\n     * */\r\n    function withdraw(bytes32 gameId) public onlyHuman{\r\n        game storage cGame = games[gameId];\r\n        uint128 value = cGame.stake;\r\n        if(msg.sender == cGame.player1){\r\n            if(cGame.player2 == 0x0){\r\n                delete games[gameId];\r\n                msg.sender.transfer(value);\r\n            }\r\n            else if(cGame.timestamp + minimumWait <= now){\r\n                address player2 = cGame.player2;\r\n                delete games[gameId];\r\n                msg.sender.transfer(value);\r\n                player2.transfer(value);\r\n            }\r\n            else{\r\n                revert(\"minimum waiting time has not yet passed\");\r\n            }\r\n        }\r\n        else if(msg.sender == cGame.player2){\r\n            if(cGame.timestamp + minimumWait <= now){\r\n                address player1 = cGame.player1;\r\n                delete games[gameId];\r\n                msg.sender.transfer(value);\r\n                player1.transfer(value);\r\n            }\r\n            else{\r\n                revert(\"minimum waiting time has not yet passed\");\r\n            }\r\n        }\r\n        else{\r\n            revert(\"sender is not a player in this game\");\r\n        }\r\n        emit GameDestroyed(gameId);\r\n    }\r\n\r\n    /**\r\n     * The winner can claim his winnings, only with a signature from the contract owner.\r\n     * the pot is distributed amongst the winner, the developers, the affiliate partner, a charity and the surprise pot\r\n     * */\r\n    function claimWin(bytes32 gameId, uint8 v, bytes32 r, bytes32 s) public onlyHuman{\r\n        game storage cGame = games[gameId];\r\n        require(cGame.player2!=0x0, \"game has not started yet\");\r\n        require(msg.sender == cGame.player1 || msg.sender == cGame.player2, \"sender is not a player in this game\");\r\n        require(ecrecover(keccak256(abi.encodePacked(gameId, msg.sender)), v, r, s) == signer, \"invalid signature\");\r\n        uint256 value = 2*cGame.stake;\r\n        uint256 win = winnerPercent * value / 1000;\r\n        addScore(msg.sender, cGame.stake);\r\n        delete games[gameId];\r\n        charityPot += value * charityPercent / 1000;\r\n        //players of the leading team do not pay tributes\r\n        if(players[highscoreHolder].team == players[msg.sender].team){\r\n            win += value * highscorePercent / 1000;\r\n        }\r\n        else{\r\n            highscorePot += value * highscorePercent / 1000;\r\n        }\r\n        surprisePot += value * surprisePercent / 1000;\r\n        if(players[msg.sender].referrer == 0x0){\r\n            developerPot += value * (developerPercent + affiliatePercent) / 1000;\r\n        }\r\n        else{\r\n            developerPot += value * developerPercent / 1000;\r\n            affiliateBalance[players[msg.sender].referrer] += value * affiliatePercent / 1000;\r\n        }\r\n        msg.sender.transfer(win);//no overflow possible because stake is <= max uint128, but now we have 256 bit\r\n        emit GameEnd(gameId, msg.sender, win);\r\n    }\r\n\r\n    function addScore(address receiver, uint stake) private{\r\n        player storage rec = players[receiver];\r\n        player storage hsh = players[highscoreHolder];\r\n        if(rec.team == hsh.team){\r\n            if(stake < 0.05 ether) rec.score += 1;\r\n            else if(stake < 0.5 ether) rec.score += 5;\r\n            else rec.score += 10;\r\n        }\r\n        else{//extra points if not belonging to the highscore team\r\n            if(stake < 0.05 ether) rec.score += 2;\r\n            else if(stake < 0.5 ether) rec.score += 7;\r\n            else rec.score += 13;\r\n        }\r\n        if(rec.score > hsh.score){\r\n            uint pot = highscorePot;\r\n            if(pot > 0){\r\n                highscorePot = 0;\r\n                highscoreHolder.transfer(pot);\r\n            }\r\n            highscoreHolder = receiver;\r\n            emit NewHighscore(receiver, rec.score, pot);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * any directly sent ETH are considered a donation for development\r\n     * */\r\n    function() public payable{\r\n        developerPot+=msg.value;\r\n    }\r\n    \r\n    function doNothing(){\r\n        \r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"charity\",\"type\":\"address\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliatePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winnerPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumWait\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highscorePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"killed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highscoreHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityPot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumePlaying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"bytes32\"},{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"team\",\"type\":\"uint8\"}],\"name\":\"joinGameReferred\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doNothing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"surprisePot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highscorePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"signingAddress\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawSurprisePotUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawHighscorePot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"affiliate\",\"type\":\"uint256\"},{\"name\":\"charity\",\"type\":\"uint256\"},{\"name\":\"dev\",\"type\":\"uint256\"},{\"name\":\"highscore\",\"type\":\"uint256\"},{\"name\":\"surprise\",\"type\":\"uint256\"}],\"name\":\"setPercentages\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"permaStop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claimWin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMin\",\"type\":\"uint256\"}],\"name\":\"setMinimumWait\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"team\",\"type\":\"uint8\"}],\"name\":\"initGameTeam\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"bytes32\"},{\"name\":\"team\",\"type\":\"uint8\"}],\"name\":\"joinGameTeam\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"used\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"bytes32\"}],\"name\":\"joinGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawAffiliateBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"surprisePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawDeveloperPot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawSurprisePot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"team\",\"type\":\"uint8\"}],\"name\":\"initGameReferred\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"team\",\"type\":\"uint8\"},{\"name\":\"score\",\"type\":\"uint64\"},{\"name\":\"referrer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopPlaying\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"affiliatePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint128\"},{\"name\":\"player1\",\"type\":\"address\"},{\"name\":\"player2\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"signingAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"NewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"player1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"player2\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"bytes32\"}],\"name\":\"GameDestroyed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GameEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"score\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lastPot\",\"type\":\"uint256\"}],\"name\":\"NewHighscore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pot\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Etherman","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001c797356d91563699e7d7599cc1e0e2efa186e92","Library":"","SwarmSource":"bzzr://be51506e0ade0138b41c7336a8177198bd567a1604d60f6bcfd2beda28e3e927"}]}