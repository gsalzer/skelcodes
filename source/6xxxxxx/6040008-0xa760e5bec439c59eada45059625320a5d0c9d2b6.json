{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// Almacert v.1.0.8\r\n// Universita' degli Studi di Cagliari\r\n// http://www.unica.it\r\n// @authors:\r\n// Flosslab s.r.l. <info@flosslab.com>\r\n\r\ncontract Almacert {\r\n\r\n    uint constant ID_LENGTH = 11;\r\n    uint constant FCODE_LENGTH = 16;\r\n    uint constant SESSION_LENGTH = 10;\r\n\r\n    modifier restricted() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier restrictedToManager() {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n\r\n    struct Student {\r\n        string fCode;\r\n        string session;\r\n        bytes32 hash;\r\n    }\r\n\r\n    address private manager;\r\n    address public owner;\r\n\r\n    mapping(string => Student) private student;\r\n\r\n    constructor() public{\r\n        owner = msg.sender;\r\n        manager = msg.sender;\r\n    }\r\n\r\n    function getHashDigest(string _id) view public returns (string, string, bytes32){\r\n        return (student[_id].fCode, student[_id].session, student[_id].hash);\r\n    }\r\n\r\n    function addStudent(string _id, string _fCode, string _session, bytes32 _hash) restricted public {\r\n        require(student[_id].hash == 0x0);\r\n        student[_id].hash = _hash;\r\n        student[_id].fCode = _fCode;\r\n        student[_id].session = _session;\r\n    }\r\n\r\n    function addStudents(string _ids, string _fCodes, string _sessions, bytes32 [] _hashes, uint _len) restricted public {\r\n        string  memory id;\r\n        string  memory fCode;\r\n        string  memory session;\r\n        for (uint i = 0; i < _len; i++) {\r\n            id = sub_id(_ids, i);\r\n            fCode = sub_fCode(_fCodes, i);\r\n            session = sub_session(_sessions, i);\r\n            addStudent(id, fCode, session, _hashes[i]);\r\n        }\r\n    }\r\n\r\n    function subset(string _source, uint _pos, uint _LENGTH) pure private returns (string) {\r\n        bytes memory strBytes = bytes(_source);\r\n        bytes memory result = new bytes(_LENGTH);\r\n        for (uint i = (_pos * _LENGTH); i < (_pos * _LENGTH + _LENGTH); i++) {\r\n            result[i - (_pos * _LENGTH)] = strBytes[i];\r\n        }\r\n        return string(result);\r\n    }\r\n\r\n    function sub_id(string str, uint pos) pure private returns (string) {\r\n        return subset(str, pos, ID_LENGTH);\r\n    }\r\n\r\n    function sub_fCode(string str, uint pos) pure private returns (string) {\r\n        return subset(str, pos, FCODE_LENGTH);\r\n    }\r\n\r\n    function sub_session(string str, uint pos) pure private returns (string) {\r\n        return subset(str, pos, SESSION_LENGTH);\r\n    }\r\n\r\n    function removeStudent(string _id) restricted public {\r\n        require(student[_id].hash != 0x00);\r\n        student[_id].hash = 0x00;\r\n        student[_id].fCode = '';\r\n        student[_id].session = '';\r\n    }\r\n\r\n    function changeOwner(address _new_owner) restricted public{\r\n        owner = _new_owner;\r\n    }\r\n\r\n    function restoreOwner() restrictedToManager public {\r\n        owner = manager;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"restoreOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_fCode\",\"type\":\"string\"},{\"name\":\"_session\",\"type\":\"string\"},{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"addStudent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ids\",\"type\":\"string\"},{\"name\":\"_fCodes\",\"type\":\"string\"},{\"name\":\"_sessions\",\"type\":\"string\"},{\"name\":\"_hashes\",\"type\":\"bytes32[]\"},{\"name\":\"_len\",\"type\":\"uint256\"}],\"name\":\"addStudents\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_new_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"removeStudent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"getHashDigest\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Almacert","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://73eb71e50e4c0fd793e86744e1c2066896ca295dfb392e5887f4f39905690ff1"}]}