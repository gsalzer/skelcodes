{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract Bob {\r\n  using SafeMath for uint;\r\n\r\n  enum DepositState {\r\n    Uninitialized,\r\n    BobMadeDeposit,\r\n    AliceClaimedDeposit,\r\n    BobClaimedDeposit\r\n  }\r\n\r\n  enum PaymentState {\r\n    Uninitialized,\r\n    BobMadePayment,\r\n    AliceClaimedPayment,\r\n    BobClaimedPayment\r\n  }\r\n\r\n  struct BobDeposit {\r\n    bytes20 depositHash;\r\n    uint64 lockTime;\r\n    DepositState state;\r\n  }\r\n\r\n  struct BobPayment {\r\n    bytes20 paymentHash;\r\n    uint64 lockTime;\r\n    PaymentState state;\r\n  }\r\n\r\n  mapping (bytes32 => BobDeposit) public deposits;\r\n\r\n  mapping (bytes32 => BobPayment) public payments;\r\n\r\n  constructor() public { }\r\n\r\n  function bobMakesEthDeposit(\r\n    bytes32 _txId,\r\n    address _alice,\r\n    bytes20 _bobHash,\r\n    bytes20 _aliceHash,\r\n    uint64 _lockTime\r\n  ) external payable {\r\n    require(_alice != 0x0 && msg.value > 0 && deposits[_txId].state == DepositState.Uninitialized);\r\n    bytes20 depositHash = ripemd160(abi.encodePacked(\r\n      _alice,\r\n      msg.sender,\r\n      _bobHash,\r\n      _aliceHash,\r\n      address(0),\r\n      msg.value\r\n    ));\r\n    deposits[_txId] = BobDeposit(\r\n      depositHash,\r\n      _lockTime,\r\n      DepositState.BobMadeDeposit\r\n    );\r\n  }\r\n\r\n  function bobMakesErc20Deposit(\r\n    bytes32 _txId,\r\n    uint256 _amount,\r\n    address _alice,\r\n    bytes20 _bobHash,\r\n    bytes20 _aliceHash,\r\n    address _tokenAddress,\r\n    uint64 _lockTime\r\n  ) external {\r\n    bytes20 depositHash = ripemd160(abi.encodePacked(\r\n      _alice,\r\n      msg.sender,\r\n      _bobHash,\r\n      _aliceHash,\r\n      _tokenAddress,\r\n      _amount\r\n    ));\r\n    deposits[_txId] = BobDeposit(\r\n      depositHash,\r\n      _lockTime,\r\n      DepositState.BobMadeDeposit\r\n    );\r\n    ERC20 token = ERC20(_tokenAddress);\r\n    assert(token.transferFrom(msg.sender, address(this), _amount));\r\n  }\r\n\r\n  function bobClaimsDeposit(\r\n    bytes32 _txId,\r\n    uint256 _amount,\r\n    bytes32 _bobSecret,\r\n    bytes20 _aliceHash,\r\n    address _alice,\r\n    address _tokenAddress\r\n  ) external {\r\n    require(deposits[_txId].state == DepositState.BobMadeDeposit);\r\n    bytes20 depositHash = ripemd160(abi.encodePacked(\r\n      _alice,\r\n      msg.sender,\r\n      ripemd160(abi.encodePacked(sha256(abi.encodePacked(_bobSecret)))),\r\n      _aliceHash,\r\n      _tokenAddress,\r\n      _amount\r\n    ));\r\n    require(depositHash == deposits[_txId].depositHash && now < deposits[_txId].lockTime);\r\n    deposits[_txId].state = DepositState.BobClaimedDeposit;\r\n    if (_tokenAddress == 0x0) {\r\n      msg.sender.transfer(_amount);\r\n    } else {\r\n      ERC20 token = ERC20(_tokenAddress);\r\n      assert(token.transfer(msg.sender, _amount));\r\n    }\r\n  }\r\n\r\n  function aliceClaimsDeposit(\r\n    bytes32 _txId,\r\n    uint256 _amount,\r\n    bytes32 _aliceSecret,\r\n    address _bob,\r\n    address _tokenAddress,\r\n    bytes20 _bobHash\r\n  ) external {\r\n    require(deposits[_txId].state == DepositState.BobMadeDeposit);\r\n    bytes20 depositHash = ripemd160(abi.encodePacked(\r\n      msg.sender,\r\n      _bob,\r\n      _bobHash,\r\n      ripemd160(abi.encodePacked(sha256(abi.encodePacked(_aliceSecret)))),\r\n      _tokenAddress,\r\n      _amount\r\n    ));\r\n    require(depositHash == deposits[_txId].depositHash && now >= deposits[_txId].lockTime);\r\n    deposits[_txId].state = DepositState.AliceClaimedDeposit;\r\n    if (_tokenAddress == 0x0) {\r\n      msg.sender.transfer(_amount);\r\n    } else {\r\n      ERC20 token = ERC20(_tokenAddress);\r\n      assert(token.transfer(msg.sender, _amount));\r\n    }\r\n  }\r\n\r\n  function bobMakesEthPayment(\r\n    bytes32 _txId,\r\n    address _alice,\r\n    bytes20 _secretHash,\r\n    uint64 _lockTime\r\n  ) external payable {\r\n    require(_alice != 0x0 && msg.value > 0 && payments[_txId].state == PaymentState.Uninitialized);\r\n    bytes20 paymentHash = ripemd160(abi.encodePacked(\r\n      _alice,\r\n      msg.sender,\r\n      _secretHash,\r\n      address(0),\r\n      msg.value\r\n    ));\r\n    payments[_txId] = BobPayment(\r\n      paymentHash,\r\n      _lockTime,\r\n      PaymentState.BobMadePayment\r\n    );\r\n  }\r\n\r\n  function bobMakesErc20Payment(\r\n    bytes32 _txId,\r\n    uint256 _amount,\r\n    address _alice,\r\n    bytes20 _secretHash,\r\n    address _tokenAddress,\r\n    uint64 _lockTime\r\n  ) external {\r\n    require(\r\n      _alice != 0x0 &&\r\n      _amount > 0 &&\r\n      payments[_txId].state == PaymentState.Uninitialized &&\r\n      _tokenAddress != 0x0\r\n    );\r\n    bytes20 paymentHash = ripemd160(abi.encodePacked(\r\n      _alice,\r\n      msg.sender,\r\n      _secretHash,\r\n      _tokenAddress,\r\n      _amount\r\n    ));\r\n    payments[_txId] = BobPayment(\r\n      paymentHash,\r\n      _lockTime,\r\n      PaymentState.BobMadePayment\r\n    );\r\n    ERC20 token = ERC20(_tokenAddress);\r\n    assert(token.transferFrom(msg.sender, address(this), _amount));\r\n  }\r\n\r\n  function bobClaimsPayment(\r\n    bytes32 _txId,\r\n    uint256 _amount,\r\n    address _alice,\r\n    address _tokenAddress,\r\n    bytes20 _secretHash\r\n  ) external {\r\n    require(payments[_txId].state == PaymentState.BobMadePayment);\r\n    bytes20 paymentHash = ripemd160(abi.encodePacked(\r\n      _alice,\r\n      msg.sender,\r\n      _secretHash,\r\n      _tokenAddress,\r\n      _amount\r\n    ));\r\n    require(now >= payments[_txId].lockTime && paymentHash == payments[_txId].paymentHash);\r\n    payments[_txId].state = PaymentState.BobClaimedPayment;\r\n    if (_tokenAddress == 0x0) {\r\n      msg.sender.transfer(_amount);\r\n    } else {\r\n      ERC20 token = ERC20(_tokenAddress);\r\n      assert(token.transfer(msg.sender, _amount));\r\n    }\r\n  }\r\n\r\n  function aliceClaimsPayment(\r\n    bytes32 _txId,\r\n    uint256 _amount,\r\n    bytes32 _secret,\r\n    address _bob,\r\n    address _tokenAddress\r\n  ) external {\r\n    require(payments[_txId].state == PaymentState.BobMadePayment);\r\n    bytes20 paymentHash = ripemd160(abi.encodePacked(\r\n      msg.sender,\r\n      _bob,\r\n      ripemd160(abi.encodePacked(sha256(abi.encodePacked(_secret)))),\r\n      _tokenAddress,\r\n      _amount\r\n    ));\r\n    require(now < payments[_txId].lockTime && paymentHash == payments[_txId].paymentHash);\r\n    payments[_txId].state = PaymentState.AliceClaimedPayment;\r\n    if (_tokenAddress == 0x0) {\r\n      msg.sender.transfer(_amount);\r\n    } else {\r\n      ERC20 token = ERC20(_tokenAddress);\r\n      assert(token.transfer(msg.sender, _amount));\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"paymentHash\",\"type\":\"bytes20\"},{\"name\":\"lockTime\",\"type\":\"uint64\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_secret\",\"type\":\"bytes32\"},{\"name\":\"_bob\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"aliceClaimsPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_alice\",\"type\":\"address\"},{\"name\":\"_bobHash\",\"type\":\"bytes20\"},{\"name\":\"_aliceHash\",\"type\":\"bytes20\"},{\"name\":\"_lockTime\",\"type\":\"uint64\"}],\"name\":\"bobMakesEthDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"depositHash\",\"type\":\"bytes20\"},{\"name\":\"lockTime\",\"type\":\"uint64\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_alice\",\"type\":\"address\"},{\"name\":\"_bobHash\",\"type\":\"bytes20\"},{\"name\":\"_aliceHash\",\"type\":\"bytes20\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_lockTime\",\"type\":\"uint64\"}],\"name\":\"bobMakesErc20Deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_alice\",\"type\":\"address\"},{\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"name\":\"_lockTime\",\"type\":\"uint64\"}],\"name\":\"bobMakesEthPayment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_aliceSecret\",\"type\":\"bytes32\"},{\"name\":\"_bob\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_bobHash\",\"type\":\"bytes20\"}],\"name\":\"aliceClaimsDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_alice\",\"type\":\"address\"},{\"name\":\"_secretHash\",\"type\":\"bytes20\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_lockTime\",\"type\":\"uint64\"}],\"name\":\"bobMakesErc20Payment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_alice\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_secretHash\",\"type\":\"bytes20\"}],\"name\":\"bobClaimsPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_txId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_bobSecret\",\"type\":\"bytes32\"},{\"name\":\"_aliceHash\",\"type\":\"bytes20\"},{\"name\":\"_alice\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"bobClaimsDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Bob","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fb3a5a084278b5edd7536979ad0b8fd612d4eae5caa47c144f1b8ee586d25afa"}]}