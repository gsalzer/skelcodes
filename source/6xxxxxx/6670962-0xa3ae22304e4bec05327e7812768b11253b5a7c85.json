{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n contract Math {\r\n    function add(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function subtract(uint256 x, uint256 y) pure internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n}\r\n\r\ncontract Auth {\r\n    address owner = 0x0;\r\n    address admin = 0x0;\r\n\r\n    modifier isOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier isAdmin {\r\n        require(owner == msg.sender || admin == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    function setOwner(address _owner) isOwner public {\r\n        owner = _owner;\r\n    }\r\n    \r\n    function setAdmin(address _admin) isOwner public {\r\n        admin = _admin;\r\n    }\r\n    \r\n    function getManagers() public view returns (address _owner, address _admin) {\r\n        return (owner, admin);\r\n    }\r\n}\r\n\r\ncontract Manage is Auth {\r\n    \r\n    /**\r\n     *  0 : init, 1 : limited, 2 : running, 3 : finishing\r\n     */\r\n    uint8 public status = 0;\r\n\r\n    modifier isRunning {\r\n        require(status == 2 || owner == msg.sender || admin == msg.sender || (status == 1 && (owner == msg.sender || admin == msg.sender)));\r\n        _;\r\n    }\r\n\r\n    function limit() isAdmin public {\r\n    \trequire(status != 1);\r\n        status = 1;\r\n    }\r\n    \r\n    function start() isAdmin public {\r\n    \trequire(status != 2);\r\n        status = 2;\r\n    }\r\n    \r\n    function close() isAdmin public {\r\n    \trequire(status != 3);\r\n        status = 3;\r\n    }\r\n}\r\n\r\ncontract EIP20Interface {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract TokenBase is EIP20Interface, Manage, Math {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    \r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        admin = msg.sender;\r\n    }\r\n    \r\n    function init(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 tokenDecimals) internal {\r\n        require(status == 0);\r\n        totalSupply = initialSupply * 10 ** uint256(tokenDecimals);\r\n        balances[msg.sender] = totalSupply;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        decimals = tokenDecimals;\r\n        status = 1;\r\n    }\r\n    \r\n    function _transfer(address _from, address _to, uint256 _value) isRunning internal {\r\n    \trequire(0x0 != _to);\r\n        require(balances[_from] >= _value);\r\n        require(balances[_to] + _value >= balances[_to]);\r\n        uint previousBalances = balances[_from] + balances[_to];\r\n        balances[_from] = Math.subtract(balances[_from], _value);\r\n        balances[_to] = Math.add(balances[_to], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balances[_from] + balances[_to] == previousBalances);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        allowed[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) isRunning public returns (bool success) {\r\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function increaseApproval(address _spender, uint256 _value) isRunning public returns (bool success) {\r\n   \t\tallowed[msg.sender][_spender] = Math.add(allowed[msg.sender][_spender], _value);\r\n   \t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n   \t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseApproval(address _spender, uint _value) isRunning public returns (bool success) {\r\n\t   \tuint256 oldValue = allowed[msg.sender][_spender];\r\n\t   \tif (_value >= oldValue) {\r\n\t       allowed[msg.sender][_spender] = 0;\r\n\t   \t} else {\r\n\t       allowed[msg.sender][_spender] = Math.subtract(oldValue, _value);\r\n\t   \t}\r\n\t   \temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\t   \treturn true;\r\n\t}\r\n    \r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);   // Check if the sender has enough\r\n        balances[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balances[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowed[_from][msg.sender]);    // Check allowance\r\n        balances[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowed[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function destruct() isOwner public {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\ncontract Frontier is TokenBase {\r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n    uint8 freezePercent;\r\n    address[] private frozenAddresses;\r\n    mapping (address => uint256) public frozenBalances;\r\n    \r\n    event FrozenBalance(address indexed target, uint256 balance);\r\n    event Price(uint256 newSellPrice, uint256 newBuyPrice);\r\n    \r\n    constructor() TokenBase() public {\r\n        init(15300000000, \"Frontier\", \"FRNT\", 18);\r\n        freezePercent = 100;\r\n        \r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n    \r\n    function _transfer(address _from, address _to, uint256 _value) isRunning internal {\r\n        require(frozenBalances[_from] <= balances[_from] - _value);\r\n        \r\n        super._transfer(_from, _to, _value);\r\n        \r\n        if(status == 1) \r\n        \tfreeze(_to, freezePercent);\r\n    }\r\n    \r\n    function increaseFrozenBalances(address target, uint256 _value) isAdmin public {\r\n        require(_value > 0);\r\n        if(frozenBalances[target] == 0)\r\n        \tfrozenAddresses.push(target);\r\n        \t\r\n        frozenBalances[target] += _value;\r\n        emit FrozenBalance(target, frozenBalances[target]);\r\n    }\r\n    \r\n    function decreaseFrozenBalances(address target, uint256 _value) isAdmin public {\r\n        require(_value > 0 && frozenBalances[target] >= _value);\r\n        frozenBalances[target] -= _value;\r\n        \r\n        if(frozenBalances[target] == 0)\r\n        \tdeleteFrozenAddresses(target);\r\n        \t\r\n        emit FrozenBalance(target, frozenBalances[target]);\r\n    }\r\n    \r\n    function freeze(address target, uint8 percent) isAdmin public {\r\n        require(percent > 0 && percent <= 100);\r\n        if(frozenBalances[target] == 0)\r\n        \tfrozenAddresses.push(target);\r\n        \r\n        uint256 frozenBalance = balances[target] * percent / 100;\r\n        frozenBalances[target] = frozenBalance;\r\n        \r\n        emit FrozenBalance(target, frozenBalance);\r\n    }\r\n    \r\n    function changeFrozenBalanceAll(uint8 percent) isAdmin public {\r\n        uint arrayLength = frozenAddresses.length;\r\n\t\tfor (uint i=0; i<arrayLength; i++) {\r\n\t\t\tuint256 frozenBalance = balances[frozenAddresses[i]] * percent / 100;\r\n        \tfrozenBalances[frozenAddresses[i]] = frozenBalance;\r\n\t\t}\r\n    }\r\n    \r\n    function unfreeze(address target) isAdmin public {\r\n    \tdeleteFrozenAddresses(target);\r\n    \r\n        delete frozenBalances[target];\r\n    }\r\n    \r\n    function deleteFrozenAddresses(address target) private {\r\n    \tuint arrayLength = frozenAddresses.length;\r\n    \tuint indexToBeDeleted;\r\n\t\tfor (uint i=0; i<arrayLength; i++) {\r\n  \t\t\tif (frozenAddresses[i] == target) {\r\n    \t\t\tindexToBeDeleted = i;\r\n    \t\t\tbreak;\r\n  \t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\taddress lastAddress = frozenAddresses[frozenAddresses.length-1];\r\n        frozenAddresses[indexToBeDeleted] = lastAddress;\r\n        frozenAddresses.length--;\r\n    }\r\n    \r\n    function unfreezeAll() isAdmin public {\r\n    \tuint arrayLength = frozenAddresses.length;\r\n\t\tfor (uint i=0; i<arrayLength; i++) {\r\n\t\t\tdelete frozenBalances[frozenAddresses[i]];\r\n\t\t}\r\n        \r\n        delete frozenAddresses;\r\n        frozenAddresses.length = 0;\r\n    }\r\n    \r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) isAdmin public {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n        emit Price(sellPrice, buyPrice);\r\n    }\r\n    \r\n    function buy() payable public {\r\n        require(buyPrice > 0);\r\n        uint amount = msg.value / buyPrice;\r\n        _transfer(this, msg.sender, amount);\r\n    }\r\n    \r\n    function sell(uint256 amount) public {\r\n        require(sellPrice > 0);\r\n        address myAddress = this;\r\n        require(myAddress.balance >= amount * sellPrice);\r\n        _transfer(msg.sender, this, amount);\r\n        msg.sender.transfer(amount * sellPrice);\r\n    }\r\n    \r\n    function setFreezePercent(uint8 percent) isAdmin public {\r\n    \tfreezePercent = percent;\r\n    }\r\n    \r\n    function frozenBalancesOf(address target) public view returns (uint256 balance) {\r\n         return frozenBalances[target];\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint8\"}],\"name\":\"changeFrozenBalanceAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unfreezeAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseFrozenBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"percent\",\"type\":\"uint8\"}],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseFrozenBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"limit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManagers\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint8\"}],\"name\":\"setFreezePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"frozenBalancesOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"FrozenBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"Price\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Frontier","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f3b0ddf7f75c809b3300a654b762f240c351697857f05fed0d7c6fff7fc4449d"}]}