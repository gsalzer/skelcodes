{"status":"1","message":"OK","result":[{"SourceCode":"/* Orgon.Sale */\r\npragma solidity ^0.4.21; //v8 \r\nlibrary SafeMath {\r\n \r\n  /**\r\n   * Add two uint256 values, throw in case of overflow.\r\n   * @param x first value to add\r\n   * @param y second value to add\r\n   * @return x + y\r\n   */\r\n  function add (uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    z = x + y;\r\n    require(z >= x);\r\n    return z;\r\n  }\r\n\r\n  /**\r\n   * Subtract one uint256 value from another, throw in case of underflow.\r\n   * @param x value to subtract from\r\n   * @param y value to subtract\r\n   * @return x - y\r\n   */\r\n  function sub (uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n    require (x >= y);\r\n    z = x - y;\r\n    return z;\r\n  }\r\n\r\n/**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n   \r\n    if (a == 0) return 0;\r\n    c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n  \r\n   /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    c = a / b;\r\n    return c;\r\n  }\r\n}    \r\n    \r\ncontract OrgonToken {\r\n\r\n  /**\r\n   * Get total number of tokens in circulation.\r\n   *\r\n   * @return total number of tokens in circulation\r\n   */\r\n  function totalSupply () public view returns (uint256 supply);\r\n\r\n  /**\r\n   * Get number of tokens currently belonging to given owner.\r\n   *\r\n   * @param _owner address to get number of tokens currently belonging to the\r\n   *        owner of\r\n   * @return number of tokens currently belonging to the owner of given address\r\n   */\r\n  function balanceOf (address _owner) public view returns (uint256 balance);\r\n  \r\n  function theOwner () public view returns (address);\r\n\r\n  /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n\r\n /**\r\n   * Transfer given number of tokens from message sender to given recipient.\r\n   *\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer to the owner of given address\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transfer (address _to, uint256 _value)\r\n  public returns (bool success);\r\n  \r\n  /**\r\n   * Transfer given number of tokens from given owner to given recipient.\r\n   *\r\n   * @param _from address to transfer tokens from the owner of\r\n   * @param _to address to transfer tokens to the owner of\r\n   * @param _value number of tokens to transfer from given owner to given\r\n   *        recipient\r\n   * @return true if tokens were transferred successfully, false otherwise\r\n   */\r\n  function transferFrom (address _from, address _to, uint256 _value)\r\n  public returns (bool success);\r\n\r\n  /**\r\n   * Allow given spender to transfer given number of tokens from message sender.\r\n   *\r\n   * @param _spender address to allow the owner of to transfer tokens from\r\n   *        message sender\r\n   * @param _value number of tokens to allow to transfer\r\n   * @return true if token transfer was successfully approved, false otherwise\r\n   */\r\n  function approve (address _spender, uint256 _value)\r\n  public returns (bool success);\r\n\r\n  /**\r\n   * Tell how many tokens given spender is currently allowed to transfer from\r\n   * given owner.\r\n   *\r\n   * @param _owner address to get number of tokens allowed to be transferred\r\n   *        from the owner of\r\n   * @param _spender address to get number of tokens allowed to be transferred\r\n   *        by the owner of\r\n   * @return number of tokens given spender is currently allowed to transfer\r\n   *         from given owner\r\n   */\r\n  function allowance (address _owner, address _spender)\r\n  public view returns (uint256 remaining);\r\n\r\n/* Owner of the smart contract */\r\n//address public owner;\r\n\r\n  /**\r\n   * Logged when tokens were transferred from one owner to another.\r\n   *\r\n   * @param _from address of the owner, tokens were transferred from\r\n   * @param _to address of the owner, tokens were transferred to\r\n   * @param _value number of tokens transferred\r\n   */\r\n  event Transfer (address indexed _from, address indexed _to, uint256 _value);\r\n\r\n  /**\r\n   * Logged when owner approved his tokens to be transferred by some spender.\r\n   *\r\n   * @param _owner owner who approved his tokens to be transferred\r\n   * @param _spender spender who were allowed to transfer the tokens belonging\r\n   *        to the owner\r\n   * @param _value number of tokens belonging to the owner, approved to be\r\n   *        transferred by the spender\r\n   */\r\n  event Approval (\r\n    address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract OrgonSale {\r\nusing SafeMath for uint256;\r\n    /* Start OrgonMarket */\r\n    function OrgonSale (OrgonToken _orgonToken) public {\r\n        orgonToken = _orgonToken;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    /* Recive ETH */\r\n    function () public payable {\r\n        require (msg.data.length == 0);\r\n        buyTokens ();\r\n    }\r\n    \r\n    function buyTokens () public payable returns (bool success){\r\n        require (msg.value > 0);\r\n        \r\n        uint256 currentMarket;\r\n        currentMarket = orgonToken.balanceOf (this);   \r\n        if (currentMarket == 0) revert (); \r\n        \r\n        uint256 toBuy;\r\n        if (msg.value < ethBound1) {\r\n            toBuy = msg.value.mul(price);\r\n            require (orgonToken.transfer (msg.sender, toBuy));\r\n            \r\n        }\r\n        else if (msg.value < ethBound2) {\r\n            toBuy = msg.value.mul(price1);\r\n            require (orgonToken.transfer (msg.sender, toBuy));\r\n        }    \r\n        else if (msg.value < ethBound3) {\r\n            toBuy = msg.value.mul(price2);\r\n            require (orgonToken.transfer (msg.sender, toBuy));\r\n        }    \r\n        else {\r\n            toBuy = msg.value.mul(price3);\r\n            require (orgonToken.transfer (msg.sender, toBuy));\r\n        }  \r\n        return true;\r\n    }  \r\n    \r\n    function countTokens (uint256 _value) public view returns (uint256 tokens, uint256 _currentMarket){\r\n        require (_value > 0);\r\n        \r\n        uint256 currentMarket;\r\n        currentMarket = orgonToken.balanceOf (this);   \r\n        if (currentMarket == 0) revert (); \r\n        \r\n        uint256 toBuy;\r\n        if (_value < ethBound1) {\r\n            toBuy = _value.mul(price);\r\n            return (toBuy,currentMarket);\r\n        }\r\n        else if (_value < ethBound2) {\r\n            toBuy = _value.mul(price1);\r\n            return (toBuy,currentMarket);\r\n        }    \r\n        else if (_value < ethBound3) {\r\n            toBuy = _value.mul(price2);\r\n           return (toBuy,currentMarket);\r\n        }    \r\n        else {\r\n            toBuy = _value.mul(price3);\r\n            return (toBuy,currentMarket);\r\n        }  \r\n        return (0,currentMarket);\r\n    }  \r\n    \r\n    \r\n    function sendTokens (address _to, uint256 _amount) public returns (bool success){\r\n        \r\n        require (msg.sender == owner);\r\n        require (_to != address(this));\r\n        require (_amount > 0);\r\n        require (orgonToken.transfer (_to, _amount));\r\n        return true;\r\n        \r\n    }\r\n    \r\n    function sendETH (address _to, uint256 _amount) public returns (bool success){\r\n        \r\n        require (msg.sender == owner);\r\n        require (_to != address(this));\r\n        require (_amount > 0);\r\n        _to.transfer (_amount);\r\n        return true;\r\n        \r\n    }\r\n     \r\n    function setPrice(uint256 _newPrice) public {\r\n        require (msg.sender == owner);\r\n        require (_newPrice > 0);\r\n        price = _newPrice;\r\n    }\r\n    function setPrice1(uint256 _newPrice, uint256 _bound1) public {\r\n        require (msg.sender == owner);\r\n        require (_newPrice > 0 && _newPrice > price);\r\n        price1 = _newPrice;\r\n        bound1 = _bound1;\r\n        ethBound1 = bound1.div(price);\r\n    }\r\n     function setPrice2(uint256 _newPrice, uint256 _bound2) public {\r\n        require (msg.sender == owner);\r\n        require (_newPrice > 0 && _newPrice > price1 && _bound2 > bound1);\r\n        price2 = _newPrice;\r\n        bound2 = _bound2;\r\n        ethBound2 = bound2.div(price1);\r\n    }\r\n     function setPrice3(uint256 _newPrice, uint256 _bound3) public {\r\n        require (msg.sender == owner);\r\n        require (_newPrice > 0 && _newPrice > price2 && _bound3 > bound2);\r\n        price3 = _newPrice;\r\n        bound3 = _bound3;\r\n        ethBound3 = bound3.div(price2);\r\n    }\r\n    \r\n    /** Set new owner for the smart contract.\r\n * May only be called by smart contract owner.\r\n * @param _newOwner address of new owner of the smart contract */\r\n \r\n/* *********************************************** */\r\nfunction setOwner (address _newOwner) public {\r\n \r\n    require (msg.sender == owner);\r\n    require (_newOwner != address(this));\r\n    require (_newOwner != address(0x0));\r\n    \r\n    owner = _newOwner;\r\n    \r\n}\r\n \r\n \r\n/* *********************************************** */    \r\n    function getPrice() view public returns (uint256 _price){ return price; }\r\n    function getPrice1() view public returns (uint256 _price1){ return price1; }\r\n    function getPrice2() view public returns (uint256 _price2){ return price2; }\r\n    function getPrice3() view public returns (uint256 _price3){ return price3; }\r\n    \r\n    function getBound1() view public returns (uint256 _bound1){ return bound1; }\r\n    function getBound2() view public returns (uint256 _bound2){ return bound2; }\r\n    function getBound3() view public returns (uint256 _bound3){ return bound3; }\r\n    \r\n    function getEthBound1() view public returns (uint256 _bound1){ return ethBound1; }\r\n    function getEthBound2() view public returns (uint256 _bound2){ return ethBound2; }\r\n    function getEthBound3() view public returns (uint256 _bound3){ return ethBound3; }\r\n    \r\n    function theOwner() view public returns (address _owner){ return owner; }\r\n    \r\n    /** Total number of tokens in circulation */\r\n    uint256 private price;\r\n    uint256 private price1;\r\n    uint256 private price2;\r\n    uint256 private price3;\r\n    \r\n    uint256 private bound1;\r\n    uint256 private bound2;\r\n    uint256 private bound3;\r\n    \r\n    uint256 private ethBound1;\r\n    uint256 private ethBound2;\r\n    uint256 private ethBound3;\r\n    \r\n    /** Owner of the smart contract */\r\n    address private  owner;\r\n    \r\n    /**\r\n    * Orgon Token smart contract.\r\n    */\r\n    OrgonToken internal orgonToken;\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice2\",\"outputs\":[{\"name\":\"_price2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBound3\",\"outputs\":[{\"name\":\"_bound3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBound2\",\"outputs\":[{\"name\":\"_bound2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendETH\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"},{\"name\":\"_bound3\",\"type\":\"uint256\"}],\"name\":\"setPrice3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBound1\",\"outputs\":[{\"name\":\"_bound1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"countTokens\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"_currentMarket\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice1\",\"outputs\":[{\"name\":\"_price1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"},{\"name\":\"_bound2\",\"type\":\"uint256\"}],\"name\":\"setPrice2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"theOwner\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBound1\",\"outputs\":[{\"name\":\"_bound1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBound3\",\"outputs\":[{\"name\":\"_bound3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEthBound2\",\"outputs\":[{\"name\":\"_bound2\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"},{\"name\":\"_bound1\",\"type\":\"uint256\"}],\"name\":\"setPrice1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice3\",\"outputs\":[{\"name\":\"_price3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_orgonToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"OrgonSale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c58603dcd0cfa4b257409dfff6402ab638de99b9","Library":"","SwarmSource":"bzzr://8af2d63bcdf003c485693a36b88e4dfb51e624cd06f00f0fbbff5c646c661b42"}]}