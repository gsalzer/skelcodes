{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n **/\r\ncontract Ownable {\r\n    //using library SafeMath\r\n    using SafeMath for uint;\r\n    \r\n    enum RequestType {\r\n        None,\r\n        Owner,\r\n        CoOwner1,\r\n        CoOwner2\r\n    }\r\n    \r\n    address public owner;\r\n    address coOwner1;\r\n    address coOwner2;\r\n    RequestType requestType;\r\n    address newOwnerRequest;\r\n    \r\n    mapping(address => bool) voterList;\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n     **/\r\n    constructor() public {\r\n      owner = msg.sender;\r\n      coOwner1 = address(0x625789684cE563Fe1f8477E8B3c291855E3470dF);\r\n      coOwner2 = address(0xe80a08C003b0b601964b4c78Fb757506d2640055);\r\n    }\r\n    \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     **/\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n    modifier onlyCoOwner1() {\r\n        require(msg.sender == coOwner1);\r\n        _;\r\n    }\r\n    modifier onlyCoOwner2() {\r\n        require(msg.sender == coOwner2);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     **/\r\n    function transferOwnership(address newOwner) public {\r\n      require(msg.sender == owner || msg.sender == coOwner1 || msg.sender == coOwner2);\r\n      require(newOwner != address(0));\r\n      \r\n      if(msg.sender == owner) {\r\n          requestType = RequestType.Owner;\r\n      }\r\n      else if(msg.sender == coOwner1) {\r\n          requestType = RequestType.CoOwner1;\r\n      }\r\n      else if(msg.sender == coOwner2) {\r\n          requestType = RequestType.CoOwner2;\r\n      }\r\n      newOwnerRequest = newOwner;\r\n      voterList[msg.sender] = true;\r\n    }\r\n    \r\n    function voteChangeOwner(bool isAgree) public {\r\n        require(msg.sender == owner || msg.sender == coOwner1 || msg.sender == coOwner2);\r\n        require(requestType != RequestType.None);\r\n        voterList[msg.sender] = isAgree;\r\n        checkVote();\r\n    }\r\n    \r\n    function checkVote() private {\r\n        uint iYesCount = 0;\r\n        uint iNoCount = 0;\r\n        if(voterList[owner] == true) {\r\n            iYesCount = iYesCount.add(1);\r\n        }\r\n        else {\r\n            iNoCount = iNoCount.add(1);\r\n        }\r\n        if(voterList[coOwner1] == true) {\r\n            iYesCount = iYesCount.add(1);\r\n        }\r\n        else {\r\n            iNoCount = iNoCount.add(1);\r\n        }\r\n        if(voterList[coOwner2] == true) {\r\n            iYesCount = iYesCount.add(1);\r\n        }\r\n        else {\r\n            iNoCount = iNoCount.add(1);\r\n        }\r\n        \r\n        if(iYesCount >= 2) {\r\n            emit OwnershipTransferred(owner, newOwnerRequest);\r\n            if(requestType == RequestType.Owner) {\r\n                owner = newOwnerRequest;\r\n            }\r\n            else if(requestType == RequestType.CoOwner1) {\r\n                coOwner1 = newOwnerRequest;\r\n            }\r\n            else if(requestType == RequestType.CoOwner2) {\r\n                coOwner2 = newOwnerRequest;\r\n            }\r\n            \r\n            newOwnerRequest = address(0);\r\n            requestType = RequestType.None;\r\n        }\r\n        else if(iNoCount >= 2) {\r\n            newOwnerRequest = address(0);\r\n            requestType = RequestType.None;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Configurable\r\n * @dev Configurable varriables of the contract\r\n **/\r\ncontract Configurable {\r\n    uint256 constant cfgPercentDivider = 10000;\r\n    uint256 constant cfgPercentMaxReceive = 30000;\r\n    \r\n    uint256 public cfgMinDepositRequired = 2 * 10**17; //0.2 ETH\r\n    uint256 public cfgMaxDepositRequired = 100*10**18; //100 ETH\r\n    \r\n    uint256 public minReceiveCommission = 2 * 10**16; //0.02 ETH\r\n    uint256 public maxReceiveCommissionPercent = 15000; //150 %\r\n    \r\n    uint256 public supportWaitingTime;\r\n    uint256 public supportPercent;\r\n    uint256 public receiveWaitingTime;\r\n    uint256 public receivePercent;\r\n    \r\n    uint256 public systemFeePercent = 300;          //3%\r\n    address public systemFeeAddress;\r\n    \r\n    uint256 public commissionFeePercent = 300;      //3%\r\n    address public commissionFeeAddress;\r\n    \r\n    uint256 public tokenSupportPercent = 500;       //5%\r\n    address public tokenSupportAddress;\r\n    \r\n    uint256 public directCommissionPercent = 1000;\r\n}\r\n    \r\n/**\r\n * @title EbcFund \r\n * @dev Contract to create the game\r\n **/\r\ncontract EbcFund is Ownable, Configurable {\r\n    \r\n    /**\r\n     * @dev enum\r\n     **/\r\n    enum Stages {\r\n        Preparing,\r\n        Started,\r\n        Paused\r\n    }\r\n    enum GameStatus {\r\n        none,\r\n        processing,\r\n        completed\r\n    }\r\n    \r\n    /**\r\n     * @dev Structs \r\n     **/\r\n    struct Player {\r\n        address parentAddress;\r\n        uint256 totalDeposited;\r\n        uint256 totalAmountInGame;\r\n        uint256 totalReceived;\r\n        uint256 totalCommissionReceived;\r\n        uint lastReceiveCommission;\r\n        bool isKyc;\r\n        uint256 directCommission;\r\n    }\r\n    \r\n    struct Game {\r\n        address playerAddress;\r\n        uint256 depositAmount;\r\n        uint256 receiveAmount;\r\n        GameStatus status;\r\n        //\r\n        uint nextRoundTime;\r\n        uint256 nextRoundAmount;\r\n    }\r\n    \r\n    /**\r\n     * @dev Variables\r\n     **/\r\n    Stages public currentStage;\r\n    address transporter;\r\n    \r\n    /**\r\n     * @dev Events\r\n     **/\r\n    event Logger(string _label, uint256 _note);\r\n    \r\n    /**\r\n     * @dev Mapping\r\n     **/\r\n    mapping(address => bool) public donateList;\r\n    mapping(address => Player) public playerList;\r\n    mapping(uint => Game) public gameList;\r\n    \r\n    /**\r\n     * @dev constructor\r\n     **/\r\n    constructor() public {\r\n        // set configs value\r\n        systemFeeAddress = owner;\r\n        commissionFeeAddress = address(0x4c0037cd34804aB3EB6f54d6596A22A68b05c8CF);\r\n        tokenSupportAddress = address(0xC739c85ffE468fA7a6f2B8A005FF0eacAb4D5f0e);\r\n        //\r\n        supportWaitingTime = 20*86400;//20 days\r\n        supportPercent = 70;//0.7%\r\n        receiveWaitingTime = 5*86400;//5 days\r\n        receivePercent = 10;//0.1%\r\n        // \r\n        currentStage = Stages.Preparing;\r\n        //\r\n        donateList[owner] = true;\r\n        donateList[commissionFeeAddress] = true;\r\n        donateList[tokenSupportAddress] = true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Modifiers\r\n     **/\r\n    modifier onlyPreparing() {\r\n        require (currentStage == Stages.Preparing);\r\n        _;\r\n    }\r\n    modifier onlyStarted() {\r\n        require (currentStage == Stages.Started);\r\n        _;\r\n    }\r\n    modifier onlyPaused() {\r\n        require (currentStage == Stages.Paused);\r\n        _;\r\n    }\r\n    \r\n/* payments */\r\n    /**\r\n     * @dev fallback function to send ether to smart contract\r\n     **/\r\n    function () public payable {\r\n        require(currentStage == Stages.Started);\r\n        require(cfgMinDepositRequired <= msg.value && msg.value <= cfgMaxDepositRequired);\r\n        \r\n        if(donateList[msg.sender] == false) {\r\n            if(transporter != address(0) && msg.sender == transporter) {\r\n                //validate msg.data\r\n                if(msg.data.length > 0) {\r\n                    //init new game\r\n                    processDeposit(bytesToAddress(msg.data));\r\n                }\r\n                else {\r\n                     emit Logger(\"Thank you for your contribution!.\", msg.value);\r\n                }\r\n            }\r\n            else {\r\n                //init new game\r\n                processDeposit(msg.sender);\r\n            }\r\n        }\r\n        else {\r\n            emit Logger(\"Thank you for your contribution!\", msg.value);\r\n        }\r\n    }\r\n    \r\n/* administrative functions */\r\n    /**\r\n     * @dev get transporter address\r\n     **/\r\n    function getTransporter() public view onlyOwner returns(address) {\r\n        return transporter;\r\n    }\r\n\r\n    /**\r\n     * @dev update \"transporter\"\r\n     **/\r\n    function updateTransporter(address _address) public onlyOwner{\r\n        require (_address != address(0));\r\n        transporter = _address;\r\n    }\r\n    \r\n    /**\r\n     * @dev update \"donateList\"\r\n     **/\r\n    function updateDonator(address _address, bool _isDonator) public onlyOwner{\r\n        donateList[_address] = _isDonator;\r\n    }\r\n    \r\n    /**\r\n     * @dev update config \"systemFeeAddress\"\r\n     **/\r\n    function updateSystemAddress(address _address) public onlyOwner{\r\n        require(_address != address(0) && _address != systemFeeAddress);\r\n        //\r\n        systemFeeAddress = _address;\r\n    }\r\n    \r\n    /**\r\n     * @dev update config \"systemFeePercent\"\r\n     **/\r\n    function updateSystemFeePercent(uint256 _percent) public onlyOwner{\r\n        require(0 < _percent && _percent != systemFeePercent && _percent <= 500); //maximum is 5%\r\n        systemFeePercent = _percent;\r\n    }\r\n    \r\n    /**\r\n     * @dev update config \"commissionFeeAddress\"\r\n     **/\r\n    function updateCommissionAddress(address _address) public onlyOwner{\r\n        require(_address != address(0) && _address != commissionFeeAddress);\r\n        //\r\n        commissionFeeAddress = _address;\r\n    }\r\n    \r\n    /**\r\n     * @dev update config \"commissionFeePercent\"\r\n     **/\r\n    function updateCommissionFeePercent(uint256 _percent) public onlyOwner{\r\n        require(0 < _percent && _percent != commissionFeePercent && _percent <= 500); //maximum is 5%\r\n        commissionFeePercent = _percent;\r\n    }\r\n    \r\n    /**\r\n     * @dev update config \"tokenSupportAddress\"\r\n     **/\r\n    function updateTokenSupportAddress(address _address) public onlyOwner{\r\n        require(_address != address(0) && _address != tokenSupportAddress);\r\n        //\r\n        tokenSupportAddress = _address;\r\n    }\r\n    \r\n    /**\r\n     * @dev update config \"tokenSupportPercent\"\r\n     **/\r\n    function updateTokenSupportPercent(uint256 _percent) public onlyOwner{\r\n        require(0 < _percent && _percent != tokenSupportPercent && _percent <= 1000); //maximum is 10%\r\n        tokenSupportPercent = _percent;\r\n    }\r\n    \r\n    /**\r\n     * @dev update config \"directCommissionPercent\"\r\n     **/\r\n    function updateDirectCommissionPercent(uint256 _percent) public onlyOwner{\r\n        require(0 < _percent && _percent != directCommissionPercent && _percent <= 2000); //maximum is 20%\r\n        directCommissionPercent = _percent;\r\n    }\r\n    \r\n    /**\r\n     * @dev update config \"cfgMinDepositRequired\"\r\n     **/\r\n    function updateMinDeposit(uint256 _amount) public onlyOwner{\r\n        require(0 < _amount && _amount < cfgMaxDepositRequired);\r\n        require(_amount != cfgMinDepositRequired);\r\n        //\r\n        cfgMinDepositRequired = _amount;\r\n    }\r\n    \r\n    /**\r\n     * @dev update config \"cfgMaxDepositRequired\"\r\n     **/\r\n    function updateMaxDeposit(uint256 _amount) public onlyOwner{\r\n        require(cfgMinDepositRequired < _amount && _amount != cfgMaxDepositRequired);\r\n        //\r\n        cfgMaxDepositRequired = _amount;\r\n    }\r\n    \r\n    /**\r\n     * @dev update config \"minReceiveCommission\"\r\n     **/\r\n    function updateMinReceiveCommission(uint256 _amount) public onlyOwner{\r\n        require(0 < _amount && _amount != minReceiveCommission);\r\n        minReceiveCommission = _amount;\r\n    }\r\n    \r\n    /**\r\n     * @dev update config \"maxReceiveCommissionPercent\"\r\n     **/\r\n    function updateMaxReceiveCommissionPercent(uint256 _percent) public onlyOwner{\r\n        require(5000 <= _percent && _percent <= 20000); //require from 50% to 200%\r\n        //\r\n        maxReceiveCommissionPercent = _percent;\r\n    }\r\n    \r\n    /**\r\n     * @dev update config \"supportWaitingTime\"\r\n     **/\r\n    function updateSupportWaitingTime(uint256 _time) public onlyOwner{\r\n        require(86400 <= _time);\r\n        require(_time != supportWaitingTime);\r\n        //\r\n        supportWaitingTime = _time;\r\n    }\r\n    \r\n    /**\r\n     * @dev update config \"supportPercent\"\r\n     **/\r\n    function updateSupportPercent(uint256 _percent) public onlyOwner{\r\n        require(0 < _percent && _percent < 1000);\r\n        require(_percent != supportPercent);\r\n        //\r\n        supportPercent = _percent;\r\n    }\r\n    \r\n    /**\r\n     * @dev update config \"receiveWaitingTime\"\r\n     **/\r\n    function updateReceiveWaitingTime(uint256 _time) public onlyOwner{\r\n        require(86400 <= _time);\r\n        require(_time != receiveWaitingTime);\r\n        //\r\n        receiveWaitingTime = _time;\r\n    }\r\n    \r\n    /**\r\n     * @dev update config \"receivePercent\"\r\n     **/\r\n    function updateRecivePercent(uint256 _percent) public onlyOwner{\r\n        require(0 < _percent && _percent < 1000);\r\n        require(_percent != receivePercent);\r\n        //\r\n        receivePercent = _percent;\r\n    }\r\n    \r\n    /**\r\n     * @dev update parent address\r\n     **/\r\n    function updatePlayerParent(address[] _address, address[] _parentAddress) public onlyOwner{\r\n        \r\n        for(uint i = 0; i < _address.length; i++) {\r\n            require(_address[i] != address(0));\r\n            require(_parentAddress[i] != address(0));\r\n            require(_address[i] != _parentAddress[i]);\r\n            \r\n            Player storage currentPlayer = playerList[_address[i]];\r\n            //\r\n            currentPlayer.parentAddress = _parentAddress[i];\r\n            if(0 < currentPlayer.directCommission && currentPlayer.directCommission < address(this).balance) {\r\n                uint256 comAmount = currentPlayer.directCommission;\r\n                currentPlayer.directCommission = 0;\r\n                //Logger\r\n                emit Logger(\"Send direct commission\", comAmount);\r\n                //send direct commission\r\n                _parentAddress[i].transfer(comAmount);\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @dev update kyc\r\n     **/\r\n    function updatePlayerKyc(address[] _address, bool[] _isKyc) public onlyOwner{\r\n        \r\n        for(uint i = 0; i < _address.length; i++) {\r\n            require(_address[i] != address(0));\r\n            //\r\n            playerList[_address[i]].isKyc = _isKyc[i];\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev start game\r\n     **/\r\n    function startGame() public onlyOwner {\r\n        require(currentStage == Stages.Preparing || currentStage == Stages.Paused);\r\n        currentStage = Stages.Started;\r\n    }\r\n    \r\n    /**\r\n     * @dev pause game\r\n     **/\r\n    function pauseGame() public onlyOwner onlyStarted {\r\n        currentStage = Stages.Paused;\r\n    }\r\n    \r\n    /**\r\n     * @dev insert multi games\r\n     **/\r\n    function importPlayers(\r\n        address[] _playerAddress, \r\n        address[] _parentAddress,\r\n        uint256[] _totalDeposited,\r\n        uint256[] _totalReceived,\r\n        uint256[] _totalCommissionReceived,\r\n        bool[] _isKyc) public onlyOwner onlyPreparing {\r\n            \r\n            for(uint i = 0; i < _playerAddress.length; i++) {\r\n                processImportPlayer(\r\n                    _playerAddress[i], \r\n                    _parentAddress[i],\r\n                    _totalDeposited[i],\r\n                    _totalReceived[i],\r\n                    _totalCommissionReceived[i],\r\n                    _isKyc[i]);\r\n            }\r\n            \r\n        }\r\n    \r\n    function importGames(\r\n        address[] _playerAddress,\r\n        uint[] _gameHash,\r\n        uint256[] _gameAmount,\r\n        uint256[] _gameReceived) public onlyOwner onlyPreparing {\r\n            \r\n            for(uint i = 0; i < _playerAddress.length; i++) {\r\n                processImportGame(\r\n                    _playerAddress[i], \r\n                    _gameHash[i],\r\n                    _gameAmount[i],\r\n                    _gameReceived[i]);\r\n            }\r\n            \r\n        }\r\n    \r\n    /**\r\n     * @dev confirm game information\r\n     **/  \r\n    function confirmGames(address[] _playerAddress, uint[] _gameHash, uint256[] _gameAmount) public onlyCoOwner1 onlyStarted {\r\n        \r\n        for(uint i = 0; i < _playerAddress.length; i++) {\r\n            confirmGame(_playerAddress[i], _gameHash[i], _gameAmount[i]);\r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @dev confirm game information\r\n     **/  \r\n    function confirmGame(address _playerAddress, uint _gameHash, uint256 _gameAmount) public onlyCoOwner1 onlyStarted {\r\n        //validate _gameHash\r\n        require(100000000000 <= _gameHash && _gameHash <= 999999999999);\r\n        //validate player information\r\n        Player storage currentPlayer = playerList[_playerAddress];\r\n        require(cfgMinDepositRequired <= playerList[_playerAddress].totalDeposited);\r\n        assert(currentPlayer.totalDeposited <= currentPlayer.totalAmountInGame.add(_gameAmount));\r\n        //update player information\r\n        currentPlayer.totalAmountInGame = currentPlayer.totalAmountInGame.add(_gameAmount);\r\n        //init game\r\n        initGame(_playerAddress, _gameHash, _gameAmount, 0);\r\n        //Logger\r\n        emit Logger(\"Game started\", _gameAmount);\r\n    }\r\n    \r\n    /**\r\n     * @dev process send direct commission missing\r\n     **/\r\n    function sendMissionDirectCommission(address _address) public onlyCoOwner2 onlyStarted {\r\n        \r\n        require(donateList[_address] == false);\r\n        require(playerList[_address].parentAddress != address(0));\r\n        require(playerList[_address].directCommission > 0);\r\n        \r\n        Player memory currentPlayer = playerList[_address];\r\n        if(0 < currentPlayer.directCommission && currentPlayer.directCommission < address(this).balance) {\r\n            uint256 comAmount = currentPlayer.directCommission;\r\n            playerList[_address].directCommission = 0;\r\n            //Logger\r\n            emit Logger(\"Send direct commission\", comAmount);\r\n            //send direct commission\r\n            currentPlayer.parentAddress.transfer(comAmount);\r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @dev process send commission\r\n     **/\r\n    function sendCommission(address _address, uint256 _amountCom) public onlyCoOwner2 onlyStarted {\r\n        \r\n        require(donateList[_address] == false);\r\n        require(minReceiveCommission <= _amountCom && _amountCom < address(this).balance);\r\n        require(playerList[_address].isKyc == true);\r\n        require(playerList[_address].lastReceiveCommission.add(86400) < now);\r\n        \r\n        //current player\r\n        Player storage currentPlayer = playerList[_address];\r\n        //\r\n        uint256 maxCommissionAmount = getMaximumCommissionAmount(\r\n            currentPlayer.totalAmountInGame, \r\n            currentPlayer.totalReceived, \r\n            currentPlayer.totalCommissionReceived, \r\n            _amountCom);\r\n        if(maxCommissionAmount > 0) {\r\n            //update total receive\r\n            currentPlayer.totalReceived = currentPlayer.totalReceived.add(maxCommissionAmount);\r\n            currentPlayer.totalCommissionReceived = currentPlayer.totalCommissionReceived.add(maxCommissionAmount);\r\n            currentPlayer.lastReceiveCommission = now;\r\n            //fee commission\r\n            uint256 comFee = maxCommissionAmount.mul(commissionFeePercent).div(cfgPercentDivider);\r\n            //Logger\r\n            emit Logger(\"Send commission successfully\", _amountCom);\r\n            \r\n            if(comFee > 0) {\r\n                maxCommissionAmount = maxCommissionAmount.sub(comFee);\r\n                //send commission to store address\r\n                commissionFeeAddress.transfer(comFee);\r\n            }\r\n            if(maxCommissionAmount > 0) {\r\n                //send eth\r\n                _address.transfer(maxCommissionAmount);\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @dev process send profit in game\r\n     **/\r\n    function sendProfits(\r\n        uint[] _gameHash,\r\n        uint256[] _profitAmount) public onlyCoOwner2 onlyStarted {\r\n            \r\n            for(uint i = 0; i < _gameHash.length; i++) {\r\n                sendProfit(_gameHash[i], _profitAmount[i]);\r\n            }\r\n            \r\n        }\r\n    \r\n    /**\r\n     * @dev process send profit in game\r\n     **/\r\n    function sendProfit(\r\n        uint _gameHash,\r\n        uint256 _profitAmount) public onlyCoOwner2 onlyStarted {\r\n            \r\n            //validate game information\r\n            Game memory game = gameList[_gameHash];\r\n            require(game.status == GameStatus.processing);\r\n            require(0 < _profitAmount && _profitAmount <= game.nextRoundAmount && _profitAmount < address(this).balance);\r\n            require(now <= game.nextRoundTime);\r\n            //validate player information\r\n            Player memory currentPlayer = playerList[gameList[_gameHash].playerAddress];\r\n            assert(currentPlayer.isKyc == true);\r\n            //do sendProfit\r\n            processSendProfit(_gameHash, _profitAmount);\r\n            \r\n        }\r\n    \r\n/* public functions */\r\n    \r\n/* private functions */\r\n    /**\r\n     * @dev process new game by deposit\r\n     **/\r\n    function processDeposit(address _address) private {\r\n        \r\n        //update player information\r\n        Player storage currentPlayer = playerList[_address];\r\n        currentPlayer.totalDeposited = currentPlayer.totalDeposited.add(msg.value);\r\n        \r\n        //Logger\r\n        emit Logger(\"Game deposited\", msg.value);\r\n        \r\n        //send token support\r\n        uint256 tokenSupportAmount = tokenSupportPercent.mul(msg.value).div(cfgPercentDivider);\r\n        if(tokenSupportPercent > 0) {\r\n            tokenSupportAddress.transfer(tokenSupportAmount);\r\n        }\r\n        \r\n        //send parent address\r\n        uint256 directComAmount = directCommissionPercent.mul(msg.value).div(cfgPercentDivider);\r\n        if(currentPlayer.parentAddress != address(0)) {\r\n            currentPlayer.parentAddress.transfer(directComAmount);\r\n        }\r\n        else {\r\n            currentPlayer.directCommission = currentPlayer.directCommission.add(directComAmount);\r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @dev convert bytes to address\r\n     **/\r\n    function bytesToAddress(bytes b) public pure returns (address) {\r\n\r\n        uint result = 0;\r\n        for (uint i = 0; i < b.length; i++) {\r\n            uint c = uint(b[i]);\r\n            if (c >= 48 && c <= 57) {\r\n                result = result * 16 + (c - 48);\r\n            }\r\n            if(c >= 65 && c<= 90) {\r\n                result = result * 16 + (c - 55);\r\n            }\r\n            if(c >= 97 && c<= 122) {\r\n                result = result * 16 + (c - 87);\r\n            }\r\n        }\r\n        return address(result);\r\n          \r\n    }\r\n    \r\n    /**\r\n     * @dev process import player information\r\n     **/ \r\n    function processImportPlayer(\r\n        address _playerAddress, \r\n        address _parentAddress, \r\n        uint256 _totalDeposited,\r\n        uint256 _totalReceived,\r\n        uint256 _totalCommissionReceived,\r\n        bool _isKyc) private {\r\n            \r\n            //update player information\r\n            Player storage currentPlayer = playerList[_playerAddress];\r\n            currentPlayer.parentAddress = _parentAddress;\r\n            currentPlayer.totalDeposited = _totalDeposited;\r\n            currentPlayer.totalReceived = _totalReceived;\r\n            currentPlayer.totalCommissionReceived = _totalCommissionReceived;\r\n            currentPlayer.isKyc = _isKyc;\r\n            \r\n            //Logger\r\n            emit Logger(\"Player imported\", _totalDeposited);\r\n            \r\n        }\r\n     \r\n    /**\r\n     * @dev process import game information\r\n     **/ \r\n    function processImportGame(\r\n        address _playerAddress, \r\n        uint _gameHash,\r\n        uint256 _gameAmount,\r\n        uint256 _gameReceived) private {\r\n            \r\n            //update player information\r\n            Player storage currentPlayer = playerList[_playerAddress];\r\n            currentPlayer.totalAmountInGame = currentPlayer.totalAmountInGame.add(_gameAmount);\r\n            currentPlayer.totalReceived = currentPlayer.totalReceived.add(_gameReceived);\r\n            \r\n            //init game\r\n            initGame(_playerAddress, _gameHash, _gameAmount, _gameReceived);\r\n            \r\n            //Logger\r\n            emit Logger(\"Game imported\", _gameAmount);\r\n            \r\n        }\r\n     \r\n    /**\r\n     * @dev init new game\r\n     **/ \r\n    function initGame(\r\n        address _playerAddress,\r\n        uint _gameHash,\r\n        uint256 _gameAmount,\r\n        uint256 _gameReceived) private {\r\n            \r\n            Game storage game = gameList[_gameHash];\r\n            game.playerAddress = _playerAddress;\r\n            game.depositAmount = _gameAmount;\r\n            game.receiveAmount = _gameReceived;\r\n            game.status = GameStatus.processing;\r\n            game.nextRoundTime = now.add(supportWaitingTime);\r\n            game.nextRoundAmount = getProfitNextRound(_gameAmount);\r\n            \r\n        }\r\n    \r\n    /**\r\n     * @dev process check & send profit\r\n     **/\r\n    function processSendProfit(\r\n        uint _gameHash,\r\n        uint256 _profitAmount) private {\r\n        \r\n            Game storage game = gameList[_gameHash];\r\n            Player storage currentPlayer = playerList[game.playerAddress];\r\n            \r\n            //total receive by game\r\n            uint256 maxGameReceive = game.depositAmount.mul(cfgPercentMaxReceive).div(cfgPercentDivider);\r\n            //total receive by player\r\n            uint256 maxPlayerReceive = currentPlayer.totalAmountInGame.mul(cfgPercentMaxReceive).div(cfgPercentDivider);\r\n            \r\n            if(maxGameReceive <= game.receiveAmount || maxPlayerReceive <= currentPlayer.totalReceived) {\r\n                emit Logger(\"ERR: Player cannot break game's rule [amount].\", currentPlayer.totalReceived);\r\n                game.status = GameStatus.completed;\r\n            }\r\n            else {\r\n                if(maxGameReceive < game.receiveAmount.add(_profitAmount)) {\r\n                    _profitAmount = maxGameReceive.sub(game.receiveAmount);\r\n                }\r\n                if(maxPlayerReceive < currentPlayer.totalReceived.add(_profitAmount)) {\r\n                    _profitAmount = maxPlayerReceive.sub(currentPlayer.totalReceived);\r\n                }\r\n                \r\n                //update game totalReceived\r\n                game.receiveAmount = game.receiveAmount.add(_profitAmount);\r\n                game.nextRoundTime = now.add(supportWaitingTime);\r\n                game.nextRoundAmount = getProfitNextRound(game.depositAmount);\r\n                \r\n                //Logger\r\n                emit Logger(\"Info: send profit\", _profitAmount);\r\n                \r\n                //update player total received \r\n                currentPlayer.totalReceived = currentPlayer.totalReceived.add(_profitAmount);\r\n                \r\n                //send systemFeeAddress\r\n                uint256 feeAmount = systemFeePercent.mul(_profitAmount).div(cfgPercentDivider);\r\n                if(feeAmount > 0) {\r\n                    _profitAmount = _profitAmount.sub(feeAmount);\r\n                    //send fee\r\n                    systemFeeAddress.transfer(feeAmount);\r\n                }\r\n                \r\n                //send profit\r\n                game.playerAddress.transfer(_profitAmount);\r\n            }\r\n            \r\n        }\r\n    \r\n    /**\r\n     * @dev get profit next round\r\n     **/\r\n    function getProfitNextRound(uint256 _amount) private constant returns(uint256) {\r\n        \r\n        uint256 support = supportPercent.mul(supportWaitingTime);\r\n        uint256 receive = receivePercent.mul(receiveWaitingTime);\r\n        uint256 totalPercent = support.add(receive);\r\n        //\r\n        return _amount.mul(totalPercent).div(cfgPercentDivider).div(86400);\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @dev get maximum amount commission avariable\r\n     **/\r\n    function getMaximumCommissionAmount(\r\n        uint256 _totalDeposited,\r\n        uint256 _totalReceived,\r\n        uint256 _totalCommissionReceived,\r\n        uint256 _amountCom) private returns(uint256) {\r\n        \r\n        //maximum commission can receive\r\n        uint256 maxCommissionAmount = _totalDeposited.mul(maxReceiveCommissionPercent).div(cfgPercentDivider);\r\n        //check total receive commission\r\n        if(maxCommissionAmount <= _totalCommissionReceived) {\r\n            emit Logger(\"Not enough balance [total commission receive]\", _totalCommissionReceived);\r\n            return 0;\r\n        }\r\n        else if(maxCommissionAmount < _totalCommissionReceived.add(_amountCom)) {\r\n            _amountCom = maxCommissionAmount.sub(_totalCommissionReceived);\r\n        }\r\n        //check player total maxout\r\n        uint256 maxProfitCanReceive = _totalDeposited.mul(cfgPercentMaxReceive).div(cfgPercentDivider);\r\n        if(maxProfitCanReceive <= _totalReceived) {\r\n            emit Logger(\"Not enough balance [total maxout receive]\", _totalReceived);\r\n            return 0;\r\n        }\r\n        else if(maxProfitCanReceive < _totalReceived.add(_amountCom)) {\r\n            _amountCom = maxProfitCanReceive.sub(_totalReceived);\r\n        }\r\n        \r\n        return _amountCom;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerList\",\"outputs\":[{\"name\":\"parentAddress\",\"type\":\"address\"},{\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"name\":\"totalAmountInGame\",\"type\":\"uint256\"},{\"name\":\"totalReceived\",\"type\":\"uint256\"},{\"name\":\"totalCommissionReceived\",\"type\":\"uint256\"},{\"name\":\"lastReceiveCommission\",\"type\":\"uint256\"},{\"name\":\"isKyc\",\"type\":\"bool\"},{\"name\":\"directCommission\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address[]\"},{\"name\":\"_isKyc\",\"type\":\"bool[]\"}],\"name\":\"updatePlayerKyc\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"isAgree\",\"type\":\"bool\"}],\"name\":\"voteChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTransporter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address[]\"},{\"name\":\"_gameHash\",\"type\":\"uint256[]\"},{\"name\":\"_gameAmount\",\"type\":\"uint256[]\"},{\"name\":\"_gameReceived\",\"type\":\"uint256[]\"}],\"name\":\"importGames\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_isDonator\",\"type\":\"bool\"}],\"name\":\"updateDonator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateMaxReceiveCommissionPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"systemFeeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"updateSupportWaitingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"bytesToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateMinReceiveCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minReceiveCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfgMaxDepositRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateRecivePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateTransporter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateCommissionFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateCommissionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address[]\"},{\"name\":\"_parentAddress\",\"type\":\"address[]\"}],\"name\":\"updatePlayerParent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameHash\",\"type\":\"uint256\"},{\"name\":\"_profitAmount\",\"type\":\"uint256\"}],\"name\":\"sendProfit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"systemFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address[]\"},{\"name\":\"_gameHash\",\"type\":\"uint256[]\"},{\"name\":\"_gameAmount\",\"type\":\"uint256[]\"}],\"name\":\"confirmGames\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfgMinDepositRequired\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupportPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateDirectCommissionPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receivePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address\"},{\"name\":\"_gameHash\",\"type\":\"uint256\"},{\"name\":\"_gameAmount\",\"type\":\"uint256\"}],\"name\":\"confirmGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateSupportPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateMinDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateMaxDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"directCommissionPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateTokenSupportPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"donateList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_amountCom\",\"type\":\"uint256\"}],\"name\":\"sendCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxReceiveCommissionPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSupportAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameList\",\"outputs\":[{\"name\":\"playerAddress\",\"type\":\"address\"},{\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"name\":\"receiveAmount\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"nextRoundTime\",\"type\":\"uint256\"},{\"name\":\"nextRoundAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportWaitingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"updateReceiveWaitingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameHash\",\"type\":\"uint256[]\"},{\"name\":\"_profitAmount\",\"type\":\"uint256[]\"}],\"name\":\"sendProfits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateTokenSupportAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateSystemAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionFeeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_playerAddress\",\"type\":\"address[]\"},{\"name\":\"_parentAddress\",\"type\":\"address[]\"},{\"name\":\"_totalDeposited\",\"type\":\"uint256[]\"},{\"name\":\"_totalReceived\",\"type\":\"uint256[]\"},{\"name\":\"_totalCommissionReceived\",\"type\":\"uint256[]\"},{\"name\":\"_isKyc\",\"type\":\"bool[]\"}],\"name\":\"importPlayers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiveWaitingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"updateSystemFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"sendMissionDirectCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_label\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_note\",\"type\":\"uint256\"}],\"name\":\"Logger\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EbcFund","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5101c8105b3ad48ceb8364159d2453e15e83d2a3e4a4da040b06daa89d957e6d"}]}