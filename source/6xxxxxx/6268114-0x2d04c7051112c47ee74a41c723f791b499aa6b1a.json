{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/**\r\n * Copyright YHT Community.\r\n * This software is copyrighted by the YHT community.\r\n * Prohibits any unauthorized copying and modification.\r\n * It is allowed through ABI calls.\r\n */\r\n \r\n//==============================================================================\r\n// Begin: This part comes from openzeppelin-solidity\r\n//        https://github.com/OpenZeppelin/openzeppelin-solidity\r\n//============================================================================== \r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Standard Burnable Token\r\n * @dev Adds burnFrom method to ERC20 implementations\r\n */\r\ncontract StandardBurnableToken is BurnableToken, StandardToken {\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _value uint256 The amount of token to be burned\r\n   */\r\n  function burnFrom(address _from, uint256 _value) public {\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    _burn(_from, _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n//==============================================================================\r\n// End: This part comes from openzeppelin-solidity\r\n//============================================================================== \r\n\r\n\r\n/**\r\n * @dev Lottery Interface  \r\n */ \r\ncontract LotteryInterface {\r\n  function checkLastMintData(address addr) external;   \r\n  function getLastMintAmount(address addr) view external returns(uint256, uint256);\r\n  function getReferrerEarnings(address addr) view external returns(uint256);\r\n  function checkReferrerEarnings(address addr) external;\r\n  function deposit() public payable;\r\n}\r\n\r\n/**\r\n * @title YHT Token\r\n * @dev The initial total is zero, which can only be produced by mining, halved production per 314 cycles.\r\n * After call startMinting function, no one can pause it.\r\n * All the people who hold it will enjoy the dividends.\r\n * See the YHT whitepaper to get more information.\r\n * https://github.com/ethergame/whitepaper\r\n */\r\ncontract YHToken is StandardBurnableToken, Ownable {\r\n  string public constant name = \"YHToken\";\r\n  string public constant symbol = \"YHT\";\r\n  uint8 public constant decimals = 18;\r\n  \r\n  uint256 constant private kAutoCombineBonusesCount = 50;           // if the last two balance snapshot records are not far apart, they will be merged automatically.\r\n  \r\n  struct Bonus {                                                                    \r\n    uint256 payment;                                                // payment of dividends\r\n    uint256 currentTotalSupply;                                     // total supply at the payment time point  \r\n  }\r\n  \r\n  struct BalanceSnapshot {\r\n    uint256 balance;                                                // balance of snapshot     \r\n    uint256 bonusIdBegin;                                           // begin of bonusId\r\n    uint256 bonusIdEnd;                                             // end of bonusId\r\n  }\r\n  \r\n  struct User {\r\n    uint256 extraEarnings;                                              \r\n    uint256 bonusEarnings;\r\n    BalanceSnapshot[] snapshots;                                    // the balance snapshot array\r\n    uint256 snapshotsLength;                                        // the length of balance snapshot array    \r\n  }\r\n  \r\n  LotteryInterface public Lottery;\r\n  uint256 public bonusRoundId_;                                     // next bonus id\r\n  mapping(address => User) public users_;                           // user informations\r\n  mapping(uint256 => Bonus) public bonuses_;                        // the records of all bonuses\r\n    \r\n  event Started(address lottery);\r\n  event AddTotalSupply(uint256 addValue, uint256 total);\r\n  event AddExtraEarnings(address indexed from, address indexed to, uint256 amount);\r\n  event AddBonusEarnings(address indexed from, uint256 amount, uint256 bonusId, uint256 currentTotalSupply);\r\n  event Withdraw(address indexed addr, uint256 amount);\r\n\r\n  constructor() public {\r\n    totalSupply_ = 0;      //initial is 0\r\n    bonusRoundId_ = 1;\r\n  }\r\n\r\n  /**\r\n   * @dev only the lottery contract can transfer earnings\r\n   */\r\n  modifier isLottery() {\r\n    require(msg.sender == address(Lottery)); \r\n    _;\r\n  }\r\n  \r\n  /**\r\n   * @dev Function to start. just start once.\r\n   */\r\n  function start(address lottery) onlyOwner public {\r\n    require(Lottery == address(0));\r\n    Lottery = LotteryInterface(lottery);\r\n    emit Started(lottery);\r\n  }\r\n  \r\n  /**\r\n   * @dev record a snapshot of balance\r\n   * with the bonuses information can accurately calculate the earnings \r\n   */ \r\n  function balanceSnapshot(address addr, uint256 bonusRoundId) private {\r\n    uint256 currentBalance = balances[addr];     \r\n    User storage user = users_[addr];   \r\n    if (user.snapshotsLength == 0) {\r\n      user.snapshotsLength = 1;\r\n      user.snapshots.push(BalanceSnapshot(currentBalance, bonusRoundId, 0));\r\n    }\r\n    else {\r\n      BalanceSnapshot storage lastSnapshot = user.snapshots[user.snapshotsLength - 1];\r\n      assert(lastSnapshot.bonusIdEnd == 0);\r\n      \r\n      // same as last record point just updated balance\r\n      if (lastSnapshot.bonusIdBegin == bonusRoundId) {\r\n        lastSnapshot.balance = currentBalance;      \r\n      }\r\n      else {\r\n        assert(lastSnapshot.bonusIdBegin < bonusRoundId);\r\n        \r\n        // if this snapshot is not the same as the last time, automatically merges part of the earnings\r\n        if (bonusRoundId - lastSnapshot.bonusIdBegin < kAutoCombineBonusesCount) {\r\n           uint256 amount = computeRoundBonuses(lastSnapshot.bonusIdBegin, bonusRoundId, lastSnapshot.balance);\r\n           user.bonusEarnings = user.bonusEarnings.add(amount);\r\n           \r\n           lastSnapshot.balance = currentBalance;\r\n           lastSnapshot.bonusIdBegin = bonusRoundId;\r\n           lastSnapshot.bonusIdEnd = 0;\r\n        }\r\n        else {\r\n          lastSnapshot.bonusIdEnd = bonusRoundId;     \r\n          \r\n          /* \r\n          reuse this array to store data, based on code from\r\n          https://ethereum.stackexchange.com/questions/3373/how-to-clear-large-arrays-without-blowing-the-gas-limit?answertab=votes#tab-top\r\n          */\r\n          if (user.snapshotsLength == user.snapshots.length) {\r\n            user.snapshots.length += 1;  \r\n          } \r\n          user.snapshots[user.snapshotsLength++] = BalanceSnapshot(currentBalance, bonusRoundId, 0);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * @dev mint to add balance then do snapshot\r\n   */ \r\n  function mint(address to, uint256 amount, uint256 bonusRoundId) private {\r\n    balances[to] = balances[to].add(amount);\r\n    emit Transfer(address(0), to, amount); \r\n    balanceSnapshot(to, bonusRoundId);  \r\n  }\r\n  \r\n  /**\r\n   * @dev add total supply and mint extra to founder team\r\n   */  \r\n  function mintToFounder(address to, uint256 amount, uint256 normalAmount) isLottery external {\r\n    checkLastMint(to);\r\n    uint256 value = normalAmount.add(amount);\r\n    totalSupply_ = totalSupply_.add(value);\r\n    emit AddTotalSupply(value, totalSupply_);\r\n    mint(to, amount, bonusRoundId_);\r\n  }\r\n  \r\n  /**\r\n   * @dev mint tokens for player\r\n   */ \r\n  function mintToNormal(address to, uint256 amount, uint256 bonusRoundId) isLottery external {\r\n    require(bonusRoundId < bonusRoundId_);\r\n    mint(to, amount, bonusRoundId);\r\n  }\r\n  \r\n  /**\r\n   * @dev check player last mint status, mint for player if necessary\r\n   */ \r\n  function checkLastMint(address addr) private {\r\n    Lottery.checkLastMintData(addr);  \r\n  }\r\n\r\n  function balanceSnapshot(address addr) private {\r\n    balanceSnapshot(addr, bonusRoundId_);  \r\n  }\r\n\r\n  /**\r\n   * @dev get balance snapshot\r\n   */ \r\n  function getBalanceSnapshot(address addr, uint256 index) view public returns(uint256, uint256, uint256) {\r\n    BalanceSnapshot storage snapshot = users_[addr].snapshots[index];\r\n    return (\r\n      snapshot.bonusIdBegin,\r\n      snapshot.bonusIdEnd,\r\n      snapshot.balance\r\n    );\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    checkLastMint(msg.sender);\r\n    checkLastMint(_to);\r\n    super.transfer(_to, _value);\r\n    balanceSnapshot(msg.sender);\r\n    balanceSnapshot(_to);\r\n    return true;\r\n  } \r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    checkLastMint(_from);\r\n    checkLastMint(_to);\r\n    super.transferFrom(_from, _to, _value);\r\n    balanceSnapshot(_from);\r\n    balanceSnapshot(_to);\r\n    return true;\r\n  }\r\n  \r\n  function _burn(address _who, uint256 _value) internal {\r\n    checkLastMint(_who);  \r\n    super._burn(_who, _value);  \r\n    balanceSnapshot(_who);\r\n  } \r\n  \r\n  /**\r\n   * @dev clear warnings for unused variables  \r\n   */ \r\n  function unused(uint256) pure private {} \r\n  \r\n /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    (uint256 lastMintAmount, uint256 lastBonusRoundId) = Lottery.getLastMintAmount(_owner);  \r\n    unused(lastBonusRoundId);\r\n    return balances[_owner].add(lastMintAmount);  \r\n  }\r\n\r\n  /**\r\n   * @dev Others contract transfer earnings to someone\r\n   * The lottery contract transfer the big reward to winner\r\n   * It is open interface, more game contracts may be used in the future\r\n   */\r\n  function transferExtraEarnings(address to) external payable {\r\n    if (msg.sender != address(Lottery)) {\r\n      require(msg.value > 662607004);\r\n      require(msg.value < 66740800000000000000000);\r\n    }  \r\n    users_[to].extraEarnings = users_[to].extraEarnings.add(msg.value);   \r\n    emit AddExtraEarnings(msg.sender, to, msg.value);\r\n  }\r\n  \r\n  /**\r\n   * @dev Others contract transfer bonus earnings to all the people who hold YHT  \r\n   * It is open interface, more game contracts may be used in the future\r\n   */\r\n  function transferBonusEarnings() external payable returns(uint256) {\r\n    require(msg.value > 0);\r\n    require(totalSupply_ > 0);\r\n    if (msg.sender != address(Lottery)) {\r\n      require(msg.value > 314159265358979323);\r\n      require(msg.value < 29979245800000000000000);   \r\n    }\r\n    \r\n    uint256 bonusRoundId = bonusRoundId_;\r\n    bonuses_[bonusRoundId].payment = msg.value;\r\n    bonuses_[bonusRoundId].currentTotalSupply = totalSupply_;\r\n    emit AddBonusEarnings(msg.sender, msg.value, bonusRoundId_, totalSupply_);\r\n    \r\n    ++bonusRoundId_;\r\n    return bonusRoundId;\r\n  }\r\n\r\n  /**\r\n   * @dev get earings of user, can directly withdraw \r\n   */ \r\n  function getEarnings(address addr) view public returns(uint256) {\r\n    User storage user = users_[addr];  \r\n    uint256 amount;\r\n    (uint256 lastMintAmount, uint256 lastBonusRoundId) = Lottery.getLastMintAmount(addr);\r\n    if (lastMintAmount > 0) {\r\n      amount = computeSnapshotBonuses(user, lastBonusRoundId);\r\n      amount = amount.add(computeRoundBonuses(lastBonusRoundId, bonusRoundId_, balances[addr].add(lastMintAmount)));\r\n    } else {\r\n      amount = computeSnapshotBonuses(user, bonusRoundId_);     \r\n    }\r\n    uint256 referrerEarnings = Lottery.getReferrerEarnings(addr);\r\n    return user.extraEarnings + user.bonusEarnings + amount + referrerEarnings;\r\n  }\r\n  \r\n  /**\r\n   * @dev get bonuses \r\n   * @param begin begin bonusId\r\n   * @param end end bonusId\r\n   * @param balance the balance in the round \r\n   * Not use SafeMath, it is core loop, not use SafeMath will be saved 20% gas\r\n   */ \r\n  function computeRoundBonuses(uint256 begin, uint256 end, uint256 balance) view private returns(uint256) {\r\n    require(begin != 0);\r\n    require(end != 0);  \r\n    \r\n    uint256 amount = 0;\r\n    while (begin < end) {\r\n      uint256 value = balance * bonuses_[begin].payment / bonuses_[begin].currentTotalSupply;      \r\n      amount += value;\r\n      ++begin;    \r\n    }\r\n    return amount;\r\n  }\r\n  \r\n  /**\r\n   * @dev compute snapshot bonuses\r\n   */ \r\n  function computeSnapshotBonuses(User storage user, uint256 lastBonusRoundId) view private returns(uint256) {\r\n    uint256 amount = 0;\r\n    uint256 length = user.snapshotsLength;\r\n    for (uint256 i = 0; i < length; ++i) {\r\n      uint256 value = computeRoundBonuses(\r\n        user.snapshots[i].bonusIdBegin,\r\n        i < length - 1 ? user.snapshots[i].bonusIdEnd : lastBonusRoundId,\r\n        user.snapshots[i].balance);\r\n      amount = amount.add(value);\r\n    }\r\n    return amount;\r\n  }\r\n    \r\n  /**\r\n   * @dev add earnings from bonuses\r\n   */ \r\n  function combineBonuses(address addr) private {\r\n    checkLastMint(addr);\r\n    User storage user = users_[addr];\r\n    if (user.snapshotsLength > 0) {\r\n      uint256 amount = computeSnapshotBonuses(user, bonusRoundId_);\r\n      if (amount > 0) {\r\n        user.bonusEarnings = user.bonusEarnings.add(amount);\r\n        user.snapshotsLength = 1;\r\n        user.snapshots[0].balance = balances[addr];\r\n        user.snapshots[0].bonusIdBegin = bonusRoundId_;\r\n        user.snapshots[0].bonusIdEnd = 0;     \r\n      }\r\n    }\r\n    Lottery.checkReferrerEarnings(addr);\r\n  }\r\n  \r\n  /**\r\n   * @dev withdraws all of your earnings\r\n   */\r\n  function withdraw() public {\r\n    combineBonuses(msg.sender);\r\n    uint256 amount = users_[msg.sender].extraEarnings.add(users_[msg.sender].bonusEarnings);\r\n    if (amount > 0) {\r\n      users_[msg.sender].extraEarnings = 0;\r\n      users_[msg.sender].bonusEarnings = 0;\r\n      msg.sender.transfer(amount);\r\n    }\r\n    emit Withdraw(msg.sender, amount);\r\n  }\r\n  \r\n  /**\r\n   * @dev withdraw immediateness to bet\r\n   */ \r\n  function withdrawForBet(address addr, uint256 value) isLottery external {\r\n    combineBonuses(addr);\r\n    uint256 extraEarnings = users_[addr].extraEarnings; \r\n    if (extraEarnings >= value) {\r\n      users_[addr].extraEarnings -= value;    \r\n    } else {\r\n      users_[addr].extraEarnings = 0;\r\n      uint256 remain = value - extraEarnings;\r\n      require(users_[addr].bonusEarnings >= remain);\r\n      users_[addr].bonusEarnings -= remain;\r\n    }\r\n    Lottery.deposit.value(value)();\r\n  }\r\n  \r\n  /**\r\n   * @dev get user informations at once\r\n   */\r\n  function getUserInfos(address addr) view public returns(uint256, uint256, uint256) {\r\n    return (\r\n      totalSupply_,\r\n      balanceOf(addr),\r\n      getEarnings(addr)\r\n    );  \r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonuses_\",\"outputs\":[{\"name\":\"payment\",\"type\":\"uint256\"},{\"name\":\"currentTotalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferExtraEarnings\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferBonusEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Lottery\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBalanceSnapshot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusRoundId_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"bonusRoundId\",\"type\":\"uint256\"}],\"name\":\"mintToNormal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawForBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"normalAmount\",\"type\":\"uint256\"}],\"name\":\"mintToFounder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserInfos\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users_\",\"outputs\":[{\"name\":\"extraEarnings\",\"type\":\"uint256\"},{\"name\":\"bonusEarnings\",\"type\":\"uint256\"},{\"name\":\"snapshotsLength\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"lottery\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"lottery\",\"type\":\"address\"}],\"name\":\"Started\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"AddTotalSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddExtraEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonusId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentTotalSupply\",\"type\":\"uint256\"}],\"name\":\"AddBonusEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"YHToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4b0259b33034b58ffd083a431e151154cff6aeafa930175d9a074c8e44d661c5"}]}