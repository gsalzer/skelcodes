{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * Welcome to new era of smart-contracts. First smart-contract which really earns money! First blochchain fund with real cryptoactivity. \r\n * Добро пожаловать в новую эру смарт-контрактов. Представляем Вашему вниманию ПЕРВЫЙ смарт-контракт, который реально ЗАРАБАТЫВАЕТ. ПЕРВЫЙ смарт-контракт с реальной криптодеятельностью!\r\n * \r\n * От 1,5 до 3% ежедневно. Вклады от 0.1 ETH до бесконечности. Процентная ставка считается в зависимости от размера вклада. Чем меньше вклад, тем больше ставка.\r\n * Возврат тела депозита в первые 5 дней работы при условии холда.\r\n * Динамичная процентая ставка, зависящая от дней холда (0.01% каждый день) и общей кассы контракта (за каждые 100 ETH 0.1% в день).\r\n * 70% депозита возвращается на контракт, 5% уходит в кассу для ежедневного розыгрыша джекпота, а на 25% инвестиций покупаются токены с высокоэффективными мастернодами, ROI от 300% ежемесячно.\r\n * Заработанные деньги с мастернод возвращаются на кошелек, откуда идут обратно на смарт-контракт. Обратные вклады с этого кошелька не считаются инвесторскими, т.е. на них не идут проценты обратно на кошелек для мастернод.\r\n * Реальный заработок - бесконечная касса. Вступайте первыми, последними или между - вы всё равно будете в профите.\r\n * Максимальный заработок - 200%, после контракт выкидывает Вас с возможностью перезайти снова\r\n * \r\n * Где процент на маркетинг? Админы кушают хлеб с водой? \r\n * Нет. Админский и маркетинговый процент - это излишки заработка мастернод. Ваши деньги работают как на Вас, так и на нас. Но напрямую проценты с вкладчиков администрация не берет.\r\n * \r\n * Website: https://dbubble.org\r\n * Telegram news: t.me/DoubleYourBubble\r\n * Telegram chat: https://t.me/joinchat/BGZn8Uo2ApSEKvuTH40l8g\r\n *\r\n * RECOMMENDED GAS LIMIT: 200000\r\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n */\r\n\r\ncontract Bubble {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) public uInvested;\r\n    mapping (address => uint256) public uWithdrawn;\r\n    mapping (address => uint256) public uOperationTime;\r\n    mapping (address => uint256) public uWithdrawTime;\r\n\r\n    uint256 constant public MIN_INVEST = 100 finney;\r\n    uint256 constant public LIGHT_PERCENT = 300;\r\n    uint256 constant public MIDDLE_PERCENT = 200;\r\n    uint256 constant public HIGH_PERCENT = 150;\r\n    \r\n    uint256 constant public MIDDLE_RATE = 10000 finney;\r\n    uint256 constant public HIGH_RATE = 50000 finney;\r\n    \r\n    uint256 constant public NODE_PERCENT = 2500;\r\n    uint256 constant public REF_PERCENT = 500;\r\n    uint256 constant public MAX_MUL = 2;\r\n    uint256 constant public FINE_PERCENT = 9000;\r\n    uint256 constant public PERCENTS = 10000;\r\n    \r\n    uint256 constant public TIME_STEP = 1 days;\r\n    uint256 constant public BUBBLE_STEP = 100 ether;\r\n    uint256 constant public BUBBLE_BONUS = 10;\r\n\r\n    uint256 public bubbleInvested = 0;\r\n    uint256 public bubbleWithdrawn = 0;\r\n    uint256 public bubbleBalance = 0;\r\n    \r\n\r\n    address public nodeAddress = 0x162487Db1Af651cd0d4457CD9c1DB1801EC98182;\r\n    address public lotteryAddress = 0x3bFd5e3a0FC6733Cc847D544aa354771576797C9;\r\n\r\n    event addedInvest(address indexed user, uint256 amount);\r\n    event payedDividends(address indexed user, uint256 dividend);\r\n    event payedFees(address indexed user, uint256 amount);\r\n    event payedReferrals(address indexed user, address indexed referrer, uint256 amount, uint256 refAmount);\r\n\r\n    function Invest() private {\r\n\r\n        if (uInvested[msg.sender] == 0) {\r\n            uOperationTime[msg.sender] = now;\r\n            uWithdrawTime[msg.sender] = now;\r\n        } else {\r\n            Dividends();\r\n        }\r\n\r\n        uInvested[msg.sender] += msg.value;\r\n        emit addedInvest(msg.sender, msg.value);\r\n        bubbleInvested = bubbleInvested.add(msg.value);\r\n\r\n        uint256 nodeFee = msg.value.mul(NODE_PERCENT).div(PERCENTS);\r\n        uint256 refFee = msg.value.mul(REF_PERCENT).div(PERCENTS);\r\n        \r\n        nodeAddress.transfer(nodeFee);\r\n        emit payedFees(msg.sender, nodeFee);\r\n        \r\n        address refAddress = bytesToAddress(msg.data);\r\n        if (refAddress > 0x0 && refAddress != msg.sender && (uInvested[refAddress]>0)) {\r\n            refAddress.transfer(refFee);\r\n            emit payedReferrals(msg.sender, refAddress, msg.value, refFee);\r\n        }\r\n        else\r\n        {\r\n            lotteryAddress.transfer(refFee);\r\n            emit payedReferrals(msg.sender, lotteryAddress, msg.value, refFee);\r\n        }\r\n    }\r\n   \r\n   function getUserAmount(address userAddress) public view returns (uint256) {\r\n        \r\n        uint256 currentPercent;\r\n        \r\n        if ((uInvested[userAddress]>=MIN_INVEST) && (uInvested[userAddress]<MIDDLE_RATE))\r\n        {\r\n            currentPercent = LIGHT_PERCENT;\r\n        }\r\n        \r\n        if ((uInvested[userAddress]>=MIDDLE_RATE) && (uInvested[userAddress]<HIGH_RATE))\r\n        {\r\n            currentPercent = MIDDLE_PERCENT;\r\n        }\r\n        \r\n        if (uInvested[userAddress]>=HIGH_RATE)\r\n        {\r\n            currentPercent = HIGH_PERCENT;\r\n        }\r\n        \r\n        uint256 tBalance = address(this).balance;\r\n        \r\n        uint256 userBonus = now.sub(uWithdrawTime[userAddress]).div(TIME_STEP); \r\n        \r\n        uint256 toBbonus = tBalance.div(BUBBLE_STEP);\r\n        uint256 bubbleBonus = toBbonus.mul(BUBBLE_BONUS);\r\n        \r\n        currentPercent+=userBonus;\r\n        currentPercent+=bubbleBonus;\r\n        \r\n        uint256 userPercents = uInvested[userAddress].mul(currentPercent).div(PERCENTS);\r\n        \r\n        uint256 timeInterval = now.sub(uWithdrawTime[userAddress]);\r\n        uint256 userAmount = userPercents.mul(timeInterval).div(TIME_STEP);\r\n        \r\n        return userAmount;\r\n    }\r\n\r\n    function Dividends() private {\r\n        require(uInvested[msg.sender] != 0);\r\n\r\n        uint256 thisBalance = address(this).balance;\r\n        uint256 userAmount = getUserAmount(msg.sender);\r\n        \r\n        uint256 transAmount;\r\n        uint256 dropUser = 0;\r\n        \r\n        if (uWithdrawn[msg.sender] != 0)\r\n        {\r\n            userAmount = userAmount.mul(FINE_PERCENT).div(PERCENTS);\r\n        }\r\n        \r\n        if ((uWithdrawn[msg.sender].add(userAmount))>=(uInvested[msg.sender].mul(MAX_MUL)))\r\n        {\r\n            userAmount = (uInvested[msg.sender].mul(MAX_MUL)).sub(uWithdrawn[msg.sender]);\r\n            dropUser=1;\r\n        }\r\n        \r\n        if (thisBalance >= userAmount) {\r\n            transAmount = userAmount;\r\n        }\r\n        else\r\n        {\r\n            transAmount = thisBalance;\r\n            if ((dropUser == 1) && ((uWithdrawn[msg.sender].add(transAmount))<(uInvested[msg.sender].mul(MAX_MUL))))\r\n            {\r\n                dropUser = 0;\r\n            }\r\n        }\r\n        \r\n        msg.sender.transfer(transAmount);\r\n        uWithdrawn[msg.sender] += transAmount;\r\n        emit payedDividends(msg.sender, transAmount);\r\n        bubbleWithdrawn = bubbleWithdrawn.add(transAmount);\r\n        uWithdrawTime[msg.sender] = now;\r\n        \r\n        if (dropUser==1)\r\n        {\r\n            uInvested[msg.sender]=0;\r\n            uWithdrawn[msg.sender]=0;\r\n        }\r\n    }\r\n    \r\n    function returnDeposit() private {\r\n        require (uInvested[msg.sender] > 0);\r\n        require (uWithdrawn[msg.sender] == 0);\r\n        uint256 returnTime = now;\r\n        require (((returnTime.sub(uOperationTime[msg.sender])).div(1 days)) < 5);\r\n        \r\n        uint256 returnPercent = (PERCENTS.sub(NODE_PERCENT)).sub(REF_PERCENT);\r\n        uint256 returnAmount = uInvested[msg.sender].mul(returnPercent).div(PERCENTS);\r\n        uint256 thisBalance = address(this).balance;\r\n        \r\n        if (thisBalance < returnAmount) {\r\n            returnAmount=thisBalance;\r\n        }\r\n        \r\n        msg.sender.transfer(returnAmount);\r\n        \r\n        uInvested[msg.sender] = 0;\r\n        uWithdrawTime[msg.sender] = now;\r\n    }\r\n\r\naddress public owner;\r\n\r\n    function() external payable {\r\n        \r\n\r\n        if (msg.sender != nodeAddress)\r\n        {\r\n            if (msg.value == 0.00000112 ether)\r\n            {\r\n                returnDeposit();\r\n            }\r\n            else \r\n            { \r\n                if (msg.value >= MIN_INVEST) {\r\n                    Invest();\r\n                } else {\r\n                    Dividends();\r\n                    uWithdrawTime[msg.sender] = now;\r\n                }\r\n            }\r\n        }\r\n        \r\n        bubbleBalance = address(this).balance;\r\n    }\r\n\r\n    function renounceOwnership() external {\r\n        require(msg.sender == owner);\r\n        owner = 0x0;\r\n    }\r\n    \r\n    function bytesToAddress(bytes data) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(data, 20))\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that revert on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n*End of code. Have fun and Double Your Bubble!\r\n*/","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"MIN_INVEST\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_MUL\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bubbleInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nodeAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LIGHT_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lotteryAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NODE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HIGH_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FINE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIDDLE_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BUBBLE_BONUS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"uWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIDDLE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bubbleBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BUBBLE_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HIGH_RATE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bubbleWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"uWithdrawTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REF_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"uOperationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"uInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addedInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dividend\",\"type\":\"uint256\"}],\"name\":\"payedDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"refAmount\",\"type\":\"uint256\"}],\"name\":\"payedReferrals\",\"type\":\"event\"}]","ContractName":"Bubble","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3124e48d2fa79bcdb86cc3cee7de9683f0ad507588205cfe7bb3d35cf5c2da62"}]}