{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ninterface IGameToken{                                             \r\n    function mineToken(address _player, uint256 _etherAmount) external returns (uint _toPlayerToken);\r\n    function balanceOf(address _owner) constant  external returns (uint256 _balance);\r\n}\r\n\r\ncontract BaseGame {\r\n    using SafeMath for uint256;\r\n    \r\n    string public officialGameUrl;  \r\n    string public gameName = \"GameSicBo\";    \r\n    uint public gameType = 3003;               \r\n\r\n    mapping (address => uint256) public userEtherOf;\r\n    \r\n    function userRefund() public  returns(bool _result);\r\n   \r\n    address public currentBanker;    \r\n    uint public bankerBeginTime;     \r\n    uint public bankerEndTime;       \r\n    IGameToken public GameToken;  \r\n    \r\n    function canSetBanker() view public returns (bool _result);\r\n    function setBanker(address _banker, uint256 _beginTime, uint256 _endTime) public returns(bool _result);\r\n}\r\n\r\ncontract Base is  BaseGame{\r\n    uint public createTime = now;\r\n    address public owner;\r\n    bool public globalLocked = false;      \r\n    uint public currentEventId = 1;            \r\n\r\n    //function Base() public {\r\n    //}\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner)  public  onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function lock() internal {            \r\n        require(!globalLocked);\r\n        globalLocked = true;\r\n    }\r\n\r\n    function unLock() internal {\r\n        require(globalLocked);\r\n        globalLocked = false;\r\n    }\r\n\r\n    function setLock()  public onlyOwner{\r\n        globalLocked = false;\r\n    }\r\n\r\n\r\n    function getEventId() internal returns(uint _result) {  \r\n        _result = currentEventId;\r\n        currentEventId ++;\r\n    }\r\n\r\n    function setOfficialGameUrl(string _newOfficialGameUrl) public onlyOwner{\r\n        officialGameUrl = _newOfficialGameUrl;\r\n    }\r\n}\r\n\r\ncontract GameSicBo is Base\r\n{\r\n    uint public maxPlayableGameId = 0;      \r\n    uint public gameTime;              \r\n    uint256 public gameMaxBetAmount;    \r\n    uint256 public gameMinBetAmount;    \r\n    uint256 public minBankerEther = gameMaxBetAmount * 20;\r\n\r\n    function setMinBankerEther(uint256 _value) public onlyBanker {          \r\n        require(_value >= gameMinBetAmount *  150);\r\n        minBankerEther = _value;\r\n    }\r\n\r\n    uint public gameExpirationTime = 5 days;  \r\n    string public constant gameRandon2 = 'ChinasNewGovernmentBracesforTrump';    \r\n    bool public isStopPlay = false;\r\n    uint public playNo = 1;      \r\n    bool public isNeedLoan = true; \r\n    uint256 public currentDayRate10000 = 0;      \r\n    address public currentLoanPerson;       \r\n    uint256 public currentLoanAmount;       \r\n    uint public currentLoanDayTime;       \r\n\r\n    function GameSicBo(string _gameName,uint  _gameTime, uint256 _gameMinBetAmount, uint256 _gameMaxBetAmount,address _auction,address _gameToken)  public {\r\n        require(_gameTime > 0);\r\n        require(_gameMinBetAmount > 0);\r\n        require(_gameMaxBetAmount > 0);\r\n        require(_gameMaxBetAmount >= _gameMinBetAmount);\r\n        require(_gameToken != 0x0);\r\n\r\n        gameMinBetAmount = _gameMinBetAmount;\r\n        gameMaxBetAmount = _gameMaxBetAmount;\r\n        \r\n        minBankerEther = gameMaxBetAmount * 20;\r\n        gameTime = _gameTime;\r\n        GameToken = IGameToken(_gameToken);\r\n\r\n        gameName = _gameName;\r\n        owner = msg.sender;\r\n        auction = _auction;\r\n        officialGameUrl='http://sicbo.donquixote.games/';\r\n    }\r\n\r\n    function tokenOf(address _user) view public returns(uint _result){\r\n       _result = GameToken.balanceOf(_user);\r\n    }\r\n\r\n    address public auction;     \r\n    function setAuction(address _newAuction) public onlyOwner{\r\n        auction = _newAuction;\r\n    }\r\n\r\n    modifier onlyAuction {              \r\n        require(msg.sender == auction);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBanker {              \r\n        require(msg.sender == currentBanker);\r\n        require(bankerBeginTime <= now);\r\n        require(now < bankerEndTime);\r\n        _;\r\n    }\r\n\r\n    modifier playable(uint betAmount) {\r\n        require (!isStopPlay); \r\n        require(msg.sender != currentBanker);               \r\n        require(betAmount >= gameMinBetAmount);        \r\n        _;\r\n    }\r\n\r\n   function canSetBanker() public view returns (bool _result){\r\n        _result =  bankerEndTime <= now;\r\n    }\r\n\r\n    event OnSetNewBanker(address _caller, address _banker, uint _beginTime, uint _endTime, uint _code,uint _eventId,uint _eventTime);\r\n    function setBanker(address _banker, uint _beginTime, uint _endTime) public onlyAuction returns(bool _result)        \r\n    {\r\n        _result = false;\r\n        require(_banker != 0x0);\r\n             \r\n        if(now < bankerEndTime){\r\n            emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 1 ,getEventId(),now);\r\n            return;\r\n        }\r\n       \r\n        if(_beginTime > now){\r\n            emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 3 ,getEventId(),now);\r\n            return;\r\n        }\r\n     \r\n        if(_endTime <= now){\r\n            emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 4 ,getEventId(),now);\r\n            return;\r\n        }\r\n       \r\n        uint256 toLoan = calLoanAmount();\r\n        uint256 _bankerAmount = userEtherOf[currentBanker];\r\n        if(_bankerAmount < toLoan){\r\n             toLoan = _bankerAmount;\r\n        }\r\n        userEtherOf[currentLoanPerson] = userEtherOf[currentLoanPerson].add(toLoan);\r\n        userEtherOf[currentBanker] = userEtherOf[currentBanker].sub(toLoan);\r\n        currentLoanPerson = 0x0;\r\n        currentDayRate10000 = 0;\r\n        currentLoanAmount = 0;\r\n        currentLoanDayTime = now;\r\n        emit OnPayLoan(currentBanker,now,toLoan);\r\n\r\n        currentBanker = _banker;\r\n        bankerBeginTime = _beginTime;\r\n        bankerEndTime = _endTime;\r\n        isStopPlay = false;\r\n        \r\n        emit OnSetNewBanker(msg.sender, _banker,  _beginTime,  _endTime, 0, getEventId(),now);\r\n        _result = true;\r\n    }\r\n   \r\n    struct gameInfo             \r\n    {\r\n        address Banker;\r\n        bytes32 EncryptedText;  \r\n        bytes32 GameRandon;        \r\n        uint GameResult ; \r\n        mapping(uint8 => uint) TotalBetInfoOf;\r\n    }\r\n\r\n    function hasBetting(uint _gameId) public view returns (bool _result){       \r\n        gameInfo storage gi = gameInfoOf[_gameId];\r\n        require(gi.Banker != 0x0);\r\n        _result = false;\r\n        for(uint8 i = 1; i <= 50; i++){\r\n            if (gi.TotalBetInfoOf[i] > 0){\r\n                _result = true;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    struct betInfo             \r\n    {\r\n        uint256 GameId;\r\n        address Player;\r\n        uint256 BetAmount;      \r\n        uint8 Odds;            \r\n        uint8 BetNum;           \r\n        bool IsReturnAward;     \r\n        bool IsWin ;         \r\n        uint BetTime;\r\n    }\r\n\r\n    mapping (uint => betInfo) public playerBetInfoOf;             \r\n    mapping (uint => gameInfo) public gameInfoOf;               \r\n\r\n    function getCurrentGameId()  public  view returns (uint _result){       \r\n        _result = now.sub(createTime).div(gameTime);\r\n        if(now.sub(createTime) % gameTime >0 ){\r\n           _result = _result.add(1);\r\n        }\r\n    }\r\n\r\n    function getCountCanAdd() view public returns (uint _result){         \r\n        _result = 0;\r\n        uint currentGameId = getCurrentGameId();\r\n        if(currentGameId < maxPlayableGameId){\r\n          _result = (bankerEndTime.sub(gameTime.mul(maxPlayableGameId).add(createTime))).div(gameTime);\r\n        }else{\r\n          _result = bankerEndTime.sub(now).div(gameTime);\r\n        }\r\n    }\r\n\r\n    function getGameBeginTime(uint _gameId) view public returns (uint _result){\r\n        _result = 0;\r\n        if(_gameId <= maxPlayableGameId && _gameId != 0){\r\n          _result = _gameId.mul(gameTime).add(createTime).sub(gameTime);\r\n        }\r\n    }\r\n\r\n    function getGameEndTime(uint _gameId) view public returns (uint _result){\r\n        _result = 0;\r\n        if(_gameId <= maxPlayableGameId  && _gameId != 0){\r\n          _result = _gameId.mul(gameTime).add(createTime);\r\n        }\r\n    }\r\n\r\n    function isGameExpiration(uint _gameId) view public returns(bool _result){        \r\n        _result = false;\r\n        if(_gameId.mul(gameTime).add(createTime).add(gameExpirationTime) < now && gameInfoOf[_gameId].GameResult ==0 ){\r\n          _result = true;\r\n        }\r\n    }\r\n\r\n    function userRefund() public  returns(bool _result) {\r\n        return _userRefund(msg.sender);\r\n    }\r\n    \r\n    function _userRefund(address _to) internal returns(bool _result) {\r\n        require (_to != 0x0);\r\n        lock();\r\n        uint256 amount = userEtherOf[msg.sender];\r\n        if(amount > 0){ \r\n            if(msg.sender == currentBanker){\r\n                if(currentLoanPerson == 0x0 || checkPayLoan() ){   \r\n                    if(amount >= minBankerEther){    \r\n                      uint256 toBanker = amount - minBankerEther;\r\n                      _to.transfer(toBanker);\r\n                      userEtherOf[msg.sender] = minBankerEther;\r\n                    }\r\n                }\r\n            }else{\r\n                _to.transfer(amount);\r\n                userEtherOf[msg.sender] = 0;    \r\n            }\r\n            _result = true;\r\n        }else{\r\n            _result = false;\r\n        }\r\n        unLock();\r\n    }\r\n\r\n    function setIsNeedLoan(bool _isNeedLoan) public onlyBanker returns(bool _result) {  \r\n        _result = false;\r\n        if(!isNeedLoan){\r\n            \r\n            require(currentLoanAmount == 0);\r\n        }\r\n        isNeedLoan = _isNeedLoan;\r\n        _result = true;\r\n    }\r\n\r\n    event OnBidLoan(bool indexed _success, address indexed _user, uint256 indexed _dayRate10000,  uint256 _etherAmount);\r\n    event OnPayLoan(address _sender,uint _eventTime,uint256 _toLoan);\r\n\r\n    function bidLoan(uint256 _dayRate10000) public payable returns(bool _result) {      \r\n        _result = false;\r\n        require(isNeedLoan); \r\n        require(!isStopPlay);\r\n        require(msg.sender != currentBanker);\r\n        \r\n        require(_dayRate10000 < 1000);           \r\n        depositEther();\r\n        \r\n        if(checkPayLoan()){\r\n           \r\n            emit OnBidLoan(false, msg.sender, _dayRate10000,  0);\r\n            return;\r\n        }\r\n        \r\n        uint256 toLoan = calLoanAmount();\r\n        uint256 toGame = 0;\r\n        if (userEtherOf[currentBanker] < minBankerEther){      \r\n            toGame = minBankerEther.sub(userEtherOf[currentBanker]);\r\n        }\r\n\r\n        if(toLoan > 0 && toGame == 0 && currentLoanPerson != 0x0){                    \r\n            require(_dayRate10000 < currentDayRate10000);\r\n        }\r\n\r\n        require(toLoan + toGame > 0);                                                \r\n        require(userEtherOf[msg.sender] >= toLoan + toGame);\r\n\r\n        userEtherOf[msg.sender] = userEtherOf[msg.sender].sub(toLoan + toGame);\r\n        userEtherOf[currentLoanPerson] = userEtherOf[currentLoanPerson].add(toLoan);\r\n        userEtherOf[currentBanker] = userEtherOf[currentBanker].add(toGame);\r\n\r\n        currentLoanPerson = msg.sender;\r\n        currentDayRate10000 = _dayRate10000;\r\n        currentLoanAmount = toLoan + toGame;\r\n        currentLoanDayTime = now;\r\n\r\n        emit OnBidLoan(false, msg.sender, _dayRate10000,  currentLoanAmount);\r\n\r\n        _result = true;\r\n        return;\r\n    }\r\n\r\n    function getCanLoanAmount() public view returns(uint256  _result){                 \r\n        uint256 toLoan = calLoanAmount();\r\n\r\n        uint256 toGame = 0;\r\n        if (userEtherOf[currentBanker] <= minBankerEther){\r\n            toGame = minBankerEther - userEtherOf[currentBanker];\r\n            _result =  toLoan + toGame;\r\n            return;\r\n        }\r\n        else if (userEtherOf[currentBanker] > minBankerEther){\r\n            uint256 c = userEtherOf[currentBanker] - minBankerEther;\r\n            if(toLoan > c){\r\n                _result =  toLoan - c;\r\n                return;\r\n            }\r\n            else{\r\n                _result =  0;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    function calLoanAmount() public view returns (uint256 _result){\r\n      _result = 0;\r\n      if(currentLoanPerson != 0x0 && currentLoanAmount > 0){\r\n          _result = currentLoanAmount;\r\n          uint d = (now - currentLoanDayTime) / (1 days);\r\n          for(uint i = 0; i < d; i++){\r\n              _result = _result * (10000 + currentDayRate10000) / 10000;\r\n          }\r\n        }\r\n    }\r\n\r\n    function checkPayLoan() public returns (bool _result) {                        \r\n        _result = false;\r\n        uint256 toLoan = calLoanAmount();\r\n        if(toLoan > 0){      \r\n            bool isStop =  isStopPlay && now  > getGameEndTime(maxPlayableGameId).add(1 hours);                      \r\n            if (isStop || userEtherOf[currentBanker] >= minBankerEther.add(toLoan)){            \r\n                userEtherOf[currentLoanPerson] = userEtherOf[currentLoanPerson].add(toLoan);\r\n                userEtherOf[currentBanker] = userEtherOf[currentBanker].sub(toLoan);\r\n                currentLoanPerson = 0x0;\r\n                currentDayRate10000 = 0;\r\n                currentLoanAmount = 0;\r\n                currentLoanDayTime = now;\r\n                _result = true;\r\n                emit OnPayLoan(msg.sender,now,toLoan);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    event OnNewGame(uint indexed _gameId, address indexed _bankerAddress, bytes32 indexed _gameEncryptedTexts, uint _gameBeginTime, uint _gameEndTime, uint _eventTime, uint _eventId);\r\n    function newGame(bytes32[] _gameEncryptedTexts) public onlyBanker payable returns(bool _result)       \r\n    {\r\n        if (msg.value > 0){\r\n            userEtherOf[msg.sender] = userEtherOf[msg.sender].add(msg.value);       \r\n        }\r\n\r\n        _result = _newGame( _gameEncryptedTexts);\r\n    }\r\n\r\n    function setStopPlay(bool _isStopPlay) public onlyBanker\r\n    {   \r\n        isStopPlay = _isStopPlay;\r\n    }\r\n\r\n    function _newGame(bytes32[] _gameEncryptedTexts)   private  returns(bool _result)       \r\n    {   \r\n        _result = false;\r\n\r\n        uint countCanAdd = getCountCanAdd();   \r\n        require(countCanAdd > 0); \r\n        if(countCanAdd > _gameEncryptedTexts.length){\r\n          countCanAdd = _gameEncryptedTexts.length;\r\n        }\r\n        uint currentGameId = getCurrentGameId();\r\n        if(maxPlayableGameId < currentGameId){\r\n          maxPlayableGameId = currentGameId.sub(1);\r\n        }\r\n\r\n        for(uint i=0;i<countCanAdd;i++){\r\n            if(_gameEncryptedTexts[i] == 0x0){\r\n                continue;\r\n            }\r\n            maxPlayableGameId++;\r\n            gameInfo memory info = gameInfo({\r\n                Banker :currentBanker,\r\n                EncryptedText:  _gameEncryptedTexts[i],\r\n                GameRandon:  0x0,       \r\n                GameResult:0  \r\n            });\r\n            gameInfoOf[maxPlayableGameId] = info;\r\n            emit OnNewGame(maxPlayableGameId, msg.sender, _gameEncryptedTexts[i], getGameBeginTime(maxPlayableGameId), getGameEndTime(maxPlayableGameId), now, getEventId());\r\n        }\r\n        _result = true;\r\n    }\r\n\r\n    event OnPlay(address indexed _player,uint indexed _gameId, uint indexed _playNo, uint8 _betNum, uint256 _betAmount,uint _giftToken, uint _eventId,uint _eventTime);\r\n\r\n    function depositEther() public payable\r\n    {  \r\n        if (msg.value > 0){\r\n            userEtherOf[msg.sender] = userEtherOf[msg.sender].add(msg.value);\r\n        }\r\n    }\r\n\r\n    function playBigOrSmall(uint8 _betNum, uint256 _betAmount) public payable playable(_betAmount) returns(bool _result){       \r\n        lock();\r\n        depositEther();\r\n        require(_betNum ==1 || _betNum == 2); \r\n        if (_betAmount > gameMaxBetAmount){             \r\n            _betAmount = gameMaxBetAmount;\r\n        }\r\n        _result = _play(_betNum, _betAmount,false);\r\n        unLock();\r\n    }\r\n\r\n    function playAnyTriples(uint256 _betAmount) public payable  playable(_betAmount)  returns(bool _result){       \r\n        lock();\r\n        depositEther();\r\n        if (_betAmount > gameMaxBetAmount){             \r\n            _betAmount = gameMaxBetAmount;\r\n        }\r\n        _result = _play(3, _betAmount,false);\r\n        unLock();\r\n    }\r\n\r\n    function playSpecificTriples(uint8 _betNum, uint256 _betAmount) public payable playable(_betAmount)  returns(bool _result){       \r\n        lock();\r\n        depositEther();\r\n        require(_betNum >= 1 && _betNum <=6); \r\n        if (_betAmount > gameMaxBetAmount){             \r\n            _betAmount = gameMaxBetAmount;\r\n        }\r\n        _result = _play(_betNum + 3, _betAmount,false);\r\n        unLock();\r\n    }\r\n\r\n    function playSpecificDoubles(uint8 _betNum, uint256 _betAmount) public payable playable(_betAmount)  returns(bool _result){       \r\n        lock();\r\n        depositEther();\r\n        require(_betNum >= 1 && _betNum <=6);\r\n        if (_betAmount > gameMaxBetAmount){             \r\n            _betAmount = gameMaxBetAmount;\r\n        }\r\n        _result = _play(_betNum + 9 , _betAmount,false);\r\n        unLock();\r\n    }\r\n\r\n    function playThreeDiceTotal(uint8 _betNum,uint256 _betAmount) public payable  playable(_betAmount)  returns(bool _result){      \r\n        lock();\r\n        depositEther();\r\n        require(_betNum >= 4 && _betNum <=17); \r\n        if (_betAmount > gameMaxBetAmount){             \r\n            _betAmount = gameMaxBetAmount;\r\n        }\r\n        _result = _play(_betNum + 12, _betAmount,false);\r\n        unLock();\r\n    }\r\n\r\n    function playDiceCombinations(uint8 _smallNum,uint8 _bigNum,uint256 _betAmount) public payable playable(_betAmount)  returns(bool _result){       \r\n        lock();\r\n        depositEther();\r\n        require(_smallNum < _bigNum);\r\n        require(_smallNum >= 1 && _smallNum <=5); \r\n        require(_bigNum >= 2 && _bigNum <=6);\r\n        if (_betAmount > gameMaxBetAmount){             \r\n            _betAmount = gameMaxBetAmount;\r\n        }\r\n        uint8 _betNum = 0 ;\r\n        if(_smallNum == 1){\r\n            _betNum = 28+_bigNum;\r\n        }else if(_smallNum ==2){\r\n             _betNum = 32+_bigNum;\r\n        }else if(_smallNum == 3){\r\n             _betNum = 35+_bigNum;\r\n        }else if(_smallNum == 4){\r\n             _betNum = 37+_bigNum;\r\n        }else if(_smallNum == 5){\r\n            _betNum = 44;\r\n        }\r\n        _result = _play(_betNum,_betAmount,false);\r\n        unLock();\r\n    }\r\n\r\n    function playSingleDiceBet(uint8 _betNum,uint256 _betAmount) public payable playable(_betAmount)  returns(bool _result){       \r\n        lock();\r\n        depositEther();\r\n        require(_betNum >= 1 && _betNum <=6);\r\n        if (_betAmount > gameMaxBetAmount){            \r\n            _betAmount = gameMaxBetAmount;\r\n        }\r\n        _result = _play(_betNum + 44,_betAmount,false);\r\n        unLock();\r\n    }\r\n\r\n    function _calOdds(uint8 _betNum) internal pure returns(uint8 _odds){\r\n        if(_betNum > 0 && _betNum <= 2){\r\n            return 1;\r\n        }else if(_betNum == 3){\r\n            return 24;\r\n        }else if(_betNum <= 9){\r\n            return 150;\r\n        }else if(_betNum <= 15){\r\n            return 8;\r\n        }else if(_betNum <= 29){\r\n            if(_betNum == 16 || _betNum == 29){ \r\n                return 50;\r\n            }else if(_betNum == 17 || _betNum == 28){ \r\n                return 18;\r\n            }else if(_betNum == 18 || _betNum == 27){\r\n               return 14;\r\n            }else if(_betNum == 19 || _betNum == 26){  \r\n                return 12;\r\n            }else if(_betNum == 20 || _betNum == 25){ \r\n                return 8;\r\n            }else{\r\n                return 6;\r\n            }\r\n        }else if(_betNum <= 44){\r\n            return 5;\r\n        }else if(_betNum <= 50){\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function playBatch(uint8[] _betNums,uint256[] _betAmounts) public payable returns(bool _result)\r\n    {   \r\n        lock();\r\n        _result = false;\r\n      \r\n        require(msg.sender != currentBanker);               \r\n        \r\n        uint currentGameId = getCurrentGameId();\r\n        \r\n        gameInfo  storage gi = gameInfoOf[currentGameId];\r\n        require (gi.GameResult == 0 && gi.Banker == currentBanker);\r\n        depositEther();\r\n        require(_betNums.length == _betAmounts.length);\r\n        require (_betNums.length <= 10);\r\n        _result = true ;\r\n        for(uint i = 0; i < _betNums.length && _result ; i++ ){\r\n            uint8 _betNum = _betNums[i];\r\n            uint256 _betAmount = _betAmounts[i];\r\n            if(_betAmount < gameMinBetAmount || _betNum > 50){\r\n               \r\n                continue ;\r\n            }\r\n            if (_betAmount > gameMaxBetAmount){             \r\n                _betAmount = gameMaxBetAmount;\r\n            }\r\n            _result =_play(_betNum,_betAmount,true);\r\n        }\r\n        unLock();\r\n    }\r\n\r\n    function _play(uint8 _betNum,  uint256 _betAmount,bool isBatch) private  returns(bool _result)\r\n    {            \r\n        _result = false;\r\n        uint8 _odds = _calOdds(_betNum);\r\n        uint bankerAmount = _betAmount.mul(_odds);   \r\n        if(!isBatch){\r\n            require(userEtherOf[msg.sender] >= _betAmount);\r\n            require(userEtherOf[currentBanker] >= bankerAmount); \r\n        }else{\r\n            if(userEtherOf[msg.sender] < _betAmount  || userEtherOf[currentBanker] < bankerAmount){\r\n                return false;\r\n            }\r\n        }\r\n        uint currentGameId = getCurrentGameId();\r\n        gameInfo  storage gi = gameInfoOf[currentGameId];\r\n        require (gi.GameResult == 0 && gi.Banker == currentBanker);\r\n\r\n        betInfo memory bi = betInfo({\r\n            GameId : currentGameId ,\r\n            Player :  msg.sender,\r\n            BetNum : _betNum,\r\n            BetAmount : _betAmount,\r\n            Odds : _odds,\r\n            IsReturnAward: false,\r\n            IsWin :  false,\r\n            BetTime : now\r\n        });\r\n        playerBetInfoOf[playNo] = bi;\r\n        userEtherOf[msg.sender] = userEtherOf[msg.sender].sub(_betAmount);                  \r\n        userEtherOf[currentBanker] = userEtherOf[currentBanker].sub(bankerAmount);     \r\n        userEtherOf[this] = userEtherOf[this].add(_betAmount.add(bankerAmount));\r\n\r\n        gi.TotalBetInfoOf[_betNum] = gi.TotalBetInfoOf[_betNum].add(_betAmount.add(bankerAmount));\r\n\r\n        uint _giftToken = GameToken.mineToken(msg.sender,_betAmount);\r\n\r\n        emit OnPlay(msg.sender, currentGameId, playNo , _betNum,  _betAmount,_giftToken,getEventId(), now);\r\n\r\n        playNo++;\r\n        _result = true;\r\n    }\r\n    \r\n    function _getPlayDiceCombinationsIndex(uint8 _smallNum,uint8 _bigNum) internal pure returns(uint8 index)\r\n    {\r\n        if(_smallNum == 1){\r\n            return 28+_bigNum;\r\n        }else if(_smallNum ==2){\r\n             return 32+_bigNum;\r\n        }else if(_smallNum == 3){\r\n             return 35+_bigNum;\r\n        }else if(_smallNum == 4){\r\n             return 37+_bigNum;\r\n        }else if(_smallNum == 5){\r\n            return 44;\r\n        }\r\n    }\r\n\r\n    function uintToString(uint v) private pure returns (string)\r\n    {\r\n        uint maxlength = 3;\r\n        bytes memory reversed = new bytes(maxlength);\r\n        uint i = 0;\r\n        while (v != 0) {\r\n            uint remainder = v % 10;\r\n            v = v / 10;\r\n            reversed[i++] = byte(48 + remainder);\r\n        }\r\n        bytes memory s = new bytes(i); \r\n        for (uint j = 0; j < i; j++) {\r\n            s[j] = reversed[i - j - 1]; \r\n        }\r\n        string memory str = string(s); \r\n        return str; \r\n    }\r\n\r\n    event OnOpenGameResult(uint indexed _gameId,  address indexed _banker,bytes32 indexed _randon1,uint _gameResult, uint _eventId,uint _eventTime);\r\n\r\n    function openGameResult(uint _gameId,uint8 _minGameResult,uint8 _midGameResult,uint8 _maxGameResult, bytes32 _randon1) public  returns(bool _result)\r\n    {\r\n        _result =  _openGameResult(_gameId, _minGameResult,_midGameResult,_maxGameResult,_randon1);\r\n    }\r\n\r\n    function _openGameResult(uint _gameId,uint8 _minGameResult,uint8 _midGameResult, uint8 _maxGameResult, bytes32 _randon1) private  returns(bool _result)\r\n    {            \r\n        _result = false;\r\n        require(_minGameResult <= _midGameResult);\r\n        require(_midGameResult <= _maxGameResult);\r\n        require (_minGameResult >= 1 && _maxGameResult <= 6);\r\n        uint _gameEndTime = getGameEndTime(_gameId);\r\n        require (_gameEndTime < now);  \r\n        require (_gameEndTime + gameExpirationTime > now);  \r\n\r\n        gameInfo  storage gi = gameInfoOf[_gameId];\r\n        require(gi.Banker == msg.sender);\r\n        require(gi.GameResult == 0);\r\n        uint _gameResult = uint(_minGameResult)*100 + _midGameResult*10 + _maxGameResult;\r\n\r\n      require (keccak256(uintToString(_gameResult) ,gameRandon2, _randon1) ==  gi.EncryptedText);\r\n\r\n        gi.GameResult = _gameResult;\r\n        gi.GameRandon = _randon1;\r\n\r\n        emit OnOpenGameResult(_gameId, msg.sender,_randon1,  _gameResult, getEventId(),now);\r\n        lock();\r\n        _bankerCal(gi,_minGameResult,_midGameResult,_maxGameResult);\r\n        unLock();\r\n        _result = true;\r\n    }\r\n\r\n    function _bankerCal(gameInfo storage _gi,uint8 _minGameResult,uint8 _midGameResult, uint8 _maxGameResult) internal\r\n    {\r\n        uint _bankerAmount = 0;\r\n\r\n        mapping(uint8 => uint) _totalBetInfoOf = _gi.TotalBetInfoOf;\r\n\r\n        uint8 _threeDiceTotal = _minGameResult + _midGameResult + _maxGameResult;  \r\n        bool _isAnyTriple = (_minGameResult == _maxGameResult);\r\n        uint8 _doubleTriple = (_minGameResult == _midGameResult) ? _minGameResult : ((_midGameResult == _maxGameResult)? _maxGameResult: 0);\r\n\r\n        _bankerAmount = _bankerAmount.add(_sumAmount(_gi,16,29,_threeDiceTotal + 12));\r\n        _bankerAmount = _bankerAmount.add(_sumAmount(_gi,10,15,_doubleTriple +9));\r\n\r\n        if(_isAnyTriple){ \r\n          \r\n            _bankerAmount = _bankerAmount.add(_totalBetInfoOf[1]);\r\n            _bankerAmount = _bankerAmount.add(_totalBetInfoOf[2]);\r\n            _bankerAmount = _bankerAmount.add(_sumAmount(_gi,4,9,3+_minGameResult));\r\n            _bankerAmount = _bankerAmount.add(_sumAmount(_gi,30,44,0));  \r\n            _bankerAmount = _bankerAmount.add(_sumAmount(_gi,45,50,_minGameResult + 44));  \r\n        }else{\r\n            \r\n            _bankerAmount = _bankerAmount.add(_sumAmount(_gi,3,9,0));\r\n            if(_threeDiceTotal >= 11){ \r\n                _bankerAmount = _bankerAmount.add(_totalBetInfoOf[1]);\r\n            }else{\r\n                _bankerAmount = _bankerAmount.add(_totalBetInfoOf[2]);\r\n            }\r\n            _bankerAmount = _bankerAmount.add(_bankerCalOther(_gi,_minGameResult,_midGameResult,_maxGameResult,_doubleTriple));\r\n        }\r\n         \r\n        userEtherOf[_gi.Banker] =userEtherOf[_gi.Banker].add(_bankerAmount);\r\n        userEtherOf[this] =userEtherOf[this].sub(_bankerAmount);\r\n    }\r\n\r\n    function _bankerCalOther(gameInfo storage _gi,uint8 _minGameResult,uint8 _midGameResult, uint8 _maxGameResult,uint8 _doubleTriple) private view returns(uint _bankerAmount) {\r\n        \r\n        mapping(uint8 => uint) _totalBetInfoOf = _gi.TotalBetInfoOf;\r\n        if(_doubleTriple != 0){\r\n            \r\n            if(_maxGameResult == _doubleTriple){\r\n               \r\n                uint8 _index1 = _getPlayDiceCombinationsIndex(_minGameResult,_midGameResult);\r\n                uint8 _index2 = _minGameResult + 44; \r\n            }else if(_minGameResult == _doubleTriple){\r\n                \r\n                _index1 =_getPlayDiceCombinationsIndex(_midGameResult,_maxGameResult);\r\n                _index2 = _maxGameResult + 44; \r\n            }\r\n            _bankerAmount = _bankerAmount.add(_sumAmount(_gi,30,44,_index1));  \r\n\r\n            uint8 _index3= _midGameResult + 44; \r\n            for(uint8 i=45;i<=50;i++){\r\n                if(i == _index3){\r\n                    \r\n                    _betAmount = _totalBetInfoOf[i];\r\n                    _bankerAmount = _bankerAmount.add(_betAmount.div(4));\r\n                }else if(i == _index2){\r\n                    \r\n                    _betAmount = _totalBetInfoOf[i];\r\n                    _bankerAmount = _bankerAmount.add(_betAmount.div(2));\r\n                }else{\r\n                    \r\n                    _bankerAmount = _bankerAmount.add(_totalBetInfoOf[i]);\r\n                }\r\n            }\r\n        }else{\r\n              \r\n            _index1 = _getPlayDiceCombinationsIndex(_minGameResult,_midGameResult);\r\n            _index2 = _getPlayDiceCombinationsIndex(_minGameResult,_maxGameResult);\r\n            _index3 = _getPlayDiceCombinationsIndex(_midGameResult,_maxGameResult);\r\n\r\n            for(i=30;i<=44;i++){\r\n                if(i != _index1 && i != _index2 && i != _index3){\r\n                    _bankerAmount = _bankerAmount.add(_totalBetInfoOf[i]);\r\n                }\r\n            }\r\n           \r\n            _index1 = _minGameResult+44;\r\n            _index2 = _midGameResult+44;\r\n            _index3 = _maxGameResult+44;\r\n            uint _betAmount = 0 ;\r\n            for(i=45;i<=50;i++){\r\n                if(i != _index1 && i != _index2 && i != _index3){\r\n                   \r\n                     _bankerAmount = _bankerAmount.add(_totalBetInfoOf[i]);\r\n                }else{\r\n                    \r\n                    _betAmount = _totalBetInfoOf[i];\r\n                    _bankerAmount = _bankerAmount.add(_betAmount.div(2)); \r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function _sumAmount(gameInfo storage _gi,uint8 _startIndex,uint8 _endIndex,uint8 _excludeIndex) internal view returns(uint _totalAmount)\r\n    {   \r\n        _totalAmount = 0 ;\r\n        for(uint8 i=_startIndex;i<=_endIndex;i++){\r\n            if(i != _excludeIndex){\r\n                _totalAmount = _totalAmount.add(_gi.TotalBetInfoOf[i]);\r\n            }\r\n        }\r\n        return _totalAmount;\r\n    }\r\n\r\n    event OnGetAward(uint indexed _playNo,uint indexed _gameId, address indexed _player, uint _betNum, uint _betAmount,uint _awardAmount, uint _gameResult,uint _eventTime, uint _eventId);\r\n    \r\n    function getAwards(uint[] playNos) public\r\n    {   \r\n        lock();\r\n\r\n        for(uint i=0;i<playNos.length;i++){\r\n            if(playNos[i] > playNo){\r\n                continue; \r\n            }\r\n            betInfo storage p = playerBetInfoOf[playNos[i]];\r\n            if(p.IsReturnAward){\r\n                continue;\r\n            }\r\n\r\n            gameInfo storage _gi = gameInfoOf[p.GameId];\r\n            uint _gameEndTime = getGameEndTime(p.GameId);\r\n            uint _awardAmount = 0; \r\n            if(isGameExpiration(p.GameId)){\r\n                uint AllAmount = p.BetAmount.mul(1 + p.Odds); \r\n                userEtherOf[this] =userEtherOf[this].sub(AllAmount);\r\n                p.IsReturnAward = true;\r\n                if(now > _gameEndTime+ 30 days){\r\n                    userEtherOf[_gi.Banker] =userEtherOf[_gi.Banker].add(AllAmount);                   \r\n                }else{\r\n                    p.IsWin = true ; \r\n                    userEtherOf[p.Player] =userEtherOf[p.Player].add(AllAmount);\r\n                    _awardAmount = AllAmount;                \r\n                }                   \r\n            }else if(_gi.GameResult != 0){ \r\n                p.IsReturnAward = true;\r\n                uint8 _realOdd = _playRealOdds(p.BetNum,p.Odds,_gi.GameResult);\r\n                if(_realOdd > 0){ \r\n                    uint256 winAmount = p.BetAmount.mul(1 + _realOdd); \r\n                    p.Odds = _realOdd;\r\n                    userEtherOf[this] = userEtherOf[this].sub(winAmount);\r\n                    if(now > _gameEndTime + 30 days){\r\n                        \r\n                        userEtherOf[_gi.Banker] = userEtherOf[_gi.Banker].add(winAmount);\r\n                    }else{\r\n                        p.IsWin = true ;\r\n                        userEtherOf[p.Player] =  userEtherOf[p.Player].add(winAmount);\r\n                        _awardAmount = winAmount;\r\n                    }\r\n                }\r\n               \r\n            }\r\n            emit OnGetAward(playNos[i], p.GameId, p.Player,  p.BetNum, p.BetAmount, _awardAmount, _gi.GameResult, now, getEventId());\r\n        }\r\n        unLock();\r\n    }\r\n\r\n    function _playRealOdds(uint8 _betNum,uint8 _odds,uint _gameResult) private  pure returns(uint8 _realOdds)\r\n    {\r\n        uint8 _minGameResult = uint8(_gameResult/100);\r\n        uint8 _midGameResult = uint8(_gameResult/10%10);\r\n        uint8 _maxGameResult = uint8(_gameResult%10);\r\n\r\n        _realOdds = 0;\r\n        uint8 _smallNum = 0;\r\n        uint8 _bigNum = 0;\r\n        if(_betNum <=2){\r\n            \r\n            if(_minGameResult == _maxGameResult){\r\n                return 0;\r\n            }\r\n            uint8 _threeDiceTotal = _minGameResult + _midGameResult +_maxGameResult ; \r\n            uint _bigOrSmall = _threeDiceTotal >= 11 ? 2 : 1 ; \r\n            _smallNum = _betNum;\r\n            if(_bigOrSmall == _smallNum){\r\n                _realOdds = _odds;\r\n            }\r\n        }else if(_betNum == 3){\r\n            if(_minGameResult == _maxGameResult){\r\n                _realOdds = _odds;\r\n            }\r\n        }else if(_betNum <= 9){\r\n            uint _specificTriple  = (_minGameResult == _maxGameResult) ? _minGameResult : 0 ; \r\n            _smallNum = _betNum - 3 ;\r\n            if( _specificTriple == _smallNum){\r\n                _realOdds = _odds;\r\n            }\r\n        }else if(_betNum <= 15){\r\n            uint _doubleTriple = (_minGameResult == _midGameResult) ? _minGameResult : ((_midGameResult == _maxGameResult)? _maxGameResult: 0);\r\n            _smallNum = _betNum - 9 ;\r\n            if(_doubleTriple == _smallNum){\r\n                _realOdds = _odds;\r\n            }\r\n        }else if(_betNum <= 29){\r\n            _threeDiceTotal = _minGameResult + _midGameResult + _maxGameResult ;  \r\n            _smallNum = _betNum - 12 ;\r\n            if(_threeDiceTotal == _smallNum){\r\n                _realOdds = _odds;\r\n            }\r\n        }else  if(_betNum <= 44){\r\n            \r\n            if(_betNum <= 34){\r\n                _smallNum = 1;\r\n                _bigNum = _betNum - 28;\r\n            }else if(_betNum <= 38){\r\n                _smallNum = 2;\r\n                _bigNum = _betNum - 32;\r\n            }else if(_betNum <=41){\r\n                 _smallNum = 3;\r\n                _bigNum = _betNum - 35;\r\n            }else if(_betNum <=43){\r\n                 _smallNum = 4;\r\n                _bigNum = _betNum - 37;\r\n            }else{\r\n                _smallNum = 5;\r\n                _bigNum = 6;\r\n            }\r\n            if(_smallNum == _minGameResult || _smallNum == _midGameResult){\r\n                if(_bigNum == _midGameResult || _bigNum == _maxGameResult){\r\n                    _realOdds = _odds;\r\n                }\r\n            }\r\n        }else if(_betNum <= 50){\r\n            \r\n            _smallNum = _betNum - 44;\r\n            if(_smallNum == _minGameResult){\r\n                _realOdds++;\r\n            }\r\n            if(_smallNum == _midGameResult){\r\n                _realOdds++;\r\n            }\r\n            if(_smallNum == _maxGameResult){\r\n                _realOdds++;\r\n            }\r\n        }\r\n        return _realOdds;\r\n    }\r\n\r\n    function () public payable {       \r\n        if(msg.value > 0){              \r\n            userEtherOf[msg.sender] = userEtherOf[msg.sender].add(msg.value);   \r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getGameBeginTime\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentEventId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"playerBetInfoOf\",\"outputs\":[{\"name\":\"GameId\",\"type\":\"uint256\"},{\"name\":\"Player\",\"type\":\"address\"},{\"name\":\"BetAmount\",\"type\":\"uint256\"},{\"name\":\"Odds\",\"type\":\"uint8\"},{\"name\":\"BetNum\",\"type\":\"uint8\"},{\"name\":\"IsReturnAward\",\"type\":\"bool\"},{\"name\":\"IsWin\",\"type\":\"bool\"},{\"name\":\"BetTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betNum\",\"type\":\"uint8\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"playBigOrSmall\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calLoanAmount\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_smallNum\",\"type\":\"uint8\"},{\"name\":\"_bigNum\",\"type\":\"uint8\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"playDiceCombinations\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"officialGameUrl\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"checkPayLoan\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameInfoOf\",\"outputs\":[{\"name\":\"Banker\",\"type\":\"address\"},{\"name\":\"EncryptedText\",\"type\":\"bytes32\"},{\"name\":\"GameRandon\",\"type\":\"bytes32\"},{\"name\":\"GameResult\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOfficialGameUrl\",\"type\":\"string\"}],\"name\":\"setOfficialGameUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betNum\",\"type\":\"uint8\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"playThreeDiceTotal\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLoanPerson\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDayRate10000\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"tokenOf\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEtherOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameMaxBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GameToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"playNos\",\"type\":\"uint256[]\"}],\"name\":\"getAwards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userRefund\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameRandon2\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canSetBanker\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBankerEther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCountCanAdd\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLoanAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dayRate10000\",\"type\":\"uint256\"}],\"name\":\"bidLoan\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betNums\",\"type\":\"uint8[]\"},{\"name\":\"_betAmounts\",\"type\":\"uint256[]\"}],\"name\":\"playBatch\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBanker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isNeedLoan\",\"type\":\"bool\"}],\"name\":\"setIsNeedLoan\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isNeedLoan\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betNum\",\"type\":\"uint8\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"playSpecificDoubles\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentGameId\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentLoanDayTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"isGameExpiration\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_banker\",\"type\":\"address\"},{\"name\":\"_beginTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setBanker\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAuction\",\"type\":\"address\"}],\"name\":\"setAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"playAnyTriples\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"hasBetting\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"playNo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isStopPlay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameMinBetAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxPlayableGameId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betNum\",\"type\":\"uint8\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"playSpecificTriples\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_betNum\",\"type\":\"uint8\"},{\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"playSingleDiceBet\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCanLoanAmount\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankerBeginTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"}],\"name\":\"getGameEndTime\",\"outputs\":[{\"name\":\"_result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameEncryptedTexts\",\"type\":\"bytes32[]\"}],\"name\":\"newGame\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isStopPlay\",\"type\":\"bool\"}],\"name\":\"setStopPlay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameExpirationTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinBankerEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankerEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gameId\",\"type\":\"uint256\"},{\"name\":\"_minGameResult\",\"type\":\"uint8\"},{\"name\":\"_midGameResult\",\"type\":\"uint8\"},{\"name\":\"_maxGameResult\",\"type\":\"uint8\"},{\"name\":\"_randon1\",\"type\":\"bytes32\"}],\"name\":\"openGameResult\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_gameName\",\"type\":\"string\"},{\"name\":\"_gameTime\",\"type\":\"uint256\"},{\"name\":\"_gameMinBetAmount\",\"type\":\"uint256\"},{\"name\":\"_gameMaxBetAmount\",\"type\":\"uint256\"},{\"name\":\"_auction\",\"type\":\"address\"},{\"name\":\"_gameToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_banker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_beginTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_code\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"}],\"name\":\"OnSetNewBanker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_dayRate10000\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_etherAmount\",\"type\":\"uint256\"}],\"name\":\"OnBidLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_toLoan\",\"type\":\"uint256\"}],\"name\":\"OnPayLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_bankerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_gameEncryptedTexts\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_gameBeginTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_gameEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnNewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_playNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_betNum\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_giftToken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"}],\"name\":\"OnPlay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_banker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_randon1\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_gameResult\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"}],\"name\":\"OnOpenGameResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_playNo\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_betNum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_awardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_gameResult\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"OnGetAward\",\"type\":\"event\"}]","ContractName":"GameSicBo","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000258000000000000000000000000000000000000000000000000016345785d8a00000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000005b566b473bb0ea8dc0fc6047dd623e5fa3b42307000000000000000000000000af7c176eb40ae42e26dce5ad7aa125ecbd735cc1000000000000000000000000000000000000000000000000000000000000000b4a6f616e206f6620417263000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://17d88136aa1e1289053b96b407c6af9c46d09071e1643f007d41662dd854698f"}]}