{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract EthicHubStorageInterface {\r\n\r\n    //modifier for access in sets and deletes\r\n    modifier onlyEthicHubContracts() {_;}\r\n\r\n    // Setters\r\n    function setAddress(bytes32 _key, address _value) external;\r\n    function setUint(bytes32 _key, uint _value) external;\r\n    function setString(bytes32 _key, string _value) external;\r\n    function setBytes(bytes32 _key, bytes _value) external;\r\n    function setBool(bytes32 _key, bool _value) external;\r\n    function setInt(bytes32 _key, int _value) external;\r\n    // Deleters\r\n    function deleteAddress(bytes32 _key) external;\r\n    function deleteUint(bytes32 _key) external;\r\n    function deleteString(bytes32 _key) external;\r\n    function deleteBytes(bytes32 _key) external;\r\n    function deleteBool(bytes32 _key) external;\r\n    function deleteInt(bytes32 _key) external;\r\n\r\n    // Getters\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n    function getUint(bytes32 _key) external view returns (uint);\r\n    function getString(bytes32 _key) external view returns (string);\r\n    function getBytes(bytes32 _key) external view returns (bytes);\r\n    function getBool(bytes32 _key) external view returns (bool);\r\n    function getInt(bytes32 _key) external view returns (int);\r\n}\r\n\r\ncontract EthicHubReputationInterface {\r\n    modifier onlyUsersContract(){_;}\r\n    modifier onlyLendingContract(){_;}\r\n    function burnReputation(uint delayDays)  external;\r\n    function incrementReputation(uint completedProjectsByTier)  external;\r\n    function initLocalNodeReputation(address localNode)  external;\r\n    function initCommunityReputation(address community)  external;\r\n    function getCommunityReputation(address target) public view returns(uint256);\r\n    function getLocalNodeReputation(address target) public view returns(uint256);\r\n}\r\n\r\ncontract EthicHubBase {\r\n\r\n    uint8 public version;\r\n\r\n    EthicHubStorageInterface public ethicHubStorage = EthicHubStorageInterface(0);\r\n\r\n    constructor(address _storageAddress) public {\r\n        require(_storageAddress != address(0));\r\n        ethicHubStorage = EthicHubStorageInterface(_storageAddress);\r\n    }\r\n\r\n}\r\n\r\ncontract EthicHubUser is Ownable, EthicHubBase {\r\n\r\n\r\n    event UserStatusChanged(address target, string profile, bool isRegistered);\r\n\r\n    constructor(address _storageAddress)\r\n        EthicHubBase(_storageAddress)\r\n        public\r\n    {\r\n        // Version\r\n        version = 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes registration status of an address for participation.\r\n     * @param target Address that will be registered/deregistered.\r\n     * @param profile profile of user.\r\n     * @param isRegistered New registration status of address.\r\n     */\r\n    function changeUserStatus(address target, string profile, bool isRegistered)\r\n        internal\r\n        onlyOwner\r\n    {\r\n        require(target != address(0));\r\n        require(bytes(profile).length != 0);\r\n        ethicHubStorage.setBool(keccak256(\"user\", profile, target), isRegistered);\r\n        emit UserStatusChanged(target, profile, isRegistered);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev delete an address for participation.\r\n     * @param target Address that will be deleted.\r\n     * @param profile profile of user.\r\n     */\r\n    function deleteUserStatus(address target, string profile)\r\n        internal\r\n        onlyOwner\r\n    {\r\n        require(target != address(0));\r\n        require(bytes(profile).length != 0);\r\n        ethicHubStorage.deleteBool(keccak256(\"user\", profile, target));\r\n        emit UserStatusChanged(target, profile, false);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev View registration status of an address for participation.\r\n     * @return isRegistered boolean registration status of address for a specific profile.\r\n     */\r\n    function viewRegistrationStatus(address target, string profile)\r\n        view public\r\n        returns(bool isRegistered)\r\n    {\r\n        require(target != address(0));\r\n        require(bytes(profile).length != 0);\r\n        isRegistered = ethicHubStorage.getBool(keccak256(\"user\", profile, target));\r\n    }\r\n\r\n    /**\r\n     * @dev register a localNode address.\r\n     */\r\n    function registerLocalNode(address target)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(target != address(0));\r\n        bool isRegistered = ethicHubStorage.getBool(keccak256(\"user\", \"localNode\", target));\r\n        if (!isRegistered) {\r\n            changeUserStatus(target, \"localNode\", true);\r\n            EthicHubReputationInterface rep = EthicHubReputationInterface (ethicHubStorage.getAddress(keccak256(\"contract.name\", \"reputation\")));\r\n            rep.initLocalNodeReputation(target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev unregister a localNode address.\r\n     */\r\n    function unregisterLocalNode(address target)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(target != address(0));\r\n        bool isRegistered = ethicHubStorage.getBool(keccak256(\"user\", \"localNode\", target));\r\n        if (isRegistered) {\r\n            deleteUserStatus(target, \"localNode\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev register a community address.\r\n     */\r\n    function registerCommunity(address target)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(target != address(0));\r\n        bool isRegistered = ethicHubStorage.getBool(keccak256(\"user\", \"community\", target));\r\n        if (!isRegistered) {\r\n            changeUserStatus(target, \"community\", true);\r\n            EthicHubReputationInterface rep = EthicHubReputationInterface(ethicHubStorage.getAddress(keccak256(\"contract.name\", \"reputation\")));\r\n            rep.initCommunityReputation(target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev unregister a community address.\r\n     */\r\n    function unregisterCommunity(address target)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(target != address(0));\r\n        bool isRegistered = ethicHubStorage.getBool(keccak256(\"user\", \"community\", target));\r\n        if (isRegistered) {\r\n            deleteUserStatus(target, \"community\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev register a invertor address.\r\n     */\r\n    function registerInvestor(address target)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(target != address(0));\r\n        changeUserStatus(target, \"investor\", true);\r\n    }\r\n\r\n    /**\r\n     * @dev unregister a investor address.\r\n     */\r\n    function unregisterInvestor(address target)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(target != address(0));\r\n        bool isRegistered = ethicHubStorage.getBool(keccak256(\"user\", \"investor\", target));\r\n        if (isRegistered) {\r\n            deleteUserStatus(target, \"investor\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev register a community representative address.\r\n     */\r\n    function registerRepresentative(address target)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(target != address(0));\r\n        changeUserStatus(target, \"representative\", true);\r\n    }\r\n\r\n    /**\r\n     * @dev unregister a representative address.\r\n     */\r\n    function unregisterRepresentative(address target)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(target != address(0));\r\n        bool isRegistered = ethicHubStorage.getBool(keccak256(\"user\", \"representative\", target));\r\n        if (isRegistered) {\r\n            deleteUserStatus(target, \"representative\");\r\n        }\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unregisterInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unregisterLocalNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"registerLocalNode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethicHubStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"registerInvestor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"profile\",\"type\":\"string\"}],\"name\":\"viewRegistrationStatus\",\"outputs\":[{\"name\":\"isRegistered\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unregisterCommunity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"unregisterRepresentative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"registerCommunity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"registerRepresentative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_storageAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"profile\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"isRegistered\",\"type\":\"bool\"}],\"name\":\"UserStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EthicHubUser","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b79b0baed86a69f146c9256ecd268ebaa81bfca","Library":"","SwarmSource":"bzzr://fd44267a769d8e3abd369554c034b0be6fd825c1c31d6170ffe58ccd71fdf395"}]}