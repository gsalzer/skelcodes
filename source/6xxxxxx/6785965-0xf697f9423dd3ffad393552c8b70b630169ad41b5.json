{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract Lottery3{\r\n    using SafeMathLib for *;\r\n    // mapping(uint256 => uint256) public uintToUint;\r\n    // mapping(uint256 => mapping(uint256 => uint256)) public uintToUintToUint;\r\n    // mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))) public uintToUintToUintToUint;\r\n    mapping(uint64 => address) public id_addr;\r\n\r\n    mapping(address => mapping(uint16 => JackpotLib.Ticket3)) public ticketRecs;\r\n    // mapping(address => mapping(uint16 => uint256)) public ticketRecs;\r\n    mapping(address => JackpotLib.Player) public players;\r\n    mapping(uint16 => JackpotLib.Round3) public rounds;\r\n\r\n    uint64 constant private noticePeriod = 10 minutes;//min time between announce and confirm;\r\n    uint64 constant private claimPeriod = 30 days;//time you have to claim your prize\r\n    uint16 constant private ticketPrice = 20; //price of single ticket (in the unit)    \r\n    uint16 constant private prize0 = 18600;//in the unit;\r\n    uint16 constant private prize1 = 3100;//in the unit;\r\n    uint16 constant private prize2 = 6200;//in the unit;\r\n    uint256 constant private unitSize=1e14;//about 0.02 USD\r\n\r\n    uint32 constant private mask0 = 0xC0000000;//[2个1,30个0];这两位应该是空的\r\n    uint32 constant private mask1 = 0x3FF00000;//[10个1,20个0];\r\n    uint32 constant private mask2 = 0xFFC00;//[10个1,10个0];\r\n    uint32 constant private mask3 = 0x3FF;//[10个1];\r\n    \r\n    uint64 constant private roundInterval = 1 days;\r\n\r\n    JackpotLib.Status public gameState;\r\n\r\n    \r\n    \r\n    //address adminAddr=0xd78CbFB57Ca14Fb4F2c5a5acb78057D637462F9c;\r\n\r\n    address adminAddr=0xdf68C2236bB7e5ac40f4b809CD41C5ab73958643;\r\n    \r\n\r\n\r\n\r\n    modifier adminOnly(){\r\n        require(msg.sender == adminAddr,'Who are you?');\r\n        _;        \r\n    }\r\n    modifier humanOnly() { \r\n    require(msg.sender == tx.origin, \"Humans only\");\r\n        _;\r\n    } \r\n    constructor() public{          \r\n        // gameState.baseRound=1;\r\n        // gameState.baseRoundEndTime=(uint64(now)+roundInterval-1)/roundInterval*roundInterval;  \r\n        gameState.baseRound=324;\r\n        gameState.baseRoundEndTime=1543348800;  \r\n        gameState.numPlayers=0;\r\n        gameState.currRound=gameState.baseRound;\r\n        rounds[gameState.baseRound].endTime=gameState.baseRoundEndTime;\r\n\r\n    }\r\n    function setBaseRound(uint16 baseRound,uint64 baseRoundEndTime)\r\n        adminOnly()\r\n        public\r\n    {\r\n        gameState.baseRound=baseRound;\r\n        gameState.baseRoundEndTime=baseRoundEndTime;   \r\n    }\r\n\r\n    function getBal()\r\n        public\r\n        view\r\n        returns(uint256 balance)\r\n    {\r\n        return address(this).balance;\r\n    }\r\n\r\n\r\n    function startRound()//自助新开一轮\r\n        public//private\r\n    {\r\n        require(gameState.baseRound>0,'cannot start round now');\r\n        uint64 endTime;\r\n        endTime=(uint64(now)+roundInterval-1)/roundInterval*roundInterval;\r\n        uint16 round;\r\n        round=uint16((endTime-gameState.baseRoundEndTime)/roundInterval+gameState.baseRound);\r\n        rounds[round].endTime=endTime;\r\n        gameState.currRound=round;\r\n    }\r\n    // function startRound(uint16 round, uint64 endTime)\r\n    //     adminOnly()\r\n    //     public\r\n    // {   \r\n    //     require(rounds[round].endTime==0,'round already started');\r\n    //     require(endTime>uint64(now),'should end in the future, not in the past');\r\n    //     if(endTime==0){\r\n    //         require(rounds[round-1].endTime>0,'you have to provide an endTime');\r\n    //         rounds[round].endTime=rounds[round-1].endTime+roundInterval; //default value;\r\n    //     }else\r\n    //         rounds[round].endTime=endTime;                \r\n    // }\r\n    function announceWinningNum(uint16 round,uint16 winningNum0,uint16 winningNum1,uint16 winningNum2)//this can be run multiple times, before starts;\r\n        adminOnly()//if no winning Num for combo2, the winningNum2 will be 1000(so no one can match it);\r\n        public\r\n    {\r\n        require( uint64(now) > rounds[round].endTime,'round not ended yet, where did you get the numbers?');\r\n        require( rounds[round].claimStartTime==0 || uint64(now) < rounds[round].claimStartTime, 'claim started, cannot change number');                \r\n        rounds[round].winningNum0   =winningNum0;\r\n        rounds[round].winningNum1   =winningNum1;\r\n        rounds[round].winningNum2   =winningNum2;\r\n        rounds[round].claimStartTime    =uint64(now)+noticePeriod;\r\n        rounds[round].claimDeadline     =uint64(now)+noticePeriod+claimPeriod;\r\n        gameState.lastRound=round;\r\n    }    \r\n    function sweep()    \r\n        adminOnly()\r\n        public\r\n    {\r\n        require(gameState.baseRound==0,'game not ended');\r\n        require(rounds[gameState.currRound].claimDeadline>0 && rounds[gameState.currRound].claimDeadline < uint64(now),'claim not ended');\r\n        adminAddr.transfer(address(this).balance);\r\n    }\r\n    function checkTicket(address playerAddr,uint16 id)\r\n        public\r\n        view\r\n        returns(\r\n            uint16 status,//0:未开始兑奖;1.未中奖;2.已兑奖;3.已过期;4.中奖\r\n            uint16 winningNum0,\r\n            uint256 prize            \r\n        )\r\n    {\r\n        uint16 winningNum;\r\n        winningNum0=rounds[ticketRecs[playerAddr][id].round].winningNum0;\r\n        if(rounds[ticketRecs[playerAddr][id].round].claimStartTime==0 || uint64(now) < rounds[ticketRecs[playerAddr][id].round].claimStartTime){\r\n            status=0;\r\n            winningNum=1000;\r\n            prize=0;            \r\n        }else{\r\n            if(ticketRecs[playerAddr][id].ticketType==0){\r\n                winningNum=rounds[ticketRecs[playerAddr][id].round].winningNum0;\r\n                prize=prize0;\r\n            }else if(ticketRecs[playerAddr][id].ticketType==1){\r\n                winningNum=rounds[ticketRecs[playerAddr][id].round].winningNum1;\r\n                prize=prize1;\r\n            }else if(ticketRecs[playerAddr][id].ticketType==2){\r\n                winningNum=rounds[ticketRecs[playerAddr][id].round].winningNum2;\r\n                prize=prize2;\r\n            }else{//combo买法；\r\n                winningNum=rounds[ticketRecs[playerAddr][id].round].winningNum0;\r\n                prize=prize0;\r\n            }\r\n            if(ticketRecs[playerAddr][id].claimed){//已兑奖\r\n                status=2;\r\n            }else if( ticketRecs[playerAddr][id].ticketType==3 ? //根据票的类型用不同的判断条件\r\n            !checkCombo(ticketRecs[playerAddr][id].numbers,winningNum) :\r\n             ticketRecs[playerAddr][id].numbers != winningNum){//未中奖\r\n                status=1;\r\n            }else if(rounds[ticketRecs[playerAddr][id].round].claimDeadline<=now){//已过期\r\n                status=3;            \r\n            }else{//中奖\r\n                status=4;\r\n            }\r\n            if(status==4 || status==2){\r\n                prize=unitSize.mul(prize).mul(ticketRecs[playerAddr][id].multiple);\r\n            }else{\r\n                prize=0;\r\n            }\r\n            return (status,winningNum0,prize);\r\n        }        \r\n    }\r\n\r\n    function claimPrize(uint16 id)        \r\n        public\r\n    {        \r\n        uint16 winningNum;\r\n        uint16 prize;\r\n\r\n        if(ticketRecs[msg.sender][id].ticketType==0){\r\n            winningNum=rounds[ticketRecs[msg.sender][id].round].winningNum0;\r\n            prize=prize0;\r\n        }else if(ticketRecs[msg.sender][id].ticketType==1){\r\n            winningNum=rounds[ticketRecs[msg.sender][id].round].winningNum1;\r\n            prize=prize1;\r\n        }else if(ticketRecs[msg.sender][id].ticketType==2){\r\n            winningNum=rounds[ticketRecs[msg.sender][id].round].winningNum2;\r\n            prize=prize2;\r\n        }else{//combo;\r\n            winningNum=rounds[ticketRecs[msg.sender][id].round].winningNum0;\r\n            prize=prize0;\r\n        }\r\n\r\n        require(rounds[ticketRecs[msg.sender][id].round].claimStartTime>0,'not announced yet');\r\n        require(rounds[ticketRecs[msg.sender][id].round].claimStartTime<=now,'claim not started'); //开始兑奖\r\n        require(rounds[ticketRecs[msg.sender][id].round].claimDeadline>now,'claim already ended'); //在兑奖有效期内\r\n        if(ticketRecs[msg.sender][id].ticketType==3){//combo的比对方式不太一样\r\n            require(checkCombo(ticketRecs[msg.sender][id].numbers,winningNum),\"you combo didn't cover the lucky number\");\r\n        }else{//普通号码的比对\r\n            require(ticketRecs[msg.sender][id].numbers == winningNum,\"you didn't win\"); //号码正确\r\n        }\r\n        \r\n        require(!ticketRecs[msg.sender][id].claimed,'ticket already claimed');  //尚未兑奖\r\n            \r\n        ticketRecs[msg.sender][id].claimed=true;            \r\n        msg.sender.transfer(unitSize.mul(prize).mul(ticketRecs[msg.sender][id].multiple));\r\n        \r\n    }\r\n    function checkCombo(uint32 ticketNumber,uint32 winningNum)\r\n        public//private\r\n        pure\r\n        returns(bool win)\r\n    {\r\n        // uint8 i;\r\n        // uint32 wNum;\r\n        // for(i=0;i<3;i++){\r\n        //     num3=winningNum % 10;\r\n        //     winningNum = winningNum /10;\r\n        //     if()\r\n        // }\r\n\r\n        uint32 num3=winningNum % 10;//第三位\r\n        winningNum = winningNum /10;\r\n        uint32 num2=winningNum % 10;//第二位\r\n        winningNum = winningNum /10;\r\n        uint32 num1=winningNum % 10;//第一位\r\n        //uint32 winningMask= (uint32(1)<<(num1+20)) + (uint32(1)<<(num2+10)) + (uint32(1)<<num3);        \r\n\r\n        return (ticketNumber & (uint32(1)<<(num1+20))!=0) && \r\n            (ticketNumber & (uint32(1)<<(num2+10))!=0) && \r\n            (ticketNumber & (uint32(1)<<num3)!=0);\r\n    }\r\n    function register(address playerAddr)\r\n        private\r\n    {   \r\n        if(players[playerAddr].id==0){\r\n            players[playerAddr].id=++gameState.numPlayers;\r\n            players[playerAddr].registerOn=uint64(now);\r\n            id_addr[gameState.numPlayers]=playerAddr;        \r\n        }\r\n    }\r\n    \r\n    function buyTicket(address owner,uint8 ticketType,uint32 numbers,uint16 multiple) \r\n        humanOnly()\r\n        public\r\n        payable\r\n    {\r\n        address player;\r\n        if(owner==address(0))\r\n            player=msg.sender;\r\n        else\r\n            player=owner;\r\n        register(player);\r\n        if(ticketType>2)//只有三种玩法\r\n            ticketType=2;\r\n        // require(rounds[round].endTime>0 ,'round not started');\r\n        // require(rounds[round].endTime > uint64(now), 'round already ended');\r\n        if(rounds[gameState.currRound].endTime<=uint64(now))\r\n            // player=player;\r\n            startRound();\r\n\r\n        uint256 amt=unitSize.mul(ticketPrice).mul(multiple);\r\n        require(msg.value >= amt,'insufficient fund');\r\n        amt=msg.value-amt;//exchange;\r\n        uint16 numTickets=(players[player].numTickets)+1;\r\n        require(numTickets > players[player].numTickets,'you played too much');\r\n        require(numbers <= 999,'wrong number');\r\n\r\n        ticketRecs[player][numTickets]=JackpotLib.Ticket3(false,ticketType,gameState.currRound,multiple,numbers,uint64(now));\r\n        // ticketRecs[player][numTickets]=JackpotLib.Ticket3(false,1,1,numbers,multiple,uint64(now));\r\n        // ticketRecs[msg.sender][1]=JackpotLib.Ticket3(false,1,1,1,1,uint64(now));   \r\n        players[player].numTickets=numTickets;\r\n                        \r\n        if(amt>0){//refund exchange; has to be the last step;\r\n            (msg.sender).transfer(amt);//always refund to sender;\r\n        }\r\n    }   \r\n    function countChoice(uint32 number)//数最后10位里面有多个1;\r\n        public//private\r\n        pure\r\n        returns(uint16 count)\r\n    {\r\n        count=0;\r\n        uint8 i;\r\n        for(i=0;i<10;i++){\r\n            if(number%2 == 1)\r\n                count++;\r\n            number=number/2;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    function buyCombo(address owner,uint32 numbers,uint16 multiple) \r\n        humanOnly()\r\n        public\r\n        payable\r\n    {\r\n        address player;\r\n        if(owner==address(0))\r\n            player=msg.sender;\r\n        else\r\n            player=owner;\r\n        register(player);\r\n        //combo的玩法type=3;\r\n        \r\n        if(rounds[gameState.currRound].endTime<=uint64(now))            \r\n            startRound();\r\n\r\n        //计算票价:\r\n        require(mask0 & numbers == 0,'wrong num: first 2 bits should be empty');\r\n        uint16 combos=countChoice(numbers);//最后10位\r\n        require(combos !=0, 'wrong num: select numbers for slot 3');\r\n        combos*=countChoice(numbers>>10);//接下来10位\r\n        require(combos !=0, 'wrong num: select numbers for slot 2');\r\n        combos*=countChoice(numbers>>20);//最后10位\r\n        require(combos !=0, 'wrong num: select numbers for slot 1');\r\n        \r\n        uint256 amt=unitSize.mul(ticketPrice).mul(multiple).mul(combos);\r\n        require(msg.value >= amt,'insufficient fund');\r\n        amt=msg.value-amt;//exchange;\r\n        uint16 numTickets=(players[player].numTickets)+1;\r\n        require(numTickets > players[player].numTickets,'you played too much');        \r\n\r\n        ticketRecs[player][numTickets]=JackpotLib.Ticket3(false,3,gameState.currRound,multiple,numbers,uint64(now));        \r\n        players[player].numTickets=numTickets;\r\n                        \r\n        if(amt>0){//refund exchange; has to be the last step;\r\n            (msg.sender).transfer(amt);//always refund to sender;\r\n        }\r\n    }       \r\n    // function abc(){\r\n    //     ticketRecs[msg.sender][1]=JackpotLib.Ticket3(false,1,1,1,1,uint64(now));        \r\n    // }\r\n}\r\n\r\nlibrary JackpotLib{\r\n\tstruct Ticket3{\t\t\r\n\t\tbool claimed;//\r\n\t\tuint8 ticketType;//0,single;1,combo1;2combo2;\r\n\t\tuint16 round;\t\t\r\n\t\tuint16 multiple;\r\n\t\tuint32 numbers;\r\n\t\tuint64 soldOn;//购票时间\r\n\t}\r\n\t// struct Ticket5{\t\t\r\n\t// \tbool claimed;//\t\t\r\n\t// \tuint16 round;\t\t\r\n\t// \tuint16 multiple;\r\n\t// \tuint32 numbers;\r\n\t// \tuint64 soldOn;//购票时间\r\n\t// }\r\n\tstruct Player{\r\n\t\tuint16 id;\r\n\t\tuint16 numTickets;\r\n\t\tuint64 registerOn;//注册时间\r\n\t}\r\n\tstruct Status{\r\n\t\tuint16 lastRound;\r\n\t\tuint16 currRound;\r\n\t\tuint16 numPlayers;\r\n\t\tuint16 baseRound;\r\n\t\tuint64 baseRoundEndTime;\r\n\t\tuint64 reserve;\r\n\t}\r\n\r\n\tstruct Round3{\r\n\t\tuint64 endTime;\t\t//ending time\r\n\t\tuint64 claimStartTime;//\r\n\t\tuint64 claimDeadline;//\r\n\t\tuint16 winningNum0;\r\n\t\tuint16 winningNum1;\r\n\t\tuint16 winningNum2;\r\n\t}\r\n\t// struct Round5{\r\n\t// \tuint64 endTime;\t\t//ending time\r\n\t// \tuint64 claimStartTime;//\r\n\t// \tuint64 claimDeadline;//\r\n\t// \tuint32 winningNum0;\t\t\r\n\t// }\r\n\r\n\t\r\n}\r\n\r\nlibrary SafeMathLib {\r\n    \r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) \r\n      internal \r\n      pure \r\n      returns (uint256 c) \r\n  {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    require(c / a == b, \"SafeMath mul failed\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b)\r\n      internal\r\n      pure\r\n      returns (uint256) \r\n  {\r\n    require(b <= a, \"SafeMath sub failed\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b)\r\n      internal\r\n      pure\r\n      returns (uint256 c) \r\n  {\r\n    c = a + b;\r\n    require(c >= a, \"SafeMath add failed\");\r\n    return c;\r\n  }\r\n  \r\n  /**\r\n    * @dev gives square root of given x.\r\n    */\r\n  function sqrt(uint256 x)\r\n      internal\r\n      pure\r\n      returns (uint256 y) \r\n  {\r\n    uint256 z = ((add(x,1)) / 2);\r\n    y = x;\r\n    while (z < y) \r\n    {\r\n      y = z;\r\n      z = ((add((x / z),z)) / 2);\r\n    }\r\n  }\r\n  \r\n  /**\r\n    * @dev gives square. multiplies x by x\r\n    */\r\n  function sq(uint256 x)\r\n      internal\r\n      pure\r\n      returns (uint256)\r\n  {\r\n    return (mul(x,x));\r\n  }\r\n  \r\n  /**\r\n    * @dev x to the power of y \r\n    */\r\n  function pwr(uint256 x, uint256 y)\r\n      internal \r\n      pure \r\n      returns (uint256)\r\n  {\r\n    if (x==0)\r\n        return (0);\r\n    else if (y==0)\r\n        return (1);\r\n    else \r\n    {\r\n      uint256 z = x;\r\n      for (uint256 i = 1; i < y; i++)\r\n        z = mul(z,x);\r\n      return (z);\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"round\",\"type\":\"uint16\"},{\"name\":\"winningNum0\",\"type\":\"uint16\"},{\"name\":\"winningNum1\",\"type\":\"uint16\"},{\"name\":\"winningNum2\",\"type\":\"uint16\"}],\"name\":\"announceWinningNum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBal\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"ticketType\",\"type\":\"uint8\"},{\"name\":\"numbers\",\"type\":\"uint32\"},{\"name\":\"multiple\",\"type\":\"uint16\"}],\"name\":\"buyTicket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"claimPrize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"ticketRecs\",\"outputs\":[{\"name\":\"claimed\",\"type\":\"bool\"},{\"name\":\"ticketType\",\"type\":\"uint8\"},{\"name\":\"round\",\"type\":\"uint16\"},{\"name\":\"multiple\",\"type\":\"uint16\"},{\"name\":\"numbers\",\"type\":\"uint32\"},{\"name\":\"soldOn\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"id_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"number\",\"type\":\"uint32\"}],\"name\":\"countChoice\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"numbers\",\"type\":\"uint32\"},{\"name\":\"multiple\",\"type\":\"uint16\"}],\"name\":\"buyCombo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"rounds\",\"outputs\":[{\"name\":\"endTime\",\"type\":\"uint64\"},{\"name\":\"claimStartTime\",\"type\":\"uint64\"},{\"name\":\"claimDeadline\",\"type\":\"uint64\"},{\"name\":\"winningNum0\",\"type\":\"uint16\"},{\"name\":\"winningNum1\",\"type\":\"uint16\"},{\"name\":\"winningNum2\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ticketNumber\",\"type\":\"uint32\"},{\"name\":\"winningNum\",\"type\":\"uint32\"}],\"name\":\"checkCombo\",\"outputs\":[{\"name\":\"win\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"baseRound\",\"type\":\"uint16\"},{\"name\":\"baseRoundEndTime\",\"type\":\"uint64\"}],\"name\":\"setBaseRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameState\",\"outputs\":[{\"name\":\"lastRound\",\"type\":\"uint16\"},{\"name\":\"currRound\",\"type\":\"uint16\"},{\"name\":\"numPlayers\",\"type\":\"uint16\"},{\"name\":\"baseRound\",\"type\":\"uint16\"},{\"name\":\"baseRoundEndTime\",\"type\":\"uint64\"},{\"name\":\"reserve\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"playerAddr\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint16\"}],\"name\":\"checkTicket\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint16\"},{\"name\":\"winningNum0\",\"type\":\"uint16\"},{\"name\":\"prize\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint16\"},{\"name\":\"numTickets\",\"type\":\"uint16\"},{\"name\":\"registerOn\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Lottery3","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5f00c99ffe1be7e59959ecfc9bfb27ed937fb70241ab322280216d07067e674b"}]}