{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract WorldByEth {\r\n    using SafeMath for *;\r\n\r\n    string constant public name = \"ETH world cq\";\r\n    string constant public symbol = \"ecq\";\r\n    uint256 public rID_;\r\n    address public comaddr = 0x9ca974f2c49d68bd5958978e81151e6831290f57;\r\n    mapping(uint256 => uint256) public pot_;\r\n    mapping(uint256 => mapping(uint256 => Ctry)) public ctry_;\r\n    uint public gap = 1 hours;\r\n    address public lastplayer = 0x9ca974f2c49d68bd5958978e81151e6831290f57;\r\n    address public lastwinner;\r\n    uint[] public validplayers;\r\n    uint public ctnum = 180;\r\n    uint public timeleft;\r\n    bool public active = true;\r\n    bool public autobegin = true;\r\n    uint public max = 24 hours;\r\n    //mapping(uint256 => address) public lastrdowner;\r\n\r\n    struct Ctry {\r\n        uint256 id;\r\n        uint256 price;\r\n        bytes32 name;\r\n        bytes32 mem;\r\n        address owner;\r\n    }\r\n\r\n    mapping(uint256 => uint256) public totalinvest_;\r\n\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        require(_addr == tx.origin);\r\n        \r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n    \r\n    constructor()\r\n    public\r\n    {\r\n        rID_++;\r\n        validplayers.length = 0;\r\n        timeleft = now + max;\r\n    }\r\n\r\n    function getvalid()\r\n    public\r\n    returns(uint[]){\r\n        return validplayers;\r\n    }\r\n    \r\n    function changemem(uint id, bytes32 mem)\r\n    isHuman\r\n    public\r\n    payable\r\n    {\r\n        require(msg.sender == ctry_[rID_][id].owner);\r\n        if (mem != \"\"){\r\n            ctry_[rID_][id].mem = mem;\r\n        }\r\n    }\r\n\r\n    function buy(uint id, bytes32 mem)\r\n    isHuman\r\n    public\r\n    payable\r\n    {\r\n        require(active == true);\r\n        require(msg.value >= 0.02 ether);\r\n        require(msg.value >= ctry_[rID_][id].price);\r\n        require(id <= ctnum);\r\n\r\n        if (validplayers.length <= 50) {\r\n            timeleft = now + max;\r\n        }\r\n        \r\n        if (mem != \"\"){\r\n            ctry_[rID_][id].mem = mem;\r\n        }\r\n\r\n        if (update() == true) {\r\n            uint pot = (msg.value).div(10);\r\n            pot_[rID_] += pot;\r\n\r\n            if (rID_> 1){\r\n                if (ctry_[rID_-1][id].owner != address(0x0)) {\r\n                    ctry_[rID_-1][id].owner.send((msg.value).div(50));\r\n                }\r\n            }\r\n        \r\n            if (ctry_[rID_][id].owner != address(0x0)){\r\n                ctry_[rID_][id].owner.transfer((msg.value).mul(86).div(100));\r\n            }else{\r\n                validplayers.push(id);\r\n            }\r\n            ctry_[rID_][id].owner = msg.sender;\r\n            ctry_[rID_][id].price = (msg.value).mul(14).div(10);\r\n        }else{\r\n            rID_++;\r\n            validplayers.length = 0;\r\n            ctry_[rID_][id].owner = msg.sender;\r\n            ctry_[rID_][id].price = 0.028 ether;\r\n            validplayers.push(id);\r\n            (msg.sender).send(msg.value - 0.02 ether);\r\n        }\r\n\r\n        lastplayer = msg.sender;\r\n        totalinvest_[rID_] += msg.value;\r\n        ctry_[rID_][id].id = id;\r\n    }\r\n\r\n    function update()\r\n    private\r\n    returns(bool)\r\n    {\r\n        if (now > timeleft) {\r\n            uint win = pot_[rID_].mul(6).div(10);\r\n            lastplayer.transfer(win);\r\n            lastwinner = lastplayer;\r\n            pot_[rID_+1] += pot_[rID_].div(5);\r\n            pot_[rID_] = 0;\r\n            timeleft = now + max;\r\n            if (autobegin == false){\r\n                active = false;  // waiting for set open again\r\n            }\r\n            return false;\r\n        }\r\n\r\n        if (validplayers.length < ctnum) {\r\n            timeleft += gap;\r\n        }\r\n        \r\n        if (timeleft > now + max) {\r\n            timeleft = now + max;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function()\r\n    public\r\n    payable\r\n    {\r\n        \r\n    }\r\n    \r\n    // add to pot\r\n    function pot()\r\n    public\r\n    payable\r\n    {\r\n        pot_[rID_] += msg.value;\r\n    }\r\n\r\n    modifier onlyDevs() {\r\n        require(\r\n            msg.sender == 0x9ca974f2c49d68bd5958978e81151e6831290f57,\r\n            \"only team just can activate\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // add more countries\r\n    function setctnum(uint id)\r\n    onlyDevs\r\n    public\r\n    {\r\n        require(id > 180);\r\n        ctnum = id;\r\n    }\r\n    \r\n    // withdraw unreachable eth\r\n    function withcom()\r\n    onlyDevs\r\n    public\r\n    {\r\n        if (address(this).balance > pot_[rID_]){\r\n            uint left = address(this).balance - pot_[rID_];\r\n            comaddr.transfer(left);\r\n        }\r\n    }\r\n    \r\n    function setActive(bool _auto)\r\n    onlyDevs\r\n    public\r\n    {\r\n        active = true;\r\n        autobegin = _auto;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath v0.1.9\r\n * @dev Math operations with safety checks that throw on error\r\n * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\r\n * - added sqrt\r\n * - added sq\r\n * - added pwr \r\n * - changed asserts to requires with error log outputs\r\n * - removed div, its useless\r\n */\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastplayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pot_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withcom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autobegin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validplayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeleft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"mem\",\"type\":\"bytes32\"}],\"name\":\"changemem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ctry_\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"mem\",\"type\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auto\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"setctnum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comaddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ctnum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalinvest_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getvalid\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"mem\",\"type\":\"bytes32\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastwinner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"WorldByEth","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aa365f40dbcbc92fd2aa091f8b85890d70b93bf1e7ac0e0c930ac63e68c12491"}]}