{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    bool public transfersEnabled;\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n\r\n    bool public transfersEnabled;\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) balances;\r\n\r\n    /**\r\n    * Protection against short address attack\r\n    */\r\n    modifier onlyPayloadSize(uint numwords) {\r\n        assert(msg.data.length == numwords * 32 + 4);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        require(transfersEnabled);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(transfersEnabled);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public onlyPayloadSize(2) constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        }\r\n        else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function changeOwner(address _newOwner) onlyOwner internal {\r\n        require(_newOwner != address(0));\r\n        emit OwnerChanged(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    string public constant name = \"WebSpaceX\";\r\n    string public constant symbol = \"WSPX\";\r\n    uint8 public constant decimals = 18;\r\n    mapping(uint8 => uint8) public approveOwner;\r\n\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    bool public mintingFinished;\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount, address _owner) canMint internal returns (bool) {\r\n        balances[_to] = balances[_to].add(_amount);\r\n        balances[_owner] = balances[_owner].sub(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(_owner, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner canMint internal returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Peterson's Law Protection\r\n     * Claim tokens\r\n     */\r\n    function claimTokens(address _token) public onlyOwner {\r\n        if (_token == 0x0) {\r\n            owner.transfer(address(this).balance);\r\n            return;\r\n        }\r\n        MintableToken token = MintableToken(_token);\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(owner, balance);\r\n        emit Transfer(_token, owner, balance);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale is Ownable {\r\n    using SafeMath for uint256;\r\n    // address where funds are collected\r\n    address public wallet;\r\n    uint256 public hardWeiCap = 15830 ether;\r\n\r\n    // amount of raised money in wei\r\n    uint256 public weiRaised;\r\n    uint256 public tokenAllocated;\r\n\r\n    constructor(address _wallet) public {\r\n        require(_wallet != address(0));\r\n        wallet = _wallet;\r\n    }\r\n}\r\n\r\n\r\ncontract WSPXCrowdsale is Ownable, Crowdsale, MintableToken {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public rate  = 312500;\r\n\r\n    mapping (address => uint256) public deposited;\r\n    mapping (address => bool) internal isRefferer;\r\n\r\n    uint256 public weiMinSale = 0.1 ether;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 9 * 10**9 * (10 ** uint256(decimals));\r\n\r\n    uint256 public fundForSale   = 6 * 10**9 * (10 ** uint256(decimals));\r\n    uint256 public    fundTeam   = 1 * 10**9 * (10 ** uint256(decimals));\r\n    uint256 public    fundBounty = 2 * 10**9 * (10 ** uint256(decimals));\r\n\r\n    address public addressFundTeam   = 0xA2434A8F6457fe7CF29AEa841cf3D0B0FE3217c8;\r\n    address public addressFundBounty = 0x8828c48DEc2764868aD3bBf7fE9e8aBE773E3064;\r\n\r\n    // 1 Jan - 15 Jan\r\n    uint256 startTimeIcoStage1 = 1546300800; // Tue, 01 Jan 2019 00:00:00 GMT\r\n    uint256 endTimeIcoStage1 =   1547596799; // Tue, 15 Jan 2019 23:59:59 GMT\r\n\r\n    // 16 Jan - 31 Jan\r\n    uint256 startTimeIcoStage2 = 1547596800; // Wed, 16 Jan 2019 00:00:00 GMT\r\n    uint256 endTimeIcoStage2   = 1548979199; // Thu, 31 Jan 2019 23:59:59 GMT\r\n\r\n    // 1 Feb - 15 Feb\r\n    uint256 startTimeIcoStage3 = 1548979200; // Fri, 01 Feb 2019 00:00:00 GMT\r\n    uint256 endTimeIcoStage3   = 1554076799; // Fri, 15 Feb 2019 23:59:59 GMT\r\n\r\n    uint256 limitStage1 =  2 * 10**9 * (10 ** uint256(decimals));\r\n    uint256 limitStage2 =  4 * 10**9 * (10 ** uint256(decimals));\r\n    uint256 limitStage3 =  6 * 10**9 * (10 ** uint256(decimals));\r\n\r\n    uint256 public countInvestor;\r\n\r\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\r\n    event TokenLimitReached(address indexed sender, uint256 tokenRaised, uint256 purchasedToken);\r\n    event CurrentPeriod(uint period);\r\n    event ChangeTime(address indexed owner, uint256 newValue, uint256 oldValue);\r\n    event ChangeAddressWallet(address indexed owner, address indexed newAddress, address indexed oldAddress);\r\n    event ChangeRate(address indexed owner, uint256 newValue, uint256 oldValue);\r\n    event Burn(address indexed burner, uint256 value);\r\n    event HardCapReached();\r\n\r\n\r\n    constructor(address _owner, address _wallet) public\r\n    Crowdsale(_wallet)\r\n    {\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n        //owner = msg.sender; // for test's\r\n        transfersEnabled = true;\r\n        mintingFinished = false;\r\n        totalSupply = INITIAL_SUPPLY;\r\n        bool resultMintForOwner = mintForFund(owner);\r\n        require(resultMintForOwner);\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function() payable public {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    function buyTokens(address _investor) public payable returns (uint256){\r\n        require(_investor != address(0));\r\n        uint256 weiAmount = msg.value;\r\n        uint256 tokens = validPurchaseTokens(weiAmount);\r\n        if (tokens == 0) {revert();}\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        tokenAllocated = tokenAllocated.add(tokens);\r\n        mint(_investor, tokens, owner);\r\n\r\n        emit TokenPurchase(_investor, weiAmount, tokens);\r\n        if (deposited[_investor] == 0) {\r\n            countInvestor = countInvestor.add(1);\r\n        }\r\n        deposit(_investor);\r\n        wallet.transfer(weiAmount);\r\n        return tokens;\r\n    }\r\n\r\n    function getTotalAmountOfTokens(uint256 _weiAmount) internal returns (uint256) {\r\n        uint256 currentDate = now;\r\n        //currentDate = 1547114400; // Thu, 10 Jan 2019 10:00:00 GMT // for test's\r\n        uint currentPeriod = 0;\r\n        currentPeriod = getPeriod(currentDate);\r\n        uint256 amountOfTokens = 0;\r\n        if(currentPeriod > 0){\r\n            if(currentPeriod == 1){\r\n                amountOfTokens = _weiAmount.mul(rate).mul(130).div(100);\r\n                if (tokenAllocated.add(amountOfTokens) > limitStage1) {\r\n                    currentPeriod = currentPeriod.add(1);\r\n                    amountOfTokens = 0;\r\n                }\r\n            }\r\n            if(currentPeriod == 2){\r\n                amountOfTokens = _weiAmount.mul(rate).mul(120).div(100);\r\n                if (tokenAllocated.add(amountOfTokens) > limitStage2) {\r\n                    currentPeriod = currentPeriod.add(1);\r\n                    amountOfTokens = 0;\r\n                }\r\n            }\r\n            if(currentPeriod == 3){\r\n                amountOfTokens = _weiAmount.mul(rate).mul(110).div(100);\r\n                if (tokenAllocated.add(amountOfTokens) > limitStage3) {\r\n                    currentPeriod = 0;\r\n                    amountOfTokens = 0;\r\n                }\r\n            }\r\n        }\r\n        emit CurrentPeriod(currentPeriod);\r\n        return amountOfTokens;\r\n    }\r\n\r\n    function getPeriod(uint256 _currentDate) public view returns (uint) {\r\n        if(_currentDate < startTimeIcoStage1){\r\n            return 0;\r\n        }\r\n        if( startTimeIcoStage1 <= _currentDate && _currentDate <= endTimeIcoStage1){\r\n            return 1;\r\n        }\r\n        if( startTimeIcoStage2 <= _currentDate && _currentDate <= endTimeIcoStage2){\r\n            return 2;\r\n        }\r\n        if( startTimeIcoStage3 <= _currentDate && _currentDate <= endTimeIcoStage3){\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function deposit(address investor) internal {\r\n        deposited[investor] = deposited[investor].add(msg.value);\r\n    }\r\n\r\n    function mintForFund(address _walletOwner) internal returns (bool result) {\r\n        result = false;\r\n        require(_walletOwner != address(0));\r\n        balances[_walletOwner] = balances[_walletOwner].add(fundForSale);\r\n        balances[addressFundTeam] = balances[addressFundTeam].add(fundTeam);\r\n        balances[addressFundBounty] = balances[addressFundBounty].add(fundBounty);\r\n        result = true;\r\n    }\r\n\r\n    function getDeposited(address _investor) external view returns (uint256){\r\n        return deposited[_investor];\r\n    }\r\n\r\n    function validPurchaseTokens(uint256 _weiAmount) public returns (uint256) {\r\n        uint256 addTokens = getTotalAmountOfTokens(_weiAmount);\r\n        if (tokenAllocated.add(addTokens) > balances[owner]) {\r\n            emit TokenLimitReached(msg.sender, tokenAllocated, addTokens);\r\n            return 0;\r\n        }\r\n        if (weiRaised.add(_weiAmount) > hardWeiCap) {\r\n            emit HardCapReached();\r\n            return 0;\r\n        }\r\n        if (_weiAmount < weiMinSale) {\r\n            return 0;\r\n        }\r\n\r\n    return addTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev owner burn Token.\r\n     * @param _value amount of burnt tokens\r\n     */\r\n    function ownerBurnToken(uint _value) public onlyOwner {\r\n        require(_value > 0);\r\n        require(_value <= balances[owner]);\r\n        require(_value <= totalSupply);\r\n\r\n        balances[owner] = balances[owner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev owner change time for startTimeIcoStage1\r\n     * @param _value new time value\r\n     */\r\n    function setStartTimeIcoStage1(uint256 _value) external onlyOwner {\r\n        require(_value > 0);\r\n        uint256 _oldValue = startTimeIcoStage1;\r\n        startTimeIcoStage1 = _value;\r\n        emit ChangeTime(msg.sender, _value, _oldValue);\r\n    }\r\n\r\n    /**\r\n     * @dev owner change time for endTimeIcoStage1\r\n     * @param _value new time value\r\n     */\r\n    function setEndTimeIcoStage1(uint256 _value) external onlyOwner {\r\n        require(_value > 0);\r\n        uint256 _oldValue = endTimeIcoStage1;\r\n        endTimeIcoStage1 = _value;\r\n        emit ChangeTime(msg.sender, _value, _oldValue);\r\n    }\r\n\r\n    /**\r\n     * @dev owner change time for startTimeIcoStage2\r\n     * @param _value new time value\r\n     */\r\n    function setStartTimeIcoStage2(uint256 _value) external onlyOwner {\r\n        require(_value > 0);\r\n        uint256 _oldValue = startTimeIcoStage2;\r\n        startTimeIcoStage2 = _value;\r\n        emit ChangeTime(msg.sender, _value, _oldValue);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev owner change time for endTimeIcoStage2\r\n     * @param _value new time value\r\n     */\r\n    function setEndTimeIcoStage2(uint256 _value) external onlyOwner {\r\n        require(_value > 0);\r\n        uint256 _oldValue = endTimeIcoStage2;\r\n        endTimeIcoStage2 = _value;\r\n        emit ChangeTime(msg.sender, _value, _oldValue);\r\n    }\r\n\r\n    /**\r\n * @dev owner change time for startTimeIcoStage3\r\n * @param _value new time value\r\n */\r\n    function setStartTimeIcoStage3(uint256 _value) external onlyOwner {\r\n        require(_value > 0);\r\n        uint256 _oldValue = startTimeIcoStage3;\r\n        startTimeIcoStage3 = _value;\r\n        emit ChangeTime(msg.sender, _value, _oldValue);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev owner change time for endTimeIcoStage3\r\n     * @param _value new time value\r\n     */\r\n    function setEndTimeIcoStage3(uint256 _value) external onlyOwner {\r\n        require(_value > 0);\r\n        uint256 _oldValue = endTimeIcoStage3;\r\n        endTimeIcoStage3 = _value;\r\n        emit ChangeTime(msg.sender, _value, _oldValue);\r\n    }\r\n\r\n    /**\r\n     * @dev owner change address of wallet for collecting ETH\r\n     * @param _newWallet new address of wallet\r\n     */\r\n    function setWallet(address _newWallet) external onlyOwner {\r\n        require(_newWallet != address(0));\r\n        address _oldWallet = wallet;\r\n        wallet = _newWallet;\r\n        emit ChangeAddressWallet(msg.sender, _newWallet, _oldWallet);\r\n    }\r\n\r\n    /**\r\n     * @dev owner change price of tokens\r\n     * @param _newRate new price\r\n     */\r\n    function setRate(uint256 _newRate) external onlyOwner {\r\n        require(_newRate > 0);\r\n        uint256 _oldRate = rate;\r\n        rate = _newRate;\r\n        emit ChangeRate(msg.sender, _newRate, _oldRate);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"addressFundBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setEndTimeIcoStage1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setStartTimeIcoStage3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"approveOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"getDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_currentDate\",\"type\":\"uint256\"}],\"name\":\"getPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardWeiCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setStartTimeIcoStage2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addressFundTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAllocated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setEndTimeIcoStage3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ownerBurnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setStartTimeIcoStage1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setEndTimeIcoStage2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundBounty\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiMinSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"validPurchaseTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenRaised\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"purchasedToken\",\"type\":\"uint256\"}],\"name\":\"TokenLimitReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"CurrentPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"ChangeTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"ChangeAddressWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"ChangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HardCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WSPXCrowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001a9f3ac5069262e12140d4d4ddaf182312dfd2f3000000000000000000000000608ab6c548ad2667ca2bb14477a673cee7ede7d1","Library":"","SwarmSource":"bzzr://198d14788811c42658586a724e9aa29c4a20225ccbd44d69be56e5911ad8ec86"}]}