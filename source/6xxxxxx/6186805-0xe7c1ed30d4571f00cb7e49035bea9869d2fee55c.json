{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    hasMintPermission\r\n    canMint\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n// File: contracts/WhiteListManager.sol\r\n\r\ncontract WhiteListManager is Ownable {\r\n\r\n    // The list here will be updated by multiple separate WhiteList contracts\r\n    mapping (address => bool) public list;\r\n\r\n    function greylist(address addr) public onlyOwner {\r\n\r\n        list[addr] = false;\r\n    }\r\n\r\n    function greylistMany(address[] addrList) public onlyOwner {\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n            \r\n            greylist(addrList[i]);\r\n        }\r\n    }\r\n\r\n    function whitelist(address addr) public onlyOwner {\r\n\r\n        list[addr] = true;\r\n    }\r\n\r\n    function whitelistMany(address[] addrList) public onlyOwner {\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n            \r\n            whitelist(addrList[i]);\r\n        }\r\n    }\r\n\r\n    function isWhitelisted(address addr) public view returns (bool) {\r\n\r\n        return list[addr];\r\n    }\r\n}\r\n\r\n// File: contracts/Token.sol\r\n\r\ncontract MedipediaToken is MintableToken, BurnableToken, DetailedERC20, WhiteListManager{\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Every token amount must be multiplied by constant E18 to reflect decimals\r\n    // ------------------------------------------------------------------------\r\n    uint256 constant E18 = 10**18;\r\n\r\n    uint256 public constant BUSINESS_DEVELOPMENT_SUPPLY_LIMIT = 520000000 * E18; // 520,000,000 tokens\r\n    uint256 public constant MANAGEMENT_TEAM_SUPPLY_LIMIT = 520000000 * E18; // 520,000,000 tokens will be Locked for 18 Months\r\n    uint256 public constant ADVISORS_SUPPLY_LIMIT = 130000000 * E18; // 130,000,000 tokens will be Locked for 12 Months\r\n    uint256 public constant EARLY_INVESTORS_SUPPLY_LIMIT = 130000000 * E18; // 130,000,000 tokens will be Locked for 12 Months\r\n\r\n    // ------------------------------------------------------------------------\r\n    // INITIAL_SUPPLY =  BUSINESS_DEVELOPMENT_SUPPLY_LIMIT + MANAGEMENT_TEAM_SUPPLY_LIMIT +\r\n    //                   ADVISORS_SUPPLY_LIMIT + EARLY_INVESTORS_SUPPLY_LIMIT\r\n    // ------------------------------------------------------------------------\r\n    uint256 public constant INITIAL_SUPPLY = 1300000000 * E18;// 1.3 Billion tokens\r\n    uint256 public constant TOTAL_SUPPLY_LIMIT = 2600000000 * E18;// 2.6 Billion tokens\r\n\r\n    uint256 public constant TOKEN_SUPPLY_AIRDROP_LIMIT  = 15000000 * E18; // 15,000,000 tokens\r\n    uint256 public constant TOKEN_SUPPLY_BOUNTY_LIMIT   = 35000000 * E18; // 35,000,000 tokens\r\n\r\n    uint256 totalTokensIssuedToAdvisor;\r\n    uint256 totalTokensIssuedToEarlyInvestors;\r\n    uint256 totalTokensIssuedToMgmtTeam;\r\n\r\n    \r\n    uint256 releaseTimeToUnlockAdvisorTokens;\r\n    uint256 releaseTimeToUnlockEarlyInvestorTokens;\r\n    uint256 releaseTimeToUnlockManagementTokens;\r\n\r\n    bool public isICORunning;\r\n    address public icoContract;\r\n\r\n    uint256 public airDropTokenIssuedTotal;\r\n    uint256 public bountyTokenIssuedTotal;\r\n    uint256 public preICOTokenIssuedTotal;\r\n\r\n    uint8 private constant AIRDROP_EVENT = 1;\r\n    uint8 private constant BOUNTY_EVENT  = 2;\r\n    uint8 private constant PREICO_EVENT  = 3;\r\n    uint8 private constant ICO_EVENT     = 4;\r\n\r\n    event Released(uint256 amount);\r\n\r\n    constructor(string _name, string _symbol, uint8 _decimals) \r\n    DetailedERC20(_name, _symbol, _decimals) \r\n        public \r\n    {\r\n        balances[msg.sender] = BUSINESS_DEVELOPMENT_SUPPLY_LIMIT;\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n\r\n        totalTokensIssuedToAdvisor = 0;\r\n        totalTokensIssuedToEarlyInvestors = 0;\r\n        totalTokensIssuedToMgmtTeam = 0;\r\n\r\n        airDropTokenIssuedTotal = 0;\r\n        bountyTokenIssuedTotal = 0;\r\n        preICOTokenIssuedTotal = 0;\r\n\r\n        //Epoch timestamps\r\n        releaseTimeToUnlockAdvisorTokens = 1566345600; // GMT: Wednesday, 21 August 2019 00:00:00\r\n        releaseTimeToUnlockEarlyInvestorTokens = 1566345600; // GMT: Wednesday, 21 August 2019 00:00:00\r\n        releaseTimeToUnlockManagementTokens = 1582243200; // GMT: Friday, 21 February 2020 00:00:00\r\n        \r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Contract should not accept ETH\r\n    // ------------------------------------------------------------------------\r\n    function () public payable {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n   * @notice Transfers vested tokens to Advisor.\r\n   * @param _beneficiary ERC20 token which is being vested\r\n   * @param _releaseAmount ERC20 token which is being vested\r\n   */\r\n    function releaseToAdvisor(address _beneficiary, uint256 _releaseAmount) public onlyOwner{\r\n        require(isWhitelisted(_beneficiary), \"Beneficiary is not whitelisted\");\r\n        require(now >= releaseTimeToUnlockAdvisorTokens, \"Release Advisor tokens on or after GMT: Wednesday, 21 August 2019 00:00:00\");\r\n        \r\n        uint256 releaseAmount = _releaseAmount.mul(E18);\r\n        require(totalTokensIssuedToAdvisor.add(releaseAmount) <= ADVISORS_SUPPLY_LIMIT);\r\n\r\n        balances[_beneficiary] = balances[_beneficiary].add(releaseAmount);\r\n\r\n        totalTokensIssuedToAdvisor = totalTokensIssuedToAdvisor.add(releaseAmount);\r\n\r\n        emit Released(_releaseAmount);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to Early Investors.\r\n   * @param _beneficiary ERC20 token which is being vested\r\n   * @param _releaseAmount ERC20 token which is being vested\r\n   */\r\n    function releaseToEarlyInvestors(address _beneficiary, uint256 _releaseAmount) public onlyOwner{\r\n        require(isWhitelisted(_beneficiary), \"Beneficiary is not whitelisted\");\r\n        require(now >= releaseTimeToUnlockEarlyInvestorTokens, \"Release Early Investors tokens on or after GMT: Wednesday, 21 August 2019 00:00:00\");\r\n        \r\n        uint256 releaseAmount = _releaseAmount.mul(E18);\r\n        require(totalTokensIssuedToEarlyInvestors.add(releaseAmount) <= EARLY_INVESTORS_SUPPLY_LIMIT);\r\n\r\n        balances[_beneficiary] = balances[_beneficiary].add(releaseAmount);\r\n\r\n        totalTokensIssuedToEarlyInvestors = totalTokensIssuedToEarlyInvestors.add(releaseAmount);\r\n\r\n        emit Released(_releaseAmount);\r\n  }\r\n\r\n\r\n  /**\r\n   * @notice Transfers vested tokens to Management Team.\r\n   * @param _beneficiary ERC20 token which is being vested\r\n   * @param _releaseAmount ERC20 token which is being vested\r\n   */\r\n    function releaseToMgmtTeam(address _beneficiary, uint256 _releaseAmount) public onlyOwner{\r\n        require(isWhitelisted(_beneficiary), \"Beneficiary is not whitelisted\");\r\n        require(now >= releaseTimeToUnlockManagementTokens, \"Release Mgmt Team tokens on or after GMT: Friday, 21 February 2020 00:00:00\");\r\n        \r\n        uint256 releaseAmount = _releaseAmount.mul(E18);\r\n        require(totalTokensIssuedToMgmtTeam.add(releaseAmount) <= MANAGEMENT_TEAM_SUPPLY_LIMIT);\r\n\r\n        balances[_beneficiary] = balances[_beneficiary].add(releaseAmount);\r\n\r\n        totalTokensIssuedToMgmtTeam = totalTokensIssuedToMgmtTeam.add(releaseAmount);\r\n\r\n        emit Released(_releaseAmount);\r\n  }\r\n\r\n    /**\r\n     * @notice Start ICO.\r\n     * @param start bool value\r\n    */\r\n    function startICO(bool start) public onlyOwner{\r\n        isICORunning = start;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the ICO smart contract address.\r\n     * @param _icoContract contract address of the ICO smart contract\r\n    */\r\n    function setIcoContract(address _icoContract) public onlyOwner {\r\n        \r\n        // Allow to set the ICO contract only once\r\n        require(icoContract == address(0));\r\n        require(_icoContract != address(0));\r\n\r\n        icoContract = _icoContract;\r\n    }\r\n\r\n    /**\r\n     * @notice Reward Airdrop Participant.\r\n     * @param _beneficiary wallet address of the Airdrop Participant\r\n     * @param _amount number of tokens to be rewarded\r\n    */\r\n    function rewardAirdrop(address _beneficiary, uint256 _amount) public onlyOwner {\r\n        require(isWhitelisted(_beneficiary), \"Beneficiary is not whitelisted\");\r\n\r\n        uint256 amount = _amount.mul(E18);\r\n        require (totalSupply_.add(amount) < TOTAL_SUPPLY_LIMIT);\r\n\r\n        require(amount <= TOKEN_SUPPLY_AIRDROP_LIMIT);\r\n\r\n        require(airDropTokenIssuedTotal < TOKEN_SUPPLY_AIRDROP_LIMIT);\r\n\r\n        uint256 remainingTokens = TOKEN_SUPPLY_AIRDROP_LIMIT.sub(airDropTokenIssuedTotal);\r\n        if (amount > remainingTokens) {\r\n            amount = remainingTokens;\r\n        }\r\n\r\n        balances[_beneficiary] = balances[_beneficiary].add(amount);\r\n\r\n        airDropTokenIssuedTotal = airDropTokenIssuedTotal.add(amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n\r\n        emit Transfer(address(AIRDROP_EVENT), _beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Reward Bounty Participant.\r\n     * @param _beneficiary wallet address of the Bounty Participant\r\n     * @param _amount number of tokens to be rewarded\r\n    */\r\n    function rewardBounty(address _beneficiary, uint256 _amount) public onlyOwner {\r\n        require(isWhitelisted(_beneficiary), \"Beneficiary is not whitelisted\");\r\n        uint256 amount = _amount.mul(E18);\r\n        require (totalSupply_.add(amount) < TOTAL_SUPPLY_LIMIT);\r\n        require(amount <= TOKEN_SUPPLY_BOUNTY_LIMIT);\r\n\r\n        uint256 remainingTokens = TOKEN_SUPPLY_BOUNTY_LIMIT.sub(bountyTokenIssuedTotal);\r\n        if (amount > remainingTokens) {\r\n            amount = remainingTokens;\r\n        }\r\n\r\n        balances[_beneficiary] = balances[_beneficiary].add(amount);\r\n\r\n        bountyTokenIssuedTotal = bountyTokenIssuedTotal.add(amount);\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n\r\n        emit Transfer(address(BOUNTY_EVENT), _beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Pre ICO handler\r\n     * @param _beneficiary wallet address of the Pre ICO Buyer\r\n     * @param _amount number of tokens purchased\r\n    */\r\n    function preICO(address _beneficiary, uint256 _amount) public onlyOwner {\r\n        require(isWhitelisted(_beneficiary), \"Buyer is not whitelisted\");\r\n\r\n        uint256 amount = _amount.mul(E18);\r\n\r\n        require (totalSupply_.add(amount) <= TOTAL_SUPPLY_LIMIT);\r\n\r\n        uint256 remainingTokens = TOTAL_SUPPLY_LIMIT.sub(totalSupply_);\r\n\r\n        require (amount <= remainingTokens);\r\n\r\n        preICOTokenIssuedTotal = preICOTokenIssuedTotal.add(amount);\r\n\r\n        super.mint(_beneficiary, amount);\r\n\r\n        emit Transfer(address(PREICO_EVENT), _beneficiary, amount);\r\n    }\r\n\r\n    function preICOMany(address[] addrList, uint256[] amountList) public onlyOwner {\r\n\r\n        require(addrList.length == amountList.length);\r\n\r\n        for (uint256 i = 0; i < addrList.length; i++) {\r\n\r\n            preICO(addrList[i], amountList[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice ICO handler\r\n     * @param buyer wallet address of the ICO Buyer\r\n     * @param tokens number of tokens purchased\r\n    */\r\n    function onICO(address buyer, uint256 tokens) public onlyOwner returns (bool success) {\r\n        require(isICORunning);\r\n        require(isWhitelisted(buyer), \"Buyer is not whitelisted\");\r\n        require (icoContract != address(0));\r\n        require (msg.sender == icoContract);\r\n        require (tokens > 0);\r\n        require (buyer != address(0));\r\n\r\n        require (totalSupply_.add(tokens) <= TOTAL_SUPPLY_LIMIT);\r\n\r\n        super.mint(buyer, tokens);\r\n        emit Transfer(address(ICO_EVENT), buyer, tokens);\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyTokenIssuedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"greylist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICORunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onICO\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewardAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"preICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_BOUNTY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EARLY_INVESTORS_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropTokenIssuedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_SUPPLY_AIRDROP_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_releaseAmount\",\"type\":\"uint256\"}],\"name\":\"releaseToMgmtTeam\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrList\",\"type\":\"address[]\"},{\"name\":\"amountList\",\"type\":\"uint256[]\"}],\"name\":\"preICOMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BUSINESS_DEVELOPMENT_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MANAGEMENT_TEAM_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewardBounty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrList\",\"type\":\"address[]\"}],\"name\":\"greylistMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrList\",\"type\":\"address[]\"}],\"name\":\"whitelistMany\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"list\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"start\",\"type\":\"bool\"}],\"name\":\"startICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_releaseAmount\",\"type\":\"uint256\"}],\"name\":\"releaseToAdvisor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ADVISORS_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_SUPPLY_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preICOTokenIssuedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icoContract\",\"type\":\"address\"}],\"name\":\"setIcoContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_releaseAmount\",\"type\":\"uint256\"}],\"name\":\"releaseToEarlyInvestors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MedipediaToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000f4d656469706564696120546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d45500000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://a31ad9efa30c7dd98572eed78dc03e55e5d5e0e163f33e03cce0d4922233af34"}]}