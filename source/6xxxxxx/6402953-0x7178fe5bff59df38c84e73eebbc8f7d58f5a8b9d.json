{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// donate: 0x95CC9E2FE2E2de48A02CF6C09439889d72D5ea78\r\n\r\ncontract GorgonaKiller {\r\n    // адрес горгоны\r\n    address public GorgonaAddr; \r\n    \r\n    // минимальный депозит\r\n    uint constant public MIN_DEP = 0.01 ether; \r\n    \r\n    // максимальное число транзакций при выплате дивидендов\r\n    uint constant public TRANSACTION_LIMIT = 100;\r\n    \r\n    // баланс дивидендов\r\n    uint public dividends;\r\n    \r\n    // id последнего инвестора, которому прошла оплата\r\n    uint public last_payed_id;\r\n    \r\n    // общая сумма депозитов от инвесторов\r\n    uint public deposits; \r\n    \r\n    // адреса инвесторов\r\n    address[] addresses;\r\n\r\n    // мапинг адрес инвестора - структура инвестора\r\n    mapping(address => Investor) public members;\r\n    \r\n    // id адреса в investors, deposit - сумма депозитов\r\n    struct Investor {\r\n        uint id;\r\n        uint deposit;\r\n    }\r\n    \r\n    constructor() public {\r\n        GorgonaAddr = 0x020e13faF0955eFeF0aC9cD4d2C64C513ffCBdec; \r\n    }\r\n\r\n    // обработка поступлений\r\n    function () external payable {\r\n\r\n        // если пришло с горгоны выходим\r\n        if (msg.sender == GorgonaAddr) {\r\n            return;\r\n        }\r\n        \r\n        // если баланс без текущего поступления > 0 пишем в дивиденды\r\n        if ( address(this).balance - msg.value > 0 ) {\r\n            dividends = address(this).balance - msg.value;\r\n        }\r\n        \r\n        // выплачиваем дивиденды\r\n        if ( dividends > 0 ) {\r\n            payDividends();\r\n        }\r\n        \r\n        // инвестируем текущее поступление\r\n        if (msg.value >= MIN_DEP) {\r\n            Investor storage investor = members[msg.sender];\r\n\r\n            // добавляем инвестора, если еще нет\r\n            if (investor.id == 0) {\r\n                investor.id = addresses.push(msg.sender);\r\n            }\r\n\r\n            // пополняем депозит инвестора и общий депозит\r\n            investor.deposit += msg.value;\r\n            deposits += msg.value;\r\n    \r\n            // отправляем в горгону\r\n            payToGorgona();\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    // отправляем текущее поступление в горгону\r\n    function payToGorgona() private {\r\n        if ( GorgonaAddr.call.value( msg.value )() ) return; \r\n    }\r\n\r\n    // выплата дивидендов\r\n    function payDividends() private {\r\n        address[] memory _addresses = addresses;\r\n        \r\n        uint _dividends = dividends;\r\n\r\n        if ( _dividends > 0) {\r\n            uint num_payed = 0;\r\n            \r\n            for (uint i = last_payed_id; i < _addresses.length; i++) {\r\n                \r\n                // считаем для каждого инвестора долю дивидендов\r\n                uint amount = _dividends * members[ _addresses[i] ].deposit / deposits;\r\n                \r\n                // отправляем дивиденды\r\n                if ( _addresses[i].send( amount ) ) {\r\n                    last_payed_id = i+1;\r\n                    num_payed += 1;\r\n                }\r\n                \r\n                // если достигли лимита выплат выходим из цикла\r\n                if ( num_payed == TRANSACTION_LIMIT ) break;\r\n                \r\n            }\r\n            \r\n            // обнуляем id последней выплаты, если выплатили всем\r\n            if ( last_payed_id >= _addresses.length) {\r\n                last_payed_id = 0;\r\n            }\r\n            \r\n            dividends = 0;\r\n            \r\n        }\r\n        \r\n    }\r\n    \r\n    // смотрим баланс на контракте\r\n    function getBalance() public view returns(uint) {\r\n        return address(this).balance / 10 ** 18;\r\n    }\r\n\r\n    // смотрим число инвесторов\r\n    function getInvestorsCount() public view returns(uint) {\r\n        return addresses.length;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"GorgonaAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_payed_id\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"deposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_DEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TRANSACTION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"GorgonaKiller","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://49642edd320eac3b263881f699243ee47edde304b701689e12dfae377373a42b"}]}