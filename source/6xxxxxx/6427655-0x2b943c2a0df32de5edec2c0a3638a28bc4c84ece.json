{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract demo1 {\r\n    \r\n    \r\n    mapping(address => uint256) private playerVault;\r\n   \r\n    modifier hasEarnings()\r\n    {\r\n        require(playerVault[msg.sender] > 0);\r\n        _;\r\n    }\r\n    \r\n    function myEarnings()\r\n        external\r\n        view\r\n        hasEarnings\r\n        returns(uint256)\r\n    {\r\n        return playerVault[msg.sender];\r\n    }\r\n    \r\n    function withdraw()\r\n        external\r\n        hasEarnings\r\n    {\r\n\r\n        uint256 amount = playerVault[msg.sender];\r\n        playerVault[msg.sender] = 0;\r\n\r\n        msg.sender.transfer(amount);\r\n    }\r\n    \r\n   \r\n\r\n     function deposit() public payable returns (uint) {\r\n        // Use 'require' to test user inputs, 'assert' for internal invariants\r\n        // Here we are making sure that there isn't an overflow issue\r\n        require((playerVault[msg.sender] + msg.value) >= playerVault[msg.sender]);\r\n\r\n        playerVault[msg.sender] += msg.value;\r\n        // no \"this.\" or \"self.\" required with state variable\r\n        // all values set to data type's initial value by default\r\n\r\n        return playerVault[msg.sender];\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"demo1","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fd997b55f73f5a886502e8e83756cd444ed88185ece4b8fd6c9e4c0d0cff923c"}]}