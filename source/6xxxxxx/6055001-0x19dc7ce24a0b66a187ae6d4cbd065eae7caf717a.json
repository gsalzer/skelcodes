{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\ncontract ListingsERC20 is Ownable {\r\n      using SafeMath for uint256;\r\n\r\n    struct Listing {\r\n        address seller;\r\n        address tokenContractAddress;\r\n        uint256 price;\r\n        uint256 allowance;\r\n        uint256 dateStarts;\r\n        uint256 dateEnds;\r\n    }\r\n    event ListingCreated(bytes32 indexed listingId, address tokenContractAddress, uint256 price, uint256 allowance, uint256 dateStarts, uint256 dateEnds, address indexed seller);\r\n    event ListingCancelled(bytes32 indexed listingId, uint256 dateCancelled);\r\n    event ListingBought(bytes32 indexed listingId, address tokenContractAddress, uint256 price, uint256 amount, uint256 dateBought, address buyer);\r\n\r\n    string constant public VERSION = \"2.0.0\";\r\n    uint16 constant public GAS_LIMIT = 4999;\r\n    uint256 public ownerPercentage;\r\n    mapping (bytes32 => Listing) public listings;\r\n    mapping (bytes32 => uint256) public sold;\r\n    constructor (uint256 percentage) public {\r\n        ownerPercentage = percentage;\r\n    }\r\n\r\n    function updateOwnerPercentage(uint256 percentage) external onlyOwner {\r\n        ownerPercentage = percentage;\r\n    }\r\n\r\n    function withdrawBalance() onlyOwner external {\r\n        assert(owner.send(address(this).balance));\r\n    }\r\n    function approveToken(address token, uint256 amount) onlyOwner external {\r\n        assert(DetailedERC20(token).approve(owner, amount));\r\n    }\r\n\r\n    function() external payable { }\r\n\r\n    function getHash(address tokenContractAddress, uint256 price, uint256 allowance, uint256 dateEnds, uint256 salt) external view returns (bytes32) {\r\n        return getHashInternal(tokenContractAddress, price, allowance, dateEnds, salt);\r\n    }\r\n\r\n    function getHashInternal(address tokenContractAddress, uint256 price, uint256 allowance, uint256 dateEnds, uint256 salt) internal view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(msg.sender, tokenContractAddress, price, allowance, dateEnds, salt));\r\n    }\r\n    function getBalance(address tokenContract, address seller) internal returns (uint256) {\r\n        return DetailedERC20(tokenContract).balanceOf.gas(GAS_LIMIT)(seller);\r\n    }\r\n    function getAllowance(address tokenContract, address seller, address listingContract) internal returns (uint256) {\r\n        return DetailedERC20(tokenContract).allowance.gas(GAS_LIMIT)(seller, listingContract);\r\n    }\r\n    function getDecimals(address tokenContract) internal returns (uint256) {\r\n        return DetailedERC20(tokenContract).decimals.gas(GAS_LIMIT)();\r\n    }\r\n\r\n    function createListing(address tokenContractAddress, uint256 price, uint256 allowance, uint256 dateEnds, uint256 salt) external {\r\n        require(price > 0, \"price less than zero\");\r\n        require(allowance > 0, \"allowance less than zero\");\r\n        require(dateEnds > 0, \"dateEnds less than zero\");\r\n        require(getBalance(tokenContractAddress, msg.sender) >= allowance, \"balance less than allowance\");\r\n        bytes32 listingId = getHashInternal(tokenContractAddress, price, allowance, dateEnds, salt);\r\n        Listing memory listing = Listing(msg.sender, tokenContractAddress, price, allowance, now, dateEnds);\r\n        listings[listingId] = listing;\r\n        emit ListingCreated(listingId, tokenContractAddress, price, allowance, now, dateEnds, msg.sender);\r\n\r\n    }\r\n\r\n    function cancelListing(bytes32 listingId) external {\r\n        Listing storage listing = listings[listingId];\r\n        require(msg.sender == listing.seller);\r\n        delete listings[listingId];\r\n        emit ListingCancelled(listingId, now);\r\n    }\r\n    function buyListing(bytes32 listingId, uint256 amount) external payable {\r\n        Listing storage listing = listings[listingId];\r\n        address seller = listing.seller;\r\n        address contractAddress = listing.tokenContractAddress;\r\n        uint256 price = listing.price;\r\n        uint256 decimals = getDecimals(listing.tokenContractAddress);\r\n        uint256 factor = 10 ** decimals;\r\n        uint256 sale;\r\n        if (decimals > 0) {\r\n            sale = price.mul(amount).div(factor);\r\n        } else {\r\n            sale = price.mul(amount);\r\n        } \r\n        uint256 allowance = listing.allowance;\r\n        //make sure listing is still available\r\n        require(now <= listing.dateEnds);\r\n        //make sure there are still enough to sell from this listing\r\n        require(allowance - sold[listingId] >= amount);\r\n        //make sure that the seller still has that amount to sell\r\n        require(getBalance(contractAddress, seller) >= amount);\r\n        //make sure that the seller still will allow that amount to be sold\r\n        require(getAllowance(contractAddress, seller, this) >= amount);\r\n        require(msg.value == sale);\r\n        DetailedERC20 tokenContract = DetailedERC20(contractAddress);\r\n        require(tokenContract.transferFrom(seller, msg.sender, amount));\r\n        if (ownerPercentage > 0) {\r\n            seller.transfer(sale - (sale.mul(ownerPercentage).div(10000)));\r\n        } else {\r\n            seller.transfer(sale);\r\n        }\r\n        sold[listingId] = sold[listingId].add(amount);\r\n        emit ListingBought(listingId, contractAddress, price, amount, now, msg.sender);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GAS_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"updateOwnerPercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"allowance\",\"type\":\"uint256\"},{\"name\":\"dateEnds\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"allowance\",\"type\":\"uint256\"},{\"name\":\"dateEnds\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"createListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"cancelListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listingId\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyListing\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"listings\",\"outputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"allowance\",\"type\":\"uint256\"},{\"name\":\"dateStarts\",\"type\":\"uint256\"},{\"name\":\"dateEnds\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"percentage\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"allowance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dateStarts\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dateEnds\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ListingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"dateCancelled\",\"type\":\"uint256\"}],\"name\":\"ListingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"dateBought\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"ListingBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ListingsERC20","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000064","Library":"","SwarmSource":"bzzr://012792ba17c119a00cac35d826b5b5c4ebc3da1b8d865eb5454ff7298d09c6dd"}]}