{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner) ;\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public{\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/// @title Hive Chain Coin (HIVE)\r\ncontract HiveChainToken is owned {\r\n    // Public variables of the token\r\n    string public constant standard = \"ERC20\";\r\n    string public constant name = \"Hive Chain Coin\";  \r\n    string public constant symbol = \"HIVE\";\r\n    uint8  public constant decimals =18;\r\n    uint256 public constant totalSupply=3000000000*10 ** uint256(decimals);\r\n    uint public allcatedTime = 0;\r\n \r\n    address  public constant teamAddress = 0x95EEe45FFef756D8bfce8D8Ad1617c331A6d0CbB;\r\n                                            \r\n    \r\n    address  public constant counselorAddress = 0x067AA439831C0E6070Aaf0Ba2c6c6EC4bb4c9D09;\r\n    \r\n    address  public constant footstoneAddress = 0xe1461098D05c8d30aACb8Db6E3c10F9aCE80319A;\r\n\r\n    // This creates an array with all balanceOf \r\n    mapping (address => uint256) public balanceOf;\r\n \r\n   \r\n    // These are related to HC team members\r\n    mapping (address => bool) public frozenAccount;\r\n \r\n\t\t// This creates an array with all lockedTokens \r\n    mapping (address => frozenTeam[]) public lockedTokens;\r\n    \r\n    \r\n   \r\n\t\t// Triggered when tokens are transferred.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    struct frozenTeam{       \r\n        uint256 time;\r\n        uint256 token;    \r\n    }\r\n\r\n    // Constructor \r\n    function HiveChainToken()  public\r\n    {\r\n       \r\n        balanceOf[0x065cCc2Ed012925f428643df16AA9395a1e5c664] = totalSupply*116/300; \r\n        \r\n        balanceOf[msg.sender]=totalSupply/3;\r\n        \r\n        //team\r\n        \r\n        balanceOf[teamAddress] = totalSupply*15/100; // 15% \r\n            \r\n        allcatedTime=now;\r\n        \r\n        frozenAccount[teamAddress]=true;\r\n         for (uint i = 0; i < 19; i++) {\r\n             uint256 temp0=balanceOf[teamAddress]*(i+1)*5/100;\r\n             lockedTokens[teamAddress].push(frozenTeam({\r\n                 time:allcatedTime + 3*(i+1) * 30 days ,\r\n                 token:balanceOf[teamAddress]-temp0\r\n             }));\r\n            \r\n         }\r\n        \r\n        \r\n       balanceOf[counselorAddress] = totalSupply*3/100; // 3% \r\n       \r\n       frozenAccount[counselorAddress]=true;\r\n            for (uint j = 0; j < 5; j++){\r\n                 uint256 temp;\r\n                 if(j==0){\r\n                     temp=balanceOf[counselorAddress]*80/100;\r\n                 }else if(j==1){\r\n                     temp=balanceOf[counselorAddress]*65/100;\r\n                 }else if(j==2){\r\n                     temp=balanceOf[counselorAddress]*50/100;\r\n                 }else if(j==3){\r\n                     temp=balanceOf[counselorAddress]*30/100;\r\n                 }else if(j==4){\r\n                      temp=balanceOf[counselorAddress]*15/100;\r\n                 }\r\n                 lockedTokens[counselorAddress].push(frozenTeam({\r\n                 time:allcatedTime + (j+1) * 30 days ,\r\n                 token:temp\r\n             }));\r\n            }\r\n        \r\n       \r\n        \r\n        balanceOf[footstoneAddress] = totalSupply*10/100; // 10% \r\n      \r\n       \r\n       frozenAccount[footstoneAddress]=true;\r\n            for (uint k = 0; k < 5; k++){\r\n                 uint256 temp1;\r\n                   if(k==0){\r\n                     temp1=balanceOf[footstoneAddress]*80/100;\r\n                 }else if(k==1){\r\n                     temp1=balanceOf[footstoneAddress]*65/100;\r\n                 }else if(k==2){\r\n                     temp1=balanceOf[footstoneAddress]*50/100;\r\n                 }else if(k==3){\r\n                     temp1=balanceOf[footstoneAddress]*30/100;\r\n                 }else if(k==4){\r\n                      temp1=balanceOf[footstoneAddress]*15/100;\r\n                 }\r\n                 lockedTokens[footstoneAddress].push(frozenTeam({\r\n                 time:allcatedTime + (k+1) * 30 days ,\r\n                 token:temp1\r\n             }));\r\n            }\r\n        \r\n                            \r\n    }\r\n  \r\n\r\n\r\n    // Transfer the balance from owner\"s account to another account\r\n    function transfer(address _to, uint256 _amount) public\r\n        returns (bool success) \r\n    {\r\n  \r\n        if (_amount <= 0) return false;\r\n      \r\n        if (frozenRules(msg.sender, _amount)) return false;\r\n\r\n        if (balanceOf[msg.sender] >= _amount\r\n            && balanceOf[_to] + _amount > balanceOf[_to]) {\r\n\r\n            balanceOf[msg.sender] -= _amount;\r\n            balanceOf[_to] += _amount;\r\n            Transfer(msg.sender, _to, _amount);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }     \r\n    }\r\n \r\n\r\n\r\n    /// @dev Token frozen rules for token holders.\r\n    /// @param _from The token sender.\r\n    /// @param _value The token amount.\r\n    function frozenRules(address _from, uint256 _value) \r\n        internal \r\n        returns (bool success) \r\n    {\r\n        if (frozenAccount[_from]) {\r\n            \r\n            frozenTeam[] storage lockedInfo=lockedTokens[_from];\r\n            for(uint256 i=0;i<lockedInfo.length;i++){\r\n                if (now <lockedInfo[i].time) {\r\n                   // 100% locked within the first 6 months.\r\n                        if (balanceOf[_from] - _value < lockedInfo[i].token)\r\n                            return true;  \r\n                 }else if (now >=lockedInfo[i].time && now < lockedInfo[i+1].time) {\r\n                     // 20% unlocked after 6 months.\r\n                        if (balanceOf[_from] - _value <lockedInfo[i+1].token) \r\n                            return true;  \r\n                 }else if(now>=lockedInfo[lockedInfo.length-1].time){\r\n                      frozenAccount[_from] = false; \r\n                      return false;\r\n                 }\r\n            }\r\n            \r\n        }\r\n        return false;\r\n    }   \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allcatedTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"footstoneAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"counselorAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"HiveChainToken","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9661fa8ab8e909b35e71528f25856eb068e36de3196b32314bfaf6f4e05b2c02"}]}