{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract Developed {\r\n    using SafeMath for uint256;\r\n    \r\n    struct Developer {\r\n        address account;\r\n        uint256 comission;\r\n        bool isCollab;\r\n    }\r\n    \r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 0;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint64 public totalSupply;\r\n\r\n\r\n    // State variables for the payout\r\n    uint public payoutBalance = 0;\r\n    uint public payoutIndex = 0;\r\n    bool public paused = false;\r\n    uint public lastPayout;\r\n\r\n\r\n    constructor() public payable {        \r\n        Developer memory dev = Developer(msg.sender, 1 szabo, true);\r\n        developers[msg.sender] = dev;\r\n        developerAccounts.push(msg.sender);\r\n        name = \"MyHealthData Divident Token\";\r\n        symbol = \"MHDDEV\";\r\n        totalSupply = 1 szabo;\r\n    }\r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    \r\n    mapping(address => Developer) internal developers;\r\n    address[] public developerAccounts;\r\n    \r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n    \r\n    modifier comissionLimit (uint256 value) {\r\n        require(value < 1 szabo, \"Invalid value\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused () {\r\n        require(paused == false, \"Transfers paused, to re-enable transfers finish the payout round.\");\r\n        _;\r\n    }\r\n\r\n    function () external payable {}\r\n\r\n    function newDeveloper(address _devAccount, uint64 _comission, bool _isCollab) public comissionLimit(_comission) returns(address) {\r\n        require(_devAccount != address(0), \"Invalid developer account\");\r\n        \r\n        bool isCollab = _isCollab;\r\n        Developer storage devRequester = developers[msg.sender];\r\n        //\"Developer have to be a collaborator in order to invite others to be a Developer\r\n        if (!devRequester.isCollab) {\r\n            isCollab = false;\r\n        }\r\n        \r\n        require(devRequester.comission>=_comission, \"The developer requester must have comission balance in order to sell her commission\");\r\n        devRequester.comission = devRequester.comission.sub(_comission);\r\n        \r\n        Developer memory dev = Developer(_devAccount, _comission, isCollab);\r\n        developers[_devAccount] = dev;\r\n\r\n        developerAccounts.push(_devAccount);\r\n        return _devAccount;\r\n    }\r\n\r\n    function totalDevelopers() public view returns (uint256) {\r\n        return developerAccounts.length;\r\n    }\r\n\r\n    function getSingleDeveloper(address _devID) public view returns (address devAccount, uint256 comission, bool isCollaborator) {\r\n        require(_devID != address(0), \"Dev ID must be greater than zero\");\r\n        //require(devID <= numDevelopers, \"Dev ID must be valid. It is greather than total developers available\");\r\n        Developer memory dev = developers[_devID];\r\n        devAccount = dev.account;\r\n        comission = dev.comission;\r\n        isCollaborator = dev.isCollab;\r\n        return;\r\n    }\r\n    \r\n    function payComission() public returns (bool success) {\r\n        require (lastPayout < now - 14 days, \"Only one payout every two weeks allowed\");\r\n        paused = true;\r\n        if (payoutIndex == 0)\r\n            payoutBalance = address(this).balance;\r\n        for (uint i = payoutIndex; i < developerAccounts.length; i++) {\r\n            Developer memory dev = developers[developerAccounts[i]];\r\n            if (dev.comission > 0) {\r\n                uint valueToSendToDev = (payoutBalance.mul(dev.comission)).div(1 szabo);\r\n\r\n                // Developers should ensure these TXs will not revert\r\n                // otherwise they'll lose the payout (payout remains in \r\n                // balance and will split with everyone in the next round)\r\n                dev.account.send(valueToSendToDev);\r\n\r\n                if (gasleft() < 100000) {\r\n                    payoutIndex = i + 1;\r\n                    return;\r\n                }\r\n            }            \r\n        }\r\n        success = true;\r\n        payoutIndex = 0;\r\n        payoutBalance = 0;\r\n        paused = false;\r\n        lastPayout = now;\r\n        return;\r\n    }   \r\n    \r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint64 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        Developer memory dev = developers[owner];\r\n        return dev.comission;\r\n    }\r\n    \r\n    \r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param from address The address which you want to send tokens from\r\n    * @param to address The address which you want to transfer to\r\n    * @param value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address from, address to, uint64 value) public comissionLimit(value) whenNotPaused returns (bool)    {\r\n                \r\n        Developer storage devRequester = developers[from];\r\n        require(devRequester.comission > 0, \"The developer receiver must exist\");\r\n        \r\n        require(value <= balanceOf(from), \"There is no enough balance to perform this operation\");\r\n        require(value <= _allowed[from][msg.sender], \"Trader is not allowed to transact to this limit\");\r\n\r\n        Developer storage devReciever = developers[to];\r\n        if (devReciever.account == address(0)) {\r\n            Developer memory dev = Developer(to, 0, false);\r\n            developers[to] = dev;\r\n            developerAccounts.push(to);\r\n        }\r\n        \r\n        devRequester.comission = devRequester.comission.sub(value);\r\n        devReciever.comission = devReciever.comission.add(value);\r\n\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        \r\n        emit Transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint64 value) public comissionLimit(value) whenNotPaused returns (bool) {\r\n        require(value <= balanceOf(msg.sender), \"Spender does not have enough balance\");\r\n        require(to != address(0), \"Invalid new owner address\");\r\n             \r\n        Developer storage devRequester = developers[msg.sender];\r\n        \r\n        require(devRequester.comission >= value, \"The developer requester must have comission balance in order to sell her commission\");\r\n        \r\n        Developer storage devReciever = developers[to];\r\n        if (devReciever.account == address(0)) {\r\n            Developer memory dev = Developer(to, 0, false);\r\n            developers[to] = dev;\r\n            developerAccounts.push(to);\r\n        }\r\n        \r\n        devRequester.comission = devRequester.comission.sub(value);\r\n        devReciever.comission = devReciever.comission.add(value);\r\n        \r\n        emit Transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param spender The address which will spend the funds.\r\n    * @param value The amount of tokens to be spent.\r\n    */\r\n    function approve(address spender, uint64 value) public comissionLimit(value) returns (bool) {\r\n        require(spender != address(0), \"Invalid spender\");\r\n    \r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param owner address The address which owns the funds.\r\n    * @param spender address The address which will spend the funds.\r\n    * @return A uint64 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address owner, address spender) public view returns (uint256)    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed_[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * @param spender The address which will spend the funds.\r\n    * @param addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseAllowance(address spender, uint64 addedValue) public comissionLimit(addedValue) returns (bool)    {\r\n        require(spender != address(0), \"Invalid spender\");\r\n        \r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed_[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * @param spender The address which will spend the funds.\r\n    * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public comissionLimit(subtractedValue) returns (bool)    {\r\n        require(spender != address(0), \"Invalid spender\");\r\n        \r\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payComission\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDevelopers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_devID\",\"type\":\"address\"}],\"name\":\"getSingleDeveloper\",\"outputs\":[{\"name\":\"devAccount\",\"type\":\"address\"},{\"name\":\"comission\",\"type\":\"uint256\"},{\"name\":\"isCollaborator\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint64\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPayout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"developerAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_devAccount\",\"type\":\"address\"},{\"name\":\"_comission\",\"type\":\"uint64\"},{\"name\":\"_isCollab\",\"type\":\"bool\"}],\"name\":\"newDeveloper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Developed","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://223e9bd0a97b63273c04b9d68b48fe1adfdb5d8fffe2c66513de7d1557a3d7ce"}]}