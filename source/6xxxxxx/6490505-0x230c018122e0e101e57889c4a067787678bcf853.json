{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts\\safe_math_lib.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\database.sol\r\n\r\ncontract database {\r\n\r\n    /* libraries */\r\n    using SafeMath for uint256;\r\n\r\n    /* struct declarations */\r\n    struct participant {\r\n        address eth_address; // your eth address\r\n        uint256 topl_address; // your topl address\r\n        uint256 arbits; // the amount of a arbits you have\r\n        uint256 num_of_pro_rata_tokens_alloted;\r\n        bool arbits_kyc_whitelist; // if you pass arbits level kyc you get this\r\n        uint8 num_of_uses;\r\n    }\r\n\r\n    /* variable declarations */\r\n    // permission variables\r\n    mapping(address => bool) public sale_owners;\r\n    mapping(address => bool) public owners;\r\n    mapping(address => bool) public masters;\r\n    mapping(address => bool) public kycers;\r\n\r\n    // database mapping\r\n    mapping(address => participant) public participants;\r\n    address[] public participant_keys;\r\n\r\n    // sale open variables\r\n    bool public arbits_presale_open = false; // Presale variables\r\n    bool public iconiq_presale_open = false; // ^^^^^^^^^^^^^^^^^\r\n    bool public arbits_sale_open = false; // Main sale variables\r\n\r\n    // sale state variables\r\n    uint256 public pre_kyc_bonus_denominator;\r\n    uint256 public pre_kyc_bonus_numerator;\r\n    uint256 public pre_kyc_iconiq_bonus_denominator;\r\n    uint256 public pre_kyc_iconiq_bonus_numerator;\r\n\r\n    uint256 public contrib_arbits_min;\r\n    uint256 public contrib_arbits_max;\r\n\r\n    // presale variables\r\n    uint256 public presale_arbits_per_ether;        // two different prices, but same cap\r\n    uint256 public presale_iconiq_arbits_per_ether; // and sold values\r\n    uint256 public presale_arbits_total = 18000000;\r\n    uint256 public presale_arbits_sold;\r\n\r\n    // main sale variables\r\n    uint256 public sale_arbits_per_ether;\r\n    uint256 public sale_arbits_total;\r\n    uint256 public sale_arbits_sold;\r\n\r\n    /* constructor */\r\n    constructor() public {\r\n        owners[msg.sender] = true;\r\n    }\r\n\r\n    /* permission functions */\r\n    function add_owner(address __subject) public only_owner {\r\n        owners[__subject] = true;\r\n    }\r\n\r\n    function remove_owner(address __subject) public only_owner {\r\n        owners[__subject] = false;\r\n    }\r\n\r\n    function add_master(address _subject) public only_owner {\r\n        masters[_subject] = true;\r\n    }\r\n\r\n    function remove_master(address _subject) public only_owner {\r\n        masters[_subject] = false;\r\n    }\r\n\r\n    function add_kycer(address _subject) public only_owner {\r\n        kycers[_subject] = true;\r\n    }\r\n\r\n    function remove_kycer(address _subject) public only_owner {\r\n        kycers[_subject] = false;\r\n    }\r\n\r\n    /* modifiers */\r\n    modifier log_participant_update(address __eth_address) {\r\n        participant_keys.push(__eth_address); // logs the given address in participant_keys\r\n        _;\r\n    }\r\n\r\n    modifier only_owner() {\r\n        require(owners[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier only_kycer() {\r\n        require(kycers[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier only_master_or_owner() {\r\n        require(masters[msg.sender] || owners[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /* database functions */\r\n    // GENERAL VARIABLE getters & setters\r\n    // getters    \r\n    function get_sale_owner(address _a) public view returns(bool) {\r\n        return sale_owners[_a];\r\n    }\r\n    \r\n    function get_contrib_arbits_min() public view returns(uint256) {\r\n        return contrib_arbits_min;\r\n    }\r\n\r\n    function get_contrib_arbits_max() public view returns(uint256) {\r\n        return contrib_arbits_max;\r\n    }\r\n\r\n    function get_pre_kyc_bonus_numerator() public view returns(uint256) {\r\n        return pre_kyc_bonus_numerator;\r\n    }\r\n\r\n    function get_pre_kyc_bonus_denominator() public view returns(uint256) {\r\n        return pre_kyc_bonus_denominator;\r\n    }\r\n\r\n    function get_pre_kyc_iconiq_bonus_numerator() public view returns(uint256) {\r\n        return pre_kyc_iconiq_bonus_numerator;\r\n    }\r\n\r\n    function get_pre_kyc_iconiq_bonus_denominator() public view returns(uint256) {\r\n        return pre_kyc_iconiq_bonus_denominator;\r\n    }\r\n\r\n    function get_presale_iconiq_arbits_per_ether() public view returns(uint256) {\r\n        return (presale_iconiq_arbits_per_ether);\r\n    }\r\n\r\n    function get_presale_arbits_per_ether() public view returns(uint256) {\r\n        return (presale_arbits_per_ether);\r\n    }\r\n\r\n    function get_presale_arbits_total() public view returns(uint256) {\r\n        return (presale_arbits_total);\r\n    }\r\n\r\n    function get_presale_arbits_sold() public view returns(uint256) {\r\n        return (presale_arbits_sold);\r\n    }\r\n\r\n    function get_sale_arbits_per_ether() public view returns(uint256) {\r\n        return (sale_arbits_per_ether);\r\n    }\r\n\r\n    function get_sale_arbits_total() public view returns(uint256) {\r\n        return (sale_arbits_total);\r\n    }\r\n\r\n    function get_sale_arbits_sold() public view returns(uint256) {\r\n        return (sale_arbits_sold);\r\n    }\r\n\r\n    // setters\r\n    function set_sale_owner(address _a, bool _v) public only_master_or_owner {\r\n        sale_owners[_a] = _v;\r\n    }\r\n\r\n    function set_contrib_arbits_min(uint256 _v) public only_master_or_owner {\r\n        contrib_arbits_min = _v;\r\n    }\r\n\r\n    function set_contrib_arbits_max(uint256 _v) public only_master_or_owner {\r\n        contrib_arbits_max = _v;\r\n    }\r\n\r\n    function set_pre_kyc_bonus_numerator(uint256 _v) public only_master_or_owner {\r\n        pre_kyc_bonus_numerator = _v;\r\n    }\r\n\r\n    function set_pre_kyc_bonus_denominator(uint256 _v) public only_master_or_owner {\r\n        pre_kyc_bonus_denominator = _v;\r\n    }\r\n\r\n    function set_pre_kyc_iconiq_bonus_numerator(uint256 _v) public only_master_or_owner {\r\n        pre_kyc_iconiq_bonus_numerator = _v;\r\n    }\r\n\r\n    function set_pre_kyc_iconiq_bonus_denominator(uint256 _v) public only_master_or_owner {\r\n        pre_kyc_iconiq_bonus_denominator = _v;\r\n    }\r\n\r\n    function set_presale_iconiq_arbits_per_ether(uint256 _v) public only_master_or_owner {\r\n        presale_iconiq_arbits_per_ether = _v;\r\n    }\r\n\r\n    function set_presale_arbits_per_ether(uint256 _v) public only_master_or_owner {\r\n        presale_arbits_per_ether = _v;\r\n    }\r\n\r\n    function set_presale_arbits_total(uint256 _v) public only_master_or_owner {\r\n        presale_arbits_total = _v;\r\n    }\r\n\r\n    function set_presale_arbits_sold(uint256 _v) public only_master_or_owner {\r\n        presale_arbits_sold = _v;\r\n    }\r\n\r\n    function set_sale_arbits_per_ether(uint256 _v) public only_master_or_owner {\r\n        sale_arbits_per_ether = _v;\r\n    }\r\n\r\n    function set_sale_arbits_total(uint256 _v) public only_master_or_owner {\r\n        sale_arbits_total = _v;\r\n    }\r\n\r\n    function set_sale_arbits_sold(uint256 _v) public only_master_or_owner {\r\n        sale_arbits_sold = _v;\r\n    }\r\n\r\n    // PARTICIPANT SPECIFIC getters and setters\r\n    // getters\r\n    function get_participant(address _a) public view returns(\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        bool,\r\n        uint8\r\n    ) {\r\n        participant storage subject = participants[_a];\r\n        return (\r\n            subject.eth_address,\r\n            subject.topl_address,\r\n            subject.arbits,\r\n            subject.num_of_pro_rata_tokens_alloted,\r\n            subject.arbits_kyc_whitelist,\r\n            subject.num_of_uses\r\n        );\r\n    }\r\n\r\n    function get_participant_num_of_uses(address _a) public view returns(uint8) {\r\n        return (participants[_a].num_of_uses);\r\n    }\r\n\r\n    function get_participant_topl_address(address _a) public view returns(uint256) {\r\n        return (participants[_a].topl_address);\r\n    }\r\n\r\n    function get_participant_arbits(address _a) public view returns(uint256) {\r\n        return (participants[_a].arbits);\r\n    }\r\n\r\n    function get_participant_num_of_pro_rata_tokens_alloted(address _a) public view returns(uint256) {\r\n        return (participants[_a].num_of_pro_rata_tokens_alloted);\r\n    }\r\n\r\n    function get_participant_arbits_kyc_whitelist(address _a) public view returns(bool) {\r\n        return (participants[_a].arbits_kyc_whitelist);\r\n    }\r\n\r\n    // setters\r\n    function set_participant(\r\n        address _a,\r\n        uint256 _ta,\r\n        uint256 _arbits,\r\n        uint256 _prta,\r\n        bool _v3,\r\n        uint8 _nou\r\n    ) public only_master_or_owner log_participant_update(_a) {\r\n        participant storage subject = participants[_a];\r\n        subject.eth_address = _a;\r\n        subject.topl_address = _ta;\r\n        subject.arbits = _arbits;\r\n        subject.num_of_pro_rata_tokens_alloted = _prta;\r\n        subject.arbits_kyc_whitelist = _v3;\r\n        subject.num_of_uses = _nou;\r\n    }\r\n\r\n    function set_participant_num_of_uses(\r\n        address _a,\r\n        uint8 _v\r\n    ) public only_master_or_owner log_participant_update(_a) {\r\n        participants[_a].num_of_uses = _v;\r\n    }\r\n\r\n    function set_participant_topl_address(\r\n        address _a,\r\n        uint256 _ta\r\n    ) public only_master_or_owner log_participant_update(_a) {\r\n        participants[_a].topl_address = _ta;\r\n    }\r\n\r\n    function set_participant_arbits(\r\n        address _a,\r\n        uint256 _v\r\n    ) public only_master_or_owner log_participant_update(_a) {\r\n        participants[_a].arbits = _v;\r\n    }\r\n\r\n    function set_participant_num_of_pro_rata_tokens_alloted(\r\n        address _a,\r\n        uint256 _v\r\n    ) public only_master_or_owner log_participant_update(_a) {\r\n        participants[_a].num_of_pro_rata_tokens_alloted = _v;\r\n    }\r\n\r\n    function set_participant_arbits_kyc_whitelist(\r\n        address _a,\r\n        bool _v\r\n    ) public only_kycer log_participant_update(_a) {\r\n        participants[_a].arbits_kyc_whitelist = _v;\r\n    }\r\n\r\n\r\n    //\r\n    // STATE FLAG FUNCTIONS: Getter, setter, and toggling functions for state flags.\r\n\r\n    // GETTERS\r\n    function get_iconiq_presale_open() public view only_master_or_owner returns(bool) {\r\n        return iconiq_presale_open;\r\n    }\r\n\r\n    function get_arbits_presale_open() public view only_master_or_owner returns(bool) {\r\n        return arbits_presale_open;\r\n    }\r\n\r\n    function get_arbits_sale_open() public view only_master_or_owner returns(bool) {\r\n        return arbits_sale_open;\r\n    }\r\n\r\n    // SETTERS\r\n    function set_iconiq_presale_open(bool _v) public only_master_or_owner {\r\n        iconiq_presale_open = _v;\r\n    }\r\n\r\n    function set_arbits_presale_open(bool _v) public only_master_or_owner {\r\n        arbits_presale_open = _v;\r\n    }\r\n\r\n    function set_arbits_sale_open(bool _v) public only_master_or_owner {\r\n        arbits_sale_open = _v;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\topl_database_lib.sol\r\n\r\n// This library serves as an wrapper to the database.sol contract\r\n\r\nlibrary topl_database_lib {\r\n\r\n    //// PARTICIPANT SPECIFIC FUNCTIONS\r\n    // getters\r\n    function get_participant(address db, address _a) internal view returns(\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        bool,\r\n        uint8\r\n    ) {\r\n        return database(db).get_participant(_a);\r\n    }\r\n\r\n    function get_topl_address(address db, address _a) internal view returns(uint256) {\r\n        return database(db).get_participant_topl_address(_a);\r\n    }\r\n\r\n    function get_arbits(address db, address _a) internal view returns(uint256) {\r\n        return database(db).get_participant_arbits(_a);\r\n    }\r\n\r\n    function get_iconiq_tokens(address db, address _a) internal view returns(uint256) {\r\n        return database(db).get_participant_num_of_pro_rata_tokens_alloted(_a);\r\n    }\r\n\r\n    function get_arbits_whitelist(address db, address _a) internal view returns(bool) {\r\n        return database(db).get_participant_arbits_kyc_whitelist(_a);\r\n    }\r\n\r\n    function get_num_of_uses(address db, address _a) internal view returns(uint8) {\r\n        return database(db).get_participant_num_of_uses(_a);\r\n    }\r\n\r\n    // setters\r\n    function set_participant(\r\n        address db,\r\n        address _a,\r\n        uint256 _ta,\r\n        uint256 _arbits,\r\n        uint256 _prta,\r\n        bool _v3,\r\n        uint8 _nou\r\n    ) internal {\r\n        database(db).set_participant(_a, _ta, _arbits, _prta, _v3, _nou);\r\n        emit e_set_participant(_a, _ta, _arbits, _prta, _v3, _nou);\r\n    }\r\n\r\n    function set_topl_address(address db, address _a, uint256 _ta) internal {\r\n        database(db).set_participant_topl_address(_a, _ta);\r\n        emit e_set_topl_address(_a, _ta);\r\n    }\r\n\r\n    function set_arbits(address db, address _a, uint256 _v) internal {\r\n        database(db).set_participant_arbits(_a, _v);\r\n        emit e_set_arbits(_a, _v);\r\n    }\r\n\r\n    function set_iconiq_tokens(address db, address _a, uint256 _v) internal {\r\n        database(db).set_participant_num_of_pro_rata_tokens_alloted(_a, _v);\r\n        emit e_set_iconiq_tokens(_a, _v);\r\n    }\r\n\r\n    function set_arbits_whitelist(address db, address _a, bool _v) internal {\r\n        database(db).set_participant_arbits_kyc_whitelist(_a, _v);\r\n        emit e_set_arbits_whitelist(_a, _v);\r\n    }\r\n\r\n    function set_num_of_uses(address db, address _a, uint8 _v) internal {\r\n        database(db).set_participant_num_of_uses(_a, _v);\r\n        emit e_set_num_of_uses(_a, _v);\r\n    }\r\n\r\n    // modifiers\r\n    function add_arbits(address db, address _a, uint256 _v) internal {\r\n        uint256 c = database(db).get_participant_arbits(_a) + _v;     // safe math check\r\n        assert(c >= database(db).get_participant_arbits(_a)); //\r\n        database(db).set_participant_arbits(\r\n            _a,\r\n            (database(db).get_participant_arbits(_a) + _v)\r\n        );\r\n        emit e_add_arbits(_a, _v);\r\n    }\r\n\r\n    function sub_arbits(address db, address _a, uint256 _v) internal {\r\n        assert(_v <= database(db).get_participant_arbits(_a)); // safe math check\r\n        database(db).set_participant_arbits(\r\n            _a,\r\n            (database(db).get_participant_arbits(_a) - _v)\r\n        );\r\n        emit e_sub_arbits(_a, _v);\r\n    }\r\n\r\n    //// ICONIQ SALE SPECIFIC FUNCTIONS\r\n    // getters\r\n    function get_pre_kyc_iconiq_bonus_numerator(address db) internal view returns(uint256) {\r\n        return database(db).get_pre_kyc_iconiq_bonus_numerator();\r\n    }\r\n\r\n    function get_pre_kyc_iconiq_bonus_denominator(address db) internal view returns(uint256) {\r\n        return database(db).get_pre_kyc_iconiq_bonus_denominator();\r\n    }\r\n\r\n    function get_iconiq_presale_open(address db) internal view returns(bool) {\r\n        return database(db).get_iconiq_presale_open();\r\n    }\r\n\r\n    function get_presale_iconiq_arbits_per_ether(address db) internal view returns(uint256) {\r\n        return database(db).get_presale_iconiq_arbits_per_ether();\r\n    }\r\n\r\n    // setters\r\n    function set_pre_kyc_iconiq_bonus_numerator(address db, uint256 _v) internal {\r\n        database(db).set_pre_kyc_iconiq_bonus_numerator(_v);\r\n        emit e_set_pre_kyc_iconiq_bonus_numerator(_v);\r\n    }\r\n\r\n    function set_pre_kyc_iconiq_bonus_denominator(address db, uint256 _v) internal {\r\n        database(db).set_pre_kyc_iconiq_bonus_denominator(_v);\r\n        emit e_set_pre_kyc_iconiq_bonus_denominator(_v);\r\n    }\r\n\r\n    function set_iconiq_presale_open(address db, bool _v) internal {\r\n        database(db).set_iconiq_presale_open(_v);\r\n        emit e_set_iconiq_presale_open(_v);\r\n    }\r\n\r\n    function set_presale_iconiq_arbits_per_ether(address db, uint256 _v) internal {\r\n        database(db).set_presale_iconiq_arbits_per_ether(_v);\r\n        emit e_set_presale_iconiq_arbits_per_ether(_v);\r\n    }\r\n\r\n    //// PUBLIC PRESALE SPECIFIC FUNCTIONS (arbit_presale)\r\n    // getters\r\n    function get_pre_kyc_bonus_numerator(address db) internal view returns(uint256) {\r\n        return database(db).get_pre_kyc_bonus_numerator();\r\n    }\r\n\r\n    function get_pre_kyc_bonus_denominator(address db) internal view returns(uint256) {\r\n        return database(db).get_pre_kyc_bonus_denominator();\r\n    }\r\n\r\n    function get_arbits_presale_open(address db) internal view returns(bool) {\r\n        return database(db).get_arbits_presale_open();\r\n    }\r\n\r\n    function get_presale_arbits_per_ether(address db) internal view returns(uint256) {\r\n        return database(db).get_presale_arbits_per_ether();\r\n    }\r\n\r\n    // setters\r\n    function set_pre_kyc_bonus_numerator(address db, uint256 _v) internal {\r\n        database(db).set_pre_kyc_bonus_numerator(_v);\r\n        emit e_set_pre_kyc_bonus_numerator(_v);\r\n    }\r\n\r\n    function set_pre_kyc_bonus_denominator(address db, uint256 _v) internal {\r\n        database(db).set_pre_kyc_bonus_denominator(_v);\r\n        emit e_set_pre_kyc_bonus_denominator(_v);\r\n    }\r\n\r\n    function set_arbits_presale_open(address db, bool _v) internal {\r\n        database(db).set_arbits_presale_open(_v);\r\n        emit e_set_arbits_presale_open(_v);\r\n    }\r\n\r\n    // this function is not strictly only used by arbit_presale since it is used for rollover\r\n    // when an iconiq member goes over their allotment.\r\n    function set_presale_arbits_per_ether(address db, uint256 _v) internal {\r\n        database(db).set_presale_arbits_per_ether(_v);\r\n        emit e_set_presale_arbits_per_ether(_v);\r\n    }\r\n\r\n    //// \"GLOABL\" SALE FUNCTIONS (applies across the entire presale)\r\n    // getters\r\n    function get_presale_arbits_total(address db) internal view returns(uint256) {\r\n        return database(db).get_presale_arbits_total();\r\n    }\r\n\r\n    function get_presale_arbits_sold(address db) internal view returns(uint256) {\r\n        return database(db).get_presale_arbits_sold();\r\n    }\r\n\r\n    function get_arbits_max_contribution(address db) internal view returns(uint256) {\r\n        return database(db).get_contrib_arbits_max();\r\n    }\r\n\r\n    function get_arbits_min_contribution(address db) internal view returns(uint256) {\r\n        return database(db).get_contrib_arbits_min();\r\n    }\r\n\r\n    // setters\r\n    function set_presale_arbits_total(address db, uint256 _v) internal {\r\n        database(db).set_presale_arbits_total(_v);\r\n        emit e_set_presale_arbits_total(_v);\r\n    }\r\n\r\n    function set_presale_arbits_sold(address db, uint256 _v) internal {\r\n        database(db).set_presale_arbits_sold(_v);\r\n        emit e_set_presale_arbits_sold(_v);\r\n    }\r\n\r\n    function set_arbits_max_contribution(address db, uint256 _v) internal {\r\n        database(db).set_contrib_arbits_max(_v);\r\n        emit e_set_arbits_max_contribution(_v);\r\n    }\r\n\r\n    function set_arbits_min_contribution(address db, uint256 _v) internal {\r\n        database(db).set_contrib_arbits_min(_v);\r\n        emit e_set_arbits_min_contribution(_v);\r\n    }\r\n\r\n    // modifiers\r\n    function add_presale_arbits_sold(address db, uint256 _v) internal {\r\n        uint256 c = database(db).get_presale_arbits_sold() + _v;     // safe math check\r\n        assert(c >= database(db).get_presale_arbits_sold()); //\r\n        database(db).set_presale_arbits_sold(\r\n            (database(db).get_presale_arbits_sold() + _v)\r\n        );\r\n        emit e_add_presale_arbits_sold(_v);\r\n    }\r\n\r\n    function sub_presale_arbits_sold(address db, uint256 _v) internal {\r\n        assert(_v <= database(db).get_presale_arbits_sold()); // safe math check\r\n        database(db).set_presale_arbits_sold(\r\n            (database(db).get_presale_arbits_sold() - _v)\r\n        );\r\n        emit e_sub_presale_arbits_sold(_v);\r\n    }\r\n    \r\n    function set_sale_owner(address db, address _a, bool _v) internal {\r\n        database(db).set_sale_owner(_a, _v);\r\n    }\r\n\r\n    function get_sale_owner(address db, address _a) internal view returns(bool) {\r\n        return database(db).get_sale_owner(_a);\r\n    }\r\n\r\n    event e_set_sale_owner(address, bool);\r\n    event e_set_num_of_uses(address, uint8);\r\n    event e_set_arbits_whitelist(address, bool);\r\n    event e_set_participant(address, uint256, uint256, uint256, bool, uint8);\r\n    event e_set_topl_address(address, uint256);\r\n    event e_set_arbits(address, uint256);\r\n    event e_set_iconiq_tokens(address, uint256);\r\n    event e_add_arbits(address, uint256);\r\n    event e_sub_arbits(address, uint256);\r\n    event e_set_pre_kyc_bonus_numerator(uint256);\r\n    event e_set_pre_kyc_bonus_denominator(uint256);\r\n    event e_set_iconiq_presale_open(bool);\r\n    event e_set_arbits_presale_open(bool);\r\n    event e_set_presale_iconiq_arbits_per_ether(uint256);\r\n    event e_set_presale_arbits_per_ether(uint256);\r\n    event e_set_presale_arbits_total(uint256);\r\n    event e_set_presale_arbits_sold(uint256);\r\n    event e_add_presale_arbits_sold(uint256);\r\n    event e_sub_presale_arbits_sold(uint256);\r\n    event e_set_arbits_max_contribution(uint256);\r\n    event e_set_arbits_min_contribution(uint256);\r\n    event e_set_pre_kyc_iconiq_bonus_numerator(uint256);\r\n    event e_set_pre_kyc_iconiq_bonus_denominator(uint256);\r\n}\r\n\r\n// File: contracts\\iconiq_data_pipe.sol\r\n\r\ncontract iconiq_data_pipe {\r\n\r\n    using topl_database_lib for address;\r\n    using SafeMath for uint256;\r\n\r\n    address public db;\r\n    address public owner;\r\n\r\n    constructor(address __db) public {\r\n        db = __db;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function owner_linkage() public { // must be called after the sale contract has been linked to the database contract via database's add master function\r\n        db.set_sale_owner(owner, true);\r\n    }\r\n\r\n    modifier only_owner() {\r\n        require(db.get_sale_owner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function set_iconiq_token_amount(address _a, uint256 _v) public only_owner {\r\n        db.set_iconiq_tokens(_a, _v);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"db\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"owner_linkage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_a\",\"type\":\"address\"},{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"set_iconiq_token_amount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"__db\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"iconiq_data_pipe","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000cf1f116947ba657dcc9fbab294d2d8cd4b12c362","Library":"","SwarmSource":"bzzr://335b27c7a2e3505fd0260ae468748eb9b686af8a5a3ff98abde783e4f04498fa"}]}