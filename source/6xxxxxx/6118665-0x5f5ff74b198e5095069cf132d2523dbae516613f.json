{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/// @title A facet of MonsterCore that manages special access privileges.\r\n/// @dev See the MonsterCore contract documentation to understand how the various contract facets are arranged.\r\ncontract MonsterAccessControl {\r\n    // This facet controls access control for MonsterBit. There are four roles managed here:\r\n    //\r\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\r\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\r\n    //         set to the address that created the smart contract in the MonsterCore constructor.\r\n    //\r\n    //     - The CFO: The CFO can withdraw funds from MonsterCore and its auction contracts.\r\n    //\r\n    //     - The COO: The COO can release gen0 monsters to auction, and mint promo monsters.\r\n    //\r\n    // It should be noted that these roles are distinct without overlap in their access abilities, the\r\n    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\r\n    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This\r\n    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of\r\n    // convenience. The less we use an address, the less likely it is that we somehow compromise the\r\n    // account.\r\n\r\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    event ContractUpgrade(address newContract);\r\n\r\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n    address ceoBackupAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress || msg.sender == ceoBackupAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress ||\r\n            msg.sender == ceoBackupAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) external onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCEO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n}\r\n\r\ninterface SaleClockAuction {\r\n    function isSaleClockAuction() external view returns (bool);\r\n    function createAuction(uint, uint, uint, uint, address) external;\r\n    function withdrawBalance() external;\r\n}\r\ninterface SiringClockAuction {\r\n    function isSiringClockAuction() external view returns (bool);\r\n    function createAuction(uint, uint, uint, uint, address) external;\r\n    function withdrawBalance() external;\r\n    function getCurrentPrice(uint256) external view returns (uint256);\r\n    function bid(uint256) external payable;\r\n}\r\ninterface MonsterBattles {\r\n    function isBattleContract() external view returns (bool);\r\n    function prepareForBattle(address, uint, uint, uint) external payable returns(uint);\r\n    function withdrawFromBattle(address, uint, uint, uint) external returns(uint);\r\n    function finishBattle(address, uint, uint, uint) external returns(uint, uint, uint);\r\n    function withdrawBalance() external;\r\n}\r\ninterface MonsterFood {\r\n    function isMonsterFood() external view returns (bool);\r\n    function feedMonster(address, uint, uint, uint, uint) external payable  returns(uint, uint, uint);\r\n    function withdrawBalance() external;\r\n}\r\n// interface MonsterStorage {\r\n//     function isMonsterStorage() external view returns (bool);\r\n//     function ownershipTokenCount(address) external view returns (uint);\r\n//     function setOwnershipTokenCount(address, uint) external;\r\n//     function setActionCooldown(uint, uint, uint, uint, uint, uint) external;\r\n//     function createMonster(uint, uint, uint) external returns (uint);\r\n//     function getMonsterBits(uint) external view returns(uint, uint, uint);\r\n//     function monsterIndexToOwner(uint256) external view returns(address);\r\n//     function setMonsterIndexToOwner(uint, address) external;\r\n//     function monsterIndexToApproved(uint256) external view returns(address);\r\n//     function setMonsterIndexToApproved(uint, address) external;\r\n//     function getMonstersCount() external view returns(uint);\r\n//     function sireAllowedToAddress(uint256) external view returns(address);\r\n//     function setSireAllowedToAddress(uint, address) external;\r\n//     function setSiringWith(uint, uint) external;\r\n    \r\n// }\r\ninterface MonsterConstants {\r\n    function isMonsterConstants() external view returns (bool);\r\n    function actionCooldowns(uint) external view returns (uint32);\r\n    function actionCooldownsLength() external view returns(uint);\r\n    \r\n    function growCooldowns(uint) external view returns (uint32);\r\n    function genToGrowCdIndex(uint) external view returns (uint8);\r\n    function genToGrowCdIndexLength() external view returns(uint);\r\n    \r\n}\r\ncontract MonsterGeneticsInterface {\r\n    /// @dev simply a boolean to indicate this is the contract we expect to be\r\n    function isMonsterGenetics() public pure returns (bool);\r\n\r\n    /// @dev given genes of monster 1 & 2, return a genetic combination - may have a random factor\r\n    /// @param genesMatron genes of mom\r\n    /// @param genesSire genes of sire\r\n    /// @return the genes that are supposed to be passed down the child\r\n    function mixGenes(uint256 genesMatron, uint256 genesSire, uint256 targetBlock) public view returns (uint256 _result);\r\n    \r\n    function mixBattleGenes(uint256 genesMatron, uint256 genesSire, uint256 targetBlock) public view returns (uint256 _result);\r\n}\r\n\r\nlibrary MonsterLib {\r\n    \r\n    //max uint constant for bit operations\r\n    uint constant UINT_MAX = uint(2) ** 256 - 1;\r\n    \r\n    function getBits(uint256 source, uint offset, uint count) public pure returns(uint256 bits_)\r\n    {\r\n        uint256 mask = (uint(2) ** count - 1) * uint(2) ** offset;\r\n        return (source & mask) / uint(2) ** offset;\r\n    }\r\n    \r\n    function setBits(uint target, uint bits, uint size, uint offset) public pure returns(uint)\r\n    {\r\n        //ensure bits do not exccess declared size\r\n        uint256 truncateMask = uint(2) ** size - 1;\r\n        bits = bits & truncateMask;\r\n        \r\n        //shift in place\r\n        bits = bits * uint(2) ** offset;\r\n        \r\n        uint clearMask = ((uint(2) ** size - 1) * (uint(2) ** offset)) ^ UINT_MAX;\r\n        target = target & clearMask;\r\n        target = target | bits;\r\n        return target;\r\n        \r\n    }\r\n    \r\n    /// @dev The main Monster struct. Every monster in MonsterBit is represented by a copy\r\n    ///  of this structure, so great care was taken to ensure that it fits neatly into\r\n    ///  exactly two 256-bit words. Note that the order of the members in this structure\r\n    ///  is important because of the byte-packing rules used by Ethereum.\r\n    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\r\n    struct Monster {\r\n        // The Monster's genetic code is packed into these 256-bits, the format is\r\n        // sooper-sekret! A monster's genes never change.\r\n        uint256 genes;\r\n        \r\n        // The timestamp from the block when this monster came into existence.\r\n        uint64 birthTime;\r\n        \r\n        // The \"generation number\" of this monster. Monsters minted by the CK contract\r\n        // for sale are called \"gen0\" and have a generation number of 0. The\r\n        // generation number of all other monsters is the larger of the two generation\r\n        // numbers of their parents, plus one.\r\n        // (i.e. max(matron.generation, sire.generation) + 1)\r\n        uint16 generation;\r\n        \r\n        // The minimum timestamp after which this monster can engage in breeding\r\n        // activities again. This same timestamp is used for the pregnancy\r\n        // timer (for matrons) as well as the siring cooldown.\r\n        uint64 cooldownEndTimestamp;\r\n        \r\n        // The ID of the parents of this monster, set to 0 for gen0 monsters.\r\n        // Note that using 32-bit unsigned integers limits us to a \"mere\"\r\n        // 4 billion monsters. This number might seem small until you realize\r\n        // that Ethereum currently has a limit of about 500 million\r\n        // transactions per year! So, this definitely won't be a problem\r\n        // for several years (even as Ethereum learns to scale).\r\n        uint32 matronId;\r\n        uint32 sireId;\r\n        \r\n        // Set to the ID of the sire monster for matrons that are pregnant,\r\n        // zero otherwise. A non-zero value here is how we know a monster\r\n        // is pregnant. Used to retrieve the genetic material for the new\r\n        // monster when the birth transpires.\r\n        uint32 siringWithId;\r\n        \r\n        // Set to the index in the cooldown array (see below) that represents\r\n        // the current cooldown duration for this monster. This starts at zero\r\n        // for gen0 cats, and is initialized to floor(generation/2) for others.\r\n        // Incremented by one for each successful breeding action, regardless\r\n        // of whether this monster is acting as matron or sire.\r\n        uint16 cooldownIndex;\r\n        \r\n        // Monster genetic code for battle attributes\r\n        uint64 battleGenes;\r\n        \r\n        uint8 activeGrowCooldownIndex;\r\n        uint8 activeRestCooldownIndex;\r\n        \r\n        uint8 level;\r\n        \r\n        uint8 potionEffect;\r\n        uint64 potionExpire;\r\n        \r\n        uint64 cooldownStartTimestamp;\r\n        \r\n        uint8 battleCounter;\r\n    }\r\n    \r\n\r\n    function encodeMonsterBits(Monster mon) internal pure returns(uint p1, uint p2, uint p3)\r\n    {\r\n        p1 = mon.genes;\r\n        \r\n        p2 = 0;\r\n        p2 = setBits(p2, mon.cooldownEndTimestamp, 64, 0);\r\n        p2 = setBits(p2, mon.potionExpire, 64, 64);\r\n        p2 = setBits(p2, mon.cooldownStartTimestamp, 64, 128);\r\n        p2 = setBits(p2, mon.birthTime, 64, 192);\r\n        \r\n        p3 = 0;\r\n        p3 = setBits(p3, mon.generation, 16, 0);\r\n        p3 = setBits(p3, mon.matronId, 32, 16);\r\n        p3 = setBits(p3, mon.sireId, 32, 48);\r\n        p3 = setBits(p3, mon.siringWithId, 32, 80);\r\n        p3 = setBits(p3, mon.cooldownIndex, 16, 112);\r\n        p3 = setBits(p3, mon.battleGenes, 64, 128);\r\n        p3 = setBits(p3, mon.activeGrowCooldownIndex, 8, 192);\r\n        p3 = setBits(p3, mon.activeRestCooldownIndex, 8, 200);\r\n        p3 = setBits(p3, mon.level, 8, 208);\r\n        p3 = setBits(p3, mon.potionEffect, 8, 216);\r\n        p3 = setBits(p3, mon.battleCounter, 8, 224);\r\n    }\r\n    \r\n    function decodeMonsterBits(uint p1, uint p2, uint p3) internal pure returns(Monster mon)\r\n    {\r\n        mon = MonsterLib.Monster({\r\n            genes: 0,\r\n            birthTime: 0,\r\n            cooldownEndTimestamp: 0,\r\n            matronId: 0,\r\n            sireId: 0,\r\n            siringWithId: 0,\r\n            cooldownIndex: 0,\r\n            generation: 0,\r\n            battleGenes: 0,\r\n            level: 0,\r\n            activeGrowCooldownIndex: 0,\r\n            activeRestCooldownIndex: 0,\r\n            potionEffect: 0,\r\n            potionExpire: 0,\r\n            cooldownStartTimestamp: 0,\r\n            battleCounter: 0\r\n        });\r\n        \r\n        mon.genes = p1;\r\n        \r\n        mon.cooldownEndTimestamp = uint64(getBits(p2, 0, 64));\r\n        mon.potionExpire = uint64(getBits(p2, 64, 64));\r\n        mon.cooldownStartTimestamp = uint64(getBits(p2, 128, 64));\r\n        mon.birthTime = uint64(getBits(p2, 192, 64));\r\n        mon.generation = uint16(getBits(p3, 0, 16));\r\n        mon.matronId = uint32(getBits(p3, 16, 32));\r\n        mon.sireId = uint32(getBits(p3, 48, 32));\r\n        mon.siringWithId = uint32(getBits(p3, 80, 32));\r\n        mon.cooldownIndex = uint16(getBits(p3, 112, 16));\r\n        mon.battleGenes = uint64(getBits(p3, 128, 64));\r\n        mon.activeGrowCooldownIndex = uint8(getBits(p3, 192, 8));\r\n        mon.activeRestCooldownIndex = uint8(getBits(p3, 200, 8));\r\n        mon.level = uint8(getBits(p3, 208, 8));\r\n        mon.potionEffect = uint8(getBits(p3, 216, 8));\r\n        mon.battleCounter = uint8(getBits(p3, 224, 8));\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract MonsterStorage is Ownable\r\n{\r\n    ERC721 public nonFungibleContract;\r\n    \r\n    bool public isMonsterStorage = true;\r\n    \r\n    constructor(address _nftAddress) public\r\n    {\r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        nonFungibleContract = candidateContract;\r\n        MonsterLib.Monster memory mon = MonsterLib.decodeMonsterBits(uint(-1), 0, 0);\r\n        _createMonster(mon);\r\n        monsterIndexToOwner[0] = address(0);\r\n    }\r\n    \r\n    function setTokenContract(address _nftAddress) external onlyOwner\r\n    {\r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n    \r\n    modifier onlyCore() {\r\n        require(msg.sender != address(0) && msg.sender == address(nonFungibleContract));\r\n        _;\r\n    }\r\n    \r\n    /*** STORAGE ***/\r\n\r\n    /// @dev An array containing the Monster struct for all Monsters in existence. The ID\r\n    ///  of each monster is actually an index into this array. Note that ID 0 is a negamonster,\r\n    ///  the unMonster, the mythical beast that is the parent of all gen0 monsters. A bizarre\r\n    ///  creature that is both matron and sire... to itself! Has an invalid genetic code.\r\n    ///  In other words, monster ID 0 is invalid... ;-)\r\n    MonsterLib.Monster[] monsters;\r\n    \r\n    uint256 public pregnantMonsters;\r\n    \r\n    function setPregnantMonsters(uint newValue) onlyCore public\r\n    {\r\n        pregnantMonsters = newValue;\r\n    }\r\n    \r\n    function getMonstersCount() public view returns(uint) \r\n    {\r\n        return monsters.length;\r\n    }\r\n    \r\n    \r\n    /// @dev A mapping from monster IDs to the address that owns them. All monsters have\r\n    ///  some valid owner address, even gen0 monsters are created with a non-zero owner.\r\n    mapping (uint256 => address) public monsterIndexToOwner;\r\n    \r\n    function setMonsterIndexToOwner(uint index, address owner) onlyCore public\r\n    {\r\n        monsterIndexToOwner[index] = owner;\r\n    }\r\n\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    //  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) public ownershipTokenCount;\r\n    \r\n    function setOwnershipTokenCount(address owner, uint count) onlyCore public\r\n    {\r\n        ownershipTokenCount[owner] = count;\r\n    }\r\n\r\n    /// @dev A mapping from MonsterIDs to an address that has been approved to call\r\n    ///  transferFrom(). Each Monster can only have one approved address for transfer\r\n    ///  at any time. A zero value means no approval is outstanding.\r\n    mapping (uint256 => address) public monsterIndexToApproved;\r\n    \r\n    function setMonsterIndexToApproved(uint index, address approved) onlyCore public\r\n    {\r\n        if(approved == address(0))\r\n        {\r\n            delete monsterIndexToApproved[index];\r\n        }\r\n        else\r\n        {\r\n            monsterIndexToApproved[index] = approved;\r\n        }\r\n    }\r\n    \r\n    /// @dev A mapping from MonsterIDs to an address that has been approved to use\r\n    ///  this monster for siring via breedWith(). Each monster can only have one approved\r\n    ///  address for siring at any time. A zero value means no approval is outstanding.\r\n    mapping (uint256 => address) public sireAllowedToAddress;\r\n    \r\n    function setSireAllowedToAddress(uint index, address allowed) onlyCore public\r\n    {\r\n        if(allowed == address(0))\r\n        {\r\n            delete sireAllowedToAddress[index];\r\n        }\r\n        else \r\n        {\r\n            sireAllowedToAddress[index] = allowed;\r\n        }\r\n    }\r\n    \r\n    /// @dev An internal method that creates a new monster and stores it. This\r\n    ///  method doesn't do any checking and should only be called when the\r\n    ///  input data is known to be valid. Will generate both a Birth event\r\n    ///  and a Transfer event.\r\n\r\n    function createMonster(uint p1, uint p2, uint p3)\r\n        onlyCore\r\n        public\r\n        returns (uint)\r\n    {\r\n\r\n        MonsterLib.Monster memory mon = MonsterLib.decodeMonsterBits(p1, p2, p3);\r\n\r\n\r\n        uint256 newMonsterId = _createMonster(mon);\r\n\r\n        // It's probably never going to happen, 4 billion monsters is A LOT, but\r\n        // let's just be 100% sure we never let this happen.\r\n        require(newMonsterId == uint256(uint32(newMonsterId)));\r\n\r\n        return newMonsterId;\r\n    }\r\n    \r\n    function _createMonster(MonsterLib.Monster mon) internal returns(uint)\r\n    {\r\n        uint256 newMonsterId = monsters.push(mon) - 1;\r\n        \r\n        return newMonsterId;\r\n    }\r\n    \r\n    function setLevel(uint monsterId, uint level) onlyCore public\r\n    {\r\n        MonsterLib.Monster storage mon = monsters[monsterId];\r\n        mon.level = uint8(level);\r\n    }\r\n    \r\n    function setPotion(uint monsterId, uint potionEffect, uint potionExpire) onlyCore public\r\n    {\r\n        MonsterLib.Monster storage mon = monsters[monsterId];\r\n        mon.potionEffect = uint8(potionEffect);\r\n        mon.potionExpire = uint64(potionExpire);\r\n    }\r\n    \r\n\r\n    function setBattleCounter(uint monsterId, uint battleCounter) onlyCore public\r\n    {\r\n        MonsterLib.Monster storage mon = monsters[monsterId];\r\n        mon.battleCounter = uint8(battleCounter);\r\n    }\r\n    \r\n    function setActionCooldown(uint monsterId, \r\n    uint cooldownIndex, \r\n    uint cooldownEndTimestamp, \r\n    uint cooldownStartTimestamp,\r\n    uint activeGrowCooldownIndex, \r\n    uint activeRestCooldownIndex) onlyCore public\r\n    {\r\n        MonsterLib.Monster storage mon = monsters[monsterId];\r\n        mon.cooldownIndex = uint16(cooldownIndex);\r\n        mon.cooldownEndTimestamp = uint64(cooldownEndTimestamp);\r\n        mon.cooldownStartTimestamp = uint64(cooldownStartTimestamp);\r\n        mon.activeRestCooldownIndex = uint8(activeRestCooldownIndex);\r\n        mon.activeGrowCooldownIndex = uint8(activeGrowCooldownIndex);\r\n    }\r\n    \r\n    function setSiringWith(uint monsterId, uint siringWithId) onlyCore public\r\n    {\r\n        MonsterLib.Monster storage mon = monsters[monsterId];\r\n        if(siringWithId == 0)\r\n        {\r\n            delete mon.siringWithId;\r\n        }\r\n        else\r\n        {\r\n            mon.siringWithId = uint32(siringWithId);\r\n        }\r\n    }\r\n    \r\n    \r\n    function getMonsterBits(uint monsterId) public view returns(uint p1, uint p2, uint p3)\r\n    {\r\n        MonsterLib.Monster storage mon = monsters[monsterId];\r\n        (p1, p2, p3) = MonsterLib.encodeMonsterBits(mon);\r\n    }\r\n    \r\n    function setMonsterBits(uint monsterId, uint p1, uint p2, uint p3) onlyCore public\r\n    {\r\n        MonsterLib.Monster storage mon = monsters[monsterId];\r\n        MonsterLib.Monster memory mon2 = MonsterLib.decodeMonsterBits(p1, p2, p3);\r\n        mon.cooldownIndex = mon2.cooldownIndex;\r\n        mon.siringWithId = mon2.siringWithId;\r\n        mon.activeGrowCooldownIndex = mon2.activeGrowCooldownIndex;\r\n        mon.activeRestCooldownIndex = mon2.activeRestCooldownIndex;\r\n        mon.level = mon2.level;\r\n        mon.potionEffect = mon2.potionEffect;\r\n        mon.cooldownEndTimestamp = mon2.cooldownEndTimestamp;\r\n        mon.potionExpire = mon2.potionExpire;\r\n        mon.cooldownStartTimestamp = mon2.cooldownStartTimestamp;\r\n        mon.battleCounter = mon2.battleCounter;\r\n        \r\n    }\r\n    \r\n    function setMonsterBitsFull(uint monsterId, uint p1, uint p2, uint p3) onlyCore public\r\n    {\r\n        MonsterLib.Monster storage mon = monsters[monsterId];\r\n        MonsterLib.Monster memory mon2 = MonsterLib.decodeMonsterBits(p1, p2, p3);\r\n        mon.birthTime = mon2.birthTime;\r\n        mon.generation = mon2.generation;\r\n        mon.genes = mon2.genes;\r\n        mon.battleGenes = mon2.battleGenes;\r\n        mon.cooldownIndex = mon2.cooldownIndex;\r\n        mon.matronId = mon2.matronId;\r\n        mon.sireId = mon2.sireId;\r\n        mon.siringWithId = mon2.siringWithId;\r\n        mon.activeGrowCooldownIndex = mon2.activeGrowCooldownIndex;\r\n        mon.activeRestCooldownIndex = mon2.activeRestCooldownIndex;\r\n        mon.level = mon2.level;\r\n        mon.potionEffect = mon2.potionEffect;\r\n        mon.cooldownEndTimestamp = mon2.cooldownEndTimestamp;\r\n        mon.potionExpire = mon2.potionExpire;\r\n        mon.cooldownStartTimestamp = mon2.cooldownStartTimestamp;\r\n        mon.battleCounter = mon2.battleCounter;\r\n        \r\n    }\r\n}\r\n\r\n\r\n/// @title Base contract for MonsterBit. Holds all common structs, events and base variables.\r\n/// @dev See the MonsterCore contract documentation to understand how the various contract facets are arranged.\r\ncontract MonsterBase is MonsterAccessControl {\r\n    /*** EVENTS ***/\r\n\r\n    /// @dev The Birth event is fired whenever a new monster comes into existence. This obviously\r\n    ///  includes any time a monster is created through the giveBirth method, but it is also called\r\n    ///  when a new gen0 monster is created.\r\n    event Birth(address owner, uint256 monsterId, uint256 genes);\r\n\r\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a monster\r\n    ///  ownership is assigned, including births.\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n\r\n\r\n    /// @dev The address of the ClockAuction contract that handles sales of Monsters. This\r\n    ///  same contract handles both peer-to-peer sales as well as the gen0 sales which are\r\n    ///  initiated every 15 minutes.\r\n    SaleClockAuction public saleAuction;\r\n    SiringClockAuction public siringAuction;\r\n    MonsterBattles public battlesContract;\r\n    MonsterFood public monsterFood;\r\n    MonsterStorage public monsterStorage;\r\n    MonsterConstants public monsterConstants;\r\n    \r\n    /// @dev The address of the sibling contract that is used to implement the sooper-sekret\r\n    ///  genetic combination algorithm.\r\n    MonsterGeneticsInterface public geneScience;\r\n    \r\n    function setMonsterStorageAddress(address _address) external onlyCEO {\r\n        MonsterStorage candidateContract = MonsterStorage(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect\r\n        require(candidateContract.isMonsterStorage());\r\n\r\n        // Set the new contract address\r\n        monsterStorage = candidateContract;\r\n    }\r\n    \r\n    function setMonsterConstantsAddress(address _address) external onlyCEO {\r\n        MonsterConstants candidateContract = MonsterConstants(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect\r\n        require(candidateContract.isMonsterConstants());\r\n\r\n        // Set the new contract address\r\n        monsterConstants = candidateContract;\r\n    }\r\n    \r\n    /// @dev Sets the reference to the battles contract.\r\n    /// @param _address - Address of battles contract.\r\n    function setBattlesAddress(address _address) external onlyCEO {\r\n        MonsterBattles candidateContract = MonsterBattles(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect\r\n        require(candidateContract.isBattleContract());\r\n\r\n        // Set the new contract address\r\n        battlesContract = candidateContract;\r\n    }\r\n\r\n\r\n    /// @dev Assigns ownership of a specific Monster to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        // Since the number of monsters is capped to 2^32 we can't overflow this\r\n        uint count = monsterStorage.ownershipTokenCount(_to);\r\n        monsterStorage.setOwnershipTokenCount(_to, count + 1);\r\n        \r\n        // transfer ownership\r\n        monsterStorage.setMonsterIndexToOwner(_tokenId, _to);\r\n        // When creating new monsters _from is 0x0, but we can't account that address.\r\n        if (_from != address(0)) {\r\n            count =  monsterStorage.ownershipTokenCount(_from);\r\n            monsterStorage.setOwnershipTokenCount(_from, count - 1);\r\n            // clear any previously approved ownership exchange\r\n            monsterStorage.setMonsterIndexToApproved(_tokenId, address(0));\r\n        }\r\n        \r\n        if(_from == address(saleAuction))\r\n        {\r\n            MonsterLib.Monster memory monster = readMonster(_tokenId);\r\n            if(monster.level == 0)\r\n            {\r\n                monsterStorage.setActionCooldown(_tokenId, \r\n                    monster.cooldownIndex, \r\n                    uint64(now + monsterConstants.growCooldowns(monster.activeGrowCooldownIndex)), \r\n                    now,\r\n                    monster.activeGrowCooldownIndex, \r\n                    monster.activeRestCooldownIndex);\r\n            }\r\n        }\r\n        // Emit the transfer event.\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev An internal method that creates a new monster and stores it. This\r\n    ///  method doesn't do any checking and should only be called when the\r\n    ///  input data is known to be valid. Will generate both a Birth event\r\n    ///  and a Transfer event.\r\n    /// @param _generation The generation number of this monster, must be computed by caller.\r\n    /// @param _genes The monster's genetic code.\r\n    /// @param _owner The inital owner of this monster, must be non-zero (except for the unMonster, ID 0)\r\n    function _createMonster(\r\n        uint256 _matronId,\r\n        uint256 _sireId,\r\n        uint256 _generation,\r\n        uint256 _genes,\r\n        uint256 _battleGenes,\r\n        uint256 _level,\r\n        address _owner\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n        require(_matronId == uint256(uint32(_matronId)));\r\n        require(_sireId == uint256(uint32(_sireId)));\r\n        require(_generation == uint256(uint16(_generation)));\r\n        \r\n        \r\n        \r\n        MonsterLib.Monster memory _monster = MonsterLib.Monster({\r\n            genes: _genes,\r\n            birthTime: uint64(now),\r\n            cooldownEndTimestamp: 0,\r\n            matronId: uint32(_matronId),\r\n            sireId: uint32(_sireId),\r\n            siringWithId: uint32(0),\r\n            cooldownIndex: uint16(0),\r\n            generation: uint16(_generation),\r\n            battleGenes: uint64(_battleGenes),\r\n            level: uint8(_level),\r\n            activeGrowCooldownIndex: uint8(0),\r\n            activeRestCooldownIndex: uint8(0),\r\n            potionEffect: uint8(0),\r\n            potionExpire: uint64(0),\r\n            cooldownStartTimestamp: 0,\r\n            battleCounter: uint8(0)\r\n        });\r\n        \r\n        \r\n        setMonsterGrow(_monster);\r\n        (uint p1, uint p2, uint p3) = MonsterLib.encodeMonsterBits(_monster);\r\n        \r\n        uint monsterId = monsterStorage.createMonster(p1, p2, p3);\r\n\r\n        // emit the birth event\r\n        emit Birth(\r\n            _owner,\r\n            monsterId,\r\n            _genes\r\n        );\r\n\r\n        // This will assign ownership, and also emit the Transfer event as\r\n        // per ERC721 draft\r\n        _transfer(0, _owner, monsterId);\r\n\r\n        return monsterId;\r\n    }\r\n    \r\n    function setMonsterGrow(MonsterLib.Monster monster) internal view\r\n    {\r\n         //New monster starts with the same cooldown as parent gen/2\r\n        uint16 cooldownIndex = uint16(monster.generation / 2);\r\n        if (cooldownIndex > 13) {\r\n            cooldownIndex = 13;\r\n        }\r\n        \r\n        monster.cooldownIndex = uint16(cooldownIndex);\r\n        \r\n        if(monster.level == 0)\r\n        {\r\n            uint gen = monster.generation;\r\n            if(gen > monsterConstants.genToGrowCdIndexLength())\r\n            {\r\n                gen = monsterConstants.genToGrowCdIndexLength();\r\n            }\r\n            \r\n            monster.activeGrowCooldownIndex = monsterConstants.genToGrowCdIndex(gen);\r\n            monster.cooldownEndTimestamp = uint64(now + monsterConstants.growCooldowns(monster.activeGrowCooldownIndex));\r\n            monster.cooldownStartTimestamp = uint64(now);\r\n        }\r\n    }\r\n    \r\n    function readMonster(uint monsterId) internal view returns(MonsterLib.Monster)\r\n    {\r\n        (uint p1, uint p2, uint p3) = monsterStorage.getMonsterBits(monsterId);\r\n       \r\n        MonsterLib.Monster memory mon = MonsterLib.decodeMonsterBits(p1, p2, p3);\r\n         \r\n        return mon;\r\n    }\r\n}\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n}\r\n\r\n/// @title The facet of the MonsterBit core contract that manages ownership, ERC-721 (draft) compliant.\r\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\r\n///  See the MonsterCore contract documentation to understand how the various contract facets are arranged.\r\ncontract MonsterOwnership is MonsterBase, ERC721 {\r\n\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant name = \"MonsterBit\";\r\n    string public constant symbol = \"MB\";\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular Monster.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId monster id, only valid when > 0\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return monsterStorage.monsterIndexToOwner(_tokenId) == _claimant;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Monster.\r\n    /// @param _claimant the address we are confirming monster is approved for.\r\n    /// @param _tokenId monster id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return monsterStorage.monsterIndexToApproved(_tokenId) == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n    ///  _approve() and transferFrom() are used together for putting Monsters on auction, and\r\n    ///  there is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        monsterStorage.setMonsterIndexToApproved(_tokenId, _approved);\r\n    }\r\n\r\n    /// @notice Returns the number of Monsters owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return monsterStorage.ownershipTokenCount(_owner);\r\n    }\r\n\r\n    /// @notice Transfers a Monster to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\r\n    ///  MonsterBit specifically) or your Monster may be lost forever. Seriously.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the Monster to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any monsters (except very briefly\r\n        // after a gen0 monster is created and before it goes on auction).\r\n        require(_to != address(this));\r\n        // Disallow transfers to the auction contracts to prevent accidental\r\n        // misuse. Auction contracts should only take ownership of monsters\r\n        // through the allow + transferFrom flow.\r\n        require(_to != address(saleAuction));\r\n\r\n        // You can only send your own monster.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Grant another address the right to transfer a specific Monster via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Monster that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Emit approval event.\r\n        emit Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Transfer a Monster owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Monster to be transfered.\r\n    /// @param _to The address that should take ownership of the Monster. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the Monster to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any monsters (except very briefly\r\n        // after a gen0 monster is created and before it goes on auction).\r\n        require(_to != address(this));\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of Monsters currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint) {\r\n        return monsterStorage.getMonstersCount() - 1;\r\n    }\r\n\r\n    /// @notice Returns the address currently assigned ownership of a given Monster.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = monsterStorage.monsterIndexToOwner(_tokenId);\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n    /// @notice Returns a list of all Monster IDs assigned to an address.\r\n    /// @param _owner The owner whose Monsters we are interested in.\r\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n    ///  expensive (it walks the entire Monster array looking for monsters belonging to owner),\r\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n    ///  not contract-to-contract calls.\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalMonsters = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            // We count on the fact that all monsters have IDs starting at 1 and increasing\r\n            // sequentially up to the totalMonsters count.\r\n            uint256 monsterId;\r\n\r\n            for (monsterId = 1; monsterId <= totalMonsters; monsterId++) {\r\n                if (monsterStorage.monsterIndexToOwner(monsterId) == _owner) {\r\n                    result[resultIndex] = monsterId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\n/// @title A facet of MosterBitCore that manages Monster siring, gestation, and birth.\r\ncontract MonsterBreeding is MonsterOwnership {\r\n\r\n    /// @dev The Pregnant event is fired when two monster successfully breed and the pregnancy\r\n    ///  timer begins for the matron.\r\n    event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 cooldownEndTimestamp);\r\n\r\n    /// @notice The minimum payment required to use breedWithAuto(). This fee goes towards\r\n    ///  the gas cost paid by whatever calls giveBirth(), and can be dynamically updated by\r\n    ///  the COO role as the gas price changes.\r\n    uint256 public autoBirthFee = 2 finney;\r\n    uint256 public birthCommission = 5 finney;\r\n    \r\n    \r\n\r\n    \r\n\r\n    /// @dev Update the address of the genetic contract, can only be called by the CEO.\r\n    /// @param _address An address of a GeneScience contract instance to be used from this point forward.\r\n    function setGeneScienceAddress(address _address) external onlyCEO {\r\n        MonsterGeneticsInterface candidateContract = MonsterGeneticsInterface(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect\r\n        require(candidateContract.isMonsterGenetics());\r\n\r\n        // Set the new contract address\r\n        geneScience = candidateContract;\r\n    }\r\n    \r\n    function setSiringAuctionAddress(address _address) external onlyCEO {\r\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isSiringClockAuction());\r\n\r\n        // Set the new contract address\r\n        siringAuction = candidateContract;\r\n    }\r\n\r\n    /// @dev Checks that a given monster is able to breed. Requires that the\r\n    ///  current cooldown is finished (for sires) and also checks that there is\r\n    ///  no pending pregnancy.\r\n    function _isReadyToBreed(MonsterLib.Monster _monster) internal view returns (bool) {\r\n        // In addition to checking the cooldownEndTimestamp, we also need to check to see if\r\n        // the cat has a pending birth; there can be some period of time between the end\r\n        // of the pregnacy timer and the birth event.\r\n        return (_monster.siringWithId == 0) && (_monster.cooldownEndTimestamp <= uint64(now) && (_monster.level >= 1));\r\n    }\r\n\r\n    /// @dev Check if a sire has authorized breeding with this matron. True if both sire\r\n    ///  and matron have the same owner, or if the sire has given siring permission to\r\n    ///  the matron's owner (via approveSiring()).\r\n    function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns (bool) {\r\n        address matronOwner = monsterStorage.monsterIndexToOwner(_matronId);\r\n        address sireOwner = monsterStorage.monsterIndexToOwner(_sireId);\r\n\r\n        // Siring is okay if they have same owner, or if the matron's owner was given\r\n        // permission to breed with this sire.\r\n        return (matronOwner == sireOwner || monsterStorage.sireAllowedToAddress(_sireId) == matronOwner);\r\n    }\r\n\r\n    /// @dev Set the cooldownEndTime for the given monster, based on its current cooldownIndex.\r\n    ///  Also increments the cooldownIndex (unless it has hit the cap).\r\n    /// @param _monster A reference to the monster in storage which needs its timer started.\r\n    function _triggerCooldown(uint monsterId, MonsterLib.Monster _monster, uint increaseIndex) internal {\r\n\r\n        uint activeRestCooldownIndex = _monster.cooldownIndex;\r\n        uint cooldownEndTimestamp = uint64(monsterConstants.actionCooldowns(activeRestCooldownIndex) + now);\r\n        uint newCooldownIndex = _monster.cooldownIndex;\r\n        // Increment the breeding count, clamping it at 13, which is the length of the\r\n        // cooldowns array. We could check the array size dynamically, but hard-coding\r\n        // this as a constant saves gas. Yay, Solidity!\r\n        if(increaseIndex > 0)\r\n        {\r\n            if (newCooldownIndex + 1 < monsterConstants.actionCooldownsLength()) {\r\n                newCooldownIndex += 1;\r\n            }\r\n        }\r\n        \r\n        monsterStorage.setActionCooldown(monsterId, newCooldownIndex, cooldownEndTimestamp, now, 0, activeRestCooldownIndex);\r\n    }\r\n    \r\n    \r\n\r\n    /// @notice Grants approval to another user to sire with one of your monsters.\r\n    /// @param _addr The address that will be able to sire with your monster. Set to\r\n    ///  address(0) to clear all siring approvals for this monster.\r\n    /// @param _sireId A monster that you own that _addr will now be able to sire with.\r\n    function approveSiring(address _addr, uint256 _sireId)\r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(_owns(msg.sender, _sireId));\r\n        monsterStorage.setSireAllowedToAddress(_sireId, _addr);\r\n    }\r\n\r\n    /// @dev Updates the minimum payment required for calling giveBirthAuto(). Can only\r\n    ///  be called by the COO address. (This fee is used to offset the gas cost incurred\r\n    ///  by the autobirth daemon).\r\n    function setAutoBirthFee(uint256 val) external onlyCOO {\r\n        autoBirthFee = val;\r\n    }\r\n    \r\n    function setBirthCommission(uint val) external onlyCOO{\r\n        birthCommission = val;\r\n    }\r\n\r\n    /// @dev Checks to see if a given monster is pregnant and (if so) if the gestation\r\n    ///  period has passed.\r\n    function _isReadyToGiveBirth(MonsterLib.Monster _matron) private view returns (bool) {\r\n        return (_matron.siringWithId != 0) && (_matron.cooldownEndTimestamp <= now);\r\n    }\r\n\r\n    /// @notice Checks that a given monster is able to breed (i.e. it is not pregnant or\r\n    ///  in the middle of a siring cooldown).\r\n    /// @param _monsterId reference the id of the monster, any user can inquire about it\r\n    function isReadyToBreed(uint256 _monsterId)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(_monsterId > 0);\r\n        MonsterLib.Monster memory monster = readMonster(_monsterId);\r\n        return _isReadyToBreed(monster);\r\n    }\r\n    \r\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair. DOES NOT\r\n    ///  check ownership permissions (that is up to the caller).\r\n    /// @param _matron A reference to the monster struct of the potential matron.\r\n    /// @param _matronId The matron's ID.\r\n    /// @param _sire A reference to the monster struct of the potential sire.\r\n    /// @param _sireId The sire's ID\r\n    function _isValidMatingPair(\r\n        MonsterLib.Monster _matron,\r\n        uint256 _matronId,\r\n        MonsterLib.Monster _sire,\r\n        uint256 _sireId\r\n    )\r\n        internal\r\n        pure\r\n        returns(bool)\r\n    {\r\n        // A monster can't breed with itself!\r\n        if (_matronId == _sireId) {\r\n            return false;\r\n        }\r\n\r\n        // monsters can't breed with their parents.\r\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\r\n            return false;\r\n        }\r\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\r\n            return false;\r\n        }\r\n\r\n        // We can short circuit the sibling check (below) if either cat is\r\n        // gen zero (has a matron ID of zero).\r\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\r\n            return true;\r\n        }\r\n\r\n        // monster can't breed with full or half siblings.\r\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\r\n            return false;\r\n        }\r\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\r\n            return false;\r\n        }\r\n\r\n        // Everything seems cool! Let's get DTF.\r\n        return true;\r\n    }\r\n\r\n    /// @dev Checks whether a monster is currently pregnant.\r\n    /// @param _monsterId reference the id of the monster, any user can inquire about it\r\n    function isPregnant(uint256 _monsterId)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(_monsterId > 0);\r\n        // A monster is pregnant if and only if this field is set\r\n        MonsterLib.Monster memory monster = readMonster(_monsterId);\r\n        return monster.siringWithId != 0;\r\n    }\r\n\r\n    \r\n\r\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair for\r\n    ///  breeding via auction (i.e. skips ownership and siring approval checks).\r\n    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        MonsterLib.Monster memory matron = readMonster(_matronId);\r\n        MonsterLib.Monster memory sire = readMonster(_sireId);\r\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\r\n    }\r\n\r\n    /// @notice Checks to see if two monsters can breed together, including checks for\r\n    ///  ownership and siring approvals. Does NOT check that both cats are ready for\r\n    ///  breeding (i.e. breedWith could still fail until the cooldowns are finished).\r\n    /// @param _matronId The ID of the proposed matron.\r\n    /// @param _sireId The ID of the proposed sire.\r\n    function canBreedWith(uint256 _matronId, uint256 _sireId)\r\n        external\r\n        view\r\n        returns(bool)\r\n    {\r\n        require(_matronId > 0);\r\n        require(_sireId > 0);\r\n        MonsterLib.Monster memory matron = readMonster(_matronId);\r\n        MonsterLib.Monster memory sire = readMonster(_sireId);\r\n        return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\r\n            _isSiringPermitted(_sireId, _matronId);\r\n    }\r\n\r\n    /// @dev Internal utility function to initiate breeding, assumes that all breeding\r\n    ///  requirements have been checked.\r\n    function _breedWith(uint256 _matronId, uint256 _sireId) internal {\r\n        // Grab a reference to the Kitties from storage.\r\n        MonsterLib.Monster memory sire = readMonster(_sireId);\r\n        MonsterLib.Monster memory matron = readMonster(_matronId);\r\n\r\n        // Mark the matron as pregnant, keeping track of who the sire is.\r\n        monsterStorage.setSiringWith(_matronId, _sireId);\r\n        \r\n\r\n        // Trigger the cooldown for both parents.\r\n        _triggerCooldown(_sireId, sire, 1);\r\n        _triggerCooldown(_matronId, matron, 1);\r\n\r\n        // Clear siring permission for both parents. This may not be strictly necessary\r\n        // but it's likely to avoid confusion!\r\n        monsterStorage.setSireAllowedToAddress(_matronId, address(0));\r\n        monsterStorage.setSireAllowedToAddress(_sireId, address(0));\r\n\r\n        uint pregnantMonsters = monsterStorage.pregnantMonsters();\r\n        monsterStorage.setPregnantMonsters(pregnantMonsters + 1);\r\n\r\n        // Emit the pregnancy event.\r\n        emit Pregnant(monsterStorage.monsterIndexToOwner(_matronId), _matronId, _sireId, matron.cooldownEndTimestamp);\r\n    }\r\n\r\n    /// @notice Breed a monster you own (as matron) with a sire that you own, or for which you\r\n    ///  have previously been given Siring approval. Will either make your monster pregnant, or will\r\n    ///  fail entirely. Requires a pre-payment of the fee given out to the first caller of giveBirth()\r\n    /// @param _matronId The ID of the monster acting as matron (will end up pregnant if successful)\r\n    /// @param _sireId The ID of the monster acting as sire (will begin its siring cooldown if successful)\r\n    function breedWithAuto(uint256 _matronId, uint256 _sireId)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        // Checks for payment.\r\n        require(msg.value >= autoBirthFee + birthCommission);\r\n\r\n        // Caller must own the matron.\r\n        require(_owns(msg.sender, _matronId));\r\n\r\n        // Neither sire nor matron are allowed to be on auction during a normal\r\n        // breeding operation, but we don't need to check that explicitly.\r\n        // For matron: The caller of this function can't be the owner of the matron\r\n        //   because the owner of a Kitty on auction is the auction house, and the\r\n        //   auction house will never call breedWith().\r\n        // For sire: Similarly, a sire on auction will be owned by the auction house\r\n        //   and the act of transferring ownership will have cleared any oustanding\r\n        //   siring approval.\r\n        // Thus we don't need to spend gas explicitly checking to see if either cat\r\n        // is on auction.\r\n\r\n        // Check that matron and sire are both owned by caller, or that the sire\r\n        // has given siring permission to caller (i.e. matron's owner).\r\n        // Will fail for _sireId = 0\r\n        require(_isSiringPermitted(_sireId, _matronId));\r\n\r\n        // Grab a reference to the potential matron\r\n        MonsterLib.Monster memory matron = readMonster(_matronId);\r\n\r\n        // Make sure matron isn't pregnant, or in the middle of a siring cooldown\r\n        require(_isReadyToBreed(matron));\r\n\r\n        // Grab a reference to the potential sire\r\n        MonsterLib.Monster memory sire = readMonster(_sireId);\r\n\r\n        // Make sure sire isn't pregnant, or in the middle of a siring cooldown\r\n        require(_isReadyToBreed(sire));\r\n\r\n        // Test that these cats are a valid mating pair.\r\n        require(_isValidMatingPair(\r\n            matron,\r\n            _matronId,\r\n            sire,\r\n            _sireId\r\n        ));\r\n\r\n        // All checks passed, kitty gets pregnant!\r\n        _breedWith(_matronId, _sireId);\r\n    }\r\n\r\n    /// @notice Have a pregnant monster give birth!\r\n    /// @param _matronId A monster ready to give birth.\r\n    /// @return The monster ID of the new monster.\r\n    /// @dev Looks at a given monster and, if pregnant and if the gestation period has passed,\r\n    ///  combines the genes of the two parents to create a new monster. The new monster is assigned\r\n    ///  to the current owner of the matron. Upon successful completion, both the matron and the\r\n    ///  new monster will be ready to breed again. Note that anyone can call this function (if they\r\n    ///  are willing to pay the gas!), but the new monster always goes to the mother's owner.\r\n    function giveBirth(uint256 _matronId)\r\n        external\r\n        whenNotPaused\r\n        returns(uint256)\r\n    {\r\n        // Grab a reference to the matron in storage.\r\n        MonsterLib.Monster memory matron = readMonster(_matronId);\r\n\r\n        // Check that the matron is a valid cat.\r\n        require(matron.birthTime != 0);\r\n\r\n        // Check that the matron is pregnant, and that its time has come!\r\n        require(_isReadyToGiveBirth(matron));\r\n\r\n        // Grab a reference to the sire in storage.\r\n        uint256 sireId = matron.siringWithId;\r\n        MonsterLib.Monster memory sire = readMonster(sireId);\r\n\r\n        // Determine the higher generation number of the two parents\r\n        uint16 parentGen = matron.generation;\r\n        if (sire.generation > matron.generation) {\r\n            parentGen = sire.generation;\r\n        }\r\n\r\n        // Call the sooper-sekret gene mixing operation.\r\n        uint256 childGenes = geneScience.mixGenes(matron.genes, sire.genes, block.number - 1);\r\n        uint256 childBattleGenes = geneScience.mixBattleGenes(matron.battleGenes, sire.battleGenes, block.number - 1);\r\n\r\n        // Make the new kitten!\r\n        address owner = monsterStorage.monsterIndexToOwner(_matronId);\r\n        uint256 monsterId = _createMonster(_matronId, matron.siringWithId, parentGen + 1, childGenes, childBattleGenes, 0, owner);\r\n\r\n        // Clear the reference to sire from the matron (REQUIRED! Having siringWithId\r\n        // set is what marks a matron as being pregnant.)\r\n        monsterStorage.setSiringWith(_matronId, 0);\r\n\r\n        uint pregnantMonsters = monsterStorage.pregnantMonsters();\r\n        monsterStorage.setPregnantMonsters(pregnantMonsters - 1);\r\n\r\n        \r\n        // Send the balance fee to the person who made birth happen.\r\n        msg.sender.transfer(autoBirthFee);\r\n\r\n        // return the new kitten's ID\r\n        return monsterId;\r\n    }\r\n}\r\n\r\n\r\ncontract MonsterFeeding is MonsterBreeding {\r\n    \r\n    event MonsterFed(uint monsterId, uint growScore);\r\n    \r\n    \r\n    function setMonsterFoodAddress(address _address) external onlyCEO {\r\n        MonsterFood candidateContract = MonsterFood(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect\r\n        require(candidateContract.isMonsterFood());\r\n\r\n        // Set the new contract address\r\n        monsterFood = candidateContract;\r\n    }\r\n    \r\n    function feedMonster(uint _monsterId, uint _foodCode) external payable{\r\n\r\n        (uint p1, uint p2, uint p3) = monsterStorage.getMonsterBits(_monsterId);\r\n        \r\n        (p1, p2, p3) = monsterFood.feedMonster.value(msg.value)( msg.sender, _foodCode, p1, p2, p3);\r\n        \r\n        monsterStorage.setMonsterBits(_monsterId, p1, p2, p3);\r\n\r\n        emit MonsterFed(_monsterId, 0);\r\n        \r\n    }\r\n}\r\n\r\n/// @title Handles creating auctions for sale and siring of monsters.\r\ncontract MonsterFighting is MonsterFeeding {\r\n    \r\n    \r\n      function prepareForBattle(uint _param1, uint _param2, uint _param3) external payable returns(uint){\r\n        require(_param1 > 0);\r\n        require(_param2 > 0);\r\n        require(_param3 > 0);\r\n        \r\n        for(uint i = 0; i < 5; i++){\r\n            uint monsterId = MonsterLib.getBits(_param1, uint8(i * 32), uint8(32));\r\n            require(_owns(msg.sender, monsterId));\r\n            _approve(monsterId, address(battlesContract));\r\n        }\r\n        \r\n        return battlesContract.prepareForBattle.value(msg.value)(msg.sender, _param1, _param2, _param3);\r\n    }\r\n    \r\n    function withdrawFromBattle(uint _param1, uint _param2, uint _param3) external returns(uint){\r\n        return battlesContract.withdrawFromBattle(msg.sender, _param1, _param2, _param3);\r\n    }\r\n    \r\n    function finishBattle(uint _param1, uint _param2, uint _param3) external returns(uint) {\r\n        (uint return1, uint return2, uint return3) = battlesContract.finishBattle(msg.sender, _param1, _param2, _param3);\r\n        uint[10] memory monsterIds;\r\n        uint i;\r\n        uint monsterId;\r\n        \r\n        require(return3>=0);\r\n        \r\n        for(i = 0; i < 8; i++){\r\n            monsterId = MonsterLib.getBits(return1, uint8(i * 32), uint8(32));\r\n            monsterIds[i] = monsterId;\r\n        }\r\n        \r\n        for(i = 0; i < 2; i++){\r\n            monsterId = MonsterLib.getBits(return2, uint8(i * 32), uint8(32));\r\n            monsterIds[i+8] = monsterId;\r\n        }\r\n        \r\n        for(i = 0; i < 10; i++){\r\n            monsterId = monsterIds[i];\r\n            MonsterLib.Monster memory monster = readMonster(monsterId);\r\n            uint bc = monster.battleCounter + 1;\r\n            uint increaseIndex = 0;\r\n            if(bc >= 10)\r\n            {\r\n                bc = 0;\r\n                increaseIndex = 1;\r\n            }\r\n            monster.battleCounter = uint8(bc);\r\n            _triggerCooldown(monsterId, monster, increaseIndex);\r\n        }\r\n        \r\n        \r\n    }\r\n}\r\n\r\n/// @title Handles creating auctions for sale and siring of monsters.\r\n///  This wrapper of ReverseAuction exists only so that users can create\r\n///  auctions with only one transaction.\r\ncontract MonsterAuction is MonsterFighting {\r\n\r\n    // @notice The auction contract variables are defined in MonsterBase to allow\r\n    //  us to refer to them in MonsterOwnership to prevent accidental transfers.\r\n    // `saleAuction` refers to the auction for gen0 and p2p sale of monsters.\r\n    // `siringAuction` refers to the auction for siring rights of monsters.\r\n\r\n    /// @dev Sets the reference to the sale auction.\r\n    /// @param _address - Address of sale contract.\r\n    function setSaleAuctionAddress(address _address) external onlyCEO {\r\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isSaleClockAuction());\r\n\r\n        // Set the new contract address\r\n        saleAuction = candidateContract;\r\n    }\r\n\r\n\r\n    /// @dev Put a monster up for auction.\r\n    ///  Does some ownership trickery to create auctions in one tx.\r\n    function createSaleAuction(\r\n        uint256 _monsterId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If monster is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _monsterId));\r\n        // Ensure the monster is not pregnant to prevent the auction\r\n        // contract accidentally receiving ownership of the child.\r\n        // NOTE: the monster IS allowed to be in a cooldown.\r\n        require(!isPregnant(_monsterId));\r\n        _approve(_monsterId, saleAuction);\r\n        // Sale auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the monster.\r\n        saleAuction.createAuction(\r\n            _monsterId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n    \r\n    /// @dev Put a monster up for auction to be sire.\r\n    ///  Performs checks to ensure the monster can be sired, then\r\n    ///  delegates to reverse auction.\r\n    function createSiringAuction(\r\n        uint256 _monsterId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        // If monster is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _monsterId));\r\n        require(isReadyToBreed(_monsterId));\r\n        _approve(_monsterId, siringAuction);\r\n        // Siring auction throws if inputs are invalid and clears\r\n        // transfer and sire approval after escrowing the kitty.\r\n        siringAuction.createAuction(\r\n            _monsterId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            msg.sender\r\n        );\r\n    }\r\n    \r\n    /// @dev Completes a siring auction by bidding.\r\n    ///  Immediately breeds the winning matron with the sire on auction.\r\n    /// @param _sireId - ID of the sire on auction.\r\n    /// @param _matronId - ID of the matron owned by the bidder.\r\n    function bidOnSiringAuction(\r\n        uint256 _sireId,\r\n        uint256 _matronId\r\n    )\r\n        external\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        // Auction contract checks input sizes\r\n        require(_owns(msg.sender, _matronId));\r\n        require(isReadyToBreed(_matronId));\r\n        require(_canBreedWithViaAuction(_matronId, _sireId));\r\n\r\n        // Define the current price of the auction.\r\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\r\n        require(msg.value >= currentPrice + autoBirthFee);\r\n\r\n        // Siring auction will throw if the bid fails.\r\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\r\n        _breedWith(uint32(_matronId), uint32(_sireId));\r\n    }\r\n\r\n\r\n    \r\n}\r\n\r\n/// @title all functions related to creating monsters\r\ncontract MonsterMinting is MonsterAuction {\r\n\r\n    // Limits the number of monsters the contract owner can ever create.\r\n    uint256 public constant PROMO_CREATION_LIMIT = 1000;\r\n    uint256 public constant GEN0_CREATION_LIMIT = 45000;\r\n\r\n    uint256 public constant GEN0_STARTING_PRICE = 1 ether;\r\n    uint256 public constant GEN0_ENDING_PRICE = 0.1 ether;\r\n    uint256 public constant GEN0_AUCTION_DURATION = 30 days;\r\n\r\n\r\n    // Counts the number of monsters the contract owner has created.\r\n    uint256 public promoCreatedCount;\r\n    uint256 public gen0CreatedCount;\r\n\r\n\r\n    /// @dev we can create promo monsters, up to a limit. Only callable by COO\r\n    /// @param _genes the encoded genes of the monster to be created, any value is accepted\r\n    /// @param _owner the future owner of the created monsters. Default to contract COO\r\n    function createPromoMonster(uint256 _genes, uint256 _battleGenes, uint256 _level, address _owner) external onlyCOO {\r\n        address monsterOwner = _owner;\r\n        if (monsterOwner == address(0)) {\r\n             monsterOwner = cooAddress;\r\n        }\r\n        require(promoCreatedCount < PROMO_CREATION_LIMIT);\r\n\r\n        promoCreatedCount++;\r\n        _createMonster(0, 0, 0, _genes, _battleGenes, _level, monsterOwner);\r\n    }\r\n    \r\n    /// @dev Creates a new gen0 monster with the given genes and\r\n    ///  creates an auction for it.\r\n    function createGen0AuctionCustom(uint _genes, uint _battleGenes, uint _level, uint _startingPrice, uint _endingPrice, uint _duration) external onlyCOO {\r\n        require(gen0CreatedCount < GEN0_CREATION_LIMIT);\r\n\r\n        uint256 monsterId = _createMonster(0, 0, 0, _genes, _battleGenes, _level, address(this));\r\n        _approve(monsterId, saleAuction);\r\n\r\n        saleAuction.createAuction(\r\n            monsterId,\r\n            _startingPrice,\r\n            _endingPrice,\r\n            _duration,\r\n            address(this)\r\n        );\r\n\r\n        gen0CreatedCount++;\r\n    }\r\n}\r\n\r\n/// @title MonsterBit: Collectible, breedable, and monsters on the Ethereum blockchain.\r\n/// @dev The main MonsterBit contract, keeps track of monsters so they don't wander around and get lost.\r\ncontract MonsterCore is MonsterMinting {\r\n\r\n    // This is the main MonsterBit contract. In order to keep our code seperated into logical sections,\r\n    // we've broken it up in two ways. First, we have several seperately-instantiated sibling contracts\r\n    // that handle auctions and our super-top-secret genetic combination algorithm. The auctions are\r\n    // seperate since their logic is somewhat complex and there's always a risk of subtle bugs. By keeping\r\n    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\r\n    // monster ownership. The genetic combination algorithm is kept seperate so we can open-source all of\r\n    // the rest of our code without making it _too_ easy for folks to figure out how the genetics work.\r\n    // Don't worry, I'm sure someone will reverse engineer it soon enough!\r\n    //\r\n    // Secondly, we break the core contract into multiple files using inheritence, one for each major\r\n    // facet of functionality of CK. This allows us to keep related code bundled together while still\r\n    // avoiding a single giant file with everything in it. The breakdown is as follows:\r\n    //\r\n    //      - MonsterBase: This is where we define the most fundamental code shared throughout the core\r\n    //             functionality. This includes our main data storage, constants and data types, plus\r\n    //             internal functions for managing these items.\r\n    //\r\n    //      - MonsterAccessControl: This contract manages the various addresses and constraints for operations\r\n    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\r\n    //\r\n    //      - MonsterOwnership: This provides the methods required for basic non-fungible token\r\n    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\r\n    //\r\n    //      - MonsterBreeding: This file contains the methods necessary to breed monsters together, including\r\n    //             keeping track of siring offers, and relies on an external genetic combination contract.\r\n    //\r\n    //      - MonsterAuctions: Here we have the public methods for auctioning or bidding on monsters or siring\r\n    //             services. The actual auction functionality is handled in two sibling contracts (one\r\n    //             for sales and one for siring), while auction creation and bidding is mostly mediated\r\n    //             through this facet of the core contract.\r\n    //\r\n    //      - MonsterMinting: This final facet contains the functionality we use for creating new gen0 monsters.\r\n    //             We can make up to 5000 \"promo\" monsters that can be given away (especially important when\r\n    //             the community is new), and all others can only be created and then immediately put up\r\n    //             for auction via an algorithmically determined starting price. Regardless of how they\r\n    //             are created, there is a hard limit of 50k gen0 monsters. After that, it's all up to the\r\n    //             community to breed, breed, breed!\r\n\r\n    // Set in case the core contract is broken and an upgrade is required\r\n    address public newContractAddress;\r\n\r\n    /// @notice Creates the main MonsterBit smart contract instance.\r\n    constructor(address _ceoBackupAddress) public {\r\n        require(_ceoBackupAddress != address(0));\r\n        // Starts paused.\r\n        paused = true;\r\n\r\n        // the creator of the contract is the initial CEO\r\n        ceoAddress = msg.sender;\r\n        ceoBackupAddress = _ceoBackupAddress;\r\n\r\n        // the creator of the contract is also the initial COO\r\n        cooAddress = msg.sender;\r\n    }\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indicating that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    function setNewAddress(address _v2Address) external onlyCEO whenPaused {\r\n        // See README.md for updgrade plan\r\n        newContractAddress = _v2Address;\r\n        emit ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    /// @notice No tipping!\r\n    /// @dev Reject all Ether from being sent here, unless it's from one of the\r\n    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\r\n    function() external payable {\r\n        require(\r\n            msg.sender == address(saleAuction)\r\n            ||\r\n            msg.sender == address(siringAuction)\r\n            ||\r\n            msg.sender == address(battlesContract)\r\n            ||\r\n            msg.sender == address(monsterFood)\r\n        );\r\n    }\r\n\r\n    /// @dev Override unpause so it requires all external contract addresses\r\n    ///  to be set before contract can be unpaused. Also, we can't have\r\n    ///  newContractAddress set either, because then the contract was upgraded.\r\n    /// @notice This is public rather than external so we can call super.unpause\r\n    ///  without using an expensive CALL.\r\n    function unpause() public onlyCEO whenPaused {\r\n        require(saleAuction != address(0));\r\n        require(siringAuction != address(0));\r\n        require(monsterFood != address(0));\r\n        require(battlesContract != address(0));\r\n        require(geneScience != address(0));\r\n        require(monsterStorage != address(0));\r\n        require(monsterConstants != address(0));\r\n        require(newContractAddress == address(0));\r\n\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n\r\n    // @dev Allows the CFO to capture the balance available to the contract.\r\n    function withdrawBalance() external onlyCFO {\r\n        uint256 balance = address(this).balance;\r\n        \r\n        uint256 subtractFees = (monsterStorage.pregnantMonsters() + 1) * autoBirthFee;\r\n\r\n        if (balance > subtractFees) {\r\n            cfoAddress.transfer(balance - subtractFees);\r\n        }\r\n\r\n    }\r\n    \r\n    /// @dev Transfers the balance of the sale auction contract\r\n    /// to the MonsterCore contract. We use two-step withdrawal to\r\n    /// prevent two transfer calls in the auction bid function.\r\n    function withdrawDependentBalances() external onlyCLevel {\r\n        saleAuction.withdrawBalance();\r\n        siringAuction.withdrawBalance();\r\n        battlesContract.withdrawBalance();\r\n        monsterFood.withdrawBalance();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"promoCreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_STARTING_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSiringAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint256\"}],\"name\":\"isPregnant\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_AUCTION_DURATION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"birthCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"siringAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGeneScienceAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_ENDING_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSaleAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMonsterConstantsAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"canBreedWith\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_param1\",\"type\":\"uint256\"},{\"name\":\"_param2\",\"type\":\"uint256\"},{\"name\":\"_param3\",\"type\":\"uint256\"}],\"name\":\"prepareForBattle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createSiringAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setAutoBirthFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"approveSiring\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawDependentBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setBirthCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GEN0_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleAuctionAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMonsterStorageAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMonsterFoodAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"}],\"name\":\"giveBirth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBattlesAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint256\"},{\"name\":\"_foodCode\",\"type\":\"uint256\"}],\"name\":\"feedMonster\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_param1\",\"type\":\"uint256\"},{\"name\":\"_param2\",\"type\":\"uint256\"},{\"name\":\"_param3\",\"type\":\"uint256\"}],\"name\":\"withdrawFromBattle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monsterFood\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoBirthFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_battleGenes\",\"type\":\"uint256\"},{\"name\":\"_level\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"createPromoMonster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_monsterId\",\"type\":\"uint256\"}],\"name\":\"isReadyToBreed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monsterStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROMO_CREATION_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_genes\",\"type\":\"uint256\"},{\"name\":\"_battleGenes\",\"type\":\"uint256\"},{\"name\":\"_level\",\"type\":\"uint256\"},{\"name\":\"_startingPrice\",\"type\":\"uint256\"},{\"name\":\"_endingPrice\",\"type\":\"uint256\"},{\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createGen0AuctionCustom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monsterConstants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_param1\",\"type\":\"uint256\"},{\"name\":\"_param2\",\"type\":\"uint256\"},{\"name\":\"_param3\",\"type\":\"uint256\"}],\"name\":\"finishBattle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"battlesContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"saleAuction\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sireId\",\"type\":\"uint256\"},{\"name\":\"_matronId\",\"type\":\"uint256\"}],\"name\":\"bidOnSiringAuction\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gen0CreatedCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"geneScience\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_matronId\",\"type\":\"uint256\"},{\"name\":\"_sireId\",\"type\":\"uint256\"}],\"name\":\"breedWithAuto\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ceoBackupAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"monsterId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"growScore\",\"type\":\"uint256\"}],\"name\":\"MonsterFed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"matronId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sireId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"cooldownEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"Pregnant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"monsterId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genes\",\"type\":\"uint256\"}],\"name\":\"Birth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"}]","ContractName":"MonsterCore","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d3b05ec555d2401edfd5c16d9670c0cbb30c086a","EVMVersion":"Default","Library":"MonsterLib:c5483c323e5317b950b875bd6d5f21f63673bfcd","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d311a6408780c904edc1da1041b2b593275b144f01af6d2de9a2d3ecd566437c"}]}