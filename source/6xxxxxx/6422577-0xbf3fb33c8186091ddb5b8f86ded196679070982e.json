{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/* contract ownership status*/\r\ncontract owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _oshiAmount, address _token, bytes _extraData) external; }\r\n\r\ncontract TokenERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    // @param M Multiplier,\r\n    uint256 public M = 10**uint256(decimals); \r\n    uint256 public totalSupply;\r\n\r\n    \r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    /** oshi for Adamcoin is like wei for Ether, 1 Adamcoin = M * oshi as 1 Ether = 1e18 wei  */\r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _oshiAmount);\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Approval(address indexed _approvedBy, address _spender, uint256 _oshiAmount);\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed _from, uint256 _oshiAmount);\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor(\r\n       uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    )   public {\r\n        \r\n        totalSupply = initialSupply * M;\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = tokenName;                         // Set the name for display purposes\r\n        symbol = tokenSymbol;                    // Set the symbol for display purposes\r\n    }\r\n    \r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _oshiAmount) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Subtract from the sender\r\n        balanceOf[_from] = balanceOf[_from].sub(_oshiAmount);\r\n        // Add the same to the recipient\r\n        balanceOf[_to] = balanceOf[_to].add(_oshiAmount);\r\n        emit Transfer(_from, _to, _oshiAmount);\r\n        \r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_oshiAmount` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _oshiAmount the amount of oshi to send\r\n     */\r\n    function transfer(address _to, uint256 _oshiAmount) public {\r\n        _transfer(msg.sender, _to, _oshiAmount);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_oshiAmount`  to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _oshiAmount the amount or oshi to send\r\n     */\r\n     function transferFrom(address _from, address _to, uint256 _oshiAmount) public returns (bool success) {\r\n        require(_oshiAmount <= balanceOf[_from]);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_oshiAmount);\r\n        require(_oshiAmount > 0 && _from != _to); \r\n        _transfer(_from, _to, _oshiAmount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_oshiAmount` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _oshiAmount the max amount of oshi they can spend \r\n     */\r\n     function approve(address _spender, uint _oshiAmount) public returns (bool success) {\r\n       \r\n        allowed[msg.sender][_spender] = _oshiAmount;\r\n        emit Approval(msg.sender, _spender, _oshiAmount);\r\n        return true;\r\n    }\r\n    \r\n      /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_oshiAmount`  in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _oshiAmount the max amount of oshi they can spend \r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _oshiAmount, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _oshiAmount)) {\r\n            spender.receiveApproval(msg.sender, _oshiAmount, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n  \r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_oshiAmount`  from the system irreversibly\r\n     *\r\n     * @param _oshiAmount the amount of oshi to burn \r\n     */\r\n    function burn(uint256 _oshiAmount) public returns (bool success) {\r\n    \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_oshiAmount);            // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_oshiAmount);                      // Updates totalSupply\r\n        emit Burn(msg.sender, _oshiAmount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_oshiAmount`  from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _oshiAmount the amount of oshi to burn \r\n     */\r\n    function burnFrom(address _from, uint256 _oshiAmount)  public returns (bool success) {\r\n        balanceOf[_from] = balanceOf[_from].sub(_oshiAmount);                         // Subtract from the targeted balance\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_oshiAmount);             // Subtract from the sender's allowed\r\n        totalSupply = totalSupply.sub(_oshiAmount);                              // Update totalSupply\r\n        emit Burn(_from, _oshiAmount);\r\n        return true;\r\n    }\r\n}\r\n/******************************************/\r\n/*       ADAMCOINS ADM STARTS HERE       */\r\n/******************************************/\r\n\r\ncontract Adamcoins is owned, TokenERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    uint256 public sellPrice;                //Adamcoins sell price\r\n    uint256 public buyPrice;                 //Adamcoins buy price\r\n    bool public purchasingAllowed = true;\r\n    bool public sellingAllowed = true;\r\n\r\n    \r\n    mapping (address => uint) public pendingWithdrawals;\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n     constructor(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n    \r\n    /// @dev Public function to determine if an address is a contract\r\n    /// @param _addr The address being queried\r\n    /// @return True if `_addr` is a contract\r\n    function isContract(address _addr) view public returns(bool) {\r\n        uint size;\r\n        if (_addr == 0) return false;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size>0;\r\n    }\r\n\r\n    /// @notice allows to purchase from the contract \r\n    function enablePurchasing() onlyOwner public {\r\n        require (msg.sender == owner); \r\n        purchasingAllowed = true;\r\n    }\r\n    /// @notice doesn't allow to purchase from the contract\r\n    function disablePurchasing() onlyOwner public {\r\n        require (msg.sender == owner); \r\n        purchasingAllowed = false;\r\n    }\r\n    \r\n    /// @notice allows to sell to the contract\r\n    function enableSelling() onlyOwner public {\r\n        require (msg.sender == owner); \r\n        sellingAllowed = true;\r\n    }\r\n    /// @notice doesn't allow to sell to the contract\r\n    function disableSelling() onlyOwner public {\r\n        require (msg.sender == owner); \r\n        sellingAllowed = false;\r\n    }\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _oshiAmount) internal {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        balanceOf[_from] = balanceOf[_from].sub(_oshiAmount);    // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_oshiAmount);        // Add the same to the recipient\r\n        emit Transfer(_from, _to, _oshiAmount);\r\n    }\r\n\r\n    /// @notice Create `mintedOshiAmount` and send it to `target`\r\n    /// @param target Address to receive oshi\r\n    /// @param mintedOshiAmount the amount of oshi it will receive \r\n    function mintToken(address target, uint256 mintedOshiAmount) onlyOwner public returns (bool) {\r\n        \r\n        balanceOf[target] = balanceOf[target].add(mintedOshiAmount);\r\n        totalSupply = totalSupply.add(mintedOshiAmount);\r\n        emit Transfer(0, address(this), mintedOshiAmount);\r\n        emit Transfer(address(this), target, mintedOshiAmount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    /// @notice Allow users to buy adamcoins for `newBuyPrice` and sell adamcoins for `newSellPrice`\r\n    /// @param newSellPrice the Price in wei that users can sell to the contract\r\n    /// @param newBuyPrice the Price in wei that users can buy from the contract\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    \r\n    }\r\n\r\n   /* transfer amount of wei to owner*/\r\n\tfunction withdrawEther(uint256 amount) onlyOwner public {\r\n\t\trequire(msg.sender == owner);\r\n\t\towner.transfer(amount);\r\n\t}\r\n\t/// @notice This method can be used by the owner to extract sent tokens \r\n\t/// or ethers to this contract.\r\n    /// @param _token The address of token contract that you want to recover\r\n    ///  set to 0 address in case of ether\r\n\tfunction claimTokens(address _token) onlyOwner public {\r\n        if (_token == 0x0) {\r\n            owner.transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        TokenERC20 token = TokenERC20(_token);\r\n        uint balance = token.balanceOf(address(this));\r\n        token.transfer(owner, balance);\r\n        \r\n    }\r\n    \r\n    /// @notice Buy tokens from contract by sending ether\r\n    function() public payable {\r\n        \r\n        require(msg.value > 0);\r\n        require(purchasingAllowed);\r\n        uint tokens = (msg.value * M)/buyPrice; // calculates the amount\r\n        \r\n\t    pendingWithdrawals[msg.sender] = pendingWithdrawals[msg.sender].add(tokens); // update the pendingWithdrawals amount for buyer\r\n\t}\r\n\t\r\n\t/// @notice Withdraw the amount of pendingWithdrawals from contract\r\n    function withdrawAdamcoins() public {\r\n        require(purchasingAllowed);\r\n        uint withdrawalAmount = pendingWithdrawals[msg.sender]; // calculates withdrawal amount \r\n        \r\n        pendingWithdrawals[msg.sender] = 0;\r\n        \r\n        _transfer(address(this), msg.sender, withdrawalAmount);    // makes the transfers\r\n       \r\n    }\r\n    \r\n    /// @notice Sell Adamcoins  to the contract\r\n    /// @param _adamcoinsAmountToSell amount of  Adamcoins to be sold\r\n    function sell(uint256 _adamcoinsAmountToSell) public {\r\n        require(sellingAllowed);\r\n        uint256 weiAmount = _adamcoinsAmountToSell.mul(sellPrice);\r\n        require(address(this).balance >= weiAmount);      // checks if the contract has enough ether to buy\r\n        uint adamcoinsAmountToSell = _adamcoinsAmountToSell * M;\r\n        _transfer(msg.sender, address(this), adamcoinsAmountToSell);              // makes the transfers\r\n        msg.sender.transfer(weiAmount);          // sends ether to the seller.\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_oshiAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_oshiAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAdamcoins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oshiAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disablePurchasing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"M\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedOshiAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_oshiAmount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enablePurchasing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_oshiAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableSelling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_oshiAmount\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableSelling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"purchasingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adamcoinsAmountToSell\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oshiAmount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_approvedBy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oshiAmount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oshiAmount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Adamcoins","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000002363e7f00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000094164616d636f696e730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000341444d0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://2cdc4e377401d4033d4883bc9fa0dacc7f3411351c8b92ac3fc3838bceee024a"}]}