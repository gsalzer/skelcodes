{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract ICurrency {\r\n  function getUsdAbsRaisedInCents() external view returns(uint);\r\n  function getCoinRaisedBonusInWei() external view returns(uint);\r\n  function getCoinRaisedInWei() public view returns(uint);\r\n  function getUsdFromETH(uint ethWei) public view returns(uint);\r\n  function getTokenFromETH(uint ethWei) public view returns(uint);\r\n  function getCurrencyRate(string _ticker) public view returns(uint);\r\n  function addPay(string _ticker, uint value, uint usdAmount, uint coinRaised, uint coinRaisedBonus) public returns(bool);\r\n  function checkTickerExists(string ticker) public view returns(bool);\r\n  function getUsdFromCurrency(string ticker, uint value) public view returns(uint);\r\n  function getUsdFromCurrency(string ticker, uint value, uint usd) public view returns(uint);\r\n  function getUsdFromCurrency(bytes32 ticker, uint value) public view returns(uint);\r\n  function getUsdFromCurrency(bytes32 ticker, uint value, uint usd) public view returns(uint);\r\n  function getTokenWeiFromUSD(uint usdCents) public view returns(uint);\r\n  function editPay(bytes32 ticker, uint currencyValue, uint currencyUsdRaised, uint _usdAbsRaisedInCents, uint _coinRaisedInWei, uint _coinRaisedBonusInWei) public returns(bool);\r\n  function getCurrencyList(string ticker) public view returns(bool active, uint usd, uint devision, uint raised, uint usdRaised, uint usdRaisedExchangeRate, uint counter, uint lastUpdate);\r\n  function getCurrencyList(bytes32 ticker) public view returns(bool active, uint usd, uint devision, uint raised, uint usdRaised, uint usdRaisedExchangeRate, uint counter, uint lastUpdate);\r\n  function getTotalUsdRaisedInCents() public view returns(uint);\r\n  function getAllCurrencyTicker() public view returns(string);\r\n  function getCoinUSDRate() public view  returns(uint);\r\n  function addPreSaleBonus(uint bonusToken) public returns(bool);\r\n  function editPreSaleBonus(uint beforeBonus, uint afterBonus) public returns(bool);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title String\r\n * @dev ConcatenationString, uintToString, stringsEqual, stringToBytes32, bytes32ToString\r\n */\r\ncontract String {\r\n\r\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string memory) {\r\n    bytes memory _ba = bytes(_a);\r\n    bytes memory _bb = bytes(_b);\r\n    bytes memory _bc = bytes(_c);\r\n    bytes memory _bd = bytes(_d);\r\n    bytes memory _be = bytes(_e);\r\n    bytes memory abcde = bytes(new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length));\r\n    uint k = 0;\r\n    uint i;\r\n    for (i = 0; i < _ba.length; i++) {\r\n      abcde[k++] = _ba[i];\r\n    }\r\n    for (i = 0; i < _bb.length; i++) {\r\n      abcde[k++] = _bb[i];\r\n    }\r\n    for (i = 0; i < _bc.length; i++) {\r\n      abcde[k++] = _bc[i];\r\n    }\r\n    for (i = 0; i < _bd.length; i++) {\r\n      abcde[k++] = _bd[i];\r\n    }\r\n    for (i = 0; i < _be.length; i++) {\r\n      abcde[k++] = _be[i];\r\n    }\r\n    return string(abcde);\r\n  }\r\n\r\n  function strConcat(string _a, string _b, string _c, string _d) internal pure returns(string) {\r\n    return strConcat(_a, _b, _c, _d, \"\");\r\n  }\r\n\r\n  function strConcat(string _a, string _b, string _c) internal pure returns(string) {\r\n    return strConcat(_a, _b, _c, \"\", \"\");\r\n  }\r\n\r\n  function strConcat(string _a, string _b) internal pure returns(string) {\r\n    return strConcat(_a, _b, \"\", \"\", \"\");\r\n  }\r\n\r\n  function uint2str(uint i) internal pure returns(string) {\r\n    if (i == 0) {\r\n      return \"0\";\r\n    }\r\n    uint j = i;\r\n    uint length;\r\n    while (j != 0) {\r\n      length++;\r\n      j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(length);\r\n    uint k = length - 1;\r\n    while (i != 0) {\r\n      bstr[k--] = byte(uint8(48 + i % 10));\r\n      i /= 10;\r\n    }\r\n    return string(bstr);\r\n  }\r\n\r\n  function stringsEqual(string memory _a, string memory _b) internal pure returns(bool) {\r\n    bytes memory a = bytes(_a);\r\n    bytes memory b = bytes(_b);\r\n\r\n    if (a.length != b.length)\r\n      return false;\r\n\r\n    for (uint i = 0; i < a.length; i++) {\r\n      if (a[i] != b[i]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function stringToBytes32(string memory source) internal pure returns(bytes32 result) {\r\n    bytes memory _tmp = bytes(source);\r\n    if (_tmp.length == 0) {\r\n      return 0x0;\r\n    }\r\n    assembly {\r\n      result := mload(add(source, 32))\r\n    }\r\n  }\r\n\r\n  function bytes32ToString(bytes32 x) internal pure returns (string) {\r\n    bytes memory bytesString = new bytes(32);\r\n    uint charCount = 0;\r\n    uint j;\r\n    for (j = 0; j < 32; j++) {\r\n      byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n      if (char != 0) {\r\n        bytesString[charCount] = char;\r\n        charCount++;\r\n      }\r\n    }\r\n    bytes memory bytesStringTrimmed = new bytes(charCount);\r\n    for (j = 0; j < charCount; j++) {\r\n      bytesStringTrimmed[j] = bytesString[j];\r\n    }\r\n    return string(bytesStringTrimmed);\r\n  }\r\n\r\n  function inArray(string[] _array, string _value) internal pure returns(bool result) {\r\n    if (_array.length == 0 || bytes(_value).length == 0) {\r\n      return false;\r\n    }\r\n    result = false;\r\n    for (uint i = 0; i < _array.length; i++) {\r\n      if (stringsEqual(_array[i],_value)) {\r\n        result = true;\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n}\r\n\r\n/**\r\n * @title MultiOwnable\r\n * @dev The MultiOwnable contract has an owner address[], and provides basic authorization control\r\n */\r\ncontract MultiOwnable is Ownable {\r\n\r\n  struct Types {\r\n    mapping (address => bool) access;\r\n  }\r\n  mapping (uint => Types) private multiOwnersTypes;\r\n\r\n  event AddOwner(uint _type, address addr);\r\n  event AddOwner(uint[] types, address addr);\r\n  event RemoveOwner(uint _type, address addr);\r\n\r\n  modifier onlyMultiOwnersType(uint _type) {\r\n    require(multiOwnersTypes[_type].access[msg.sender] || msg.sender == owner, \"403\");\r\n    _;\r\n  }\r\n\r\n  function onlyMultiOwnerType(uint _type, address _sender) public view returns(bool) {\r\n    if (multiOwnersTypes[_type].access[_sender] || _sender == owner) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function addMultiOwnerType(uint _type, address _owner) public onlyOwner returns(bool) {\r\n    require(_owner != address(0));\r\n    multiOwnersTypes[_type].access[_owner] = true;\r\n    emit AddOwner(_type, _owner);\r\n    return true;\r\n  }\r\n  \r\n  function addMultiOwnerTypes(uint[] types, address _owner) public onlyOwner returns(bool) {\r\n    require(_owner != address(0));\r\n    require(types.length > 0);\r\n    for (uint i = 0; i < types.length; i++) {\r\n      multiOwnersTypes[types[i]].access[_owner] = true;\r\n    }\r\n    emit AddOwner(types, _owner);\r\n    return true;\r\n  }\r\n\r\n  function removeMultiOwnerType(uint types, address _owner) public onlyOwner returns(bool) {\r\n    require(_owner != address(0));\r\n    multiOwnersTypes[types].access[_owner] = false;\r\n    emit RemoveOwner(types, _owner);\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Convert eth,btc,eur,amb to usd and storage payment from currency\r\n */\r\ncontract ShipCoinCurrency is ICurrency, MultiOwnable, String {\r\n  using SafeMath for uint256;\r\n\r\n  uint private coinUSDRate = 12; // in wei 0.12$\r\n  uint private currVolPercent = 5; // 5% currency volatility\r\n\r\n  // Amount of wei raised SHPC\r\n  uint256 private coinRaisedInWei = 0;\r\n  // Amount of cents raised USD at the time of payment\r\n  uint private usdAbsRaisedInCents = 0;\r\n  uint private coinRaisedBonusInWei = 0;\r\n\r\n  struct CurrencyData {\r\n    bool active;\r\n    uint usd;\r\n    uint devision;\r\n    uint raised;\r\n    uint usdRaised;\r\n    uint counter;\r\n    uint lastUpdate;\r\n  }\r\n\r\n  mapping(bytes32 => CurrencyData) private currencyList;\r\n\r\n  bytes32[] private currencyTicker;\r\n\r\n  /* Events */\r\n  event ChangeCoinUSDRate(uint oldPrice, uint newPrice);\r\n  event ChangeCurrVolPercent(uint oldPercent, uint newPercent);\r\n  event ChangeCurrency();\r\n  event AddPay();\r\n  event EditPay();\r\n\r\n  /**\r\n   * @dev constructor 50328,655575,116\r\n   * @param _ethPrice in cents example 58710 = 587.10$\r\n   * @param _btcPrice in cents example 772301 = 7723.01$\r\n   * @param _eurPrice in cents example 117 = 1.17$\r\n   * @param _ambPrice in cents example 18 = 0.18$\r\n   */\r\n  constructor(uint _ethPrice, uint _btcPrice, uint _eurPrice, uint _ambPrice) public {\r\n\r\n    require(addUpdateCurrency(\"ETH\", _ethPrice, (1 ether)));\r\n    require(addUpdateCurrency(\"BTC\", _btcPrice, (10**8)));\r\n    require(addUpdateCurrency(\"USD\", 1, 1));\r\n    require(addUpdateCurrency(\"EUR\", _eurPrice, 100));\r\n    require(addUpdateCurrency(\"AMB\", _ambPrice, (1 ether)));\r\n\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the collected amount in dollars. Summarize at the rate when the payment was made.\r\n   */\r\n  function getUsdAbsRaisedInCents() external view returns(uint) {\r\n    return usdAbsRaisedInCents;\r\n  }\r\n\r\n  /**\r\n   * @dev Return the amount of SHPC sold as a bonus.\r\n   */\r\n  function getCoinRaisedBonusInWei() external view returns(uint) {\r\n    return coinRaisedBonusInWei;\r\n  }\r\n\r\n  /**\r\n   * @dev Add or Update currency\r\n   */\r\n  function addUpdateCurrency(string _ticker, uint _usd, uint _devision) public returns(bool) {\r\n    return addUpdateCurrency(_ticker, _usd, _devision, 0, 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Add or Update currency\r\n   */\r\n  function addUpdateCurrency(string _ticker, uint _usd) public returns(bool) {\r\n    return addUpdateCurrency(_ticker, _usd, 0, 0, 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Add or Update currency\r\n   * @param _ticker string\r\n   * @param _usd uint rate in cents\r\n   * @param _devision uint\r\n   * @param _raised uint\r\n   * @param _usdRaised uint raised in usd cents\r\n   */\r\n  function addUpdateCurrency(string _ticker, uint _usd, uint _devision, uint _raised, uint _usdRaised) public onlyMultiOwnersType(1) returns(bool) {\r\n    require(_usd > 0, \"1\");\r\n\r\n    bytes32 ticker = stringToBytes32(_ticker);\r\n\r\n    if (!currencyList[ticker].active) {\r\n      currencyTicker.push(ticker);\r\n    }\r\n    currencyList[ticker] = CurrencyData({\r\n      active : true,\r\n      usd : _usd,\r\n      devision : (_devision == 0) ? currencyList[ticker].devision : _devision,\r\n      raised : currencyList[ticker].raised > 0 ? currencyList[ticker].raised : _raised,\r\n      usdRaised: currencyList[ticker].usdRaised > 0 ? currencyList[ticker].usdRaised : _usdRaised,\r\n      counter: currencyList[ticker].counter > 0 ? currencyList[ticker].counter : 0,\r\n      lastUpdate: block.timestamp\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Set SHPC price in cents\r\n   */\r\n  function setCoinUSDRate(uint _value) public onlyOwner returns(bool) {\r\n    require(_value > 0);\r\n    uint oldCoinUSDRate = coinUSDRate;\r\n    coinUSDRate = _value;\r\n    emit ChangeCoinUSDRate(oldCoinUSDRate, coinUSDRate);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Percent deducted from the amount raised getTotalUsdRaisedInCents\r\n   */\r\n  function setCurrVolPercent(uint _value) public onlyOwner returns(bool) {\r\n    require(_value > 0 && _value <= 10);\r\n    uint oldCurrVolPercent = currVolPercent;\r\n    currVolPercent = _value;\r\n    emit ChangeCurrVolPercent(oldCurrVolPercent, currVolPercent);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of SHPC from USD\r\n   * @param usdCents amount of dollars in cents example 100$ = 10000\r\n   * @return SHPC in wei\r\n   */\r\n  function getTokenWeiFromUSD(uint usdCents) public view returns(uint) {\r\n    return usdCents.mul(1 ether).div(coinUSDRate); // (100.00$ * (10**18)) / 0.12$ = 833333333333333333333 SHPC wei = 833.33 SHPC\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of SHPC in wei\r\n   * @param ethWei eth в wei\r\n   * @return SHPC in wei\r\n   */\r\n  function getTokenFromETH(uint ethWei) public view returns(uint) {\r\n    return ethWei.mul(currencyList[\"ETH\"].usd).div(coinUSDRate); // (1 ETH * 587.10$) / 0.12$ =  4892500000000000000000 SHPC wei = 4892.50 SHPC\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the amount of USD from ETH\r\n   * @param ethWei ETH в wei\r\n   * @return USD in cents\r\n   */\r\n  function getUsdFromETH(uint ethWei) public view returns(uint) {\r\n    return ethWei.mul(currencyList[\"ETH\"].usd).div(1 ether);\r\n  }\r\n\r\n  /**\r\n   * @dev Add payment data to currency\r\n   * @param _ticker string\r\n   * @param value uint\r\n   * @param usdAmount uint in cents\r\n   * @param coinRaised uint in wei\r\n   * @param coinRaisedBonus uint in wei (optional field)\r\n   */\r\n  function addPay(string _ticker, uint value, uint usdAmount, uint coinRaised, uint coinRaisedBonus) public onlyMultiOwnersType(2) returns(bool) {\r\n    require(value > 0);\r\n    require(usdAmount > 0);\r\n    require(coinRaised > 0);\r\n\r\n    bytes32 ticker = stringToBytes32(_ticker);\r\n    assert(currencyList[ticker].active);\r\n\r\n    coinRaisedInWei += coinRaised;\r\n    coinRaisedBonusInWei += coinRaisedBonus;\r\n    usdAbsRaisedInCents += usdAmount;\r\n\r\n    currencyList[ticker].usdRaised += usdAmount;\r\n    currencyList[ticker].raised += value;\r\n    currencyList[ticker].counter++;\r\n\r\n    emit AddPay();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Chacnge currency data when change contributor payment\r\n   * @param ticker bytes32\r\n   * @param currencyValue uint\r\n   * @param currencyUsdRaised uint in cents\r\n   * @param _usdAbsRaisedInCents uint in cents\r\n   * @param _coinRaisedInWei uint in wei\r\n   * @param _coinRaisedBonusInWei uint in wei (optional field)\r\n   */\r\n  function editPay(\r\n    bytes32 ticker,\r\n    uint currencyValue,\r\n    uint currencyUsdRaised,\r\n    uint _usdAbsRaisedInCents,\r\n    uint _coinRaisedInWei,\r\n    uint _coinRaisedBonusInWei\r\n  )\r\n  public\r\n  onlyMultiOwnersType(3)\r\n  returns(bool)\r\n  {\r\n    require(currencyValue > 0);\r\n    require(currencyUsdRaised > 0);\r\n    require(_usdAbsRaisedInCents > 0);\r\n    require(_coinRaisedInWei > 0);\r\n    assert(currencyList[ticker].active);\r\n\r\n    coinRaisedInWei = _coinRaisedInWei;\r\n    coinRaisedBonusInWei = _coinRaisedBonusInWei;\r\n    usdAbsRaisedInCents = _usdAbsRaisedInCents;\r\n\r\n    currencyList[ticker].usdRaised = currencyUsdRaised;\r\n    currencyList[ticker].raised = currencyValue;\r\n\r\n\r\n    emit EditPay();\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Add bonus SHPC\r\n   */\r\n  function addPreSaleBonus(uint bonusToken) public onlyMultiOwnersType(4) returns(bool) {\r\n    coinRaisedInWei += bonusToken;\r\n    coinRaisedBonusInWei += bonusToken;\r\n    emit EditPay();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Change bonus SHPC\r\n   */\r\n  function editPreSaleBonus(uint beforeBonus, uint afterBonus) public onlyMultiOwnersType(5) returns(bool) {\r\n    coinRaisedInWei -= beforeBonus;\r\n    coinRaisedBonusInWei -= beforeBonus;\r\n\r\n    coinRaisedInWei += afterBonus;\r\n    coinRaisedBonusInWei += afterBonus;\r\n    emit EditPay();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the sum of investments with conversion to dollars at the current rate with a deduction of interest.\r\n   */\r\n  function getTotalUsdRaisedInCents() public view returns(uint) {\r\n    uint totalUsdAmount = 0;\r\n    if (currencyTicker.length > 0) {\r\n      for (uint i = 0; i < currencyTicker.length; i++) {\r\n        if (currencyList[currencyTicker[i]].raised > 0) {\r\n          totalUsdAmount += getUsdFromCurrency(currencyTicker[i], currencyList[currencyTicker[i]].raised);\r\n        }\r\n      }\r\n    }\r\n    return subPercent(totalUsdAmount, currVolPercent);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts to dollars\r\n   */\r\n  function getUsdFromCurrency(string ticker, uint value) public view returns(uint) {\r\n    return getUsdFromCurrency(stringToBytes32(ticker), value);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts to dollars\r\n   */\r\n  function getUsdFromCurrency(string ticker, uint value, uint usd) public view returns(uint) {\r\n    return getUsdFromCurrency(stringToBytes32(ticker), value, usd);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts to dollars\r\n   */\r\n  function getUsdFromCurrency(bytes32 ticker, uint value) public view returns(uint) {\r\n    return getUsdFromCurrency(ticker, value, 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Converts to dollars\r\n   */\r\n  function getUsdFromCurrency(bytes32 ticker, uint value, uint usd) public view returns(uint) {\r\n    if (currencyList[ticker].active && value > 0) {\r\n      return value.mul(usd > 0 ? usd : currencyList[ticker].usd).div(currencyList[ticker].devision);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns information about available currencies in json format\r\n   */\r\n  function getAllCurrencyTicker() public view returns(string) {\r\n    string memory _tickers = \"{\";\r\n    for (uint i = 0; i < currencyTicker.length; i++) {\r\n      _tickers = strConcat(_tickers, strConcat(\"\\\"\", bytes32ToString(currencyTicker[i]), \"\\\":\"), uint2str(currencyList[currencyTicker[i]].usd), (i+1 < currencyTicker.length) ? \",\" : \"}\");\r\n    }\r\n    return _tickers;\r\n  }\r\n\r\n  /**\r\n   * @dev Update currency rate.\r\n   */\r\n  function updateCurrency(string ticker, uint value) public onlyMultiOwnersType(6) returns(bool) {\r\n    bytes32 _ticker = stringToBytes32(ticker);\r\n    require(currencyList[_ticker].active);\r\n    require(value > 0);\r\n\r\n    currencyList[_ticker].usd = value;\r\n    currencyList[_ticker].lastUpdate = block.timestamp;\r\n    emit ChangeCurrency();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Check currency is available.\r\n   */\r\n  function checkTickerExists(string ticker) public view returns(bool) {\r\n    return currencyList[stringToBytes32(ticker)].active;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns currency info.\r\n   */\r\n  function getCurrencyList(string ticker)\r\n    public\r\n    view\r\n    returns(\r\n      bool active,\r\n      uint usd,\r\n      uint devision,\r\n      uint raised,\r\n      uint usdRaised,\r\n      uint usdRaisedExchangeRate,\r\n      uint counter,\r\n      uint lastUpdate\r\n    )\r\n  {\r\n    return getCurrencyList(stringToBytes32(ticker));\r\n  }\r\n\r\n  /**\r\n   * @dev Return curency info.\r\n   */\r\n  function getCurrencyList(bytes32 ticker)\r\n    public\r\n    view\r\n    returns(\r\n      bool active,\r\n      uint usd,\r\n      uint devision,\r\n      uint raised,\r\n      uint usdRaised,\r\n      uint usdRaisedExchangeRate,\r\n      uint counter,\r\n      uint lastUpdate\r\n    )\r\n  {\r\n    CurrencyData memory _obj = currencyList[ticker];\r\n    uint _usdRaisedExchangeRate = getUsdFromCurrency(ticker, _obj.raised);\r\n    return (\r\n      _obj.active,\r\n      _obj.usd,\r\n      _obj.devision,\r\n      _obj.raised,\r\n      _obj.usdRaised,\r\n      _usdRaisedExchangeRate,\r\n      _obj.counter,\r\n      _obj.lastUpdate\r\n    );\r\n  }\r\n\r\n  function getCurrencyRate(string _ticker) public view returns(uint) {\r\n    return currencyList[stringToBytes32(_ticker)].usd;\r\n  }\r\n\r\n  /**\r\n   * @dev Return all currency data in json.\r\n   */\r\n  function getCurrencyData() public view returns(string) {\r\n    string memory _array = \"{\";\r\n\r\n    if (currencyTicker.length > 0) {\r\n      for (uint i = 0; i < currencyTicker.length; i++) {\r\n        if (currencyList[currencyTicker[i]].active) {\r\n          _array = strConcat(_array, strConcat(\"\\\"\", bytes32ToString(currencyTicker[i]), \"\\\":\"), getJsonCurrencyData(currencyList[currencyTicker[i]]), (i+1 == currencyTicker.length) ? \"}\" : \",\");\r\n        }\r\n      }\r\n    } else {\r\n      return \"[]\";\r\n    }\r\n\r\n    return _array;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the number of SHPC sold\r\n   */\r\n  function getCoinRaisedInWei() public view returns(uint) {\r\n    return coinRaisedInWei;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns SHPC price in cents\r\n   */\r\n  function getCoinUSDRate() public view returns(uint) {\r\n    return coinUSDRate;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns percent.\r\n   */\r\n  function getCurrVolPercent() public view returns(uint) {\r\n    return currVolPercent;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns json info from currency\r\n   */\r\n  function getJsonCurrencyData(CurrencyData memory _obj) private pure returns (string) {\r\n    return strConcat(\r\n      strConcat(\"{\\\"usd\\\":\", uint2str(_obj.usd), \",\\\"devision\\\":\", uint2str(_obj.devision), \",\\\"raised\\\":\\\"\"),\r\n      strConcat(uint2str(_obj.raised), \"\\\",\\\"usdRaised\\\":\", uint2str(_obj.usdRaised), \",\\\"usdRaisedCurrency\\\":\", uint2str((_obj.raised.mul(_obj.usd).div(_obj.devision)))),\r\n      strConcat(\",\\\"counter\\\":\", uint2str(_obj.counter), \",\\\"lastUpdate\\\":\", uint2str(_obj.lastUpdate), \"}\")\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Calculate the percentage of the amount\r\n   * example: 100 - 5% = 95\r\n   */\r\n  function subPercent(uint a, uint b) private pure returns(uint) {\r\n    uint c = (a / 100) * b;\r\n    assert(c <= a);\r\n    return a - c;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setCoinUSDRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addMultiOwnerType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"usdCents\",\"type\":\"uint256\"}],\"name\":\"getTokenWeiFromUSD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethWei\",\"type\":\"uint256\"}],\"name\":\"getTokenFromETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrencyData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ethWei\",\"type\":\"uint256\"}],\"name\":\"getUsdFromETH\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCoinUSDRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ticker\",\"type\":\"bytes32\"}],\"name\":\"getCurrencyList\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"usd\",\"type\":\"uint256\"},{\"name\":\"devision\",\"type\":\"uint256\"},{\"name\":\"raised\",\"type\":\"uint256\"},{\"name\":\"usdRaised\",\"type\":\"uint256\"},{\"name\":\"usdRaisedExchangeRate\",\"type\":\"uint256\"},{\"name\":\"counter\",\"type\":\"uint256\"},{\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllCurrencyTicker\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"onlyMultiOwnerType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticker\",\"type\":\"string\"},{\"name\":\"_usd\",\"type\":\"uint256\"}],\"name\":\"addUpdateCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCoinRaisedBonusInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ticker\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getUsdFromCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"}],\"name\":\"checkTickerExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setCurrVolPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticker\",\"type\":\"string\"},{\"name\":\"_usd\",\"type\":\"uint256\"},{\"name\":\"_devision\",\"type\":\"uint256\"}],\"name\":\"addUpdateCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"usd\",\"type\":\"uint256\"}],\"name\":\"getUsdFromCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"}],\"name\":\"getCurrencyList\",\"outputs\":[{\"name\":\"active\",\"type\":\"bool\"},{\"name\":\"usd\",\"type\":\"uint256\"},{\"name\":\"devision\",\"type\":\"uint256\"},{\"name\":\"raised\",\"type\":\"uint256\"},{\"name\":\"usdRaised\",\"type\":\"uint256\"},{\"name\":\"usdRaisedExchangeRate\",\"type\":\"uint256\"},{\"name\":\"counter\",\"type\":\"uint256\"},{\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getUsdFromCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bonusToken\",\"type\":\"uint256\"}],\"name\":\"addPreSaleBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticker\",\"type\":\"bytes32\"},{\"name\":\"currencyValue\",\"type\":\"uint256\"},{\"name\":\"currencyUsdRaised\",\"type\":\"uint256\"},{\"name\":\"_usdAbsRaisedInCents\",\"type\":\"uint256\"},{\"name\":\"_coinRaisedInWei\",\"type\":\"uint256\"},{\"name\":\"_coinRaisedBonusInWei\",\"type\":\"uint256\"}],\"name\":\"editPay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_ticker\",\"type\":\"string\"}],\"name\":\"getCurrencyRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticker\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"name\":\"coinRaised\",\"type\":\"uint256\"},{\"name\":\"coinRaisedBonus\",\"type\":\"uint256\"}],\"name\":\"addPay\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUsdAbsRaisedInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beforeBonus\",\"type\":\"uint256\"},{\"name\":\"afterBonus\",\"type\":\"uint256\"}],\"name\":\"editPreSaleBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"types\",\"type\":\"uint256[]\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"addMultiOwnerTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"ticker\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"usd\",\"type\":\"uint256\"}],\"name\":\"getUsdFromCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalUsdRaisedInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"types\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeMultiOwnerType\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCoinRaisedInWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ticker\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ticker\",\"type\":\"string\"},{\"name\":\"_usd\",\"type\":\"uint256\"},{\"name\":\"_devision\",\"type\":\"uint256\"},{\"name\":\"_raised\",\"type\":\"uint256\"},{\"name\":\"_usdRaised\",\"type\":\"uint256\"}],\"name\":\"addUpdateCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrVolPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ethPrice\",\"type\":\"uint256\"},{\"name\":\"_btcPrice\",\"type\":\"uint256\"},{\"name\":\"_eurPrice\",\"type\":\"uint256\"},{\"name\":\"_ambPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"ChangeCoinUSDRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPercent\",\"type\":\"uint256\"}],\"name\":\"ChangeCurrVolPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ChangeCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AddPay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EditPay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"types\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_type\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RemoveOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ShipCoinCurrency","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000004d41000000000000000000000000000000000000000000000000000000000009afad00000000000000000000000000000000000000000000000000000000000000720000000000000000000000000000000000000000000000000000000000000012","Library":"","SwarmSource":"bzzr://2759014772d59d4ae35efdd09a46ef07c0ddd378a20d93ecc27cbd1836a73fc2"}]}