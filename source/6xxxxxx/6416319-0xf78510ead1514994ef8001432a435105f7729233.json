{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n/**\r\n* Math operations with safety checks\r\n*/\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        //assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c>=a && c>=b);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    /**\r\n      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n      * account.\r\n      */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n      * @dev Throws if called by any account other than the owner.\r\n      */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    /**\r\n    * @dev Fix for the ERC20 short address attack.\r\n    */    \r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length >= size + 4);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract BITCOINSLEEK is Ownable{\r\n    using SafeMath for uint;\r\n    string public name;     \r\n    string public symbol;\r\n    uint8 public decimals;  \r\n    uint private _totalSupply;\r\n    uint public basisPointsRate = 0;\r\n    uint public minimumFee = 0;\r\n    uint public maximumFee = 0;\r\n\r\n    \r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    \r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    /* notify about transfer to client*/\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n    \r\n    /* notify about approval to client*/\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n    \r\n    /* notify about basisPointsRate to client*/\r\n    event Params(\r\n        uint feeBasisPoints,\r\n        uint maximumFee,\r\n        uint minimumFee\r\n    );\r\n    \r\n    // Called when new token are issued\r\n    event Issue(\r\n        uint amount\r\n    );\r\n\r\n    // Called when tokens are redeemed\r\n    event Redeem(\r\n        uint amount\r\n    );\r\n    \r\n    /*\r\n        The contract can be initialized with a number of tokens\r\n        All the tokens are deposited to the owner address\r\n        @param _balance Initial supply of the contract\r\n        @param _name Token Name\r\n        @param _symbol Token symbol\r\n        @param _decimals Token decimals\r\n    */\r\n    constructor() public {\r\n        name = 'BITCOIN SLEEK'; // Set the name for display purposes\r\n        symbol = 'BTSL'; // Set the symbol for display purposes\r\n        decimals = 18; // Amount of decimals for display purposes\r\n        _totalSupply = 20000000 * 10**uint(decimals); // Update total supply\r\n        balances[msg.sender] = _totalSupply; // Give the creator all initial tokens\r\n    }\r\n    \r\n    /*\r\n        @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n   \r\n    /*\r\n    @dev Gets the balance of the specified address.\r\n    @param owner The address to query the balance of.\r\n    @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return balances[owner];\r\n    }\r\n    /*\r\n        @dev transfer token for a specified address\r\n        @param _to The address to transfer to.\r\n        @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256  _value) public onlyPayloadSize(2 * 32){\r\n        //Calculate Fees from basis point rate \r\n        uint fee = (_value.mul(basisPointsRate)).div(1000);\r\n        if (fee > maximumFee) {\r\n            fee = maximumFee;\r\n        }\r\n        if (fee < minimumFee) {\r\n            fee = minimumFee;\r\n        }\r\n        // Prevent transfer to 0x0 address.\r\n        require (_to != 0x0);\r\n        //check receiver is not owner\r\n        require(_to != address(0));\r\n        //Check transfer value is > 0;\r\n        require (_value > 0); \r\n        // Check if the sender has enough\r\n        require (balances[msg.sender] > _value);\r\n        // Check for overflows\r\n        require (balances[_to].add(_value) > balances[_to]);\r\n        //sendAmount to receiver after deducted fee\r\n        uint sendAmount = _value.sub(fee);\r\n        // Subtract from the sender\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        // Add the same to the recipient\r\n        balances[_to] = balances[_to].add(sendAmount); \r\n        //Add fee to owner Account\r\n        if (fee > 0) {\r\n            balances[owner] = balances[owner].add(fee);\r\n            emit Transfer(msg.sender, owner, fee);\r\n        }\r\n        // Notify anyone listening that this transfer took place\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    /*\r\n        @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n        @param _spender The address which will spend the funds.\r\n        @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\r\n        //Check approve value is > 0;\r\n        require (_value > 0);\r\n        //check _spender is not itself\r\n        require (_spender != msg.sender);\r\n        //Allowed token to _spender\r\n        allowed[msg.sender][_spender] = _value;\r\n        //Notify anyone listening that this Approval took place\r\n        emit Approval(msg.sender,_spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /*\r\n        @dev Transfer tokens from one address to another\r\n        @param _from address The address which you want to send tokens from\r\n        @param _to address The address which you want to transfer to\r\n        @param _value uint the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\r\n        //Calculate Fees from basis point rate \r\n        uint fee = (_value.mul(basisPointsRate)).div(1000);\r\n        if (fee > maximumFee) {\r\n                fee = maximumFee;\r\n        }\r\n        if (fee < minimumFee) {\r\n            fee = minimumFee;\r\n        }\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (_to != 0x0);\r\n        //check receiver is not owner\r\n        require(_to != address(0));\r\n        //Check transfer value is > 0;\r\n        require (_value > 0); \r\n        // Check if the sender has enough\r\n        require(_value < balances[_from]);\r\n        // Check for overflows\r\n        require (balances[_to].add(_value) > balances[_to]);\r\n        // Check allowance\r\n        require (_value <= allowed[_from][msg.sender]);\r\n        uint sendAmount = _value.sub(fee);\r\n        balances[_from] = balances[_from].sub(_value);// Subtract from the sender\r\n        balances[_to] = balances[_to].add(sendAmount); // Add the same to the recipient\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        if (fee > 0) {\r\n            balances[owner] = balances[owner].add(fee);\r\n            emit Transfer(_from, owner, fee);\r\n        }\r\n        emit Transfer(_from, _to, sendAmount);\r\n        return true;\r\n    }\r\n    \r\n    /*\r\n        @dev Function to check the amount of tokens than an owner allowed to a spender.\r\n        @param _owner address The address which owns the funds.\r\n        @param _spender address The address which will spend the funds.\r\n        @return A uint specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(address _from, address _spender) public view returns (uint remaining) {\r\n        return allowed[_from][_spender];\r\n    }\r\n    \r\n    /*\r\n        @dev Function to set the basis point rate .\r\n        @param newBasisPoints uint which is <= 9.\r\n    */\r\n    function setParams(uint newBasisPoints,uint newMaxFee,uint newMinFee) public onlyOwner {\r\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\r\n        require(newBasisPoints <= 9);\r\n        require(newMaxFee <= 100);\r\n        require(newMinFee <= 5);\r\n        basisPointsRate = newBasisPoints;\r\n        maximumFee = newMaxFee.mul(10**uint(decimals));\r\n        minimumFee = newMinFee.mul(10**uint(decimals));\r\n        emit Params(basisPointsRate, maximumFee, minimumFee);\r\n    }\r\n    /*\r\n    Issue a new amount of tokens\r\n    these tokens are deposited into the owner address\r\n    @param _amount Number of tokens to be issued\r\n    */\r\n    function increaseSupply(uint amount) public onlyOwner {\r\n        require(amount <= 10000000);\r\n        amount = amount.mul(10**uint(decimals));\r\n        require(_totalSupply.add(amount) > _totalSupply);\r\n        require(balances[owner].add(amount) > balances[owner]);\r\n        balances[owner] = balances[owner].add(amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        emit Issue(amount);\r\n    }\r\n    /*\r\n    Redeem tokens.\r\n    These tokens are withdrawn from the owner address\r\n    if the balance must be enough to cover the redeem\r\n    or the call will fail.\r\n    @param _amount Number of tokens to be issued\r\n    */\r\n    function decreaseSupply(uint amount) public onlyOwner {\r\n        require(amount <= 10000000);\r\n        amount = amount.mul(10**uint(decimals));\r\n        require(_totalSupply >= amount);\r\n        require(balances[owner] >= amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        balances[owner] = balances[owner].sub(amount);\r\n        emit Redeem(amount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"},{\"name\":\"newMinFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maximumFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"minimumFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"}]","ContractName":"BITCOINSLEEK","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8b68438358303e46cc67140ea8d1098a11f2e5781feee3b5e6657ce78842af20"}]}