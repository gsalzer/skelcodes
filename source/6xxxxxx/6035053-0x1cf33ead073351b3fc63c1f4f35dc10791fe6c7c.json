{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BGAudit is Ownable {\r\n\r\n    using SafeMath for uint;\r\n\r\n    event AddedAuditor(address indexed auditor);\r\n    event BannedAuditor(address indexed auditor);\r\n    event AllowedAuditor(address indexed auditor);\r\n\r\n    event CreatedAudit(uint indexed id);\r\n    event ReviewingAudit(uint indexed id);\r\n    event AuditorRewarded(uint indexed id, address indexed auditor, uint indexed reward);\r\n\r\n    event AuditorStaked(uint indexed id, address indexed auditor, uint indexed amount);\r\n    event WithdrawedStake(uint indexed id, address indexed auditor, uint indexed amount);\r\n    event SlashedStake(uint indexed id, address indexed auditor);\r\n\r\n    enum AuditStatus { New, InProgress, InReview, Completed }\r\n\r\n    struct Auditor {\r\n        bool banned;\r\n        address addr;\r\n        uint totalEarned;\r\n        uint completedAudits;\r\n        uint[] stakedAudits; // array of audit IDs they've staked\r\n        mapping(uint => bool) stakedInAudit; // key is AuditID; useful so we don't need to loop through the audits array above\r\n        mapping(uint => bool) canWithdrawStake; // Audit ID => can withdraw stake or not\r\n    }\r\n\r\n    struct Audit {\r\n        AuditStatus status;\r\n        address owner;\r\n        uint id;\r\n        uint totalReward; // total reward shared b/w all auditors\r\n        uint remainingReward; // keep track of how much reward is left\r\n        uint stake; // required stake for each auditor in wei\r\n        uint endTime; // scheduled end time for the audit\r\n        uint maxAuditors; // max auditors allowed for this Audit\r\n        address[] participants; // array of auditor that have staked\r\n    }\r\n\r\n    //=== Storage\r\n    uint public stakePeriod = 90 days; // number of days to wait before stake can be withdrawn\r\n    uint public maxAuditDuration = 365 days; // max amount of time for a security audit\r\n    Audit[] public audits;\r\n    mapping(address => Auditor) public auditors;\r\n\r\n    //=== Owner related\r\n    function transfer(address _to, uint _amountInWei) external onlyOwner {\r\n        require(address(this).balance > _amountInWei);\r\n        _to.transfer(_amountInWei);\r\n    }\r\n\r\n    function setStakePeriod(uint _days) external onlyOwner {\r\n        stakePeriod = _days * 1 days;\r\n    }\r\n\r\n    function setMaxAuditDuration(uint _days) external onlyOwner {\r\n        maxAuditDuration = _days * 1 days;\r\n    }\r\n\r\n\r\n    //=== Auditors\r\n    function addAuditor(address _auditor) external onlyOwner {\r\n        require(auditors[_auditor].addr == address(0)); // Only add if they're not already added\r\n\r\n        auditors[_auditor].banned = false;\r\n        auditors[_auditor].addr = _auditor;\r\n        auditors[_auditor].completedAudits = 0;\r\n        auditors[_auditor].totalEarned = 0;\r\n        emit AddedAuditor(_auditor);\r\n    }\r\n\r\n    function banAuditor(address _auditor) external onlyOwner {\r\n        require(auditors[_auditor].addr != address(0));\r\n        auditors[_auditor].banned = true;\r\n        emit BannedAuditor(_auditor);\r\n    }\r\n\r\n    function allowAuditor(address _auditor) external onlyOwner {\r\n        require(auditors[_auditor].addr != address(0));\r\n        auditors[_auditor].banned = false;\r\n        emit AllowedAuditor(_auditor);\r\n    }\r\n\r\n\r\n    //=== Audits and Rewards\r\n    function createAudit(uint _stake, uint _endTimeInDays, uint _maxAuditors) external payable onlyOwner {\r\n        uint endTime = _endTimeInDays * 1 days;\r\n        require(endTime < maxAuditDuration);\r\n        require(block.timestamp + endTime * 1 days > block.timestamp);\r\n        require(msg.value > 0 && _maxAuditors > 0 && _stake > 0);\r\n\r\n        Audit memory audit;\r\n        audit.status = AuditStatus.New;\r\n        audit.owner = msg.sender;\r\n        audit.id = audits.length;\r\n        audit.totalReward = msg.value;\r\n        audit.remainingReward = audit.totalReward;\r\n        audit.stake = _stake;\r\n        audit.endTime = block.timestamp + endTime;\r\n        audit.maxAuditors = _maxAuditors;\r\n\r\n        audits.push(audit); // push into storage\r\n        emit CreatedAudit(audit.id);\r\n    }\r\n\r\n    function reviewAudit(uint _id) external onlyOwner {\r\n        require(audits[_id].status == AuditStatus.InProgress);\r\n        require(block.timestamp >= audits[_id].endTime);\r\n        audits[_id].endTime = block.timestamp; // override the endTime to when it actually ended\r\n        audits[_id].status = AuditStatus.InReview;\r\n        emit ReviewingAudit(_id);\r\n    }\r\n\r\n    function rewardAuditor(uint _id, address _auditor, uint _reward) external onlyOwner {\r\n\r\n        audits[_id].remainingReward.sub(_reward);\r\n        audits[_id].status = AuditStatus.Completed;\r\n\r\n        auditors[_auditor].totalEarned.add(_reward);\r\n        auditors[_auditor].completedAudits.add(1);\r\n        auditors[_auditor].canWithdrawStake[_id] = true; // allow them to withdraw their stake after stakePeriod\r\n        _auditor.transfer(_reward);\r\n        emit AuditorRewarded(_id, _auditor, _reward);\r\n    }\r\n\r\n    function slashStake(uint _id, address _auditor) external onlyOwner {\r\n        require(auditors[_auditor].addr != address(0));\r\n        require(auditors[_auditor].stakedInAudit[_id]); // participated in audit\r\n        auditors[_auditor].canWithdrawStake[_id] = false;\r\n        emit SlashedStake(_id, _auditor);\r\n    }\r\n\r\n    //=== User Actions\r\n    function stake(uint _id) public payable {\r\n        // Check conditions of the Audit\r\n        require(msg.value == audits[_id].stake);\r\n        require(block.timestamp < audits[_id].endTime);\r\n        require(audits[_id].participants.length < audits[_id].maxAuditors);\r\n        require(audits[_id].status == AuditStatus.New || audits[_id].status == AuditStatus.InProgress);\r\n\r\n        // Check conditions of the Auditor\r\n        require(auditors[msg.sender].addr == msg.sender && !auditors[msg.sender].banned); // auditor is authorized\r\n        require(!auditors[msg.sender].stakedInAudit[_id]); //check if auditor has staked for this audit already\r\n\r\n        // Update audit's states\r\n        audits[_id].status = AuditStatus.InProgress;\r\n        audits[_id].participants.push(msg.sender);\r\n\r\n        // Update auditor's states\r\n        auditors[msg.sender].stakedInAudit[_id] = true;\r\n        auditors[msg.sender].stakedAudits.push(_id);\r\n        emit AuditorStaked(_id, msg.sender, msg.value);\r\n    }\r\n\r\n    function withdrawStake(uint _id) public {\r\n        require(audits[_id].status == AuditStatus.Completed);\r\n        require(auditors[msg.sender].canWithdrawStake[_id]);\r\n        require(block.timestamp >= audits[_id].endTime + stakePeriod);\r\n\r\n        auditors[msg.sender].canWithdrawStake[_id] = false; //prevent replay attack\r\n        address(msg.sender).transfer(audits[_id].stake); // do this last to prevent re-entrancy\r\n        emit WithdrawedStake(_id, msg.sender, audits[_id].stake);\r\n    }\r\n\r\n    //=== Getters\r\n    function auditorHasStaked(uint _id, address _auditor) public view returns(bool) {\r\n        return auditors[_auditor].stakedInAudit[_id];\r\n    }\r\n\r\n    function auditorCanWithdrawStake(uint _id, address _auditor) public view returns(bool) {\r\n        if(auditors[_auditor].stakedInAudit[_id] && auditors[_auditor].canWithdrawStake[_id]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // return a list of ids that _auditor has staked in\r\n    function getStakedAudits(address _auditor) public view returns(uint[]) {\r\n        return auditors[_auditor].stakedAudits;\r\n    }\r\n\r\n    // return a list of auditors that participated in this audit\r\n    function getAuditors(uint _id) public view returns(address[]) {\r\n        return audits[_id].participants;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"reviewAudit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setStakePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_auditor\",\"type\":\"address\"}],\"name\":\"auditorHasStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"auditors\",\"outputs\":[{\"name\":\"banned\",\"type\":\"bool\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"totalEarned\",\"type\":\"uint256\"},{\"name\":\"completedAudits\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auditor\",\"type\":\"address\"}],\"name\":\"allowAuditor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setMaxAuditDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_auditor\",\"type\":\"address\"}],\"name\":\"auditorCanWithdrawStake\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_auditor\",\"type\":\"address\"}],\"name\":\"getStakedAudits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auditor\",\"type\":\"address\"}],\"name\":\"banAuditor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAuditDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amountInWei\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"audits\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"totalReward\",\"type\":\"uint256\"},{\"name\":\"remainingReward\",\"type\":\"uint256\"},{\"name\":\"stake\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"maxAuditors\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_auditor\",\"type\":\"address\"},{\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"rewardAuditor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_auditor\",\"type\":\"address\"}],\"name\":\"slashStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getAuditors\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auditor\",\"type\":\"address\"}],\"name\":\"addAuditor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stake\",\"type\":\"uint256\"},{\"name\":\"_endTimeInDays\",\"type\":\"uint256\"},{\"name\":\"_maxAuditors\",\"type\":\"uint256\"}],\"name\":\"createAudit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"AddedAuditor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"BannedAuditor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"AllowedAuditor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CreatedAudit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ReviewingAudit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"AuditorRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuditorStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"auditor\",\"type\":\"address\"}],\"name\":\"SlashedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BGAudit","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://af5e601257a0c8d54f6463b722163690405e3cfcfe5c1fcd228f7cfb97cd6798"}]}