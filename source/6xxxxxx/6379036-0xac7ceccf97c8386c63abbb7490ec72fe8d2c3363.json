{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract BasicAccountInfo {\r\n    using SafeMath for uint;\r\n\r\n    address constant public creatorAddress = 0xcDee178ed5B1968549810A237767ec388a3f83ba;\r\n    address constant public ecologyAddress = 0xe87C12E6971AAf04DB471e5f93629C8B6F31b8C2;\r\n    address constant public investorAddress = 0x660363e67485D2B51C071f42421b3DD134D3A835;\r\n    address constant public partnerAddress = 0xabcf257c90dfE5E3b5Fcd777797213F36F9aB25e;\r\n\r\n    struct BasicAccount {\r\n        uint256 initialBalance;\r\n        uint256 frozenBalance;\r\n        uint256 availableBalance;\r\n    }\r\n\r\n    mapping (address => BasicAccount) public accountInfoMap;\r\n\r\n    uint8 private frozenRatio = 60;\r\n    uint8 private frozenRatioUnit = 100;\r\n\r\n    address public owner;   //contract create by owner\r\n\r\n    function BasicAccountInfo(uint8 _decimal) public {\r\n        owner = msg.sender;\r\n\r\n        initialCreatorAccount(_decimal);\r\n        initialEcologyAccount(_decimal);\r\n        initialInvestorAccount(_decimal);\r\n        initialPartnerAccount(_decimal);\r\n    }\r\n\r\n    function initialCreatorAccount(uint8 _decimal) private {\r\n        uint256 creatorInitialBalance = 37500000 * (10**(uint256(_decimal)));\r\n        uint256 creatorFrozenBalance = creatorInitialBalance * uint256(frozenRatio) / uint256(frozenRatioUnit);\r\n        uint256 creatorAvailableBalance = creatorInitialBalance - creatorFrozenBalance;\r\n\r\n        accountInfoMap[creatorAddress] = BasicAccount(creatorInitialBalance, creatorFrozenBalance, creatorAvailableBalance);\r\n    }\r\n\r\n    function initialEcologyAccount(uint8 _decimal) private {\r\n        uint256 ecologyInitialBalance = 25000000 * (10**(uint256(_decimal)));\r\n        uint256 ecologyFrozenBalance = ecologyInitialBalance * uint256(frozenRatio) / uint256(frozenRatioUnit);\r\n        uint256 ecologyAvailableBalance = ecologyInitialBalance - ecologyFrozenBalance;\r\n\r\n        accountInfoMap[ecologyAddress] = BasicAccount(ecologyInitialBalance, ecologyFrozenBalance, ecologyAvailableBalance);\r\n    }\r\n\r\n    function initialInvestorAccount(uint8 _decimal) private {\r\n        uint256 investorInitialBalance = 37500000 * (10**(uint256(_decimal)));\r\n        uint256 investorFrozenBalance = investorInitialBalance * uint256(frozenRatio) / uint256(frozenRatioUnit);\r\n        uint256 investorAvailableBalance = investorInitialBalance - investorFrozenBalance;\r\n\r\n        accountInfoMap[investorAddress] = BasicAccount(investorInitialBalance, investorFrozenBalance, investorAvailableBalance);\r\n    }\r\n\r\n    function initialPartnerAccount(uint8 _decimal) private {\r\n        uint256 partnerInitialBalance = 25000000 * (10**(uint256(_decimal)));\r\n        uint256 partnerFrozenBalance = partnerInitialBalance * uint256(frozenRatio) / uint256(frozenRatioUnit);\r\n        uint256 partnerAvailableBalance = partnerInitialBalance - partnerFrozenBalance;\r\n\r\n        accountInfoMap[partnerAddress] = BasicAccount(partnerInitialBalance, partnerFrozenBalance, partnerAvailableBalance);\r\n    }\r\n\r\n    function getTotalFrozenBalance() public view returns (uint256 totalFrozenBalance) {\r\n        return accountInfoMap[creatorAddress].frozenBalance + accountInfoMap[ecologyAddress].frozenBalance +\r\n                        accountInfoMap[investorAddress].frozenBalance + accountInfoMap[partnerAddress].frozenBalance;\r\n    }\r\n\r\n    function getInitialBalanceByAddress(address _address) public view returns (uint256 initialBalance) {\r\n        BasicAccount basicAccount = accountInfoMap[_address];\r\n        return basicAccount.initialBalance;\r\n    }\r\n\r\n    function getAvailableBalanceByAddress(address _address) public view returns (uint256 availableBalance) {\r\n        BasicAccount basicAccount = accountInfoMap[_address];\r\n        return basicAccount.availableBalance;\r\n    }\r\n\r\n    function getFrozenBalanceByAddress(address _address) public view returns (uint256 frozenBalance) {\r\n        BasicAccount basicAccount = accountInfoMap[_address];\r\n        return basicAccount.frozenBalance;\r\n    }\r\n\r\n    function releaseFrozenBalance() public {\r\n        require(owner == msg.sender);\r\n\r\n        accountInfoMap[creatorAddress].availableBalance = accountInfoMap[creatorAddress].availableBalance.add(accountInfoMap[creatorAddress].frozenBalance);\r\n        accountInfoMap[ecologyAddress].availableBalance = accountInfoMap[ecologyAddress].availableBalance.add(accountInfoMap[ecologyAddress].frozenBalance);\r\n        accountInfoMap[investorAddress].availableBalance = accountInfoMap[investorAddress].availableBalance.add(accountInfoMap[investorAddress].frozenBalance);\r\n        accountInfoMap[partnerAddress].availableBalance = accountInfoMap[partnerAddress].availableBalance.add(accountInfoMap[partnerAddress].frozenBalance);\r\n\r\n        accountInfoMap[creatorAddress].frozenBalance = 0;\r\n        accountInfoMap[ecologyAddress].frozenBalance = 0;\r\n        accountInfoMap[investorAddress].frozenBalance = 0;\r\n        accountInfoMap[partnerAddress].frozenBalance = 0;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract ERC20 is ERC20Interface {\r\n    using SafeMath for uint;\r\n\r\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\r\n    mapping (address => uint256) private balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n    uint256 public totalAvailable;\r\n\r\n    bool public transfersEnabled;\r\n    BasicAccountInfo private basicAccountInfo;\r\n    address public owner;   //contract create by owner\r\n\r\n    bool public released;\r\n    uint256 public frozenTime;  //second\r\n    uint256 public releaseTime;  //second\r\n    uint256 constant private frozenPeriod = 100;  //days\r\n    \r\n    event Release(address indexed _owner);\r\n\r\n    function ERC20(uint8 decimals) public {\r\n        totalSupply = 250000000 * (10**(uint256(decimals)));\r\n        transfersEnabled = true;\r\n        released = false;\r\n\r\n        owner = msg.sender;\r\n        basicAccountInfo = new BasicAccountInfo(decimals);\r\n\r\n        InitialBasicBalance();\r\n        initialFrozenTime();\r\n    }\r\n\r\n    function InitialBasicBalance() private {\r\n        totalAvailable = totalSupply - basicAccountInfo.getTotalFrozenBalance();\r\n        balances[owner] = totalSupply.div(2);\r\n        \r\n        balances[basicAccountInfo.creatorAddress()] = basicAccountInfo.getAvailableBalanceByAddress(basicAccountInfo.creatorAddress());\r\n        balances[basicAccountInfo.ecologyAddress()] = basicAccountInfo.getAvailableBalanceByAddress(basicAccountInfo.ecologyAddress());\r\n        balances[basicAccountInfo.investorAddress()] =basicAccountInfo.getAvailableBalanceByAddress(basicAccountInfo.investorAddress());\r\n        balances[basicAccountInfo.partnerAddress()] = basicAccountInfo.getAvailableBalanceByAddress(basicAccountInfo.partnerAddress());\r\n    }\r\n\r\n    function releaseBasicAccount() private {\r\n        balances[basicAccountInfo.creatorAddress()] += basicAccountInfo.getFrozenBalanceByAddress(basicAccountInfo.creatorAddress());\r\n        balances[basicAccountInfo.ecologyAddress()] += basicAccountInfo.getFrozenBalanceByAddress(basicAccountInfo.ecologyAddress());\r\n        balances[basicAccountInfo.investorAddress()] +=basicAccountInfo.getFrozenBalanceByAddress(basicAccountInfo.investorAddress());\r\n        balances[basicAccountInfo.partnerAddress()] += basicAccountInfo.getFrozenBalanceByAddress(basicAccountInfo.partnerAddress());\r\n\r\n        totalAvailable += basicAccountInfo.getTotalFrozenBalance();\r\n    }\r\n\r\n    function releaseToken() public returns (bool) {\r\n        require(owner == msg.sender);\r\n\r\n        if(released){\r\n            return false;\r\n        }\r\n\r\n        if(block.timestamp > releaseTime) {\r\n            releaseBasicAccount();\r\n            basicAccountInfo.releaseFrozenBalance();\r\n            released = true;\r\n            emit Release(owner);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function getFrozenBalanceByAddress(address _address) public view returns (uint256 frozenBalance) {\r\n        return basicAccountInfo.getFrozenBalanceByAddress(_address);\r\n    }\r\n\r\n    function getInitialBalanceByAddress(address _address) public view returns (uint256 initialBalance) {\r\n        return basicAccountInfo.getInitialBalanceByAddress(_address);\r\n    }\r\n\r\n    function getTotalFrozenBalance() public view returns (uint256 totalFrozenBalance) {\r\n        return basicAccountInfo.getTotalFrozenBalance();\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(transfersEnabled);\r\n\r\n        require(_to != 0x0);\r\n        require(balances[msg.sender] >= _value);\r\n        require((balances[_to] + _value )> balances[_to]);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(transfersEnabled);\r\n        require(_from != 0x0);\r\n        require(_to != 0x0);\r\n\r\n        uint256 allowance = allowed[_from][msg.sender];\r\n        require(balances[_from] >= _value && allowance >= _value);\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n\r\n        if (allowance < MAX_UINT256) {\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        }\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function enableTransfers(bool _transfersEnabled) {\r\n        require(owner == msg.sender);\r\n        transfersEnabled = _transfersEnabled;\r\n    }\r\n\r\n    function initialFrozenTime() private {\r\n        frozenTime = block.timestamp;\r\n        uint256 secondsPerDay = 3600 * 24;\r\n        releaseTime = frozenPeriod * secondsPerDay  + frozenTime;\r\n    }\r\n}\r\n\r\ncontract BiTianToken is ERC20 {\r\n    string public name = \"Bitian Token\";\r\n    string public symbol = \"BTT\";\r\n    string public version = '1.0.0';\r\n    uint8 public decimals = 18;\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     */\r\n    function BiTianToken() ERC20(decimals) {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getFrozenBalanceByAddress\",\"outputs\":[{\"name\":\"frozenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalFrozenBalance\",\"outputs\":[{\"name\":\"totalFrozenBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozenTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getInitialBalanceByAddress\",\"outputs\":[{\"name\":\"initialBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transfersEnabled\",\"type\":\"bool\"}],\"name\":\"enableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"BiTianToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4228874dc224da8dce75fd5c93a85658282ce000a079709b31a90b3eaa625d2e"}]}