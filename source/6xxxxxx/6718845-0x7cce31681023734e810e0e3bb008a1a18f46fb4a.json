{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;  \r\n\r\n\r\nlibrary SafeMath {\r\n\tfunction mul(uint a, uint b) internal pure returns(uint) {  \r\n\t\tuint c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint a, uint b) internal pure returns(uint) { \r\n\t\tuint c = a / b;\r\n\t\treturn c; \r\n\t}\r\n\r\n\tfunction sub(uint a, uint b) internal pure returns(uint) {  \r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint a, uint b) internal pure returns(uint) {  \r\n\t\tuint c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\tfunction max64(uint64 a, uint64 b) internal pure  returns(uint64) { \r\n\t\treturn a >= b ? a : b;\r\n\t}\r\n\r\n\tfunction min64(uint64 a, uint64 b) internal pure  returns(uint64) { \r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\r\n\tfunction max256(uint256 a, uint256 b) internal pure returns(uint256) { \r\n\t\treturn a >= b ? a : b;\r\n\t}\r\n\r\n\tfunction min256(uint256 a, uint256 b) internal pure returns(uint256) {  \r\n\t\treturn a < b ? a : b;\r\n\t}\r\n \r\n}\r\n\r\ncontract ERC20Basic {\r\n\tuint public totalSupply;\r\n\tfunction balanceOf(address who) public constant returns(uint);  \r\n\tfunction transfer(address to, uint value) public;  \r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\tfunction allowance(address owner, address spender) public constant returns(uint);  \r\n\tfunction transferFrom(address from, address to, uint value) public;  \r\n\tfunction approve(address spender, uint value) public;  \r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A contract can unlock token at designated time.\r\n */\r\ncontract VT201811001  {\r\n  using SafeMath for uint256;\r\n  event Released(uint256 amounts);\r\nevent InvalidCaller(address caller);\r\n\r\n   address public owner;\r\n\r\n  address[] private _beneficiary ;\r\n  uint256 private _locktime;  \r\n  uint256 private _unlocktime;  \r\n  uint256[] private _amount;\r\n\r\n  constructor() public\r\n  {\r\n    owner = msg.sender;\r\n     _unlocktime =0;\r\n  }\r\n  \r\n  \r\n   /*\r\n     * MODIFIERS\r\n     */\r\n\r\n   modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return the beneficiary of the tokens.\r\n   */\r\n  function beneficiary() public view returns(address[]) {\r\n    return _beneficiary;\r\n  }\r\n\r\n  /**\r\n   * @return the unlocktime time of the token vesting.\r\n   */\r\n  function unlocktime() public view returns(uint256) {\r\n    return _unlocktime;\r\n  }\r\n    /**\r\n   * @return the locktime time of the token vesting.\r\n   */\r\n  function locktime() public view returns(uint256) {\r\n    return _locktime;\r\n  }\r\n  \r\n   /**\r\n   * @return the amount of the tokens.\r\n   */\r\n  function amount() public view returns(uint256[]) {\r\n    return _amount;\r\n  }\r\n  /**\r\n   * @notice Setting lock time.\r\n   */\r\n    function setLockTime(uint256  locktimeParam,uint256  unlocktimeParam) public onlyOwner{\r\n\t         _unlocktime = unlocktimeParam;\r\n\t        _locktime = locktimeParam;\r\n    } \r\n /**\r\n   * @notice Setting UserInfo.\r\n   */\r\n    function setUserInfo(address[] beneficiaryParam,uint256[]  amountParam) public onlyOwner{\r\n        if( block.timestamp <=_locktime){\r\n             _beneficiary = beneficiaryParam;\r\n\t         _amount = amountParam;\r\n        }\r\n    } \r\n \r\n\r\n  /**\r\n   * @notice Transfers vested tokens to beneficiary.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  function release(ERC20 token) public {\r\n       for(uint i = 0; i < _beneficiary.length; i++) {\r\n            if(block.timestamp >= _unlocktime ){\r\n                   token.transfer(_beneficiary[i], _amount[i].mul(10**18));\r\n                    emit Released( _amount[i]);\r\n                    _amount[i]=0;\r\n            }\r\n       }\r\n  } \r\n  \r\n  \r\n  \r\n\r\n  /**\r\n   * @notice Release the unexpected token.\r\n   * @param token ERC20 token which is being vested\r\n   */\r\n  \r\n    function checkRelease(ERC20 token) public {\r\n       uint _unRelease = 0;\r\n       \r\n        for(uint i = 0; i < _amount.length; i++) {\r\n            _unRelease = _unRelease.add(_amount[i]); \r\n        }\r\n        if(_unRelease==0 && block.timestamp >= _unlocktime ){\r\n             token.transfer(owner,token.balanceOf(this));\r\n        }\r\n        \r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"checkRelease\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unlocktime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locktime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"locktimeParam\",\"type\":\"uint256\"},{\"name\":\"unlocktimeParam\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaryParam\",\"type\":\"address[]\"},{\"name\":\"amountParam\",\"type\":\"uint256[]\"}],\"name\":\"setUserInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amounts\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"InvalidCaller\",\"type\":\"event\"}]","ContractName":"VT201811001","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://945b09ea7432e568c524ac4a17b545a87d8e6883550e1e4bec35ab8ea9ebbfc9"}]}