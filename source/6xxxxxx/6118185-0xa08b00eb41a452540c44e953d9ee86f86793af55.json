{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ninterface AccountRegistryInterface {\r\n  function accountIdForAddress(address _address) public view returns (uint256);\r\n  function addressBelongsToAccount(address _address) public view returns (bool);\r\n  function createNewAccount(address _newUser) external;\r\n  function addAddressToAccount(\r\n    address _newAddress,\r\n    address _sender\r\n    ) external;\r\n  function removeAddressFromAccount(address _addressToRemove) external;\r\n}\r\n\r\n/**\r\n * @title Bloom account registry\r\n * @notice Account Registry implements the Bloom ID data structures \r\n * and the low-level account administration functions.\r\n * The account administration functions are not publicly accessible.\r\n * Account Registry Logic implements the public functions which access the functions in Account Registry.\r\n */\r\ncontract AccountRegistry is Ownable, AccountRegistryInterface{\r\n\r\n  address public accountRegistryLogic;\r\n\r\n  /**\r\n   * @notice The AccountRegistry constructor configures the account registry logic implementation\r\n   *  and creates an account for the user who deployed the contract.\r\n   * @dev The owner is also set as the original registryAdmin, who has the privilege to\r\n   *  create accounts outside of the normal invitation flow.\r\n   * @param _accountRegistryLogic Address of deployed Account Registry Logic implementation\r\n   */\r\n  constructor(\r\n    address _accountRegistryLogic\r\n    ) public {\r\n    accountRegistryLogic = _accountRegistryLogic;\r\n  }\r\n\r\n  event AccountRegistryLogicChanged(address oldRegistryLogic, address newRegistryLogic);\r\n\r\n  /**\r\n   * @dev Zero address not allowed\r\n   */\r\n  modifier nonZero(address _address) {\r\n    require(_address != 0);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAccountRegistryLogic() {\r\n    require(msg.sender == accountRegistryLogic);\r\n    _;\r\n  }\r\n\r\n  // Counter to generate unique account Ids\r\n  uint256 numAccounts;\r\n  mapping(address => uint256) public accountByAddress;\r\n\r\n  /**\r\n   * @notice Change the address of the registry logic which has exclusive write control over this contract\r\n   * @dev Restricted to AccountRegistry owner and new admin address cannot be 0x0\r\n   * @param _newRegistryLogic Address of new registry logic implementation\r\n   */\r\n  function setRegistryLogic(address _newRegistryLogic) public onlyOwner nonZero(_newRegistryLogic) {\r\n    address _oldRegistryLogic = accountRegistryLogic;\r\n    accountRegistryLogic = _newRegistryLogic;\r\n    emit AccountRegistryLogicChanged(_oldRegistryLogic, accountRegistryLogic);\r\n  }\r\n\r\n  /**\r\n   * @notice Retreive account ID associated with a user's address\r\n   * @param _address Address to look up\r\n   * @return account id as uint256 if exists, otherwise reverts\r\n   */\r\n  function accountIdForAddress(address _address) public view returns (uint256) {\r\n    require(addressBelongsToAccount(_address));\r\n    return accountByAddress[_address];\r\n  }\r\n\r\n  /**\r\n   * @notice Check if an address is associated with any user account\r\n   * @dev Check if address is associated with any user by cross validating\r\n   *  the accountByAddress with addressByAccount \r\n   * @param _address Address to check\r\n   * @return true if address has been assigned to user. otherwise reverts\r\n   */\r\n  function addressBelongsToAccount(address _address) public view returns (bool) {\r\n    return accountByAddress[_address] > 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Create an account for a user and emit an event\r\n   * @param _newUser Address of the new user\r\n   */\r\n  function createNewAccount(address _newUser) external onlyAccountRegistryLogic nonZero(_newUser) {\r\n    require(!addressBelongsToAccount(_newUser));\r\n    numAccounts++;\r\n    accountByAddress[_newUser] = numAccounts;\r\n  }\r\n\r\n  /**\r\n   * @notice Add an address to an existing id \r\n   * @param _newAddress Address to add to account\r\n   * @param _sender User requesting this action\r\n   */\r\n  function addAddressToAccount(\r\n    address _newAddress,\r\n    address _sender\r\n    ) external onlyAccountRegistryLogic nonZero(_newAddress) {\r\n\r\n    // check if address belongs to someone else\r\n    require(!addressBelongsToAccount(_newAddress));\r\n\r\n    accountByAddress[_newAddress] = accountIdForAddress(_sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Remove an address from an id\r\n   * @param _addressToRemove Address to remove from account\r\n   */\r\n  function removeAddressFromAccount(\r\n    address _addressToRemove\r\n    ) external onlyAccountRegistryLogic {\r\n    delete accountByAddress[_addressToRemove];\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addressBelongsToAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRegistryLogic\",\"type\":\"address\"}],\"name\":\"setRegistryLogic\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"accountIdForAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"addAddressToAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUser\",\"type\":\"address\"}],\"name\":\"createNewAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accountRegistryLogic\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addressToRemove\",\"type\":\"address\"}],\"name\":\"removeAddressFromAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_accountRegistryLogic\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldRegistryLogic\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newRegistryLogic\",\"type\":\"address\"}],\"name\":\"AccountRegistryLogicChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"AccountRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://c32c1caa4cc2f6164c1500fec782923d1772e3c93a402dc96bee7fc39ca464dc"}]}