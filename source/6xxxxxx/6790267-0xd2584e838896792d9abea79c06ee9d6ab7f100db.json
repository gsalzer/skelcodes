{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath256 {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        if (b == 0) return 1;\r\n\r\n        uint256 c = a ** b;\r\n        assert(c / (a ** (b - 1)) == a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function _validateAddress(address _addr) internal pure {\r\n        require(_addr != address(0), \"invalid address\");\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not a contract owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _validateAddress(newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Controllable is Ownable {\r\n    mapping(address => bool) controllers;\r\n\r\n    modifier onlyController {\r\n        require(_isController(msg.sender), \"no controller rights\");\r\n        _;\r\n    }\r\n\r\n    function _isController(address _controller) internal view returns (bool) {\r\n        return controllers[_controller];\r\n    }\r\n\r\n    function _setControllers(address[] _controllers) internal {\r\n        for (uint256 i = 0; i < _controllers.length; i++) {\r\n            _validateAddress(_controllers[i]);\r\n            controllers[_controllers[i]] = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Upgradable is Controllable {\r\n    address[] internalDependencies;\r\n    address[] externalDependencies;\r\n\r\n    function getInternalDependencies() public view returns(address[]) {\r\n        return internalDependencies;\r\n    }\r\n\r\n    function getExternalDependencies() public view returns(address[]) {\r\n        return externalDependencies;\r\n    }\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        for (uint256 i = 0; i < _newDependencies.length; i++) {\r\n            _validateAddress(_newDependencies[i]);\r\n        }\r\n        internalDependencies = _newDependencies;\r\n    }\r\n\r\n    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        externalDependencies = _newDependencies;\r\n        _setControllers(_newDependencies);\r\n    }\r\n}\r\n\r\ncontract Gold {\r\n    function remoteTransfer(address _to, uint256 _value) external;\r\n}\r\n\r\ncontract GoldMarketplaceStorage {\r\n    function () external payable;\r\n    function transferGold(address, uint256) external;\r\n    function transferEth(address, uint256) external;\r\n    function createSellOrder(address, uint256, uint256) external;\r\n    function cancelSellOrder(address) external;\r\n    function updateSellOrder(address, uint256, uint256) external;\r\n    function createBuyOrder(address, uint256, uint256) external;\r\n    function cancelBuyOrder(address) external;\r\n    function updateBuyOrder(address, uint256, uint256) external;\r\n    function orderOfSeller(address) external view returns (uint256, address, uint256, uint256);\r\n    function orderOfBuyer(address) external view returns (uint256, address, uint256, uint256);\r\n    function sellOrdersAmount() external view returns (uint256);\r\n    function buyOrdersAmount() external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n//////////////CONTRACT//////////////\r\n\r\n\r\n\r\n\r\ncontract GoldMarketplace is Upgradable {\r\n    using SafeMath256 for uint256;\r\n\r\n    GoldMarketplaceStorage _storage_;\r\n    Gold goldTokens;\r\n\r\n    uint256 constant GOLD_DECIMALS = uint256(10) ** 18;\r\n\r\n\r\n    function _calculateFullPrice(\r\n        uint256 _price,\r\n        uint256 _amount\r\n    ) internal pure returns (uint256) {\r\n        return _price.mul(_amount).div(GOLD_DECIMALS);\r\n    }\r\n\r\n    function _transferGold(address _to, uint256 _value) internal {\r\n        goldTokens.remoteTransfer(_to, _value);\r\n    }\r\n\r\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        return _a <= _b ? _a : _b;\r\n    }\r\n\r\n    function _safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return b > a ? 0 : a.sub(b);\r\n    }\r\n\r\n    function _checkPrice(uint256 _value) internal pure {\r\n        require(_value > 0, \"price must be greater than 0\");\r\n    }\r\n\r\n    function _checkAmount(uint256 _value) internal pure {\r\n        require(_value > 0, \"amount must be greater than 0\");\r\n    }\r\n\r\n    function _checkActualPrice(uint256 _expected, uint256 _actual) internal pure {\r\n        require(_expected == _actual, \"wrong actual price\");\r\n    }\r\n\r\n    // SELL\r\n\r\n    function createSellOrder(\r\n        address _user,\r\n        uint256 _price,\r\n        uint256 _amount\r\n    ) external onlyController {\r\n        _checkPrice(_price);\r\n        _checkAmount(_amount);\r\n\r\n        _transferGold(address(_storage_), _amount);\r\n\r\n        _storage_.createSellOrder(_user, _price, _amount);\r\n    }\r\n\r\n    function cancelSellOrder(address _user) external onlyController {\r\n        ( , , , uint256 _amount) = _storage_.orderOfSeller(_user);\r\n        _storage_.transferGold(_user, _amount);\r\n        _storage_.cancelSellOrder(_user);\r\n    }\r\n\r\n    function fillSellOrder(\r\n        address _buyer,\r\n        uint256 _value,\r\n        address _seller,\r\n        uint256 _expectedPrice,\r\n        uint256 _amount\r\n    ) external onlyController returns (uint256 price) {\r\n        uint256 _available;\r\n        ( , , price, _available) = _storage_.orderOfSeller(_seller);\r\n\r\n        _checkAmount(_amount);\r\n        require(_amount <= _available, \"seller has no enough gold\");\r\n        _checkActualPrice(_expectedPrice, price);\r\n\r\n        uint256 _fullPrice = _calculateFullPrice(price, _amount);\r\n        require(_fullPrice > 0, \"no free gold, sorry\");\r\n        require(_fullPrice <= _value, \"not enough ether\");\r\n\r\n        _seller.transfer(_fullPrice);\r\n        if (_value > _fullPrice) {\r\n            _buyer.transfer(_value.sub(_fullPrice));\r\n        }\r\n        _storage_.transferGold(_buyer, _amount);\r\n\r\n        _available = _available.sub(_amount);\r\n\r\n        if (_available == 0) {\r\n            _storage_.cancelSellOrder(_seller);\r\n        } else {\r\n            _storage_.updateSellOrder(_seller, price, _available);\r\n        }\r\n    }\r\n\r\n    // BUY\r\n\r\n    function () external payable onlyController {}\r\n\r\n    function createBuyOrder(\r\n        address _user,\r\n        uint256 _value, // eth\r\n        uint256 _price,\r\n        uint256 _amount\r\n    ) external onlyController {\r\n        _checkPrice(_price);\r\n        _checkAmount(_amount);\r\n\r\n        uint256 _fullPrice = _calculateFullPrice(_price, _amount);\r\n        require(_fullPrice == _value, \"wrong eth value\");\r\n\r\n        address(_storage_).transfer(_value);\r\n\r\n        _storage_.createBuyOrder(_user, _price, _amount);\r\n    }\r\n\r\n    function cancelBuyOrder(address _user) external onlyController {\r\n        ( , address _buyer, uint256 _price, uint256 _amount) = _storage_.orderOfBuyer(_user);\r\n        require(_buyer == _user, \"user addresses are not equal\");\r\n\r\n        uint256 _fullPrice = _calculateFullPrice(_price, _amount);\r\n        _storage_.transferEth(_user, _fullPrice);\r\n\r\n        _storage_.cancelBuyOrder(_user);\r\n    }\r\n\r\n    function fillBuyOrder(\r\n        address _seller,\r\n        address _buyer,\r\n        uint256 _expectedPrice,\r\n        uint256 _amount\r\n    ) external onlyController returns (uint256 price) {\r\n        uint256 _needed;\r\n        ( , , price, _needed) = _storage_.orderOfBuyer(_buyer);\r\n\r\n        _checkAmount(_amount);\r\n        require(_amount <= _needed, \"buyer do not need so much\");\r\n        _checkActualPrice(_expectedPrice, price);\r\n\r\n        uint256 _fullPrice = _calculateFullPrice(price, _amount);\r\n\r\n        _transferGold(_buyer, _amount);\r\n        _storage_.transferEth(_seller, _fullPrice);\r\n\r\n        _needed = _needed.sub(_amount);\r\n\r\n        if (_needed == 0) {\r\n            _storage_.cancelBuyOrder(_buyer);\r\n        } else {\r\n            _storage_.updateBuyOrder(_buyer, price, _needed);\r\n        }\r\n    }\r\n\r\n    // UPDATE CONTRACT\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        super.setInternalDependencies(_newDependencies);\r\n\r\n        _storage_ = GoldMarketplaceStorage(_newDependencies[0]);\r\n        goldTokens = Gold(_newDependencies[1]);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setExternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"cancelSellOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setInternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createBuyOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"cancelBuyOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_expectedPrice\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fillSellOrder\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_expectedPrice\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fillBuyOrder\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"GoldMarketplace","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dfa8305c5682f068ff4c49f2459683bcb3d110785675913f851625a24562b9a7"}]}