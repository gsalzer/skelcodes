{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Elliptic curve signature operations\r\n * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\r\n * TODO Remove this library once solidity supports passing a signature to ecrecover.\r\n * See https://github.com/ethereum/solidity/issues/864\r\n */\r\n\r\nlibrary ECRecovery {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using their signature\r\n   * @param _hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param _sig bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 _hash, bytes _sig)\r\n    internal\r\n    pure\r\n    returns (address)\r\n  {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    // Check the signature length\r\n    if (_sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    // ecrecover takes the signature parameters, and the only way to get them\r\n    // currently is to use assembly.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      r := mload(add(_sig, 32))\r\n      s := mload(add(_sig, 64))\r\n      v := byte(0, mload(add(_sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      // solium-disable-next-line arg-overflow\r\n      return ecrecover(_hash, v, r, s);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * toEthSignedMessageHash\r\n   * @dev prefix a bytes32 value with \"\\x19Ethereum Signed Message:\"\r\n   * and hash the result\r\n   */\r\n  function toEthSignedMessageHash(bytes32 _hash)\r\n    internal\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    // 32 is the length in bytes of hash,\r\n    // enforced by the type signature above\r\n    return keccak256(\r\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _hash)\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract ETHDenverStaking is Ownable, Pausable {\r\n\r\n    using ECRecovery for bytes32;\r\n\r\n    event UserStake(address userUportAddress, address userMetamaskAddress, uint amountStaked);\r\n    event UserRecoupStake(address userUportAddress, address userMetamaskAddress, uint amountStaked);\r\n\r\n    // Debug events\r\n    event debugBytes32(bytes32 _msg);\r\n    event debugBytes(bytes _msg);\r\n    event debugString(string _msg);\r\n    event debugAddress(address _address);\r\n\r\n    // ETHDenver will need to authorize staking and recouping.\r\n    address public grantSigner;\r\n\r\n    // End of the event, when staking can be sweeped\r\n    uint public finishDate;\r\n\r\n    // uPortAddress => walletAddress\r\n    mapping (address => address) public userStakedAddress;\r\n\r\n    // ETH amount staked by a given uPort address\r\n    mapping (address => uint256) public stakedAmount;\r\n\r\n\r\n    constructor(address _grantSigner, uint _finishDate) public {\r\n        grantSigner = _grantSigner;\r\n        finishDate = _finishDate;\r\n    }\r\n\r\n    // Public functions\r\n\r\n    // function allow the staking for a participant\r\n    function stake(address _userUportAddress, uint _expiryDate, bytes _signature) public payable whenNotPaused {\r\n        bytes32 hashMessage = keccak256(abi.encodePacked(_userUportAddress, msg.value, _expiryDate));\r\n        address signer = hashMessage.toEthSignedMessageHash().recover(_signature);\r\n\r\n        require(signer == grantSigner, \"Signature is not valid\");\r\n        require(block.timestamp < _expiryDate, \"Grant is expired\");\r\n        require(userStakedAddress[_userUportAddress] == 0, \"User has already staked!\");\r\n\r\n        userStakedAddress[_userUportAddress] = msg.sender;\r\n        stakedAmount[_userUportAddress] = msg.value;\r\n\r\n        emit UserStake(_userUportAddress, msg.sender, msg.value);\r\n    }\r\n\r\n    // function allow the staking for a participant\r\n    function recoupStake(address _userUportAddress, uint _expiryDate, bytes _signature) public whenNotPaused {\r\n        bytes32 hashMessage = keccak256(abi.encodePacked(_userUportAddress, _expiryDate));\r\n        address signer = hashMessage.toEthSignedMessageHash().recover(_signature);\r\n\r\n        require(signer == grantSigner, \"Signature is not valid\");\r\n        require(block.timestamp < _expiryDate, \"Grant is expired\");\r\n        require(userStakedAddress[_userUportAddress] != 0, \"User has not staked!\");\r\n\r\n        address stakedBy = userStakedAddress[_userUportAddress];\r\n        uint256 amount = stakedAmount[_userUportAddress];\r\n        userStakedAddress[_userUportAddress] = address(0x0);\r\n        stakedAmount[_userUportAddress] = 0;\r\n\r\n        stakedBy.transfer(amount);\r\n\r\n        emit UserRecoupStake(_userUportAddress, stakedBy, amount);\r\n    }\r\n\r\n    // Owner functions\r\n\r\n    function setGrantSigner(address _signer) public onlyOwner {\r\n        require(_signer != address(0x0), \"address is null\");\r\n        grantSigner = _signer;\r\n    }\r\n\r\n    function sweepStakes() public onlyOwner {\r\n        require(block.timestamp > finishDate, \"EthDenver is not over yet!\");\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_userUportAddress\",\"type\":\"address\"},{\"name\":\"_expiryDate\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setGrantSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sweepStakes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finishDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userUportAddress\",\"type\":\"address\"},{\"name\":\"_expiryDate\",\"type\":\"uint256\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"recoupStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grantSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_grantSigner\",\"type\":\"address\"},{\"name\":\"_finishDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userUportAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userMetamaskAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"UserStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"userUportAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userMetamaskAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"UserRecoupStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_msg\",\"type\":\"bytes32\"}],\"name\":\"debugBytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_msg\",\"type\":\"bytes\"}],\"name\":\"debugBytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_msg\",\"type\":\"string\"}],\"name\":\"debugString\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"debugAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ETHDenverStaking","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fd2e7dae7d7d91297f98060dfae129e3c181d226000000000000000000000000000000000000000000000000000000005c6a49e0","Library":"","SwarmSource":"bzzr://31d13df8463ebc23f3d6e86fc335ab88844cbe931f7fdb011d4324e5f2655a06"}]}