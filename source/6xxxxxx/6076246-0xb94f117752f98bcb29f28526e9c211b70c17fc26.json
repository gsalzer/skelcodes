{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/// @title Proxied - indicates that a contract will be proxied. Also defines storage requirements for Proxy.\r\n/// @author Alan Lu - <alan@gnosis.pm>\r\ncontract Proxied {\r\n    address public masterCopy;\r\n}\r\n\r\n/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n/// @author Stefan George - <stefan@gnosis.pm>\r\ncontract Proxy is Proxied {\r\n    /// @dev Constructor function sets address of master copy contract.\r\n    /// @param _masterCopy Master copy address.\r\n    constructor(address _masterCopy)\r\n        public\r\n    {\r\n        require(_masterCopy != 0);\r\n        masterCopy = _masterCopy;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    function ()\r\n        external\r\n        payable\r\n    {\r\n        address _masterCopy = masterCopy;\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(not(0), _masterCopy, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            switch success\r\n            case 0 { revert(0, returndatasize()) }\r\n            default { return(0, returndatasize()) }\r\n        }\r\n    }\r\n}\r\n/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n\r\n\r\n\r\n/// @title Abstract token contract - Functions to be implemented by token contracts\r\ncontract Token {\r\n\r\n    /*\r\n     *  Events\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    /*\r\n     *  Public functions\r\n     */\r\n    function transfer(address to, uint value) public returns (bool);\r\n    function transferFrom(address from, address to, uint value) public returns (bool);\r\n    function approve(address spender, uint value) public returns (bool);\r\n    function balanceOf(address owner) public view returns (uint);\r\n    function allowance(address owner, address spender) public view returns (uint);\r\n    function totalSupply() public view returns (uint);\r\n}\r\n\r\n\r\n\r\n/// @title Abstract oracle contract - Functions to be implemented by oracles\r\ncontract Oracle {\r\n\r\n    function isOutcomeSet() public view returns (bool);\r\n    function getOutcome() public view returns (int);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CentralizedBugOracleData {\r\n  event OwnerReplacement(address indexed newOwner);\r\n  event OutcomeAssignment(int outcome);\r\n\r\n  /*\r\n   *  Storage\r\n   */\r\n  address public owner;\r\n  bytes public ipfsHash;\r\n  bool public isSet;\r\n  int public outcome;\r\n  address public maker;\r\n  address public taker;\r\n\r\n  /*\r\n   *  Modifiers\r\n   */\r\n  modifier isOwner () {\r\n      // Only owner is allowed to proceed\r\n      require(msg.sender == owner);\r\n      _;\r\n  }\r\n}\r\n\r\ncontract CentralizedBugOracleProxy is Proxy, CentralizedBugOracleData {\r\n\r\n    /// @dev Constructor sets owner address and IPFS hash\r\n    /// @param _ipfsHash Hash identifying off chain event description\r\n    constructor(address proxied, address _owner, bytes _ipfsHash, address _maker, address _taker)\r\n        public\r\n        Proxy(proxied)\r\n    {\r\n        // Description hash cannot be null\r\n        require(_ipfsHash.length == 46);\r\n        owner = _owner;\r\n        ipfsHash = _ipfsHash;\r\n        maker = _maker;\r\n        taker = _taker;\r\n    }\r\n}\r\n\r\ncontract CentralizedBugOracle is Proxied,Oracle, CentralizedBugOracleData{\r\n\r\n  /// @dev Sets event outcome\r\n  /// @param _outcome Event outcome\r\n  function setOutcome(int _outcome)\r\n      public\r\n      isOwner\r\n  {\r\n      // Result is not set yet\r\n      require(!isSet);\r\n      _setOutcome(_outcome);\r\n  }\r\n\r\n  /// @dev Returns if winning outcome is set\r\n  /// @return Is outcome set?\r\n  function isOutcomeSet()\r\n      public\r\n      view\r\n      returns (bool)\r\n  {\r\n      return isSet;\r\n  }\r\n\r\n  /// @dev Returns outcome\r\n  /// @return Outcome\r\n  function getOutcome()\r\n      public\r\n      view\r\n      returns (int)\r\n  {\r\n      return outcome;\r\n  }\r\n\r\n\r\n  //@dev internal funcion to set the outcome sat\r\n  function _setOutcome(int _outcome) internal {\r\n    isSet = true;\r\n    outcome = _outcome;\r\n    emit OutcomeAssignment(_outcome);\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n//Vending machine Logic goes in this contract\r\ncontract OracleVendingMachine {\r\n  using SafeMath for *;\r\n\r\n  /*\r\n   *  events\r\n   */\r\n\r\n  event OracleProposed(address maker, address taker, uint256 index, bytes hash);\r\n  event OracleAccepted(address maker, address taker, uint256 index, bytes hash);\r\n  event OracleDeployed(address maker, address taker, uint256 index, bytes hash, address oracle);\r\n  event OracleRevoked(address maker, address taker, uint256 index, bytes hash);\r\n\r\n  event FeeUpdated(uint256 newFee);\r\n  event OracleUpgraded(address newAddress);\r\n  event PaymentTokenChanged(address newToken);\r\n  event StatusChanged(bool newStatus);\r\n  event OracleBoughtFor(address buyer, address maker, address taker, uint256 index, bytes ipfsHash, address oracle);\r\n\r\n  /*\r\n   *  Storage\r\n   */\r\n  address public owner;\r\n  uint public fee;\r\n  Oracle public oracleMasterCopy;\r\n  Token public paymentToken;\r\n  bool public open;\r\n\r\n\r\n  mapping (address => uint256) public balances;\r\n  mapping (address => bool) public balanceChecked;\r\n  mapping (address => mapping (address => uint256)) public oracleIndexes;\r\n  mapping (address => mapping (address => mapping (uint256 => proposal))) public oracleProposed;\r\n  mapping (address => mapping (address => mapping (uint256 => address))) public oracleDeployed;\r\n\r\n  struct proposal {\r\n    bytes hash;\r\n    address oracleMasterCopy;\r\n    uint256 fee;\r\n  }\r\n\r\n  /*\r\n   *  Modifiers\r\n   */\r\n  modifier isOwner () {\r\n      // Only owner is allowed to proceed\r\n      require(msg.sender == owner);\r\n      _;\r\n  }\r\n\r\n  modifier whenOpen() {\r\n    //Only proceeds with operation if open is true\r\n    require(open);\r\n    _;\r\n  }\r\n\r\n  /**\r\n    @dev Contructor to the vending Machine\r\n    @param _fee The for using the vending Machine\r\n    @param _token the Address of the token used for paymentToken\r\n    @param _oracleMasterCopy The deployed version of the oracle which will be proxied to\r\n  **/\r\n  constructor(uint _fee, address _token, address _oracleMasterCopy) public {\r\n    owner = msg.sender;\r\n    fee = _fee;\r\n    paymentToken = Token(_token);\r\n    oracleMasterCopy = Oracle(_oracleMasterCopy);\r\n    open = true;\r\n  }\r\n\r\n  /**\r\n    @dev Change the fee\r\n    @param _fee Te new vending machine fee\r\n  **/\r\n  function changeFee(uint _fee) public isOwner {\r\n      fee = _fee;\r\n      emit FeeUpdated(_fee);\r\n  }\r\n\r\n  /**\r\n    @dev Change the master copy of the oracle\r\n    @param _oracleMasterCopy The address of the deployed version of the oracle which will be proxied to\r\n  **/\r\n  function upgradeOracle(address _oracleMasterCopy) public isOwner {\r\n    require(_oracleMasterCopy != 0x0);\r\n    oracleMasterCopy = Oracle(_oracleMasterCopy);\r\n    emit OracleUpgraded(_oracleMasterCopy);\r\n  }\r\n\r\n  /**\r\n    @dev Change the payment token\r\n    @param _paymentToken the Address of the token used for paymentToken\r\n  **/\r\n  function changePaymentToken(address _paymentToken) public isOwner {\r\n    require(_paymentToken != 0x0);\r\n    paymentToken = Token(_paymentToken);\r\n    emit PaymentTokenChanged(_paymentToken);\r\n  }\r\n\r\n  /**\r\n    @dev Contructor to the vending Machine\r\n    @param status The new open status for the vending Machine\r\n  **/\r\n  function modifyOpenStatus(bool status) public isOwner {\r\n    open = status;\r\n    emit StatusChanged(status);\r\n  }\r\n\r\n\r\n  /**\r\n    @dev Internal function to deploy and register a oracle\r\n    @param _proposal A proposal struct containing the bug information\r\n    @param maker the Address who proposed the oracle\r\n    @param taker the Address who accepted the oracle\r\n    @param index The index of the oracle to be deployed\r\n    @return A deployed oracle contract\r\n  **/\r\n  function deployOracle(proposal _proposal, address maker, address taker, uint256 index) internal returns(Oracle oracle){\r\n    require(oracleDeployed[maker][taker][index] == address(0));\r\n    oracle = CentralizedBugOracle(new CentralizedBugOracleProxy(_proposal.oracleMasterCopy, owner, _proposal.hash, maker, taker));\r\n    oracleDeployed[maker][taker][index] = oracle;\r\n    emit OracleDeployed(maker, taker, index, _proposal.hash, oracle);\r\n  }\r\n\r\n\r\n  /**\r\n    @dev Function called by he taker to confirm a proposed oracle\r\n    @param maker the Address who proposed the oracle\r\n    @param index The index of the oracle to be deployed\r\n    @return A deployed oracle contract\r\n  **/\r\n  function confirmOracle(address maker, uint index) public returns(Oracle oracle) {\r\n    require(oracleProposed[maker][msg.sender][index].fee > 0);\r\n\r\n    if(!balanceChecked[msg.sender]) checkBalance(msg.sender);\r\n    balances[msg.sender] = balances[msg.sender].sub(fee);\r\n\r\n    oracle = deployOracle(oracleProposed[maker][msg.sender][index], maker, msg.sender, index);\r\n    oracleIndexes[maker][msg.sender] += 1;\r\n    emit OracleAccepted(maker, msg.sender, index, oracleProposed[maker][msg.sender][index].hash);\r\n  }\r\n\r\n\r\n  /**\r\n    @dev Function to propose an oracle, calle by maker\r\n    @param _ipfsHash The hash for the bug information(description, spurce code, etc)\r\n    @param taker the Address who needs to accept the oracle\r\n    @return index of the proposal\r\n  **/\r\n  function buyOracle(bytes _ipfsHash, address taker) public whenOpen returns (uint index){\r\n    if(!balanceChecked[msg.sender]) checkBalance(msg.sender);\r\n    balances[msg.sender] = balances[msg.sender].sub(fee);\r\n    index = oracleIndexes[msg.sender][taker];\r\n    oracleProposed[msg.sender][taker][index] = proposal(_ipfsHash, oracleMasterCopy, fee);\r\n    emit OracleProposed(msg.sender, taker, index, _ipfsHash);\r\n  }\r\n\r\n  /**\r\n    @dev Priviledged function to propose and deploy an oracle with one transaction. Called by Solidified Bug Bounty plataform\r\n    @param _ipfsHash The hash for the bug information(description, spurce code, etc)\r\n    @param maker the Address who proposed the oracle\r\n    @param taker the Address who accepted the oracle\r\n    @return A deployed oracle contract\r\n  **/\r\n  function buyOracleFor(bytes _ipfsHash, address maker, address taker) public whenOpen isOwner returns(Oracle oracle){\r\n    if(!balanceChecked[maker]) checkBalance(maker);\r\n    if(!balanceChecked[taker]) checkBalance(taker);\r\n\r\n    balances[maker] = balances[maker].sub(fee);\r\n    balances[taker] = balances[taker].sub(fee);\r\n\r\n    uint256 index = oracleIndexes[maker][taker];\r\n    proposal memory oracleProposal  = proposal(_ipfsHash, oracleMasterCopy, fee);\r\n\r\n    oracleProposed[maker][taker][index] = oracleProposal;\r\n    oracle = deployOracle(oracleProposal,maker,taker,index);\r\n    oracleDeployed[maker][taker][oracleIndexes[maker][taker]] = oracle;\r\n    oracleIndexes[maker][taker] += 1;\r\n    emit OracleBoughtFor(msg.sender, maker, taker, index, _ipfsHash, oracle);\r\n  }\r\n\r\n  /**\r\n    @dev  Function to cancel a proposed oracle, called by the maker\r\n    @param taker the Address who accepted the oracle\r\n    @param index The index of the proposed to be revoked\r\n  **/\r\n  function revokeOracle(address taker, uint256 index) public {\r\n    require(oracleProposed[msg.sender][taker][index].fee >  0);\r\n    require(oracleDeployed[msg.sender][taker][index] == address(0));\r\n    proposal memory oracleProposal = oracleProposed[msg.sender][taker][index];\r\n    oracleProposed[msg.sender][taker][index].hash = \"\";\r\n    oracleProposed[msg.sender][taker][index].fee = 0;\r\n    oracleProposed[msg.sender][taker][index].oracleMasterCopy = address(0);\r\n\r\n    balances[msg.sender] = balances[msg.sender].add(oracleProposal.fee);\r\n    emit OracleRevoked(msg.sender, taker, index, oracleProposal.hash);\r\n  }\r\n\r\n  /**\r\n    @dev Function to check a users balance of SOLID and deposit as credit\r\n    @param holder Address of the holder to be checked\r\n  **/\r\n  function checkBalance(address holder) public {\r\n    require(!balanceChecked[holder]);\r\n    balances[holder] = paymentToken.balanceOf(holder);\r\n    balanceChecked[holder] = true;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceChecked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracleIndexes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracleProposed\",\"outputs\":[{\"name\":\"hash\",\"type\":\"bytes\"},{\"name\":\"oracleMasterCopy\",\"type\":\"address\"},{\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"modifyOpenStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"changePaymentToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracleMasterCopy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"taker\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"revokeOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"confirmOracle\",\"outputs\":[{\"name\":\"oracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracleDeployed\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracleMasterCopy\",\"type\":\"address\"}],\"name\":\"upgradeOracle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ipfsHash\",\"type\":\"bytes\"},{\"name\":\"taker\",\"type\":\"address\"}],\"name\":\"buyOracle\",\"outputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ipfsHash\",\"type\":\"bytes\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"taker\",\"type\":\"address\"}],\"name\":\"buyOracleFor\",\"outputs\":[{\"name\":\"oracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_oracleMasterCopy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"OracleProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"OracleAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"OracleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"OracleUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"PaymentTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"StatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ipfsHash\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleBoughtFor\",\"type\":\"event\"}]","ContractName":"OracleVendingMachine","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000cb65fcd12896d7bfd486e2695396050478fafd3a0000000000000000000000007b7f44c3cd0fb15863a6f968e16aa4a91acb79c9","Library":"","SwarmSource":"bzzr://5bee3667d02e9305d83be65ccac5f7f7550289acb287b408cffa32a255b5fa59"}]}