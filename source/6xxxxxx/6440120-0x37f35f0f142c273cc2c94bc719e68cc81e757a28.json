{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Abstract contract where privileged minting managed by governance\r\n */\r\ncontract MintableTokenStub {\r\n  address public minter;\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  /**\r\n   * Constructor function\r\n   */\r\n  constructor (\r\n    address _minter\r\n  ) public {\r\n    minter = _minter;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the minter.\r\n   */\r\n  modifier onlyMinter() {\r\n    require(msg.sender == minter);\r\n    _;\r\n  }\r\n\r\n  function mint(address _to, uint256 _amount)\r\n  public\r\n  onlyMinter\r\n  returns (bool)\r\n  {\r\n    emit Mint(_to, _amount);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Congress contract\r\n * @dev The Congress contract allows to execute certain actions (token minting in this case) via majority of votes.\r\n * In contrast to traditional Ownable pattern, Congress protects the managed contract (token) against unfair behaviour\r\n * of minority (for example, a single founder having one of the project keys has no power to mint the token until\r\n * other(s) vote for the operation). Majority formula is voters/2+1. The voters list is formed dynamically through the\r\n * voting. Voters can be added if current majority trusts new party. The party can be removed from the voters if it has\r\n * been compromised (majority executes untrust operation on it to do this).\r\n */\r\ncontract Congress {\r\n  using SafeMath for uint256;\r\n  // the number of active voters\r\n  uint public voters;\r\n\r\n  // given address is the voter or not\r\n  mapping(address => bool) public voter;\r\n\r\n  // Each proposal is stored in mapping by its hash (hash of mint arguments)\r\n  mapping(bytes32 => MintProposal) public mintProposal;\r\n\r\n  // Defines the level of other voters' trust for given address. If majority of current voters\r\n  // trusts the new member - it becomes the voter\r\n  mapping(address => TrustRecord) public trustRegistry;\r\n\r\n  // The governed token under Congress's control. Congress has the minter privileges on it.\r\n  MintableTokenStub public token;\r\n\r\n  // Event on initial token configuration\r\n  event TokenSet(address voter, address token);\r\n\r\n  // Proposal lifecycle events\r\n  event MintProposalAdded(\r\n    bytes32 proposalHash,\r\n    address to,\r\n    uint amount,\r\n    string batchCode\r\n  );\r\n\r\n  event MintProposalVoted(\r\n    bytes32 proposalHash,\r\n    address voter,\r\n    uint numberOfVotes\r\n  );\r\n\r\n  event MintProposalExecuted(\r\n    bytes32 proposalHash,\r\n    address to,\r\n    uint amount,\r\n    string batchCode\r\n  );\r\n\r\n  // Events emitted on trust claims\r\n  event TrustSet(address issuer, address subject);\r\n  event TrustUnset(address issuer, address subject);\r\n\r\n  // Events on adding-deleting voters\r\n  event VoteGranted(address voter);\r\n  event VoteRevoked(address voter);\r\n\r\n  // Stores the state of the proposal: executed or not (able to execute only once), number of Votes and\r\n  // the mapping of voters and their boolean vote. true if voted.\r\n  struct MintProposal {\r\n    bool executed;\r\n    uint numberOfVotes;\r\n    mapping(address => bool) voted;\r\n  }\r\n\r\n  // Stores the trust counter and the addresses who trusted the given voter(candidate)\r\n  struct TrustRecord {\r\n    uint256 totalTrust;\r\n    mapping(address => bool) trustedBy;\r\n  }\r\n\r\n\r\n  // Modifier that allows only Voters to vote\r\n  modifier onlyVoters {\r\n    require(voter[msg.sender]);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Constructor function\r\n   */\r\n  constructor () public {\r\n    voter[msg.sender] = true;\r\n    voters = 1;\r\n  }\r\n\r\n  /**\r\n   * @dev Determine does the given number of votes make majority of voters.\r\n   * @return true if given number is majority\r\n   */\r\n  function isMajority(uint256 votes) public view returns (bool) {\r\n    return (votes >= voters.div(2).add(1));\r\n  }\r\n\r\n  /**\r\n   * @dev Determine how many voters trust given address\r\n   * @param subject The address of trustee\r\n   * @return the number of trusted votes\r\n   */\r\n  function getTotalTrust(address subject) public view returns (uint256) {\r\n    return (trustRegistry[subject].totalTrust);\r\n  }\r\n\r\n  /**\r\n   * @dev Set the trust claim (msg.sender trusts subject)\r\n   * @param _subject The trusted address\r\n   */\r\n  function trust(address _subject) public onlyVoters {\r\n    require(msg.sender != _subject);\r\n    require(token != MintableTokenStub(0));\r\n    if (!trustRegistry[_subject].trustedBy[msg.sender]) {\r\n      trustRegistry[_subject].trustedBy[msg.sender] = true;\r\n      trustRegistry[_subject].totalTrust = trustRegistry[_subject].totalTrust.add(1);\r\n      emit TrustSet(msg.sender, _subject);\r\n      if (!voter[_subject] && isMajority(trustRegistry[_subject].totalTrust)) {\r\n        voter[_subject] = true;\r\n        voters = voters.add(1);\r\n        emit VoteGranted(_subject);\r\n      }\r\n      return;\r\n    }\r\n    revert();\r\n  }\r\n\r\n  /**\r\n   * @dev Unset the trust claim (msg.sender now reclaims trust from subject)\r\n   * @param _subject The address of trustee to revoke trust\r\n   */\r\n  function untrust(address _subject) public onlyVoters {\r\n    require(token != MintableTokenStub(0));\r\n    if (trustRegistry[_subject].trustedBy[msg.sender]) {\r\n      trustRegistry[_subject].trustedBy[msg.sender] = false;\r\n      trustRegistry[_subject].totalTrust = trustRegistry[_subject].totalTrust.sub(1);\r\n      emit TrustUnset(msg.sender, _subject);\r\n      if (voter[_subject] && !isMajority(trustRegistry[_subject].totalTrust)) {\r\n        voter[_subject] = false;\r\n        // ToDo SafeMath\r\n        voters = voters.sub(1);\r\n        emit VoteRevoked(_subject);\r\n      }\r\n      return;\r\n    }\r\n    revert();\r\n  }\r\n\r\n  /**\r\n   * @dev Token and its governance should be locked to each other. Congress should be set as minter in token\r\n   * @param _token The address of governed token\r\n   */\r\n  function setToken(\r\n    MintableTokenStub _token\r\n  )\r\n  public\r\n  onlyVoters\r\n  {\r\n    require(_token != MintableTokenStub(0));\r\n    require(token == MintableTokenStub(0));\r\n    token = _token;\r\n    emit TokenSet(msg.sender, token);\r\n  }\r\n\r\n  /**\r\n  * @dev Proxy function to vote and mint tokens\r\n  * @param to The address that will receive the minted tokens.\r\n  * @param amount The amount of tokens to mint.\r\n  * @param batchCode The detailed information on a batch.\r\n  * @return A boolean that indicates if the operation was successful.\r\n  */\r\n  function mint(\r\n    address to,\r\n    uint256 amount,\r\n    string batchCode\r\n  )\r\n  public\r\n  onlyVoters\r\n  returns (bool)\r\n  {\r\n    bytes32 proposalHash = keccak256(abi.encodePacked(to, amount, batchCode));\r\n    assert(!mintProposal[proposalHash].executed);\r\n    if (!mintProposal[proposalHash].voted[msg.sender]) {\r\n      if (mintProposal[proposalHash].numberOfVotes == 0) {\r\n        emit MintProposalAdded(proposalHash, to, amount, batchCode);\r\n      }\r\n      mintProposal[proposalHash].numberOfVotes = mintProposal[proposalHash].numberOfVotes.add(1);\r\n      mintProposal[proposalHash].voted[msg.sender] = true;\r\n      emit MintProposalVoted(proposalHash, msg.sender, mintProposal[proposalHash].numberOfVotes);\r\n    }\r\n    if (isMajority(mintProposal[proposalHash].numberOfVotes)) {\r\n      mintProposal[proposalHash].executed = true;\r\n      token.mint(to, amount);\r\n      emit MintProposalExecuted(proposalHash, to, amount, batchCode);\r\n    }\r\n    return (true);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"getTotalTrust\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"voters\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_subject\",\"type\":\"address\"}],\"name\":\"trust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"isMajority\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"mintProposal\",\"outputs\":[{\"name\":\"executed\",\"type\":\"bool\"},{\"name\":\"numberOfVotes\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"voter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"batchCode\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"trustRegistry\",\"outputs\":[{\"name\":\"totalTrust\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_subject\",\"type\":\"address\"}],\"name\":\"untrust\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"batchCode\",\"type\":\"string\"}],\"name\":\"MintProposalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numberOfVotes\",\"type\":\"uint256\"}],\"name\":\"MintProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proposalHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"batchCode\",\"type\":\"string\"}],\"name\":\"MintProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"TrustSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"TrustUnset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"VoteGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"VoteRevoked\",\"type\":\"event\"}]","ContractName":"Congress","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://801b98dc0e27a65710d87ad6a1eda23825e519861d1a244bbfac479c38856536"}]}