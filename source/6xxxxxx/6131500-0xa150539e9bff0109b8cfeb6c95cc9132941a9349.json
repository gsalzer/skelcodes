{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.23;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    assert(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    assert(c >= _a);\r\n\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract PasswordEscrow {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  address public owner;\r\n  uint256 public commissionFee;\r\n  uint256 public totalFee;\r\n\r\n  uint256 private randSeed = 50;\r\n\r\n  //data\r\n  struct Transfer {\r\n    address from;\r\n    uint256 amount;\r\n  }\r\n\r\n  mapping(bytes32 => Transfer) private password;\r\n  mapping(address => uint256) private randToAddress;\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  event LogChangeCommissionFee(uint256 fee);\r\n  event LogChangeOwner(address indexed exOwner, address indexed newOwner);\r\n  event LogDeposit(address indexed from, uint256 amount);\r\n  event LogGetTransfer(address indexed from, address indexed recipient, uint256 amount);\r\n\r\n\r\n  constructor(uint256 _fee) public {\r\n    commissionFee = _fee;\r\n    owner = msg.sender;\r\n  }\r\n\r\n  function changeCommissionFee(uint256 _fee) public onlyOwner {\r\n    commissionFee = _fee;\r\n    emit LogChangeCommissionFee(_fee);\r\n  }\r\n\r\n  function changeOwner(address _newOwner) public onlyOwner {\r\n    emit LogChangeOwner(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n\r\n  //escrow\r\n  function deposit(bytes32 _password) public payable {\r\n    require(msg.value > commissionFee);\r\n\r\n    uint256 rand = _rand();\r\n    bytes32 pass = sha3(_password, rand);\r\n    randToAddress[msg.sender] = rand;\r\n    password[pass].from = msg.sender;\r\n    password[pass].amount = password[pass].amount.add(msg.value);\r\n\r\n    _updateSeed();\r\n\r\n    emit LogDeposit(msg.sender, msg.value);\r\n  }\r\n\r\n  function _rand() private view returns(uint256) {\r\n    uint256 rand = uint256(sha3(now, block.number, randSeed));\r\n    return rand %= (10 ** 6);\r\n  }\r\n\r\n  function _updateSeed() private {\r\n    randSeed = _rand();\r\n  }\r\n\r\n  function viewRand() public view returns(uint256) {\r\n    return randToAddress[msg.sender];\r\n  }\r\n\r\n  function getTransfer(bytes32 _password, uint256 _number) public {\r\n    require(password[sha3(_password, _number)].amount > 0);\r\n\r\n    bytes32 pass = sha3(_password, _number);\r\n    address from = password[pass].from;\r\n    uint256 amount = password[pass].amount;\r\n    amount = amount.sub(commissionFee);\r\n    totalFee = totalFee.add(commissionFee);\r\n\r\n    _updateSeed();\r\n\r\n    password[pass].amount = 0;\r\n\r\n    msg.sender.transfer(amount);\r\n\r\n    emit LogGetTransfer(from, msg.sender, amount);\r\n  }\r\n\r\n  function withdrawFee() public payable onlyOwner {\r\n    require( totalFee > 0);\r\n\r\n    uint256 fee = totalFee;\r\n    totalFee = 0;\r\n\r\n    owner.transfer(fee);\r\n  }\r\n\r\n  function withdraw() public payable onlyOwner {\r\n    owner.transfer(this.balance);\r\n  }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"changeCommissionFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewRand\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_password\",\"type\":\"bytes32\"},{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"getTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_password\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogChangeCommissionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"exOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogGetTransfer\",\"type\":\"event\"}]","ContractName":"PasswordEscrow","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://7c9d744b374cf60d0260b6194b18b14d80ad7c62d091dc64a4e8ccc163d7efc3"}]}