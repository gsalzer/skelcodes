{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/Vault12LockedTokens.sol\r\n\r\ncontract Vault12LockedTokens {\r\n    using SafeMath for uint256;\r\n    uint256 constant internal SECONDS_PER_YEAR = 31561600;\r\n\r\n    modifier onlyV12MultiSig {\r\n        require(msg.sender == v12MultiSig, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidAddress(address _recipient) {\r\n        require(_recipient != address(0) && _recipient != address(this) && _recipient != address(token), \"not valid _recipient\");\r\n        _;\r\n    }\r\n\r\n    struct Grant {\r\n        uint256 startTime;\r\n        uint256 amount;\r\n        uint256 vestingDuration;\r\n        uint256 yearsClaimed;\r\n        uint256 totalClaimed;\r\n    }\r\n\r\n    event GrantAdded(address recipient, uint256 amount);\r\n    event GrantTokensClaimed(address recipient, uint256 amountClaimed);\r\n    event ChangedMultisig(address multisig);\r\n\r\n    ERC20 public token;\r\n    \r\n    mapping (address => Grant) public tokenGrants;\r\n    address public v12MultiSig;\r\n\r\n    constructor(ERC20 _token) public {\r\n        require(address(_token) != address(0));\r\n        v12MultiSig = msg.sender;\r\n        token = _token;\r\n    }\r\n    \r\n    function addTokenGrant(\r\n        address _recipient,\r\n        uint256 _startTime,\r\n        uint256 _amount,\r\n        uint256 _vestingDurationInYears\r\n    )\r\n        onlyV12MultiSig\r\n        onlyValidAddress(_recipient)\r\n        external\r\n    {\r\n        require(!grantExist(_recipient), \"grant already exist\");\r\n        require(_vestingDurationInYears <= 25, \"more than 25 years\");\r\n        uint256 amountVestedPerYear = _amount.div(_vestingDurationInYears);\r\n        require(amountVestedPerYear > 0, \"amountVestedPerYear > 0\");\r\n\r\n        // Transfer the grant tokens under the control of the vesting contract\r\n        require(token.transferFrom(msg.sender, address(this), _amount), \"transfer failed\");\r\n\r\n        Grant memory grant = Grant({\r\n            startTime: _startTime == 0 ? currentTime() : _startTime,\r\n            amount: _amount,\r\n            vestingDuration: _vestingDurationInYears,\r\n            yearsClaimed: 0,\r\n            totalClaimed: 0\r\n        });\r\n        tokenGrants[_recipient] = grant;\r\n        emit GrantAdded(_recipient, _amount);\r\n    }\r\n\r\n    /// @notice Calculate the vested and unclaimed months and tokens available for `_grantId` to claim\r\n    /// Due to rounding errors once grant duration is reached, returns the entire left grant amount\r\n    /// Returns (0, 0) if cliff has not been reached\r\n    function calculateGrantClaim(address _recipient) public view returns (uint256, uint256) {\r\n        Grant storage tokenGrant = tokenGrants[_recipient];\r\n\r\n        // For grants created with a future start date, that hasn't been reached, return 0, 0\r\n        if (currentTime() < tokenGrant.startTime) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint256 elapsedTime = currentTime().sub(tokenGrant.startTime);\r\n        uint256 elapsedYears = elapsedTime.div(SECONDS_PER_YEAR);\r\n        \r\n        // If over vesting duration, all tokens vested\r\n        if (elapsedYears >= tokenGrant.vestingDuration) {\r\n            uint256 remainingGrant = tokenGrant.amount.sub(tokenGrant.totalClaimed);\r\n            uint256 remainingYears = tokenGrant.vestingDuration.sub(tokenGrant.yearsClaimed);\r\n            return (remainingYears, remainingGrant);\r\n        } else {\r\n            uint256 i = 0;\r\n            uint256 tokenGrantAmount = tokenGrant.amount;\r\n            uint256 totalVested = 0;\r\n            for(i; i < elapsedYears; i++){\r\n                totalVested = (tokenGrantAmount.mul(10)).div(100).add(totalVested); \r\n                tokenGrantAmount = tokenGrant.amount.sub(totalVested);\r\n            }\r\n            uint256 amountVested = totalVested.sub(tokenGrant.totalClaimed);\r\n            return (elapsedYears, amountVested);\r\n        }\r\n    }\r\n\r\n    /// @notice Allows a grant recipient to claim their vested tokens. Errors if no tokens have vested\r\n    /// It is advised recipients check they are entitled to claim via `calculateGrantClaim` before calling this\r\n    function claimVestedTokens(address _recipient) external {\r\n        uint256 yearsVested;\r\n        uint256 amountVested;\r\n        (yearsVested, amountVested) = calculateGrantClaim(_recipient);\r\n        require(amountVested > 0, \"amountVested is 0\");\r\n\r\n        Grant storage tokenGrant = tokenGrants[_recipient];\r\n        tokenGrant.yearsClaimed = yearsVested;\r\n        tokenGrant.totalClaimed = tokenGrant.totalClaimed.add(amountVested);\r\n        \r\n        require(token.transfer(_recipient, amountVested), \"no tokens\");\r\n        emit GrantTokensClaimed(_recipient, amountVested);\r\n    }\r\n\r\n    function currentTime() public view returns(uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function changeMultiSig(address _newMultisig) \r\n        external \r\n        onlyV12MultiSig\r\n        onlyValidAddress(_newMultisig)\r\n    {\r\n        v12MultiSig = _newMultisig;\r\n        emit ChangedMultisig(_newMultisig);\r\n    }\r\n\r\n    function grantExist(address _recipient) public view returns(bool) {\r\n        return tokenGrants[_recipient].amount > 0;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"grantExist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMultisig\",\"type\":\"address\"}],\"name\":\"changeMultiSig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_vestingDurationInYears\",\"type\":\"uint256\"}],\"name\":\"addTokenGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"claimVestedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenGrants\",\"outputs\":[{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"name\":\"yearsClaimed\",\"type\":\"uint256\"},{\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v12MultiSig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"calculateGrantClaim\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GrantAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"GrantTokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"multisig\",\"type\":\"address\"}],\"name\":\"ChangedMultisig\",\"type\":\"event\"}]","ContractName":"Vault12LockedTokens","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cc394f10545aeef24483d2347b32a34a44f20e6f","Library":"","SwarmSource":"bzzr://763969cdc7571cead30ff9fa84d5f18984e3bf713f5288d7b0977e92e50c206c"}]}