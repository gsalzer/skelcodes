{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\r\n * See (https://github.com/OpenZeppelin/openzeppelin-solidity)\r\n */\r\ncontract ERC721Receiver {\r\n\r\n\t/**\r\n\t * @dev Magic value to be returned upon successful reception of an NFT.\r\n\t * Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n\t * which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n\t */\r\n\tbytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n\t/**\r\n\t * @notice Handle the receipt of an NFT\r\n\t * @dev The ERC721 smart contract calls this function on the recipient\r\n\t * after a `safetransfer`. This function MAY throw to revert and reject the\r\n\t * transfer. Return of other than the magic value MUST result in the\r\n\t * transaction being reverted.\r\n\t * Note: the contract address is always the message sender.\r\n\t * @param _operator The address which called `safeTransferFrom` function\r\n\t * @param _from The address which previously owned the token\r\n\t * @param _tokenId The NFT identifier which is being transferred\r\n\t * @param _data Additional data with no specified format\r\n\t * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n\t */\r\n\tfunction onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n}\r\n\r\n\r\n/**\r\n * @title PixelCon Market\r\n * @notice This is the main market contract for buying and selling PixelCons. Listings are created by transferring PixelCons to this contract through\r\n * the PixelCons contract. Listings can be removed from the market at any time. An admin user has the ability to change market parameters such as min \r\n * and max acceptable values, as well as the ability to lock the market from any new listings and/or purchases. The admin cannot prevent users from\r\n * removing their listings at any time.\r\n * @author PixelCons\r\n */\r\ncontract PixelConMarket is ERC721Receiver {\r\n\r\n\t/** @dev Different contract lock states */\r\n\tuint8 private constant LOCK_NONE = 0;\r\n\tuint8 private constant LOCK_NO_LISTING = 1;\r\n\tuint8 private constant LOCK_REMOVE_ONLY = 2;\r\n\r\n\t/** @dev Math constants */\r\n\tuint256 private constant WEI_PER_GWEI = 1000000000;\r\n\tuint256 private constant FEE_RATIO = 100000;\r\n\r\n\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t///////////////////////////////////////////////////////////// Structs ///////////////////////////////////////////////////////////////////////\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t/** @dev Market listing data */\r\n\tstruct Listing {\r\n\t\tuint64 startAmount; //gwei\r\n\t\tuint64 endAmount; //gwei\r\n\t\tuint64 startDate;\r\n\t\tuint64 duration;\r\n\t\t//// ^256bits ////\r\n\t\taddress seller;\r\n\t\tuint32 sellerIndex;\r\n\t\tuint64 forSaleIndex;\r\n\t}\r\n\r\n\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t///////////////////////////////////////////////////////////// Storage ///////////////////////////////////////////////////////////////////////\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t/** @dev Market modifiable parameters */\r\n\tuint32 internal devFee; //percent*100000\r\n\tuint32 internal priceUpdateInterval; //seconds\r\n\tuint32 internal startDateRoundValue; //seconds\r\n\tuint32 internal durationRoundValue; //seconds\r\n\tuint64 internal maxDuration; //seconds\r\n\tuint64 internal minDuration; //seconds\r\n\tuint256 internal maxPrice; //wei\r\n\tuint256 internal minPrice; //wei\r\n\r\n\t/** @dev Admin data */\r\n\tPixelCons internal pixelconsContract;\r\n\taddress internal admin;\r\n\tuint8 internal systemLock;\r\n\r\n\t////////////////// Listings //////////////////\r\n\r\n\t/** @dev Links a seller to the PixelCon indexes he/she has for sale */\r\n\tmapping(address => uint64[]) internal sellerPixelconIndexes;\r\n\r\n\t/** @dev Links a PixelCon index to market listing */\r\n\tmapping(uint64 => Listing) internal marketPixelconListings;\r\n\r\n\t/** @dev Keeps track of all PixelCons for sale by index */\r\n\tuint64[] internal forSalePixelconIndexes;\r\n\r\n\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t///////////////////////////////////////////////////////////// Events ////////////////////////////////////////////////////////////////////////\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t/** @dev Market listing events */\r\n\tevent Create(uint64 indexed _tokenIndex, address indexed _seller, uint256 _startPrice, uint256 _endPrice, uint64 _duration);\r\n\tevent Purchase(uint64 indexed _tokenIndex, address indexed _buyer, uint256 _price);\r\n\tevent Remove(uint64 indexed _tokenIndex, address indexed _operator);\r\n\r\n\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t/////////////////////////////////////////////////////////// Modifiers ///////////////////////////////////////////////////////////////////////\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t/**  @dev Requires sender be the designated admin */\r\n\tmodifier onlyAdmin {\r\n\t\trequire(msg.sender == admin, \"Only the admin can call this function\");\r\n\t\t_;\r\n\t}\r\n\r\n\t/** @dev Small validators for quick validation of function parameters */\r\n\tmodifier validAddress(address _address) {\r\n\t\trequire(_address != address(0), \"Invalid address\");\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t//////////////////////////////////////////////////////////// Market Admin ///////////////////////////////////////////////////////////////////\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t/**\r\n\t * @notice Contract constructor\r\n\t * @param _admin Admin address\r\n\t * @param _pixelconContract PixelCon contract address\r\n\t */\r\n\tconstructor(address _admin, address _pixelconContract) public \r\n\t{\r\n\t\trequire(_admin != address(0), \"Invalid address\");\r\n\t\trequire(_pixelconContract != address(0), \"Invalid address\");\r\n\t\tadmin = _admin;\r\n\t\tpixelconsContract = PixelCons(_pixelconContract);\r\n\t\tsystemLock = LOCK_REMOVE_ONLY;\r\n\r\n\t\t//default values\r\n\t\tdevFee = 1000;\r\n\t\tpriceUpdateInterval = 1 * 60 * 60;\r\n\t\tstartDateRoundValue = 5 * 60;\r\n\t\tdurationRoundValue = 5 * 60;\r\n\t\tmaxDuration = 30 * 24 * 60 * 60;\r\n\t\tminDuration = 1 * 24 * 60 * 60;\r\n\t\tmaxPrice = 100000000000000000000;\r\n\t\tminPrice = 1000000000000000;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Change the market admin\r\n\t * @dev Only the market admin can access this function\r\n\t * @param _newAdmin The new admin address\r\n\t */\r\n\tfunction adminChange(address _newAdmin) public onlyAdmin validAddress(_newAdmin) \r\n\t{\r\n\t\tadmin = _newAdmin;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Set the lock state of the market\r\n\t * @dev Only the market admin can access this function\r\n\t * @param _lock Flag for locking the market\r\n\t * @param _allowPurchase Flag for allowing purchases while locked\r\n\t */\r\n\tfunction adminSetLock(bool _lock, bool _allowPurchase) public onlyAdmin \r\n\t{\r\n\t\tif (_lock) {\r\n\t\t\tif (_allowPurchase) systemLock = LOCK_NO_LISTING;\r\n\t\t\telse systemLock = LOCK_REMOVE_ONLY;\r\n\t\t} else {\r\n\t\t\tsystemLock = LOCK_NONE;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Set the market parameters\r\n\t * @dev Only the market admin can access this function\r\n\t * @param _devFee Developer fee required to purchase market listing (percent*100000)\r\n\t * @param _priceUpdateInterval Amount of time before prices update (seconds)\r\n\t * @param _startDateRoundValue Value to round market listing start dates to (seconds)\r\n\t * @param _durationRoundValue Value to round market listing durations to (seconds)\r\n\t * @param _maxDuration Maximum market listing duration (seconds)\r\n\t * @param _minDuration Minimum market listing duration (seconds)\r\n\t * @param _maxPrice Maximum market listing price (wei)\r\n\t * @param _minPrice Minimum market listing price (wei)\r\n\t */\r\n\tfunction adminSetDetails(uint32 _devFee, uint32 _priceUpdateInterval, uint32 _startDateRoundValue, uint32 _durationRoundValue,\r\n\t\tuint64 _maxDuration, uint64 _minDuration, uint256 _maxPrice, uint256 _minPrice) public onlyAdmin \r\n\t{\r\n\t\tdevFee = _devFee;\r\n\t\tpriceUpdateInterval = _priceUpdateInterval;\r\n\t\tstartDateRoundValue = _startDateRoundValue;\r\n\t\tdurationRoundValue = _durationRoundValue;\r\n\t\tmaxDuration = _maxDuration;\r\n\t\tminDuration = _minDuration;\r\n\t\tmaxPrice = _maxPrice;\r\n\t\tminPrice = _minPrice;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Withdraw all contract funds to `(_to)`\r\n\t * @dev Only the market admin can access this function\r\n\t * @param _to Address to withdraw the funds to\r\n\t */\r\n\tfunction adminWithdraw(address _to) public onlyAdmin validAddress(_to) \r\n\t{\r\n\t\t_to.transfer(address(this).balance);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Close and destroy the market\r\n\t * @dev Only the market admin can access this function\r\n\t * @param _to Address to withdraw the funds to\r\n\t */\r\n\tfunction adminClose(address _to) public onlyAdmin validAddress(_to) \r\n\t{\r\n\t\trequire(forSalePixelconIndexes.length == uint256(0), \"Cannot close with active listings\");\r\n\t\tselfdestruct(_to);\r\n\t}\r\n\r\n\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t//////////////////////////////////////////////////////////// Market Core ////////////////////////////////////////////////////////////////////\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t/**\r\n\t * @notice Get all market parameters\r\n\t * @return All market parameters\r\n\t */\r\n\tfunction getMarketDetails() public view returns(uint32, uint32, uint32, uint32, uint64, uint64, uint256, uint256) \r\n\t{\r\n\t\treturn (devFee, priceUpdateInterval, startDateRoundValue, durationRoundValue, maxDuration, minDuration, maxPrice, minPrice);\r\n\t}\r\n\r\n\t////////////////// Listings //////////////////\r\n\r\n\t/**\r\n\t * @notice Create market listing\r\n\t * @dev This is an internal function called by the ERC721 receiver function during the safe transfer of a PixelCon\r\n\t * @param _seller Address of the seller\r\n\t * @param _tokenId TokenId of the PixelCon\r\n\t * @param _startPrice Start price of the listing (wei)\r\n\t * @param _endPrice End price of the listing (wei)\r\n\t * @param _duration Duration of the listing (seconds)\r\n\t */\r\n\tfunction makeListing(address _seller, uint256 _tokenId, uint256 _startPrice, uint256 _endPrice, uint256 _duration) internal \r\n\t{\r\n\t\trequire(_startPrice <= maxPrice, \"Start price is higher than the max allowed\");\r\n\t\trequire(_startPrice >= minPrice, \"Start price is lower than the min allowed\");\r\n\t\trequire(_endPrice <= maxPrice, \"End price is higher than the max allowed\");\r\n\t\trequire(_endPrice >= minPrice, \"End price is lower than the min allowed\");\r\n\r\n\t\t//convert price units from Wei to Gwei\r\n\t\t_startPrice = _startPrice / WEI_PER_GWEI;\r\n\t\t_endPrice = _endPrice / WEI_PER_GWEI;\r\n\t\trequire(_endPrice > uint256(0), \"End price cannot be zero (gwei)\");\r\n\t\trequire(_startPrice >= _endPrice, \"Start price is lower than the end price\");\r\n\t\trequire(_startPrice < uint256(2 ** 64), \"Start price is out of bounds\");\r\n\t\trequire(_endPrice < uint256(2 ** 64), \"End price is out of bounds\");\r\n\r\n\t\t//calculate the start date\r\n\t\tuint256 startDate = (now / uint256(startDateRoundValue)) * uint256(startDateRoundValue);\r\n\t\trequire(startDate < uint256(2 ** 64), \"Start date is out of bounds\");\r\n\r\n\t\t//round the duration value\r\n\t\t_duration = (_duration / uint256(durationRoundValue)) * uint256(durationRoundValue);\r\n\t\trequire(_duration > uint256(0), \"Duration cannot be zero\");\r\n\t\trequire(_duration <= uint256(maxDuration), \"Duration is higher than the max allowed\");\r\n\t\trequire(_duration >= uint256(minDuration), \"Duration is lower than the min allowed\");\r\n\r\n\t\t//get pixelcon index\r\n\t\tuint64 pixelconIndex = pixelconsContract.getTokenIndex(_tokenId);\r\n\r\n\t\t//create the listing object\r\n\t\tListing storage listing = marketPixelconListings[pixelconIndex];\r\n\t\tlisting.startAmount = uint64(_startPrice);\r\n\t\tlisting.endAmount = uint64(_endPrice);\r\n\t\tlisting.startDate = uint64(startDate);\r\n\t\tlisting.duration = uint64(_duration);\r\n\t\tlisting.seller = _seller;\r\n\r\n\t\t//store references\r\n\t\tuint64[] storage sellerTokens = sellerPixelconIndexes[_seller];\r\n\t\tuint sellerTokensIndex = sellerTokens.length;\r\n\t\tuint forSaleIndex = forSalePixelconIndexes.length;\r\n\t\trequire(sellerTokensIndex < uint256(2 ** 32 - 1), \"Max number of market listings has been exceeded for seller\");\r\n\t\trequire(forSaleIndex < uint256(2 ** 64 - 1), \"Max number of market listings has been exceeded\");\r\n\t\tlisting.sellerIndex = uint32(sellerTokensIndex);\r\n\t\tlisting.forSaleIndex = uint64(forSaleIndex);\r\n\t\tsellerTokens.length++;\r\n\t\tsellerTokens[sellerTokensIndex] = pixelconIndex;\r\n\t\tforSalePixelconIndexes.length++;\r\n\t\tforSalePixelconIndexes[forSaleIndex] = pixelconIndex;\r\n\t\temit Create(pixelconIndex, _seller, _startPrice, _endPrice, uint64(_duration));\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Check if a market listing exists for PixelCon #`(_pixelconIndex)`\r\n\t * @param _pixelconIndex Index of the PixelCon to check\r\n\t * @return True if market listing exists\r\n\t */\r\n\tfunction exists(uint64 _pixelconIndex) public view returns(bool) \r\n\t{\r\n\t\treturn (marketPixelconListings[_pixelconIndex].seller != address(0));\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Get the current total number of market listings\r\n\t * @return Number of current market listings\r\n\t */\r\n\tfunction totalListings() public view returns(uint256) \r\n\t{\r\n\t\treturn forSalePixelconIndexes.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Get the details of the market listings for PixelCon #`(_pixelconIndex)`\r\n\t * @dev Throws if market listing does not exist\r\n\t * @param _pixelconIndex Index of the PixelCon to get details for\r\n\t * @return All market listing data\r\n\t */\r\n\tfunction getListing(uint64 _pixelconIndex) public view returns(address _seller, uint256 _startPrice, uint256 _endPrice, uint256 _currPrice,\r\n\t\tuint64 _startDate, uint64 _duration, uint64 _timeLeft) \r\n\t{\r\n\t\tListing storage listing = marketPixelconListings[_pixelconIndex];\r\n\t\trequire(listing.seller != address(0), \"Market listing does not exist\");\r\n\r\n\t\t//return all data\r\n\t\t_seller = listing.seller;\r\n\t\t_startPrice = uint256(listing.startAmount) * WEI_PER_GWEI;\r\n\t\t_endPrice = uint256(listing.endAmount) * WEI_PER_GWEI;\r\n\t\t_currPrice = calcCurrentPrice(uint256(listing.startAmount), uint256(listing.endAmount), uint256(listing.startDate), uint256(listing.duration));\r\n\t\t_startDate = listing.startDate;\r\n\t\t_duration = listing.duration;\r\n\t\t_timeLeft = calcTimeLeft(uint256(listing.startDate), uint256(listing.duration));\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Remove the PixelCon #`(_pixelconIndex)` listing from the market\r\n\t * @dev Throws if market listing does not exist or if the sender is not the seller/admin\r\n\t * @param _pixelconIndex Index of the PixelCon to remove listing for\r\n\t */\r\n\tfunction removeListing(uint64 _pixelconIndex) public \r\n\t{\r\n\t\tListing storage listing = marketPixelconListings[_pixelconIndex];\r\n\t\trequire(listing.seller != address(0), \"Market listing does not exist\");\r\n\t\trequire(msg.sender == listing.seller || msg.sender == admin, \"Insufficient permissions\");\r\n\r\n\t\t//get data\r\n\t\tuint256 tokenId = pixelconsContract.tokenByIndex(_pixelconIndex);\r\n\t\taddress seller = listing.seller;\r\n\r\n\t\t//clear the listing from storage\r\n\t\tclearListingData(seller, _pixelconIndex);\r\n\r\n\t\t//transfer pixelcon back to seller\r\n\t\tpixelconsContract.transferFrom(address(this), seller, tokenId);\r\n\t\temit Remove(_pixelconIndex, msg.sender);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Purchase PixelCon #`(_pixelconIndex)` to address `(_to)`\r\n\t * @dev Throws if market listing does not exist or if the market is locked\r\n\t * @param _to Address to send the PixelCon to\r\n\t * @param _pixelconIndex Index of the PixelCon to purchase\r\n\t */\r\n\tfunction purchase(address _to, uint64 _pixelconIndex) public payable validAddress(_to) \r\n\t{\r\n\t\tListing storage listing = marketPixelconListings[_pixelconIndex];\r\n\t\trequire(systemLock != LOCK_REMOVE_ONLY, \"Market is currently locked\");\r\n\t\trequire(listing.seller != address(0), \"Market listing does not exist\");\r\n\t\trequire(listing.seller != msg.sender, \"Seller cannot purchase their own listing\");\r\n\r\n\t\t//calculate current price based on the time\r\n\t\tuint256 currPrice = calcCurrentPrice(uint256(listing.startAmount), uint256(listing.endAmount), uint256(listing.startDate), uint256(listing.duration));\r\n\t\trequire(currPrice != uint256(0), \"Market listing has expired\");\r\n\t\trequire(msg.value >= currPrice + (currPrice * uint256(devFee)) / FEE_RATIO, \"Insufficient value sent\");\r\n\r\n\t\t//get data\r\n\t\tuint256 tokenId = pixelconsContract.tokenByIndex(_pixelconIndex);\r\n\t\taddress seller = listing.seller;\r\n\r\n\t\t//clear the listing from storage\r\n\t\tclearListingData(seller, _pixelconIndex);\r\n\r\n\t\t//transfer pixelcon to buyer and value to seller\r\n\t\tpixelconsContract.transferFrom(address(this), _to, tokenId);\r\n\t\tseller.transfer(currPrice);\r\n\t\temit Purchase(_pixelconIndex, msg.sender, currPrice);\r\n\t}\r\n\r\n\t////////////////// Web3 Only //////////////////\r\n\r\n\t/**\r\n\t * @notice Get market listing data for the given indexes\r\n\t * @dev This function is for web3 calls only, as it returns a dynamic array\r\n\t * @param _indexes PixelCon indexes to get market listing details for\r\n\t * @return Market listing data for the given indexes\r\n\t */\r\n\tfunction getBasicData(uint64[] _indexes) public view returns(uint64[], address[], uint256[], uint64[]) \r\n\t{\r\n\t\tuint64[] memory tokenIndexes = new uint64[](_indexes.length);\r\n\t\taddress[] memory sellers = new address[](_indexes.length);\r\n\t\tuint256[] memory currPrices = new uint256[](_indexes.length);\r\n\t\tuint64[] memory timeLeft = new uint64[](_indexes.length);\r\n\r\n\t\tfor (uint i = 0; i < _indexes.length; i++) {\r\n\t\t\tListing storage listing = marketPixelconListings[_indexes[i]];\r\n\t\t\tif (listing.seller != address(0)) {\r\n\t\t\t\t//listing exists\r\n\t\t\t\ttokenIndexes[i] = _indexes[i];\r\n\t\t\t\tsellers[i] = listing.seller;\r\n\t\t\t\tcurrPrices[i] = calcCurrentPrice(uint256(listing.startAmount), uint256(listing.endAmount), uint256(listing.startDate), uint256(listing.duration));\r\n\t\t\t\ttimeLeft[i] = calcTimeLeft(uint256(listing.startDate), uint256(listing.duration));\r\n\t\t\t} else {\r\n\t\t\t\t//listing does not exist\r\n\t\t\t\ttokenIndexes[i] = 0;\r\n\t\t\t\tsellers[i] = 0;\r\n\t\t\t\tcurrPrices[i] = 0;\r\n\t\t\t\ttimeLeft[i] = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (tokenIndexes, sellers, currPrices, timeLeft);\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Get all PixelCon indexes being sold by `(_seller)`\r\n\t * @dev This function is for web3 calls only, as it returns a dynamic array\r\n\t * @param _seller Address of seller to get selling PixelCon indexes for\r\n\t * @return All PixelCon indexes being sold by the given seller\r\n\t */\r\n\tfunction getForSeller(address _seller) public view validAddress(_seller) returns(uint64[]) \r\n\t{\r\n\t\treturn sellerPixelconIndexes[_seller];\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Get all PixelCon indexes being sold on the market\r\n\t * @dev This function is for web3 calls only, as it returns a dynamic array\r\n\t * @return All PixelCon indexes being sold on the market\r\n\t */\r\n\tfunction getAllListings() public view returns(uint64[]) \r\n\t{\r\n\t\treturn forSalePixelconIndexes;\r\n\t}\r\n\r\n\t/**\r\n\t * @notice Get the PixelCon indexes being sold from listing index `(_startIndex)` to `(_endIndex)`\r\n\t * @dev This function is for web3 calls only, as it returns a dynamic array\r\n\t * @return The PixelCon indexes being sold in the given range\r\n\t */\r\n\tfunction getListingsInRange(uint64 _startIndex, uint64 _endIndex) public view returns(uint64[])\r\n\t{\r\n\t\trequire(_startIndex <= totalListings(), \"Start index is out of bounds\");\r\n\t\trequire(_endIndex <= totalListings(), \"End index is out of bounds\");\r\n\t\trequire(_startIndex <= _endIndex, \"End index is less than the start index\");\r\n\r\n\t\tuint64 length = _endIndex - _startIndex;\r\n\t\tuint64[] memory indexes = new uint64[](length);\r\n\t\tfor (uint i = 0; i < length; i++)\t{\r\n\t\t\tindexes[i] = forSalePixelconIndexes[_startIndex + i];\r\n\t\t}\r\n\t\treturn indexes;\r\n\t}\r\n\r\n\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t////////////////////////////////////////////////// ERC-721 Receiver Implementation //////////////////////////////////////////////////////////\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t/**\r\n\t * @notice Handle ERC721 token transfers\r\n\t * @dev This function only accepts tokens from the PixelCons contracts and expects parameter data stuffed into the bytes\r\n\t * @param _operator Address of who is doing the transfer\r\n\t * @param _from Address of the last owner\r\n\t * @param _tokenId Id of the token being received\r\n\t * @param _data Miscellaneous data related to the transfer\r\n\t * @return The ERC721 safe transfer receive confirmation\r\n\t */\r\n\tfunction onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) public returns(bytes4) \r\n\t{\r\n\t\t//only receive tokens from the PixelCons contract\r\n\t\trequire(systemLock == LOCK_NONE, \"Market is currently locked\");\r\n\t\trequire(msg.sender == address(pixelconsContract), \"Market only accepts transfers from the PixelCons contract\");\r\n\t\trequire(_tokenId != uint256(0), \"Invalid token ID\");\r\n\t\trequire(_operator != address(0), \"Invalid operator address\");\r\n\t\trequire(_from != address(0), \"Invalid from address\");\r\n\r\n\t\t//extract parameters from byte array\r\n\t\trequire(_data.length == 32 * 3, \"Incorrectly formatted data\");\r\n\t\tuint256 startPrice;\r\n\t\tuint256 endPrice;\r\n\t\tuint256 duration;\r\n\t\tassembly {\r\n\t\t\tstartPrice := mload(add(_data, 0x20))\r\n\t\t\tendPrice := mload(add(_data, 0x40))\r\n\t\t\tduration := mload(add(_data, 0x60))\r\n\t\t}\r\n\r\n\t\t//add listing for the received token\r\n\t\tmakeListing(_from, _tokenId, startPrice, endPrice, duration);\r\n\r\n\t\t//all good\r\n\t\treturn ERC721_RECEIVED;\r\n\t}\r\n\r\n\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\t////////////////////////////////////////////////////////////// Utils ////////////////////////////////////////////////////////////////////////\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\t/**\r\n\t * @dev Clears the listing data for the given PixelCon index and seller address\r\n\t * @param _seller Address of the seller to clear listing data for\r\n\t * @param _pixelconIndex Index of the PixelCon to clear listing data for\r\n\t */\r\n\tfunction clearListingData(address _seller, uint64 _pixelconIndex) internal \r\n\t{\r\n\t\tListing storage listing = marketPixelconListings[_pixelconIndex];\r\n\r\n\t\t//clear sellerPixelconIndexes reference\r\n\t\tuint64[] storage sellerTokens = sellerPixelconIndexes[_seller];\r\n\t\tuint64 replacementSellerTokenIndex = sellerTokens[sellerTokens.length - 1];\r\n\t\tdelete sellerTokens[sellerTokens.length - 1];\r\n\t\tsellerTokens.length--;\r\n\t\tif (listing.sellerIndex < sellerTokens.length) {\r\n\t\t\t//we just removed the last token index in the array, but if this wasn't the one to remove, then swap it with the one to remove \r\n\t\t\tsellerTokens[listing.sellerIndex] = replacementSellerTokenIndex;\r\n\t\t\tmarketPixelconListings[replacementSellerTokenIndex].sellerIndex = listing.sellerIndex;\r\n\t\t}\r\n\r\n\t\t//clear forSalePixelconIndexes reference\r\n\t\tuint64 replacementForSaleTokenIndex = forSalePixelconIndexes[forSalePixelconIndexes.length - 1];\r\n\t\tdelete forSalePixelconIndexes[forSalePixelconIndexes.length - 1];\r\n\t\tforSalePixelconIndexes.length--;\r\n\t\tif (listing.forSaleIndex < forSalePixelconIndexes.length) {\r\n\t\t\t//we just removed the last token index in the array, but if this wasn't the one to remove, then swap it with the one to remove \r\n\t\t\tforSalePixelconIndexes[listing.forSaleIndex] = replacementForSaleTokenIndex;\r\n\t\t\tmarketPixelconListings[replacementForSaleTokenIndex].forSaleIndex = listing.forSaleIndex;\r\n\t\t}\r\n\r\n\t\t//clear the listing object \r\n\t\tdelete marketPixelconListings[_pixelconIndex];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculates the current price of a listing given all its details\r\n\t * @param _startAmount Market listing start price amount (gwei)\r\n\t * @param _endAmount Market listing end price amount (gwei)\r\n\t * @param _startDate Market listing start date (seconds)\r\n\t * @param _duration Market listing duration (seconds)\r\n\t * @return The current listing price (wei)\r\n\t */\r\n\tfunction calcCurrentPrice(uint256 _startAmount, uint256 _endAmount, uint256 _startDate, uint256 _duration) internal view returns(uint256) \r\n\t{\r\n\t\tuint256 timeDelta = now - _startDate;\r\n\t\tif (timeDelta > _duration) return uint256(0);\r\n\r\n\t\ttimeDelta = timeDelta / uint256(priceUpdateInterval);\r\n\t\tuint256 durationTotal = _duration / uint256(priceUpdateInterval);\r\n\t\treturn (_startAmount - ((_startAmount - _endAmount) * timeDelta) / durationTotal) * WEI_PER_GWEI;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Calculates the total time left for a listing given its details\r\n\t * @param _startDate Market listing start date (seconds)\r\n\t * @param _duration Market listing duration (seconds)\r\n\t * @return Time left before market listing ends (seconds)\r\n\t */\r\n\tfunction calcTimeLeft(uint256 _startDate, uint256 _duration) internal view returns(uint64) \r\n\t{\r\n\t\tuint256 timeDelta = now - _startDate;\r\n\t\tif (timeDelta > _duration) return uint64(0);\r\n\r\n\t\treturn uint64(_duration - timeDelta);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @title PixelCons (Sub-set interface)\r\n * @notice ERC721 token contract\r\n * @dev This is a subset of the PixelCon Core contract\r\n * @author PixelCons\r\n */\r\ncontract PixelCons {\r\n\r\n\t/**\r\n\t * @notice Transfer the ownership of PixelCon `(_tokenId)` to `(_to)`\r\n\t * @dev Throws if the sender is not the owner, approved, or operator\r\n\t * @param _from Current owner\r\n\t * @param _to Address to receive the PixelCon\r\n\t * @param _tokenId ID of the PixelCon to be transferred\r\n\t */\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n\t\r\n\t/**\r\n\t * @notice Get the index of PixelCon `(_tokenId)`\r\n\t * @dev Throws if PixelCon does not exist\r\n\t * @param _tokenId ID of the PixelCon to query the index of\r\n\t * @return Index of the given PixelCon ID\r\n\t */\r\n\tfunction getTokenIndex(uint256 _tokenId) public view returns(uint64);\r\n\r\n\t/**\r\n\t * @notice Get the ID of PixelCon #`(_tokenIndex)`\r\n\t * @dev Throws if index is out of bounds\r\n\t * @param _tokenIndex Counter less than `totalSupply()`\r\n\t * @return `_tokenIndex`th PixelCon ID\r\n\t */\r\n\tfunction tokenByIndex(uint256 _tokenIndex) public view returns(uint256);\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"adminClose\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pixelconIndex\",\"type\":\"uint64\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_startIndex\",\"type\":\"uint64\"},{\"name\":\"_endIndex\",\"type\":\"uint64\"}],\"name\":\"getListingsInRange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lock\",\"type\":\"bool\"},{\"name\":\"_allowPurchase\",\"type\":\"bool\"}],\"name\":\"adminSetLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMarketDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint32\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_devFee\",\"type\":\"uint32\"},{\"name\":\"_priceUpdateInterval\",\"type\":\"uint32\"},{\"name\":\"_startDateRoundValue\",\"type\":\"uint32\"},{\"name\":\"_durationRoundValue\",\"type\":\"uint32\"},{\"name\":\"_maxDuration\",\"type\":\"uint64\"},{\"name\":\"_minDuration\",\"type\":\"uint64\"},{\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"}],\"name\":\"adminSetDetails\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"adminChange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_pixelconIndex\",\"type\":\"uint64\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pixelconIndex\",\"type\":\"uint64\"}],\"name\":\"removeListing\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllListings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalListings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"getForSeller\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_indexes\",\"type\":\"uint64[]\"}],\"name\":\"getBasicData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint64[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pixelconIndex\",\"type\":\"uint64\"}],\"name\":\"getListing\",\"outputs\":[{\"name\":\"_seller\",\"type\":\"address\"},{\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"name\":\"_currPrice\",\"type\":\"uint256\"},{\"name\":\"_startDate\",\"type\":\"uint64\"},{\"name\":\"_duration\",\"type\":\"uint64\"},{\"name\":\"_timeLeft\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_pixelconContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenIndex\",\"type\":\"uint64\"},{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_endPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_duration\",\"type\":\"uint64\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenIndex\",\"type\":\"uint64\"},{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_tokenIndex\",\"type\":\"uint64\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"Remove\",\"type\":\"event\"}]","ContractName":"PixelConMarket","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000009f2fedfff291314e5a86661e5ed5e6f12e36dd370000000000000000000000005536b6aadd29eaf0db112bb28046a5fad3761bd4","Library":"","SwarmSource":"bzzr://6cba43cf25360c1ee0dbda80a9fd61e22d1709d896ed5e968f0ed3465314c700"}]}