{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/ERC20.sol\r\n// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/ERC20Basic.sol\r\n// \r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function allowance(address approver, address spender) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed approver, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n//\r\n// base contract for all our horizon contracts and tokens\r\n//\r\ncontract HorizonContractBase {\r\n    // The owner of the contract, set at contract creation to the creator.\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Contract authorization - only allow the owner to perform certain actions.\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n \r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n *\r\n * Source: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * VOXToken trader contract for the Talketh.io ICO by Horizon-Globex.com of Switzerland.\r\n *\r\n * Author: Horizon Globex GmbH Development Team\r\n *\r\n */\r\n\r\n\r\ncontract VOXTrader is HorizonContractBase {\r\n    using SafeMath for uint256;\r\n\r\n    struct TradeOrder {\r\n        uint256 quantity;\r\n        uint256 price;\r\n        uint256 expiry;\r\n    }\r\n\r\n    // The owner of this contract.\r\n    address public owner;\r\n\r\n    // The balances of all accounts.\r\n    mapping (address => TradeOrder) public orderBook;\r\n\r\n    // The contract containing the tokens that we trade.\r\n    address public tokenContract;\r\n\r\n    // The price paid for the last sale of tokens on this contract.\r\n    uint256 public lastSellPrice;\r\n\r\n    // The lowest price an asks can be placed.\r\n    uint256 public sellCeiling;\r\n\r\n    // The highest price an ask can be placed.\r\n    uint256 public sellFloor;\r\n\r\n    // The percentage taken off transferred tokens during a buy.\r\n    uint256 public tokenFeePercent;\r\n    \r\n    // The minimum fee when buying tokens (if the calculated percent is less than this value);\r\n    uint256 public tokenFeeMin;\r\n    \r\n    // The percentage taken off the cost of buying tokens in Ether.\r\n    uint256 public etherFeePercent;\r\n    \r\n    // The minimum Ether fee when buying tokens (if the calculated percent is less than this value);\r\n    uint256 public etherFeeMin;\r\n\r\n    // A sell order was put into the order book.\r\n    event TokensOffered(address indexed who, uint256 quantity, uint256 price, uint256 expiry);\r\n\r\n    // A user bought tokens from another user.\r\n    event TokensPurchased(address indexed purchaser, address indexed seller, uint256 quantity, uint256 price);\r\n\r\n    // A user bought phone credit using a top-up voucher, buy VOX Tokens on thier behalf to convert to phone credit.\r\n    event VoucherRedeemed(uint256 voucherCode, address voucherOwner, address tokenSeller, uint256 quantity);\r\n\r\n\r\n    /**\r\n     * @notice Set owner and the target ERC20 contract containing the tokens it trades.\r\n     *\r\n     * @param tokenContract_    The ERC20 contract whose tokens this contract trades.\r\n     */\r\n    constructor(address tokenContract_) public {\r\n        owner = msg.sender;\r\n        tokenContract = tokenContract_;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the trade order for the specified address.\r\n     *\r\n     * @param who    The address to get the trade order of.\r\n     */\r\n    function getOrder(address who) public view returns (uint256 quantity, uint256 price, uint256 expiry) {\r\n        TradeOrder memory order = orderBook[who];\r\n        return (order.quantity, order.price, order.expiry);\r\n    }\r\n\r\n    /**\r\n     * @notice Offer tokens for sale, you must call approve on the ERC20 contract first, giving approval to\r\n     * the address of this contract.\r\n     *\r\n     * @param quantity  The number of tokens to offer for sale.\r\n     * @param price     The unit price of the tokens.\r\n     * @param expiry    The date and time this order ends.\r\n     */\r\n    function sell(uint256 quantity, uint256 price, uint256 expiry) public {\r\n        require(quantity > 0, \"You must supply a quantity.\");\r\n        require(price > 0, \"The sale price cannot be zero.\");\r\n        require(expiry > block.timestamp, \"Cannot have an expiry date in the past.\");\r\n        require(price >= sellFloor, \"The ask is below the minimum allowed.\");\r\n        require(sellCeiling == 0 || price <= sellCeiling, \"The ask is above the maximum allowed.\");\r\n\t\t//require(!willLosePrecision(quantity), \"The ask quantity will lose precision when multiplied by price, the bottom 9 digits must be zeroes.\");\r\n\t\t//require(!willLosePrecision(price), \"The ask price will lose precision when multiplied by quantity, the bottom 9 digits must be zeroes.\");\r\n\r\n        uint256 allowed = ERC20Interface(tokenContract).allowance(msg.sender, this);\r\n        require(allowed >= quantity, \"You must approve the transfer of tokens before offering them for sale.\");\r\n\r\n        uint256 balance = ERC20Interface(tokenContract).balanceOf(msg.sender);\r\n        require(balance >= quantity, \"Not enough tokens owned to complete the order.\");\r\n\r\n        orderBook[msg.sender] = TradeOrder(quantity, price, expiry);\r\n        emit TokensOffered(msg.sender, quantity, price, expiry);\r\n    }\r\n\r\n    /**\r\n     * @notice Buy tokens from an existing sell order.\r\n     *\r\n     * @param seller    The current owner of the tokens for sale.\r\n     * @param quantity  The number of tokens to buy.\r\n     * @param price     The ask price of the tokens.\r\n    */\r\n    function buy(address seller, uint256 quantity, uint256 price) public payable {\r\n        TradeOrder memory order = orderBook[seller];\r\n        require(order.price == price, \"Buy price does not match the listed sell price.\");\r\n        require(block.timestamp < order.expiry, \"Sell order has expired.\");\r\n\r\n        uint256 tradeQuantity = order.quantity > quantity ? quantity : order.quantity;\r\n        uint256 cost = multiplyAtPrecision(tradeQuantity, order.price, 9);\r\n        require(msg.value >= cost, \"You did not send enough Ether to purchase the tokens.\");\r\n\r\n        uint256 tokenFee;\r\n        uint256 etherFee;\r\n        (tokenFee, etherFee) = calculateFee(tradeQuantity, cost);\r\n\r\n        if(!ERC20Interface(tokenContract).transferFrom(seller, msg.sender, tradeQuantity.sub(tokenFee))) {\r\n            revert(\"Unable to transfer tokens from seller to buyer.\");\r\n        }\r\n\r\n        // Send any tokens taken as fees to the owner account to be burned.\r\n        if(tokenFee > 0 && !ERC20Interface(tokenContract).transferFrom(seller, owner, tokenFee)) {\r\n            revert(\"Unable to transfer tokens from seller to buyer.\");\r\n        }\r\n\r\n        // Deduct the sold tokens from the sell order.\r\n        order.quantity = order.quantity.sub(tradeQuantity);\r\n        orderBook[seller] = order;\r\n\r\n        // Pay the seller.\r\n        seller.transfer(cost.sub(etherFee));\r\n        if(etherFee > 0)\r\n            owner.transfer(etherFee);\r\n\r\n        lastSellPrice = price;\r\n\r\n        emit TokensPurchased(msg.sender, seller, tradeQuantity, price);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the percent fee applied to tokens that are transferred.\r\n     *\r\n     * @param percent   The new percentage value at 18 decimal places.\r\n     */\r\n    function setTokenFeePercent(uint256 percent) public onlyOwner {\r\n        require(percent <= 100000000000000000000, \"Percent must be between 0 and 100.\");\r\n        tokenFeePercent = percent;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the minimum number of tokens to be deducted during a buy.\r\n     *\r\n     * @param min   The new minimum value.\r\n     */\r\n    function setTokenFeeMin(uint256 min) public onlyOwner {\r\n        tokenFeeMin = min;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the percent fee applied to the Ether used to pay for tokens.\r\n     *\r\n     * @param percent   The new percentage value at 18 decimal places.\r\n     */\r\n    function setEtherFeePercent(uint256 percent) public onlyOwner {\r\n        require(percent <= 100000000000000000000, \"Percent must be between 0 and 100.\");\r\n        etherFeePercent = percent;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the minimum amount of Ether to be deducted during a buy.\r\n     *\r\n     * @param min   The new minimum value.\r\n     */\r\n    function setEtherFeeMin(uint256 min) public onlyOwner {\r\n        etherFeeMin = min;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the company's fee for facilitating the transfer of tokens.  The fee can be deducted\r\n     * from the number of tokens the buyer purchased or the amount of ether being paid to the seller or both.\r\n     *\r\n     * @param tokens    The number of tokens being transferred.\r\n     * @param ethers    The amount of Ether to pay for the tokens.\r\n     * @return tokenFee The number of tokens taken as a fee during a transfer.\r\n     * @return etherFee The amount of Ether taken as a fee during a transfer. \r\n     */\r\n    function calculateFee(uint256 tokens, uint256 ethers) public view returns (uint256 tokenFee, uint256 etherFee) {\r\n        tokenFee = multiplyAtPrecision(tokens, tokenFeePercent / 100, 9);\r\n        if(tokenFee < tokenFeeMin)\r\n            tokenFee = tokenFeeMin;\r\n\r\n        etherFee = multiplyAtPrecision(ethers, etherFeePercent / 100, 9);\r\n        if(etherFee < etherFeeMin)\r\n            etherFee = etherFeeMin;            \r\n\r\n        return (tokenFee, etherFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Buy from multiple sellers at once to fill a single large order.\r\n     *\r\n     * @dev This function is to reduce the transaction costs and to make the purchase a single transaction.\r\n     *\r\n     * @param sellers       The list of sellers whose tokens make up this buy.\r\n     * @param lastQuantity  The quantity of tokens to buy from the last seller on the list (the other asks\r\n     *                      are bought in full).\r\n     */\r\n    function multiBuy(address[] sellers, uint256 lastQuantity) public payable {\r\n\r\n        for (uint i = 0; i < sellers.length; i++) {\r\n            TradeOrder memory to = orderBook[sellers[i]];\r\n            if(i == sellers.length-1) {\r\n                buy(sellers[i], lastQuantity, to.price);\r\n            }\r\n            else {\r\n                buy(sellers[i], to.quantity, to.price);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice A user has redeemed a top-up voucher for phone credit.  This is executed by the owner as it is an internal process\r\n     * to convert a voucher to phone credit via VOX Tokens.\r\n     *\r\n     * @param voucherCode   The code on the e.g. scratch card that is to be redeemed for call credit.\r\n     * @param voucherOwner  The wallet id of the user redeeming the voucher.\r\n     * @param tokenSeller   The wallet id selling the VOX Tokens that are converted to phone crdit.\r\n     * @param quantity      The number of vouchers to purchase on behalf of the voucher owner to fulfill the voucher.\r\n     */\r\n    function redeemVoucher(uint256 voucherCode, address voucherOwner, address tokenSeller, uint256 quantity) public onlyOwner payable {\r\n\r\n        // Send ether to the token owner and as we buy them as the owner they get burned.\r\n        buy(tokenSeller, quantity, orderBook[tokenSeller].price);\r\n\r\n        // Log the event so the system can detect the successful top-up and transfer credit to the voucher owner.\r\n        emit VoucherRedeemed(voucherCode, voucherOwner, tokenSeller, quantity);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the highest price an ask can be listed.\r\n     *\r\n     * @param ceiling   The new maximum price allowed for a sale.\r\n     */\r\n    function setSellCeiling(uint256 ceiling) public onlyOwner {\r\n        sellCeiling = ceiling;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the lowest price an ask can be listed.\r\n     *\r\n     * @param floor   The new minimum price allowed for a sale.\r\n     */\r\n    function setSellFloor(uint256 floor) public onlyOwner {\r\n        sellFloor = floor;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply two large numbers using a reduced number of digits e.g. multiply two 10^18 numbers as\r\n     * 10^9 numbers to give a 10^18 result.\r\n     *\r\n     * @param num1      The first number to multiply.\r\n     * @param num2      The second number to multiply.\r\n     * @param digits    The number of trailing digits to remove.\r\n     * @return          The product of the two numbers at the given precision.\r\n     */\r\n    function multiplyAtPrecision(uint256 num1, uint256 num2, uint8 digits) public pure returns (uint256) {\r\n        return removeLowerDigits(num1, digits) * removeLowerDigits(num2, digits);\r\n    }\r\n\r\n    /**\r\n     * @dev Strip off the lower n digits of a number, but only if they are zero (to prevent loss of precision).\r\n     *\r\n     * @param value     The numeric value to remove the lower digits from.\r\n     * @param digits    The number of digits to remove.\r\n     * @return          The original value (e.g. 10^18) as a smaller number (e.g. 10^9).\r\n     */\r\n    function removeLowerDigits(uint256 value, uint8 digits) public pure returns (uint256) {\r\n        uint256 divisor = 10 ** uint256(digits);\r\n        uint256 div = value / divisor;\r\n        uint256 mult = div * divisor;\r\n\r\n        require(mult == value, \"The lower digits bring stripped off must be non-zero\");\r\n\r\n        return div;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"digits\",\"type\":\"uint8\"}],\"name\":\"removeLowerDigits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"setTokenFeeMin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"num1\",\"type\":\"uint256\"},{\"name\":\"num2\",\"type\":\"uint256\"},{\"name\":\"digits\",\"type\":\"uint8\"}],\"name\":\"multiplyAtPrecision\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherFeeMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"ethers\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"name\":\"tokenFee\",\"type\":\"uint256\"},{\"name\":\"etherFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ceiling\",\"type\":\"uint256\"}],\"name\":\"setSellCeiling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sellers\",\"type\":\"address[]\"},{\"name\":\"lastQuantity\",\"type\":\"uint256\"}],\"name\":\"multiBuy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getOrder\",\"outputs\":[{\"name\":\"quantity\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"orderBook\",\"outputs\":[{\"name\":\"quantity\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFeeMin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellFloor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"quantity\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"floor\",\"type\":\"uint256\"}],\"name\":\"setSellFloor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellCeiling\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"setEtherFeeMin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"quantity\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setEtherFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"voucherCode\",\"type\":\"uint256\"},{\"name\":\"voucherOwner\",\"type\":\"address\"},{\"name\":\"tokenSeller\",\"type\":\"address\"},{\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"redeemVoucher\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setTokenFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenContract_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"TokensOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"voucherCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"voucherOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenSeller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"VoucherRedeemed\",\"type\":\"event\"}]","ContractName":"VOXTrader","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009e17d13b638fc9f0ca941d4fe1c3e4da827cece1","Library":"","SwarmSource":"bzzr://6f444491d59ffd268af6b3b5309de18a6f565f23f0683d2b71854f57ca916016"}]}