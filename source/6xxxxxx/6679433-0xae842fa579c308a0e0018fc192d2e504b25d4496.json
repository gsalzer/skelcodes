{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18 ;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract ContractiumInterface {\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function contractSpend(address _from, uint256 _value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n\r\n    function owner() public view returns (address);\r\n\r\n    function bonusRateOneEth() public view returns (uint256);\r\n    function currentTotalTokenOffering() public view returns (uint256);\r\n    function currentTokenOfferingRaised() public view returns (uint256);\r\n\r\n    function isOfferingStarted() public view returns (bool);\r\n    function offeringEnabled() public view returns (bool);\r\n    function startTime() public view returns (uint256);\r\n    function endTime() public view returns (uint256);\r\n}\r\n\r\n\r\ncontract ContractiumSalePackage is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    ContractiumInterface ctuContract;\r\n    address public constant CONTRACTIUM = 0x943aca8ed65fbf188a7d369cfc2bee0ae435ee1b;\r\n    address public ownerCtuContract;\r\n    address public owner;\r\n\r\n    uint8 public constant decimals = 18;\r\n    uint256 public unitsOneEthCanBuy = 15000;\r\n    \r\n    // Current token offering raised in CTUSalePackages\r\n    uint256 public currentTokenOfferingRaised;\r\n    \r\n    // Sale packages and intervals\r\n    uint256[] public intervals;\r\n    uint256[] public packages;\r\n    \r\n    constructor() public {\r\n        ctuContract = ContractiumInterface(CONTRACTIUM);\r\n        ownerCtuContract = ctuContract.owner();\r\n        owner = msg.sender;\r\n        \r\n        intervals = [\r\n            0,\r\n            10000000000000000,      // 0.01 Ether\r\n            100000000000000000,     // 0.1 ether\r\n            1000000000000000000,    // 01 Ether\r\n            3000000000000000000,    // 03 Ether\r\n            5000000000000000000,    // 05 Ether\r\n            10000000000000000000    // 10 Ether\r\n        ];\r\n        \r\n        packages = [\r\n            0,\r\n            750,   // 5% \r\n            1500,  // 10% \r\n            3000,  // 20%\r\n            4500,  // 30%\r\n            6000,  // 40%\r\n            7500   // 50%\r\n        ];\r\n    }\r\n\r\n    function() public payable {\r\n\r\n        require(msg.sender != owner);\r\n\r\n        // Number of tokens to sale in wei\r\n        uint256 amount = msg.value.mul(unitsOneEthCanBuy);\r\n        \r\n        // Bonus rate\r\n        uint256 bonusRate = getNearestPackage(msg.value);\r\n        \r\n        // Amount of bonus tokens\r\n        uint256 amountBonus = msg.value.mul(bonusRate);\r\n        \r\n        // Amount with bonus value\r\n        amount = amount.add(amountBonus);\r\n\r\n        // Offering validation\r\n        uint256 remain = ctuContract.balanceOf(ownerCtuContract);\r\n        require(remain >= amount);\r\n        preValidatePurchase(amount);\r\n\r\n        address _from = ownerCtuContract;\r\n        address _to = msg.sender;\r\n        require(ctuContract.transferFrom(_from, _to, amount));\r\n        ownerCtuContract.transfer(msg.value);  \r\n\r\n        currentTokenOfferingRaised = currentTokenOfferingRaised.add(amount);  \r\n    }\r\n    \r\n    /**\r\n    * @dev Get package bonus.\r\n    */\r\n    function getNearestPackage(uint256 _amount) view internal returns (uint256) {\r\n        require(_amount > 0);\r\n        uint indexPackage = 0;\r\n        for (uint i = intervals.length - 1; i >= 0 ; i--){\r\n            if (intervals[i] <= _amount) {\r\n                indexPackage = i;\r\n                break;\r\n            }\r\n        }\r\n        return packages[indexPackage];\r\n    }\r\n    \r\n    /**\r\n    * @dev Validate before purchasing.\r\n    */\r\n    function preValidatePurchase(uint256 _amount) view internal {\r\n        require(_amount > 0);\r\n        require(ctuContract.isOfferingStarted());\r\n        require(ctuContract.offeringEnabled());\r\n        require(currentTokenOfferingRaised.add(ctuContract.currentTokenOfferingRaised().add(_amount)) <= ctuContract.currentTotalTokenOffering());\r\n        require(block.timestamp >= ctuContract.startTime() && block.timestamp <= ctuContract.endTime());\r\n    }\r\n    \r\n    /**\r\n    * @dev Set Contractium address and related parameter from Contractium Smartcontract.\r\n    */\r\n    function setCtuContract(address _ctuAddress) public onlyOwner {\r\n        require(_ctuAddress != address(0x0));\r\n        ctuContract = ContractiumInterface(_ctuAddress);\r\n        ownerCtuContract = ctuContract.owner();\r\n    }\r\n\r\n    /**\r\n    * @dev Reset current token offering raised for new Sale.\r\n    */\r\n    function resetCurrentTokenOfferingRaised() public onlyOwner {\r\n        currentTokenOfferingRaised = 0;\r\n    }\r\n    \r\n    /**\r\n    * @dev Clear package bonus.\r\n    */\r\n    function clearPackages() public onlyOwner returns (bool) {\r\n        intervals = [0];\r\n        packages = [0];\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Set package bonus.\r\n    */\r\n    function setPackages(uint256[] _interval, uint256[] _packages) public checkPackages(_interval, _packages) returns (bool) {\r\n        intervals = _interval;\r\n        packages = _packages;\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    *  Check packages and intervals is valid or not\r\n    */\r\n    modifier checkPackages(uint256[] _interval, uint256[] _packages) {\r\n        require(_interval.length == _packages.length);\r\n        bool validIntervalArr = true;\r\n        for (uint i = 0; i < intervals.length - 1 ; i++){\r\n            if (intervals[i] >= intervals[i + 1]) {\r\n                validIntervalArr = false;\r\n                break;\r\n            }\r\n        }\r\n        require(validIntervalArr);\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"clearPackages\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"intervals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resetCurrentTokenOfferingRaised\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unitsOneEthCanBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_interval\",\"type\":\"uint256[]\"},{\"name\":\"_packages\",\"type\":\"uint256[]\"}],\"name\":\"setPackages\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRACTIUM\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ctuAddress\",\"type\":\"address\"}],\"name\":\"setCtuContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentTokenOfferingRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerCtuContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ContractiumSalePackage","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://85856d07e93672917636d2fd3ecfca720ca86a271427194f665670153881cfd7"}]}