{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.1;\r\n\r\n// File: contracts/OwnerValidator.sol\r\n\r\ncontract TokenContract {\r\n    function totalSupply() constant returns (uint256 supply);\r\n    function decimals() constant returns(uint8 units);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, address _msgSender, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, address _msgSender, uint256 _value) returns (bool success);\r\n    function transferFromSender(address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, address _msgSender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n}\r\ncontract OwnerValidator {\r\n    function validate(address addr) constant returns (bool);\r\n}\r\n\r\ncontract Owned {\r\n    function ownerValidate(address addr) constant returns (bool);\r\n    bool public isWorking;\r\n\r\n    function Owned() {\r\n        isWorking = true;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if (!ownerValidate(msg.sender)) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyWorking {\r\n        if (!isWorking) throw;\r\n        _;\r\n    }\r\n\r\n    modifier onlyNotWorking {\r\n        if (isWorking) throw;\r\n        _;\r\n    }\r\n\r\n    function setWorking(bool _isWorking) onlyOwner {\r\n        isWorking = _isWorking;\r\n    }\r\n}\r\n\r\ncontract OwnerValidatorImpl is OwnerValidator, Owned {\r\n\r\n    address[] public owners;\r\n\r\n\r\n    TokenContract public tokenContract;\r\n\r\n    function OwnerValidatorImpl() {\r\n        owners.push(msg.sender);\r\n    }\r\n\r\n\r\n    function indexOfOwners(address _address) private constant returns (uint pos) {\r\n        pos = 0;\r\n        for (uint i = 0; i < owners.length; i++) {\r\n            if (owners[i] == _address) {\r\n                pos = i + 1;\r\n                break;\r\n            }\r\n        }\r\n        return pos;                \r\n    }\r\n\r\n    function validate(address addr) constant returns (bool) {\r\n        return (indexOfOwners(addr) != 0);\r\n    }\r\n        \r\n    function getOwners() constant returns (address[]) {\r\n        return owners;\r\n    } \r\n\r\n    function addOwner(address addr) onlyWorking {\r\n        if (validate(msg.sender)) {\r\n            if (!validate(addr)) {\r\n                owners.push(addr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeOwner(address addr) onlyWorking {\r\n        if (validate(msg.sender)) {\r\n            uint pos = indexOfOwners(addr);\r\n            if (pos > 0) {\r\n                owners[pos - 1] = 0x0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setTokenContract(address _tokenContract) onlyWorking {\r\n        if (validate(msg.sender)) {\r\n            tokenContract = TokenContract(_tokenContract);\r\n        }\r\n    }\r\n\r\n    function ownerValidate(address addr) constant returns (bool) {\r\n        return validate(addr);\r\n    }\r\n\r\n    function transferFromSender(address _to, uint256 _value) returns (bool success) {\r\n        if (!validate(msg.sender)) throw;\r\n        return tokenContract.transferFromSender(_to, _value);\r\n    }\r\n\r\n    function sendFromOwn(address _to, uint256 _value) returns (bool success) {\r\n        if (!validate(msg.sender)) throw;\r\n        if (!_to.send(_value)) throw;\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/OffChainManager.sol\r\n\r\ncontract OffChainManager {\r\n    function isToOffChainAddress(address addr) constant returns (bool);\r\n    function getOffChainRootAddress() constant returns (address);\r\n}\r\n\r\ncontract OffChainManagerImpl is OffChainManager, Owned {\r\n    address public rootAddress;\r\n    address[] public offChainAddreses;\r\n\r\n    mapping (address => uint256) refOffChainAddresses; \r\n\r\n    OwnerValidator public ownerValidator;\r\n\r\n    TokenContract public tokenContract;\r\n\r\n    function OffChainManagerImpl(\r\n        address _rootAddress,\r\n        address _ownerValidator\r\n    ) {\r\n        rootAddress = _rootAddress;\r\n        ownerValidator = OwnerValidator(_ownerValidator);\r\n    }\r\n\r\n    function setRootAddress(address _address) onlyWorking {\r\n        if (ownerValidator.validate(msg.sender)) {\r\n            rootAddress = _address;\r\n        }\r\n    }\r\n\r\n    function setOwnerValidatorAddress(address _ownerValidator) onlyWorking {\r\n        if (ownerValidator.validate(msg.sender)) {\r\n            ownerValidator = OwnerValidator(_ownerValidator);\r\n        }\r\n    }\r\n\r\n    function setTokenContract(address _tokenContract) {\r\n        if (ownerValidator.validate(msg.sender)) {\r\n            tokenContract = TokenContract(_tokenContract);\r\n        }\r\n    }\r\n\r\n    function offChainAddresesValidCount() constant returns (uint) {\r\n        uint cnt = 0;\r\n        for (uint i = 0; i < offChainAddreses.length; i++) {\r\n            if (offChainAddreses[i] != 0) {\r\n                cnt++;\r\n            }\r\n        }\r\n        return cnt;\r\n    }\r\n\r\n    function addOffChainAddress(address _address) private {\r\n        if (!isToOffChainAddress(_address)) {\r\n            offChainAddreses.push(_address);\r\n            refOffChainAddresses[_address] = offChainAddreses.length;\r\n        }\r\n    }\r\n\r\n    function removeOffChainAddress(address _address) private {\r\n        uint pos = refOffChainAddresses[_address];\r\n        if (pos > 0) {\r\n            offChainAddreses[pos - 1] = 0;\r\n            refOffChainAddresses[_address] = 0x0;\r\n        }\r\n    }\r\n\r\n    function addOffChainAddresses(address[] _addresses) onlyWorking {\r\n        if (ownerValidator.validate(msg.sender)) {\r\n            for (uint i = 0; i < _addresses.length; i++) {\r\n                addOffChainAddress(_addresses[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeOffChainAddresses(address[] _addresses) onlyWorking {\r\n        if (ownerValidator.validate(msg.sender)) {\r\n            for (uint i = 0; i < _addresses.length; i++) {\r\n                removeOffChainAddress(_addresses[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function ownerValidate(address addr) constant returns (bool) {\r\n        return ownerValidator.validate(addr);\r\n    }\r\n\r\n    function transferFromSender(address _to, uint256 _value) returns (bool success) {\r\n        if (!ownerValidator.validate(msg.sender)) throw;\r\n        return tokenContract.transferFromSender(_to, _value);\r\n    }\r\n\r\n    function sendFromOwn(address _to, uint256 _value) returns (bool success) {\r\n        if (!ownerValidator.validate(msg.sender)) throw; \r\n        if (!_to.send(_value)) throw;\r\n        return true;\r\n    }\r\n\r\n    function isToOffChainAddress(address addr) constant returns (bool) {\r\n        return refOffChainAddresses[addr] > 0;\r\n    }\r\n\r\n    function getOffChainRootAddress() constant returns (address) {\r\n        return rootAddress;\r\n    }\r\n\r\n    function getOffChainAddresses() constant returns (address[]) {\r\n        return offChainAddreses;\r\n    } \r\n\r\n    function isToOffChainAddresses(address[] _addresses) constant returns (bool) {\r\n        for (uint i = 0; i < _addresses.length; i++) {\r\n            if (!isToOffChainAddress(_addresses[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/TokenContract.sol\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n// assert(b > 0);\r\n    uint256 c = a / b;\r\n// assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract TokenContractImpl is TokenContract, Owned {\r\n    using SafeMath for uint256;\r\n    string public standard = \"Token 0.1\";\r\n    uint256 _totalSupply;\r\n    uint8 _decimals;\r\n    address public _mainAddress;\r\n\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n\r\n    OwnerValidator public ownerValidator;\r\n    OffChainManager public offChainManager;\r\n\r\n    bool public isRedenominated;\r\n    uint256 public redenomiValue;\r\n    mapping (address => uint256) public redenominatedBalances;\r\n    mapping (address => mapping (address => uint256)) public redenominatedAllowed;\r\n\r\n    function TokenContractImpl(\r\n        uint256 initialSupply,\r\n        uint8 decimals,\r\n        address _ownerValidator,\r\n        address _offChainManager\r\n    ){\r\n        balances[msg.sender] = initialSupply;\r\n        _totalSupply = initialSupply;\r\n        _decimals = decimals;\r\n        ownerValidator = OwnerValidator(_ownerValidator);\r\n        offChainManager = OffChainManager(_offChainManager);\r\n    }\r\n\r\n    function totalSupply() constant returns (uint256 totalSupply) {\r\n        if (isRedenominated) {\r\n            return redenominatedValue(_totalSupply);\r\n        }\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() constant returns (uint8 decimals) {\r\n        return _decimals;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        if (isRedenominated) {\r\n            if (redenominatedBalances[_owner] > 0) {\r\n                return redenominatedBalances[_owner];\r\n            }\r\n            return redenominatedValue(balances[_owner]);\r\n        }\r\n        return balances[_owner];\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n        if (isRedenominated) {\r\n            if (redenominatedAllowed[_owner][_spender] > 0) {\r\n                return redenominatedAllowed[_owner][_spender];\r\n            }\r\n            return redenominatedValue(allowed[_owner][_spender]);\r\n        }\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function redenominatedValue(uint256 _value) private returns (uint256) {\r\n        return _value.mul(redenomiValue);\r\n    }\r\n\r\n    function ownerValidate(address addr) constant returns (bool) {\r\n        return ownerValidator.validate(addr);\r\n    }\r\n\r\n\r\n    function redenominate(uint256 _redenomiValue) {\r\n        if (isRedenominated) throw;\r\n        if (ownerValidator.validate(msg.sender)) {\r\n            redenomiValue = _redenomiValue;\r\n            Redenominate(msg.sender, isRedenominated, redenomiValue);\r\n        }\r\n    }   \r\n\r\n\r\n    function applyRedenomination() onlyNotWorking {\r\n        if (isRedenominated) throw;\r\n        if (redenomiValue == 0) throw;\r\n        if (ownerValidator.validate(msg.sender)) {\r\n            isRedenominated = true;\r\n            ApplyRedenomination(msg.sender, isRedenominated, redenomiValue);\r\n        }\r\n    }   \r\n\r\n    function setOwnerValidatorAddress(address _ownerValidator) onlyWorking {\r\n        if (ownerValidator.validate(msg.sender)) {\r\n            ownerValidator = OwnerValidator(_ownerValidator);\r\n        }\r\n    }\r\n\r\n    function setOffChainManagerAddress(address _offChainManager) onlyWorking {\r\n        if (ownerValidator.validate(msg.sender)) {\r\n            offChainManager = OffChainManager(_offChainManager);\r\n        }\r\n    }\r\n\r\n    function transfer(address _to, address _msgSender, uint256 _value) onlyWorking returns (bool success) {\r\n        if (msg.sender != _mainAddress) throw; \r\n        return transferProcess(_msgSender, _to, _value);\r\n    }\r\n\r\n    function transferProcess(address _from, address _to, uint256 _value) private returns (bool success) {\r\n        if (balanceOf(_from) < _value) throw;\r\n        subtractBalance(_from, _value);\r\n        if (offChainManager.isToOffChainAddress(_to)) {\r\n            addBalance(offChainManager.getOffChainRootAddress(), _value);\r\n            ToOffChainTransfer(_from, _to, _to, _value);\r\n        } else {\r\n            addBalance(_to, _value);\r\n        }\r\n        return true;        \r\n    }\r\n\r\n    function addBalance(address _address, uint256 _value) private {\r\n        if (isRedenominated) {\r\n            if (redenominatedBalances[_address] == 0) {\r\n                if (balances[_address] > 0) {\r\n                    redenominatedBalances[_address] = redenominatedValue(balances[_address]);\r\n                    balances[_address] = 0;\r\n                }\r\n            }\r\n            redenominatedBalances[_address] = redenominatedBalances[_address].add(_value);\r\n        } else {\r\n            balances[_address] = balances[_address].add(_value);\r\n        }\r\n    }\r\n\r\n    function subtractBalance(address _address, uint256 _value) private {\r\n        if (isRedenominated) {\r\n            if (redenominatedBalances[_address] == 0) {\r\n                if (balances[_address] > 0) {\r\n                    redenominatedBalances[_address] = redenominatedValue(balances[_address]);\r\n                    balances[_address] = 0;\r\n                }\r\n            }\r\n            redenominatedBalances[_address] = redenominatedBalances[_address].sub(_value);\r\n        } else {\r\n            balances[_address] = balances[_address].sub(_value);\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, address _msgSender, uint256 _value) onlyWorking returns (bool success) {\r\n        if (msg.sender != _mainAddress) throw; \r\n        if (balanceOf(_from) < _value) throw;\r\n        if (balanceOf(_to).add(_value) < balanceOf(_to)) throw;\r\n        if (_value > allowance(_from, _msgSender)) throw;\r\n        subtractBalance(_from, _value);\r\n        if (offChainManager.isToOffChainAddress(_to)) {\r\n            addBalance(offChainManager.getOffChainRootAddress(), _value);\r\n            ToOffChainTransfer(_msgSender, _to, _to, _value);\r\n        } else {\r\n            addBalance(_to, _value);\r\n        }\r\n        subtractAllowed(_from, _msgSender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFromSender(address _to, uint256 _value) onlyWorking returns (bool success) {\r\n        if (!transferProcess(msg.sender, _to, _value)) throw;\r\n        TransferFromSender(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFromOwn(address _to, uint256 _value) onlyWorking returns (bool success) {\r\n        if (!ownerValidator.validate(msg.sender)) throw;\r\n        if (!transferProcess(this, _to, _value)) throw;\r\n        TransferFromSender(this, _to, _value);    \r\n        return true;\r\n    }\r\n\r\n    function sendFromOwn(address _to, uint256 _value) returns (bool success) {\r\n        if (!ownerValidator.validate(msg.sender)) throw; \r\n        if (!_to.send(_value)) throw;\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, address _msgSender, uint256 _value) onlyWorking returns (bool success) {\r\n        if (msg.sender != _mainAddress) throw; \r\n        setAllowed(_msgSender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function subtractAllowed(address _from, address _spender, uint256 _value) private {\r\n        if (isRedenominated) {\r\n            if (redenominatedAllowed[_from][_spender] == 0) {\r\n                if (allowed[_from][_spender] > 0) {\r\n                    redenominatedAllowed[_from][_spender] = redenominatedValue(allowed[_from][_spender]);\r\n                    allowed[_from][_spender] = 0;\r\n                }\r\n            }\r\n            redenominatedAllowed[_from][_spender] = redenominatedAllowed[_from][_spender].sub(_value);\r\n        } else {\r\n            allowed[_from][_spender] = allowed[_from][_spender].sub(_value);\r\n        }\r\n    }\r\n\r\n    function setAllowed(address _owner, address _spender, uint256 _value) private {\r\n        if (isRedenominated) {\r\n            redenominatedAllowed[_owner][_spender] = _value;\r\n        } else {\r\n            allowed[_owner][_spender] = _value;\r\n        }\r\n    }\r\n\r\n    function setMainAddress(address _address) onlyOwner {\r\n        _mainAddress = _address;\r\n    }\r\n\r\n    event TransferFromSender(address indexed _from, address indexed _to, uint256 _value);\r\n    event ToOffChainTransfer(address indexed _from, address indexed _toKey, address _to, uint256 _value);\r\n    event Redenominate(address _owner, bool _isRedenominated, uint256 _redenomiVakye);\r\n    event ApplyRedenomination(address _owner, bool _isRedenominated, uint256 _redenomiVakye);\r\n}\r\n\r\n// File: contracts/MainContract.sol\r\n\r\ncontract MainContract {\r\n    string public standard = \"Token 0.1\";\r\n    string public name;\r\n    string public symbol;\r\n\r\n    OwnerValidator public ownerValidator;\r\n    TokenContract public tokenContract;\r\n\r\n    function MainContract(\r\n        string _tokenName,\r\n        address _ownerValidator,\r\n        address _tokenContract,\r\n        string _symbol\r\n    ) {\r\n        ownerValidator = OwnerValidator(_ownerValidator);\r\n        tokenContract = TokenContract(_tokenContract);\r\n        name = _tokenName;\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function totalSupply() constant returns(uint256 totalSupply) {\r\n        return tokenContract.totalSupply();\r\n    }\r\n\r\n    function decimals() constant returns(uint8 decimals) {\r\n        return tokenContract.decimals();\r\n    }\r\n\r\n    function setOwnerValidateAddress(address _ownerValidator) {\r\n        if (ownerValidator.validate(msg.sender)) {\r\n            ownerValidator = OwnerValidator(_ownerValidator);\r\n        }\r\n    }\r\n\r\n    function setTokenContract(address _tokenContract) {\r\n        if (ownerValidator.validate(msg.sender)) {\r\n            tokenContract = TokenContract(_tokenContract);\r\n        }\r\n    }\r\n\r\n    function transferFromSender(address _to, uint256 _value) returns (bool success) {\r\n        if (!ownerValidator.validate(msg.sender)) throw;\r\n        return tokenContract.transferFromSender(_to, _value);\r\n    }\r\n\r\n    function sendFromOwn(address _to, uint256 _value) returns (bool success) {\r\n        if (!ownerValidator.validate(msg.sender)) throw; \r\n        if (!_to.send(_value)) throw;\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return uint256(tokenContract.balanceOf(_owner));\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (tokenContract.transfer(_to, msg.sender, _value)) {\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (tokenContract.transferFrom(_from, _to, msg.sender, _value)) {\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        if (tokenContract.approve(_spender,msg.sender,_value)) {\r\n            Approval(msg.sender,_spender,_value);\r\n            return true;\r\n        } else {\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n        return tokenContract.allowance(_owner,_spender);\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"isWorking\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_msgSender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"redenominatedBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_offChainManager\",\"type\":\"address\"}],\"name\":\"setOffChainManagerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"applyRedenomination\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offChainManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isRedenominated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"redenominatedAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerValidator\",\"type\":\"address\"}],\"name\":\"setOwnerValidatorAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redenomiValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isWorking\",\"type\":\"bool\"}],\"name\":\"setWorking\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendFromOwn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mainAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ownerValidate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromSender\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_msgSender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_redenomiValue\",\"type\":\"uint256\"}],\"name\":\"redenominate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerValidator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMainAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromOwn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_msgSender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"_ownerValidator\",\"type\":\"address\"},{\"name\":\"_offChainManager\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferFromSender\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_toKey\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ToOffChainTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_isRedenominated\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_redenomiVakye\",\"type\":\"uint256\"}],\"name\":\"Redenominate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_isRedenominated\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_redenomiVakye\",\"type\":\"uint256\"}],\"name\":\"ApplyRedenomination\",\"type\":\"event\"}]","ContractName":"TokenContractImpl","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000006f05b59d3b20000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000014f952abfec17b8b7791adb63bcb1de82c76d5490000000000000000000000009e068182bee5d84bf36b0946e8b8d69f8310a8a2","Library":"","SwarmSource":"bzzr://e68e8a073ff57149a03bf7a17c2817815dfbf506951d17a709cce3cc9e7b6f0f"}]}