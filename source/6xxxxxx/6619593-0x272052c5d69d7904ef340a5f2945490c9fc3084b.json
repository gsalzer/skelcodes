{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/*\r\n __      __          ___                                          ______                     \r\n/\\ \\  __/\\ \\        /\\_ \\                                        /\\__  _\\                    \r\n\\ \\ \\/\\ \\ \\ \\     __\\//\\ \\     ___    ___     ___ ___      __    \\/_/\\ \\/   ___              \r\n \\ \\ \\ \\ \\ \\ \\  /'__`\\\\ \\ \\   /'___\\ / __`\\ /' __` __`\\  /'__`\\     \\ \\ \\  / __`\\            \r\n  \\ \\ \\_/ \\_\\ \\/\\  __/ \\_\\ \\_/\\ \\__//\\ \\L\\ \\/\\ \\/\\ \\/\\ \\/\\  __/      \\ \\ \\/\\ \\L\\ \\__  __  __ \r\n   \\ `\\___x___/\\ \\____\\/\\____\\ \\____\\ \\____/\\ \\_\\ \\_\\ \\_\\ \\____\\      \\ \\_\\ \\____/\\_\\/\\_\\/\\_\\\r\n    '\\/__//__/  \\/____/\\/____/\\/____/\\/___/  \\/_/\\/_/\\/_/\\/____/       \\/_/\\/___/\\/_/\\/_/\\/_/\r\n                                                                                             \r\n\r\n\r\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\________/\\\\\\_____/\\\\\\\\\\\\\\\\\\____        \r\n _\\/\\\\\\///////////__\\///////\\\\\\/////__\\/\\\\\\_____/\\\\\\//____/\\\\\\\\\\\\\\\\\\\\\\\\\\__       \r\n  _\\/\\\\\\___________________\\/\\\\\\_______\\/\\\\\\__/\\\\\\//______/\\\\\\/////////\\\\\\_      \r\n   _\\/\\\\\\\\\\\\\\\\\\\\\\___________\\/\\\\\\_______\\/\\\\\\\\\\\\//\\\\\\_____\\/\\\\\\_______\\/\\\\\\_     \r\n    _\\/\\\\\\///////____________\\/\\\\\\_______\\/\\\\\\//_\\//\\\\\\____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \r\n     _\\/\\\\\\___________________\\/\\\\\\_______\\/\\\\\\____\\//\\\\\\___\\/\\\\\\/////////\\\\\\_   \r\n      _\\/\\\\\\___________________\\/\\\\\\_______\\/\\\\\\_____\\//\\\\\\__\\/\\\\\\_______\\/\\\\\\_  \r\n       _\\/\\\\\\___________________\\/\\\\\\_______\\/\\\\\\______\\//\\\\\\_\\/\\\\\\_______\\/\\\\\\_ \r\n        _\\///____________________\\///________\\///________\\///__\\///________\\///__                                                                                             \r\n                                                                                             \r\n                               \r\n                                                                                             \r\n// ----------------------------------------------------------------------------\r\n// 'FTKA' token contract, having Crowdsale and Reward functionality\r\n//\r\n// Contract Owner : 0xef9EcD8a0A2E4b31d80B33E243761f4D93c990a8\r\n// Symbol      \t  : FTKA\r\n// Name           : FTKA\r\n// Total supply   : 1,000,000,000  (1 Billion)\r\n// Tokens for ICO : 800,000,000   (800 Million)\r\n// Tokens to Owner: 200,000,000   (200 Million)\r\n// Decimals       : 8\r\n//\r\n// Copyright Â© 2018 onwards FTKA. (https://ftka.io)\r\n// Contract designed by EtherAuthority (https://EtherAuthority.io)\r\n// ----------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * @title SafeMath\r\n     * @dev Math operations with safety checks that throw on error\r\n     */\r\n    library SafeMath {\r\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n      }\r\n    \r\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n      }\r\n    \r\n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n      }\r\n    \r\n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n      }\r\n    }\r\n    \r\n    contract owned {\r\n        address public owner;\r\n    \t\r\n         constructor () public {\r\n            owner = msg.sender;\r\n        }\r\n    \r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n    \r\n        function transferOwnership(address newOwner) onlyOwner public {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n    \r\n    contract TokenERC20 {\r\n        // Public variables of the token\r\n        using SafeMath for uint256;\r\n    \tstring public name;\r\n        string public symbol;\r\n        uint8 public decimals = 8;      // 18 decimals is the strongly suggested default, avoid changing it\r\n        uint256 public totalSupply;\r\n        uint256 public reservedForICO;\r\n    \r\n        // This creates an array with all balances\r\n        mapping (address => uint256) public balanceOf;\r\n        mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n        // This generates a public event on the blockchain that will notify clients\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n        // This notifies clients about the amount burnt\r\n        event Burn(address indexed from, uint256 value);\r\n    \r\n        /**\r\n         * Constrctor function\r\n         *\r\n         * Initializes contract with initial supply tokens to the creator of the contract\r\n         */\r\n        constructor (\r\n            uint256 initialSupply,\r\n            uint256 allocatedForICO,\r\n            string tokenName,\r\n            string tokenSymbol\r\n        ) public {\r\n            totalSupply = initialSupply.mul(1e8);               // Update total supply with the decimal amount\r\n            reservedForICO = allocatedForICO.mul(1e8);          // Tokens reserved For ICO\r\n            balanceOf[this] = reservedForICO;                   // 800 Million Tokens will remain in the contract\r\n            balanceOf[msg.sender]=totalSupply.sub(reservedForICO); // Rest of tokens will be sent to owner\r\n            name = tokenName;                                   // Set the name for display purposes\r\n            symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        }\r\n    \r\n        /**\r\n         * Internal transfer, only can be called by this contract\r\n         */\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            // Prevent transfer to 0x0 address. Use burn() instead\r\n            require(_to != 0x0);\r\n            // Check if the sender has enough\r\n            require(balanceOf[_from] >= _value);\r\n            // Check for overflows\r\n            require(balanceOf[_to].add(_value) > balanceOf[_to]);\r\n            // Save this for an assertion in the future\r\n            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n            // Subtract from the sender\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);\r\n            // Add the same to the recipient\r\n            balanceOf[_to] = balanceOf[_to].add(_value);\r\n            emit Transfer(_from, _to, _value);\r\n            // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n        }\r\n    \r\n        /**\r\n         * Transfer tokens\r\n         *\r\n         * Send `_value` tokens to `_to` from your account\r\n         *\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n        function transfer(address _to, uint256 _value) public {\r\n            _transfer(msg.sender, _to, _value);\r\n        }\r\n    \r\n        /**\r\n         * Transfer tokens from other address\r\n         *\r\n         * Send `_value` tokens to `_to` in behalf of `_from`\r\n         *\r\n         * @param _from The address of the sender\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n            require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n            _transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Set allowance for other address\r\n         *\r\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n         *\r\n         * @param _spender The address authorized to spend\r\n         * @param _value the max amount they can spend\r\n         */\r\n        function approve(address _spender, uint256 _value) public\r\n            returns (bool success) {\r\n            allowance[msg.sender][_spender] = _value;\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Set allowance for other address and notify\r\n         *\r\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n         *\r\n         * @param _spender The address authorized to spend\r\n         * @param _value the max amount they can spend\r\n         * @param _extraData some extra information to send to the approved contract\r\n         */\r\n        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n            public\r\n            returns (bool success) {\r\n            tokenRecipient spender = tokenRecipient(_spender);\r\n            if (approve(_spender, _value)) {\r\n                spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n                return true;\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Destroy tokens\r\n         *\r\n         * Remove `_value` tokens from the system irreversibly\r\n         *\r\n         * @param _value the amount of money to burn\r\n         */\r\n        function burn(uint256 _value) public returns (bool success) {\r\n            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\r\n            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n           emit Burn(msg.sender, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Destroy tokens from other account\r\n         *\r\n         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n         *\r\n         * @param _from the address of the sender\r\n         * @param _value the amount of money to burn\r\n         */\r\n        function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n            require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\r\n            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\r\n          emit  Burn(_from, _value);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    /****************************************************/\r\n    /*       MAIN FTKA TOKEN CONTRACT STARTS HERE       */\r\n    /****************************************************/\r\n    \r\n    contract FTKA is owned, TokenERC20 {\r\n        \r\n        //**************************************************//\r\n        //------------- Code for the FTKA Token -------------//\r\n        //**************************************************//\r\n        \r\n        // Public variables of the token\r\n    \tstring internal tokenName = \"FTKA\";\r\n        string internal tokenSymbol = \"FTKA\";\r\n        uint256 internal initialSupply = 1000000000; \t // 1 Billion   \r\n        uint256 private allocatedForICO = 800000000;     // 800 Million\r\n\t\r\n    \t// Records for the fronzen accounts \r\n        mapping (address => bool) public frozenAccount;\r\n    \r\n        // This generates a public event on the blockchain that will notify clients \r\n        event FrozenFunds(address target, bool frozen);\r\n    \r\n        // Initializes contract with initial supply of tokens sent to the creator as well as contract \r\n        constructor () TokenERC20(initialSupply, allocatedForICO, tokenName, tokenSymbol) public { }\r\n    \r\n         \r\n        /**\r\n         * Transfer tokens - Internal transfer, only can be called by this contract\r\n         * \r\n         * This checks if the sender or recipient is not fronzen\r\n         * \r\n         * This keeps the track of total token holders and adds new holders as well.\r\n         *\r\n         * Send `_value` tokens to `_to` from your account\r\n         *\r\n         * @param _from The address of the sender\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount of tokens to send\r\n         */\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n            require (balanceOf[_from] >= _value);               // Check if the sender has enough\r\n            require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\r\n            require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n            require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\r\n            balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\r\n            emit Transfer(_from, _to, _value);\r\n        }\r\n    \r\n        /**\r\n         * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n         * \r\n         * @param target Address to be frozen\r\n         * @param freeze either to freeze it or not\r\n         */\r\n        function freezeAccount(address target, bool freeze) onlyOwner public {\r\n            frozenAccount[target] = freeze;\r\n          emit  FrozenFunds(target, freeze);\r\n        }\r\n    \r\n        //**************************************************//\r\n        //------------- Code for the Crowdsale -------------//\r\n        //**************************************************//\r\n    \r\n        //public variables for the Crowdsale\r\n        uint256 public icoStartDate = 1542326400 ;      // 16 November 2018 00:00:00 - GMT\r\n        uint256 public icoEndDate   = 1554076799 ;      // 31 March 2019 23:59:59 - GMT\r\n        uint256 public exchangeRate = 5000;             // 1 ETH = 5000 Tokens\r\n        uint256 public tokensSold = 0;                  // How many tokens sold in crowdsale\r\n        bool internal withdrawTokensOnlyOnce = true;    // Admin can withdraw unsold tokens after ICO only once\r\n        \r\n        //public variables of reward distribution \r\n        mapping(address => uint256) public investorContribution; //Track record whether token holder exist or not\r\n        address[] public icoContributors;                   //Array of addresses of ICO contributors\r\n        uint256 public tokenHolderIndex = 0;                //To split the iterations of For Loop\r\n        uint256 public totalContributors = 0;               //Total number of ICO contributors\r\n        \r\n        \r\n        /**\r\n         * @dev Fallback function, it accepts Ether from owner address as well as non-owner address\r\n         * @dev If ether came from owner address, then it will consider as reward payment to ICO contributors\r\n         * @dev If ether came from non-owner address, then it will consider as ICO investment contribution\r\n         */\r\n\t\tfunction () payable public {\r\n\t\t    if(msg.sender == owner && msg.value > 0){\r\n    \t\t    processRewards();   //This function will process reward distribution\r\n\t\t    }\r\n\t\t    else{\r\n\t\t        processICO();       //This function will process ICO and sends tokens to contributor\r\n\t\t    }\r\n\t\t}\r\n        \r\n        /**\r\n         * @dev Function which processes ICO contributions\r\n         * @dev It calcualtes token amount from exchangeRate and also adds Bonuses if applicable\r\n         * @dev Ether will be forwarded to owner immidiately.\r\n         */\r\n         function processICO() internal {\r\n            require(icoEndDate > now);\r\n    \t\trequire(icoStartDate < now);\r\n    \t\tuint ethervalueWEI=msg.value;\r\n    \t\tuint256 token = ethervalueWEI.div(1e10).mul(exchangeRate);// token amount = weiamount * price\r\n    \t\tuint256 totalTokens = token.add(purchaseBonus(token));    // token + bonus\r\n    \t\ttokensSold = tokensSold.add(totalTokens);\r\n    \t\t_transfer(this, msg.sender, totalTokens);                 // makes the token transfer\r\n    \t\tforwardEherToOwner();                                     // send ether to owner\r\n    \t\t//if contributor does not exist in tokenHolderExist mapping, then add into it as well as add in tokenHolders array\r\n            if(investorContribution[msg.sender] == 0){\r\n                icoContributors.push(msg.sender);\r\n                totalContributors++;\r\n            }\r\n            investorContribution[msg.sender] = investorContribution[msg.sender].add(totalTokens);\r\n            \r\n         }\r\n         \r\n         /**\r\n         * @dev Function which processes ICO contributions\r\n         * @dev It calcualtes token amount from exchangeRate and also adds Bonuses if applicable\r\n         * @dev Ether will be forwarded to owner immidiately.\r\n         */\r\n         function processRewards() internal {\r\n             for(uint256 i = 0; i < 150; i++){\r\n                    if(tokenHolderIndex < totalContributors){\r\n                        uint256 userContribution = investorContribution[icoContributors[tokenHolderIndex]];\r\n                        if(userContribution > 0){\r\n                            uint256 rewardPercentage =  userContribution.mul(1000).div(tokensSold);\r\n                            uint256 reward = msg.value.mul(rewardPercentage).div(1000);\r\n                            icoContributors[tokenHolderIndex].transfer(reward);\r\n                            tokenHolderIndex++;\r\n                        }\r\n                    }else{\r\n                        //this code will run only when all the dividend/reward has been paid\r\n                        tokenHolderIndex = 0;\r\n                       break;\r\n                    }\r\n                }\r\n         }\r\n        \r\n        /**\r\n         * Automatocally forwards ether from smart contract to owner address.\r\n         */\r\n\t\tfunction forwardEherToOwner() internal {\r\n\t\t\towner.transfer(msg.value); \r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n         * @dev Calculates purchase bonus according to the schedule.\r\n         * @dev SafeMath at some place is not used intentionally as overflow is impossible, and that saves gas cost\r\n         * \r\n         * @param _tokenAmount calculating tokens from amount of tokens \r\n         * \r\n         * @return bonus amount in wei\r\n         * \r\n         */\r\n\t\tfunction purchaseBonus(uint256 _tokenAmount) public view returns(uint256){\r\n\t\t    uint256 week1 = icoStartDate + 604800;    //25% token bonus\r\n\t\t    uint256 week2 = week1 + 604800;           //20% token bonus\r\n\t\t    uint256 week3 = week2 + 604800;           //15% token bonus\r\n\t\t    uint256 week4 = week3 + 604800;           //10% token bonus\r\n\t\t    uint256 week5 = week4 + 604800;           //5% token bonus\r\n\r\n\t\t    if(now > icoStartDate && now < week1){\r\n\t\t        return _tokenAmount.mul(25).div(100);   //25% bonus\r\n\t\t    }\r\n\t\t    else if(now > week1 && now < week2){\r\n\t\t        return _tokenAmount.mul(20).div(100);   //20% bonus\r\n\t\t    }\r\n\t\t    else if(now > week2 && now < week3){\r\n\t\t        return _tokenAmount.mul(15).div(100);   //15% bonus\r\n\t\t    }\r\n\t\t    else if(now > week3 && now < week4){\r\n\t\t        return _tokenAmount.mul(10).div(100);   //10% bonus\r\n\t\t    }\r\n\t\t    else if(now > week4 && now < week5){\r\n\t\t        return _tokenAmount.mul(5).div(100);   //5% bonus\r\n\t\t    }\r\n\t\t    else{\r\n\t\t        return 0;\r\n\t\t    }\r\n\t\t}\r\n        \r\n        \r\n        /**\r\n         * Function to check wheter ICO is running or not. \r\n         * \r\n         * @return bool for whether ICO is running or not\r\n         */\r\n        function isICORunning() public view returns(bool){\r\n            if(icoEndDate > now && icoStartDate < now){\r\n                return true;                \r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        \r\n        /**\r\n         * Just in case, owner wants to transfer Tokens from contract to owner address\r\n         */\r\n        function manualWithdrawToken(uint256 _amount) onlyOwner public {\r\n            uint256 tokenAmount = _amount.mul(1 ether);\r\n            _transfer(this, msg.sender, tokenAmount);\r\n        }\r\n          \r\n        /**\r\n         * Just in case, owner wants to transfer Ether from contract to owner address\r\n         */\r\n        function manualWithdrawEther()onlyOwner public{\r\n            address(owner).transfer(address(this).balance);\r\n        }\r\n        \r\n    }","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"icoContributors\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoEndDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isICORunning\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manualWithdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manualWithdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investorContribution\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"purchaseBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoStartDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHolderIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalContributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedForICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"FTKA","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3c5daac4cf59893d232706903b3acc7d3a76ad100bac7e19436b30f590ba9baa"}]}