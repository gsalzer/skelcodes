{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract InterbetCore {\r\n\r\n    /* Global constants */\r\n    uint constant oddsDecimals = 2; // Max. decimal places of odds\r\n    uint constant feeRateDecimals = 1; // Max. decimal places of fee rate\r\n\r\n    uint public minMakerBetFund = 100 * 1 finney; // Minimum fund of a maker bet\r\n\r\n    uint public maxAllowedTakerBetsPerMakerBet = 100; // Limit the number of taker-bets in 1 maker-bet\r\n    uint public minAllowedStakeInPercentage = 1; // 100 รท maxAllowedTakerBetsPerMakerBet\r\n\r\n    /* Owner and admins */\r\n    address private owner;\r\n    mapping(address => bool) private admins;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function addAdmin(address addr) external onlyOwner {\r\n        admins[addr] = true;\r\n    }\r\n\r\n    function removeAdmin(address addr) external onlyOwner {\r\n        admins[addr] = false;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(admins[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    function changeMinMakerBetFund(uint weis) external onlyAdmin {\r\n        minMakerBetFund = mul(weis, 1 wei);\r\n    }\r\n\r\n    function changeTakerBetConstraints(uint maxCount, uint minPercentage) external onlyAdmin {\r\n        maxAllowedTakerBetsPerMakerBet = maxCount;\r\n        minAllowedStakeInPercentage = minPercentage;\r\n    }\r\n\r\n    /* Events */\r\n    event LogUpdateVerifier(address indexed addr, uint oldFeeRate, uint newFeeRate, uint oldBaseFee, uint newBaseFee);\r\n    event LogMakeBet(uint indexed makerBetId, address indexed maker);\r\n    event LogAddFund(uint indexed makerBetId, address indexed maker, uint oldTotalFund, uint newTotalFund);\r\n    event LogUpdateOdds(uint indexed makerBetId, address indexed maker, uint oldOdds, uint newOdds);\r\n    event LogPauseBet(uint indexed makerBetId, address indexed maker);\r\n    event LogReopenBet(uint indexed makerBetId, address indexed maker);\r\n    event LogCloseBet(uint indexed makerBetId, address indexed maker);\r\n    event LogTakeBet(uint indexed makerBetId, address indexed maker, uint indexed takerBetId, address taker);\r\n    event LogSettleBet(uint indexed makerBetId, address indexed maker);\r\n    event LogWithdraw(uint indexed makerBetId, address indexed maker, address indexed addr);\r\n\r\n    /* Betting Core */\r\n    enum BetStatus {\r\n        Open, \r\n        Paused, \r\n        Closed, \r\n        Settled\r\n    }\r\n\r\n    enum BetOutcome {\r\n        NotSettled,\r\n        MakerWin,\r\n        TakerWin,\r\n        Draw,\r\n        Canceled\r\n    }\r\n\r\n    struct MakerBet {\r\n        uint makerBetId;\r\n        address maker;\r\n        uint odds;\r\n        uint totalFund;\r\n        Verifier trustedVerifier;\r\n        uint expiry;\r\n        BetStatus status;\r\n        uint reservedFund;\r\n        uint takerBetsCount;\r\n        uint totalStake;\r\n        TakerBet[] takerBets;\r\n        BetOutcome outcome;\r\n        bool makerFundWithdrawn;\r\n        bool trustedVerifierFeeSent;\r\n    }\r\n\r\n    struct TakerBet {\r\n        uint takerBetId;\r\n        address taker;\r\n        uint odds;\r\n        uint stake;\r\n        bool settled;\r\n    }\r\n\r\n    struct Verifier {\r\n        address addr;\r\n        uint feeRate;\r\n        uint baseFee;\r\n    }\r\n\r\n    uint public makerBetsCount;\r\n    mapping(uint => mapping(address => MakerBet)) private makerBets;\r\n\r\n    mapping(address => Verifier) private verifiers;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        makerBetsCount = 0;\r\n    }\r\n\r\n    function() external payable {\r\n        revert();\r\n    }\r\n\r\n    /// Update verifier's data\r\n    function updateVerifier(uint feeRate, uint baseFee) external {\r\n        require(feeRate >= 0 && feeRate <= ((10 ** feeRateDecimals) * 100));\r\n        require(baseFee >= 0 && baseFee <= 100000000 * 1 ether);\r\n\r\n        Verifier storage verifier = verifiers[msg.sender];\r\n\r\n        uint oldFeeRate = verifier.feeRate;\r\n        uint oldBaseFee = verifier.baseFee;\r\n\r\n        verifier.addr = msg.sender;\r\n        verifier.feeRate = feeRate;\r\n        verifier.baseFee = baseFee;\r\n\r\n        emit LogUpdateVerifier(msg.sender, oldFeeRate, feeRate, oldBaseFee, baseFee);\r\n    }\r\n\r\n    /// Make a bet\r\n    function makeBet(uint makerBetId, uint odds, address trustedVerifier, uint trustedVerifierFeeRate, uint trustedVerifierBaseFee, uint expiry) external payable {\r\n        require(odds > (10 ** oddsDecimals) && odds < ((10 ** 8) * (10 ** oddsDecimals)));\r\n        require(expiry > now);\r\n\r\n        MakerBet storage makerBet = makerBets[makerBetId][msg.sender];\r\n\r\n        require(makerBet.makerBetId == 0);\r\n\r\n        Verifier memory verifier = verifiers[trustedVerifier];\r\n\r\n        require(verifier.addr != address(0x0));\r\n        require(trustedVerifierFeeRate == verifier.feeRate);\r\n        require(trustedVerifierBaseFee == verifier.baseFee);\r\n\r\n        uint fund = sub(msg.value, trustedVerifierBaseFee);\r\n        require(fund >= minMakerBetFund);\r\n\r\n        makerBet.makerBetId = makerBetId;\r\n        makerBet.maker = msg.sender;\r\n        makerBet.odds = odds;\r\n        makerBet.totalFund = fund;\r\n        makerBet.trustedVerifier = Verifier(verifier.addr, verifier.feeRate, verifier.baseFee);\r\n        makerBet.expiry = expiry;\r\n        makerBet.status = BetStatus.Open;\r\n        makerBet.reservedFund = 0;\r\n        makerBet.takerBetsCount = 0;\r\n        makerBet.totalStake = 0;\r\n\r\n        makerBetsCount++;\r\n\r\n        emit LogMakeBet(makerBetId, msg.sender);\r\n    }\r\n\r\n    /// Increase total fund of a bet\r\n    function addFund(uint makerBetId) external payable {\r\n        MakerBet storage makerBet = makerBets[makerBetId][msg.sender];\r\n        require(makerBet.makerBetId != 0);\r\n\r\n        require(now < makerBet.expiry);\r\n\r\n        require(makerBet.status == BetStatus.Open || makerBet.status == BetStatus.Paused);\r\n\r\n        require(msg.sender == makerBet.maker);\r\n\r\n        require(msg.value > 0);\r\n\r\n        uint oldTotalFund = makerBet.totalFund;\r\n\r\n        makerBet.totalFund = add(makerBet.totalFund, msg.value);\r\n\r\n        emit LogAddFund(makerBetId, msg.sender, oldTotalFund, makerBet.totalFund);\r\n    }\r\n\r\n    /// Update odds of a bet\r\n    function updateOdds(uint makerBetId, uint odds) external {\r\n        require(odds > (10 ** oddsDecimals) && odds < ((10 ** 8) * (10 ** oddsDecimals)));\r\n\r\n        MakerBet storage makerBet = makerBets[makerBetId][msg.sender];\r\n        require(makerBet.makerBetId != 0);\r\n\r\n        require(now < makerBet.expiry);\r\n\r\n        require(makerBet.status == BetStatus.Open || makerBet.status == BetStatus.Paused);\r\n\r\n        require(msg.sender == makerBet.maker);\r\n\r\n        require(odds != makerBet.odds);\r\n\r\n        uint oldOdds = makerBet.odds;\r\n\r\n        makerBet.odds = odds;\r\n\r\n        emit LogUpdateOdds(makerBetId, msg.sender, oldOdds, makerBet.odds);\r\n    }\r\n\r\n    /// Pause a bet\r\n    function pauseBet(uint makerBetId) external {\r\n        MakerBet storage makerBet = makerBets[makerBetId][msg.sender];\r\n        require(makerBet.makerBetId != 0);\r\n\r\n        require(makerBet.status == BetStatus.Open);\r\n\r\n        require(msg.sender == makerBet.maker);\r\n\r\n        makerBet.status = BetStatus.Paused;\r\n\r\n        emit LogPauseBet(makerBetId, msg.sender);\r\n    }\r\n\r\n    /// Reopen a bet\r\n    function reopenBet(uint makerBetId) external {\r\n        MakerBet storage makerBet = makerBets[makerBetId][msg.sender];\r\n        require(makerBet.makerBetId != 0);\r\n\r\n        require(makerBet.status == BetStatus.Paused);\r\n\r\n        require(msg.sender == makerBet.maker);\r\n\r\n        makerBet.status = BetStatus.Open;\r\n\r\n        emit LogReopenBet(makerBetId, msg.sender);\r\n    }\r\n\r\n    /// Close a bet and withdraw unused fund\r\n    function closeBet(uint makerBetId) external {\r\n        MakerBet storage makerBet = makerBets[makerBetId][msg.sender];\r\n        require(makerBet.makerBetId != 0);\r\n\r\n        require(makerBet.status == BetStatus.Open || makerBet.status == BetStatus.Paused);\r\n\r\n        require(msg.sender == makerBet.maker);\r\n\r\n        makerBet.status = BetStatus.Closed;\r\n\r\n        // refund unused fund to maker\r\n        uint unusedFund = sub(makerBet.totalFund, makerBet.reservedFund);\r\n\r\n        if (unusedFund > 0) {\r\n            makerBet.totalFund = makerBet.reservedFund;\r\n\r\n            uint refundAmount = unusedFund;\r\n            if (makerBet.totalStake == 0) {\r\n                refundAmount = add(refundAmount, makerBet.trustedVerifier.baseFee); // Refund base verifier fee too if no taker-bets, because verifier do not need to settle the bet with no takers\r\n                makerBet.makerFundWithdrawn = true;\r\n            }\r\n\r\n            if (!makerBet.maker.send(refundAmount)) {\r\n                makerBet.totalFund = add(makerBet.totalFund, unusedFund);\r\n                makerBet.status = BetStatus.Paused;\r\n                makerBet.makerFundWithdrawn = false;\r\n            } else {\r\n                emit LogCloseBet(makerBetId, msg.sender);\r\n            }\r\n        } else {\r\n            emit LogCloseBet(makerBetId, msg.sender);\r\n        }\r\n    }\r\n\r\n    /// Take a bet\r\n    function takeBet(uint makerBetId, address maker, uint odds, uint takerBetId) external payable {\r\n        require(msg.sender != maker);\r\n\r\n        require(msg.value > 0);\r\n\r\n        MakerBet storage makerBet = makerBets[makerBetId][maker];\r\n        require(makerBet.makerBetId != 0);\r\n\r\n        require(msg.sender != makerBet.trustedVerifier.addr);\r\n\r\n        require(now < makerBet.expiry);\r\n\r\n        require(makerBet.status == BetStatus.Open);\r\n\r\n        require(makerBet.odds == odds);\r\n\r\n        // Avoid too many taker-bets in one maker-bet\r\n        require(makerBet.takerBetsCount < maxAllowedTakerBetsPerMakerBet);\r\n\r\n        // Avoid too many tiny bets\r\n        uint minAllowedStake = mul(mul(makerBet.totalFund, (10 ** oddsDecimals)), minAllowedStakeInPercentage) / sub(odds, (10 ** oddsDecimals)) / 100;\r\n        uint maxAvailableStake = mul(sub(makerBet.totalFund, makerBet.reservedFund), (10 ** oddsDecimals)) / sub(odds, (10 ** oddsDecimals));\r\n        if (maxAvailableStake >= minAllowedStake) {\r\n            require(msg.value >= minAllowedStake);\r\n        } else {\r\n            require(msg.value >= sub(maxAvailableStake, (maxAvailableStake / 10)) && msg.value <= maxAvailableStake);\r\n        }\r\n\r\n        // If remaining fund is not enough, send the money back.\r\n        require(msg.value <= maxAvailableStake);\r\n\r\n        makerBet.takerBets.length++;\r\n        makerBet.takerBets[makerBet.takerBetsCount] = TakerBet(takerBetId, msg.sender, odds, msg.value, false);\r\n        makerBet.reservedFund = add(makerBet.reservedFund, mul(msg.value, sub(odds, (10 ** oddsDecimals))) / (10 ** oddsDecimals));   \r\n        makerBet.totalStake = add(makerBet.totalStake, msg.value);\r\n        makerBet.takerBetsCount++;\r\n\r\n        emit LogTakeBet(makerBetId, maker, takerBetId, msg.sender);\r\n    }\r\n\r\n    /// Settle a bet by trusted verifier\r\n    function settleBet(uint makerBetId, address maker, uint outcome) external {\r\n        require(outcome == 1 || outcome == 2 || outcome == 3 || outcome == 4);\r\n\r\n        MakerBet storage makerBet = makerBets[makerBetId][maker];\r\n        require(makerBet.makerBetId != 0);\r\n\r\n        require(msg.sender == makerBet.trustedVerifier.addr);\r\n\r\n        require(makerBet.totalStake > 0);\r\n\r\n        require(makerBet.status != BetStatus.Settled);\r\n\r\n        BetOutcome betOutcome = BetOutcome(outcome);\r\n        makerBet.outcome = betOutcome;\r\n        makerBet.status = BetStatus.Settled;\r\n\r\n        payMaker(makerBet);\r\n        payVerifier(makerBet);\r\n\r\n        emit LogSettleBet(makerBetId, maker);\r\n    }\r\n\r\n    /// Manual withdraw fund from a bet after outcome is set\r\n    function withdraw(uint makerBetId, address maker) external {\r\n        MakerBet storage makerBet = makerBets[makerBetId][maker];\r\n        require(makerBet.makerBetId != 0);\r\n\r\n        require(makerBet.outcome != BetOutcome.NotSettled);\r\n\r\n        require(makerBet.status == BetStatus.Settled);\r\n\r\n        bool fullyWithdrawn = false;\r\n\r\n        if (msg.sender == maker) {\r\n            fullyWithdrawn = payMaker(makerBet);\r\n        } else if (msg.sender == makerBet.trustedVerifier.addr) {\r\n            fullyWithdrawn = payVerifier(makerBet);\r\n        } else {\r\n            fullyWithdrawn = payTaker(makerBet, msg.sender);\r\n        }\r\n\r\n        if (fullyWithdrawn) {\r\n            emit LogWithdraw(makerBetId, maker, msg.sender);\r\n        }\r\n    }\r\n\r\n    /// Payout to maker\r\n    function payMaker(MakerBet storage makerBet) private returns (bool fullyWithdrawn) {\r\n        fullyWithdrawn = false;\r\n\r\n        if (!makerBet.makerFundWithdrawn) {\r\n            makerBet.makerFundWithdrawn = true;\r\n\r\n            uint payout = 0;\r\n            if (makerBet.outcome == BetOutcome.MakerWin) {\r\n                uint trustedVerifierFeeMakerWin = mul(makerBet.totalStake, makerBet.trustedVerifier.feeRate) / ((10 ** feeRateDecimals) * 100);\r\n                payout = sub(add(makerBet.totalFund, makerBet.totalStake), trustedVerifierFeeMakerWin);\r\n            } else if (makerBet.outcome == BetOutcome.TakerWin) {\r\n                payout = sub(makerBet.totalFund, makerBet.reservedFund);\r\n            } else if (makerBet.outcome == BetOutcome.Draw || makerBet.outcome == BetOutcome.Canceled) {\r\n                payout = makerBet.totalFund;\r\n            }\r\n\r\n            if (payout > 0) {\r\n                fullyWithdrawn = true;\r\n\r\n                if (!makerBet.maker.send(payout)) {\r\n                    makerBet.makerFundWithdrawn = false;\r\n                    fullyWithdrawn = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return fullyWithdrawn;\r\n    }\r\n\r\n    /// Payout to taker\r\n    function payTaker(MakerBet storage makerBet, address taker) private returns (bool fullyWithdrawn) {\r\n        fullyWithdrawn = false;\r\n\r\n        uint payout = 0;\r\n\r\n        for (uint betIndex = 0; betIndex < makerBet.takerBetsCount; betIndex++) {\r\n            if (makerBet.takerBets[betIndex].taker == taker) {\r\n                if (!makerBet.takerBets[betIndex].settled) {\r\n                    makerBet.takerBets[betIndex].settled = true;\r\n\r\n                    if (makerBet.outcome == BetOutcome.MakerWin) {\r\n                        continue;\r\n                    } else if (makerBet.outcome == BetOutcome.TakerWin) {\r\n                        uint netProfit = mul(mul(makerBet.takerBets[betIndex].stake, sub(makerBet.takerBets[betIndex].odds, (10 ** oddsDecimals))), sub(((10 ** feeRateDecimals) * 100), makerBet.trustedVerifier.feeRate)) / (10 ** oddsDecimals) / ((10 ** feeRateDecimals) * 100);\r\n                        payout = add(payout, add(makerBet.takerBets[betIndex].stake, netProfit));\r\n                    } else if (makerBet.outcome == BetOutcome.Draw || makerBet.outcome == BetOutcome.Canceled) {\r\n                        payout = add(payout, makerBet.takerBets[betIndex].stake);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (payout > 0) {\r\n            fullyWithdrawn = true;\r\n\r\n            if (!taker.send(payout)) {\r\n                fullyWithdrawn = false;\r\n\r\n                for (uint betIndex2 = 0; betIndex2 < makerBet.takerBetsCount; betIndex2++) {\r\n                    if (makerBet.takerBets[betIndex2].taker == taker) {\r\n                        if (makerBet.takerBets[betIndex2].settled) {\r\n                            makerBet.takerBets[betIndex2].settled = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return fullyWithdrawn;\r\n    }\r\n\r\n    /// Payout to verifier\r\n    function payVerifier(MakerBet storage makerBet) private returns (bool fullyWithdrawn) {\r\n        fullyWithdrawn = false;\r\n\r\n        if (!makerBet.trustedVerifierFeeSent) {\r\n            makerBet.trustedVerifierFeeSent = true;\r\n\r\n            uint payout = 0;\r\n            if (makerBet.outcome == BetOutcome.MakerWin) {\r\n                uint trustedVerifierFeeMakerWin = mul(makerBet.totalStake, makerBet.trustedVerifier.feeRate) / ((10 ** feeRateDecimals) * 100);\r\n                payout = add(makerBet.trustedVerifier.baseFee, trustedVerifierFeeMakerWin);\r\n            } else if (makerBet.outcome == BetOutcome.TakerWin) {\r\n                uint trustedVerifierFeeTakerWin = mul(makerBet.reservedFund, makerBet.trustedVerifier.feeRate) / ((10 ** feeRateDecimals) * 100);\r\n                payout = add(makerBet.trustedVerifier.baseFee, trustedVerifierFeeTakerWin);\r\n            } else if (makerBet.outcome == BetOutcome.Draw || makerBet.outcome == BetOutcome.Canceled) {\r\n                payout = makerBet.trustedVerifier.baseFee;\r\n            }\r\n\r\n            if (payout > 0) {\r\n                fullyWithdrawn = true;\r\n\r\n                if (!makerBet.trustedVerifier.addr.send(payout)) {\r\n                    makerBet.trustedVerifierFeeSent = false;\r\n                    fullyWithdrawn = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return fullyWithdrawn;\r\n    }\r\n\r\n    /* External views */\r\n    function getOwner() external view returns(address) {\r\n        return owner;\r\n    }\r\n\r\n    function isAdmin(address addr) external view returns(bool) {\r\n        return admins[addr];\r\n    }\r\n\r\n    function getVerifier(address addr) external view returns(address, uint, uint) {\r\n        Verifier memory verifier = verifiers[addr];\r\n        return (verifier.addr, verifier.feeRate, verifier.baseFee);\r\n    }\r\n\r\n    function getMakerBetBasicInfo(uint makerBetId, address maker) external view returns(uint, address, address, uint, uint, uint) {\r\n        MakerBet memory makerBet = makerBets[makerBetId][maker];\r\n        return (makerBet.makerBetId, makerBet.maker, makerBet.trustedVerifier.addr, makerBet.trustedVerifier.feeRate, makerBet.trustedVerifier.baseFee, makerBet.expiry);\r\n    }\r\n\r\n    function getMakerBetDetails(uint makerBetId, address maker) external view returns(uint, BetStatus, uint, uint, uint, uint, uint, BetOutcome, bool, bool) {\r\n        MakerBet memory makerBet = makerBets[makerBetId][maker];\r\n        return (makerBet.makerBetId, makerBet.status, makerBet.odds, makerBet.totalFund, makerBet.reservedFund, makerBet.takerBetsCount, makerBet.totalStake, makerBet.outcome, makerBet.makerFundWithdrawn, makerBet.trustedVerifierFeeSent);\r\n    }\r\n\r\n    function getTakerBet(uint makerBetId, address maker, uint takerBetId, address taker) external view returns(uint, address, uint, uint, bool) {\r\n        MakerBet memory makerBet = makerBets[makerBetId][maker];\r\n        for (uint betIndex = 0; betIndex < makerBet.takerBetsCount; betIndex++) {\r\n            TakerBet memory takerBet = makerBet.takerBets[betIndex];\r\n\r\n            if (takerBet.takerBetId == takerBetId && takerBet.taker == taker) {\r\n                return (takerBet.takerBetId, takerBet.taker, takerBet.odds, takerBet.stake, takerBet.settled);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Math utilities */\r\n    function mul(uint256 _a, uint256 _b) private pure returns(uint256 c) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = _a * _b;\r\n        assert(c / _a == _b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 _a, uint256 _b) private pure returns(uint256) {\r\n        assert(_b <= _a);\r\n        return _a - _b;\r\n    }\r\n\r\n    function add(uint256 _a, uint256 _b) private pure returns(uint256 c) {\r\n        c = _a + _b;\r\n        assert(c >= _a);\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getVerifier\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"takerBetId\",\"type\":\"uint256\"},{\"name\":\"taker\",\"type\":\"address\"}],\"name\":\"getTakerBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"}],\"name\":\"pauseBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minMakerBetFund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"maxCount\",\"type\":\"uint256\"},{\"name\":\"minPercentage\",\"type\":\"uint256\"}],\"name\":\"changeTakerBetConstraints\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"}],\"name\":\"addFund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"outcome\",\"type\":\"uint256\"}],\"name\":\"settleBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"makerBetsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"},{\"name\":\"odds\",\"type\":\"uint256\"},{\"name\":\"takerBetId\",\"type\":\"uint256\"}],\"name\":\"takeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"weis\",\"type\":\"uint256\"}],\"name\":\"changeMinMakerBetFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"}],\"name\":\"closeBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"getMakerBetBasicInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"odds\",\"type\":\"uint256\"}],\"name\":\"updateOdds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"getMakerBetDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAllowedTakerBetsPerMakerBet\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"name\":\"odds\",\"type\":\"uint256\"},{\"name\":\"trustedVerifier\",\"type\":\"address\"},{\"name\":\"trustedVerifierFeeRate\",\"type\":\"uint256\"},{\"name\":\"trustedVerifierBaseFee\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"makeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"feeRate\",\"type\":\"uint256\"},{\"name\":\"baseFee\",\"type\":\"uint256\"}],\"name\":\"updateVerifier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAllowedStakeInPercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"makerBetId\",\"type\":\"uint256\"}],\"name\":\"reopenBet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"oldBaseFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newBaseFee\",\"type\":\"uint256\"}],\"name\":\"LogUpdateVerifier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"LogMakeBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldTotalFund\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newTotalFund\",\"type\":\"uint256\"}],\"name\":\"LogAddFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldOdds\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newOdds\",\"type\":\"uint256\"}],\"name\":\"LogUpdateOdds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"LogPauseBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"LogReopenBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"LogCloseBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"takerBetId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"taker\",\"type\":\"address\"}],\"name\":\"LogTakeBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"}],\"name\":\"LogSettleBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"makerBetId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"}]","ContractName":"InterbetCore","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d64d87c62fc790ad06cbc7c13386d155faedd1bbbb6e1974d8fc763aedb95090"}]}