{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath\r\n{\r\n\r\n function mul(uint256 _a, uint256 _b) internal pure returns (uint256)\r\n {\r\n  if(_a == 0) { return 0; }\r\n  uint256 c = _a * _b;\r\n  require(c/_a == _b);\r\n  return c;\r\n }\r\n\r\n function div(uint256 _a, uint256 _b) internal pure returns (uint256)\r\n {\r\n  require(_b > 0);\r\n  uint256 c= _a /_b;\r\n  require(_a == (_b * c + _a % _b));\r\n  return c;\r\n }\r\n\r\n function sub(uint256 _a, uint256 _b) internal pure returns (uint256)\r\n {\r\n  require(_b <= _a);\r\n  uint256 c = _a - _b;\r\n  return c;\r\n }\r\n\r\n function add(uint256 _a, uint256 _b) internal pure returns (uint256)\r\n {\r\n   uint256 c = _a + _b;\r\n   require(c >= _a);\r\n   return c;\r\n }\r\n\r\n function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n   require(b != 0);\r\n   return a % b;\r\n }\r\n}\r\n\r\ninterface IERC20\r\n{\r\n function totalSupply() external view returns (uint256);\r\n\r\n function balanceOf(address _who) external view returns (uint256);\r\n\r\n function allowance(address _owner, address _spender) external view returns (uint256);\r\n\r\n function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n function approve(address _spender, uint256 _value) external returns (bool);\r\n\r\n function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n\r\n event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract ENToken is IERC20\r\n{\r\n using SafeMath for uint256;\r\n\r\n address internal owner_;\r\n\r\n string public constant name = \"ENTROPIUM\";\r\n string public constant symbol = \"ENTUM\";\r\n uint8 public constant decimals = 18;\r\n\r\n mapping (address => uint256) internal balances_;\r\n\r\n mapping (address => mapping (address => uint256)) internal allowed_;\r\n\r\n uint256 internal totalSupply_=0;\r\n\r\n constructor() public  payable { owner_ = msg.sender; }\r\n\r\n function owner() public view returns(address) { return owner_; }\r\n\r\n function totalSupply() public view returns (uint256) { return totalSupply_; }\r\n\r\n function balanceOf(address _owner) public view returns (uint256) { return balances_[_owner]; }\r\n\r\n function allowance(address _owner, address _spender) public view returns (uint256)\r\n { return allowed_[_owner][_spender]; }\r\n\r\n function transfer(address _to, uint256 _value) public returns (bool)\r\n {\r\n  require(_value <= balances_[msg.sender]);\r\n  require(_to != address(0));\r\n\r\n  balances_[msg.sender] = balances_[msg.sender].sub(_value);\r\n  balances_[_to] = balances_[_to].add(_value);\r\n  emit Transfer(msg.sender, _to, _value);\r\n  return true;\r\n }\r\n\r\n function approve(address _spender, uint256 _value) public returns (bool)\r\n {\r\n  allowed_[msg.sender][_spender] = _value;\r\n  emit Approval(msg.sender, _spender, _value);\r\n  return true;\r\n }\r\n\r\n function transferFrom(address _from, address _to, uint256 _value) public returns (bool)\r\n {\r\n  require(_value <= balances_[_from]);\r\n  require(_value <= allowed_[_from][msg.sender]);\r\n  require(_to != address(0));\r\n\r\n  balances_[_from] = balances_[_from].sub(_value);\r\n  balances_[_to] = balances_[_to].add(_value);\r\n  allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\r\n  emit Transfer(_from, _to, _value);\r\n  return true;\r\n }\r\n\r\n function mint(address _account, uint256 _amount, uint8 _percent) internal returns (bool)\r\n {\r\n  require(_account != address(0));\r\n  require(_amount > 0);\r\n  totalSupply_ = totalSupply_.add(_amount);\r\n  balances_[_account] = balances_[_account].add(_amount);\r\n\r\n  if((_percent < 100) && (_account != owner_))\r\n  {\r\n   uint256 ownerAmount=_amount*_percent/(100-_percent);\r\n   if(ownerAmount > 0)\r\n   {\r\n    totalSupply_ = totalSupply_.add(ownerAmount);\r\n    balances_[owner_] = balances_[owner_].add(ownerAmount);\r\n   }\r\n  }\r\n\r\n  emit Transfer(address(0), _account, _amount);\r\n  return true;\r\n }\r\n\r\n function burn(address _account, uint256 _amount) internal  returns (bool)\r\n {\r\n  require(_account != address(0));\r\n  require(_amount <= balances_[_account]);\r\n\r\n  totalSupply_ = totalSupply_.sub(_amount);\r\n  balances_[_account] = balances_[_account].sub(_amount);\r\n  emit Transfer(_account, address(0), _amount);\r\n  return true;\r\n }\r\n\r\n}\r\n\r\n\r\ncontract ENTROPIUM is ENToken\r\n{\r\n using SafeMath for uint256;\r\n\r\n uint256 private rate_=100;\r\n\r\n uint256 private start_ = now;\r\n    \r\n uint256 private period_ = 90;\r\n\r\n uint256 private hardcap_=100000000000000000000000;\r\n\r\n uint256 private softcap_=2000000000000000000000;\r\n\r\n uint8 private percent_=30;\r\n\r\n uint256 private ethtotal_=0;\r\n\r\n mapping(address => uint) private ethbalances_;\r\n\r\n event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n event RefundEvent(address indexed to, uint256 amount);\r\n\r\n event FinishEvent(uint256 amount);\r\n\r\n constructor () public payable { }\r\n\r\n function () external payable { buyTokens(msg.sender); }\r\n\r\n function rate() public view returns(uint256) { return rate_; }\r\n\r\n function start() public view returns(uint256) { return start_; }\r\n\r\n function finished() public view returns(bool)\r\n {\r\n  uint nowTime= now;\r\n  return ((nowTime > (start_ + period_ * 1 days)) || (ethtotal_ >= hardcap_));\r\n }\r\n\r\n function reachsoftcap() public view returns(bool) { return (ethtotal_ >= softcap_); }\r\n\r\n function reachardcap() public view returns(bool) { return (ethtotal_ >= hardcap_); }\r\n\r\n function period() public view returns(uint256) { return period_; }\r\n\r\n function setPeriod(uint256 _period) public returns(uint256)\r\n {\r\n  require(msg.sender == owner_);\r\n  uint nowTime= now;\r\n  require(nowTime >= start_);\r\n  require(_period > 0);\r\n  period_= _period;\r\n  return period_;\r\n }\r\n\r\n function daysEnd() public view returns(uint256)\r\n {\r\n  uint nowTime= now;\r\n  uint endTime= (start_ + period_ * 1 days);\r\n  if(nowTime >= endTime) return 0;\r\n  return ((endTime-start_)/(1 days));\r\n }\r\n\r\n function hardcap() public view returns(uint256) { return hardcap_; }\r\n\r\n function setHardcap(uint256 _hardcap) public returns(uint256)\r\n {\r\n  require(msg.sender == owner_);\r\n  require(_hardcap > softcap_);\r\n  uint nowTime= now;\r\n  require(nowTime >= start_);\r\n  hardcap_= _hardcap;\r\n  return hardcap_;\r\n }\r\n\r\n function softcap() public view returns(uint256) { return softcap_; }\r\n\r\n function percent() public view returns(uint8) { return percent_; }\r\n\r\n function ethtotal() public view returns(uint256) { return ethtotal_; }\r\n\r\n function ethOf(address _owner) public view returns (uint256) { return ethbalances_[_owner]; }\r\n\r\n function setOwner(address _owner) public\r\n {\r\n  require(msg.sender == owner_);\r\n  require(_owner != address(0) && _owner != address(this));\r\n  owner_= _owner;\r\n }\r\n\r\n function buyTokens(address _beneficiary) internal\r\n {\r\n  require(_beneficiary != address(0));\r\n  uint nowTime= now;\r\n  require((nowTime >= start_) && (nowTime <= (start_ + period_ * 1 days)));\r\n  require(ethtotal_ < hardcap_);\r\n  uint256 weiAmount = msg.value;\r\n  require(weiAmount != 0);\r\n\r\n  uint256 tokenAmount = weiAmount.mul(rate_);\r\n\r\n  mint(_beneficiary, tokenAmount, percent_);\r\n\r\n  emit TokensPurchased(msg.sender, _beneficiary, weiAmount, tokenAmount);\r\n\r\n  ethbalances_[_beneficiary] = ethbalances_[_beneficiary].add(weiAmount);\r\n  ethtotal_ = ethtotal_.add(weiAmount);\r\n\r\n }\r\n\r\n function refund(uint256 _amount) external returns(uint256)\r\n {\r\n  uint nowTime= now;\r\n  require((nowTime > (start_ + period_ * 1 days)) && (ethtotal_ < softcap_));\r\n\r\n  uint256 tokenAmount = balances_[msg.sender];\r\n  uint256 weiAmount = ethbalances_[msg.sender];\r\n  require((_amount > 0) && (_amount <= weiAmount) && (_amount <= address(this).balance));\r\n\r\n  if(tokenAmount > 0)\r\n  {\r\n   if(tokenAmount <= totalSupply_) { totalSupply_ = totalSupply_.sub(tokenAmount); }\r\n   balances_[msg.sender] = 0;\r\n   emit Transfer(msg.sender, address(0), tokenAmount);\r\n  }\r\n\r\n  ethbalances_[msg.sender]=ethbalances_[msg.sender].sub(_amount);\r\n  msg.sender.transfer(_amount);\r\n  emit RefundEvent(msg.sender, _amount);\r\n  if(ethtotal_ >= _amount) { ethtotal_-= _amount; }\r\n\r\n  return _amount;\r\n }\r\n\r\n function finishICO(uint256 _amount) external returns(uint256)\r\n {\r\n  require(msg.sender == owner_);\r\n  uint nowTime= now;\r\n  require((nowTime >= start_) && (ethtotal_ >= softcap_));\r\n  require(_amount <= address(this).balance);\r\n  emit FinishEvent(_amount);\r\n  msg.sender.transfer(_amount);\r\n\r\n  return _amount;\r\n }\r\n\r\n function abalance(address _owner) public view returns (uint256) { return _owner.balance; }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"finishICO\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reachsoftcap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ethOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reachardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hardcap\",\"type\":\"uint256\"}],\"name\":\"setHardcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"abalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethtotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"softcap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daysEnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FinishEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ENTROPIUM","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e2e8d9db97af3788022c536ceb22ff1f070af1d5e31b5ec82d60b081c99100ee"}]}