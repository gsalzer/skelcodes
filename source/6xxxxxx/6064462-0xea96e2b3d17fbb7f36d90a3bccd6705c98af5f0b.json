{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/mixins/ERC223ReceiverMixin.sol\r\n\r\ncontract ERC223ReceiverMixin {\r\n  function tokenFallback(address _from, uint256 _value, bytes _data) public;\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/mixins/ERC223Mixin.sol\r\n\r\n/// @title Custom implementation of ERC223 \r\n/// @author Aler Denisov <aler.zampillo@gmail.com>\r\ncontract ERC223Mixin is StandardToken {\r\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  ) public returns (bool) \r\n  {\r\n    bytes memory empty;\r\n    return transferFrom(\r\n      _from, \r\n      _to,\r\n      _value,\r\n      empty);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    bytes _data\r\n  ) public returns (bool)\r\n  {\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    if (isContract(_to)) {\r\n      return transferToContract(\r\n        _from, \r\n        _to, \r\n        _value, \r\n        _data);\r\n    } else {\r\n      return transferToAddress(\r\n        _from, \r\n        _to, \r\n        _value, \r\n        _data); \r\n    }\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\r\n    if (isContract(_to)) {\r\n      return transferToContract(\r\n        msg.sender,\r\n        _to,\r\n        _value,\r\n        _data); \r\n    } else {\r\n      return transferToAddress(\r\n        msg.sender,\r\n        _to,\r\n        _value,\r\n        _data);\r\n    }\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool success) {\r\n    bytes memory empty;\r\n    return transfer(_to, _value, empty);\r\n  }\r\n\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 length;\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly {\r\n      //retrieve the size of the code on target address, this needs assembly\r\n      length := extcodesize(_addr)\r\n    }  \r\n    return (length>0);\r\n  }\r\n\r\n  function moveTokens(address _from, address _to, uint256 _value) internal returns (bool success) {\r\n    if (balanceOf(_from) < _value) {\r\n      revert();\r\n    }\r\n    balances[_from] = balanceOf(_from).sub(_value);\r\n    balances[_to] = balanceOf(_to).add(_value);\r\n\r\n    return true;\r\n  }\r\n\r\n  function transferToAddress(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    bytes _data\r\n  ) internal returns (bool success) \r\n  {\r\n    require(moveTokens(_from, _to, _value));\r\n    emit Transfer(_from, _to, _value);\r\n    emit Transfer(_from, _to, _value, _data); // solium-disable-line arg-overflow\r\n    return true;\r\n  }\r\n  \r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    bytes _data\r\n  ) internal returns (bool success) \r\n  {\r\n    require(moveTokens(_from, _to, _value));\r\n    ERC223ReceiverMixin(_to).tokenFallback(_from, _value, _data);\r\n    emit Transfer(_from, _to, _value);\r\n    emit Transfer(_from, _to, _value, _data); // solium-disable-line arg-overflow\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/mixins/RBACMixin.sol\r\n\r\n/// @title Role based access control mixin for MUST Platform\r\n/// @author Aler Denisov <aler.zampillo@gmail.com>\r\n/// @dev Ignore DRY approach to achieve readability\r\ncontract RBACMixin {\r\n  /// @notice Constant string message to throw on lack of access\r\n  string constant FORBIDDEN = \"Haven't enough right to access\";\r\n  /// @notice Public map of owners\r\n  mapping (address => bool) public owners;\r\n  /// @notice Public map of minters\r\n  mapping (address => bool) public minters;\r\n\r\n  /// @notice The event indicates the addition of a new owner\r\n  /// @param who is address of added owner\r\n  event AddOwner(address indexed who);\r\n  /// @notice The event indicates the deletion of an owner\r\n  /// @param who is address of deleted owner\r\n  event DeleteOwner(address indexed who);\r\n\r\n  /// @notice The event indicates the addition of a new minter\r\n  /// @param who is address of added minter\r\n  event AddMinter(address indexed who);\r\n  /// @notice The event indicates the deletion of a minter\r\n  /// @param who is address of deleted minter\r\n  event DeleteMinter(address indexed who);\r\n\r\n  constructor () public {\r\n    _setOwner(msg.sender, true);\r\n  }\r\n\r\n  /// @notice The functional modifier rejects the interaction of senders who are not owners\r\n  modifier onlyOwner() {\r\n    require(isOwner(msg.sender), FORBIDDEN);\r\n    _;\r\n  }\r\n\r\n  /// @notice Functional modifier for rejecting the interaction of senders that are not minters\r\n  modifier onlyMinter() {\r\n    require(isMinter(msg.sender), FORBIDDEN);\r\n    _;\r\n  }\r\n\r\n  /// @notice Look up for the owner role on providen address\r\n  /// @param _who is address to look up\r\n  /// @return A boolean of owner role\r\n  function isOwner(address _who) public view returns (bool) {\r\n    return owners[_who];\r\n  }\r\n\r\n  /// @notice Look up for the minter role on providen address\r\n  /// @param _who is address to look up\r\n  /// @return A boolean of minter role\r\n  function isMinter(address _who) public view returns (bool) {\r\n    return minters[_who];\r\n  }\r\n\r\n  /// @notice Adds the owner role to provided address\r\n  /// @dev Requires owner role to interact\r\n  /// @param _who is address to add role\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function addOwner(address _who) public onlyOwner returns (bool) {\r\n    _setOwner(_who, true);\r\n  }\r\n\r\n  /// @notice Deletes the owner role to provided address\r\n  /// @dev Requires owner role to interact\r\n  /// @param _who is address to delete role\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function deleteOwner(address _who) public onlyOwner returns (bool) {\r\n    _setOwner(_who, false);\r\n  }\r\n\r\n  /// @notice Adds the minter role to provided address\r\n  /// @dev Requires owner role to interact\r\n  /// @param _who is address to add role\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function addMinter(address _who) public onlyOwner returns (bool) {\r\n    _setMinter(_who, true);\r\n  }\r\n\r\n  /// @notice Deletes the minter role to provided address\r\n  /// @dev Requires owner role to interact\r\n  /// @param _who is address to delete role\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function deleteMinter(address _who) public onlyOwner returns (bool) {\r\n    _setMinter(_who, false);\r\n  }\r\n\r\n  /// @notice Changes the owner role to provided address\r\n  /// @param _who is address to change role\r\n  /// @param _flag is next role status after success\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function _setOwner(address _who, bool _flag) private returns (bool) {\r\n    require(owners[_who] != _flag);\r\n    owners[_who] = _flag;\r\n    if (_flag) {\r\n      emit AddOwner(_who);\r\n    } else {\r\n      emit DeleteOwner(_who);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /// @notice Changes the minter role to provided address\r\n  /// @param _who is address to change role\r\n  /// @param _flag is next role status after success\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function _setMinter(address _who, bool _flag) private returns (bool) {\r\n    require(minters[_who] != _flag);\r\n    minters[_who] = _flag;\r\n    if (_flag) {\r\n      emit AddMinter(_who);\r\n    } else {\r\n      emit DeleteMinter(_who);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/mixins/RBACERC223TokenFinalization.sol\r\n\r\n/// @title Role based token finalization mixin\r\n/// @author Aler Denisov <aler.zampillo@gmail.com>\r\ncontract RBACERC223TokenFinalization is ERC223Mixin, RBACMixin {\r\n  event Finalize();\r\n  /// @notice Public field inicates the finalization state of smart-contract\r\n  bool public finalized;\r\n\r\n  /// @notice The functional modifier rejects the interaction if contract isn't finalized\r\n  modifier isFinalized() {\r\n    require(finalized);\r\n    _;\r\n  }\r\n\r\n  /// @notice The functional modifier rejects the interaction if contract is finalized\r\n  modifier notFinalized() {\r\n    require(!finalized);\r\n    _;\r\n  }\r\n\r\n  /// @notice Finalizes contract\r\n  /// @dev Requires owner role to interact\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function finalize() public notFinalized onlyOwner returns (bool) {\r\n    finalized = true;\r\n    emit Finalize();\r\n    return true;\r\n  }\r\n\r\n  /// @dev Overrides ERC20 interface to prevent interaction before finalization\r\n  function transferFrom(address _from, address _to, uint256 _value) public isFinalized returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  /// @dev Overrides ERC223 interface to prevent interaction before finalization\r\n  // solium-disable-next-line arg-overflow\r\n  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public isFinalized returns (bool) {\r\n    return super.transferFrom(_from, _to, _value, _data); // solium-disable-line arg-overflow\r\n  }\r\n\r\n  /// @dev Overrides ERC223 interface to prevent interaction before finalization\r\n  function transfer(address _to, uint256 _value, bytes _data) public isFinalized returns (bool) {\r\n    return super.transfer(_to, _value, _data);\r\n  }\r\n\r\n  /// @dev Overrides ERC20 interface to prevent interaction before finalization\r\n  function transfer(address _to, uint256 _value) public isFinalized returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  /// @dev Overrides ERC20 interface to prevent interaction before finalization\r\n  function approve(address _spender, uint256 _value) public isFinalized returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  /// @dev Overrides ERC20 interface to prevent interaction before finalization\r\n  function increaseApproval(address _spender, uint256 _addedValue) public isFinalized returns (bool) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  /// @dev Overrides ERC20 interface to prevent interaction before finalization\r\n  function decreaseApproval(address _spender, uint256 _subtractedValue) public isFinalized returns (bool) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/mixins/RBACMintableTokenMixin.sol\r\n\r\ncontract RBACMintableTokenMixin is StandardToken, RBACMixin {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    onlyMinter\r\n    canMint\r\n    public\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner canMint internal returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20/StandardBurnableToken.sol\r\n\r\n/**\r\n * @title Standard Burnable Token\r\n * @dev Adds burnFrom method to ERC20 implementations\r\n */\r\ncontract StandardBurnableToken is BurnableToken, StandardToken {\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _value uint256 The amount of token to be burned\r\n   */\r\n  function burnFrom(address _from, uint256 _value) public {\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n    // this function needs to emit an event with the updated approval.\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    _burn(_from, _value);\r\n  }\r\n}\r\n\r\n// File: contracts/MustToken.sol\r\n\r\n/// @title MUST Platform token implementation\r\n/// @author Aler Denisov <aler.zampillo@gmail.com>\r\n/// @dev Implements ERC20, ERC223 and MintableToken interfaces as well as capped and finalization logic\r\ncontract MustToken is StandardBurnableToken, RBACERC223TokenFinalization, RBACMintableTokenMixin {\r\n  /// @notice Constant field with token full name\r\n  // solium-disable-next-line uppercase\r\n  string constant public name = \"Main Universal Standard of Tokenization\"; \r\n  /// @notice Constant field with token symbol\r\n  string constant public symbol = \"MUST\"; // solium-disable-line uppercase\r\n  /// @notice Constant field with token precision depth\r\n  uint256 constant public decimals = 8; // solium-disable-line uppercase\r\n  /// @notice Constant field with token cap (total supply limit)\r\n  uint256 constant public cap = 5 * (10 ** 6) * (10 ** decimals); // solium-disable-line uppercase\r\n\r\n  /// @notice Overrides original mint function from MintableToken to limit minting over cap\r\n  /// @param _to The address that will receive the minted tokens.\r\n  /// @param _amount The amount of tokens to mint.\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    returns (bool) \r\n  {\r\n    require(totalSupply().add(_amount) <= cap);\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n  /// @notice Overrides finalize function from RBACERC223TokenFinalization to prevent future minting after finalization\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function finalize() public returns (bool) {\r\n    require(super.finalize());\r\n    require(finishMinting());\r\n    return true;\r\n  }\r\n\r\n  /// @notice Overrides finishMinting function from RBACMintableTokenMixin to prevent finishing minting before finalization\r\n  /// @return A boolean that indicates if the operation was successful.\r\n  function finishMinting() internal returns (bool) {\r\n    require(finalized == true);\r\n    require(super.finishMinting());\r\n    return true;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"deleteOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"deleteMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"AddOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"DeleteOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"AddMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"}],\"name\":\"DeleteMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"MustToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d1ef4e706fefc4aee2bd33d0b12f6dcc2fddc37c1f6fb03c7c77c3bd309d1ae1"}]}