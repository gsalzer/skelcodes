{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    mapping(address => bool) owners;\r\n    mapping(address => bool) managers;\r\n\r\n    event OwnerAdded(address indexed newOwner);\r\n    event OwnerDeleted(address indexed owner);\r\n    event ManagerAdded(address indexed newOwner);\r\n    event ManagerDeleted(address indexed owner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owners[msg.sender] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(isManager(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function addOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0));\r\n        owners[_newOwner] = true;\r\n        emit OwnerAdded(_newOwner);\r\n    }\r\n\r\n    function delOwner(address _owner) external onlyOwner {\r\n        require(owners[_owner]);\r\n        owners[_owner] = false;\r\n        emit OwnerDeleted(_owner);\r\n    }\r\n\r\n\r\n    function addManager(address _manager) external onlyOwner {\r\n        require(_manager != address(0));\r\n        managers[_manager] = true;\r\n        emit ManagerAdded(_manager);\r\n    }\r\n\r\n    function delManager(address _manager) external onlyOwner {\r\n        require(managers[_manager]);\r\n        managers[_manager] = false;\r\n        emit ManagerDeleted(_manager);\r\n    }\r\n\r\n    function isOwner(address _owner) public view returns (bool) {\r\n        return owners[_owner];\r\n    }\r\n\r\n    function isManager(address _manager) public view returns (bool) {\r\n        return managers[_manager];\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title TokenTimelock\r\n * @dev TokenTimelock is a token holder contract that will allow a\r\n * beneficiary to extract the tokens after a given release time\r\n */\r\ncontract Escrow is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Stage {\r\n        uint releaseTime;\r\n        uint percent;\r\n        bool transferred;\r\n    }\r\n\r\n    mapping (uint => Stage) public stages;\r\n    uint public stageCount;\r\n\r\n    uint public stopDay;\r\n    uint public startBalance = 0;\r\n\r\n\r\n    constructor(uint _stopDay) public {\r\n        stopDay = _stopDay;\r\n    }\r\n\r\n    function() payable public {\r\n\r\n    }\r\n\r\n    //1% - 100, 10% - 1000 50% - 5000\r\n    function addStage(uint _releaseTime, uint _percent) onlyOwner public {\r\n        require(_percent >= 100);\r\n        require(_releaseTime > stages[stageCount].releaseTime);\r\n        stageCount++;\r\n        stages[stageCount].releaseTime = _releaseTime;\r\n        stages[stageCount].percent = _percent;\r\n    }\r\n\r\n\r\n    function getETH(uint _stage, address _to) onlyManager external {\r\n        require(stages[_stage].releaseTime < now);\r\n        require(!stages[_stage].transferred);\r\n        require(_to != address(0));\r\n\r\n        if (startBalance == 0) {\r\n            startBalance = address(this).balance;\r\n        }\r\n\r\n        uint val = valueFromPercent(startBalance, stages[_stage].percent);\r\n        stages[_stage].transferred = true;\r\n        _to.transfer(val);\r\n    }\r\n\r\n\r\n    function getAllETH(address _to) onlyManager external {\r\n        require(stopDay < now);\r\n        require(address(this).balance > 0);\r\n        require(_to != address(0));\r\n\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n\r\n    function transferETH(address _to) onlyOwner external {\r\n        require(address(this).balance > 0);\r\n        require(_to != address(0));\r\n        _to.transfer(address(this).balance);\r\n    }\r\n\r\n\r\n    //1% - 100, 10% - 1000 50% - 5000\r\n    function valueFromPercent(uint _value, uint _percent) internal pure returns (uint amount)    {\r\n        uint _amount = _value.mul(_percent).div(10000);\r\n        return (_amount);\r\n    }\r\n\r\n    function setStopDay(uint _stopDay) onlyOwner external {\r\n        stopDay = _stopDay;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_stopDay\",\"type\":\"uint256\"}],\"name\":\"setStopDay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopDay\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getAllETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"delOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"name\":\"percent\",\"type\":\"uint256\"},{\"name\":\"transferred\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stage\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_releaseTime\",\"type\":\"uint256\"},{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"addStage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"delManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stageCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_stopDay\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ManagerDeleted\",\"type\":\"event\"}]","ContractName":"Escrow","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005f751c00","Library":"","SwarmSource":"bzzr://c62b407954252e407fbac0052997bfe78e453869286a47a4ea337e31c2196fac"}]}