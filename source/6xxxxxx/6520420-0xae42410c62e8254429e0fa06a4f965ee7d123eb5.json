{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts\\utils\\ItemUtils.sol\r\n\r\nlibrary ItemUtils {\r\n\r\n    uint256 internal constant UID_SHIFT = 2 ** 0; // 32\r\n    uint256 internal constant RARITY_SHIFT = 2 ** 32; // 4\r\n    uint256 internal constant CLASS_SHIFT = 2 ** 36;  // 10\r\n    uint256 internal constant TYPE_SHIFT = 2 ** 46;  // 10\r\n    uint256 internal constant TIER_SHIFT = 2 ** 56; // 7\r\n    uint256 internal constant NAME_SHIFT = 2 ** 63; // 7\r\n    uint256 internal constant REGION_SHIFT = 2 ** 70; // 8\r\n    uint256 internal constant BASE_SHIFT = 2 ** 78;\r\n\r\n    function createItem(uint256 _class, uint256 _type, uint256 _rarity, uint256 _tier, uint256 _name, uint256 _region) internal pure returns (uint256 dna) {\r\n        dna = setClass(dna, _class);\r\n        dna = setType(dna, _type);\r\n        dna = setRarity(dna, _rarity);\r\n        dna = setTier(dna, _tier);\r\n        dna = setName(dna, _name);\r\n        dna = setRegion(dna, _region);\r\n    }\r\n\r\n    function setUID(uint256 _dna, uint256 _value) internal pure returns (uint256) {\r\n        require(_value < RARITY_SHIFT / UID_SHIFT);\r\n        return setValue(_dna, _value, UID_SHIFT);\r\n    }\r\n\r\n    function setRarity(uint256 _dna, uint256 _value) internal pure returns (uint256) {\r\n        require(_value < CLASS_SHIFT / RARITY_SHIFT);\r\n        return setValue(_dna, _value, RARITY_SHIFT);\r\n    }\r\n\r\n    function setClass(uint256 _dna, uint256 _value) internal pure returns (uint256) {\r\n        require(_value < TYPE_SHIFT / CLASS_SHIFT);\r\n        return setValue(_dna, _value, CLASS_SHIFT);\r\n    }\r\n\r\n    function setType(uint256 _dna, uint256 _value) internal pure returns (uint256) {\r\n        require(_value < TIER_SHIFT / TYPE_SHIFT);\r\n        return setValue(_dna, _value, TYPE_SHIFT);\r\n    }\r\n\r\n    function setTier(uint256 _dna, uint256 _value) internal pure returns (uint256) {\r\n        require(_value < NAME_SHIFT / TIER_SHIFT);\r\n        return setValue(_dna, _value, TIER_SHIFT);\r\n    }\r\n\r\n    function setName(uint256 _dna, uint256 _value) internal pure returns (uint256) {\r\n        require(_value < REGION_SHIFT / NAME_SHIFT);\r\n        return setValue(_dna, _value, NAME_SHIFT);\r\n    }\r\n\r\n    function setRegion(uint256 _dna, uint256 _value) internal pure returns (uint256) {\r\n        require(_value < BASE_SHIFT / REGION_SHIFT);\r\n        return setValue(_dna, _value, REGION_SHIFT);\r\n    }\r\n\r\n    function getUID(uint256 _dna) internal pure returns (uint256) {\r\n        return (_dna % RARITY_SHIFT) / UID_SHIFT;\r\n    }\r\n\r\n    function getRarity(uint256 _dna) internal pure returns (uint256) {\r\n        return (_dna % CLASS_SHIFT) / RARITY_SHIFT;\r\n    }\r\n\r\n    function getClass(uint256 _dna) internal pure returns (uint256) {\r\n        return (_dna % TYPE_SHIFT) / CLASS_SHIFT;\r\n    }\r\n\r\n    function getType(uint256 _dna) internal pure returns (uint256) {\r\n        return (_dna % TIER_SHIFT) / TYPE_SHIFT;\r\n    }\r\n\r\n    function getTier(uint256 _dna) internal pure returns (uint256) {\r\n        return (_dna % NAME_SHIFT) / TIER_SHIFT;\r\n    }\r\n\r\n    function getName(uint256 _dna) internal pure returns (uint256) {\r\n        return (_dna % REGION_SHIFT) / NAME_SHIFT;\r\n    }\r\n\r\n    function getRegion(uint256 _dna) internal pure returns (uint256) {\r\n        return (_dna % BASE_SHIFT) / REGION_SHIFT;\r\n    }\r\n\r\n    function setValue(uint256 dna, uint256 value, uint256 shift) internal pure returns (uint256) {\r\n        return dna + (value * shift);\r\n    }\r\n}\r\n\r\n// File: contracts\\utils\\StringUtils.sol\r\n\r\nlibrary StringUtils {\r\n\r\n    function concat(string _base, string _value) internal pure returns (string) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        bytes memory _valueBytes = bytes(_value);\r\n\r\n        string memory _tmpValue = new string(_baseBytes.length + _valueBytes.length);\r\n        bytes memory _newValue = bytes(_tmpValue);\r\n\r\n        uint i;\r\n        uint j;\r\n\r\n        for (i = 0; i < _baseBytes.length; i++) {\r\n            _newValue[j++] = _baseBytes[i];\r\n        }\r\n\r\n        for (i = 0; i < _valueBytes.length; i++) {\r\n            _newValue[j++] = _valueBytes[i++];\r\n        }\r\n\r\n        return string(_newValue);\r\n    }\r\n\r\n    function uint2str(uint i) internal pure returns (string){\r\n        if (i == 0) return \"0\";\r\n        uint j = i;\r\n        uint length;\r\n        while (j != 0) {\r\n            length++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(length);\r\n        uint k = length - 1;\r\n        while (i != 0) {\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts\\Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an emitter and administrator addresses, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address emitter;\r\n    address administrator;\r\n\r\n    /**\r\n     * @dev Sets the original `emitter` of the contract\r\n     */\r\n    function setEmitter(address _emitter) internal {\r\n        require(_emitter != address(0));\r\n        require(emitter == address(0));\r\n        emitter = _emitter;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the original `administrator` of the contract\r\n     */\r\n    function setAdministrator(address _administrator) internal {\r\n        require(_administrator != address(0));\r\n        require(administrator == address(0));\r\n        administrator = _administrator;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the emitter.\r\n     */\r\n    modifier onlyEmitter() {\r\n        require(msg.sender == emitter);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the administrator.\r\n     */\r\n    modifier onlyAdministrator() {\r\n        require(msg.sender == administrator);\r\n        _;\r\n    }\r\n\r\n    /**\r\n   * @dev Allows the current super emitter to transfer control of the contract to a emitter.\r\n   * @param _emitter The address to transfer emitter ownership to.\r\n   * @param _administrator The address to transfer administrator ownership to.\r\n   */\r\n    function transferOwnership(address _emitter, address _administrator) public onlyAdministrator {\r\n        require(_emitter != _administrator);\r\n        require(_emitter != emitter);\r\n        require(_emitter != address(0));\r\n        require(_administrator != address(0));\r\n        emitter = _emitter;\r\n        administrator = _administrator;\r\n    }\r\n}\r\n\r\n// File: contracts\\token\\ERC20\\ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts\\math\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts\\token\\ERC20\\BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\token\\ERC20\\ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts\\token\\ERC20\\StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\GameCoin.sol\r\n\r\ncontract GameCoin is StandardToken {\r\n    string public constant name = \"GameCoin\";\r\n\r\n    string public constant symbol = \"GC\";\r\n\r\n    uint8 public constant decimals = 0;\r\n\r\n    bool public isGameCoin = true;\r\n\r\n    /**\r\n   * @dev Constructor that gives msg.sender all of existing tokens.\r\n   */\r\n    constructor(address[] owners) public {\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            _mint(owners[i], 2 * 10 ** 6);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param _account The account that will receive the created tokens.\r\n     * @param _amount The amount that will be created.\r\n     */\r\n    function _mint(address _account, uint256 _amount) internal {\r\n        require(_account != 0);\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_account] = balances[_account].add(_amount);\r\n        emit Transfer(address(0), _account, _amount);\r\n    }\r\n}\r\n\r\n// File: contracts\\PresaleGacha.sol\r\n\r\ncontract PresaleGacha {\r\n\r\n    uint32 internal constant CLASS_NONE = 0;\r\n    uint32 internal constant CLASS_CHARACTER = 1;\r\n    uint32 internal constant CLASS_CHEST = 2;\r\n    uint32 internal constant CLASS_MELEE = 3;\r\n    uint32 internal constant CLASS_RANGED = 4;\r\n    uint32 internal constant CLASS_ARMOR = 5;\r\n    uint32 internal constant CLASS_HELMET = 6;\r\n    uint32 internal constant CLASS_LEGS = 7;\r\n    uint32 internal constant CLASS_GLOVES = 8;\r\n    uint32 internal constant CLASS_BOOTS = 9;\r\n    uint32 internal constant CLASS_NECKLACE = 10;\r\n    uint32 internal constant CLASS_MODS = 11;\r\n    uint32 internal constant CLASS_TROPHY = 12;\r\n\r\n    uint32 internal constant TYPE_CHEST_NONE = 0;\r\n    uint32 internal constant TYPE_CHEST_APPRENTICE = 1;\r\n    uint32 internal constant TYPE_CHEST_WARRIOR = 2;\r\n    uint32 internal constant TYPE_CHEST_GLADIATOR = 3;\r\n    uint32 internal constant TYPE_CHEST_WARLORD = 4;\r\n    uint32 internal constant TYPE_CHEST_TOKEN_PACK = 5;\r\n    uint32 internal constant TYPE_CHEST_INVESTOR_PACK = 6;\r\n\r\n    uint32 internal constant TYPE_RANGED_PRESALE_RIFLE = 1;\r\n    uint32 internal constant TYPE_ARMOR_PRESALE_ARMOR = 1;\r\n    uint32 internal constant TYPE_LEGS_PRESALE_LEGS = 1;\r\n    uint32 internal constant TYPE_BOOTS_PRESALE_BOOTS = 1;\r\n    uint32 internal constant TYPE_GLOVES_PRESALE_GLOVES = 1;\r\n    uint32 internal constant TYPE_HELMET_PRESALE_HELMET = 1;\r\n    uint32 internal constant TYPE_NECKLACE_PRESALE_NECKLACE = 1;\r\n    uint32 internal constant TYPE_MODES_PRESALE_MODES = 1;\r\n\r\n    uint32 internal constant NAME_NONE = 0;\r\n    uint32 internal constant NAME_COSMIC = 1;\r\n    uint32 internal constant NAME_FUSION = 2;\r\n    uint32 internal constant NAME_CRIMSON = 3;\r\n    uint32 internal constant NAME_SHINING = 4;\r\n    uint32 internal constant NAME_ANCIENT = 5;\r\n\r\n    uint32 internal constant RARITY_NONE = 0;\r\n    uint32 internal constant RARITY_COMMON = 1;\r\n    uint32 internal constant RARITY_RARE = 2;\r\n    uint32 internal constant RARITY_EPIC = 3;\r\n    uint32 internal constant RARITY_LEGENDARY = 4;\r\n    uint32 internal constant RARITY_UNIQUE = 5;\r\n\r\n    struct ChestItem {\r\n        uint32 _class;\r\n        uint32 _type;\r\n        uint32 _rarity;\r\n        uint32 _tier;\r\n        uint32 _name;\r\n    }\r\n\r\n    mapping(uint256 => ChestItem) chestItems;\r\n\r\n    mapping(uint32 => uint32) apprenticeChestProbability;\r\n    mapping(uint32 => uint32) warriorChestProbability;\r\n    mapping(uint32 => uint32) gladiatorChestProbability;\r\n    mapping(uint32 => uint32) warlordChestProbability;\r\n\r\n    constructor () public {\r\n        chestItems[0] = ChestItem(CLASS_RANGED, TYPE_RANGED_PRESALE_RIFLE, RARITY_NONE, 0, NAME_NONE);\r\n        chestItems[1] = ChestItem(CLASS_ARMOR, TYPE_ARMOR_PRESALE_ARMOR, RARITY_NONE, 0, NAME_NONE);\r\n        chestItems[2] = ChestItem(CLASS_LEGS, TYPE_LEGS_PRESALE_LEGS, RARITY_NONE, 0, NAME_NONE);\r\n        chestItems[3] = ChestItem(CLASS_BOOTS, TYPE_BOOTS_PRESALE_BOOTS, RARITY_NONE, 0, NAME_NONE);\r\n        chestItems[4] = ChestItem(CLASS_GLOVES, TYPE_GLOVES_PRESALE_GLOVES, RARITY_NONE, 0, NAME_NONE);\r\n        chestItems[5] = ChestItem(CLASS_HELMET, TYPE_HELMET_PRESALE_HELMET, RARITY_NONE, 0, NAME_NONE);\r\n        chestItems[6] = ChestItem(CLASS_NECKLACE, TYPE_NECKLACE_PRESALE_NECKLACE, RARITY_NONE, 0, NAME_NONE);\r\n        chestItems[7] = ChestItem(CLASS_MODS, TYPE_MODES_PRESALE_MODES, RARITY_NONE, 0, NAME_NONE);\r\n\r\n        apprenticeChestProbability[0] = 60;\r\n        apprenticeChestProbability[1] = 29;\r\n        apprenticeChestProbability[2] = 5;\r\n        apprenticeChestProbability[3] = 3;\r\n        apprenticeChestProbability[4] = 2;\r\n        apprenticeChestProbability[5] = 1;\r\n\r\n        warriorChestProbability[0] = 10;\r\n        warriorChestProbability[1] = 20;\r\n        warriorChestProbability[2] = 15;\r\n        warriorChestProbability[3] = 25;\r\n        warriorChestProbability[4] = 25;\r\n        warriorChestProbability[5] = 5;\r\n\r\n        gladiatorChestProbability[0] = 15;\r\n        gladiatorChestProbability[1] = 15;\r\n        gladiatorChestProbability[2] = 20;\r\n        gladiatorChestProbability[3] = 20;\r\n        gladiatorChestProbability[4] = 18;\r\n        gladiatorChestProbability[5] = 12;\r\n\r\n        warlordChestProbability[0] = 10;\r\n        warlordChestProbability[1] = 30;\r\n        warlordChestProbability[2] = 60;\r\n    }\r\n\r\n    function getTier(uint32 _type, uint256 _id) internal pure returns (uint32){\r\n        if (_type == TYPE_CHEST_APPRENTICE) {\r\n            return (_id == 0 || _id == 3) ? 3 : (_id == 1 || _id == 4) ? 4 : 5;\r\n        } else if (_type == TYPE_CHEST_WARRIOR) {\r\n            return (_id == 0 || _id == 3 || _id == 5) ? 4 : (_id == 1 || _id == 4) ? 5 : 3;\r\n        } else if (_type == TYPE_CHEST_GLADIATOR) {\r\n            return (_id == 0 || _id == 3 || _id == 5) ? 5 : (_id == 2 || _id == 4) ? 5 : 3;\r\n        } else if (_type == TYPE_CHEST_WARLORD) {\r\n            return (_id == 1) ? 4 : 5;\r\n        } else {\r\n            require(false);\r\n        }\r\n    }\r\n\r\n    function getRarity(uint32 _type, uint256 _id) internal pure returns (uint32) {\r\n        if (_type == TYPE_CHEST_APPRENTICE) {\r\n            return _id < 3 ? RARITY_RARE : RARITY_EPIC;\r\n        } else if (_type == TYPE_CHEST_WARRIOR) {\r\n            return _id < 2 ? RARITY_RARE : (_id > 1 && _id < 5) ? RARITY_EPIC : RARITY_LEGENDARY;\r\n        } else if (_type == TYPE_CHEST_GLADIATOR) {\r\n            return _id == 0 ? RARITY_RARE : (_id > 0 && _id < 4) ? RARITY_EPIC : RARITY_LEGENDARY;\r\n        } else if (_type == TYPE_CHEST_WARLORD) {\r\n            return (_id == 0) ? RARITY_EPIC : RARITY_LEGENDARY;\r\n        } else {\r\n            require(false);\r\n        }\r\n    }\r\n\r\n    function isApprenticeChest(uint256 _identifier) internal pure returns (bool) {\r\n        return ItemUtils.getType(_identifier) == TYPE_CHEST_APPRENTICE;\r\n    }\r\n\r\n    function isWarriorChest(uint256 _identifier) internal pure returns (bool) {\r\n        return ItemUtils.getType(_identifier) == TYPE_CHEST_WARRIOR;\r\n    }\r\n\r\n    function isGladiatorChest(uint256 _identifier) internal pure returns (bool) {\r\n        return ItemUtils.getType(_identifier) == TYPE_CHEST_GLADIATOR;\r\n    }\r\n\r\n    function isWarlordChest(uint256 _identifier) internal pure returns (bool) {\r\n        return ItemUtils.getType(_identifier) == TYPE_CHEST_WARLORD;\r\n    }\r\n\r\n    function getApprenticeDistributedRandom(uint256 rnd) internal view returns (uint256) {\r\n        uint256 tempDist = 0;\r\n        for (uint8 i = 0; i < 6; i++) {\r\n            tempDist += apprenticeChestProbability[i];\r\n            if (rnd <= tempDist) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getWarriorDistributedRandom(uint256 rnd) internal view returns (uint256) {\r\n        uint256 tempDist = 0;\r\n        for (uint8 i = 0; i < 6; i++) {\r\n            tempDist += warriorChestProbability[i];\r\n            if (rnd <= tempDist) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getGladiatorDistributedRandom(uint256 rnd) internal view returns (uint256) {\r\n        uint256 tempDist = 0;\r\n        for (uint8 i = 0; i < 6; i++) {\r\n            tempDist += gladiatorChestProbability[i];\r\n            if (rnd <= tempDist) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getWarlordDistributedRandom(uint256 rnd) internal view returns (uint256) {\r\n        uint256 tempDist = 0;\r\n        for (uint8 i = 0; i < 3; i++) {\r\n            tempDist += warlordChestProbability[i];\r\n            if (rnd <= tempDist) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: contracts\\introspection\\ERC165.sol\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n// File: contracts\\token\\ERC721\\ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: contracts\\token\\ERC721\\ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: contracts\\token\\ERC721\\ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transferred\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n\r\n// File: contracts\\introspection\\SupportsInterfaceWithLookup.sol\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n// File: contracts\\utils\\AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\token\\ERC721\\ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: contracts\\token\\ERC721\\ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    ownedTokens[_from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\GlitchGoonsItem.sol\r\n\r\ncontract GlitchGoonsItem is PresaleGacha, ERC721Token, Ownable {\r\n    string public constant name = \"GlitchGoons\";\r\n\r\n    string public constant symbol = \"GG\";\r\n\r\n    uint256 internal id;\r\n    string internal tokenUriPref = \"https://static.glitch-goons.com/metadata/gg/\";\r\n\r\n    struct PresalePack {\r\n        uint32 available;\r\n        uint32 gameCoin;\r\n        uint256 price;\r\n    }\r\n\r\n    PresalePack tokenPack;\r\n    PresalePack investorPack;\r\n    PresalePack apprenticeChest;\r\n    PresalePack warriorChest;\r\n    PresalePack gladiatorChest;\r\n    PresalePack warlordChest;\r\n\r\n    uint256 private closingTime;\r\n    uint256 private openingTime;\r\n\r\n    GameCoin gameCoinContract;\r\n\r\n    constructor (address _emitter, address _administrator, address _gameCoin, uint256 _openingTime, uint256 _closingTime)\r\n    ERC721Token(name, symbol)\r\n    public {\r\n        setEmitter(_emitter);\r\n        setAdministrator(_administrator);\r\n\r\n        GameCoin gameCoinCandidate = GameCoin(_gameCoin);\r\n        require(gameCoinCandidate.isGameCoin());\r\n        gameCoinContract = gameCoinCandidate;\r\n\r\n        tokenPack = PresalePack(50, 4000, 10 ether);\r\n        investorPack = PresalePack(1, 10 ** 6, 500 ether);\r\n\r\n        apprenticeChest = PresalePack(550, 207, .5 ether);\r\n        warriorChest = PresalePack(200, 717, 1.75 ether);\r\n        gladiatorChest = PresalePack(80, 1405, 3.5 ether);\r\n        warlordChest = PresalePack(35, 3890, 10 ether);\r\n\r\n        closingTime = _closingTime;\r\n        openingTime = _openingTime;\r\n    }\r\n\r\n    function addItemToInternal(address _to, uint256 _class, uint256 _type, uint256 _rarity, uint256 _tier, uint256 _name, uint256 _region) internal {\r\n        uint256 identity = ItemUtils.createItem(_class, _type, _rarity, _tier, _name, _region);\r\n        identity = ItemUtils.setUID(identity, ++id);\r\n        _mint(_to, identity);\r\n    }\r\n\r\n    function addItemTo(address _to, uint256 _class, uint256 _type, uint256 _rarity, uint256 _tier, uint256 _name, uint256 _region) external onlyEmitter {\r\n        addItemToInternal(_to, _class, _type, _rarity, _tier, _name, _region);\r\n    }\r\n\r\n    function buyTokenPack(uint256 _region) external onlyWhileOpen canBuyPack(tokenPack) payable {\r\n        addItemToInternal(msg.sender, CLASS_CHEST, TYPE_CHEST_TOKEN_PACK, RARITY_NONE, 0, NAME_NONE, _region);\r\n        tokenPack.available--;\r\n        administrator.transfer(msg.value);\r\n    }\r\n\r\n    function buyInvestorPack(uint256 _region) external onlyWhileOpen canBuyPack(investorPack) payable {\r\n        addItemToInternal(msg.sender, CLASS_CHEST, TYPE_CHEST_INVESTOR_PACK, RARITY_NONE, 0, NAME_NONE, _region);\r\n        investorPack.available--;\r\n        administrator.transfer(msg.value);\r\n    }\r\n\r\n    function buyApprenticeChest(uint256 _region) external onlyWhileOpen canBuyPack(apprenticeChest) payable {\r\n        addItemToInternal(msg.sender, CLASS_CHEST, TYPE_CHEST_APPRENTICE, RARITY_NONE, 0, NAME_NONE, _region);\r\n        apprenticeChest.available--;\r\n        administrator.transfer(msg.value);\r\n    }\r\n\r\n    function buyWarriorChest(uint256 _region) external onlyWhileOpen canBuyPack(warriorChest) payable {\r\n        addItemToInternal(msg.sender, CLASS_CHEST, TYPE_CHEST_WARRIOR, RARITY_NONE, 0, NAME_NONE, _region);\r\n        warriorChest.available--;\r\n        administrator.transfer(msg.value);\r\n    }\r\n\r\n    function buyGladiatorChest(uint256 _region) external onlyWhileOpen canBuyPack(gladiatorChest) payable {\r\n        addItemToInternal(msg.sender, CLASS_CHEST, TYPE_CHEST_GLADIATOR, RARITY_NONE, 0, NAME_NONE, _region);\r\n        gladiatorChest.available--;\r\n        administrator.transfer(msg.value);\r\n    }\r\n\r\n    function buyWarlordChest(uint256 _region) external onlyWhileOpen canBuyPack(warlordChest) payable {\r\n        addItemToInternal(msg.sender, CLASS_CHEST, TYPE_CHEST_WARLORD, RARITY_NONE, 0, NAME_NONE, _region);\r\n        warlordChest.available--;\r\n        administrator.transfer(msg.value);\r\n    }\r\n\r\n    function openChest(uint256 _identifier) external onlyChestOwner(_identifier) {\r\n        uint256 _type = ItemUtils.getType(_identifier);\r\n\r\n        if (_type == TYPE_CHEST_TOKEN_PACK) {\r\n            transferTokens(tokenPack);\r\n        } else if (_type == TYPE_CHEST_INVESTOR_PACK) {\r\n            transferTokens(investorPack);\r\n        } else {\r\n            uint256 blockNum = block.number;\r\n\r\n            for (uint i = 0; i < 5; i++) {\r\n                uint256 hash = uint256(keccak256(abi.encodePacked(_identifier, blockNum, i, block.coinbase, block.timestamp, block.difficulty)));\r\n                blockNum--;\r\n                uint256 rnd = hash % 101;\r\n                uint32 _tier;\r\n                uint32 _rarity;\r\n                uint256 _id;\r\n\r\n                if (isApprenticeChest(_identifier)) {\r\n                    _id = getApprenticeDistributedRandom(rnd);\r\n                    _rarity = getRarity(TYPE_CHEST_APPRENTICE, _id);\r\n                    _tier = getTier(TYPE_CHEST_APPRENTICE, _id);\r\n                } else if (isWarriorChest(_identifier)) {\r\n                    _id = getWarriorDistributedRandom(rnd);\r\n                    _rarity = getRarity(TYPE_CHEST_WARRIOR, _id);\r\n                    _tier = getTier(TYPE_CHEST_WARRIOR, _id);\r\n                } else if (isGladiatorChest(_identifier)) {\r\n                    _id = getGladiatorDistributedRandom(rnd);\r\n                    _rarity = getRarity(TYPE_CHEST_GLADIATOR, _id);\r\n                    _tier = getTier(TYPE_CHEST_GLADIATOR, _id);\r\n                } else if (isWarlordChest(_identifier)) {\r\n                    _id = getWarlordDistributedRandom(rnd);\r\n                    _rarity = getRarity(TYPE_CHEST_WARLORD, _id);\r\n                    _tier = getTier(TYPE_CHEST_WARLORD, _id);\r\n                } else {\r\n                    require(false);\r\n                }\r\n\r\n                ChestItem storage chestItem = chestItems[hash % 8];\r\n                uint256 _region = ItemUtils.getRegion(_identifier);\r\n                uint256 _name = 1 + hash % 5;\r\n                if (i == 0) {\r\n                    if (isWarriorChest(_identifier)) {\r\n                        addItemToInternal(msg.sender, chestItem._class, chestItem._type, RARITY_RARE, 3, _name, _region);\r\n                    } else if (isGladiatorChest(_identifier)) {\r\n                        addItemToInternal(msg.sender, chestItem._class, chestItem._type, RARITY_RARE, 5, _name, _region);\r\n                    } else if (isWarlordChest(_identifier)) {\r\n                        addItemToInternal(msg.sender, chestItem._class, chestItem._type, RARITY_LEGENDARY, 5, _name, _region);\r\n                    } else {\r\n                        addItemToInternal(msg.sender, chestItem._class, chestItem._type, _rarity, _tier, _name, _region);\r\n                    }\r\n                } else {\r\n                    addItemToInternal(msg.sender, chestItem._class, chestItem._type, _rarity, _tier, _name, _region);\r\n                }\r\n            }\r\n        }\r\n\r\n        _burn(msg.sender, _identifier);\r\n    }\r\n\r\n    function getTokenPacksAvailable() view public returns (uint256) {\r\n        return tokenPack.available;\r\n    }\r\n\r\n    function getTokenPackPrice() view public returns (uint256) {\r\n        return tokenPack.price;\r\n    }\r\n\r\n    function getInvestorPacksAvailable() view public returns (uint256) {\r\n        return investorPack.available;\r\n    }\r\n\r\n    function getInvestorPackPrice() view public returns (uint256) {\r\n        return investorPack.price;\r\n    }\r\n\r\n    function getApprenticeChestAvailable() view public returns (uint256) {\r\n        return apprenticeChest.available;\r\n    }\r\n\r\n    function getApprenticeChestPrice() view public returns (uint256) {\r\n        return apprenticeChest.price;\r\n    }\r\n\r\n    function getWarriorChestAvailable() view public returns (uint256) {\r\n        return warriorChest.available;\r\n    }\r\n\r\n    function getWarriorChestPrice() view public returns (uint256) {\r\n        return warriorChest.price;\r\n    }\r\n\r\n    function getGladiatorChestAvailable() view public returns (uint256) {\r\n        return gladiatorChest.available;\r\n    }\r\n\r\n    function getGladiatorChestPrice() view public returns (uint256) {\r\n        return gladiatorChest.price;\r\n    }\r\n\r\n    function getWarlordChestAvailable() view public returns (uint256) {\r\n        return warlordChest.available;\r\n    }\r\n\r\n    function getWarlordChestPrice() view public returns (uint256) {\r\n        return warlordChest.price;\r\n    }\r\n\r\n    /**\r\n    * @dev Reverts if not in presale time range.\r\n    */\r\n    modifier onlyWhileOpen {\r\n        require(isOpen());\r\n        _;\r\n    }\r\n\r\n    modifier canBuyPack(PresalePack pack) {\r\n        require(msg.value == pack.price);\r\n        require(pack.available > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyChestOwner(uint256 _identity) {\r\n        require(ownerOf(_identity) == msg.sender);\r\n        require(ItemUtils.getClass(_identity) == CLASS_CHEST);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @return true if the presale is open, false otherwise.\r\n    */\r\n    function isOpen() public view returns (bool) {\r\n        return block.timestamp >= openingTime && block.timestamp <= closingTime;\r\n    }\r\n\r\n    function getClosingTime() public view returns (uint256) {\r\n        return closingTime;\r\n    }\r\n\r\n    function getOpeningTime() public view returns (uint256) {\r\n        return openingTime;\r\n    }\r\n\r\n    function transferTokens(PresalePack pack) internal {\r\n        require(gameCoinContract.balanceOf(address(this)) >= pack.gameCoin);\r\n        gameCoinContract.transfer(msg.sender, pack.gameCoin);\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) public view returns (string) {\r\n        require(exists(_tokenId));\r\n        return string(abi.encodePacked(tokenUriPref, StringUtils.uint2str(ItemUtils.getUID(_tokenId)), \".json\"));\r\n    }\r\n\r\n    function setTokenUriPref(string _uri) public onlyAdministrator {\r\n        tokenUriPref = _uri;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getWarriorChestAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"InterfaceId_ERC165\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWarriorChestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_region\",\"type\":\"uint256\"}],\"name\":\"buyApprenticeChest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getClosingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWarlordChestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWarlordChestAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getApprenticeChestAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGladiatorChestAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"uint256\"}],\"name\":\"openChest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_emitter\",\"type\":\"address\"},{\"name\":\"_administrator\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_class\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"uint256\"},{\"name\":\"_rarity\",\"type\":\"uint256\"},{\"name\":\"_tier\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"uint256\"},{\"name\":\"_region\",\"type\":\"uint256\"}],\"name\":\"addItemTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getApprenticeChestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_region\",\"type\":\"uint256\"}],\"name\":\"buyGladiatorChest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_region\",\"type\":\"uint256\"}],\"name\":\"buyTokenPack\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGladiatorChestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOpeningTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPackPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenUriPref\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_region\",\"type\":\"uint256\"}],\"name\":\"buyWarriorChest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_region\",\"type\":\"uint256\"}],\"name\":\"buyWarlordChest\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_region\",\"type\":\"uint256\"}],\"name\":\"buyInvestorPack\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorPacksAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInvestorPackPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenPacksAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_emitter\",\"type\":\"address\"},{\"name\":\"_administrator\",\"type\":\"address\"},{\"name\":\"_gameCoin\",\"type\":\"address\"},{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"GlitchGoonsItem","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005d6806d2fe789e4203d43fdaa627884b8b1ebea2000000000000000000000000f6cc2894f9537d84288ce241e6ba9443b4392aef00000000000000000000000018337c61e4f16a2e474c0d6124d85c522c26bbdd000000000000000000000000000000000000000000000000000000005bcd1300000000000000000000000000000000000000000000000000000000005be8c280","Library":"","SwarmSource":"bzzr://9a0d7177f59d461dece63eaa523c21fe4b9d08281b70f2033ccd2034bae7835a"}]}