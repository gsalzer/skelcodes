{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n// Project: MOBU.io\r\n// v12, 2018-08-24\r\n// This code is the property of CryptoB2B.io\r\n// Copying in whole or in part is prohibited.\r\n// Authors: Ivan Fedorov and Dmitry Borodin\r\n// Do you want the same TokenSale platform? www.cryptob2b.io\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    function minus(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b>=a) return 0;\r\n        return a - b;\r\n    }\r\n}\r\n\r\ncontract MigrationAgent\r\n{\r\n    function migrateFrom(address _from, uint256 _value) public;\r\n}\r\n\r\ncontract ICreator{\r\n    IRightAndRoles public rightAndRoles;\r\n    function createAllocation(IToken _token, uint256 _unlockPart1, uint256 _unlockPart2) external returns (IAllocation);\r\n    function createFinancialStrategy() external returns(IFinancialStrategy);\r\n    function getRightAndRoles() external returns(IRightAndRoles);\r\n}\r\n\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract GuidedByRoles {\r\n    IRightAndRoles public rightAndRoles;\r\n    function GuidedByRoles(IRightAndRoles _rightAndRoles) public {\r\n        rightAndRoles = _rightAndRoles;\r\n    }\r\n}\r\n\r\ncontract Pausable is GuidedByRoles {\r\n\r\n    mapping (address => bool) public unpausedWallet;\r\n\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = true;\r\n\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused(address _to) {\r\n        require(!paused||unpausedWallet[msg.sender]||unpausedWallet[_to]);\r\n        _;\r\n    }\r\n\r\n    function onlyAdmin() internal view {\r\n        require(rightAndRoles.onlyRoles(msg.sender,3));\r\n    }\r\n\r\n    // Add a wallet ignoring the \"Exchange pause\". Available to the owner of the contract.\r\n    function setUnpausedWallet(address _wallet, bool mode) public {\r\n        onlyAdmin();\r\n        unpausedWallet[_wallet] = mode;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function setPause(bool mode)  public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,1));\r\n        if (!paused && mode) {\r\n            paused = true;\r\n            emit Pause();\r\n        }else\r\n        if (paused && !mode) {\r\n            paused = false;\r\n            emit Unpause();\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20Provider is GuidedByRoles {\r\n    function transferTokens(ERC20Basic _token, address _to, uint256 _value) public returns (bool){\r\n        require(rightAndRoles.onlyRoles(msg.sender,2));\r\n        return _token.transfer(_to,_value);\r\n    }\r\n}\r\n\r\ncontract IRightAndRoles {\r\n    address[][] public wallets;\r\n    mapping(address => uint16) public roles;\r\n\r\n    event WalletChanged(address indexed newWallet, address indexed oldWallet, uint8 indexed role);\r\n    event CloneChanged(address indexed wallet, uint8 indexed role, bool indexed mod);\r\n\r\n    function changeWallet(address _wallet, uint8 _role) external;\r\n    function setManagerPowerful(bool _mode) external;\r\n    function onlyRoles(address _sender, uint16 _roleMask) view external returns(bool);\r\n}\r\n\r\ncontract IToken{\r\n    function setUnpausedWallet(address _wallet, bool mode) public;\r\n    function mint(address _to, uint256 _amount) public returns (bool);\r\n    function totalSupply() public view returns (uint256);\r\n    function setPause(bool mode) public;\r\n    function setMigrationAgent(address _migrationAgent) public;\r\n    function migrateAll(address[] _holders) public;\r\n    function markTokens(address _beneficiary, uint256 _value) public;\r\n    function freezedTokenOf(address _beneficiary) public view returns (uint256 amount);\r\n    function defrostDate(address _beneficiary) public view returns (uint256 Date);\r\n    function freezeTokens(address _beneficiary, uint256 _amount, uint256 _when) public;\r\n}\r\n\r\ncontract IFinancialStrategy{\r\n\r\n    enum State { Active, Refunding, Closed }\r\n    State public state = State.Active;\r\n\r\n    event Deposited(address indexed beneficiary, uint256 weiAmount);\r\n    event Receive(address indexed beneficiary, uint256 weiAmount);\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n    event Started();\r\n    event Closed();\r\n    event RefundsEnabled();\r\n    function freeCash() view public returns(uint256);\r\n    function deposit(address _beneficiary) external payable;\r\n    function refund(address _investor) external;\r\n    function setup(uint8 _state, bytes32[] _params) external;\r\n    function getBeneficiaryCash() external;\r\n    function getPartnerCash(uint8 _user, address _msgsender) external;\r\n}\r\n\r\ncontract IAllocation {\r\n    function addShare(address _beneficiary, uint256 _proportion, uint256 _percenForFirstPart) external;\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract KycToken is BasicToken, GuidedByRoles {\r\n\r\n    event TokensMarked(address indexed beneficiary, uint256 value);\r\n\r\n    function markTokens(address _beneficiary, uint256 _value) public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,1));\r\n        require(_value <= balances[_beneficiary]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[_beneficiary] = balances[_beneficiary].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit TokensMarked(_beneficiary, _value);\r\n        emit Transfer(_beneficiary, address(0), _value);\r\n    }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n    function transfer(address _to, uint256 _value) public whenNotPaused(_to) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused(_to) returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n}\r\n\r\ncontract FreezingToken is PausableToken {\r\n    struct freeze {\r\n    uint256 amount;\r\n    uint256 when;\r\n    }\r\n\r\n\r\n    mapping (address => freeze) freezedTokens;\r\n\r\n    function freezedTokenOf(address _beneficiary) public view returns (uint256 amount){\r\n        freeze storage _freeze = freezedTokens[_beneficiary];\r\n        if(_freeze.when < now) return 0;\r\n        return _freeze.amount;\r\n    }\r\n\r\n    function defrostDate(address _beneficiary) public view returns (uint256 Date) {\r\n        freeze storage _freeze = freezedTokens[_beneficiary];\r\n        if(_freeze.when < now) return 0;\r\n        return _freeze.when;\r\n    }\r\n\r\n    function freezeTokens(address _beneficiary, uint256 _amount, uint256 _when) public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,1));\r\n        freeze storage _freeze = freezedTokens[_beneficiary];\r\n        _freeze.amount = _amount;\r\n        _freeze.when = _when;\r\n    }\r\n\r\n    function masFreezedTokens(address[] _beneficiary, uint256[] _amount, uint256[] _when) public {\r\n        onlyAdmin();\r\n        require(_beneficiary.length == _amount.length && _beneficiary.length == _when.length);\r\n        for(uint16 i = 0; i < _beneficiary.length; i++){\r\n            require(_when[i] < 1557486000); //TODO - check\r\n            freeze storage _freeze = freezedTokens[_beneficiary[i]];\r\n            _freeze.amount = _amount[i];\r\n            _freeze.when = _when[i];\r\n        }\r\n    }\r\n\r\n\r\n    function transferAndFreeze(address _to, uint256 _value, uint256 _when) external {\r\n        require(unpausedWallet[msg.sender]);\r\n        require(freezedTokenOf(_to) == 0);\r\n        if(_when > 0){\r\n            freeze storage _freeze = freezedTokens[_to];\r\n            _freeze.amount = _value;\r\n            _freeze.when = _when;\r\n        }\r\n        transfer(_to,_value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(balanceOf(msg.sender) >= freezedTokenOf(msg.sender).add(_value));\r\n        return super.transfer(_to,_value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(balanceOf(_from) >= freezedTokenOf(_from).add(_value));\r\n        return super.transferFrom( _from,_to,_value);\r\n    }\r\n}\r\n\r\ncontract MintableToken is StandardToken, GuidedByRoles {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) public returns (bool) {\r\n        require(rightAndRoles.onlyRoles(msg.sender,1));\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MigratableToken is BasicToken,GuidedByRoles {\r\n\r\n    uint256 public totalMigrated;\r\n    address public migrationAgent;\r\n\r\n    event Migrate(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    function setMigrationAgent(address _migrationAgent) public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,6));\r\n        require(totalMigrated == 0);\r\n        migrationAgent = _migrationAgent;\r\n    }\r\n\r\n\r\n    function migrateInternal(address _holder) internal{\r\n        require(migrationAgent != 0x0);\r\n\r\n        uint256 value = balances[_holder];\r\n        balances[_holder] = 0;\r\n\r\n        totalSupply_ = totalSupply_.sub(value);\r\n        totalMigrated = totalMigrated.add(value);\r\n\r\n        MigrationAgent(migrationAgent).migrateFrom(_holder, value);\r\n        emit Migrate(_holder,migrationAgent,value);\r\n    }\r\n\r\n    function migrateAll(address[] _holders) public {\r\n        require(rightAndRoles.onlyRoles(msg.sender,6));\r\n        for(uint i = 0; i < _holders.length; i++){\r\n            migrateInternal(_holders[i]);\r\n        }\r\n    }\r\n\r\n    // Reissue your tokens.\r\n    function migrate() public\r\n    {\r\n        require(balances[msg.sender] > 0);\r\n        migrateInternal(msg.sender);\r\n    }\r\n\r\n}\r\n\r\ncontract Token is IToken, FreezingToken, MintableToken, MigratableToken, KycToken,ERC20Provider {\r\n    function Token(ICreator _creator) GuidedByRoles(_creator.rightAndRoles()) public {}\r\n    string public constant name = \"MOBU token\";\r\n    string public constant symbol = \"MOBU\";\r\n    uint8 public constant decimals = 18;\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"freezedTokenOf\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"name\":\"_when\",\"type\":\"uint256[]\"}],\"name\":\"masFreezedTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"markTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"defrostDate\",\"outputs\":[{\"name\":\"Date\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rightAndRoles\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holders\",\"type\":\"address[]\"}],\"name\":\"migrateAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_migrationAgent\",\"type\":\"address\"}],\"name\":\"setMigrationAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migrationAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"transferAndFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"mode\",\"type\":\"bool\"}],\"name\":\"setUnpausedWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unpausedWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"mode\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_when\",\"type\":\"uint256\"}],\"name\":\"freezeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensMarked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000987a4a425190f5edfee695db77a2c8212f6df16f","Library":"","SwarmSource":"bzzr://563162618deeaffb9309ef76ea3ae784d08b18e6504a875fdf60d9a2da441178"}]}