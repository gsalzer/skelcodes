{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\n/**\r\n\r\n * Math operations with safety checks\r\n\r\n */\r\n\r\ncontract BaseSafeMath {\r\n\r\n\r\n    /*\r\n\r\n    standard uint256 functions\r\n\r\n     */\r\n\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure\r\n\r\n    returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure\r\n\r\n    returns (uint256) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure\r\n\r\n    returns (uint256) {\r\n\r\n        uint256 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure\r\n\r\n    returns (uint256) {\r\n\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function min(uint256 x, uint256 y) internal pure\r\n\r\n    returns (uint256 z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n    function max(uint256 x, uint256 y) internal pure\r\n\r\n    returns (uint256 z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\r\n    uint128 functions\r\n\r\n     */\r\n\r\n\r\n\r\n    function madd(uint128 a, uint128 b) internal pure\r\n\r\n    returns (uint128) {\r\n\r\n        uint128 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function msub(uint128 a, uint128 b) internal pure\r\n\r\n    returns (uint128) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n    function mmul(uint128 a, uint128 b) internal pure\r\n\r\n    returns (uint128) {\r\n\r\n        uint128 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function mdiv(uint128 a, uint128 b) internal pure\r\n\r\n    returns (uint128) {\r\n\r\n        uint128 c = a / b;\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function mmin(uint128 x, uint128 y) internal pure\r\n\r\n    returns (uint128 z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n    function mmax(uint128 x, uint128 y) internal pure\r\n\r\n    returns (uint128 z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\r\n    uint64 functions\r\n\r\n     */\r\n\r\n\r\n\r\n    function miadd(uint64 a, uint64 b) internal pure\r\n\r\n    returns (uint64) {\r\n\r\n        uint64 c = a + b;\r\n\r\n        assert(c >= a);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function misub(uint64 a, uint64 b) internal pure\r\n\r\n    returns (uint64) {\r\n\r\n        assert(b <= a);\r\n\r\n        return a - b;\r\n\r\n    }\r\n\r\n\r\n    function mimul(uint64 a, uint64 b) internal pure\r\n\r\n    returns (uint64) {\r\n\r\n        uint64 c = a * b;\r\n\r\n        assert(a == 0 || c / a == b);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function midiv(uint64 a, uint64 b) internal pure\r\n\r\n    returns (uint64) {\r\n\r\n        uint64 c = a / b;\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n    function mimin(uint64 x, uint64 y) internal pure\r\n\r\n    returns (uint64 z) {\r\n\r\n        return x <= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n    function mimax(uint64 x, uint64 y) internal pure\r\n\r\n    returns (uint64 z) {\r\n\r\n        return x >= y ? x : y;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\ncontract BaseERC20 {\r\n\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal;\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public;\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success);\r\n\r\n}\r\n\r\n\r\n/**\r\n\r\n * @title Standard ERC20 token\r\n\r\n *\r\n\r\n * @dev Implementation of the basic standard token.\r\n\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n\r\n */\r\n\r\ninterface tokenRecipient {function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;}\r\n\r\n\r\ncontract LockUtils {\r\n    // Advance mining\r\n    address advance_mining = 0x5EDBe36c4c4a816f150959B445d5Ae1F33054a82;\r\n    // community\r\n    address community = 0xacF2e917E296547C0C476fDACf957111ca0307ce;\r\n    // foundation_investment\r\n    address foundation_investment = 0x9746079BEbcFfFf177818e23AedeC834ad0fb5f9;\r\n    // mining\r\n    address mining = 0xBB7d6f428E77f98069AE1E01964A9Ed6db3c5Fe5;\r\n    // adviser\r\n    address adviser = 0x0aE269Ae5F511786Fce5938c141DbF42e8A71E12;\r\n    // unlock start time 2018-09-10\r\n    uint256 unlock_time_0910 = 1536508800;\r\n    // unlock start time 2018-10-10\r\n    uint256 unlock_time_1010 = 1539100800;\r\n    // unlock start time 2018-11-10\r\n    uint256 unlock_time_1110 = 1541779200;\r\n    // unlock start time 2018-12-10\r\n    uint256 unlock_time_1210 = 1544371200;\r\n    // unlock start time 2019-01-10\r\n    uint256 unlock_time_0110 = 1547049600;\r\n    // unlock start time 2019-02-10\r\n    uint256 unlock_time_0210 = 1549728000;\r\n    // unlock start time 2019-03-10\r\n    uint256 unlock_time_0310 = 1552147200;\r\n    // unlock start time 2019-04-10\r\n    uint256 unlock_time_0410 = 1554825600;\r\n    // unlock start time 2019-05-10\r\n    uint256 unlock_time_0510 = 1557417600;\r\n    // unlock start time 2019-06-10\r\n    uint256 unlock_time_0610 = 1560096000;\r\n    // unlock start time 2019-07-10\r\n    uint256 unlock_time_0710 = 1562688000;\r\n    // unlock start time 2019-08-10\r\n    uint256 unlock_time_0810 = 1565366400;\r\n    // unlock start time 2019-09-10\r\n    uint256 unlock_time_end  = 1568044800;\r\n    // 1 monthss\r\n    uint256 time_months = 2678400;\r\n    // xxx\r\n    function getLockBalance(address account, uint8 decimals) internal view returns (uint256) {\r\n        uint256 tempLock = 0;\r\n        if (account == advance_mining) {\r\n            if (now < unlock_time_0910) {\r\n                tempLock = 735000000 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0910 && now < unlock_time_1210) {\r\n                tempLock = 367500000 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_1210 && now < unlock_time_0310) {\r\n                tempLock = 183750000 * 10 ** uint256(decimals);\r\n            }\r\n        } else if (account == community) {\r\n            if (now < unlock_time_0910) {\r\n                tempLock = 18375000 * 6 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0910 && now < unlock_time_1010) {\r\n                tempLock = 18375000 * 5 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_1010 && now < unlock_time_1110) {\r\n                tempLock = 18375000 * 4 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_1110 && now < unlock_time_1210) {\r\n                tempLock = 18375000 * 3 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_1210 && now < unlock_time_0110) {\r\n                tempLock = 18375000 * 2 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0110 && now < unlock_time_0210) {\r\n                tempLock = 18375000 * 1 * 10 ** uint256(decimals);\r\n            }\r\n        } else if (account == foundation_investment) {\r\n            if (now < unlock_time_0910) {\r\n                tempLock = 18812500 * 12 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0910 && now < unlock_time_1010) {\r\n                tempLock = 18812500 * 11 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_1010 && now < unlock_time_1110) {\r\n                tempLock = 18812500 * 10 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_1110 && now < unlock_time_1210) {\r\n                tempLock = 18812500 * 9 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_1210 && now < unlock_time_0110) {\r\n                tempLock = 18812500 * 8 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0110 && now < unlock_time_0210) {\r\n                tempLock = 18812500 * 7 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0210 && now < unlock_time_0310) {\r\n                tempLock = 18812500 * 6 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0310 && now < unlock_time_0410) {\r\n                tempLock = 18812500 * 5 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0410 && now < unlock_time_0510) {\r\n                tempLock = 18812500 * 4 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0510 && now < unlock_time_0610) {\r\n                tempLock = 18812500 * 3 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0610 && now < unlock_time_0710) {\r\n                tempLock = 18812500 * 2 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0710 && now < unlock_time_0810) {\r\n                tempLock = 18812500 * 1 * 10 ** uint256(decimals);\r\n            }\r\n        } else if (account == mining) {\r\n            if (now < unlock_time_0910) {\r\n                tempLock = 840000000 * 10 ** uint256(decimals);\r\n            }\r\n        } else if (account == adviser) {\r\n            if (now < unlock_time_0910) {\r\n                tempLock = 15750000 * 12 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0910 && now < unlock_time_1010) {\r\n                tempLock = 15750000 * 11 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_1010 && now < unlock_time_1110) {\r\n                tempLock = 15750000 * 10 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_1110 && now < unlock_time_1210) {\r\n                tempLock = 15750000 * 9 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_1210 && now < unlock_time_0110) {\r\n                tempLock = 15750000 * 8 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0110 && now < unlock_time_0210) {\r\n                tempLock = 15750000 * 7 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0210 && now < unlock_time_0310) {\r\n                tempLock = 15750000 * 6 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0310 && now < unlock_time_0410) {\r\n                tempLock = 15750000 * 5 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0410 && now < unlock_time_0510) {\r\n                tempLock = 15750000 * 4 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0510 && now < unlock_time_0610) {\r\n                tempLock = 15750000 * 3 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0610 && now < unlock_time_0710) {\r\n                tempLock = 15750000 * 2 * 10 ** uint256(decimals);\r\n            } else if (now >= unlock_time_0710 && now < unlock_time_0810) {\r\n                tempLock = 15750000 * 1 * 10 ** uint256(decimals);\r\n            }\r\n        }\r\n        return tempLock;\r\n    }\r\n}\r\n\r\ncontract PDTToken is BaseERC20, BaseSafeMath, LockUtils {\r\n\r\n    //The solidity created time\r\n    \r\n\r\n    function PDTToken() public {\r\n        name = \"Matrix World\";\r\n        symbol = \"PDT\";\r\n        decimals = 18;\r\n        totalSupply = 2100000000 * 10 ** uint256(decimals);\r\n        // balanceOf[msg.sender] = totalSupply;\r\n        balanceOf[0x5EDBe36c4c4a816f150959B445d5Ae1F33054a82] = 735000000 * 10 ** uint256(decimals);\r\n        balanceOf[0xacF2e917E296547C0C476fDACf957111ca0307ce] = 110250000 * 10 ** uint256(decimals);\r\n        balanceOf[0x9746079BEbcFfFf177818e23AedeC834ad0fb5f9] = 225750000 * 10 ** uint256(decimals);\r\n        balanceOf[0xBB7d6f428E77f98069AE1E01964A9Ed6db3c5Fe5] = 840000000 * 10 ** uint256(decimals);\r\n        balanceOf[0x0aE269Ae5F511786Fce5938c141DbF42e8A71E12] = 189000000 * 10 ** uint256(decimals);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        // All transfer will check the available unlocked balance\r\n        require((balanceOf[_from] - getLockBalance(_from, decimals)) >= _value);\r\n        // Check balance\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require((balanceOf[_to] + _value) > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    \r\n    function lockBalanceOf(address _owner) public returns (uint256) {\r\n        return getLockBalance(_owner, decimals);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n    returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n    public\r\n    returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"PDTToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3027ab2a72f7869b5e1d162f7941754a5aeb3a175167517a6ab834171f5245fb"}]}