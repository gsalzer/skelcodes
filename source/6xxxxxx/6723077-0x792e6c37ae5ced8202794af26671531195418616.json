{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n* https://ectoken.io\r\n*\r\n* Ethereum Captial Token concept\r\n*\r\n* [✓] 6% Withdraw fee (3% to dividends, 3% to owner). First 6 days 30%, next 24 days it will decrease to 6%\r\n* [✓] 12% Deposit fee\r\n* [✓] 1% Token transfer\r\n* [✓] 5 lines referral system with 5 levels of rewards\r\n*\r\n*/\r\n\r\ncontract ECT {\r\n\r\n    /**\r\n     * Only with tokens\r\n     */\r\n    modifier onlyBagholders {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Only with dividends\r\n     */\r\n    modifier onlyStronghands {\r\n        require(myDividends(true) > 0);\r\n        _;\r\n    }\r\n\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        uint timestamp,\r\n        uint256 price\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned,\r\n        uint timestamp,\r\n        uint256 price\r\n    );\r\n\r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n    );\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n    string public name = \"Ethereum Capital Token\";\r\n    string public symbol = \"ECT\";\r\n    uint public createdAt;\r\n    \r\n    bool public started = false;\r\n    modifier onlyStarted {\r\n        require(started);\r\n        _;\r\n    }\r\n    modifier onlyNotStarted {\r\n        require(!started);\r\n        _;\r\n    }\r\n\r\n    uint8 constant public decimals = 18;\r\n\r\n    /**\r\n     * fees\r\n     */\r\n    uint8 constant internal entryFee_ = 12;\r\n    uint8 constant internal ownerFee_ = 4;\r\n    uint8 constant internal transferFee_ = 1;\r\n    uint8 constant internal exitFeeD0_ = 30;\r\n    uint8 constant internal exitFee_ = 6;\r\n    uint8 constant internal refferalFee_ = 33;\r\n\r\n    address internal _ownerAddress;\r\n\r\n    /**\r\n     * Initial token values\r\n     */\r\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\n\r\n    uint256 constant internal magnitude = 2 ** 64;\r\n\r\n\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) internal referralBalance_;\r\n    mapping(address => int256) internal payoutsTo_;\r\n    mapping(address => uint256) internal summaryReferralProfit_;\r\n    mapping(address => uint256) internal dividendsUsed_;\r\n\r\n    uint256 internal tokenSupply_;\r\n    uint256 internal profitPerShare_;\r\n    \r\n    uint public blockCreation;\r\n    \r\n    /**\r\n     * Admins. Only rename tokens, change referral settings and add new admins\r\n     */\r\n    mapping(bytes32 => bool) public administrators;\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n        require(administrators[keccak256(_customerAddress)]);\r\n        _;\r\n    }\r\n\r\n    function isAdmin() public view returns (bool) {\r\n        return administrators[keccak256(msg.sender)];\r\n    }\r\n\r\n    function setAdministrator(address _id, bool _status)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        if (_id != _ownerAddress) {\r\n            administrators[keccak256(_id)] = _status;\r\n        }\r\n    } \r\n\r\n    function setName(string _name)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        name = _name;\r\n    }\r\n\r\n    function setSymbol(string _symbol)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    constructor() public {\r\n        _ownerAddress = msg.sender;\r\n        administrators[keccak256(_ownerAddress)] = true;\r\n        blockCreation = block.number;\r\n    }\r\n    \r\n    function start() onlyNotStarted() onlyAdministrator() public {\r\n        started = true;\r\n        createdAt = block.timestamp;\r\n    }\r\n    \r\n    function getLifetime() public view returns (uint8) {\r\n        if (!started)\r\n        {\r\n            return 0;\r\n        }\r\n        return (uint8) ((now - createdAt) / 60 / 60 / 24);\r\n    }\r\n    \r\n    function getExitFee() public view returns (uint8) {\r\n        uint lifetime = getLifetime(); // Получение времени жизни контракта\r\n        if (lifetime <= 6) { \r\n            return exitFeeD0_; // 30%\r\n        } else if (lifetime < 30) {\r\n            return (uint8) (exitFeeD0_ - lifetime + 6);\r\n        } else {\r\n            return exitFee_; // 6%\r\n        }\r\n    }\r\n\r\n    function buy(address _r1, address _r2, address _r3, address _r4, address _r5) onlyStarted() public payable returns (uint256) {\r\n        purchaseTokens(msg.value, _r1, _r2, _r3, _r4, _r5);\r\n    }\r\n\r\n    function reinvest() onlyStronghands public {\r\n        uint256 _dividends = myDividends(false);\r\n        address _customerAddress = msg.sender;\r\n        dividendsUsed_[_customerAddress] += _dividends;\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        purchaseTokens(_dividends, 0x0, 0x0, 0x0, 0x0, 0x0);\r\n        emit onReinvestment(_customerAddress, _dividends);\r\n    }\r\n\r\n    function exit() public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if (_tokens > 0) sell(_tokens);\r\n        withdraw();\r\n    }\r\n\r\n    function withdraw() onlyStronghands public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false);\r\n        dividendsUsed_[_customerAddress] += _dividends;\r\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\r\n        _dividends += referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        \r\n        uint256 _fee = SafeMath.div(SafeMath.mul(_dividends, getExitFee() - 3), 100);\r\n        \r\n        uint256 _ownerFee = SafeMath.div(SafeMath.mul(_dividends, 3), 100);\r\n        \r\n        uint256 _dividendsTaxed = SafeMath.sub(_dividends, _fee + _ownerFee);\r\n        \r\n        if (_customerAddress != _ownerAddress) {\r\n            referralBalance_[_ownerAddress] += _ownerFee;\r\n            summaryReferralProfit_[_ownerAddress] += _ownerFee;\r\n        } else {\r\n            _dividendsTaxed += _ownerFee;\r\n        }\r\n        \r\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_fee * magnitude) / tokenSupply_);\r\n    \r\n        _customerAddress.transfer(_dividendsTaxed);\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_ethereum * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n        emit onTokenSell(_customerAddress, _tokens, _ethereum, now, buyPrice());\r\n    }\r\n\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\r\n\r\n        if (myDividends(true) > 0) {\r\n            withdraw();\r\n        }\r\n\r\n        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\r\n\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\r\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    function totalEthereumBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    function myTokens() public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress);\r\n    }\r\n\r\n    function balanceOf(address _customerAddress) public view returns (uint256) {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\r\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n    \r\n    function dividendsFull(address _customerAddress) public view returns (uint256) {\r\n        return dividendsOf(_customerAddress) + dividendsUsed_[_customerAddress] + summaryReferralProfit_[_customerAddress];\r\n    }\r\n\r\n    function sellPrice() public view returns (uint256) {\r\n        return sellPriceAt(tokenSupply_);\r\n    }\r\n\r\n    function buyPrice() public view returns (uint256) {\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\r\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\r\n\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    function calculateTokensReceived(uint256 _incomingEthereum) public view returns (uint256) {\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\r\n        \r\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\r\n        require(_tokensToSell <= tokenSupply_);\r\n        return tokensToEthereum_(_tokensToSell);\r\n    }\r\n    \r\n    uint256 public I_S = 0.25 ether;\r\n    uint256 public I_R1 = 30;\r\n\r\n    function setI_S(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        I_S = _v;\r\n    }\r\n\r\n    function setI_R1(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        I_R1 = _v;\r\n    }\r\n\r\n    \r\n    uint256 public II_S = 5 ether;\r\n    uint256 public II_R1 = 30;\r\n    uint256 public II_R2 = 10;\r\n\r\n    function setII_S(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        II_S = _v;\r\n    }\r\n\r\n    function setII_R1(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        II_R1 = _v;\r\n    }\r\n\r\n    function setII_R2(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        II_R2 = _v;\r\n    }\r\n    \r\n    uint256 public III_S = 10 ether;\r\n    uint256 public III_R1 = 30;\r\n    uint256 public III_R2 = 10;\r\n    uint256 public III_R3 = 10;\r\n\r\n    function setIII_S(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        III_S = _v;\r\n    }\r\n\r\n    function setIII_R1(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        III_R1 = _v;\r\n    }\r\n\r\n    function setIII_R2(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        III_R2 = _v;\r\n    }\r\n\r\n    function setIII_R3(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        III_R3 = _v;\r\n    }\r\n    \r\n    uint256 public IV_S = 20 ether;\r\n    uint256 public IV_R1 = 30;\r\n    uint256 public IV_R2 = 20;\r\n    uint256 public IV_R3 = 10;\r\n    uint256 public IV_R4 = 10;\r\n\r\n    function setIV_S(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        IV_S = _v;\r\n    }\r\n\r\n    function setIV_R1(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        IV_R1 = _v;\r\n    }\r\n\r\n    function setIV_R2(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        IV_R2 = _v;\r\n    }\r\n\r\n    function setIV_R3(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        IV_R3 = _v;\r\n    }\r\n\r\n    function setIV_R4(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        IV_R4 = _v;\r\n    }\r\n    \r\n    uint256 public V_S = 100 ether;\r\n    uint256 public V_R1 = 40;\r\n    uint256 public V_R2 = 20;\r\n    uint256 public V_R3 = 10;\r\n    uint256 public V_R4 = 10;\r\n    uint256 public V_R5 = 10;\r\n\r\n    function setV_S(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        V_S = _v;\r\n    }\r\n\r\n    function setV_R1(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        V_R1 = _v;\r\n    }\r\n\r\n    function setV_R2(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        V_R2 = _v;\r\n    }\r\n\r\n    function setV_R3(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        V_R3 = _v;\r\n    }\r\n\r\n    function setV_R4(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        V_R4 = _v;\r\n    }\r\n\r\n    function setV_R5(uint256 _v)\r\n        onlyAdministrator()\r\n        public\r\n    {\r\n        V_R5 = _v;\r\n    }\r\n    \r\n    function canRef(address _r, address _c, uint256 _m) internal returns (bool) {\r\n        return _r != 0x0000000000000000000000000000000000000000 && _r != _c && tokenBalanceLedger_[_r] >= _m;\r\n    }\r\n    \r\n    function etherBalance(address r) internal returns (uint256) {\r\n        uint _v = tokenBalanceLedger_[r];\r\n        if (_v < 0.00000001 ether) {\r\n            return 0;\r\n        } else {\r\n            return tokensToEthereum_(_v);\r\n        }\r\n    }\r\n    \r\n    function getLevel(address _cb) public view returns (uint256) {\r\n        uint256 _b = etherBalance(_cb);\r\n        uint256 _o = 0;\r\n        \r\n        if (_b >= V_S) {\r\n            _o = 5;\r\n        } else if (_b >= IV_S) {\r\n            _o = 4;\r\n        } else if (_b >= III_S) {\r\n            _o = 3;\r\n        } else if (_b >= II_S) {\r\n            _o = 2;\r\n        } else if (_b >= I_S) {\r\n            _o = 1;\r\n        }\r\n        \r\n        return _o;\r\n    }\r\n\r\n    function purchaseTokens(uint256 _incomingEthereum, address _r1, address _r2, address _r3, address _r4, address _r5) internal {\r\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\r\n        uint256 _dividends = _undividedDividends;\r\n\r\n        uint256 __bC = 0;\r\n        uint256 _b = 0;\r\n        \r\n        if (canRef(_r1, msg.sender, I_S)) {\r\n            __bC = I_R1;\r\n\r\n            if (etherBalance(_r1) >= V_S) {\r\n                __bC = V_R1;\r\n            } else if (etherBalance(_r1) >= IV_S) {\r\n                __bC = IV_R1;\r\n            } else if (etherBalance(_r1) >= III_S) {\r\n                __bC = III_R1;\r\n            } else if (etherBalance(_r1) >= II_S) {\r\n                __bC = II_R1;\r\n            }\r\n            \r\n            _b = SafeMath.div(SafeMath.mul(_incomingEthereum, __bC), 1000);\r\n            referralBalance_[_r1] = SafeMath.add(referralBalance_[_r1], _b);\r\n            addReferralProfit(_r1, msg.sender, _b);\r\n            _dividends = SafeMath.sub(_dividends, _b);\r\n        }\r\n        \r\n        if (canRef(_r2, msg.sender, II_S)) {\r\n            __bC = II_R2;\r\n\r\n            if (etherBalance(_r2) >= V_S) {\r\n                __bC = V_R2;\r\n            } else if (etherBalance(_r2) >= IV_S) {\r\n                __bC = IV_R2;\r\n            } else if (etherBalance(_r2) >= III_S) {\r\n                __bC = III_R2;\r\n            }\r\n            \r\n            _b = SafeMath.div(SafeMath.mul(_incomingEthereum, __bC), 1000);\r\n            referralBalance_[_r2] = SafeMath.add(referralBalance_[_r2], _b);\r\n            addReferralProfit(_r2, _r1, _b);\r\n            _dividends = SafeMath.sub(_dividends, _b);\r\n        }\r\n        \r\n        if (canRef(_r3, msg.sender, III_S)) {\r\n            __bC = III_R3;\r\n\r\n            if (etherBalance(_r3) >= V_S) {\r\n                __bC = V_R3;\r\n            } else if (etherBalance(_r3) >= IV_S) {\r\n                __bC = IV_R3;\r\n            }\r\n            \r\n            _b = SafeMath.div(SafeMath.mul(_incomingEthereum, __bC), 1000);\r\n            referralBalance_[_r3] = SafeMath.add(referralBalance_[_r3], _b);\r\n            addReferralProfit(_r3, _r2, _b);\r\n            _dividends = SafeMath.sub(_dividends, _b);\r\n        }\r\n        \r\n        if (canRef(_r4, msg.sender, IV_S)) {\r\n            __bC = IV_R4;\r\n\r\n            if (etherBalance(_r4) >= V_S) {\r\n                __bC = V_R4;\r\n            }\r\n            \r\n            _b = SafeMath.div(SafeMath.mul(_incomingEthereum, __bC), 1000);\r\n            referralBalance_[_r4] = SafeMath.add(referralBalance_[_r4], _b);\r\n            addReferralProfit(_r4, _r3, _b);\r\n            _dividends = SafeMath.sub(_dividends, _b);\r\n        }\r\n        \r\n        if (canRef(_r5, msg.sender, V_S)) {\r\n            _b = SafeMath.div(SafeMath.mul(_incomingEthereum, V_R5), 1000);\r\n            referralBalance_[_r5] = SafeMath.add(referralBalance_[_r5], _b);\r\n            addReferralProfit(_r5, _r4, _b);\r\n            _dividends = SafeMath.sub(_dividends, _b);\r\n        }\r\n\r\n        uint256 _amountOfTokens = ethereumToTokens_(SafeMath.sub(_incomingEthereum, _undividedDividends));\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\r\n\r\n        if (tokenSupply_ > 0) {\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\r\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\r\n        } else {\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\r\n        payoutsTo_[msg.sender] += (int256) (profitPerShare_ * _amountOfTokens - _fee);\r\n        emit onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, now, buyPrice());\r\n    }\r\n\r\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived =\r\n            (\r\n                (\r\n                    SafeMath.sub(\r\n                        (sqrt\r\n                            (\r\n                                (_tokenPriceInitial ** 2)\r\n                                +\r\n                                (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\r\n                                +\r\n                                ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\r\n                                +\r\n                                (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\r\n                            )\r\n                        ), _tokenPriceInitial\r\n                    )\r\n                ) / (tokenPriceIncremental_)\r\n            ) - (tokenSupply_);\r\n\r\n        return _tokensReceived;\r\n    }\r\n\r\n    function sellPriceAt(uint256 _atSupply) public view returns (uint256) {\r\n        if (_atSupply == 0) {\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereumAtSupply_(1e18, _atSupply);\r\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\r\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\r\n \r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n   \r\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\r\n        return tokensToEthereumAtSupply_(_tokens, tokenSupply_);\r\n    }\r\n \r\n    function tokensToEthereumAtSupply_(uint256 _tokens, uint256 _atSupply) public view returns (uint256) {\r\n        if (_tokens < 0.00000001 ether) {\r\n            return 0;\r\n        }\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (_atSupply + 1e18);\r\n        uint256 _etherReceived =\r\n            (\r\n                SafeMath.sub(\r\n                    (\r\n                        (\r\n                            (\r\n                                tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\r\n                            ) - tokenPriceIncremental_\r\n                        ) * (tokens_ - 1e18)\r\n                    ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\r\n                )\r\n                / 1e18);\r\n \r\n        return _etherReceived;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = (x + 1) / 2;\r\n        y = x;\r\n\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n    \r\n    mapping(address => mapping(address => uint256)) internal referralProfit_;\r\n    \r\n    function addReferralProfit(address _referredBy, address _referral, uint256 _profit) internal {\r\n        referralProfit_[_referredBy][_referral] += _profit;\r\n        summaryReferralProfit_[_referredBy] += _profit;\r\n    }\r\n    \r\n    function getReferralProfit(address _referredBy, address _referral) public view returns (uint256) {\r\n        return referralProfit_[_referredBy][_referral];\r\n    }\r\n    \r\n    function getSummaryReferralProfit(address _referredBy) public view returns (uint256) {\r\n        if (_ownerAddress == _referredBy) {\r\n            return 0;\r\n        } else {\r\n            return summaryReferralProfit_[_referredBy];\r\n        }\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"},{\"name\":\"_atSupply\",\"type\":\"uint256\"}],\"name\":\"tokensToEthereumAtSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IV_R4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"getSummaryReferralProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_incomingEthereum\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setII_S\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IV_R3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setV_R3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setIV_R1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"III_R1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setIII_R3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IV_R2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"V_R3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"administrators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"III_R2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IV_S\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setIV_R2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setIV_S\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"V_R2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setII_R2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"V_R5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"I_S\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setIII_S\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_includeReferralBonus\",\"type\":\"bool\"}],\"name\":\"myDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEthereumBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_referredBy\",\"type\":\"address\"},{\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"getReferralProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"II_R2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"V_R4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"V_S\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setIII_R2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setV_R1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_cb\",\"type\":\"address\"}],\"name\":\"getLevel\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLifetime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blockCreation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setI_R1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IV_R1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsFull\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"I_R1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_toAddress\",\"type\":\"address\"},{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"II_R1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setV_R2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"III_S\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_atSupply\",\"type\":\"uint256\"}],\"name\":\"sellPriceAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setIV_R4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setI_S\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"V_R1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setV_S\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_r1\",\"type\":\"address\"},{\"name\":\"_r2\",\"type\":\"address\"},{\"name\":\"_r3\",\"type\":\"address\"},{\"name\":\"_r4\",\"type\":\"address\"},{\"name\":\"_r5\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setV_R4\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setIII_R1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setII_R1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setIV_R3\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"II_S\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExitFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"III_R3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setV_R5\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethereumEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumReinvested\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"ECT","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9291e719ff7f710feb322b65b93742a7b590b4cc48c9d6110af85a7897e2d985"}]}