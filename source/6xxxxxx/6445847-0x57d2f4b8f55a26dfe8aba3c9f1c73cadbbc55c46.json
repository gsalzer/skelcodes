{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n// ----------------------------------------------------------------------------\r\n// GazeCoin FxxxLandRush Bonus List\r\n//\r\n// Deployed to: 0x57D2F4B8F55A26DfE8Aba3c9f1c73CADbBc55C46\r\n//\r\n// Enjoy.\r\n//\r\n// (c) BokkyPooBah / Bok Consulting Pty Ltd for GazeCoin 2018. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    bool private initialised;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function initOwned(address _owner) internal {\r\n        require(!initialised);\r\n        owner = _owner;\r\n        initialised = true;\r\n    }\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n    function transferOwnershipImmediately(address _newOwner) public onlyOwner {\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Maintain a list of operators that are permissioned to execute certain\r\n// functions\r\n// ----------------------------------------------------------------------------\r\ncontract Operated is Owned {\r\n    mapping(address => bool) public operators;\r\n\r\n    event OperatorAdded(address _operator);\r\n    event OperatorRemoved(address _operator);\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender] || owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function initOperated(address _owner) internal {\r\n        initOwned(_owner);\r\n    }\r\n    function addOperator(address _operator) public onlyOwner {\r\n        require(!operators[_operator]);\r\n        operators[_operator] = true;\r\n        emit OperatorAdded(_operator);\r\n    }\r\n    function removeOperator(address _operator) public onlyOwner {\r\n        require(operators[_operator]);\r\n        delete operators[_operator];\r\n        emit OperatorRemoved(_operator);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Bonus List interface\r\n// ----------------------------------------------------------------------------\r\ncontract BonusListInterface {\r\n    function isInBonusList(address account) public view returns (bool);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Bonus List - on list or not\r\n// ----------------------------------------------------------------------------\r\ncontract BonusList is BonusListInterface, Operated {\r\n    mapping(address => bool) public bonusList;\r\n\r\n    event AccountListed(address indexed account, bool status);\r\n\r\n    constructor() public {\r\n        initOperated(msg.sender);\r\n    }\r\n\r\n    function isInBonusList(address account) public view returns (bool) {\r\n        return bonusList[account];\r\n    }\r\n\r\n    function add(address[] accounts) public onlyOperator {\r\n        require(accounts.length != 0);\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            require(accounts[i] != address(0));\r\n            if (!bonusList[accounts[i]]) {\r\n                bonusList[accounts[i]] = true;\r\n                emit AccountListed(accounts[i], true);\r\n            }\r\n        }\r\n    }\r\n    function remove(address[] accounts) public onlyOperator {\r\n        require(accounts.length != 0);\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            require(accounts[i] != address(0));\r\n            if (bonusList[accounts[i]]) {\r\n                delete bonusList[accounts[i]];\r\n                emit AccountListed(accounts[i], false);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"remove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonusList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipImmediately\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isInBonusList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"add\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AccountListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BonusList","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://239e844b44f9e584d62fc6a9846304d6ae88ec8c3c57e3c239a4dcbf5a38795b"}]}