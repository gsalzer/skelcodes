{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract ERC20 {\r\n\r\n    // optional functions\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function decimals() public view returns (uint8);\r\n\r\n    // required functios\r\n    function balanceOf(address user) public view returns (uint256);\r\n    function allowance(address user, address spender) public view returns (uint256);\r\n    function totalSupply() public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool); \r\n    function approve(address spender, uint256 value) public returns (bool); \r\n\r\n    // required events\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed user, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BatchTransfer {\r\n    address private _owner;\r\n    address private _erc20_address;\r\n    mapping(address => bool) private _authed_addresses;\r\n\r\n    constructor(address erc20_address) public {\r\n        _owner = msg.sender;\r\n        _erc20_address = erc20_address;\r\n        _authed_addresses[msg.sender] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"require owner permission\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthed() {\r\n        require(_authed_addresses[msg.sender], \"require auth permission\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n        function to update auth, contract owner can grant other account auth permission by this\r\n        it require:\r\n            1. transaction sender grant owner permission\r\n        please check requirement before you invoke  \r\n     */\r\n    function updateAuth(address auth_address, bool is_auth) public onlyOwner {\r\n        _authed_addresses[auth_address] = is_auth;\r\n    }\r\n\r\n    /**\r\n        convinient function for read token's owner\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n        convinient function for read token's erc20Address\r\n     */\r\n    function erc20Address() public view returns (address) {\r\n        return _erc20_address;\r\n    }\r\n\r\n    /**\r\n        convinient function for read is address authed\r\n     */\r\n    function isAuthed(address authed_address) public view returns (bool){\r\n        return _authed_addresses[authed_address];\r\n    }\r\n\r\n    /**\r\n        function for batch transfer\r\n        it require:\r\n            1. token_holder have suffcient balance\r\n            2. token_holder approve enough token to this contract\r\n            3. transaction sender grant auth permission\r\n        please check requirement before you invoke  \r\n     */\r\n    function transferFrom(address token_holder, address[] token_receivers, uint256[] values) public onlyAuthed returns (bool) {\r\n        require(token_receivers.length == values.length, \"token_receiver's size must eq value's size\");\r\n        require(token_receivers.length > 0, \"token_receiver's length must gt 0\");\r\n        \r\n        uint length = token_receivers.length;\r\n\r\n        // share variables, declare here for reuse later\r\n        uint i = 0;\r\n        uint value = 0;\r\n        uint total_value = 0;\r\n\r\n        for(i = 0; i < length; ++i) {\r\n            value = values[i];\r\n            require(value > 0, \"value must gt 0\");\r\n            total_value += value;\r\n        }\r\n        \r\n        ERC20 token_contract = ERC20(_erc20_address);\r\n        uint256 holder_balance = token_contract.balanceOf(token_holder);\r\n        require(holder_balance >= total_value, \"balance of holder must gte total_value\");\r\n        uint256 my_allowance = token_contract.allowance(token_holder, this);\r\n        require(my_allowance >= total_value, \"allowance to contract must gte total_value\");\r\n\r\n        // perform real transfer; require all transaction success; if one fail, all fail\r\n        for(i = 0; i < length; ++i) {\r\n            address token_receiver = token_receivers[i];\r\n            value = values[i];\r\n            bool is_success = token_contract.transferFrom(token_holder, token_receiver, value);\r\n            require(is_success, \"transaction should be success\");\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"erc20Address\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token_holder\",\"type\":\"address\"},{\"name\":\"token_receivers\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"authed_address\",\"type\":\"address\"}],\"name\":\"isAuthed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"auth_address\",\"type\":\"address\"},{\"name\":\"is_auth\",\"type\":\"bool\"}],\"name\":\"updateAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"erc20_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"BatchTransfer","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e9184c970bcfbb05d8a38762d073320e622a3e28","Library":"","SwarmSource":"bzzr://c828eeb539e749f464e1ce5c79635eb7af5f5350d015a1a8faabfd919c6b10c9"}]}