{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n* https://rocket.cash\r\n*\r\n* RECOMMENDED GAS LIMIT: 350000\r\n* RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n*/\r\ncontract RocketCash\r\n{\r\n    uint constant public start = 1541678400;// The time Rocket.cash will start working (Thu Nov 08 2018 12:00:00 UTC)\r\n    // Notice: you can make an investment, but you will not get your dividends until the project has started\r\n    address constant public administrationFund = 0x97a121027a529B96f1a71135457Ab8e353060811;// For advertising (13%) and support (2%)\r\n    mapping (address => uint) public invested;// Investors and their investments\r\n    mapping (address => uint) private lastInvestmentTime;// Last investment time for each investor\r\n    mapping (address => uint) private collected;// Collected amounts for each investor\r\n    uint public investedTotal;// Invested sum (for statistics)\r\n    uint public investorsCount;// Investors count (for statistics)\r\n\r\n    event investment(address addr, uint amount, uint invested);// Investment event (for statistics)\r\n    event withdraw(address addr, uint amount, uint invested);// Withdraw event (for statistics)\r\n\r\n    function () external payable// This function has called every time someone makes a transaction to the Rocket.cash\r\n    {\r\n        if (msg.value > 0 ether)// If the sent value of ether is more than 0 - this is an investment\r\n        {\r\n            if (start < now)// If the project has started\r\n            {\r\n                if (invested[msg.sender] != 0) // If the investor has already invested to the Rocket.cash\r\n                {\r\n                    collected[msg.sender] = availableDividends(msg.sender);// Calculate dividends of the investor and remember it\r\n                    // Notice: you can rise up your daily percentage by making an additional investment\r\n                }\r\n                //else// If the investor hasn't ever invested to the Rocket.cash - he has no percent to collect yet\r\n\r\n                lastInvestmentTime[msg.sender] = now;// Save the last investment time for the investor\r\n            }\r\n            else// If the project hasn't started yet\r\n            {\r\n                lastInvestmentTime[msg.sender] = start;// Save the last investment time for the investor as the time of the project start\r\n            }\r\n\r\n            if (invested[msg.sender] == 0) investorsCount++;// Increase the investors counter (for statistics)\r\n            investedTotal += msg.value;// Increase the invested value (for statistics)\r\n\r\n            invested[msg.sender] += msg.value;// Increase the invested value for the investor\r\n\r\n            administrationFund.transfer(msg.value * 15 / 100);// Transfer the Rocket.cash commission (15% - for advertising (13%) and support (2%))\r\n\r\n            emit investment(msg.sender, msg.value, invested[msg.sender]);// Emit the Investment event (for statistics)\r\n        }\r\n        else// If the sent value of ether is 0 - this is an ask to get dividends or money back\r\n        // WARNING! Any investor can only ask to get dividends or money back ONCE! Once the investor has got his dividends or money he would be excluded from the project!\r\n        {\r\n            uint withdrawalAmount = availableWithdraw(msg.sender);\r\n\r\n            if (withdrawalAmount != 0)// If withdrawal amount is not 0\r\n            {\r\n                emit withdraw(msg.sender, withdrawalAmount, invested[msg.sender]);// Emit the Withdraw event (for statistics)\r\n\r\n                msg.sender.transfer(withdrawalAmount);// Transfer the investor's money back minus the Rocket.cash commission or his dividends and bonuses\r\n\r\n                lastInvestmentTime[msg.sender] = 0;// Remove investment information about the investor after he has got his money and have been excluded from the Project\r\n                invested[msg.sender]           = 0;// Remove investment information about the investor after he has got his money and have been excluded from the Project\r\n                collected[msg.sender]          = 0;// Remove investment information about the investor after he has got his money and have been excluded from the Project\r\n            }\r\n            //else// If withdrawal amount is 0 - do nothing\r\n        }\r\n    }\r\n\r\n    function availableWithdraw (address investor) public view returns (uint)// This function calculate an available amount for withdrawal\r\n    {\r\n        if (start < now)// If the project has started\r\n        {\r\n            if (invested[investor] != 0)// If the investor of the Rocket.cash hasn't been excluded from the project and ever have been in it\r\n            {\r\n                uint dividends = availableDividends(investor);// Calculate dividends of the investor\r\n                uint canReturn = invested[investor] - invested[investor] * 15 / 100;// The investor can get his money back minus the Rocket.cash commission\r\n\r\n                if (canReturn < dividends)// If the investor has dividends more than he has invested minus the Rocket.cash commission\r\n                {\r\n                    return dividends;\r\n                }\r\n                else// If the investor has dividends less than he has invested minus the Rocket.cash commission\r\n                {\r\n                    return canReturn;\r\n                }\r\n            }\r\n            else// If the investor of the Rocket.cash have been excluded from the project or never have been in it - available amount for withdraw = 0\r\n            {\r\n                return 0;\r\n            }\r\n        }\r\n        else// If the project hasn't started yet - available amount for withdraw = 0\r\n        {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function availableDividends (address investor) private view returns (uint)// This function calculate available for withdraw amount\r\n    {\r\n        return collected[investor] + dailyDividends(investor) * (now - lastInvestmentTime[investor]) / 1 days;// Already collected amount plus Calculated daily dividends (depends on the invested amount) are multiplied by the count of spent days from the last investment\r\n    }\r\n\r\n    function dailyDividends (address investor) public view returns (uint)// This function calculate daily dividends (depends on the invested amount)\r\n    {\r\n        if (invested[investor] < 1 ether)// If the invested amount is lower than 1 ether\r\n        {\r\n            return invested[investor] * 222 / 10000;// The interest would be 2.22% (payback in 45 days)\r\n        }\r\n        else if (1 ether <= invested[investor] && invested[investor] < 5 ether)// If the invested amount is higher than 1 ether but lower than 5 ether\r\n        {\r\n            return invested[investor] * 255 / 10000;// The interest would be 2.55% (payback in 40 days)\r\n        }\r\n        else// If the invested amount is higher than 5 ether\r\n        {\r\n            return invested[investor] * 288 / 10000;// The interest would be 2.88% (payback in 35 days)\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"dailyDividends\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorsCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"availableWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrationFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"invested\",\"type\":\"uint256\"}],\"name\":\"investment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"invested\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"type\":\"event\"}]","ContractName":"RocketCash","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0b670b923bddc82f6cc7919c906c089fb370f19e87c9952fb1881ce8124c781b"}]}