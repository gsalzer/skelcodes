{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/interfaces/IOwned.sol\r\n\r\n/*\r\n    Owned Contract Interface\r\n*/\r\ncontract IOwned {\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n    function transferOwnershipNow(address newContractOwner) public;\r\n}\r\n\r\n// File: contracts/utility/Owned.sol\r\n\r\n/*\r\n    This is the \"owned\" utility contract used by bancor with one additional function - transferOwnershipNow()\r\n    \r\n    The original unmodified version can be found here:\r\n    https://github.com/bancorprotocol/contracts/commit/63480ca28534830f184d3c4bf799c1f90d113846\r\n    \r\n    Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n        @dev constructor\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev allows transferring the contract ownership\r\n        the new owner still needs to accept the transfer\r\n        can only be called by the contract owner\r\n        @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n        @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    /**\r\n        @dev transfers the contract ownership without needing the new owner to accept ownership\r\n        @param newContractOwner    new contract owner\r\n    */\r\n    function transferOwnershipNow(address newContractOwner) ownerOnly public {\r\n        require(newContractOwner != owner);\r\n        emit OwnerUpdate(owner, newContractOwner);\r\n        owner = newContractOwner;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IRegistrar.sol\r\n\r\n/*\r\n    Smart Token interface\r\n*/\r\ncontract IRegistrar is IOwned {\r\n    function addNewAddress(address _newAddress) public;\r\n    function getAddresses() public view returns (address[]);\r\n}\r\n\r\n// File: contracts/Registrar.sol\r\n\r\n/**\r\n@notice Contains a record of all previous and current address of a community; For upgradeability.\r\n*/\r\ncontract Registrar is Owned, IRegistrar {\r\n\r\n    address[] addresses;\r\n    /// @notice Adds new community logic contract address to Registrar\r\n    /// @param _newAddress Address of community logic contract to upgrade to\r\n    function addNewAddress(address _newAddress) public ownerOnly {\r\n        addresses.push(_newAddress);\r\n    }\r\n\r\n    /// @return Array of community logic contract addresses\r\n    function getAddresses() public view returns (address[]) {\r\n        return addresses;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newContractOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipNow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"addNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"Registrar","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e97858e1bdd4735aeaff3c0b61209cd6416df6e491dacd7bdc19d3e3cc58a559"}]}