{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n ______   _________  ___   ___   _______    _______             ________  ______      \r\n/_____/\\ /________/\\/__/\\ /__/\\ /______/\\  /______/\\           /_______/\\/_____/\\     \r\n\\::::_\\/_\\__.::.__\\/\\::\\ \\\\  \\ \\\\::::__\\/__\\::::__\\/__         \\__.::._\\/\\:::_ \\ \\    \r\n \\:\\/___/\\  \\::\\ \\   \\::\\/_\\ .\\ \\\\:\\ /____/\\\\:\\ /____/\\  ___      \\::\\ \\  \\:\\ \\ \\ \\   \r\n  \\::___\\/_  \\::\\ \\   \\:: ___::\\ \\\\:\\\\_  _\\/ \\:\\\\_  _\\/ /__/\\     _\\::\\ \\__\\:\\ \\ \\ \\  \r\n   \\:\\____/\\  \\::\\ \\   \\: \\ \\\\::\\ \\\\:\\_\\ \\ \\  \\:\\_\\ \\ \\ \\::\\ \\   /__\\::\\__/\\\\:\\_\\ \\ \\ \r\n    \\_____\\/   \\__\\/    \\__\\/ \\::\\/ \\_____\\/   \\_____\\/  \\:_\\/   \\________\\/ \\_____\\/ \r\n  ______ _______ _    _    _____  ____   ____  _____     _____          __  __ ______  _____ \r\n |  ____|__   __| |  | |  / ____|/ __ \\ / __ \\|  __ \\   / ____|   /\\   |  \\/  |  ____|/ ____|\r\n | |__     | |  | |__| | | |  __| |  | | |  | | |  | | | |  __   /  \\  | \\  / | |__  | (___  \r\n |  __|    | |  |  __  | | | |_ | |  | | |  | | |  | | | | |_ | / /\\ \\ | |\\/| |  __|  \\___ \\ \r\n | |____   | |  | |  | | | |__| | |__| | |__| | |__| | | |__| |/ ____ \\| |  | | |____ ____) |\r\n |______|  |_|  |_|  |_|  \\_____|\\____/ \\____/|_____/   \\_____/_/    \\_\\_|  |_|______|_____/ \r\n                                                                                             \r\n                                                         BY : LmsSky@Gmail.com\r\n*/                            \r\n\r\npragma solidity ^0.4.25;\r\npragma experimental \"v0.5.0\";\r\n\r\ncontract safeApi{\r\n    \r\n   modifier safe(){\r\n        address _addr = msg.sender;\r\n        require (_addr == tx.origin,'Error Action!');\r\n        uint256 _codeLength;\r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"Sender not authorized!\");\r\n            _;\r\n    }\r\n\r\n\r\n    \r\n function toBytes(uint256 _num) internal returns (bytes _ret) {\r\n   assembly {\r\n        _ret := mload(0x10)\r\n        mstore(_ret, 0x20)\r\n        mstore(add(_ret, 0x20), _num)\r\n    }\r\n}\r\n\r\nfunction subStr(string _s, uint start, uint end) internal pure returns (string){\r\n        bytes memory s = bytes(_s);\r\n        string memory copy = new string(end - start);\r\n//        string memory copy = new string(5);\r\n          uint k = 0;\r\n        for (uint i = start; i < end; i++){ \r\n            bytes(copy)[k++] = bytes(_s)[i];\r\n        }\r\n        return copy;\r\n    }\r\n     \r\n\r\n function safePercent(uint256 a,uint256 b) \r\n      internal\r\n      constant\r\n      returns(uint256)\r\n      {\r\n        assert(a>0 && a <=100);\r\n        return  div(mul(b,a),100);\r\n      }\r\n      \r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0âˆ‚\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract gameShare is safeApi{\r\n    struct player\r\n    {\r\n        uint256 id;\r\n        address addr;\r\n        uint256 balance;//wei\r\n        uint256 affNumLevel_1;\r\n        uint256 affNumLevel_2;\r\n        uint256 timeStamp;\r\n    }\r\n \r\n    mapping (uint256 => player)  player_;\r\n    mapping (address => uint256)  playAddr_;\r\n    mapping (uint256 => uint256)  playAff_;\r\n    \r\n\r\n\r\n    uint256 private autoPlayId_=123456;\r\n    address  admin_;\r\n    uint256  gameTicketWei_=0.01 ether;\r\n    uint8  leve1Rewards_=50;//%\r\n    uint8  leve2Rewards_=20;//%\r\n    uint8  feeAmount_=100;\r\n\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor() public {\r\n        admin_ = msg.sender;\r\n        getPlayId();\r\n    }\r\n    \r\n    /* Send coins */\r\n    function addGame(uint256 _affCode)\r\n    safe() \r\n    isPlay() \r\n    external\r\n    payable {\r\n        \r\n      if(_affCode == 0 &&  feeAmount_>0){\r\n             feeAmount_--;\r\n      }else{\r\n         require(msg.value == gameTicketWei_,'Please pay the correct eth');\r\n      }\r\n       uint256 _pid=getPlayId();\r\n      if(msg.value==0)\r\n        return;\r\n        uint256 adminAmount=msg.value;\r\n        uint adminId=playAddr_[admin_];\r\n        if( _affCode>0 && _affCode!=adminId && _affCode != _pid && player_[_affCode].id >0)\r\n        {\r\n             uint256 leve1Amount=safePercent(leve1Rewards_,gameTicketWei_);\r\n             player_[_affCode].affNumLevel_1++;\r\n             playAff_[_pid]=player_[_affCode].id;\r\n             adminAmount-=leve1Amount;\r\n             player_[_affCode].balance+=leve1Amount;\r\n             uint256 leve2Pid=playAff_[_affCode];\r\n              if(leve2Pid>0){\r\n                uint256 leve2Amount=safePercent(leve2Rewards_,gameTicketWei_);\r\n                player_[leve2Pid].affNumLevel_2++;\r\n                adminAmount-=leve2Amount;\r\n                player_[leve2Pid].balance+=leve2Amount;\r\n              }\r\n        }\r\n        player_[adminId].balance=add(player_[adminId].balance,adminAmount);\r\n}\r\n    \r\n    \r\n    function withdraw(uint256 pid) safe() external{\r\n        require(playAddr_[msg.sender] == pid,'Error Action');\r\n        require(player_[pid].addr == msg.sender,'Error Action');\r\n        require(player_[pid].balance >= gameTicketWei_,'Insufficient balance');\r\n        uint256 balance =player_[pid].balance;\r\n        player_[pid].balance=0;\r\n        player_[pid].addr.transfer(balance);\r\n    }\r\n    \r\n    \r\nfunction getMyInfo()external view returns(uint,uint,uint,uint,uint){\r\n       uint _pid =playAddr_[msg.sender];\r\n       player memory _p=player_[_pid];\r\n       return(\r\n            _pid,\r\n            _p.balance,\r\n            _p.affNumLevel_1,\r\n            _p.affNumLevel_2,\r\n            _p.timeStamp\r\n        );\r\n  }\r\n   \r\n  //2020.01.01 Used to update the game\r\n   function updateGame() external safe() {\r\n        uint256 closeTime=1577808000;\r\n        require(now > closeTime,'Time has not arrived');\r\n        require(msg.sender == admin_,'Error');\r\n        selfdestruct(admin_);\r\n    }\r\n    \r\n    function getPlayId() private returns(uint256){\r\n        \r\n        address _addr=msg.sender;\r\n         require(\r\n                playAddr_[_addr] ==0,\r\n                \"Error Player 2\"\r\n            );\r\n        \r\n              autoPlayId_++;\r\n              uint256 _pid=autoPlayId_;\r\n              playAddr_[_addr]=_pid;\r\n              player memory _p;\r\n              _p.id=_pid;\r\n              _p.addr=_addr;\r\n              _p.timeStamp=now;\r\n              player_[_pid]=_p;\r\n              return _pid;\r\n   }\r\n   \r\n     modifier  isPlay(){\r\n            require(\r\n                playAddr_[msg.sender] == 0,\r\n                \"Everyone can only participate once\"\r\n                );        \r\n            _;\r\n        }\r\n    \r\n      //Add extra prizes to the prize pool ETH\r\n  function payment() external payable safe(){\r\n    if(msg.value>0){\r\n        uint adminId=playAddr_[admin_];\r\n        player_[adminId].balance=add(player_[adminId].balance,msg.value);\r\n    }\r\n  }    \r\n        \r\n    \r\n    function getShareAff(uint256 _affCode) external view returns(uint256,address,address){\r\n        uint256 pid=playAddr_[msg.sender];\r\n        uint256 level1pid=playAff_[pid];\r\n        if(pid>0 && level1pid>0){\r\n          uint256 level2Pid=playAff_[level1pid];\r\n          return(\r\n            player_[level1pid].id,\r\n            player_[level1pid].addr,\r\n            player_[level2Pid].addr\r\n            );\r\n        }\r\n        uint256 level2Pid=playAff_[_affCode];\r\n        return(\r\n            player_[_affCode].id,\r\n            player_[_affCode].addr,\r\n            player_[level2Pid].addr\r\n            );\r\n    }\r\n   \r\n  \r\n   function getFeeAmount() external view returns(uint8){\r\n       return feeAmount_;\r\n   }\r\n   \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"}],\"name\":\"getShareAff\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payment\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"}],\"name\":\"addGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"gameShare","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d6e4be2c3b396257eb7b6d0246f47c5e640b468a50c64d05c682ba5cd98afa9e"}]}