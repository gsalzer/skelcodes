{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// ERC20 Token with ERC223 Token compatibility\r\n// SafeMath from OpenZeppelin Standard\r\n// Added burn functions from Ethereum Token \r\n// - https://theethereum.wiki/w/index.php/ERC20_Token_Standard\r\n// - https://github.com/Dexaran/ERC23-tokens/blob/Recommended/ERC223_Token.sol\r\n// - https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\r\n// - https://www.ethereum.org/token (uncontrolled, non-standard)\r\n\r\n\r\n// ERC223\r\ninterface ContractReceiver {\r\n  function tokenFallback( address from, uint value, bytes data ) external;\r\n}\r\n\r\n// SafeMath\r\ncontract SafeMath2 {\r\n\r\n    function safeSub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n}\r\n}\r\n\r\n\r\ncontract RUNEToken is SafeMath2\r\n{\r\n    \r\n    // Rune Characteristics\r\n    string  public name = \"Rune\";\r\n    string  public symbol  = \"RUNE\";\r\n    uint256   public decimals  = 18;\r\n    uint256 public totalSupply  = 1000000000 * (10 ** decimals);\r\n\r\n    // Mapping\r\n    mapping( address => uint256 ) balances_;\r\n    mapping( address => mapping(address => uint256) ) allowances_;\r\n    \r\n    // Minting event\r\n    function RUNEToken() public {\r\n            balances_[msg.sender] = totalSupply;\r\n                emit Transfer( address(0), msg.sender, totalSupply );\r\n        }\r\n\r\n    function() public payable { revert(); } // does not accept money\r\n    \r\n    // ERC20\r\n    event Approval( address indexed owner,\r\n                    address indexed spender,\r\n                    uint value );\r\n\r\n    event Transfer( address indexed from,\r\n                    address indexed to,\r\n                    uint256 value );\r\n\r\n\r\n    // ERC20\r\n    function balanceOf( address owner ) public constant returns (uint) {\r\n        return balances_[owner];\r\n    }\r\n\r\n    // ERC20\r\n    function approve( address spender, uint256 value ) public\r\n    returns (bool success)\r\n    {\r\n        allowances_[msg.sender][spender] = value;\r\n        emit Approval( msg.sender, spender, value );\r\n        return true;\r\n    }\r\n    \r\n    // recommended fix for known attack on any ERC20\r\n    function safeApprove( address _spender,\r\n                            uint256 _currentValue,\r\n                            uint256 _value ) public\r\n                            returns (bool success) {\r\n\r\n        // If current allowance for _spender is equal to _currentValue, then\r\n        // overwrite it with _value and return true, otherwise return false.\r\n\r\n        if (allowances_[msg.sender][_spender] == _currentValue)\r\n        return approve(_spender, _value);\r\n\r\n        return false;\r\n    }\r\n\r\n    // ERC20\r\n    function allowance( address owner, address spender ) public constant\r\n    returns (uint256 remaining)\r\n    {\r\n        return allowances_[owner][spender];\r\n    }\r\n\r\n    // ERC20\r\n    function transfer(address to, uint256 value) public returns (bool success)\r\n    {\r\n        bytes memory empty; // null\r\n        _transfer( msg.sender, to, value, empty );\r\n        return true;\r\n    }\r\n\r\n    // ERC20\r\n    function transferFrom( address from, address to, uint256 value ) public\r\n    returns (bool success)\r\n    {\r\n        require( value <= allowances_[from][msg.sender] );\r\n\r\n        allowances_[from][msg.sender] -= value;\r\n        bytes memory empty;\r\n        _transfer( from, to, value, empty );\r\n\r\n        return true;\r\n    }\r\n\r\n    // ERC223 Transfer and invoke specified callback\r\n    function transfer( address to,\r\n                        uint value,\r\n                        bytes data,\r\n                        string custom_fallback ) public returns (bool success)\r\n    {\r\n        _transfer( msg.sender, to, value, data );\r\n\r\n        if ( isContract(to) )\r\n        {\r\n        ContractReceiver rx = ContractReceiver( to );\r\n        require( address(rx).call.value(0)(bytes4(keccak256(custom_fallback)),\r\n                msg.sender,\r\n                value,\r\n                data) );\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // ERC223 Transfer to a contract or externally-owned account\r\n    function transfer( address to, uint value, bytes data ) public\r\n    returns (bool success)\r\n    {\r\n        if (isContract(to)) {\r\n        return transferToContract( to, value, data );\r\n        }\r\n\r\n        _transfer( msg.sender, to, value, data );\r\n        return true;\r\n    }\r\n\r\n    // ERC223 Transfer to contract and invoke tokenFallback() method\r\n    function transferToContract( address to, uint value, bytes data ) private\r\n    returns (bool success)\r\n    {\r\n        _transfer( msg.sender, to, value, data );\r\n\r\n        ContractReceiver rx = ContractReceiver(to);\r\n        rx.tokenFallback( msg.sender, value, data );\r\n\r\n        return true;\r\n    }\r\n\r\n    // ERC223 fetch contract size (must be nonzero to be a contract)\r\n    function isContract( address _addr ) private constant returns (bool)\r\n    {\r\n        uint length;\r\n        assembly { length := extcodesize(_addr) }\r\n        return (length > 0);\r\n    }\r\n\r\n    function _transfer( address from,\r\n                        address to,\r\n                        uint value,\r\n                        bytes data ) internal\r\n    {\r\n        require( to != 0x0 );\r\n        require( balances_[from] >= value );\r\n        require( balances_[to] + value > balances_[to] ); // catch overflow\r\n\r\n        balances_[from] -= value;\r\n        balances_[to] += value;\r\n\r\n        //Transfer( from, to, value, data ); ERC223-compat version\r\n        bytes memory empty;\r\n        empty = data;\r\n        emit Transfer( from, to, value ); // ERC20-compat version\r\n    }\r\n    \r\n    \r\n        // Ethereum Token\r\n    event Burn( address indexed from, uint256 value );\r\n    \r\n        // Ethereum Token\r\n    function burn( uint256 value ) public\r\n    returns (bool success)\r\n    {\r\n        require( balances_[msg.sender] >= value );\r\n        balances_[msg.sender] -= value;\r\n        totalSupply -= value;\r\n\r\n        emit Burn( msg.sender, value );\r\n        return true;\r\n    }\r\n\r\n    // Ethereum Token\r\n    function burnFrom( address from, uint256 value ) public\r\n    returns (bool success)\r\n    {\r\n        require( balances_[from] >= value );\r\n        require( value <= allowances_[from][msg.sender] );\r\n\r\n        balances_[from] -= value;\r\n        allowances_[from][msg.sender] -= value;\r\n        totalSupply -= value;\r\n\r\n        emit Burn( from, value );\r\n        return true;\r\n    }\r\n  \r\n  \r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic is ERC165 {\r\n\r\n  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n\r\n  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n\r\n\r\ncontract THORChain721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  bytes4 retval;\r\n  bool reverts;\r\n\r\n  constructor(bytes4 _retval, bool _reverts) public {\r\n    retval = _retval;\r\n    reverts = _reverts;\r\n  }\r\n\r\n  event Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data,\r\n    uint256 _gas\r\n  );\r\n\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4)\r\n  {\r\n    require(!reverts);\r\n    emit Received(\r\n      _operator,\r\n      _from,\r\n      _tokenId,\r\n      _data,\r\n      gasleft()\r\n    );\r\n    return retval;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = _a * _b;\r\n    require(c / _a == _b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    require(_b <= _a);\r\n    uint256 c = _a - _b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    uint256 c = _a + _b;\r\n    require(c >= _a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param _account address of the account to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address _account) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(_account) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function _exists(uint256 _tokenId) internal view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = THORChain721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(_exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(_exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\r\n    // then delete the last slot.\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    // This also deletes the contents at the last position of the array\r\n    ownedTokens[_from].length--;\r\n\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\ncontract THORChain721 is ERC721Token {\r\n    \r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor () public ERC721Token(\"testTC1\", \"testTC1\") {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Revert any transaction to this contract.\r\n    function() public payable { \r\n        revert(); \r\n    }\r\n    \r\n    function mint(address _to, uint256 _tokenId) public onlyOwner {\r\n        super._mint(_to, _tokenId);\r\n    }\r\n\r\n    function burn(uint256 _tokenId) public onlyOwner {\r\n        super._burn(ownerOf(_tokenId), _tokenId);\r\n    }\r\n\r\n    function setTokenURI(uint256 _tokenId, string _uri) public onlyOwner {\r\n        super._setTokenURI(_tokenId, _uri);\r\n    }\r\n\r\n    function _removeTokenFrom(address _from, uint256 _tokenId) public {\r\n        super.removeTokenFrom(_from, _tokenId);\r\n    }\r\n}\r\n\r\ncontract Whitelist {\r\n\r\n    address public owner;\r\n    mapping(address => bool) public whitelistAdmins;\r\n    mapping(address => bool) public whitelist;\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n        whitelistAdmins[owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner () {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin () {\r\n        require(whitelistAdmins[msg.sender], \"Only whitelist admin\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address _addr) public view returns (bool) {\r\n        return whitelist[_addr];\r\n    }\r\n\r\n    function addWhitelistAdmin(address _admin) public onlyOwner {\r\n        whitelistAdmins[_admin] = true;\r\n    }\r\n\r\n    function removeWhitelistAdmin(address _admin) public onlyOwner {\r\n        require(_admin != owner, \"Cannot remove contract owner\");\r\n        whitelistAdmins[_admin] = false;\r\n    }\r\n\r\n    function whitelistAddress(address _user) public onlyWhitelistAdmin  {\r\n        whitelist[_user] = true;\r\n    }\r\n\r\n    function whitelistAddresses(address[] _users) public onlyWhitelistAdmin {\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            whitelist[_users[i]] = true;\r\n        }\r\n    }\r\n\r\n    function unWhitelistAddress(address _user) public onlyWhitelistAdmin  {\r\n        whitelist[_user] = false;\r\n    }\r\n\r\n    function unWhitelistAddresses(address[] _users) public onlyWhitelistAdmin {\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            whitelist[_users[i]] = false;\r\n        }\r\n    }\r\n\r\n}\r\n\r\ncontract Sale1 is Whitelist {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    uint256 public maximumNonWhitelistAmount = 5000 * 50 ether; // in minimum units of rune\r\n\r\n    // in minimum units of rune (1000 = 0.000000000000001000 RUNE per WEI)\r\n    // note that this only works if the amount of rune per wei is more than 1\r\n    uint256 public runeToWeiRatio = 5000;\r\n    bool public withdrawalsAllowed = false;\r\n    bool public tokensWithdrawn = false;\r\n    address public owner;\r\n    address public proceedsAddress = 0xd46cac034f44ac93049f8f1109b6b74f79b3e5e6;\r\n    RUNEToken public RuneToken = RUNEToken(0xdEE02D94be4929d26f67B64Ada7aCf1914007F10);\r\n    Whitelist public WhitelistContract = Whitelist(0x395Eb47d46F7fFa7Dd4b27e1B64FC6F21d5CC4C7);\r\n    THORChain721 public ERC721Token = THORChain721(0x52A9700551128585f0d68B6D4D2FA322a2AeeE47);\r\n\r\n    uint256 public CollectibleIndex0 = 0;\r\n    uint256 public CollectibleIndex1 = 1;\r\n    uint256 public CollectibleIndex2 = 2;\r\n    uint256 public CollectibleIndex3 = 3;\r\n    uint256 public CollectibleIndex4 = 4;\r\n    uint256 public CollectibleIndex5 = 5;\r\n\r\n    uint public winAmount0 = 1666.666666666666666667 ether;\r\n    uint public winAmount1 = 3333.333333333333333333 ether;\r\n    uint public winAmount2 = 5000.0 ether;\r\n    uint public winAmount3 = 6666.666666666666666667 ether;\r\n    uint public winAmount4 = 8333.333333333333333333 ether;\r\n    uint public winAmount5 = 10000.0 ether;\r\n\r\n    mapping (uint256 => address) public collectibleAllocation;\r\n    mapping (address => uint256) public runeAllocation;\r\n\r\n    uint256 public totalRunePurchased;\r\n    uint256 public totalRuneWithdrawn;\r\n\r\n    event TokenWon(uint256 tokenId, address winner);\r\n\r\n    modifier onlyOwner () {\r\n        require(owner == msg.sender, \"Only the owner can use this function\");\r\n        _;\r\n    }\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function () public payable {\r\n        require(!tokensWithdrawn, \"Tokens withdrawn. No more purchases possible.\");\r\n        // Make sure we have enough tokens to sell\r\n        uint runeRemaining = (RuneToken.balanceOf(this).add(totalRuneWithdrawn)).sub(totalRunePurchased);\r\n        uint toForward = msg.value;\r\n        uint weiToReturn = 0;\r\n        uint purchaseAmount = msg.value * runeToWeiRatio;\r\n        if(runeRemaining < purchaseAmount) {\r\n            purchaseAmount = runeRemaining;\r\n            uint price = purchaseAmount.div(runeToWeiRatio);\r\n            weiToReturn = msg.value.sub(price);\r\n            toForward = toForward.sub(weiToReturn);\r\n        }\r\n\r\n        // Assign NFTs\r\n        uint ethBefore = totalRunePurchased.div(runeToWeiRatio);\r\n        uint ethAfter = ethBefore.add(toForward);\r\n\r\n        if(ethBefore <= winAmount0 && ethAfter > winAmount0) {\r\n            collectibleAllocation[CollectibleIndex0] = msg.sender;\r\n            emit TokenWon(CollectibleIndex0, msg.sender);\r\n        } if(ethBefore < winAmount1 && ethAfter >= winAmount1) {\r\n            collectibleAllocation[CollectibleIndex1] = msg.sender;\r\n            emit TokenWon(CollectibleIndex1, msg.sender);\r\n        } if(ethBefore < winAmount2 && ethAfter >= winAmount2) {\r\n            collectibleAllocation[CollectibleIndex2] = msg.sender;\r\n            emit TokenWon(CollectibleIndex2, msg.sender);\r\n        } if(ethBefore < winAmount3 && ethAfter >= winAmount3) {\r\n            collectibleAllocation[CollectibleIndex3] = msg.sender;\r\n            emit TokenWon(CollectibleIndex3, msg.sender);\r\n        } if(ethBefore < winAmount4 && ethAfter >= winAmount4) {\r\n            collectibleAllocation[CollectibleIndex4] = msg.sender;\r\n            emit TokenWon(CollectibleIndex4, msg.sender);\r\n        } if(ethBefore < winAmount5 && ethAfter >= winAmount5) {\r\n            collectibleAllocation[CollectibleIndex5] = msg.sender;\r\n            emit TokenWon(CollectibleIndex5, msg.sender);\r\n        } \r\n\r\n        runeAllocation[msg.sender] = runeAllocation[msg.sender].add(purchaseAmount);\r\n        totalRunePurchased = totalRunePurchased.add(purchaseAmount);\r\n        // Withdraw  ETH \r\n        proceedsAddress.transfer(toForward);\r\n        if(weiToReturn > 0) {\r\n            address(msg.sender).transfer(weiToReturn);\r\n        }\r\n    }\r\n\r\n    function setMaximumNonWhitelistAmount (uint256 _newAmount) public onlyOwner {\r\n        maximumNonWhitelistAmount = _newAmount;\r\n    }\r\n\r\n    function withdrawRune () public {\r\n        require(withdrawalsAllowed, \"Withdrawals are not allowed.\");\r\n        uint256 runeToWithdraw;\r\n        if (WhitelistContract.isWhitelisted(msg.sender)) {\r\n            runeToWithdraw = runeAllocation[msg.sender];\r\n        } else {\r\n            runeToWithdraw = (\r\n                runeAllocation[msg.sender] > maximumNonWhitelistAmount\r\n            ) ? maximumNonWhitelistAmount : runeAllocation[msg.sender];\r\n        }\r\n\r\n        runeAllocation[msg.sender] = runeAllocation[msg.sender].sub(runeToWithdraw);\r\n        totalRuneWithdrawn = totalRuneWithdrawn.add(runeToWithdraw);\r\n        RuneToken.transfer(msg.sender, runeToWithdraw); // ERC20 method\r\n        distributeCollectiblesTo(msg.sender);\r\n    }\r\n\r\n    function ownerWithdrawRune () public onlyOwner {\r\n        tokensWithdrawn = true;\r\n        RuneToken.transfer(owner, RuneToken.balanceOf(this).sub(totalRunePurchased.sub(totalRuneWithdrawn)));\r\n    }\r\n\r\n    function allowWithdrawals () public onlyOwner {\r\n        withdrawalsAllowed = true;\r\n    }\r\n\r\n    function distributeTo (address _receiver) public onlyOwner {\r\n        require(runeAllocation[_receiver] > 0, \"Receiver has not purchased any RUNE.\");\r\n        uint balance = runeAllocation[_receiver];\r\n        delete runeAllocation[_receiver];\r\n        RuneToken.transfer(_receiver, balance);\r\n        distributeCollectiblesTo(_receiver);\r\n    }\r\n\r\n    function distributeCollectiblesTo (address _receiver) internal {\r\n        if(collectibleAllocation[CollectibleIndex0] == _receiver) {\r\n            delete collectibleAllocation[CollectibleIndex0];\r\n            ERC721Token.safeTransferFrom(owner, _receiver, CollectibleIndex0);\r\n        } \r\n        if(collectibleAllocation[CollectibleIndex1] == _receiver) {\r\n            delete collectibleAllocation[CollectibleIndex1];\r\n            ERC721Token.safeTransferFrom(owner, _receiver, CollectibleIndex1);\r\n        } \r\n        if(collectibleAllocation[CollectibleIndex2] == _receiver) {\r\n            delete collectibleAllocation[CollectibleIndex2];\r\n            ERC721Token.safeTransferFrom(owner, _receiver, CollectibleIndex2);\r\n        } \r\n        if(collectibleAllocation[CollectibleIndex3] == _receiver) {\r\n            delete collectibleAllocation[CollectibleIndex3];\r\n            ERC721Token.safeTransferFrom(owner, _receiver, CollectibleIndex3);\r\n        } \r\n        if(collectibleAllocation[CollectibleIndex4] == _receiver) {\r\n            delete collectibleAllocation[CollectibleIndex4];\r\n            ERC721Token.safeTransferFrom(owner, _receiver, CollectibleIndex4);\r\n        } \r\n        if(collectibleAllocation[CollectibleIndex5] == _receiver) {\r\n            delete collectibleAllocation[CollectibleIndex5];\r\n            ERC721Token.safeTransferFrom(owner, _receiver, CollectibleIndex5);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setMaximumNonWhitelistAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winAmount4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CollectibleIndex1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collectibleAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winAmount0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"whitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proceedsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winAmount3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawalsAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"runeAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CollectibleIndex0\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CollectibleIndex3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"distributeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC721Token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winAmount2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRunePurchased\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRuneWithdrawn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CollectibleIndex2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allowWithdrawals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumNonWhitelistAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winAmount5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winAmount1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CollectibleIndex4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"runeToWeiRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WhitelistContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CollectibleIndex5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unWhitelistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRune\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerWithdrawRune\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RuneToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"unWhitelistAddresses\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"TokenWon\",\"type\":\"event\"}]","ContractName":"Sale1","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://08a5f288b0632e30b964979f0271df9b7e25994133f070420f6b7257cc07fa2b"}]}