{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event TransferSell(address indexed from, uint tokens, uint eth);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    \r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n        owner = newOwner;\r\n    }\r\n    // function acceptOwnership() public {\r\n    //     require(msg.sender == newOwner);\r\n    //     OwnershipTransferred(owner, newOwner);\r\n    //     owner = newOwner;\r\n    //     newOwner = address(0);\r\n    // }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals\r\n// Receives ETH and generates tokens\r\n// ----------------------------------------------------------------------------\r\ncontract MyToken is ERC20Interface, Owned, SafeMath {\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint public totalSupply;\r\n    uint public sellRate;\r\n    uint public buyRate;\r\n    uint public startTime;\r\n    uint public endTime;\r\n    \r\n    address[] admins;\r\n    \r\n    struct lockPosition{\r\n        uint time;\r\n        uint count;\r\n        uint releaseRate;\r\n        uint lockTime;\r\n    }\r\n    \r\n    struct lockPosition1{\r\n        uint8 typ; // 1 2 3 4\r\n        uint count;\r\n        uint time1;\r\n        uint8 releaseRate1;\r\n        uint time2;\r\n        uint8 releaseRate2;\r\n        uint time3;\r\n        uint8 releaseRate3;\r\n        uint time4;\r\n        uint8 releaseRate4;\r\n    }\r\n    \r\n    \r\n    mapping(address => lockPosition) private lposition;\r\n    mapping(address => lockPosition1) public lposition1;\r\n    \r\n    // locked account dictionary that maps addresses to boolean\r\n    mapping (address => bool) public lockedAccounts;\r\n    mapping (address => bool) public isAdmin;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    \r\n    modifier is_not_locked(address _address) {\r\n        if (lockedAccounts[_address] == true) revert();\r\n        _;\r\n    }\r\n    \r\n    modifier validate_address(address _address) {\r\n        if (_address == address(0)) revert();\r\n        _;\r\n    }\r\n    \r\n    modifier is_admin {\r\n        if (isAdmin[msg.sender] != true && msg.sender != owner) revert();\r\n        _;\r\n    }\r\n    \r\n    modifier validate_position(address _address,uint count) {\r\n        if(count <= 0) revert();\r\n        if(balances[_address] < count) revert();\r\n        if(lposition[_address].count > 0 && safeSub(balances[_address],count) < lposition[_address].count && now < lposition[_address].time) revert();\r\n        if(lposition1[_address].count > 0 && safeSub(balances[_address],count) < lposition1[_address].count && now < lposition1[_address].time1) revert();\r\n        checkPosition1(_address,count);\r\n        checkPosition(_address,count);\r\n        _;\r\n    }\r\n    \r\n    function checkPosition(address _address,uint count) private view {\r\n        if(lposition[_address].releaseRate < 100 && lposition[_address].count > 0){\r\n            uint _rate = safeDiv(100,lposition[_address].releaseRate);\r\n            uint _time = lposition[_address].time;\r\n            uint _tmpRate = lposition[_address].releaseRate;\r\n            uint _tmpRateAll = 0;\r\n            uint _count = 0;\r\n            for(uint _a=1;_a<=_rate;_a++){\r\n                if(now >= _time){\r\n                    _count = _a;\r\n                    _tmpRateAll = safeAdd(_tmpRateAll,_tmpRate);\r\n                    _time = safeAdd(_time,lposition[_address].lockTime);\r\n                }\r\n            }\r\n            uint _tmp1 = safeSub(balances[_address],count);\r\n            uint _tmp2 = safeSub(lposition[_address].count,safeDiv(lposition[_address].count*_tmpRateAll,100));\r\n            if(_count < _rate && _tmp1 < _tmp2  && now >= lposition[_address].time) revert();\r\n        }\r\n    }\r\n    \r\n    function checkPosition1(address _address,uint count) private view {\r\n        if(lposition1[_address].releaseRate1 < 100 && lposition1[_address].count > 0){\r\n            uint _tmpRateAll = 0;\r\n            \r\n            if(lposition1[_address].typ == 2 && now < lposition1[_address].time2){\r\n                if(now >= lposition1[_address].time1){\r\n                    _tmpRateAll = lposition1[_address].releaseRate1;\r\n                }\r\n            }\r\n            \r\n            if(lposition1[_address].typ == 3 && now < lposition1[_address].time3){\r\n                if(now >= lposition1[_address].time1){\r\n                    _tmpRateAll = lposition1[_address].releaseRate1;\r\n                }\r\n                if(now >= lposition1[_address].time2){\r\n                    _tmpRateAll = safeAdd(lposition1[_address].releaseRate2,_tmpRateAll);\r\n                }\r\n            }\r\n            \r\n            if(lposition1[_address].typ == 4 && now < lposition1[_address].time4){\r\n                if(now >= lposition1[_address].time1){\r\n                    _tmpRateAll = lposition1[_address].releaseRate1;\r\n                }\r\n                if(now >= lposition1[_address].time2){\r\n                    _tmpRateAll = safeAdd(lposition1[_address].releaseRate2,_tmpRateAll);\r\n                }\r\n                if(now >= lposition1[_address].time3){\r\n                    _tmpRateAll = safeAdd(lposition1[_address].releaseRate3,_tmpRateAll);\r\n                }\r\n            }\r\n            \r\n            uint _tmp1 = safeSub(balances[_address],count);\r\n            uint _tmp2 = safeSub(lposition1[_address].count,safeDiv(lposition1[_address].count*_tmpRateAll,100));\r\n            \r\n            if(_tmpRateAll > 0){\r\n                if(_tmp1 < _tmp2) revert();\r\n            }\r\n        }\r\n    }\r\n    \r\n    event _lockAccount(address _add);\r\n    event _unlockAccount(address _add);\r\n    \r\n    function () public payable{\r\n        uint tokens;\r\n        require(owner != msg.sender);\r\n        require(now >= startTime && now < endTime);\r\n        require(buyRate > 0);\r\n        require(msg.value >= 0.1 ether && msg.value <= 1000 ether);\r\n        \r\n        tokens = safeDiv(msg.value,(1 ether * 1 wei / buyRate));\r\n        require(balances[owner] >= tokens * 10**uint(decimals));\r\n        balances[msg.sender] = safeAdd(balances[msg.sender], tokens * 10**uint(decimals));\r\n        balances[owner] = safeSub(balances[owner], tokens * 10**uint(decimals));\r\n        Transfer(owner,msg.sender,tokens * 10**uint(decimals));\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    function MyToken(uint _sellRate,uint _buyRate,string _symbo1,string _name,uint _startTime,uint _endTime) public payable {\r\n        require(_sellRate >0 && _buyRate > 0);\r\n        require(_startTime < _endTime);\r\n        symbol = _symbo1;\r\n        name = _name;\r\n        decimals = 8;\r\n        totalSupply = 2000000000 * 10**uint(decimals);\r\n        balances[owner] = totalSupply;\r\n        Transfer(address(0), owner, totalSupply);\r\n        sellRate = _sellRate;\r\n        buyRate = _buyRate;\r\n        endTime = _endTime;\r\n        startTime = _startTime;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public constant returns (uint) {\r\n        return totalSupply  - balances[address(0)];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public is_not_locked(msg.sender) validate_position(msg.sender,tokens) returns (bool success) {\r\n        require(to != msg.sender);\r\n        require(tokens > 0);\r\n        require(balances[msg.sender] >= tokens);\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public is_not_locked(msg.sender) is_not_locked(spender) validate_position(msg.sender,tokens) returns (bool success) {\r\n        require(spender != msg.sender);\r\n        require(tokens > 0);\r\n        require(balances[msg.sender] >= tokens);\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public is_not_locked(msg.sender) is_not_locked(from) validate_position(from,tokens) returns (bool success) {\r\n        require(transferFromCheck(from,to,tokens));\r\n        return true;\r\n    }\r\n    \r\n    function transferFromCheck(address from,address to,uint tokens) private returns (bool success) {\r\n        require(tokens > 0);\r\n        require(from != msg.sender && msg.sender != to && from != to);\r\n        require(balances[from] >= tokens && allowed[from][msg.sender] >= tokens);\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n    \r\n\r\n    // ------------------------------------------------------------------------\r\n    // Sall a token from a contract\r\n    // ------------------------------------------------------------------------\r\n    function sellCoin(address seller, uint amount) public onlyOwner is_not_locked(seller) validate_position(seller,amount* 10**uint(decimals)) {\r\n        require(balances[seller] >= safeMul(amount,10**uint(decimals)));\r\n        require(sellRate > 0);\r\n        require(seller != msg.sender);\r\n        uint tmpAmount = safeMul(amount,(1 ether * 1 wei / sellRate));\r\n        \r\n        balances[owner] = safeAdd(balances[owner],amount * 10**uint(decimals));\r\n        balances[seller] = safeSub(balances[seller],amount * 10**uint(decimals));\r\n        \r\n        seller.transfer(tmpAmount);\r\n        TransferSell(seller, amount * 10**uint(decimals), tmpAmount);\r\n    }\r\n    \r\n    // set rate\r\n    function setConfig(uint _buyRate,uint _sellRate,string _symbol,string _name,uint _startTime,uint _endTime) public onlyOwner {\r\n        require((_buyRate == 0 && _sellRate == 0) || (_buyRate < _sellRate && _buyRate > 0 && _sellRate > 0) || (_buyRate < sellRate && _buyRate > 0 && _sellRate == 0) || (buyRate < _sellRate && _buyRate == 0 && _sellRate > 0));\r\n        \r\n        if(_buyRate > 0){\r\n            buyRate = _buyRate;\r\n        }\r\n        if(sellRate > 0){\r\n            sellRate = _sellRate;\r\n        }\r\n        if(_startTime > 0){\r\n            startTime = _startTime;\r\n        }\r\n        if(_endTime > 0){\r\n            endTime = _endTime;\r\n        }\r\n        symbol = _symbol;\r\n        name = _name;\r\n    }\r\n    \r\n    // lockAccount\r\n    function lockStatus(address _add,bool _success) public validate_address(_add) is_admin {\r\n        lockedAccounts[_add] = _success;\r\n        _lockAccount(_add);\r\n    }\r\n    \r\n    // setIsAdmin\r\n    function setIsAdmin(address _add,bool _success) public validate_address(_add) onlyOwner {\r\n        isAdmin[_add] = _success;\r\n        if(_success == true){\r\n            admins[admins.length++] = _add;\r\n        }else{\r\n            for (uint256 i;i < admins.length;i++){\r\n                if(admins[i] == _add){\r\n                    delete admins[i];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n    //set lock position\r\n    function setLockPostion(address _add,uint _count,uint _time,uint _releaseRate,uint _lockTime) public is_not_locked(_add) onlyOwner {\r\n        require(lposition1[_add].count == 0);\r\n        require(balances[_add] >= safeMul(_count,10**uint(decimals)));\r\n        require(_time > now);\r\n        require(_count > 0 && _lockTime > 0);\r\n        require(_releaseRate > 0 && _releaseRate < 100);\r\n        require(_releaseRate == 2 || _releaseRate == 4 || _releaseRate == 5 || _releaseRate == 10 || _releaseRate == 20 || _releaseRate == 25 || _releaseRate == 50);\r\n        lposition[_add].time = _time;\r\n        lposition[_add].count = _count * 10**uint(decimals);\r\n        lposition[_add].releaseRate = _releaseRate;\r\n        lposition[_add].lockTime = _lockTime;\r\n    }\r\n    \r\n    //get lockPosition info\r\n    function getLockPosition(address _add) public view returns(uint time,uint count,uint rate,uint scount,uint _lockTime) {\r\n        return (lposition[_add].time,lposition[_add].count,lposition[_add].releaseRate,positionScount(_add),lposition[_add].lockTime);\r\n    }\r\n    \r\n    function positionScount(address _add) private view returns (uint count){\r\n        uint _rate = safeDiv(100,lposition[_add].releaseRate);\r\n        uint _time = lposition[_add].time;\r\n        uint _tmpRate = lposition[_add].releaseRate;\r\n        uint _tmpRateAll = 0;\r\n        for(uint _a=1;_a<=_rate;_a++){\r\n            if(now >= _time){\r\n                _tmpRateAll = safeAdd(_tmpRateAll,_tmpRate);\r\n                _time = safeAdd(_time,lposition[_add].lockTime);\r\n            }\r\n        }\r\n        \r\n        return (lposition[_add].count - safeDiv(lposition[_add].count*_tmpRateAll,100));\r\n    }\r\n    \r\n    \r\n    //set lock position\r\n    function setLockPostion1(address _add,uint _count,uint8 _typ,uint _time1,uint8 _releaseRate1,uint _time2,uint8 _releaseRate2,uint _time3,uint8 _releaseRate3,uint _time4,uint8 _releaseRate4) public is_not_locked(_add) onlyOwner {\r\n        require(_count > 0);\r\n        require(_time1 > now);\r\n        require(_releaseRate1 > 0);\r\n        require(_typ >= 1 && _typ <= 4);\r\n        require(balances[_add] >= safeMul(_count,10**uint(decimals)));\r\n        require(safeAdd(safeAdd(_releaseRate1,_releaseRate2),safeAdd(_releaseRate3,_releaseRate4)) == 100);\r\n        require(lposition[_add].count == 0);\r\n        \r\n        if(_typ == 1){\r\n            require(_time2 == 0 && _releaseRate2 == 0 && _time3 == 0 && _releaseRate3 == 0 && _releaseRate4 == 0 && _time4 == 0);\r\n        }\r\n        if(_typ == 2){\r\n            require(_time2 > _time1 && _releaseRate2 > 0 && _time3 == 0 && _releaseRate3 == 0 && _releaseRate4 == 0 && _time4 == 0);\r\n        }\r\n        if(_typ == 3){\r\n            require(_time2 > _time1 && _releaseRate2 > 0 && _time3 > _time2 && _releaseRate3 > 0 && _releaseRate4 == 0 && _time4 == 0);\r\n        }\r\n        if(_typ == 4){\r\n            require(_time2 > _time1 && _releaseRate2 > 0 && _releaseRate3 > 0 && _time3 > _time2 && _time4 > _time3 && _releaseRate4 > 0);\r\n        }\r\n        lockPostion1Add(_typ,_add,_count,_time1,_releaseRate1,_time2,_releaseRate2,_time3,_releaseRate3,_time4,_releaseRate4);\r\n    }\r\n    \r\n    function lockPostion1Add(uint8 _typ,address _add,uint _count,uint _time1,uint8 _releaseRate1,uint _time2,uint8 _releaseRate2,uint _time3,uint8 _releaseRate3,uint _time4,uint8 _releaseRate4) private {\r\n        lposition1[_add].typ = _typ;\r\n        lposition1[_add].count = _count * 10**uint(decimals);\r\n        lposition1[_add].time1 = _time1;\r\n        lposition1[_add].releaseRate1 = _releaseRate1;\r\n        lposition1[_add].time2 = _time2;\r\n        lposition1[_add].releaseRate2 = _releaseRate2;\r\n        lposition1[_add].time3 = _time3;\r\n        lposition1[_add].releaseRate3 = _releaseRate3;\r\n        lposition1[_add].time4 = _time4;\r\n        lposition1[_add].releaseRate4 = _releaseRate4;\r\n    }\r\n    \r\n    //get lockPosition1 info\r\n    function getLockPosition1(address _add) public view returns(uint count,uint Scount,uint8 _typ,uint8 _rate1,uint8 _rate2,uint8 _rate3,uint8 _rate4) {\r\n        return (lposition1[_add].count,positionScount1(_add),lposition1[_add].typ,lposition1[_add].releaseRate1,lposition1[_add].releaseRate2,lposition1[_add].releaseRate3,lposition1[_add].releaseRate4);\r\n    }\r\n    \r\n    function positionScount1(address _address) private view returns (uint count){\r\n        uint _tmpRateAll = 0;\r\n        \r\n        if(lposition1[_address].typ == 2 && now < lposition1[_address].time2){\r\n            if(now >= lposition1[_address].time1){\r\n                _tmpRateAll = lposition1[_address].releaseRate1;\r\n            }\r\n        }\r\n        \r\n        if(lposition1[_address].typ == 3 && now < lposition1[_address].time3){\r\n            if(now >= lposition1[_address].time1){\r\n                _tmpRateAll = lposition1[_address].releaseRate1;\r\n            }\r\n            if(now >= lposition1[_address].time2){\r\n                _tmpRateAll = safeAdd(lposition1[_address].releaseRate2,_tmpRateAll);\r\n            }\r\n        }\r\n        \r\n        if(lposition1[_address].typ == 4 && now < lposition1[_address].time4){\r\n            if(now >= lposition1[_address].time1){\r\n                _tmpRateAll = lposition1[_address].releaseRate1;\r\n            }\r\n            if(now >= lposition1[_address].time2){\r\n                _tmpRateAll = safeAdd(lposition1[_address].releaseRate2,_tmpRateAll);\r\n            }\r\n            if(now >= lposition1[_address].time3){\r\n                _tmpRateAll = safeAdd(lposition1[_address].releaseRate3,_tmpRateAll);\r\n            }\r\n        }\r\n        \r\n        if((lposition1[_address].typ == 1 && now >= lposition1[_address].time1) || (lposition1[_address].typ == 2 && now >= lposition1[_address].time2) || (lposition1[_address].typ == 3 && now >= lposition1[_address].time3) || (lposition1[_address].typ == 4 && now >= lposition1[_address].time4)){\r\n            return 0;\r\n        }\r\n        \r\n        if(_tmpRateAll > 0){\r\n            return (safeSub(lposition1[_address].count,safeDiv(lposition1[_address].count*_tmpRateAll,100)));\r\n        }else{\r\n            return lposition1[_address].count;\r\n        }\r\n    }\r\n    \r\n    // batchTransfer\r\n    function batchTransfer(address[] _adds,uint256 _tokens) public is_admin returns(bool success) {\r\n        require(balances[msg.sender] >= safeMul(_adds.length,_tokens));\r\n        require(lposition[msg.sender].count == 0 && lposition1[msg.sender].count == 0);\r\n        \r\n        for (uint256 i = 0; i < _adds.length; i++) {\r\n            uint256 _tmpTokens = _tokens;\r\n            address _tmpAdds = _adds[i];\r\n            balances[msg.sender] = safeSub(balances[msg.sender], _tmpTokens);\r\n            balances[_tmpAdds] = safeAdd(balances[_tmpAdds], _tmpTokens);\r\n            Transfer(msg.sender,_tmpAdds,_tmpTokens);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_buyRate\",\"type\":\"uint256\"},{\"name\":\"_sellRate\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lposition1\",\"outputs\":[{\"name\":\"typ\",\"type\":\"uint8\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"time1\",\"type\":\"uint256\"},{\"name\":\"releaseRate1\",\"type\":\"uint8\"},{\"name\":\"time2\",\"type\":\"uint256\"},{\"name\":\"releaseRate2\",\"type\":\"uint8\"},{\"name\":\"time3\",\"type\":\"uint256\"},{\"name\":\"releaseRate3\",\"type\":\"uint8\"},{\"name\":\"time4\",\"type\":\"uint256\"},{\"name\":\"releaseRate4\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getLockPosition1\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"Scount\",\"type\":\"uint256\"},{\"name\":\"_typ\",\"type\":\"uint8\"},{\"name\":\"_rate1\",\"type\":\"uint8\"},{\"name\":\"_rate2\",\"type\":\"uint8\"},{\"name\":\"_rate3\",\"type\":\"uint8\"},{\"name\":\"_rate4\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"},{\"name\":\"_success\",\"type\":\"bool\"}],\"name\":\"lockStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_adds\",\"type\":\"address[]\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"},{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_releaseRate\",\"type\":\"uint256\"},{\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"setLockPostion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"},{\"name\":\"_count\",\"type\":\"uint256\"},{\"name\":\"_typ\",\"type\":\"uint8\"},{\"name\":\"_time1\",\"type\":\"uint256\"},{\"name\":\"_releaseRate1\",\"type\":\"uint8\"},{\"name\":\"_time2\",\"type\":\"uint256\"},{\"name\":\"_releaseRate2\",\"type\":\"uint8\"},{\"name\":\"_time3\",\"type\":\"uint256\"},{\"name\":\"_releaseRate3\",\"type\":\"uint8\"},{\"name\":\"_time4\",\"type\":\"uint256\"},{\"name\":\"_releaseRate4\",\"type\":\"uint8\"}],\"name\":\"setLockPostion1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"},{\"name\":\"_success\",\"type\":\"bool\"}],\"name\":\"setIsAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getLockPosition\",\"outputs\":[{\"name\":\"time\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"scount\",\"type\":\"uint256\"},{\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_sellRate\",\"type\":\"uint256\"},{\"name\":\"_buyRate\",\"type\":\"uint256\"},{\"name\":\"_symbo1\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"_lockAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"_unlockAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"TransferSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MyToken","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000138800000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000005b896600000000000000000000000000000000000000000000000000000000005bb0f300000000000000000000000000000000000000000000000000000000000000000341444500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007416465436f696e00000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://7fa1a9ad8f33688e91c56f276b1aed3522173f160874f75681b9f5844b39d84b"}]}