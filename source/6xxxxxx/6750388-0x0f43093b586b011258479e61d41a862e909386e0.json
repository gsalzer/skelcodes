{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity^0.4.21;\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n        owner = address(0x072F140DcCCE18F9966Aeb6D71ffcD0b42748683);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public;\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract PO8BaseToken is ERC20 {\r\n    using SafeMath for uint256;\r\n    \r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 totalSupply_;\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public{\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply_ = _totalSupply;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(_to != address(0));\r\n        require(balances[_from] >= _value);\r\n        require(balances[_to].add(_value) > balances[_to]);\r\n\r\n\r\n        uint256 previousBalances = balances[_from].add(balances[_to]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        assert(balances[_from].add(balances[_to]) == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_value <= allowed[_from][msg.sender]);     // Check allowance\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract PO8Token is PO8BaseToken(\"PO8 Token\", \"PO8\", 18, 10000000000000000000000000000), Ownable {\r\n\r\n    uint256 internal privateToken;\r\n    uint256 internal preSaleToken;\r\n    uint256 internal crowdSaleToken;\r\n    uint256 internal bountyToken;\r\n    uint256 internal foundationToken;\r\n    address public founderAddress;\r\n    bool public unlockAllTokens;\r\n\r\n    mapping (address => bool) public approvedAccount;\r\n\r\n    event UnFrozenFunds(address target, bool unfrozen);\r\n    event UnLockAllTokens(bool unlock);\r\n\r\n    constructor() public {\r\n        founderAddress = address(0x072F140DcCCE18F9966Aeb6D71ffcD0b42748683);\r\n        balances[founderAddress] = totalSupply_;\r\n        emit Transfer(address(0), founderAddress, totalSupply_);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != address(0));                               \r\n        require (balances[_from] >= _value);               \r\n        require (balances[_to].add(_value) >= balances[_to]); \r\n        require(approvedAccount[_from] || unlockAllTokens);\r\n\r\n        balances[_from] = balances[_from].sub(_value);                  \r\n        balances[_to] = balances[_to].add(_value);                  \r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function unlockAllTokens(bool _unlock) public onlyOwner {\r\n        unlockAllTokens = _unlock;\r\n        emit UnLockAllTokens(_unlock);\r\n    }\r\n\r\n    function approvedAccount(address target, bool approval) public onlyOwner {\r\n        approvedAccount[target] = approval;\r\n        emit UnFrozenFunds(target, approval);\r\n    }\r\n}\r\n\r\ncontract PO8PrivateSaleToken03 is Ownable{\r\n    using SafeMath for uint256;\r\n\r\n    PO8Token public token;\r\n    address public wallet;\r\n    uint256 public currentRate;\r\n    uint256 public limitTokenForSale;\r\n    mapping (address => bool) claimAfter45ds;\r\n    mapping (address => uint) boughtTime;\r\n    mapping (address => mapping(uint => uint)) boughtUser;\r\n\r\n    event ChangeRate(address indexed who, uint256 newrate);\r\n    event FinishSale();\r\n    event ClaimAfter45Days();\r\n    event ClaimAfter90Days();\r\n\r\n    constructor() public {\r\n        currentRate = 15000;\r\n        wallet = address(0x072F140DcCCE18F9966Aeb6D71ffcD0b42748683); //address of founder\r\n        limitTokenForSale = 1250000000000000000000000000;\r\n        token = PO8Token(0x8744a672D5a2df51Da92B4BAb608CE7ff4Ddd804);// address of PO8 Token\r\n    }\r\n\r\n    function changeRate(uint256 newrate) public onlyOwner{\r\n        require(newrate > 0);\r\n        currentRate = newrate;\r\n\r\n        emit ChangeRate(msg.sender, newrate);\r\n    }\r\n\r\n    function remainTokens() view public returns(uint256) {\r\n        return token.balanceOf(this);\r\n    }\r\n\r\n    function finish() public onlyOwner {\r\n        uint256 reTokens = remainTokens();\r\n        token.transfer(owner, reTokens);\r\n        \r\n        emit FinishSale();\r\n    }\r\n\r\n    function getBoughtTime(address user) view public returns (uint256){\r\n        return boughtTime[user];\r\n    }\r\n    function userBalance(address user)view public returns (uint256){\r\n        return boughtUser[user][boughtTime[user]];\r\n    }\r\n    \r\n    function remainUserTokenBalance(address user)view public returns (uint256){\r\n        return userBalance(user) * currentRate;\r\n    }\r\n\r\n    function () public payable {\r\n        assert(msg.value >= 1 ether);\r\n        uint256 time = now * 1000;\r\n        \r\n        uint256 _value = msg.value.div(3);\r\n        uint256 tokens = currentRate.mul(_value);\r\n        token.transfer(msg.sender, tokens);        \r\n        wallet.transfer(msg.value); \r\n        boughtTime[msg.sender] = time;//assign time\r\n        boughtUser[msg.sender][boughtTime[msg.sender]] = boughtUser[msg.sender][boughtTime[msg.sender]].add(msg.value.sub(_value));\r\n        claimAfter45ds[msg.sender] = false;\r\n    }\r\n\r\n    function claimAfter45days() external returns (bool){\r\n        require((now * 1000 - 3888000000) >= getBoughtTime(msg.sender)); // after 45 days\r\n        require(userBalance(msg.sender) > 0);\r\n        require(claimAfter45ds[msg.sender] != true);\r\n\r\n        uint256 _value = boughtUser[msg.sender][boughtTime[msg.sender]].div(2);\r\n        uint256 tokens = currentRate.mul(_value);\r\n        token.transfer(msg.sender, tokens);\r\n        boughtUser[msg.sender][boughtTime[msg.sender]] = boughtUser[msg.sender][boughtTime[msg.sender]].sub(_value);\r\n        emit ClaimAfter45Days();\r\n        claimAfter45ds[msg.sender] = true;\r\n        return true;\r\n    }\r\n\r\n    function claimAfter90days() external returns (bool){\r\n        require((now * 1000 - 7776000000) >= getBoughtTime(msg.sender)); // after 90 days\r\n        require(userBalance(msg.sender) > 0);\r\n        require(claimAfter45ds[msg.sender] == true);\r\n\r\n        uint256 _value = boughtUser[msg.sender][boughtTime[msg.sender]];\r\n        uint256 tokens = currentRate.mul(_value);\r\n        token.transfer(msg.sender, tokens);\r\n        boughtUser[msg.sender][boughtTime[msg.sender]] = boughtUser[msg.sender][boughtTime[msg.sender]].sub(_value);\r\n        emit ClaimAfter90Days();\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitTokenForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAfter90days\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"remainUserTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newrate\",\"type\":\"uint256\"}],\"name\":\"changeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBoughtTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimAfter45days\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newrate\",\"type\":\"uint256\"}],\"name\":\"ChangeRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinishSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClaimAfter45Days\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClaimAfter90Days\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"PO8PrivateSaleToken03","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6fabe7910dee99abec2dd33cc2699132e061ce37d1760571dee583d064fd9639"}]}