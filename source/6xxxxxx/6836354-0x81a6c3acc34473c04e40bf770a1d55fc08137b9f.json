{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n  function totalSupply()public view returns (uint256 total_Supply);\r\n  function balanceOf(address who)public view returns (uint256);\r\n  function allowance(address owner, address spender)public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value)public returns (bool ok);\r\n  function approve(address spender, uint256 value)public returns (bool ok);\r\n  function transfer(address to, uint256 value)public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract WGP is ERC20 { \r\n    using SafeMath for uint256;\r\n    //--- Token configurations ----// \r\n    string public constant name = \"W GREEN PAY\";\r\n    string public constant symbol = \"WGP\";\r\n    uint8 public constant decimals = 18;\r\n    uint public maxCap = 1000000000 ether;\r\n    \r\n    //--- Token allocations -------//\r\n    uint256 public _totalsupply;\r\n    uint256 public mintedTokens;\r\n\r\n    //--- Address -----------------//\r\n    address public owner; //Management\r\n    address public ethFundMain;\r\n   \r\n    //--- Milestones --------------//\r\n    uint256 public icoStartDate = 1538366400; // 01-10-2018 12:00 pm\r\n    uint256 public icoEndDate = 1539489600; // 14-10-2018 12:00 pm\r\n    \r\n    //--- Variables ---------------//\r\n    bool public lockstatus = true;\r\n    bool public stopped = false;\r\n    \r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n    event Mint(address indexed from, address indexed to, uint256 amount);\r\n    event Burn(address indexed from, uint256 amount);\r\n    \r\n    modifier onlyOwner() {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyICO() {\r\n        require(now >= icoStartDate && now < icoEndDate);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFinishedICO() {\r\n        require(now >= icoEndDate);\r\n        _;\r\n    }\r\n    \r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n        ethFundMain = 0x67fd4721d490A5E609cF8e09FCE0a217b91F1546;\r\n    }\r\n\r\n    function () public payable onlyICO {\r\n        \r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 total_Supply) {\r\n        total_Supply = _totalsupply;\r\n    }\r\n    \r\n    function balanceOf(address _owner)public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom( address _from, address _to, uint256 _amount ) public onlyFinishedICO returns (bool success)  {\r\n        require( _to != 0x0);\r\n        require(!lockstatus);\r\n        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\r\n        balances[_from] = (balances[_from]).sub(_amount);\r\n        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _amount)public onlyFinishedICO returns (bool success)  {\r\n        require(!lockstatus);\r\n        require( _spender != 0x0);\r\n        require(balances[msg.sender] >= _amount);\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n  \r\n    function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\r\n        require( _owner != 0x0 && _spender !=0x0);\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount)public onlyFinishedICO returns (bool success) {\r\n        require(!lockstatus);\r\n        require( _to != 0x0);\r\n        require(balances[msg.sender] >= _amount && _amount >= 0);\r\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 value) public onlyOwner returns (bool success) {\r\n        uint256 _value = value.mul(10 ** 18);\r\n        require(balances[msg.sender] >= _value);   \r\n        balances[msg.sender] = (balances[msg.sender]).sub(_value);            \r\n        _totalsupply = _totalsupply.sub(_value);                     \r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function stopTransferToken() external onlyOwner onlyFinishedICO {\r\n        require(!lockstatus);\r\n        lockstatus = true;\r\n    }\r\n\r\n    function startTransferToken() external onlyOwner onlyFinishedICO {\r\n        require(lockstatus);\r\n        lockstatus = false;\r\n    }\r\n\r\n    function manualMint(address receiver, uint256 _value) public onlyOwner returns (bool){\r\n        uint256 value = _value.mul(10 ** 18);\r\n        require(receiver != 0x0 && _value > 0);\r\n\r\n        balances[receiver] = balances[receiver].add(value);\r\n        _totalsupply = _totalsupply.add(value);\r\n        mintedTokens = mintedTokens.add(value);\r\n\r\n        require(_totalsupply <= maxCap);\r\n        emit Mint(owner, receiver, value);\r\n        emit Transfer(0, receiver, value);\r\n    }\r\n    \r\n    function haltCrowdSale() external onlyOwner onlyICO {\r\n        require(!stopped);\r\n        stopped = true;\r\n    }\r\n\r\n    function resumeCrowdSale() external onlyOwner onlyICO {\r\n        require(stopped);\r\n        stopped = false;\r\n    }\r\n    \r\n    function changeReceiveWallet(address newAddress) external onlyOwner {\r\n        require(newAddress != 0x0);\r\n        ethFundMain = newAddress;\r\n    }\r\n\r\n\tfunction assignOwnership(address newOwner) public onlyOwner {\r\n\t    require(newOwner != 0x0);\r\n\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\r\n\t    balances[owner] = 0;\r\n\t    owner = newOwner;\r\n\t    emit Transfer(msg.sender, newOwner, balances[newOwner]);\r\n\t}\r\n\r\n    function forwardFunds() external onlyOwner { \r\n        address myAddress = this;\r\n        ethFundMain.transfer(myAddress.balance);\r\n    }\r\n}\r\n\r\ncontract WgpHolder {\r\n    WGP public wgp;\r\n    address public owner;\r\n    address public recipient;\r\n    uint256 public releaseDate;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        wgp = WGP(0xf9918ce795c6CDEA4875a906512BbC15a7d61Abd);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setReleaseDate(uint256 newReleaseDate) external onlyOwner {\r\n        require(newReleaseDate > now);\r\n        releaseDate = newReleaseDate;\r\n    }\r\n\r\n    function setWgpRecipient(address newRecipient) external onlyOwner {\r\n        require(newRecipient != 0x0);\r\n        recipient = newRecipient;\r\n    }\r\n\r\n    function releaseWgp() external onlyOwner {\r\n        require(recipient != 0x0 && releaseDate != 0 && now > releaseDate);\r\n        uint256 balance = wgp.balanceOf(address(this));\r\n        wgp.transfer(recipient, balance);\r\n    }\r\n    \r\n    function changeOwnerShip(address newOwner) external onlyOwner {\r\n        require(newOwner != 0x0);\r\n        owner = newOwner;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerShip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newReleaseDate\",\"type\":\"uint256\"}],\"name\":\"setReleaseDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseWgp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wgp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"setWgpRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"WgpHolder","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://de5093fdd1934c40c8109d7d80cf1ad4d9c2d3b63939c8ee6516c201b42a25be"}]}