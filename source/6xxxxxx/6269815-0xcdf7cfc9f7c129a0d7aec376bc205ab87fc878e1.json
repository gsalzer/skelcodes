{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.16;\r\n\r\nlibrary AddressUtils {\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract BasicAccessControl {\r\n    address public owner;\r\n    // address[] public moderators;\r\n    uint16 public totalModerators = 0;\r\n    mapping (address => bool) public moderators;\r\n    bool public isMaintaining = false;\r\n\r\n    function BasicAccessControl() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyModerators() {\r\n        require(msg.sender == owner || moderators[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isActive {\r\n        require(!isMaintaining);\r\n        _;\r\n    }\r\n\r\n    function ChangeOwner(address _newOwner) onlyOwner public {\r\n        if (_newOwner != address(0)) {\r\n            owner = _newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    function AddModerator(address _newModerator) onlyOwner public {\r\n        if (moderators[_newModerator] == false) {\r\n            moderators[_newModerator] = true;\r\n            totalModerators += 1;\r\n        }\r\n    }\r\n    \r\n    function RemoveModerator(address _oldModerator) onlyOwner public {\r\n        if (moderators[_oldModerator] == true) {\r\n            moderators[_oldModerator] = false;\r\n            totalModerators -= 1;\r\n        }\r\n    }\r\n\r\n    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {\r\n        isMaintaining = _isMaintaining;\r\n    }\r\n}\r\n\r\ncontract EtheremonEnum {\r\n\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_TRAINER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n    \r\n    enum ArrayType {\r\n        CLASS_TYPE,\r\n        STAT_STEP,\r\n        STAT_START,\r\n        STAT_BASE,\r\n        OBJ_SKILL\r\n    }\r\n    \r\n    enum PropertyType {\r\n        ANCESTOR,\r\n        XFACTOR\r\n    }\r\n}\r\n\r\ninterface EtheremonDataBase {\r\n    // read\r\n    function getMonsterClass(uint32 _classId) constant external returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);\r\n    function getMonsterObj(uint64 _objId) constant external returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);\r\n    function getElementInArrayType(EtheremonEnum.ArrayType _type, uint64 _id, uint _index) constant external returns(uint8);\r\n    \r\n    function addMonsterObj(uint32 _classId, address _trainer, string _name) external returns(uint64);\r\n    function addElementToArrayType(EtheremonEnum.ArrayType _type, uint64 _id, uint8 _value) external returns(uint);\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\ninterface ERC721Interface {\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n}\r\n\r\ninterface EtheremonAdventureItem {\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function getItemInfo(uint _tokenId) constant external returns(uint classId, uint value);\r\n    function spawnItem(uint _classId, uint _value, address _owner) external returns(uint);\r\n}\r\n\r\ninterface EtheremonAdventureSetting {\r\n    function getSiteItem(uint _siteId, uint _seed) constant external returns(uint _monsterClassId, uint _tokenClassId, uint _value);\r\n    function getSiteId(uint _classId, uint _seed) constant external returns(uint);\r\n}\r\n\r\ninterface EtheremonMonsterNFT {\r\n    function mintMonster(uint32 _classId, address _trainer, string _name) external returns(uint);\r\n}\r\n\r\ncontract EtheremonAdventureData {\r\n    \r\n    function addLandRevenue(uint _siteId, uint _emontAmount, uint _etherAmount) external;\r\n    function addTokenClaim(uint _tokenId, uint _emontAmount, uint _etherAmount) external;\r\n    function addExploreData(address _sender, uint _typeId, uint _monsterId, uint _siteId, uint _startAt, uint _emontAmount, uint _etherAmount) external returns(uint);\r\n    function removePendingExplore(uint _exploreId, uint _itemSeed) external;\r\n    \r\n    // public function\r\n    function getLandRevenue(uint _classId) constant public returns(uint _emontAmount, uint _etherAmount);\r\n    \r\n    function getTokenClaim(uint _tokenId) constant public returns(uint _emontAmount, uint _etherAmount);\r\n    \r\n    function getExploreData(uint _exploreId) constant public returns(address _sender, uint _typeId, uint _monsterId, uint _siteId, uint _itemSeed, uint _startAt);\r\n    \r\n    function getPendingExplore(address _player) constant public returns(uint);\r\n    \r\n    function getPendingExploreData(address _player) constant public returns(uint _exploreId, uint _typeId, uint _monsterId, uint _siteId, uint _itemSeed, uint _startAt);\r\n}\r\n\r\ncontract EtheremonAdventure is EtheremonEnum, BasicAccessControl {\r\n    \r\n    using AddressUtils for address;\r\n    \r\n    uint8 constant public STAT_COUNT = 6;\r\n    uint8 constant public STAT_MAX = 32;\r\n\r\n    struct MonsterObjAcc {\r\n        uint64 monsterId;\r\n        uint32 classId;\r\n        address trainer;\r\n        string name;\r\n        uint32 exp;\r\n        uint32 createIndex;\r\n        uint32 lastClaimIndex;\r\n        uint createTime;\r\n    }\r\n    \r\n    struct ExploreData {\r\n        address sender;\r\n        uint monsterType;\r\n        uint monsterId;\r\n        uint siteId;\r\n        uint itemSeed;\r\n        uint startAt; // blocknumber\r\n    }\r\n    \r\n    struct ExploreReward {\r\n        uint monsterClassId;\r\n        uint itemClassId;\r\n        uint value;\r\n        uint temp;\r\n    }\r\n    \r\n    address public dataContract;\r\n    address public monsterNFT;\r\n    address public adventureDataContract;\r\n    address public adventureSettingContract;\r\n    address public adventureItemContract;\r\n    address public tokenContract;\r\n    address public kittiesContract;\r\n    \r\n    uint public exploreETHFee = 0.01 ether;\r\n    uint public exploreEMONTFee = 1500000000;\r\n    uint public exploreFastenETHFee = 0.005 ether;\r\n    uint public exploreFastenEMONTFee = 750000000;\r\n    uint public minBlockGap = 240;\r\n    uint public totalSite = 54;\r\n    \r\n    uint seed = 0;\r\n    \r\n    event SendExplore(address indexed from, uint monsterType, uint monsterId, uint exploreId);\r\n    event ClaimExplore(address indexed from, uint exploreId, uint itemType, uint itemClass, uint itemId);\r\n    \r\n    modifier requireDataContract {\r\n        require(dataContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier requireAdventureDataContract {\r\n        require(adventureDataContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier requireAdventureSettingContract {\r\n        require(adventureSettingContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier requireTokenContract {\r\n        require(tokenContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    modifier requireKittiesContract {\r\n        require(kittiesContract != address(0));\r\n        _;\r\n    }\r\n    \r\n    function setContract(address _dataContract, address _monsterNFT, address _adventureDataContract, address _adventureSettingContract, address _adventureItemContract, address _tokenContract, address _kittiesContract) onlyOwner public {\r\n        dataContract = _dataContract;\r\n        monsterNFT = _monsterNFT;\r\n        adventureDataContract = _adventureDataContract;\r\n        adventureSettingContract = _adventureSettingContract;\r\n        adventureItemContract = _adventureItemContract;\r\n        tokenContract = _tokenContract;\r\n        kittiesContract = _kittiesContract;\r\n    }\r\n\r\n    function setFeeConfig(uint _exploreETHFee, uint _exploreEMONTFee, uint _exploreFastenETHFee, uint _exploreFastenEMONTFee) onlyOwner public {\r\n        exploreETHFee = _exploreETHFee;\r\n        exploreEMONTFee = _exploreEMONTFee;\r\n        exploreFastenEMONTFee = _exploreFastenEMONTFee;\r\n        exploreFastenETHFee = _exploreFastenETHFee;\r\n    }\r\n\r\n    function setConfig( uint _minBlockGap, uint _totalSite) onlyOwner public {\r\n        minBlockGap = _minBlockGap;\r\n        totalSite = _totalSite;\r\n    }\r\n    \r\n    function withdrawEther(address _sendTo, uint _amount) onlyOwner public {\r\n        // it is used in case we need to upgrade the smartcontract\r\n        if (_amount > address(this).balance) {\r\n            revert();\r\n        }\r\n        _sendTo.transfer(_amount);\r\n    }\r\n    \r\n    function withdrawToken(address _sendTo, uint _amount) onlyOwner requireTokenContract external {\r\n        ERC20Interface token = ERC20Interface(tokenContract);\r\n        if (_amount > token.balanceOf(address(this))) {\r\n            revert();\r\n        }\r\n        token.transfer(_sendTo, _amount);\r\n    }\r\n    \r\n    function adventureByToken(address _player, uint _token, uint _param1, uint _param2, uint64 _param3, uint64 _param4) isActive onlyModerators external {\r\n        // param1 = 1 -> explore, param1 = 2 -> claim \r\n        if (_param1 == 1) {\r\n            _exploreUsingEmont(_player, _param2, _param3, _token);\r\n        } else {\r\n            _claimExploreItemUsingEMont(_param2, _token);\r\n        }\r\n    }\r\n    \r\n    function _exploreUsingEmont(address _sender, uint _monsterType, uint _monsterId, uint _token) internal {\r\n        if (_token < exploreEMONTFee) revert();\r\n        seed = getRandom(_sender, block.number - 1, seed, _monsterId);\r\n        uint siteId = getTargetSite(_sender, _monsterType, _monsterId, seed);\r\n        if (siteId == 0) revert();\r\n        \r\n        EtheremonAdventureData adventureData = EtheremonAdventureData(adventureDataContract);\r\n        uint exploreId = adventureData.addExploreData(_sender, _monsterType, _monsterId, siteId, block.number, _token, 0);\r\n        SendExplore(_sender, _monsterType, _monsterId, exploreId);\r\n    }\r\n    \r\n    function _claimExploreItemUsingEMont(uint _exploreId, uint _token) internal {\r\n        if (_token < exploreFastenEMONTFee) revert();\r\n        \r\n        EtheremonAdventureData adventureData = EtheremonAdventureData(adventureDataContract);\r\n        ExploreData memory exploreData;\r\n        (exploreData.sender, exploreData.monsterType, exploreData.monsterId, exploreData.siteId, exploreData.itemSeed, exploreData.startAt) = adventureData.getExploreData(_exploreId);\r\n        \r\n        if (exploreData.itemSeed != 0)\r\n            revert();\r\n        \r\n        // min 2 blocks\r\n        if (block.number < exploreData.startAt + 2)\r\n            revert();\r\n        \r\n        exploreData.itemSeed = getRandom(exploreData.sender, exploreData.startAt + 1, exploreData.monsterId, _exploreId) % 100000;\r\n        ExploreReward memory reward;\r\n        (reward.monsterClassId, reward.itemClassId, reward.value) = EtheremonAdventureSetting(adventureSettingContract).getSiteItem(exploreData.siteId, exploreData.itemSeed);\r\n        \r\n        adventureData.removePendingExplore(_exploreId, exploreData.itemSeed);\r\n        \r\n        if (reward.monsterClassId > 0) {\r\n            EtheremonMonsterNFT monsterContract = EtheremonMonsterNFT(monsterNFT);\r\n            reward.temp = monsterContract.mintMonster(uint32(reward.monsterClassId), exploreData.sender,  \"..name me..\");\r\n            ClaimExplore(exploreData.sender, _exploreId, 0, reward.monsterClassId, reward.temp);\r\n        } else if (reward.itemClassId > 0) {\r\n            // give new adventure item \r\n            EtheremonAdventureItem item = EtheremonAdventureItem(adventureItemContract);\r\n            reward.temp = item.spawnItem(reward.itemClassId, reward.value, exploreData.sender);\r\n            ClaimExplore(exploreData.sender, _exploreId, 1, reward.itemClassId, reward.temp);\r\n        } else if (reward.value > 0) {\r\n            // send token contract\r\n            ERC20Interface token = ERC20Interface(tokenContract);\r\n            token.transfer(exploreData.sender, reward.value);\r\n            ClaimExplore(exploreData.sender, _exploreId, 2, 0, reward.value);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    // public\r\n    \r\n    function getRandom(address _player, uint _block, uint _seed, uint _count) constant public returns(uint) {\r\n        return uint(keccak256(block.blockhash(_block), _player, _seed, _count));\r\n    }\r\n    \r\n    function getTargetSite(address _sender, uint _monsterType, uint _monsterId, uint _seed) constant public returns(uint) {\r\n        if (_monsterType == 0) {\r\n            // Etheremon \r\n            MonsterObjAcc memory obj;\r\n            (obj.monsterId, obj.classId, obj.trainer, obj.exp, obj.createIndex, obj.lastClaimIndex, obj.createTime) = EtheremonDataBase(dataContract).getMonsterObj(uint64(_monsterId));\r\n            if (obj.trainer != _sender) revert();\r\n            return EtheremonAdventureSetting(adventureSettingContract).getSiteId(obj.classId, _seed);\r\n        } else if (_monsterType == 1) {\r\n            // Cryptokitties\r\n            if (_sender != ERC721Interface(kittiesContract).ownerOf(_monsterId)) revert();\r\n            return EtheremonAdventureSetting(adventureSettingContract).getSiteId(_seed % totalSite, _seed);\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function exploreUsingETH(uint _monsterType, uint _monsterId) isActive public payable {\r\n        // not allow contract to make txn\r\n        if (msg.sender.isContract()) revert();\r\n        \r\n        if (msg.value < exploreETHFee) revert();\r\n        seed = getRandom(msg.sender, block.number - 1, seed, _monsterId);\r\n        uint siteId = getTargetSite(msg.sender, _monsterType, _monsterId, seed);\r\n        if (siteId == 0) revert();\r\n        EtheremonAdventureData adventureData = EtheremonAdventureData(adventureDataContract);\r\n        uint exploreId = adventureData.addExploreData(msg.sender, _monsterType, _monsterId, siteId, block.number, 0, msg.value);\r\n        SendExplore(msg.sender, _monsterType, _monsterId, exploreId);\r\n    }\r\n    \r\n    function claimExploreItem(uint _exploreId) isActive public payable {\r\n        EtheremonAdventureData adventureData = EtheremonAdventureData(adventureDataContract);\r\n        ExploreData memory exploreData;\r\n        (exploreData.sender, exploreData.monsterType, exploreData.monsterId, exploreData.siteId, exploreData.itemSeed, exploreData.startAt) = adventureData.getExploreData(_exploreId);\r\n        \r\n        if (exploreData.itemSeed != 0)\r\n            revert();\r\n        \r\n        // min 2 blocks\r\n        if (block.number < exploreData.startAt + 2)\r\n            revert();\r\n        \r\n        exploreData.itemSeed = getRandom(exploreData.sender, exploreData.startAt + 1, exploreData.monsterId, _exploreId) % 100000;\r\n        if (msg.value < exploreFastenETHFee) {\r\n            if (block.number < exploreData.startAt + minBlockGap + exploreData.startAt % minBlockGap)\r\n                revert();\r\n        }\r\n        \r\n        ExploreReward memory reward;\r\n        (reward.monsterClassId, reward.itemClassId, reward.value) = EtheremonAdventureSetting(adventureSettingContract).getSiteItem(exploreData.siteId, exploreData.itemSeed);\r\n        \r\n        adventureData.removePendingExplore(_exploreId, exploreData.itemSeed);\r\n        \r\n        if (reward.monsterClassId > 0) {\r\n            EtheremonMonsterNFT monsterContract = EtheremonMonsterNFT(monsterNFT);\r\n            reward.temp = monsterContract.mintMonster(uint32(reward.monsterClassId), exploreData.sender,  \"..name me..\");\r\n            ClaimExplore(exploreData.sender, _exploreId, 0, reward.monsterClassId, reward.temp);\r\n        } else if (reward.itemClassId > 0) {\r\n            // give new adventure item \r\n            EtheremonAdventureItem item = EtheremonAdventureItem(adventureItemContract);\r\n            reward.temp = item.spawnItem(reward.itemClassId, reward.value, exploreData.sender);\r\n            ClaimExplore(exploreData.sender, _exploreId, 1, reward.itemClassId, reward.temp);\r\n        } else if (reward.value > 0) {\r\n            // send token contract\r\n            ERC20Interface token = ERC20Interface(tokenContract);\r\n            token.transfer(exploreData.sender, reward.value);\r\n            ClaimExplore(exploreData.sender, _exploreId, 2, 0, reward.value);\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n    \r\n    // public\r\n    \r\n    function predictExploreReward(uint _exploreId) constant external returns(uint itemSeed, uint rewardMonsterClass, uint rewardItemCLass, uint rewardValue) {\r\n        EtheremonAdventureData adventureData = EtheremonAdventureData(adventureDataContract);\r\n        ExploreData memory exploreData;\r\n        (exploreData.sender, exploreData.monsterType, exploreData.monsterId, exploreData.siteId, exploreData.itemSeed, exploreData.startAt) = adventureData.getExploreData(_exploreId);\r\n        \r\n        if (exploreData.itemSeed != 0) {\r\n            itemSeed = exploreData.itemSeed;\r\n        } else {\r\n            if (block.number < exploreData.startAt + 2)\r\n                return (0, 0, 0, 0);\r\n            itemSeed = getRandom(exploreData.sender, exploreData.startAt + 1, exploreData.monsterId, _exploreId) % 100000;\r\n        }\r\n        (rewardMonsterClass, rewardItemCLass, rewardValue) = EtheremonAdventureSetting(adventureSettingContract).getSiteItem(exploreData.siteId, itemSeed);\r\n    }\r\n    \r\n    function getExploreItem(uint _exploreId) constant external returns(address trainer, uint monsterType, uint monsterId, uint siteId, uint startBlock, uint rewardMonsterClass, uint rewardItemClass, uint rewardValue) {\r\n        EtheremonAdventureData adventureData = EtheremonAdventureData(adventureDataContract);\r\n        (trainer, monsterType, monsterId, siteId, rewardMonsterClass, startBlock) = adventureData.getExploreData(_exploreId);\r\n        \r\n        if (rewardMonsterClass > 0) {\r\n            (rewardMonsterClass, rewardItemClass, rewardValue) = EtheremonAdventureSetting(adventureSettingContract).getSiteItem(siteId, rewardMonsterClass);\r\n        }\r\n        \r\n    }\r\n    \r\n    function getPendingExploreItem(address _trainer) constant external returns(uint exploreId, uint monsterType, uint monsterId, uint siteId, uint startBlock, uint endBlock) {\r\n        EtheremonAdventureData adventureData = EtheremonAdventureData(adventureDataContract);\r\n        (exploreId, monsterType, monsterId, siteId, endBlock, startBlock) = adventureData.getPendingExploreData(_trainer);\r\n        if (exploreId > 0) {\r\n            endBlock = startBlock + minBlockGap + startBlock % minBlockGap;\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_block\",\"type\":\"uint256\"},{\"name\":\"_seed\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getRandom\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adventureItemContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"moderators\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exploreFastenEMONTFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_monsterType\",\"type\":\"uint256\"},{\"name\":\"_monsterId\",\"type\":\"uint256\"}],\"name\":\"exploreUsingETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBlockGap\",\"type\":\"uint256\"},{\"name\":\"_totalSite\",\"type\":\"uint256\"}],\"name\":\"setConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exploreETHFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exploreEMONTFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kittiesContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMaintaining\",\"type\":\"bool\"}],\"name\":\"UpdateMaintaining\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAT_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalModerators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monsterNFT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newModerator\",\"type\":\"address\"}],\"name\":\"AddModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adventureDataContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_trainer\",\"type\":\"address\"}],\"name\":\"getPendingExploreItem\",\"outputs\":[{\"name\":\"exploreId\",\"type\":\"uint256\"},{\"name\":\"monsterType\",\"type\":\"uint256\"},{\"name\":\"monsterId\",\"type\":\"uint256\"},{\"name\":\"siteId\",\"type\":\"uint256\"},{\"name\":\"startBlock\",\"type\":\"uint256\"},{\"name\":\"endBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adventureSettingContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBlockGap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSite\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dataContract\",\"type\":\"address\"},{\"name\":\"_monsterNFT\",\"type\":\"address\"},{\"name\":\"_adventureDataContract\",\"type\":\"address\"},{\"name\":\"_adventureSettingContract\",\"type\":\"address\"},{\"name\":\"_adventureItemContract\",\"type\":\"address\"},{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_kittiesContract\",\"type\":\"address\"}],\"name\":\"setContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sendTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_exploreId\",\"type\":\"uint256\"}],\"name\":\"getExploreItem\",\"outputs\":[{\"name\":\"trainer\",\"type\":\"address\"},{\"name\":\"monsterType\",\"type\":\"uint256\"},{\"name\":\"monsterId\",\"type\":\"uint256\"},{\"name\":\"siteId\",\"type\":\"uint256\"},{\"name\":\"startBlock\",\"type\":\"uint256\"},{\"name\":\"rewardMonsterClass\",\"type\":\"uint256\"},{\"name\":\"rewardItemClass\",\"type\":\"uint256\"},{\"name\":\"rewardValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldModerator\",\"type\":\"address\"}],\"name\":\"RemoveModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exploreFastenETHFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_exploreId\",\"type\":\"uint256\"}],\"name\":\"predictExploreReward\",\"outputs\":[{\"name\":\"itemSeed\",\"type\":\"uint256\"},{\"name\":\"rewardMonsterClass\",\"type\":\"uint256\"},{\"name\":\"rewardItemCLass\",\"type\":\"uint256\"},{\"name\":\"rewardValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAT_COUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exploreETHFee\",\"type\":\"uint256\"},{\"name\":\"_exploreEMONTFee\",\"type\":\"uint256\"},{\"name\":\"_exploreFastenETHFee\",\"type\":\"uint256\"},{\"name\":\"_exploreFastenEMONTFee\",\"type\":\"uint256\"}],\"name\":\"setFeeConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_monsterType\",\"type\":\"uint256\"},{\"name\":\"_monsterId\",\"type\":\"uint256\"},{\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"getTargetSite\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMaintaining\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_player\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"uint256\"},{\"name\":\"_param1\",\"type\":\"uint256\"},{\"name\":\"_param2\",\"type\":\"uint256\"},{\"name\":\"_param3\",\"type\":\"uint64\"},{\"name\":\"_param4\",\"type\":\"uint64\"}],\"name\":\"adventureByToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_exploreId\",\"type\":\"uint256\"}],\"name\":\"claimExploreItem\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"monsterType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"monsterId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"exploreId\",\"type\":\"uint256\"}],\"name\":\"SendExplore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"exploreId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"itemType\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"itemClass\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"ClaimExplore\",\"type\":\"event\"}]","ContractName":"EtheremonAdventure","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://826886f76af1a8b15fbff6837c322577330f1319208574e9b02efae09e1cb507"}]}