{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n  SMART CHANCE\r\n  \r\n  EN:\r\n  1. Fixed deposit - 1 Ether.\r\n     The number of deposits from one address is not limited.\r\n  2. The round consists of 10 deposits. At the end of the round, each participant\r\n     gets either 110% of the deposit, or insurance compensation 70% of the\r\n     deposit.\r\n  3. Payments are made gradually - with each new deposit ONLY ONE payment to one\r\n     of the participants of the previous round is sent. If the participant does\r\n     not want to wait for a payout, he can send 0 Ether and get all his winnings.\r\n  4. The prize fund is calculated as 7% of all deposits. To get the whole\r\n     prize fund, it is necessary that after the participant no one invested during\r\n     42 blocks (~ 10 minutes) and after that the participant needs to send\r\n     0 Ether in 10 minutes.\r\n\r\n  GAS LIMIT 300000\r\n  \r\n  RU:\r\n  1. Сумма депозита фиксированная - 1 Ether.\r\n     Количество депозитов с одного адреса не ограничено.\r\n  2. Раунд состоит из 10 депозитов. По окончании раунда каждому участнику\r\n     производится начисление - либо 110% от депозита, либо страховое возмещение\r\n     70% от депозита.\r\n  3. Выплаты производятся постепенно - с каждым новым депозитом отправляется\r\n     ОДНА выплата одному из участников предыдущего раунда. Если участник не\r\n     хочет ждать выплату, он может отправить 0 Ether и получить все свои выигрыши.\r\n  4. Призовой фонд рассчитывается как 7% от депозитов. Чтобы получить весь\r\n     призовой фонд, нужно, чтобы после участника никто не вкладывался в течение\r\n     42 блоков (~10 минут), и чтобы он отправил 0 Ether через 10 минут.\r\n\r\n  ЛИМИТ ГАЗА 300000\r\n*/\r\n\r\ncontract SmartChance {\r\n    uint public depositValue = 1 ether;\r\n    uint public places = 10;\r\n    uint public blocksBeforePrize = 42;\r\n    uint public prize;\r\n    uint public supportFee = 3;\r\n    uint public prizeFee = 7;\r\n    address public lastInvestor;\r\n    uint public lastInvestedAt;\r\n    uint[] public rewards = [ 110, 110, 110, 110, 110 ];\r\n    address[] public placesMap;\r\n    mapping (address => uint) public debts;\r\n    mapping (address => uint) public debtsQueueIndex;\r\n    address[] public debtsQueue;\r\n    uint public debtIndex;\r\n    address public support = msg.sender;\r\n    \r\n    uint private seed;\r\n    \r\n    // uint256 to bytes32\r\n    function toBytes(uint256 x) internal pure returns (bytes b) {\r\n        b = new bytes(32);\r\n        assembly {\r\n            mstore(add(b, 32), x)\r\n        }\r\n    }\r\n    \r\n    // initializes variables for a pseudo-random number generator\r\n    function randomize() internal {\r\n        seed += block.timestamp + uint(msg.sender);\r\n    }\r\n    \r\n    // returns a pseudo-random number\r\n    function random(uint lessThan) internal view returns (uint) {\r\n        return uint(sha256(toBytes(uint(blockhash(block.number - 1)) + seed))) % lessThan;\r\n    }\r\n    \r\n    function registerInvestor(address investor) internal {\r\n        placesMap.push(investor);\r\n        if (debtsQueueIndex[investor] == 0) {\r\n            debtsQueue.push(investor);\r\n            debtsQueueIndex[investor] = debtsQueue.length;\r\n        }\r\n    }\r\n    \r\n    function addDebt(address investor, uint debt) internal {\r\n        debts[investor] += debt;\r\n    }\r\n    \r\n    function () public payable {\r\n        require(block.number >= 6642584);\r\n        \r\n        randomize();\r\n        if (msg.value == depositValue) {\r\n            registerInvestor(msg.sender);\r\n            if (placesMap.length == places) {\r\n                uint place = random(places);\r\n                \r\n                uint prizeSum;\r\n                uint x;\r\n                for (x = 0; x < rewards.length; x++) {\r\n                    uint reward = depositValue * rewards[x] / 100;\r\n                    addDebt(placesMap[place], reward);\r\n                    prizeSum += reward;\r\n                    place = (place + 1) % places;\r\n                }\r\n                \r\n                uint insurancePlaces = places - rewards.length;\r\n                uint insuranceValue = (depositValue * places * (100 - supportFee - prizeFee) / 100 - prizeSum) / insurancePlaces;\r\n                for (x = 0; x < insurancePlaces; x++) {\r\n                    addDebt(placesMap[place], insuranceValue);\r\n                    place = (place + 1) % places;\r\n                }\r\n                \r\n                delete placesMap;\r\n            }\r\n            \r\n            if (debtIndex < debtsQueue.length) {\r\n                address investor = debtsQueue[debtIndex];\r\n                if (investor != 0x0) {\r\n                    if (debts[investor] > 0) {\r\n                        investor.transfer(debts[investor]);\r\n                        delete debts[investor];\r\n                        delete debtsQueueIndex[investor];\r\n                        delete debtsQueue[debtIndex];\r\n                        debtIndex++;\r\n                    }\r\n                } else {\r\n                    debtIndex++;\r\n                }\r\n            }\r\n            \r\n            lastInvestor = msg.sender;\r\n            lastInvestedAt = block.number;\r\n            support.transfer(msg.value * supportFee / 100);\r\n            prize += msg.value * prizeFee / 100;\r\n        } else if (msg.value == 0) {\r\n            uint debt = debts[msg.sender];\r\n            if (debt > 0) {\r\n                msg.sender.transfer(debt);\r\n                delete debts[msg.sender];\r\n                delete debtsQueue[debtsQueueIndex[msg.sender] - 1];\r\n                delete debtsQueueIndex[msg.sender];\r\n            }\r\n            if (lastInvestor == msg.sender && block.number >= lastInvestedAt + blocksBeforePrize) {\r\n                lastInvestor.transfer(prize);\r\n                delete prize;\r\n                delete lastInvestor;\r\n            }\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"support\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInvestedAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"debts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"places\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"placesMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtsQueueIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"debtIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksBeforePrize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prizeFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debtsQueue\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"SmartChance","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://71c62ebad3195bf907d3cc83ee32ac9cf37f0d31870486dd4292549226396829"}]}