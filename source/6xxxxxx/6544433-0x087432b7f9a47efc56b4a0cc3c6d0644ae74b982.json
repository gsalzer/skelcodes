{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC223 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/223\r\n */\r\ninterface ERC223I {\r\n\r\n  function balanceOf(address _owner) external view returns (uint balance);\r\n  \r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function decimals() external view returns (uint8 _decimals);\r\n  function totalSupply() external view returns (uint256 supply);\r\n\r\n  function transfer(address to, uint value) external returns (bool ok);\r\n  function transfer(address to, uint value, bytes data) external returns (bool ok);\r\n  function transfer(address to, uint value, bytes data, string custom_fallback) external returns (bool ok);\r\n\r\n  function releaseTokenTransfer() external;\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);  \r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\ncontract SafeMath {\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow.\r\n    */\r\n    function safeSub(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        assert(y <= x);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function safeAdd(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x + y;\r\n        assert(z >= x);\r\n        return z;\r\n    }\r\n\t\r\n\t/**\r\n    * @dev Integer division of two numbers, reverts on division by zero.\r\n    */\r\n    function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x / y;\r\n        return z;\r\n    }\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\t\r\n    function safeMul(uint256 x, uint256 y) internal pure returns (uint256) {    \r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n    \r\n        uint256 z = x * y;\r\n        assert(z / x == y);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the integer percentage of the number.\r\n    */\r\n    function safePerc(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        if (x == 0) {\r\n            return 0;\r\n        }\r\n        \r\n        uint256 z = x * y;\r\n        assert(z / x == y);    \r\n        z = z / 10000; // percent to hundredths\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the minimum value of two numbers.\r\n    */\t\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x <= y ? x : y;\r\n        return z;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the maximum value of two numbers.\r\n    */\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        uint256 z = x >= y ? x : y;\r\n        return z;\r\n    }\r\n}\r\n/**\r\n * @title Ownable contract - base contract with an owner\r\n */\r\ncontract Ownable {\r\n  \r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n  \r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    assert(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    assert(_newOwner != address(0));      \r\n    newOwner = _newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Accept transferOwnership.\r\n   */\r\n  function acceptOwnership() public {\r\n    if (msg.sender == newOwner) {\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @title RateContract Interface\r\n * @dev \r\n */\r\ninterface RateContractI {\r\n    // returns the Currency information\r\n    function getCurrency(bytes32 _code) external view returns (string, uint, uint, uint, uint);\r\n\r\n    // returns Rate of coin to PMC (with the exception of rate[\"ETH\"]) \r\n    function getRate(bytes32 _code) external view returns (uint);\r\n\r\n    // returns Price of Object in the specified currency (local user currency)\r\n    // _code - specified currency\r\n    // _amount - price of object in PMC\r\n    function getLocalPrice(bytes32 _code, uint _amount) external view returns (uint);\r\n\r\n    // returns Price of Object in the crypto currency (ETH)    \r\n    // _amount - price of object in PMC\r\n    function getCryptoPrice(uint _amount) external view returns (uint);\r\n\r\n    // update rates for a specific coin\r\n    function updateRate(bytes32 _code, uint _pmc) external;\r\n}\r\n\r\n/**\r\n * @title Agent contract - base contract with an agent\r\n */\r\ncontract Agent is Ownable {\r\n\r\n  address public defAgent;\r\n\r\n  mapping(address => bool) public Agents;  \r\n\r\n  event UpdatedAgent(address _agent, bool _status);\r\n\r\n  constructor() public {\r\n    defAgent = msg.sender;\r\n    Agents[msg.sender] = true;\r\n  }\r\n  \r\n  modifier onlyAgent() {\r\n    assert(Agents[msg.sender]);\r\n    _;\r\n  }\r\n  \r\n  function updateAgent(address _agent, bool _status) public onlyOwner {\r\n    assert(_agent != address(0));\r\n    Agents[_agent] = _status;\r\n\r\n    emit UpdatedAgent(_agent, _status);\r\n  }  \r\n}\r\n\r\n/**\r\n * @title Standard ERC223 token\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/223\r\n */\r\ncontract ERC223 is ERC223I, Agent, SafeMath {\r\n\r\n  mapping(address => uint) balances;\r\n  \r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n  uint256 public totalSupply;\r\n\r\n  address public crowdsale = address(0);\r\n  bool public released = false;\r\n\r\n  /**\r\n   * @dev Limit token transfer until the crowdsale is over.\r\n   */\r\n  modifier canTransfer() {\r\n    assert(released || msg.sender == crowdsale);\r\n    _;\r\n  }\r\n\r\n  modifier onlyCrowdsaleContract() {\r\n    assert(msg.sender == crowdsale);\r\n    _;\r\n  }  \r\n  \r\n  function name() public view returns (string _name) {\r\n    return name;\r\n  }\r\n\r\n  function symbol() public view returns (string _symbol) {\r\n    return symbol;\r\n  }\r\n\r\n  function decimals() public view returns (uint8 _decimals) {\r\n    return decimals;\r\n  }\r\n\r\n  function totalSupply() public view returns (uint256 _totalSupply) {\r\n    return totalSupply;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint balance) {\r\n    return balances[_owner];\r\n  }  \r\n\r\n  // if bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) private view returns (bool is_contract) {\r\n    uint length;\r\n    assembly {\r\n      //retrieve the size of the code on target address, this needs assembly\r\n      length := extcodesize(_addr)\r\n    }\r\n    return (length>0);\r\n  }\r\n  \r\n  // function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data) external canTransfer() returns (bool success) {      \r\n    if(isContract(_to)) {\r\n      return transferToContract(_to, _value, _data);\r\n    } else {\r\n      return transferToAddress(_to, _value, _data);\r\n    }\r\n  }\r\n  \r\n  // standard function transfer similar to ERC20 transfer with no _data.\r\n  // added due to backwards compatibility reasons.\r\n  function transfer(address _to, uint _value) external canTransfer() returns (bool success) {      \r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n      return transferToContract(_to, _value, empty);\r\n    } else {\r\n      return transferToAddress(_to, _value, empty);\r\n    }\r\n  }\r\n\r\n  // function that is called when transaction target is an address\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    emit Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n  \r\n  // function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) < _value) revert();\r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    assert(_to.call.value(0)(abi.encodeWithSignature(\"tokenFallback(address,uint256,bytes)\", msg.sender, _value, _data)));\r\n    emit Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n\r\n  // function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) external canTransfer() returns (bool success) {      \r\n    if(isContract(_to)) {\r\n      if (balanceOf(msg.sender) < _value) revert();\r\n      balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n      balances[_to] = safeAdd(balanceOf(_to), _value);      \r\n      assert(_to.call.value(0)(abi.encodeWithSignature(_custom_fallback), msg.sender, _value, _data));    \r\n      emit Transfer(msg.sender, _to, _value, _data);\r\n      return true;\r\n    } else {\r\n      return transferToAddress(_to, _value, _data);\r\n    }\r\n  }\r\n\r\n  function setCrowdsaleContract(address _contract) external onlyOwner {\r\n    crowdsale = _contract;\r\n  }\r\n\r\n  /**\r\n   * @dev One way function to release the tokens to the wild. Can be called only from the crowdsale contract.\r\n   */\r\n  function releaseTokenTransfer() external onlyCrowdsaleContract {\r\n    released = true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SABIGlobal CrowdSale management contract\r\n */\r\ncontract CrowdSale is Agent, SafeMath {\r\n\r\n  uint public decimals = 8;\r\n  uint public multiplier = 10 ** decimals;\r\n  \r\n  RateContractI public RateContract;\r\n  ERC223I public ERC223;\r\n\r\n  uint public totalSupply;\r\n  \r\n  uint public SoftCap;\r\n  uint public HardCap;\r\n\r\n  /* The UNIX timestamp start/end date of the crowdsale */\r\n  uint public startsAt;\r\n  uint public endsIn;\r\n  \r\n  /* How many unique addresses that have invested */\r\n  uint public investorCount = 0;\r\n  \r\n  /* How many wei of funding we have raised */\r\n  uint public weiRaised = 0;\r\n  \r\n  /* How many usd of funding we have raised */\r\n  uint public usdRaised = 0;\r\n  \r\n  /* The number of tokens already sold through this contract*/\r\n  uint public tokensSold = 0;\r\n  \r\n  /* Has this crowdsale been finalized */\r\n  bool public finalized;\r\n\r\n  /** State\r\n   *\r\n   * - Preparing: All contract initialization calls and variables have not been set yet\r\n   * - PrivateSale: Private sale\r\n   * - PreSale: Pre Sale\r\n   * - Sale: Active crowdsale\r\n   * - Success: HardCap reached\r\n   * - Failure: HardCap not reached before ending time\r\n   * - Finalized: The finalized has been called and succesfully executed\r\n   */\r\n  enum State{Unknown, Preparing, PrivateSale, PreSale, Sale, Success, Failure, Finalized}\r\n\r\n  /* How much ETH each address has invested to this crowdsale */\r\n  mapping (address => uint) public investedAmountOf;\r\n  \r\n  /* How much tokens this crowdsale has credited for each investor address */\r\n  mapping (address => uint) public tokenAmountOf;\r\n  \r\n  /* Wei will be transfered on this address */\r\n  address public multisigWallet;\r\n  \r\n  /* How much wei we have given back to investors. */\r\n  uint public weiRefunded = 0;\r\n\r\n  /* token price in USD */\r\n  uint public price;\r\n\r\n  struct _Stage {\r\n    uint startsAt;\r\n    uint endsIn;\r\n    uint bonus;    \r\n    uint min;\r\n    uint tokenAmount;\r\n    mapping (address => uint) tokenAmountOfStage; // how much tokens this crowdsale has credited for each investor address in a particular stage\r\n  }\r\n\r\n  _Stage[5] public Stages;\r\n\r\n  mapping (bytes32 => uint) public cap;\r\n  uint[5] public duration;\r\n\r\n  /* A new investment was made */\r\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint bonusAmount);\r\n  /* Receive ether on the contract */\r\n  event ReceiveEtherOnContract(address sender, uint amount);\r\n  \r\n  /**\r\n   * @dev Constructor sets default parameters\r\n   * @param _startsAt1 = 1539993600 (20.10.2018)\r\n   * @param _startsAt2 = 1543104000 (25.11.2018)\r\n   * @param _startsAt3 = 1544313600 (09.12.2018)\r\n   * @param _startsAt4 = 1545523200 (23.12.2018)\r\n   * @param _startsAt5 = 1552176000 (10.03.2019)\r\n   */\r\n  constructor(address _multisigWallet, uint _priceTokenInUSDCents, uint _startsAt1, uint _startsAt2, uint _startsAt3, uint _startsAt4, uint _startsAt5) public {\r\n    \r\n    duration[0] = 36 days;\r\n    duration[1] = 14 days;\r\n    duration[2] = 14 days;\r\n    duration[3] =  9 days;  \r\n    duration[4] = 32 days;\r\n\r\n    initialization(_multisigWallet, _priceTokenInUSDCents, _startsAt1, _startsAt2, _startsAt3, _startsAt4, _startsAt5);\r\n  }\r\n\r\n  function hash(State _data) private pure returns (bytes32 _hash) {\r\n    return keccak256(abi.encodePacked(_data));\r\n  }\r\n\r\n  function initialization(address _multisigWallet, uint _priceTokenInUSDCents, uint _startsAt1, uint _startsAt2, uint _startsAt3, uint _startsAt4, uint _startsAt5) public onlyOwner {\r\n\r\n    require(_multisigWallet != address(0) && _priceTokenInUSDCents > 0);\r\n\r\n    require(_startsAt1 < _startsAt2 &&\r\n            _startsAt2 >= _startsAt1 + duration[0] &&\r\n            _startsAt3 >= _startsAt2 + duration[1] &&\r\n            _startsAt4 >= _startsAt3 + duration[2] &&\r\n            _startsAt5 >= _startsAt4 + duration[3]);\r\n\r\n    multisigWallet =_multisigWallet;\r\n    startsAt = _startsAt1;\r\n    endsIn = _startsAt5 + duration[4];\r\n    price = _priceTokenInUSDCents;\r\n\r\n    SoftCap =  200 * (10**6) * multiplier;\r\n    HardCap = 1085 * (10**6) * multiplier;\r\n\r\n    cap[hash(State.PrivateSale)] = 150 * (10**6) * multiplier +  60 * (10**6) * multiplier;\r\n    cap[hash(State.PreSale)]     = 500 * (10**6) * multiplier + 125 * (10**6) * multiplier;\r\n    cap[hash(State.Sale)]        = 250 * (10**6) * multiplier;\r\n\r\n    Stages[0] = _Stage({startsAt: _startsAt1, endsIn:_startsAt1 + duration[0] - 1, bonus: 4000, min: 1250 * 10**3 * multiplier, tokenAmount: 0});\r\n    Stages[1] = _Stage({startsAt: _startsAt2, endsIn:_startsAt2 + duration[1] - 1, bonus: 2500, min: 2500 * multiplier, tokenAmount: 0});\r\n    Stages[2] = _Stage({startsAt: _startsAt3, endsIn:_startsAt3 + duration[2] - 1, bonus: 2000, min: 2500 * multiplier, tokenAmount: 0});\r\n    Stages[3] = _Stage({startsAt: _startsAt4, endsIn:_startsAt4 + duration[3],     bonus: 1500, min: 2500 * multiplier, tokenAmount: 0});\r\n    Stages[4] = _Stage({startsAt: _startsAt5, endsIn:_startsAt5 + duration[4],     bonus:    0, min: 1000 * multiplier, tokenAmount: 0});\r\n  }\r\n  \r\n  /** \r\n   * @dev Crowdfund state\r\n   * @return State current state\r\n   */\r\n  function getState() public constant returns (State) {\r\n    if (finalized) return State.Finalized;\r\n    else if (ERC223 == address(0) || RateContract == address(0) || now < startsAt) return State.Preparing;\r\n    else if (now >= Stages[0].startsAt && now <= Stages[0].endsIn) return State.PrivateSale;\r\n    else if (now >= Stages[1].startsAt && now <= Stages[3].endsIn) return State.PreSale;\r\n    else if (now > Stages[3].endsIn && now < Stages[4].startsAt) return State.Preparing;\r\n    else if (now >= Stages[4].startsAt && now <= Stages[4].endsIn) return State.Sale;    \r\n    else if (isCrowdsaleFull()) return State.Success;\r\n    else return State.Failure;\r\n  }\r\n\r\n  /** \r\n   * @dev Gets the current stage.\r\n   * @return uint current stage\r\n   */\r\n  function getStage() public constant returns (uint) {\r\n    uint i;\r\n    for (i = 0; i < Stages.length; i++) {\r\n      if (now >= Stages[i].startsAt && now < Stages[i].endsIn) {\r\n        return i;\r\n      }\r\n    }\r\n    return Stages.length-1;\r\n  }\r\n\r\n  /**\r\n   * Buy tokens from the contract\r\n   */\r\n  function() public payable {\r\n    investInternal(msg.sender, msg.value);\r\n  }\r\n\r\n  /**\r\n   * Buy tokens from personal area (ETH or BTC)\r\n   */\r\n  function investByAgent(address _receiver, uint _weiAmount) external onlyAgent {\r\n    investInternal(_receiver, _weiAmount);\r\n  }\r\n  \r\n  /**\r\n   * Make an investment.\r\n   *\r\n   * @param _receiver The Ethereum address who receives the tokens\r\n   * @param _weiAmount The invested amount\r\n   *\r\n   */\r\n  function investInternal(address _receiver, uint _weiAmount) private {\r\n\r\n    require(_weiAmount > 0);\r\n\r\n    State currentState = getState();\r\n    require(currentState == State.PrivateSale || currentState == State.PreSale || currentState == State.Sale);\r\n\r\n    uint currentStage = getStage();\r\n    \r\n    // Calculating the number of tokens\r\n    uint tokenAmount = 0;\r\n    uint bonusAmount = 0;\r\n    (tokenAmount, bonusAmount) = calculateTokens(_weiAmount, currentStage);\r\n\r\n    tokenAmount = safeAdd(tokenAmount, bonusAmount);\r\n    \r\n    // Check cap for every State\r\n    if (currentState == State.PrivateSale || currentState == State.Sale) {\r\n      require(safeAdd(Stages[currentStage].tokenAmount, tokenAmount) <= cap[hash(currentState)]);\r\n    } else {\r\n      uint TokenSoldOnPreSale = safeAdd(safeAdd(Stages[1].tokenAmount, Stages[2].tokenAmount), Stages[3].tokenAmount);\r\n      TokenSoldOnPreSale = safeAdd(TokenSoldOnPreSale, tokenAmount);\r\n      require(TokenSoldOnPreSale <= cap[hash(currentState)]);\r\n    }      \r\n\r\n    // Check HardCap\r\n    require(safeAdd(tokensSold, tokenAmount) <= HardCap);\r\n    \r\n    // Update stage counts  \r\n    Stages[currentStage].tokenAmount  = safeAdd(Stages[currentStage].tokenAmount, tokenAmount);\r\n    Stages[currentStage].tokenAmountOfStage[_receiver] = safeAdd(Stages[currentStage].tokenAmountOfStage[_receiver], tokenAmount);\r\n\t\r\n    // Update investor\r\n    if(investedAmountOf[_receiver] == 0) {       \r\n       investorCount++; // A new investor\r\n    }  \r\n    investedAmountOf[_receiver] = safeAdd(investedAmountOf[_receiver], _weiAmount);\r\n    tokenAmountOf[_receiver] = safeAdd(tokenAmountOf[_receiver], tokenAmount);\r\n\r\n    // Update totals\r\n    weiRaised  = safeAdd(weiRaised, _weiAmount);\r\n    usdRaised  = safeAdd(usdRaised, weiToUsdCents(_weiAmount));\r\n    tokensSold = safeAdd(tokensSold, tokenAmount);    \r\n\r\n    // Send ETH to multisigWallet\r\n    multisigWallet.transfer(msg.value);\r\n\r\n    // Send tokens to _receiver\r\n    ERC223.transfer(_receiver, tokenAmount);\r\n\r\n    // Tell us invest was success\r\n    emit Invested(_receiver, _weiAmount, tokenAmount, bonusAmount);\r\n  }  \r\n  \r\n  /**\r\n   * @dev Calculating tokens count\r\n   * @param _weiAmount invested\r\n   * @param _stage stage of crowdsale\r\n   * @return tokens amount\r\n   */\r\n  function calculateTokens(uint _weiAmount, uint _stage) internal view returns (uint tokens, uint bonus) {\r\n    uint usdAmount = weiToUsdCents(_weiAmount);    \r\n    tokens = safeDiv(safeMul(multiplier, usdAmount), price);\r\n\r\n    // Check minimal amount to buy\r\n    require(tokens >= Stages[_stage].min);    \r\n\r\n    bonus = safePerc(tokens, Stages[_stage].bonus);\r\n    return (tokens, bonus);\r\n  }\r\n  \r\n  /**\r\n   * @dev Converts wei value into USD cents according to current exchange rate\r\n   * @param weiValue wei value to convert\r\n   * @return USD cents equivalent of the wei value\r\n   */\r\n  function weiToUsdCents(uint weiValue) internal view returns (uint) {\r\n    return safeDiv(safeMul(weiValue, RateContract.getRate(\"ETH\")), 1 ether);\r\n  }\r\n  \r\n  /**\r\n   * @dev Check if SoftCap was reached.\r\n   * @return true if the crowdsale has raised enough money to be a success\r\n   */\r\n  function isCrowdsaleFull() public constant returns (bool) {\r\n    if(tokensSold >= SoftCap){\r\n      return true;  \r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @dev burn unsold tokens and allow transfer of tokens.\r\n   */\r\n  function finalize() public onlyOwner {    \r\n    require(!finalized);\r\n    require(now > endsIn);\r\n\r\n    if(HardCap > tokensSold){\r\n      // burn unsold tokens \r\n      ERC223.transfer(address(0), safeSub(HardCap, tokensSold));\r\n    }\r\n\r\n    // allow transfer of tokens\r\n    ERC223.releaseTokenTransfer();\r\n\r\n    finalized = true;\r\n  }\r\n\r\n  /**\r\n   * Receives ether on the contract\r\n   */\r\n  function receive() public payable {\r\n    emit ReceiveEtherOnContract(msg.sender, msg.value);\r\n  }\r\n\r\n  function setTokenContract(address _contract) external onlyOwner {\r\n    ERC223 = ERC223I(_contract);\r\n    totalSupply = ERC223.totalSupply();\r\n    HardCap = ERC223.balanceOf(address(this));\r\n  }\r\n\r\n  function setRateContract(address _contract) external onlyOwner {\r\n    RateContract = RateContractI(_contract);\r\n  }\r\n\r\n  function setDurations(uint _duration1, uint _duration2, uint _duration3, uint _duration4, uint _duration5) public onlyOwner {\r\n    duration[0] = _duration1;\r\n    duration[1] = _duration2;\r\n    duration[2] = _duration3;\r\n    duration[3] = _duration4;\r\n    duration[4] = _duration5;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"investByAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"duration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC223\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Stages\",\"outputs\":[{\"name\":\"startsAt\",\"type\":\"uint256\"},{\"name\":\"endsIn\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"},{\"name\":\"min\",\"type\":\"uint256\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"HardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setRateContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Agents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receive\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_duration1\",\"type\":\"uint256\"},{\"name\":\"_duration2\",\"type\":\"uint256\"},{\"name\":\"_duration3\",\"type\":\"uint256\"},{\"name\":\"_duration4\",\"type\":\"uint256\"},{\"name\":\"_duration5\",\"type\":\"uint256\"}],\"name\":\"setDurations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endsIn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsaleFull\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_multisigWallet\",\"type\":\"address\"},{\"name\":\"_priceTokenInUSDCents\",\"type\":\"uint256\"},{\"name\":\"_startsAt1\",\"type\":\"uint256\"},{\"name\":\"_startsAt2\",\"type\":\"uint256\"},{\"name\":\"_startsAt3\",\"type\":\"uint256\"},{\"name\":\"_startsAt4\",\"type\":\"uint256\"},{\"name\":\"_startsAt5\",\"type\":\"uint256\"}],\"name\":\"initialization\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SoftCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RateContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_agent\",\"type\":\"address\"},{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_multisigWallet\",\"type\":\"address\"},{\"name\":\"_priceTokenInUSDCents\",\"type\":\"uint256\"},{\"name\":\"_startsAt1\",\"type\":\"uint256\"},{\"name\":\"_startsAt2\",\"type\":\"uint256\"},{\"name\":\"_startsAt3\",\"type\":\"uint256\"},{\"name\":\"_startsAt4\",\"type\":\"uint256\"},{\"name\":\"_startsAt5\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonusAmount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceiveEtherOnContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_agent\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"UpdatedAgent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CrowdSale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cf397f46880cad41c6dc5620cb23e003f91c78f50000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000005bca7000000000000000000000000000000000000000000000000000000000005bf9e600000000000000000000000000000000000000000000000000000000005c0c5b00000000000000000000000000000000000000000000000000000000005c1ed000000000000000000000000000000000000000000000000000000000005c845380","Library":"","SwarmSource":"bzzr://0b3ed2f0d5a924031a16e234c3a92ceb18cb25d55d2cf37cf79b475814ef3c89"}]}