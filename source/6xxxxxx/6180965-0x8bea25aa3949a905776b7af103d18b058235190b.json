{"status":"1","message":"OK","result":[{"SourceCode":"/* ==================================================================== */\r\n/* Copyright (c) 2018 The TokenTycoon Project.  All rights reserved.\r\n/* \r\n/* https://tokentycoon.io\r\n/*  \r\n/* authors rickhunter.shen@gmail.com   \r\n/*         ssesunding@gmail.com            \r\n/* ==================================================================== */\r\npragma solidity ^0.4.23;\r\n\r\n/// @title ERC-165 Standard Interface Detection\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\ninterface ERC165 {\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\ncontract ERC721 is ERC165 {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function approve(address _approved, uint256 _tokenId) public;\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\ninterface ERC721TokenReceiver {\r\n\tfunction onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\ninterface ERC721Metadata /* is ERC721 */ {\r\n    function name() external pure returns (string _name);\r\n    function symbol() external pure returns (string _symbol);\r\n    function tokenURI(uint256 _tokenId) external view returns (string);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\ninterface ERC721Enumerable /* is ERC721 */ {\r\n    function totalSupply() external view returns (uint256);\r\n    function tokenByIndex(uint256 _index) external view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\r\n}\r\n\r\ninterface ERC721MetadataProvider {\r\n    function tokenURI(uint256 _tokenId) external view returns (string);\r\n}\r\n\r\ncontract AccessAdmin {\r\n    bool public isPaused = false;\r\n    address public addrAdmin;  \r\n\r\n    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\r\n\r\n    constructor() public {\r\n        addrAdmin = msg.sender;\r\n    }  \r\n\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == addrAdmin);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!isPaused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(isPaused);\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _newAdmin) external onlyAdmin {\r\n        require(_newAdmin != address(0));\r\n        emit AdminTransferred(addrAdmin, _newAdmin);\r\n        addrAdmin = _newAdmin;\r\n    }\r\n\r\n    function doPause() external onlyAdmin whenNotPaused {\r\n        isPaused = true;\r\n    }\r\n\r\n    function doUnpause() external onlyAdmin whenPaused {\r\n        isPaused = false;\r\n    }\r\n}\r\n\r\ninterface TokenRecipient { \r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n\r\ncontract ManagerToken is ERC721, ERC721Metadata, ERC721Enumerable, AccessAdmin {\r\n    /// @dev All manangers array(tokenId => gene)\r\n    uint256[] public managerArray;\r\n    /// @dev Mananger tokenId vs owner address\r\n    mapping (uint256 => address) tokenIdToOwner;\r\n    /// @dev Manangers owner by the owner (array)\r\n    mapping (address => uint256[]) ownerToManagerArray;\r\n    /// @dev Mananger token ID search in owner array\r\n    mapping (uint256 => uint256) tokenIdToOwnerIndex;\r\n    /// @dev The authorized address for each TTM\r\n    mapping (uint256 => address) tokenIdToApprovals;\r\n    /// @dev The authorized operators for each address\r\n    mapping (address => mapping (address => bool)) operatorToApprovals;\r\n    /// @dev Trust contract\r\n    mapping (address => bool) safeContracts;\r\n    /// @dev Metadata provider\r\n    ERC721MetadataProvider public providerContract;\r\n\r\n    /// @dev This emits when the approved address for an TTM is changed or reaffirmed.\r\n    event Approval\r\n    (\r\n        address indexed _owner, \r\n        address indexed _approved,\r\n        uint256 _tokenId\r\n    );\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    event ApprovalForAll\r\n    (\r\n        address indexed _owner,\r\n        address indexed _operator,\r\n        bool _approved\r\n    );\r\n\r\n    /// @dev This emits when the equipment ownership changed \r\n    event Transfer\r\n    (\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokenId\r\n    );\r\n    \r\n    constructor() public {\r\n        addrAdmin = msg.sender;\r\n        managerArray.length += 1;\r\n    }\r\n\r\n    // modifier\r\n    /// @dev Check if token ID is valid\r\n    modifier isValidToken(uint256 _tokenId) {\r\n        require(_tokenId >= 1 && _tokenId <= managerArray.length, \"TokenId out of range\");\r\n        require(tokenIdToOwner[_tokenId] != address(0), \"Token have no owner\"); \r\n        _;\r\n    }\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        address owner = tokenIdToOwner[_tokenId];\r\n        require(msg.sender == owner || msg.sender == tokenIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender], \"Can not transfer\");\r\n        _;\r\n    }\r\n\r\n    // ERC721\r\n    function supportsInterface(bytes4 _interfaceId) external view returns(bool) {\r\n        // ERC165 || ERC721 || ERC165^ERC721\r\n        return (_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff);\r\n    }\r\n\r\n    function name() public pure returns(string) {\r\n        return \"Token Tycoon Managers\";\r\n    }\r\n\r\n    function symbol() public pure returns(string) {\r\n        return \"TTM\";\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) external view returns (string) {\r\n        if (address(providerContract) == address(0)) {\r\n            return \"\";\r\n        }\r\n        return providerContract.tokenURI(_tokenId);\r\n    }\r\n\r\n    /// @dev Search for token quantity address\r\n    /// @param _owner Address that needs to be searched\r\n    /// @return Returns token quantity\r\n    function balanceOf(address _owner) external view returns(uint256) {\r\n        require(_owner != address(0), \"Owner is 0\");\r\n        return ownerToManagerArray[_owner].length;\r\n    }\r\n\r\n    /// @dev Find the owner of an TTM\r\n    /// @param _tokenId The tokenId of TTM\r\n    /// @return Give The address of the owner of this TTM\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner) {\r\n        return tokenIdToOwner[_tokenId];\r\n    }\r\n\r\n    /// @dev Transfers the ownership of an TTM from one address to another address\r\n    /// @param _from The current owner of the TTM\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The TTM to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \r\n        external\r\n        whenNotPaused\r\n    {\r\n        _safeTransferFrom(_from, _to, _tokenId, data);\r\n    }\r\n\r\n    /// @dev Transfers the ownership of an TTM from one address to another address\r\n    /// @param _from The current owner of the TTM\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The TTM to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \r\n        external\r\n        whenNotPaused\r\n    {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    /// @dev Transfer ownership of an TTM, '_to' must be a vaild address, or the TTM will lost\r\n    /// @param _from The current owner of the TTM\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The TTM to transfer\r\n    function transferFrom(address _from, address _to, uint256 _tokenId)\r\n        external\r\n        whenNotPaused\r\n        isValidToken(_tokenId)\r\n        canTransfer(_tokenId)\r\n    {\r\n        address owner = tokenIdToOwner[_tokenId];\r\n        require(owner != address(0), \"Owner is 0\");\r\n        require(_to != address(0), \"Transfer target address is 0\");\r\n        require(owner == _from, \"Transfer to self\");\r\n        \r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Set or reaffirm the approved address for an TTM\r\n    /// @param _approved The new approved TTM controller\r\n    /// @param _tokenId The TTM to approve\r\n    function approve(address _approved, uint256 _tokenId) public whenNotPaused {\r\n        address owner = tokenIdToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\r\n\r\n        tokenIdToApprovals[_tokenId] = _approved;\r\n        emit Approval(owner, _approved, _tokenId);\r\n    }\r\n\r\n    /// @dev Enable or disable approval for a third party (\"operator\") to manage all your asset.\r\n    /// @param _operator Address to add to the set of authorized operators.\r\n    /// @param _approved True if the operators is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) \r\n        external \r\n        whenNotPaused\r\n    {\r\n        operatorToApprovals[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    /// @dev Get the approved address for a single TTM\r\n    /// @param _tokenId The TTM to find the approved address for\r\n    /// @return The approved address for this TTM, or the zero address if there is none\r\n    function getApproved(uint256 _tokenId) \r\n        external \r\n        view \r\n        isValidToken(_tokenId) \r\n        returns (address) \r\n    {\r\n        return tokenIdToApprovals[_tokenId];\r\n    }\r\n\r\n    /// @dev Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the TTMs\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\r\n        return operatorToApprovals[_owner][_operator];\r\n    }\r\n\r\n    /// @dev Count TTMs tracked by this contract\r\n    /// @return A count of valid TTMs tracked by this contract, where each one of\r\n    ///  them has an assigned and queryable owner not equal to the zero address\r\n    function totalSupply() external view returns (uint256) {\r\n        return managerArray.length - 1;\r\n    }\r\n\r\n    /// @dev Enumerate valid TTMs\r\n    /// @param _index A counter less than totalSupply\r\n    /// @return The token identifier for the `_index`th TTM,\r\n    function tokenByIndex(uint256 _index) \r\n        external\r\n        view \r\n        returns (uint256) \r\n    {\r\n        require(_index < managerArray.length);\r\n        return _index;\r\n    }\r\n\r\n    /// @notice Enumerate TTMs assigned to an owner\r\n    /// @param _owner Token owner address\r\n    /// @param _index A counter less than balanceOf(_owner)\r\n    /// @return The TTM tokenId\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) \r\n        external \r\n        view \r\n        returns (uint256) \r\n    {\r\n        require(_owner != address(0));\r\n        require(_index < ownerToManagerArray[_owner].length);\r\n        return ownerToManagerArray[_owner][_index];\r\n    }\r\n\r\n    /// @dev Do the real transfer with out any condition checking\r\n    /// @param _from The old owner of this TTM(If created: 0x0)\r\n    /// @param _to The new owner of this TTM \r\n    /// @param _tokenId The tokenId of the TTM\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        if (_from != address(0)) {\r\n            uint256 indexFrom = tokenIdToOwnerIndex[_tokenId];\r\n            uint256[] storage ttmArray = ownerToManagerArray[_from];\r\n            require(ttmArray[indexFrom] == _tokenId);\r\n\r\n            if (indexFrom != ttmArray.length - 1) {\r\n                uint256 lastTokenId = ttmArray[ttmArray.length - 1];\r\n                ttmArray[indexFrom] = lastTokenId; \r\n                tokenIdToOwnerIndex[lastTokenId] = indexFrom;\r\n            }\r\n            ttmArray.length -= 1; \r\n            \r\n            if (tokenIdToApprovals[_tokenId] != address(0)) {\r\n                delete tokenIdToApprovals[_tokenId];\r\n            }      \r\n        }\r\n\r\n        tokenIdToOwner[_tokenId] = _to;\r\n        ownerToManagerArray[_to].push(_tokenId);\r\n        tokenIdToOwnerIndex[_tokenId] = ownerToManagerArray[_to].length - 1;\r\n        \r\n        emit Transfer(_from != address(0) ? _from : this, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Actually perform the safeTransferFrom\r\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \r\n        internal\r\n        isValidToken(_tokenId) \r\n        canTransfer(_tokenId)\r\n    {\r\n        address owner = tokenIdToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(_to != address(0));\r\n        require(owner == _from);\r\n        \r\n        _transfer(_from, _to, _tokenId);\r\n\r\n        // Do the callback after everything is done to avoid reentrancy attack\r\n        uint256 codeSize;\r\n        assembly { codeSize := extcodesize(_to) }\r\n        if (codeSize == 0) {\r\n            return;\r\n        }\r\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\r\n        // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")) = 0xf0b9e5ba;\r\n        require(retval == 0xf0b9e5ba);\r\n    }\r\n    \r\n    function setSafeContract(address _actionAddr, bool _useful) external onlyAdmin {\r\n        safeContracts[_actionAddr] = _useful;\r\n    }\r\n\r\n    function getSafeContract(address _actionAddr) external view onlyAdmin returns(bool) {\r\n        return safeContracts[_actionAddr];\r\n    }\r\n\r\n    function setMetadataProvider(address _provider) external onlyAdmin {\r\n        providerContract = ERC721MetadataProvider(_provider);\r\n    }\r\n\r\n    function getOwnTokens(address _owner) external view returns(uint256[]) {\r\n        require(_owner != address(0));\r\n        return ownerToManagerArray[_owner];\r\n    }\r\n\r\n    function safeGiveByContract(uint256 _tokenId, address _to) \r\n        external \r\n        whenNotPaused\r\n    {\r\n        require(safeContracts[msg.sender]);\r\n        // Only the token's owner is this can use this function\r\n        require(tokenIdToOwner[_tokenId] == address(this));\r\n        require(_to != address(0));\r\n\r\n        _transfer(address(this), _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Safe transfer by trust contracts\r\n    function safeTransferByContract(uint256 _tokenId, address _to) \r\n        external\r\n        whenNotPaused\r\n    {\r\n        require(safeContracts[msg.sender]);\r\n\r\n        require(_tokenId >= 1 && _tokenId <= managerArray.length);\r\n        address owner = tokenIdToOwner[_tokenId];\r\n        require(owner != address(0));\r\n        require(_to != address(0));\r\n        require(owner != _to);\r\n\r\n        _transfer(owner, _to, _tokenId);\r\n    }\r\n\r\n    function initManager(uint256 _gene, uint256 _count) external {\r\n        require(safeContracts[msg.sender] || msg.sender == addrAdmin);\r\n        require(_gene > 0 && _count <= 128);\r\n        \r\n        address owner = address(this);\r\n        uint256[] storage ttmArray = ownerToManagerArray[owner];\r\n        uint256 newTokenId;\r\n        for (uint256 i = 0; i < _count; ++i) {\r\n            newTokenId = managerArray.length;\r\n            managerArray.push(_gene);\r\n            tokenIdToOwner[newTokenId] = owner;\r\n            tokenIdToOwnerIndex[newTokenId] = ttmArray.length;\r\n            ttmArray.push(newTokenId);\r\n            emit Transfer(address(0), owner, newTokenId);\r\n        }\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _tokenId, bytes _extraData)\r\n        external\r\n        whenNotPaused\r\n        returns (bool success) \r\n    {\r\n        TokenRecipient spender = TokenRecipient(_spender);\r\n        approve(_spender, _tokenId);\r\n        spender.receiveApproval(msg.sender, _tokenId, this, _extraData);\r\n        return true;\r\n    }\r\n\r\n    function getProtoIdByTokenId(uint256 _tokenId)\r\n        external \r\n        view \r\n        returns(uint256 protoId) \r\n    {\r\n        if (_tokenId > 0 && _tokenId < managerArray.length) {\r\n            return managerArray[_tokenId];\r\n        }\r\n    }\r\n\r\n    function getOwnerTokens(address _owner)\r\n        external\r\n        view \r\n        returns(uint256[] tokenIdArray, uint256[] protoIdArray) \r\n    {\r\n        uint256[] storage ownTokens = ownerToManagerArray[_owner];\r\n        uint256 count = ownTokens.length;\r\n        tokenIdArray = new uint256[](count);\r\n        protoIdArray = new uint256[](count);\r\n        for (uint256 i = 0; i < count; ++i) {\r\n            tokenIdArray[i] = ownTokens[i];\r\n            protoIdArray[i] = managerArray[tokenIdArray[i]];\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"safeTransferByContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_actionAddr\",\"type\":\"address\"}],\"name\":\"getSafeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"setMetadataProvider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managerArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"providerContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gene\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"initManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"safeGiveByContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"addrAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getProtoIdByTokenId\",\"outputs\":[{\"name\":\"protoId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_actionAddr\",\"type\":\"address\"},{\"name\":\"_useful\",\"type\":\"bool\"}],\"name\":\"setSafeContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getOwnerTokens\",\"outputs\":[{\"name\":\"tokenIdArray\",\"type\":\"uint256[]\"},{\"name\":\"protoIdArray\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"preAdmin\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"}]","ContractName":"ManagerToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fe8bc05b7b38cecfc05f1bc983f3f43a47c9b0a519e56c980626ec63bc23a00a"}]}