{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC721Receiver {\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes   _userData\r\n  ) external returns (bytes4);\r\n}\r\n\r\ncontract IERC721Metadata {\r\n    function name() external view returns (string);\r\n    function symbol() external view returns (string);\r\n    function description() external view returns (string);\r\n    function tokenMetadata(uint256 assetId) external view returns (string);\r\n}\r\n\r\ncontract IERC721Enumerable {\r\n    function tokensOf(address owner) external view returns (uint256[]);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n}\r\n\r\ninterface IERC721Base {\r\n    function totalSupply() external view returns (uint256);\r\n    // function exists(uint256 assetId) external view returns (bool);\r\n    function ownerOf(uint256 assetId) external view returns (address);\r\n    function balanceOf(address holder) external view returns (uint256);\r\n    function safeTransferFrom(address from, address to, uint256 assetId) external;\r\n    function safeTransferFrom(address from, address to, uint256 assetId, bytes userData) external;\r\n    function transferFrom(address from, address to, uint256 assetId) external;\r\n    function approve(address operator, uint256 assetId) external;\r\n    function setApprovalForAll(address operator, bool authorized) external;\r\n    function getApprovedAddress(uint256 assetId) external view returns (address);\r\n    function isApprovedForAll(address assetHolder, address operator) external view returns (bool);\r\n    function isAuthorized(address operator, uint256 assetId) external view returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed assetId, address operator, bytes userData);\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed assetId);\r\n    event ApprovalForAll(address indexed operator, address indexed holder, bool authorized);\r\n    event Approval(address indexed owner, address indexed operator, uint256 indexed assetId);\r\n}\r\n\r\ninterface ERC165 {\r\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract AssetRegistryStorage {\r\n    string internal _name;\r\n    string internal _symbol;\r\n    string internal _description;\r\n\r\n    uint256 internal _count;\r\n    mapping(address => uint256[]) internal _assetsOf;\r\n    mapping(uint256 => address) internal _holderOf;\r\n    mapping(uint256 => uint256) internal _indexOfAsset;\r\n    mapping(uint256 => string) internal _assetData;\r\n    mapping(address => mapping(address => bool)) internal _operators;\r\n    mapping(uint256 => address) internal _approval;\r\n}\r\n\r\ncontract ERC721Enumerable is AssetRegistryStorage, IERC721Enumerable {\r\n    function tokensOf(address owner) external view returns (uint256[]) {\r\n        return _assetsOf[owner];\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index)external view returns (uint256 assetId) {\r\n        require(index < _assetsOf[owner].length);\r\n        require(index < (1<<127));\r\n        return _assetsOf[owner][index];\r\n    }\r\n}\r\n\r\ncontract ERC721Holder is IERC721Receiver {\r\n    bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    function onERC721Received(address /* _operator */, address /* _from */, uint256 /* _tokenId */, bytes /* _data */) external returns (bytes4) {\r\n        return ERC721_RECEIVED;\r\n    }\r\n}\r\n\r\ncontract ERC721Metadata is AssetRegistryStorage, IERC721Metadata {\r\n    function name() external view returns (string) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string) {\r\n        return _symbol;\r\n    }\r\n\r\n    function description() external view returns (string) {\r\n        return _description;\r\n    }\r\n\r\n    function tokenMetadata(uint256 assetId) external view returns (string) {\r\n        return _assetData[assetId];\r\n    }\r\n\r\n    function _update(uint256 assetId, string data) internal {\r\n        _assetData[assetId] = data;\r\n    }\r\n}\r\n\r\ncontract ERC721Base is AssetRegistryStorage, IERC721Base, ERC165 {\r\n    using SafeMath for uint256;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    bytes4 private constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n    /*\r\n    * 0x01ffc9a7 ===\r\n    *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n    */\r\n\r\n    bytes4 private constant Old_InterfaceId_ERC721 = 0x7c0633c6;\r\n    bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n    /*\r\n    * 0x80ac58cd ===\r\n    *   bytes4(keccak256('balanceOf(address)')) ^\r\n    *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n    *   bytes4(keccak256('approve(address,uint256)')) ^\r\n    *   bytes4(keccak256('getApproved(uint256)')) ^\r\n    *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n    *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n    *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n    *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n    */\r\n\r\n    //\r\n    // Global Getters\r\n    //\r\n\r\n    /**\r\n    * @dev Gets the total amount of assets stored by the contract\r\n    * @return uint256 representing the total amount of assets\r\n    */\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply();\r\n    }\r\n\r\n    function _totalSupply() internal view returns (uint256) {\r\n        return _count;\r\n    }\r\n\r\n    function ownerOf(uint256 assetId) external view returns (address) {\r\n        return _ownerOf(assetId);\r\n    }\r\n\r\n    function _ownerOf(uint256 assetId) internal view returns (address) {\r\n        return _holderOf[assetId];\r\n    }\r\n\r\n    function balanceOf(address owner) external view returns (uint256) {\r\n        return _balanceOf(owner);\r\n    }\r\n\r\n    function _balanceOf(address owner) internal view returns (uint256) {\r\n        return _assetsOf[owner].length;\r\n    }\r\n\r\n    function isApprovedForAll(address assetHolder, address operator) external view returns (bool) {\r\n        return _isApprovedForAll(assetHolder, operator);\r\n    }\r\n    \r\n    function _isApprovedForAll(address assetHolder, address operator) internal view returns (bool) {\r\n        return _operators[assetHolder][operator];\r\n    }\r\n\r\n    function getApproved(uint256 assetId) external view returns (address) {\r\n        return _getApprovedAddress(assetId);\r\n    }\r\n\r\n    function getApprovedAddress(uint256 assetId) external view returns (address) {\r\n        return _getApprovedAddress(assetId);\r\n    }\r\n\r\n    function _getApprovedAddress(uint256 assetId) internal view returns (address) {\r\n        return _approval[assetId];\r\n    }\r\n\r\n    function isAuthorized(address operator, uint256 assetId) external view returns (bool) {\r\n        return _isAuthorized(operator, assetId);\r\n    }\r\n\r\n    function _isAuthorized(address operator, uint256 assetId) internal view returns (bool) {\r\n        require(operator != 0);\r\n        address owner = _ownerOf(assetId);\r\n        if (operator == owner) {\r\n            return true;\r\n        }\r\n        return _isApprovedForAll(owner, operator) || _getApprovedAddress(assetId) == operator;\r\n    }\r\n\r\n    function setApprovalForAll(address operator, bool authorized) external {\r\n        return _setApprovalForAll(operator, authorized);\r\n    }\r\n\r\n    function _setApprovalForAll(address operator, bool authorized) internal {\r\n        if (authorized) {\r\n            require(!_isApprovedForAll(msg.sender, operator));\r\n            _addAuthorization(operator, msg.sender);\r\n        } else {\r\n            require(_isApprovedForAll(msg.sender, operator));\r\n            _clearAuthorization(operator, msg.sender);\r\n        }\r\n        emit ApprovalForAll(msg.sender, operator, authorized);\r\n    }\r\n\r\n    function approve(address operator, uint256 assetId) external {\r\n        address holder = _ownerOf(assetId);\r\n        require(msg.sender == holder || _isApprovedForAll(msg.sender, holder));\r\n        require(operator != holder);\r\n\r\n        if (_getApprovedAddress(assetId) != operator) {\r\n            _approval[assetId] = operator;\r\n            emit Approval(holder, operator, assetId);\r\n        }\r\n    }\r\n\r\n    function _addAuthorization(address operator, address holder) private {\r\n        _operators[holder][operator] = true;\r\n    }\r\n\r\n    function _clearAuthorization(address operator, address holder) private {\r\n        _operators[holder][operator] = false;\r\n    }\r\n\r\n    function _addAssetTo(address to, uint256 assetId) internal {\r\n        _holderOf[assetId] = to;\r\n\r\n        uint256 length = _balanceOf(to);\r\n\r\n        _assetsOf[to].push(assetId);\r\n\r\n        _indexOfAsset[assetId] = length;\r\n\r\n        _count = _count.add(1);\r\n    }\r\n\r\n    function _removeAssetFrom(address from, uint256 assetId) internal {\r\n        uint256 assetIndex = _indexOfAsset[assetId];\r\n        uint256 lastAssetIndex = _balanceOf(from).sub(1);\r\n        uint256 lastAssetId = _assetsOf[from][lastAssetIndex];\r\n\r\n        _holderOf[assetId] = 0;\r\n\r\n        // Insert the last asset into the position previously occupied by the asset to be removed\r\n        _assetsOf[from][assetIndex] = lastAssetId;\r\n\r\n        // Resize the array\r\n        _assetsOf[from][lastAssetIndex] = 0;\r\n        _assetsOf[from].length--;\r\n\r\n        // Remove the array if no more assets are owned to prevent pollution\r\n        if (_assetsOf[from].length == 0) {\r\n            delete _assetsOf[from];\r\n        }\r\n\r\n        // Update the index of positions for the asset\r\n        _indexOfAsset[assetId] = 0;\r\n        _indexOfAsset[lastAssetId] = assetIndex;\r\n\r\n        _count = _count.sub(1);\r\n    }\r\n\r\n    function _clearApproval(address holder, uint256 assetId) internal {\r\n        if (_ownerOf(assetId) == holder && _approval[assetId] != 0) {\r\n            _approval[assetId] = 0;\r\n            emit Approval(holder, 0, assetId);\r\n        }\r\n    }\r\n\r\n    function _generate(uint256 assetId, address beneficiary) internal {\r\n        require(_holderOf[assetId] == 0);\r\n\r\n        _addAssetTo(beneficiary, assetId);\r\n\r\n        emit Transfer(0, beneficiary, assetId);\r\n    }\r\n\r\n    function _destroy(uint256 assetId) internal {\r\n        address holder = _holderOf[assetId];\r\n        require(holder != 0);\r\n\r\n        _removeAssetFrom(holder, assetId);\r\n\r\n        emit Transfer(holder, 0, assetId);\r\n    }\r\n\r\n    modifier onlyHolder(uint256 assetId) {\r\n        require(_ownerOf(assetId) == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorized(uint256 assetId) {\r\n        require(_isAuthorized(msg.sender, assetId));\r\n        _;\r\n    }\r\n\r\n    modifier isCurrentOwner(address from, uint256 assetId) {\r\n        require(_ownerOf(assetId) == from);\r\n        _;\r\n    }\r\n\r\n    modifier isDestinataryDefined(address destinatary) {\r\n        require(destinatary != 0);\r\n        _;\r\n    }\r\n\r\n    modifier destinataryIsNotHolder(uint256 assetId, address to) {\r\n        require(_ownerOf(assetId) != to);\r\n        _;\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 assetId) external {\r\n        return _doTransferFrom(from, to, assetId, '', true);\r\n    }\r\n\r\n    function safeTransferFrom(address from, address to, uint256 assetId, bytes userData) external {\r\n        return _doTransferFrom(from, to, assetId, userData, true);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 assetId) external {\r\n        return _doTransferFrom(from, to, assetId, '', false);\r\n    }\r\n\r\n    function _doTransferFrom(address from, address to, uint256 assetId, bytes userData, bool doCheck) onlyAuthorized(assetId) internal {\r\n        _moveToken(from, to, assetId, userData, doCheck);\r\n    }\r\n\r\n    function _moveToken(address from, address to, uint256 assetId, bytes userData, bool doCheck) isDestinataryDefined(to) destinataryIsNotHolder(assetId, to) isCurrentOwner(from, assetId) internal{\r\n        address holder = _holderOf[assetId];\r\n        _removeAssetFrom(holder, assetId);\r\n        _clearApproval(holder, assetId);\r\n        _addAssetTo(to, assetId);\r\n\r\n        if (doCheck && _isContract(to)) {\r\n            // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))\r\n            require(IERC721Receiver(to).onERC721Received(msg.sender, holder, assetId, userData) == ERC721_RECEIVED);\r\n        }\r\n\r\n        emit Transfer(holder, to, assetId);\r\n    }\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n        if (_interfaceID == 0xffffffff) {\r\n            return false;\r\n        }\r\n        \r\n        return _interfaceID == InterfaceId_ERC165 || _interfaceID == Old_InterfaceId_ERC721 || _interfaceID == InterfaceId_ERC721;\r\n    }\r\n\r\n    function _isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n\r\n        return size > 0;\r\n    }\r\n}\r\n\r\ncontract FullAssetRegistry is ERC721Base, ERC721Enumerable, ERC721Metadata {\r\n    constructor() public {\r\n    }\r\n\r\n    function exists(uint256 assetId) external view returns (bool) {\r\n        return _exists(assetId);\r\n    }\r\n\r\n    function _exists(uint256 assetId) internal view returns (bool) {\r\n        return _holderOf[assetId] != 0;\r\n    }\r\n\r\n    function decimals() external pure returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\ncontract JZToken is FullAssetRegistry {\r\n    constructor() public {\r\n        _name = \"JZToken\";\r\n        _symbol = \"JZ\";\r\n        _description = \"JZ NFT Token\";\r\n    }\r\n\r\n    function isContractProxy(address addr) public view returns (bool) {\r\n        return _isContract(addr);\r\n    }\r\n\r\n    function generate(uint256 assetId, address beneficiary) public {\r\n        _generate(assetId, beneficiary);\r\n    }\r\n\r\n    function destroy(uint256 assetId) public {\r\n        _destroy(assetId);\r\n    }\r\n\r\n    // Problematic override on truffle\r\n    function safeTransfer(address from, address to, uint256 assetId, bytes data) public {\r\n        return _doTransferFrom(from, to, assetId, data, true);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"generate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"assetId\",\"type\":\"uint256\"},{\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContractProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetHolder\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"getApprovedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"JZToken","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2af9eadbcae2039027049471e337decca780facfd8515c6b4a28dce7930928a6"}]}