{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title HtczExchange\r\n * @dev Eth <-> HTCZ Exchange supporting contract\r\n */\r\ncontract HtczExchange is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // ** Events **\r\n\r\n    // Deposit received -> sent to exchange to HTCZ token\r\n    event Deposit(address indexed sender, uint eth_amount, uint htcz_amount);\r\n\r\n    // HTCZ token was sent in exchange for Ether\r\n    event Exchanged(address indexed receiver, uint indexed htcz_tx, uint htcz_amount, uint eth_amount);\r\n\r\n    // HTCZ Reserve amount changed\r\n    event ReserveChanged(uint indexed htcz_tx, uint old_htcz_amount, uint new_htcz_amount);\r\n\r\n    // Operator changed\r\n    event OperatorChanged(address indexed new_operator);\r\n\r\n\r\n    // ** Contract state **\r\n\r\n    // HTCZ token (address is in ETZ network)\r\n    address public htcz_token;\r\n\r\n    // Source of wallet for reserve (address is in ETZ network)\r\n    address public htcz_cold_wallet;\r\n\r\n    // HTCZ wallet used to exchange (address is in ETZ network)\r\n    address public htcz_exchange_wallet;\r\n\r\n    // Operator account of the exchange\r\n    address public operator;\r\n\r\n    // HTCZ amount used for exchange, should not exceed htcz_reserve\r\n    uint public htcz_exchanged_amount;\r\n\r\n    // HTCZ reserve for exchange\r\n    uint public htcz_reserve;\r\n\r\n    // ETH -> HTCZ exchange rate\r\n    uint public exchange_rate;\r\n\r\n    // gas spending on transfer function\r\n    uint constant GAS_FOR_TRANSFER = 49483;\r\n\r\n    // ** Modifiers **\r\n\r\n    // Throws if called by any account other than the operator.\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator);\r\n        _;\r\n    }\r\n\r\n    constructor(    address _htcz_token,\r\n                    address _htcz_cold_wallet,\r\n                    address _htcz_exchange_wallet,\r\n                    address _operator,\r\n                    uint _exchange_rate ) public {\r\n\r\n\t    require(_htcz_token != address(0));\r\n\t    require(_htcz_cold_wallet != address(0));\r\n\t    require(_htcz_exchange_wallet != address(0));\r\n\t    require(_operator != address(0));\r\n\t    require(_exchange_rate>0);\r\n\r\n\t    htcz_token = _htcz_token;\r\n\t    htcz_cold_wallet = _htcz_cold_wallet;\r\n\t    htcz_exchange_wallet = _htcz_exchange_wallet;\r\n\t    exchange_rate = _exchange_rate;\r\n\t    operator = _operator;\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Accepts Ether.\r\n    * Throws is token balance is not available to issue HTCZ tokens\r\n    */\r\n    function() external payable {\r\n\r\n        require( msg.value > 0 );\r\n\r\n        uint eth_amount = msg.value;\r\n        uint htcz_amount = eth_amount.mul(exchange_rate);\r\n\r\n        htcz_exchanged_amount = htcz_exchanged_amount.add(htcz_amount);\r\n\r\n        require( htcz_reserve >= htcz_exchanged_amount );\r\n\r\n        emit Deposit(msg.sender, eth_amount, htcz_amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers ether by operator command in exchange to HTCZ tokens\r\n    * Calculates gas amount, gasprice and substracts that from the transfered amount.\r\n    * Note, that smart contracts are not allowed as the receiver.\r\n    */\r\n    function change(address _receiver, uint _htcz_tx, uint _htcz_amount) external onlyOperator {\r\n\r\n        require(_receiver != address(0));\r\n\r\n        uint gas_value = GAS_FOR_TRANSFER.mul(tx.gasprice);\r\n        uint eth_amount = _htcz_amount / exchange_rate;\r\n\r\n        require(eth_amount > gas_value);\r\n\r\n        eth_amount = eth_amount.sub(gas_value);\r\n\r\n        require(htcz_exchanged_amount >= _htcz_amount );\r\n\r\n        htcz_exchanged_amount = htcz_exchanged_amount.sub(_htcz_amount);\r\n\r\n        msg.sender.transfer(gas_value);\r\n        _receiver.transfer(eth_amount);\r\n\r\n        emit Exchanged(_receiver, _htcz_tx, _htcz_amount, eth_amount);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Increase HTCZ reserve\r\n    */\r\n    function increaseReserve(uint _htcz_tx, uint _amount) external onlyOperator {\r\n\r\n        uint old_htcz_reserve = htcz_reserve;\r\n        uint new_htcz_reserve = old_htcz_reserve.add(_amount);\r\n\r\n        require( new_htcz_reserve > old_htcz_reserve);\r\n\r\n        htcz_reserve = new_htcz_reserve;\r\n\r\n        emit ReserveChanged(_htcz_tx, old_htcz_reserve, new_htcz_reserve);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease HTCZ reserve\r\n    */\r\n    function decreaseReserve(uint _htcz_tx, uint _amount) external onlyOperator {\r\n\r\n        uint old_htcz_reserve = htcz_reserve;\r\n        uint new_htcz_reserve = old_htcz_reserve.sub(_amount);\r\n\r\n        require( new_htcz_reserve < old_htcz_reserve);\r\n        require( new_htcz_reserve >= htcz_exchanged_amount );\r\n\r\n        htcz_reserve = new_htcz_reserve;\r\n\r\n        emit ReserveChanged(_htcz_tx, old_htcz_reserve, new_htcz_reserve);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Set other operator ( 0 allowed )\r\n    */\r\n    function changeOperator(address _operator) external onlyOwner {\r\n        require(_operator != operator);\r\n        operator = _operator;\r\n        emit OperatorChanged(_operator);\r\n    }\r\n\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"changeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchange_rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"htcz_exchanged_amount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_htcz_tx\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"htcz_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_htcz_tx\",\"type\":\"uint256\"},{\"name\":\"_htcz_amount\",\"type\":\"uint256\"}],\"name\":\"change\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"htcz_reserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_htcz_tx\",\"type\":\"uint256\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"decreaseReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"htcz_cold_wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"htcz_exchange_wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_htcz_token\",\"type\":\"address\"},{\"name\":\"_htcz_cold_wallet\",\"type\":\"address\"},{\"name\":\"_htcz_exchange_wallet\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_exchange_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"htcz_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"htcz_tx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"htcz_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth_amount\",\"type\":\"uint256\"}],\"name\":\"Exchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"htcz_tx\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"old_htcz_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"new_htcz_amount\",\"type\":\"uint256\"}],\"name\":\"ReserveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"new_operator\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HtczExchange","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006e9b51614f8c8d78fd8bf6ee243934caeaba137900000000000000000000000094575f43690b5d2a1bcb92337e820a63ec539de700000000000000000000000098f9ad3dd66bc6010531f7f2a557285cdae78889000000000000000000000000c5f7fa67040359c297fc652bc304eb290f729c560000000000000000000000000000000000000000000000000000000000002713","Library":"","SwarmSource":"bzzr://8f9d6d0dba8941a83a8cf1cea12958a143900308b7c3b0cb7bc7f3689646d06d"}]}