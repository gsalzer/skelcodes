{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Constant {\r\n    function balanceOf( address who ) view public returns (uint value);\r\n}\r\ncontract ERC20Stateful {\r\n    function transfer( address to, uint value) public returns (bool ok);\r\n}\r\ncontract ERC20Events {\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\ncontract ERC20 is ERC20Constant, ERC20Stateful, ERC20Events {}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"owner only\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract WhitelistSale is Owned {\r\n\r\n    ERC20 public blocToken;\r\n\r\n    uint256 public blocPerEth;\r\n    \r\n    bool running;\r\n\r\n    mapping(address => bool) public whitelisted;\r\n\r\n    mapping(address => uint256) public bought;\r\n    \r\n    mapping(address => uint256) public userLimitAmount;\r\n    \r\n    mapping(address => bool) public whitelistUserGettedBloc;\r\n        \r\n    mapping(address => bool) public whitelistUserGettedEthBack;\r\n    \r\n    uint256 rebackRate; // 0-10000\r\n    uint256 constant MaxRate = 10000; \r\n    address public receiver;\r\n    address[] private whitelistUsers;\r\n    uint256 constant public maxGasPrice = 50000000000;\r\n\r\n    event LogWithdrawal(uint256 _value);\r\n    event LogBought(uint orderInMana);\r\n    // event LogUserAdded(address user);\r\n    event LogUserRemoved(address user);\r\n\r\n    constructor(\r\n        address _receiver\r\n    ) public Owned()\r\n    {\r\n        blocToken;\r\n        receiver         = _receiver;\r\n        blocPerEth       = 0;\r\n        whitelistUsers   = new address[](0);\r\n        rebackRate       = 0;\r\n        running          = true;\r\n    }\r\n    \r\n    function getRebackRate() public view returns (uint256 rate) {\r\n        return rebackRate;\r\n    }\r\n    \r\n    function changePerEthToBlocNumber(uint256 _value)  public onlyOwner {\r\n        require(_value > 0,\"ratio must > 0\");\r\n        blocPerEth = _value;\r\n    }\r\n    \r\n    function changeRebackRate(uint256 _rate)  public onlyOwner {\r\n        require(_rate > 0,\"refundrate must > 0\");\r\n        require(_rate < MaxRate,\"refundrate must < 10000\");\r\n        rebackRate = _rate;\r\n    }\r\n    \r\n    function changeBlocTokenAdress(ERC20 _tokenContractAddress)  public onlyOwner {\r\n        blocToken = _tokenContractAddress;\r\n    }\r\n    \r\n    function withdrawEth(uint256 _value)  public onlyOwner {\r\n        require(receiver != address(0),\"receiver not set\");\r\n        receiver.transfer(_value);\r\n    }\r\n\r\n    function withdrawBloc(uint256 _value)  public onlyOwner  returns (bool ok) {\r\n        require(blocToken != address(0),\"token contract not set\");\r\n        return withdrawToken(blocToken, _value);\r\n    }\r\n\r\n    function withdrawToken(address _token, uint256 _value) private onlyOwner  returns (bool ok) {\r\n        bool result = ERC20(_token).transfer(owner,_value);\r\n        if (result) emit LogWithdrawal(_value);\r\n        return result;\r\n    }\r\n\r\n    function changeReceiver(address _receiver) public onlyOwner {\r\n        require(_receiver != address(0),\"empty receiver\");\r\n        receiver = _receiver;\r\n    }\r\n    \r\n    function changeBlocPerEth(uint256 _value) public onlyOwner {\r\n        require(_value != 0,\"ratio should > 0\");\r\n        blocPerEth = _value;\r\n    }\r\n    \r\n    function changeRuningState(bool _value) public onlyOwner {\r\n        running = _value;\r\n    }\r\n    \r\n    modifier onlyIsRuning {\r\n        require(running,\"KYC over\");\r\n        _;\r\n    }\r\n\r\n    function buy() private onlyIsRuning {\r\n        require(whitelisted[msg.sender],\"not whitelisted\");\r\n        require(whitelistUserGettedBloc[msg.sender] == false,\"token already sent\");\r\n        require(msg.value >= 0.2 ether,\"must greater or equal to 0.2 eth\");\r\n\r\n        uint256 allowedForSender = SafeMath.sub(userLimitAmount[msg.sender], bought[msg.sender]);\r\n        if (msg.value > allowedForSender) revert(\"over limit amount\");\r\n        // receiver.transfer(msg.value);\r\n        bought[msg.sender] = SafeMath.add(bought[msg.sender], msg.value);\r\n    }\r\n    \r\n    function transferBlocToUser(address userAddress) public onlyOwner {\r\n        require(rebackRate < MaxRate,\"refundrate overflow\");\r\n        require(blocPerEth > 0,\"token ratio not set\");\r\n        require(whitelistUserGettedBloc[userAddress] == false,\"token already sent\");\r\n        require(bought[userAddress] > 0,\"not bought\");\r\n             \r\n        uint256 bountPerEth = SafeMath.mul( blocPerEth , (MaxRate - rebackRate));\r\n        uint orderInBloc = SafeMath.mul(SafeMath.div(bought[userAddress],MaxRate),bountPerEth) ;\r\n            \r\n        uint256 balanceInBloc = blocToken.balanceOf(address(this));\r\n        if (orderInBloc > balanceInBloc) revert(\"not enough token\");\r\n        if (blocToken.transfer(userAddress, orderInBloc)) whitelistUserGettedBloc[userAddress] = true;\r\n    }\r\n    \r\n    function transferEthBackToUser(address userAddress) public onlyOwner {\r\n        require(rebackRate > 0,\"refundrate not set\");\r\n        require(whitelistUserGettedEthBack[userAddress] == false,\"token already sent\");\r\n        require(bought[userAddress] > 0,\"not bought\");\r\n             \r\n        uint backEthNumber = SafeMath.mul(SafeMath.div(bought[userAddress],MaxRate),rebackRate) ;\r\n        whitelistUserGettedEthBack[userAddress] = true;\r\n        userAddress.transfer(backEthNumber);\r\n    }\r\n    \r\n\r\n    function addUser(address user,uint amount) public onlyOwner onlyIsRuning {\r\n        if (whitelisted[user] == true) {\r\n            if (userLimitAmount[user] != amount) {\r\n                userLimitAmount[user] = amount;\r\n            }\r\n            return;\r\n        }\r\n        \r\n        whitelisted[user] = true;\r\n        whitelistUsers.push(user);\r\n        userLimitAmount[user] = amount;\r\n        whitelistUserGettedBloc[user] = false;\r\n        whitelistUserGettedEthBack[user] = false;\r\n        // emit LogUserAdded(user);\r\n    }\r\n\r\n    function removeUser(address user) public onlyOwner onlyIsRuning {\r\n        whitelisted[user] = false;\r\n        emit LogUserRemoved(user);\r\n    }\r\n\r\n    function addManyUsers(address[] users,uint[] amounts) public onlyOwner onlyIsRuning {\r\n        require(users.length < 10000,\"list too long\");\r\n        require(users.length == amounts.length, \"users' length != amounts' length\");\r\n        \r\n        for (uint index = 0; index < users.length; index++) {\r\n            addUser(users[index],amounts[index]);\r\n        }\r\n    }\r\n\r\n    function() public payable onlyIsRuning {\r\n        require(tx.gasprice <= maxGasPrice,\"gas price must not greater than 50GWei\");\r\n        buy();\r\n    }\r\n    \r\n    function getWhiteUsers() public view onlyOwner returns(address[] whitelistUsersResult) {\r\n        return whitelistUsers;\r\n    }\r\n\r\n\r\n    function getWhiteUsersFrom(uint index, uint size) public view onlyOwner returns(address[] whitelistUsersResult) {\r\n        address[] memory slice = new address[](size);\r\n        uint idx = 0;\r\n        for (uint i = index; idx < size && i < whitelistUsers.length; i++) {\r\n            slice[idx] = whitelistUsers[i];\r\n            idx++;\r\n        }\r\n        return slice;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"transferEthBackToUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRebackRate\",\"outputs\":[{\"name\":\"rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWhiteUsers\",\"outputs\":[{\"name\":\"whitelistUsersResult\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"changeRuningState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLimitAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"changeReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeBlocPerEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"name\":\"changeBlocTokenAdress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"bought\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistUserGettedBloc\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changePerEthToBlocNumber\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"},{\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getWhiteUsersFrom\",\"outputs\":[{\"name\":\"whitelistUsersResult\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawBloc\",\"outputs\":[{\"name\":\"ok\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"changeRebackRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistUserGettedEthBack\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"users\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"addManyUsers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"transferBlocToUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderInMana\",\"type\":\"uint256\"}],\"name\":\"LogBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LogUserRemoved\",\"type\":\"event\"}]","ContractName":"WhitelistSale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000038a6c8c11fd8ff05e24617466f0377dc6aea4278","Library":"","SwarmSource":"bzzr://739426869421f4e84ce437e987d655b810786870c3e6c0e2de76047ae600829e"}]}