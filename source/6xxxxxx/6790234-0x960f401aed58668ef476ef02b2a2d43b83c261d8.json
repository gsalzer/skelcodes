{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath256 {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function pow(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        if (b == 0) return 1;\r\n\r\n        uint256 c = a ** b;\r\n        assert(c / (a ** (b - 1)) == a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function _validateAddress(address _addr) internal pure {\r\n        require(_addr != address(0), \"invalid address\");\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not a contract owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _validateAddress(newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Controllable is Ownable {\r\n    mapping(address => bool) controllers;\r\n\r\n    modifier onlyController {\r\n        require(_isController(msg.sender), \"no controller rights\");\r\n        _;\r\n    }\r\n\r\n    function _isController(address _controller) internal view returns (bool) {\r\n        return controllers[_controller];\r\n    }\r\n\r\n    function _setControllers(address[] _controllers) internal {\r\n        for (uint256 i = 0; i < _controllers.length; i++) {\r\n            _validateAddress(_controllers[i]);\r\n            controllers[_controllers[i]] = true;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Upgradable is Controllable {\r\n    address[] internalDependencies;\r\n    address[] externalDependencies;\r\n\r\n    function getInternalDependencies() public view returns(address[]) {\r\n        return internalDependencies;\r\n    }\r\n\r\n    function getExternalDependencies() public view returns(address[]) {\r\n        return externalDependencies;\r\n    }\r\n\r\n    function setInternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        for (uint256 i = 0; i < _newDependencies.length; i++) {\r\n            _validateAddress(_newDependencies[i]);\r\n        }\r\n        internalDependencies = _newDependencies;\r\n    }\r\n\r\n    function setExternalDependencies(address[] _newDependencies) public onlyOwner {\r\n        externalDependencies = _newDependencies;\r\n        _setControllers(_newDependencies);\r\n    }\r\n}\r\n\r\ncontract ERC721Basic {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 _balance);\r\n    function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n    function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n    function approve(address _to, uint256 _tokenId) public;\r\n    function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) public;\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external pure returns (bool);\r\n}\r\n\r\ncontract ERC721Enumerable is ERC721Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n    function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\ncontract ERC721Metadata is ERC721Basic {\r\n    function name() public view returns (string _name);\r\n    function symbol() public view returns (string _symbol);\r\n    function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {}\r\n\r\ncontract ERC721Receiver {\r\n    function onERC721Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _tokenId,\r\n        bytes _data\r\n    )\r\n        public\r\n        returns(bytes4);\r\n}\r\n\r\ncontract ERC721BasicToken is ERC721Basic, Upgradable {\r\n\r\n    using SafeMath256 for uint256;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) internal tokenOwner;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) internal tokenApprovals;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping (address => uint256) internal ownedTokensCount;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n    function _checkRights(bool _has) internal pure {\r\n        require(_has, \"no rights to manage\");\r\n    }\r\n\r\n    function _validateAddress(address _addr) internal pure {\r\n        require(_addr != address(0), \"invalid address\");\r\n    }\r\n\r\n    function _checkOwner(uint256 _tokenId, address _owner) internal view {\r\n        require(ownerOf(_tokenId) == _owner, \"not an owner\");\r\n    }\r\n\r\n    function _checkThatUserHasTokens(bool _has) internal pure {\r\n        require(_has, \"user has no tokens\");\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        _validateAddress(_owner);\r\n        return ownedTokensCount[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        address owner = tokenOwner[_tokenId];\r\n        _validateAddress(owner);\r\n        return owner;\r\n    }\r\n\r\n    function exists(uint256 _tokenId) public view returns (bool) {\r\n        address owner = tokenOwner[_tokenId];\r\n        return owner != address(0);\r\n    }\r\n\r\n    function _approve(address _from, address _to, uint256 _tokenId) internal {\r\n        address owner = ownerOf(_tokenId);\r\n        require(_to != owner, \"can't be approved to owner\");\r\n        _checkRights(_from == owner || isApprovedForAll(owner, _from));\r\n\r\n        if (getApproved(_tokenId) != address(0) || _to != address(0)) {\r\n            tokenApprovals[_tokenId] = _to;\r\n            emit Approval(owner, _to, _tokenId);\r\n        }\r\n    }\r\n\r\n    function approve(address _to, uint256 _tokenId) public {\r\n        _approve(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    function remoteApprove(address _to, uint256 _tokenId) external onlyController {\r\n        _approve(tx.origin, _to, _tokenId);\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId) public view returns (address) {\r\n        require(exists(_tokenId), \"token doesn't exist\");\r\n        return tokenApprovals[_tokenId];\r\n    }\r\n\r\n    function setApprovalForAll(address _to, bool _approved) public {\r\n        require(_to != msg.sender, \"wrong sender\");\r\n        operatorApprovals[msg.sender][_to] = _approved;\r\n        emit ApprovalForAll(msg.sender, _to, _approved);\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n        return operatorApprovals[_owner][_operator];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\r\n        _checkRights(isApprovedOrOwner(msg.sender, _tokenId));\r\n        _validateAddress(_from);\r\n        _validateAddress(_to);\r\n\r\n        clearApproval(_from, _tokenId);\r\n        removeTokenFrom(_from, _tokenId);\r\n        addTokenTo(_to, _tokenId);\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) public {\r\n        safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes _data\r\n    ) public {\r\n        transferFrom(_from, _to, _tokenId);\r\n        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data), \"can't make safe transfer\");\r\n    }\r\n\r\n    function isApprovedOrOwner(address _spender, uint256 _tokenId) public view returns (bool) {\r\n        address owner = ownerOf(_tokenId);\r\n        return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\r\n    }\r\n\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        _validateAddress(_to);\r\n        addTokenTo(_to, _tokenId);\r\n        emit Transfer(address(0), _to, _tokenId);\r\n    }\r\n\r\n    function _burn(address _owner, uint256 _tokenId) internal {\r\n        clearApproval(_owner, _tokenId);\r\n        removeTokenFrom(_owner, _tokenId);\r\n        emit Transfer(_owner, address(0), _tokenId);\r\n    }\r\n\r\n    function clearApproval(address _owner, uint256 _tokenId) internal {\r\n        _checkOwner(_tokenId, _owner);\r\n        if (tokenApprovals[_tokenId] != address(0)) {\r\n            tokenApprovals[_tokenId] = address(0);\r\n            emit Approval(_owner, address(0), _tokenId);\r\n        }\r\n    }\r\n\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        require(tokenOwner[_tokenId] == address(0), \"token already has an owner\");\r\n        tokenOwner[_tokenId] = _to;\r\n        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n    }\r\n\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        _checkOwner(_tokenId, _from);\r\n        _checkThatUserHasTokens(ownedTokensCount[_from] > 0);\r\n        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n        tokenOwner[_tokenId] = address(0);\r\n    }\r\n\r\n    function _isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    function checkAndCallSafeTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes _data\r\n    ) internal returns (bool) {\r\n        if (!_isContract(_to)) {\r\n            return true;\r\n        }\r\n        bytes4 retval = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n}\r\n\r\ncontract ERC721Token is ERC721, ERC721BasicToken {\r\n\r\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\r\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC721 = 0x80ac58cd;\r\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC721TokenReceiver = 0xf0b9e5ba;\r\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC721Metadata = 0x5b5e139f;\r\n    bytes4 internal constant INTERFACE_SIGNATURE_ERC721Enumerable = 0x780e9d63;\r\n\r\n    string internal name_;\r\n    string internal symbol_;\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping (address => uint256[]) internal ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] internal allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) internal tokenURIs;\r\n\r\n    // The contract owner can change the base URL, in case it becomes necessary. It is needed for Metadata.\r\n    string public url;\r\n\r\n\r\n    constructor(string _name, string _symbol) public {\r\n        name_ = _name;\r\n        symbol_ = _symbol;\r\n    }\r\n\r\n    function name() public view returns (string) {\r\n        return name_;\r\n    }\r\n\r\n    function symbol() public view returns (string) {\r\n        return symbol_;\r\n    }\r\n\r\n    function _validateIndex(bool _isValid) internal pure {\r\n        require(_isValid, \"wrong index\");\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n        _validateIndex(_index < balanceOf(_owner));\r\n        return ownedTokens[_owner][_index];\r\n    }\r\n\r\n    function tokensOfOwner(address _owner) external view returns (uint256[]) {\r\n        return ownedTokens[_owner];\r\n    }\r\n\r\n    function getAllTokens() external view returns (uint256[]) {\r\n        return allTokens;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return allTokens.length;\r\n    }\r\n\r\n    function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n        _validateIndex(_index < totalSupply());\r\n        return allTokens[_index];\r\n    }\r\n\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        super.addTokenTo(_to, _tokenId);\r\n        uint256 length = ownedTokens[_to].length;\r\n        ownedTokens[_to].push(_tokenId);\r\n        ownedTokensIndex[_tokenId] = length;\r\n    }\r\n\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        _checkThatUserHasTokens(ownedTokens[_from].length > 0);\r\n\r\n        super.removeTokenFrom(_from, _tokenId);\r\n\r\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n        ownedTokens[_from][tokenIndex] = lastToken;\r\n        ownedTokens[_from][lastTokenIndex] = 0;\r\n\r\n        ownedTokens[_from].length--;\r\n        ownedTokensIndex[_tokenId] = 0;\r\n        ownedTokensIndex[lastToken] = tokenIndex;\r\n    }\r\n\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        super._mint(_to, _tokenId);\r\n\r\n        allTokensIndex[_tokenId] = allTokens.length;\r\n        allTokens.push(_tokenId);\r\n    }\r\n\r\n    function _burn(address _owner, uint256 _tokenId) internal {\r\n        require(allTokens.length > 0, \"no tokens\");\r\n\r\n        super._burn(_owner, _tokenId);\r\n\r\n        uint256 tokenIndex = allTokensIndex[_tokenId];\r\n        uint256 lastTokenIndex = allTokens.length.sub(1);\r\n        uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n        allTokens[tokenIndex] = lastToken;\r\n        allTokens[lastTokenIndex] = 0;\r\n\r\n        allTokens.length--;\r\n        allTokensIndex[_tokenId] = 0;\r\n        allTokensIndex[lastToken] = tokenIndex;\r\n    }\r\n\r\n    function supportsInterface(bytes4 _interfaceID) external pure returns (bool) {\r\n        return (\r\n            _interfaceID == INTERFACE_SIGNATURE_ERC165 ||\r\n            _interfaceID == INTERFACE_SIGNATURE_ERC721 ||\r\n            _interfaceID == INTERFACE_SIGNATURE_ERC721TokenReceiver ||\r\n            _interfaceID == INTERFACE_SIGNATURE_ERC721Metadata ||\r\n            _interfaceID == INTERFACE_SIGNATURE_ERC721Enumerable\r\n        );\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) public view returns (string) {\r\n        require(exists(_tokenId), \"token doesn't exist\");\r\n        return string(abi.encodePacked(url, _uint2str(_tokenId)));\r\n    }\r\n\r\n    function setUrl(string _url) external onlyOwner {\r\n        url = _url;\r\n    }\r\n\r\n    function _uint2str(uint _i) internal pure returns (string){\r\n        if (i == 0) return \"0\";\r\n        uint i = _i;\r\n        uint j = _i;\r\n        uint length;\r\n        while (j != 0){\r\n            length++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(length);\r\n        uint k = length - 1;\r\n        while (i != 0){\r\n            bstr[k--] = byte(48 + i % 10);\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\ncontract DragonModel {\r\n\r\n    // ** multiplying is necessary for more accurate calculations\r\n\r\n    // health and mana are multiplied by 100\r\n    struct HealthAndMana {\r\n        uint256 timestamp; // timestamp of last update\r\n        uint32 remainingHealth; // remaining at last update\r\n        uint32 remainingMana; // remaining at last update\r\n        uint32 maxHealth;\r\n        uint32 maxMana;\r\n    }\r\n\r\n    struct Level {\r\n        uint8 level; // current level of dragon\r\n        uint8 experience; // exp at current level\r\n        uint16 dnaPoints; // DNA points\r\n    }\r\n\r\n    struct Tactics {\r\n        uint8 melee; // ranged/melee tactics in percentages\r\n        uint8 attack; // defense/attack tactics in percentages\r\n    }\r\n\r\n    struct Battles {\r\n        uint16 wins;\r\n        uint16 defeats;\r\n    }\r\n\r\n    // multilpied by 100\r\n    struct Skills {\r\n        uint32 attack;\r\n        uint32 defense;\r\n        uint32 stamina;\r\n        uint32 speed;\r\n        uint32 intelligence;\r\n    }\r\n\r\n    // types:\r\n    // 0 - water\r\n    // 1 - fire\r\n    // 2 - air\r\n    // 3 - earth\r\n    // 4 - magic\r\n\r\n    struct Dragon {\r\n        uint16 generation;\r\n        uint256[4] genome; // composed genome\r\n        uint256[2] parents;\r\n        uint8[11] types; // array of weights of dragon's types\r\n        uint256 birth; // timestamp\r\n    }\r\n\r\n}\r\n\r\ncontract DragonStorage is DragonModel, ERC721Token {\r\n    Dragon[] public dragons;\r\n    // existing names\r\n    mapping (bytes32 => bool) public existingNames;\r\n    mapping (uint256 => bytes32) public names;\r\n\r\n    mapping (uint256 => HealthAndMana) public healthAndMana;\r\n    mapping (uint256 => Tactics) public tactics;\r\n    mapping (uint256 => Battles) public battles;\r\n    mapping (uint256 => Skills) public skills;\r\n    mapping (uint256 => Level) public levels;\r\n    mapping (uint256 => uint32) public coolness; // Dragon Skillfulness Index in the WP\r\n\r\n    // id -> type of skill (dragon type)\r\n    mapping (uint256 => uint8) public specialAttacks;\r\n    mapping (uint256 => uint8) public specialDefenses;\r\n\r\n\r\n    // classes:\r\n    // 0 - no skill\r\n    // 1 - attack boost\r\n    // 2 - defense boost\r\n    // 3 - stamina boost\r\n    // 4 - speed boost\r\n    // 5 - intelligence boost\r\n    // 6 - healing\r\n    // 7 - mana recharge\r\n\r\n    // id -> class\r\n    mapping (uint256 => uint8) public specialPeacefulSkills;\r\n\r\n\r\n    // classes:\r\n    // 1 - attack\r\n    // 2 - defense\r\n    // 3 - stamina\r\n    // 4 - speed\r\n    // 5 - intelligence\r\n    //\r\n    // id -> class -> effect\r\n    mapping (uint256 => mapping (uint8 => uint32)) public buffs;\r\n\r\n\r\n\r\n    constructor(string _name, string _symbol) public ERC721Token(_name, _symbol) {\r\n        dragons.length = 1; // to avoid some issues with 0\r\n    }\r\n\r\n    // GETTERS\r\n\r\n    function length() external view returns (uint256) {\r\n        return dragons.length;\r\n    }\r\n\r\n    function getGenome(uint256 _id) external view returns (uint256[4]) {\r\n        return dragons[_id].genome;\r\n    }\r\n\r\n    function getParents(uint256 _id) external view returns (uint256[2]) {\r\n        return dragons[_id].parents;\r\n    }\r\n\r\n    function getDragonTypes(uint256 _id) external view returns (uint8[11]) {\r\n        return dragons[_id].types;\r\n    }\r\n\r\n    // SETTERS\r\n\r\n    function push(\r\n        address _sender,\r\n        uint16 _generation,\r\n        uint256[4] _genome,\r\n        uint256[2] _parents,\r\n        uint8[11] _types\r\n    ) public onlyController returns (uint256 id) {\r\n        id = dragons.push(Dragon({\r\n            generation: _generation,\r\n            genome: _genome,\r\n            parents: _parents,\r\n            types: _types,\r\n            birth: now\r\n        })).sub(1);\r\n        _mint(_sender, id);\r\n    }\r\n\r\n    function setName(\r\n        uint256 _id,\r\n        bytes32 _name,\r\n        bytes32 _lowercase\r\n    ) external onlyController {\r\n        names[_id] = _name;\r\n        existingNames[_lowercase] = true;\r\n    }\r\n\r\n    function setTactics(uint256 _id, uint8 _melee, uint8 _attack) external onlyController {\r\n        tactics[_id].melee = _melee;\r\n        tactics[_id].attack = _attack;\r\n    }\r\n\r\n    function setWins(uint256 _id, uint16 _value) external onlyController {\r\n        battles[_id].wins = _value;\r\n    }\r\n\r\n    function setDefeats(uint256 _id, uint16 _value) external onlyController {\r\n        battles[_id].defeats = _value;\r\n    }\r\n\r\n    function setMaxHealthAndMana(\r\n        uint256 _id,\r\n        uint32 _maxHealth,\r\n        uint32 _maxMana\r\n    ) external onlyController {\r\n        healthAndMana[_id].maxHealth = _maxHealth;\r\n        healthAndMana[_id].maxMana = _maxMana;\r\n    }\r\n\r\n    function setRemainingHealthAndMana(\r\n        uint256 _id,\r\n        uint32 _remainingHealth,\r\n        uint32 _remainingMana\r\n    ) external onlyController {\r\n        healthAndMana[_id].timestamp = now;\r\n        healthAndMana[_id].remainingHealth = _remainingHealth;\r\n        healthAndMana[_id].remainingMana = _remainingMana;\r\n    }\r\n\r\n    function resetHealthAndManaTimestamp(uint256 _id) external onlyController {\r\n        healthAndMana[_id].timestamp = 0;\r\n    }\r\n\r\n    function setSkills(\r\n        uint256 _id,\r\n        uint32 _attack,\r\n        uint32 _defense,\r\n        uint32 _stamina,\r\n        uint32 _speed,\r\n        uint32 _intelligence\r\n    ) external onlyController {\r\n        skills[_id].attack = _attack;\r\n        skills[_id].defense = _defense;\r\n        skills[_id].stamina = _stamina;\r\n        skills[_id].speed = _speed;\r\n        skills[_id].intelligence = _intelligence;\r\n    }\r\n\r\n    function setLevel(uint256 _id, uint8 _level, uint8 _experience, uint16 _dnaPoints) external onlyController {\r\n        levels[_id].level = _level;\r\n        levels[_id].experience = _experience;\r\n        levels[_id].dnaPoints = _dnaPoints;\r\n    }\r\n\r\n    function setCoolness(uint256 _id, uint32 _coolness) external onlyController {\r\n        coolness[_id] = _coolness;\r\n    }\r\n\r\n    function setGenome(uint256 _id, uint256[4] _genome) external onlyController {\r\n        dragons[_id].genome = _genome;\r\n    }\r\n\r\n    function setSpecialAttack(\r\n        uint256 _id,\r\n        uint8 _dragonType\r\n    ) external onlyController {\r\n        specialAttacks[_id] = _dragonType;\r\n    }\r\n\r\n    function setSpecialDefense(\r\n        uint256 _id,\r\n        uint8 _dragonType\r\n    ) external onlyController {\r\n        specialDefenses[_id] = _dragonType;\r\n    }\r\n\r\n    function setSpecialPeacefulSkill(\r\n        uint256 _id,\r\n        uint8 _class\r\n    ) external onlyController {\r\n        specialPeacefulSkills[_id] = _class;\r\n    }\r\n\r\n    function setBuff(uint256 _id, uint8 _class, uint32 _effect) external onlyController {\r\n        buffs[_id][_class] = _effect;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_dragonType\",\"type\":\"uint8\"}],\"name\":\"setSpecialAttack\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"resetHealthAndManaTimestamp\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getParents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setUrl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"existingNames\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_genome\",\"type\":\"uint256[4]\"}],\"name\":\"setGenome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"names\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_coolness\",\"type\":\"uint32\"}],\"name\":\"setCoolness\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"skills\",\"outputs\":[{\"name\":\"attack\",\"type\":\"uint32\"},{\"name\":\"defense\",\"type\":\"uint32\"},{\"name\":\"stamina\",\"type\":\"uint32\"},{\"name\":\"speed\",\"type\":\"uint32\"},{\"name\":\"intelligence\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_class\",\"type\":\"uint8\"}],\"name\":\"setSpecialPeacefulSkill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_dragonType\",\"type\":\"uint8\"}],\"name\":\"setSpecialDefense\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_melee\",\"type\":\"uint8\"},{\"name\":\"_attack\",\"type\":\"uint8\"}],\"name\":\"setTactics\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"specialAttacks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"battles\",\"outputs\":[{\"name\":\"wins\",\"type\":\"uint16\"},{\"name\":\"defeats\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"specialPeacefulSkills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getGenome\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setExternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"buffs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"specialDefenses\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_generation\",\"type\":\"uint16\"},{\"name\":\"_genome\",\"type\":\"uint256[4]\"},{\"name\":\"_parents\",\"type\":\"uint256[2]\"},{\"name\":\"_types\",\"type\":\"uint8[11]\"}],\"name\":\"push\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDependencies\",\"type\":\"address[]\"}],\"name\":\"setInternalDependencies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"coolness\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint16\"}],\"name\":\"setDefeats\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_attack\",\"type\":\"uint32\"},{\"name\":\"_defense\",\"type\":\"uint32\"},{\"name\":\"_stamina\",\"type\":\"uint32\"},{\"name\":\"_speed\",\"type\":\"uint32\"},{\"name\":\"_intelligence\",\"type\":\"uint32\"}],\"name\":\"setSkills\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_remainingHealth\",\"type\":\"uint32\"},{\"name\":\"_remainingMana\",\"type\":\"uint32\"}],\"name\":\"setRemainingHealthAndMana\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tactics\",\"outputs\":[{\"name\":\"melee\",\"type\":\"uint8\"},{\"name\":\"attack\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"remoteApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_lowercase\",\"type\":\"bytes32\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levels\",\"outputs\":[{\"name\":\"level\",\"type\":\"uint8\"},{\"name\":\"experience\",\"type\":\"uint8\"},{\"name\":\"dnaPoints\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint16\"}],\"name\":\"setWins\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_maxHealth\",\"type\":\"uint32\"},{\"name\":\"_maxMana\",\"type\":\"uint32\"}],\"name\":\"setMaxHealthAndMana\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dragons\",\"outputs\":[{\"name\":\"generation\",\"type\":\"uint16\"},{\"name\":\"birth\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDragonTypes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[11]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"healthAndMana\",\"outputs\":[{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"remainingHealth\",\"type\":\"uint32\"},{\"name\":\"remainingMana\",\"type\":\"uint32\"},{\"name\":\"maxHealth\",\"type\":\"uint32\"},{\"name\":\"maxMana\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getExternalDependencies\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_level\",\"type\":\"uint8\"},{\"name\":\"_experience\",\"type\":\"uint8\"},{\"name\":\"_dnaPoints\",\"type\":\"uint16\"}],\"name\":\"setLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_class\",\"type\":\"uint8\"},{\"name\":\"_effect\",\"type\":\"uint32\"}],\"name\":\"setBuff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]","ContractName":"DragonStorage","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000012447261676f6e657265756d20447261676f6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006445241474f4e0000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://0778a3e24f0852ca6a819823ee5affea1e7bdb9a45c0dc185210dafa190e7984"}]}