{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n    \r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    function withdraw() public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ChickenMarket is Owned{\r\n    using SafeMath for *;\r\n    \r\n    modifier notContract() {\r\n        require (msg.sender == tx.origin);\r\n        _;\r\n    }\r\n    \r\n    struct Card{\r\n        uint256 price;\r\n        address owner;  \r\n        uint256 payout;\r\n        uint256 divdent;\r\n    }\r\n    \r\n    Card public card1;\r\n    Card public card2;\r\n    Card public card3;\r\n    \r\n    bool public isOpen = true;\r\n\r\n    uint256 public updateTime;\r\n    address public mainContract = 0x211f3175e3632ed194368311223bd4f4e834fc33;\r\n    ERC20Interface ChickenParkCoin;\r\n\r\n    event Buy(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint tokens,\r\n        uint card\r\n    );\r\n\r\n    event Reset(\r\n        uint time,\r\n        uint finalPriceCard1,\r\n        uint finalPriceCard2,\r\n        uint finalPriceCard3\r\n    );\r\n    \r\n    constructor() public{\r\n        card1 = Card(1000e18, msg.sender, 0, 10);\r\n        card2 = Card(1000e18, msg.sender, 0, 20);\r\n        card3 = Card(1000e18, msg.sender, 0, 70);\r\n        \r\n        ChickenParkCoin = ERC20Interface(mainContract);\r\n        updateTime = now;\r\n    }\r\n    \r\n    function() public payable{\r\n\r\n    }\r\n    \r\n    function tokenFallback(address _from, uint _value, bytes _data) public {\r\n        require(_from == tx.origin);\r\n        require(msg.sender == mainContract);\r\n        require(isOpen);\r\n\r\n        address oldowner;\r\n        \r\n        if(uint8(_data[0]) == 1){\r\n            withdraw(1);\r\n            require(card1.price == _value);\r\n            card1.price = _value.mul(2);\r\n            oldowner = card1.owner;\r\n            card1.owner = _from;            \r\n            \r\n            ChickenParkCoin.transfer(oldowner, _value.mul(80) / 100);\r\n        } else if(uint8(_data[0]) == 2){\r\n            withdraw(2);\r\n            require(card2.price == _value);\r\n            card2.price = _value.mul(2);\r\n            oldowner = card2.owner;\r\n            card2.owner = _from;            \r\n            \r\n            ChickenParkCoin.transfer(oldowner, _value.mul(80) / 100);\r\n        } else if(uint8(_data[0]) == 3){\r\n            withdraw(3);\r\n            require(card3.price == _value);\r\n            card3.price = _value.mul(2);\r\n            oldowner = card3.owner;\r\n            card3.owner = _from;            \r\n\r\n            ChickenParkCoin.transfer(oldowner, _value.mul(80) / 100);\r\n        }\r\n    }\r\n    \r\n    function withdraw(uint8 card) public {\r\n        uint _revenue;\r\n        if(card == 1){\r\n            _revenue = (getAllRevenue().mul(card1.divdent) / 100) - card1.payout;\r\n            card1.payout = (getAllRevenue().mul(card1.divdent) / 100);\r\n            card1.owner.transfer(_revenue);\r\n        } else if(card == 2){\r\n            _revenue = (getAllRevenue().mul(card2.divdent) / 100) - card2.payout;\r\n            card2.payout = (getAllRevenue().mul(card2.divdent) / 100);\r\n            card2.owner.transfer(_revenue);\r\n        } else if(card == 3){\r\n            _revenue = (getAllRevenue().mul(card3.divdent) / 100) - card3.payout;\r\n            card3.payout = (getAllRevenue().mul(card3.divdent) / 100);\r\n            card3.owner.transfer(_revenue);\r\n        } \r\n    }\r\n    \r\n    \r\n    function getCardRevenue(uint8 card) view public returns (uint256){\r\n        if(card == 1){\r\n            return (getAllRevenue().mul(card1.divdent) / 100) - card1.payout;\r\n        } else if(card == 2){\r\n            return (getAllRevenue().mul(card2.divdent) / 100) - card2.payout;\r\n        } else if(card == 3){\r\n            return (getAllRevenue().mul(card3.divdent) / 100) - card3.payout;\r\n        }\r\n    }\r\n    \r\n    function getAllRevenue() view public returns (uint256){\r\n        return card1.payout.add(card2.payout).add(card3.payout).add(address(this).balance);\r\n    }\r\n    \r\n    function reSet() onlyOwner public {\r\n        require(now >= updateTime + 7 days);\r\n        withdraw(1);\r\n        withdraw(2);\r\n        withdraw(3);\r\n        \r\n        card1.price = 1000e18;\r\n        card2.price = 1000e18;\r\n        card3.price = 1000e18;\r\n        \r\n        card1.owner = owner;\r\n        card2.owner = owner;\r\n        card3.owner = owner;\r\n        \r\n        card1.payout = 0;\r\n        card2.payout = 0;\r\n        card3.payout = 0;\r\n        \r\n        ChickenParkCoin.transfer(owner, ChickenParkCoin.balanceOf(address(this)));\r\n        owner.transfer(address(this).balance);\r\n        updateTime = now;\r\n    }\r\n    \r\n    function withdrawMainDivi() public onlyOwner {\r\n       ChickenParkCoin.withdraw();\r\n    }\r\n    \r\n    function setStatus(bool _status) onlyOwner public {\r\n        isOpen = _status;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"card1\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"payout\",\"type\":\"uint256\"},{\"name\":\"divdent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllRevenue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reSet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"card\",\"type\":\"uint8\"}],\"name\":\"getCardRevenue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"card\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"updateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"card3\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"payout\",\"type\":\"uint256\"},{\"name\":\"divdent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"card2\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"payout\",\"type\":\"uint256\"},{\"name\":\"divdent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawMainDivi\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"card\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finalPriceCard1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finalPriceCard2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finalPriceCard3\",\"type\":\"uint256\"}],\"name\":\"Reset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ChickenMarket","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fb1b2fd6c35049f5a914076bf6184cf2d57cbb3f43af5b7c0892ecb812592138"}]}