{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n/*\r\n* ---How to use:\r\n*\t1. Send from ETH wallet to the smart contract address any amount ETH.\r\n*\t2a. Claim your profit by sending 0 ether transaction (1 time per 12 hour)\r\n*\tOR\r\n*\t2b. Send more ether to reinvest AND get your profit\r\n*\t2c. If you hold, the percentage grows\r\n*\t3. If you earn more than 150%, you can withdraw only one finish time\r\n*\t4. If you want withdraw invested, send 0.00000911 ether\r\n*\r\n*\tRECOMMENDED GAS LIMIT: 150000\r\n*\tRECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n*\t\r\n*\tTHE PROJECT HAS HIGH RISKS! \r\n*\tPROJECT MAKE PAYMENTS IF BALANCE HAS ETHER! \r\n*/\r\n\r\ncontract TrueInvest {\r\n    // records amounts invested\r\n    mapping (address => uint) public userInvested;\r\n    // records blocks at which investments were made\r\n    mapping (address => uint) public entryTime;\r\n    // records how much you withdraw\r\n    mapping (address => uint) public withdrawnAmount;\r\n    //records you use the referral program or not\r\n    mapping (address => uint) public referrerOn;\r\n    // marketing fund 6%\r\n    address public advertisingFund = 0x01429d58058B3e84F6f264D91254EA3a96E1d2B7; \r\n    uint public advertisingPercent = 6;\r\n\t// tech support fund 2 %\r\n\taddress techSupportFund = 0x0D5dB78b35ecbdD22ffeA91B46a6EC77dC09EA4a;\t\t\r\n\tuint public techSupportPercent = 2;\r\n\t// \"hodl\" mode\r\n    uint public startPercent = 25;\t\t\t// 2.5%\r\n\tuint public fiveDayHodlPercent = 30;\t// 3%\r\n    uint public tenDayHodlPercent = 35;\t\t// 3.5%\r\n\tuint public twentyDayHodlPercent = 45;\t// 4.5%\r\n\t// bonus percent of balance\r\n\tuint public lowBalance = 500 ether;\r\n\tuint public middleBalance = 2000 ether;\r\n\tuint public highBalance = 3500 ether;\r\n    uint public soLowBalanceBonus = 5;\t\t// 0.5%\r\n\tuint public lowBalanceBonus = 10;\t\t// 1%\r\n\tuint public middleBalanceBonus = 15;\t// 1.5%\r\n\tuint public highBalanceBonus = 20;\t\t// 2%\r\n\t\r\n\t\r\n    \r\n    // get bonus percent\r\n    function bonusPercent() public view returns(uint){\r\n        \r\n        uint balance = address(this).balance;\r\n        \r\n        if (balance < lowBalance){\r\n            return (soLowBalanceBonus);\t\t// if balance < 500 ether return 0.5%\r\n        } \r\n        if (balance > lowBalance && balance < middleBalance){\r\n            return (lowBalanceBonus); \t\t// if balance > 500 ether and balance < 2000 ether return 1%\r\n        } \r\n        if (balance > middleBalance && balance < highBalance){\r\n            return (middleBalanceBonus); \t// if balance > 2000 ether and balance < 3500 ether return 1.5%\r\n        }\r\n        if (balance > highBalance){\r\n            return (highBalanceBonus);\t\t// if balance > 3500 ether return 2%\r\n        }\r\n        \r\n    }\r\n    // get personal percent\r\n    function personalPercent() public view returns(uint){\r\n        \r\n        uint hodl = block.number - entryTime[msg.sender]; \r\n\t\t// how many blocks you hold, 1 day = 6100 blocks\r\n         if (hodl < 30500){\r\n            return (startPercent);\t\t\t// if hodl < 5 day, return 2.5%\r\n        }\r\n\t\tif (hodl > 30500 && hodl < 61000){\r\n            return (fiveDayHodlPercent);\t// if hodl > 5 day and hodl < 10 day, return 3%\r\n        }\r\n        if (hodl > 61000 && hodl < 122000){\r\n            return (tenDayHodlPercent);\t\t// if hodl > 10 day and hodl < 20 day, return 3.5%\r\n        }\r\n\t\tif (hodl > 122000){\r\n            return (twentyDayHodlPercent);\t// if hodl > 20 day, return 3.5%\r\n        }\r\n        \r\n        \r\n    }\r\n    \r\n    // if send 0.00000911 ETH contract will return your invest, else make invest\r\n    function() external payable {\r\n        if (msg.value == 0.00000911 ether) {\r\n            returnInvestment();\r\n        } \r\n\t\telse {\r\n            invest();\r\n        }\r\n    }    \r\n    \r\n   // return of deposit(userInvested - withdrawnAmount - (userInvested / 10(fund fee)) , after delete user record\r\n    function returnInvestment() timeWithdrawn private{\r\n        if(userInvested[msg.sender] > 0){\r\n            uint refundAmount = userInvested[msg.sender] - withdrawnAmount[msg.sender] - (userInvested[msg.sender] / 10);\r\n            require(userInvested[msg.sender] > refundAmount, 'You have already returned the investment');\r\n\t\t\tuserInvested[msg.sender] = 0;\r\n            entryTime[msg.sender] = 0;\r\n            withdrawnAmount[msg.sender] = 0;\r\n            msg.sender.transfer(refundAmount);\r\n        }\r\n    }\r\n    // make a contribution\r\n    function invest() timeWithdrawn maxInvested  private {\r\n        if (msg.value > 0 ){\r\n\t\t\t// call terminal    \r\n\t\t\tterminal();\r\n\t\t\t// record invested amount (msg.value) of this transaction\r\n\t\t\tuserInvested[msg.sender] += msg.value;\r\n\t\t\t// sending fee for advertising and tech support\r\n\t\t\tadvertisingFund.transfer(msg.value * advertisingPercent / 100);\r\n\t\t\ttechSupportFund.transfer(msg.value * techSupportPercent / 100);\r\n        \r\n\t\t\t// if you entered the address that invited you and didnâ€™t do this before\r\n\t\t\tif (msg.data.length != 0 && referrerOn[msg.sender] != 1){\r\n\t\t\t\t//pays his bonus\r\n\t\t\t\ttransferRefBonus();\r\n\t\t\t}\r\n        } else{\r\n\t\t\t// call terminal  \r\n            terminal();\r\n        }\r\n    }\r\n    \r\n    function terminal() internal {\r\n        // if the user received 150% or more of his contribution, delete the user\r\n        if (userInvested[msg.sender] * 15 / 10 < withdrawnAmount[msg.sender]){\r\n            userInvested[msg.sender] = 0;\r\n            entryTime[msg.sender] = 0;\r\n            withdrawnAmount[msg.sender] = 0;\r\n            referrerOn[msg.sender] = 0; \r\n        } else {\r\n            // you percent = bonusPercent + personalPercent, min 3% and max 6.5%\r\n            uint percent = bonusPercent() + personalPercent();\r\n            // calculate profit amount as such:\r\n            // amount = (amount invested) * you percent * (blocks since last transaction) / 6100\r\n            // 6100 is an average block count per day produced by Ethereum blockchain\r\n            uint amount = userInvested[msg.sender] * percent / 1000 * ((block.number - entryTime[msg.sender]) / 6100);\r\n            // record block number\r\n            entryTime[msg.sender] = block.number;\r\n            // record withdraw amount\r\n            withdrawnAmount[msg.sender] += amount;\r\n            // send calculated amount of ether directly to sender (aka YOU)\r\n            msg.sender.transfer(amount);\r\n        }\r\n        \r\n    }\r\n    \r\n    // convert bytes to eth address \r\n\tfunction bytesToAddress(bytes bys) private pure returns (address addr) {\r\n\t\tassembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n\t}\r\n\t// transfer referrer bonus of invested \r\n    function transferRefBonus() private {        \r\n        address referrer = bytesToAddress(msg.data);\r\n        if (referrer != msg.sender && userInvested[referrer] != 0){\r\n        referrerOn[msg.sender] = 1;\r\n        uint refBonus = msg.value * 20 / 1000;\r\n        referrer.transfer(refBonus);    \r\n        }\r\n    }\r\n    \r\n    modifier timeWithdrawn(){\r\n        require(entryTime[msg.sender] + 3050 < block.number, 'Withdraw and deposit no more 1 time per 12 hour');\r\n        _;\r\n    }\r\n    \r\n    \r\n    modifier maxInvested(){\r\n        require(msg.value <= 25 ether, 'Max invested 25 ETH per 12 hours');\r\n        _;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"middleBalanceBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"personalPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawnAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tenDayHodlPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"middleBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"soLowBalanceBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertisingFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"entryTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highBalanceBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"advertisingPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"techSupportPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lowBalanceBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerOn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fiveDayHodlPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"twentyDayHodlPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInvested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"highBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"TrueInvest","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://869cbca3a227d16120644e7dc827c51efc746c63a348fd6c45744299d22814da"}]}