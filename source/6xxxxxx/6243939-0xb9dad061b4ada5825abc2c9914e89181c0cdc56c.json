{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n     /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else{\r\n            uint256 z = x;\r\n            for (uint256 i = 1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}\r\n\r\ninterface shareProfit {\r\n    function increaseProfit() external payable returns(bool);\r\n}\r\n\r\ncontract RTB2 is shareProfit {\r\n    using SafeMath for uint256;\r\n\r\n    uint8 public decimals = 0;\r\n    uint256 public totalSupply = 700;                                            \r\n    uint256 public totalSold = 0;\r\n    uint256 public constant price = 1 ether;\r\n    string public name = \"Retro Block Token 2\";\r\n    string public symbol = \"RTB2\";\r\n    address public owner;\r\n    address public finance;\r\n    \r\n    mapping (address=>uint256) received;\r\n    uint256 profit;\r\n    address public jackpot;\r\n    shareProfit public shareContract;\r\n    mapping (address=>uint256) changeProfit;\r\n\r\n    mapping (address=>uint256) balances;\r\n    mapping (address=>mapping (address=>uint256)) allowed;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event AddProfit(address indexed _from, uint256 _value, uint256 _newProfit);\r\n    event Withdraw(address indexed _addr, uint256 _value);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"only owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n    \r\n    constructor(address _shareAddr) public {\r\n        owner = msg.sender;\r\n        finance = 0x28Dd611d5d2cAA117239bD3f3A548DcE5Fa873b0;\r\n        jackpot = 0x119ea7f823588D2Db81d86cEFe4F3BE25e4C34DC;\r\n        shareContract = shareProfit(_shareAddr);\r\n        balances[this] = 700;\r\n    }\r\n\r\n    function() public payable {\r\n        require(msg.value > 0, \"Amount must be provided\");\r\n        profit = msg.value.div(totalSupply).add(profit);\r\n        emit AddProfit(msg.sender, msg.value, profit);\r\n    }\r\n    \r\n    function increaseProfit() external payable returns(bool){\r\n        if(msg.value > 0){\r\n            profit = msg.value.div(totalSupply).add(profit);\r\n            emit AddProfit(msg.sender, msg.value, profit);\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function totalSupply() external view returns (uint256){\r\n        return totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) external view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_value > 0 && allowed[msg.sender][_spender] == 0);\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        allowed[_from][msg.sender] -= _value;\r\n        return _transfer(_from, _to, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) external returns (bool) {\r\n        return _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\r\n        require(_to != address(0), \"Receiver address cannot be null\");\r\n        require(_from != _to);\r\n        require(_value > 0 && _value <= balances[_from]);\r\n        uint256 newToVal = balances[_to] + _value;\r\n        assert(newToVal >= balances[_to]);\r\n        uint256 newFromVal = balances[_from] - _value;\r\n        balances[_to] = newToVal;\r\n        balances[_from] =  newFromVal;\r\n        uint256 temp = _value.mul(profit);\r\n        changeProfit[_from] = changeProfit[_from].add(temp);\r\n        received[_to] = received[_to].add(temp);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function buy(uint256 _amount) external onlyHuman payable{\r\n        require(_amount > 0);\r\n        uint256 _money = _amount.mul(price);\r\n        require(msg.value == _money);\r\n        require(balances[this] >= _amount);\r\n        require((totalSupply - totalSold) >= _amount, \"Sold out\");\r\n        _transfer(this, msg.sender, _amount);\r\n        finance.transfer(_money.mul(60).div(100));\r\n        jackpot.transfer(_money.mul(20).div(100));\r\n        shareContract.increaseProfit.value(_money.mul(20).div(100))();\r\n        totalSold += _amount;\r\n    }\r\n\r\n    function withdraw() external {\r\n        uint256 value = getProfit(msg.sender);\r\n        require(value > 0, \"No cash available\");\r\n        emit Withdraw(msg.sender, value);\r\n        received[msg.sender] = received[msg.sender].add(value);\r\n        msg.sender.transfer(value);\r\n    } \r\n\r\n    function devWithdraw() public onlyOwner{\r\n        uint256 value = getProfit(this);\r\n        emit Withdraw(msg.sender, value);\r\n        received[this] = received[this].add(value);\r\n        owner.transfer(value);\r\n    }\r\n\r\n    function getProfit(address _addr) public view returns(uint256){\r\n        return profit.mul(balances[_addr]).add(changeProfit[_addr]).sub(received[_addr]);\r\n    }\r\n    \r\n    function setJackpot(address _addr) public onlyOwner{\r\n        jackpot = _addr;\r\n    }\r\n    \r\n    function setShare(address _addr) public onlyOwner{\r\n        shareContract = shareProfit(_addr);\r\n    }\r\n    \r\n    function setFinance(address _addr) public onlyOwner{\r\n        finance = _addr;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"increaseProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finance\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"jackpot\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setShare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setJackpot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setFinance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"devWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getProfit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shareContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_shareAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newProfit\",\"type\":\"uint256\"}],\"name\":\"AddProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]","ContractName":"RTB2","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d0955bd45d5eef5bedce84a3471c825288a14b01","Library":"","SwarmSource":"bzzr://5bc079f43da3b67c0098f0eb1c02696e3fc3e988203f0d298202aa6cc0f57ea1"}]}