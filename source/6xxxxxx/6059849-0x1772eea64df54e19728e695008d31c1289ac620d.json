{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n//==============================================================================\r\n//  . _ _|_ _  _ |` _  _ _  _  .\r\n//  || | | (/_| ~|~(_|(_(/__\\  .\r\n//==============================================================================\r\n\r\ninterface Lucky8DInterface {\r\n    function redistribution() external payable;\r\n}\r\n\r\ncontract RiceFarmer{\r\n\r\n    uint256 public SEEDS_TO_HATCH_1RICE=86400;//for final version should be seconds in a day\r\n    uint256 public STARTING_RICE=300;\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=false;\r\n    address public ceoAddress;\r\n    mapping (address => uint256) public hatcheryRice;\r\n    mapping (address => uint256) public claimedSeeds;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketSeeds;\r\n\r\n\r\n    Lucky8DInterface constant private Divies = Lucky8DInterface(0xe7BBBC53d2D1B9e1099BeF0E3E2F2C74cd1D2B98);\r\n\r\n\r\n    function RiceFarmer() public{\r\n        ceoAddress=msg.sender;\r\n    }\r\n\r\n\r\n    function hatchSeeds(address ref) public{\r\n        require(initialized);\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 eggsUsed=getMySeeds();\r\n        uint256 newRice=SafeMath.div(eggsUsed,SEEDS_TO_HATCH_1RICE);\r\n        hatcheryRice[msg.sender]=SafeMath.add(hatcheryRice[msg.sender],newRice);\r\n        claimedSeeds[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n\r\n        //send referral eggs\r\n        claimedSeeds[referrals[msg.sender]]=SafeMath.add(claimedSeeds[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\r\n\r\n        //boost market to nerf rice hoarding\r\n        marketSeeds=SafeMath.add(marketSeeds,SafeMath.div(eggsUsed,10));\r\n    }\r\n    function sellSeeds() public{\r\n        require(initialized);\r\n        uint256 hasSeeds=getMySeeds();\r\n        uint256 eggValue=calculateSeedSell(hasSeeds);\r\n        uint256 fee=devFee(eggValue);\r\n        claimedSeeds[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        marketSeeds=SafeMath.add(marketSeeds,hasSeeds);\r\n\r\n        Divies.redistribution.value(fee)();\r\n\r\n        msg.sender.transfer(SafeMath.sub(eggValue,fee));\r\n    }\r\n    function buySeeds() public payable{\r\n        require(initialized);\r\n        uint256 eggsBought=calculateSeedBuy(msg.value,SafeMath.sub(this.balance,msg.value));\r\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\r\n\r\n        Divies.redistribution.value(devFee(msg.value))();\r\n\r\n        claimedSeeds[msg.sender]=SafeMath.add(claimedSeeds[msg.sender],eggsBought);\r\n    }\r\n\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculateSeedSell(uint256 eggs) public view returns(uint256){\r\n        return calculateTrade(eggs,marketSeeds,this.balance);\r\n    }\r\n    function calculateSeedBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance,marketSeeds);\r\n    }\r\n    function calculateSeedBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateSeedBuy(eth,this.balance);\r\n    }\r\n\r\n    function devFee(uint256 amount) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,5),100);\r\n    }\r\n\r\n    function seedMarket(uint256 eggs) public payable{\r\n        require(marketSeeds==0);\r\n        initialized=true;\r\n        marketSeeds=eggs;\r\n    }\r\n    function getBalance() public view returns(uint256){\r\n        return this.balance;\r\n    }\r\n    function getMyRice() public view returns(uint256){\r\n        return hatcheryRice[msg.sender];\r\n    }\r\n    function getMySeeds() public view returns(uint256){\r\n        return SafeMath.add(claimedSeeds[msg.sender],getSeedsSinceLastHatch(msg.sender));\r\n    }\r\n    function getSeedsSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsPassed=min(SEEDS_TO_HATCH_1RICE,SafeMath.sub(now,lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed,hatcheryRice[adr]);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"buySeeds\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getSeedsSinceLastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellSeeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"rt\",\"type\":\"uint256\"},{\"name\":\"rs\",\"type\":\"uint256\"},{\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateSeedSell\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STARTING_RICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"seedMarket\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SEEDS_TO_HATCH_1RICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedSeeds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMySeeds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateSeedBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"hatchSeeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"hatcheryRice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketSeeds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyRice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateSeedBuySimple\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"RiceFarmer","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://152c73921c5c403560b34c5edb6ebfe546deae4646595d6ea58a51a5149070c6"}]}