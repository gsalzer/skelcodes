{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\n// input  /Users/howard/Documents/programming/dapperlabs/ck-offers-contracts/contracts/Offers.sol\r\n// flattened :  Tuesday, 04-Dec-18 19:41:54 UTC\r\ncontract OffersAccessControl {\r\n\r\n    // The address of the account that can replace ceo, coo, cfo, lostAndFound\r\n    address public ceoAddress;\r\n    // The address of the account that can adjust configuration variables and fulfill offer\r\n    address public cooAddress;\r\n    // The address of the CFO account that receives all the fees\r\n    address public cfoAddress;\r\n    // The address where funds of failed \"push\"es go to\r\n    address public lostAndFoundAddress;\r\n\r\n    // The total amount of ether (in wei) in escrow owned by CFO\r\n    uint256 public totalCFOEarnings;\r\n    // The total amount of ether (in wei) in escrow owned by lostAndFound\r\n    uint256 public totalLostAndFoundBalance;\r\n\r\n    /// @notice Keeps track whether the contract is frozen.\r\n    ///  When frozen is set to be true, it cannot be set back to false again,\r\n    ///  and all whenNotFrozen actions will be blocked.\r\n    bool public frozen = false;\r\n\r\n    /// @notice Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress, \"only CEO is allowed to perform this operation\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress, \"only COO is allowed to perform this operation\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(\r\n            msg.sender == cfoAddress &&\r\n            msg.sender != address(0),\r\n            \"only CFO is allowed to perform this operation\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Access modifier for CEO-only or CFO-only functionality\r\n    modifier onlyCeoOrCfo() {\r\n        require(\r\n            msg.sender != address(0) &&\r\n            (\r\n                msg.sender == ceoAddress ||\r\n                msg.sender == cfoAddress\r\n            ),\r\n            \"only CEO or CFO is allowed to perform this operation\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Access modifier for LostAndFound-only functionality\r\n    modifier onlyLostAndFound() {\r\n        require(\r\n            msg.sender == lostAndFoundAddress &&\r\n            msg.sender != address(0),\r\n            \"only LostAndFound is allowed to perform this operation\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @notice Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0), \"new CEO address cannot be the zero-account\");\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @notice Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) public onlyCEO {\r\n        require(_newCOO != address(0), \"new COO address cannot be the zero-account\");\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /// @notice Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0), \"new CFO address cannot be the zero-account\");\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// @notice Assigns a new address to act as the LostAndFound account. Only available to the current CEO.\r\n    /// @param _newLostAndFound The address of the new lostAndFound address\r\n    function setLostAndFound(address _newLostAndFound) external onlyCEO {\r\n        require(_newLostAndFound != address(0), \"new lost and found cannot be the zero-account\");\r\n        lostAndFoundAddress = _newLostAndFound;\r\n    }\r\n\r\n    /// @notice CFO withdraws the CFO earnings\r\n    function withdrawTotalCFOEarnings() external onlyCFO {\r\n        // Obtain reference\r\n        uint256 balance = totalCFOEarnings;\r\n        totalCFOEarnings = 0;\r\n        cfoAddress.transfer(balance);\r\n    }\r\n\r\n    /// @notice LostAndFound account withdraws all the lost and found amount\r\n    function withdrawTotalLostAndFoundBalance() external onlyLostAndFound {\r\n        // Obtain reference\r\n        uint256 balance = totalLostAndFoundBalance;\r\n        totalLostAndFoundBalance = 0;\r\n        lostAndFoundAddress.transfer(balance);\r\n    }\r\n\r\n    /// @notice Modifier to allow actions only when the contract is not frozen\r\n    modifier whenNotFrozen() {\r\n        require(!frozen, \"contract needs to not be frozen\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier to allow actions only when the contract is frozen\r\n    modifier whenFrozen() {\r\n        require(frozen, \"contract needs to be frozen\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Called by CEO or CFO role to freeze the contract.\r\n    ///  Only intended to be used if a serious exploit is detected.\r\n    /// @notice Allow two C-level roles to call this function in case either CEO or CFO key is compromised.\r\n    /// @notice This is a one-way process; there is no un-freezing.\r\n    /// @dev A frozen contract will be frozen forever, there's no way to undo this action.\r\n    function freeze() external onlyCeoOrCfo whenNotFrozen {\r\n        frozen = true;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\ncontract OffersConfig is OffersAccessControl {\r\n\r\n    /* ************************* */\r\n    /* ADJUSTABLE CONFIGURATIONS */\r\n    /* ************************* */\r\n\r\n    // The duration (in seconds) of all offers that are created. This parameter is also used in calculating\r\n    // new expiration times when extending offers.\r\n    uint256 public globalDuration;\r\n    // The global minimum offer value (price + offer fee, in wei)\r\n    uint256 public minimumTotalValue;\r\n    // The minimum overbid increment % (expressed in basis points, which is 1/100 of a percent)\r\n    // For basis points, values 0-10,000 map to 0%-100%\r\n    uint256 public minimumPriceIncrement;\r\n\r\n    /* *************** */\r\n    /* ADJUSTABLE FEES */\r\n    /* *************** */\r\n\r\n    // Throughout the various contracts there will be various symbols used for the purpose of a clear display\r\n    // of the underlying mathematical formulation. Specifically,\r\n    //\r\n    //          - T: This is the total amount of funds associated with an offer, comprised of 1) the offer\r\n    //                  price which the bidder is proposing the owner of the token receive, and 2) an amount\r\n    //                  that is the maximum the main Offers contract will ever take - this is when the offer\r\n    //                  is cancelled, or fulfilled. In other scenarios, the amount taken by the main contract\r\n    //                  may be less, depending on other configurations.\r\n    //\r\n    //          - S: This is called the offerCut, expressed as a basis point. This determines the maximum amount\r\n    //                  of ether the main contract can ever take in the various possible outcomes of an offer\r\n    //                  (cancelled, expired, overbid, fulfilled, updated).\r\n    //\r\n    //          - P: This simply refers to the price that the bidder is offering the owner receive, upon\r\n    //                  fulfillment of the offer process.\r\n    //\r\n    //          - Below is the formula that ties the symbols listed above together (S is % for brevity):\r\n    //                  T = P + S * P\r\n\r\n    // Flat fee (in wei) the main contract takes when offer has been expired or overbid. The fee serves as a\r\n    // disincentive for abuse and allows recoupment of ether spent calling batchRemoveExpired on behalf of users.\r\n    uint256 public unsuccessfulFee;\r\n    // This is S, the maximum % the main contract takes on each offer. S represents the total amount paid when\r\n    // an offer has been fulfilled or cancelled.\r\n    uint256 public offerCut;\r\n\r\n    /* ****** */\r\n    /* EVENTS */\r\n    /* ****** */\r\n\r\n    event GlobalDurationUpdated(uint256 value);\r\n    event MinimumTotalValueUpdated(uint256 value);\r\n    event MinimumPriceIncrementUpdated(uint256 value);\r\n    event OfferCutUpdated(uint256 value);\r\n    event UnsuccessfulFeeUpdated(uint256 value);\r\n\r\n    /* ********* */\r\n    /* FUNCTIONS */\r\n    /* ********* */\r\n\r\n    /// @notice Sets the minimumTotalValue value. This would impact offers created after this has been set, but\r\n    ///  not existing offers.\r\n    /// @notice Only callable by COO, when not frozen.\r\n    /// @param _newMinTotal The minimumTotalValue value to set\r\n    function setMinimumTotalValue(uint256 _newMinTotal) external onlyCOO whenNotFrozen {\r\n        _setMinimumTotalValue(_newMinTotal, unsuccessfulFee);\r\n        emit MinimumTotalValueUpdated(_newMinTotal);\r\n    }\r\n\r\n    /// @notice Sets the globalDuration value. All offers that are created or updated will compute a new expiration\r\n    ///  time based on this.\r\n    /// @notice Only callable by COO, when not frozen.\r\n    /// @dev Need to check for underflow since function argument is 256 bits, and the offer expiration time is\r\n    ///  packed into 64 bits in the Offer struct.\r\n    /// @param _newDuration The globalDuration value to set.\r\n    function setGlobalDuration(uint256 _newDuration) external onlyCOO whenNotFrozen {\r\n        require(_newDuration == uint256(uint64(_newDuration)), \"new globalDuration value must not underflow\");\r\n        globalDuration = _newDuration;\r\n        emit GlobalDurationUpdated(_newDuration);\r\n    }\r\n\r\n    /// @notice Sets the offerCut value. All offers will compute a fee taken by this contract based on this\r\n    ///  configuration.\r\n    /// @notice Only callable by COO, when not frozen.\r\n    /// @dev As this configuration is a basis point, the value to set must be less than or equal to 10000.\r\n    /// @param _newOfferCut The offerCut value to set.\r\n    function setOfferCut(uint256 _newOfferCut) external onlyCOO whenNotFrozen {\r\n        _setOfferCut(_newOfferCut);\r\n        emit OfferCutUpdated(_newOfferCut);\r\n    }\r\n\r\n    /// @notice Sets the unsuccessfulFee value. All offers that are unsuccessful (overbid or expired)\r\n    ///  will have a flat fee taken by the main contract before being refunded to bidders.\r\n    /// @notice Given Tmin (_minTotal), flat fee (_unsuccessfulFee),\r\n    ///  Tmin ≥ (2 * flat fee) guarantees that offer prices ≥ flat fee, always. This is important to prevent the\r\n    ///  existence of offers that, when overbid or expired, would result in the main contract taking too big of a cut.\r\n    ///  In the case of a sufficiently low offer price, eg. the same as unsuccessfulFee, the most the main contract can\r\n    ///  ever take is simply the amount of unsuccessfulFee.\r\n    /// @notice Only callable by COO, when not frozen.\r\n    /// @param _newUnsuccessfulFee The unsuccessfulFee value to set.\r\n    function setUnsuccessfulFee(uint256 _newUnsuccessfulFee) external onlyCOO whenNotFrozen {\r\n        require(minimumTotalValue >= (2 * _newUnsuccessfulFee), \"unsuccessful value must be <= half of minimumTotalValue\");\r\n        unsuccessfulFee = _newUnsuccessfulFee;\r\n        emit UnsuccessfulFeeUpdated(_newUnsuccessfulFee);\r\n    }\r\n\r\n    /// @notice Sets the minimumPriceIncrement value. All offers that are overbid must have a price greater\r\n    ///  than the minimum increment computed from this basis point.\r\n    /// @notice Only callable by COO, when not frozen.\r\n    /// @dev As this configuration is a basis point, the value to set must be less than or equal to 10000.\r\n    /// @param _newMinimumPriceIncrement The minimumPriceIncrement value to set.\r\n    function setMinimumPriceIncrement(uint256 _newMinimumPriceIncrement) external onlyCOO whenNotFrozen {\r\n        _setMinimumPriceIncrement(_newMinimumPriceIncrement);\r\n        emit MinimumPriceIncrementUpdated(_newMinimumPriceIncrement);\r\n    }\r\n\r\n    /// @notice Utility function used internally for the setMinimumTotalValue method.\r\n    /// @notice Given Tmin (_minTotal), flat fee (_unsuccessfulFee),\r\n    ///  Tmin ≥ (2 * flat fee) guarantees that offer prices ≥ flat fee, always. This is important to prevent the\r\n    ///  existence of offers that, when overbid or expired, would result in the main contract taking too big of a cut.\r\n    ///  In the case of a sufficiently low offer price, eg. the same as unsuccessfulFee, the most the main contract can\r\n    ///  ever take is simply the amount of unsuccessfulFee.\r\n    /// @param _newMinTotal The minimumTotalValue value to set.\r\n    /// @param _unsuccessfulFee The unsuccessfulFee value used to check if the _minTotal specified\r\n    ///  is too low.\r\n    function _setMinimumTotalValue(uint256 _newMinTotal, uint256 _unsuccessfulFee) internal {\r\n        require(_newMinTotal >= (2 * _unsuccessfulFee), \"minimum value must be >= 2 * unsuccessful fee\");\r\n        minimumTotalValue = _newMinTotal;\r\n    }\r\n\r\n    /// @dev As offerCut is a basis point, the value to set must be less than or equal to 10000.\r\n    /// @param _newOfferCut The offerCut value to set.\r\n    function _setOfferCut(uint256 _newOfferCut) internal {\r\n        require(_newOfferCut <= 1e4, \"offer cut must be a valid basis point\");\r\n        offerCut = _newOfferCut;\r\n    }\r\n\r\n    /// @dev As minimumPriceIncrement is a basis point, the value to set must be less than or equal to 10000.\r\n    /// @param _newMinimumPriceIncrement The minimumPriceIncrement value to set.\r\n    function _setMinimumPriceIncrement(uint256 _newMinimumPriceIncrement) internal {\r\n        require(_newMinimumPriceIncrement <= 1e4, \"minimum price increment must be a valid basis point\");\r\n        minimumPriceIncrement = _newMinimumPriceIncrement;\r\n    }\r\n}\r\n\r\ncontract OffersBase is OffersConfig {\r\n    /*** EVENTS ***/\r\n\r\n    /// @notice The OfferCreated event is emitted when an offer is created through\r\n    ///  createOffer method.\r\n    /// @param tokenId The token id that a bidder is offering to buy from the owner.\r\n    /// @param bidder The creator of the offer.\r\n    /// @param expiresAt The timestamp when the offer will be expire.\r\n    /// @param total The total eth value the bidder sent to the Offer contract.\r\n    /// @param offerPrice The eth price that the owner of the token will receive\r\n    ///  if the offer is accepted.\r\n    event OfferCreated(\r\n        uint256 tokenId,\r\n        address bidder,\r\n        uint256 expiresAt,\r\n        uint256 total,\r\n        uint256 offerPrice\r\n    );\r\n\r\n    /// @notice The OfferCancelled event is emitted when an offer is cancelled before expired.\r\n    /// @param tokenId The token id that the cancelled offer was offering to buy.\r\n    /// @param bidder The creator of the offer.\r\n    /// @param bidderReceived The eth amount that the bidder received as refund.\r\n    /// @param fee The eth amount that CFO received as the fee for the cancellation.\r\n    event OfferCancelled(\r\n        uint256 tokenId,\r\n        address bidder,\r\n        uint256 bidderReceived,\r\n        uint256 fee\r\n    );\r\n\r\n    /// @notice The OfferFulfilled event is emitted when an active offer has been fulfilled, meaning\r\n    ///  the bidder now owns the token, and the orignal owner receives the eth amount from the offer.\r\n    /// @param tokenId The token id that the fulfilled offer was offering to buy.\r\n    /// @param bidder The creator of the offer.\r\n    /// @param owner The original owner of the token who accepted the offer.\r\n    /// @param ownerReceived The eth amount that the original owner received from the offer\r\n    /// @param fee The eth amount that CFO received as the fee for the successfully fulfilling.\r\n    event OfferFulfilled(\r\n        uint256 tokenId,\r\n        address bidder,\r\n        address owner,\r\n        uint256 ownerReceived,\r\n        uint256 fee\r\n    );\r\n\r\n    /// @notice The OfferUpdated event is emitted when an active offer was either extended the expiry\r\n    ///  or raised the price.\r\n    /// @param tokenId The token id that the updated offer was offering to buy.\r\n    /// @param bidder The creator of the offer, also is whom updated the offer.\r\n    /// @param newExpiresAt The new expiry date of the updated offer.\r\n    /// @param totalRaised The total eth value the bidder sent to the Offer contract to raise the offer.\r\n    ///  if the totalRaised is 0, it means the offer was extended without raising the price.\r\n    event OfferUpdated(\r\n        uint256 tokenId,\r\n        address bidder,\r\n        uint256 newExpiresAt,\r\n        uint256 totalRaised\r\n    );\r\n\r\n    /// @notice The ExpiredOfferRemoved event is emitted when an expired offer gets removed. The eth value will\r\n    ///  be returned to the bidder's account, excluding the fee.\r\n    /// @param tokenId The token id that the removed offer was offering to buy\r\n    /// @param bidder The creator of the offer.\r\n    /// @param bidderReceived The eth amount that the bidder received from the offer.\r\n    /// @param fee The eth amount that CFO received as the fee.\r\n    event ExpiredOfferRemoved(\r\n      uint256 tokenId,\r\n      address bidder,\r\n      uint256 bidderReceived,\r\n      uint256 fee\r\n    );\r\n\r\n    /// @notice The BidderWithdrewFundsWhenFrozen event is emitted when a bidder withdrew their eth value of\r\n    ///  the offer when the contract is frozen.\r\n    /// @param tokenId The token id that withdrawed offer was offering to buy\r\n    /// @param bidder The creator of the offer, also is whom withdrawed the fund.\r\n    /// @param amount The total amount that the bidder received.\r\n    event BidderWithdrewFundsWhenFrozen(\r\n        uint256 tokenId,\r\n        address bidder,\r\n        uint256 amount\r\n    );\r\n\r\n\r\n    /// @dev The PushFundsFailed event is emitted when the Offer contract fails to send certain amount of eth\r\n    ///  to an address, e.g. sending the fund back to the bidder when the offer was overbidden by a higher offer.\r\n    /// @param tokenId The token id of an offer that the sending fund is involved.\r\n    /// @param to The address that is supposed to receive the fund but failed for any reason.\r\n    /// @param amount The eth amount that the receiver fails to receive.\r\n    event PushFundsFailed(\r\n        uint256 tokenId,\r\n        address to,\r\n        uint256 amount\r\n    );\r\n\r\n    /*** DATA TYPES ***/\r\n\r\n    /// @dev The Offer struct. The struct fits in two 256-bits words.\r\n    struct Offer {\r\n        // Time when offer expires\r\n        uint64 expiresAt;\r\n        // Bidder The creator of the offer\r\n        address bidder;\r\n        // Offer cut in basis points, which ranges from 0-10000.\r\n        // It's the cut that CFO takes when the offer is successfully accepted by the owner.\r\n        // This is stored in the offer struct so that it won't be changed if COO updates\r\n        // the `offerCut` for new offers.\r\n        uint16 offerCut;\r\n        // Total value (in wei) a bidder sent in msg.value to create the offer\r\n        uint128 total;\r\n        // Fee (in wei) that CFO takes when the offer is expired or overbid.\r\n        // This is stored in the offer struct so that it won't be changed if COO updates\r\n        // the `unsuccessfulFee` for new offers.\r\n        uint128 unsuccessfulFee;\r\n    }\r\n\r\n    /*** STORAGE ***/\r\n    /// @notice Mapping from token id to its corresponding offer.\r\n    /// @dev One token can only have one offer.\r\n    ///  Making it public so that solc-0.4.24 will generate code to query offer by a given token id.\r\n    mapping (uint256 => Offer) public tokenIdToOffer;\r\n\r\n    /// @notice computes the minimum offer price to overbid a given offer with its offer price.\r\n    ///  The new offer price has to be a certain percentage, which defined by `minimumPriceIncrement`,\r\n    ///  higher than the previous offer price.\r\n    /// @dev This won't overflow, because `_offerPrice` is in uint128, and `minimumPriceIncrement`\r\n    ///  is 16 bits max.\r\n    /// @param _offerPrice The amount of ether in wei as the offer price\r\n    /// @return The minimum amount of ether in wei to overbid the given offer price\r\n    function _computeMinimumOverbidPrice(uint256 _offerPrice) internal view returns (uint256) {\r\n        return _offerPrice * (1e4 + minimumPriceIncrement) / 1e4;\r\n    }\r\n\r\n    /// @notice Computes the offer price that the owner will receive if the offer is accepted.\r\n    /// @dev This is safe against overflow because msg.value and the total supply of ether is capped within 128 bits.\r\n    /// @param _total The total value of the offer. Also is the msg.value that the bidder sent when\r\n    ///  creating the offer.\r\n    /// @param _offerCut The percentage in basis points that will be taken by the CFO if the offer is fulfilled.\r\n    /// @return The offer price that the owner will receive if the offer is fulfilled.\r\n    function _computeOfferPrice(uint256 _total, uint256 _offerCut) internal pure returns (uint256) {\r\n        return _total * 1e4 / (1e4 + _offerCut);\r\n    }\r\n\r\n    /// @notice Check if an offer exists or not by checking the expiresAt field of the offer.\r\n    ///  True if exists, False if not.\r\n    /// @dev Assuming the expiresAt field is from the offer struct in storage.\r\n    /// @dev Since expiry check always come right after the offer existance check, it will save some gas by checking\r\n    /// both existance and expiry on one field, as it only reads from the storage once.\r\n    /// @param _expiresAt The time at which the offer we want to validate expires.\r\n    /// @return True or false (if the offer exists not).\r\n    function _offerExists(uint256 _expiresAt) internal pure returns (bool) {\r\n        return _expiresAt > 0;\r\n    }\r\n\r\n    /// @notice Check if an offer is still active by checking the expiresAt field of the offer. True if the offer is,\r\n    ///  still active, False if the offer has expired,\r\n    /// @dev Assuming the expiresAt field is from the offer struct in storage.\r\n    /// @param _expiresAt The time at which the offer we want to validate expires.\r\n    /// @return True or false (if the offer has expired or not).\r\n    function _isOfferActive(uint256 _expiresAt) internal view returns (bool) {\r\n        return now < _expiresAt;\r\n    }\r\n\r\n    /// @dev Try pushing the fund to an address.\r\n    /// @notice If sending the fund to the `_to` address fails for whatever reason, then the logic\r\n    ///  will continue and the amount will be kept under the LostAndFound account. Also an event `PushFundsFailed`\r\n    ///  will be emitted for notifying the failure.\r\n    /// @param _tokenId The token id for the offer.\r\n    /// @param _to The address the main contract is attempting to send funds to.\r\n    /// @param _amount The amount of funds (in wei) the main contract is attempting to send.\r\n    function _tryPushFunds(uint256 _tokenId, address _to, uint256 _amount) internal {\r\n        // Sending the amount of eth in wei, and handling the failure.\r\n        // The gas spent transferring funds has a set upper limit\r\n        bool success = _to.send(_amount);\r\n        if (!success) {\r\n            // If failed sending to the `_to` address, then keep the amount under the LostAndFound account by\r\n            // accumulating totalLostAndFoundBalance.\r\n            totalLostAndFoundBalance = totalLostAndFoundBalance + _amount;\r\n\r\n            // Emitting the event lost amount.\r\n            emit PushFundsFailed(_tokenId, _to, _amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Offers is OffersBase {\r\n\r\n    // This is the main Offers contract. In order to keep our code separated into logical sections,\r\n    // we've broken it up into multiple files using inheritance. This allows us to keep related code\r\n    // collocated while still avoiding a single large file, which would be harder to maintain. The breakdown\r\n    // is as follows:\r\n    //\r\n    //      - OffersBase: This contract defines the fundamental code that the main contract uses.\r\n    //              This includes our main data storage, data types, events, and internal functions for\r\n    //              managing offers in their lifecycle.\r\n    //\r\n    //      - OffersConfig: This contract manages the various configuration values that determine the\r\n    //              details of the offers that get created, cancelled, overbid, expired, and fulfilled,\r\n    //              as well as the fee structure that the offers will be operating with.\r\n    //\r\n    //      - OffersAccessControl: This contract manages the various addresses and constraints for\r\n    //              operations that can be executed only by specific roles. The roles are: CEO, CFO,\r\n    //              COO, and LostAndFound. Additionally, this contract exposes functions for the CFO\r\n    //              to withdraw earnings and the LostAndFound account to withdraw any lost funds.\r\n\r\n    /// @dev The ERC-165 interface signature for ERC-721.\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\r\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\r\n\r\n    // Reference to contract tracking NFT ownership\r\n    ERC721 public nonFungibleContract;\r\n\r\n    /// @notice Creates the main Offers smart contract instance and sets initial configuration values\r\n    /// @param _nftAddress The address of the ERC-721 contract managing NFT ownership\r\n    /// @param _cooAddress The address of the COO to set\r\n    /// @param _globalDuration The initial globalDuration value to set\r\n    /// @param _minimumTotalValue The initial minimumTotalValue value to set\r\n    /// @param _minimumPriceIncrement The initial minimumPriceIncrement value to set\r\n    /// @param _unsuccessfulFee The initial unsuccessfulFee value to set\r\n    /// @param _offerCut The initial offerCut value to set\r\n    constructor(\r\n      address _nftAddress,\r\n      address _cooAddress,\r\n      uint256 _globalDuration,\r\n      uint256 _minimumTotalValue,\r\n      uint256 _minimumPriceIncrement,\r\n      uint256 _unsuccessfulFee,\r\n      uint256 _offerCut\r\n    ) public {\r\n        // The creator of the contract is the ceo\r\n        ceoAddress = msg.sender;\r\n\r\n        // Get reference of the address of the NFT contract\r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721), \"NFT Contract needs to support ERC721 Interface\");\r\n        nonFungibleContract = candidateContract;\r\n\r\n        setCOO(_cooAddress);\r\n\r\n        // Set initial claw-figuration values\r\n        globalDuration = _globalDuration;\r\n        unsuccessfulFee = _unsuccessfulFee;\r\n        _setOfferCut(_offerCut);\r\n        _setMinimumPriceIncrement(_minimumPriceIncrement);\r\n        _setMinimumTotalValue(_minimumTotalValue, _unsuccessfulFee);\r\n    }\r\n\r\n    /// @notice Creates an offer on a token. This contract receives bidders funds and refunds the previous bidder\r\n    ///  if this offer overbids a previously active (unexpired) offer.\r\n    /// @notice When this offer overbids a previously active offer, this offer must have a price greater than\r\n    ///  a certain percentage of the previous offer price, which the minimumOverbidPrice basis point specifies.\r\n    ///  A flat fee is also taken from the previous offer before refund the previous bidder.\r\n    /// @notice When there is a previous offer that has already expired but not yet been removed from storage,\r\n    ///  the new offer can be created with any total value as long as it is greater than the minimumTotalValue.\r\n    /// @notice Works only when contract is not frozen.\r\n    /// @param _tokenId The token a bidder wants to create an offer for\r\n    function createOffer(uint256 _tokenId) external payable whenNotFrozen {\r\n        // T = msg.value\r\n        // Check that the total amount of the offer isn't below the meow-nimum\r\n        require(msg.value >= minimumTotalValue, \"offer total value must be above minimumTotalValue\");\r\n\r\n        uint256 _offerCut = offerCut;\r\n\r\n        // P, the price that owner will see and receive if the offer is accepted.\r\n        uint256 offerPrice = _computeOfferPrice(msg.value, _offerCut);\r\n\r\n        Offer storage previousOffer = tokenIdToOffer[_tokenId];\r\n        uint256 previousExpiresAt = previousOffer.expiresAt;\r\n\r\n        uint256 toRefund = 0;\r\n\r\n        // Check if tokenId already has an offer\r\n        if (_offerExists(previousExpiresAt)) {\r\n            uint256 previousOfferTotal = uint256(previousOffer.total);\r\n\r\n            // If the previous offer is still active, the new offer needs to match the previous offer's price\r\n            // plus a minimum required increment (minimumOverbidPrice).\r\n            // We calculate the previous offer's price, the corresponding minimumOverbidPrice, and check if the\r\n            // new offerPrice is greater than or equal to the minimumOverbidPrice\r\n            // The owner is fur-tunate to have such a desirable kitty\r\n            if (_isOfferActive(previousExpiresAt)) {\r\n                uint256 previousPriceForOwner = _computeOfferPrice(previousOfferTotal, uint256(previousOffer.offerCut));\r\n                uint256 minimumOverbidPrice = _computeMinimumOverbidPrice(previousPriceForOwner);\r\n                require(offerPrice >= minimumOverbidPrice, \"overbid price must match minimum price increment criteria\");\r\n            }\r\n\r\n            uint256 cfoEarnings = previousOffer.unsuccessfulFee;\r\n            // Bidder gets refund: T - flat fee\r\n            // The in-fur-ior offer gets refunded for free, how nice.\r\n            toRefund = previousOfferTotal - cfoEarnings;\r\n\r\n            totalCFOEarnings += cfoEarnings;\r\n        }\r\n\r\n        uint256 newExpiresAt = now + globalDuration;\r\n\r\n        // Get a reference of previous bidder address before overwriting with new offer.\r\n        // This is only needed if there is refund\r\n        address previousBidder;\r\n        if (toRefund > 0) {\r\n            previousBidder = previousOffer.bidder;\r\n        }\r\n\r\n        tokenIdToOffer[_tokenId] = Offer(\r\n            uint64(newExpiresAt),\r\n            msg.sender,\r\n            uint16(_offerCut),\r\n            uint128(msg.value),\r\n            uint128(unsuccessfulFee)\r\n        );\r\n\r\n        // Postpone the refund until the previous offer has been overwritten by the new offer.\r\n        if (toRefund > 0) {\r\n            // Finally, sending funds to this bidder. If failed, the fund will be kept in escrow\r\n            // under lostAndFound's address\r\n            _tryPushFunds(\r\n                _tokenId,\r\n                previousBidder,\r\n                toRefund\r\n            );\r\n        }\r\n\r\n        emit OfferCreated(\r\n            _tokenId,\r\n            msg.sender,\r\n            newExpiresAt,\r\n            msg.value,\r\n            offerPrice\r\n        );\r\n    }\r\n\r\n    /// @notice Cancels an offer that must exist and be active currently. This moves funds from this contract\r\n    ///  back to the the bidder, after a cut has been taken.\r\n    /// @notice Works only when contract is not frozen.\r\n    /// @param _tokenId The token specified by the offer a bidder wants to cancel\r\n    function cancelOffer(uint256 _tokenId) external whenNotFrozen {\r\n        // Check that offer exists and is active currently\r\n        Offer storage offer = tokenIdToOffer[_tokenId];\r\n        uint256 expiresAt = offer.expiresAt;\r\n        require(_offerExists(expiresAt), \"offer to cancel must exist\");\r\n        require(_isOfferActive(expiresAt), \"offer to cancel must not be expired\");\r\n\r\n        address bidder = offer.bidder;\r\n        require(msg.sender == bidder, \"caller must be bidder of offer to be cancelled\");\r\n\r\n        // T\r\n        uint256 total = uint256(offer.total);\r\n        // P = T - S; Bidder gets all of P, CFO gets all of T - P\r\n        uint256 toRefund = _computeOfferPrice(total, offer.offerCut);\r\n        uint256 cfoEarnings = total - toRefund;\r\n\r\n        // Remove offer from storage\r\n        delete tokenIdToOffer[_tokenId];\r\n\r\n        // Add to CFO's balance\r\n        totalCFOEarnings += cfoEarnings;\r\n\r\n        // Transfer money in escrow back to bidder\r\n        _tryPushFunds(_tokenId, bidder, toRefund);\r\n\r\n        emit OfferCancelled(\r\n            _tokenId,\r\n            bidder,\r\n            toRefund,\r\n            cfoEarnings\r\n        );\r\n    }\r\n\r\n    /// @notice Fulfills an offer that must exist and be active currently. This moves the funds of the\r\n    ///  offer held in escrow in this contract to the owner of the token, and atomically transfers the\r\n    ///  token from the owner to the bidder. A cut is taken by this contract.\r\n    /// @notice We also acknowledge the paw-sible difficulties of keeping in-sync with the Ethereum\r\n    ///  blockchain, and have allowed for fulfilling offers by specifying the _minOfferPrice at which the owner\r\n    ///  of the token is happy to accept the offer. Thus, the owner will always receive the latest offer\r\n    ///  price, which can only be at least the _minOfferPrice that was specified. Specifically, this\r\n    ///  implementation is designed to prevent the edge case where the owner accidentally accepts an offer\r\n    ///  with a price lower than intended. For example, this can happen when the owner fulfills the offer\r\n    ///  precisely when the offer expires and is subsequently replaced with a new offer priced lower.\r\n    /// @notice Works only when contract is not frozen.\r\n    /// @dev We make sure that the token is not on auction when we fulfill an offer, because the owner of the\r\n    ///  token would be the auction contract instead of the user. This function requires that this Offers contract\r\n    ///  is approved for the token in order to make the call to transfer token ownership. This is sufficient\r\n    ///  because approvals are cleared on transfer (including transfer to the auction).\r\n    /// @param _tokenId The token specified by the offer that will be fulfilled.\r\n    /// @param _minOfferPrice The minimum price at which the owner of the token is happy to accept the offer.\r\n    function fulfillOffer(uint256 _tokenId, uint128 _minOfferPrice) external whenNotFrozen {\r\n        // Check that offer exists and is active currently\r\n        Offer storage offer = tokenIdToOffer[_tokenId];\r\n        uint256 expiresAt = offer.expiresAt;\r\n        require(_offerExists(expiresAt), \"offer to fulfill must exist\");\r\n        require(_isOfferActive(expiresAt), \"offer to fulfill must not be expired\");\r\n\r\n        // Get the owner of the token\r\n        address owner = nonFungibleContract.ownerOf(_tokenId);\r\n\r\n        require(msg.sender == cooAddress || msg.sender == owner, \"only COO or the owner can fulfill order\");\r\n\r\n        // T\r\n        uint256 total = uint256(offer.total);\r\n        // P = T - S\r\n        uint256 offerPrice = _computeOfferPrice(total, offer.offerCut);\r\n\r\n        // Check if the offer price is below the minimum that the owner is happy to accept the offer for\r\n        require(offerPrice >= _minOfferPrice, \"cannot fulfill offer – offer price too low\");\r\n\r\n        // Get a reference of the bidder address befur removing offer from storage\r\n        address bidder = offer.bidder;\r\n\r\n        // Remove offer from storage\r\n        delete tokenIdToOffer[_tokenId];\r\n\r\n        // Transfer token on behalf of owner to bidder\r\n        nonFungibleContract.transferFrom(owner, bidder, _tokenId);\r\n\r\n        // NFT has been transferred! Now calculate fees and transfer fund to the owner\r\n        // T - P, the CFO's earnings\r\n        uint256 cfoEarnings = total - offerPrice;\r\n        totalCFOEarnings += cfoEarnings;\r\n\r\n        // Transfer money in escrow to owner\r\n        _tryPushFunds(_tokenId, owner, offerPrice);\r\n\r\n        emit OfferFulfilled(\r\n            _tokenId,\r\n            bidder,\r\n            owner,\r\n            offerPrice,\r\n            cfoEarnings\r\n        );\r\n    }\r\n\r\n    /// @notice Removes any existing and inactive (expired) offers from storage. In doing so, this contract\r\n    ///  takes a flat fee from the total amount attached to each offer before sending the remaining funds\r\n    ///  back to the bidder.\r\n    /// @notice Nothing will be done if the offer for a token is either non-existent or active.\r\n    /// @param _tokenIds The array of tokenIds that will be removed from storage\r\n    function batchRemoveExpired(uint256[] _tokenIds) external whenNotFrozen {\r\n        uint256 len = _tokenIds.length;\r\n\r\n        // Use temporary accumulator\r\n        uint256 cumulativeCFOEarnings = 0;\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            uint256 tokenId = _tokenIds[i];\r\n            Offer storage offer = tokenIdToOffer[tokenId];\r\n            uint256 expiresAt = offer.expiresAt;\r\n\r\n            // Skip the offer if not exist\r\n            if (!_offerExists(expiresAt)) {\r\n                continue;\r\n            }\r\n            // Skip if the offer has not expired yet\r\n            if (_isOfferActive(expiresAt)) {\r\n                continue;\r\n            }\r\n\r\n            // Get a reference of the bidder address before removing offer from storage\r\n            address bidder = offer.bidder;\r\n\r\n            // CFO gets the flat fee\r\n            uint256 cfoEarnings = uint256(offer.unsuccessfulFee);\r\n\r\n            // Bidder gets refund: T - flat\r\n            uint256 toRefund = uint256(offer.total) - cfoEarnings;\r\n\r\n            // Ensure the previous offer has been removed before refunding\r\n            delete tokenIdToOffer[tokenId];\r\n\r\n            // Add to cumulative balance of CFO's earnings\r\n            cumulativeCFOEarnings += cfoEarnings;\r\n\r\n            // Finally, sending funds to this bidder. If failed, the fund will be kept in escrow\r\n            // under lostAndFound's address\r\n            _tryPushFunds(\r\n                tokenId,\r\n                bidder,\r\n                toRefund\r\n            );\r\n\r\n            emit ExpiredOfferRemoved(\r\n                tokenId,\r\n                bidder,\r\n                toRefund,\r\n                cfoEarnings\r\n            );\r\n        }\r\n\r\n        // Add to CFO's balance if any expired offer has been removed\r\n        if (cumulativeCFOEarnings > 0) {\r\n            totalCFOEarnings += cumulativeCFOEarnings;\r\n        }\r\n    }\r\n\r\n    /// @notice Updates an existing and active offer by setting a new expiration time and, optionally, raise\r\n    ///  the price of the offer.\r\n    /// @notice As the offers are always using the configuration values currently in storage, the updated\r\n    ///  offer may be adhering to configuration values that are different at the time of its original creation.\r\n    /// @dev We check msg.value to determine if the offer price should be raised. If 0, only a new\r\n    ///  expiration time is set.\r\n    /// @param _tokenId The token specified by the offer that will be updated.\r\n    function updateOffer(uint256 _tokenId) external payable whenNotFrozen {\r\n        // Check that offer exists and is active currently\r\n        Offer storage offer = tokenIdToOffer[_tokenId];\r\n        uint256 expiresAt = uint256(offer.expiresAt);\r\n        require(_offerExists(expiresAt), \"offer to update must exist\");\r\n        require(_isOfferActive(expiresAt), \"offer to update must not be expired\");\r\n\r\n        require(msg.sender == offer.bidder, \"caller must be bidder of offer to be updated\");\r\n\r\n        uint256 newExpiresAt = now + globalDuration;\r\n\r\n        // Check if the caller wants to raise the offer as well\r\n        if (msg.value > 0) {\r\n            // Set the new price\r\n            offer.total += uint128(msg.value);\r\n        }\r\n\r\n        offer.expiresAt = uint64(newExpiresAt);\r\n\r\n        emit OfferUpdated(_tokenId, msg.sender, newExpiresAt, msg.value);\r\n\r\n    }\r\n\r\n    /// @notice Sends funds of each existing offer held in escrow back to bidders. The function is callable\r\n    ///  by anyone.\r\n    /// @notice Works only when contract is frozen. In this case, we want to allow all funds to be returned\r\n    ///  without taking any fees.\r\n    /// @param _tokenId The token specified by the offer a bidder wants to withdraw funds for.\r\n    function bidderWithdrawFunds(uint256 _tokenId) external whenFrozen {\r\n        // Check that offer exists\r\n        Offer storage offer = tokenIdToOffer[_tokenId];\r\n        require(_offerExists(offer.expiresAt), \"offer to withdraw funds from must exist\");\r\n        require(msg.sender == offer.bidder, \"only bidders can withdraw their funds in escrow\");\r\n\r\n        // Get a reference of the total to withdraw before removing offer from storage\r\n        uint256 total = uint256(offer.total);\r\n\r\n        delete tokenIdToOffer[_tokenId];\r\n\r\n        // Send funds back to bidders!\r\n        msg.sender.transfer(total);\r\n\r\n        emit BidderWithdrewFundsWhenFrozen(_tokenId, msg.sender, total);\r\n    }\r\n\r\n    /// @notice we don't accept any value transfer.\r\n    function() external payable {\r\n        revert(\"we don't accept any payments!\");\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"cfoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchRemoveExpired\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newLostAndFound\",\"type\":\"address\"}],\"name\":\"setLostAndFound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCEO\",\"type\":\"address\"}],\"name\":\"setCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCOO\",\"type\":\"address\"}],\"name\":\"setCOO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOfferCut\",\"type\":\"uint256\"}],\"name\":\"setOfferCut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lostAndFoundAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinimumPriceIncrement\",\"type\":\"uint256\"}],\"name\":\"setMinimumPriceIncrement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTotalLostAndFoundBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newMinTotal\",\"type\":\"uint256\"}],\"name\":\"setMinimumTotalValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCFO\",\"type\":\"address\"}],\"name\":\"setCFO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_minOfferPrice\",\"type\":\"uint128\"}],\"name\":\"fulfillOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"updateOffer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCFOEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTotalValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalLostAndFoundBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDuration\",\"type\":\"uint256\"}],\"name\":\"setGlobalDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawTotalCFOEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"createOffer\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cooAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"offerCut\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newUnsuccessfulFee\",\"type\":\"uint256\"}],\"name\":\"setUnsuccessfulFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unsuccessfulFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToOffer\",\"outputs\":[{\"name\":\"expiresAt\",\"type\":\"uint64\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"offerCut\",\"type\":\"uint16\"},{\"name\":\"total\",\"type\":\"uint128\"},{\"name\":\"unsuccessfulFee\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumPriceIncrement\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nonFungibleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bidderWithdrawFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_nftAddress\",\"type\":\"address\"},{\"name\":\"_cooAddress\",\"type\":\"address\"},{\"name\":\"_globalDuration\",\"type\":\"uint256\"},{\"name\":\"_minimumTotalValue\",\"type\":\"uint256\"},{\"name\":\"_minimumPriceIncrement\",\"type\":\"uint256\"},{\"name\":\"_unsuccessfulFee\",\"type\":\"uint256\"},{\"name\":\"_offerCut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"offerPrice\",\"type\":\"uint256\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bidderReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"OfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ownerReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"OfferFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newExpiresAt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"totalRaised\",\"type\":\"uint256\"}],\"name\":\"OfferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bidderReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ExpiredOfferRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidderWithdrewFundsWhenFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PushFundsFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GlobalDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MinimumTotalValueUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MinimumPriceIncrementUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OfferCutUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnsuccessfulFeeUpdated\",\"type\":\"event\"}]","ContractName":"Offers","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000006012c8cf97bead5deae237070f9587f8e7a266d00000000000000000000000093ff7574636771a4ec31c5aedf6d11aaaf0b6ef5000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000001833eec2884800000000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000001c6bf5263400000000000000000000000000000000000000000000000000000000000000000384","Library":"","SwarmSource":"bzzr://0e3df89fcaa9cd9ef8ca3148fbd0761c56830a500a46fbd48009a8ac64154e9a"}]}