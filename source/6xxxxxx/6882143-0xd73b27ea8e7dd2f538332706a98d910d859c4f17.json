{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ninterface ERC721 {\r\n    function totalSupply() external view returns (uint256 tokens);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    function exists(uint256 tokenId) external view returns (bool tokenExists);\r\n    function approve(address to, uint256 tokenId) external;\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function tokensOf(address owner) external view returns (uint256[] tokens);\r\n    //function tokenByIndex(uint256 index) external view returns (uint256 token);\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n}\r\n\r\ncontract WWGClanCoupon is ERC721 {\r\n    using SafeMath for uint256;\r\n    \r\n    // Clan contract not finalized/deployed yet, so buyers get an ERC-721 coupon \r\n    // which will be burnt in exchange for real clan token in next few weeks \r\n    \r\n    address preLaunchMinter;\r\n    address wwgClanContract;\r\n    \r\n    uint256 numClans;\r\n    address owner; // Minor management\r\n    \r\n    event ClanMinted(address to, uint256 clanId);\r\n    \r\n    // ERC721 stuff\r\n    mapping (uint256 => address) public tokenOwner;\r\n    mapping (uint256 => address) public tokenApprovals;\r\n    mapping (address => uint256[]) public ownedTokens;\r\n    mapping(uint256 => uint256) public ownedTokensIndex;\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function setCouponMinter(address prelaunchContract) external {\r\n        require(msg.sender == owner);\r\n        require(preLaunchMinter == address(0));\r\n        preLaunchMinter = prelaunchContract;\r\n    }\r\n    \r\n    function setClanContract(address clanContract) external {\r\n        require(msg.sender == owner);\r\n        wwgClanContract = address(clanContract);\r\n    }\r\n    \r\n    function mintClan(uint256 clanId, address clanOwner) external {\r\n        require(msg.sender == address(preLaunchMinter));\r\n        require(tokenOwner[clanId] == address(0));\r\n\r\n        numClans++;\r\n        addTokenTo(clanOwner, clanId);\r\n        emit Transfer(address(0), clanOwner, clanId);\r\n    }\r\n    \r\n    // Finalized clan contract has control to redeem, so will burn this coupon upon doing so\r\n    function burnCoupon(address clanOwner, uint256 tokenId) external {\r\n        require (msg.sender == wwgClanContract);\r\n        removeTokenFrom(clanOwner, tokenId);\r\n        numClans = numClans.sub(1);\r\n        \r\n        emit ClanMinted(clanOwner, tokenId);\r\n    }\r\n    \r\n    function balanceOf(address player) public view returns (uint256) {\r\n        return ownedTokens[player].length;\r\n    }\r\n    \r\n    function ownerOf(uint256 clanId) external view returns (address) {\r\n        return tokenOwner[clanId];\r\n    }\r\n    \r\n    function totalSupply() external view returns (uint256) {\r\n        return numClans;\r\n    }\r\n    \r\n    function exists(uint256 clanId) public view returns (bool) {\r\n        return tokenOwner[clanId] != address(0);\r\n    }\r\n    \r\n    function approve(address to, uint256 clanId) external {\r\n        tokenApprovals[clanId] = to;\r\n        emit Approval(msg.sender, to, clanId);\r\n    }\r\n\r\n    function getApproved(uint256 clanId) external view returns (address operator) {\r\n        return tokenApprovals[clanId];\r\n    }\r\n    \r\n    function tokensOf(address player) external view returns (uint256[] tokens) {\r\n         return ownedTokens[player];\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 tokenId) public {\r\n        require(tokenApprovals[tokenId] == msg.sender || tokenOwner[tokenId] == msg.sender);\r\n\r\n        removeTokenFrom(from, tokenId);\r\n        addTokenTo(to, tokenId);\r\n\r\n        delete tokenApprovals[tokenId]; // Clear approval\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function removeTokenFrom(address from, uint256 tokenId) internal {\r\n        require(tokenOwner[tokenId] == from);\r\n        tokenOwner[tokenId] = address(0);\r\n        delete tokenApprovals[tokenId]; // Clear approval\r\n\r\n        uint256 tokenIndex = ownedTokensIndex[tokenId];\r\n        uint256 lastTokenIndex = ownedTokens[from].length.sub(1);\r\n        uint256 lastToken = ownedTokens[from][lastTokenIndex];\r\n\r\n        ownedTokens[from][tokenIndex] = lastToken;\r\n        ownedTokens[from][lastTokenIndex] = 0;\r\n\r\n        ownedTokens[from].length--;\r\n        ownedTokensIndex[tokenId] = 0;\r\n        ownedTokensIndex[lastToken] = tokenIndex;\r\n    }\r\n\r\n    function addTokenTo(address to, uint256 tokenId) internal {\r\n        require(balanceOf(to) == 0); // Can only own one clan (thus coupon to keep things simple)\r\n        tokenOwner[tokenId] = to;\r\n\r\n        ownedTokensIndex[tokenId] = ownedTokens[to].length;\r\n        ownedTokens[to].push(tokenId);\r\n    }\r\n\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"clanId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"operator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"clanId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clanId\",\"type\":\"uint256\"},{\"name\":\"clanOwner\",\"type\":\"address\"}],\"name\":\"mintClan\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"prelaunchContract\",\"type\":\"address\"}],\"name\":\"setCouponMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"clanId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clanContract\",\"type\":\"address\"}],\"name\":\"setClanContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"clanId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedTokensIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clanOwner\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnCoupon\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenApprovals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"clanId\",\"type\":\"uint256\"}],\"name\":\"ClanMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"WWGClanCoupon","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://15895470edb89045e483da10b685fd2ebfea6ab7aa9e5bbd9b1b33fff520af78"}]}