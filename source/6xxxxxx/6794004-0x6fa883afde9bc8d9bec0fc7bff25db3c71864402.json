{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/*\r\n* CryptoMiningWar - Build your own empire on Blockchain\r\n* Author: InspiGames\r\n* Website: https://cryptominingwar.github.io/\r\n*/\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\ncontract CryptoEngineerInterface {\r\n    uint256 public prizePool = 0;\r\n    address public gameSponsor;\r\n\r\n    function subVirus(address /*_addr*/, uint256 /*_value*/) public pure {}\r\n    function claimPrizePool(address /*_addr*/, uint256 /*_value*/) public pure {} \r\n    function isContractMiniGame() public pure returns( bool /*_isContractMiniGame*/) {}\r\n    function fallback() external payable {}\r\n}\r\ncontract CryptoMiningWarInterface {\r\n    uint256 public deadline; \r\n    function subCrystal( address /*_addr*/, uint256 /*_value*/ ) public pure {}\r\n}\r\ncontract MemoryFactoryInterface {\r\n    uint256 public factoryTotal;\r\n\r\n    function setFactoryToal(uint256 /*_value*/) public {}\r\n    function updateFactory(address /*_addr*/, uint256 /*_levelUp*/, uint256 /*_time*/) public {}\r\n    function updateLevel(address /*_addr*/) public {}\r\n    function addProgram(address /*_addr*/, uint256 /*_idx*/, uint256 /*_program*/) public {}\r\n    function subProgram(address /*_addr*/, uint256 /*_idx*/, uint256 /*_program*/) public {}\r\n\r\n    function getPrograms(address /*_addr*/) public view returns(uint256[]) {}\r\n    function getLevel(address /*_addr*/) public view returns(uint256 /*_level*/) {}\r\n    function getData(address /*_addr*/) public view returns(uint256 /*_level*/, uint256 /*_updateTime*/, uint256[] /*_programs*/) {} \r\n}\r\ninterface MiniGameInterface {\r\n    function isContractMiniGame() external pure returns( bool _isContractMiniGame );\r\n    function fallback() external payable;\r\n}\r\ncontract CryptoProgramFactory {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public administrator;\r\n\r\n    uint256 private BASE_PRICE   = 0.1 ether; \r\n    uint256 private BASE_TIME    = 4 hours; \r\n\r\n    MemoryFactoryInterface   public Memory;\r\n    CryptoMiningWarInterface public MiningWar;\r\n    CryptoEngineerInterface  public Engineer;\r\n\r\n    uint256 public miningWarDeadline;\r\n    // factory info\r\n    mapping(uint256 => Factory) public factories; \r\n    // minigame info\r\n    mapping(address => bool)    public miniGames; \r\n   \r\n    struct Factory {\r\n        uint256 level;\r\n        uint256 crystals;\r\n        uint256 programPriceByCrystals;\r\n        uint256 programPriceByDarkCrystals;\r\n        uint256 programValue; // example with level one can more 15% virus an arena(programValue = 15);\r\n        uint256 eth;\r\n        uint256 time;\r\n    }\r\n    modifier isAdministrator()\r\n    {\r\n        require(msg.sender == administrator);\r\n        _;\r\n    }\r\n    modifier onlyContractsMiniGame() \r\n    {\r\n        require(miniGames[msg.sender] == true);\r\n        _;\r\n    }\r\n    event UpdateFactory(address _addr, uint256 _crystals, uint256 _eth, uint256 _levelUp, uint256 _updateTime);\r\n    event BuyProgarams(address _addr, uint256 _crystals, uint256 _darkCrystals, uint256[] _programs);\r\n    constructor() public {\r\n        administrator = msg.sender;\r\n        // set interface contract\r\n        setMiningWarInterface(0xf84c61bb982041c030b8580d1634f00fffb89059);\r\n        setEngineerInterface(0x69fd0e5d0a93bf8bac02c154d343a8e3709adabf);\r\n        setMemoryInterface(0xa2e6461e7a109ae070b9b064ca9448b301404784);\r\n    }\r\n    function initFactory() private \r\n    {       \r\n        //                  level crystals programPriceByCrystals programPriceByDarkCrystals programValue ether            time                \r\n        factories[0] = Factory(1, 100000,         10000,           0,                         10           ,BASE_PRICE * 0, BASE_TIME * 1);\r\n        factories[1] = Factory(2, 500000,         20000,           0,                         15           ,BASE_PRICE * 1, BASE_TIME * 2);\r\n        factories[2] = Factory(3, 1500000,        40000,           0,                         20           ,BASE_PRICE * 4, BASE_TIME * 3);\r\n        factories[3] = Factory(4, 3000000,        80000,           0,                         5            ,BASE_PRICE * 5, BASE_TIME * 6);\r\n\r\n        Memory.setFactoryToal(4);\r\n    }\r\n    function () public payable\r\n    {\r\n        \r\n    }\r\n    /** \r\n    * @dev MainContract used this function to verify game's contract\r\n    */\r\n    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\r\n    {\r\n    \t_isContractMiniGame = true;\r\n    }\r\n    function upgrade(address addr) public isAdministrator\r\n    {\r\n        selfdestruct(addr);\r\n    }\r\n    /** \r\n    * @dev Main Contract call this function to setup mini game.\r\n    */\r\n    function setupMiniGame( uint256 /*_miningWarRoundNumber*/, uint256 _miningWarDeadline ) public\r\n    {\r\n        miningWarDeadline = _miningWarDeadline;   \r\n    }\r\n    // ---------------------------------------------------------------------------------------\r\n    // SET INTERFACE CONTRACT\r\n    // ---------------------------------------------------------------------------------------\r\n    \r\n    function setMemoryInterface(address _addr) public isAdministrator\r\n    {\r\n        Memory = MemoryFactoryInterface(_addr);\r\n    }\r\n    function setMiningWarInterface(address _addr) public isAdministrator\r\n    {\r\n        MiningWar = CryptoMiningWarInterface(_addr);\r\n    }\r\n    function setEngineerInterface(address _addr) public isAdministrator\r\n    {\r\n        CryptoEngineerInterface engineerInterface = CryptoEngineerInterface(_addr);\r\n        \r\n        require(engineerInterface.isContractMiniGame() == true);\r\n\r\n        Engineer = engineerInterface;\r\n    }    \r\n    //--------------------------------------------------------------------------\r\n    // SETTING CONTRACT MINI GAME \r\n    //--------------------------------------------------------------------------\r\n    function setContractMiniGame( address _contractAddress ) public isAdministrator \r\n    {\r\n        MiniGameInterface MiniGame = MiniGameInterface( _contractAddress );\r\n        if( MiniGame.isContractMiniGame() == false ) { revert(); }\r\n\r\n        miniGames[_contractAddress] = true;\r\n    }\r\n    function removeContractMiniGame(address _contractAddress) public isAdministrator\r\n    {\r\n        miniGames[_contractAddress] = false;\r\n    }\r\n    //--------------------------------------------------------------------------\r\n    // SETTING FACTORY  \r\n    //--------------------------------------------------------------------------\r\n    function addFactory(\r\n        uint256 _crystals, \r\n        uint256 _programPriceByCrystals,  \r\n        uint256 _programPriceByDarkCrystals,  \r\n        uint256 _programValue,  \r\n        uint256 _eth, \r\n        uint256 _time\r\n    ) public isAdministrator\r\n    {\r\n        uint256 factoryTotal = Memory.factoryTotal();\r\n        factories[factoryTotal] = Factory(factoryTotal +1,_crystals,_programPriceByCrystals,_programPriceByDarkCrystals,_programValue,_eth,_time);\r\n        factoryTotal += 1;\r\n        Memory.setFactoryToal(factoryTotal);\r\n    }\r\n    function setProgramValue(uint256 _idx, uint256 _value) public isAdministrator\r\n    {\r\n        Factory storage f = factories[_idx];// factory update\r\n        f.programValue = _value;\r\n    }\r\n    function setProgramPriceByCrystals(uint256 _idx, uint256 _value) public isAdministrator\r\n    {\r\n        Factory storage f = factories[_idx];// factory update\r\n        f.programPriceByCrystals = _value;\r\n    }\r\n    function setProgramPriceByDarkCrystals(uint256 _idx, uint256 _value) public isAdministrator\r\n    {\r\n        Factory storage f = factories[_idx];// factory update\r\n        f.programPriceByDarkCrystals = _value;\r\n    }\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    // MAIN CONTENT\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    /**\r\n    * @dev start the mini game\r\n    */\r\n    function startGame() public \r\n    {\r\n        require(msg.sender == administrator);\r\n        require(miningWarDeadline == 0);\r\n        \r\n        miningWarDeadline = MiningWar.deadline();\r\n\r\n        initFactory();\r\n    }\r\n    function updateFactory() public payable \r\n    {\r\n        require(miningWarDeadline > now);\r\n\r\n        Memory.updateLevel(msg.sender);\r\n        \r\n        Factory memory f = factories[uint256(Memory.getLevel(msg.sender))];// factory update\r\n\r\n        if (msg.value < f.eth) revert();\r\n\r\n        MiningWar.subCrystal(msg.sender, f.crystals);\r\n\r\n        uint256 updateTime = now + f.time;\r\n        uint256 levelUp     = f.level;\r\n\r\n        Memory.updateFactory(msg.sender, levelUp, updateTime);\r\n\r\n        if (msg.value > 0) {\r\n            uint256 fee = devFee(msg.value);\r\n            address gameSponsor = Engineer.gameSponsor();\r\n            gameSponsor.transfer(fee);\r\n            administrator.transfer(fee);\r\n\r\n            Engineer.fallback.value(SafeMath.sub(msg.value, 2 * fee));\r\n        }\r\n\r\n        emit UpdateFactory(msg.sender, f.crystals, msg.value, levelUp, updateTime);\r\n    }\r\n\r\n    function buyProgarams(uint256[] _programs) public\r\n    {\r\n        require(_programs.length <= Memory.factoryTotal());\r\n        require(miningWarDeadline > now);\r\n\r\n        Memory.updateLevel(msg.sender);\r\n\r\n        uint256 factoryLevel = Memory.getLevel(msg.sender);\r\n        uint256 crystals = 0;\r\n        uint256 darkCrystals =0; \r\n\r\n        for (uint256 idx = 0; idx < _programs.length; idx ++) {\r\n            Factory memory f = factories[idx];\r\n            uint256 level = idx + 1;\r\n            if (_programs[idx] > 0 && factoryLevel < level) revert();\r\n            if (_programs[idx] > 0) {\r\n                crystals     += SafeMath.mul(_programs[idx], f.programPriceByCrystals);\r\n                darkCrystals += SafeMath.mul(_programs[idx], f.programPriceByDarkCrystals);\r\n                Memory.addProgram(msg.sender, idx, _programs[idx]);\r\n            }    \r\n        }\r\n\r\n        if (crystals > 0) MiningWar.subCrystal(msg.sender, crystals);\r\n        // if (darkCrystals > 0) BossWannaCry.subDarkCrystal(msg.sender, darkCrystals);\r\n        emit BuyProgarams(msg.sender, crystals, darkCrystals, _programs);\r\n    }\r\n    function subPrograms(address _addr, uint256[] _programs) public onlyContractsMiniGame\r\n    {\r\n        uint256 factoryTotal = Memory.factoryTotal();\r\n        require(_programs.length <= factoryTotal);\r\n\r\n        for (uint256 idx = 0; idx < _programs.length; idx++) {\r\n            if (_programs[idx] > 0) Memory.subProgram(_addr, idx, _programs[idx]);\r\n        }\r\n    }\r\n    function getData(address _addr) \r\n    public\r\n    view\r\n    returns(\r\n        uint256   _factoryTotal,\r\n        uint256   _factoryLevel,\r\n        uint256   _factoryTime,\r\n        uint256[] _programs\r\n    ) {\r\n        _factoryTotal = Memory.factoryTotal();\r\n        (_factoryLevel, _factoryTime, _programs) = Memory.getData(_addr);\r\n    }\r\n    function getProgramsValue() public view returns(uint256[]) {\r\n        uint256 factoryTotal = Memory.factoryTotal();\r\n        uint256[] memory _programsValue = new uint256[](factoryTotal);\r\n        \r\n        for(uint256 idx = 0; idx < factoryTotal; idx++) {\r\n            Factory memory f    = factories[idx];\r\n            _programsValue[idx] = f.programValue;\r\n        }\r\n        return _programsValue;\r\n    }\r\n    // INTERFACE\r\n    // --------------------------------------------------------------------------------------------------------------\r\n    function devFee(uint256 _amount) private pure returns(uint256)\r\n    {\r\n        return SafeMath.div(SafeMath.mul(_amount, 5), 100);\r\n    }\r\n  \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"setContractMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_programs\",\"type\":\"uint256[]\"}],\"name\":\"subPrograms\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isContractMiniGame\",\"outputs\":[{\"name\":\"_isContractMiniGame\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getData\",\"outputs\":[{\"name\":\"_factoryTotal\",\"type\":\"uint256\"},{\"name\":\"_factoryLevel\",\"type\":\"uint256\"},{\"name\":\"_factoryTime\",\"type\":\"uint256\"},{\"name\":\"_programs\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMemoryInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setProgramPriceByDarkCrystals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningWarDeadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getProgramsValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factories\",\"outputs\":[{\"name\":\"level\",\"type\":\"uint256\"},{\"name\":\"crystals\",\"type\":\"uint256\"},{\"name\":\"programPriceByCrystals\",\"type\":\"uint256\"},{\"name\":\"programPriceByDarkCrystals\",\"type\":\"uint256\"},{\"name\":\"programValue\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMiningWarInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateFactory\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"removeContractMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_crystals\",\"type\":\"uint256\"},{\"name\":\"_programPriceByCrystals\",\"type\":\"uint256\"},{\"name\":\"_programPriceByDarkCrystals\",\"type\":\"uint256\"},{\"name\":\"_programValue\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"addFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"miniGames\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Engineer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"_miningWarDeadline\",\"type\":\"uint256\"}],\"name\":\"setupMiniGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Memory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MiningWar\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setProgramValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idx\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setProgramPriceByCrystals\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_programs\",\"type\":\"uint256[]\"}],\"name\":\"buyProgarams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setEngineerInterface\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_crystals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_levelUp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_updateTime\",\"type\":\"uint256\"}],\"name\":\"UpdateFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_crystals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_darkCrystals\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_programs\",\"type\":\"uint256[]\"}],\"name\":\"BuyProgarams\",\"type\":\"event\"}]","ContractName":"CryptoProgramFactory","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://36e0b98e2d4657091d74bd4545bae2c0f3f091b703ef9395198cfbf5ed9b0b26"}]}