{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(\r\n      address indexed owner,\r\n      address indexed spender,\r\n      uint256 value\r\n    );\r\n}/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n/**\r\n * @title SimpleToken\r\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\r\n * Note they can later distribute these tokens as they wish using `transfer` and other\r\n * `StandardToken` functions.\r\n */\r\ncontract PostboyToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    struct Account {\r\n        uint256 balance;\r\n        uint256 lastDividends;\r\n    }\r\n\r\n    string public constant name = \"PostboyToken\"; // solium-disable-line uppercase\r\n    string public constant symbol = \"PBY\"; // solium-disable-line uppercase\r\n    uint8 public constant decimals = 0; // solium-disable-line uppercase\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 100000;\r\n\r\n    uint256 public totalDividends;\r\n    uint256 totalSupply_;\r\n    \r\n    mapping (address => Account) accounts;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n    address public admin;\r\n    address public payer;\r\n\r\n  /**\r\n   * @dev Constructor that gives msg.sender all of existing tokens.\r\n   */\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        totalDividends = 0;\r\n        accounts[msg.sender].balance = INITIAL_SUPPLY;\r\n        admin = msg.sender;\r\n        payer = address(0);\r\n        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n      public\r\n      returns (bool)\r\n    {\r\n        require(_value <= allowed[_from][msg.sender]);\r\n\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return accounts[_owner].balance;\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _value The amount of tokens to be spent.\r\n    */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param _owner address The address which owns the funds.\r\n    * @param _spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n      public\r\n      view\r\n      returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n      public\r\n      returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n            allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param _spender The address which will spend the funds.\r\n    * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n      public\r\n      returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Get dividents sum by address\r\n    */\r\n    function dividendBalanceOf(address account) public view returns (uint256) {\r\n        uint256 newDividends = totalDividends.sub(accounts[account].lastDividends);\r\n        uint256 product = accounts[account].balance.mul(newDividends);\r\n        return product.div(totalSupply_);\r\n    }\r\n\r\n    /**\r\n    * @dev Withdraw dividends\r\n    */\r\n    function claimDividend() public {\r\n        uint256 owing = dividendBalanceOf(msg.sender);\r\n        if (owing > 0) {\r\n            accounts[msg.sender].lastDividends = totalDividends;\r\n            msg.sender.transfer(owing);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Tokens transfer will not work if sender or recipient has dividends\r\n    */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        require(_to != address(0));\r\n        require(_value <= accounts[_from].balance);\r\n        require(accounts[_to].balance + _value >= accounts[_to].balance);\r\n    \r\n        uint256 fromOwing = dividendBalanceOf(_from);\r\n        uint256 toOwing = dividendBalanceOf(_to);\r\n        require(fromOwing <= 0 && toOwing <= 0);\r\n    \r\n        accounts[_from].balance = accounts[_from].balance.sub(_value);\r\n        accounts[_to].balance = accounts[_to].balance.add(_value);\r\n    \r\n        accounts[_to].lastDividends = accounts[_from].lastDividends;\r\n    \r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function changePayer(address _payer) public returns (bool) {\r\n        require(msg.sender == admin);\r\n        payer = _payer;\r\n    }\r\n\r\n    function sendDividends() public payable {\r\n        require(msg.sender == payer);\r\n        \r\n        totalDividends = totalDividends.add(msg.value);\r\n    }\r\n\r\n    function () external payable {\r\n        require(false);\r\n    }\r\n}\r\ncontract PostboyTokenMiddleware {\r\n   \r\n    address public adminAddress_1;\r\n    address public adminAddress_2;\r\n    address public adminAddress_3;\r\n\r\n    PostboyToken public token;\r\n\r\n    modifier isAdmin() {\r\n        require(msg.sender == adminAddress_1 || msg.sender == adminAddress_2 || msg.sender == adminAddress_3);\r\n        _;\r\n    }\r\n\r\n    constructor(address admin_1, address admin_2, address admin_3, PostboyToken _token) public {\r\n        adminAddress_1 = admin_1;\r\n        adminAddress_2 = admin_2;\r\n        adminAddress_3 = admin_3;\r\n\r\n        token = _token;\r\n    }\r\n\r\n    function transferDividends() isAdmin public {\r\n        token.sendDividends.value(address(this).balance)();\r\n    }\r\n\r\n    function () external payable {\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress_1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress_3\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferDividends\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminAddress_2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"admin_1\",\"type\":\"address\"},{\"name\":\"admin_2\",\"type\":\"address\"},{\"name\":\"admin_3\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"PostboyTokenMiddleware","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f40a89234b7d8661056e58562819ec078767308a000000000000000000000000bcfedb37a51b29352db1b85994cc8b9b45e23f6a000000000000000000000000d03cc405e9c60644e2b1c56dacc7c806aec06da4000000000000000000000000b62e20cf2305d1e2000970539a758d86eb7a7178","Library":"","SwarmSource":"bzzr://fad489a9fad3c769f626ddf4c374df704dd0d02859596c1e9862b6d2e41ceffb"}]}