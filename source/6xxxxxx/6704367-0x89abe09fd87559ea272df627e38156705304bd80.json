{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error.\r\n */\r\nlibrary SafeMath {\r\n    // Multiplies two numbers, throws on overflow./\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) return 0;\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    // Integer division of two numbers, truncating the quotient.\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    // Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    // Adds two numbers, throws on overflow.\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Smart-Mining 'mining-pool & token-distribution'-contract - https://smart-mining.io - mail@smart-mining.io\r\n */\r\ncontract SmartMining {\r\n    using SafeMath for uint256;\r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Variables\r\n    // -------------------------------------------------------------------------\r\n    \r\n    string  constant public name     = \"smart-mining.io\"; // EIP-20\r\n    string  constant public symbol   = \"SMT\";             // EIP-20\r\n    uint8   constant public decimals = 18;                // EIP-20\r\n    uint256 public totalSupply       = 10000;             // EIP-20\r\n    \r\n    struct Member {                                       // 'Member'-struct\r\n        bool    crowdsalePrivateSale;                     // If 'true', member can participate in crowdsale before crowdsaleOpen == true\r\n        uint256 crowdsaleMinPurchase;                     // Approved minimum crowdsale purchase in Wei\r\n        uint256 balance;                                  // Token balance in Ici, represents the percent of mining profits\r\n        uint256 unpaid;                                   // Available Wei for withdrawal, + 1 in storage for gas optimization and indicator if address is member of SmartMining contract\r\n    }                                                  \r\n    mapping (address => Member) public members;           // All Crowdsale members as 'Member'-struct\r\n    \r\n    uint16    public memberCount;                         // Count of all SmartMining members inclusive the team-contract\r\n    address[] public memberIndex;                         // Lookuptable of all member addresses to iterate on deposit over and assign unpaid Ether to members\r\n    address   public owner;                               // Owner of this contract\r\n    address   public withdrawer;                          // Allowed executor of automatic processed member whitdrawals (SmartMining-API)\r\n    address   public depositor;                           // Allowed depositor of mining profits\r\n    \r\n    bool      public crowdsaleOpen;                       // 'true' if crowdsale is open for investors\r\n    bool      public crowdsaleFinished;                   // 'true' after crowdsaleCap was reached\r\n    address   public crowdsaleWallet;                     // Address where crowdsale funds are collected\r\n    uint256   public crowdsaleCap;                        // Wei after crowdsale is finished\r\n    uint256   public crowdsaleRaised;                     // Amount of wei raised in crowdsale\r\n    \r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n    \r\n    constructor (uint256 _crowdsaleCapEth, address _crowdsaleWallet, address _teamContract, uint256 _teamShare, address _owner) public {\r\n        require(_crowdsaleCapEth != 0 && _crowdsaleWallet != 0x0 && _teamContract != 0x0 && _teamShare != 0 && _owner != 0x0);\r\n        \r\n        // Initialize contract owner and trigger 'SetOwner'-event\r\n        owner = _owner;\r\n        emit SetOwner(owner);\r\n        \r\n        // Update totalSupply with the decimal amount\r\n        totalSupply = totalSupply.mul(10 ** uint256(decimals));\r\n        \r\n        // Convert '_crowdsaleCapEth' from Ether to Wei\r\n        crowdsaleCap = _crowdsaleCapEth.mul(10 ** 18);\r\n        \r\n        // Initialize withdrawer and crowdsaleWallet\r\n        withdrawer = msg.sender;\r\n        crowdsaleWallet = _crowdsaleWallet;\r\n        \r\n        // Assign totalSupply to contract address and trigger 'from 0x0'-'Transfer'-event for token creation\r\n        members[address(this)].balance = totalSupply;\r\n        emit Transfer(0x0, address(this), totalSupply);\r\n        \r\n        // Initialize team-contract\r\n        members[_teamContract].unpaid = 1;\r\n        memberIndex.push(_teamContract); // memberIndex[0] will become team-contract address\r\n        memberCount++;\r\n        \r\n        // Transfer team tokens\r\n        uint256 teamTokens = totalSupply.mul(_teamShare).div(100);\r\n        members[address(this)].balance = members[address(this)].balance.sub(teamTokens);\r\n        members[_teamContract].balance = teamTokens;\r\n        emit Transfer(address(this), _teamContract, teamTokens);\r\n    }\r\n    \r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Events\r\n    // -------------------------------------------------------------------------\r\n    \r\n    event SetOwner(address indexed owner);\r\n    event SetDepositor(address indexed depositor);\r\n    event SetWithdrawer(address indexed withdrawer);\r\n    event SetTeamContract(address indexed teamContract);\r\n    event Approve(address indexed member, uint256 crowdsaleMinPurchase, bool privateSale);\r\n    event Participate(address indexed member, uint256 value, uint256 tokens);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event ForwardCrowdsaleFunds(address indexed to, uint256 value);\r\n    event CrowdsaleStarted(bool value);\r\n    event CrowdsaleFinished(bool value);\r\n    event Withdraw(address indexed member, uint256 value);\r\n    event Deposit(address indexed from, uint256 value);\r\n    \r\n    \r\n    // -------------------------------------------------------------------------\r\n    // WITHDRAWER (SmartMining-API) & OWNER ONLY external maintenance interface\r\n    // -------------------------------------------------------------------------\r\n    \r\n    function approve (address _beneficiary, uint256 _ethMinPurchase, bool _privateSale) external {\r\n        require(msg.sender == owner || msg.sender == withdrawer, \"Only SmartMining-API and contract owner allowed to approve.\");\r\n        require(crowdsaleFinished == false, \"No new approvals after crowdsale finished.\");\r\n        require(_beneficiary != 0x0);\r\n        \r\n        if( members[_beneficiary].unpaid == 1 ) {\r\n            members[_beneficiary].crowdsaleMinPurchase = _ethMinPurchase.mul(10 ** 18);\r\n            members[_beneficiary].crowdsalePrivateSale = _privateSale;\r\n        } else {\r\n            members[_beneficiary].unpaid = 1;\r\n            members[_beneficiary].crowdsaleMinPurchase = _ethMinPurchase.mul(10 ** 18);\r\n            members[_beneficiary].crowdsalePrivateSale = _privateSale;\r\n            \r\n            memberIndex.push(_beneficiary);\r\n            memberCount++;\r\n        }\r\n        \r\n        emit Approve(_beneficiary, members[_beneficiary].crowdsaleMinPurchase, _privateSale);\r\n    }\r\n    \r\n    \r\n    // -------------------------------------------------------------------------\r\n    // OWNER ONLY external maintenance interface\r\n    // -------------------------------------------------------------------------\r\n    \r\n    modifier onlyOwner () {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function setTeamContract (address _newTeamContract) external onlyOwner {\r\n        require(_newTeamContract != 0x0 && _newTeamContract != memberIndex[0]);\r\n        \r\n        // Move team-contract member to new addresss\r\n        members[_newTeamContract] = members[memberIndex[0]];\r\n        delete members[memberIndex[0]];\r\n        \r\n        // Trigger 'SetTeamContract' & 'Transfer'-event for token movement\r\n        emit SetTeamContract(_newTeamContract);\r\n        emit Transfer(memberIndex[0], _newTeamContract, members[_newTeamContract].balance);\r\n        \r\n        // Update memberIndex[0] to new team-contract address\r\n        memberIndex[0] = _newTeamContract;\r\n    }\r\n    \r\n    function setOwner (address _newOwner) external onlyOwner {\r\n        if( _newOwner != 0x0 ) { owner = _newOwner; } else { owner = msg.sender; }\r\n        emit SetOwner(owner);\r\n    }\r\n    \r\n    function setDepositor (address _newDepositor) external onlyOwner {\r\n        depositor = _newDepositor;\r\n        emit SetDepositor(_newDepositor);\r\n    }\r\n    \r\n    function setWithdrawer (address _newWithdrawer) external onlyOwner {\r\n        withdrawer = _newWithdrawer;\r\n        emit SetWithdrawer(_newWithdrawer);\r\n    }\r\n    \r\n    function startCrowdsale () external onlyOwner {\r\n        require(crowdsaleFinished == false, \"Crowdsale can only be started once.\");\r\n        \r\n        crowdsaleOpen = true;\r\n        emit CrowdsaleStarted(true);\r\n    }\r\n    \r\n    function cleanupMember (uint256 _memberIndex) external onlyOwner {\r\n        require(members[memberIndex[_memberIndex]].unpaid == 1, \"Not a member.\");\r\n        require(members[memberIndex[_memberIndex]].balance == 0, \"Only members without participation can be deleted.\");\r\n        \r\n        // Delete whitelisted member which not participated in crowdsale\r\n        delete members[memberIndex[_memberIndex]];\r\n        memberIndex[_memberIndex] = memberIndex[memberIndex.length-1];\r\n        memberIndex.length--;\r\n        memberCount--;\r\n    }\r\n    \r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Public external interface\r\n    // -------------------------------------------------------------------------\r\n    \r\n    function () external payable {\r\n        require(crowdsaleOpen || members[msg.sender].crowdsalePrivateSale || crowdsaleFinished, \"smart-mining.io crowdsale not started yet.\");\r\n        \r\n        if(crowdsaleFinished)\r\n            deposit();\r\n        if(crowdsaleOpen || members[msg.sender].crowdsalePrivateSale)\r\n            participate();\r\n    }\r\n    \r\n    function deposit () public payable {\r\n        // Pre validate deposit\r\n        require(crowdsaleFinished, \"Deposits only possible after crowdsale finished.\");\r\n        require(msg.sender == depositor, \"Only 'depositor' allowed to deposit.\");\r\n        require(msg.value >= 10**9, \"Minimum deposit 1 gwei.\");\r\n        \r\n        // Distribute deposited Ether to all SmartMining members related to their profit-share which is representat by their ICE token balance\r\n        for (uint i=0; i<memberIndex.length; i++) {\r\n            members[memberIndex[i]].unpaid = \r\n                // Adding current deposit to members unpaid Wei amount\r\n                members[memberIndex[i]].unpaid.add(\r\n                    // MemberTokenBalance * DepositedWei / totalSupply = WeiAmount of member-share to be added to members unpaid holdings\r\n                    members[memberIndex[i]].balance.mul(msg.value).div(totalSupply)\r\n                );\r\n        }\r\n        \r\n        // Trigger 'Deposit'-event\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n    \r\n    function participate () public payable {\r\n        // Pre validate purchase\r\n        require(members[msg.sender].unpaid == 1, \"Only whitelisted members are allowed to participate!\");\r\n        require(crowdsaleOpen || members[msg.sender].crowdsalePrivateSale, \"Crowdsale is not open.\");\r\n        require(msg.value != 0, \"No Ether attached to this buy order.\");\r\n        require(members[msg.sender].crowdsaleMinPurchase == 0 || msg.value >= members[msg.sender].crowdsaleMinPurchase,\r\n            \"Send at least your whitelisted crowdsaleMinPurchase Ether amount!\");\r\n            \r\n        // Get token count and validate that enaugh tokens are available\r\n        uint256 tokens = crowdsaleCalcTokenAmount(msg.value);\r\n        require(members[address(this)].balance >= tokens, \"There are not enaugh Tokens left for this order.\");\r\n        emit Participate(msg.sender, msg.value, tokens);\r\n        \r\n        // Remove members crowdsaleMinPurchase for further orders\r\n        members[msg.sender].crowdsaleMinPurchase = 0;\r\n        \r\n        // Subtract tokens from contract and add tokens to members current holdings (Transfer)\r\n        members[address(this)].balance = members[address(this)].balance.sub(tokens);\r\n        members[msg.sender].balance = members[msg.sender].balance.add(tokens);\r\n        emit Transfer(address(this), msg.sender, tokens);\r\n        \r\n        // Update crowdsale states\r\n        crowdsaleRaised = crowdsaleRaised.add(msg.value);\r\n        if(members[address(this)].balance == 0) {\r\n            // Close crowdsale if all tokens are sold out\r\n            crowdsaleOpen = false;\r\n            crowdsaleFinished = true;\r\n            emit CrowdsaleFinished(true);\r\n        }\r\n        \r\n        // Forward msg.value (attached Ether) to crowdsaleWallet and trigger 'ForwardCrowdsaleFunds'-event\r\n        emit ForwardCrowdsaleFunds(crowdsaleWallet, msg.value);\r\n        crowdsaleWallet.transfer(msg.value);\r\n    }\r\n    \r\n    function crowdsaleCalcTokenAmount (uint256 _weiAmount) public view returns (uint256) {\r\n        // Multiplied by totalSupply to avoid floats in calculation\r\n        return \r\n            // _weiAmount * totalSupply / crowdsaleCap * crowdsaleSupply / totalSupply\r\n            _weiAmount\r\n            .mul(totalSupply)\r\n            .div(crowdsaleCap)\r\n            .mul( totalSupply.sub(members[memberIndex[0]].balance) )\r\n            .div(totalSupply);\r\n    }\r\n    \r\n    function withdrawOf              (address _beneficiary) external                      { _withdraw(_beneficiary); }\r\n    function withdraw                ()                     external                      { _withdraw(msg.sender); }\r\n    function balanceOf               (address _beneficiary) public view returns (uint256) { return members[_beneficiary].balance; }\r\n    function unpaidOf                (address _beneficiary) public view returns (uint256) { return members[_beneficiary].unpaid.sub(1); }\r\n    function crowdsaleIsMemberOf     (address _beneficiary) public view returns (bool)    { return members[_beneficiary].unpaid >= 1; }\r\n    function crowdsaleRemainingWei   ()                     public view returns (uint256) { return crowdsaleCap.sub(crowdsaleRaised); }\r\n    function crowdsaleRemainingToken ()                     public view returns (uint256) { return members[address(this)].balance; }\r\n    function crowdsalePercentOfTotalSupply ()               public view returns (uint256) { return totalSupply.sub(members[memberIndex[0]].balance).mul(100).div(totalSupply); }\r\n    \r\n    \r\n    // -------------------------------------------------------------------------\r\n    // Private functions, can only be called by this contract\r\n    // -------------------------------------------------------------------------\r\n    \r\n    function _withdraw (address _beneficiary) private {\r\n        // Pre-validate withdrawal\r\n        if(msg.sender != _beneficiary) {\r\n            require(msg.sender == owner || msg.sender == withdrawer, \"Only 'owner' and 'withdrawer' can withdraw for other members.\");\r\n        }\r\n        require(members[_beneficiary].unpaid >= 1, \"Not a member account.\");\r\n        require(members[_beneficiary].unpaid > 1, \"No unpaid balance on account.\");\r\n        \r\n        // Remember members unpaid amount but remove it from his contract holdings before initiating the withdrawal for security reasons\r\n        uint256 unpaid = members[_beneficiary].unpaid.sub(1);\r\n        members[_beneficiary].unpaid = 1;\r\n        \r\n        // Trigger 'Withdraw'-event\r\n        emit Withdraw(_beneficiary, unpaid);\r\n        \r\n        // Transfer the unpaid Wei amount to member address\r\n        if(_beneficiary != memberIndex[0]) {\r\n            // Client withdrawals rely on the 'gas stipend' (2300 gas) which has been checked during KYC\r\n            _beneficiary.transfer(unpaid);\r\n        } else {\r\n            // Team-contract withdrawals obtain up to 100 times more gas for further automatic processing\r\n            require( _beneficiary.call.gas(230000).value(unpaid)() );\r\n        }\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_ethMinPurchase\",\"type\":\"uint256\"},{\"name\":\"_privateSale\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"name\":\"crowdsalePrivateSale\",\"type\":\"bool\"},{\"name\":\"crowdsaleMinPurchase\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"unpaid\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleRemainingWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWithdrawer\",\"type\":\"address\"}],\"name\":\"setWithdrawer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"memberCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newTeamContract\",\"type\":\"address\"}],\"name\":\"setTeamContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsalePercentOfTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"crowdsaleCalcTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleOpen\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawOf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"participate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"unpaidOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_memberIndex\",\"type\":\"uint256\"}],\"name\":\"cleanupMember\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"crowdsaleIsMemberOf\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memberIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDepositor\",\"type\":\"address\"}],\"name\":\"setDepositor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleRemainingToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdsaleCapEth\",\"type\":\"uint256\"},{\"name\":\"_crowdsaleWallet\",\"type\":\"address\"},{\"name\":\"_teamContract\",\"type\":\"address\"},{\"name\":\"_teamShare\",\"type\":\"uint256\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"SetDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"withdrawer\",\"type\":\"address\"}],\"name\":\"SetWithdrawer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"teamContract\",\"type\":\"address\"}],\"name\":\"SetTeamContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"crowdsaleMinPurchase\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"privateSale\",\"type\":\"bool\"}],\"name\":\"Approve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Participate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ForwardCrowdsaleFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"CrowdsaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"CrowdsaleFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"}]","ContractName":"SmartMining","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000003200000000000000000000000000eaa0d485108d93fa5e8662f5be8c33917f93fc190000000000000000000000009022249225a8f5cf7cdc9355caffb4654b1e082a0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000e517cb63e4dd36533c26b1fff5deb893e63c3afa","Library":"","SwarmSource":"bzzr://4036c29945cc667fdee20180c1654beaa4f69d3def45177667cb533e13522b39"}]}