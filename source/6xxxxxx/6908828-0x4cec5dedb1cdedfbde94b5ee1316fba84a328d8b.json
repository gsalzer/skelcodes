{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nPDOne (P1) - Official Smart Contract\r\nKitpay Fintech \r\nhttps://pd1sto.com\r\n*/\r\npragma solidity 0.4.19;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      \r\n        uint256 c = a / b;\r\n        \r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n\r\n    function totalSupply()public view returns (uint total_Supply);\r\n    function balanceOf(address who)public view returns (uint256);\r\n    function allowance(address owner, address spender)public view returns (uint);\r\n    function transferFrom(address from, address to, uint value)public returns (bool ok);\r\n    function approve(address spender, uint value)public returns (bool ok);\r\n    function transfer(address to, uint value)public returns (bool ok);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n}\r\n\r\ncontract FiatContract\r\n{\r\n    function USD(uint _id) public constant returns (uint256);\r\n}\r\n\r\n\r\ncontract PDOne is ERC20\r\n{ \r\n    using SafeMath for uint256;\r\n\r\n    FiatContract price = FiatContract(0x2CDe56E5c8235D6360CCbb0c57Ce248Ca9C80909); // MAINNET FIAT ADDRESS\r\n\r\n    // Name of the token\r\n    string public constant name = \"PDOne\";\r\n    // Symbol of token\r\n    string public constant symbol = \"P1\";\r\n    uint8 public constant decimals = 8;\r\n    uint public _totalsupply = 250000000 * (uint256(10) ** decimals); // 250 million P1\r\n    address public owner;\r\n    bool stopped = false;\r\n    uint256 public startdate;\r\n    uint256 ico_first;\r\n    uint256 ico_second;\r\n    uint256 ico_third;\r\n    uint256 ico_fourth;\r\n    address central_account;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    \r\n    enum Stages {\r\n        NOTSTARTED,\r\n        ICO,\r\n        PAUSED,\r\n        ENDED\r\n    }\r\n\r\n    Stages public stage;\r\n    \r\n    modifier atStage(Stages _stage) {\r\n        if (stage != _stage)\r\n            // Contract not in expected state\r\n            revert();\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlycentralAccount {\r\n        require(msg.sender == central_account);\r\n        _;\r\n    }\r\n\r\n    function PDOne() public\r\n    {\r\n        owner = msg.sender;\r\n        balances[owner] = 90000000 * (uint256(10) ** decimals);\r\n        balances[address(this)] = 160000000 * (uint256(10) ** decimals);\r\n        stage = Stages.NOTSTARTED;\r\n        Transfer(0, owner, balances[owner]);\r\n        Transfer(0, address(this), balances[address(this)]);\r\n    }\r\n    \r\n    function () public payable atStage(Stages.ICO)\r\n    {\r\n        require(msg.value >= 1 finney); //for round up and security measures\r\n        require(!stopped && msg.sender != owner);\r\n\r\n        uint256 ethCent = price.USD(0); //one USD cent in wei\r\n        uint256 tokPrice = ethCent.mul(80); //1P1 = 80 USD cent\r\n        \r\n        tokPrice = tokPrice.div(10 ** 8); //limit to 10 places\r\n        uint256 no_of_tokens = msg.value.div(tokPrice);\r\n        \r\n        uint256 bonus_token = 0;\r\n        \r\n        // Determine the bonus based on the time and the purchased amount\r\n        if (now < ico_first)\r\n        {\r\n            if (no_of_tokens >=  2000 * (uint256(10)**decimals) &&\r\n                no_of_tokens <= 19999 * (uint256(10)**decimals))\r\n            {\r\n                bonus_token = no_of_tokens.mul(30).div(100); \r\n            }\r\n            else if (no_of_tokens >   19999 * (uint256(10)**decimals) &&\r\n                     no_of_tokens <= 149999 * (uint256(10)**decimals))\r\n            {\r\n                bonus_token = no_of_tokens.mul(30).div(100); \r\n            }\r\n            else if (no_of_tokens > 149999 * (uint256(10)**decimals))\r\n            {\r\n                bonus_token = no_of_tokens.mul(30).div(100); \r\n            }\r\n            else\r\n            {\r\n                bonus_token = no_of_tokens.mul(30).div(100); \r\n            }\r\n        }\r\n        else if (now >= ico_first && now < ico_second)\r\n        {\r\n            if (no_of_tokens >=  2000 * (uint256(10)**decimals) &&\r\n                no_of_tokens <= 19999 * (uint256(10)**decimals))\r\n            {\r\n                bonus_token = no_of_tokens.mul(25).div(100); \r\n            }\r\n            else if (no_of_tokens >   19999 * (uint256(10)**decimals) &&\r\n                     no_of_tokens <= 149999 * (uint256(10)**decimals))\r\n            {\r\n                bonus_token = no_of_tokens.mul(25).div(100); \r\n            }\r\n            else if (no_of_tokens >  149999 * (uint256(10)**decimals))\r\n            {\r\n                bonus_token = no_of_tokens.mul(25).div(100); \r\n            }\r\n            else\r\n            {\r\n                bonus_token = no_of_tokens.mul(25).div(100); \r\n            }\r\n        }\r\n        else if (now >= ico_second && now < ico_third)\r\n        {\r\n            if (no_of_tokens >=  2000 * (uint256(10)**decimals) &&\r\n                no_of_tokens <= 19999 * (uint256(10)**decimals))\r\n            {\r\n                bonus_token = no_of_tokens.mul(20).div(100); \r\n            }\r\n            else if (no_of_tokens >   19999 * (uint256(10)**decimals) &&\r\n                     no_of_tokens <= 149999 * (uint256(10)**decimals))\r\n            {\r\n                bonus_token = no_of_tokens.mul(20).div(100); \r\n            }\r\n            else if (no_of_tokens >  149999 * (uint256(10)**decimals))\r\n            {\r\n                bonus_token = no_of_tokens.mul(20).div(100); \r\n            }\r\n            else\r\n            {\r\n                bonus_token = no_of_tokens.mul(20).div(100); //\r\n            }\r\n        }\r\n        else if (now >= ico_third && now < ico_fourth)\r\n        {\r\n            if (no_of_tokens >=  2000 * (uint256(10)**decimals) &&\r\n                no_of_tokens <= 19999 * (uint256(10)**decimals))\r\n            {\r\n                bonus_token = no_of_tokens.mul(20).div(100); \r\n            }\r\n            else if (no_of_tokens >   19999 * (uint256(10)**decimals) &&\r\n                     no_of_tokens <= 149999 * (uint256(10)**decimals))\r\n            {\r\n                bonus_token = no_of_tokens.mul(20).div(100); \r\n            }\r\n            else if (no_of_tokens >  149999 * (uint256(10)**decimals))\r\n            {\r\n                bonus_token = no_of_tokens.mul(20).div(100); \r\n            }\r\n            else\r\n            {\r\n                bonus_token = no_of_tokens.mul(20).div(100); \r\n            }\r\n        }\r\n        \r\n        uint256 total_token = no_of_tokens + bonus_token;\r\n        this.transfer(msg.sender, total_token);\r\n    }\r\n    \r\n    function start_ICO() public onlyOwner atStage(Stages.NOTSTARTED) {\r\n\r\n        stage = Stages.ICO;\r\n        stopped = false;\r\n        startdate = now;\r\n        ico_first = now + 9 days;\r\n        ico_second = ico_first + 21 days;\r\n        ico_third = ico_second + 15 days;\r\n        ico_fourth = ico_third + 14 days;\r\n    \r\n    }\r\n    \r\n    // called by the owner, pause ICO\r\n    function StopICO() external onlyOwner atStage(Stages.ICO) {\r\n    \r\n        stopped = true;\r\n        stage = Stages.PAUSED;\r\n    \r\n    }\r\n\r\n    // called by the owner , resumes ICO\r\n    function releaseICO() external onlyOwner atStage(Stages.PAUSED) {\r\n    \r\n        stopped = false;\r\n        stage = Stages.ICO;\r\n    \r\n    }\r\n    \r\n    function end_ICO() external onlyOwner atStage(Stages.ICO) {\r\n    \r\n        require(now > ico_fourth);\r\n        stage = Stages.ENDED;\r\n   \r\n    }\r\n    \r\n    function burn(uint256 _amount) external onlyOwner\r\n    {\r\n        require(_amount <= balances[address(this)]);\r\n        \r\n        _totalsupply = _totalsupply.sub(_amount);\r\n        balances[address(this)] = balances[address(this)].sub(_amount);\r\n        balances[0x0] = balances[0x0].add(_amount);\r\n        Transfer(address(this), 0x0, _amount);\r\n    }\r\n     \r\n    function set_centralAccount(address central_Acccount) external onlyOwner {\r\n    \r\n        central_account = central_Acccount;\r\n    \r\n    }\r\n\r\n\r\n\r\n    // what is the total supply of PDOne\r\n    function totalSupply() public view returns (uint256 total_Supply) {\r\n    \r\n        total_Supply = _totalsupply;\r\n    \r\n    }\r\n    \r\n    // What is the balance of a particular account?\r\n    function balanceOf(address _owner)public view returns (uint256 balance) {\r\n    \r\n        return balances[_owner];\r\n    \r\n    }\r\n    \r\n\r\n    function transferFrom( address _from, address _to, uint256 _amount )public returns (bool success) {\r\n    \r\n        require( _to != 0x0);\r\n    \r\n        balances[_from] = balances[_from].sub(_amount);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n    \r\n        Transfer(_from, _to, _amount);\r\n    \r\n        return true;\r\n    }\r\n    \r\n\r\n    function approve(address _spender, uint256 _amount)public returns (bool success) {\r\n        require(_amount == 0 || allowed[msg.sender][_spender] == 0);\r\n        require( _spender != 0x0);\r\n    \r\n        allowed[msg.sender][_spender] = _amount;\r\n    \r\n        Approval(msg.sender, _spender, _amount);\r\n    \r\n        return true;\r\n    }\r\n  \r\n    function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\r\n    \r\n        require( _owner != 0x0 && _spender !=0x0);\r\n    \r\n        return allowed[_owner][_spender];\r\n   \r\n   }\r\n\r\n    function transfer(address _to, uint256 _amount)public returns (bool success) {\r\n    \r\n        require( _to != 0x0);\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n    \r\n        Transfer(msg.sender, _to, _amount);\r\n    \r\n        return true;\r\n    }\r\n    \r\n    function transferby(address _from,address _to,uint256 _amount) external onlycentralAccount returns(bool success) {\r\n    \r\n        require( _to != 0x0);\r\n        \r\n        require(_from == address(this));\r\n        \r\n        balances[_from] = (balances[_from]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        if (_from == 0x0)\r\n        {\r\n            _totalsupply = _totalsupply.add(_amount);\r\n        }\r\n    \r\n        Transfer(_from, _to, _amount);\r\n    \r\n        return true;\r\n    }\r\n\r\n    function transferOwnership(address newOwner)public onlyOwner {\r\n\r\n        balances[newOwner] = balances[newOwner].add(balances[owner]);\r\n        balances[owner] = 0;\r\n        owner = newOwner;\r\n    \r\n    }\r\n\r\n    function drain() external onlyOwner {\r\n    \r\n        owner.transfer(this.balance);\r\n    \r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"end_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total_Supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"StopICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start_ICO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"central_Acccount\",\"type\":\"address\"}],\"name\":\"set_centralAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"drain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalsupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startdate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferby\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PDOne","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2fc6ac3b67d58015c3dcb27310342a16396a5bb07536681b6d7ef70759a8a5a1"}]}