{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity\\contracts\\access\\Roles.sol\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an account access to this role\r\n   */\r\n  function add(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(!has(role, account));\r\n\r\n    role.bearer[account] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an account's access to this role\r\n   */\r\n  function remove(Role storage role, address account) internal {\r\n    require(account != address(0));\r\n    require(has(role, account));\r\n\r\n    role.bearer[account] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an account has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address account)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(account != address(0));\r\n    return role.bearer[account];\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\access\\roles\\PauserRole.sol\r\n\r\ncontract PauserRole {\r\n  using Roles for Roles.Role;\r\n\r\n  event PauserAdded(address indexed account);\r\n  event PauserRemoved(address indexed account);\r\n\r\n  Roles.Role private pausers;\r\n\r\n  constructor() internal {\r\n    _addPauser(msg.sender);\r\n  }\r\n\r\n  modifier onlyPauser() {\r\n    require(isPauser(msg.sender));\r\n    _;\r\n  }\r\n\r\n  function isPauser(address account) public view returns (bool) {\r\n    return pausers.has(account);\r\n  }\r\n\r\n  function addPauser(address account) public onlyPauser {\r\n    _addPauser(account);\r\n  }\r\n\r\n  function renouncePauser() public {\r\n    _removePauser(msg.sender);\r\n  }\r\n\r\n  function _addPauser(address account) internal {\r\n    pausers.add(account);\r\n    emit PauserAdded(account);\r\n  }\r\n\r\n  function _removePauser(address account) internal {\r\n    pausers.remove(account);\r\n    emit PauserRemoved(account);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n  event Paused(address account);\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  constructor() internal {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @return true if the contract is paused, false otherwise.\r\n   */\r\n  function paused() public view returns(bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(_paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyPauser whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyPauser whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(msg.sender);\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() internal {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts\\HorseAuction.sol\r\n\r\n/**\r\n    @title An auction system to sell budnles of HORSE tokens\r\n*/\r\n\r\ncontract HorseAuction is Ownable, Pausable {\r\n\r\n    uint256 constant HORSE = 1 ether; //HORSE like ether has 18 decimal places\r\n    uint256 constant MINIMAL_BUNDLE = 10000 * HORSE; //minimum HORSE in a bundle is 10000\r\n    uint256 constant MINIMAL_DURATION = 5 minutes; //minimum auction duration is 5 minutes\r\n\r\n    /**\r\n        @dev Auction bundle containing HORSE\r\n    */\r\n    struct Bundle {\r\n        uint256 amount;         //amount of HORSE in this bundle\r\n        uint256 expires;        //date at which this bundle can no longer be bet on\r\n        uint256 currentBid;     //current bid value\r\n        address seller;         //address of the seller\r\n        address highestBidder;  //address of the current highest bidder\r\n    }\r\n\r\n    /// @dev horse token access interface\r\n    IERC20 public horseToken = IERC20(0x5B0751713b2527d7f002c0c4e2a37e1219610A6B);\r\n    /// @dev matches a bundle id to the bundle\r\n    mapping(bytes32 => Bundle) public bundles;\r\n    /// @dev this is the devs equity expressed in /1000\r\n    uint256 private _commission = 15;\r\n    /// @dev total amount of fees this contract holds\r\n    uint256 private _collected;\r\n\r\n    event NewBundle(uint256 amount, uint256 duration, bytes32 id);\r\n    event NewBid(bytes32 bundleId, uint256 currentValue);\r\n    event AuctionEnded(bytes32 id);\r\n\r\n    /**\r\n        @dev Constructor\r\n        Contract can be paused\r\n    */\r\n    constructor() public\r\n    Ownable()\r\n    Pausable() {\r\n       \r\n    }\r\n    /**\r\n        @dev contract owner can change fees\r\n        Fees are expressed /1000\r\n        @param newCommission the new fees in /1000\r\n    */\r\n    function changeCommission(uint256 newCommission) external \r\n    onlyOwner() {\r\n        _commission = newCommission;\r\n    }\r\n\r\n    /**\r\n        @dev creates a bundle of HORSE to put on auction for a certain duration\r\n        @param amount The amount of HORSE to include in the bundle\r\n        @param duration Duration of the auction in seconds\r\n    */\r\n    function sell(uint256 amount, uint256 duration) external {\r\n        require(!paused(),\"Contract is paused\");\r\n\r\n        //set minimal amount to avoid bundle spamming\r\n        require(amount >= MINIMAL_BUNDLE, \"Not enough HORSE in this bundle\");\r\n        require(duration > MINIMAL_DURATION, \"Duration is too short\");\r\n        //bundle ID is the sha of amount + duration + seller address + current block timestamp\r\n        bytes32 bundleId = keccak256(abi.encodePacked(amount, duration, msg.sender, block.timestamp));\r\n        //make sure we wont destroy an existing bundle (if same amount, seller and duration and executed in the same block!)\r\n        require(bundles[bundleId].seller == address(0),\"You cant create twice the same bundle in a single block\");\r\n\r\n        Bundle storage newBundle = bundles[bundleId];\r\n        newBundle.amount = amount;\r\n        newBundle.expires = block.timestamp + duration;\r\n        newBundle.seller = msg.sender;\r\n        //transfer the required amount of HORSE from the seller to this contract\r\n        //the seller must approve this transfer first of course!\r\n        require(horseToken.transferFrom(msg.sender, address(this), amount),\"Transfer failed, are we approved to transferFrom this amount?\");\r\n\r\n        emit NewBundle(amount, duration, bundleId);\r\n    }\r\n\r\n    /**\r\n        @dev Add a new bid on a specific bundle\r\n        @param bundleId ID of the bundle to bid on\r\n        Bundle must exist and auction must not have expired\r\n    */\r\n    function bid(bytes32 bundleId) external payable \r\n    _exists(bundleId)\r\n    _active(bundleId) {\r\n        require(!paused(),\"Contract is paused\");\r\n\r\n        Bundle storage bundle = bundles[bundleId];\r\n        //Bidder must outbid the previous bidder\r\n        require(bundle.currentBid < msg.value, \"You must outbid the current value\");\r\n\r\n        //if not first bidder, send back the losers ETH!\r\n        if(bundle.highestBidder != address(0)) {\r\n            bundle.highestBidder.transfer(bundle.currentBid);\r\n        }\r\n        \r\n        //replace the older highest bidder\r\n        bundle.currentBid = msg.value;\r\n        bundle.highestBidder = msg.sender;\r\n        \r\n        emit NewBid(bundleId, msg.value);\r\n    }\r\n\r\n    /**\r\n        @dev Allows to withdraw a bundle from a completed auction\r\n        Must exist and auction must have ended\r\n        Can be called even while contract is paused\r\n        @param bundleId ID of te bundle to withdraw\r\n    */\r\n    function withdrawBundle(bytes32 bundleId) external \r\n    _exists(bundleId)\r\n    _expired(bundleId) {\r\n        Bundle storage bundle = bundles[bundleId];\r\n        //did we get any bids?\r\n        if(bundle.currentBid > 0) {\r\n            //compute the amount to keep\r\n            uint256 commission = bundle.currentBid / 1000 * _commission;\r\n            //give the seller his ETH\r\n            bundle.seller.transfer(bundle.currentBid-commission);\r\n            _collected = _collected + commission;\r\n            //give the buyer his HORSE\r\n            require(horseToken.transfer(bundle.highestBidder, bundle.amount),\"Transfer failed\");\r\n        } else {\r\n            //just give me back my horse\r\n            require(horseToken.transfer(bundle.seller, bundle.amount),\"Transfer failed\");\r\n        }\r\n        \r\n        delete(bundles[bundleId]);\r\n        emit AuctionEnded(bundleId);\r\n    }\r\n\r\n    /**\r\n        @dev Contract owner can withdraw collected auction fees\r\n    */\r\n    function withdraw() external\r\n    onlyOwner() {\r\n        msg.sender.transfer(_collected);\r\n        _collected = 0;\r\n    }\r\n\r\n    modifier _exists(bytes32 bundleId) {\r\n        require(bundles[bundleId].seller != address(0), \"Bundle not found\");\r\n        _;\r\n    }\r\n\r\n    modifier _expired(bytes32 bundleId) {\r\n        require(block.timestamp > bundles[bundleId].expires,\"Auction is still active\");\r\n        _;\r\n    }\r\n\r\n    modifier _active(bytes32 bundleId) {\r\n        require(block.timestamp <= bundles[bundleId].expires,\"Auction expired\");\r\n        _;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"horseToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bundles\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"currentBid\",\"type\":\"uint256\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"highestBidder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bundleId\",\"type\":\"bytes32\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCommission\",\"type\":\"uint256\"}],\"name\":\"changeCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bundleId\",\"type\":\"bytes32\"}],\"name\":\"withdrawBundle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"NewBundle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bundleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"currentValue\",\"type\":\"uint256\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"HorseAuction","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6250c0c293d5395df06f78e90ece53bd6678e8ea3cbac7aeefc0a8e16d23198f"}]}