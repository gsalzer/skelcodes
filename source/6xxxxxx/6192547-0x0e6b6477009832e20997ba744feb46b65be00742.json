{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\nlibrary ECRecovery {\r\n\r\n  /**\r\n   * @dev Recover signer address from a message by using his signature\r\n   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n   * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n   */\r\n  function recover(bytes32 hash, bytes sig) public pure returns (address) {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    //Check the signature length\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    // Divide the signature in r, s and v variables\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\r\n    if (v < 27) {\r\n      v += 27;\r\n    }\r\n\r\n    // If the version is correct return the signer address\r\n    if (v != 27 && v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = 0x0;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract RedemptionCertificate is Claimable {\r\n    using ECRecovery for bytes32;\r\n\r\n    /// @dev A set of addresses that are approved to sign on behalf of this contract\r\n    mapping(address => bool) public signers;\r\n\r\n    /// @dev The nonce associated with each hash(accountId).  In this case, the account is an external\r\n    /// concept that does not correspond to an Ethereum address.  Therefore, the hash of the accountId\r\n    /// is used\r\n    mapping(bytes32 => uint256) public nonces;\r\n\r\n    address public token;\r\n    address public tokenHolder;\r\n\r\n    event TokenHolderChanged(address oldTokenHolder, address newTokenHolder);\r\n    event CertificateRedeemed(string accountId, uint256 amount, address recipient);\r\n    event SignerAdded(address signer);\r\n    event SignerRemoved(address signer);\r\n\r\n    constructor(address _token, address _tokenHolder)\r\n    public\r\n    {\r\n        token = _token;\r\n        tokenHolder = _tokenHolder;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev ensures that the hash was signed by a valid signer.  Also increments the associated\r\n     * account nonce to ensure that the same hash/signature cannot be used again\r\n     */\r\n    modifier onlyValidSignatureOnce(string accountId, bytes32 hash, bytes signature) {\r\n        address signedBy = hash.recover(signature);\r\n        require(signers[signedBy]);\r\n        _;\r\n        nonces[hashAccountId(accountId)]++;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Attempts to withdraw tokens from this contract, using the signature as proof\r\n     * that the caller is entitled to the specified amount.\r\n     */\r\n    function withdraw(string accountId, uint256 amount, address recipient, bytes signature)\r\n    onlyValidSignatureOnce(\r\n        accountId,\r\n        generateWithdrawalHash(accountId, amount, recipient),\r\n        signature)\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(ERC20(token).transferFrom(tokenHolder, recipient, amount));\r\n        emit CertificateRedeemed(accountId, amount, recipient);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n    /// Helper Methods\r\n\r\n    /**\r\n     * @dev Generates the hash of the message that needs to be signed by an approved signer.\r\n     * The nonce is read directly from the contract's state.\r\n     */\r\n    function generateWithdrawalHash(string accountId, uint256 amount, address recipient)\r\n     view\r\n     public\r\n    returns (bytes32)\r\n    {\r\n        bytes32 accountHash = hashAccountId(accountId);\r\n        bytes memory message = abi.encodePacked(address(this), recipient, amount, nonces[accountHash]);\r\n        bytes32 messageHash = keccak256(message);\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash));\r\n    }\r\n\r\n    /**\r\n     * @dev converts and accoutId to a bytes32\r\n     */\r\n    function hashAccountId(string accountId)\r\n    pure\r\n    internal\r\n    returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(accountId));\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /// Admin Methods\r\n\r\n    function updateTokenHolder(address newTokenHolder)\r\n     onlyOwner\r\n      external\r\n    {\r\n        address oldTokenHolder = tokenHolder;\r\n        tokenHolder = newTokenHolder;\r\n        emit TokenHolderChanged(oldTokenHolder, newTokenHolder);\r\n    }\r\n\r\n    function addSigner(address signer)\r\n     onlyOwner\r\n     external\r\n    {\r\n        signers[signer] = true;\r\n        emit SignerAdded(signer);\r\n    }\r\n\r\n    function removeSigner(address signer)\r\n     onlyOwner\r\n     external\r\n    {\r\n        signers[signer] = false;\r\n        emit SignerRemoved(signer);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"generateWithdrawalHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenHolder\",\"type\":\"address\"}],\"name\":\"updateTokenHolder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nonces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_tokenHolder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldTokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newTokenHolder\",\"type\":\"address\"}],\"name\":\"TokenHolderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"accountId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"CertificateRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RedemptionCertificate","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000138a8752093f4f9a79aaedf48d4b9248fab93c9c0000000000000000000000009dbc1f531ef143cc820afd4aca4f872b66b14095","Library":"ECRecovery:5E1fA92Da29B9795B04fC3CF4Aa347AcE8e3ebD9","SwarmSource":"bzzr://e0528bf520fcc92efa552e1106b428e7695059e58b0e4bc7996338318ef4834f"}]}