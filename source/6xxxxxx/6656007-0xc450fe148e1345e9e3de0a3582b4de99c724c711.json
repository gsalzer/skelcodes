{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    function balanceOf(address who) constant public returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) internal balances;\r\n    \r\n    /**\r\n    * Returns the balance of the qeuried address\r\n    *\r\n    * @param _who The address which is being qeuried\r\n    **/\r\n    function balanceOf(address _who) public view returns(uint256) {\r\n        return balances[_who];\r\n    }\r\n    \r\n    /**\r\n    * Allows for the transfer of MSTCOIN tokens from peer to peer. \r\n    *\r\n    * @param _to The address of the receiver\r\n    * @param _value The amount of tokens to send\r\n    **/\r\n    function transfer(address _to, uint256 _value) public returns(bool) {\r\n        require(balances[msg.sender] >= _value && _value > 0 && _to != 0x0);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) constant public returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public  returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    /**\r\n     * The address whcih deploys this contrcat is automatically assgined ownership.\r\n     * */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Functions with this modifier can only be executed by the owner of the contract. \r\n     * */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    /**\r\n    * Transfers ownership to new Ethereum address. This function can only be called by the \r\n    * owner.\r\n    * @param _newOwner the address to be granted ownership.\r\n    **/\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != 0x0);\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract StandardToken is BasicToken, ERC20, Ownable {\r\n    \r\n    address public MembershipContractAddr = 0x0;\r\n    \r\n    mapping (address => mapping (address => uint256)) internal allowances;\r\n    \r\n    function changeMembershipContractAddr(address _newAddr) public onlyOwner returns(bool) {\r\n        require(_newAddr != address(0));\r\n        MembershipContractAddr = _newAddr;\r\n    }\r\n    \r\n    /**\r\n    * Returns the amount of tokens one has allowed another to spend on his or her behalf.\r\n    *\r\n    * @param _owner The address which is the owner of the tokens\r\n    * @param _spender The address which has been allowed to spend tokens on the owner's\r\n    * behalf\r\n    **/\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n    \r\n    event TransferFrom(address msgSender);\r\n    /**\r\n    * Allows for the transfer of tokens on the behalf of the owner given that the owner has\r\n    * allowed it previously. \r\n    *\r\n    * @param _from The address of the owner\r\n    * @param _to The address of the recipient \r\n    * @param _value The amount of tokens to be sent\r\n    **/\r\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {\r\n        require(allowances[_from][msg.sender] >= _value || msg.sender == MembershipContractAddr);\r\n        require(balances[_from] >= _value && _value > 0 && _to != address(0));\r\n        emit TransferFrom(msg.sender);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        if(msg.sender != MembershipContractAddr) {\r\n            allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\r\n        }\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * Allows the owner of tokens to approve another to spend tokens on his or her behalf\r\n    *\r\n    * @param _spender The address which is being allowed to spend tokens on the owner' behalf\r\n    * @param _value The amount of tokens to be sent\r\n    **/\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_spender != 0x0 && _value > 0);\r\n        if(allowances[msg.sender][_spender] > 0 ) {\r\n            allowances[msg.sender][_spender] = 0;\r\n        }\r\n        allowances[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract BurnableToken is StandardToken {\r\n    \r\n    address public ICOaddr;\r\n    address public privateSaleAddr;\r\n    \r\n    constructor() public {\r\n        ICOaddr = 0x837141Aec793bDAd663c71F8B2c8709731Da22B1;\r\n        privateSaleAddr = 0x87529BE23E0206eBedd6481fA6644d9B8B5cb9A9;\r\n    }\r\n    \r\n    event TokensBurned(address indexed burner, uint256 value);\r\n    \r\n    function burnFrom(address _from, uint256 _tokens) public onlyOwner {\r\n        require(ICOaddr == _from || privateSaleAddr == _from);\r\n        if(balances[_from] < _tokens) {\r\n            emit TokensBurned(_from,balances[_from]);\r\n            emit Transfer(_from, address(0), balances[_from]);\r\n            balances[_from] = 0;\r\n            totalSupply = totalSupply.sub(balances[_from]);\r\n        } else {\r\n            balances[_from] = balances[_from].sub(_tokens);\r\n            totalSupply = totalSupply.sub(_tokens);\r\n            emit TokensBurned(_from, _tokens);\r\n            emit Transfer(_from, address(0), _tokens);\r\n        }\r\n    }\r\n}\r\n\r\ncontract AIB is BurnableToken {\r\n    \r\n    constructor() public {\r\n        name = \"AI Bank\";\r\n        symbol = \"AIB\";\r\n        decimals = 18;\r\n        totalSupply = 856750000e18;\r\n        balances[owner] = totalSupply;\r\n        emit Transfer(address(this), owner, totalSupply);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"changeMembershipContractAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ICOaddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MembershipContractAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"privateSaleAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"TransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"AIB","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://34a7f84a6a795986845c7d10ed5970668c20f9708f569e376c23eec6eae54b2f"}]}