{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// * Digital Game - Version 1.\r\n// * The user selects three digits, the platform generates trusted random \r\n//   number to lottery and distributes the reward.\r\n\r\ncontract DigitalGame {\r\n  /// *** Constants\r\n\r\n  uint constant MIN_BET_MONEY = 1 finney;\r\n  uint constant MAX_BET_MONEY = 10 ether;\r\n  uint constant MIN_BET_NUMBER = 2;\r\n  uint constant MAX_STAGE = 5;\r\n\r\n  // Calculate invitation dividends based on bet amount\r\n  // - first generation reward: 0.5%\r\n  // - second generation reward: 0.3%\r\n  // - third generation reward: 0.2%\r\n  uint constant FIRST_GENERATION_REWARD = 5;\r\n  uint constant SECOND_GENERATION_REWARD = 3;\r\n  uint constant THIRD_GENERATION_REWARD = 2;\r\n\r\n  address public OWNER_ADDR;\r\n  address public RECOMM_ADDR;\r\n  address public SPARE_RECOMM_ADDR;\r\n\r\n  uint public lastStage;\r\n  uint public lastRound;\r\n\r\n  /// *** Struct\r\n\r\n  struct UserRecomm {\r\n    address addr;\r\n  }\r\n\r\n  struct StageInfo {\r\n    uint round;\r\n    bytes32 seedHash;\r\n    uint userNumber;\r\n    uint amount;\r\n    uint lastTime;\r\n  }\r\n\r\n  struct UserBet {\r\n    address addr;\r\n    uint amount;\r\n    uint[] content;\r\n    uint count;\r\n    uint createAt;\r\n  }\r\n  \r\n  address[] private userRecomms;\r\n  UserBet[] private WaitAwardBets;\r\n\r\n  /// *** Mapping\r\n\r\n  mapping(uint => StageInfo) public stages;\r\n  mapping(address => address) public users;\r\n  mapping(uint => UserBet[]) public userBets;\r\n  mapping(uint => mapping(uint => mapping(address => bool))) private userBetAddrs;\r\n\r\n  /// *** Event\r\n\r\n  event eventUserBet(\r\n    string eventType,\r\n    address addr,\r\n    uint amount,\r\n    uint stage,\r\n    uint round,\r\n    uint count,\r\n    uint[] content,\r\n    uint createAt\r\n  );\r\n\r\n  event eventLottery(\r\n    string eventType,\r\n    uint stage,\r\n    uint round,\r\n    uint[] lotteryContent,\r\n    uint createAt\r\n  );\r\n\r\n  event eventDividend(\r\n    string eventType,\r\n    address addr,\r\n    uint amount,\r\n    uint stage,\r\n    uint round,\r\n    uint count,\r\n    uint[] content,\r\n    uint level,\r\n    address recommAddr,\r\n    uint recommReward,\r\n    uint createAt\r\n  );\r\n\r\n  event eventReward(\r\n    string eventType,\r\n    address addr,\r\n    uint amount,\r\n    uint stage,\r\n    uint round,\r\n    uint count,\r\n    uint[] content,\r\n    uint[] lotteryContent,\r\n    uint reward,\r\n    uint createAt\r\n  );\r\n\r\n  /// *** Modifier\r\n\r\n  modifier checkBetTime(uint lastTime) {\r\n    require(now <= lastTime + 5 minutes, 'Current time is not allowed to bet');\r\n    _;\r\n  }\r\n\r\n  modifier checkRewardTime(uint lastTime) {\r\n    require(\r\n      now >= lastTime + 10 minutes,\r\n      'Current time is not allowed to reward'\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier isSecretNumber(uint stage, string seed) {\r\n    require(\r\n      keccak256(abi.encodePacked(seed)) == stages[stage].seedHash,\r\n      'Encrypted numbers are illegal'\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier verifyStage(uint stage) {\r\n    require(\r\n      stage >= 1 && stage <= MAX_STAGE,\r\n      'Stage no greater than 5 (MAX_STAGE)'\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier verifySeedHash(uint stage, bytes32 seedHash) {\r\n    require(\r\n      stages[stage].seedHash == seedHash && seedHash != 0,\r\n      'The hash of the stage is illegal'\r\n    );\r\n    _;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(OWNER_ADDR == msg.sender, 'Permission denied');\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    for (uint i = 1; i <= MAX_STAGE; i++) {\r\n      stages[i].round = 1;\r\n      stages[i].seedHash = 0x0;\r\n      stages[i].userNumber = 0;\r\n      stages[i].amount = 0;\r\n      stages[i].lastTime = now;\r\n    }\r\n\r\n    OWNER_ADDR = msg.sender;\r\n    RECOMM_ADDR = msg.sender;\r\n    SPARE_RECOMM_ADDR = msg.sender;\r\n\r\n    lastStage = 1;\r\n    lastRound = 1;\r\n  }\r\n\r\n  function bet(\r\n    uint stage,\r\n    uint round,\r\n    uint[] content,\r\n    uint count,\r\n    address recommAddr,\r\n    bytes32 seedHash\r\n  ) public\r\n  payable\r\n  verifyStage(stage)\r\n  verifySeedHash(stage, seedHash)\r\n  checkBetTime(stages[stage].lastTime) {\r\n    require(stages[stage].round == round, 'Round illegal');\r\n    require(content.length == 3, 'The bet is 3 digits');\r\n\r\n    require((\r\n        msg.value >= MIN_BET_MONEY\r\n            && msg.value <= MAX_BET_MONEY\r\n            && msg.value == MIN_BET_MONEY * (10 ** (stage - 1)) * count\r\n      ),\r\n      'The amount of the bet is illegal'\r\n    );\r\n    \r\n    require(msg.sender != recommAddr, 'The recommender cannot be himself');\r\n    \r\n    \r\n    if (users[msg.sender] == 0) {\r\n      if (recommAddr != RECOMM_ADDR) {\r\n        require(\r\n            users[recommAddr] != 0,\r\n            'Referrer is not legal'\r\n        );\r\n      }\r\n      users[msg.sender] = recommAddr;\r\n    }\r\n\r\n    generateUserRelation(msg.sender, 3);\r\n    require(userRecomms.length <= 3, 'User relationship error');\r\n\r\n    sendInviteDividends(stage, round, count, content);\r\n\r\n    if (!userBetAddrs[stage][stages[stage].round][msg.sender]) {\r\n      stages[stage].userNumber++;\r\n      userBetAddrs[stage][stages[stage].round][msg.sender] = true;\r\n    }\r\n\r\n    userBets[stage].push(UserBet(\r\n      msg.sender,\r\n      msg.value,\r\n      content,\r\n      count,\r\n      now\r\n    ));\r\n\r\n    emit eventUserBet(\r\n      'userBet',\r\n      msg.sender,\r\n      msg.value,\r\n      stage,\r\n      round,\r\n      count,\r\n      content,\r\n      now\r\n    );\r\n  }\r\n\r\n  function generateUserRelation(\r\n    address addr,\r\n    uint generation\r\n  ) private returns(bool) {\r\n    userRecomms.push(users[addr]);\r\n    if (users[addr] != RECOMM_ADDR && users[addr] != 0 && generation > 1) {\r\n        generateUserRelation(users[addr], generation - 1);\r\n    }\r\n  }\r\n\r\n  function sendInviteDividends(\r\n    uint stage,\r\n    uint round,\r\n    uint count,\r\n    uint[] content\r\n  ) private {\r\n    uint[3] memory GENERATION_REWARD = [\r\n      FIRST_GENERATION_REWARD,\r\n      SECOND_GENERATION_REWARD,\r\n      THIRD_GENERATION_REWARD\r\n    ];\r\n    uint recomms = 0;\r\n    for (uint j = 0; j < userRecomms.length; j++) {\r\n      recomms += msg.value * GENERATION_REWARD[j] / 1000;\r\n      userRecomms[j].transfer(msg.value * GENERATION_REWARD[j] / 1000);\r\n\r\n      emit eventDividend(\r\n        'dividend',\r\n        msg.sender,\r\n        msg.value,\r\n        stage,\r\n        round,\r\n        count,\r\n        content,\r\n        j,\r\n        userRecomms[j],\r\n        msg.value * GENERATION_REWARD[j] / 1000,\r\n        now\r\n      );\r\n    }\r\n\r\n    stages[stage].amount += (msg.value - recomms);\r\n    delete userRecomms;\r\n  }\r\n\r\n  function distributionReward(\r\n    uint stage,\r\n    string seed,\r\n    bytes32 seedHash\r\n  ) public\r\n  checkRewardTime(stages[stage].lastTime)\r\n  isSecretNumber(stage, seed)\r\n  verifyStage(stage)\r\n  onlyOwner {\r\n    if (stages[stage].userNumber >= MIN_BET_NUMBER) {\r\n      uint[] memory randoms = generateRandom(\r\n        seed,\r\n        stage,\r\n        userBets[stage].length\r\n      );\r\n      require(randoms.length == 3, 'Random number is illegal');\r\n\r\n      bool isReward = CalcWinnersAndReward(randoms, stage);\r\n\r\n      emit eventLottery(\r\n        'lottery',\r\n        stage,\r\n        stages[stage].round,\r\n        randoms,\r\n        now\r\n      );\r\n\r\n      if (isReward) {\r\n        stages[stage].amount = 0;\r\n        \r\n        lastStage = stage;\r\n        lastRound = stages[stage].round;\r\n      }\r\n      \r\n      delete userBets[stage];\r\n      \r\n      stages[stage].round += 1;\r\n      stages[stage].userNumber = 0;\r\n      stages[stage].seedHash = seedHash;\r\n      \r\n      stages[stage].lastTime = now + 5 minutes;\r\n    } else {\r\n      stages[stage].lastTime = now;\r\n    }\r\n  }\r\n\r\n  function CalcWinnersAndReward(\r\n    uint[] randoms,\r\n    uint stage\r\n  ) private onlyOwner returns(bool) {\r\n    uint counts = 0;\r\n    for (uint i = 0; i < userBets[stage].length; i++) {\r\n      if (randoms[0] == userBets[stage][i].content[0]\r\n        && randoms[1] == userBets[stage][i].content[1]\r\n        && randoms[2] == userBets[stage][i].content[2]) {\r\n        counts = counts + userBets[stage][i].count;\r\n        WaitAwardBets.push(UserBet(\r\n          userBets[stage][i].addr,\r\n          userBets[stage][i].amount,\r\n          userBets[stage][i].content,\r\n          userBets[stage][i].count,\r\n          userBets[stage][i].createAt\r\n        ));\r\n      }\r\n    }\r\n    if (WaitAwardBets.length == 0) {\r\n      for (uint j = 0; j < userBets[stage].length; j++) {\r\n        if ((randoms[0] == userBets[stage][j].content[0]\r\n            && randoms[1] == userBets[stage][j].content[1])\r\n              || (randoms[1] == userBets[stage][j].content[1]\r\n            && randoms[2] == userBets[stage][j].content[2])\r\n              || (randoms[0] == userBets[stage][j].content[0]\r\n            && randoms[2] == userBets[stage][j].content[2])) {\r\n          counts += userBets[stage][j].count;\r\n          WaitAwardBets.push(UserBet(\r\n            userBets[stage][j].addr,\r\n            userBets[stage][j].amount,\r\n            userBets[stage][j].content,\r\n            userBets[stage][j].count,\r\n            userBets[stage][j].createAt\r\n          ));\r\n        }\r\n      }\r\n    }\r\n    if (WaitAwardBets.length == 0) {\r\n      for (uint k = 0; k < userBets[stage].length; k++) {\r\n        if (randoms[0] == userBets[stage][k].content[0]\r\n            || randoms[1] == userBets[stage][k].content[1]\r\n            || randoms[2] == userBets[stage][k].content[2]) {\r\n          counts += userBets[stage][k].count;\r\n          WaitAwardBets.push(UserBet(\r\n            userBets[stage][k].addr,\r\n            userBets[stage][k].amount,\r\n            userBets[stage][k].content,\r\n            userBets[stage][k].count,\r\n            userBets[stage][k].createAt\r\n          ));\r\n        }\r\n      }\r\n    }\r\n\r\n    uint extractReward = stages[stage].amount / 100;\r\n    RECOMM_ADDR.transfer(extractReward);\r\n    SPARE_RECOMM_ADDR.transfer(extractReward);\r\n    OWNER_ADDR.transfer(extractReward);\r\n\r\n    if (WaitAwardBets.length != 0) {\r\n      issueReward(stage, extractReward, randoms, counts);\r\n      delete WaitAwardBets;\r\n      return true;\r\n    }\r\n    stages[stage].amount = stages[stage].amount - extractReward - extractReward - extractReward;\r\n    return false;\r\n  }\r\n  \r\n  function issueReward(\r\n    uint stage,\r\n    uint extractReward,\r\n    uint[] randoms,\r\n    uint counts\r\n  ) private onlyOwner {\r\n    uint userAward = stages[stage].amount - extractReward - extractReward - extractReward;\r\n    for (uint m = 0; m < WaitAwardBets.length; m++) {\r\n      uint reward = userAward * WaitAwardBets[m].count / counts;\r\n      WaitAwardBets[m].addr.transfer(reward);\r\n\r\n      emit eventReward(\r\n        'reward',\r\n        WaitAwardBets[m].addr,\r\n        WaitAwardBets[m].amount,\r\n        stage,\r\n        stages[stage].round,\r\n        WaitAwardBets[m].count,\r\n        WaitAwardBets[m].content,\r\n        randoms,\r\n        reward,\r\n        now\r\n      );\r\n    }\r\n  }\r\n\r\n  function generateRandom(\r\n    string seed,\r\n    uint stage,\r\n    uint betNum\r\n  ) private view onlyOwner\r\n  isSecretNumber(stage, seed) returns(uint[]) {\r\n    uint[] memory randoms = new uint[](3);\r\n    for (uint i = 0; i < 3; i++) {\r\n      randoms[i] = uint(\r\n        keccak256(abi.encodePacked(betNum, block.difficulty, seed, now, i))\r\n      ) % 9 + 1;\r\n    }\r\n    return randoms;\r\n  }\r\n\r\n  function setSeedHash(uint stage, bytes32 seedHash) public onlyOwner {\r\n    require(\r\n      stages[stage].seedHash == 0,\r\n      'No need to set seed hash'\r\n    );\r\n    stages[stage].seedHash = seedHash;\r\n  }\r\n\r\n  function setDefaultRecommAddr(address _RECOMM_ADDR) public onlyOwner {\r\n    RECOMM_ADDR = _RECOMM_ADDR;\r\n  }\r\n\r\n  function setSpareRecommAddr(address _SPARE_RECOMM_ADDR) public onlyOwner {\r\n    SPARE_RECOMM_ADDR = _SPARE_RECOMM_ADDR;\r\n  }\r\n\r\n  function getDefaultRecommAddr() public view returns(address) {\r\n    return RECOMM_ADDR;\r\n  }\r\n\r\n  function getSpareRecommAddr() public view returns(address) {\r\n    return SPARE_RECOMM_ADDR;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"lastStage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stage\",\"type\":\"uint256\"},{\"name\":\"seed\",\"type\":\"string\"},{\"name\":\"seedHash\",\"type\":\"bytes32\"}],\"name\":\"distributionReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_SPARE_RECOMM_ADDR\",\"type\":\"address\"}],\"name\":\"setSpareRecommAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stage\",\"type\":\"uint256\"},{\"name\":\"seedHash\",\"type\":\"bytes32\"}],\"name\":\"setSeedHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSpareRecommAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OWNER_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RECOMM_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_RECOMM_ADDR\",\"type\":\"address\"}],\"name\":\"setDefaultRecommAddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"seedHash\",\"type\":\"bytes32\"},{\"name\":\"userNumber\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"lastTime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDefaultRecommAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SPARE_RECOMM_ADDR\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBets\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"createAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stage\",\"type\":\"uint256\"},{\"name\":\"round\",\"type\":\"uint256\"},{\"name\":\"content\",\"type\":\"uint256[]\"},{\"name\":\"count\",\"type\":\"uint256\"},{\"name\":\"recommAddr\",\"type\":\"address\"},{\"name\":\"seedHash\",\"type\":\"bytes32\"}],\"name\":\"bet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"eventType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"content\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"createAt\",\"type\":\"uint256\"}],\"name\":\"eventUserBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"eventType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"lotteryContent\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"createAt\",\"type\":\"uint256\"}],\"name\":\"eventLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"eventType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"content\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recommAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recommReward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"createAt\",\"type\":\"uint256\"}],\"name\":\"eventDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"eventType\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"content\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"lotteryContent\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"createAt\",\"type\":\"uint256\"}],\"name\":\"eventReward\",\"type\":\"event\"}]","ContractName":"DigitalGame","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5fa11ebe58dd46c22376ff8839b38c2abbba7ff9340967c697800dd590183b11"}]}