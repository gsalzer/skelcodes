{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\ncontract StandardToken {\r\n\r\n    /* Data structures */\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    /* Events */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /* Read and write storage functions */\r\n\r\n    // Transfers sender's tokens to a given address. Returns success.\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Allows allowed third party to transfer tokens from one address to another. Returns success. _value Number of tokens to transfer.\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            emit Transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Returns number of tokens owned by given address.\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Sets approved amount of tokens for spender. Returns success. _value Number of approved tokens.\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /* Read storage functions */\r\n\r\n    //Returns number of allowed tokens for given address. _owner Address of token owner. _spender Address of token spender.\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract AltTokenFund is StandardToken {\r\n\r\n    /* External contracts */\r\n\r\n    address public emissionContractAddress = 0x0;\r\n\r\n    //Token meta data\r\n    string constant public name = \"Alt Token Fund\";\r\n    string constant public symbol = \"ATF\";\r\n    uint8 constant public decimals = 8;\r\n\r\n    /* Storage */\r\n    address public owner = 0x0;\r\n    bool public emissionEnabled = true;\r\n    bool transfersEnabled = true;\r\n\r\n    /* Modifiers */\r\n\r\n    modifier isCrowdfundingContract() {\r\n        // Only emission address to do this action\r\n        if (msg.sender != emissionContractAddress) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        // Only owner is allowed to do this action.\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* Contract functions */\r\n\r\n    // TokenFund emission function. _for is Address of receiver, tokenCount is Number of tokens to issue.\r\n    function issueTokens(address _for, uint tokenCount)\r\n        external\r\n        isCrowdfundingContract\r\n        returns (bool)\r\n    {\r\n        if (emissionEnabled == false) {\r\n            revert();\r\n        }\r\n\r\n        balances[_for] += tokenCount;\r\n        totalSupply += tokenCount;\r\n        return true;\r\n    }\r\n\r\n    // Withdraws tokens for msg.sender.\r\n    function withdrawTokens(uint tokenCount)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint balance = balances[msg.sender];\r\n        if (balance < tokenCount) {\r\n            return false;\r\n        }\r\n        balances[msg.sender] -= tokenCount;\r\n        totalSupply -= tokenCount;\r\n        return true;\r\n    }\r\n\r\n    // Function to change address that is allowed to do emission.\r\n    function changeEmissionContractAddress(address newAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emissionContractAddress = newAddress;\r\n    }\r\n\r\n    // Function that enables/disables transfers of token, value is true/false\r\n    function enableTransfers(bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        transfersEnabled = value;\r\n    }\r\n\r\n    // Function that enables/disables token emission.\r\n    function enableEmission(bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        emissionEnabled = value;\r\n    }\r\n\r\n    /* Overriding ERC20 standard token functions to support transfer lock */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        if (transfersEnabled == true) {\r\n            return super.transfer(_to, _value);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (transfersEnabled == true) {\r\n            return super.transferFrom(_from, _to, _value);\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    // Contract constructor function sets initial token balances. _owner Address of the owner of AltTokenFund.\r\n    constructor (address _owner) public\r\n    {\r\n        totalSupply = 0;\r\n        owner = _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Fund {\r\n\r\n  address public owner;\r\n  address public SetPriceAccount;\r\n  address public SetReferralAccount;\r\n\r\n  modifier onlyOwner {\r\n      if (msg.sender != owner) revert();\r\n      _;\r\n  }\r\n  \r\n  modifier onlySetPriceAccount {\r\n      if (msg.sender != SetPriceAccount) revert();\r\n      _;\r\n  }\r\n  \r\n  modifier onlySetReferralAccount {\r\n      if (msg.sender != SetReferralAccount) revert();\r\n      _;\r\n  }\r\n  \r\n    /* External contracts */\r\n    AltTokenFund public tokenFund;\r\n\r\n    /* Events */\r\n    event Deposit(address indexed from, uint256 value);\r\n    event Withdrawal(address indexed from, uint256 value);\r\n    event AddInvestment(address indexed to, uint256 value);\r\n\r\n    /* Storage */\r\n    address public ethAddress;\r\n    address public fundManagers;\r\n    address public supportAddress;\r\n    uint public tokenPrice = 1 finney; // 0.001 ETH\r\n    uint public managersFee = 1;\r\n    uint public referralFee = 3;\r\n    uint public supportFee = 1;\r\n\r\n    mapping (address => address) public referrals;\r\n\r\n/* Contract functions */\r\n\r\n    // Issue tokens _for address and send comissions\r\n\r\n    function issueTokens(address _for, uint tokenCount)\r\n    \tprivate\r\n    \treturns (bool)\r\n    {\r\n    \tif (tokenCount == 0) {\r\n        return false;\r\n      }\r\n\r\n      uint percent = tokenCount / 100;\r\n\r\n    // managersFee to the fund managers\r\n      if (!tokenFund.issueTokens(fundManagers, percent * managersFee)) {\r\n        // Tokens could not be issued.\r\n        revert();\r\n      }\r\n\r\n    // supportFee to the support team\r\n      if (!tokenFund.issueTokens(supportAddress, percent * supportFee)) {\r\n        // Tokens could not be issued.\r\n        revert();\r\n      }\r\n\r\n      if (referrals[_for] != 0) {\r\n      \t// referralFee to the referral\r\n      \tif (!tokenFund.issueTokens(referrals[_for], referralFee * percent)) {\r\n          // Tokens could not be issued.\r\n          revert();\r\n        }\r\n      } else {\r\n      \t// if there is no referral, referralFee goes to the fund managers\r\n      \tif (!tokenFund.issueTokens(fundManagers, referralFee * percent)) {\r\n          // Tokens could not be issued.\r\n          revert();\r\n        }\r\n      }\r\n\r\n      if (!tokenFund.issueTokens(_for, tokenCount - (referralFee+supportFee+managersFee) * percent)) {\r\n        // Tokens could not be issued.\r\n        revert();\r\n\t    }\r\n\r\n\t    return true;\r\n    }\r\n\r\n    // Issues tokens for users who made investment.\r\n    // @param beneficiary Address the tokens will be issued to.\r\n    // @param valueInWei investment in wei\r\n    function addInvestment(address beneficiary, uint valueInWei)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        uint tokenCount = calculateTokens(valueInWei);\r\n    \treturn issueTokens(beneficiary, tokenCount);\r\n    }\r\n\r\n    // Issues tokens for users who made direct ETH payment.\r\n    function fund()\r\n        public\r\n        payable\r\n        returns (bool)\r\n    {\r\n        // Token count is rounded down. Sent ETH should be multiples of baseTokenPrice.\r\n        address beneficiary = msg.sender;\r\n        uint tokenCount = calculateTokens(msg.value);\r\n        uint roundedInvestment = tokenCount * tokenPrice / 100000000;\r\n\r\n        // Send change back to user.\r\n        if (msg.value > roundedInvestment && !beneficiary.send(msg.value - roundedInvestment)) {\r\n          revert();\r\n        }\r\n        // Send money to the fund ethereum address\r\n        if (!ethAddress.send(roundedInvestment)) {\r\n          revert();\r\n        }\r\n        return issueTokens(beneficiary, tokenCount);\r\n    }\r\n\r\n    function calculateTokens(uint valueInWei)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return valueInWei * 100000000 / tokenPrice;\r\n    }\r\n\r\n    function estimateTokens(uint valueInWei)\r\n        public\r\n        constant\r\n        returns (uint)\r\n    {\r\n        return valueInWei * (100000000-1000000*(referralFee+supportFee+managersFee)) / tokenPrice;\r\n    }\r\n\r\n    function setReferral(address client, address referral)\r\n        public\r\n        onlySetReferralAccount\r\n    {\r\n        referrals[client] = referral;\r\n    }\r\n\r\n    function getReferral(address client)\r\n        public\r\n        constant\r\n        returns (address)\r\n    {\r\n        return referrals[client];\r\n    }\r\n\r\n    /// @dev Sets token price (TKN/ETH) in Wei.\r\n    /// @param valueInWei New value.\r\n    function setTokenPrice(uint valueInWei)\r\n        public\r\n        onlySetPriceAccount\r\n    {\r\n        tokenPrice = valueInWei;\r\n    }\r\n\r\n\r\n    function changeComissions(uint newManagersFee, uint newSupportFee, uint newReferralFee) public\r\n        onlyOwner\r\n    {\r\n        managersFee = newManagersFee;\r\n        supportFee = newSupportFee;\r\n        referralFee = newReferralFee;\r\n    }\r\n\r\n    function changefundManagers(address newfundManagers) public\r\n        onlyOwner\r\n    {\r\n        fundManagers = newfundManagers;\r\n    }\r\n\r\n    function changeEthAddress(address newEthAddress) public\r\n        onlyOwner\r\n    {\r\n        ethAddress = newEthAddress;\r\n    }\r\n\r\n    function changeSupportAddress(address newSupportAddress) public\r\n        onlyOwner\r\n    {\r\n        supportAddress = newSupportAddress;\r\n    }\r\n    \r\n    function changeSetPriceAccount(address newSetPriceAccount) public\r\n        onlyOwner\r\n    {\r\n        SetPriceAccount = newSetPriceAccount;\r\n    }\r\n    \r\n     function changeSetReferralAccount (address newSetReferralAccount) public\r\n        onlyOwner\r\n    {\r\n        SetReferralAccount = newSetReferralAccount;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public\r\n      onlyOwner\r\n    {\r\n        owner = newOwner;\r\n    }\r\n\r\n    // Contract constructor function\r\n\r\n    constructor (address _owner, address _SetPriceAccount, address _SetReferralAccount, address _ethAddress, address _fundManagers, address _supportAddress, address _tokenAddress)\r\n    public\r\n    {\r\n        owner = _owner;\r\n        SetPriceAccount = _SetPriceAccount;\r\n        SetReferralAccount = _SetReferralAccount;\r\n        ethAddress = _ethAddress;\r\n        fundManagers = _fundManagers;\r\n        supportAddress = _supportAddress;\r\n        tokenFund = AltTokenFund(_tokenAddress);\r\n    }\r\n\r\n    // Fallback function. Calls fund() function to create tokens once contract receives payment.\r\n    function () public payable {\r\n        fund();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"supportAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSetPriceAccount\",\"type\":\"address\"}],\"name\":\"changeSetPriceAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"valueInWei\",\"type\":\"uint256\"}],\"name\":\"addInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"client\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenFund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newEthAddress\",\"type\":\"address\"}],\"name\":\"changeEthAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundManagers\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSupportAddress\",\"type\":\"address\"}],\"name\":\"changeSupportAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SetPriceAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"valueInWei\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"valueInWei\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"setReferral\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"referralFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newfundManagers\",\"type\":\"address\"}],\"name\":\"changefundManagers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSetReferralAccount\",\"type\":\"address\"}],\"name\":\"changeSetReferralAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"managersFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newManagersFee\",\"type\":\"uint256\"},{\"name\":\"newSupportFee\",\"type\":\"uint256\"},{\"name\":\"newReferralFee\",\"type\":\"uint256\"}],\"name\":\"changeComissions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supportFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"valueInWei\",\"type\":\"uint256\"}],\"name\":\"estimateTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SetReferralAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_SetPriceAccount\",\"type\":\"address\"},{\"name\":\"_SetReferralAccount\",\"type\":\"address\"},{\"name\":\"_ethAddress\",\"type\":\"address\"},{\"name\":\"_fundManagers\",\"type\":\"address\"},{\"name\":\"_supportAddress\",\"type\":\"address\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AddInvestment\",\"type\":\"event\"}]","ContractName":"Fund","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d7f2ad1a288d5f19d926ea05c7fae7f5ba18a82b0000000000000000000000009c8b73eb8b2668654e204e6b8292de2fc8da21350000000000000000000000009c8b73eb8b2668654e204e6b8292de2fc8da21350000000000000000000000007a7c351a3521f70fbde6eb94ef1856ceabddbdfa0000000000000000000000003facda7a379f8bb21f2aafddc8fbe7231b5387460000000000000000000000008c5da48233d4cc180c8f62617d4ef39040bb2e2d000000000000000000000000baf6fbd33355ea58c807f301b520434de2d8ce20","Library":"","SwarmSource":"bzzr://f2cd1191e1617159b6d6428403cfcda61c2147b9ae80be6d22580a6aa59fb187"}]}