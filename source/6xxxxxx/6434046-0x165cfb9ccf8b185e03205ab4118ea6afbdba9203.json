{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\ncontract Upgradable is Ownable, Pausable {\r\n    // Set in case the core contract is broken and an upgrade is required\r\n    address public newContractAddress;\r\n\r\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    event ContractUpgrade(address newContract);\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indicating that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    function setNewAddress(address _v2Address) external onlyOwner whenPaused {\r\n        require(_v2Address != 0x0);\r\n        newContractAddress = _v2Address;\r\n        emit ContractUpgrade(_v2Address);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract SolidStampRegister is Ownable\r\n{\r\n/// @dev address of the current SolidStamp contract which can add audits\r\n    address public ContractSolidStamp;\r\n\r\n    /// @dev const value to indicate the contract is not audited\r\n    uint8 public constant NOT_AUDITED = 0x00;\r\n\r\n    /// @dev const value to indicate the contract is audited and approved\r\n    uint8 public constant AUDITED_AND_APPROVED = 0x01;\r\n\r\n    /// @dev const value to indicate the contract is audited and rejected\r\n    uint8 public constant AUDITED_AND_REJECTED = 0x02;\r\n\r\n    /// @dev struct representing the audit report and the audit outcome\r\n    struct Audit {\r\n        /// @dev AUDITED_AND_APPROVED or AUDITED_AND_REJECTED\r\n        uint8 outcome;\r\n        /// @dev IPFS hash of the audit report\r\n        bytes reportIPFS;\r\n    }\r\n\r\n    /// @dev Maps auditor and code hash to the Audit struct.\r\n    /// Map key is: keccack256(auditor address, contract codeHash)\r\n    /// @dev codeHash is a sha3 from the contract byte code\r\n    mapping (bytes32 => Audit) public Audits;\r\n\r\n    /// @dev event fired when a contract is sucessfully audited\r\n    event AuditRegistered(address auditor, bytes32 codeHash, bytes reportIPFS, bool isApproved);\r\n\r\n    /// @notice SolidStampRegister constructor\r\n    constructor() public {\r\n    }\r\n\r\n    /// @notice returns the outcome of the audit or NOT_AUDITED (0) if none\r\n    /// @param _auditor audtior address\r\n    /// @param _codeHash contract code-hash\r\n    function getAuditOutcome(address _auditor, bytes32 _codeHash) public view returns (uint8)\r\n    {\r\n        bytes32 hashAuditorCode = keccak256(abi.encodePacked(_auditor, _codeHash));\r\n        return Audits[hashAuditorCode].outcome;\r\n    }\r\n\r\n    /// @notice returns the audit report IPFS of the audit or 0x0 if none\r\n    /// @param _auditor audtior address\r\n    /// @param _codeHash contract code-hash\r\n    function getAuditReportIPFS(address _auditor, bytes32 _codeHash) public view returns (bytes)\r\n    {\r\n        bytes32 hashAuditorCode = keccak256(abi.encodePacked(_auditor, _codeHash));\r\n        return Audits[hashAuditorCode].reportIPFS;\r\n    }\r\n\r\n    /// @notice marks contract as audited\r\n    /// @param _codeHash the code hash of the stamped contract. _codeHash equals to sha3 of the contract byte-code\r\n    /// @param _reportIPFS IPFS hash of the audit report\r\n    /// @param _isApproved whether the contract is approved or rejected\r\n    function registerAudit(bytes32 _codeHash, bytes _reportIPFS, bool _isApproved) public\r\n    {\r\n        require(_codeHash != 0x0, \"codeHash cannot be 0x0\");\r\n        require(_reportIPFS.length != 0x0, \"report IPFS cannot be 0x0\");\r\n        bytes32 hashAuditorCode = keccak256(abi.encodePacked(msg.sender, _codeHash));\r\n\r\n        Audit storage audit = Audits[hashAuditorCode];\r\n        require(audit.outcome == NOT_AUDITED, \"already audited\");\r\n\r\n        if ( _isApproved )\r\n            audit.outcome = AUDITED_AND_APPROVED;\r\n        else\r\n            audit.outcome = AUDITED_AND_REJECTED;\r\n        audit.reportIPFS = _reportIPFS;\r\n        SolidStamp(ContractSolidStamp).auditContract(msg.sender, _codeHash, _reportIPFS, _isApproved);\r\n        emit AuditRegistered(msg.sender, _codeHash, _reportIPFS, _isApproved);\r\n    }\r\n\r\n    /// @notice marks multiple contracts as audited\r\n    /// @param _codeHashes the code hashes of the stamped contracts. each _codeHash equals to sha3 of the contract byte-code\r\n    /// @param _reportIPFS IPFS hash of the audit report\r\n    /// @param _isApproved whether the contracts are approved or rejected\r\n    function registerAudits(bytes32[] _codeHashes, bytes _reportIPFS, bool _isApproved) public\r\n    {\r\n        for(uint i=0; i<_codeHashes.length; i++ )\r\n        {\r\n            registerAudit(_codeHashes[i], _reportIPFS, _isApproved);\r\n        }\r\n    }\r\n\r\n\r\n    event SolidStampContractChanged(address newSolidStamp);\r\n\r\n    /// @dev Transfers SolidStamp contract a _newSolidStamp.\r\n    /// @param _newSolidStamp The address to transfer SolidStamp address to.\r\n    function changeSolidStampContract(address _newSolidStamp) public onlyOwner {\r\n      require(_newSolidStamp != address(0), \"SolidStamp contract cannot be 0x0\");\r\n      emit SolidStampContractChanged(_newSolidStamp);\r\n      ContractSolidStamp = _newSolidStamp;\r\n    }\r\n\r\n    /// @notice We don't want your arbitrary ether\r\n    function() payable public {\r\n        revert();\r\n    }    \r\n}\r\n\r\n/// @title The main SolidStamp.com contract\r\ncontract SolidStamp is Ownable, Pausable, Upgradable {\r\n    using SafeMath for uint;\r\n\r\n    /// @dev const value to indicate the contract is audited and approved\r\n    uint8 public constant NOT_AUDITED = 0x00;\r\n\r\n    /// @dev minimum amount of time for an audit request\r\n    uint public constant MIN_AUDIT_TIME = 24 hours;\r\n\r\n    /// @dev maximum amount of time for an audit request\r\n    uint public constant MAX_AUDIT_TIME = 28 days;\r\n\r\n    /// @dev aggregated amount of audit requests\r\n    uint public TotalRequestsAmount = 0;\r\n\r\n    // @dev amount of collected commision available to withdraw\r\n    uint public AvailableCommission = 0;\r\n\r\n    // @dev commission percentage, initially 1%\r\n    uint public Commission = 1;\r\n\r\n    /// @dev event fired when the service commission is changed\r\n    event NewCommission(uint commmission);\r\n\r\n    address public SolidStampRegisterAddress;\r\n\r\n    /// @notice SolidStamp constructor\r\n    constructor(address _addressRegistrySolidStamp) public {\r\n        SolidStampRegisterAddress = _addressRegistrySolidStamp;\r\n    }\r\n\r\n    /// @notice Audit request\r\n    struct AuditRequest {\r\n        // amount of Ethers offered by a particular requestor for an audit\r\n        uint amount;\r\n        // request expiration date\r\n        uint expireDate;\r\n    }\r\n\r\n    /// @dev Maps auditor and code hash to the total reward offered for auditing\r\n    /// the particular contract by the particular auditor.\r\n    /// Map key is: keccack256(auditor address, contract codeHash)\r\n    /// @dev codeHash is a sha3 from the contract byte code\r\n    mapping (bytes32 => uint) public Rewards;\r\n\r\n    /// @dev Maps requestor, auditor and codeHash to an AuditRequest\r\n    /// Map key is: keccack256(auditor address, requestor address, contract codeHash)\r\n    mapping (bytes32 => AuditRequest) public AuditRequests;\r\n\r\n    /// @dev event fired upon successul audit request\r\n    event AuditRequested(address auditor, address bidder, bytes32 codeHash, uint amount, uint expireDate);\r\n    /// @dev event fired when an request is sucessfully withdrawn\r\n    event RequestWithdrawn(address auditor, address bidder, bytes32 codeHash, uint amount);\r\n    /// @dev event fired when a contract is sucessfully audited\r\n    event ContractAudited(address auditor, bytes32 codeHash, bytes reportIPFS, bool isApproved, uint reward);\r\n\r\n    /// @notice registers an audit request\r\n    /// @param _auditor the address of the auditor the request is directed to\r\n    /// @param _codeHash the code hash of the contract to audit. _codeHash equals to sha3 of the contract byte-code\r\n    /// @param _auditTime the amount of time after which the requestor can withdraw the request\r\n    function requestAudit(address _auditor, bytes32 _codeHash, uint _auditTime)\r\n    public whenNotPaused payable\r\n    {\r\n        require(_auditor != 0x0, \"_auditor cannot be 0x0\");\r\n        // audit request cannot expire too quickly or last too long\r\n        require(_auditTime >= MIN_AUDIT_TIME, \"_auditTime should be >= MIN_AUDIT_TIME\");\r\n        require(_auditTime <= MAX_AUDIT_TIME, \"_auditTime should be <= MIN_AUDIT_TIME\");\r\n        require(msg.value > 0, \"msg.value should be >0\");\r\n\r\n        // revert if the contract is already audited by the auditor\r\n        uint8 outcome = SolidStampRegister(SolidStampRegisterAddress).getAuditOutcome(_auditor, _codeHash);\r\n        require(outcome == NOT_AUDITED, \"contract already audited\");\r\n\r\n        bytes32 hashAuditorCode = keccak256(abi.encodePacked(_auditor, _codeHash));\r\n        uint currentReward = Rewards[hashAuditorCode];\r\n        uint expireDate = now.add(_auditTime);\r\n        Rewards[hashAuditorCode] = currentReward.add(msg.value);\r\n        TotalRequestsAmount = TotalRequestsAmount.add(msg.value);\r\n\r\n        bytes32 hashAuditorRequestorCode = keccak256(abi.encodePacked(_auditor, msg.sender, _codeHash));\r\n        AuditRequest storage request = AuditRequests[hashAuditorRequestorCode];\r\n        if ( request.amount == 0 ) {\r\n            // first request from msg.sender to audit contract _codeHash by _auditor\r\n            AuditRequests[hashAuditorRequestorCode] = AuditRequest({\r\n                amount : msg.value,\r\n                expireDate : expireDate\r\n            });\r\n            emit AuditRequested(_auditor, msg.sender, _codeHash, msg.value, expireDate);\r\n        } else {\r\n            // Request already exists. Increasing value\r\n            request.amount = request.amount.add(msg.value);\r\n            // if new expireDate is later than existing one - increase the existing one\r\n            if ( expireDate > request.expireDate )\r\n                request.expireDate = expireDate;\r\n            // event returns the total request value and its expireDate\r\n            emit AuditRequested(_auditor, msg.sender, _codeHash, request.amount, request.expireDate);\r\n        }\r\n    }\r\n\r\n    /// @notice withdraws an audit request\r\n    /// @param _auditor the address of the auditor the request is directed to\r\n    /// @param _codeHash the code hash of the contract to audit. _codeHash equals to sha3 of the contract byte-code\r\n    function withdrawRequest(address _auditor, bytes32 _codeHash)\r\n    public\r\n    {\r\n        bytes32 hashAuditorCode = keccak256(abi.encodePacked(_auditor, _codeHash));\r\n\r\n        // revert if the contract is already audited by the auditor\r\n        uint8 outcome = SolidStampRegister(SolidStampRegisterAddress).getAuditOutcome(_auditor, _codeHash);\r\n        require(outcome == NOT_AUDITED, \"contract already audited\");\r\n\r\n        bytes32 hashAuditorRequestorCode = keccak256(abi.encodePacked(_auditor, msg.sender, _codeHash));\r\n        AuditRequest storage request = AuditRequests[hashAuditorRequestorCode];\r\n        require(request.amount > 0, \"nothing to withdraw\");\r\n        require(now > request.expireDate, \"cannot withdraw before request.expireDate\");\r\n\r\n        uint amount = request.amount;\r\n        delete request.amount;\r\n        delete request.expireDate;\r\n        Rewards[hashAuditorCode] = Rewards[hashAuditorCode].sub(amount);\r\n        TotalRequestsAmount = TotalRequestsAmount.sub(amount);\r\n        emit RequestWithdrawn(_auditor, msg.sender, _codeHash, amount);\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    /// @notice transfers reward to the auditor. Called by SolidStampRegister after the contract is audited\r\n    /// @param _auditor the auditor who audited the contract\r\n    /// @param _codeHash the code hash of the stamped contract. _codeHash equals to sha3 of the contract byte-code\r\n    /// @param _reportIPFS IPFS hash of the audit report\r\n    /// @param _isApproved whether the contract is approved or rejected\r\n    function auditContract(address _auditor, bytes32 _codeHash, bytes _reportIPFS, bool _isApproved)\r\n    public whenNotPaused onlySolidStampRegisterContract\r\n    {\r\n        bytes32 hashAuditorCode = keccak256(abi.encodePacked(_auditor, _codeHash));\r\n        uint reward = Rewards[hashAuditorCode];\r\n        TotalRequestsAmount = TotalRequestsAmount.sub(reward);\r\n        uint commissionKept = calcCommission(reward);\r\n        AvailableCommission = AvailableCommission.add(commissionKept);\r\n        emit ContractAudited(_auditor, _codeHash, _reportIPFS, _isApproved, reward);\r\n        _auditor.transfer(reward.sub(commissionKept));\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the contractSolidStamp\r\n     */\r\n    modifier onlySolidStampRegisterContract() {\r\n      require(msg.sender == SolidStampRegisterAddress, \"can be only run by SolidStampRegister contract\");\r\n      _;\r\n    }\r\n\r\n    /// @dev const value to indicate the maximum commision service owner can set\r\n    uint public constant MAX_COMMISSION = 9;\r\n\r\n    /// @notice ability for owner to change the service commmission\r\n    /// @param _newCommission new commision percentage\r\n    function changeCommission(uint _newCommission) public onlyOwner whenNotPaused {\r\n        require(_newCommission <= MAX_COMMISSION, \"commission should be <= MAX_COMMISSION\");\r\n        require(_newCommission != Commission, \"_newCommission==Commmission\");\r\n        Commission = _newCommission;\r\n        emit NewCommission(Commission);\r\n    }\r\n\r\n    /// @notice calculates the SolidStamp commmission\r\n    /// @param _amount amount to calcuate the commission from\r\n    function calcCommission(uint _amount) private view returns(uint) {\r\n        return _amount.mul(Commission)/100; // service commision\r\n    }\r\n\r\n    /// @notice ability for owner to withdraw the commission\r\n    /// @param _amount amount to withdraw\r\n    function withdrawCommission(uint _amount) public onlyOwner {\r\n        // cannot withdraw money reserved for requests\r\n        require(_amount <= AvailableCommission, \"Cannot withdraw more than available\");\r\n        AvailableCommission = AvailableCommission.sub(_amount);\r\n        msg.sender.transfer(_amount);\r\n    }\r\n\r\n    /// @dev Override unpause so we can't have newContractAddress set,\r\n    ///  because then the contract was upgraded.\r\n    /// @notice This is public rather than external so we can call super.unpause\r\n    ///  without using an expensive CALL.\r\n    function unpause() public onlyOwner whenPaused {\r\n        require(newContractAddress == address(0), \"new contract cannot be 0x0\");\r\n\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n\r\n    /// @notice We don't want your arbitrary ether\r\n    function() payable public {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"Rewards\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"AuditRequests\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expireDate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Commission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NOT_AUDITED\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SolidStampRegisterAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"AvailableCommission\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_v2Address\",\"type\":\"address\"}],\"name\":\"setNewAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auditor\",\"type\":\"address\"},{\"name\":\"_codeHash\",\"type\":\"bytes32\"},{\"name\":\"_auditTime\",\"type\":\"uint256\"}],\"name\":\"requestAudit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalRequestsAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_COMMISSION\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MIN_AUDIT_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auditor\",\"type\":\"address\"},{\"name\":\"_codeHash\",\"type\":\"bytes32\"},{\"name\":\"_reportIPFS\",\"type\":\"bytes\"},{\"name\":\"_isApproved\",\"type\":\"bool\"}],\"name\":\"auditContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_AUDIT_TIME\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCommission\",\"type\":\"uint256\"}],\"name\":\"changeCommission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_auditor\",\"type\":\"address\"},{\"name\":\"_codeHash\",\"type\":\"bytes32\"}],\"name\":\"withdrawRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addressRegistrySolidStamp\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"commmission\",\"type\":\"uint256\"}],\"name\":\"NewCommission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"expireDate\",\"type\":\"uint256\"}],\"name\":\"AuditRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RequestWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"auditor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"codeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"reportIPFS\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"isApproved\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"ContractAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newContract\",\"type\":\"address\"}],\"name\":\"ContractUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SolidStamp","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000039b46de96cfe29ffcf225e899b8ffe1f7fbba59e","Library":"","SwarmSource":"bzzr://048e32ac976491c1b7317c8944eb1daad36cc2eb644910bf623c3363bd12738f"}]}