{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/IRegistry.sol\r\n\r\n// limited ContractRegistry definition\r\ninterface IRegistry {\r\n  function owner()\r\n    external\r\n    returns(address);\r\n\r\n  function updateContractAddress(\r\n    string _name,\r\n    address _address\r\n  )\r\n    external\r\n    returns (address);\r\n\r\n  function getContractAddress(\r\n    string _name\r\n  )\r\n    external\r\n    view\r\n    returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/IBrickblockToken.sol\r\n\r\n// limited BrickblockToken definition\r\ninterface IBrickblockToken {\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    external\r\n    returns (bool);\r\n\r\n  function balanceOf(\r\n    address _address\r\n  )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IFeeManager.sol\r\n\r\ninterface IFeeManager {\r\n  function claimFee(\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool);\r\n\r\n  function payFee()\r\n    external\r\n    payable\r\n    returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IAccessToken.sol\r\n\r\ninterface IAccessToken {\r\n  function lockBBK(\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool);\r\n\r\n  function unlockBBK(\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool);\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool);\r\n\r\n  function distribute(\r\n    uint256 _amount\r\n  )\r\n    external\r\n    returns (bool);\r\n\r\n  function burn(\r\n    address _address,\r\n    uint256 _value\r\n  )\r\n    external\r\n    returns (bool);\r\n}\r\n\r\n// File: contracts/BrickblockAccount.sol\r\n\r\n/* solium-disable security/no-block-members */\r\n\r\n\r\ncontract BrickblockAccount is Ownable {\r\n  uint8 public constant version = 1;\r\n  uint256 public releaseTimeOfCompanyBBKs;\r\n  IRegistry private registry;\r\n\r\n  constructor\r\n  (\r\n    address _registryAddress,\r\n    uint256 _releaseTimeOfCompanyBBKs\r\n  )\r\n    public\r\n  {\r\n    require(_releaseTimeOfCompanyBBKs > block.timestamp);\r\n    releaseTimeOfCompanyBBKs = _releaseTimeOfCompanyBBKs;\r\n    registry = IRegistry(_registryAddress);\r\n  }\r\n\r\n  function pullFunds()\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    IBrickblockToken bbk = IBrickblockToken(\r\n      registry.getContractAddress(\"BrickblockToken\")\r\n    );\r\n    uint256 _companyFunds = bbk.balanceOf(address(bbk));\r\n    return bbk.transferFrom(address(bbk), address(this), _companyFunds);\r\n  }\r\n\r\n  function lockBBK\r\n  (\r\n    uint256 _value\r\n  )\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    IAccessToken act = IAccessToken(\r\n      registry.getContractAddress(\"AccessToken\")\r\n    );\r\n    IBrickblockToken bbk = IBrickblockToken(\r\n      registry.getContractAddress(\"BrickblockToken\")\r\n    );\r\n\r\n    require(bbk.approve(address(act), _value));\r\n\r\n    return act.lockBBK(_value);\r\n  }\r\n\r\n  function unlockBBK(\r\n    uint256 _value\r\n  )\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    IAccessToken act = IAccessToken(\r\n      registry.getContractAddress(\"AccessToken\")\r\n    );\r\n    return act.unlockBBK(_value);\r\n  }\r\n\r\n  function claimFee(\r\n    uint256 _value\r\n  )\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    IFeeManager fmr = IFeeManager(\r\n      registry.getContractAddress(\"FeeManager\")\r\n    );\r\n    return fmr.claimFee(_value);\r\n  }\r\n\r\n  function withdrawEthFunds(\r\n    address _address,\r\n    uint256 _value\r\n  )\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    require(address(this).balance >= _value);\r\n    _address.transfer(_value);\r\n    return true;\r\n  }\r\n\r\n  function withdrawActFunds(\r\n    address _address,\r\n    uint256 _value\r\n  )\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    IAccessToken act = IAccessToken(\r\n      registry.getContractAddress(\"AccessToken\")\r\n    );\r\n    return act.transfer(_address, _value);\r\n  }\r\n\r\n  function withdrawBbkFunds(\r\n    address _address,\r\n    uint256 _value\r\n  )\r\n    external\r\n    onlyOwner\r\n    returns (bool)\r\n  {\r\n    require(block.timestamp >= releaseTimeOfCompanyBBKs);\r\n    IBrickblockToken bbk = IBrickblockToken(\r\n      registry.getContractAddress(\"BrickblockToken\")\r\n    );\r\n    return bbk.transfer(_address, _value);\r\n  }\r\n\r\n  // ensure that we can be paid ether\r\n  function()\r\n    public\r\n    payable\r\n  {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"lockBBK\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseTimeOfCompanyBBKs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawEthFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unlockBBK\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawActFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pullFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawBbkFunds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"claimFee\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registryAddress\",\"type\":\"address\"},{\"name\":\"_releaseTimeOfCompanyBBKs\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BrickblockAccount","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005973376b603268fe4251d13040226078257014f80000000000000000000000000000000000000000000000000000000060ea3480","Library":"","SwarmSource":"bzzr://623dfcfa6cd8a78166c3c979a5e71aa605b3e783257a869869d1580177d294fb"}]}