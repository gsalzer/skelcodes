{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/***\r\n * https://apexONE.io\r\n *\r\n * apex Solids - Solids is an eternal smart contract game.\r\n * \r\n * The solids are priced by number of faces.\r\n * Price increases by 30% every flip.\r\n * Over 4 hours price will fall to base.\r\n * Holders after 4 hours with no flip can collect the holder fund.\r\n * \r\n * 10% of rise buyer gets APX1 tokens in the apexONE exchange.\r\n * 5% of rise goes to holder fund.\r\n * 5% of rise goes to team and promoters.\r\n * The rest (110%) goes to previous owner.\r\n * \r\n */\r\ncontract ERC721 {\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n}\r\n\r\ncontract apexONEInterface {\r\n  function isStarted() public view returns (bool);\r\n  function buyFor(address _referredBy, address _customerAddress) public payable returns (uint256);\r\n}\r\n\r\ncontract apexSolids is ERC721 {\r\n\r\n  /*=================================\r\n  =            MODIFIERS            =\r\n  =================================*/\r\n\r\n  /// @dev Access modifier for owner functions\r\n  modifier onlyOwner() {\r\n    require(msg.sender == contractOwner);\r\n    _;\r\n  }\r\n\r\n  /// @dev Prevent contract calls.\r\n  modifier notContract() {\r\n    require(tx.origin == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /// @dev notPaused\r\n  modifier notPaused() {\r\n    require(paused == false);\r\n    _;\r\n  }\r\n\r\n  /// @dev notGasbag\r\n  modifier notGasbag() {\r\n    require(tx.gasprice < 99999999999);\r\n    _;\r\n  }\r\n\r\n  /* @dev notMoron (childish but fun)\r\n    modifier notMoron() {\r\n      require(msg.sender != 0x41FE3738B503cBaFD01C1Fd8DD66b7fE6Ec11b01);\r\n      _;\r\n    }\r\n  */\r\n  \r\n  /*==============================\r\n  =            EVENTS            =\r\n  ==============================*/\r\n\r\n  event onTokenSold(\r\n       uint256 indexed tokenId,\r\n       uint256 price,\r\n       address prevOwner,\r\n       address newOwner,\r\n       string name\r\n    );\r\n\r\n\r\n  /*==============================\r\n  =            CONSTANTS         =\r\n  ==============================*/\r\n\r\n  string public constant NAME = \"apex Solids\";\r\n  string public constant SYMBOL = \"APXS\";\r\n\r\n  uint256 private increaseRatePercent =  130;\r\n  uint256 private devFeePercent =  5;\r\n  uint256 private bagHolderFundPercent =  5;\r\n  uint256 private exchangeTokenPercent =  10;\r\n  uint256 private previousOwnerPercent =  110;\r\n  uint256 private priceFallDuration =  4 hours;\r\n\r\n  /*==============================\r\n  =            STORAGE           =\r\n  ==============================*/\r\n\r\n  /// @dev A mapping from solid IDs to the address that owns them.\r\n  mapping (uint256 => address) public solidIndexToOwner;\r\n\r\n  // @dev A mapping from owner address to count of tokens that address owns.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  /// @dev A mapping from SolidID to an address that has been approved to call\r\n  mapping (uint256 => address) public solidIndexToApproved;\r\n\r\n  // @dev The address of the owner\r\n  address public contractOwner;\r\n\r\n  // @dev Current dev fee\r\n  uint256 public currentDevFee = 0;\r\n\r\n  // @dev The address of the exchange contract\r\n  address public apexONEaddress;\r\n\r\n  // @dev paused\r\n  bool public paused;\r\n\r\n  /*==============================\r\n  =            DATATYPES         =\r\n  ==============================*/\r\n\r\n  struct Solid {\r\n    string name;\r\n    uint256 basePrice;\r\n    uint256 highPrice;\r\n    uint256 fallDuration;\r\n    uint256 saleTime; // when was sold last\r\n    uint256 bagHolderFund;\r\n  }\r\n\r\n  Solid [6] public solids;\r\n\r\n  constructor () public {\r\n\r\n    contractOwner = msg.sender;\r\n    paused=true;\r\n\r\n    Solid memory _Tetrahedron = Solid({\r\n            name: \"Tetrahedron\",\r\n            basePrice: 0.014 ether,\r\n            highPrice: 0.014 ether,\r\n            fallDuration: priceFallDuration,\r\n            saleTime: now,\r\n            bagHolderFund: 0\r\n            });\r\n\r\n    solids[1] =  _Tetrahedron;\r\n\r\n    Solid memory _Cube = Solid({\r\n            name: \"Cube\",\r\n            basePrice: 0.016 ether,\r\n            highPrice: 0.016 ether,\r\n            fallDuration: priceFallDuration,\r\n            saleTime: now,\r\n            bagHolderFund: 0\r\n            });\r\n\r\n    solids[2] =  _Cube;\r\n\r\n    Solid memory _Octahedron = Solid({\r\n            name: \"Octahedron\",\r\n            basePrice: 0.018 ether,\r\n            highPrice: 0.018 ether,\r\n            fallDuration: priceFallDuration,\r\n            saleTime: now,\r\n            bagHolderFund: 0\r\n            });\r\n\r\n    solids[3] =  _Octahedron;\r\n\r\n    Solid memory _Dodecahedron = Solid({\r\n            name: \"Dodecahedron\",\r\n            basePrice: 0.02 ether,\r\n            highPrice: 0.02 ether,\r\n            fallDuration: priceFallDuration,\r\n            saleTime: now,\r\n            bagHolderFund: 0\r\n            });\r\n\r\n    solids[4] =  _Dodecahedron;\r\n\r\n    Solid memory _Icosahedron = Solid({\r\n            name: \"Icosahedron\",\r\n            basePrice: 0.03 ether,\r\n            highPrice: 0.03 ether,\r\n            fallDuration: priceFallDuration,\r\n            saleTime: now,\r\n            bagHolderFund: 0\r\n            });\r\n\r\n    solids[5] =  _Icosahedron;\r\n\r\n    _transfer(0x0, contractOwner, 1);\r\n    _transfer(0x0, contractOwner, 2);\r\n    _transfer(0x0, contractOwner, 3);\r\n    _transfer(0x0, contractOwner, 4);\r\n    _transfer(0x0, contractOwner, 5);\r\n\r\n  }\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    solidIndexToApproved[_tokenId] = _to;\r\n\r\n    emit Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific solid.\r\n  /// @param _tokenId The tokenId of the solid of interest.\r\n  function getSolid(uint256 _tokenId) public view returns (\r\n    string solidName,\r\n    uint256 price,\r\n    address currentOwner,\r\n    uint256 bagHolderFund,\r\n    bool isBagFundAvailable\r\n  ) {\r\n    Solid storage solid = solids[_tokenId];\r\n    solidName = solid.name;\r\n    price = priceOf(_tokenId);\r\n    currentOwner = solidIndexToOwner[_tokenId];\r\n    bagHolderFund = solid.bagHolderFund;\r\n    isBagFundAvailable = now > (solid.saleTime + priceFallDuration);\r\n  }\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  /// For querying owner of token\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = solidIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  // Allows someone to send ether and obtain the token\r\n  function purchase(uint256 _tokenId , address _referredBy) public payable notContract notPaused notGasbag /*notMoron*/ {\r\n\r\n    address oldOwner = solidIndexToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n\r\n    uint256 currentPrice = priceOf(_tokenId);\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= currentPrice);\r\n\r\n    uint256 previousOwnerGets = SafeMath.mul(SafeMath.div(currentPrice,increaseRatePercent),previousOwnerPercent);\r\n    uint256 exchangeTokensAmount = SafeMath.mul(SafeMath.div(currentPrice,increaseRatePercent),exchangeTokenPercent);\r\n    uint256 devFeeAmount = SafeMath.mul(SafeMath.div(currentPrice,increaseRatePercent),devFeePercent);\r\n    uint256 bagHolderFundAmount = SafeMath.mul(SafeMath.div(currentPrice,increaseRatePercent),bagHolderFundPercent);\r\n\r\n    currentDevFee = currentDevFee + devFeeAmount;\r\n\r\n    if (exchangeContract.isStarted()) {\r\n        exchangeContract.buyFor.value(exchangeTokensAmount)(_referredBy, msg.sender);\r\n    }else{\r\n        // send excess back because exchange is not ready\r\n        msg.sender.transfer(exchangeTokensAmount);\r\n    }\r\n\r\n    // do the sale\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // set new price and saleTime\r\n    solids[_tokenId].highPrice = SafeMath.mul(SafeMath.div(currentPrice,100),increaseRatePercent);\r\n    solids[_tokenId].saleTime = now;\r\n    solids[_tokenId].bagHolderFund+=bagHolderFundAmount;\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      if (oldOwner.send(previousOwnerGets)){}\r\n    }\r\n\r\n    emit onTokenSold(_tokenId, currentPrice, oldOwner, newOwner, solids[_tokenId].name);\r\n\r\n  }\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n\r\n    Solid storage solid = solids[_tokenId];\r\n    uint256 secondsPassed  = now - solid.saleTime;\r\n\r\n    if (secondsPassed >= solid.fallDuration || solid.highPrice==solid.basePrice) {\r\n            return solid.basePrice;\r\n    }\r\n\r\n    uint256 totalPriceChange = solid.highPrice - solid.basePrice;\r\n    uint256 currentPriceChange = totalPriceChange * secondsPassed /solid.fallDuration;\r\n    uint256 currentPrice = solid.highPrice - currentPriceChange;\r\n\r\n    return currentPrice;\r\n  }\r\n\r\n  function collectBagHolderFund(uint256 _tokenId) public notPaused {\r\n      require(msg.sender == solidIndexToOwner[_tokenId]);\r\n      uint256 bagHolderFund;\r\n      bool isBagFundAvailable = false;\r\n       (\r\n        ,\r\n        ,\r\n        ,\r\n        bagHolderFund,\r\n        isBagFundAvailable\r\n        ) = getSolid(_tokenId);\r\n        require(isBagFundAvailable && bagHolderFund > 0);\r\n        uint256 amount = bagHolderFund;\r\n        solids[_tokenId].bagHolderFund = 0;\r\n        msg.sender.transfer(amount);\r\n  }\r\n\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = solidIndexToOwner[_tokenId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  /// @param _owner The owner whose tokens we are interested in.\r\n  /// @dev This method MUST NEVER be called by smart contract code.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalTokens = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 tokenId;\r\n      for (tokenId = 0; tokenId <= totalTokens; tokenId++) {\r\n        if (solidIndexToOwner[tokenId] == _owner) {\r\n          result[resultIndex] = tokenId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return 5;\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return solidIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == solidIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific token to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n\r\n    // no transfer to contract\r\n    uint length;\r\n    assembly { length := extcodesize(_to) }\r\n    require (length == 0);\r\n\r\n    ownershipTokenCount[_to]++;\r\n    //transfer ownership\r\n    solidIndexToOwner[_tokenId] = _to;\r\n\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete solidIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /// @dev Not a charity\r\n  function collectDevFees() public onlyOwner {\r\n      if (currentDevFee < address(this).balance){\r\n         uint256 amount = currentDevFee;\r\n         currentDevFee = 0;\r\n         contractOwner.transfer(amount);\r\n      }\r\n  }\r\n\r\n  /// @dev Interface to exchange\r\n   apexONEInterface public exchangeContract;\r\n\r\n  function setExchangeAddresss(address _address) public onlyOwner {\r\n    exchangeContract = apexONEInterface(_address);\r\n    apexONEaddress = _address;\r\n   }\r\n\r\n   /// @dev stop and start\r\n   function setPaused(bool _paused) public onlyOwner {\r\n     paused = _paused;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSolid\",\"outputs\":[{\"name\":\"solidName\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"uint256\"},{\"name\":\"currentOwner\",\"type\":\"address\"},{\"name\":\"bagHolderFund\",\"type\":\"uint256\"},{\"name\":\"isBagFundAvailable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"solids\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"basePrice\",\"type\":\"uint256\"},{\"name\":\"highPrice\",\"type\":\"uint256\"},{\"name\":\"fallDuration\",\"type\":\"uint256\"},{\"name\":\"saleTime\",\"type\":\"uint256\"},{\"name\":\"bagHolderFund\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"apexONEaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"collectDevFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setExchangeAddresss\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"takeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"solidIndexToOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDevFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"collectBagHolderFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"solidIndexToApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"string\"}],\"name\":\"onTokenSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"apexSolids","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c64625bcbf4dc8ce94d5f9e3e58b5578f2a7cb1fb165302ba404f90256dee702"}]}