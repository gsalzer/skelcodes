{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/RBACInterface.sol\r\n\r\n/// @title RBACInterface\r\n/// @notice The interface for Role-Based Access Control.\r\ncontract RBACInterface {\r\n    function hasRole(address addr, string role) public view returns (bool);\r\n}\r\n\r\n// File: contracts/RBAC.sol\r\n\r\n/// @title RBAC\r\n/// @notice A simple implementation of Role-Based Access Control.\r\ncontract RBAC is RBACInterface, Ownable {\r\n\r\n    string constant ROLE_ADMIN = \"rbac__admin\";\r\n\r\n    mapping(address => mapping(string => bool)) internal roles;\r\n\r\n    event RoleAdded(address indexed addr, string role);\r\n    event RoleRemoved(address indexed addr, string role);\r\n\r\n    /// @notice Check if an address has a role.\r\n    /// @param addr The address.\r\n    /// @param role The role.\r\n    /// @return A boolean indicating whether the address has the role.\r\n    function hasRole(address addr, string role) public view returns (bool) {\r\n        return roles[addr][role];\r\n    }\r\n\r\n    /// @notice Add a role to an address. Only the owner or an admin can add a\r\n    /// role.\r\n    /// @dev Requires caller to be the owner or have the role \"rbac__admin\".\r\n    /// @param addr The address.\r\n    /// @param role The role.\r\n    function addRole(address addr, string role) public onlyOwnerOrAdmin {\r\n        roles[addr][role] = true;\r\n        emit RoleAdded(addr, role);\r\n    }\r\n\r\n    /// @notice Remove a role from an address. Only the owner or an admin can\r\n    /// remove a role.\r\n    /// @dev Requires caller to be the owner or have the role \"rbac__admin\".\r\n    /// @param addr The address.\r\n    /// @param role The role.\r\n    function removeRole(address addr, string role) public onlyOwnerOrAdmin {\r\n        roles[addr][role] = false;\r\n        emit RoleRemoved(addr, role);\r\n    }\r\n\r\n    modifier onlyOwnerOrAdmin() {\r\n        require(msg.sender == owner || hasRole(msg.sender, ROLE_ADMIN), \"Access denied: missing role\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"string\"}],\"name\":\"removeRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"role\",\"type\":\"string\"}],\"name\":\"addRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"RBAC","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b672d8b364c71b2cd3dc96e7effc0858cab60000ee02b8af1c54ff07113fac67"}]}