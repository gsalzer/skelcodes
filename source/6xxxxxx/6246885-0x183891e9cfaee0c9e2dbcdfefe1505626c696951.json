{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    require(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 token,\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  )\r\n    internal\r\n  {\r\n    require(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    require(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n * See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Time {\r\n    /**\r\n    * @dev Current time getter\r\n    * @return Current time in seconds\r\n    */\r\n    function _currentTime() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n * Supports unlimited numbers of roles and addresses.\r\n * See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n * for you to write your own implementation of this interface using Enums or similar.\r\n * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n * to avoid typos.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string _role)\r\n    view\r\n    public\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string _role)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function addRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function removeRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract Lockable {\r\n    // locked values specified by address\r\n    mapping(address => uint256) public lockedValues;\r\n\r\n    /**\r\n    * @dev Method to lock specified value by specified address\r\n    * @param _for Address for which the value will be locked\r\n    * @param _value Value that be locked\r\n    */\r\n    function _lock(address _for, uint256 _value) internal {\r\n        require(_for != address(0) && _value > 0, \"Invalid lock operation configuration.\");\r\n\r\n        if (_value != lockedValues[_for]) {\r\n            lockedValues[_for] = _value;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Method to unlock (reset) locked value\r\n    * @param _for Address for which the value will be unlocked\r\n    */\r\n    function _unlock(address _for) internal {\r\n        require(_for != address(0), \"Invalid unlock operation configuration.\");\r\n        \r\n        if (lockedValues[_for] != 0) {\r\n            lockedValues[_for] = 0;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Operable is Ownable, RBAC {\r\n    // role key\r\n    string public constant ROLE_OPERATOR = \"operator\";\r\n\r\n    /**\r\n     * @dev Reverts in case account is not Owner or Operator role\r\n     */\r\n    modifier hasOwnerOrOperatePermission() {\r\n        require(msg.sender == owner || hasRole(msg.sender, ROLE_OPERATOR), \"Access denied.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter to determine if address is in whitelist\r\n     */\r\n    function operator(address _operator) public view returns (bool) {\r\n        return hasRole(_operator, ROLE_OPERATOR);\r\n    }\r\n\r\n    /**\r\n     * @dev Method to add accounts with Operator role\r\n     * @param _operator Address that will receive Operator role access\r\n     */\r\n    function addOperator(address _operator) public onlyOwner {\r\n        addRole(_operator, ROLE_OPERATOR);\r\n    }\r\n\r\n    /**\r\n     * @dev Method to remove accounts with Operator role\r\n     * @param _operator Address that will loose Operator role access\r\n     */\r\n    function removeOperator(address _operator) public onlyOwner {\r\n        removeRole(_operator, ROLE_OPERATOR);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Withdrawal is Ownable {\r\n    // Address to which funds will be withdrawn\r\n    address public withdrawWallet;\r\n\r\n    /**\r\n    * Event for withdraw logging\r\n    * @param value Value that was withdrawn\r\n    */\r\n    event WithdrawLog(uint256 value);\r\n\r\n    /**\r\n    * @param _withdrawWallet Address to which funds will be withdrawn\r\n    */\r\n    constructor(address _withdrawWallet) public {\r\n        require(_withdrawWallet != address(0), \"Invalid funds holder wallet.\");\r\n\r\n        withdrawWallet = _withdrawWallet;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers funds from the contract to the specified withdraw wallet address\r\n    */\r\n    function withdrawAll() external onlyOwner {\r\n        uint256 weiAmount = address(this).balance;\r\n      \r\n        withdrawWallet.transfer(weiAmount);\r\n        emit WithdrawLog(weiAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers a part of the funds from the contract to the specified withdraw wallet address\r\n    * @param _weiAmount Part of the funds to be withdrawn\r\n    */\r\n    function withdraw(uint256 _weiAmount) external onlyOwner {\r\n        require(_weiAmount <= address(this).balance, \"Not enough funds.\");\r\n\r\n        withdrawWallet.transfer(_weiAmount);\r\n        emit WithdrawLog(_weiAmount);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PriceStrategy is Time, Operable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * Describes stage parameters\r\n    * @param start Stage start date\r\n    * @param end Stage end date\r\n    * @param volume Number of tokens available for the stage\r\n    * @param priceInCHF Token price in CHF for the stage\r\n    * @param minBonusVolume The minimum number of tokens after which the bonus tokens is added\r\n    * @param bonus Percentage of bonus tokens\r\n    */\r\n    struct Stage {\r\n        uint256 start;\r\n        uint256 end;\r\n        uint256 volume;\r\n        uint256 priceInCHF;\r\n        uint256 minBonusVolume;\r\n        uint256 bonus;\r\n        bool lock;\r\n    }\r\n\r\n    /**\r\n    * Describes lockup period parameters\r\n    * @param periodInSec Lockup period in seconds\r\n    * @param bonus Lockup bonus tokens percentage\r\n    */\r\n    struct LockupPeriod {\r\n        uint256 expires;\r\n        uint256 bonus;\r\n    }\r\n\r\n    // describes stages available for ICO lifetime\r\n    Stage[] public stages;\r\n\r\n    // lockup periods specified by the period in month\r\n    mapping(uint256 => LockupPeriod) public lockupPeriods;\r\n\r\n    // number of decimals supported by CHF rates\r\n    uint256 public constant decimalsCHF = 18;\r\n\r\n    // minimum allowed investment in CHF (decimals 1e+18)\r\n    uint256 public minInvestmentInCHF;\r\n\r\n    // ETH rate in CHF\r\n    uint256 public rateETHtoCHF;\r\n\r\n    /**\r\n    * Event for ETH to CHF rate changes logging\r\n    * @param newRate New rate value\r\n    */\r\n    event RateChangedLog(uint256 newRate);\r\n\r\n    /**\r\n    * @param _rateETHtoCHF Cost of ETH in CHF\r\n    * @param _minInvestmentInCHF Minimal allowed investment in CHF\r\n    */\r\n    constructor(uint256 _rateETHtoCHF, uint256 _minInvestmentInCHF) public {\r\n        require(_minInvestmentInCHF > 0, \"Minimum investment can not be set to 0.\");        \r\n        minInvestmentInCHF = _minInvestmentInCHF;\r\n\r\n        setETHtoCHFrate(_rateETHtoCHF);\r\n\r\n        // PRE-ICO\r\n        stages.push(Stage({\r\n            start: 1536969600, // 15th Sep, 2018 00:00:00\r\n            end: 1542239999, // 14th Nov, 2018 23:59:59\r\n            volume: uint256(25000000000).mul(10 ** 18), // (twenty five billion)\r\n            priceInCHF: uint256(2).mul(10 ** 14), // CHF 0.00020\r\n            minBonusVolume: 0,\r\n            bonus: 0,\r\n            lock: false\r\n        }));\r\n\r\n        // ICO\r\n        stages.push(Stage({\r\n            start: 1542240000, // 15th Nov, 2018 00:00:00\r\n            end: 1550188799, // 14th Feb, 2019 23:59:59\r\n            volume: uint256(65000000000).mul(10 ** 18), // (forty billion)\r\n            priceInCHF: uint256(4).mul(10 ** 14), // CHF 0.00040\r\n            minBonusVolume: uint256(400000000).mul(10 ** 18), // (four hundred million)\r\n            bonus: 2000, // 20% bonus tokens\r\n            lock: true\r\n        }));\r\n\r\n        _setLockupPeriod(1550188799, 18, 3000); // 18 months after the end of the ICO / 30%\r\n        _setLockupPeriod(1550188799, 12, 2000); // 12 months after the end of the ICO / 20%\r\n        _setLockupPeriod(1550188799, 6, 1000); // 6 months after the end of the ICO / 10%\r\n    }\r\n\r\n    /**\r\n    * @dev Updates ETH to CHF rate\r\n    * @param _rateETHtoCHF Cost of ETH in CHF\r\n    */\r\n    function setETHtoCHFrate(uint256 _rateETHtoCHF) public hasOwnerOrOperatePermission {\r\n        require(_rateETHtoCHF > 0, \"Rate can not be set to 0.\");        \r\n        rateETHtoCHF = _rateETHtoCHF;\r\n        emit RateChangedLog(rateETHtoCHF);\r\n    }\r\n\r\n    /**\r\n    * @dev Tokens amount based on investment value in wei\r\n    * @param _wei Investment value in wei\r\n    * @param _lockup Lockup period in months\r\n    * @param _sold Number of tokens sold by the moment\r\n    * @return Amount of tokens and bonuses\r\n    */\r\n    function getTokensAmount(uint256 _wei, uint256 _lockup, uint256 _sold) public view returns (uint256 tokens, uint256 bonus) { \r\n        uint256 chfAmount = _wei.mul(rateETHtoCHF).div(10 ** decimalsCHF);\r\n        require(chfAmount >= minInvestmentInCHF, \"Investment value is below allowed minimum.\");\r\n\r\n        Stage memory currentStage = _getCurrentStage();\r\n        require(currentStage.priceInCHF > 0, \"Invalid price value.\");        \r\n\r\n        tokens = chfAmount.mul(10 ** decimalsCHF).div(currentStage.priceInCHF);\r\n\r\n        uint256 bonusSize;\r\n        if (tokens >= currentStage.minBonusVolume) {\r\n            bonusSize = currentStage.bonus.add(lockupPeriods[_lockup].bonus);\r\n        } else {\r\n            bonusSize = lockupPeriods[_lockup].bonus;\r\n        }\r\n\r\n        bonus = tokens.mul(bonusSize).div(10 ** 4);\r\n\r\n        uint256 total = tokens.add(bonus);\r\n        require(currentStage.volume > _sold.add(total), \"Not enough tokens available.\");\r\n    }    \r\n\r\n    /**\r\n    * @dev Finds current stage parameters according to the rules and current date and time\r\n    * @return Current stage parameters (available volume of tokens and price in CHF)\r\n    */\r\n    function _getCurrentStage() internal view returns (Stage) {\r\n        uint256 index = 0;\r\n        uint256 time = _currentTime();\r\n\r\n        Stage memory result;\r\n\r\n        while (index < stages.length) {\r\n            Stage memory stage = stages[index];\r\n\r\n            if ((time >= stage.start && time <= stage.end)) {\r\n                result = stage;\r\n                break;\r\n            }\r\n\r\n            index++;\r\n        }\r\n\r\n        return result;\r\n    } \r\n\r\n    /**\r\n    * @dev Sets bonus for specified lockup period. Allowed only for contract owner\r\n    * @param _startPoint Lock start point (is seconds)\r\n    * @param _period Lockup period (in months)\r\n    * @param _bonus Percentage of bonus tokens\r\n    */\r\n    function _setLockupPeriod(uint256 _startPoint, uint256 _period, uint256 _bonus) private {\r\n        uint256 expires = _startPoint.add(_period.mul(2628000));\r\n        lockupPeriods[_period] = LockupPeriod({\r\n            expires: expires,\r\n            bonus: _bonus\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BaseCrowdsale {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for CosquareToken;\r\n\r\n    // The token being sold\r\n    CosquareToken public token;\r\n    // Total amount of tokens sold\r\n    uint256 public tokensSold;\r\n\r\n    /**\r\n    * @dev Event for tokens purchase logging\r\n    * @param purchaseType Who paid for the tokens\r\n    * @param beneficiary Who got the tokens\r\n    * @param value Value paid for purchase\r\n    * @param tokens Amount of tokens purchased\r\n    * @param bonuses Amount of bonuses received\r\n    */\r\n    event TokensPurchaseLog(string purchaseType, address indexed beneficiary, uint256 value, uint256 tokens, uint256 bonuses);\r\n\r\n    /**\r\n    * @param _token Address of the token being sold\r\n    */\r\n    constructor(CosquareToken _token) public {\r\n        require(_token != address(0), \"Invalid token address.\");\r\n        token = _token;\r\n    }\r\n\r\n    /**\r\n    * @dev fallback function ***DO NOT OVERRIDE***\r\n    */\r\n    function () external payable {\r\n        require(msg.data.length == 0, \"Should not accept data.\");\r\n        _buyTokens(msg.sender, msg.value, \"ETH\");\r\n    }\r\n\r\n    /**\r\n    * @dev low level token purchase ***DO NOT OVERRIDE***\r\n    * @param _beneficiary Address performing the token purchase\r\n    */\r\n    function buyTokens(address _beneficiary) external payable {\r\n        _buyTokens(_beneficiary, msg.value, \"ETH\");\r\n    }\r\n\r\n    /**\r\n    * @dev Tokens purchase for wei investments\r\n    * @param _beneficiary Address performing the token purchase\r\n    * @param _amount Amount of tokens purchased\r\n    * @param _investmentType Investment channel string\r\n    */\r\n    function _buyTokens(address _beneficiary, uint256 _amount, string _investmentType) internal {\r\n        _preValidatePurchase(_beneficiary, _amount);\r\n\r\n        (uint256 tokensAmount, uint256 tokenBonus) = _getTokensAmount(_beneficiary, _amount);\r\n\r\n        uint256 totalAmount = tokensAmount.add(tokenBonus);\r\n\r\n        _processPurchase(_beneficiary, totalAmount);\r\n        emit TokensPurchaseLog(_investmentType, _beneficiary, _amount, tokensAmount, tokenBonus);        \r\n        \r\n        _postPurchaseUpdate(_beneficiary, totalAmount);\r\n    }  \r\n\r\n    /**\r\n    * @dev Validation of an executed purchase\r\n    * @param _beneficiary Address performing the token purchase\r\n    * @param _weiAmount Value in wei involved in the purchase\r\n    */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\r\n        require(_beneficiary != address(0), \"Invalid beneficiary address.\");\r\n        require(_weiAmount > 0, \"Invalid investment value.\");\r\n    }\r\n\r\n    /**\r\n    * @dev Abstract function to count the number of tokens depending on the funds deposited\r\n    * @param _beneficiary Address for which to get the tokens amount\r\n    * @param _weiAmount Value in wei involved in the purchase\r\n    * @return Number of tokens\r\n    */\r\n    function _getTokensAmount(address _beneficiary, uint256 _weiAmount) internal view returns (uint256 tokens, uint256 bonus);\r\n\r\n    /**\r\n    * @dev Executed when a purchase is ready to be executed\r\n    * @param _beneficiary Address receiving the tokens\r\n    * @param _tokensAmount Number of tokens to be purchased\r\n    */\r\n    function _processPurchase(address _beneficiary, uint256 _tokensAmount) internal {\r\n        _deliverTokens(_beneficiary, _tokensAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Deliver tokens to investor\r\n    * @param _beneficiary Address receiving the tokens\r\n    * @param _tokensAmount Number of tokens to be purchased\r\n    */\r\n    function _deliverTokens(address _beneficiary, uint256 _tokensAmount) internal {\r\n        token.safeTransfer(_beneficiary, _tokensAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Changes the contract state after purchase\r\n    * @param _beneficiary Address received the tokens\r\n    * @param _tokensAmount The number of tokens that were purchased\r\n    */\r\n    function _postPurchaseUpdate(address _beneficiary, uint256 _tokensAmount) internal {\r\n        tokensSold = tokensSold.add(_tokensAmount);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract LockableCrowdsale is Time, Lockable, Operable, PriceStrategy, BaseCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @dev Locks the next purchase for the provision of bonus tokens\r\n    * @param _beneficiary Address for which the next purchase will be locked\r\n    * @param _lockupPeriod The period to which tokens will be locked from the next purchase\r\n    */\r\n    function lockNextPurchase(address _beneficiary, uint256 _lockupPeriod) external hasOwnerOrOperatePermission {\r\n        require(_lockupPeriod == 6 || _lockupPeriod == 12 || _lockupPeriod == 18, \"Invalid lock interval\");\r\n        Stage memory currentStage = _getCurrentStage();\r\n        require(currentStage.lock, \"Lock operation is not allowed.\");\r\n        _lock(_beneficiary, _lockupPeriod);      \r\n    }\r\n\r\n    /**\r\n    * @dev Executed when a purchase is ready to be executed\r\n    * @param _beneficiary Address receiving the tokens\r\n    * @param _tokensAmount Number of tokens to be purchased\r\n    */\r\n    function _processPurchase(address _beneficiary, uint256 _tokensAmount) internal {\r\n        super._processPurchase(_beneficiary, _tokensAmount);\r\n        uint256 lockedValue = lockedValues[_beneficiary];\r\n\r\n        if (lockedValue > 0) {\r\n            uint256 expires = lockupPeriods[lockedValue].expires;\r\n            token.lock(_beneficiary, _tokensAmount, expires);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Counts the number of tokens depending on the funds deposited\r\n    * @param _beneficiary Address for which to get the tokens amount\r\n    * @param _weiAmount Value in wei involved in the purchase\r\n    * @return Number of tokens\r\n    */\r\n    function _getTokensAmount(address _beneficiary, uint256 _weiAmount) internal view returns (uint256 tokens, uint256 bonus) { \r\n        (tokens, bonus) = getTokensAmount(_weiAmount, lockedValues[_beneficiary], tokensSold);\r\n    }\r\n\r\n    /**\r\n    * @dev Changes the contract state after purchase\r\n    * @param _beneficiary Address received the tokens\r\n    * @param _tokensAmount The number of tokens that were purchased\r\n    */\r\n    function _postPurchaseUpdate(address _beneficiary, uint256 _tokensAmount) internal {\r\n        super._postPurchaseUpdate(_beneficiary, _tokensAmount);\r\n\r\n        _unlock(_beneficiary);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Whitelist is RBAC, Operable {\r\n    // role key\r\n    string public constant ROLE_WHITELISTED = \"whitelist\";\r\n\r\n    /**\r\n    * @dev Throws if operator is not whitelisted.\r\n    * @param _operator Operator address\r\n    */\r\n    modifier onlyIfWhitelisted(address _operator) {\r\n        checkRole(_operator, ROLE_WHITELISTED);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Add an address to the whitelist\r\n    * @param _operator Operator address\r\n    */\r\n    function addAddressToWhitelist(address _operator) public hasOwnerOrOperatePermission {\r\n        addRole(_operator, ROLE_WHITELISTED);\r\n    }\r\n\r\n    /**\r\n    * @dev Getter to determine if address is in whitelist\r\n    * @param _operator The address to be added to the whitelist\r\n    * @return True if the address is in the whitelist\r\n    */\r\n    function whitelist(address _operator) public view returns (bool) {\r\n        return hasRole(_operator, ROLE_WHITELISTED);\r\n    }\r\n\r\n    /**\r\n    * @dev Add addresses to the whitelist\r\n    * @param _operators Operators addresses\r\n    */\r\n    function addAddressesToWhitelist(address[] _operators) public hasOwnerOrOperatePermission {\r\n        for (uint256 i = 0; i < _operators.length; i++) {\r\n            addAddressToWhitelist(_operators[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Remove an address from the whitelist\r\n    * @param _operator Operator address\r\n    */\r\n    function removeAddressFromWhitelist(address _operator) public hasOwnerOrOperatePermission {\r\n        removeRole(_operator, ROLE_WHITELISTED);\r\n    }\r\n\r\n    /**\r\n    * @dev Remove addresses from the whitelist\r\n    * @param _operators Operators addresses\r\n    */\r\n    function removeAddressesFromWhitelist(address[] _operators) public hasOwnerOrOperatePermission {\r\n        for (uint256 i = 0; i < _operators.length; i++) {\r\n            removeAddressFromWhitelist(_operators[i]);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract WhitelistedCrowdsale is Whitelist, BaseCrowdsale {\r\n    /**\r\n    * @dev Extend parent behavior requiring beneficiary to be in whitelist.\r\n    * @param _beneficiary Token beneficiary\r\n    * @param _weiAmount Amount of wei contributed\r\n    */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyIfWhitelisted(_beneficiary) {\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\ncontract PausableCrowdsale is Pausable, BaseCrowdsale {\r\n    /**\r\n    * @dev Extend parent behavior requiring contract not to be paused\r\n    * @param _beneficiary Token beneficiary\r\n    * @param _weiAmount Amount of wei contributed\r\n    */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal whenNotPaused {\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title DetailedERC20 token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract DetailedERC20 is ERC20 {\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals;\r\n\r\n  constructor(string _name, string _symbol, uint8 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract CosquareToken is Time, StandardToken, DetailedERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * Describes locked balance\r\n    * @param expires Time when tokens will be unlocked\r\n    * @param value Amount of the tokens is locked\r\n    */\r\n    struct LockedBalance {\r\n        uint256 expires;\r\n        uint256 value;\r\n    }\r\n\r\n    // locked balances specified be the address\r\n    mapping(address => LockedBalance[]) public lockedBalances;\r\n\r\n    // sale wallet (65%)\r\n    address public saleWallet;\r\n    // reserve wallet (15%)\r\n    address public reserveWallet;\r\n    // team wallet (15%)\r\n    address public teamWallet;\r\n    // strategic wallet (5%)\r\n    address public strategicWallet;\r\n\r\n    // end point, after which all tokens will be unlocked\r\n    uint256 public lockEndpoint;\r\n\r\n    /**\r\n    * Event for lock logging\r\n    * @param who The address on which part of the tokens is locked\r\n    * @param value Amount of the tokens is locked\r\n    * @param expires Time when tokens will be unlocked\r\n    */\r\n    event LockLog(address indexed who, uint256 value, uint256 expires);\r\n\r\n    /**\r\n    * @param _saleWallet Sale wallet\r\n    * @param _reserveWallet Reserve wallet\r\n    * @param _teamWallet Team wallet\r\n    * @param _strategicWallet Strategic wallet\r\n    * @param _lockEndpoint End point, after which all tokens will be unlocked\r\n    */\r\n    constructor(address _saleWallet, address _reserveWallet, address _teamWallet, address _strategicWallet, uint256 _lockEndpoint) \r\n      DetailedERC20(\"cosquare\", \"CSQ\", 18) public {\r\n        require(_lockEndpoint > 0, \"Invalid global lock end date.\");\r\n        lockEndpoint = _lockEndpoint;\r\n\r\n        _configureWallet(_saleWallet, 65000000000000000000000000000); // 6.5e+28\r\n        saleWallet = _saleWallet;\r\n        _configureWallet(_reserveWallet, 15000000000000000000000000000); // 1.5e+28\r\n        reserveWallet = _reserveWallet;\r\n        _configureWallet(_teamWallet, 15000000000000000000000000000); // 1.5e+28\r\n        teamWallet = _teamWallet;\r\n        _configureWallet(_strategicWallet, 5000000000000000000000000000); // 0.5e+28\r\n        strategicWallet = _strategicWallet;\r\n    }\r\n\r\n    /**\r\n    * @dev Setting the initial value of the tokens to the wallet\r\n    * @param _wallet Address to be set up\r\n    * @param _amount The number of tokens to be assigned to this address\r\n    */\r\n    function _configureWallet(address _wallet, uint256 _amount) private {\r\n        require(_wallet != address(0), \"Invalid wallet address.\");\r\n\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[_wallet] = _amount;\r\n        emit Transfer(address(0), _wallet, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if the address does not have enough not locked balance\r\n    * @param _who The address to transfer from\r\n    * @param _value The amount to be transferred\r\n    */\r\n    modifier notLocked(address _who, uint256 _value) {\r\n        uint256 time = _currentTime();\r\n\r\n        if (lockEndpoint > time) {\r\n            uint256 index = 0;\r\n            uint256 locked = 0;\r\n            while (index < lockedBalances[_who].length) {\r\n                if (lockedBalances[_who][index].expires > time) {\r\n                    locked = locked.add(lockedBalances[_who][index].value);\r\n                }\r\n\r\n                index++;\r\n            }\r\n\r\n            require(_value <= balances[_who].sub(locked), \"Not enough unlocked tokens\");\r\n        }        \r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Overridden to check whether enough not locked balance\r\n    * @param _from The address which you want to send tokens from\r\n    * @param _to The address which you want to transfer to\r\n    * @param _value The amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public notLocked(_from, _value) returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Overridden to check whether enough not locked balance\r\n    * @param _to The address to transfer to\r\n    * @param _value The amount to be transferred\r\n    */\r\n    function transfer(address _to, uint256 _value) public notLocked(msg.sender, _value) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the locked balance of the specified address\r\n    * @param _owner The address to query the locked balance of\r\n    * @param _expires Time of expiration of the lock (If equals to 0 - returns all locked tokens at this moment)\r\n    * @return An uint256 representing the amount of locked balance by the passed address\r\n    */\r\n    function lockedBalanceOf(address _owner, uint256 _expires) external view returns (uint256) {\r\n        uint256 time = _currentTime();\r\n        uint256 index = 0;\r\n        uint256 locked = 0;\r\n\r\n        if (lockEndpoint > time) {       \r\n            while (index < lockedBalances[_owner].length) {\r\n                if (_expires > 0) {\r\n                    if (lockedBalances[_owner][index].expires == _expires) {\r\n                        locked = locked.add(lockedBalances[_owner][index].value);\r\n                    }\r\n                } else {\r\n                    if (lockedBalances[_owner][index].expires >= time) {\r\n                        locked = locked.add(lockedBalances[_owner][index].value);\r\n                    }\r\n                }\r\n\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return locked;\r\n    }\r\n\r\n    /**\r\n    * @dev Locks part of the balance for the specified address and for a certain period (3 periods expected)\r\n    * @param _who The address of which will be locked part of the balance\r\n    * @param _value The amount of tokens to be locked\r\n    * @param _expires Time of expiration of the lock\r\n    */\r\n    function lock(address _who, uint256 _value, uint256 _expires) public onlyOwner {\r\n        uint256 time = _currentTime();\r\n        require(_who != address(0) && _value <= balances[_who] && _expires > time, \"Invalid lock configuration.\");\r\n\r\n        uint256 index = 0;\r\n        bool exist = false;\r\n        while (index < lockedBalances[_who].length) {\r\n            if (lockedBalances[_who][index].expires == _expires) {\r\n                exist = true;\r\n                break;\r\n            }\r\n\r\n            index++;\r\n        }\r\n\r\n        if (exist) {\r\n            lockedBalances[_who][index].value = lockedBalances[_who][index].value.add(_value);\r\n        } else {\r\n            lockedBalances[_who].push(LockedBalance({\r\n                expires: _expires,\r\n                value: _value\r\n            }));\r\n        }\r\n\r\n        emit LockLog(_who, _value, _expires);\r\n    }\r\n}\r\n\r\n\r\ncontract Crowdsale is Lockable, Operable, Withdrawal, PriceStrategy, LockableCrowdsale, WhitelistedCrowdsale, PausableCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n    * @param _rateETHtoCHF Cost of ETH in CHF\r\n    * @param _minInvestmentInCHF Minimal allowed investment in CHF\r\n    * @param _withdrawWallet Address to which funds will be withdrawn\r\n    * @param _token Address of the token being sold\r\n    */\r\n    constructor(uint256 _rateETHtoCHF, uint256 _minInvestmentInCHF, address _withdrawWallet, CosquareToken _token)\r\n        PriceStrategy(_rateETHtoCHF, _minInvestmentInCHF)\r\n        Withdrawal(_withdrawWallet)\r\n        BaseCrowdsale(_token) public {\r\n    }  \r\n\r\n    /**\r\n    * @dev Distributes tokens for wei investments\r\n    * @param _beneficiary Address performing the token purchase\r\n    * @param _ethAmount Investment value in ETH\r\n    * @param _type Type of investment channel\r\n    */\r\n    function distributeTokensForInvestment(address _beneficiary, uint256 _ethAmount, string _type) public hasOwnerOrOperatePermission {\r\n        _buyTokens(_beneficiary, _ethAmount, _type);\r\n    }\r\n\r\n    /**\r\n    * @dev Distributes tokens manually\r\n    * @param _beneficiary Address performing the tokens distribution\r\n    * @param _tokensAmount Amount of tokens distribution\r\n    */\r\n    function distributeTokensManual(address _beneficiary, uint256 _tokensAmount) external hasOwnerOrOperatePermission {\r\n        _preValidatePurchase(_beneficiary, _tokensAmount);\r\n\r\n        _deliverTokens(_beneficiary, _tokensAmount);\r\n        emit TokensPurchaseLog(\"MANUAL\", _beneficiary, 0, _tokensAmount, 0);\r\n\r\n        _postPurchaseUpdate(_beneficiary, _tokensAmount);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_WHITELISTED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimalsCHF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_weiAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockupPeriods\",\"outputs\":[{\"name\":\"expires\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"lockNextPurchase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wei\",\"type\":\"uint256\"},{\"name\":\"_lockup\",\"type\":\"uint256\"},{\"name\":\"_sold\",\"type\":\"uint256\"}],\"name\":\"getTokensAmount\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rateETHtoCHF\",\"type\":\"uint256\"}],\"name\":\"setETHtoCHFrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"volume\",\"type\":\"uint256\"},{\"name\":\"priceInCHF\",\"type\":\"uint256\"},{\"name\":\"minBonusVolume\",\"type\":\"uint256\"},{\"name\":\"bonus\",\"type\":\"uint256\"},{\"name\":\"lock\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_OPERATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"operator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateETHtoCHF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"distributeTokensManual\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minInvestmentInCHF\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"name\":\"_type\",\"type\":\"string\"}],\"name\":\"distributeTokensForInvestment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rateETHtoCHF\",\"type\":\"uint256\"},{\"name\":\"_minInvestmentInCHF\",\"type\":\"uint256\"},{\"name\":\"_withdrawWallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"purchaseType\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"bonuses\",\"type\":\"uint256\"}],\"name\":\"TokensPurchaseLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"RateChangedLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000e8c854c0fd35600000000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000b6943f901e4355264c2573d88c15a1b6d75a071d0000000000000000000000007c7159a34dbabc8c09f0bafe69d94d2ddc199472","Library":"","SwarmSource":"bzzr://fd23d1026e7df8c3a4b5d666f1bf3f44762a50657bb553461c52358bb2d116bd"}]}