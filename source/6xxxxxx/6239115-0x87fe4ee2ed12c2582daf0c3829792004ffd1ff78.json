{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() external view returns (uint256 _totalSupply);\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\nlibrary AddressSet {\r\n\r\n    // Name is kept for drop-in replacement reasons. Recommended name `Instance`\r\n    struct Instance {\r\n        address[] list;\r\n        mapping(address => uint256) idx; // actually stores indexes incremented by 1\r\n    }\r\n\r\n    // _direction parameter is kept for drop-in replacement consistency; consider remove the parameter\r\n    // Gas efficient version of push\r\n    function push(Instance storage self, address addr) internal returns (bool) {\r\n        if (self.idx[addr] != 0) return false;\r\n        self.idx[addr] = self.list.push(addr);\r\n        return true;\r\n    }\r\n\r\n    // Now in O(1)\r\n    function sizeOf(Instance storage self) internal view returns (uint256) {\r\n        return self.list.length;\r\n    }\r\n\r\n    // Gets i-th address in O(1) time (RANDOM ACCESS!!!)\r\n    function getAddress(Instance storage self, uint256 index) internal view returns (address) {\r\n        return (index < self.list.length) ? self.list[index] : address(0);\r\n    }\r\n\r\n    // Gas efficient version of remove\r\n    function remove(Instance storage self, address addr) internal returns (bool) {\r\n        if (self.idx[addr] == 0) return false;\r\n        uint256 idx = self.idx[addr];\r\n        delete self.idx[addr];\r\n        if (self.list.length == idx) {\r\n            self.list.length--;\r\n        } else {\r\n            address last = self.list[self.list.length-1];\r\n            self.list.length--;\r\n            self.list[idx-1] = last;\r\n            self.idx[last] = idx;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract UHCToken is ERC20 {\r\n    using SafeMath for uint256;\r\n    using AddressSet for AddressSet.Instance;\r\n\r\n    address public owner;\r\n    address public subowner;\r\n\r\n    bool    public              paused         = false;\r\n    bool    public              contractEnable = true;\r\n\r\n    string  public              name = \"UHC\";\r\n    string  public              symbol = \"UHC\";\r\n    uint8   public              decimals = 4;\r\n    uint256 private             summarySupply;\r\n    uint8   public              transferFeePercent = 3;\r\n    uint8   public              refererFeePercent = 1;\r\n\r\n    struct account{\r\n        uint256 balance;\r\n        uint8 group;\r\n        uint8 status;\r\n        address referer;\r\n        bool isBlocked;\r\n    }\r\n\r\n    mapping(address => account)                      private   accounts;\r\n    mapping(address => mapping (address => uint256)) private   allowed;\r\n    mapping(bytes => address)                        private   promos;\r\n\r\n    AddressSet.Instance                             private   holders;\r\n\r\n    struct groupPolicy {\r\n        uint8 _default;\r\n        uint8 _backend;\r\n        uint8 _admin;\r\n        uint8 _owner;\r\n    }\r\n\r\n    groupPolicy public groupPolicyInstance = groupPolicy(0, 3, 4, 9);\r\n\r\n    event EvGroupChanged(address indexed _address, uint8 _oldgroup, uint8 _newgroup);\r\n    event EvMigration(address indexed _address, uint256 _balance, uint256 _secret);\r\n    event EvUpdateStatus(address indexed _address, uint8 _oldstatus, uint8 _newstatus);\r\n    event EvSetReferer(address indexed _referal, address _referer);\r\n    event SwitchPause(bool isPaused);\r\n\r\n    constructor (string _name, string _symbol, uint8 _decimals,uint256 _summarySupply, uint8 _transferFeePercent, uint8 _refererFeePercent) public {\r\n        require(_refererFeePercent < _transferFeePercent);\r\n        owner = msg.sender;\r\n\r\n        accounts[owner] = account(_summarySupply,groupPolicyInstance._owner,3, address(0), false);\r\n\r\n        holders.push(msg.sender);\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        summarySupply = _summarySupply;\r\n        transferFeePercent = _transferFeePercent;\r\n        refererFeePercent = _refererFeePercent;\r\n        emit Transfer(address(0), msg.sender, _summarySupply);\r\n    }\r\n\r\n    modifier minGroup(int _require) {\r\n        require(accounts[msg.sender].group >= _require);\r\n        _;\r\n    }\r\n\r\n    modifier onlySubowner() {\r\n        require(msg.sender == subowner);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused || accounts[msg.sender].group >= groupPolicyInstance._backend);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotMigrating {\r\n        require(contractEnable);\r\n        _;\r\n    }\r\n\r\n    modifier whenMigrating {\r\n        require(!contractEnable);\r\n        _;\r\n    }\r\n\r\n    function servicePause() minGroup(groupPolicyInstance._admin) whenNotPaused public {\r\n        paused = true;\r\n        emit SwitchPause(paused);\r\n    }\r\n\r\n    function serviceUnpause() minGroup(groupPolicyInstance._admin) whenPaused public {\r\n        paused = false;\r\n        emit SwitchPause(paused);\r\n    }\r\n\r\n    function serviceGroupChange(address _address, uint8 _group) minGroup(groupPolicyInstance._admin) external returns(uint8) {\r\n        require(_address != address(0));\r\n        require(_group <= groupPolicyInstance._admin);\r\n\r\n        uint8 old = accounts[_address].group;\r\n        require(old < accounts[msg.sender].group);\r\n\r\n        accounts[_address].group = _group;\r\n        emit EvGroupChanged(_address, old, _group);\r\n\r\n        return accounts[_address].group;\r\n    }\r\n\r\n    function serviceTransferOwnership(address newOwner) minGroup(groupPolicyInstance._owner) external {\r\n        require(newOwner != address(0));\r\n\r\n        subowner = newOwner;\r\n    }\r\n\r\n    function serviceClaimOwnership() onlySubowner() external {\r\n        address temp = owner;\r\n        uint256 value = accounts[owner].balance;\r\n\r\n        accounts[owner].balance = accounts[owner].balance.sub(value);\r\n        holders.remove(owner);\r\n        accounts[msg.sender].balance = accounts[msg.sender].balance.add(value);\r\n        holders.push(msg.sender);\r\n\r\n        owner = msg.sender;\r\n        subowner = address(0);\r\n\r\n        delete accounts[temp].group;\r\n        uint8 oldGroup = accounts[msg.sender].group;\r\n        accounts[msg.sender].group = groupPolicyInstance._owner;\r\n\r\n        emit EvGroupChanged(msg.sender, oldGroup, groupPolicyInstance._owner);\r\n        emit Transfer(temp, owner, value);\r\n    }\r\n\r\n    function serviceSwitchTransferAbility(address _address) external minGroup(groupPolicyInstance._admin) returns(bool) {\r\n        require(accounts[_address].group < accounts[msg.sender].group);\r\n\r\n        accounts[_address].isBlocked = !accounts[_address].isBlocked;\r\n\r\n        return true;\r\n    }\r\n\r\n    function serviceUpdateTransferFeePercent(uint8 newFee) external minGroup(groupPolicyInstance._admin) {\r\n        require(newFee < 100);\r\n        require(newFee > refererFeePercent);\r\n        transferFeePercent = newFee;\r\n    }\r\n\r\n    function serviceUpdateRefererFeePercent(uint8 newFee) external minGroup(groupPolicyInstance._admin) {\r\n        require(newFee < 100);\r\n        require(transferFeePercent > newFee);\r\n        refererFeePercent = newFee;\r\n    }\r\n\r\n    function serviceSetPromo(bytes num, address _address) external minGroup(groupPolicyInstance._admin) {\r\n        promos[num] = _address;\r\n    }\r\n\r\n    function backendSetStatus(address _address, uint8 status) external minGroup(groupPolicyInstance._backend) returns(bool){\r\n        require(_address != address(0));\r\n        require(status >= 0 && status <= 4);\r\n        uint8 oldStatus = accounts[_address].status;\r\n        accounts[_address].status = status;\r\n\r\n        emit EvUpdateStatus(_address, oldStatus, status);\r\n\r\n        return true;\r\n    }\r\n\r\n    function backendSetReferer(address _referal, address _referer) external minGroup(groupPolicyInstance._backend) returns(bool) {\r\n        require(accounts[_referal].referer == address(0));\r\n        require(_referal != address(0));\r\n        require(_referal != _referer);\r\n        require(accounts[_referal].referer != _referer);\r\n\r\n        accounts[_referal].referer = _referer;\r\n\r\n        emit EvSetReferer(_referal, _referer);\r\n\r\n        return true;\r\n    }\r\n\r\n    function backendSendBonus(address _to, uint256 _value) external minGroup(groupPolicyInstance._backend) returns(bool) {\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n        require(accounts[owner].balance >= _value);\r\n\r\n        accounts[owner].balance = accounts[owner].balance.sub(_value);\r\n        accounts[_to].balance = accounts[_to].balance.add(_value);\r\n\r\n        emit Transfer(owner, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function backendRefund(address _from, uint256 _value) external minGroup(groupPolicyInstance._backend) returns(uint256 balance) {\r\n        require(_from != address(0));\r\n        require(_value > 0);\r\n        require(accounts[_from].balance >= _value);\r\n \r\n        accounts[_from].balance = accounts[_from].balance.sub(_value);\r\n        accounts[owner].balance = accounts[owner].balance.add(_value);\r\n        if(accounts[_from].balance == 0){\r\n            holders.remove(_from);\r\n        }\r\n        emit Transfer(_from, owner, _value);\r\n        return accounts[_from].balance;\r\n    }\r\n\r\n    function getGroup(address _check) external view returns(uint8 _group) {\r\n        return accounts[_check].group;\r\n    }\r\n\r\n    function getHoldersLength() external view returns(uint256){\r\n        return holders.sizeOf();\r\n    }\r\n\r\n    function getHolderByIndex(uint256 _index) external view returns(address){\r\n        return holders.getAddress(_index);\r\n    }\r\n\r\n    function getPromoAddress(bytes _promo) external view returns(address) {\r\n        return promos[_promo];\r\n    }\r\n\r\n    function getAddressTransferAbility(address _check) external view returns(bool) {\r\n        return !accounts[_check].isBlocked;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success) {\r\n        return _transfer(msg.sender, _to, address(0), _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\r\n        return _transfer(_from, _to, msg.sender, _value);\r\n    }\r\n\r\n    function _transfer(address _from, address _to, address _allow, uint256 _value) minGroup(groupPolicyInstance._default) whenNotMigrating whenNotPaused internal returns(bool) {\r\n        require(!accounts[_from].isBlocked);\r\n        require(_from != address(0));\r\n        require(_to != address(0));\r\n        uint256 transferFee = accounts[_from].group == 0 ? _value.div(100).mul(accounts[_from].referer == address(0) ? transferFeePercent : transferFeePercent - refererFeePercent) : 0;\r\n        uint256 transferRefererFee = accounts[_from].referer == address(0) || accounts[_from].group != 0 ? 0 : _value.div(100).mul(refererFeePercent);\r\n        uint256 summaryValue = _value.add(transferFee).add(transferRefererFee);\r\n        require(accounts[_from].balance >= summaryValue);\r\n        require(_allow == address(0) || allowed[_from][_allow] >= summaryValue);\r\n\r\n        accounts[_from].balance = accounts[_from].balance.sub(summaryValue);\r\n        if(_allow != address(0)) {\r\n            allowed[_from][_allow] = allowed[_from][_allow].sub(summaryValue);\r\n        }\r\n\r\n        if(accounts[_from].balance == 0){\r\n            holders.remove(_from);\r\n        }\r\n        accounts[_to].balance = accounts[_to].balance.add(_value);\r\n        holders.push(_to);\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        if(transferFee > 0) {\r\n            accounts[owner].balance = accounts[owner].balance.add(transferFee);\r\n            emit Transfer(_from, owner, transferFee);\r\n        }\r\n\r\n        if(transferRefererFee > 0) {\r\n            accounts[accounts[_from].referer].balance = accounts[accounts[_from].referer].balance.add(transferRefererFee);\r\n            holders.push(accounts[_from].referer);\r\n            emit Transfer(_from, accounts[_from].referer, transferRefererFee);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) minGroup(groupPolicyInstance._default) whenNotPaused external returns (bool success) {\r\n        require (_value == 0 || allowed[msg.sender][_spender] == 0);\r\n        require(_spender != address(0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue) minGroup(groupPolicyInstance._default) whenNotPaused external returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) minGroup(groupPolicyInstance._default) whenNotPaused external returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance) {\r\n        return accounts[_owner].balance;\r\n    }\r\n\r\n    function statusOf(address _owner) external view returns (uint8) {\r\n        return accounts[_owner].status;\r\n    }\r\n\r\n    function refererOf(address _owner) external constant returns (address) {\r\n        return accounts[_owner].referer;\r\n    }\r\n\r\n    function totalSupply() external constant returns (uint256 _totalSupply) {\r\n        _totalSupply = summarySupply;\r\n    }\r\n\r\n    function settingsSwitchState() external minGroup(groupPolicyInstance._owner) returns (bool state) {\r\n\r\n        contractEnable = !contractEnable;\r\n\r\n        return contractEnable;\r\n    }\r\n\r\n    function userMigration(uint256 _secret) external whenMigrating returns (bool successful) {\r\n        uint256 balance = accounts[msg.sender].balance;\r\n\r\n        require (balance > 0);\r\n\r\n        accounts[msg.sender].balance = accounts[msg.sender].balance.sub(balance);\r\n        holders.remove(msg.sender);\r\n        accounts[owner].balance = accounts[owner].balance.add(balance);\r\n        holders.push(owner);\r\n        emit EvMigration(msg.sender, balance, _secret);\r\n        emit Transfer(msg.sender, owner, balance);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_secret\",\"type\":\"uint256\"}],\"name\":\"userMigration\",\"outputs\":[{\"name\":\"successful\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"settingsSwitchState\",\"outputs\":[{\"name\":\"state\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"serviceUpdateRefererFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"refererOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_check\",\"type\":\"address\"}],\"name\":\"getGroup\",\"outputs\":[{\"name\":\"_group\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_group\",\"type\":\"uint8\"}],\"name\":\"serviceGroupChange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"serviceClaimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"serviceUpdateTransferFeePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"backendSendBonus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refererFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"serviceUnpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"serviceTransferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_referal\",\"type\":\"address\"},{\"name\":\"_referer\",\"type\":\"address\"}],\"name\":\"backendSetReferer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFeePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"statusOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_check\",\"type\":\"address\"}],\"name\":\"getAddressTransferAbility\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"bytes\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"serviceSetPromo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"backendRefund\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_promo\",\"type\":\"bytes\"}],\"name\":\"getPromoAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getHolderByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractEnable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"backendSetStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"serviceSwitchTransferAbility\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHoldersLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"subowner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"groupPolicyInstance\",\"outputs\":[{\"name\":\"_default\",\"type\":\"uint8\"},{\"name\":\"_backend\",\"type\":\"uint8\"},{\"name\":\"_admin\",\"type\":\"uint8\"},{\"name\":\"_owner\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"servicePause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_summarySupply\",\"type\":\"uint256\"},{\"name\":\"_transferFeePercent\",\"type\":\"uint8\"},{\"name\":\"_refererFeePercent\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oldgroup\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_newgroup\",\"type\":\"uint8\"}],\"name\":\"EvGroupChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_secret\",\"type\":\"uint256\"}],\"name\":\"EvMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oldstatus\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"_newstatus\",\"type\":\"uint8\"}],\"name\":\"EvUpdateStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_referal\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_referer\",\"type\":\"address\"}],\"name\":\"EvSetReferer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"SwitchPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"UHCToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000008834b79a000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003554843000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035548430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://b25ebdff89e16e82eae99174dc7bcfd899da0e22381f57063fabaf805fda5dd9"}]}