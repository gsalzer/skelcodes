{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @dev winner events\r\n */\r\ncontract WinnerEvents {\r\n\r\n    event onBuy\r\n    (\r\n        address paddr,\r\n        uint256 ethIn,\r\n        string  reff,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    event onBuyUseBalance\r\n    (\r\n        address paddr,\r\n        uint256 keys,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    event onBuyName\r\n    (\r\n        address paddr,\r\n        bytes32 pname,\r\n        uint256 ethIn,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    event onWithdraw\r\n    (\r\n        address paddr,\r\n        uint256 ethOut,\r\n        uint256 timeStamp\r\n    );\r\n\r\n    event onUpRoundID\r\n    (\r\n        uint256 roundID\r\n    );\r\n\r\n    event onUpPlayer\r\n    (\r\n        address addr,\r\n        bytes32 pname,\r\n        uint256 balance,\r\n        uint256 interest,\r\n        uint256 win,\r\n        uint256 reff\r\n    );\r\n\r\n    event onAddPlayerOrder\r\n    (\r\n        address addr,\r\n        uint256 keys,\r\n        uint256 eth,\r\n        uint256 otype\r\n    );\r\n\r\n    event onUpPlayerRound\r\n    (\r\n        address addr,\r\n        uint256 roundID,\r\n        uint256 eth,\r\n        uint256 keys,\r\n        uint256 interest,\r\n        uint256 win,\r\n        uint256 reff\r\n    );\r\n\r\n\r\n    event onUpRound\r\n    (\r\n        uint256 roundID,\r\n        address leader,\r\n        uint256 start,\r\n        uint256 end,\r\n        bool ended,\r\n        uint256 keys,\r\n        uint256 eth,\r\n        uint256 pool,\r\n        uint256 interest,\r\n        uint256 win,\r\n        uint256 reff\r\n    );\r\n\r\n\r\n}\r\n\r\n/*\r\n *  @dev winner contract\r\n */\r\ncontract Winner is WinnerEvents {\r\n    using SafeMath for *;\r\n    using NameFilter for string;\r\n\r\n//==============================================================================\r\n// game settings\r\n//==============================================================================\r\n\r\n    string constant public name = \"Im Winner Game\";\r\n    string constant public symbol = \"IMW\";\r\n\r\n\r\n//==============================================================================\r\n// public state variables\r\n//==============================================================================\r\n\r\n    // activated flag\r\n    bool public activated_ = false;\r\n\r\n    // round id\r\n    uint256 public roundID_;\r\n\r\n    // *************\r\n    // player data\r\n    // *************\r\n\r\n    uint256 private pIDCount_;\r\n\r\n    // return pid by address\r\n    mapping(address => uint256) public address2PID_;\r\n\r\n    // return player data by pid (pid => player)\r\n    mapping(uint256 => WinnerDatasets.Player) public pID2Player_;\r\n\r\n    // return player round data (pid => rid => player round data)\r\n    mapping(uint256 => mapping(uint256 => WinnerDatasets.PlayerRound)) public pID2Round_;\r\n\r\n    // return player order data (pid => rid => player order data)\r\n    mapping(uint256 => mapping(uint256 => WinnerDatasets.PlayerOrder[])) public pID2Order_;\r\n\r\n    // *************\r\n    // round data\r\n    // *************\r\n\r\n    // return the round data by rid (rid => round)\r\n    mapping(uint256 => WinnerDatasets.Round) public rID2Round_;\r\n\r\n\r\n    constructor()\r\n        public\r\n    {\r\n        pIDCount_ = 0;\r\n    }\r\n\r\n\r\n//==============================================================================\r\n// function modifiers\r\n//==============================================================================\r\n\r\n\r\n    /*\r\n     * @dev check if the contract is activated\r\n     */\r\n     modifier isActivated() {\r\n        require(activated_ == true, \"the contract is not ready yet\");\r\n        _;\r\n     }\r\n\r\n     /**\r\n     * @dev check if the msg sender is human account\r\n     */\r\n    modifier isHuman() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"sorry humans only\");\r\n        _;\r\n    }\r\n\r\n     /*\r\n      * @dev check if admin or not \r\n      */\r\n    modifier isAdmin() {\r\n        require( msg.sender == 0x74B25afBbd16Ef94d6a32c311d5c184a736850D3, \"sorry admins only\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev sets boundaries for incoming tx \r\n     */\r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 10000000000, \"eth too small\");\r\n        require(_eth <= 100000000000000000000000, \"eth too huge\");\r\n        _;    \r\n    }\r\n\r\n//==============================================================================\r\n// public functions\r\n//==============================================================================\r\n\r\n    /*\r\n     *  @dev send eth to contract\r\n     */\r\n    function ()\r\n    isActivated()\r\n    isHuman()\r\n    isWithinLimits(msg.value)\r\n    public\r\n    payable {\r\n        buyCore(msg.sender, msg.value, \"\");\r\n    }\r\n\r\n    /*\r\n     *  @dev send eth to contract\r\n     */\r\n    function buyKey()\r\n    isActivated()\r\n    isHuman()\r\n    isWithinLimits(msg.value)\r\n    public\r\n    payable {\r\n        buyCore(msg.sender, msg.value, \"\");\r\n    }\r\n\r\n    /*\r\n     *  @dev send eth to contract\r\n     */\r\n    function buyKeyWithReff(string reff)\r\n    isActivated()\r\n    isHuman()\r\n    isWithinLimits(msg.value)\r\n    public\r\n    payable {\r\n        buyCore(msg.sender, msg.value, reff);\r\n    }\r\n\r\n    /*\r\n     *  @dev buy key use balance\r\n     */\r\n\r\n    function buyKeyUseBalance(uint256 keys) \r\n    isActivated()\r\n    isHuman()\r\n    public {\r\n\r\n        uint256 pID = address2PID_[msg.sender];\r\n        require(pID > 0, \"cannot find player\");\r\n\r\n        // fire buy  event \r\n        emit WinnerEvents.onBuyUseBalance\r\n        (\r\n            msg.sender, \r\n            keys, \r\n            now\r\n        );\r\n    }\r\n\r\n\r\n    /*\r\n     *  @dev buy name\r\n     */\r\n    function buyName(string pname)\r\n    isActivated()\r\n    isHuman()\r\n    isWithinLimits(msg.value)\r\n    public\r\n    payable {\r\n\r\n        uint256 pID = address2PID_[msg.sender];\r\n\r\n        // new player\r\n        if( pID == 0 ) {\r\n            pIDCount_++;\r\n\r\n            pID = pIDCount_;\r\n            WinnerDatasets.Player memory player = WinnerDatasets.Player(pID, msg.sender, 0, 0, 0, 0, 0);\r\n            WinnerDatasets.PlayerRound memory playerRound = WinnerDatasets.PlayerRound(0, 0, 0, 0, 0);\r\n\r\n            pID2Player_[pID] = player;\r\n            pID2Round_[pID][roundID_] = playerRound;\r\n\r\n            address2PID_[msg.sender] = pID;\r\n        }\r\n\r\n        pID2Player_[pID].pname = pname.nameFilter();\r\n\r\n        // fire buy  event \r\n        emit WinnerEvents.onBuyName\r\n        (\r\n            msg.sender, \r\n            pID2Player_[pID].pname, \r\n            msg.value, \r\n            now\r\n        );\r\n        \r\n    }\r\n\r\n//==============================================================================\r\n// private functions\r\n//==============================================================================    \r\n\r\n    function buyCore(address addr, uint256 eth, string reff) \r\n    private {\r\n        uint256 pID = address2PID_[addr];\r\n\r\n        // new player\r\n        if( pID == 0 ) {\r\n            pIDCount_++;\r\n\r\n            pID = pIDCount_;\r\n            WinnerDatasets.Player memory player = WinnerDatasets.Player(pID, addr, 0, 0, 0, 0, 0);\r\n            WinnerDatasets.PlayerRound memory playerRound = WinnerDatasets.PlayerRound(0, 0, 0, 0, 0);\r\n\r\n            pID2Player_[pID] = player;\r\n            pID2Round_[pID][roundID_] = playerRound;\r\n\r\n            address2PID_[addr] = pID;\r\n        }\r\n\r\n        // fire buy  event \r\n        emit WinnerEvents.onBuy\r\n        (\r\n            addr, \r\n            eth, \r\n            reff,\r\n            now\r\n        );\r\n    }\r\n\r\n    \r\n//==============================================================================\r\n// admin functions\r\n//==============================================================================    \r\n\r\n    /*\r\n     * @dev activate the contract\r\n     */\r\n    function activate() \r\n    isAdmin()\r\n    public {\r\n\r\n        require( activated_ == false, \"contract is activated\");\r\n\r\n        activated_ = true;\r\n\r\n        // start the first round\r\n        roundID_ = 1;\r\n    }\r\n\r\n    /**\r\n     *  @dev inactivate the contract\r\n     */\r\n    function inactivate()\r\n    isAdmin()\r\n    isActivated()\r\n    public {\r\n\r\n        activated_ = false;\r\n    }\r\n\r\n    /*\r\n     *  @dev user withdraw\r\n     */\r\n    function withdraw(address addr, uint256 eth)\r\n    isActivated() \r\n    isAdmin() \r\n    isWithinLimits(eth) \r\n    public {\r\n\r\n        uint pID = address2PID_[addr];\r\n        require(pID > 0, \"user not exist\");\r\n\r\n        addr.transfer(eth);\r\n\r\n        // fire the withdraw event\r\n        emit WinnerEvents.onWithdraw\r\n        (\r\n            msg.sender, \r\n            eth, \r\n            now\r\n        );\r\n    }\r\n\r\n    /*\r\n     *  @dev update round id\r\n     */\r\n    function upRoundID(uint256 roundID) \r\n    isAdmin()\r\n    isActivated()\r\n    public {\r\n\r\n        require(roundID_ != roundID, \"same to the current roundID\");\r\n\r\n        roundID_ = roundID;\r\n\r\n        // fire the withdraw event\r\n        emit WinnerEvents.onUpRoundID\r\n        (\r\n            roundID\r\n        );\r\n    }\r\n\r\n    /*\r\n     * @dev upPlayer\r\n     */\r\n    function upPlayer(address addr, bytes32 pname, uint256 balance, uint256 interest, uint256 win, uint256 reff)\r\n    isAdmin()\r\n    isActivated()\r\n    public {\r\n\r\n        uint256 pID = address2PID_[addr];\r\n\r\n        require( pID != 0, \"cannot find the player\");\r\n        require( balance >= 0, \"balance invalid\");\r\n        require( interest >= 0, \"interest invalid\");\r\n        require( win >= 0, \"win invalid\");\r\n        require( reff >= 0, \"reff invalid\");\r\n\r\n        pID2Player_[pID].pname = pname;\r\n        pID2Player_[pID].balance = balance;\r\n        pID2Player_[pID].interest = interest;\r\n        pID2Player_[pID].win = win;\r\n        pID2Player_[pID].reff = reff;\r\n\r\n        // fire the event\r\n        emit WinnerEvents.onUpPlayer\r\n        (\r\n            addr,\r\n            pname,\r\n            balance,\r\n            interest,\r\n            win,\r\n            reff\r\n        );\r\n    }\r\n\r\n\r\n    function upPlayerRound(address addr, uint256 roundID, uint256 eth, uint256 keys, uint256 interest, uint256 win, uint256 reff)\r\n    isAdmin()\r\n    isActivated() \r\n    public {\r\n        \r\n        uint256 pID = address2PID_[addr];\r\n\r\n        require( pID != 0, \"cannot find the player\");\r\n        require( roundID == roundID_, \"not current round\");\r\n        require( eth >= 0, \"eth invalid\");\r\n        require( keys >= 0, \"keys invalid\");\r\n        require( interest >= 0, \"interest invalid\");\r\n        require( win >= 0, \"win invalid\");\r\n        require( reff >= 0, \"reff invalid\");\r\n\r\n        pID2Round_[pID][roundID_].eth = eth;\r\n        pID2Round_[pID][roundID_].keys = keys;\r\n        pID2Round_[pID][roundID_].interest = interest;\r\n        pID2Round_[pID][roundID_].win = win;\r\n        pID2Round_[pID][roundID_].reff = reff;\r\n\r\n        // fire the event\r\n        emit WinnerEvents.onUpPlayerRound\r\n        (\r\n            addr,\r\n            roundID,\r\n            eth,\r\n            keys,\r\n            interest,\r\n            win,\r\n            reff\r\n        );\r\n    }\r\n\r\n    /*\r\n     *  @dev add player order\r\n     */\r\n    function addPlayerOrder(address addr, uint256 roundID, uint256 keys, uint256 eth, uint256 otype, uint256 keysAvailable, uint256 keysEth) \r\n    isAdmin()\r\n    isActivated()\r\n    public {\r\n\r\n        uint256 pID = address2PID_[addr];\r\n\r\n        require( pID != 0, \"cannot find the player\");\r\n        require( roundID == roundID_, \"not current round\");\r\n        require( keys >= 0, \"keys invalid\");\r\n        require( eth >= 0, \"eth invalid\");\r\n        require( otype >= 0, \"type invalid\");\r\n        require( keysAvailable >= 0, \"keysAvailable invalid\");\r\n\r\n        pID2Round_[pID][roundID_].eth = keysEth;\r\n        pID2Round_[pID][roundID_].keys = keysAvailable;\r\n\r\n        WinnerDatasets.PlayerOrder memory playerOrder = WinnerDatasets.PlayerOrder(keys, eth, otype);\r\n        pID2Order_[pID][roundID_].push(playerOrder);\r\n\r\n        emit WinnerEvents.onAddPlayerOrder\r\n        (\r\n            addr,\r\n            keys,\r\n            eth,\r\n            otype\r\n        );\r\n    }\r\n\r\n\r\n    /*\r\n     * @dev upRound\r\n     */\r\n    function upRound(uint256 roundID, address leader, uint256 start, uint256 end, bool ended, uint256 keys, uint256 eth, uint256 pool, uint256 interest, uint256 win, uint256 reff)\r\n    isAdmin()\r\n    isActivated()\r\n    public {\r\n\r\n        require( roundID == roundID_, \"not current round\");\r\n\r\n        uint256 pID = address2PID_[leader];\r\n        require( pID != 0, \"cannot find the leader\");\r\n        require( end >= start, \"start end invalid\");\r\n        require( keys >= 0, \"keys invalid\");\r\n        require( eth >= 0, \"eth invalid\");\r\n        require( pool >= 0, \"pool invalid\");\r\n        require( interest >= 0, \"interest invalid\");\r\n        require( win >= 0, \"win invalid\");\r\n        require( reff >= 0, \"reff invalid\");\r\n\r\n        rID2Round_[roundID_].leader = leader;\r\n        rID2Round_[roundID_].start = start;\r\n        rID2Round_[roundID_].end = end;\r\n        rID2Round_[roundID_].ended = ended;\r\n        rID2Round_[roundID_].keys = keys;\r\n        rID2Round_[roundID_].eth = eth;\r\n        rID2Round_[roundID_].pool = pool;\r\n        rID2Round_[roundID_].interest = interest;\r\n        rID2Round_[roundID_].win = win;\r\n        rID2Round_[roundID_].reff = reff;\r\n\r\n        // fire the event\r\n        emit WinnerEvents.onUpRound\r\n        (\r\n            roundID,\r\n            leader,\r\n            start,\r\n            end,\r\n            ended,\r\n            keys,\r\n            eth,\r\n            pool,\r\n            interest,\r\n            win,\r\n            reff\r\n        );\r\n    }\r\n}\r\n\r\n\r\n//==============================================================================\r\n// interfaces\r\n//==============================================================================\r\n\r\n\r\n//==============================================================================\r\n// structs\r\n//==============================================================================\r\n\r\nlibrary WinnerDatasets {\r\n\r\n    struct Player {\r\n        uint256 pId;        // player id\r\n        address addr;       // player address\r\n        bytes32 pname;      // player name\r\n        uint256 balance;    // eth balance\r\n        uint256 interest;   // interest total\r\n        uint256 win;        // win total\r\n        uint256 reff;       // reff total\r\n    }\r\n\r\n    struct PlayerRound {\r\n        uint256 eth;        // keys eth value\r\n        uint256 keys;       // keys\r\n        uint256 interest;   // interest total\r\n        uint256 win;        // win total\r\n        uint256 reff;       // reff total\r\n    }\r\n\r\n    struct PlayerOrder {\r\n        uint256 keys;       // keys buy\r\n        uint256 eth;        // eth\r\n        uint256 otype;       // buy or sell       \r\n    }\r\n\r\n    struct Round {\r\n        address leader;     // pID of player in lead\r\n        uint256 start;      // time start\r\n        uint256 end;        // time ends/ended\r\n        bool ended;         // has round end function been ran\r\n        uint256 keys;       // keys\r\n        uint256 eth;        // total eth in\r\n        uint256 pool;       // pool eth\r\n        uint256 interest;   // interest total\r\n        uint256 win;        // win total\r\n        uint256 reff;       // reff total\r\n    }\r\n}\r\n\r\n//==============================================================================\r\n// libraries\r\n//==============================================================================\r\n\r\nlibrary NameFilter {\r\n\r\n    function nameFilter(string _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n        \r\n        //sorry limited to 32 characters\r\n        require (_length <= 32 && _length > 0, \"string must be between 1 and 32 characters\");\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"string cannot start with 0x\");\r\n            require(_temp[1] != 0x58, \"string cannot start with 0X\");\r\n        }\r\n        \r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n        \r\n        // convert & check\r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n                \r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n               require\r\n                (\r\n                    // require character is a space\r\n                    _temp[i] == 0x20 || \r\n                    // OR lowercase a-z\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||\r\n                    // or 0-9\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"string contains invalid characters\"\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\r\n                \r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;    \r\n            }\r\n        }\r\n        \r\n        require(_hasNonNumber == true, \"string cannot be only numbers\");\r\n        \r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev safe math\r\n */\r\nlibrary SafeMath {\r\n    \r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"SafeMath mul failed\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"SafeMath sub failed\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath add failed\");\r\n        return c;\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square root of given x.\r\n     */\r\n    function sqrt(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev gives square. multiplies x by x\r\n     */\r\n    function sq(uint256 x)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n    /**\r\n     * @dev x to the power of y \r\n     */\r\n    function pwr(uint256 x, uint256 y)\r\n        internal \r\n        pure \r\n        returns (uint256)\r\n    {\r\n        if (x==0)\r\n            return (0);\r\n        else if (y==0)\r\n            return (1);\r\n        else \r\n        {\r\n            uint256 z = x;\r\n            for (uint256 i=1; i < y; i++)\r\n                z = mul(z,x);\r\n            return (z);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"reff\",\"type\":\"string\"}],\"name\":\"buyKeyWithReff\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"keys\",\"type\":\"uint256\"}],\"name\":\"buyKeyUseBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roundID\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"interest\",\"type\":\"uint256\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"reff\",\"type\":\"uint256\"}],\"name\":\"upPlayerRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pname\",\"type\":\"string\"}],\"name\":\"buyName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roundID\",\"type\":\"uint256\"},{\"name\":\"leader\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"pool\",\"type\":\"uint256\"},{\"name\":\"interest\",\"type\":\"uint256\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"reff\",\"type\":\"uint256\"}],\"name\":\"upRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pID2Round_\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"interest\",\"type\":\"uint256\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"reff\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"pname\",\"type\":\"bytes32\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"interest\",\"type\":\"uint256\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"reff\",\"type\":\"uint256\"}],\"name\":\"upPlayer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rID2Round_\",\"outputs\":[{\"name\":\"leader\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"pool\",\"type\":\"uint256\"},{\"name\":\"interest\",\"type\":\"uint256\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"reff\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"roundID\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"otype\",\"type\":\"uint256\"},{\"name\":\"keysAvailable\",\"type\":\"uint256\"},{\"name\":\"keysEth\",\"type\":\"uint256\"}],\"name\":\"addPlayerOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pID2Order_\",\"outputs\":[{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"otype\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"roundID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"address2PID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"inactivate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyKey\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pID2Player_\",\"outputs\":[{\"name\":\"pId\",\"type\":\"uint256\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"pname\",\"type\":\"bytes32\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"interest\",\"type\":\"uint256\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"reff\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"roundID\",\"type\":\"uint256\"}],\"name\":\"upRoundID\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reff\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"keys\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onBuyUseBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pname\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onBuyName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"paddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"roundID\",\"type\":\"uint256\"}],\"name\":\"onUpRoundID\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"pname\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"win\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reff\",\"type\":\"uint256\"}],\"name\":\"onUpPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"keys\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"otype\",\"type\":\"uint256\"}],\"name\":\"onAddPlayerOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"keys\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"win\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reff\",\"type\":\"uint256\"}],\"name\":\"onUpPlayerRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leader\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ended\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"keys\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pool\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"win\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reff\",\"type\":\"uint256\"}],\"name\":\"onUpRound\",\"type\":\"event\"}]","ContractName":"Winner","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c2298e613dfb23d479c6aeb69ac6b24c8ed03969e44c46cce8f42b08ad95d677"}]}