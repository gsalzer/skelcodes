{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title The STT Token contract.\r\n * \r\n * By Nikita Fuchs\r\n * Credit: Taking ideas from BAT token, NET token and Nimiq token.\r\n */\r\n\r\n/**\r\n * @title Safe math operations that throw error on overflow.\r\n *\r\n * Credit: Taking ideas from FirstBlood token\r\n */\r\nlibrary SafeMath {\r\n\r\n    /** \r\n     * @dev Safely add two numbers.\r\n     *\r\n     * @param x First operant.\r\n     * @param y Second operant.\r\n     * @return The result of x+y.\r\n     */\r\n    function add(uint256 x, uint256 y)\r\n    internal pure\r\n    returns(uint256) {\r\n        uint256 z = x + y;\r\n        assert((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n\r\n    /** \r\n     * @dev Safely substract two numbers.\r\n     *\r\n     * @param x First operant.\r\n     * @param y Second operant.\r\n     * @return The result of x-y.\r\n     */\r\n    function sub(uint256 x, uint256 y)\r\n    internal pure\r\n    returns(uint256) {\r\n        assert(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    /** \r\n     * @dev Safely multiply two numbers.\r\n     *\r\n     * @param x First operant.\r\n     * @param y Second operant.\r\n     * @return The result of x*y.\r\n     */\r\n    function mul(uint256 x, uint256 y)\r\n    internal pure\r\n    returns(uint256) {\r\n        uint256 z = x * y;\r\n        assert((x == 0) || (z/x == y));\r\n        return z;\r\n    }\r\n}\r\n\r\n/**\r\n * @title The abstract ERC-20 Token Standard definition.\r\n *\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract Token {\r\n    /// @dev Returns the total token supply.\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    /// @dev MUST trigger when tokens are transferred, including zero value transfers.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    /// @dev MUST trigger on any successful call to approve(address _spender, uint256 _value).\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n/**\r\n * @title Default implementation of the ERC-20 Token Standard.\r\n */\r\ncontract StandardToken is Token {\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    /**\r\n     * @dev Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. \r\n     * @dev The function SHOULD throw if the _from account balance does not have enough tokens to spend.\r\n     *\r\n     * @dev A token contract which creates new tokens SHOULD trigger a Transfer event with the _from address set to 0x0 when tokens are created.\r\n     *\r\n     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\r\n     *\r\n     * @param _to The receiver of the tokens.\r\n     * @param _value The amount of tokens to send.\r\n     * @return True on success, false otherwise.\r\n     */\r\n    function transfer(address _to, uint256 _value)\r\n    public\r\n    returns (bool success) {\r\n        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\r\n            balances[_to] = SafeMath.add(balances[_to], _value);\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\r\n     *\r\n     * @dev The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf. \r\n     * @dev This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in \r\n     * @dev sub-currencies. The function SHOULD throw unless the _from account has deliberately authorized the sender of \r\n     * @dev the message via some mechanism.\r\n     *\r\n     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\r\n     *\r\n     * @param _from The sender of the tokens.\r\n     * @param _to The receiver of the tokens.\r\n     * @param _value The amount of tokens to send.\r\n     * @return True on success, false otherwise.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public\r\n    returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] = SafeMath.add(balances[_to], _value);\r\n            balances[_from] = SafeMath.sub(balances[_from], _value);\r\n            allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\r\n            emit Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the account balance of another account with address _owner.\r\n     *\r\n     * @param _owner The address of the account to check.\r\n     * @return The account balance.\r\n     */\r\n    function balanceOf(address _owner)\r\n    public view\r\n    returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Allows _spender to withdraw from your account multiple times, up to the _value amount. \r\n     * @dev If this function is called again it overwrites the current allowance with _value.\r\n     *\r\n     * @dev NOTE: To prevent attack vectors like the one described in [1] and discussed in [2], clients \r\n     * @dev SHOULD make sure to create user interfaces in such a way that they set the allowance first \r\n     * @dev to 0 before setting it to another value for the same spender. THOUGH The contract itself \r\n     * @dev shouldn't enforce it, to allow backwards compatilibilty with contracts deployed before.\r\n     * @dev [1] https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\r\n     * @dev [2] https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     * @return True on success, false otherwise.\r\n     */\r\n    function approve(address _spender, uint256 _value)\r\n    public\r\n    returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount which _spender is still allowed to withdraw from _owner.\r\n     *\r\n     * @param _owner The address of the sender.\r\n     * @param _spender The address of the receiver.\r\n     * @return The allowed withdrawal amount.\r\n     */\r\n    function allowance(address _owner, address _spender)\r\n    public view\r\n    returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract RelocationToken {\r\n    // function of possible new contract to recieve tokenbalance to relocate - to be protected by msg.sender == StarambaToken\r\n    function recieveRelocation(address _creditor, uint _balance) external returns (bool);\r\n}\r\n\r\n\r\n\r\n /*is StandardToken */\r\ncontract StarambaToken is StandardToken {\r\n\r\n    // Token metadata\r\n    string public constant name = \"STARAMBA.Token\";\r\n    string public constant symbol = \"STT\";\r\n    uint256 public constant decimals = 18;\r\n    string public constant version = \"1\";\r\n\r\n    uint256 public TOKEN_CREATION_CAP = 1000 * (10**6) * 10**decimals; // 1000 million STTs\r\n    uint256 public constant TOKEN_MIN = 1 * 10**decimals;              // 1 STT\r\n\r\n    address public STTadmin1;      // First administrator for multi-sig mechanism\r\n    address public STTadmin2;      // Second administrator for multi-sig mechanism\r\n\r\n    // Contracts current state (transactions still paused during sale or already publicly available)\r\n    bool public transactionsActive;\r\n\r\n    // Indicate if the token is in relocation mode\r\n    bool public relocationActive;\r\n    address public newTokenContractAddress;\r\n\r\n    // How often was the supply adjusted ? (See STT Whitepaper Version 1.0 from 23. May 2018 )\r\n    uint8 supplyAdjustmentCount = 0;\r\n\r\n    // Keep track of holders and icoBuyers\r\n    mapping (address => bool) public isHolder; // track if a user is a known token holder to the smart contract - important for payouts later\r\n    address[] public holders;                  // array of all known holders - important for payouts later\r\n\r\n    // Store the hashes of admins' msg.data\r\n    mapping (address => bytes32) private multiSigHashes;\r\n\r\n    // Declare vendor keys\r\n    mapping (address => bool) public vendors;\r\n\r\n    // Count amount of vendors for easier verification of correct contract deployment\r\n    uint8 public vendorCount;\r\n\r\n    // Events used for logging\r\n    event LogDeliverSTT(address indexed _to, uint256 _value);\r\n    //event Log\r\n\r\n    modifier onlyVendor() {\r\n        require(vendors[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier isTransferable() {\r\n        require (transactionsActive == true);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        // check if transaction sender is admin.\r\n        require (msg.sender == STTadmin1 || msg.sender == STTadmin2);\r\n        // if yes, store his msg.data. \r\n        multiSigHashes[msg.sender] = keccak256(msg.data);\r\n        // check if his stored msg.data hash equals to the one of the other admin\r\n        if ((multiSigHashes[STTadmin1]) == (multiSigHashes[STTadmin2])) {\r\n            // if yes, both admins agreed - continue.\r\n            _;\r\n\r\n            // Reset hashes after successful execution\r\n            multiSigHashes[STTadmin1] = 0x0;\r\n            multiSigHashes[STTadmin2] = 0x0;\r\n        } else {\r\n            // if not (yet), return.\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new STTToken contract.\r\n     *\r\n     *  _admin1 The first admin account that owns this contract.\r\n     *  _admin2 The second admin account that owns this contract.\r\n     *  _vendors List of exactly 10 addresses that are allowed to deliver tokens.\r\n     */\r\n    constructor(address _admin1, address _admin2, address[] _vendors)\r\n    public\r\n    {\r\n        // Check if the parameters make sense\r\n\r\n        // admin1 and admin2 address must be set and must be different\r\n        require (_admin1 != 0x0);\r\n        require (_admin2 != 0x0);\r\n        require (_admin1 != _admin2);\r\n\r\n        // 10 vendor instances for delivering token purchases\r\n        require (_vendors.length == 10);\r\n\r\n        totalSupply = 0;\r\n\r\n        // define state\r\n        STTadmin1 = _admin1;\r\n        STTadmin2 = _admin2;\r\n\r\n        for (uint8 i = 0; i < _vendors.length; i++){\r\n            vendors[_vendors[i]] = true;\r\n            vendorCount++;\r\n        }\r\n    }\r\n\r\n    // Overridden method to check for end of fundraising before allowing transfer of tokens\r\n    function transfer(address _to, uint256 _value)\r\n    public\r\n    isTransferable // Only allow token transfer after the fundraising has ended\r\n    returns (bool success)\r\n    {\r\n        bool result = super.transfer(_to, _value);\r\n        if (result) {\r\n            trackHolder(_to); // track the owner for later payouts\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Overridden method to check for end of fundraising before allowing transfer of tokens\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public\r\n    isTransferable // Only allow token transfer after the fundraising has ended\r\n    returns (bool success)\r\n    {\r\n        bool result = super.transferFrom(_from, _to, _value);\r\n        if (result) {\r\n            trackHolder(_to); // track the owner for later payouts\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Allow for easier balance checking\r\n    function getBalanceOf(address _owner)\r\n    public\r\n    view\r\n    returns (uint256 _balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n\r\n    // Perform an atomic swap between two token contracts \r\n    function relocate()\r\n    external \r\n    {\r\n        // Check if relocation was activated\r\n        require (relocationActive == true);\r\n        \r\n        // Define new token contract is\r\n        RelocationToken newSTT = RelocationToken(newTokenContractAddress);\r\n\r\n        // Burn the old balance\r\n        uint256 balance = balances[msg.sender];\r\n        balances[msg.sender] = 0;\r\n\r\n        // Perform the relocation of balances to new contract\r\n        require(newSTT.recieveRelocation(msg.sender, balance));\r\n    }\r\n\r\n    // Allows to figure out the amount of known token holders\r\n    function getHolderCount()\r\n    public\r\n    view\r\n    returns (uint256 _holderCount)\r\n    {\r\n        return holders.length;\r\n    }\r\n\r\n    // Allows for easier retrieval of holder by array index\r\n    function getHolder(uint256 _index)\r\n    public\r\n    view\r\n    returns (address _holder)\r\n    {\r\n        return holders[_index];\r\n    }\r\n\r\n    function trackHolder(address _to)\r\n    private\r\n    returns (bool success)\r\n    {\r\n        // Check if the recipient is a known token holder\r\n        if (isHolder[_to] == false) {\r\n            // if not, add him to the holders array and mark him as a known holder\r\n            holders.push(_to);\r\n            isHolder[_to] = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @dev delivers STT tokens from Leondra (Leondrino Exchange Germany)\r\n    function deliverTokens(address _buyer, uint256 _amount)\r\n    external\r\n    onlyVendor\r\n    {\r\n        require(_amount >= TOKEN_MIN);\r\n\r\n        uint256 checkedSupply = SafeMath.add(totalSupply, _amount);\r\n        require(checkedSupply <= TOKEN_CREATION_CAP);\r\n\r\n        // Adjust the balance\r\n        uint256 oldBalance = balances[_buyer];\r\n        balances[_buyer] = SafeMath.add(oldBalance, _amount);\r\n        totalSupply = checkedSupply;\r\n\r\n        trackHolder(_buyer);\r\n\r\n        // Log the creation of these tokens\r\n        emit LogDeliverSTT(_buyer, _amount);\r\n    }\r\n\r\n    /// @dev Creates new STT tokens\r\n    function deliverTokensBatch(address[] _buyer, uint256[] _amount)\r\n    external\r\n    onlyVendor\r\n    {\r\n        require(_buyer.length == _amount.length);\r\n\r\n        for (uint8 i = 0 ; i < _buyer.length; i++) {\r\n            require(_amount[i] >= TOKEN_MIN);\r\n            require(_buyer[i] != 0x0);\r\n\r\n            uint256 checkedSupply = SafeMath.add(totalSupply, _amount[i]);\r\n            require(checkedSupply <= TOKEN_CREATION_CAP);\r\n\r\n            // Adjust the balance\r\n            uint256 oldBalance = balances[_buyer[i]];\r\n            balances[_buyer[i]] = SafeMath.add(oldBalance, _amount[i]);\r\n            totalSupply = checkedSupply;\r\n\r\n            trackHolder(_buyer[i]);\r\n\r\n            // Log the creation of these tokens\r\n            emit LogDeliverSTT(_buyer[i], _amount[i]);\r\n        }\r\n    }\r\n\r\n    // Allow / Deny transfer of tokens\r\n    function transactionSwitch(bool _transactionsActive) \r\n    external \r\n    onlyOwner\r\n    {\r\n        transactionsActive = _transactionsActive;\r\n    }\r\n\r\n    // For eventual later moving to another token contract\r\n    function relocationSwitch(bool _relocationActive, address _newTokenContractAddress) \r\n    external \r\n    onlyOwner\r\n    {\r\n        if (_relocationActive) {\r\n            require(_newTokenContractAddress != 0x0);\r\n        } else {\r\n            require(_newTokenContractAddress == 0x0);\r\n        }\r\n        relocationActive = _relocationActive;\r\n        newTokenContractAddress = _newTokenContractAddress;\r\n    }\r\n\r\n    // Adjust the cap according to the white paper terms (See STT Whitepaper Version 1.0 from 23. May 2018 )\r\n    function adjustCap()\r\n    external\r\n    onlyOwner\r\n    {\r\n        require (supplyAdjustmentCount < 4);\r\n        TOKEN_CREATION_CAP = SafeMath.add(TOKEN_CREATION_CAP, 50 * (10**6) * 10**decimals); // 50 million STTs\r\n        supplyAdjustmentCount++;\r\n    }\r\n\r\n    // Burn function - name indicating the burn of ALL owner's tokens\r\n    function burnWholeBalance()\r\n    external\r\n    {\r\n        require(balances[msg.sender] > 0);\r\n        totalSupply = SafeMath.sub(totalSupply, balances[msg.sender]);\r\n        balances[msg.sender] = 0;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newTokenContractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vendors\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deliverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STTadmin2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"adjustCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STTadmin1\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolderCount\",\"outputs\":[{\"name\":\"_holderCount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_transactionsActive\",\"type\":\"bool\"}],\"name\":\"transactionSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vendorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getBalanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_relocationActive\",\"type\":\"bool\"},{\"name\":\"_newTokenContractAddress\",\"type\":\"address\"}],\"name\":\"relocationSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"relocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnWholeBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transactionsActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"deliverTokensBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"relocationActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_MIN\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getHolder\",\"outputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_CREATION_CAP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_admin1\",\"type\":\"address\"},{\"name\":\"_admin2\",\"type\":\"address\"},{\"name\":\"_vendors\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"LogDeliverSTT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"StarambaToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000000ec4cc1dc980d2d371c53011f6c408f6a0f3c3dd000000000000000000000000e9a96dc46ecb3ba736f8108078d34268ca0edd070000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000001fc69c9b0cebebcb4de3f92df92c8f6b3fb040660000000000000000000000009a2b856605bf9846c1bbe9558a85dfdca03d9d0c0000000000000000000000008fbb5457dbcf5dea20b15161bfa7899a2fd06cf40000000000000000000000009490f343d4ec38542b1f287cfa03ab7e82b3d9190000000000000000000000006c83ecdf51f3fd621377ba902a9f341c4794ee93000000000000000000000000e8c9a5395b2927c9a8d30f9c828d65ee5f9e38190000000000000000000000009aadfd9cbaf52f9bd63bf4d543f216c91e5805a5000000000000000000000000334f7945d402f2f34081535d064c02898a6b3ef8000000000000000000000000084afecf0468483ef768763dbbb1b7b800699c3b000000000000000000000000dc82c9f87e77c7700188e03e3deff26c3112adbb","Library":"","SwarmSource":"bzzr://a047beec369da1f69fb0c5f39d5354cec3724c45ef7497aa136ba4cfb66204b8"}]}