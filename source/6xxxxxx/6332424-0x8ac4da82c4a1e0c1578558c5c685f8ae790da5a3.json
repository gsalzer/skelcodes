{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23; \r\n \r\n/*    \r\n* Author:  Konstantin G...\r\n* Telegram: @bunnygame\r\n* \r\n* email: info@bunnycoin.co\r\n* site : http://bunnycoin.co\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\n\r\ncontract Ownable {\r\n    \r\n    address owner;\r\n    address ownerMoney;   \r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        ownerMoney = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n \r\n\r\n    function transferMoney(address _add) public  onlyOwner {\r\n        if (_add != address(0)) {\r\n            ownerMoney = _add;\r\n        }\r\n    }\r\n    \r\n \r\n    function transferOwner(address _add) public onlyOwner {\r\n        if (_add != address(0)) {\r\n            owner = _add;\r\n        }\r\n    } \r\n      \r\n    function getOwnerMoney() public view onlyOwner returns(address) {\r\n        return ownerMoney;\r\n    } \r\n \r\n}\r\n\r\n \r\n\r\n/**\r\n * @title Whitelist\r\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\r\n * @dev This simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) public whitelist;\r\n\r\n    mapping(uint  => address)   whitelistCheck;\r\n    uint public countAddress = 0;\r\n\r\n    event WhitelistedAddressAdded(address addr);\r\n    event WhitelistedAddressRemoved(address addr);\r\n \r\n  /**\r\n   * @dev Throws if called by any account that's not whitelisted.\r\n   */\r\n    modifier onlyWhitelisted() {\r\n        require(whitelist[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n            whitelist[msg.sender] = true;  \r\n    }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param addr address\r\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n   */\r\n    function addAddressToWhitelist(address addr) onlyWhitelisted public returns(bool success) {\r\n        if (!whitelist[addr]) {\r\n            whitelist[addr] = true;\r\n\r\n            countAddress = countAddress + 1;\r\n            whitelistCheck[countAddress] = addr;\r\n\r\n            emit WhitelistedAddressAdded(addr);\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    function getWhitelistCheck(uint key) onlyWhitelisted view public returns(address) {\r\n        return whitelistCheck[key];\r\n    }\r\n\r\n\r\n    function getInWhitelist(address addr) public view returns(bool) {\r\n        return whitelist[addr];\r\n    }\r\n \r\n    /**\r\n    * @dev add addresses to the whitelist\r\n    * @param addrs addresses\r\n    * @return true if at least one address was added to the whitelist,\r\n    * false if all addresses were already in the whitelist\r\n    */\r\n    function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            if (addAddressToWhitelist(addrs[i])) {\r\n                success = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev remove an address from the whitelist\r\n    * @param addr address\r\n    * @return true if the address was removed from the whitelist,\r\n    * false if the address wasn't in the whitelist in the first place\r\n    */\r\n    function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\r\n        if (whitelist[addr]) {\r\n            whitelist[addr] = false;\r\n            emit WhitelistedAddressRemoved(addr);\r\n            success = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev remove addresses from the whitelist\r\n    * @param addrs addresses\r\n    * @return true if at least one address was removed from the whitelist,\r\n    * false if all addresses weren't in the whitelist in the first place\r\n    */\r\n    function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            if (removeAddressFromWhitelist(addrs[i])) {\r\n                success = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n \r\ncontract StorageMarket  is Whitelist {\r\n\r\n  using SafeMath for uint256;\r\n \r\n    // the last cost of a sold seal\r\n    uint public lastmoney = 0;   \r\n    uint public lastBunny = 0;   \r\n    uint public countBunny = 0;   \r\n\r\n\r\n    bool public pause = false; \r\n\r\n    // how many a bunny\r\n    mapping (uint32 => uint) public bunnyCost;\r\n\r\n    event AddCost(uint32 bunnyId, uint money);\r\n    event DeleteCost(uint32 bunnyId);\r\n\r\n    function setPause() public onlyWhitelisted {\r\n        pause = !pause;\r\n    }\r\n\r\n    function isPauseSave() public  view returns(bool){\r\n        return !pause;\r\n    }\r\n\r\n\r\n    function setBunnyCost(uint32 _bunnyID, uint _money) external onlyWhitelisted {\r\n        require(isPauseSave());\r\n        lastmoney = _money;   \r\n        lastBunny = _bunnyID;  \r\n        bunnyCost[_bunnyID] = _money;\r\n        if (bunnyCost[_bunnyID] == 0) { \r\n            countBunny = countBunny.add(1);\r\n        }\r\n        emit AddCost(_bunnyID, _money);\r\n    }\r\n    \r\n    function getBunnyCost(uint32 _bunnyID) public view returns (uint money) {\r\n        return bunnyCost[_bunnyID];\r\n    }\r\n\r\n    function deleteBunnyCost(uint32 _bunnyID) external onlyWhitelisted { \r\n        require(isPauseSave()); \r\n        bunnyCost[_bunnyID] = 0;\r\n        if (bunnyCost[_bunnyID] != 0) { \r\n            countBunny = countBunny.sub(1);\r\n            emit DeleteCost(_bunnyID); \r\n        }\r\n    }\r\n \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_bunnyID\",\"type\":\"uint32\"},{\"name\":\"_money\",\"type\":\"uint256\"}],\"name\":\"setBunnyCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"bunnyCost\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnerMoney\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_bunnyID\",\"type\":\"uint32\"}],\"name\":\"getBunnyCost\",\"outputs\":[{\"name\":\"money\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastmoney\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPauseSave\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"getWhitelistCheck\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"transferMoney\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastBunny\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bunnyID\",\"type\":\"uint32\"}],\"name\":\"deleteBunnyCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countBunny\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"money\",\"type\":\"uint256\"}],\"name\":\"AddCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"bunnyId\",\"type\":\"uint32\"}],\"name\":\"DeleteCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"StorageMarket","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c80c1eaee88c0946d650686cf807b1f665d8d6249ba77e186537a717c90c1f8a"}]}