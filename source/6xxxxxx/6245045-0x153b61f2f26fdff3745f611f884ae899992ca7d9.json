{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string => Roles.Role) private roles;\r\n\r\n  event RoleAdded(address indexed operator, string role);\r\n  event RoleRemoved(address indexed operator, string role);\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address _operator, string _role)\r\n    public\r\n    view\r\n  {\r\n    roles[_role].check(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address _operator, string _role)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return roles[_role].has(_operator);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function addRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].add(_operator);\r\n    emit RoleAdded(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param _operator address\r\n   * @param _role the name of the role\r\n   */\r\n  function removeRole(address _operator, string _role)\r\n    internal\r\n  {\r\n    roles[_role].remove(_operator);\r\n    emit RoleRemoved(_operator, _role);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param _role the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string _role)\r\n  {\r\n    checkRole(msg.sender, _role);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param _roles the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] _roles) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i < _roles.length; i++) {\r\n  //         if (hasRole(msg.sender, _roles[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address => bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address' access to this role\r\n   */\r\n  function remove(Role storage _role, address _addr)\r\n    internal\r\n  {\r\n    _role.bearer[_addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n  {\r\n    require(has(_role, _addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage _role, address _addr)\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    return _role.bearer[_addr];\r\n  }\r\n}\r\n\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for ERC20;\r\n\r\n  // The token being sold\r\n  ERC20 public token;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // How many token units a buyer gets per wei.\r\n  // The rate is the conversion between wei and the smallest and indivisible token unit.\r\n  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\r\n  // 1 wei will give you 1 unit, or 0.001 TOK.\r\n  uint256 public rate;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @param _rate Number of token units a buyer gets per wei\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   * @param _token Address of the token being sold\r\n   */\r\n  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\r\n    require(_rate > 0);\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n    token = _token;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev low level token purchase ***DO NOT OVERRIDE***\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(_beneficiary, tokens);\r\n    emit TokenPurchase(\r\n      msg.sender,\r\n      _beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _updatePurchasingState(_beneficiary, weiAmount);\r\n\r\n    _forwardFunds();\r\n    _postValidatePurchase(_beneficiary, weiAmount);\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\r\n   * Example from CappedCrowdsale.sol's _preValidatePurchase method: \r\n   *   super._preValidatePurchase(_beneficiary, _weiAmount);\r\n   *   require(weiRaised.add(_weiAmount) <= cap);\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _postValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    token.safeTransfer(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _weiAmount Value in wei involved in the purchase\r\n   */\r\n  function _updatePurchasingState(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n  {\r\n    // optional override\r\n  }\r\n\r\n  /**\r\n   * @dev Override to extend the way in which ether is converted to tokens.\r\n   * @param _weiAmount Value in wei to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _weiAmount\r\n   */\r\n  function _getTokenAmount(uint256 _weiAmount)\r\n    internal view returns (uint256)\r\n  {\r\n    return _weiAmount.mul(rate);\r\n  }\r\n\r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n}\r\n\r\ncontract TimedCrowdsale is Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 public openingTime;\r\n  uint256 public closingTime;\r\n\r\n  /**\r\n   * @dev Reverts if not in crowdsale time range.\r\n   */\r\n  modifier onlyWhileOpen {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Constructor, takes crowdsale opening and closing times.\r\n   * @param _openingTime Crowdsale opening time\r\n   * @param _closingTime Crowdsale closing time\r\n   */\r\n  constructor(uint256 _openingTime, uint256 _closingTime) public {\r\n    // solium-disable-next-line security/no-block-members\r\n    require(_openingTime >= block.timestamp);\r\n    require(_closingTime >= _openingTime);\r\n\r\n    openingTime = _openingTime;\r\n    closingTime = _closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n   * @return Whether crowdsale period has elapsed\r\n   */\r\n  function hasClosed() public view returns (bool) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp > closingTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Extend parent behavior requiring to be within contributing period\r\n   * @param _beneficiary Token purchaser\r\n   * @param _weiAmount Amount of wei contributed\r\n   */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal\r\n    onlyWhileOpen\r\n  {\r\n    super._preValidatePurchase(_beneficiary, _weiAmount);\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract Whitelist is Ownable, RBAC {\r\n  string public constant ROLE_WHITELISTED = \"whitelist\";\r\n\r\n  /**\r\n   * @dev Throws if operator is not whitelisted.\r\n   * @param _operator address\r\n   */\r\n  modifier onlyIfWhitelisted(address _operator) {\r\n    checkRole(_operator, ROLE_WHITELISTED);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev add an address to the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\r\n   */\r\n  function addAddressToWhitelist(address _operator)\r\n    public\r\n    onlyOwner\r\n  {\r\n    addRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev getter to determine if address is in whitelist\r\n   */\r\n  function whitelist(address _operator)\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return hasRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev add addresses to the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was added to the whitelist,\r\n   * false if all addresses were already in the whitelist\r\n   */\r\n  function addAddressesToWhitelist(address[] _operators)\r\n    public\r\n    onlyOwner\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      addAddressToWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address from the whitelist\r\n   * @param _operator address\r\n   * @return true if the address was removed from the whitelist,\r\n   * false if the address wasn't in the whitelist in the first place\r\n   */\r\n  function removeAddressFromWhitelist(address _operator)\r\n    public\r\n    onlyOwner\r\n  {\r\n    removeRole(_operator, ROLE_WHITELISTED);\r\n  }\r\n\r\n  /**\r\n   * @dev remove addresses from the whitelist\r\n   * @param _operators addresses\r\n   * @return true if at least one address was removed from the whitelist,\r\n   * false if all addresses weren't in the whitelist in the first place\r\n   */\r\n  function removeAddressesFromWhitelist(address[] _operators)\r\n    public\r\n    onlyOwner\r\n  {\r\n    for (uint256 i = 0; i < _operators.length; i++) {\r\n      removeAddressFromWhitelist(_operators[i]);\r\n    }\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\ncontract TokenDestructible is Ownable {\r\n\r\n  constructor() public payable { }\r\n\r\n  /**\r\n   * @notice Terminate contract and refund to owner\r\n   * @param _tokens List of addresses of ERC20 or ERC20Basic token contracts to\r\n   refund.\r\n   * @notice The called token contracts could try to re-enter this contract. Only\r\n   supply token contracts you trust.\r\n   */\r\n  function destroy(address[] _tokens) public onlyOwner {\r\n\r\n    // Transfer tokens to owner\r\n    for (uint256 i = 0; i < _tokens.length; i++) {\r\n      ERC20Basic token = ERC20Basic(_tokens[i]);\r\n      uint256 balance = token.balanceOf(this);\r\n      token.transfer(owner, balance);\r\n    }\r\n\r\n    // Transfer Eth to owner and terminate contract\r\n    selfdestruct(owner);\r\n  }\r\n}\r\n\r\ncontract VictorTokenSale is TimedCrowdsale, Ownable, Whitelist, TokenDestructible {\r\n\r\n  using SafeMath for uint256;\r\n\r\n\r\n\r\n  // stage bonus\r\n\r\n  uint256 public constant STAGE_1_BONUS_RT = 35;\r\n\r\n  uint256 public constant STAGE_2_BONUS_RT = 30;\r\n\r\n  uint256 public constant STAGE_3_BONUS_RT = 25;\r\n\r\n  uint256 public constant STAGE_4_BONUS_RT = 20;\r\n\r\n  uint256 public constant STAGE_5_BONUS_RT = 15;\r\n\r\n  uint256 public constant STAGE_6_BONUS_RT = 10;\r\n\r\n  uint256 public constant STAGE_7_BONUS_RT =  5;\r\n\r\n\r\n\r\n  // BOUNDARY ethereum conv:  22000 / 44000 / 66000 / 88000 / 110000 / 132000 / 154000\r\n\r\n  // This is wei * 25000 limit.\r\n\r\n  uint256 public constant BOUNDARY_1 =  550000000000000000000000000;\r\n\r\n  uint256 public constant BOUNDARY_2 = 1100000000000000000000000000;\r\n\r\n  uint256 public constant BOUNDARY_3 = 1650000000000000000000000000;\r\n\r\n  uint256 public constant BOUNDARY_4 = 2200000000000000000000000000;\r\n\r\n  uint256 public constant BOUNDARY_5 = 2750000000000000000000000000;\r\n\r\n  uint256 public constant BOUNDARY_6 = 3300000000000000000000000000;\r\n\r\n  uint256 public constant BOUNDARY_7 = 3850000000000000000000000000; // End of Sales amount\r\n\r\n\r\n\r\n  VictorToken _token;\r\n\r\n\r\n\r\n  uint256 public bonusRate;\r\n\r\n  uint256 public calcAdditionalRatio;\r\n\r\n  uint256 public cumulativeSumofToken = 0;\r\n\r\n\r\n\r\n  uint256 public minimum_buy_limit = 0.1 ether;\r\n\r\n  uint256 public maximum_buy_limit = 1000 ether;\r\n\r\n\r\n\r\n  event SetPeriod(uint256 _openingTime, uint256 _closingTime);\r\n\r\n  event SetBuyLimit(uint256 _minLimit, uint256 _maxLimit);\r\n\r\n\r\n\r\n  // ----------------------------------------------------------------------------------- \r\n\r\n  // Constructor\r\n\r\n  // ----------------------------------------------------------------------------------- \r\n\r\n  // Fixed exchange ratio: 25000 (FIXED!)\r\n\r\n  // Fixed period of sale: 16 weeks from now set as sales period (changeable)\r\n\r\n  constructor(\r\n\r\n    VictorToken _token_,\r\n\r\n    address _wallet\r\n\r\n  )\r\n\r\n    public\r\n\r\n    Crowdsale(25000, _wallet, _token_)\r\n\r\n    TimedCrowdsale(block.timestamp, block.timestamp + 16 weeks)\r\n\r\n  {\r\n\r\n    _token = _token_;\r\n\r\n\r\n\r\n    emit SetPeriod(openingTime, closingTime);\r\n\r\n\r\n\r\n    calcBonusRate();\r\n\r\n  }\r\n\r\n\r\n\r\n  // -----------------------------------------------------------------------------------\r\n\r\n  // override fuction.\r\n\r\n  // -----------------------------------------------------------------------------------\r\n\r\n  function _preValidatePurchase(\r\n\r\n    address _beneficiary,\r\n\r\n    uint256 _weiAmount\r\n\r\n  )\r\n\r\n    onlyWhileOpen\r\n\r\n    onlyIfWhitelisted(_beneficiary)\r\n\r\n    internal\r\n\r\n  {\r\n\r\n    require(_beneficiary != address(0));\r\n\r\n    require(_weiAmount >= minimum_buy_limit);\r\n\r\n    require(_weiAmount <= maximum_buy_limit);\r\n\r\n    require(BOUNDARY_7 >= (cumulativeSumofToken + _weiAmount));\r\n\r\n  }\r\n\r\n\r\n\r\n  // override fuction. default + bonus token\r\n\r\n  function _getTokenAmount(\r\n\r\n    uint256 _weiAmount\r\n\r\n  )\r\n\r\n    internal\r\n\r\n    view\r\n\r\n    returns (uint256)\r\n\r\n  {\r\n\r\n    return (_weiAmount.mul(rate)).add(_weiAmount.mul(calcAdditionalRatio)) ;\r\n\r\n  }\r\n\r\n\r\n\r\n  // override fuction.\r\n\r\n  // bonus token locking\r\n\r\n  // stage bonus boundary check and change.\r\n\r\n  function _updatePurchasingState(\r\n\r\n    address _beneficiary,\r\n\r\n    uint256 _weiAmount\r\n\r\n  )\r\n\r\n    internal\r\n\r\n  {\r\n\r\n    uint256 lockBalance = _weiAmount.mul(calcAdditionalRatio);\r\n\r\n\r\n\r\n    _token.increaseLockBalance(_beneficiary, lockBalance);\r\n\r\n    \r\n\r\n    cumulativeSumofToken = cumulativeSumofToken.add(_weiAmount.mul(rate));\r\n\r\n\r\n\r\n    calcBonusRate();\r\n\r\n\r\n\r\n    return;\r\n\r\n  }\r\n\r\n\r\n\r\n  // -----------------------------------------------------------------------------------\r\n\r\n  // Utility function\r\n\r\n  // -----------------------------------------------------------------------------------\r\n\r\n  // Bonus rate calcuration.\r\n\r\n  function calcBonusRate()\r\n\r\n    public\r\n\r\n  {\r\n\r\n    if      (cumulativeSumofToken >=          0 && cumulativeSumofToken < BOUNDARY_1 && bonusRate != STAGE_1_BONUS_RT)\r\n\r\n    {\r\n\r\n      bonusRate = STAGE_1_BONUS_RT;\r\n\r\n      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\r\n\r\n    }\r\n\r\n    else if (cumulativeSumofToken >= BOUNDARY_1 && cumulativeSumofToken < BOUNDARY_2 && bonusRate != STAGE_2_BONUS_RT)\r\n\r\n    {\r\n\r\n      bonusRate = STAGE_2_BONUS_RT;\r\n\r\n      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\r\n\r\n    }\r\n\r\n    else if (cumulativeSumofToken >= BOUNDARY_2 && cumulativeSumofToken < BOUNDARY_3 && bonusRate != STAGE_3_BONUS_RT)\r\n\r\n    {\r\n\r\n      bonusRate = STAGE_3_BONUS_RT;\r\n\r\n      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\r\n\r\n    }\r\n\r\n    else if (cumulativeSumofToken >= BOUNDARY_3 && cumulativeSumofToken < BOUNDARY_4 && bonusRate != STAGE_4_BONUS_RT)\r\n\r\n    {\r\n\r\n      bonusRate = STAGE_4_BONUS_RT;\r\n\r\n      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\r\n\r\n    }\r\n\r\n    else if (cumulativeSumofToken >= BOUNDARY_4 && cumulativeSumofToken < BOUNDARY_5 && bonusRate != STAGE_5_BONUS_RT)\r\n\r\n    {\r\n\r\n      bonusRate = STAGE_5_BONUS_RT;\r\n\r\n      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\r\n\r\n    }\r\n\r\n    else if (cumulativeSumofToken >= BOUNDARY_5 && cumulativeSumofToken < BOUNDARY_6 && bonusRate != STAGE_6_BONUS_RT)\r\n\r\n    {\r\n\r\n      bonusRate = STAGE_6_BONUS_RT;\r\n\r\n      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\r\n\r\n    }\r\n\r\n    else if (cumulativeSumofToken >= BOUNDARY_6 && cumulativeSumofToken < BOUNDARY_7 && bonusRate != STAGE_7_BONUS_RT)\r\n\r\n    {\r\n\r\n      bonusRate = STAGE_7_BONUS_RT;\r\n\r\n      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\r\n\r\n    }\r\n\r\n    else if (cumulativeSumofToken >= BOUNDARY_7)\r\n\r\n    {\r\n\r\n      bonusRate = 0;\r\n\r\n      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\r\n\r\n    }\r\n\r\n    \r\n\r\n    return;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Change open, close time and bonus rate. _openingTime, _closingTime is epoch (like 1532919600)\r\n\r\n  function changePeriod(\r\n\r\n    uint256 _openingTime,\r\n\r\n    uint256 _closingTime\r\n\r\n  )\r\n\r\n    onlyOwner\r\n\r\n    external\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    require(_openingTime >= block.timestamp);\r\n\r\n    require(_closingTime >= _openingTime);\r\n\r\n\r\n\r\n    openingTime = _openingTime;\r\n\r\n    closingTime = _closingTime;\r\n\r\n\r\n\r\n    calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\r\n\r\n\r\n\r\n    emit SetPeriod(openingTime, closingTime);\r\n\r\n\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Buyer limit change\r\n\r\n  function changeLimit(\r\n\r\n    uint256 _minLimit,\r\n\r\n    uint256 _maxLimit\r\n\r\n  )\r\n\r\n    onlyOwner\r\n\r\n    external\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    require(_minLimit >= 0 ether);\r\n\r\n    require(_maxLimit >= 3 ether);\r\n\r\n\r\n\r\n    minimum_buy_limit = _minLimit;\r\n\r\n    maximum_buy_limit = _maxLimit;\r\n\r\n\r\n\r\n    emit SetBuyLimit(minimum_buy_limit, maximum_buy_limit);\r\n\r\n\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n  // bonus drop. Bonus tokens take a lock.\r\n\r\n  function bonusDrop(\r\n\r\n    address _beneficiary,\r\n\r\n    uint256 _tokenAmount\r\n\r\n  )\r\n\r\n    onlyOwner\r\n\r\n    external\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    _processPurchase(_beneficiary, _tokenAmount);\r\n\r\n\r\n\r\n    emit TokenPurchase(\r\n\r\n      msg.sender,\r\n\r\n      _beneficiary,\r\n\r\n      0,\r\n\r\n      _tokenAmount\r\n\r\n    );\r\n\r\n\r\n\r\n    _token.increaseLockBalance(_beneficiary, _tokenAmount);\r\n\r\n\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n  // bonus drop. Bonus tokens are not locked !!!\r\n\r\n  function unlockBonusDrop(\r\n\r\n    address _beneficiary,\r\n\r\n    uint256 _tokenAmount\r\n\r\n  )\r\n\r\n    onlyOwner\r\n\r\n    external\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    _processPurchase(_beneficiary, _tokenAmount);\r\n\r\n\r\n\r\n    emit TokenPurchase(\r\n\r\n      msg.sender,\r\n\r\n      _beneficiary,\r\n\r\n      0,\r\n\r\n      _tokenAmount\r\n\r\n    );\r\n\r\n\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n  // -----------------------------------------------------------------------------------\r\n\r\n  // Token Interface\r\n\r\n  // -----------------------------------------------------------------------------------\r\n\r\n  // Increases the lock on the balance at a specific address.\r\n\r\n  function increaseTokenLock(\r\n\r\n    address _beneficiary,\r\n\r\n    uint256 _tokenAmount\r\n\r\n  )\r\n\r\n    onlyOwner\r\n\r\n    external\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    return(_token.increaseLockBalance(_beneficiary, _tokenAmount));\r\n\r\n  }\r\n\r\n\r\n\r\n  // Decreases the lock on the balance at a specific address.\r\n\r\n  function decreaseTokenLock(\r\n\r\n    address _beneficiary,\r\n\r\n    uint256 _tokenAmount\r\n\r\n  )\r\n\r\n    onlyOwner\r\n\r\n    external\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    return(_token.decreaseLockBalance(_beneficiary, _tokenAmount));\r\n\r\n  }\r\n\r\n\r\n\r\n  // It completely unlocks a specific address.\r\n\r\n  function clearTokenLock(\r\n\r\n    address _beneficiary\r\n\r\n  )\r\n\r\n    onlyOwner\r\n\r\n    external\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    return(_token.clearLock(_beneficiary));\r\n\r\n  }\r\n\r\n\r\n\r\n  // Redefine the point at which a lock that affects the whole is released.\r\n\r\n  function resetLockReleaseTime(\r\n\r\n    address _beneficiary,\r\n\r\n    uint256 _releaseTime\r\n\r\n  )\r\n\r\n    onlyOwner\r\n\r\n    external\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    return(_token.setReleaseTime(_beneficiary, _releaseTime));\r\n\r\n  }\r\n\r\n\r\n\r\n  // Attention of administrator is required!! Migrate the owner of the token.\r\n\r\n  function transferTokenOwnership(\r\n\r\n    address _newOwner\r\n\r\n  )\r\n\r\n    onlyOwner\r\n\r\n    external\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    _token.transferOwnership(_newOwner);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Stops the entire transaction of the token completely.\r\n\r\n  function pauseToken()\r\n\r\n    onlyOwner\r\n\r\n    external\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    _token.pause();\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Resume a suspended transaction.\r\n\r\n  function unpauseToken()\r\n\r\n    onlyOwner\r\n\r\n    external\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    _token.unpause();\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool)\r\n  {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint _addedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint _subtractedValue\r\n  )\r\n    public\r\n    whenNotPaused\r\n    returns (bool success)\r\n  {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract IndividualLockableToken is PausableToken{\r\n\r\n  using SafeMath for uint256;\r\n\r\n\r\n\r\n  event LockTimeSetted(address indexed holder, uint256 old_release_time, uint256 new_release_time);\r\n\r\n  event Locked(address indexed holder, uint256 locked_balance_change, uint256 total_locked_balance, uint256 release_time);\r\n\r\n\r\n\r\n  struct lockState {\r\n\r\n    uint256 locked_balance;\r\n\r\n    uint256 release_time;\r\n\r\n  }\r\n\r\n\r\n\r\n  // default lock period\r\n\r\n  uint256 public lock_period = 24 weeks;\r\n\r\n\r\n\r\n  mapping(address => lockState) internal userLock;\r\n\r\n\r\n\r\n  // Specify the time that a particular person's lock will be released\r\n\r\n  function setReleaseTime(address _holder, uint256 _release_time)\r\n\r\n    public\r\n\r\n    onlyOwner\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    require(_holder != address(0));\r\n\r\n\trequire(_release_time >= block.timestamp);\r\n\r\n\r\n\r\n\tuint256 old_release_time = userLock[_holder].release_time;\r\n\r\n\r\n\r\n\tuserLock[_holder].release_time = _release_time;\r\n\r\n\temit LockTimeSetted(_holder, old_release_time, userLock[_holder].release_time);\r\n\r\n\treturn true;\r\n\r\n  }\r\n\r\n  \r\n\r\n  // Returns the point at which token holder's lock is released\r\n\r\n  function getReleaseTime(address _holder)\r\n\r\n    public\r\n\r\n    view\r\n\r\n    returns (uint256)\r\n\r\n  {\r\n\r\n    require(_holder != address(0));\r\n\r\n\r\n\r\n\treturn userLock[_holder].release_time;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Unlock a specific person. Free trading even with a lock balance\r\n\r\n  function clearReleaseTime(address _holder)\r\n\r\n    public\r\n\r\n    onlyOwner\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    require(_holder != address(0));\r\n\r\n    require(userLock[_holder].release_time > 0);\r\n\r\n\r\n\r\n\tuint256 old_release_time = userLock[_holder].release_time;\r\n\r\n\r\n\r\n\tuserLock[_holder].release_time = 0;\r\n\r\n\temit LockTimeSetted(_holder, old_release_time, userLock[_holder].release_time);\r\n\r\n\treturn true;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Increase the lock balance of a specific person.\r\n\r\n  // If you only want to increase the balance, the release_time must be specified in advance.\r\n\r\n  function increaseLockBalance(address _holder, uint256 _value)\r\n\r\n    public\r\n\r\n    onlyOwner\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n\trequire(_holder != address(0));\r\n\r\n\trequire(_value > 0);\r\n\r\n\trequire(balances[_holder] >= _value);\r\n\r\n\t\r\n\r\n\tif (userLock[_holder].release_time == 0) {\r\n\r\n\t\tuserLock[_holder].release_time = block.timestamp + lock_period;\r\n\r\n\t}\r\n\r\n\t\r\n\r\n\tuserLock[_holder].locked_balance = (userLock[_holder].locked_balance).add(_value);\r\n\r\n\temit Locked(_holder, _value, userLock[_holder].locked_balance, userLock[_holder].release_time);\r\n\r\n\treturn true;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Decrease the lock balance of a specific person.\r\n\r\n  function decreaseLockBalance(address _holder, uint256 _value)\r\n\r\n    public\r\n\r\n    onlyOwner\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n\trequire(_holder != address(0));\r\n\r\n\trequire(_value > 0);\r\n\r\n\trequire(userLock[_holder].locked_balance >= _value);\r\n\r\n\r\n\r\n\tuserLock[_holder].locked_balance = (userLock[_holder].locked_balance).sub(_value);\r\n\r\n\temit Locked(_holder, _value, userLock[_holder].locked_balance, userLock[_holder].release_time);\r\n\r\n\treturn true;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Clear the lock.\r\n\r\n  function clearLock(address _holder)\r\n\r\n    public\r\n\r\n    onlyOwner\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n\trequire(_holder != address(0));\r\n\r\n\trequire(userLock[_holder].release_time > 0);\r\n\r\n\r\n\r\n\tuserLock[_holder].locked_balance = 0;\r\n\r\n\tuserLock[_holder].release_time = 0;\r\n\r\n\temit Locked(_holder, 0, userLock[_holder].locked_balance, userLock[_holder].release_time);\r\n\r\n\treturn true;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Check the amount of the lock\r\n\r\n  function getLockedBalance(address _holder)\r\n\r\n    public\r\n\r\n    view\r\n\r\n    returns (uint256)\r\n\r\n  {\r\n\r\n    if(block.timestamp >= userLock[_holder].release_time) return uint256(0);\r\n\r\n    return userLock[_holder].locked_balance;\r\n\r\n  }\r\n\r\n\r\n\r\n  // Check your remaining balance\r\n\r\n  function getFreeBalance(address _holder)\r\n\r\n    public\r\n\r\n    view\r\n\r\n    returns (uint256)\r\n\r\n  {\r\n\r\n    if(block.timestamp >= userLock[_holder].release_time) return balances[_holder];\r\n\r\n    return balances[_holder].sub(userLock[_holder].locked_balance);\r\n\r\n  }\r\n\r\n\r\n\r\n  // transfer overrride\r\n\r\n  function transfer(\r\n\r\n    address _to,\r\n\r\n    uint256 _value\r\n\r\n  )\r\n\r\n    public\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    require(getFreeBalance(msg.sender) >= _value);\r\n\r\n    return super.transfer(_to, _value);\r\n\r\n  }\r\n\r\n\r\n\r\n  // transferFrom overrride\r\n\r\n  function transferFrom(\r\n\r\n    address _from,\r\n\r\n    address _to,\r\n\r\n    uint256 _value\r\n\r\n  )\r\n\r\n    public\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    require(getFreeBalance(_from) >= _value);\r\n\r\n    return super.transferFrom(_from, _to, _value);\r\n\r\n  }\r\n\r\n\r\n\r\n  // approve overrride\r\n\r\n  function approve(\r\n\r\n    address _spender,\r\n\r\n    uint256 _value\r\n\r\n  )\r\n\r\n    public\r\n\r\n    returns (bool)\r\n\r\n  {\r\n\r\n    require(getFreeBalance(msg.sender) >= _value);\r\n\r\n    return super.approve(_spender, _value);\r\n\r\n  }\r\n\r\n\r\n\r\n  // increaseApproval overrride\r\n\r\n  function increaseApproval(\r\n\r\n    address _spender,\r\n\r\n    uint _addedValue\r\n\r\n  )\r\n\r\n    public\r\n\r\n    returns (bool success)\r\n\r\n  {\r\n\r\n    require(getFreeBalance(msg.sender) >= allowed[msg.sender][_spender].add(_addedValue));\r\n\r\n    return super.increaseApproval(_spender, _addedValue);\r\n\r\n  }\r\n\r\n  \r\n\r\n  // decreaseApproval overrride\r\n\r\n  function decreaseApproval(\r\n\r\n    address _spender,\r\n\r\n    uint _subtractedValue\r\n\r\n  )\r\n\r\n    public\r\n\r\n    returns (bool success)\r\n\r\n  {\r\n\r\n\tuint256 oldValue = allowed[msg.sender][_spender];\r\n\r\n\t\r\n\r\n    if (_subtractedValue < oldValue) {\r\n\r\n      require(getFreeBalance(msg.sender) >= oldValue.sub(_subtractedValue));\t  \r\n\r\n    }    \r\n\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n\r\n  }\r\n\r\n}\r\n\r\ncontract VictorToken is IndividualLockableToken, TokenDestructible {\r\n\r\n  using SafeMath for uint256;\r\n\r\n\r\n\r\n  string public constant name = \"VictorToken\";\r\n\r\n  string public constant symbol = \"VIC\";\r\n\r\n  uint8  public constant decimals = 18;\r\n\r\n\r\n\r\n  // 10,000,000,000 10 billion\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));\r\n\r\n\r\n\r\n  constructor()\r\n\r\n    public\r\n\r\n  {\r\n\r\n    totalSupply_ = INITIAL_SUPPLY;\r\n\r\n    balances[msg.sender] = totalSupply_;\r\n\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNDARY_4\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ROLE_WHITELISTED\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNDARY_7\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"hasRole\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"bonusDrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"increaseTokenLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_3_BONUS_RT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_6_BONUS_RT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_5_BONUS_RT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_releaseTime\",\"type\":\"uint256\"}],\"name\":\"resetLockReleaseTime\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"unlockBonusDrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bonusRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"calcBonusRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"name\":\"changePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calcAdditionalRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNDARY_1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNDARY_3\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cumulativeSumofToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_4_BONUS_RT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNDARY_2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximum_buy_limit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_2_BONUS_RT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_1_BONUS_RT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minLimit\",\"type\":\"uint256\"},{\"name\":\"_maxLimit\",\"type\":\"uint256\"}],\"name\":\"changeLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimum_buy_limit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operators\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STAGE_7_BONUS_RT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"clearTokenLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNDARY_6\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOUNDARY_5\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseTokenLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token_\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"name\":\"SetPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_minLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_maxLimit\",\"type\":\"uint256\"}],\"name\":\"SetBuyLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"role\",\"type\":\"string\"}],\"name\":\"RoleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"VictorTokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e98296ee3e814beb3c8fba1e29a8a4287acec769000000000000000000000000b3b3fe7f103e52f192c3cf6c1119371942c137ca","Library":"","SwarmSource":"bzzr://7b85c7a3000e9977a9084a26b79b84b34eb3e31ec592b66c611479c06e462c57"}]}