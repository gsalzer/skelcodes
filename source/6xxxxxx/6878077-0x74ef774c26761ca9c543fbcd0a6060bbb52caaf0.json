{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract LNEvents \r\n{\r\n    event onBuyKey\r\n    (\r\n        uint256 indexed rID,\r\n        uint256 indexed pID,\r\n        address pAddr,\r\n        uint256 cnt,\r\n        uint256 ts\r\n    );\r\n    event onBuyNum\r\n    (\r\n        uint256 indexed rID,\r\n        uint256 indexed playerID,\r\n        uint256 num1,\r\n        uint256 num2,\r\n        uint256 ts\r\n    );\r\n    event onEndRound \r\n    (\r\n        uint256 indexed rID,\r\n        uint256 luck_num,\r\n        uint256 luck_cnt,\r\n        uint256 luck_win,\r\n        uint256 ts\r\n    );\r\n    event onWin\r\n    (\r\n        uint256 indexed pID,\r\n        uint256 indexed rID,\r\n        uint256 luck_cnt,\r\n        uint256 luck_win\r\n    );\r\n    event onWithdraw\r\n    (\r\n        uint256 indexed pID,\r\n        uint256 amount,\r\n        uint256 ts\r\n    );\r\n}\r\n\r\ncontract LuckyNum is LNEvents {\r\n    using SafeMath for *;\r\n    using NameFilter for *;\r\n\r\n    address public ga_CEO;\r\n    \r\n    uint256 public gu_RID;\r\n    uint256 public gu_LastPID;   \r\n    uint256 constant public gu_price = 25000000000000000;\r\n    uint256 public gu_keys ;\r\n    uint256 public gu_ppt  ;\r\n\r\n    mapping (address => uint256) public gd_Addr2PID;\r\n    mapping (bytes32 => uint256) public gd_Name2PID;\r\n    mapping (uint256 => SAMdatasets.Player) public gd_Player;\r\n    mapping (uint256 => mapping (uint256 => SAMdatasets.PlayerRounds)) public gd_PlyrRnd;\r\n    mapping (uint256 => SAMdatasets.Round) public gd_RndData;\r\n    \r\n    constructor()\r\n        public\r\n    {\r\n        ga_CEO = msg.sender;\r\n\r\n        gu_RID = 1;\r\n        SetRndTime();\r\n\t}\r\n\r\n    modifier IsPlayer() {\r\n        address addr = msg.sender;\r\n        uint256 codeLen;\r\n        \r\n        assembly {codeLen := extcodesize(addr)}\r\n        require(codeLen == 0, \"Not Human\");\r\n        _;\r\n    }\r\n\r\n    modifier CheckEthRange(uint256 eth) {\r\n        require(eth >= gu_price && eth <= 250000000000000000000, \r\n                \"Out of Range\");\r\n        _;    \r\n    }\r\n    \r\n    function CalcKeys(uint256 eth) \r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return (eth/gu_price);\r\n    }\r\n    \r\n    function CalcEth(uint256 keys) \r\n        internal\r\n        pure\r\n        returns(uint256)  \r\n    {\r\n        return (keys*gu_price) ;\r\n    }\r\n\r\n    function Kill()\r\n        public\r\n    {\r\n        require(ga_CEO == msg.sender, \"only ga_CEO can modify ga_CEO\");\r\n        selfdestruct(ga_CEO);\r\n    }\r\n\r\n    function ModCEO(address newCEO) \r\n        IsPlayer() \r\n        public\r\n    {\r\n        require(address(0) != newCEO, \"CEO Can not be 0\");\r\n        require(ga_CEO == msg.sender, \"only ga_CEO can modify ga_CEO\");\r\n        ga_CEO = newCEO;\r\n    }\r\n    \r\n    function GetAffID(uint256 pID, string affName, uint256 affID, address affAddr)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        uint256 aID = 0;\r\n        bytes32 name = affName.nameFilter() ;\r\n        if (name != '' && name != gd_Player[pID].name)\r\n        {\r\n            aID = gd_Name2PID[name];\r\n        } \r\n        if (aID == 0 && affID != 0 && affID != pID){\r\n            aID = affID;\r\n        } \r\n        if (aID == 0 && affAddr != address(0) && affAddr != msg.sender)\r\n        {\r\n            aID = gd_Addr2PID[affAddr];\r\n        } \r\n        if (aID == 0)\r\n        {\r\n            aID = gd_Player[pID].laff;\r\n        }\r\n        if (aID != 0 && gd_Player[pID].laff != aID) \r\n        {\r\n            gd_Player[pID].laff = aID;\r\n        }\r\n        return (aID) ;\r\n    }\r\n\r\n    function OnBuyKey(string affName, uint256 affID, address affAddr)\r\n        IsPlayer()\r\n        CheckEthRange(msg.value)\r\n        public\r\n        payable\r\n    {\r\n        uint256 pID = GetPIDXAddr(msg.sender);\r\n        uint256 aID = GetAffID(pID, affName, affID, affAddr);\r\n        BuyKey(pID, aID, msg.value);\r\n    }\r\n\r\n    function OnBuyNum(uint256 num1, uint256 num2)\r\n        IsPlayer()\r\n        public\r\n    {\r\n        uint256 pID = GetPIDXAddr(msg.sender);\r\n        BuyNum(pID, num1, num2);\r\n    }\r\n\r\n    function OnEndRound()\r\n        IsPlayer()\r\n        public\r\n    {\r\n        require(ga_CEO == msg.sender, \"only ga_CEO can modify ga_CEO\");\r\n        EndRound();\r\n    }\r\n\r\n    function GetAKWin(uint256 pID)\r\n        private\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return ((gu_ppt.mul(gd_Player[pID].keys)/(1000000000000000000)).sub(gd_Player[pID].mask)) ;\r\n    \r\n    }\r\n\r\n    function GetRKWin(uint256 pID, uint256 lrnd)\r\n        private\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return ( (gd_RndData[lrnd].kppt.mul(gd_PlyrRnd[pID][lrnd].keys)/ (1000000000000000000)).sub(gd_PlyrRnd[pID][lrnd].mask) ) ;\r\n    }\r\n\r\n    function GetRNWin(uint256 pID, uint256 lrnd)\r\n        private\r\n        view\r\n        returns(uint256)\r\n    {\r\n        if (gd_RndData[lrnd].nppt > 0)\r\n        {\r\n            uint256 cnt = gd_PlyrRnd[pID][lrnd].d_num[gd_RndData[lrnd].luckNum];\r\n            if (cnt > 0)\r\n            {\r\n                return gd_RndData[lrnd].nppt.mul(cnt);\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function GetUnmaskGen(uint256 pID, uint256 lrnd)\r\n        private\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 a_kwin = GetAKWin(pID);\r\n        uint256 r_kwin = GetRKWin(pID, lrnd) ;\r\n        return a_kwin.add(r_kwin);\r\n    }\r\n    function GetUnmaskWin(uint256 pID, uint256 lrnd)\r\n        private\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return GetRNWin(pID, lrnd) ;\r\n    }\r\n\r\n    function UpdateVault(uint256 pID, uint256 lrnd)\r\n        private \r\n    {\r\n        uint256 a_kwin = GetAKWin(pID);\r\n        uint256 r_kwin = GetRKWin(pID, lrnd) ;\r\n        uint256 r_nwin = GetRNWin(pID, lrnd) ;\r\n        gd_Player[pID].gen = a_kwin.add(r_kwin).add(gd_Player[pID].gen);\r\n        if (r_nwin > 0)\r\n        {\r\n            gd_Player[pID].win = r_nwin.add(gd_Player[pID].win);\r\n            emit LNEvents.onWin(pID, lrnd, gd_PlyrRnd[pID][lrnd].d_num[gd_RndData[lrnd].luckNum], r_nwin);\r\n        }\r\n        if (a_kwin > 0)\r\n        {\r\n            gd_Player[pID].mask = a_kwin.add(gd_Player[pID].mask) ;\r\n        }\r\n        if (r_kwin > 0)\r\n        {\r\n            gd_PlyrRnd[pID][lrnd].win = r_kwin.add(gd_PlyrRnd[pID][lrnd].win) ;\r\n            gd_PlyrRnd[pID][lrnd].mask = r_kwin.add(gd_PlyrRnd[pID][lrnd].mask);\r\n        }\r\n        if(lrnd != gu_RID){\r\n            gd_Player[pID].lrnd = gu_RID;\r\n        }\r\n    }\r\n\r\n    function Withdraw()\r\n        IsPlayer()\r\n        public\r\n    {\r\n        uint256 pID = gd_Addr2PID[msg.sender];\r\n        \r\n        UpdateVault(pID, gd_Player[pID].lrnd);\r\n        \r\n        uint256 balance = gd_Player[pID].win.add(gd_Player[pID].gen).add(gd_Player[pID].aff_gen) ;\r\n        if (balance > 0)\r\n        {\r\n            gd_Player[pID].addr.transfer(balance);\r\n            gd_Player[pID].gen = 0;\r\n            gd_Player[pID].win = 0;\r\n            gd_Player[pID].aff_gen = 0;\r\n            emit LNEvents.onWithdraw(pID, balance, now);\r\n        }\r\n    }\r\n\r\n    function GetKeyPrice()\r\n        public\r\n        pure\r\n        returns(uint256)\r\n    {  \r\n        return gu_price;\r\n    }\r\n    \r\n    function GetLeftTime()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        if (now < gd_RndData[gu_RID].end)\r\n        {\r\n            return( (gd_RndData[gu_RID].end).sub(now) );\r\n        }\r\n        return(0);\r\n    }\r\n\r\n    function GetPlayerNumCnt(address addr, uint256 num)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        if (addr == address(0))\r\n        {\r\n            addr == msg.sender;\r\n        }\r\n        uint256 rID = gu_RID;\r\n        uint256 pID = gd_Addr2PID[addr];\r\n        return ( gd_PlyrRnd[pID][rID].d_num[num] );\r\n    }\r\n\r\n    function GetPlayerNumCnt(uint256 num)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 rID = gu_RID;\r\n        return ( gd_RndData[rID].d_num[num] );\r\n    }\r\n    \r\n    function TransAllDict2Num(uint256 s, uint256 e)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {   \r\n        uint256 rID = gu_RID;\r\n        uint256 num = 0;\r\n        for(uint256 i = s ; i <= e ; i ++)\r\n        {\r\n            if (gd_RndData[rID].d_num[i] > 30)\r\n            {\r\n                num = num.add(31 << ((i-s)*5));\r\n            }\r\n            else if(gd_RndData[rID].d_num[i] > 0)\r\n            {\r\n                num = num.add(gd_RndData[rID].d_num[i] << ((i-s)*5));\r\n            }\r\n        }\r\n        return (num);\r\n    }\r\n\r\n    function GetCurRoundInfo()\r\n        public\r\n        view\r\n        returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        uint256 rID = gu_RID;\r\n        return\r\n        (\r\n            rID,\r\n            gu_keys,\r\n            gd_RndData[rID].state,\r\n            gd_RndData[rID].keys,\r\n            gd_RndData[rID].pot,\r\n            gd_RndData[rID].ncnt,\r\n            ((gd_RndData[rID-1].nppt) << 8)+gd_RndData[rID-1].luckNum,\r\n            TransAllDict2Num(1, 50),\r\n            TransAllDict2Num(51, 100)\r\n        );\r\n    }\r\n\r\n    function GenOneHis(uint256 rID)\r\n        internal\r\n        view\r\n        returns(uint256)\r\n    {\r\n        uint256 nppt = gd_RndData[rID].nppt;\r\n        uint256 luckNum = gd_RndData[rID].luckNum;\r\n        uint256 luckCnt = gd_RndData[rID].d_num[luckNum];\r\n        return ((nppt << 64)+(rID << 40)+(luckNum<<32)+luckCnt);\r\n    }\r\n\r\n    function LuckNumHis()\r\n        public\r\n        view\r\n        returns(uint256, uint256, uint256, uint256, uint256, \r\n        uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n        return \r\n        (\r\n            gu_RID > 1? GenOneHis(gu_RID-1) : 0 ,\r\n            gu_RID > 2? GenOneHis(gu_RID-2) : 0 ,\r\n            gu_RID > 3? GenOneHis(gu_RID-3) : 0 ,\r\n            gu_RID > 4? GenOneHis(gu_RID-4) : 0 ,\r\n            gu_RID > 5? GenOneHis(gu_RID-5) : 0 ,\r\n            gu_RID > 6? GenOneHis(gu_RID-6) : 0 ,\r\n            gu_RID > 7? GenOneHis(gu_RID-7) : 0 ,\r\n            gu_RID > 8? GenOneHis(gu_RID-8) : 0 ,\r\n            gu_RID > 9? GenOneHis(gu_RID-9) : 0 ,\r\n            gu_RID > 10? GenOneHis(gu_RID-10) : 0  \r\n        ) ;\r\n    }\r\n\r\n    function TransUserDict2Num(uint256 pID, uint256 s, uint256 e)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {   \r\n        uint256 num = 0;\r\n        for(uint256 i = s ; i <= e ; i ++)\r\n        {\r\n            if (gd_PlyrRnd[pID][gu_RID].d_num[i] > 30)\r\n            {\r\n                num = num.add(31 << ((i-s)*5));\r\n            }\r\n            else if(gd_PlyrRnd[pID][gu_RID].d_num[i] > 0)\r\n            {\r\n                num = num.add(gd_PlyrRnd[pID][gu_RID].d_num[i] << ((i-s)*5));\r\n            }\r\n        }\r\n        return (num);\r\n    }\r\n\r\n    function GetPlayerInfoXAddr(address addr)\r\n        public \r\n        view \r\n        returns(uint256, bytes32, uint256, uint256, uint256, uint256, uint256, \r\n                uint256, uint256, uint256, uint256)\r\n    {\r\n        if (addr == address(0))\r\n        {\r\n            addr == msg.sender;\r\n        }\r\n        uint256 pID = gd_Addr2PID[addr];\r\n        return\r\n        (\r\n            pID,\r\n            gd_Player[pID].name,\r\n            gd_Player[pID].gen.add(GetUnmaskGen(pID, gd_Player[pID].lrnd)),\r\n            gd_Player[pID].win.add(GetUnmaskWin(pID, gd_Player[pID].lrnd)),\r\n            (gd_Player[pID].keys << 32) + gd_Player[pID].used_keys,\r\n            gd_PlyrRnd[pID][gu_RID].keys,\r\n            gd_PlyrRnd[pID][gu_RID].ncnt,\r\n            gd_Player[pID].aff_gen,\r\n            gd_PlyrRnd[pID][gu_RID].win.add(GetRKWin(pID, gu_RID)),\r\n            TransUserDict2Num(pID, 1, 50),\r\n            TransUserDict2Num(pID, 51, 100)\r\n        );\r\n    }\r\n\r\n    function GetPlayerBalance(address addr)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (addr == address(0))\r\n        {\r\n            addr == msg.sender;\r\n        }\r\n        return (addr.balance);\r\n    }\r\n\r\n    function BuyKey(uint256 pID, uint256 affID, uint256 eth)\r\n        private\r\n    {\r\n        UpdateVault(pID, gd_Player[pID].lrnd);\r\n        if (gd_RndData[gu_RID].state == 0)\r\n        {\r\n            uint256 keys = CalcKeys(eth); \r\n            uint256 gasfee = eth.sub(keys.mul(gu_price));\r\n            if (gasfee > 0)\r\n            {\r\n                gd_Player[pID].win = gd_Player[pID].win.add(gasfee);\r\n            }\r\n            gasfee = eth / 20;\r\n            ga_CEO.transfer(gasfee);\r\n            uint256 gen2 = eth/4 ;\r\n            uint256 pot = eth.sub(gasfee).sub(gen2);\r\n            if (affID != 0)\r\n            {\r\n                uint256 affFee = eth / 20 ;\r\n                gd_Player[affID].aff_gen = affFee.add(gd_Player[affID].aff_gen);\r\n                gd_PlyrRnd[affID][gu_RID].win = affFee.add(gd_PlyrRnd[affID][gu_RID].win) ;\r\n                pot = pot.sub(affFee);\r\n            }\r\n\r\n            gd_Player[pID].keys = keys.add(gd_Player[pID].keys);\r\n            gd_Player[pID].eth = eth.add(gd_Player[pID].eth) ;\r\n            gd_Player[pID].mask = ((gu_ppt.mul(keys))/(1000000000000000000)).add(gd_Player[pID].mask);\r\n            gu_keys = keys.add(gu_keys); \r\n\r\n            gd_PlyrRnd[pID][gu_RID].keys = keys.add(gd_PlyrRnd[pID][gu_RID].keys);\r\n            gd_PlyrRnd[pID][gu_RID].eth = eth.add(gd_PlyrRnd[pID][gu_RID].eth);\r\n            gd_RndData[gu_RID].eth = eth.add(gd_RndData[gu_RID].eth);\r\n            gd_RndData[gu_RID].keys = keys.add(gd_RndData[gu_RID].keys);\r\n            UpdateMask(gu_RID, pID, gen2, keys);\r\n            gd_RndData[gu_RID].pot = pot.add(gd_RndData[gu_RID].pot);\r\n            emit LNEvents.onBuyKey(gu_RID, pID, msg.sender, keys, now);\r\n        } \r\n        else \r\n        {   \r\n            gd_Player[pID].win = gd_Player[pID].win.add(eth);\r\n        }\r\n    }\r\n\r\n    function BuyNum(uint256 pID, uint256 num1, uint256 num2)\r\n        private\r\n    {\r\n        UpdateVault(pID, gd_Player[pID].lrnd);\r\n        if (gd_RndData[gu_RID].state == 0)\r\n        {\r\n            uint256 i = 0;\r\n            uint256 cnt = 0;\r\n            uint256 t_cnt = 0;\r\n            for(i = 1 ; i <= 50 && num1 > 0; i ++)\r\n            {\r\n                cnt = (num1 & 0x1F) ;\r\n                if (cnt > 0)\r\n                {\r\n                    t_cnt = cnt.add(t_cnt);\r\n                    gd_PlyrRnd[pID][gu_RID].d_num[i] = cnt.add(gd_PlyrRnd[pID][gu_RID].d_num[i]);\r\n                    gd_RndData[gu_RID].d_num[i] = cnt.add(gd_RndData[gu_RID].d_num[i]);\r\n                }\r\n                num1 = (num1 >> 5) ;\r\n            }\r\n            for(i = 51 ; i <= 100 && num2 > 0; i ++)\r\n            {\r\n                cnt = (num2 & 0x1F) ;\r\n                if (cnt > 0)\r\n                {\r\n                    t_cnt = cnt.add(t_cnt);\r\n                    gd_PlyrRnd[pID][gu_RID].d_num[i] = cnt.add(gd_PlyrRnd[pID][gu_RID].d_num[i]);\r\n                    gd_RndData[gu_RID].d_num[i] = cnt.add(gd_RndData[gu_RID].d_num[i]);\r\n                }\r\n                num2 = (num2 >> 5) ;\r\n            }\r\n            require (t_cnt <= gd_Player[pID].keys, \"Lack Of Keys\");\r\n\r\n            gd_PlyrRnd[pID][gu_RID].ncnt = t_cnt.add(gd_PlyrRnd[pID][gu_RID].ncnt);\r\n            gd_RndData[gu_RID].ncnt = t_cnt.add(gd_RndData[gu_RID].ncnt);\r\n\r\n            gu_keys = gu_keys.sub(t_cnt);\r\n            gd_Player[pID].keys = gd_Player[pID].keys.sub(t_cnt);\r\n            gd_Player[pID].used_keys = gd_Player[pID].used_keys.add(t_cnt);\r\n            gd_Player[pID].mask = gu_ppt.mul(gd_Player[pID].keys)/1000000000000000000;\r\n            if (gd_Player[pID].keys < gd_PlyrRnd[pID][gu_RID].keys){\r\n                cnt = gd_PlyrRnd[pID][gu_RID].keys-gd_Player[pID].keys;\r\n                gd_PlyrRnd[pID][gu_RID].keys = gd_Player[pID].keys;\r\n                gd_PlyrRnd[pID][gu_RID].mask = gd_RndData[gu_RID].kppt.mul(gd_PlyrRnd[pID][gu_RID].keys)/1000000000000000000;\r\n                gd_RndData[gu_RID].keys = gd_RndData[gu_RID].keys.sub(cnt);\r\n            }\r\n            emit LNEvents.onBuyNum(gu_RID, pID, num1, num2, now);\r\n        }\r\n    }\r\n\r\n    function updateAllMask(uint256 pID, uint256 gen, uint256 keys)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        uint256 ppt = gen.mul(1000000000000000000)/gu_keys;\r\n        gu_ppt = ppt.add(gu_ppt) ; \r\n        uint256 pearn = ppt.mul(keys)/(1000000000000000000) ;\r\n        gd_Player[pID].mask = ((gu_ppt.mul(keys))/(1000000000000000000)).sub(pearn).add(gd_Player[pID].mask);\r\n        return (gen.sub((ppt.mul(gu_keys))/(1000000000000000000)));\r\n    }\r\n    \r\n    function UpdateMask(uint256 rID, uint256 pID, uint256 gen, uint256 keys)\r\n        internal\r\n        returns(uint256)\r\n    {\r\n        uint256 ppt = gen.mul(1000000000000000000)/gd_RndData[rID].keys;\r\n        gd_RndData[rID].kppt = ppt.add(gd_RndData[rID].kppt);\r\n        uint256 pearn = ppt.mul(keys)/(1000000000000000000) ;\r\n        gd_PlyrRnd[pID][rID].mask = (((gd_RndData[rID].kppt.mul(keys))/(1000000000000000000)).sub(pearn)).add(gd_PlyrRnd[pID][rID].mask);\r\n        return (gen.sub((ppt.mul(gd_RndData[rID].keys))/(1000000000000000000)));\r\n    }\r\n    \r\n    function GetEthXKey(uint256 keys)\r\n        public\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return ( CalcEth(keys) );\r\n    }\r\n\r\n    function GetPIDXAddr(address addr)\r\n        private\r\n        returns (uint256)\r\n    {\r\n        uint256 pID = gd_Addr2PID[addr];\r\n        if ( pID == 0) \r\n        {\r\n            gu_LastPID++;\r\n            gd_Addr2PID[addr] = gu_LastPID;\r\n            gd_Player[gu_LastPID].addr = addr;\r\n            uint256 seed = uint256(keccak256(abi.encodePacked(\r\n                (block.timestamp).add\r\n                (block.difficulty).add\r\n                ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add\r\n                (block.gaslimit).add\r\n                ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add\r\n                (block.number)\r\n            )));\r\n            gd_Player[gu_LastPID].name = seed.GenName(gu_LastPID);\r\n            gd_Name2PID[gd_Player[gu_LastPID].name] = gu_LastPID;\r\n\r\n            return (gu_LastPID);\r\n        } else {\r\n            return (pID);\r\n        }\r\n    }\r\n\r\n    function SetRndTime()\r\n        private\r\n    {\r\n        gd_RndData[gu_RID].strt = now.sub(now%7200);\r\n        gd_RndData[gu_RID].end = gd_RndData[gu_RID].strt+7200;\r\n        while (gd_RndData[gu_RID].end < now+1800)\r\n        {\r\n            gd_RndData[gu_RID].end += 7200;\r\n        }\r\n        \r\n    }\r\n    \r\n    function EndRound()\r\n        private\r\n    {\r\n        uint256 seed = uint256(keccak256(abi.encodePacked(\r\n            \r\n            (block.timestamp).add\r\n            (block.difficulty).add\r\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)).add\r\n            (block.gaslimit).add\r\n            ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (now)).add\r\n            (block.number)\r\n            \r\n        )));\r\n        uint256 luckNum = (seed%100)+1;\r\n        gd_RndData[gu_RID].luckNum = luckNum;\r\n        if (gd_RndData[gu_RID].d_num[luckNum] > 0)\r\n        {\r\n            uint256 gen = 0; \r\n            if (gu_keys > 0)\r\n            {\r\n                gen = gd_RndData[gu_RID].pot/20;\r\n                gu_ppt = gu_ppt.add(gen.mul(1000000000000000000)/gu_keys) ;\r\n            }\r\n\r\n            uint256 pot = gd_RndData[gu_RID].pot.mul(75)/100;\r\n            gd_RndData[gu_RID+1].pot = gd_RndData[gu_RID].pot.sub(pot).sub(gen);\r\n\r\n            uint256 gasfee = pot.mul(3)/100;\r\n            ga_CEO.transfer(gasfee);\r\n            pot = pot.sub(gasfee);\r\n            gd_RndData[gu_RID].nppt = pot/gd_RndData[gu_RID].d_num[luckNum];\r\n            \r\n            emit LNEvents.onEndRound(gu_RID, luckNum, \r\n                                    gd_RndData[gu_RID].d_num[luckNum], \r\n                                    gd_RndData[gu_RID].nppt, now);\r\n        }else{\r\n            gd_RndData[gu_RID+1].pot = gd_RndData[gu_RID].pot;\r\n        }\r\n\r\n        gu_RID = gu_RID+1;\r\n        SetRndTime();\r\n    }\r\n}\r\n\r\nlibrary SAMdatasets {\r\n    struct Player {\r\n        address addr; \r\n        bytes32 name;\r\n        uint256 keys;\r\n        uint256 used_keys;\r\n        uint256 mask;\r\n        uint256 eth ;\r\n        uint256 aff_gen;\r\n        uint256 gen ;\r\n        uint256 win;\r\n        uint256 laff;\r\n        uint256 lrnd;\r\n    }\r\n    struct PlayerRounds {\r\n        uint256 eth;\r\n        uint256 win;\r\n        uint256 keys;\r\n        uint256 mask;\r\n        uint256 ncnt;\r\n        mapping (uint256 => uint256) d_num ;\r\n    }\r\n\r\n    struct Round {\r\n        uint256 state;\r\n        uint256 strt;\r\n        uint256 end; \r\n        uint256 keys;\r\n        uint256 eth;\r\n        uint256 pot;\r\n        uint256 ncnt;\r\n        uint256 kppt;\r\n        uint256 luckNum;\r\n        mapping (uint256 => uint256) d_num ;\r\n        uint256 nppt;\r\n    }\r\n}\r\n\r\nlibrary NameFilter {\r\n    function nameFilter(string _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n        \r\n        require (_length <= 32 && _length > 0, \"Invalid Length\");\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"CAN NOT Start With 0x\");\r\n            require(_temp[1] != 0x58, \"CAN NOT Start With 0X\");\r\n        }\r\n        \r\n        bool _hasNonNumber;\r\n        \r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            if (_temp[i] > 0x60 && _temp[i] < 0x7b)\r\n            {\r\n                _temp[i] = byte(uint(_temp[i]) - 32);\r\n                if (_hasNonNumber == false)\r\n                {\r\n                    _hasNonNumber = true;\r\n                }\r\n            } else {\r\n                require\r\n                (\r\n                    (_temp[i] > 0x40 && _temp[i] < 0x5b) ||\r\n                    (_temp[i] > 0x2f && _temp[i] < 0x3a),\r\n                    \"Include Illegal Characters!\"\r\n                );                \r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                {\r\n                    _hasNonNumber = true; \r\n                }  \r\n            }\r\n        }\r\n        \r\n        require(_hasNonNumber == true, \"All Numbers Not Allowed\");\r\n        \r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n    \r\n    function GenName(uint256 seed, uint256 lastPID)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory name = new bytes(12);\r\n        uint256 lID = lastPID; \r\n        name[11] = (byte(seed%26+0x41));\r\n        seed /=100;\r\n        name[10] = (byte(seed%26+0x41));\r\n        seed /=100;\r\n        for(uint256 l = 10 ; l > 0 ; l --)\r\n        {\r\n            if (lID > 0)\r\n            {\r\n                name[l-1] = (byte(lID%10+0x30));\r\n                lID /= 10;\r\n            }\r\n            else{\r\n                name[l-1] = (byte(seed%26+0x41));\r\n                seed /=100;\r\n            }\r\n        }\r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(name, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) \r\n        internal \r\n        pure \r\n        returns (uint256 c) \r\n    {\r\n        if (a == 0) \r\n        {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"Mul Failed\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256) \r\n    {\r\n        require(b <= a, \"Sub Failed\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"Add Failed\");\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"GetPlayerNumCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OnEndRound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gu_RID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetCurRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gd_RndData\",\"outputs\":[{\"name\":\"state\",\"type\":\"uint256\"},{\"name\":\"strt\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"ncnt\",\"type\":\"uint256\"},{\"name\":\"kppt\",\"type\":\"uint256\"},{\"name\":\"luckNum\",\"type\":\"uint256\"},{\"name\":\"nppt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"GetPlayerNumCnt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newCEO\",\"type\":\"address\"}],\"name\":\"ModCEO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetLeftTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gu_keys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gu_price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"gd_Addr2PID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gd_Player\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"used_keys\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"aff_gen\",\"type\":\"uint256\"},{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"laff\",\"type\":\"uint256\"},{\"name\":\"lrnd\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num1\",\"type\":\"uint256\"},{\"name\":\"num2\",\"type\":\"uint256\"}],\"name\":\"OnBuyNum\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gu_ppt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetKeyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gd_PlyrRnd\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"},{\"name\":\"ncnt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"gd_Name2PID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GetPlayerBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LuckNumHis\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"affName\",\"type\":\"string\"},{\"name\":\"affID\",\"type\":\"uint256\"},{\"name\":\"affAddr\",\"type\":\"address\"}],\"name\":\"OnBuyKey\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GetPlayerInfoXAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ga_CEO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"keys\",\"type\":\"uint256\"}],\"name\":\"GetEthXKey\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gu_LastPID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"rID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"cnt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"onBuyKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"rID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"num1\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"num2\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"onBuyNum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"rID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"luck_num\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"luck_cnt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"luck_win\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"onEndRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"rID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"luck_cnt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"luck_win\",\"type\":\"uint256\"}],\"name\":\"onWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"}]","ContractName":"LuckyNum","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7559dd5a3912149d0138ed5670a552a17895d5e2930fa9b7c61f92405ba1730b"}]}