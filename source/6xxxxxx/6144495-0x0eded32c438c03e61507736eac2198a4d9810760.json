{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  // it is recommended to define functions which can neither read the state of blockchain nor write in it as pure instead of constant\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public creater;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    function Ownable(address _owner) public {\r\n        creater = msg.sender;\r\n        if (_owner != 0) {\r\n            owner = _owner;\r\n\r\n        }\r\n        else {\r\n            owner = creater;\r\n        }\r\n\r\n    }\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier isCreator() {\r\n        require(msg.sender == creater);\r\n        _;\r\n    }\r\n\r\n   \r\n\r\n}\r\n\r\n\r\ncontract TravelHelperToken {\r\n    function transfer (address, uint) public pure { }\r\n    function burnTokensForSale() public returns (bool);\r\n    function saleTransfer(address _to, uint256 _value) public returns (bool) {}\r\n    function finalize() public pure { }\r\n}\r\n\r\ncontract Crowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  TravelHelperToken public token;\r\n  \r\n  uint public ethPrice;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n  bool public crowdsaleStarted = false;\r\n  uint256 public preIcoCap = uint256(1000000000).mul(1 ether);\r\n  uint256 public icoCap = uint256(1500000000).mul(1 ether);\r\n  uint256 public preIcoTokensSold = 0;\r\n  uint256 public discountedIcoTokensSold = 0;\r\n  uint256 public icoTokensSold = 0;\r\n  \r\n  \r\n  uint256 public mainTokensPerDollar = 400 * 1 ether;\r\n  \r\n  uint256 public totalRaisedInCents;\r\n  uint256 public presaleTokensPerDollar = 533.3333 * 1 ether;\r\n  uint256 public discountedTokensPerDollar = 444.4444 * 1 ether;\r\n  uint256 public hardCapInCents = 525000000;\r\n  uint256 public preIcoStartBlock;\r\n  uint256 public discountedIcoStartBlock;\r\n  uint256 public mainIcoStartBlock;\r\n  uint256 public mainIcoEndBlock;\r\n  uint public preSaleDuration =  (7 days)/(15);\r\n  uint public discountedSaleDuration = (15 days)/(15); \r\n  uint public mainSaleDuration = (15 days)/(15); \r\n  \r\n  \r\n  modifier CrowdsaleStarted(){\r\n      require(crowdsaleStarted);\r\n      _;\r\n  }\r\n \r\n  /**\r\n   * Event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n  /**\r\n   * @param _newOwner Address who has special power to change the ether price in cents according to the market price\r\n   * @param _wallet Address where collected funds will be forwarded to\r\n   * @param _token Address of the token being sold\r\n   *  @param _ethPriceInCents ether price in cents\r\n   */\r\n  function Crowdsale(address _newOwner, address _wallet, TravelHelperToken _token,uint256 _ethPriceInCents) Ownable(_newOwner) public {\r\n    require(_wallet != address(0));\r\n    require(_token != address(0));\r\n    require(_ethPriceInCents > 0);\r\n    wallet = _wallet;\r\n    owner = _newOwner;\r\n    token = _token;\r\n    ethPrice = _ethPriceInCents; //ethPrice in cents\r\n  }\r\n\r\n  function startCrowdsale() onlyOwner public returns (bool) {\r\n      require(!crowdsaleStarted);\r\n      crowdsaleStarted = true;\r\n      preIcoStartBlock = block.number;\r\n      discountedIcoStartBlock = block.number + preSaleDuration;\r\n      mainIcoStartBlock = block.number + preSaleDuration + discountedSaleDuration;\r\n      mainIcoEndBlock = block.number + preSaleDuration + discountedSaleDuration + mainSaleDuration;\r\n      \r\n  }\r\n  \r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    require(msg.sender != owner);\r\n     buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @param _beneficiary Address performing the token purchase\r\n   */\r\n  function buyTokens(address _beneficiary) CrowdsaleStarted public payable {\r\n    uint256 weiAmount = msg.value;\r\n    require(weiAmount > 0);\r\n    require(ethPrice > 0);\r\n    uint256 usdCents = weiAmount.mul(ethPrice).div(1 ether); \r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(usdCents);\r\n\r\n    _validateTokensLimits(tokens);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n    totalRaisedInCents = totalRaisedInCents.add(usdCents);\r\n    _processPurchase(_beneficiary,tokens);\r\n     emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n    _forwardFunds();\r\n  }\r\n  \r\n \r\n   /**\r\n   * @dev sets the value of ether price in cents.Can be called only by the owner account.\r\n   * @param _ethPriceInCents price in cents .\r\n   */\r\n function setEthPriceInDollar(uint _ethPriceInCents) onlyOwner public returns(bool) {\r\n      ethPrice = _ethPriceInCents;\r\n      return true;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n\r\n  /**\r\n   * @dev Validation of the capped restrictions.\r\n   * @param _tokens tokens amount\r\n   */\r\n  function _validateTokensLimits(uint256 _tokens) internal {\r\n    if (block.number > preIcoStartBlock && block.number < discountedIcoStartBlock) {\r\n      preIcoTokensSold = preIcoTokensSold.add(_tokens);\r\n      require(preIcoTokensSold <= preIcoCap && totalRaisedInCents <= hardCapInCents);\r\n    } else if(block.number >= discountedIcoStartBlock && block.number < mainIcoStartBlock ) {\r\n       require(discountedIcoTokensSold <= icoCap && totalRaisedInCents <= hardCapInCents);\r\n    } else if(block.number >= mainIcoStartBlock && block.number < mainIcoEndBlock ) {\r\n      icoTokensSold = icoTokensSold.add(_tokens);\r\n      require(icoTokensSold <= icoCap && totalRaisedInCents < hardCapInCents);\r\n    } else {\r\n      revert();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n   * @param _beneficiary Address performing the token purchase\r\n   * @param _tokenAmount Number of tokens to be emitted\r\n   */\r\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n    require(token.saleTransfer(_beneficiary, _tokenAmount));\r\n  }\r\n\r\n  /**\r\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n   * @param _beneficiary Address receiving the tokens\r\n   * @param _tokenAmount Number of tokens to be purchased\r\n   */\r\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n  \r\n\r\n  /**\r\n   * @param _usdCents Value in usd cents to be converted into tokens\r\n   * @return Number of tokens that can be purchased with the specified _usdCents\r\n   */\r\n  function _getTokenAmount(uint256 _usdCents) CrowdsaleStarted public view returns (uint256) {\r\n    uint256 tokens;\r\n    \r\n    if (block.number > preIcoStartBlock && block.number < discountedIcoStartBlock ) tokens = _usdCents.div(100).mul(presaleTokensPerDollar);\r\n    if (block.number >= discountedIcoStartBlock && block.number < mainIcoStartBlock )  tokens = _usdCents.div(100).mul(discountedTokensPerDollar);\r\n    if (block.number >= mainIcoStartBlock && block.number < mainIcoEndBlock )  tokens = _usdCents.div(100).mul(mainTokensPerDollar);\r\n    \r\n\r\n    return tokens;\r\n  }\r\n  \r\n   /**\r\n   * @return returns the current stage of sale\r\n   */\r\n    function getStage() public view returns (string) {\r\n        if(!crowdsaleStarted){\r\n            return 'Crowdsale not started yet';\r\n        }\r\n        if (block.number > preIcoStartBlock && block.number < discountedIcoStartBlock )\r\n        {\r\n            return 'Presale';\r\n        }\r\n        else if (block.number >= discountedIcoStartBlock  && block.number < mainIcoStartBlock ) {\r\n            return 'Discounted sale';\r\n        }\r\n        else if (block.number >= mainIcoStartBlock && block.number < mainIcoEndBlock )\r\n        {\r\n            return 'Crowdsale';\r\n        }\r\n        else if(block.number > mainIcoEndBlock)\r\n        {\r\n            return 'Sale ended';\r\n        }\r\n      \r\n     }\r\n      \r\n    /**\r\n       * @dev burn the unsold tokens.\r\n       \r\n       */\r\n     function burnTokens() public onlyOwner {\r\n        require(block.number > mainIcoEndBlock);\r\n        require(token.burnTokensForSale());\r\n      }\r\n        \r\n  /**\r\n   * @dev finalize the crowdsale.After finalizing ,tokens transfer can be done.\r\n   */\r\n  function finalizeSale() public onlyOwner {\r\n    require(block.number > mainIcoEndBlock);\r\n    token.finalize();\r\n  }\r\n  \r\n  \r\n  /**\r\n   * @dev Determines how ETH is stored/forwarded on purchases.\r\n   */\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"discountedIcoTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountedSaleDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"burnTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountedTokensPerDollar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preSaleDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainSaleDuration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creater\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainTokensPerDollar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_usdCents\",\"type\":\"uint256\"}],\"name\":\"_getTokenAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainIcoStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleStarted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mainIcoEndBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCapInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"startCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoTokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaisedInCents\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"preIcoCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ethPriceInCents\",\"type\":\"uint256\"}],\"name\":\"setEthPriceInDollar\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"discountedIcoStartBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleTokensPerDollar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStage\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_ethPriceInCents\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000067293e151842f13b7401d581e54c4d016c2dc50000000000000000000000000a820212c87c1d2a49bf7d9eefcbe84500d01a79d00000000000000000000000036a84dd5c8a606f44dc504aa3859b097083d631d0000000000000000000000000000000000000000000000000000000000006784","Library":"","SwarmSource":"bzzr://d6ce81889e597cddbda8b143006b8a728f9e9b80a6fd5b08380fdc47e0d52a7b"}]}