{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b <= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a + _b;\r\n    assert(c >= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  uint256 internal totalSupply_;\r\n\r\n  /**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_value <= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue >= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is BasicToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    _burn(msg.sender, _value);\r\n  }\r\n\r\n  function _burn(address _who, uint256 _value) internal {\r\n    require(_value <= balances[_who]);\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[_who] = balances[_who].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(_who, _value);\r\n    emit Transfer(_who, address(0), _value);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  modifier hasMintPermission() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(\r\n    address _to,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    hasMintPermission\r\n    canMint\r\n    returns (bool)\r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() public onlyOwner canMint returns (bool) {\r\n    mintingFinished = true;\r\n    emit MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n* @title Crowdsale\r\n* @dev Crowdsale is a base contract for managing a token crowdsale\r\n* behavior.\r\n*/\r\ncontract Crowdsale is Ownable{\r\n  using SafeMath for uint256;\r\n\r\n  // Address where funds are collected\r\n  address public wallet;\r\n\r\n  // Amount of wei raised\r\n  uint256 public weiRaised;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  uint256 public openingTime;\r\n  uint256 public closingTime;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n  * Event for token purchase logging\r\n  * @param purchaser who paid for the tokens\r\n  * @param beneficiary who got the tokens\r\n  * @param value weis paid for purchase\r\n  * @param amount amount of tokens purchased\r\n  */\r\n  event TokenPurchase(\r\n    address indexed purchaser,\r\n    address indexed beneficiary,\r\n    uint256 value,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n  * @dev Reverts if not in crowdsale time range.\r\n  */\r\n  modifier onlyWhileOpen {\r\n    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\r\n    _;\r\n  }\r\n  \r\n  /**\r\n  * @param _wallet Address where collected funds will be forwarded to\r\n  * @param _openingTime Crowdsale opening time\r\n  * @param _closingTime Crowdsale closing time\r\n  */\r\n  constructor(address _wallet, uint256 _openingTime, uint256 _closingTime) public {\r\n    require(_wallet != address(0));\r\n    require(_openingTime >= block.timestamp);\r\n    require(_closingTime >= _openingTime);\r\n\r\n    openingTime = _openingTime;\r\n    closingTime = _closingTime;\r\n\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Crowdsale external interface\r\n  // -----------------------------------------\r\n\r\n  /**\r\n  * @dev fallback function ***DO NOT OVERRIDE***\r\n  */\r\n  function () external payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  /**\r\n  * @dev low level token purchase ***DO NOT OVERRIDE***\r\n  * @param _beneficiary Address performing the token purchase\r\n  */\r\n  function buyTokens(address _beneficiary) public payable {\r\n\r\n    uint256 weiAmount = msg.value;\r\n    _preValidatePurchase(_beneficiary, weiAmount);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    _processPurchase(_beneficiary, tokens);\r\n    emit TokenPurchase(\r\n      msg.sender,\r\n      _beneficiary,\r\n      weiAmount,\r\n      tokens\r\n    );\r\n\r\n    _forwardFunds();\r\n  }\r\n\r\n  /**\r\n  * @dev Must be called after crowdsale ends, to do some extra finalization\r\n  * work. Calls the contract's finalization function.\r\n  */\r\n  function finalize() public onlyOwner {\r\n    require(!isFinalized);\r\n    require(hasClosed());\r\n\r\n    emit Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  // -----------------------------------------\r\n  // Internal interface (extensible)\r\n  // -----------------------------------------\r\n\r\n  /**\r\n  * @dev Validation of an incoming purchase.\r\n  * @param _beneficiary Address performing the token purchase\r\n  * @param _weiAmount Value in wei involved in the purchase\r\n  */\r\n  function _preValidatePurchase(\r\n    address _beneficiary,\r\n    uint256 _weiAmount\r\n  )\r\n    internal view\r\n    onlyWhileOpen\r\n  {\r\n    require(_beneficiary != address(0));\r\n    require(_weiAmount != 0);\r\n  }\r\n\r\n  /**\r\n  * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\r\n  * @param _beneficiary Address performing the token purchase\r\n  * @param _tokenAmount Number of tokens to be emitted\r\n  */\r\n   function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal;\r\n\r\n  /**\r\n  * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\r\n  * @param _beneficiary Address receiving the tokens\r\n  * @param _tokenAmount Number of tokens to be purchased\r\n  */\r\n  function _processPurchase(\r\n    address _beneficiary,\r\n    uint256 _tokenAmount\r\n  )\r\n    internal\r\n  {\r\n    _deliverTokens(_beneficiary, _tokenAmount);\r\n  }\r\n\r\n  /**\r\n  * @dev Determines how ETH is stored/forwarded on purchases.\r\n  */\r\n  function _forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  /**\r\n  * @dev Override to extend the way in which ether is converted to tokens.\r\n  * @param weiAmount Value in wei to be converted into tokens\r\n  * @return Number of tokens that can be purchased with the specified _weiAmount\r\n  */\r\n  function _getTokenAmount(uint256 weiAmount) internal view returns (uint256);\r\n\r\n  /**\r\n  * @dev Checks whether the period in which the crowdsale is open has already elapsed.\r\n  * @return Whether crowdsale period has elapsed\r\n  */\r\n  function hasClosed() public view returns (bool) {\r\n    return block.timestamp > closingTime;\r\n  }\r\n\r\n}\r\n\r\ncontract FieldCoin is MintableToken, BurnableToken{\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    //name of token\r\n    string public name;\r\n    //token symbol\r\n    string public symbol;\r\n    //decimals in token\r\n    uint8 public decimals;\r\n    //address of bounty wallet\r\n    address public bountyWallet;\r\n    //address of team wallet\r\n    address public teamWallet;\r\n    //flag to set token release true=> token is ready for transfer\r\n    bool public transferEnabled;\r\n    //token available for offering\r\n    uint256 public TOKEN_OFFERING_ALLOWANCE = 770e6 * 10 **18;//770 million(sale+bonus)\r\n    // Address of token offering\r\n    address public tokenOfferingAddr;\r\n    //address to collect tokens when land is transferred\r\n    address public landCollectorAddr;\r\n\r\n    mapping(address => bool) public transferAgents;\r\n    //mapping for blacklisted address\r\n    mapping(address => bool) private blacklist;\r\n\r\n    /**\r\n    * Check if transfer is allowed\r\n    *\r\n    * Permissions:\r\n    *                                                       Owner  OffeirngContract    Others\r\n    * transfer (before transferEnabled is true)               y            n              n\r\n    * transferFrom (before transferEnabled is true)           y            y              y\r\n    * transfer/transferFrom after transferEnabled is true     y            n              y\r\n    */    \r\n    modifier canTransfer(address sender) {\r\n        require(transferEnabled || transferAgents[sender], \"transfer is not enabled or sender is not allowed\");\r\n          _;\r\n    }\r\n\r\n    /**\r\n    * Check if token offering address is set or not\r\n    */\r\n    modifier onlyTokenOfferingAddrNotSet() {\r\n        require(tokenOfferingAddr == address(0x0), \"token offering address is already set\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * Check if land collector address is set or not\r\n    */\r\n    modifier onlyWhenLandCollectporAddressIsSet() {\r\n        require(landCollectorAddr != address(0x0), \"land collector address is not set\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n    * Check if address is a valid destination to transfer tokens to\r\n    * - must not be zero address\r\n    * - must not be the token address\r\n    * - must not be the owner's address\r\n    * - must not be the token offering contract address\r\n    */\r\n    modifier validDestination(address to) {\r\n        require(to != address(0x0), \"receiver can't be zero address\");\r\n        require(to != address(this), \"receiver can't be token address\");\r\n        require(to != owner, \"receiver can't be owner\");\r\n        require(to != address(tokenOfferingAddr), \"receiver can't be token offering address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Constuctor of the contract\r\n    *\r\n    */\r\n    constructor () public {\r\n        name    =   \"Fieldcoin\";\r\n        symbol  =   \"FLC\";\r\n        decimals    =   18;  \r\n        totalSupply_ =   1000e6 * 10  **  uint256(decimals); //1000 million\r\n        owner   =   msg.sender;\r\n        balances[owner] = totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev set bounty wallet\r\n    * @param _bountyWallet address of bounty wallet.\r\n    *\r\n    */\r\n    function setBountyWallet (address _bountyWallet) public onlyOwner returns (bool) {\r\n        require(_bountyWallet != address(0x0), \"bounty address can't be zero\");\r\n        if(bountyWallet == address(0x0)){  \r\n            bountyWallet = _bountyWallet;\r\n            balances[bountyWallet] = 20e6 * 10   **  uint256(decimals); //20 million\r\n            balances[owner] = balances[owner].sub(20e6 * 10   **  uint256(decimals));\r\n        }else{\r\n            address oldBountyWallet = bountyWallet;\r\n            bountyWallet = _bountyWallet;\r\n            balances[bountyWallet] = balances[oldBountyWallet];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev set team wallet\r\n    * @param _teamWallet address of bounty wallet.\r\n    *\r\n    */\r\n    function setTeamWallet (address _teamWallet) public onlyOwner returns (bool) {\r\n        require(_teamWallet != address(0x0), \"team address can't be zero\");\r\n        if(teamWallet == address(0x0)){  \r\n            teamWallet = _teamWallet;\r\n            balances[teamWallet] = 90e6 * 10   **  uint256(decimals); //90 million\r\n            balances[owner] = balances[owner].sub(90e6 * 10   **  uint256(decimals));\r\n        }else{\r\n            address oldTeamWallet = teamWallet;\r\n            teamWallet = _teamWallet;\r\n            balances[teamWallet] = balances[oldTeamWallet];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token to a specified address (written due to backward compatibility)\r\n    * @param to address to which token is transferred\r\n    * @param value amount of tokens to transfer\r\n    * return bool true=> transfer is succesful\r\n    */\r\n    function transfer(address to, uint256 value) canTransfer(msg.sender) validDestination(to) public returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param from address from which token is transferred \r\n    * @param to address to which token is transferred\r\n    * @param value amount of tokens to transfer\r\n    * @return bool true=> transfer is succesful\r\n    */\r\n    function transferFrom(address from, address to, uint256 value) canTransfer(msg.sender) validDestination(to) public returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    /**\r\n    * @dev add addresses to the blacklist\r\n    * @return true if address was added to the blacklist,\r\n    * false if address were already in the blacklist\r\n    */\r\n    function addBlacklistAddress(address addr) public onlyOwner {\r\n        require(!isBlacklisted(addr), \"address is already blacklisted\");\r\n        require(addr != address(0x0), \"blacklisting address can't be zero\");\r\n        // blacklisted so they can withdraw\r\n        blacklist[addr] = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Set token offering to approve allowance for offering contract to distribute tokens\r\n    *\r\n    * @param offeringAddr Address of token offerng contract i.e., fieldcoinsale contract\r\n    * @param amountForSale Amount of tokens for sale, set 0 to max out\r\n    */\r\n    function setTokenOffering(address offeringAddr, uint256 amountForSale) external onlyOwner onlyTokenOfferingAddrNotSet {\r\n        require (offeringAddr != address(0x0), \"offering address can't be zero\");\r\n        require(!transferEnabled, \"transfer should be diabled\");\r\n\r\n        uint256 amount = (amountForSale == 0) ? TOKEN_OFFERING_ALLOWANCE : amountForSale;\r\n        require(amount <= TOKEN_OFFERING_ALLOWANCE);\r\n\r\n        approve(offeringAddr, amount);\r\n        tokenOfferingAddr = offeringAddr;\r\n        //start the transfer for offeringAddr\r\n        setTransferAgent(tokenOfferingAddr, true);\r\n\r\n    }\r\n\r\n    /**\r\n    * @dev set land collector address\r\n    *\r\n    */\r\n    function setLandCollector(address collectorAddr) public onlyOwner {\r\n        require (collectorAddr != address(0x0), \"land collecting address can't be set to zero\");\r\n        require(!transferEnabled,  \"transfer should be diabled\");\r\n        landCollectorAddr = collectorAddr;\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev release tokens for transfer\r\n    *\r\n    */\r\n    function enableTransfer() public onlyOwner {\r\n        transferEnabled = true;\r\n        // End the offering\r\n        approve(tokenOfferingAddr, 0);\r\n        //stop the transfer for offeringAddr\r\n        setTransferAgent(tokenOfferingAddr, false);\r\n    }\r\n\r\n    /**\r\n    * @dev Set transfer agent to true for transfer tokens for private investor and exchange\r\n    * @param _addr who will be allowd for transfer\r\n    * @param _allowTransfer true=>allowed\r\n    *\r\n    */\r\n    function setTransferAgent(address _addr, bool _allowTransfer) public onlyOwner {\r\n        transferAgents[_addr] = _allowTransfer;\r\n    }\r\n\r\n    /**\r\n    * @dev withdraw if KYC not verified\r\n    * @param _investor investor whose tokens are to be withdrawn\r\n    * @param _tokens amount of tokens to be withdrawn\r\n    */\r\n    function _withdraw(address _investor, uint256 _tokens) external{\r\n        require (msg.sender == tokenOfferingAddr, \"sender must be offering address\");\r\n        require (isBlacklisted(_investor), \"address is not whitelisted\");\r\n        balances[owner] = balances[owner].add(_tokens);\r\n        balances[_investor] = balances[_investor].sub(_tokens);\r\n        balances[_investor] = 0;\r\n    }\r\n\r\n    /**\r\n    * @dev buy land during ICO\r\n    * @param _investor investor whose tokens are to be transferred\r\n    * @param _tokens amount of tokens to be transferred\r\n    */\r\n    function _buyLand(address _investor, uint256 _tokens) external onlyWhenLandCollectporAddressIsSet{\r\n        require (!transferEnabled, \"transfer should be diabled\");\r\n        require (msg.sender == tokenOfferingAddr, \"sender must be offering address\");\r\n        balances[landCollectorAddr] = balances[landCollectorAddr].add(_tokens);\r\n        balances[_investor] = balances[_investor].sub(_tokens);\r\n    }\r\n\r\n   /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n    function burn(uint256 _value) public {\r\n        require(transferEnabled || msg.sender == owner, \"transfer is not enabled or sender is not owner\");\r\n        super.burn(_value);\r\n    }\r\n\r\n    /**\r\n    * @dev check address is blacklisted or not\r\n    * @param _addr who will be checked\r\n    * @return true=> if blacklisted, false=> if not\r\n    *\r\n    */\r\n    function isBlacklisted(address _addr) public view returns(bool){\r\n        return blacklist[_addr];\r\n    }\r\n\r\n}\r\n\r\ncontract FieldCoinSale is Crowdsale, Pausable{\r\n\r\n    using SafeMath for uint256;\r\n\r\n    //To store tokens supplied during CrowdSale\r\n    uint256 public totalSaleSupply = 600000000 *10 **18; // 600 million tokens\r\n    //price of token in cents\r\n    uint256 public tokenCost = 5; //5 cents i.e., .5$\r\n    //1 eth = usd in cents, eg: 1 eth = 107.91$ so, 1 eth = =107,91 cents\r\n    uint256 public ETH_USD;\r\n    //min contribution \r\n    uint256 public minContribution = 10000; //100,00 cents i.e., 100$\r\n    //max contribution \r\n    uint256 public maxContribution = 100000000; //100 million cents i.e., 1 million dollar\r\n    //count for bonus\r\n    uint256 public milestoneCount;\r\n    //flag to check bonus is initialized or not\r\n    bool public initialized = false;\r\n    //total number of bonus tokens\r\n    uint256 public bonusTokens = 170e6 * 10 ** 18; //170 millions\r\n    //tokens for sale\r\n    uint256 public tokensSold = 0;\r\n    //object of FieldCoin\r\n    FieldCoin private objFieldCoin;\r\n\r\n    struct Milestone {\r\n        uint256 bonus;\r\n        uint256 total;\r\n    }\r\n\r\n    Milestone[6] public milestones;\r\n    \r\n    //Structure to store token sent and wei received by the buyer of tokens\r\n    struct Investor {\r\n        uint256 weiReceived;\r\n        uint256 tokenSent;\r\n        uint256 bonusSent;\r\n    }\r\n\r\n    //investors indexed by their ETH address\r\n    mapping(address => Investor) public investors;\r\n\r\n    //event triggered when tokens are withdrawn\r\n    event Withdrawn();\r\n\r\n    /**\r\n    * @dev Constuctor of the contract\r\n    *\r\n    */\r\n    constructor (uint256 _openingTime, uint256 _closingTime, address _wallet, address _token, uint256 _ETH_USD, uint256 _minContribution, uint256 _maxContribution) public\r\n    Crowdsale(_wallet, _openingTime, _closingTime) {\r\n        require(_ETH_USD > 0, \"ETH USD rate should be greater than 0\");\r\n        minContribution = (_minContribution == 0) ? minContribution : _minContribution;\r\n        maxContribution = (_maxContribution == 0) ? maxContribution : _maxContribution;\r\n        ETH_USD = _ETH_USD;\r\n        objFieldCoin = FieldCoin(_token);\r\n    }\r\n\r\n    /**\r\n    * @dev Set eth usd rate\r\n    * @param _ETH_USD stores ether value in cents\r\n    *       i.e., 1 ETH = 107.01 $ so, 1 ETH = 10701 cents\r\n    *\r\n    */\r\n    function setETH_USDRate(uint256 _ETH_USD) public onlyOwner{\r\n        require(_ETH_USD > 0, \"ETH USD rate should be greater than 0\");\r\n        ETH_USD = _ETH_USD;\r\n    }\r\n\r\n    /**\r\n    * @dev Set new coinbase(wallet) address\r\n    * @param _newWallet wallet address\r\n    *\r\n    */\r\n    function setNewWallet(address _newWallet) onlyOwner public {\r\n        wallet = _newWallet;\r\n    }\r\n\r\n    /**\r\n    * @dev Set new minimum contribution\r\n    * @param _minContribution minimum contribution in cents\r\n    *\r\n    */\r\n    function changeMinContribution(uint256 _minContribution) public onlyOwner {\r\n        require(_minContribution > 0, \"min contribution should be greater than 0\");\r\n        minContribution = _minContribution;\r\n    }\r\n\r\n    /**\r\n    * @dev Set new maximum contribution\r\n    * @param _maxContribution maximum contribution in cents\r\n    *\r\n    */\r\n    function changeMaxContribution(uint256 _maxContribution) public onlyOwner {\r\n        require(_maxContribution > 0, \"max contribution should be greater than 0\");\r\n        maxContribution = _maxContribution;\r\n    }\r\n\r\n    /**\r\n    * @dev Set new token cost\r\n    * @param _tokenCost price of 1 token in cents\r\n    */\r\n    function changeTokenCost(uint256 _tokenCost) public onlyOwner {\r\n        require(_tokenCost > 0, \"token cost can not be zero\");\r\n        tokenCost = _tokenCost;\r\n    }\r\n\r\n    /**\r\n    * @dev Set new opening time\r\n    * @param _openingTime time in UTX\r\n    *\r\n    */\r\n    function changeOpeningTIme(uint256 _openingTime) public onlyOwner {\r\n        require(_openingTime >= block.timestamp, \"opening time is less than current time\");\r\n        openingTime = _openingTime;\r\n    }\r\n\r\n    /**\r\n    * @dev Set new closing time\r\n    * @param _closingTime time in UTX\r\n    *\r\n    */\r\n    function changeClosingTime(uint256 _closingTime) public onlyOwner {\r\n        require(_closingTime >= openingTime, \"closing time is less than opening time\");\r\n        closingTime = _closingTime;\r\n    }\r\n\r\n    /**\r\n    * @dev initialize bonuses\r\n    * @param _bonus tokens bonus in array depends on their slab\r\n    * @param _total slab of tokens bonuses in array\r\n    */\r\n    function initializeMilestones(uint256[] _bonus, uint256[] _total) public onlyOwner {\r\n        require(_bonus.length > 0 && _bonus.length == _total.length);\r\n        for(uint256 i = 0; i < _bonus.length; i++) {\r\n            milestones[i] = Milestone({ total: _total[i], bonus: _bonus[i] });\r\n        }\r\n        milestoneCount = _bonus.length;\r\n        initialized = true;\r\n    }\r\n\r\n    /**\r\n    * @dev function processing tokens and bonuses\r\n    * will over ride the function in Crowdsale.sol\r\n    * @param _beneficiary who will receive tokens\r\n    * @param _tokenAmount amount of tokens to send without bonus\r\n    *\r\n    */\r\n    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\r\n        require(tokensRemaining() >= _tokenAmount, \"token need to be transferred is more than the available token\");\r\n        uint256 _bonusTokens = _processBonus(_tokenAmount);\r\n        bonusTokens = bonusTokens.sub(_bonusTokens);\r\n        tokensSold = tokensSold.add(_tokenAmount);\r\n        // accumulate total token to be given\r\n        uint256 totalNumberOfTokenTransferred = _tokenAmount.add(_bonusTokens);\r\n        //initializing structure for the address of the beneficiary\r\n        Investor storage _investor = investors[_beneficiary];\r\n        //Update investor's balance\r\n        _investor.tokenSent = _investor.tokenSent.add(totalNumberOfTokenTransferred);\r\n        _investor.weiReceived = _investor.weiReceived.add(msg.value);\r\n        _investor.bonusSent = _investor.bonusSent.add(_bonusTokens);\r\n        super._processPurchase(_beneficiary, totalNumberOfTokenTransferred);\r\n    }\r\n\r\n     /**\r\n    * @dev send token manually to people who invest other than ether\r\n    * @param _beneficiary Address performing the token purchase\r\n    * @param weiAmount amount of wei invested\r\n    */\r\n    function createTokenManually(address _beneficiary, uint256 weiAmount) external onlyOwner {\r\n        // calculate token amount to be created\r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n        \r\n        // update state\r\n        weiRaised = weiRaised.add(weiAmount);\r\n    \r\n        _processPurchase(_beneficiary, tokens);\r\n        emit TokenPurchase(\r\n          msg.sender,\r\n          _beneficiary,\r\n          weiAmount,\r\n          tokens\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Source of tokens.\r\n    * @param _beneficiary Address performing the token purchase\r\n    * @param _tokenAmount Number of tokens to be emitted\r\n    */\r\n    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\r\n        if(!objFieldCoin.transferFrom(objFieldCoin.owner(), _beneficiary, _tokenAmount)){\r\n            revert(\"token delivery failed\");\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev withdraw if KYC not verified\r\n    */\r\n    function withdraw() external{\r\n        Investor storage _investor = investors[msg.sender];\r\n        //transfer investor's balance to owner\r\n        objFieldCoin._withdraw(msg.sender, _investor.tokenSent);\r\n        //return the ether to the investor balance\r\n        msg.sender.transfer(_investor.weiReceived);\r\n        //set everything to zero after transfer successful\r\n        _investor.weiReceived = 0;\r\n        _investor.tokenSent = 0;\r\n        _investor.bonusSent = 0;\r\n        emit Withdrawn();\r\n    }\r\n\r\n    /**\r\n    * @dev buy land during ICO\r\n    * @param _tokens amount of tokens to be transferred\r\n    */\r\n    function buyLand(uint256 _tokens) external{\r\n        Investor memory _investor = investors[msg.sender];\r\n        require (_tokens <= objFieldCoin.balanceOf(msg.sender).sub(_investor.bonusSent), \"token to buy land is more than the available number of tokens\");\r\n        //transfer investor's balance to land collector\r\n        objFieldCoin._buyLand(msg.sender, _tokens);\r\n    }\r\n\r\n    /*\r\n    * @dev Function to add Ether in the contract \r\n    */\r\n    function fundContractForWithdraw()external payable{\r\n    }\r\n\r\n    /**\r\n    * @dev increase bonus allowance if exhausted\r\n    * @param _value amount of token bonus to increase in 18 decimal places\r\n    *\r\n    */\r\n    function increaseBonusAllowance(uint256 _value) public onlyOwner {\r\n        bonusTokens = bonusTokens.add(_value);\r\n    }\r\n    \r\n    // -----------------------------------------\r\n    // Getter interface\r\n    // -----------------------------------------\r\n\r\n    /**\r\n    * @dev Validation of an incoming purchase.\r\n    * @param _beneficiary Address performing the token purchase\r\n    * @param _weiAmount Value in wei involved in the purchase\r\n    */\r\n    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) whenNotPaused internal view{\r\n        require (!hasClosed(), \"Sale has been ended\");\r\n        require(initialized, \"Bonus is not initialized\");\r\n        require(_weiAmount >= getMinContributionInWei(), \"amount is less than min contribution\");\r\n        require(_weiAmount <= getMaxContributionInWei(), \"amount is more than max contribution\");\r\n        super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    }\r\n\r\n    function _processBonus(uint256 _tokenAmount) internal view returns(uint256){\r\n        uint256 currentMilestoneIndex = getCurrentMilestoneIndex();\r\n        uint256 _bonusTokens = 0;\r\n        //get bonus tier\r\n        Milestone memory _currentMilestone = milestones[currentMilestoneIndex];\r\n        if(bonusTokens > 0 && _currentMilestone.bonus > 0) {\r\n          _bonusTokens = _tokenAmount.mul(_currentMilestone.bonus).div(100);\r\n          _bonusTokens = bonusTokens < _bonusTokens ? bonusTokens : _bonusTokens;\r\n        }\r\n        return _bonusTokens;\r\n    }\r\n\r\n    /**\r\n    * @dev check whether tokens are remaining are not\r\n    *\r\n    */\r\n    function tokensRemaining() public view returns(uint256) {\r\n        return totalSaleSupply.sub(tokensSold);\r\n    }\r\n\r\n    /**\r\n    * @dev gives the bonus milestone index for bonus colculation\r\n    * @return the bonus milestones index\r\n    *\r\n    */\r\n    function getCurrentMilestoneIndex() public view returns (uint256) {\r\n        for(uint256 i = 0; i < milestoneCount; i++) {\r\n            if(tokensSold < milestones[i].total) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev gives the token price w.r.t to wei sent \r\n    * @return the amount of tokens to be given based on wei received\r\n    *\r\n    */\r\n    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\r\n        return _weiAmount.mul(ETH_USD).div(tokenCost);\r\n    }\r\n\r\n    /**\r\n    * @dev check whether token is left or sale is ended\r\n    * @return true=> sale ended or false=> not ended\r\n    *\r\n    */\r\n    function hasClosed() public view returns (bool) {\r\n        uint256 tokensLeft = tokensRemaining();\r\n        return tokensLeft <= 1e18 || super.hasClosed();\r\n    }\r\n\r\n    /**\r\n    * @dev gives minimum contribution in wei\r\n    * @return the min contribution value in wei\r\n    *\r\n    */\r\n    function getMinContributionInWei() public view returns(uint256){\r\n        return (minContribution.mul(1e18)).div(ETH_USD);\r\n    }\r\n\r\n    /**\r\n    * @dev gives max contribution in wei\r\n    * @return the max contribution value in wei\r\n    *\r\n    */\r\n    function getMaxContributionInWei() public view returns(uint256){\r\n        return (maxContribution.mul(1e18)).div(ETH_USD);\r\n    }\r\n\r\n    /**\r\n    * @dev gives usd raised based on wei raised\r\n    * @return the usd value in cents\r\n    *\r\n    */\r\n    function usdRaised() public view returns (uint256) {\r\n        return weiRaised.mul(ETH_USD).div(1e18);\r\n    }\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_allowTransfer\",\"type\":\"bool\"}],\"name\":\"setTransferAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_teamWallet\",\"type\":\"address\"}],\"name\":\"setTeamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"collectorAddr\",\"type\":\"address\"}],\"name\":\"setLandCollector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenOfferingAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"landCollectorAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"offeringAddr\",\"type\":\"address\"},{\"name\":\"amountForSale\",\"type\":\"uint256\"}],\"name\":\"setTokenOffering\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bountyWallet\",\"type\":\"address\"}],\"name\":\"setBountyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addBlacklistAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"_buyLand\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_investor\",\"type\":\"address\"},{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_OFFERING_ALLOWANCE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"FieldCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8769bcf359a96d78e55ef60de59f8befe8b04b4f184c9e08a0c0e895d47ccf44"}]}