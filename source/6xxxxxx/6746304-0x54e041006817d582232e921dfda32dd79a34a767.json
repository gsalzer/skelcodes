{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract Alice {\r\n  enum DealState {\r\n    Uninitialized,\r\n    Initialized,\r\n    PaymentSentToBob,\r\n    PaymentSentToAlice\r\n  }\r\n\r\n  struct Deal {\r\n    bytes20 dealHash;\r\n    DealState state;\r\n  }\r\n\r\n  mapping (bytes32 => Deal) public deals;\r\n\r\n  constructor() public { }\r\n\r\n  function initEthDeal(\r\n    bytes32 _dealId,\r\n    address _bob,\r\n    bytes20 _aliceHash,\r\n    bytes20 _bobHash\r\n  ) external payable {\r\n    require(_bob != 0x0 && msg.value > 0 && deals[_dealId].state == DealState.Uninitialized);\r\n    bytes20 dealHash = ripemd160(abi.encodePacked(\r\n      msg.sender,\r\n      _aliceHash,\r\n      _bob,\r\n      _bobHash,\r\n      msg.value,\r\n      address(0)\r\n    ));\r\n    deals[_dealId] = Deal(\r\n      dealHash,\r\n      DealState.Initialized\r\n    );\r\n  }\r\n\r\n  function initErc20Deal(\r\n    bytes32 _dealId,\r\n    uint _amount,\r\n    address _bob,\r\n    bytes20 _aliceHash,\r\n    bytes20 _bobHash,\r\n    address _tokenAddress\r\n  ) external {\r\n    require(_bob != 0x0 && _tokenAddress != 0x0 && _amount > 0 && deals[_dealId].state == DealState.Uninitialized);\r\n    bytes20 dealHash = ripemd160(abi.encodePacked(\r\n      msg.sender,\r\n      _aliceHash,\r\n      _bob,\r\n      _bobHash,\r\n      _amount,\r\n      _tokenAddress\r\n    ));\r\n    deals[_dealId] = Deal(\r\n      dealHash,\r\n      DealState.Initialized\r\n    );\r\n    ERC20 token = ERC20(_tokenAddress);\r\n    assert(token.transferFrom(msg.sender, address(this), _amount));\r\n  }\r\n\r\n  function aliceClaimsPayment(\r\n    bytes32 _dealId,\r\n    uint _amount,\r\n    address _tokenAddress,\r\n    address _bob,\r\n    bytes20 _aliceHash,\r\n    bytes _bobSecret\r\n  ) external {\r\n    require(deals[_dealId].state == DealState.Initialized);\r\n    bytes20 dealHash = ripemd160(abi.encodePacked(\r\n      msg.sender,\r\n      _aliceHash,\r\n      _bob,\r\n      ripemd160(abi.encodePacked(sha256(abi.encodePacked(_bobSecret)))),\r\n      _amount,\r\n      _tokenAddress\r\n    ));\r\n    require(dealHash == deals[_dealId].dealHash);\r\n\r\n    deals[_dealId].state = DealState.PaymentSentToAlice;\r\n    if (_tokenAddress == 0x0) {\r\n      msg.sender.transfer(_amount);\r\n    } else {\r\n      ERC20 token = ERC20(_tokenAddress);\r\n      assert(token.transfer(msg.sender, _amount));\r\n    }\r\n  }\r\n\r\n  function bobClaimsPayment(\r\n    bytes32 _dealId,\r\n    uint _amount,\r\n    address _tokenAddress,\r\n    address _alice,\r\n    bytes20 _bobHash,\r\n    bytes _aliceSecret\r\n  ) external {\r\n    require(deals[_dealId].state == DealState.Initialized);\r\n    bytes20 dealHash = ripemd160(abi.encodePacked(\r\n      _alice,\r\n      ripemd160(abi.encodePacked(sha256(abi.encodePacked(_aliceSecret)))),\r\n      msg.sender,\r\n      _bobHash,\r\n      _amount,\r\n      _tokenAddress\r\n    ));\r\n    require(dealHash == deals[_dealId].dealHash);\r\n    deals[_dealId].state = DealState.PaymentSentToBob;\r\n    if (_tokenAddress == 0x0) {\r\n      msg.sender.transfer(_amount);\r\n    } else {\r\n      ERC20 token = ERC20(_tokenAddress);\r\n      assert(token.transfer(msg.sender, _amount));\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_dealId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_bob\",\"type\":\"address\"},{\"name\":\"_aliceHash\",\"type\":\"bytes20\"},{\"name\":\"_bobHash\",\"type\":\"bytes20\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"initErc20Deal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dealId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_alice\",\"type\":\"address\"},{\"name\":\"_bobHash\",\"type\":\"bytes20\"},{\"name\":\"_aliceSecret\",\"type\":\"bytes\"}],\"name\":\"bobClaimsPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dealId\",\"type\":\"bytes32\"},{\"name\":\"_bob\",\"type\":\"address\"},{\"name\":\"_aliceHash\",\"type\":\"bytes20\"},{\"name\":\"_bobHash\",\"type\":\"bytes20\"}],\"name\":\"initEthDeal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deals\",\"outputs\":[{\"name\":\"dealHash\",\"type\":\"bytes20\"},{\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_dealId\",\"type\":\"bytes32\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_bob\",\"type\":\"address\"},{\"name\":\"_aliceHash\",\"type\":\"bytes20\"},{\"name\":\"_bobSecret\",\"type\":\"bytes\"}],\"name\":\"aliceClaimsPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Alice","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://96ee075259afcf1733488e2f4c42a60a434b8481e93658c1a3827a13fc26684c"}]}