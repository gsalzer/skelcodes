{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/* Crypto SuperGirlfriend */\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {    \r\n    uint256 c = a / b;    \r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n  \r\n\r\ncontract CryptoSuperGirlfriend {\r\n  using SafeMath for uint256;\r\n\r\n  address private addressOfOwner;  \r\n \r\n  event Add (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Bought (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Sold (uint256 indexed _itemId, address indexed _owner, uint256 _price);\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  \r\n  \r\n  uint256 private priceInit = 0.01 ether;\r\n  uint256 private idStart = 10001;\r\n  uint256 private idMax = 10191;\r\n\r\n  struct OwnerInfo{      \r\n        string ownerName;\r\n        string ownerWords;  \r\n        string ownerImg; \r\n        string ownerNation;     \r\n  }\r\n\r\n  uint256[] private listedItems;\r\n  mapping (uint256 => address) private ownerOfItem;\r\n  mapping (uint256 => uint256) private priceOfItem;\r\n  mapping (uint256 => uint256) private sellPriceOfItem;\r\n  mapping (uint256 => OwnerInfo) private ownerInfoOfItem;\r\n  mapping (uint256 => string) private nameOfItem; \r\n  mapping (uint256 => address) private approvedOfItem;\r\n\r\n  \r\n  /* Modifiers */\r\n  modifier onlyOwner () {\r\n    require(addressOfOwner == msg.sender);\r\n    _;\r\n  }   \r\n\r\n  /* Initilization */\r\n  constructor () public {\r\n    addressOfOwner = msg.sender;   \r\n  }\r\n\r\n  /* Admin */\r\n  function transferOwnership (address _owner) onlyOwner() public {   \r\n    addressOfOwner = _owner;\r\n  }  \r\n  \r\n  /* Read */\r\n  function owner () public view returns (address _owner) {\r\n    return addressOfOwner;\r\n  } \r\n  \r\n  /* Listing */  \r\n  function addItem (uint256 _itemId, string _name, uint256 _sellPrice) onlyOwner() external { \r\n       newItem(_itemId, _name, _sellPrice);\r\n  }\r\n\r\n  function newItem (uint256 _itemId, string _name, uint256 _sellPrice) internal {\r\n    require(_checkItemId(_itemId));\r\n    require(tokenExists(_itemId) == false);\r\n    \r\n    ownerOfItem[_itemId] = address(0);\r\n    priceOfItem[_itemId] = 0;\r\n    sellPriceOfItem[_itemId] = _sellPrice;\r\n    nameOfItem[_itemId] = _name;\r\n    OwnerInfo memory oi = OwnerInfo(\"\", \"\", \"\", \"\");  \r\n    ownerInfoOfItem[_itemId] = oi;    \r\n\r\n    listedItems.push(_itemId);    \r\n\r\n    emit Add(_itemId, address(0), _sellPrice);\r\n  }\r\n  \r\n  /* Market */  \r\n  function calculateNextPrice (uint256 _price) public view returns (uint256 _nextPrice) {    \r\n    \r\n    // Update prices\r\n    if (_price == 0 ether) {\r\n      // first stage\r\n      return priceInit;\r\n    } else if (_price < 1 ether) {\r\n      // first stage\r\n      return _price.mul(2);\r\n    } else if (_price < 10 ether) {\r\n      // second stage\r\n      return _price.mul(150).div(100);\r\n    } else {\r\n      // third stage\r\n      return _price.mul(120).div(100);\r\n    }\r\n\r\n  }\r\n  \r\n  function buy (uint256 _itemId, uint256 _sellPrice, string _name, string _ownerName, string _ownerWords, string _ownerImg, string _ownerNation) payable public returns (bool _result) {\r\n    require(_checkItemId(_itemId));\r\n    require(ownerOf(_itemId) != msg.sender);\r\n    require(msg.sender != address(0)); \r\n    require(_sellPrice == 0 || _sellPrice.sub(priceInit) >= 0);\r\n    require(msg.value.sub(sellPriceOf(_itemId)) >= 0);\r\n    require(msg.value.mul(2).sub(_sellPrice) >= 0);   \r\n   \r\n    if(_sellPrice == 0)\r\n       _sellPrice = calculateNextPrice(msg.value);  \r\n    \r\n    if(tokenExists(_itemId) == false)\r\n       newItem(_itemId, _name, priceInit);\r\n\r\n    address oldOwner = ownerOf(_itemId);\r\n    address newOwner = msg.sender;      \r\n    \r\n    if(oldOwner != address(0))    \r\n    {\r\n      if(msg.value > priceOf(_itemId))\r\n      {\r\n         uint256 tradeCut;\r\n         tradeCut = msg.value.sub(priceOf(_itemId));\r\n         tradeCut = tradeCut.mul(10).div(100); \r\n         oldOwner.transfer(msg.value.sub(tradeCut)); \r\n      }\r\n      else\r\n         oldOwner.transfer(msg.value); \r\n    }    \r\n      \r\n    priceOfItem[_itemId] = msg.value;    \r\n    sellPriceOfItem[_itemId] = _sellPrice;\r\n    OwnerInfo memory oi = OwnerInfo(_ownerName, _ownerWords, _ownerImg, _ownerNation);  \r\n    ownerInfoOfItem[_itemId] = oi;    \r\n    \r\n    _transfer(oldOwner, newOwner, _itemId); \r\n    emit Bought(_itemId, newOwner, msg.value);\r\n    emit Sold(_itemId, oldOwner, msg.value);   \r\n    owner().transfer(address(this).balance);  \r\n\r\n    return true;\r\n    \r\n  }\r\n  \r\n  function changeItemName (uint256 _itemId, string _name) onlyOwner() public returns (bool _result) {    \r\n    require(_checkItemId(_itemId));\r\n    nameOfItem[_itemId] = _name;\r\n    \r\n    return true;    \r\n  } \r\n  \r\n  function changeOwnerInfo (uint256 _itemId, uint256 _sellPrice, string _ownerName, string _ownerWords, string _ownerImg, string _ownerNation) public returns (bool _result) {    \r\n    require(_checkItemId(_itemId));\r\n    require(ownerOf(_itemId) == msg.sender);\r\n    require(_sellPrice.sub(priceInit) >= 0);\r\n    require(priceOfItem[_itemId].mul(2).sub(_sellPrice) >= 0); \r\n    \r\n    sellPriceOfItem[_itemId] = _sellPrice;    \r\n    OwnerInfo memory oi = OwnerInfo(_ownerName, _ownerWords, _ownerImg, _ownerNation);  \r\n    ownerInfoOfItem[_itemId] = oi;       \r\n\r\n    return true;    \r\n  }\r\n\r\n  function setIdRange (uint256 _idStart, uint256 _idMax) onlyOwner() public {    \r\n   \r\n    idStart = _idStart;    \r\n    idMax = _idMax;\r\n    \r\n  } \r\n\r\n  /* Read */\r\n  function tokenExists (uint256 _itemId) public view returns (bool _exists) {\r\n    require(_checkItemId(_itemId));     \r\n    bool bExist = false;\r\n    for(uint256 i=0; i<listedItems.length; i++)\r\n    {\r\n       if(listedItems[i] == _itemId)\r\n       {\r\n          bExist = true;  \r\n          break;\r\n       } \r\n    }\r\n    return bExist;\r\n  }\r\n  \r\n  function priceOf (uint256 _itemId) public view returns (uint256 _price) {\r\n    require(_checkItemId(_itemId)); \r\n    return priceOfItem[_itemId];\r\n  }\r\n  \r\n  function sellPriceOf (uint256 _itemId) public view returns (uint256 _nextPrice) {\r\n    require(_checkItemId(_itemId));    \r\n    if(sellPriceOfItem[_itemId] == 0)\r\n        return priceInit; \r\n    else \r\n        return sellPriceOfItem[_itemId];\r\n  }\r\n  \r\n  function ownerInfoOf (uint256 _itemId) public view returns (uint256, string, string, string, string) {\r\n    require(_checkItemId(_itemId));    \r\n    return (_itemId, ownerInfoOfItem[_itemId].ownerName, ownerInfoOfItem[_itemId].ownerWords, ownerInfoOfItem[_itemId].ownerImg, ownerInfoOfItem[_itemId].ownerNation);\r\n  }\r\n\r\n  function itemOf (uint256 _itemId) public view returns (uint256, string, address, uint256, uint256) {\r\n    require(_checkItemId(_itemId));\r\n    return (_itemId, nameOfItem[_itemId], ownerOf(_itemId), priceOf(_itemId), sellPriceOf(_itemId));\r\n  }\r\n\r\n  function itemsRange (uint256 _from, uint256 _take) public view returns (uint256[], uint256[], uint256[]) {\r\n    require(idMax.add(1) >= idStart.add(_from.add(_take)));    \r\n\r\n    uint256[] memory items = new uint256[](_take);    \r\n    uint256[] memory prices = new uint256[](_take);\r\n    uint256[] memory sellPrices = new uint256[](_take);    \r\n\r\n    for (uint256 i = _from; i < _from.add(_take); i++) {  \r\n      uint256 j = i - _from;    \r\n      items[j] = idStart + i;      \r\n      prices[j] = priceOf(idStart + i);\r\n      sellPrices[j] = sellPriceOf(idStart + i);     \r\n    }\r\n   \r\n    return (items, prices, sellPrices);\r\n    \r\n  }\r\n \r\n  function tokensOf (address _owner) public view returns (uint256[], address[], uint256[], uint256[]) {   \r\n    uint256 num = balanceOf(_owner);\r\n    uint256[] memory items = new uint256[](num);\r\n    address[] memory owners = new address[](num);\r\n    uint256[] memory prices = new uint256[](num);\r\n    uint256[] memory sellPrices = new uint256[](num);\r\n    uint256 k = 0;\r\n\r\n    for (uint256 i = 0; i < listedItems.length; i++) {\r\n      if (ownerOf(listedItems[i]) == _owner) {\r\n          items[k] = listedItems[i];\r\n          owners[k] = ownerOf(listedItems[i]);\r\n          prices[k] = priceOf(listedItems[i]);\r\n          sellPrices[k] = sellPriceOf(listedItems[i]);\r\n          k++;\r\n      }\r\n    }\r\n   \r\n    return (items, owners, prices, sellPrices);\r\n  }\r\n\r\n  /* ERC721 */\r\n  function implementsERC721 () public pure returns (bool _implements) {\r\n    return true;\r\n  }\r\n\r\n  function balanceOf (address _owner) public view returns (uint256 _balance) {\r\n    require(_owner != address(0));\r\n    uint256 counter = 0;\r\n\r\n    for (uint256 i = 0; i < listedItems.length; i++) {\r\n      if (ownerOf(listedItems[i]) == _owner) {\r\n        counter++;\r\n      }\r\n    }\r\n\r\n    return counter;\r\n  }\r\n\r\n  function ownerOf (uint256 _itemId) public view returns (address _owner) {\r\n    return ownerOfItem[_itemId];\r\n  }\r\n\r\n  function transfer(address _to, uint256 _itemId) public {\r\n    require(msg.sender == ownerOf(_itemId));\r\n    _transfer(msg.sender, _to, _itemId);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _itemId) public {\r\n    require(getApproved(_itemId) == msg.sender);\r\n    _transfer(_from, _to, _itemId);\r\n  }\r\n\r\n  function approve(address _to, uint256 _itemId) public {\r\n    require(msg.sender != _to);\r\n    require(tokenExists(_itemId));\r\n    require(ownerOf(_itemId) == msg.sender);\r\n\r\n    if (_to == address(0)) {\r\n      if (approvedOfItem[_itemId] != address(0)) {\r\n        delete approvedOfItem[_itemId];\r\n        emit Approval(msg.sender, address(0), _itemId);\r\n      }\r\n    } else {\r\n      approvedOfItem[_itemId] = _to;\r\n      emit Approval(msg.sender, _to, _itemId);\r\n    }\r\n  }\r\n\r\n  function getApproved (uint256 _itemId) public view returns (address _approved) {\r\n    require(tokenExists(_itemId));\r\n    return approvedOfItem[_itemId];\r\n  }\r\n\r\n  function name () public pure returns (string _name) {\r\n    return \"Crypto Super Girlfriend\";\r\n  }\r\n\r\n  function symbol () public pure returns (string _symbol) {\r\n    return \"CSGF\";\r\n  }\r\n \r\n  function totalSupply () public view returns (uint256 _totalSupply) {\r\n    return listedItems.length;\r\n  }  \r\n\r\n  function tokenByIndex (uint256 _index) public view returns (uint256 _itemId) {\r\n    require(_index < totalSupply());\r\n    return listedItems[_index];\r\n  }\r\n\r\n  function tokenOfOwnerByIndex (address _owner, uint256 _index) public view returns (uint256 _itemId) {\r\n    require(_index < balanceOf(_owner));\r\n\r\n    uint count = 0;\r\n    for (uint i = 0; i < listedItems.length; i++) {\r\n      uint itemId = listedItems[i];\r\n      if (ownerOf(itemId) == _owner) {\r\n        if (count == _index) { return itemId; }\r\n        count += 1;\r\n      }\r\n    }\r\n\r\n    assert(false);\r\n  }\r\n\r\n  /* Internal */\r\n  function _transfer(address _from, address _to, uint256 _itemId) internal {\r\n    require(tokenExists(_itemId));\r\n    require(ownerOf(_itemId) == _from);\r\n    require(_to != address(0));\r\n    require(_to != address(this));\r\n\r\n    ownerOfItem[_itemId] = _to;\r\n    approvedOfItem[_itemId] = 0;\r\n\r\n    emit Transfer(_from, _to, _itemId);\r\n  }\r\n\r\n  function _checkItemId(uint256 _itemId) internal view returns (bool) {\r\n   if(_itemId.sub(idStart) >= 0 && idMax.sub(_itemId) >= 0) return true; \r\n   return false;\r\n  }\r\n  \r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"name\":\"_exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"_approved\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementsERC721\",\"outputs\":[{\"name\":\"_implements\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"changeItemName\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_idStart\",\"type\":\"uint256\"},{\"name\":\"_idMax\",\"type\":\"uint256\"}],\"name\":\"setIdRange\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"ownerInfoOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"sellPriceOf\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_ownerName\",\"type\":\"string\"},{\"name\":\"_ownerWords\",\"type\":\"string\"},{\"name\":\"_ownerImg\",\"type\":\"string\"},{\"name\":\"_ownerNation\",\"type\":\"string\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"}],\"name\":\"addItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"priceOf\",\"outputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"},{\"name\":\"_sellPrice\",\"type\":\"uint256\"},{\"name\":\"_ownerName\",\"type\":\"string\"},{\"name\":\"_ownerWords\",\"type\":\"string\"},{\"name\":\"_ownerImg\",\"type\":\"string\"},{\"name\":\"_ownerNation\",\"type\":\"string\"}],\"name\":\"changeOwnerInfo\",\"outputs\":[{\"name\":\"_result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateNextPrice\",\"outputs\":[{\"name\":\"_nextPrice\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_take\",\"type\":\"uint256\"}],\"name\":\"itemsRange\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"itemOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"CryptoSuperGirlfriend","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://231dbcfa9e579a5d8381968ba7f618e1f6b7cc05fc83d94e3a71f40cee2576f6"}]}