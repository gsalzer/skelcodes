{"status":"1","message":"OK","result":[{"SourceCode":"// solium-disable linebreak-style\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Whitelist\r\n * @dev Whitelist contract has its own role whitelister and maintains index of whitelisted addresses.\r\n */\r\ncontract Whitelist {\r\n\r\n    // who can whitelist\r\n    address public whitelister;\r\n\r\n    // Whitelist mapping\r\n    mapping (address => bool) whitelist;\r\n\r\n    /**\r\n      * @dev The Whitelist constructor sets the original `whitelister` of the contract to the sender\r\n      * account.\r\n      */\r\n    constructor() public {\r\n        whitelister = msg.sender;\r\n    }\r\n\r\n    /**\r\n      * @dev Throws if called by any account other than the whitelister.\r\n      */\r\n    modifier onlyWhitelister() {\r\n        require(msg.sender == whitelister);\r\n        _;\r\n    }\r\n\r\n    modifier addressNotZero(address _address) {\r\n        require(_address != address(0));\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelisted(address _address) {\r\n        require(whitelist[_address]);\r\n        _;\r\n    }\r\n\r\n    /** \r\n    * @dev Only callable by the whitelister. Whitelists the specified address.\r\n    * @notice Only callable by the whitelister. Whitelists the specified address.\r\n    * @param _address Address to be whitelisted. \r\n    */\r\n    function addToWhitelist(address _address) public onlyWhitelister addressNotZero(_address) {\r\n        emit WhitelistAdd(whitelister, _address);\r\n        whitelist[_address] = true;\r\n    }\r\n    \r\n    /** \r\n    * @dev Only callable by the whitelister. Whitelists the specified addresses.\r\n    * @notice Only callable by the whitelister. Whitelists the specified addresses.\r\n    * @param _addresses Addresses to be whitelisted. \r\n    */\r\n    function addAddressesToWhitelist(address[] _addresses) public onlyWhitelister {\r\n        for(uint i = 0; i < _addresses.length; ++i)\r\n            addToWhitelist(_addresses[i]);\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if the specified address is whitelisted.\r\n    * @notice Checks if the specified address is whitelisted. \r\n    * @param _address Address to be whitelisted.\r\n    */\r\n    function isWhitelisted(address _address) public view returns (bool) {\r\n        return whitelist[_address];\r\n    }\r\n\r\n    /**\r\n      * @dev Changes the current whitelister. Callable only by the whitelister.\r\n      * @notice Changes the current whitelister. Callable only by the whitelister.\r\n      * @param _newWhitelister Address of new whitelister.\r\n      */\r\n    function changeWhitelister(address _newWhitelister) public onlyWhitelister addressNotZero(_newWhitelister) {\r\n        emit WhitelisterChanged(whitelister, _newWhitelister);\r\n        whitelister = _newWhitelister;\r\n    }\r\n\r\n    /** \r\n    * Event for logging the whitelister change. \r\n    * @param previousWhitelister Old whitelister.\r\n    * @param newWhitelister New whitelister.\r\n    */\r\n    event WhitelisterChanged(address indexed previousWhitelister, address indexed newWhitelister);\r\n    \r\n    /** \r\n    * Event for logging when the user is whitelisted.\r\n    * @param whitelister Current whitelister.\r\n    * @param whitelistedAddress User added to whitelist.\r\n    */\r\n    event WhitelistAdd(address indexed whitelister, address indexed whitelistedAddress);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    // Owner's address\r\n    address public owner;\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit OwnerChanged(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    event OwnerChanged(address indexed previousOwner,address indexed newOwner);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n      // benefit is lost if 'b' is also tested.\r\n      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\ncontract AoraCrowdsale is Whitelist, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Token being sold\r\n    IERC20 public token;\r\n\r\n    // Start of presale timestamp in miliseconds\r\n    uint public startOfPresale;\r\n\r\n    // End of presale timestamp in miliseconds\r\n    uint public endOfPresale;\r\n\r\n    // Start of crowdsale timestamp in miliseconds\r\n    uint public startOfCrowdsale;\r\n\r\n    // End of crowdsale timestamp in miliseconds\r\n    uint public endOfCrowdsale;\r\n\r\n    // Maximum number of tokens that can be sold\r\n    uint public cap;\r\n\r\n    // Tokens sold so far\r\n    uint public tokensSold = 0;\r\n\r\n    // US Dollars raised so far in cents \r\n    uint public usdRaised = 0;\r\n\r\n    // Deployment block of the contract \r\n    uint public deploymentBlock;\r\n\r\n    // Tokens per US Dollar rate, fixed for this crowsale.\r\n    uint public tokensPerUsdRate = 5;\r\n\r\n    // Factor that we multiply with to get whole tokens from cents \r\n    uint constant public centsToWholeTokenFactor = 10 ** 16; \r\n\r\n    /**\r\n    * @param _startOfPresale start of presale timestamp\r\n    * @param _endOfPresale  end of presale timestamp\r\n    * @param _startOfCrowdsale start of crowdsale timestamp\r\n    * @param _endOfCrowdsale end of crowdsale timestamp\r\n    * @param _tokensPerUsdRate how many tokens per US Dollar contributed\r\n    * @param _cap total amount of sellable tokens \r\n    * @param _token address of the token contract \r\n    */\r\n    constructor(\r\n        uint _startOfPresale, \r\n        uint _endOfPresale, \r\n        uint _startOfCrowdsale, \r\n        uint _endOfCrowdsale, \r\n        uint _tokensPerUsdRate, \r\n        uint _cap,\r\n        IERC20 _token\r\n        ) public addressNotZero(_token) {\r\n        \r\n        startOfPresale = _startOfPresale;\r\n        endOfPresale = _endOfPresale;\r\n        startOfCrowdsale = _startOfCrowdsale;\r\n        endOfCrowdsale = _endOfCrowdsale;\r\n\r\n        tokensPerUsdRate = _tokensPerUsdRate; \r\n\r\n        cap = _cap;\r\n\r\n        token = _token;\r\n\r\n        deploymentBlock = block.number;\r\n    }\r\n\r\n    /**\r\n    * @dev Fallback function. Can't send ether to this contract. \r\n    */\r\n    function () external payable {\r\n        revert();\r\n    }\r\n\r\n    /**\r\n    * @dev signifies weather or not the argument has any value\r\n    * @param usdAmount amount of US Dollars in cents \r\n    */ \r\n    modifier hasValue(uint usdAmount) {\r\n        require(usdAmount > 0);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev signifies weather or not crowdsale is over\r\n    */\r\n    modifier crowdsaleNotOver() {\r\n        require(isCrowdsale()); \r\n        _;\r\n    }\r\n\r\n    /** \r\n    * @dev sets the start of presale\r\n    */\r\n    function setStartOfPresale(uint _startOfPresale) external onlyOwner {\r\n        emit OnStartOfPresaleSet(_startOfPresale, startOfPresale); \r\n        startOfPresale = _startOfPresale;\r\n    }\r\n\r\n    /**\r\n    * @dev sets the end of presale\r\n    * @param _endOfPresale new timestamp value  \r\n    */\r\n    function setEndOfPresale(uint _endOfPresale) external onlyOwner {\r\n        emit OnEndOfPresaleSet(_endOfPresale, endOfPresale); \r\n        endOfPresale = _endOfPresale;\r\n    }\r\n\r\n    /**\r\n    * @dev sets the start of crowdsale\r\n    * @param _startOfCrowdsale new timestamp value\r\n    */\r\n    function setStartOfCrowdsale(uint _startOfCrowdsale) external onlyOwner {\r\n        emit OnStartOfCrowdsaleSet(_startOfCrowdsale, startOfCrowdsale);\r\n        startOfCrowdsale = _startOfCrowdsale;\r\n    }\r\n\r\n    /**\r\n    * @dev sets the end of crowdsale\r\n    * @param _endOfCrowdsale new timestamp value\r\n    */\r\n    function setEndOfCrowdsale(uint _endOfCrowdsale) external onlyOwner {\r\n        emit OnEndOfCrowdsaleSet(_endOfCrowdsale, endOfCrowdsale);\r\n        endOfCrowdsale = _endOfCrowdsale;\r\n    }\r\n\r\n    /** \r\n    * @dev sets the cap\r\n    * @param _cap new cap value\r\n    */\r\n    function setCap(uint _cap) external onlyOwner { \r\n        emit OnCapSet(_cap, cap);\r\n        cap = _cap;\r\n    }\r\n\r\n    /**\r\n    * @dev sets the tokensPerUsdRate\r\n    * @param _tokensPerUsdRate new tokens per US Dollar rate\r\n    */\r\n    function setTokensPerUsdRate(uint _tokensPerUsdRate) external onlyOwner {\r\n        emit OnTokensPerUsdRateSet(_tokensPerUsdRate, tokensPerUsdRate);\r\n        tokensPerUsdRate = _tokensPerUsdRate;\r\n    }\r\n\r\n    /**\r\n    * @dev returns weather or not the presale is over\r\n    */\r\n    function isPresale() public view returns(bool) {\r\n        return now < endOfPresale;\r\n    }\r\n\r\n    /** \r\n    * @dev returns weather or not the crowdsale is over\r\n    */\r\n    function isCrowdsale() public view returns(bool) {\r\n        return now < endOfCrowdsale;\r\n    }\r\n\r\n    /**\r\n    * @dev Creates a contribution for the specified beneficiary.\r\n    *   Callable only by the owner, while the crowdsale is not over. \r\n    *   Whitelists the beneficiary as well, to optimize gas cost.\r\n    * @param beneficiary address of the beneficiary\r\n    * @param usdAmount contribution value in cents\r\n    */\r\n    function createContribution(address beneficiary, uint usdAmount) public \r\n    onlyOwner \r\n    addressNotZero(beneficiary) \r\n    hasValue(usdAmount)\r\n    crowdsaleNotOver\r\n    {        \r\n        usdRaised = usdRaised.add(usdAmount); // USD amount in cents \r\n\r\n        uint aoraTgeAmount = usdAmount.mul(tokensPerUsdRate).mul(centsToWholeTokenFactor); \r\n\r\n        if(isPresale())\r\n            aoraTgeAmount = aoraTgeAmount.mul(11).div(10); // 10% presale bonus, paid out from crowdsale pool\r\n\r\n        uint newTokensSoldAmount = tokensSold.add(aoraTgeAmount);\r\n\r\n        require(newTokensSoldAmount <= cap);\r\n\r\n        tokensSold = newTokensSoldAmount;\r\n\r\n        token.transfer(beneficiary, aoraTgeAmount);\r\n\r\n        addToWhitelist(beneficiary);\r\n\r\n        emit OnContributionCreated(beneficiary, usdAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev Create contributions in bulk, to optimize gas cost.\r\n    * @param beneficiaries addresses of beneficiaries \r\n    * @param usdAmounts USDollar value of the each contribution in cents.\r\n    */\r\n    function createBulkContributions(address[] beneficiaries, uint[] usdAmounts) external onlyOwner {\r\n        require(beneficiaries.length == usdAmounts.length);\r\n        for (uint i = 0; i < beneficiaries.length; ++i)\r\n            createContribution(beneficiaries[i], usdAmounts[i]);\r\n    }\r\n\r\n    /**\r\n    * @dev This method can be used by the owner to extract mistakenly sent tokens\r\n    * or Ether sent to this contract.\r\n    * @param _token address The address of the token contract that you want to\r\n    * recover set to 0 in case you want to extract ether. It can't be ElpisToken.\r\n    */\r\n    function claimTokens(address _token) public onlyOwner {\r\n        require(_token != address(token));\r\n\r\n        if (_token == address(0)) {\r\n            owner.transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        IERC20 tokenReference = IERC20(_token);\r\n        uint balance = tokenReference.balanceOf(address(this));\r\n        tokenReference.transfer(owner, balance);\r\n        emit OnClaimTokens(_token, owner, balance);\r\n    }\r\n\r\n    /**\r\n    * @param oldValue old value of the field\r\n    * @param newValue new value of the field\r\n    */\r\n    event OnTokensPerUsdRateSet(uint256 oldValue, uint256 newValue);\r\n\r\n    /**\r\n    * @param oldValue old value of the field\r\n    * @param newValue new value of the field\r\n    */\r\n    event OnCapSet(uint256 oldValue, uint256 newValue);\r\n\r\n    /**\r\n    * @param oldValue old value of the field\r\n    * @param newValue new value of the field\r\n    */\r\n    event OnStartOfPresaleSet(uint256 oldValue, uint256 newValue);\r\n\r\n    /**\r\n    * @param oldValue old value of the field\r\n    * @param newValue new value of the field\r\n    */\r\n    event OnEndOfPresaleSet(uint256 oldValue, uint256 newValue);\r\n\r\n    /**\r\n    * @param oldValue old value of the field\r\n    * @param newValue new value of the field\r\n    */\r\n    event OnStartOfCrowdsaleSet(uint256 oldValue, uint256 newValue);\r\n\r\n    /**\r\n    * @param oldValue old value of the field\r\n    * @param newValue new value of the field\r\n    */\r\n    event OnEndOfCrowdsaleSet(uint256 oldValue, uint256 newValue);\r\n\r\n    /**\r\n    * @param token claimed token\r\n    * @param owner who owns the contract\r\n    * @param amount amount of the claimed token\r\n    */\r\n    event OnClaimTokens(address indexed token, address indexed owner, uint256 amount);\r\n\r\n    /**\r\n    * @param beneficiary who is the recipient of tokens from the contribution\r\n    * @param weiAmount Amount of wei contributed \r\n    */\r\n    event OnContributionCreated(address indexed beneficiary, uint256 weiAmount);\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"startOfCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startOfPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelister\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endOfCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"centsToWholeTokenFactor\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCrowdsale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startOfPresale\",\"type\":\"uint256\"}],\"name\":\"setStartOfPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endOfPresale\",\"type\":\"uint256\"}],\"name\":\"setEndOfPresale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"createContribution\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endOfPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deploymentBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPresale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensPerUsdRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWhitelister\",\"type\":\"address\"}],\"name\":\"changeWhitelister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_endOfCrowdsale\",\"type\":\"uint256\"}],\"name\":\"setEndOfCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"name\":\"usdAmounts\",\"type\":\"uint256[]\"}],\"name\":\"createBulkContributions\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokensPerUsdRate\",\"type\":\"uint256\"}],\"name\":\"setTokensPerUsdRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_startOfCrowdsale\",\"type\":\"uint256\"}],\"name\":\"setStartOfCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startOfPresale\",\"type\":\"uint256\"},{\"name\":\"_endOfPresale\",\"type\":\"uint256\"},{\"name\":\"_startOfCrowdsale\",\"type\":\"uint256\"},{\"name\":\"_endOfCrowdsale\",\"type\":\"uint256\"},{\"name\":\"_tokensPerUsdRate\",\"type\":\"uint256\"},{\"name\":\"_cap\",\"type\":\"uint256\"},{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"OnTokensPerUsdRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"OnCapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"OnStartOfPresaleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"OnEndOfPresaleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"OnStartOfCrowdsaleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"OnEndOfCrowdsaleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnClaimTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"OnContributionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousWhitelister\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newWhitelister\",\"type\":\"address\"}],\"name\":\"WhitelisterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"whitelistedAddress\",\"type\":\"address\"}],\"name\":\"WhitelistAdd\",\"type\":\"event\"}]","ContractName":"AoraCrowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000001662cecac0000000000000000000000000000000000000000000000000000000166cc91cc1800000000000000000000000000000000000000000000000000000166cc91d00000000000000000000000000000000000000000000000000000000167671094180000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000cecb8f27f4200f3a0000000000000000000000000000009950ed4d348162fd788025c77b4d377eec124cfb","Library":"","SwarmSource":"bzzr://389b0d3f4fd94eaeba0e650d1baf30443eee3f2b04630881c82e58f220afb290"}]}