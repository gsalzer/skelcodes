{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nCopyright (C) 2017-2018 Hashfuture Inc. All rights reserved.\r\nThis document is the property of Hashfuture Inc.\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract HashFutureBasicToken {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // Mapping from token ID to owner\r\n    mapping (uint256 => address) internal tokenOwner;\r\n\r\n    // Mapping from owner to number of owned token\r\n    mapping (address => uint256) internal ownedTokensCount;\r\n\r\n    modifier onlyOwnerOf(uint256 _tokenId) {\r\n        require(tokenOwner[_tokenId] == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return ownedTokensCount[_owner];\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId) public view returns (address) {\r\n        address owner = tokenOwner[_tokenId];\r\n        return owner;\r\n    }\r\n\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        require(tokenOwner[_tokenId] == address(0));\r\n        tokenOwner[_tokenId] = _to;\r\n        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n    }\r\n\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        require(ownerOf(_tokenId) == _from);\r\n        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n        tokenOwner[_tokenId] = address(0);\r\n    }\r\n\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        require(_to != address(0));\r\n        addTokenTo(_to, _tokenId);\r\n    }\r\n\r\n    function _burn(address _owner, uint256 _tokenId) internal {\r\n        removeTokenFrom(_owner, _tokenId);\r\n    }\r\n}\r\n\r\n\r\ncontract HashFutureToken is HashFutureBasicToken{\r\n\r\n    string internal name_;\r\n    string internal symbol_;\r\n\r\n    address public owner;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] internal allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping (address => uint256[]) internal ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor(string _name, string _symbol) public {\r\n        name_ = _name;\r\n        symbol_ = _symbol;\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function name() external view returns (string) {\r\n        return name_;\r\n    }\r\n\r\n    function symbol() external view returns (string) {\r\n        return symbol_;\r\n    }\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        return allTokens.length;\r\n    }\r\n\r\n    function tokenByIndex(uint256 _index) external view returns (uint256) {\r\n        require(_index < allTokens.length);\r\n        return allTokens[_index];\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(\r\n        address _owner,\r\n        uint256 _index\r\n    )\r\n        external view returns (uint256)\r\n    {\r\n        require(_index < balanceOf(_owner));\r\n        return ownedTokens[_owner][_index];\r\n    }\r\n\r\n    function addTokenTo(address _to, uint256 _tokenId) internal {\r\n        super.addTokenTo(_to, _tokenId);\r\n\r\n        uint256 length = ownedTokens[_to].length;\r\n        ownedTokens[_to].push(_tokenId);\r\n        ownedTokensIndex[_tokenId] = length;\r\n    }\r\n\r\n    function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n        super.removeTokenFrom(_from, _tokenId);\r\n\r\n        uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n        ownedTokens[_from][tokenIndex] = lastToken;\r\n        ownedTokens[_from][lastTokenIndex] = 0;\r\n\r\n        ownedTokens[_from].length = ownedTokens[_from].length.sub(1);\r\n        ownedTokensIndex[_tokenId] = 0;\r\n        ownedTokensIndex[lastToken] = tokenIndex;\r\n    }\r\n\r\n    function _mint(address _to, uint256 _tokenId) internal {\r\n        super._mint(_to, _tokenId);\r\n\r\n        allTokensIndex[_tokenId] = allTokens.length;\r\n        allTokens.push(_tokenId);\r\n    }\r\n\r\n    function _burn(address _owner, uint256 _tokenId) internal {\r\n        super._burn(_owner, _tokenId);\r\n\r\n        uint256 tokenIndex = allTokensIndex[_tokenId];\r\n        uint256 lastTokenIndex = allTokens.length.sub(1);\r\n        uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n        allTokens[tokenIndex] = lastToken;\r\n        allTokens[lastTokenIndex] = 0;\r\n\r\n        allTokens.length = allTokens.length.sub(1);\r\n        allTokensIndex[_tokenId] = 0;\r\n        allTokensIndex[lastToken] = tokenIndex;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Official token issued by HashFuture Inc.\r\n * This is the token for inverstors and close partners.\r\n */\r\ncontract InvestorToken is HashFutureToken{\r\n\r\n    string internal privilege;\r\n    string internal contractIntroduction;\r\n\r\n    constructor() HashFutureToken(\"HashFuture InvestorToken\", \"HFIT\") public\r\n    {\r\n        privilege = \"1.Free service: Token holders enjoy free service of asset tokenization on HashFuture platform; 2.Preemptive right: Token holders have the preemptive right of buying HashFuture digital asset, namely, the priority to buy asset compare to normal users; 3.Transaction fee discount: Token holders enjoy 50% discount on transaction fee on HashFuture platform;\";\r\n        contractIntroduction = \"1. This token cannot be transferred, only investor himself or herself can hold the token and enjoy the privileges; 2. The privileges of this token will be upgraded with deeper cooperation with investors and the development of HashFuture;3. If the investor quits from the HashFuture platform, this token and its privileges will be destroyed as well;\";\r\n    }\r\n\r\n    struct IdentityInfo {\r\n        string hashID;\r\n        string name;\r\n        string country;\r\n        string photoUrl;\r\n        string institute;\r\n        string occupation;\r\n        string suggestions;\r\n    }\r\n\r\n    mapping(uint256 => IdentityInfo) IdentityInfoOfId;\r\n\r\n     /**\r\n      * @param _hashID token holder customized field, the HashFuture account ID\r\n      * @param _name token holder customized field, the name of the holder\r\n      * @param _country token holder customized field.\r\n      * @param _photoUrl token holder customized field, link to holder's photo\r\n      * @param _institute token holder customized field, institute the holder works for\r\n      * @param _occupation token holder customized field, holder's occupation in the institute he/she works in\r\n      * @param _suggestions token holder customized field, holder's suggestions for HashFuture\r\n      **/\r\n    function issueToken(\r\n        address _to,\r\n        string _hashID,\r\n        string _name,\r\n        string _country,\r\n        string _photoUrl,\r\n        string _institute,\r\n        string _occupation,\r\n        string _suggestions\r\n    )\r\n        public onlyOwner\r\n    {\r\n        uint256 _tokenId = allTokens.length;\r\n\r\n        IdentityInfoOfId[_tokenId] = IdentityInfo(\r\n            _hashID, _name, _country, _photoUrl,\r\n            _institute, _occupation, _suggestions\r\n        );\r\n\r\n        _mint(_to, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev the contract owner can burn (recycle) any token in circulation.\r\n     **/\r\n    function burnToken(uint256 _tokenId) public onlyOwner{\r\n        address tokenOwner = ownerOf(_tokenId);\r\n        require(tokenOwner != address(0));\r\n\r\n        delete IdentityInfoOfId[_tokenId];\r\n        _burn(tokenOwner, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the holder's info of a token.\r\n     * @param _tokenId id of interested token\r\n     **/\r\n    function getTokenInfo(uint256 _tokenId)\r\n        external view\r\n        returns (string, string, string, string, string, string, string)\r\n    {\r\n        address tokenOwner = ownerOf(_tokenId);\r\n        require(tokenOwner != address(0));\r\n\r\n        IdentityInfo storage pInfo = IdentityInfoOfId[_tokenId];\r\n        return (\r\n            pInfo.hashID,\r\n            pInfo.name,\r\n            pInfo.country,\r\n            pInfo.photoUrl,\r\n            pInfo.institute,\r\n            pInfo.occupation,\r\n            pInfo.suggestions\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Set holder's IdentityInfo of a token\r\n     * @param _tokenId id of target token.\r\n     * @param _name token holder customized field, the name of the holder\r\n     * @param _country token holder customized field.\r\n     * @param _photoUrl token holder customized field, link to holder's photo\r\n     * @param _institute token holder customized field, institute the holder works for\r\n     * @param _occupation token holder customized field, holder's occupation in the institute he/she works in\r\n     * @param _suggestions token holder customized field, holder's suggestions for HashFuture\r\n     **/\r\n    function setIdentityInfo(\r\n        uint256 _tokenId,\r\n        string _name,\r\n        string _country,\r\n        string _photoUrl,\r\n        string _institute,\r\n        string _occupation,\r\n        string _suggestions\r\n    )\r\n        public\r\n        onlyOwnerOf(_tokenId)\r\n    {\r\n        IdentityInfo storage pInfo = IdentityInfoOfId[_tokenId];\r\n\r\n        pInfo.name = _name;\r\n        pInfo.country = _country;\r\n        pInfo.photoUrl = _photoUrl;\r\n        pInfo.institute = _institute;\r\n        pInfo.occupation = _occupation;\r\n        pInfo.suggestions = _suggestions;\r\n    }\r\n\r\n    /**\r\n     * @dev Set suggestions for Hashfuture\r\n     * only holder of a token can use this function\r\n     */\r\n    function setSuggestion(\r\n        uint256 _tokenId,\r\n        string _suggestions\r\n    )\r\n        public\r\n        onlyOwnerOf(_tokenId)\r\n    {\r\n        IdentityInfoOfId[_tokenId].suggestions = _suggestions;\r\n    }\r\n\r\n    /**\r\n     * @dev Get privilege of the token\r\n     **/\r\n    function getPrivilege() external view returns (string) {\r\n        return privilege;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the introduction of the token\r\n     **/\r\n    function getContractIntroduction() external view returns (string) {\r\n        return contractIntroduction;\r\n    }\r\n\r\n    /**\r\n     * @dev Update token holder's privileges\r\n     * only official operator can use this function\r\n     **/\r\n    function updatePrivilege(string _privilege) public onlyOwner {\r\n        privilege = _privilege;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrivilege\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractIntroduction\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_country\",\"type\":\"string\"},{\"name\":\"_photoUrl\",\"type\":\"string\"},{\"name\":\"_institute\",\"type\":\"string\"},{\"name\":\"_occupation\",\"type\":\"string\"},{\"name\":\"_suggestions\",\"type\":\"string\"}],\"name\":\"setIdentityInfo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_suggestions\",\"type\":\"string\"}],\"name\":\"setSuggestion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_hashID\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_country\",\"type\":\"string\"},{\"name\":\"_photoUrl\",\"type\":\"string\"},{\"name\":\"_institute\",\"type\":\"string\"},{\"name\":\"_occupation\",\"type\":\"string\"},{\"name\":\"_suggestions\",\"type\":\"string\"}],\"name\":\"issueToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_privilege\",\"type\":\"string\"}],\"name\":\"updatePrivilege\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"InvestorToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://22cc5d8e248e0c19df3e943368d967967209b9b1b3e9d7ecccedbfd266cc8375"}]}