{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n    CryptoPrize(address _token_address)   // this will unlock the prize and send yum to user\r\n  @author Yumerium Ltd\r\n*/\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract YUM {\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    mapping (address => uint256) public balanceOf;\r\n    function transfer(address _to, uint256 _value) public;\r\n}\r\n\r\n\r\ncontract TokenReward {\r\n    using SafeMath for uint256;\r\n    uint256 public maxCount = 2 ** 256 - 1;\r\n    uint256 public budget;\r\n    uint256 public totalUnlocked;\r\n    uint256 public startYum;\r\n    uint256 public nextRewardAmount;\r\n    uint256 public count;\r\n    address public owner;\r\n    YUM public token;\r\n\r\n    event UnlockReward(address to, uint256 amount);\r\n    event CalcNextReward(uint256 count, uint256 amount);\r\n    event Retrieve(address to, uint256 amount);\r\n    event AddBudget(uint256 budget, uint256 startYum);\r\n\r\n    // start with 0 budget and 0 Yum for the prize\r\n    constructor(address _token_address) public {\r\n        budget = 0;\r\n        startYum = 0;\r\n        count = 0;\r\n        owner = msg.sender;\r\n        token = YUM(_token_address);\r\n    }\r\n\r\n    /* \r\n     * Calculate the next prize\r\n     * TODO: Change the equation if needed\r\n    */\r\n    function calcNextReward() public returns (uint256) {\r\n        uint256 oneYUM = 10 ** 8;\r\n        uint256 amount = startYum.mul(oneYUM).div(count.mul(oneYUM).div(500).add(oneYUM)); // 100 YUM / (1 YUM / 500 + 1 YUM)\r\n        emit CalcNextReward(count, amount);\r\n        return amount;\r\n    }\r\n    \r\n    // unlock the prize\r\n    function sendNextRewardTo(address to) external {\r\n        require(msg.sender==owner);\r\n        uint256 amount = nextRewardAmount;\r\n        require(amount > 0);\r\n        uint256 total = totalUnlocked.add(amount);\r\n        require(total<=budget);\r\n        token.transfer(to, amount);\r\n        budget = budget.sub(amount);\r\n        if (count < maxCount)\r\n            count++;\r\n        totalUnlocked = total;\r\n        nextRewardAmount = calcNextReward();\r\n        emit UnlockReward(to, amount);\r\n    }\r\n\r\n    // change creator address\r\n    function changeOwnerTo(address _creator) external {\r\n        require(msg.sender==owner);\r\n        owner = _creator;\r\n    }\r\n\r\n    // change creator address\r\n    function changeYumAddressTo(address _token_address) external {\r\n        require(msg.sender==owner);\r\n        token = YUM(_token_address);\r\n    }\r\n\r\n    // Retrieve all YUM token left from the contract\r\n    function retrieveAll() external {\r\n        require(msg.sender==owner);\r\n        uint256 amount = token.balanceOf(this);\r\n        token.transfer(owner, amount);   \r\n        emit Retrieve(owner, amount);   \r\n    }\r\n\r\n    // add more budget and reset startYum and count\r\n    function addBudget(uint256 _budget, uint256 _startYum, uint256 _count) external {\r\n        require(msg.sender==owner);\r\n        require(token.transferFrom(msg.sender, this, _budget));\r\n        budget = budget.add(_budget);\r\n        startYum = _startYum;\r\n        count = _count;\r\n        nextRewardAmount = calcNextReward();\r\n        emit AddBudget(budget, startYum);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_budget\",\"type\":\"uint256\"},{\"name\":\"_startYum\",\"type\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"addBudget\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token_address\",\"type\":\"address\"}],\"name\":\"changeYumAddressTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextRewardAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"changeOwnerTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendNextRewardTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startYum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"retrieveAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUnlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"calcNextReward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"budget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token_address\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CalcNextReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Retrieve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"budget\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"startYum\",\"type\":\"uint256\"}],\"name\":\"AddBudget\",\"type\":\"event\"}]","ContractName":"TokenReward","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007f4404db6a3f4d3cfb41d5920d81d44d64759235","Library":"","SwarmSource":"bzzr://9506d300b4b5c6617a0b0030958eccb7f693a7379c1a4de495daef72f631e57b"}]}