{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/IOneInchTrade.sol\r\n\r\ninterface IOneInchTrade {\r\n\r\n    function getRateFromKyber(IERC20 from, IERC20 to, uint amount) external view returns (uint expectedRate, uint slippageRate);\r\n    function getRateFromBancor(IERC20 from, IERC20 to, uint amount) external view returns (uint expectedRate, uint slippageRate);\r\n}\r\n\r\n// File: contracts/KyberNetworkProxy.sol\r\n\r\ninterface KyberNetworkProxy {\r\n\r\n    function getExpectedRate(IERC20 src, IERC20 dest, uint srcQty)\r\n    external view\r\n    returns (uint expectedRate, uint slippageRate);\r\n}\r\n\r\n// File: contracts/BancorConverter.sol\r\n\r\ninterface BancorConverter {\r\n\r\n    function getReturn(IERC20 _fromToken, IERC20 _toToken, uint256 _amount) external view returns (uint256, uint256);\r\n}\r\n\r\n// File: contracts/OneInchTrade.sol\r\n\r\n/**\r\n* KyberNetworkProxy mainnet address 0x818E6FECD516Ecc3849DAf6845e3EC868087B755\r\n* BancorConverter mainnet address 0xb89570f6AD742CB1fd440A930D6c2A2eA29c51eE\r\n\r\n* DSToken mainnet address 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359\r\n* Bancor Token mainnet address 0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C\r\n**/\r\ncontract OneInchTrade is IOneInchTrade {\r\n\r\n    uint constant MIN_TRADING_AMOUNT = 0.0001 ether;\r\n\r\n    KyberNetworkProxy public kyberNetworkProxy;\r\n    BancorConverter public bancorConverter;\r\n\r\n    address public dsTokenAddress;\r\n    address public bntTokenAddress;\r\n\r\n    address constant public KYBER_ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address constant public BANCOR_ETHER_ADDRESS = 0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315;\r\n\r\n    constructor(\r\n        address kyberNetworkProxyAddress,\r\n        address bancorConverterAddress,\r\n\r\n        address _dsTokenAddress,\r\n        address _bntTokenAddress\r\n    ) public {\r\n\r\n        kyberNetworkProxy = KyberNetworkProxy(kyberNetworkProxyAddress);\r\n        bancorConverter = BancorConverter(bancorConverterAddress);\r\n\r\n        dsTokenAddress = _dsTokenAddress;\r\n        bntTokenAddress = _bntTokenAddress;\r\n    }\r\n\r\n    function getRateFromKyber(IERC20 from, IERC20 to, uint amount) public view returns (uint expectedRate, uint slippageRate) {\r\n\r\n        return kyberNetworkProxy.getExpectedRate(\r\n            from,\r\n            to,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function getRateFromBancor(IERC20 from, IERC20 to, uint amount) public view returns (uint expectedRate, uint slippageRate) {\r\n\r\n        return bancorConverter.getReturn(\r\n            from,\r\n            to,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function() external payable {\r\n\r\n        uint startGas = gasleft();\r\n\r\n        require(msg.value >= MIN_TRADING_AMOUNT, \"Min trading amount not reached.\");\r\n\r\n        IERC20 bntToken = IERC20(bntTokenAddress);\r\n        IERC20 dsToken = IERC20(dsTokenAddress);\r\n\r\n        (uint kyberExpectedRate, uint kyberSlippageRate) = getRateFromKyber(\r\n            IERC20(KYBER_ETHER_ADDRESS),\r\n            dsToken,\r\n            msg.value\r\n        );\r\n\r\n        (uint bancorBNTExpectedRate, uint bancorBNTSlippageRate) = getRateFromBancor(\r\n            IERC20(BANCOR_ETHER_ADDRESS),\r\n            bntToken,\r\n            msg.value\r\n        );\r\n\r\n        (uint bancorDSExpectedRate, uint bancorDSSlippageRate) = getRateFromBancor(\r\n            bntToken,\r\n            dsToken,\r\n            msg.value\r\n        );\r\n\r\n        uint kyberRate = kyberExpectedRate * msg.value;\r\n        uint bancorRate = bancorBNTExpectedRate * msg.value * bancorDSExpectedRate;\r\n\r\n        uint baseTokenAmount = 0;\r\n        uint tradedResult = 0;\r\n\r\n        if (kyberRate > bancorRate) {\r\n            // buy from kyber and sell to bancor\r\n            tradedResult = kyberRate - bancorRate;\r\n            baseTokenAmount = bancorRate * msg.value;\r\n\r\n        } else {\r\n            // buy from kyber and sell to bancor\r\n            tradedResult = bancorRate - kyberRate;\r\n            baseTokenAmount = kyberRate * msg.value;\r\n        }\r\n\r\n        require(\r\n            tradedResult >= baseTokenAmount,\r\n            \"Canceled because of not profitable trade.\"\r\n        );\r\n\r\n        //uint gasUsed = startGas - gasleft();\r\n        // gasUsed * tx.gasprice\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRateFromBancor\",\"outputs\":[{\"name\":\"expectedRate\",\"type\":\"uint256\"},{\"name\":\"slippageRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRateFromKyber\",\"outputs\":[{\"name\":\"expectedRate\",\"type\":\"uint256\"},{\"name\":\"slippageRate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dsTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BANCOR_ETHER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bancorConverter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bntTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberNetworkProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ETHER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"kyberNetworkProxyAddress\",\"type\":\"address\"},{\"name\":\"bancorConverterAddress\",\"type\":\"address\"},{\"name\":\"_dsTokenAddress\",\"type\":\"address\"},{\"name\":\"_bntTokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"OneInchTrade","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b755000000000000000000000000b89570f6ad742cb1fd440a930d6c2a2ea29c51ee00000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a232603590000000000000000000000001f573d6fb3f13d689ff844b4ce37794d79a7ff1c","Library":"","SwarmSource":"bzzr://aa67ba49b6453b1c065a8be67e18fe472ded0d56fdf4139c1d205c94bc469271"}]}