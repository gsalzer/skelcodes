{"status":"1","message":"OK","result":[{"SourceCode":"/* solium-disable-next-line linebreak-style */\r\npragma solidity ^0.4.24;\r\n\r\n// Implements a simple ownership model with 2-phase transfer.\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public proposedOwner;\r\n\r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender) == true, 'Require owner to execute transaction');\r\n        _;\r\n    }\r\n\r\n\r\n    function isOwner(address _address) public view returns (bool) {\r\n        return (_address == owner);\r\n    }\r\n\r\n\r\n    function initiateOwnershipTransfer(address _proposedOwner) public onlyOwner returns (bool success) {\r\n        require(_proposedOwner != address(0), 'Require proposedOwner != address(0)');\r\n        require(_proposedOwner != address(this), 'Require proposedOwner != address(this)');\r\n        require(_proposedOwner != owner, 'Require proposedOwner != owner');\r\n\r\n        proposedOwner = _proposedOwner;\r\n        return true;\r\n    }\r\n\r\n\r\n    function completeOwnershipTransfer() public returns (bool success) {\r\n        require(msg.sender == proposedOwner, 'Require msg.sender == proposedOwner');\r\n\r\n        owner = msg.sender;\r\n        proposedOwner = address(0);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// OpsManaged - Implements an Owner and Ops Permission Model\r\n// ----------------------------------------------------------------------------\r\ncontract OpsManaged is Owned {\r\n\r\n    address public opsAddress;\r\n\r\n\r\n    constructor() public\r\n        Owned()\r\n    {\r\n    }\r\n\r\n\r\n    modifier onlyOwnerOrOps() {\r\n        require(isOwnerOrOps(msg.sender), 'Require only owner or ops');\r\n        _;\r\n    }\r\n\r\n\r\n    function isOps(address _address) public view returns (bool) {\r\n        return (opsAddress != address(0) && _address == opsAddress);\r\n    }\r\n\r\n\r\n    function isOwnerOrOps(address _address) public view returns (bool) {\r\n        return (isOwner(_address) || isOps(_address));\r\n    }\r\n\r\n\r\n    function setOpsAddress(address _newOpsAddress) public onlyOwner returns (bool success) {\r\n        require(_newOpsAddress != owner, 'Require newOpsAddress != owner');\r\n        require(_newOpsAddress != address(this), 'Require newOpsAddress != address(this)');\r\n\r\n        opsAddress = _newOpsAddress;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Finalizable - Implement Finalizable (Crowdsale) model\r\n// ----------------------------------------------------------------------------\r\ncontract Finalizable is OpsManaged {\r\n\r\n    FinalizableState public finalized;\r\n    \r\n    enum FinalizableState { \r\n        None,\r\n        Finalized\r\n    }\r\n\r\n    event Finalized();\r\n\r\n\r\n    constructor() public OpsManaged()\r\n    {\r\n        finalized = FinalizableState.None;\r\n    }\r\n\r\n\r\n    function finalize() public onlyOwner returns (bool success) {\r\n        require(finalized == FinalizableState.None, 'Require !finalized');\r\n\r\n        finalized = FinalizableState.Finalized;\r\n\r\n        emit Finalized();\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Math - Implement Math Library\r\n// ----------------------------------------------------------------------------\r\nlibrary Math {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 r = a + b;\r\n\r\n        require(r >= a, 'Require r >= a');\r\n\r\n        return r;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(a >= b, 'Require a >= b');\r\n\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 r = a * b;\r\n\r\n        require(r / a == b, 'Require r / a == b');\r\n\r\n        return r;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20Interface - Standard ERC20 Interface Definition\r\n// Based on the final ERC20 specification at:\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20Token - Standard ERC20 Implementation\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Token is ERC20Interface {\r\n\r\n    using Math for uint256;\r\n\r\n    string public  name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) internal balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n\r\n\r\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply, address _initialTokenHolder) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _totalSupply;\r\n\r\n        // The initial balance of tokens is assigned to the given token holder address.\r\n        balances[_initialTokenHolder] = _totalSupply;\r\n        allowed[_initialTokenHolder][_initialTokenHolder] = balances[_initialTokenHolder];\r\n\r\n        // Per EIP20, the constructor should fire a Transfer event if tokens are assigned to an account.\r\n        emit Transfer(0x0, _initialTokenHolder, _totalSupply);\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) { \r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] = balances[msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n\r\n            emit Transfer(msg.sender, _to, _value);\r\n\r\n            return true;\r\n        } else { \r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_from] = balances[_from].sub(_value);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n            balances[_to] = balances[_to].add(_value);\r\n\r\n            emit Transfer(_from, _to, _value);\r\n\r\n            return true;\r\n        } else { \r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// FinalizableToken - Extension to ERC20Token with ops and finalization\r\n// ----------------------------------------------------------------------------\r\n\r\n//\r\n// ERC20 token with the following additions:\r\n//    1. Owner/Ops Ownership\r\n//    2. Finalization\r\n//\r\ncontract FinalizableToken is ERC20Token, OpsManaged, Finalizable {\r\n\r\n    using Math for uint256;\r\n\r\n\r\n    // The constructor will assign the initial token supply to the owner (msg.sender).\r\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public\r\n        ERC20Token(_name, _symbol, _decimals, _totalSupply, msg.sender)\r\n        Finalizable()\r\n    {\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        validateTransfer(msg.sender, _to);\r\n\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        validateTransfer(msg.sender, _to);\r\n\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n\r\n    function validateTransfer(address _sender, address _to) internal view {\r\n        // Once the token is finalized, everybody can transfer tokens.\r\n        if (finalized == FinalizableState.Finalized) {\r\n            return;\r\n        }\r\n        \r\n\r\n        if (isOwner(_to)) {\r\n            return;\r\n        }\r\n\r\n        // Before the token is finalized, only owner and ops are allowed to initiate transfers.\r\n        // This allows them to move tokens while the sale is still in private sale.\r\n        require(isOwnerOrOps(_sender), 'Require is owner or ops allowed to initiate transfer');\r\n    }\r\n}\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// PBTT Token Contract Configuration\r\n// ----------------------------------------------------------------------------\r\ncontract PBTTTokenConfig {\r\n\r\n    string  internal constant TOKEN_SYMBOL      = 'PBTT';\r\n    string  internal constant TOKEN_NAME        = 'Purple Butterfly Token (PBTT)';\r\n    uint8   internal constant TOKEN_DECIMALS    = 3;\r\n\r\n    uint256 internal constant DECIMALSFACTOR    = 10**uint256(TOKEN_DECIMALS);\r\n    uint256 internal constant TOKEN_TOTALSUPPLY = 1000000000 * DECIMALSFACTOR;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// PBTT Token Contract\r\n// ----------------------------------------------------------------------------\r\ncontract PBTTToken is FinalizableToken, PBTTTokenConfig {\r\n      \r\n    uint256 public buyPriceEth = 0.0002 ether;                              // Buy price for PBTT\r\n    uint256 public sellPriceEth = 0.0001 ether;                             // Sell price for PBTT\r\n    uint256 public gasForPBTT = 0.005 ether;                                // Eth from contract against PBTT to pay tx (10 times sellPriceEth)\r\n    uint256 public PBTTForGas = 1;                                          // PBTT to contract against eth to pay tx\r\n    uint256 public gasReserve = 1 ether;                                    // Eth amount that remains in the contract for gas and can't be sold\r\n\r\n    // Minimal eth balance of sender and recipient, ensure that no account receiving\r\n    // the token has less than the necessary Ether to pay the fees\r\n    uint256 public minBalanceForAccounts = 0.005 ether;                     \r\n    uint256 public totalTokenSold = 0;\r\n    \r\n    enum HaltState { \r\n        Unhalted,\r\n        Halted        \r\n    }\r\n\r\n    HaltState public halts;\r\n\r\n    constructor() public\r\n        FinalizableToken(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS, TOKEN_TOTALSUPPLY)\r\n    {\r\n        halts = HaltState.Unhalted;\r\n        finalized = FinalizableState.None;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(halts == HaltState.Unhalted, 'Require smart contract is not in halted state');\r\n\r\n        // Prevents drain and spam\r\n        require(_value >= PBTTForGas, 'Token amount is not enough to transfer'); \r\n         \r\n        if (!isOwnerOrOps(msg.sender) && _to == address(this)) {\r\n            // Trade PBTT against eth by sending to the token contract\r\n            sellPBTTAgainstEther(_value);                             \r\n            return true;\r\n        } else {\r\n            if(isOwnerOrOps(msg.sender)) {\r\n                return super.transferFrom(owner, _to, _value);\r\n            }\r\n            return super.transfer(_to, _value);\r\n        }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(halts == HaltState.Unhalted, 'Require smart contract is not in halted state');\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    \r\n    //Change PPBT Selling and Buy Price\r\n    function setEtherPrices(uint256 newBuyPriceEth, uint256 newSellPriceEth) public onlyOwnerOrOps {\r\n        // Set prices to buy and sell PBTT\r\n        buyPriceEth = newBuyPriceEth;                                       \r\n        sellPriceEth = newSellPriceEth;\r\n    }\r\n\r\n    function setGasForPBTT(uint256 newGasAmountInWei) public onlyOwnerOrOps {\r\n        gasForPBTT = newGasAmountInWei;\r\n    }\r\n\r\n    //set PBTT to contract against eth to pay tx\r\n    function setPBTTForGas(uint256 newPBTTAmount) public onlyOwnerOrOps {\r\n        PBTTForGas = newPBTTAmount;\r\n    }\r\n\r\n    function setGasReserve(uint256 newGasReserveInWei) public onlyOwnerOrOps {\r\n        gasReserve = newGasReserveInWei;\r\n    }\r\n\r\n    function setMinBalance(uint256 minimumBalanceInWei) public onlyOwnerOrOps {\r\n        minBalanceForAccounts = minimumBalanceInWei;\r\n    }\r\n\r\n    function getTokenRemaining() public view returns (uint256 total){\r\n        return (TOKEN_TOTALSUPPLY.div(DECIMALSFACTOR)).sub(totalTokenSold);\r\n    }\r\n\r\n    /* User buys PBTT and pays in Ether */\r\n    function buyPBTTAgainstEther() private returns (uint256 tokenAmount) {\r\n        // Avoid dividing 0, sending small amounts and spam\r\n        require(buyPriceEth > 0, 'buyPriceEth must be > 0');\r\n        require(msg.value >= buyPriceEth, 'Transfer money must be enough for 1 token');\r\n        \r\n        // Calculate the amount of PBTT\r\n        tokenAmount = (msg.value.mul(DECIMALSFACTOR)).div(buyPriceEth);                \r\n        \r\n        // Check if it has enough to sell\r\n        require(balances[owner] >= tokenAmount, 'Not enough token balance');\r\n        \r\n        // Add the amount to buyer's balance\r\n        balances[msg.sender] = balances[msg.sender].add(tokenAmount);            \r\n\r\n        // Subtract amount from PBTT balance\r\n        balances[owner] = balances[owner].sub(tokenAmount);\r\n\r\n        // Execute an event reflecting the change\r\n        emit Transfer(owner, msg.sender, tokenAmount);                           \r\n        \r\n        totalTokenSold = totalTokenSold + tokenAmount;\r\n\t\t\r\n        return tokenAmount;\r\n    }\r\n\r\n    function sellPBTTAgainstEther(uint256 amount) private returns (uint256 revenue) {\r\n        // Avoid selling and spam\r\n        require(sellPriceEth > 0, 'sellPriceEth must be > 0');\r\n        \r\n        require(amount >= PBTTForGas, 'Sell token amount must be larger than PBTTForGas value');\r\n\r\n        // Check if the sender has enough to sell\r\n        require(balances[msg.sender] >= amount, 'Token balance is not enough to sold');\r\n        \r\n        require(msg.sender.balance >= minBalanceForAccounts, 'Seller balance must be enough to pay the transaction fee');\r\n        \r\n        // Revenue = eth that will be send to the user\r\n        revenue = (amount.div(DECIMALSFACTOR)).mul(sellPriceEth);                                 \r\n\r\n        // Keep min amount of eth in contract to provide gas for transactions\r\n        uint256 remaining = address(this).balance.sub(revenue);\r\n        require(remaining >= gasReserve, 'Remaining contract balance is not enough for reserved');\r\n\r\n        // Add the token amount to owner balance\r\n        balances[owner] = balances[owner].add(amount);         \r\n        // Subtract the amount from seller's token balance\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);            \r\n\r\n        // transfer eth\r\n        // 'msg.sender.transfer' means the contract sends ether to 'msg.sender'\r\n        // It's important to do this last to avoid recursion attacks\r\n        msg.sender.transfer(revenue);\r\n \r\n        // Execute an event reflecting on the change\r\n        emit Transfer(msg.sender, owner, amount);                            \r\n        return revenue;   \r\n    }\r\n\r\n    // Allows a token holder to burn tokens. Once burned, tokens are permanently\r\n    // removed from the total supply.\r\n    function burn(uint256 _amount) public returns (bool success) {\r\n        require(_amount > 0, 'Token amount to burn must be larger than 0');\r\n\r\n        address account = msg.sender;\r\n        require(_amount <= balanceOf(account), 'You cannot burn token you dont have');\r\n\r\n        balances[account] = balances[account].sub(_amount);\r\n        totalSupply = totalSupply.sub(_amount);\r\n        return true;\r\n    }\r\n\r\n    // Allows the owner to reclaim tokens that are assigned to the token contract itself.\r\n    function reclaimTokens() public onlyOwner returns (bool success) {\r\n\r\n        address account = address(this);\r\n        uint256 amount = balanceOf(account);\r\n\r\n        if (amount == 0) {\r\n            return false;\r\n        }\r\n\r\n        balances[account] = balances[account].sub(amount);\r\n        balances[owner] = balances[owner].add(amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Allows the owner to withdraw that are assigned to the token contract itself.\r\n    function withdrawFundToOwner() public onlyOwner {\r\n        // transfer to owner\r\n        uint256 eth = address(this).balance; \r\n        owner.transfer(eth);\r\n    }\r\n\r\n    // Allows the owner to withdraw all fund from contract to owner's specific adress\r\n    function withdrawFundToAddress(address _ownerOtherAdress) public onlyOwner {\r\n        // transfer to owner\r\n        uint256 eth = address(this).balance; \r\n        _ownerOtherAdress.transfer(eth);\r\n    }\r\n\r\n    /* Halts or unhalts direct trades without the sell/buy functions below */\r\n    function haltsTrades() public onlyOwnerOrOps returns (bool success) {\r\n        halts = HaltState.Halted;\r\n        return true;\r\n    }\r\n\r\n    function unhaltsTrades() public onlyOwnerOrOps returns (bool success) {\r\n        halts = HaltState.Unhalted;\r\n        return true;\r\n    }\r\n\r\n    function() public payable { \r\n        if(msg.sender != owner) {\r\n            require(finalized == FinalizableState.Finalized, 'Require smart contract is finalized');\r\n            require(halts == HaltState.Unhalted, 'Require smart contract is not halted');\r\n            \r\n            buyPBTTAgainstEther(); \r\n        }\r\n    } \r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"sellPriceEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPBTTAmount\",\"type\":\"uint256\"}],\"name\":\"setPBTTForGas\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGasAmountInWei\",\"type\":\"uint256\"}],\"name\":\"setGasForPBTT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PBTTForGas\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newGasReserveInWei\",\"type\":\"uint256\"}],\"name\":\"setGasReserve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhaltsTrades\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasForPBTT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawFundToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reclaimTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minBalanceForAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBuyPriceEth\",\"type\":\"uint256\"},{\"name\":\"newSellPriceEth\",\"type\":\"uint256\"}],\"name\":\"setEtherPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPriceEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOpsAddress\",\"type\":\"address\"}],\"name\":\"setOpsAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"opsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwnerOrOps\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"initiateOwnershipTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"haltsTrades\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownerOtherAdress\",\"type\":\"address\"}],\"name\":\"withdrawFundToAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minimumBalanceInWei\",\"type\":\"uint256\"}],\"name\":\"setMinBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proposedOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenRemaining\",\"outputs\":[{\"name\":\"total\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"completeOwnershipTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gasReserve\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOps\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"PBTTToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b2d27dd2545f7b783fc57e7762d2f1c51aaff50fb53eab124809c932a0bf0b43"}]}