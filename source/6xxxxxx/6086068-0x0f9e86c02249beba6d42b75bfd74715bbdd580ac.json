{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract owned {\r\n    address public owner;\r\n    address public tokenContract;\r\n    constructor() public{\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerAndtokenContract {\r\n        require(msg.sender == owner || msg.sender == tokenContract);\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    function transfertokenContract(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            tokenContract = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract DataContract is owned {\r\n    struct Good {\r\n        bytes32 preset;\r\n        uint price;\r\n        uint time;\r\n    }\r\n\r\n    mapping (bytes32 => Good) public goods;\r\n\r\n    function setGood(bytes32 _preset, uint _price) onlyOwnerAndtokenContract external {\r\n        goods[_preset] = Good({preset: _preset, price: _price, time: now});\r\n    }\r\n    \r\n    function getGoodPreset(bytes32 _preset) view public returns (bytes32) {\r\n        return goods[_preset].preset;\r\n    }\r\n    \r\n    function getGoodPrice(bytes32 _preset) view public returns (uint) {\r\n        return goods[_preset].price;\r\n    }\r\n\r\n    mapping (bytes32 => address) public decisionOf;\r\n\r\n    function setDecision(bytes32 _preset, address _address) onlyOwnerAndtokenContract external {\r\n        decisionOf[_preset] = _address;\r\n    }\r\n\r\n    function getDecision(bytes32 _preset) view public returns (address) {\r\n        return decisionOf[_preset];\r\n    }\r\n}\r\n\r\n\r\ncontract Token is owned {\r\n\r\n    DataContract DC;\r\n\r\n    constructor(address _dataContractAddr) public{\r\n        DC = DataContract(_dataContractAddr);\r\n    }\r\n    \r\n    uint _seed = now;\r\n\r\n    struct Good {\r\n        bytes32 preset;\r\n        uint price;\r\n        uint time;\r\n    }\r\n\r\n    // controll\r\n\r\n    event Decision(uint result, address finalAddress, address[] buyers, uint[] amounts);\r\n\r\n    function _random() internal returns (uint randomNumber) {\r\n        _seed = uint(keccak256(keccak256(block.blockhash(block.number-100))));\r\n        return _seed ;\r\n    }\r\n\r\n    function _stringToBytes32(string memory _source) internal pure returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(_source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n        assembly {\r\n            result := mload(add(_source, 32))\r\n        }\r\n    }\r\n\r\n    // get decision result address\r\n    function _getFinalAddress(uint[] _amounts, address[] _buyers, uint result) internal pure returns (address finalAddress) {\r\n        uint congest = 0;\r\n        address _finalAddress = address(0);\r\n        for (uint j = 0; j < _amounts.length; j++) {\r\n            congest += _amounts[j];\r\n            if (result <= congest && _finalAddress == address(0)) {\r\n                _finalAddress = _buyers[j];\r\n            }\r\n        }\r\n        return _finalAddress;\r\n    }\r\n\r\n    function postTrade(bytes32 _preset, uint _price) onlyOwner public {\r\n        require(DC.getGoodPreset(_preset) == \"\");\r\n        DC.setGood(_preset, _price);\r\n    }\r\n\r\n    function decision(bytes32 _preset, string _presetSrc, address[] _buyers, uint[] _amounts) onlyOwner public payable{\r\n        \r\n        // execute it only once\r\n        require(DC.getDecision(_preset) == address(0));\r\n\r\n        // preset authenticity\r\n        require(sha256(_presetSrc) == DC.getGoodPreset(_preset));\r\n\r\n        // address added, parameter 1\r\n        uint160 allAddress;\r\n        for (uint i = 0; i < _buyers.length; i++) {\r\n            allAddress += uint160(_buyers[i]);\r\n        }\r\n        \r\n        // random, parameter 2\r\n        uint random = _random();\r\n\r\n        uint goodPrice = DC.getGoodPrice(_preset);\r\n\r\n        // preset is parameter 3, add and take the remainder\r\n        uint result = uint(uint(_stringToBytes32(_presetSrc)) + allAddress + random) % goodPrice;\r\n\r\n        address finalAddress = _getFinalAddress(_amounts, _buyers, result);\r\n        // save decision result\r\n        DC.setDecision(_preset, finalAddress);\r\n        Decision(result, finalAddress, _buyers, _amounts);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preset\",\"type\":\"bytes32\"},{\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"postTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_preset\",\"type\":\"bytes32\"},{\"name\":\"_presetSrc\",\"type\":\"string\"},{\"name\":\"_buyers\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"decision\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transfertokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_dataContractAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"finalAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyers\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Decision\",\"type\":\"event\"}]","ContractName":"Token","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000093023a4bf3a1bce66aa7c496f42fb7cbdc15531b","Library":"","SwarmSource":"bzzr://45951ff03e116557fb04f97fc72c93e868c52f3884bcd48f9c8d45c1bb20e9ae"}]}