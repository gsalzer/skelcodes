{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n//ERC20 Token\r\ncontract Token {\r\n  function totalSupply() public constant returns (uint);\r\n  function balanceOf(address _owner) public constant returns (uint);\r\n  function transfer(address _to, uint _value) public returns (bool);\r\n  function transferFrom(address _from, address _to, uint _value) public returns (bool);\r\n  function approve(address _spender, uint _value) public returns (bool);\r\n  function allowance(address _owner, address _spender) public constant returns (uint);\r\n  event Transfer(address indexed _from, address indexed _to, uint _value);\r\n  event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal pure returns (uint256) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal pure returns (uint256) {\r\n    uint c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal pure returns (uint256) {\r\n    uint c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract BitEyeExchange is SafeMath {\r\n  mapping (address => mapping (address => uint256)) public balances;\r\n  mapping (bytes32 => bool) public traded;\r\n  mapping (bytes32 => uint256) public orderFills;\r\n  address public owner;\r\n  address public feeAccount;\r\n  mapping (address => bool) public signers;\r\n  mapping (address => uint256) public cancels;\r\n  mapping (bytes32 => bool) public withdraws;\r\n\r\n  uint256 public teamLocked = 300000000 * 1e18;\r\n  uint256 public teamClaimed = 0;\r\n  uint256 public totalForMining = 600000000 * 1e18;\r\n  uint256 public unmined = 600000000 * 1e18;\r\n  mapping (address => uint256) public mined;\r\n  address public BEY;\r\n  mapping (address => uint256) public miningRate;\r\n  bool public paused = false;\r\n  \r\n  event Deposit(address token, address user, uint256 amount, uint256 balance);\r\n  event Withdraw(address token, address user, uint256 amount, uint256 balance);\r\n  event Trade(address baseToken, address quoteToken, uint256 volume, uint256 fund, uint256 nonce, address buyer, address seller);\r\n  event Cancel(address user, bytes32 orderHash, uint256 nonce);\r\n  event Claim(address user, uint256 amount);\r\n\r\n  function BitEyeExchange(address _feeAccount) public {\r\n    owner = msg.sender;\r\n    feeAccount = _feeAccount;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    if (_newOwner != address(0)) {\r\n      owner = _newOwner;\r\n    }\r\n  }\r\n\r\n  function setFeeAccount(address _newFeeAccount) public onlyOwner {\r\n    feeAccount = _newFeeAccount;\r\n  }\r\n\r\n  function addSigner(address _signer) public onlyOwner {\r\n    signers[_signer] = true;\r\n  }\r\n\r\n  function removeSigner(address _signer) public onlyOwner {\r\n    signers[_signer] = false;\r\n  }\r\n\r\n  function setBEY(address _addr) public onlyOwner {\r\n    BEY = _addr;\r\n  }\r\n\r\n  function setMiningRate(address _quoteToken, uint256 _rate) public onlyOwner {\r\n    miningRate[_quoteToken] = _rate;\r\n  }\r\n\r\n  function setPaused(bool _paused) public onlyOwner {\r\n    paused = _paused;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  modifier onlySigner() {\r\n    require(signers[msg.sender]);\r\n    _; \r\n  }\r\n\r\n  modifier onlyNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  function() external {\r\n    revert();\r\n  }\r\n\r\n  function depositToken(address token, uint amount) public {\r\n    balances[token][msg.sender] = safeAdd(balances[token][msg.sender], amount);\r\n    require(Token(token).transferFrom(msg.sender, this, amount));\r\n    Deposit(token, msg.sender, amount, balances[token][msg.sender]);\r\n  }\r\n\r\n  function deposit() public payable {\r\n    balances[address(0)][msg.sender] = safeAdd(balances[address(0)][msg.sender], msg.value);\r\n    Deposit(address(0), msg.sender, msg.value, balances[address(0)][msg.sender]);\r\n  }\r\n\r\n  function withdraw(address token, uint amount, uint nonce, address _signer, uint8 v, bytes32 r, bytes32 s) public {\r\n    require(balances[token][msg.sender] >= amount);\r\n    require(signers[_signer]);\r\n    bytes32 hash = keccak256(this, msg.sender, token, amount, nonce);\r\n    require(isValidSignature(_signer, hash, v, r, s));\r\n    require(!withdraws[hash]);\r\n    withdraws[hash] = true;\r\n\r\n    balances[token][msg.sender] = safeSub(balances[token][msg.sender], amount);\r\n    if (token == address(0)) {\r\n      require(msg.sender.send(amount));\r\n    } else {\r\n      require(Token(token).transfer(msg.sender, amount));\r\n    }\r\n    Withdraw(token, msg.sender, amount, balances[token][msg.sender]);\r\n  }\r\n\r\n  function balanceOf(address token, address user) public view returns(uint) {\r\n    return balances[token][user];\r\n  }\r\n\r\n  function updateCancels(address user, uint256 nonce) public onlySigner {\r\n    require(nonce > cancels[user]);\r\n    cancels[user] = nonce;\r\n  }\r\n\r\n  function getMiningRate(address _quoteToken) public view returns(uint256) {\r\n    uint256 initialRate = miningRate[_quoteToken];\r\n    if (unmined > 500000000e18){\r\n      return initialRate;\r\n    } else if (unmined > 400000000e18 && unmined <= 500000000e18){\r\n      return initialRate * 9e17 / 1e18;\r\n    } else if (unmined > 300000000e18 && unmined <= 400000000e18){\r\n      return initialRate * 8e17 / 1e18;\r\n    } else if (unmined > 200000000e18 && unmined <= 300000000e18){\r\n      return initialRate * 7e17 / 1e18;\r\n    } else if (unmined > 100000000e18 && unmined <= 200000000e18){\r\n      return initialRate * 6e17 / 1e18;\r\n    } else if(unmined <= 100000000e18) {\r\n      return initialRate * 5e17 / 1e18;\r\n    }\r\n  }\r\n\r\n  function trade(\r\n      address[5] addrs,\r\n      uint[11] vals,\r\n      uint8[3] v,\r\n      bytes32[6] rs\r\n    ) public onlyNotPaused\r\n    returns (bool)\r\n\r\n    // addrs:\r\n    // addrs[0] baseToken\r\n    // addrs[1] quoteToken\r\n    // addrs[2] buyer\r\n    // addrs[3] seller\r\n    // addrs[4] signer\r\n\r\n    // vals:\r\n    // vals[0] buyVolume\r\n    // vals[1] buyFund\r\n    // vals[2] buyNonce\r\n\r\n    // vals[3] sellVolume\r\n    // vals[4] sellFund\r\n    // vals[5] sellNonce\r\n\r\n    // vals[6] tradeVolume\r\n    // vals[7] tradeFund\r\n    // vals[8] tradeNonce\r\n\r\n    // vals[9] buyerFee\r\n    // vals[10] sellerFee\r\n\r\n    // v:\r\n    // v[0] buyV\r\n    // v[1] sellV\r\n    // v[2] tradeV\r\n\r\n    // rs:\r\n    // rs[0] buyR\r\n    // rs[1] buyS\r\n    // rs[2] sellR\r\n    // rs[3] sellS\r\n    // rs[4] tradeR\r\n    // rs[5] tradeS\r\n  {\r\n    require(signers[addrs[4]]);\r\n    require(cancels[addrs[2]] < vals[2]);\r\n    require(cancels[addrs[3]] < vals[5]);\r\n\r\n    require(vals[6] > 0 && vals[7] > 0 && vals[8] > 0);\r\n    require(vals[1] >= vals[7] && vals[4] >= vals[7]);\r\n    require(msg.sender == addrs[2] || msg.sender == addrs[3] || msg.sender == addrs[4]);\r\n\r\n    bytes32 buyHash = keccak256(address(this), addrs[0], addrs[1], addrs[2], vals[0], vals[1], vals[2]);\r\n    bytes32 sellHash = keccak256(address(this), addrs[0], addrs[1], addrs[3], vals[3], vals[4], vals[5]);\r\n\r\n    require(isValidSignature(addrs[2], buyHash, v[0], rs[0], rs[1]));\r\n    require(isValidSignature(addrs[3], sellHash, v[1], rs[2], rs[3]));\r\n\r\n    bytes32 tradeHash = keccak256(this, buyHash, sellHash, addrs[4], vals[6], vals[7], vals[8], vals[9], vals[10]);\r\n    require(isValidSignature(addrs[4], tradeHash, v[2], rs[4], rs[5]));\r\n    \r\n    require(!traded[tradeHash]);\r\n    traded[tradeHash] = true;\r\n    \r\n    require(safeAdd(orderFills[buyHash], vals[6]) <= vals[0]);\r\n    require(safeAdd(orderFills[sellHash], vals[6]) <= vals[3]);\r\n\r\n    // balances[quoteToken][buyer] > tradeFund\r\n    require(balances[addrs[1]][addrs[2]] >= vals[7]);\r\n\r\n    // balances[quoteToken][buyer] -= tradeFund\r\n    balances[addrs[1]][addrs[2]] = safeSub(balances[addrs[1]][addrs[2]], vals[7]);\r\n\r\n    // balances[baseToken][seller] > tradeVolume\r\n    require(balances[addrs[0]][addrs[3]] >= vals[6]);\r\n\r\n    // balances[baseToken][seller] -= tradeVolume\r\n    balances[addrs[0]][addrs[3]] = safeSub(balances[addrs[0]][addrs[3]], vals[6]);\r\n\r\n    // balances[baseToken][buyer] += tradeVolume - tradeVolume * buyFee\r\n    balances[addrs[0]][addrs[2]] = safeAdd(balances[addrs[0]][addrs[2]], safeSub(vals[6], (safeMul(vals[6], vals[9]) / 1 ether)));\r\n\r\n    // balances[quoteToken][seller] += tradeFund - tradeFund * sellFee\r\n    balances[addrs[1]][addrs[3]] = safeAdd(balances[addrs[1]][addrs[3]], safeSub(vals[7], (safeMul(vals[7], vals[10]) / 1 ether)));\r\n    \r\n    balances[addrs[0]][feeAccount] = safeAdd(balances[addrs[0]][feeAccount], safeMul(vals[6], vals[9]) / 1 ether);\r\n    balances[addrs[1]][feeAccount] = safeAdd(balances[addrs[1]][feeAccount], safeMul(vals[7], vals[10]) / 1 ether);\r\n\r\n    orderFills[buyHash] = safeAdd(orderFills[buyHash], vals[6]);\r\n    orderFills[sellHash] = safeAdd(orderFills[sellHash], vals[6]);\r\n\r\n    Trade(addrs[0], addrs[1], vals[6], vals[7], vals[8], addrs[2], addrs[3]);\r\n\r\n    // Reward BEYs to buyer and seller\r\n    if(unmined > 0) {\r\n      if(miningRate[addrs[1]] > 0){\r\n        uint256 minedBEY = safeMul(safeMul(vals[7], getMiningRate(addrs[1])), 2) / (1 ether);\r\n        if(unmined > minedBEY) {\r\n          mined[addrs[2]] = safeAdd(mined[addrs[2]], safeSub(minedBEY, minedBEY / 2));\r\n          mined[addrs[3]] = safeAdd(mined[addrs[3]], minedBEY / 2);\r\n          unmined = safeSub(unmined, minedBEY);\r\n        } else {\r\n          mined[addrs[2]] = safeAdd(mined[addrs[2]], safeSub(unmined, unmined / 2));\r\n          mined[addrs[3]] = safeAdd(mined[addrs[3]], unmined / 2);\r\n          unmined = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function claim() public returns(bool) {\r\n    require(mined[msg.sender] > 0);\r\n    require(BEY != address(0));\r\n    uint256 amount = mined[msg.sender];\r\n    mined[msg.sender] = 0;\r\n    require(Token(BEY).transfer(msg.sender, amount));\r\n    Claim(msg.sender, amount);\r\n    return true;\r\n  }\r\n\r\n  function claimByTeam() public onlyOwner returns(bool) {\r\n    uint256 totalMined = safeSub(totalForMining, unmined);\r\n    require(totalMined > 0);\r\n    uint256 released = safeMul(teamLocked, totalMined) / totalForMining;\r\n    uint256 amount = safeSub(released, teamClaimed);\r\n    require(amount > 0);\r\n    teamClaimed = released;\r\n    require(Token(BEY).transfer(msg.sender, amount));\r\n    Claim(msg.sender, amount);\r\n    return true;\r\n  }\r\n\r\n  function cancel(\r\n    address baseToken, \r\n    address quoteToken, \r\n    address user,\r\n    uint volume,\r\n    uint fund,\r\n    uint nonce,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s) public onlySigner returns(bool)\r\n  {\r\n\r\n    bytes32 hash = keccak256(this, baseToken, quoteToken, user, volume, fund, nonce);\r\n    require(isValidSignature(user, hash, v, r, s));\r\n    orderFills[hash] = volume;\r\n    Cancel(user, hash, nonce);\r\n    return true;\r\n  }\r\n  \r\n  function isValidSignature(\r\n        address signer,\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s)\r\n        public\r\n        pure\r\n        returns (bool)\r\n  {\r\n    return signer == ecrecover(\r\n      keccak256(\"\\x19Ethereum Signed Message:\\n32\", hash),\r\n      v,\r\n      r,\r\n      s\r\n    );\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_quoteToken\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setMiningRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unmined\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamClaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addrs\",\"type\":\"address[5]\"},{\"name\":\"vals\",\"type\":\"uint256[11]\"},{\"name\":\"v\",\"type\":\"uint8[3]\"},{\"name\":\"rs\",\"type\":\"bytes32[6]\"}],\"name\":\"trade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"baseToken\",\"type\":\"address\"},{\"name\":\"quoteToken\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"volume\",\"type\":\"uint256\"},{\"name\":\"fund\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mined\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newFeeAccount\",\"type\":\"address\"}],\"name\":\"setFeeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cancels\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"miningRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBEY\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"signer\",\"type\":\"address\"},{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BEY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimByTeam\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_quoteToken\",\"type\":\"address\"}],\"name\":\"getMiningRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"updateCancels\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalForMining\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"traded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"_signer\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdraws\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orderFills\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_feeAccount\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"volume\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fund\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"}]","ContractName":"BitEyeExchange","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006f56cc5a19bd3bff23c7cab0120a77a514f2414d","Library":"","SwarmSource":"bzzr://66eb19dd24c29df5a54d65dddbac639c6807599cdca545cc8428f0a625ebc5c0"}]}