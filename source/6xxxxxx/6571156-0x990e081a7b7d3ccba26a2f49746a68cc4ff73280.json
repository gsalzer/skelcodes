{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    uint256 totalSupply_;\r\n\r\n    /**\r\n    * dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * dev Transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0), \"Recipient address is zero address(0). Check the address again.\");\r\n        require(_value <= balances[msg.sender], \"The balance of account is insufficient.\");\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n    public view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n    public returns (bool);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/issues/20\r\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n    /**\r\n     * dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        require(_to != address(0), \"Recipient address is zero address(0). Check the address again.\");\r\n        require(_value <= balances[_from], \"The balance of account is insufficient.\");\r\n        require(_value <= allowed[_from][msg.sender], \"Insufficient tokens approved from account owner.\");\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    )\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(\r\n        address _spender,\r\n        uint256 _addedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        allowed[msg.sender][_spender] = (\r\n        allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(\r\n        address _spender,\r\n        uint256 _subtractedValue\r\n    )\r\n    public\r\n    returns (bool)\r\n    {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param addr address to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title MultiOwnable\r\n * dev\r\n */\r\ncontract MultiOwnable {\r\n    using SafeMath for uint256;\r\n\r\n    address public root; // 혹시 몰라 준비해둔 superOwner 의 백업. 하드웨어 월렛 주소로 세팅할 예정.\r\n    address public superOwner;\r\n    mapping (address => bool) public owners;\r\n    address[] public ownerList;\r\n\r\n    // for changeSuperOwnerByDAO\r\n    // mapping(address => mapping (address => bool)) public preSuperOwnerMap;\r\n    mapping(address => address) public candidateSuperOwnerMap;\r\n\r\n\r\n    event ChangedRoot(address newRoot);\r\n    event ChangedSuperOwner(address newSuperOwner);\r\n    event AddedNewOwner(address newOwner);\r\n    event DeletedOwner(address deletedOwner);\r\n\r\n    constructor() public {\r\n        root = msg.sender;\r\n        superOwner = msg.sender;\r\n        owners[root] = true;\r\n\r\n        ownerList.push(msg.sender);\r\n\r\n    }\r\n\r\n    modifier onlyRoot() {\r\n        require(msg.sender == root, \"Root privilege is required.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlySuperOwner() {\r\n        require(msg.sender == superOwner, \"SuperOwner priviledge is required.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owners[msg.sender], \"Owner priviledge is required.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * dev root 교체 (root 는 root 와 superOwner 를 교체할 수 있는 권리가 있다.)\r\n     * dev 기존 루트가 관리자에서 지워지지 않고, 새 루트가 자동으로 관리자에 등록되지 않음을 유의!\r\n     */\r\n    function changeRoot(address newRoot) onlyRoot public returns (bool) {\r\n        require(newRoot != address(0), \"This address to be set is zero address(0). Check the input address.\");\r\n\r\n        root = newRoot;\r\n\r\n        emit ChangedRoot(newRoot);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * dev superOwner 교체 (root 는 root 와 superOwner 를 교체할 수 있는 권리가 있다.)\r\n     * dev 기존 superOwner 가 관리자에서 지워지지 않고, 새 superOwner 가 자동으로 관리자에 등록되지 않음을 유의!\r\n     */\r\n    function changeSuperOwner(address newSuperOwner) onlyRoot public returns (bool) {\r\n        require(newSuperOwner != address(0), \"This address to be set is zero address(0). Check the input address.\");\r\n\r\n        superOwner = newSuperOwner;\r\n\r\n        emit ChangedSuperOwner(newSuperOwner);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * dev owner 들의 1/2 초과가 합의하면 superOwner 를 교체할 수 있다.\r\n     */\r\n    function changeSuperOwnerByDAO(address newSuperOwner) onlyOwner public returns (bool) {\r\n        require(newSuperOwner != address(0), \"This address to be set is zero address(0). Check the input address.\");\r\n        require(newSuperOwner != candidateSuperOwnerMap[msg.sender], \"You have already voted for this account.\");\r\n\r\n        candidateSuperOwnerMap[msg.sender] = newSuperOwner;\r\n\r\n        uint8 votingNumForSuperOwner = 0;\r\n        uint8 i = 0;\r\n\r\n        for (i = 0; i < ownerList.length; i++) {\r\n            if (candidateSuperOwnerMap[ownerList[i]] == newSuperOwner)\r\n                votingNumForSuperOwner++;\r\n        }\r\n\r\n        if (votingNumForSuperOwner > ownerList.length / 2) { // 과반수 이상이면 DAO 성립 => superOwner 교체\r\n            superOwner = newSuperOwner;\r\n\r\n            // 초기화\r\n            for (i = 0; i < ownerList.length; i++) {\r\n                delete candidateSuperOwnerMap[ownerList[i]];\r\n            }\r\n\r\n            emit ChangedSuperOwner(newSuperOwner);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function newOwner(address owner) onlySuperOwner public returns (bool) {\r\n        require(owner != address(0), \"This address to be set is zero address(0). Check the input address.\");\r\n        require(!owners[owner], \"This address is already registered.\");\r\n\r\n        owners[owner] = true;\r\n        ownerList.push(owner);\r\n\r\n        emit AddedNewOwner(owner);\r\n        return true;\r\n    }\r\n\r\n    function deleteOwner(address owner) onlySuperOwner public returns (bool) {\r\n        require(owners[owner], \"This input address is not a super owner.\");\r\n        delete owners[owner];\r\n\r\n        for (uint256 i = 0; i < ownerList.length; i++) {\r\n            if (ownerList[i] == owner) {\r\n                ownerList[i] = ownerList[ownerList.length.sub(1)];\r\n                ownerList.length = ownerList.length.sub(1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit DeletedOwner(owner);\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Lockable token\r\n */\r\ncontract LockableToken is StandardToken, MultiOwnable {\r\n    bool public locked = true;\r\n    uint256 public constant LOCK_MAX = uint256(-1);\r\n\r\n    /**\r\n     * dev 락 상태에서도 거래 가능한 언락 계정\r\n     */\r\n    mapping(address => bool) public unlockAddrs;\r\n\r\n    /**\r\n     * dev 계정 별로 lock value 만큼 잔고가 잠김\r\n     * dev - 값이 0 일 때 : 잔고가 0 이어도 되므로 제한이 없는 것임.\r\n     * dev - 값이 LOCK_MAX 일 때 : 잔고가 uint256 의 최대값이므로 아예 잠긴 것임.\r\n     */\r\n    mapping(address => uint256) public lockValues;\r\n\r\n    event Locked(bool locked, string note);\r\n    event LockedTo(address indexed addr, bool locked, string note);\r\n    event SetLockValue(address indexed addr, uint256 value, string note);\r\n\r\n    constructor() public {\r\n        unlockTo(msg.sender,  \"\");\r\n    }\r\n\r\n    modifier checkUnlock (address addr, uint256 value) {\r\n        require(!locked || unlockAddrs[addr], \"The account is currently locked.\");\r\n        require(balances[addr].sub(value) >= lockValues[addr], \"Transferable limit exceeded. Check the status of the lock value.\");\r\n        _;\r\n    }\r\n\r\n    function lock(string note) onlyOwner public {\r\n        locked = true;\r\n        emit Locked(locked, note);\r\n    }\r\n\r\n    function unlock(string note) onlyOwner public {\r\n        locked = false;\r\n        emit Locked(locked, note);\r\n    }\r\n\r\n    function lockTo(address addr, string note) onlyOwner public {\r\n        setLockValue(addr, LOCK_MAX, note);\r\n        unlockAddrs[addr] = false;\r\n\r\n        emit LockedTo(addr, true, note);\r\n    }\r\n\r\n    function unlockTo(address addr, string note) onlyOwner public {\r\n        if (lockValues[addr] == LOCK_MAX)\r\n            setLockValue(addr, 0, note);\r\n        unlockAddrs[addr] = true;\r\n\r\n        emit LockedTo(addr, false, note);\r\n    }\r\n\r\n    function setLockValue(address addr, uint256 value, string note) onlyOwner public {\r\n        lockValues[addr] = value;\r\n        emit SetLockValue(addr, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 이체 가능 금액을 조회한다.\r\n     */\r\n    function getMyUnlockValue() public view returns (uint256) {\r\n        address addr = msg.sender;\r\n        if ((!locked || unlockAddrs[addr]) && balances[addr] > lockValues[addr])\r\n            return balances[addr].sub(lockValues[addr]);\r\n        else\r\n            return 0;\r\n    }\r\n\r\n    function transfer(address to, uint256 value) checkUnlock(msg.sender, value) public returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) checkUnlock(from, value) public returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n}\r\n\r\n/**\r\n * @title DelayLockableToken\r\n * dev 보안 차원에서 본인 계좌 잔고에 lock 을 걸 수 있다. 잔고 제한 기준을 낮추면 적용되기까지 12시간을 기다려야 한다.\r\n */\r\ncontract DelayLockableToken is LockableToken {\r\n    mapping(address => uint256) public delayLockValues;\r\n    mapping(address => uint256) public delayLockBeforeValues;\r\n    mapping(address => uint256) public delayLockTimes;\r\n\r\n    event SetDelayLockValue(address indexed addr, uint256 value, uint256 time);\r\n\r\n    modifier checkDelayUnlock (address addr, uint256 value) {\r\n        if (delayLockTimes[msg.sender] <= now) {\r\n            require (balances[addr].sub(value) >= delayLockValues[addr], \"Transferable limit exceeded. Change the balance lock value first and then use it\");\r\n        } else {\r\n            require (balances[addr].sub(value) >= delayLockBeforeValues[addr], \"Transferable limit exceeded. Please note that the residual lock value has changed and it will take 12 hours to apply.\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * dev 자신의 계좌에 잔고 제한을 건다. 더 크게 걸 땐 바로 적용되고, 더 작게 걸 땐 12시간 이후에 변경된다.\r\n     */\r\n    function delayLock(uint256 value) public returns (bool) {\r\n        require (value <= balances[msg.sender], \"Your balance is insufficient.\");\r\n\r\n        if (value >= delayLockValues[msg.sender])\r\n            delayLockTimes[msg.sender] = now;\r\n        else {\r\n            require (delayLockTimes[msg.sender] <= now, \"The remaining money in the account cannot be unlocked continuously. You cannot renew until 12 hours after the first run.\");\r\n            delayLockTimes[msg.sender] = now + 12 hours;\r\n            delayLockBeforeValues[msg.sender] = delayLockValues[msg.sender];\r\n        }\r\n\r\n        delayLockValues[msg.sender] = value;\r\n\r\n        emit SetDelayLockValue(msg.sender, value, delayLockTimes[msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * dev 자신의 계좌의 잔고 제한을 푼다.\r\n     */\r\n    function delayUnlock() public returns (bool) {\r\n        return delayLock(0);\r\n    }\r\n\r\n    /**\r\n     * dev 이체 가능 금액을 조회한다.\r\n     */\r\n    function getMyUnlockValue() public view returns (uint256) {\r\n        uint256 myUnlockValue;\r\n        address addr = msg.sender;\r\n        if (delayLockTimes[addr] <= now) {\r\n            myUnlockValue = balances[addr].sub(delayLockValues[addr]);\r\n        } else {\r\n            myUnlockValue = balances[addr].sub(delayLockBeforeValues[addr]);\r\n        }\r\n        \r\n        uint256 superUnlockValue = super.getMyUnlockValue();\r\n\r\n        if (myUnlockValue > superUnlockValue)\r\n            return superUnlockValue;\r\n        else\r\n            return myUnlockValue;\r\n    }    \r\n\r\n    function transfer(address to, uint256 value) checkDelayUnlock(msg.sender, value) public returns (bool) {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) checkDelayUnlock(from, value) public returns (bool) {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n}\r\n\r\n/**\r\n * @title KSCBaseToken\r\n * dev 트랜잭션 실행 시 메모를 남길 수 있도록 하였음.\r\n */\r\ncontract KSCBaseToken is DelayLockableToken {\r\n    event KSCTransfer(address indexed from, address indexed to, uint256 value, string note);\r\n    event KSCTransferFrom(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\r\n    event KSCApproval(address indexed owner, address indexed spender, uint256 value, string note);\r\n\r\n    event KSCMintTo(address indexed controller, address indexed to, uint256 amount, string note);\r\n    event KSCBurnFrom(address indexed controller, address indexed from, uint256 value, string note);\r\n\r\n    event KSCBurnWhenMoveToMainnet(address indexed controller, address indexed from, uint256 value, string note);\r\n\r\n    event KSCSell(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\r\n    event KSCSellByOtherCoin(address indexed owner, address indexed spender, address indexed to, uint256 value,  uint256 processIdHash, uint256 userIdHash, string note);\r\n\r\n    event KSCTransferToTeam(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\r\n    event KSCTransferToPartner(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\r\n\r\n    event KSCTransferToEcosystem(address indexed owner, address indexed spender, address indexed to, uint256 value, uint256 processIdHash, uint256 userIdHash, string note);\r\n    event KSCTransferToBounty(address indexed owner, address indexed spender, address indexed to, uint256 value, uint256 processIdHash, uint256 userIdHash, string note);\r\n\r\n    // ERC20 함수들을 오버라이딩하여 super 로 올라가지 않고 무조건 ksc~ 함수로 지나가게 한다.\r\n    function transfer(address to, uint256 value) public returns (bool ret) {\r\n        return kscTransfer(to, value, \"\");\r\n    }\r\n\r\n    function kscTransfer(address to, uint256 value, string note) public returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\r\n\r\n        ret = super.transfer(to, value);\r\n        emit KSCTransfer(msg.sender, to, value, note);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        return kscTransferFrom(from, to, value, \"\");\r\n    }\r\n\r\n    function kscTransferFrom(address from, address to, uint256 value, string note) public returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit KSCTransferFrom(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        return kscApprove(spender, value, \"\");\r\n    }\r\n\r\n    function kscApprove(address spender, uint256 value, string note) public returns (bool ret) {\r\n        ret = super.approve(spender, value);\r\n        emit KSCApproval(msg.sender, spender, value, note);\r\n    }\r\n\r\n    function increaseApproval(address spender, uint256 addedValue) public returns (bool) {\r\n        return kscIncreaseApproval(spender, addedValue, \"\");\r\n    }\r\n\r\n    function kscIncreaseApproval(address spender, uint256 addedValue, string note) public returns (bool ret) {\r\n        ret = super.increaseApproval(spender, addedValue);\r\n        emit KSCApproval(msg.sender, spender, allowed[msg.sender][spender], note);\r\n    }\r\n\r\n    function decreaseApproval(address spender, uint256 subtractedValue) public returns (bool) {\r\n        return kscDecreaseApproval(spender, subtractedValue, \"\");\r\n    }\r\n\r\n    function kscDecreaseApproval(address spender, uint256 subtractedValue, string note) public returns (bool ret) {\r\n        ret = super.decreaseApproval(spender, subtractedValue);\r\n        emit KSCApproval(msg.sender, spender, allowed[msg.sender][spender], note);\r\n    }\r\n\r\n    /**\r\n     * dev 신규 화폐 발행. 반드시 이유를 메모로 남겨라.\r\n     */\r\n    function mintTo(address to, uint256 amount) internal returns (bool) {\r\n        require(to != address(0x0), \"This address to be set is zero address(0). Check the input address.\");\r\n\r\n        totalSupply_ = totalSupply_.add(amount);\r\n        balances[to] = balances[to].add(amount);\r\n\r\n        emit Transfer(address(0), to, amount);\r\n        return true;\r\n    }\r\n\r\n    function kscMintTo(address to, uint256 amount, string note) onlyOwner public returns (bool ret) {\r\n        ret = mintTo(to, amount);\r\n        emit KSCMintTo(msg.sender, to, amount, note);\r\n    }\r\n\r\n    /**\r\n     * dev 화폐 소각. 반드시 이유를 메모로 남겨라.\r\n     */\r\n    function burnFrom(address from, uint256 value) internal returns (bool) {\r\n        require(value <= balances[from], \"Your balance is insufficient.\");\r\n\r\n        balances[from] = balances[from].sub(value);\r\n        totalSupply_ = totalSupply_.sub(value);\r\n\r\n        emit Transfer(from, address(0), value);\r\n        return true;\r\n    }\r\n\r\n    function kscBurnFrom(address from, uint256 value, string note) onlyOwner public returns (bool ret) {\r\n        ret = burnFrom(from, value);\r\n        emit KSCBurnFrom(msg.sender, from, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 메인넷으로 이동하며 화폐 소각.\r\n     */\r\n    function kscBurnWhenMoveToMainnet(address burner, uint256 value, string note) onlyOwner public returns (bool ret) {\r\n        ret = burnFrom(burner, value);\r\n        emit KSCBurnWhenMoveToMainnet(msg.sender, burner, value, note);\r\n    }\r\n\r\n    function kscBatchBurnWhenMoveToMainnet(address[] burners, uint256[] values, string note) onlyOwner public returns (bool ret) {\r\n        uint256 length = burners.length;\r\n        require(length == values.length, \"The size of \\'burners\\' and \\'values\\' array is different.\");\r\n\r\n        ret = true;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            ret = ret && kscBurnWhenMoveToMainnet(burners[i], values[i], note);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dev 이더로 KSC 를 구입하는 경우\r\n     */\r\n    function kscSell(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string note\r\n    ) onlyOwner public returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit KSCSell(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 비트코인 등의 다른 코인으로 KSC 를 구입하는 경우\r\n     * dev EOA 가 트랜잭션을 일으켜서 처리해야 하기 때문에 다계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function kscBatchSellByOtherCoin(\r\n        address from,\r\n        address[] to,\r\n        uint256[] values,\r\n        uint256 processIdHash,\r\n        uint256[] userIdHash,\r\n        string note\r\n    ) onlyOwner public returns (bool ret) {\r\n        uint256 length = to.length;\r\n        require(length == values.length, \"The size of \\'to\\' and \\'values\\' array is different.\");\r\n        require(length == userIdHash.length, \"The size of \\'to\\' and \\'userIdHash\\' array is different.\");\r\n\r\n        ret = true;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            require(to[i] != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\r\n\r\n            ret = ret && super.transferFrom(from, to[i], values[i]);\r\n            emit KSCSellByOtherCoin(from, msg.sender, to[i], values[i], processIdHash, userIdHash[i], note);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dev 팀에게 전송하는 경우\r\n     */\r\n    function kscTransferToTeam(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string note\r\n    ) onlyOwner public returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit KSCTransferToTeam(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 파트너 및 어드바이저에게 전송하는 경우\r\n     */\r\n    function kscTransferToPartner(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        string note\r\n    ) onlyOwner public returns (bool ret) {\r\n        require(to != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\r\n\r\n        ret = super.transferFrom(from, to, value);\r\n        emit KSCTransferToPartner(from, msg.sender, to, value, note);\r\n    }\r\n\r\n    /**\r\n     * dev 에코시스템(커뮤니티 활동을 통한 보상 등)으로 KSC 지급\r\n     * dev EOA 가 트랜잭션을 일으켜서 처리해야 하기 때문에 다계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function kscBatchTransferToEcosystem(\r\n        address from, address[] to,\r\n        uint256[] values,\r\n        uint256 processIdHash,\r\n        uint256[] userIdHash,\r\n        string note\r\n    ) onlyOwner public returns (bool ret) {\r\n        uint256 length = to.length;\r\n        require(length == values.length, \"The size of \\'to\\' and \\'values\\' array is different.\");\r\n        require(length == userIdHash.length, \"The size of \\'to\\' and \\'userIdHash\\' array is different.\");\r\n\r\n        ret = true;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            require(to[i] != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\r\n\r\n            ret = ret && super.transferFrom(from, to[i], values[i]);\r\n            emit KSCTransferToEcosystem(from, msg.sender, to[i], values[i], processIdHash, userIdHash[i], note);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dev 바운티 참여자에게 KSC 지급\r\n     * dev EOA 가 트랜잭션을 일으켜서 처리해야 하기 때문에 다계좌를 기준으로 한다. (가스비 아끼기 위함)\r\n     */\r\n    function kscBatchTransferToBounty(\r\n        address from,\r\n        address[] to,\r\n        uint256[] values,\r\n        uint256 processIdHash,\r\n        uint256[] userIdHash,\r\n        string note\r\n    ) onlyOwner public returns (bool ret) {\r\n        uint256 length = to.length;\r\n        require(to.length == values.length, \"The size of \\'to\\' and \\'values\\' array is different.\");\r\n\r\n        ret = true;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            require(to[i] != address(this), \"The receive address is the Contact Address of KStarCoin. You cannot send money to this address.\");\r\n\r\n            ret = ret && super.transferFrom(from, to[i], values[i]);\r\n            emit KSCTransferToBounty(from, msg.sender, to[i], values[i], processIdHash, userIdHash[i], note);\r\n        }\r\n    }\r\n\r\n    function destroy() onlyRoot public {\r\n        selfdestruct(root);\r\n    }\r\n}\r\n\r\n/**\r\n * @title KStarCoin\r\n */\r\ncontract KStarCoin is KSCBaseToken {\r\n    using AddressUtils for address;\r\n\r\n    event TransferedToKSCDapp(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        address indexed to, uint256 value, KSCReceiver.KSCReceiveType receiveType);\r\n\r\n    string public constant name = \"KStarCoin\";\r\n    string public constant symbol = \"KSC\";\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 1e9 * (10 ** uint256(decimals));\r\n\r\n    constructor() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n    }\r\n\r\n    function kscTransfer(address to, uint256 value, string note) public returns (bool ret) {\r\n        ret = super.kscTransfer(to, value, note);\r\n        postTransfer(msg.sender, msg.sender, to, value, KSCReceiver.KSCReceiveType.KSC_TRANSFER);\r\n    }\r\n\r\n    function kscTransferFrom(address from, address to, uint256 value, string note) public returns (bool ret) {\r\n        ret = super.kscTransferFrom(from, to, value, note);\r\n        postTransfer(from, msg.sender, to, value, KSCReceiver.KSCReceiveType.KSC_TRANSFER);\r\n    }\r\n\r\n    function postTransfer(address owner, address spender, address to, uint256 value, KSCReceiver.KSCReceiveType receiveType) internal returns (bool) {\r\n        if (to.isContract()) {\r\n            bool callOk = address(to).call(bytes4(keccak256(\"onKSCReceived(address,address,uint256,uint8)\")), owner, spender, value, receiveType);\r\n            if (callOk) {\r\n                emit TransferedToKSCDapp(owner, spender, to, value, receiveType);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function kscMintTo(address to, uint256 amount, string note) onlyOwner public returns (bool ret) {\r\n        ret = super.kscMintTo(to, amount, note);\r\n        postTransfer(0x0, msg.sender, to, amount, KSCReceiver.KSCReceiveType.KSC_MINT);\r\n    }\r\n\r\n    function kscBurnFrom(address from, uint256 value, string note) onlyOwner public returns (bool ret) {\r\n        ret = super.kscBurnFrom(from, value, note);\r\n        postTransfer(0x0, msg.sender, from, value, KSCReceiver.KSCReceiveType.KSC_BURN);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title KStarCoin Receiver\r\n */\r\ncontract KSCReceiver {\r\n    enum KSCReceiveType { KSC_TRANSFER, KSC_MINT, KSC_BURN }\r\n    function onKSCReceived(address owner, address spender, uint256 value, KSCReceiveType receiveType) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title KSCDappSample\r\n */\r\ncontract KSCDappSample is KSCReceiver {\r\n    event LogOnReceiveKSC(string message, address indexed owner, address indexed spender, uint256 value, KSCReceiveType receiveType);\r\n\r\n    function onKSCReceived(address owner, address spender, uint256 value, KSCReceiveType receiveType) public returns (bool) {\r\n        emit LogOnReceiveKSC(\"I receive KstarCoin.\", owner, spender, value, receiveType);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"unlockTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"owners\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"changeSuperOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burners\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscBatchBurnWhenMoveToMainnet\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscIncreaseApproval\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscTransferToTeam\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscApprove\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"processIdHash\",\"type\":\"uint256\"},{\"name\":\"userIdHash\",\"type\":\"uint256[]\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscBatchTransferToEcosystem\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayLockBeforeValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LOCK_MAX\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRoot\",\"type\":\"address\"}],\"name\":\"changeRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyUnlockValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockAddrs\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscTransferToPartner\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"candidateSuperOwnerMap\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"lockTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"burner\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscBurnWhenMoveToMainnet\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscTransfer\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"changeSuperOwnerByDAO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayLockTimes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscDecreaseApproval\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscBurnFrom\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"delayUnlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscTransferFrom\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscSell\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"deleteOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"setLockValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"processIdHash\",\"type\":\"uint256\"},{\"name\":\"userIdHash\",\"type\":\"uint256[]\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscBatchSellByOtherCoin\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"processIdHash\",\"type\":\"uint256\"},{\"name\":\"userIdHash\",\"type\":\"uint256[]\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscBatchTransferToBounty\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"note\",\"type\":\"string\"}],\"name\":\"kscMintTo\",\"outputs\":[{\"name\":\"ret\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"delayLock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayLockValues\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"receiveType\",\"type\":\"uint8\"}],\"name\":\"TransferedToKSCDapp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCTransferFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCMintTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCBurnFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCBurnWhenMoveToMainnet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"processIdHash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userIdHash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCSellByOtherCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCTransferToTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCTransferToPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"processIdHash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userIdHash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCTransferToEcosystem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"processIdHash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"userIdHash\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"KSCTransferToBounty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SetDelayLockValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"locked\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"locked\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"LockedTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"note\",\"type\":\"string\"}],\"name\":\"SetLockValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRoot\",\"type\":\"address\"}],\"name\":\"ChangedRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newSuperOwner\",\"type\":\"address\"}],\"name\":\"ChangedSuperOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"AddedNewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"deletedOwner\",\"type\":\"address\"}],\"name\":\"DeletedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"KStarCoin","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b35a1bd1a5a3dc92bc14f0ce2e27c5990c0013605b49adb54315e36894bc6c5e"}]}