{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.25;\r\n\r\ninterface Yrc20 {\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n}\r\n\r\ninterface YRC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract YBalanceChecker {\r\n    function check(address token) external view returns(uint a, uint b) {\r\n        if (uint(token)==0) {\r\n            b = msg.sender.balance;\r\n            a = address(this).balance;\r\n            return;\r\n        }\r\n        b = Yrc20(token).balanceOf(msg.sender);\r\n        a = Yrc20(token).allowance(msg.sender,this);\r\n    }\r\n}\r\n\r\ncontract HairyHoover is YBalanceChecker {\r\n    event Sucks(address indexed token, address sender, uint amount);\r\n    event Clean(address indexed token, address sender, uint amount);\r\n\r\n    function suckBalance(address token) external returns(uint a, uint b) {\r\n        assert(uint(token)!=0);\r\n        (a, b) = this.check(token);\r\n        b = Yrc20(token).balanceOf(msg.sender);\r\n        require(b>0, 'must have a balance');\r\n        a = Yrc20(token).allowance(msg.sender,this);\r\n        require(a>0, 'none approved');\r\n        if (a>=b) {\r\n            require(Yrc20(token).transferFrom(msg.sender,this,b), 'not approved');\r\n            emit Sucks(token, msg.sender, b);\r\n        }\r\n        else {\r\n            require(Yrc20(token).transferFrom(msg.sender,this,a), 'not approved');\r\n            emit Sucks(token, msg.sender, a);\r\n        }\r\n        counts[msg.sender]++;\r\n        participants[participantCount++] = msg.sender;\r\n    }\r\n    \r\n    function cleanBalance(address token) external returns(uint256 b) {\r\n        if (uint(token)==0) {\r\n            msg.sender.transfer(b = address(this).balance);\r\n            return;\r\n        }\r\n        b = Yrc20(token).balanceOf(this);\r\n        require(b>0, 'must have a balance');\r\n        require(Yrc20(token).transfer(msg.sender,b), 'transfer failed');\r\n        emit Clean(token, msg.sender, b);\r\n        if (counts[msg.sender]>1) {\r\n            counts[msg.sender]--;\r\n        }\r\n    }\r\n\r\n    mapping(address=>uint) public counts;\r\n    mapping(uint=>address) public participants;\r\n    uint public participantCount = 0;\r\n    function () external payable {}\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"counts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"suckBalance\",\"outputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"participantCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"cleanBalance\",\"outputs\":[{\"name\":\"b\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sucks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Clean\",\"type\":\"event\"}]","ContractName":"HairyHoover","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1bd84644c8b88dedd0247246696847e017037cdcb5c16b45085eed05f828769e"}]}