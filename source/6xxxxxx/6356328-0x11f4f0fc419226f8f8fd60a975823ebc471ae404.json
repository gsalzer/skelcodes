{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n\r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SupportsInterfaceWithLookup\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n\r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n\r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n\r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Contract is Ownable, SupportsInterfaceWithLookup {\r\n    /**\r\n     * @notice this.owner.selector ^ this.renounceOwnership.selector ^ this.transferOwnership.selector\r\n        ^ this.template.selector\r\n     */\r\n    bytes4 public constant InterfaceId_Contract = 0x6125ede5;\r\n\r\n    Template public template;\r\n\r\n    constructor(address _owner) public {\r\n        require(_owner != address(0));\r\n\r\n        template = Template(msg.sender);\r\n        owner = _owner;\r\n\r\n        _registerInterface(InterfaceId_Contract);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Template\r\n * @notice Template instantiates `Contract`s of the same form.\r\n */\r\ncontract Template is Ownable, SupportsInterfaceWithLookup {\r\n    /**\r\n     * @notice this.owner.selector ^ this.renounceOwnership.selector ^ this.transferOwnership.selector\r\n        ^ this.bytecodeHash.selector ^ this.price.selector ^ this.beneficiary.selector\r\n        ^ this.name.selector ^ this.description.selector ^ this.setNameAndDescription.selector\r\n        ^ this.instantiate.selector\r\n     */\r\n    bytes4 public constant InterfaceId_Template = 0xd48445ff;\r\n\r\n    mapping(string => string) nameOfLocale;\r\n    mapping(string => string) descriptionOfLocale;\r\n    /**\r\n     * @notice Hash of EVM bytecode to be instantiated.\r\n     */\r\n    bytes32 public bytecodeHash;\r\n    /**\r\n     * @notice Price to pay when instantiating\r\n     */\r\n    uint public price;\r\n    /**\r\n     * @notice Address to receive payment\r\n     */\r\n    address public beneficiary;\r\n\r\n    /**\r\n     * @notice Logged when a new `Contract` instantiated.\r\n     */\r\n    event Instantiated(address indexed creator, address indexed contractAddress);\r\n\r\n    /**\r\n     * @param _bytecodeHash Hash of EVM bytecode\r\n     * @param _price Price of instantiating in wei\r\n     * @param _beneficiary Address to transfer _price when instantiating\r\n     */\r\n    constructor(\r\n        bytes32 _bytecodeHash,\r\n        uint _price,\r\n        address _beneficiary\r\n    ) public {\r\n        bytecodeHash = _bytecodeHash;\r\n        price = _price;\r\n        beneficiary = _beneficiary;\r\n        if (price > 0) {\r\n            require(beneficiary != address(0));\r\n        }\r\n\r\n        _registerInterface(InterfaceId_Template);\r\n    }\r\n\r\n    /**\r\n     * @param _locale IETF language tag(https://en.wikipedia.org/wiki/IETF_language_tag)\r\n     * @return Name in `_locale`.\r\n     */\r\n    function name(string _locale) public view returns (string) {\r\n        return nameOfLocale[_locale];\r\n    }\r\n\r\n    /**\r\n     * @param _locale IETF language tag(https://en.wikipedia.org/wiki/IETF_language_tag)\r\n     * @return Description in `_locale`.\r\n     */\r\n    function description(string _locale) public view returns (string) {\r\n        return descriptionOfLocale[_locale];\r\n    }\r\n\r\n    /**\r\n     * @param _locale IETF language tag(https://en.wikipedia.org/wiki/IETF_language_tag)\r\n     * @param _name Name to set\r\n     * @param _description Description to set\r\n     */\r\n    function setNameAndDescription(string _locale, string _name, string _description) public onlyOwner {\r\n        nameOfLocale[_locale] = _name;\r\n        descriptionOfLocale[_locale] = _description;\r\n    }\r\n\r\n    /**\r\n     * @notice `msg.sender` is passed as first argument for the newly created `Contract`.\r\n     * @param _bytecode Bytecode corresponding to `bytecodeHash`\r\n     * @param _args If arguments where passed to this function, those will be appended to the arguments for `Contract`.\r\n     * @return Newly created contract account's address\r\n     */\r\n    function instantiate(bytes _bytecode, bytes _args) public payable returns (address contractAddress) {\r\n        require(bytecodeHash == keccak256(_bytecode));\r\n        bytes memory calldata = abi.encodePacked(_bytecode, _args);\r\n        assembly {\r\n            contractAddress := create(0, add(calldata, 0x20), mload(calldata))\r\n        }\r\n        if (contractAddress == address(0)) {\r\n            revert(\"Cannot instantiate contract\");\r\n        } else {\r\n            Contract c = Contract(contractAddress);\r\n            // InterfaceId_ERC165\r\n            require(c.supportsInterface(0x01ffc9a7));\r\n            // InterfaceId_Contract\r\n            require(c.supportsInterface(0x6125ede5));\r\n\r\n            if (price > 0) {\r\n                require(msg.value == price);\r\n                beneficiary.transfer(msg.value);\r\n            }\r\n            emit Instantiated(msg.sender, contractAddress);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Registry\r\n * @notice Registry maintains Contracts by version.\r\n */\r\ncontract Registry is Ownable {\r\n    bool opened;\r\n    string[] identifiers;\r\n    mapping(string => address) registrantOfIdentifier;\r\n    mapping(string => uint[]) versionsOfIdentifier;\r\n    mapping(string => mapping(uint => Template)) templateOfVersionOfIdentifier;\r\n\r\n    constructor(bool _opened) Ownable() public {\r\n        opened = _opened;\r\n    }\r\n\r\n    /**\r\n     * @notice Open the Registry so that anyone can register.\r\n     */\r\n    function open() onlyOwner public {\r\n        opened = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Registers a new `Template`.\r\n     * @param _identifier If any template was registered for the same identifier, the registrant of the templates must be the same.\r\n     * @param _version If any template was registered for the same identifier, new version must be greater than the old one.\r\n     * @param _template Template to be registered.\r\n     */\r\n    function register(string _identifier, uint _version, Template _template) public {\r\n        require(opened || msg.sender == owner);\r\n\r\n        // InterfaceId_ERC165\r\n        require(_template.supportsInterface(0x01ffc9a7));\r\n        // InterfaceId_Template\r\n        require(_template.supportsInterface(0xd48445ff));\r\n\r\n        address registrant = registrantOfIdentifier[_identifier];\r\n        require(registrant == address(0) || registrant == msg.sender, \"identifier already registered by another registrant\");\r\n        if (registrant == address(0)) {\r\n            identifiers.push(_identifier);\r\n            registrantOfIdentifier[_identifier] = msg.sender;\r\n        }\r\n\r\n        uint[] storage versions = versionsOfIdentifier[_identifier];\r\n        if (versions.length > 0) {\r\n            require(_version > versions[versions.length - 1], \"new version must be greater than old versions\");\r\n        }\r\n        versions.push(_version);\r\n        templateOfVersionOfIdentifier[_identifier][_version] = _template;\r\n    }\r\n\r\n    function numberOfIdentifiers() public view returns (uint size) {\r\n        return identifiers.length;\r\n    }\r\n\r\n    function identifierAt(uint _index) public view returns (string identifier) {\r\n        return identifiers[_index];\r\n    }\r\n\r\n    function versionsOf(string _identifier) public view returns (uint[] version) {\r\n        return versionsOfIdentifier[_identifier];\r\n    }\r\n\r\n    function templateOf(string _identifier, uint _version) public view returns (Template template) {\r\n        return templateOfVersionOfIdentifier[_identifier][_version];\r\n    }\r\n\r\n    function latestTemplateOf(string _identifier) public view returns (Template template) {\r\n        uint[] storage versions = versionsOfIdentifier[_identifier];\r\n        return templateOfVersionOfIdentifier[_identifier][versions[versions.length - 1]];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Token Registry\r\n * @notice `Template` to be registered must be a `TokenTemplate`.\r\n */\r\ncontract TokenRegistry is Registry(false) {\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"identifierAt\",\"outputs\":[{\"name\":\"identifier\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfIdentifiers\",\"outputs\":[{\"name\":\"size\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"string\"}],\"name\":\"latestTemplateOf\",\"outputs\":[{\"name\":\"template\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"string\"}],\"name\":\"versionsOf\",\"outputs\":[{\"name\":\"version\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"templateOf\",\"outputs\":[{\"name\":\"template\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identifier\",\"type\":\"string\"},{\"name\":\"_version\",\"type\":\"uint256\"},{\"name\":\"_template\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"TokenRegistry","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://249eca55a6401c9129103f4e1f7bdccda58b8f5f9b2cc3ec9dacac1798e1ce12"}]}