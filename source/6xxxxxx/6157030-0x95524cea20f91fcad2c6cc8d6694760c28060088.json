{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/**\r\n ZOMO 5D v2.6.8\r\n\r\n * This product is protected under license.  Any unauthorized copy, modification, or use is prohibited.\r\n\r\n**/\r\n\r\n\r\ncontract Z5Devents {\r\n\r\n\r\n    \r\n    event onNewName\r\n    (\r\n        uint256 indexed playerID,\r\n        address indexed playerAddress,\r\n        bytes32 indexed playerName,\r\n        bool isNewPlayer,\r\n        uint256 affiliateID,\r\n        address affiliateAddress,\r\n        bytes32 affiliateName,\r\n        uint256 amountPaid,\r\n        uint256 timeStamp\r\n    );\r\n    \r\n\r\n    event onEndTx\r\n    (\r\n       \r\n        bytes32 playerName,\r\n        address playerAddress,\r\n        uint256 ethIn,\r\n        uint256 keysBought,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 genAmount,\r\n        uint256 potAmount,\r\n        uint256 airDropPot,\r\n\t\tuint256 currentround\r\n    );\r\n    \r\n\t\r\n    event onWithdraw\r\n    (\r\n        uint256 indexed playerID,\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethOut,\r\n        uint256 timeStamp\r\n    );\r\n    \r\n\r\n    event onWithdrawAndDistribute\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethOut,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 genAmount\r\n    );\r\n    \r\n\r\n\t\r\n    event onBuyAndDistribute\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        uint256 ethIn,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 genAmount\r\n    );\r\n\r\n    event onReLoadAndDistribute\r\n    (\r\n        address playerAddress,\r\n        bytes32 playerName,\r\n        address winnerAddr,\r\n        bytes32 winnerName,\r\n        uint256 amountWon,\r\n        uint256 newPot,\r\n        uint256 genAmount\r\n    );\r\n    \r\n\r\n    event onAffiliatePayout\r\n    (\r\n        uint256 indexed affiliateID,\r\n        address affiliateAddress,\r\n        bytes32 affiliateName,\r\n        uint256 indexed roundID,\r\n        uint256 indexed buyerID,\r\n        uint256 amount,\r\n        uint256 timeStamp\r\n    );\r\n    \r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract ZoMo5D is Z5Devents \r\n{\r\n    using SafeMath for *;\r\n    using NameCheck for string;\r\n    using Z5DKeyCount for uint256;\r\n\t\r\n\r\n    string constant public name = \"ZoMo5D\";\r\n    string constant public symbol = \"Z5D\";\r\n\r\n   \r\n    uint256 constant private rndInit_ = 24 hours;\r\n    uint256 constant private rndInc_ = 30 seconds;              \r\n    uint256 constant private rndMax_ = 24 hours;                \r\n\tuint256 constant private betPre_ = 5 days;     \r\n\r\n\r\n\tuint256 public BetTime;\r\n\r\n\r\n\tuint256 public airDropPot_;            \r\n\tuint256 public comm; \r\n\tuint256 public lott;\r\n\t\r\n    uint256 public rID_;    \r\n\r\n\t\r\n\r\n\t\r\n    mapping (address => uint256) public pIDxAddr_;         \r\n    mapping (bytes32 => uint256) public pIDxName_;         \r\n    mapping (uint256 => Z5Ddatasets.Player) public plyr_;   \r\n    mapping (uint256 => mapping (uint256 => Z5Ddatasets.PlayerRounds)) public plyrRnds_;    \r\n    mapping (uint256 => mapping (bytes32 => bool)) public plyrNames_; \r\n\t\r\n\tuint256 public pID_;\r\n\t\r\n\tmapping (address => bool) internal team;\r\n\r\n\r\n    mapping (uint256 => Z5Ddatasets.Round) public round_;  \r\n    mapping (uint256 => uint256) public rndEth_;      \r\n\tmapping (uint256 => Z5Ddatasets.lotty) public Rndlotty;\r\n\r\n\t\r\n\tuint256 public lottrnd;\r\n\t\r\n    uint256 public fees_;       \r\n    uint256 public potSplit_;     \r\n\r\n\t\r\n\tZoMo5DInterface private Z5DToken = ZoMo5DInterface(0x8b4f4872434DB00eB34B9420946534179249d676);\r\n\t\r\n\t\r\n    constructor() public\r\n    {\r\n\t\t\r\n\t\t\r\n        fees_ = 59;  \r\n     \r\n        \r\n        potSplit_ = 25;  \r\n\t\t\r\n\t\tplyr_[1].addr = 0xEAc1b04cBdd484244fC0dB0A8BEdA6212fFb32b1;\r\n        plyr_[1].name = \"zomo5d\";\r\n        pIDxAddr_[0xEAc1b04cBdd484244fC0dB0A8BEdA6212fFb32b1] = 1;\r\n        pIDxName_[\"zomo5d\"] = 1;\r\n        plyrNames_[1][\"zomo5d\"] = true;\r\n        pID_++;\r\n        \r\n  \r\n\t\t\r\n\t\tteam[msg.sender] =true;\r\n\t\tteam[0x13856bc546DbDE959F45cC863BbeBd40b5e8cCc2] = true;\r\n\t\tteam[0xe418De1360a8e64de9468485F439B9174CE265a1] = true;\r\n\t\tteam[0x654DC353AF41Cc83Ae99Bd7F4d4733f2948adCED] = true;\r\n        team[0xEAc1b04cBdd484244fC0dB0A8BEdA6212fFb32b1] = true;\r\n\t\tteam[0x78Ac79844328Ca4d652bCCC5f49ff7C43dC7c25d] = true;\r\n\r\n\t\t\r\n    }    \r\n\t\r\n\t\r\n\tmodifier onlyowner()\r\n     {\r\n         require(team[msg.sender]==true);\r\n         _;\r\n     }\r\n\r\n    modifier isActivated() {\r\n        require(activated_ == true, \"not ready\"); \r\n        _;\r\n    }\r\n    \r\n    \r\n    modifier NotContract() {\r\n        address _addr = msg.sender;\r\n        uint256 _codeLength;\r\n        \r\n        assembly {_codeLength := extcodesize(_addr)}\r\n        require(_codeLength == 0, \"contract is not accepted\");\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier isWithinLimits(uint256 _eth) {\r\n        require(_eth >= 1000000000, \"not a valid currency\");\r\n        _;    \r\n    }\r\n    \r\n\t\r\n    function AirDistribute(uint256 _pID,uint256 amount_) onlyowner() public\r\n\t{\r\n\t\trequire(amount_<=airDropPot_);\r\n\t\tairDropPot_ = airDropPot_.sub(amount_);\r\n\t\tplyr_[_pID].win = (plyr_[_pID].win).add(amount_);\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tfunction CommDistribute(uint256 _pID,uint256 amount_) onlyowner() public\r\n\t{\r\n\t\trequire(amount_<=comm);\r\n\t\tcomm = comm.sub(amount_);\r\n\t\tplyr_[_pID].win = (plyr_[_pID].win).add(amount_);\r\n\t\t\r\n\t}\r\n\t\r\n\tfunction lottDistribute(uint256 _pID,uint256 amount_,uint256 Lottround) onlyowner() public\r\n\t{\r\n\t\t\r\n\t\trequire(amount_<=Rndlotty[Lottround].rndlott);\r\n\t\tRndlotty[Lottround].rndlott = (Rndlotty[Lottround].rndlott).sub(amount_);\r\n\t\tplyr_[_pID].win = (plyr_[_pID].win).add(amount_);\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\tfunction BetfromZ5D(uint256 amount_) isActivated() public\r\n\t{\r\n\t\trequire(amount_>0,\"amount_ should greater than 0\");\r\n\t\tuint256 _pID = pIDxAddr_[msg.sender];\r\n\t\trequire(_pID>0,\"you should regist pid first\");\r\n\t\tZ5DToken.AuthTransfer(msg.sender,amount_);\r\n\t\tplyr_[_pID].token = plyr_[_pID].token.add(amount_);\r\n\t\tBetCore(_pID,amount_);\t\t\r\n\t}\r\n\t\r\n\tevent BetTransfer(address indexed from, uint256 value, uint256 _round);\r\n\t\r\n\tfunction Betfromvault(uint256 amount_) isActivated() public\r\n\t{\r\n\t    \r\n\t\trequire(amount_>0,\"amount_ should greater than 0\");\r\n\t\tuint256 _pID = pIDxAddr_[msg.sender];\r\n\t\trequire(_pID>0,\"you should regist pid first\");\r\n\t\tupdateGenVault(_pID, plyr_[_pID].lrnd);\r\n\t\tuint256 TokenAmount = plyr_[_pID].token ;\r\n\t\t\r\n\t\trequire(TokenAmount>amount_,\"you don't have enough token\");\t\t\r\n\t\tBetCore(_pID,amount_);\t\r\n\t}\r\n\r\n\tfunction BetCore(uint256 _pID,uint256 amount_) private\r\n\t{\r\n\t\t//update last bet \r\n\t\tupdateBetVault(_pID);\r\n\t\tplyr_[_pID].bet = amount_.add(plyr_[_pID].bet);\r\n\t\tplyr_[_pID].token = plyr_[_pID].token.sub(amount_);\r\n\t\tplyr_[_pID].lrnd_lott = lottrnd;\r\n\t\t\r\n\t\tRndlotty[lottrnd].rndToken = Rndlotty[lottrnd].rndToken.add(amount_);\r\n\t\temit BetTransfer(plyr_[_pID].addr, amount_ , lottrnd);\r\n\t}\r\n\t\r\n\t\r\n\tfunction BetEnd() private\r\n\t{\r\n\t\t\r\n\t\tif \t(Rndlotty[lottrnd].rndToken > 0)\r\n\t\t{\r\n\t\t\tuint256 Betearn=lott.mul(3)/10;\r\n\t\t    Rndlotty[lottrnd].rndToken = Betearn/(Rndlotty[lottrnd].rndToken);\r\n\t\t\tRndlotty[lottrnd].rndlott = lott.mul(5)/10;\r\n\t\t    lott = lott.sub(Rndlotty[lottrnd].rndlott).sub(Betearn);\r\n\t\t\tlottrnd++;\r\n\t\t}\r\n\t\t\r\n\t\tif (round_[rID_].pot > 1000000000000000000000)\r\n\t\t{\r\n\t\t\tuint256 fornext = (round_[rID_].pot).mul(5)/1000;\r\n\t\t\tround_[rID_].pot = (round_[rID_].pot).sub(fornext);\r\n\t\t\tlott = lott.add(fornext);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\tfunction updateBetVault(uint256 _pID) private\r\n\t{\r\n\t\tuint256 _now = now;\r\n\t\t\r\n\t\tif (BetTime <_now)\r\n\t\t{\t\r\n\t\t\tBetTime = _now + betPre_;\r\n\t\t\tBetEnd();\t\r\n\t\t}\r\n\t\t\r\n\t\tuint256 lrnPlayed = plyr_[_pID].lrnd_lott;\r\n\t\t\r\n\t\t\r\n\t\tif (lrnPlayed>0 && lrnPlayed<lottrnd)\r\n\t\t{\r\n\t\t    uint256 lrnWin = (Rndlotty[lrnPlayed].rndToken).mul(plyr_[_pID].bet);\r\n\t\t    plyr_[_pID].bet = 0;\r\n\t\t\tplyr_[_pID].win = plyr_[_pID].win.add(lrnWin);\r\n\t\t\tplyr_[_pID].lrnd_lott = 0;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n    function() isActivated() NotContract() isWithinLimits(msg.value) public payable\r\n    {\r\n       \r\n        Z5Ddatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        buyCore(_pID, plyr_[_pID].laff, _eventData_);\r\n    }\r\n    \r\n    \r\n\t function GrabName(string _nameString) isActivated() NotContract() public payable\r\n\t {\r\n\t\t bytes32 _name = _nameString.nameCheck();\r\n\t\t \r\n\t\t require(msg.value >= 10000000000000000, \"not enouhgh for name registration\");\r\n\t\t uint256 _pID_name = pIDxName_[_name];\r\n\t\t address  _addr = msg.sender;\r\n\t\t uint256 _pID_add = pIDxAddr_[_addr];\r\n\t\t \r\n\t\t if (_pID_name!=0)\r\n\t\t {\r\n\t\t\trequire(plyrNames_[_pID_add][_name] ==true,\"name had been registered\");\r\n\t\t }\r\n\t\t \r\n\t\t if (_pID_add == 0)\r\n\t\t {\r\n\t\t\t pID_++;\r\n\t\t\t pIDxAddr_[_addr] = pID_;\r\n\r\n\t\t\t plyr_[pID_].addr = _addr;\r\n\t\t\t _pID_add = pID_;\r\n\r\n\t\t }\r\n\r\n\t\t pIDxName_[_name] = _pID_add;\r\n\t\t plyr_[_pID_add].name = _name;\r\n\t\t plyrNames_[_pID_add][_name] = true;\r\n\t\t Z5DToken.deposit.value(msg.value)();\r\n\r\n\t\t \r\n\t\t \r\n\t }\r\n\r\n\t \r\n    function buyXid(uint256 _affCode) isActivated() NotContract() isWithinLimits(msg.value) public payable\r\n    {\r\n        Z5Ddatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\r\n        \r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        \r\n        \r\n        if (_affCode == 0 || _affCode == _pID)\r\n        {\r\n\r\n            _affCode = plyr_[_pID].laff;\r\n       \r\n        } else if (_affCode != plyr_[_pID].laff) {\r\n            plyr_[_pID].laff = _affCode;\r\n        }\r\n \r\n\r\n        buyCore(_pID, _affCode, _eventData_);\r\n    }\r\n    \r\n    function buyXaddr(address _affCode) isActivated() NotContract() isWithinLimits(msg.value) public payable\r\n    {\r\n\r\n        Z5Ddatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\r\n        \r\n\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n\r\n        uint256 _affID;\r\n        if (_affCode == address(0) || _affCode == msg.sender)\r\n        {\r\n\r\n            _affID = plyr_[_pID].laff;\r\n        \r\n\r\n        } else {\r\n \r\n            _affID = pIDxAddr_[_affCode];\r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n\r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n        \r\n\r\n        buyCore(_pID, _affID, _eventData_);\r\n    }\r\n    \r\n    function buyXname(bytes32 _affCode) isActivated() NotContract() isWithinLimits(msg.value) public\r\n        payable\r\n    {\r\n        \r\n        Z5Ddatasets.EventReturns memory _eventData_ = determinePID(_eventData_);\r\n        \r\n\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        \r\n     \r\n        uint256 _affID;\r\n\r\n        if (_affCode == '' || _affCode == plyr_[_pID].name)\r\n        {\r\n\r\n            _affID = plyr_[_pID].laff;\r\n\r\n        } else {\r\n\r\n            _affID = pIDxName_[_affCode];\r\n            \r\n          \r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n        \r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n        \r\n   \r\n\r\n        \r\n    \r\n        buyCore(_pID, _affID, _eventData_);\r\n    }\r\n    \r\n   \r\n   \r\n   \r\n    function reLoadXid(uint256 _affCode, uint256 _eth) isActivated() NotContract() isWithinLimits(_eth) public\r\n    {\r\n      \r\n        Z5Ddatasets.EventReturns memory _eventData_;\r\n        \r\n       \r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        \r\n        \r\n        if (_affCode == 0 || _affCode == _pID)\r\n        {\r\n            \r\n            _affCode = plyr_[_pID].laff;\r\n            \r\n        \r\n        } else if (_affCode != plyr_[_pID].laff) {\r\n            \r\n            plyr_[_pID].laff = _affCode;\r\n        }\r\n\r\n\r\n\r\n        reLoadCore(_pID, _affCode, _eth, _eventData_);\r\n    }\r\n    \r\n    function reLoadXaddr(address _affCode, uint256 _eth)\r\n        isActivated()\r\n        NotContract()\r\n        isWithinLimits(_eth)\r\n        public\r\n    {\r\n   \r\n        Z5Ddatasets.EventReturns memory _eventData_;\r\n        \r\n   \r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        \r\n      \r\n        uint256 _affID;\r\n       \r\n        if (_affCode == address(0) || _affCode == msg.sender)\r\n        {\r\n            \r\n            _affID = plyr_[_pID].laff;\r\n        \r\n         \r\n        } else {\r\n           \r\n            _affID = pIDxAddr_[_affCode];\r\n            \r\n            \r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n               \r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n        \r\n        \r\n        \r\n        reLoadCore(_pID, _affID, _eth, _eventData_);\r\n    }\r\n    \r\n    function reLoadXname(bytes32 _affCode, uint256 _eth) isActivated() NotContract() isWithinLimits(_eth) public\r\n    {\r\n       \r\n        Z5Ddatasets.EventReturns memory _eventData_;\r\n        \r\n        \r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        \r\n        \r\n        uint256 _affID;\r\n        \r\n        if (_affCode == '' || _affCode == plyr_[_pID].name)\r\n        {\r\n           \r\n            _affID = plyr_[_pID].laff;\r\n        \r\n        \r\n        } else {\r\n           \r\n            _affID = pIDxName_[_affCode];\r\n            \r\n            \r\n            if (_affID != plyr_[_pID].laff)\r\n            {\r\n              \r\n                plyr_[_pID].laff = _affID;\r\n            }\r\n        }\r\n        \r\n\r\n        \r\n\r\n        reLoadCore(_pID, _affID, _eth, _eventData_);\r\n    }\r\n\r\n   \r\n    function withdraw() isActivated() NotContract() public\r\n    {\r\n \r\n        uint256 _rID = rID_;\r\n\r\n        uint256 _now = now;\r\n        \r\n\r\n\t\t\r\n        uint256 _pID = pIDxAddr_[msg.sender];\r\n        \r\n\r\n        uint256 _eth;\r\n        uint256 token_temp;\r\n\t\t\r\n \r\n        if (_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0)\r\n        {\r\n          \r\n            Z5Ddatasets.EventReturns memory _eventData_;\r\n            \r\n            \r\n\t\t\tround_[_rID].ended = true;\r\n            _eventData_ = endRound(_eventData_);\r\n            \r\n\t\t\t\r\n            _eth = withdrawEarnings(_pID);\r\n\r\n\r\n            if (_eth > 0)\r\n                plyr_[_pID].addr.transfer(_eth);\r\n\t\t\t\r\n\t\t\ttoken_temp = plyr_[_pID].token;\r\n\t\t\tif \t(token_temp > 0)\r\n\t\t\t{\r\n\t\t\t\tplyr_[_pID].token = 0;\r\n\t\t\t\tZ5DToken.transferTokensFromVault(plyr_[_pID].addr,token_temp);\r\n\r\n\t\t\t}\r\n            \r\n          \r\n            emit Z5Devents.onWithdrawAndDistribute\r\n            (\r\n                msg.sender, \r\n                plyr_[_pID].name, \r\n                _eth, \r\n                _eventData_.winnerAddr, \r\n                _eventData_.winnerName, \r\n                _eventData_.amountWon, \r\n                _eventData_.newPot,  \r\n                _eventData_.genAmount\r\n            );\r\n            \r\n      \r\n        } else {\r\n          \r\n            _eth = withdrawEarnings(_pID);\r\n\r\n\r\n            if (_eth > 0)\r\n                plyr_[_pID].addr.transfer(_eth);\r\n\t\t\t\r\n\t\t\ttoken_temp = plyr_[_pID].token;\r\n\t\t\tif \t(token_temp > 0)\r\n\t\t\t{\r\n\t\t\t\tplyr_[_pID].token = 0;\r\n\t\t\t\tZ5DToken.transferTokensFromVault(plyr_[_pID].addr,token_temp);\r\n\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n        \r\n            emit Z5Devents.onWithdraw(_pID, msg.sender, plyr_[_pID].name, _eth, _now);\r\n        }\r\n    }\r\n    \r\n\r\n    function getBuyPrice() public view returns(uint256)\r\n    {  \r\n     \r\n        uint256 _rID = rID_;\r\n        \r\n       \r\n        uint256 _now = now;\r\n        \r\n        \r\n        if (_now > round_[_rID].strt && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n            return ( (round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000) );\r\n        else \r\n            return ( 75000000000000 );\r\n    }\r\n    \r\n    \r\n    function getTimeLeft() public view returns(uint256)\r\n    {\r\n       \r\n        uint256 _rID = rID_;\r\n        \r\n       \r\n        uint256 _now = now;\r\n        \r\n        if (_now < round_[_rID].end)\r\n            if (_now > round_[_rID].strt)\r\n                return( (round_[_rID].end).sub(_now) );\r\n            else\r\n                return( (round_[_rID].strt).sub(_now) );\r\n        else\r\n            return(0);\r\n    }\r\n    \r\n    \r\n    function getPlayerVaults(uint256 _pID) public view returns(uint256 ,uint256, uint256)\r\n    {\r\n     \r\n        uint256 _rID = rID_;\r\n        \r\n        \r\n        if (now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0)\r\n        {\r\n           \r\n            if (round_[_rID].plyr == _pID)\r\n            {\r\n                return\r\n                (\r\n                    (plyr_[_pID].win).add( ((round_[_rID].pot).mul(50)) / 100 ),\r\n                    (plyr_[_pID].gen).add(  getPlayerVaultsHelper(_pID, _rID).sub(plyrRnds_[_pID][_rID].mask)   ),\r\n                    plyr_[_pID].aff\r\n                );\r\n           \r\n            } \r\n\t\t\telse if (round_[_rID].plyr_2nd == _pID)\r\n\t\t\t{\r\n\t\t\t\treturn\r\n                (\r\n                    (plyr_[_pID].win).add( ((round_[_rID].pot).mul(10)) / 100 ),\r\n                    (plyr_[_pID].gen).add(  getPlayerVaultsHelper(_pID, _rID).sub(plyrRnds_[_pID][_rID].mask)   ),\r\n                    plyr_[_pID].aff\r\n                );\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse if (round_[_rID].plyr_3rd == _pID)\r\n\t\t\t{\r\n\t\t\t\treturn\r\n                (\r\n                    (plyr_[_pID].win).add( ((round_[_rID].pot).mul(5)) / 100 ),\r\n                    (plyr_[_pID].gen).add(  getPlayerVaultsHelper(_pID, _rID).sub(plyrRnds_[_pID][_rID].mask)   ),\r\n                    plyr_[_pID].aff\r\n                );\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\telse {\r\n                return\r\n                (\r\n                    plyr_[_pID].win,\r\n                    (plyr_[_pID].gen).add(  getPlayerVaultsHelper(_pID, _rID).sub(plyrRnds_[_pID][_rID].mask)  ),\r\n                    plyr_[_pID].aff\r\n                );\r\n            }\r\n            \r\n       \r\n        } else {\r\n            return\r\n            (\r\n                plyr_[_pID].win,\r\n                (plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID, plyr_[_pID].lrnd)),\r\n                plyr_[_pID].aff\r\n            );\r\n        }\r\n    }\r\n    \r\n\r\n    function getPlayerVaultsHelper(uint256 _pID, uint256 _rID) private view returns(uint256)\r\n    {\r\n        return(  ((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000)  );\r\n    }\r\n    \r\n\r\n    function getCurrentRoundInfo() public view returns(uint256, uint256, uint256, uint256, uint256, uint256, address, bytes32, uint256)\r\n    {\r\n        \r\n        uint256 _rID = rID_;\r\n        return\r\n        (\r\n            _rID,                           //0\r\n            round_[_rID].keys,              //1\r\n            round_[_rID].end,               //2\r\n            round_[_rID].strt,              //3\r\n            round_[_rID].pot,               //4\r\n            ((round_[_rID].plyr * 10)),     //5\r\n            plyr_[round_[_rID].plyr].addr,  //6\r\n            plyr_[round_[_rID].plyr].name,  //7\r\n            rndEth_[_rID]                 //8\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n        );\r\n    }\r\n\r\n\r\n    function getPlayerInfoByAddress(address _addr) public view returns(uint256, bytes32, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n\r\n\r\n        \r\n        if (_addr == address(0))\r\n        {\r\n            _addr == msg.sender;\r\n        }\r\n        uint256 _pID = pIDxAddr_[_addr];\r\n        uint256 lrnWin =0;\r\n\t\tuint256 lrnPlayed = plyr_[_pID].lrnd_lott;\r\n\t\tif (lrnPlayed>0 && lrnPlayed<lottrnd)\r\n\t\t{\r\n\t\t\tlrnWin = (Rndlotty[lrnPlayed].rndToken).mul(plyr_[_pID].bet);\r\n\t\t}\t\r\n\t\t\r\n\t\t\r\n        return\r\n        (\r\n            _pID,                               //0\r\n            plyr_[_pID].name,                   //1\r\n            plyrRnds_[_pID][rID_].keys,         //2\r\n            plyr_[_pID].win.add(lrnWin),        //3\r\n            (plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID, plyr_[_pID].lrnd)),       //4\r\n            plyr_[_pID].aff,                    //5\r\n            plyrRnds_[_pID][rID_].eth,           //6\r\n\t\t\t(plyr_[_pID].token).add(calcUnMaskedEarnings(_pID, plyr_[_pID].lrnd)), \t //7\r\n\t\t\tplyr_[_pID].bet,\t\t\t\t\t//8\r\n\t\t\tplyr_[_pID].lrnd_lott\t\t\t\t//9\t\r\n\t\t\t\r\n        );\r\n    }\r\n\r\n\r\n\t \r\n    function buyCore(uint256 _pID, uint256 _affID, Z5Ddatasets.EventReturns memory _eventData_)\r\n\tprivate\r\n    {\r\n       \r\n        uint256 _rID = rID_;\r\n       \r\n        uint256 _now = now;\r\n        \r\n        updateBetVault(_pID);\r\n        \r\n      \r\n        if (_now > round_[_rID].strt&& (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))) \r\n        {\r\n            \r\n            core(_rID, _pID, msg.value, _affID, _eventData_);\r\n        \r\n        \r\n        } else {\r\n            if (_now > round_[_rID].end && round_[_rID].ended == false) \r\n            {\r\n\r\n\t\t\t    round_[_rID].ended = true;\r\n                _eventData_ = endRound(_eventData_);\r\n                emit Z5Devents.onBuyAndDistribute\r\n                (\r\n                    msg.sender, \r\n                    plyr_[_pID].name, \r\n                    msg.value, \r\n                    _eventData_.winnerAddr, \r\n                    _eventData_.winnerName, \r\n                    _eventData_.amountWon, \r\n                    _eventData_.newPot,  \r\n                    _eventData_.genAmount\r\n                );\r\n            }\r\n\r\n            plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value);\r\n        }\r\n    }\r\n    \r\n\r\n    function reLoadCore(uint256 _pID, uint256 _affID, uint256 _eth, Z5Ddatasets.EventReturns memory _eventData_) private\r\n    {\r\n     \r\n        uint256 _rID = rID_;\r\n\r\n        uint256 _now = now;\r\n        \r\n\t\tupdateBetVault(_pID);\r\n\t\t\r\n\t\t\r\n        if (_now > round_[_rID].strt&& (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))) \r\n        {\r\n            \r\n            plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth);\r\n            \r\n            core(_rID, _pID, _eth, _affID, _eventData_);\r\n  \r\n        } else if (_now > round_[_rID].end && round_[_rID].ended == false) {\r\n            round_[_rID].ended = true;\r\n            _eventData_ = endRound(_eventData_);\r\n                \r\n\r\n            emit Z5Devents.onReLoadAndDistribute\r\n            (\r\n                msg.sender, \r\n                plyr_[_pID].name, \r\n                _eventData_.winnerAddr, \r\n                _eventData_.winnerName, \r\n                _eventData_.amountWon, \r\n                _eventData_.newPot, \r\n                _eventData_.genAmount\r\n            );\r\n        }\r\n    }\r\n    \r\n    \r\n\t\r\n    function core(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, Z5Ddatasets.EventReturns memory _eventData_)\r\n    private\r\n    {\r\n        if (plyrRnds_[_pID][_rID].keys == 0)\r\n            _eventData_ = managePlayer(_pID, _eventData_);\r\n\r\n        if (round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000)\r\n        {\r\n            uint256 _availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth);\r\n            uint256 _refund = _eth.sub(_availableLimit);\r\n            plyr_[_pID].gen = plyr_[_pID].gen.add(_refund);\r\n            _eth = _availableLimit;\r\n        }\r\n\t\t\r\n        if (_eth > 1000000000) \r\n        {\r\n\r\n            uint256 _keys = (round_[_rID].eth).keysRec(_eth);\r\n\t\t\t\r\n            if (_keys >= 1000000000000000000)\r\n            {\r\n\t\t\t\tupdateTimer(_keys, _rID);\r\n\t\t\t\tif (round_[_rID].plyr != _pID)\r\n\t\t\t\t{\t\r\n\t\t\t\t\tround_[_rID].plyr_3rd = round_[_rID].plyr_2nd;\r\n\t\t\t\t\tround_[_rID].plyr_2nd = round_[_rID].plyr;\r\n\t\t\t\t\tround_[_rID].plyr = _pID; \r\n\t\t\t\t}\t\r\n          \r\n        }\r\n\r\n            plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys);\r\n            plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth);\r\n            \r\n            round_[_rID].keys = _keys.add(round_[_rID].keys);\r\n            round_[_rID].eth = _eth.add(round_[_rID].eth);\r\n            rndEth_[_rID] = _eth.add(rndEth_[_rID]);\r\n\r\n            _eventData_ = distributeExternal(_rID, _pID, _eth, _affID, _eventData_);\r\n\t\t\t\r\n            _eventData_ = distributeInternal(_rID, _pID, _eth, _keys, _eventData_);\r\n\r\n\t\t    endTx(_pID, _eth, _keys, _eventData_);\r\n        }\r\n    }\r\n\r\n\t\r\n    function calcUnMaskedEarnings(uint256 _pID, uint256 _rIDlast) private view returns(uint256)\r\n    {\r\n        return(  (((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask)  );\r\n    }\r\n    \r\n\t\r\n    \r\n    function calcKeysReceived(uint256 _rID, uint256 _eth)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n\r\n        uint256 _now = now;\r\n\r\n        if (_now > round_[_rID].strt&& (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n            return ( (round_[_rID].eth).keysRec(_eth) );\r\n        else \r\n            return ( (_eth).keys() );\r\n    }\r\n    \r\n   \r\n    function iWantXKeys(uint256 _keys) public view returns(uint256)\r\n    {\r\n\r\n        uint256 _rID = rID_;\r\n\r\n        uint256 _now = now;\r\n\r\n        if (_now > round_[_rID].strt && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0)))\r\n            return ( (round_[_rID].keys.add(_keys)).ethRec(_keys) );\r\n        else \r\n            return ( (_keys).eth() );\r\n    }\r\n\r\n\r\n\t \r\n\t \r\n\t \r\n\t \r\n    function determinePID(Z5Ddatasets.EventReturns memory _eventData_)\r\n        private\r\n        returns (Z5Ddatasets.EventReturns)\r\n    {\r\n\t\t\r\n\t\taddress  _addr = msg.sender;\r\n\r\n        if (pIDxAddr_[_addr] == 0)\r\n        {\r\n\r\n\t\t\tpID_++;\t\r\n            pIDxAddr_[_addr] = pID_;\r\n            plyr_[pID_].addr = _addr;\r\n            \r\n\r\n        } \r\n        return (_eventData_);\r\n    }\r\n    \r\n\r\n   \r\n    function managePlayer(uint256 _pID, Z5Ddatasets.EventReturns memory _eventData_) private returns (Z5Ddatasets.EventReturns)\r\n    {\r\n        \r\n        if (plyr_[_pID].lrnd != 0)\r\n            updateGenVault(_pID, plyr_[_pID].lrnd);\r\n\r\n        plyr_[_pID].lrnd = rID_;\r\n            \r\n        \r\n        return(_eventData_);\r\n    }\r\n    \r\n   \r\n    function endRound(Z5Ddatasets.EventReturns memory _eventData_) private returns (Z5Ddatasets.EventReturns)\r\n    {\r\n\r\n        uint256 _rID = rID_;\r\n        \r\n     \r\n        uint256 _winPID = round_[_rID].plyr;\r\n\t\tuint256 _winPID_2nd = round_[_rID].plyr_2nd;\r\n\t\tuint256 _winPID_3rd = round_[_rID].plyr_3rd;\r\n\t\t\r\n\t\tif (_winPID_2nd == 0)\r\n\t\t{\r\n\t\t\t_winPID_2nd = 1;\r\n\t\t}\r\n        \r\n\t\tif (_winPID_3rd == 0)\r\n\t\t{\r\n\t\t\t_winPID_3rd = 1;\r\n\t\t}\r\n\r\n        uint256 _pot = round_[_rID].pot;\r\n        \r\n\r\n\r\n        uint256 _win = (_pot.mul(50)) / 100;\r\n\t\t\r\n\t\t\r\n        uint256 _gen = (_pot.mul(potSplit_)) / 100;\r\n        uint256 _res = (_pot.sub(_win.add(_win/5).add(_win/10))).sub(_gen);\r\n\r\n        uint256 _ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys);\r\n        uint256 _dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000);\r\n        if (_dust > 0)\r\n        {\r\n            _gen = _gen.sub(_dust);\r\n            _res = _res.add(_dust);\r\n        }\r\n\r\n        plyr_[_winPID].win = _win.add(plyr_[_winPID].win);\r\n\t\tplyr_[_winPID_2nd].win = (_win/5).add(plyr_[_winPID_2nd].win);\r\n\t\tplyr_[_winPID_3rd].win = (_win/10).add(plyr_[_winPID_3rd].win);\r\n\r\n        round_[_rID].mask = _ppt.add(round_[_rID].mask);\r\n\r\n        _eventData_.winnerAddr = plyr_[_winPID].addr;\r\n        _eventData_.winnerName = plyr_[_winPID].name;\r\n        _eventData_.amountWon = _win;\r\n        _eventData_.genAmount = _gen;\r\n        _eventData_.newPot = _res;\r\n\r\n        rID_++;\r\n        _rID++;\r\n        round_[_rID].strt = now;\r\n        round_[_rID].end = now.add(rndInit_);\r\n        round_[_rID].pot = _res;\r\n        \r\n        return(_eventData_);\r\n    }\r\n    \r\n    \r\n    function updateGenVault(uint256 _pID, uint256 _rIDlast) private \r\n    {\r\n        uint256 _earnings = calcUnMaskedEarnings(_pID, _rIDlast);\r\n        if (_earnings > 0)\r\n        {\r\n            \r\n            plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen);\r\n\t\t\tplyr_[_pID].token = _earnings.add(plyr_[_pID].token);\r\n            plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask);\r\n        }\r\n    }\r\n    \r\n    \r\n    function updateTimer(uint256 _keys, uint256 _rID)\r\n        private\r\n    {\r\n\r\n        uint256 _now = now;\r\n\r\n        uint256 _newTime;\r\n        if (_now > round_[_rID].end && round_[_rID].plyr == 0)\r\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now);\r\n        else\r\n            _newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end);\r\n        \r\n      \r\n        if (_newTime < (rndMax_).add(_now))\r\n            round_[_rID].end = _newTime;\r\n        else\r\n            round_[_rID].end = rndMax_.add(_now);\r\n    }\r\n    \r\n    \r\n    function distributeExternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _affID, Z5Ddatasets.EventReturns memory _eventData_) private returns(Z5Ddatasets.EventReturns)\r\n    {\r\n\r\n      \r\n        uint256 z5dgame = (_eth / 100).mul(3);\r\n        uint256 _aff = (_eth.mul(11))/100;\r\n        if (_affID != _pID && plyr_[_affID].name != '') {\r\n            plyr_[_affID].aff = _aff.add(plyr_[_affID].aff);\r\n\t\t\tplyr_[_affID].token = _aff.add(plyr_[_affID].token);\r\n            emit Z5Devents.onAffiliatePayout(_affID, plyr_[_affID].addr, plyr_[_affID].name, _rID, _pID, _aff, now);\r\n        } \r\n\t\telse\r\n\t\t{\r\n\t\t\tz5dgame = z5dgame.add(_aff);\r\n\t\t}\r\n\t\t\r\n\t\tplyr_[_pID].token = z5dgame.add(plyr_[_pID].token);\r\n\t\tZ5DToken.deposit.value(z5dgame)();\r\n\t\t\r\n\t\t\r\n\r\n        return(_eventData_);\r\n    }\r\n    \r\n\r\n    \r\n   \r\n    function distributeInternal(uint256 _rID, uint256 _pID, uint256 _eth, uint256 _keys, Z5Ddatasets.EventReturns memory _eventData_)\r\n      private returns(Z5Ddatasets.EventReturns)\r\n    {\r\n     \r\n        uint256 _gen = (_eth.mul(fees_)) / 100;\r\n    \r\n        uint256 _air = _eth / 100;\r\n\t\t\r\n\t\t\r\n\t\t\r\n        airDropPot_ = airDropPot_.add(_air);\r\n\t\tcomm = comm.add(_air.mul(3));\r\n\t\tlott = lott.add(_air.mul(3));\r\n        _eth = _eth.sub((_eth.mul(21)) / 100);     \r\n        uint256 _pot = _eth.sub(_gen);\r\n\r\n        uint256 _dust = updateMasks(_rID, _pID, _gen, _keys);\r\n        if (_dust > 0)\r\n            _gen = _gen.sub(_dust);\r\n        \r\n        \r\n        round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot);\r\n        \r\n\r\n        _eventData_.genAmount = _gen.add(_eventData_.genAmount);\r\n        _eventData_.potAmount = _pot;\r\n        \r\n        return(_eventData_);\r\n    }\r\n\r\n   \r\n\t\r\n\t\r\n\t\r\n\t\r\n    function updateMasks(uint256 _rID, uint256 _pID, uint256 _gen, uint256 _keys) private returns(uint256)\r\n    {\r\n\r\n        \r\n        uint256 _ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys);\r\n        \r\n\t\tround_[_rID].mask = _ppt.add(round_[_rID].mask);\r\n            \r\n        \r\n        uint256 _pearn = (_ppt.mul(_keys)) / (1000000000000000000);\r\n        plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask);\r\n        \r\n        \r\n        return(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)));\r\n    }\r\n    \r\n    \r\n\t\r\n\t\r\n\t\r\n    function withdrawEarnings(uint256 _pID) private returns(uint256)\r\n    {\r\n\r\n        updateGenVault(_pID, plyr_[_pID].lrnd);\r\n\t\t\r\n\t\tupdateBetVault(_pID);\r\n        \r\n\r\n        uint256 _earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff);\r\n\t\t\r\n\t\t\r\n\r\n        if (_earnings > 0)\r\n        {\r\n\t\t\t\r\n\t\t\tplyr_[_pID].gen = 0;\r\n            plyr_[_pID].win = 0;\r\n            plyr_[_pID].aff = 0;\r\n        }\r\n\r\n        return(_earnings);\r\n    }\r\n    \r\n    \r\n    function endTx(uint256 _pID, uint256 _eth, uint256 _keys, Z5Ddatasets.EventReturns memory _eventData_) private\r\n    {\r\n  \r\n        emit Z5Devents.onEndTx\r\n        (\r\n\r\n            plyr_[_pID].name,\r\n            msg.sender,\r\n            _eth,\r\n            _keys,\r\n            _eventData_.winnerAddr,\r\n            _eventData_.winnerName,\r\n            _eventData_.amountWon,\r\n            _eventData_.newPot,\r\n            _eventData_.genAmount,\r\n            _eventData_.potAmount,\r\n            airDropPot_,\r\n\t\t\trID_\r\n        );\r\n    }\r\n\r\n    bool public activated_ = false;\r\n\t\r\n\tfunction activate() onlyowner() public\r\n    {\r\n\r\n        require(activated_ == false, \"already activated\");\r\n        \r\n      \r\n        activated_ = true;\r\n\r\n\t\trID_ = 1;\r\n        round_[1].strt = now ;\r\n        round_[1].end = now + rndInit_;\r\n\t\t\r\n\t\tBetTime = round_[1].strt + betPre_;\r\n\t\tlottrnd = 1 ;\r\n\t\t\r\n    }\r\n\t\r\n\tfunction claimsaleagent() public\r\n    {\r\n        Z5DToken.claimSalesAgent();\r\n    }\r\n    \r\n}\r\n\r\n\r\ninterface ZoMo5DInterface \r\n{\r\n\tfunction transferTokensFromVault(address toAddress, uint256 tokensAmount) external;\r\n\tfunction claimSalesAgent() external;\r\n\tfunction deposit() external payable;\r\n\tfunction AuthTransfer(address from_, uint256 amount) external;\r\n       \r\n}\r\n\r\n\r\n\r\nlibrary Z5Ddatasets {\r\n\r\n    struct EventReturns {\r\n        address winnerAddr;         \r\n        bytes32 winnerName;        \r\n        uint256 amountWon;          \r\n        uint256 newPot;            \r\n        uint256 genAmount;         \r\n        uint256 potAmount;          \r\n    }\r\n    struct Player {\r\n        address addr;   \r\n        bytes32 name;   \r\n        uint256 win;    \r\n        uint256 gen;   \r\n        uint256 aff;    \r\n        uint256 lrnd;  \r\n        uint256 laff; \r\n\t\tuint256 token;\r\n\t\tuint256 lrnd_lott;\r\n\t\tuint256 bet;\r\n\t\t\r\n    }\r\n    struct PlayerRounds {\r\n        uint256 eth;    \r\n        uint256 keys;   \r\n        uint256 mask;  \r\n    }\r\n    struct Round {\r\n        uint256 plyr;   \t\r\n\t\tuint256 plyr_2nd;   \r\n\t\tuint256 plyr_3rd;\t\r\n        uint256 end;    \t\r\n        bool ended;     \t\r\n        uint256 strt;   \t\r\n        uint256 keys;   \t\r\n        uint256 eth;    \t\r\n        uint256 pot;    \t\r\n        uint256 mask;   \t\r\n\r\n    }\r\n\t\r\n\tstruct lotty{\r\n\t\tuint256 rndToken;\r\n\t\tuint256 rndlott;\r\n\t\t\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\nlibrary Z5DKeyCount {\r\n    using SafeMath for *;\r\n\r\n    function keysRec(uint256 _curEth, uint256 _newEth) internal pure returns (uint256)\r\n    {\t\r\n\t\r\n        return(keys((_curEth).add(_newEth)).sub(keys(_curEth)));\r\n    }\r\n    \r\n\r\n    function ethRec(uint256 _curKeys, uint256 _sellKeys) internal pure returns (uint256)\r\n    {\r\n        return((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))));\r\n    }\r\n\r\n\r\n    function keys(uint256 _eth) internal pure returns(uint256)\r\n    {\r\n\t\t\r\n\t\treturn ((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000);\r\n\t\r\n    }\r\n    \r\n    \r\n    function eth(uint256 _keys) \r\n        internal\r\n        pure\r\n        returns(uint256)  \r\n    {\r\n        return ((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq());\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlibrary NameCheck {\r\n    \r\n    function nameCheck(string _input) internal pure returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        require (_length <= 32 && _length > 0, \"name is limited to 32 characters\");\r\n        \r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \"0x start is not allowed\");\r\n            require(_temp[1] != 0x58, \"0X start is not allowed\");\r\n        }\r\n        \r\n        bool _hasNonNumber;\r\n        \r\n        for (uint256 i = 0; i < _length; i++)\r\n        {\r\n            \r\n            if (_temp[i] > 0x40 && _temp[i] < 0x5b)\r\n            {\r\n                \r\n                _temp[i] = byte(uint(_temp[i]) + 32);\r\n\t\t\t\tif (_hasNonNumber == false)\r\n\t\t\t\t\t_hasNonNumber = true;\r\n            } \r\n\t\t\telse \r\n\t\t\t{\r\n\t\t\t\t\r\n                require\r\n                (\r\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) ||(_temp[i] > 0x2f && _temp[i] < 0x3a)\r\n                );\r\n                \r\n               \r\n                if (_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39))\r\n                    _hasNonNumber = true;    \r\n            }\r\n        }\r\n        \r\n        require(_hasNonNumber == true, \"only numbers is not allowed\");\r\n        \r\n        bytes32 retrieve;\r\n        assembly \r\n\t\t{\r\n            retrieve := mload(add(_temp, 32))\r\n        }\r\n        return (retrieve);\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) \r\n    {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b, \"Multiplication failed\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        require(b <= a, \"Subtraction failed\");\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) \r\n    {\r\n        c = a + b;\r\n        require(c >= a, \"add failed\");\r\n        return c;\r\n    }\r\n    \r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) \r\n    {\r\n        uint256 z = ((add(x,1)) / 2);\r\n        y = x;\r\n        while (z < y) \r\n        {\r\n            y = z;\r\n            z = ((add((x / z),z)) / 2);\r\n        }\r\n    }\r\n\r\n    function sq(uint256 x) internal pure returns (uint256)\r\n    {\r\n        return (mul(x,x));\r\n    }\r\n    \r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"address\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"reLoadXaddr\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBuyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pIDxAddr_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Betfromvault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fees_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"round_\",\"outputs\":[{\"name\":\"plyr\",\"type\":\"uint256\"},{\"name\":\"plyr_2nd\",\"type\":\"uint256\"},{\"name\":\"plyr_3rd\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"ended\",\"type\":\"bool\"},{\"name\":\"strt\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"pot\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"plyrNames_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pIDxName_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"amount_\",\"type\":\"uint256\"},{\"name\":\"Lottround\",\"type\":\"uint256\"}],\"name\":\"lottDistribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Rndlotty\",\"outputs\":[{\"name\":\"rndToken\",\"type\":\"uint256\"},{\"name\":\"rndlott\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BetTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"bytes32\"}],\"name\":\"buyXname\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comm\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"potSplit_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rID_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"}],\"name\":\"getPlayerVaults\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"BetfromZ5D\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentRoundInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"CommDistribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pID\",\"type\":\"uint256\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"AirDistribute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"reLoadXid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyrRnds_\",\"outputs\":[{\"name\":\"eth\",\"type\":\"uint256\"},{\"name\":\"keys\",\"type\":\"uint256\"},{\"name\":\"mask\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lottrnd\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"address\"}],\"name\":\"buyXaddr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rndEth_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lott\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nameString\",\"type\":\"string\"}],\"name\":\"GrabName\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTimeLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"uint256\"}],\"name\":\"buyXid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_rID\",\"type\":\"uint256\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"calcKeysReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_keys\",\"type\":\"uint256\"}],\"name\":\"iWantXKeys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimsaleagent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"activated_\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airDropPot_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plyr_\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"win\",\"type\":\"uint256\"},{\"name\":\"gen\",\"type\":\"uint256\"},{\"name\":\"aff\",\"type\":\"uint256\"},{\"name\":\"lrnd\",\"type\":\"uint256\"},{\"name\":\"laff\",\"type\":\"uint256\"},{\"name\":\"token\",\"type\":\"uint256\"},{\"name\":\"lrnd_lott\",\"type\":\"uint256\"},{\"name\":\"bet\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getPlayerInfoByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_affCode\",\"type\":\"bytes32\"},{\"name\":\"_eth\",\"type\":\"uint256\"}],\"name\":\"reLoadXname\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"BetTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"isNewPlayer\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"affiliateID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliateName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onNewName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"keysBought\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"potAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"airDropPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"currentround\",\"type\":\"uint256\"}],\"name\":\"onEndTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"playerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethOut\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"}],\"name\":\"onWithdrawAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ethIn\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"}],\"name\":\"onBuyAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"playerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"winnerAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winnerName\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amountWon\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"newPot\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"genAmount\",\"type\":\"uint256\"}],\"name\":\"onReLoadAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"affiliateID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"affiliateAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"affiliateName\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyerID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"onAffiliatePayout\",\"type\":\"event\"}]","ContractName":"ZoMo5D","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e75c0ed60600005b36419bbc6aea8308d6e7cc998533b649708764ac366248f0"}]}