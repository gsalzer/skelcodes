{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\ncontract ERC20Basic {\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract EthTweetMe is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // Supported token symbols mapped to ERC20 contract addr\r\n    mapping(string => address) tokens;\r\n\r\n    address webappAddress;\r\n    address feePayoutAddress;\r\n    uint256 public feePercentage = 5;\r\n    uint256 public minAmount = 0.000001 ether;\r\n    uint256 public webappMinBalance = 0.000001 ether;\r\n\r\n    struct Influencer {\r\n        address influencerAddress;\r\n        uint256 charityPercentage;\r\n        address charityAddress;\r\n    }\r\n    // Map influencer's twitterHandle to Influencer struct\r\n    mapping(string => Influencer) influencers;\r\n\r\n    struct EthTweet {\r\n        string followerTwitterHandle;\r\n        string influencerTwitterHandle;\r\n        string tweet;\r\n        uint256 amount;\r\n        string symbol;\r\n    }\r\n    EthTweet[] public ethTweets;\r\n\r\n\r\n    event InfluencerAdded(string _influencerTwitterHandle);\r\n    event EthTweetSent(string _followerTwitterHandle, string _influencerTwitterHandle, uint256 _amount, string _symbol, uint256 _index);\r\n    event FeePercentageUpdated(uint256 _feePercentage);\r\n    event Deposit(address _address, uint256 _amount);\r\n    event TokenAdded(string _symbol, address _address);\r\n    event TokenRemoved(string _symbol);\r\n    event Payment(address _address, uint256 _amount, string _symbol);\r\n\r\n\r\n    modifier onlyWebappOrOwner() {\r\n        require(msg.sender == webappAddress || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    constructor() public {\r\n        webappAddress = msg.sender;\r\n        feePayoutAddress = msg.sender;\r\n    }\r\n\r\n    // Fallback function. Allow users to pay the contract directly\r\n    function() external payable {\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function updateFeePercentage(uint256 _feePercentage) external onlyWebappOrOwner {\r\n        require(_feePercentage <= 100);\r\n        feePercentage = _feePercentage;\r\n        emit FeePercentageUpdated(feePercentage);\r\n    }\r\n\r\n    function updateMinAmount(uint256 _minAmount) external onlyWebappOrOwner {\r\n        minAmount = _minAmount;\r\n    }\r\n    function updateWebappMinBalance(uint256 _minBalance) external onlyWebappOrOwner {\r\n        webappMinBalance = _minBalance;\r\n    }\r\n\r\n    function updateWebappAddress(address _address) external onlyOwner {\r\n        webappAddress = _address;\r\n    }\r\n\r\n    function updateFeePayoutAddress(address _address) external onlyOwner {\r\n        feePayoutAddress = _address;\r\n    }\r\n\r\n    function updateInfluencer(\r\n            string _twitterHandle,\r\n            address _influencerAddress,\r\n            uint256 _charityPercentage,\r\n            address _charityAddress) external onlyWebappOrOwner {\r\n        require(_charityPercentage <= 100);\r\n        require((_charityPercentage == 0 && _charityAddress == 0x0) || (_charityPercentage > 0 && _charityAddress != 0x0));\r\n        if (influencers[_twitterHandle].influencerAddress == 0x0) {\r\n            // This is a new Influencer!\r\n            emit InfluencerAdded(_twitterHandle);\r\n        }\r\n        influencers[_twitterHandle] = Influencer(_influencerAddress, _charityPercentage, _charityAddress);\r\n    }\r\n\r\n    function sendEthTweet(uint256 _amount, bool _isERC20, string _symbol, bool _payFromMsg, string _followerTwitterHandle, string _influencerTwitterHandle, string _tweet) private {\r\n        require(\r\n            (!_isERC20 && _payFromMsg && msg.value == _amount) ||\r\n            (!_isERC20 && !_payFromMsg && _amount <= address(this).balance) ||\r\n            _isERC20\r\n        );\r\n\r\n        ERC20Basic erc20;\r\n        if (_isERC20) {\r\n            // Now do ERC20-specific checks\r\n            // Must be an ERC20 that we support\r\n            require(tokens[_symbol] != 0x0);\r\n\r\n            // The ERC20 funds should have already been transferred\r\n            erc20 = ERC20Basic(tokens[_symbol]);\r\n            require(erc20.balanceOf(address(this)) >= _amount);\r\n        }\r\n\r\n        // influencer must be a known twitterHandle\r\n        Influencer memory influencer = influencers[_influencerTwitterHandle];\r\n        require(influencer.influencerAddress != 0x0);\r\n\r\n        uint256[] memory payouts = new uint256[](4);    // 0: influencer, 1: charity, 2: fee\r\n        payouts[3] = 100;\r\n        if (influencer.charityPercentage == 0) {\r\n            payouts[0] = _amount.mul(payouts[3].sub(feePercentage)).div(payouts[3]);\r\n            payouts[2] = _amount.sub(payouts[0]);\r\n        } else {\r\n            payouts[1] = _amount.mul(influencer.charityPercentage).div(payouts[3]);\r\n            payouts[0] = _amount.sub(payouts[1]).mul(payouts[3].sub(feePercentage)).div(payouts[3]);\r\n            payouts[2] = _amount.sub(payouts[1]).sub(payouts[0]);\r\n        }\r\n\r\n        require(payouts[0].add(payouts[1]).add(payouts[2]) == _amount);\r\n\r\n        // Checks - EFFECTS - Interaction\r\n        ethTweets.push(EthTweet(_followerTwitterHandle, _influencerTwitterHandle, _tweet, _amount, _symbol));\r\n        emit EthTweetSent(\r\n            _followerTwitterHandle,\r\n            _influencerTwitterHandle,\r\n            _amount,\r\n            _symbol,\r\n            ethTweets.length - 1\r\n        );\r\n\r\n        if (payouts[0] > 0) {\r\n            if (!_isERC20) {\r\n                influencer.influencerAddress.transfer(payouts[0]);\r\n            } else {\r\n                erc20.transfer(influencer.influencerAddress, payouts[0]);\r\n            }\r\n            emit Payment(influencer.influencerAddress, payouts[0], _symbol);\r\n        }\r\n        if (payouts[1] > 0) {\r\n            if (!_isERC20) {\r\n                influencer.charityAddress.transfer(payouts[1]);\r\n            } else {\r\n                erc20.transfer(influencer.charityAddress, payouts[1]);\r\n            }\r\n            emit Payment(influencer.charityAddress, payouts[1], _symbol);\r\n        }\r\n        if (payouts[2] > 0) {\r\n            if (!_isERC20) {\r\n                if (webappAddress.balance < webappMinBalance) {\r\n                    // Redirect some funds into webapp\r\n                    webappAddress.transfer(payouts[2].div(5));\r\n                    payouts[2] = payouts[2].sub(payouts[2].div(5));\r\n                    emit Payment(webappAddress, payouts[2].div(5), _symbol);\r\n                }\r\n                feePayoutAddress.transfer(payouts[2]);\r\n            } else {\r\n                erc20.transfer(feePayoutAddress, payouts[2]);\r\n            }\r\n            emit Payment(feePayoutAddress, payouts[2], _symbol);\r\n        }\r\n    }\r\n\r\n    // Called by users directly interacting with the contract, paying in ETH\r\n    function sendEthTweet(string _followerTwitterHandle, string _influencerTwitterHandle, string _tweet) external payable {\r\n        sendEthTweet(msg.value, false, \"ETH\", true, _followerTwitterHandle, _influencerTwitterHandle, _tweet);\r\n    }\r\n\r\n    // Called by the webapp on behalf of Other/QR code payers\r\n    function sendPrepaidEthTweet(uint256 _amount, string _followerTwitterHandle, string _influencerTwitterHandle, string _tweet) external onlyWebappOrOwner {\r\n        /* require(_amount <= address(this).balance); */\r\n        sendEthTweet(_amount, false, \"ETH\", false, _followerTwitterHandle, _influencerTwitterHandle, _tweet);\r\n    }\r\n\r\n    /****************************************************************\r\n    *   ERC-20 support\r\n    ****************************************************************/\r\n    function addNewToken(string _symbol, address _address) external onlyWebappOrOwner {\r\n        tokens[_symbol] = _address;\r\n        emit TokenAdded(_symbol, _address);\r\n    }\r\n    function removeToken(string _symbol) external onlyWebappOrOwner {\r\n        require(tokens[_symbol] != 0x0);\r\n        delete(tokens[_symbol]);\r\n        emit TokenRemoved(_symbol);\r\n    }\r\n    function supportsToken(string _symbol, address _address) external constant returns (bool) {\r\n        return (tokens[_symbol] == _address);\r\n    }\r\n    function contractTokenBalance(string _symbol) external constant returns (uint256) {\r\n        require(tokens[_symbol] != 0x0);\r\n        ERC20Basic erc20 = ERC20Basic(tokens[_symbol]);\r\n        return erc20.balanceOf(address(this));\r\n    }\r\n    function sendERC20Tweet(uint256 _amount, string _symbol, string _followerTwitterHandle, string _influencerTwitterHandle, string _tweet) external onlyWebappOrOwner {\r\n        sendEthTweet(_amount, true, _symbol, false, _followerTwitterHandle, _influencerTwitterHandle, _tweet);\r\n    }\r\n\r\n\r\n    // Public accessors\r\n    function getNumEthTweets() external constant returns(uint256) {\r\n        return ethTweets.length;\r\n    }\r\n    function getInfluencer(string _twitterHandle) external constant returns(address, uint256, address) {\r\n        Influencer memory influencer = influencers[_twitterHandle];\r\n        return (influencer.influencerAddress, influencer.charityPercentage, influencer.charityAddress);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getNumEthTweets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ethTweets\",\"outputs\":[{\"name\":\"followerTwitterHandle\",\"type\":\"string\"},{\"name\":\"influencerTwitterHandle\",\"type\":\"string\"},{\"name\":\"tweet\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"removeToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addNewToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_followerTwitterHandle\",\"type\":\"string\"},{\"name\":\"_influencerTwitterHandle\",\"type\":\"string\"},{\"name\":\"_tweet\",\"type\":\"string\"}],\"name\":\"sendPrepaidEthTweet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_followerTwitterHandle\",\"type\":\"string\"},{\"name\":\"_influencerTwitterHandle\",\"type\":\"string\"},{\"name\":\"_tweet\",\"type\":\"string\"}],\"name\":\"sendEthTweet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateWebappAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minBalance\",\"type\":\"uint256\"}],\"name\":\"updateWebappMinBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"updateFeePercentage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateFeePayoutAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_twitterHandle\",\"type\":\"string\"},{\"name\":\"_influencerAddress\",\"type\":\"address\"},{\"name\":\"_charityPercentage\",\"type\":\"uint256\"},{\"name\":\"_charityAddress\",\"type\":\"address\"}],\"name\":\"updateInfluencer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"contractTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"supportsToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_followerTwitterHandle\",\"type\":\"string\"},{\"name\":\"_influencerTwitterHandle\",\"type\":\"string\"},{\"name\":\"_tweet\",\"type\":\"string\"}],\"name\":\"sendERC20Tweet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_twitterHandle\",\"type\":\"string\"}],\"name\":\"getInfluencer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"webappMinBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_influencerTwitterHandle\",\"type\":\"string\"}],\"name\":\"InfluencerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_followerTwitterHandle\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_influencerTwitterHandle\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"EthTweetSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"FeePercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"EthTweetMe","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://65a85aded971827357843ddab14f8fede07850072a7dbb0a7d19f33ecbd962b8"}]}