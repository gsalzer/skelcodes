{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/**\r\n * Implementation of the basic standard token\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n */\r\ncontract TokenERC20 {\r\n    // [ERC20] the name of the token - e.g. \"Vehicle Ownerâ€™s Benefit\"\r\n    string public name;\r\n    // [ERC20] the symbol of the token. E.g. \"VOB\".\r\n    string public symbol;\r\n    // [ERC20] the total token supply\r\n    uint256 public totalSupply;\r\n    // [ERC20] the number of decimals the token uses - e.g. 18\r\n    uint8 public decimals = 18;\r\n\r\n    // [ERC20] the account balance of another account with address _owner\r\n    mapping (address => uint256) public balanceOf;\r\n\r\n    // [ERC20]the amount which _spender is still allowed to withdraw from _owner.\r\n    mapping(address => mapping(address => uint256)) allowance;\r\n\r\n\r\n    mapping (address => uint256) public freezeOf;\r\n\r\n    // [ERC20] MUST trigger when tokens are transferred, including zero value transfers.\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // [ERC20] MUST trigger on any successful call to approve\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n\r\n    // This notifies clients about the amount frozen\r\n    event Freeze(address indexed from, uint256 value);\r\n\r\n    // This notifies clients about the amount unfrozen\r\n    event Unfreeze(address indexed from, uint256 value);\r\n\r\n    constructor(uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimalUnits) public {\r\n        totalSupply = _initialSupply;\r\n        balanceOf[msg.sender] = totalSupply;\r\n        name = _tokenName;\r\n        symbol = _tokenSymbol;\r\n        decimals = _decimalUnits;\r\n    }\r\n\r\n    /**\r\n     * Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\r\n     */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n\r\n        // the _to account address is not invalid\r\n        require(_to != 0x0);\r\n\r\n        // the _from account balance has enough tokens to spend\r\n        require(balanceOf[_from] >= _value);\r\n\r\n        // the _to account balance must not be overflowing after transfer\r\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\r\n\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n\r\n        // emit event\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * [ERC20]\r\n     * Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\r\n     * The function SHOULD throw if the _from account balance does not have enough tokens to spend.\r\n     *\r\n     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n\r\n        _transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * [ERC20]\r\n     * Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\r\n     * The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.\r\n     * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.\r\n     * The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism.\r\n     *\r\n     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(allowance[_from][msg.sender] >= _value);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * [ERC20]\r\n     * Allows _spender to withdraw from your account multiple times, up to the _value amount.\r\n     * If this function is called again it overwrites the current allowance with _value.\r\n     *\r\n     * NOTE: To prevent attack vectors like the one described here and discussed here,\r\n     * clients SHOULD make sure to create user interfaces in such a way that they set the allowance first to 0 before setting it to another value for the same spender.\r\n     * THOUGH The contract itself shouldn't enforce it, to allow backwards compatibility with contracts deployed before\r\n     *\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function freeze(uint256 _value) returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);            // Check if the sender has enough\r\n        require(_value > 0);\r\n        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\r\n        freezeOf[msg.sender] += _value;\r\n        Freeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function unfreeze(uint256 _value) returns (bool success) {\r\n        require(freezeOf[msg.sender]>= _value);            // Check if the sender has enough\r\n        require(_value > 0);\r\n        freezeOf[msg.sender] -= _value;                      // Subtract from the sender\r\n        balanceOf[msg.sender] += _value;\r\n        Unfreeze(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unfreeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"freezeOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_tokenName\",\"type\":\"string\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_decimalUnits\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Unfreeze\",\"type\":\"event\"}]","ContractName":"TokenERC20","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000204fce5e3e25026110000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001956656869636c65204f776e6572e28099732042656e65666974000000000000000000000000000000000000000000000000000000000000000000000000000003564f420000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://71f6d2d11be1b2ae51b3fe8de089221e3fd930b6977fa76f40564d4ab49725ed"}]}