{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/interfaces/IOwned.sol\r\n\r\n/*\r\n    Owned Contract Interface\r\n*/\r\ncontract IOwned {\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n    function transferOwnershipNow(address newContractOwner) public;\r\n}\r\n\r\n// File: contracts/utility/Owned.sol\r\n\r\n/*\r\n    This is the \"owned\" utility contract used by bancor with one additional function - transferOwnershipNow()\r\n    \r\n    The original unmodified version can be found here:\r\n    https://github.com/bancorprotocol/contracts/commit/63480ca28534830f184d3c4bf799c1f90d113846\r\n    \r\n    Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n        @dev constructor\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev allows transferring the contract ownership\r\n        the new owner still needs to accept the transfer\r\n        can only be called by the contract owner\r\n        @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n        @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    /**\r\n        @dev transfers the contract ownership without needing the new owner to accept ownership\r\n        @param newContractOwner    new contract owner\r\n    */\r\n    function transferOwnershipNow(address newContractOwner) ownerOnly public {\r\n        require(newContractOwner != owner);\r\n        emit OwnerUpdate(owner, newContractOwner);\r\n        owner = newContractOwner;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n\r\n/*\r\n    Smart Token Interface\r\n*/\r\ncontract IERC20 {\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n// File: contracts/interfaces/ICommunityAccount.sol\r\n\r\n/*\r\n    Community Account Interface\r\n*/\r\ncontract ICommunityAccount is IOwned {\r\n    function setStakedBalances(uint _amount, address msgSender) public;\r\n    function setTotalStaked(uint _totalStaked) public;\r\n    function setTimeStaked(uint _timeStaked, address msgSender) public;\r\n    function setEscrowedTaskBalances(uint uuid, uint balance) public;\r\n    function setEscrowedProjectBalances(uint uuid, uint balance) public;\r\n    function setEscrowedProjectPayees(uint uuid, address payeeAddress) public;\r\n    function setTotalTaskEscrow(uint balance) public;\r\n    function setTotalProjectEscrow(uint balance) public;\r\n}\r\n\r\n// File: contracts/CommunityAccount.sol\r\n\r\n/**\r\n@title Tribe Account\r\n@notice This contract is used as a community's data store.\r\n@notice Advantages:\r\n@notice 1) Decouple logic contract from data contract\r\n@notice 2) Safely upgrade logic contract without compromising stored data\r\n*/\r\ncontract CommunityAccount is Owned, ICommunityAccount {\r\n\r\n    // Staking Variables.  In community token\r\n    mapping (address => uint256) public stakedBalances;\r\n    mapping (address => uint256) public timeStaked;\r\n    uint public totalStaked;\r\n\r\n    // Escrow variables.  In native token\r\n    uint public totalTaskEscrow;\r\n    uint public totalProjectEscrow;\r\n    mapping (uint256 => uint256) public escrowedTaskBalances;\r\n    mapping (uint256 => uint256) public escrowedProjectBalances;\r\n    mapping (uint256 => address) public escrowedProjectPayees;\r\n    \r\n    /**\r\n    @notice This function allows the community to transfer tokens out of the contract.\r\n    @param tokenContractAddress Address of community contract\r\n    @param destination Destination address of user looking to remove tokens from contract\r\n    @param amount Amount to transfer out of community\r\n    */\r\n    function transferTokensOut(address tokenContractAddress, address destination, uint amount) public ownerOnly returns(bool result) {\r\n        IERC20 token = IERC20(tokenContractAddress);\r\n        return token.transfer(destination, amount);\r\n    }\r\n\r\n    /**\r\n    @notice This is the community staking method\r\n    @param _amount Amount to be staked\r\n    @param msgSender Address of the staker\r\n    */\r\n    function setStakedBalances(uint _amount, address msgSender) public ownerOnly {\r\n        stakedBalances[msgSender] = _amount;\r\n    }\r\n\r\n    /**\r\n    @param _totalStaked Set total amount staked in community\r\n     */\r\n    function setTotalStaked(uint _totalStaked) public ownerOnly {\r\n        totalStaked = _totalStaked;\r\n    }\r\n\r\n    /**\r\n    @param _timeStaked Time of user staking into community\r\n    @param msgSender Staker address\r\n     */\r\n    function setTimeStaked(uint _timeStaked, address msgSender) public ownerOnly {\r\n        timeStaked[msgSender] = _timeStaked;\r\n    }\r\n\r\n    /**\r\n    @param uuid id of escrowed task\r\n    @param balance Balance to be set of escrowed task\r\n     */\r\n    function setEscrowedTaskBalances(uint uuid, uint balance) public ownerOnly {\r\n        escrowedTaskBalances[uuid] = balance;\r\n    }\r\n\r\n    /**\r\n    @param uuid id of escrowed project\r\n    @param balance Balance to be set of escrowed project\r\n     */\r\n    function setEscrowedProjectBalances(uint uuid, uint balance) public ownerOnly {\r\n        escrowedProjectBalances[uuid] = balance;\r\n    }\r\n\r\n    /**\r\n    @param uuid id of escrowed project\r\n    @param payeeAddress Address funds will go to once project completed\r\n     */\r\n    function setEscrowedProjectPayees(uint uuid, address payeeAddress) public ownerOnly {\r\n        escrowedProjectPayees[uuid] = payeeAddress;\r\n    }\r\n\r\n    /**\r\n    @param balance Balance which to set total task escrow to\r\n     */\r\n    function setTotalTaskEscrow(uint balance) public ownerOnly {\r\n        totalTaskEscrow = balance;\r\n    }\r\n\r\n    /**\r\n    @param balance Balance which to set total project to\r\n     */\r\n    function setTotalProjectEscrow(uint balance) public ownerOnly {\r\n        totalProjectEscrow = balance;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"totalTaskEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"name\":\"destination\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokensOut\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"setTotalProjectEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrowedProjectPayees\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"setEscrowedTaskBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"uint256\"},{\"name\":\"payeeAddress\",\"type\":\"address\"}],\"name\":\"setEscrowedProjectPayees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newContractOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipNow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"setStakedBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalProjectEscrow\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"uuid\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"setEscrowedProjectBalances\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"setTotalTaskEscrow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrowedProjectBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalStaked\",\"type\":\"uint256\"}],\"name\":\"setTotalStaked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrowedTaskBalances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeStaked\",\"type\":\"uint256\"},{\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"setTimeStaked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdate\",\"type\":\"event\"}]","ContractName":"CommunityAccount","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://412e5a8c4e57b28247ab57db52f04f1664750335bc1e5a3bb1fba60e2f22932d"}]}