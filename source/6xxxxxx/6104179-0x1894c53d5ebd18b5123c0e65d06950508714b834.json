{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}   \r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/** \r\n * @title Based on the 'final' ERC20 token standard as specified at:\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md \r\n */\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function decimals() public view returns (uint8);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n}\r\n\r\n/**\r\n * @title TestToken\r\n * @dev The TestToken contract provides the token functionality of the IPT Global token\r\n * and allows the admin to distribute frozen tokens which requires defrosting to become transferable.\r\n */\r\ncontract TestToken is ERC20Interface, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    //Name of the token.\r\n    string  internal constant NAME = \"Test Token\";\r\n    \r\n    //Symbol of the token.\r\n    string  internal constant SYMBOL = \"TEST\";     \r\n    \r\n    //Granularity of the token.\r\n    uint8   internal constant DECIMALS = 8;        \r\n    \r\n    //Factor for numerical calculations.\r\n    uint256 internal constant DECIMALFACTOR = 10 ** uint(DECIMALS); \r\n    \r\n    //Total supply of IPT Global tokens.\r\n    uint256 internal constant TOTAL_SUPPLY = 300000000 * uint256(DECIMALFACTOR);  \r\n    \r\n    //Base defrosting value used to calculate fractional percentage of 0.2 %\r\n    uint8 internal constant standardDefrostingValue = 2;\r\n    \r\n    //Base defrosting numerator used to calculate fractional percentage of 0.2 %\r\n    uint8 internal constant standardDefrostingNumerator = 10;\r\n\r\n    \r\n    //Stores all frozen TEST Global token holders.\r\n    mapping(address => bool)    public frostbite;\r\n    \r\n    //Stores received frozen IPT Global tokens in an accumulated fashion. \r\n    mapping(address => uint256) public frozenTokensReceived;\r\n    \r\n    //Stores and tracks frozen IPT Global token balances.\r\n    mapping(address => uint256) public frozenBalance;\r\n    \r\n    //Stores custom frozen IPT Global token defrosting % rates. \r\n    mapping(address => uint8) public customDefrostingRate;\r\n    \r\n    //Stores the balance of IPT Global holders (complies with ERC-Standard).\r\n    mapping(address => uint256) internal balances; \r\n    \r\n    //Stores any allowances given to other IPT Global holders.\r\n    mapping(address => mapping(address => uint256)) internal allowed; \r\n    \r\n    \r\n    //Event which allows for logging of frostbite granting activities.\r\n    event FrostbiteGranted(\r\n        address recipient, \r\n        uint256 frozenAmount, \r\n        uint256 defrostingRate);\r\n    \r\n    //Event which allows for logging of frostbite terminating activities.\r\n    event FrostBiteTerminated(\r\n        address recipient,\r\n        uint256 frozenBalance);\r\n    \r\n    //Event which allows for logging of frozen token transfer activities.\r\n    event FrozenTokensTransferred(\r\n        address owner, \r\n        address recipient, \r\n        uint256 frozenAmount, \r\n        uint256 defrostingRate);\r\n    \r\n    //Event which allows for logging of custom frozen token defrosting activities.   \r\n    event CustomTokenDefrosting(\r\n        address owner,\r\n        uint256 percentage,\r\n        uint256 defrostedAmount);\r\n        \r\n    //Event which allows for logging of calculated frozen token defrosting activities.   \r\n    event CalculatedTokenDefrosting(\r\n        address owner,\r\n        uint256 defrostedAmount);\r\n    \r\n    //Event which allows for logging of complete recipient recovery activities.\r\n    event RecipientRecovered(\r\n        address recipient,\r\n        uint256 customDefrostingRate,\r\n        uint256 frozenBalance,\r\n        bool frostbite);\r\n     \r\n    //Event which allows for logging of recipient balance recovery activities.   \r\n    event FrozenBalanceDefrosted(\r\n        address recipient,\r\n        uint256 frozenBalance,\r\n        bool frostbite);\r\n    \r\n    //Event which allows for logging of defrostingrate-adjusting activities.\r\n    event DefrostingRateChanged(\r\n        address recipient,\r\n        uint256 defrostingRate);\r\n        \r\n    //Event which allows for logging of frozenBalance-adjusting activities.\r\n    event FrozenBalanceChanged(\r\n        address recipient, \r\n        uint256 defrostedAmount);\r\n    \r\n    \r\n    /**\r\n     * @dev constructor sets initialises and configurates the smart contract.\r\n     * More specifically, it grants the smart contract owner the total supply\r\n     * of IPT Global tokens.\r\n     */\r\n    constructor() public {\r\n        balances[msg.sender] = TOTAL_SUPPLY;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev frozenTokenTransfer function allows the owner of the smart contract to Transfer\r\n     * frozen tokens (untransferable till melted) to a particular recipient.\r\n     * @param _recipient the address which will receive the frozen tokens.\r\n     * @param _frozenAmount the value which will be sent to the _recipient.\r\n     * @param _customDefrostingRate the rate at which the tokens will be melted.\r\n     * @return a boolean representing whether the function was executed succesfully.\r\n     */\r\n    function frozenTokenTransfer(address _recipient, uint256 _frozenAmount, uint8 _customDefrostingRate) external onlyOwner returns (bool) {\r\n        require(_recipient != address(0));\r\n        require(_frozenAmount <= balances[msg.sender]);\r\n        \r\n        frozenTokensReceived[_recipient] = _frozenAmount;\r\n               frozenBalance[_recipient] = _frozenAmount;\r\n        customDefrostingRate[_recipient] = _customDefrostingRate;\r\n                   frostbite[_recipient] = true;\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_frozenAmount);\r\n        balances[_recipient] = balances[_recipient].add(_frozenAmount);\r\n        \r\n        emit FrozenTokensTransferred(msg.sender, _recipient, _frozenAmount, customDefrostingRate[_recipient]);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev changeCustomDefrostingRate function allows the owner of the smart contract to change individual custom defrosting rates.\r\n     * @param _recipient the address whose defrostingRate will be adjusted.\r\n     * @param _newCustomDefrostingRate the new defrosting rate which will be placed on the recipient.\r\n     * @return a boolean representing whether the function was executed succesfully.\r\n     */\r\n    function changeCustomDefrostingRate(address _recipient, uint8 _newCustomDefrostingRate) external onlyOwner returns (bool) {\r\n        require(_recipient != address(0));\r\n        require(frostbite[_recipient]);\r\n        \r\n        customDefrostingRate[_recipient] = _newCustomDefrostingRate;\r\n        \r\n        emit DefrostingRateChanged(_recipient, _newCustomDefrostingRate);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev changeFrozenBalance function allows the owner of the smart contract to change individual particular frozen balances.\r\n     * @param _recipient the address whose defrostingRate will be adjusted.\r\n     * @param _defrostedAmount the defrosted/subtracted amount of an existing particular frozen balance..\r\n     * @return a boolean representing whether the function was executed succesfully.\r\n     */\r\n    function changeFrozenBalance(address _recipient, uint256 _defrostedAmount) external onlyOwner returns (bool) {\r\n        require(_recipient != address(0));\r\n        require(_defrostedAmount <= frozenBalance[_recipient]);\r\n        require(frostbite[_recipient]);\r\n        \r\n        frozenBalance[_recipient] = frozenBalance[_recipient].sub(_defrostedAmount);\r\n        \r\n        emit FrozenBalanceChanged(_recipient, _defrostedAmount);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev removeFrozenTokenConfigurations function allows the owner of the smart contract to remove all \r\n     * frostbites, frozenbalances and defrosting rates of an array of recipient addresses < 50.\r\n     * @param _recipients the address(es) which will be recovered.\r\n     * @return a boolean representing whether the function was executed succesfully.\r\n     */\r\n    function removeFrozenTokenConfigurations(address[] _recipients) external onlyOwner returns (bool) {\r\n        \r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n            if (frostbite[_recipients[i]]) {\r\n                customDefrostingRate[_recipients[i]] = 0;\r\n                       frozenBalance[_recipients[i]] = 0;\r\n                           frostbite[_recipients[i]] = false;\r\n                \r\n                emit RecipientRecovered(_recipients[i], customDefrostingRate[_recipients[i]], frozenBalance[_recipients[i]], false);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev standardTokenDefrosting function allows the owner of the smart contract to defrost\r\n     * frozen tokens based on a base defrosting Rate of 0.2 % (from multiple recipients at once if desired) of particular recipient addresses < 50.\r\n     * @param _recipients the address(es) which will receive defrosting of frozen tokens.\r\n     * @return a boolean representing whether the function was executed succesfully.\r\n     */\r\n    function standardTokenDefrosting(address[] _recipients) external onlyOwner returns (bool) {\r\n        \r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n            if (frostbite[_recipients[i]]) {\r\n                uint256 defrostedAmount = (frozenTokensReceived[_recipients[i]].mul(standardDefrostingValue).div(standardDefrostingNumerator)).div(100);\r\n                \r\n                frozenBalance[_recipients[i]] = frozenBalance[_recipients[i]].sub(defrostedAmount);\r\n                \r\n                emit CalculatedTokenDefrosting(msg.sender, defrostedAmount);\r\n            }\r\n            if (frozenBalance[_recipients[i]] == 0) {\r\n                         frostbite[_recipients[i]] = false;\r\n                         \r\n                emit FrozenBalanceDefrosted(_recipients[i], frozenBalance[_recipients[i]], false);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev customTokenDefrosting function allows the owner of the smart contract to defrost\r\n     * frozen tokens based on custom defrosting Rates (from multiple recipients at once if desired) of particular recipient addresses < 50.\r\n     * @param _recipients the address(es) which will receive defrosting of frozen tokens.\r\n     * @return a boolean representing whether the function was executed succesfully.\r\n     */\r\n    function customTokenDefrosting(address[] _recipients) external onlyOwner returns (bool) {\r\n        \r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n            if (frostbite[_recipients[i]]) {\r\n                uint256 defrostedAmount = (frozenTokensReceived[_recipients[i]].mul(customDefrostingRate[_recipients[i]])).div(100);\r\n                \r\n                frozenBalance[_recipients[i]] = frozenBalance[_recipients[i]].sub(defrostedAmount);\r\n               \r\n                emit CustomTokenDefrosting(msg.sender, customDefrostingRate[_recipients[i]], defrostedAmount);\r\n            }\r\n            if (frozenBalance[_recipients[i]] == 0) {\r\n                         frostbite[_recipients[i]] = false;\r\n                         \r\n                    emit FrozenBalanceDefrosted(_recipients[i], frozenBalance[_recipients[i]], false);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     * @return a boolean representing whether the function was executed succesfully.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        \r\n        if (frostbite[msg.sender]) {\r\n            require(_value <= balances[msg.sender].sub(frozenBalance[msg.sender]));\r\n        }\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n         \r\n    }\r\n    \r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     * @return a boolean representing whether the function was executed succesfully.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        \r\n        if (frostbite[_from]) {\r\n            require(_value <= balances[_from].sub(frozenBalance[_from]));\r\n            require(_value <= allowed[_from][msg.sender]);\r\n        }\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     * @return a boolean representing whether the function was executed succesfully.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev balanceOf function gets the balance of the specified address.\r\n     * @param _owner The address to query the balance of.\r\n     * @return An uint256 representing the token balance of the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n        \r\n    /**\r\n     * @dev allowance function checks the amount of tokens allowed by an owner for a spender to spend.\r\n     * @param _owner address is the address which owns the spendable funds.\r\n     * @param _spender address is the address which will spend the owned funds.\r\n     * @return A uint256 specifying the amount of tokens which are still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    /**\r\n     * @dev totalSupply function returns the total supply of tokens.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n    \r\n    /** \r\n     * @dev decimals function returns the decimal units of the token. \r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n            \r\n    /** \r\n     * @dev symbol function returns the symbol ticker of the token. \r\n     */\r\n    function symbol() public view returns (string) {\r\n        return SYMBOL;\r\n    }\r\n    \r\n    /** \r\n     * @dev name function returns the name of the token. \r\n     */\r\n    function name() public view returns (string) {\r\n        return NAME;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"customDefrostingRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_defrostedAmount\",\"type\":\"uint256\"}],\"name\":\"changeFrozenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_frozenAmount\",\"type\":\"uint256\"},{\"name\":\"_customDefrostingRate\",\"type\":\"uint8\"}],\"name\":\"frozenTokenTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"customTokenDefrosting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"standardTokenDefrosting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_newCustomDefrostingRate\",\"type\":\"uint8\"}],\"name\":\"changeCustomDefrostingRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenTokensReceived\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frostbite\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"removeFrozenTokenConfigurations\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"defrostingRate\",\"type\":\"uint256\"}],\"name\":\"FrostbiteGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozenBalance\",\"type\":\"uint256\"}],\"name\":\"FrostBiteTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"defrostingRate\",\"type\":\"uint256\"}],\"name\":\"FrozenTokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"defrostedAmount\",\"type\":\"uint256\"}],\"name\":\"CustomTokenDefrosting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"defrostedAmount\",\"type\":\"uint256\"}],\"name\":\"CalculatedTokenDefrosting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"customDefrostingRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"frozenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"frostbite\",\"type\":\"bool\"}],\"name\":\"RecipientRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"frostbite\",\"type\":\"bool\"}],\"name\":\"FrozenBalanceDefrosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"defrostingRate\",\"type\":\"uint256\"}],\"name\":\"DefrostingRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"defrostedAmount\",\"type\":\"uint256\"}],\"name\":\"FrozenBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"TestToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cf87e5201ecf7af543bb6fba429a9b69c154319187acf120de9caa63c60c6ab9"}]}