{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner,\"Have no legal powerd\");\r\n    _;\r\n  }\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\ncontract ERC20Interface {\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n}\r\ncontract VoterFactory is Ownable{\r\n    using SafeMath for uint256; //uint256 library\r\n    mapping(address=>uint) total; //player total Voter\r\n    mapping(address=>mapping(uint=>uint)) totalForVoter;\r\n    mapping(address=>uint) balances;//player gamcoin \r\n    mapping(address=>uint) playerP;//player PID\r\n    mapping(uint=>address) playerA;//PID to player address\r\n    mapping(address=>mapping(uint=>uint)) playerV;//player=>voterID=>voters\r\n    mapping(address=>uint) playerEth;//player=>ETHER\r\n    mapping(address=>address) referees;//player=>referees\r\n    mapping(address=>address[]) totalReferees;//referees=>totalplayer\r\n    mapping(address=>uint) isCreated;\r\n    \r\n    \r\n    event NewVoter(uint _id,uint256 _name,uint _value,uint _vectoryvalue);// new model event\r\n    event GiveVoter(address indexed _fromaddress,uint _toid,uint _number);// voter event\r\n    event gameover(bool isReady);//gameover\r\n    event NewPlayer(uint _id,address indexed _address);//createPlayer\r\n    event restart(bool isReady,uint _RID);//reboot\r\n    event EgiveToVoterOnlyowner(uint _toid,uint _number);\r\n    event EgetPlayerCoin(address indexed _address,uint256 _number,bool _bool);\r\n    event Ewithdraw(uint _ether);\r\n    event EsetFee(uint _time,uint _fee);\r\n    event Ebuygamecoin(uint _time,uint _number,address indexed _address);\r\n    event EgetEveryDayEarnings(uint _time,uint _number,uint _totalplayers,address _address);\r\n    \r\n    struct Voter{\r\n        uint id;\r\n        uint256 name;\r\n        uint value;\r\n        address[] pa;\r\n        uint totalplayer;\r\n    }\r\n    struct Winner{\r\n        uint256 name;\r\n        uint value;\r\n    }\r\n    Winner[] public winners;\r\n    Voter[] public voters;\r\n    Voter[] voterss;\r\n    uint public RID=0;\r\n    uint public totalRef;\r\n    uint public totalplayers;//total player\r\n    uint public ids=0;//total model\r\n    uint public fee = 340000000000000;//gamcoin fee\r\n    uint public createTime = now;//create Time\r\n    uint public shutTime = 0 minutes;//shutdown time\r\n    uint public decimals = 18; \r\n    bool public started = false;\r\n    uint public EthOther = 100000000000000000000;\r\n    uint public EthOtherfee = 10000;\r\n    address public winnerOfplayer;\r\n    address[]  public _addrs;\r\n    ERC20Interface CDS;\r\n}\r\ncontract VoterServiceImpl is VoterFactory{\r\n    function _createPlayer(address _address) internal {\r\n        playerA[totalplayers] = _address;\r\n        playerP[_address] = totalplayers;\r\n        totalplayers=totalplayers.add(1);\r\n        _addrs.push(_address);\r\n        emit NewPlayer(totalplayers-1,_address);\r\n    }\r\n    function _getEarnings(address _address,uint _playerTotal,uint _value,uint _oldvalue) internal {\r\n        uint proportion = _playerTotal.div(_oldvalue);\r\n        uint surplus = (_value.div(2)).add(_value.div(5));\r\n        balances[_address] = balances[_address].add(proportion.mul(_value.sub(surplus)));\r\n        totalRef = totalRef.add(proportion.mul(_value.sub(surplus)));\r\n    }\r\n    function _shutDown() internal{\r\n        require(now>=(createTime+shutTime),\"Not over yet\");\r\n        if(balances[owner]!=0){\r\n            uint256  vectoryId=0;\r\n            if(ids!=0){\r\n                for(uint256 i=0;i<ids;i=i.add(1)){\r\n                    if(voters[i].value>voters[vectoryId].value){\r\n                        vectoryId=i;\r\n                    }\r\n                }\r\n                winners.push(Winner(voters[vectoryId].name,voters[vectoryId].value));\r\n                uint vectoryValue = balances[owner];\r\n                uint oldvalue = voters[vectoryId].value;\r\n                for(uint256 k=0;k<voters[vectoryId].totalplayer;k=k.add(1)){\r\n                    address add = voters[vectoryId].pa[k];\r\n                    uint playerTotal = playerV[add][vectoryId];\r\n                    _getEarnings(add,playerTotal,vectoryValue,oldvalue);\r\n                }\r\n                for(uint256 j=0;j<ids;j=j.add(1)){\r\n                voters[j].value=0;\r\n                }\r\n            }\r\n            if(totalplayers!=0){\r\n                for(uint256 s=0;s<totalplayers;s=s.add(1)){\r\n                    total[playerA[s]]=0;\r\n                    playerP[playerA[s]]=0;\r\n                    for(uint256 n=0;n<ids;n=n.add(1)){\r\n                        playerV[playerA[s]][n]=0;\r\n                    }\r\n                    playerEth[playerA[s]]=0;\r\n                    referees[playerA[s]];\r\n                    totalReferees[playerA[s]];\r\n                    playerA[s]=0;\r\n                }\r\n            }\r\n            balances[winnerOfplayer] = balances[winnerOfplayer].add(vectoryValue.div(50));\r\n        }\r\n        totalplayers=0;\r\n        ids=0;\r\n        EthOtherfee=10000;\r\n        EthOther=100000000000000000000;\r\n        winnerOfplayer = owner;\r\n        voters = voterss;\r\n        balances[owner]=0;\r\n        started=false;\r\n    }\r\n    function _createVoter(uint256 _str) internal onlyOwner{\r\n        address[] memory p;\r\n        voters.push(Voter(ids,_str,0,p,0));\r\n        ids=ids.add(1);\r\n    }\r\n}\r\n\r\n\r\ncontract Voterplayer is VoterServiceImpl{\r\n    function giveToVoter(uint _value,uint _id) public {\r\n        require(started);\r\n        require(msg.sender!=owner);\r\n        uint time = createTime.add(shutTime);\r\n        require(now<time);\r\n        require(_id<=ids);\r\n        require(msg.sender!=owner,\"owner Can't vote\");\r\n        require(balances[msg.sender]>=_value,\"balances too low\");\r\n        balances[msg.sender]=balances[msg.sender].sub(_value);\r\n        totalForVoter[msg.sender][_id]=totalForVoter[msg.sender][_id].add(_value);\r\n        if(playerV[msg.sender][_id]==0){\r\n            voters[_id].pa.push(msg.sender);\r\n            voters[_id].totalplayer=voters[_id].totalplayer.add(1);\r\n        }\r\n        if(referees[msg.sender]!=0){\r\n            balances[referees[msg.sender]] = balances[referees[msg.sender]].add(_value.mul(1).div(10));\r\n            totalRef = totalRef.add(_value.mul(1).div(10));\r\n        }\r\n        total[msg.sender]=total[msg.sender].add(_value);\r\n        balances[owner]=balances[owner].add(_value);\r\n        voters[_id].value=voters[_id].value.add(_value);\r\n        playerV[msg.sender][_id] = playerV[msg.sender][_id].add(_value);\r\n        emit GiveVoter(msg.sender,_id,_value);\r\n        return;\r\n    }\r\n    function createAllVoter(uint256[] _voter) public onlyOwner{\r\n        for(uint i=0;i<_voter.length;i=i.add(1)){\r\n             createVoter(_voter[i]);\r\n        }\r\n    }\r\n    function giveToVoterOnlyowner(uint _value,uint _id) public onlyOwner{\r\n        require(started);\r\n        voters[_id].value=voters[_id].value.add(_value);\r\n        balances[owner]=balances[owner].add(_value);\r\n        emit EgiveToVoterOnlyowner(_id,_value);\r\n    }\r\n    function getaddresstotal(uint _id) public view returns(uint){\r\n        return voters[_id].totalplayer;\r\n    }\r\n    function getTotalForVoter(address _address,uint _id) view public returns(uint){\r\n        return totalForVoter[_address][_id];\r\n    } \r\n    function getTotalVoter(address _address) view public returns(uint totals){\r\n        return total[_address];\r\n    }\r\n    function balanceOf(address _address) view public returns(uint balance){\r\n        return balances[_address];\r\n    }\r\n    function refereesOf(address _address) view public returns(address[]){\r\n        return totalReferees[_address];\r\n    }\r\n    function getAllPlayer() view public returns(address[]){\r\n        return _addrs;\r\n    }\r\n    function buyGameCoin(uint256 _number,address _address) public payable{\r\n        require(started);\r\n        require(msg.sender!=owner);\r\n        uint256  coinfee = _number.div(10).mul(fee);\r\n        require(msg.value>=coinfee);\r\n        if(msg.sender!=_address&&referees[msg.sender]==0){\r\n            require(balances[_address]>0);\r\n            balances[_address] = balances[_address].add((_number.mul(30).div(100)).mul(1).div(10));\r\n            totalRef = totalRef.add(_number.mul(10).div(100));\r\n            referees[msg.sender] = _address;\r\n            totalReferees[_address].push(msg.sender);\r\n        }else if(msg.sender==_address&&referees[msg.sender]!=0){\r\n            balances[referees[msg.sender]] = balances[referees[msg.sender]].add((_number.mul(30).div(100)).mul(1).div(10));\r\n            totalRef = totalRef.add((_number.mul(30).div(100)).mul(1).div(10));\r\n        }\r\n        total[msg.sender] = total[msg.sender].add(_number.mul(30).div(100));\r\n        if(isCreated[msg.sender]==0){\r\n            isCreated[msg.sender] = 1;\r\n            _createPlayer(msg.sender);\r\n        }\r\n        balances[msg.sender]=balances[msg.sender].add(_number.mul(70).div(100));\r\n        balances[owner] = balances[owner].add(_number.mul(30).div(100));\r\n        if(playerEth[owner]>=EthOther){\r\n            EthOtherfee=EthOtherfee.mul(2);\r\n            EthOther = EthOther.mul(3);\r\n        }\r\n        fee=fee.add(fee.div(EthOtherfee.mul(1000)).mul((msg.value.sub(msg.value%1000000000000000)).div(1000000000000000)));\r\n        playerEth[owner] = playerEth[owner].add(msg.value);\r\n        msg.sender.transfer(msg.value.sub(coinfee));\r\n        owner.transfer(coinfee);\r\n        shutTime = shutTime.add(_number.div(10));\r\n        winnerOfplayer = msg.sender;\r\n        emit Ebuygamecoin(now,_number,_address);\r\n    }\r\n    function getPlayerCoin(uint256 _number) external {\r\n        require(balances[msg.sender]>=_number);\r\n        balances[msg.sender] = balances[msg.sender].sub(_number);\r\n        uint256 _token = _number.div(10).mul(10**decimals);\r\n        require(CDS.transferFrom(owner,msg.sender,_token));\r\n        emit EgetPlayerCoin(msg.sender,_number,true);\r\n    }\r\n    function createVoter(uint256 _name) public onlyOwner{\r\n        _createVoter(_name);\r\n        emit NewVoter(ids-1,_name,0,0);\r\n    }\r\n    function startGame(uint _time,address _address,uint256 _decimals) public onlyOwner{\r\n        require(!started);\r\n        require(_address!=address(0));\r\n        CDS=ERC20Interface(_address);\r\n        decimals=_decimals;\r\n        createTime=now;\r\n        shutTime= _time;\r\n        RID=RID.add(1);\r\n        started=true;\r\n        totalRef=0;\r\n        emit restart(started,RID);\r\n    }\r\n    function setTime(uint _time) public onlyOwner{\r\n        require(started);\r\n        shutTime= _time;\r\n    }\r\n    function setFee(uint _fee) public onlyOwner{\r\n        fee=_fee;\r\n        emit EsetFee(now,_fee);\r\n    }\r\n    function gameOver() public onlyOwner{\r\n        _shutDown();\r\n        emit gameover(true);\r\n    }\r\n    function withdraw() external onlyOwner {\r\n        address myAddress = address(this);\r\n        owner.transfer(myAddress.balance);\r\n        emit Ewithdraw(myAddress.balance);\r\n    }\r\n    function setCDStokenAddress(address _address,uint256 _decimals) public onlyOwner{\r\n       require(_address!=address(0));\r\n        decimals=_decimals;\r\n        CDS=ERC20Interface(_address);\r\n    }\r\n    \r\n    function getEveryDayEarnings(address _address,uint256 _number) public onlyOwner{\r\n        require(balances[owner]>=_number);\r\n        totalRef=totalRef.add(_number.mul(2));\r\n        balances[_address]=balances[_address].add(_number);\r\n        if(totalplayers!=0){\r\n                for(uint256 s=0;s<totalplayers;s=s.add(1)){\r\n                    if(total[playerA[s]]==0){\r\n                        continue;\r\n                    }\r\n                    balances[playerA[s]] = balances[playerA[s]].add(_number.mul(total[playerA[s]]).div(balances[owner]));\r\n                }\r\n            }\r\n        emit EgetEveryDayEarnings(now,_number,totalplayers,_address);\r\n    }\r\n    \r\n}\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_addrs\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getaddresstotal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllPlayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalplayers\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"getPlayerCoin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"startGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"winnerOfplayer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_voter\",\"type\":\"uint256[]\"}],\"name\":\"createAllVoter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"giveToVoter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"createTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shutTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"RID\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"uint256\"}],\"name\":\"createVoter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRef\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EthOtherfee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTotalVoter\",\"outputs\":[{\"name\":\"totals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"name\":\"name\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"refereesOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"giveToVoterOnlyowner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getTotalForVoter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gameOver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_number\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"buyGameCoin\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"name\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"totalplayer\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EthOther\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_decimals\",\"type\":\"uint256\"}],\"name\":\"setCDStokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"getEveryDayEarnings\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_vectoryvalue\",\"type\":\"uint256\"}],\"name\":\"NewVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_fromaddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_toid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"GiveVoter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isReady\",\"type\":\"bool\"}],\"name\":\"gameover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"NewPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isReady\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_RID\",\"type\":\"uint256\"}],\"name\":\"restart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_toid\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"EgiveToVoterOnlyowner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"EgetPlayerCoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ether\",\"type\":\"uint256\"}],\"name\":\"Ewithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"EsetFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_number\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Ebuygamecoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_totalplayers\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"EgetEveryDayEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Voterplayer","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://01522242412e0ff2b1e6e0f57343559fe9902a5c6f9eba70e1e50e0d274a4c55"}]}