{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.21;\r\ncontract Custodian {\r\n    struct Request {\r\n        bytes32 lockId;\r\n        bytes4 callbackSelector;\r\n        address callbackAddress;\r\n        uint256 idx;\r\n        uint256 timestamp;\r\n        bool extended;\r\n    }\r\n    event Requested(\r\n        bytes32 _lockId,\r\n        address _callbackAddress,\r\n        bytes4  _callbackSelector,\r\n        uint256 _nonce,\r\n        address _whitelistedAddress,\r\n        bytes32 _requestMsgHash,\r\n        uint256 _timeLockExpiry\r\n    );\r\n    event TimeLocked(\r\n        uint256 _timeLockExpiry,\r\n        bytes32 _requestMsgHash\r\n    );\r\n    event Completed(\r\n        bytes32 _lockId,\r\n        bytes32 _requestMsgHash,\r\n        address _signer1,\r\n        address _signer2\r\n    );\r\n    event Failed(\r\n        bytes32 _lockId,\r\n        bytes32 _requestMsgHash,\r\n        address _signer1,\r\n        address _signer2\r\n    );\r\n    event TimeLockExtended(\r\n        uint256 _timeLockExpiry,\r\n        bytes32 _requestMsgHash\r\n    );\r\n    uint256 public requestCount;\r\n    mapping (address => bool) public signerSet;\r\n    mapping (bytes32 => Request) public requestMap;\r\n    mapping (address => mapping (bytes4 => uint256)) public lastCompletedIdxs;\r\n    uint256 public defaultTimeLock;\r\n    uint256 public extendedTimeLock;\r\n    address public primary;\r\n    function Custodian(\r\n        address[] _signers,\r\n        uint256 _defaultTimeLock,\r\n        uint256 _extendedTimeLock,\r\n        address _primary\r\n    )\r\n        public\r\n    {\r\n        require(_signers.length >= 2);\r\n        require(_defaultTimeLock <= _extendedTimeLock);\r\n        defaultTimeLock = _defaultTimeLock;\r\n        extendedTimeLock = _extendedTimeLock;\r\n        primary = _primary;\r\n        requestCount = 0;\r\n        for (uint i = 0; i < _signers.length; i++) {\r\n            require(_signers[i] != address(0) && !signerSet[_signers[i]]);\r\n            signerSet[_signers[i]] = true;\r\n        }\r\n    }\r\n    modifier onlyPrimary {\r\n        require(msg.sender == primary);\r\n        _;\r\n    }\r\n    function requestUnlock(\r\n        bytes32 _lockId,\r\n        address _callbackAddress,\r\n        bytes4 _callbackSelector,\r\n        address _whitelistedAddress\r\n    )\r\n        public\r\n        payable\r\n        returns (bytes32 requestMsgHash)\r\n    {\r\n        require(msg.sender == primary || msg.value >= 1 ether);\r\n        require(_callbackAddress != address(0));\r\n        uint256 requestIdx = ++requestCount;\r\n        uint256 nonce = uint256(keccak256(block.blockhash(block.number - 1), address(this), requestIdx));\r\n        requestMsgHash = keccak256(nonce, _whitelistedAddress, uint256(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\r\n        requestMap[requestMsgHash] = Request({\r\n            lockId: _lockId,\r\n            callbackSelector: _callbackSelector,\r\n            callbackAddress: _callbackAddress,\r\n            idx: requestIdx,\r\n            timestamp: block.timestamp,\r\n            extended: false\r\n        });\r\n        uint256 timeLockExpiry = block.timestamp;\r\n        if (msg.sender == primary) {\r\n            timeLockExpiry += defaultTimeLock;\r\n        } else {\r\n            timeLockExpiry += extendedTimeLock;\r\n            requestMap[requestMsgHash].extended = true;\r\n        }\r\n        emit Requested(_lockId, _callbackAddress, _callbackSelector, nonce, _whitelistedAddress, requestMsgHash, timeLockExpiry);\r\n    }\r\n    function completeUnlock(\r\n        bytes32 _requestMsgHash,\r\n        uint8 _recoveryByte1, bytes32 _ecdsaR1, bytes32 _ecdsaS1,\r\n        uint8 _recoveryByte2, bytes32 _ecdsaR2, bytes32 _ecdsaS2\r\n    )\r\n        public\r\n        returns (bool success)\r\n    {\r\n        Request storage request = requestMap[_requestMsgHash];\r\n        bytes32 lockId = request.lockId;\r\n        address callbackAddress = request.callbackAddress;\r\n        bytes4 callbackSelector = request.callbackSelector;\r\n        require(callbackAddress != address(0));\r\n        require(request.idx > lastCompletedIdxs[callbackAddress][callbackSelector]);\r\n        address signer1 = ecrecover(_requestMsgHash, _recoveryByte1, _ecdsaR1, _ecdsaS1);\r\n        require(signerSet[signer1]);\r\n        address signer2 = ecrecover(_requestMsgHash, _recoveryByte2, _ecdsaR2, _ecdsaS2);\r\n        require(signerSet[signer2]);\r\n        require(signer1 != signer2);\r\n        if (request.extended && ((block.timestamp - request.timestamp) < extendedTimeLock)) {\r\n            emit TimeLocked(request.timestamp + extendedTimeLock, _requestMsgHash);\r\n            return false;\r\n        } else if ((block.timestamp - request.timestamp) < defaultTimeLock) {\r\n            emit TimeLocked(request.timestamp + defaultTimeLock, _requestMsgHash);\r\n            return false;\r\n        } else {\r\n            if (address(this).balance > 0) {\r\n                success = msg.sender.send(address(this).balance);\r\n            }\r\n            lastCompletedIdxs[callbackAddress][callbackSelector] = request.idx;\r\n            delete requestMap[_requestMsgHash];\r\n            success = callbackAddress.call(callbackSelector, lockId);\r\n            if (success) {\r\n                emit Completed(lockId, _requestMsgHash, signer1, signer2);\r\n            } else {\r\n                emit Failed(lockId, _requestMsgHash, signer1, signer2);\r\n            }\r\n        }\r\n    }\r\n    function deleteUncompletableRequest(bytes32 _requestMsgHash) public {\r\n        Request storage request = requestMap[_requestMsgHash];\r\n        uint256 idx = request.idx;\r\n        require(0 < idx && idx < lastCompletedIdxs[request.callbackAddress][request.callbackSelector]);\r\n        delete requestMap[_requestMsgHash];\r\n    }\r\n    function extendRequestTimeLock(bytes32 _requestMsgHash) public onlyPrimary {\r\n        Request storage request = requestMap[_requestMsgHash];\r\n        require(request.callbackAddress != address(0));\r\n        require(request.extended != true);\r\n        request.extended = true;\r\n        emit TimeLockExtended(request.timestamp + extendedTimeLock, _requestMsgHash);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"signerSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"},{\"name\":\"_recoveryByte1\",\"type\":\"uint8\"},{\"name\":\"_ecdsaR1\",\"type\":\"bytes32\"},{\"name\":\"_ecdsaS1\",\"type\":\"bytes32\"},{\"name\":\"_recoveryByte2\",\"type\":\"uint8\"},{\"name\":\"_ecdsaR2\",\"type\":\"bytes32\"},{\"name\":\"_ecdsaS2\",\"type\":\"bytes32\"}],\"name\":\"completeUnlock\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"}],\"name\":\"extendRequestTimeLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"name\":\"_callbackSelector\",\"type\":\"bytes4\"},{\"name\":\"_whitelistedAddress\",\"type\":\"address\"}],\"name\":\"requestUnlock\",\"outputs\":[{\"name\":\"requestMsgHash\",\"type\":\"bytes32\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"primary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"extendedTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestMap\",\"outputs\":[{\"name\":\"lockId\",\"type\":\"bytes32\"},{\"name\":\"callbackSelector\",\"type\":\"bytes4\"},{\"name\":\"callbackAddress\",\"type\":\"address\"},{\"name\":\"idx\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"extended\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"lastCompletedIdxs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"}],\"name\":\"deleteUncompletableRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_signers\",\"type\":\"address[]\"},{\"name\":\"_defaultTimeLock\",\"type\":\"uint256\"},{\"name\":\"_extendedTimeLock\",\"type\":\"uint256\"},{\"name\":\"_primary\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_callbackSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_whitelistedAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_timeLockExpiry\",\"type\":\"uint256\"}],\"name\":\"Requested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timeLockExpiry\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"}],\"name\":\"TimeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_signer1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_signer2\",\"type\":\"address\"}],\"name\":\"Completed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_lockId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_signer1\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_signer2\",\"type\":\"address\"}],\"name\":\"Failed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_timeLockExpiry\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_requestMsgHash\",\"type\":\"bytes32\"}],\"name\":\"TimeLockExtended\",\"type\":\"event\"}]","ContractName":"Custodian","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000002a3000000000000000000000000000000000000000000000000000000000000093a80000000000000000000000000bf0cdf34d2212c8c58e082baaaf8d306a924302c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000da3051d3200d011bc992f4a243eca22a041e74c7000000000000000000000000eb85db60e59f03f30906320b02f4873607c1d4da00000000000000000000000045ff3c2f3f5fc3c27a395fe1f48b36f5dd638b5e0000000000000000000000002e34ced746dd5c727a439c8f0fdb8b0064eb8fa3","Library":"","SwarmSource":"bzzr://0fcdc36b28e05c171b2ed9ccb51a984e973a64897f010b11d22ae8d26d927c60"}]}