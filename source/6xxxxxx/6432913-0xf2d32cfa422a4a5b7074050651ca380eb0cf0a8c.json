{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *\r\n * Easy Investment Contract version 2.0\r\n * It is a copy of original Easy Investment Contract\r\n * But here a unique functions is added\r\n * \r\n * For the first time you can sell your deposit to another user!!!\r\n * \r\n */\r\npragma solidity ^0.4.24;\r\n\r\ncontract EasyStockExchange {\r\n    mapping (address => uint256) invested;\r\n    mapping (address => uint256) atBlock;\r\n    mapping (address => uint256) forSale;\r\n    mapping (address => bool) isSale;\r\n    \r\n    address creator;\r\n    bool paidBonus;\r\n    uint256 success = 1000 ether;\r\n    \r\n    event Deals(address indexed _seller, address indexed _buyer, uint256 _amount);\r\n    event Profit(address indexed _to, uint256 _amount);\r\n    \r\n    constructor () public {\r\n        creator = msg.sender;\r\n        paidBonus = false;\r\n    }\r\n\r\n    modifier onlyOnce () {\r\n        require (msg.sender == creator,\"Access denied.\");\r\n        require(paidBonus == false,\"onlyOnce.\");\r\n        require(address(this).balance > success,\"It is too early.\");\r\n        _;\r\n        paidBonus = true;\r\n    }\r\n\r\n    // this function called every time anyone sends a transaction to this contract\r\n    function () external payable {\r\n        // if sender (aka YOU) is invested more than 0 ether\r\n        if (invested[msg.sender] != 0) {\r\n            // calculate profit amount as such:\r\n            // amount = (amount invested) * 4% * (blocks since last transaction) / 5900\r\n            // 5900 is an average block count per day produced by Ethereum blockchain\r\n            uint256 amount = invested[msg.sender] * 4 / 100 * (block.number - atBlock[msg.sender]) / 5900;\r\n\r\n            // send calculated amount of ether directly to sender (aka YOU)\r\n            address sender = msg.sender;\r\n            sender.transfer(amount);\r\n            emit Profit(sender, amount);\r\n        }\r\n\r\n        // record block number and invested amount (msg.value) of this transaction\r\n        atBlock[msg.sender] = block.number;\r\n        invested[msg.sender] += msg.value;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * function add your deposit to the exchange\r\n     * fee from a deals is 10% only if success\r\n     * fee funds is adding to main contract balance\r\n     */\r\n    function startSaleDepo (uint256 _salePrice) public {\r\n        require (invested[msg.sender] > 0,\"You have not deposit for sale.\");\r\n        forSale[msg.sender] = _salePrice;\r\n        isSale[msg.sender] = true;\r\n    }\r\n\r\n    /**\r\n     * function remove your deposit from the exchange\r\n     */    \r\n    function stopSaleDepo () public {\r\n        require (isSale[msg.sender] == true,\"You have not deposit for sale.\");\r\n        isSale[msg.sender] = false;\r\n    }\r\n    \r\n    /**\r\n     * function buying deposit \r\n     */\r\n    function buyDepo (address _depo) public payable {\r\n        require (isSale[_depo] == true,\"So sorry, but this deposit is not for sale.\");\r\n        isSale[_depo] = false; // lock reentrance\r\n\r\n        require (forSale[_depo] == msg.value,\"Summ for buying deposit is incorrect.\");\r\n        address seller = _depo;\r\n        \r\n        \r\n        //keep the accrued interest of sold deposit\r\n        uint256 amount = invested[_depo] * 4 / 100 * (block.number - atBlock[_depo]) / 5900;\r\n        invested[_depo] += amount;\r\n\r\n\r\n        //keep the accrued interest of buyer deposit\r\n        if (invested[msg.sender] > 0) {\r\n            amount = invested[msg.sender] * 4 / 100 * (block.number - atBlock[msg.sender]) / 5900;\r\n            invested[msg.sender] += amount;\r\n        }\r\n        \r\n        // change owner deposit\r\n        invested[msg.sender] += invested[_depo];\r\n        atBlock[msg.sender] = block.number;\r\n\r\n        \r\n        invested[_depo] = 0;\r\n        atBlock[_depo] = block.number;\r\n\r\n        \r\n        isSale[_depo] = false;\r\n        seller.transfer(msg.value * 9 / 10); //10% is fee for deal. This funds is stay at main contract\r\n        emit Deals(_depo, msg.sender, msg.value);\r\n    }\r\n    \r\n    function showDeposit(address _depo) public view returns(uint256) {\r\n        return invested[_depo];\r\n    }\r\n\r\n    function showUnpaidDepositPercent(address _depo) public view returns(uint256) {\r\n        return invested[_depo] * 4 / 100 * (block.number - atBlock[_depo]) / 5900;\r\n    }\r\n    \r\n    function Success () public onlyOnce {\r\n        // bonus 5% to creator for successful project\r\n        creator.transfer(address(this).balance / 20);\r\n\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"Success\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_depo\",\"type\":\"address\"}],\"name\":\"buyDepo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSaleDepo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_depo\",\"type\":\"address\"}],\"name\":\"showUnpaidDepositPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"startSaleDepo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_depo\",\"type\":\"address\"}],\"name\":\"showDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Profit\",\"type\":\"event\"}]","ContractName":"EasyStockExchange","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b208446215d286c3ff2794e6d053b9bcb594910fa90f3816c633730cf95e144a"}]}