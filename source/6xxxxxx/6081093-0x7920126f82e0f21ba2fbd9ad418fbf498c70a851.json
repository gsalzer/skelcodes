{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract ExchangeAdmin {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyAdmin {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\nlibrary StringYokes {\r\n    function zint_bytes32ToString(bytes32 x) public pure returns (string) {\r\n        bytes memory bytesString = new bytes(32);\r\n        uint charCount = 0;\r\n        for (uint j = 0; j < 32; j++) {\r\n            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\r\n            if (char != 0) {\r\n                bytesString[charCount] = char;\r\n                charCount++;\r\n            }\r\n        }\r\n        bytes memory bytesStringTrimmed = new bytes(charCount);\r\n        for (j = 0; j < charCount; j++) {\r\n            bytesStringTrimmed[j] = bytesString[j];\r\n        }\r\n        return string(bytesStringTrimmed);\r\n    }\r\n    function zint_convert(string key) public pure returns (bytes32 ret) {\r\n        if (bytes(key).length > 32) revert();\r\n        assembly {\r\n          ret := mload(add(key, 32))\r\n        }\r\n    }\r\n}\r\ncontract Game is ExchangeAdmin {\r\n    bool expired;\r\n    struct Better {\r\n        bool used;\r\n        address betterAddress;\r\n        uint contribAmount;\r\n    }\r\n    struct Side {\r\n        bool isValidSide;\r\n        uint totalPledged;\r\n        bytes32 sideName;\r\n        address[] usedAddresses;\r\n        mapping (address => Better) contribDb;\r\n    }\r\n    string gName;\r\n    address gameMaker;\r\n    address mainContract;\r\n    bytes32[] sides;\r\n    uint allSidesPledged;\r\n    uint expiry;\r\n    mapping (bytes32 => Side) public sideData;\r\n    mapping (bytes32 => uint) public idToNameRef;\r\n    constructor (string gameName, uint gameExpiry, bytes32[] gameSides,address maker, address mainContractAdd) public {\r\n        require(now<gameExpiry);\r\n        gName = gameName;\r\n        gameMaker = maker;\r\n        expiry = gameExpiry;\r\n        mainContract = mainContractAdd;\r\n        for (uint i = 0; i<gameSides.length; i++) {\r\n            sideData[gameSides[i]].sideName=gameSides[i];\r\n            sideData[gameSides[i]].isValidSide=true;\r\n            idToNameRef[gameSides[i]]=i;\r\n            sides.push(gameSides[i]);\r\n        }\r\n        expired = false;\r\n        allSidesPledged = 0;\r\n    }\r\n    function getGameName() view public returns (string) {\r\n        return gName;\r\n    }\r\n    function getGameMaker() view public returns(address){\r\n      return gameMaker;\r\n    }\r\n    function getGameSides() view public returns (bytes32[]) {\r\n        return sides;\r\n    }\r\n    function isNotExpired() view public returns (bool) {\r\n        return ((now < expiry) && !expired);\r\n    }\r\n    function isExpired() view public returns(bool){\r\n        return expired;\r\n    }\r\n    function getNumSides() view public returns (uint) {\r\n        return sides.length;\r\n    }\r\n    function getExpiryTime() view public returns(uint){\r\n      return expiry;\r\n    }\r\n    function getStrFromId(uint toConv) view public returns (string) {\r\n        return StringYokes.zint_bytes32ToString(sides[toConv]);\r\n    }\r\n    function getIdFromStr(string toConv) view public returns (uint) {\r\n        return idToNameRef[StringYokes.zint_convert(toConv)];\r\n    }\r\n    function placeBet(address a, uint value, string betSide) public payable {\r\n        require(isNotExpired() && value!=0 && msg.sender==mainContract && sideData[StringYokes.zint_convert(betSide)].isValidSide);\r\n        bytes32 index = StringYokes.zint_convert(betSide);\r\n        sideData[index].totalPledged+=value;\r\n        allSidesPledged+=value;\r\n        if (!sideData[index].contribDb[a].used) {\r\n            sideData[index].usedAddresses.push(a);\r\n            sideData[index].contribDb[a].used=true;\r\n        }\r\n        sideData[index].contribDb[a].contribAmount+=value;\r\n    }\r\n    function allSidesPledgedAmount() public view returns (uint) {\r\n        return allSidesPledged;\r\n    }\r\n    function checkSidePledge(uint i) public view returns (uint) {\r\n        return sideData[sides[i]].totalPledged;\r\n    }\r\n    function dish(string winner, address profit) public payable {\r\n        require((!expired) && (mainContract==msg.sender));\r\n        expired = true;\r\n        bytes32 winByte = StringYokes.zint_convert(winner);\r\n        uint totalGameContrib = allSidesPledged;\r\n        uint totalSideContrib = (sideData[winByte].totalPledged);\r\n        for (uint i = 0; i<sideData[winByte].usedAddresses.length; i++) {\r\n            address recip = sideData[winByte].usedAddresses[i];\r\n            uint contribAmount = sideData[winByte].contribDb[recip].contribAmount;\r\n            uint winAddition = (950*1000*contribAmount*(totalGameContrib-totalSideContrib))/(1000000*totalSideContrib);\r\n            recip.transfer(contribAmount+winAddition);\r\n        }        \r\n        profit.transfer(2*(address(this).balance/5));\r\n        gameMaker.transfer(address(this).balance);\r\n    }\r\n    function refund(address sentBy) public payable {\r\n        require(!expired && (mainContract==msg.sender) && ((sentBy==gameMaker) || now > getExpiryTime() + 259200));\r\n        for (uint i = 0; i<sides.length; i++) {\r\n            for (uint j = 0; j<sideData[sides[i]].usedAddresses.length; j++) {\r\n                address recip = sideData[sides[i]].usedAddresses[j];\r\n                uint contribAmount = sideData[sides[i]].contribDb[recip].contribAmount;\r\n                recip.transfer(contribAmount);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract MUBet is ExchangeAdmin {\r\n    Game[] current;\r\n    constructor () public {    }\r\n\r\n    function numGames() view public returns (uint nGames) {\r\n        return current.length;\r\n    }\r\n    function getName(uint i) view public returns (string gameName, bool isNotExpired, uint totalPledgedETH, bool wasFinalised, uint gameEndTime, address gameMakerAddress, uint gameNumSides, uint gameId) {\r\n       return (current[i].getGameName(), current[i].isNotExpired(), current[i].allSidesPledgedAmount(),current[i].isExpired(),current[i].getExpiryTime(), current[i].getGameMaker(), current[i].getNumSides(), i);\r\n    }\r\n    function getSidesArray(uint i) view public returns (bytes32[] sideNameBytes) {\r\n        return current[i].getGameSides();\r\n    }\r\n    function getSidesById(uint i, uint j) view public returns (string sideName, uint sidePledgedETH) {\r\n        return (StringYokes.zint_bytes32ToString(current[i].getGameSides()[j]), current[i].checkSidePledge(j));\r\n    }\r\n    function getGameNumSides(uint i) view public returns (uint gameNumSides) {\r\n        return current[i].getNumSides();\r\n    }\r\n    function getContractBal() public view returns (uint invalidBalanceETH) {\r\n        return address(this).balance;\r\n    }\r\n    \r\n    function () public payable {    }\r\n    function emergency(uint amount, address recipient) public onlyAdmin payable {\r\n        recipient.transfer(amount);\r\n    }\r\n    function addGame(string gameName, uint gameExpiry, bytes32[] gameSides) public {\r\n        require(gameSides.length > 1);\r\n        current.push(new Game(gameName, gameExpiry, gameSides, msg.sender, address(this)));\r\n    }\r\n    function endGame(uint gameId, string winningSide) public  {\r\n        require(current[gameId].getGameMaker() == msg.sender);\r\n        current[gameId].dish(winningSide,owner);\r\n    }\r\n    function refund(uint gameId) public {\r\n        current[gameId].refund(msg.sender);\r\n    }\r\n    function placeBet(uint gameId, string betSide) payable public {\r\n        current[gameId].placeBet.value(msg.value)(msg.sender, msg.value, betSide);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"emergency\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"},{\"name\":\"j\",\"type\":\"uint256\"}],\"name\":\"getSidesById\",\"outputs\":[{\"name\":\"sideName\",\"type\":\"string\"},{\"name\":\"sidePledgedETH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameName\",\"type\":\"string\"},{\"name\":\"gameExpiry\",\"type\":\"uint256\"},{\"name\":\"gameSides\",\"type\":\"bytes32[]\"}],\"name\":\"addGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractBal\",\"outputs\":[{\"name\":\"invalidBalanceETH\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"betSide\",\"type\":\"string\"}],\"name\":\"placeBet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getName\",\"outputs\":[{\"name\":\"gameName\",\"type\":\"string\"},{\"name\":\"isNotExpired\",\"type\":\"bool\"},{\"name\":\"totalPledgedETH\",\"type\":\"uint256\"},{\"name\":\"wasFinalised\",\"type\":\"bool\"},{\"name\":\"gameEndTime\",\"type\":\"uint256\"},{\"name\":\"gameMakerAddress\",\"type\":\"address\"},{\"name\":\"gameNumSides\",\"type\":\"uint256\"},{\"name\":\"gameId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getSidesArray\",\"outputs\":[{\"name\":\"sideNameBytes\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"winningSide\",\"type\":\"string\"}],\"name\":\"endGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numGames\",\"outputs\":[{\"name\":\"nGames\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getGameNumSides\",\"outputs\":[{\"name\":\"gameNumSides\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MUBet","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"StringYokes:8DbDbCDa77cD255e8bd79AD53F1f018fD698F289","SwarmSource":"bzzr://3dec8805ac98b5aa4319444e579590632becdf6420760473f00ebd79fc21646b"}]}