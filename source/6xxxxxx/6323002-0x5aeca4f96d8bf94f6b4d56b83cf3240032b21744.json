{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/zeppelin/ownership/Ownable.sol\r\ncontract Ownable {\r\n  address public owner;\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\n// File: contracts/zeppelin/lifecycle/Pausable.sol\r\ncontract Pausable is Ownable {\r\n  event PausePublic(bool newState);\r\n  event PauseOwnerAdmin(bool newState);\r\n\r\n  bool public pausedPublic = true;\r\n  bool public pausedOwnerAdmin = false;\r\n\r\n  address public admin;\r\n\r\n  modifier whenNotPaused() {\r\n    if(pausedPublic) {\r\n      if(!pausedOwnerAdmin) {\r\n        require(msg.sender == admin || msg.sender == owner);\r\n      } else {\r\n        revert();\r\n      }\r\n    }\r\n    _;\r\n  }\r\n\r\n  function pause(bool newPausedPublic, bool newPausedOwnerAdmin) onlyOwner public {\r\n    require(!(newPausedPublic == false && newPausedOwnerAdmin == true));\r\n\r\n    pausedPublic = newPausedPublic;\r\n    pausedOwnerAdmin = newPausedOwnerAdmin;\r\n\r\n    emit PausePublic(newPausedPublic);\r\n    emit PauseOwnerAdmin(newPausedOwnerAdmin);\r\n  }\r\n}\r\n\r\n// File: contracts/zeppelin/math/SafeMath.sol\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/zeppelin/token/ERC20Basic.sol\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/zeppelin/token/BasicToken.sol\r\n\r\ncontract BasicToken is ERC20Basic  {\r\n  using SafeMath for uint256;\r\n  mapping(address => uint256) balances;\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/zeppelin/token/PausableToken.sol\r\ncontract PausableToken is BasicToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n}\r\n\r\n// File: contracts/DsionToken.sol\r\ncontract DsionToken is PausableToken {\r\n    string  public  constant name = \"Dsion\";\r\n    string  public  constant symbol = \"DSN\";\r\n    uint8   public  constant decimals = 8;\r\n    uint   public  totallockedtime;\r\n\r\n     // new feature, Lee\r\n    mapping(address => uint) approvedInvestorListWithDate;\r\n\r\n    constructor(uint _totallockedtime) public\r\n    {\r\n        admin = owner;\r\n        totalSupply = 100000000000000000;\r\n        balances[msg.sender] = totalSupply;\r\n        totallockedtime = _totallockedtime;\r\n        emit Transfer(address(0x0), msg.sender, totalSupply);\r\n    }\r\n\r\n    function setTotalLockedTime(uint _value) onlyOwner public{\r\n        totallockedtime = _value;\r\n    }\r\n\r\n    function getTime() public constant returns (uint) {\r\n        return now;\r\n    }\r\n\r\n    function isUnlocked() internal view returns (bool) {\r\n        return getTime() >= getLockFundsReleaseTime(msg.sender);\r\n    }\r\n\r\n    modifier validDestination(address to)\r\n    {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhenUnlocked()\r\n    {\r\n      if (msg.sender != admin) {\r\n        require(getTime() >= totallockedtime);\r\n        require(isUnlocked());\r\n      }\r\n      _;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) onlyWhenUnlocked public validDestination(_to) returns (bool)\r\n    {\r\n      return super.transfer(_to, _value);\r\n    }\r\n\r\n    function getLockFundsReleaseTime(address _addr) private view returns(uint)\r\n    {\r\n        return approvedInvestorListWithDate[_addr];\r\n    }\r\n\r\n    function setLockFunds(address[] newInvestorList, uint releaseTime) onlyOwner public\r\n    {\r\n        require(releaseTime > getTime());\r\n        for (uint i = 0; i < newInvestorList.length; i++)\r\n        {\r\n            approvedInvestorListWithDate[newInvestorList[i]] = releaseTime;\r\n        }\r\n    }\r\n\r\n    function removeLockFunds(address[] investorList) onlyOwner public\r\n    {\r\n        for (uint i = 0; i < investorList.length; i++)\r\n        {\r\n            approvedInvestorListWithDate[investorList[i]] = 0;\r\n            delete(approvedInvestorListWithDate[investorList[i]]);\r\n        }\r\n    }\r\n\r\n    function setLockFund(address newInvestor, uint releaseTime) onlyOwner public\r\n    {\r\n        require(releaseTime > getTime());\r\n        approvedInvestorListWithDate[newInvestor] = releaseTime;\r\n    }\r\n\r\n\r\n    function removeLockFund(address investor) onlyOwner public\r\n    {\r\n        approvedInvestorListWithDate[investor] = 0;\r\n        delete(approvedInvestorListWithDate[investor]);\r\n    }\r\n\r\n    event Burn(address indexed _burner, uint _value);\r\n    function burn(uint _value) onlyOwner public returns (bool)\r\n    {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        emit Transfer(msg.sender, address(0x0), _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _account, uint256 _amount) onlyOwner public returns (bool)\r\n    {\r\n      require(_account != 0);\r\n      require(_amount <= balances[_account]);\r\n\r\n      totalSupply = totalSupply.sub(_amount);\r\n      balances[_account] = balances[_account].sub(_amount);\r\n      emit Transfer(_account, address(0), _amount);\r\n      return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInvestorList\",\"type\":\"address[]\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"setLockFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedPublic\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pausedOwnerAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investorList\",\"type\":\"address[]\"}],\"name\":\"removeLockFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setTotalLockedTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totallockedtime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"removeLockFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPausedPublic\",\"type\":\"bool\"},{\"name\":\"newPausedOwnerAdmin\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newInvestor\",\"type\":\"address\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"setLockFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_totallockedtime\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"PausePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"PauseOwnerAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"DsionToken","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005c10c284","Library":"","SwarmSource":"bzzr://d336b21653778d1940ed170f965889acd48c2fef8299454416de1ecbd2039841"}]}