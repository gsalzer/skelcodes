{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Contactable.sol\r\n\r\n/**\r\n * @title Contactable token\r\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\r\n * contact information.\r\n */\r\ncontract Contactable is Ownable{\r\n\r\n    string public contactInformation;\r\n\r\n    /**\r\n     * @dev Allows the owner to set a string with their contact information.\r\n     * @param info The contact information to attach to the contract.\r\n     */\r\n    function setContactInformation(string info) onlyOwner public {\r\n         contactInformation = info;\r\n     }\r\n}\r\n\r\n// File: contracts/MonethaUsers.sol\r\n\r\n/**\r\n *  @title MonethaUsers\r\n *\r\n *  MonethaUsers stores basic user information, i.e. his nickname and reputation score\r\n */\r\ncontract MonethaUsers is Contactable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    string constant VERSION = \"0.1\";\r\n\r\n    struct User {\r\n        string name;\r\n        uint256 starScore;\r\n        uint256 reputationScore;\r\n        uint256 signedDealsCount;\r\n        string nickname;\r\n        bool isVerified;\r\n    }\r\n\r\n    mapping (address => User) public users;\r\n\r\n    event UpdatedSignedDealsCount(address indexed _userAddress, uint256 _newSignedDealsCount);\r\n    event UpdatedStarScore(address indexed _userAddress, uint256 _newStarScore);\r\n    event UpdatedReputationScore(address indexed _userAddress, uint256 _newReputationScore);\r\n    event UpdatedNickname(address indexed _userAddress, string _newNickname);\r\n    event UpdatedIsVerified(address indexed _userAddress, bool _newIsVerified);\r\n    event UpdatedName(address indexed _userAddress, string _newName);\r\n    event UpdatedTrustScore(address indexed _userAddress, uint256 _newStarScore, uint256 _newReputationScore);\r\n    event UserRegistered(address indexed _userAddress, string _name, uint256 _starScore, uint256 _reputationScore, uint256 _signedDealsCount, string _nickname, bool _isVerified);\r\n    event UpdatedUserDetails(address indexed _userAddress, uint256 _newStarScore, uint256 _newReputationScore, uint256 _newSignedDealsCount, bool _newIsVerified);\r\n    event UpdatedUser(address indexed _userAddress, string _name, uint256 _newStarScore, uint256 _newReputationScore, uint256 _newSignedDealsCount, string _newNickname, bool _newIsVerified);\r\n\r\n    /**\r\n     *  registerUser associates a Monetha user's ethereum address with his nickname and trust score\r\n     *  @param _userAddress address of user's wallet\r\n     *  @param _name corresponds to use's nickname\r\n     *  @param _starScore represents user's star score\r\n     *  @param _reputationScore represents user's reputation score\r\n     *  @param _signedDealsCount represents user's signed deal count\r\n     *  @param _nickname represents user's nickname\r\n     *  @param _isVerified represents whether user is verified (KYC'ed)\r\n     */\r\n    function registerUser(address _userAddress, string _name, uint256 _starScore, uint256 _reputationScore, uint256 _signedDealsCount, string _nickname, bool _isVerified)\r\n        external onlyOwner\r\n    {\r\n        User storage user = users[_userAddress];\r\n\r\n        user.name = _name;\r\n        user.starScore = _starScore;\r\n        user.reputationScore = _reputationScore;\r\n        user.signedDealsCount = _signedDealsCount;\r\n        user.nickname = _nickname;\r\n        user.isVerified = _isVerified;\r\n\r\n        emit UserRegistered(_userAddress, _name, _starScore, _reputationScore, _signedDealsCount, _nickname, _isVerified);\r\n    }\r\n\r\n    /**\r\n     *  updateStarScore updates the star score of a Monetha user\r\n     *  @param _userAddress address of user's wallet\r\n     *  @param _updatedStars represents user's new star score\r\n     */\r\n    function updateStarScore(address _userAddress, uint256 _updatedStars)\r\n        external onlyOwner\r\n    {\r\n        users[_userAddress].starScore = _updatedStars;\r\n\r\n        emit UpdatedStarScore(_userAddress, _updatedStars);\r\n    }\r\n\r\n    /**\r\n     *  updateStarScoreInBulk updates the star score of Monetha users in bulk\r\n     */\r\n    function updateStarScoreInBulk(address[] _userAddresses, uint256[] _starScores)\r\n        external onlyOwner\r\n    {\r\n        require(_userAddresses.length == _starScores.length);\r\n\r\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\r\n            users[_userAddresses[i]].starScore = _starScores[i];\r\n\r\n            emit UpdatedStarScore(_userAddresses[i], _starScores[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  updateReputationScore updates the reputation score of a Monetha user\r\n     *  @param _userAddress address of user's wallet\r\n     *  @param _updatedReputation represents user's new reputation score\r\n     */\r\n    function updateReputationScore(address _userAddress, uint256 _updatedReputation)\r\n        external onlyOwner\r\n    {\r\n        users[_userAddress].reputationScore = _updatedReputation;\r\n\r\n        emit UpdatedReputationScore(_userAddress, _updatedReputation);\r\n    }\r\n\r\n    /**\r\n     *  updateReputationScoreInBulk updates the reputation score of a Monetha users in bulk\r\n     */\r\n    function updateReputationScoreInBulk(address[] _userAddresses, uint256[] _reputationScores)\r\n        external onlyOwner\r\n    {\r\n        require(_userAddresses.length == _reputationScores.length);\r\n\r\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\r\n            users[_userAddresses[i]].reputationScore = _reputationScores[i];\r\n\r\n            emit UpdatedReputationScore(_userAddresses[i],  _reputationScores[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  updateTrustScore updates the trust score of a Monetha user\r\n     *  @param _userAddress address of user's wallet\r\n     *  @param _updatedStars represents user's new star score\r\n     *  @param _updatedReputation represents user's new reputation score\r\n     */\r\n    function updateTrustScore(address _userAddress, uint256 _updatedStars, uint256 _updatedReputation)\r\n        external onlyOwner\r\n    {\r\n        users[_userAddress].starScore = _updatedStars;\r\n        users[_userAddress].reputationScore = _updatedReputation;\r\n\r\n        emit UpdatedTrustScore(_userAddress, _updatedStars, _updatedReputation);\r\n    }\r\n\r\n     /**\r\n     *  updateTrustScoreInBulk updates the trust score of Monetha users in bulk\r\n     */\r\n    function updateTrustScoreInBulk(address[] _userAddresses, uint256[] _starScores, uint256[] _reputationScores)\r\n        external onlyOwner\r\n    {\r\n        require(_userAddresses.length == _starScores.length);\r\n        require(_userAddresses.length == _reputationScores.length);\r\n\r\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\r\n            users[_userAddresses[i]].starScore = _starScores[i];\r\n            users[_userAddresses[i]].reputationScore = _reputationScores[i];\r\n\r\n            emit UpdatedTrustScore(_userAddresses[i], _starScores[i], _reputationScores[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  updateSignedDealsCount updates the signed deals count of a Monetha user\r\n     *  @param _userAddress address of user's wallet\r\n     *  @param _updatedSignedDeals represents user's new signed deals count\r\n     */\r\n    function updateSignedDealsCount(address _userAddress, uint256 _updatedSignedDeals)\r\n        external onlyOwner\r\n    {\r\n        users[_userAddress].signedDealsCount = _updatedSignedDeals;\r\n\r\n        emit UpdatedSignedDealsCount(_userAddress, _updatedSignedDeals);\r\n    }\r\n\r\n    /**\r\n     *  updateSignedDealsCountInBulk updates the signed deals count of Monetha users in bulk\r\n     */\r\n    function updateSignedDealsCountInBulk(address[] _userAddresses, uint256[] _updatedSignedDeals)\r\n        external onlyOwner\r\n    {\r\n        require(_userAddresses.length == _updatedSignedDeals.length);\r\n\r\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\r\n            users[_userAddresses[i]].signedDealsCount = _updatedSignedDeals[i];\r\n\r\n            emit UpdatedSignedDealsCount(_userAddresses[i], _updatedSignedDeals[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  updateNickname updates user's nickname\r\n     *  @param _userAddress address of user's wallet\r\n     *  @param _updatedNickname represents user's new nickname\r\n     */\r\n    function updateNickname(address _userAddress, string _updatedNickname)\r\n        external onlyOwner\r\n    {\r\n        users[_userAddress].nickname = _updatedNickname;\r\n\r\n        emit UpdatedNickname(_userAddress, _updatedNickname);\r\n    }\r\n\r\n    /**\r\n     *  updateIsVerified updates user's verified status\r\n     *  @param _userAddress address of user's wallet\r\n     *  @param _isVerified represents user's new verification status\r\n     */\r\n    function updateIsVerified(address _userAddress, bool _isVerified)\r\n        external onlyOwner\r\n    {\r\n        users[_userAddress].isVerified = _isVerified;\r\n\r\n        emit UpdatedIsVerified(_userAddress, _isVerified);\r\n    }\r\n\r\n    /**\r\n     *  updateIsVerifiedInBulk updates nicknames of Monetha users in bulk\r\n     */\r\n    function updateIsVerifiedInBulk(address[] _userAddresses, bool[] _updatedIsVerfied)\r\n        external onlyOwner\r\n    {\r\n        require(_userAddresses.length == _updatedIsVerfied.length);\r\n\r\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\r\n            users[_userAddresses[i]].isVerified = _updatedIsVerfied[i];\r\n\r\n            emit UpdatedIsVerified(_userAddresses[i], _updatedIsVerfied[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  updateUserDetailsInBulk updates details of Monetha users in bulk\r\n     */\r\n    function updateUserDetailsInBulk(address[] _userAddresses, uint256[] _starScores, uint256[] _reputationScores, uint256[] _signedDealsCount, bool[] _isVerified)\r\n        external onlyOwner\r\n    {\r\n        require(_userAddresses.length == _starScores.length);\r\n        require(_userAddresses.length == _reputationScores.length);\r\n        require(_userAddresses.length == _signedDealsCount.length);\r\n        require(_userAddresses.length == _isVerified.length);\r\n\r\n        for (uint256 i = 0; i < _userAddresses.length; i++) {\r\n            users[_userAddresses[i]].starScore = _starScores[i];\r\n            users[_userAddresses[i]].reputationScore = _reputationScores[i];\r\n            users[_userAddresses[i]].signedDealsCount = _signedDealsCount[i];\r\n            users[_userAddresses[i]].isVerified = _isVerified[i];\r\n\r\n            emit UpdatedUserDetails(_userAddresses[i], _starScores[i], _reputationScores[i], _signedDealsCount[i], _isVerified[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  updateName updates the name of a Monetha user\r\n     *  @param _userAddress address of user's wallet\r\n     *  @param _updatedName represents user's new name\r\n     */\r\n    function updateName(address _userAddress, string _updatedName)\r\n        external onlyOwner\r\n    {\r\n        users[_userAddress].name = _updatedName;\r\n\r\n        emit UpdatedName(_userAddress, _updatedName);\r\n    }\r\n\r\n    /**\r\n     *  updateUser updates single user details\r\n     */\r\n    function updateUser(address _userAddress, string _updatedName, uint256 _updatedStarScore, uint256 _updatedReputationScore, uint256 _updatedSignedDealsCount, string _updatedNickname, bool _updatedIsVerified)\r\n        external onlyOwner\r\n    {\r\n        users[_userAddress].name = _updatedName;\r\n        users[_userAddress].starScore = _updatedStarScore;\r\n        users[_userAddress].reputationScore = _updatedReputationScore;\r\n        users[_userAddress].signedDealsCount = _updatedSignedDealsCount;\r\n        users[_userAddress].nickname = _updatedNickname;\r\n        users[_userAddress].isVerified = _updatedIsVerified;\r\n\r\n        emit UpdatedUser(_userAddress, _updatedName, _updatedStarScore, _updatedReputationScore, _updatedSignedDealsCount, _updatedNickname, _updatedIsVerified);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"contactInformation\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_starScore\",\"type\":\"uint256\"},{\"name\":\"_reputationScore\",\"type\":\"uint256\"},{\"name\":\"_signedDealsCount\",\"type\":\"uint256\"},{\"name\":\"_nickname\",\"type\":\"string\"},{\"name\":\"_isVerified\",\"type\":\"bool\"}],\"name\":\"registerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_updatedName\",\"type\":\"string\"},{\"name\":\"_updatedStarScore\",\"type\":\"uint256\"},{\"name\":\"_updatedReputationScore\",\"type\":\"uint256\"},{\"name\":\"_updatedSignedDealsCount\",\"type\":\"uint256\"},{\"name\":\"_updatedNickname\",\"type\":\"string\"},{\"name\":\"_updatedIsVerified\",\"type\":\"bool\"}],\"name\":\"updateUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"name\":\"_reputationScores\",\"type\":\"uint256[]\"}],\"name\":\"updateReputationScoreInBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_updatedStars\",\"type\":\"uint256\"}],\"name\":\"updateStarScore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_updatedStars\",\"type\":\"uint256\"},{\"name\":\"_updatedReputation\",\"type\":\"uint256\"}],\"name\":\"updateTrustScore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"name\":\"_starScores\",\"type\":\"uint256[]\"}],\"name\":\"updateStarScoreInBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_updatedReputation\",\"type\":\"uint256\"}],\"name\":\"updateReputationScore\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_updatedNickname\",\"type\":\"string\"}],\"name\":\"updateNickname\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"starScore\",\"type\":\"uint256\"},{\"name\":\"reputationScore\",\"type\":\"uint256\"},{\"name\":\"signedDealsCount\",\"type\":\"uint256\"},{\"name\":\"nickname\",\"type\":\"string\"},{\"name\":\"isVerified\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_updatedName\",\"type\":\"string\"}],\"name\":\"updateName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"info\",\"type\":\"string\"}],\"name\":\"setContactInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_updatedSignedDeals\",\"type\":\"uint256\"}],\"name\":\"updateSignedDealsCount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"name\":\"_updatedIsVerfied\",\"type\":\"bool[]\"}],\"name\":\"updateIsVerifiedInBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"name\":\"_updatedSignedDeals\",\"type\":\"uint256[]\"}],\"name\":\"updateSignedDealsCountInBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"_isVerified\",\"type\":\"bool\"}],\"name\":\"updateIsVerified\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"name\":\"_starScores\",\"type\":\"uint256[]\"},{\"name\":\"_reputationScores\",\"type\":\"uint256[]\"}],\"name\":\"updateTrustScoreInBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"name\":\"_starScores\",\"type\":\"uint256[]\"},{\"name\":\"_reputationScores\",\"type\":\"uint256[]\"},{\"name\":\"_signedDealsCount\",\"type\":\"uint256[]\"},{\"name\":\"_isVerified\",\"type\":\"bool[]\"}],\"name\":\"updateUserDetailsInBulk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newSignedDealsCount\",\"type\":\"uint256\"}],\"name\":\"UpdatedSignedDealsCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newStarScore\",\"type\":\"uint256\"}],\"name\":\"UpdatedStarScore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newReputationScore\",\"type\":\"uint256\"}],\"name\":\"UpdatedReputationScore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newNickname\",\"type\":\"string\"}],\"name\":\"UpdatedNickname\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newIsVerified\",\"type\":\"bool\"}],\"name\":\"UpdatedIsVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"UpdatedName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newStarScore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newReputationScore\",\"type\":\"uint256\"}],\"name\":\"UpdatedTrustScore\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_starScore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_reputationScore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_signedDealsCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_nickname\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_isVerified\",\"type\":\"bool\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_newStarScore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newReputationScore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newSignedDealsCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newIsVerified\",\"type\":\"bool\"}],\"name\":\"UpdatedUserDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_newStarScore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newReputationScore\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newSignedDealsCount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_newNickname\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_newIsVerified\",\"type\":\"bool\"}],\"name\":\"UpdatedUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"MonethaUsers","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://327db7962b07a65253e1c634f31a70b030c118e6f08611b41bce2bc7c9c8c4e0"}]}