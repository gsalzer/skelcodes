{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/commons/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/flavours/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\". It has two-stage ownership transfer.\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to prepare transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/flavours/Lockable.sol\r\n\r\n/**\r\n * @title Lockable\r\n * @dev Base contract which allows children to\r\n *      implement main operations locking mechanism.\r\n */\r\ncontract Lockable is Ownable {\r\n    event Lock();\r\n    event Unlock();\r\n\r\n    bool public locked = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable\r\n    *       only when the contract is not locked.\r\n     */\r\n    modifier whenNotLocked() {\r\n        require(!locked);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable\r\n     *      only when the contract is locked.\r\n     */\r\n    modifier whenLocked() {\r\n        require(locked);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to locke, triggers locked state\r\n     */\r\n    function lock() public onlyOwner whenNotLocked {\r\n        locked = true;\r\n        emit Lock();\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner\r\n     *      to unlock, returns to unlocked state\r\n     */\r\n    function unlock() public onlyOwner whenLocked {\r\n        locked = false;\r\n        emit Unlock();\r\n    }\r\n}\r\n\r\n// File: contracts/interface/SNPCToken.sol\r\n\r\ninterface SNPCToken {\r\n    function owner() external returns (address);\r\n    function pendingOwner() external returns (address);\r\n    function transferFrom(address from_, address to_, uint value_) external returns (bool);\r\n    function transfer(address to_, uint value_) external returns (bool);\r\n    function balanceOf(address owner_) external returns (uint);\r\n    function transferOwnership(address newOwner) external;\r\n    function claimOwnership() external;\r\n    function assignReserved(address to_, uint8 group_, uint amount_) external;\r\n}\r\n\r\n// File: contracts/base/BaseAirdrop.sol\r\n\r\ncontract BaseAirdrop is Lockable {\r\n    using SafeMath for uint;\r\n\r\n    SNPCToken public token;\r\n\r\n    mapping(address => bool) public users;\r\n\r\n    event AirdropToken(address indexed to, uint amount);\r\n\r\n    constructor(address _token) public {\r\n        require(_token != address(0));\r\n        token = SNPCToken(_token);\r\n    }\r\n\r\n    function airdrop(uint8 v, bytes32 r, bytes32 s, uint amount) public;\r\n\r\n    function getAirdropStatus(address user) public constant returns (bool success) {\r\n        return users[user];\r\n    }\r\n\r\n    function originalHash(uint amount) internal view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\r\n                \"Signed for Airdrop\",\r\n                address(this),\r\n                address(token),\r\n                msg.sender,\r\n                amount\r\n            ));\r\n    }\r\n\r\n    function prefixedHash(uint amount) internal view returns (bytes32) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        return keccak256(abi.encodePacked(prefix, originalHash(amount)));\r\n    }\r\n}\r\n\r\n// File: contracts/interface/ERC20Token.sol\r\n\r\ninterface ERC20Token {\r\n    function transferFrom(address from_, address to_, uint value_) external returns (bool);\r\n    function transfer(address to_, uint value_) external returns (bool);\r\n    function balanceOf(address owner_) external returns (uint);\r\n}\r\n\r\n// File: contracts/flavours/Withdrawal.sol\r\n\r\n/**\r\n * @title Withdrawal\r\n * @dev The Withdrawal contract has an owner address, and provides method for withdraw funds and tokens, if any\r\n */\r\ncontract Withdrawal is Ownable {\r\n\r\n    // withdraw funds, if any, only for owner\r\n    function withdraw() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    // withdraw stuck tokens, if any, only for owner\r\n    function withdrawTokens(address _someToken) public onlyOwner {\r\n        ERC20Token someToken = ERC20Token(_someToken);\r\n        uint balance = someToken.balanceOf(address(this));\r\n        someToken.transfer(owner, balance);\r\n    }\r\n}\r\n\r\n// File: contracts/flavours/SelfDestructible.sol\r\n\r\n/**\r\n * @title SelfDestructible\r\n * @dev The SelfDestructible contract has an owner address, and provides selfDestruct method\r\n * in case of deployment error.\r\n */\r\ncontract SelfDestructible is Ownable {\r\n\r\n    function selfDestruct(uint8 v, bytes32 r, bytes32 s) public onlyOwner {\r\n        if (ecrecover(prefixedHash(), v, r, s) != owner) {\r\n            revert();\r\n        }\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function originalHash() internal view returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\r\n                \"Signed for Selfdestruct\",\r\n                address(this),\r\n                msg.sender\r\n            ));\r\n    }\r\n\r\n    function prefixedHash() internal view returns (bytes32) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        return keccak256(abi.encodePacked(prefix, originalHash()));\r\n    }\r\n}\r\n\r\n// File: contracts/SNPCAirdrop.sol\r\n\r\n/**\r\n * @title SNPC token airdrop contract.\r\n */\r\ncontract SNPCAirdrop is BaseAirdrop, Withdrawal, SelfDestructible {\r\n\r\n    constructor(address _token) public BaseAirdrop(_token) {\r\n        locked = true;\r\n    }\r\n\r\n    function getTokenOwnership() public onlyOwner {\r\n        require(token.pendingOwner() == address(this));\r\n        token.claimOwnership();\r\n        require(token.owner() == address(this));\r\n    }\r\n\r\n    function releaseTokenOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        token.transferOwnership(newOwner);\r\n        require(token.pendingOwner() == newOwner);\r\n    }\r\n\r\n    function airdrop(uint8 v, bytes32 r, bytes32 s, uint amount) public whenNotLocked {\r\n        if (users[msg.sender] || ecrecover(prefixedHash(amount), v, r, s) != owner) {\r\n            revert();\r\n        }\r\n        users[msg.sender] = true;\r\n        token.assignReserved(msg.sender, uint8(0x2), amount);\r\n        emit AirdropToken(msg.sender, amount);\r\n    }\r\n\r\n    // Disable direct payments\r\n    function() external payable {\r\n        revert();\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"releaseTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_someToken\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getTokenOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAirdropStatus\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SNPCAirdrop","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"000000000000000000000000752ff65b884b9c260d212c804e0b7aceea012473","Library":"","SwarmSource":"bzzr://9f43e55b051a2eb6ca01f8a3cd04b4508f7f0901897475eebf4d059f24861172"}]}