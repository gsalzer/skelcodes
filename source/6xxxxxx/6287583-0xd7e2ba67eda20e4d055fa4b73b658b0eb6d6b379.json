{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.22;\r\n//\r\n// complied with 0.4.24+commit.e67f0147.Emscripten.clang\r\n// 2018-09-07\r\n// With Optimization enabled\r\n//\r\n// Contact support@win1million.app\r\n//\r\n// Play at: https://win1million.app\r\n// \r\n// Provably fair prize game where you can win $1m!\r\n//\r\n//\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Win1Million {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address owner;\r\n    address bankAddress;\r\n    address charityAddress;\r\n    \r\n    bool gamePaused = false;\r\n    uint256 public housePercent = 2;\r\n    uint256 public charityPercent = 2;\r\n    uint256 public bankBalance;\r\n    uint256 public charityBalance;\r\n    uint256 public totalCharitySent = 0;\r\n    uint256 public minGamePlayAmount = 30000000000000000;\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n    modifier onlyBanker() {\r\n        require(bankAddress == msg.sender);\r\n        _;\r\n    }\r\n    modifier whenNotPaused() {\r\n        require(gamePaused == false);\r\n        _;\r\n    }\r\n    modifier correctAnswers(uint256 barId, string _answer1, string _answer2, string _answer3) {\r\n        require(compareStrings(gameBars[barId].answer1, _answer1));\r\n        require(compareStrings(gameBars[barId].answer2, _answer2));\r\n        require(compareStrings(gameBars[barId].answer3, _answer3));\r\n        _;\r\n    }\r\n    \r\n    struct Bar {\r\n        uint256     Limit;          // max amount of wei for this game\r\n        uint256     CurrentGameId;\r\n        string      answer1;\r\n        string      answer2;\r\n        string      answer3;\r\n    }\r\n    \r\n    struct Game {\r\n        uint256                         BarId;\r\n        uint256                         CurrentTotal;\r\n        mapping(address => uint256)     PlayerBidMap;\r\n        address[]                       PlayerAddressList;\r\n    }\r\n    \r\n    struct Winner {\r\n        address     winner;\r\n        uint256     amount;\r\n        uint256     timestamp;\r\n        uint256     barId;\r\n        uint256     gameId;\r\n    }\r\n\r\n    Bar[]       public  gameBars;\r\n    Game[]      public  games;\r\n    Winner[]    public  winners;\r\n    \r\n    mapping (address => uint256) playerPendingWithdrawals;\r\n    \r\n    function getWinnersLen() public view returns(uint256) {\r\n        return winners.length;\r\n    }\r\n    \r\n    // helper function so we can extrat list of all players at the end of each game...\r\n    function getGamesPlayers(uint256 gameId) public view returns(address[]){\r\n        return games[gameId].PlayerAddressList;\r\n    }\r\n    // and then enumerate through them and get their respective bids...\r\n    function getGamesPlayerBids(uint256 gameId, address playerAddress) public view returns(uint256){\r\n        return games[gameId].PlayerBidMap[playerAddress];\r\n    }\r\n    \r\n    constructor() public {\r\n        owner = msg.sender;\r\n        bankAddress = owner;\r\n        \r\n        // ensure we are above gameBars[0] \r\n        gameBars.push(Bar(0,0,\"\",\"\",\"\"));\r\n        \r\n        // and for games[0]\r\n        address[] memory _addressList;\r\n        games.push(Game(0,0,_addressList));\r\n        \r\n    }\r\n    \r\n    event uintEvent(\r\n        uint256 eventUint\r\n        );\r\n        \r\n    event gameComplete(\r\n        uint256 gameId\r\n        );\r\n        \r\n\r\n    // Should only be used on estimate gas to check if the players bid\r\n    // will be acceptable and not be over the game limit...\r\n    // Should not be used to send Ether!\r\n    function playGameCheckBid(uint256 barId) public whenNotPaused payable {\r\n        uint256 gameAmt = (msg.value.div(100)).mul(100-(housePercent+charityPercent));\r\n        uint256 currentGameId = gameBars[barId].CurrentGameId;\r\n        \r\n        if(gameBars[barId].CurrentGameId == 0) {\r\n            if(gameAmt > gameBars[barId].Limit) {\r\n                require(msg.value == minGamePlayAmount);\r\n            }\r\n            \r\n        } else {\r\n            currentGameId = gameBars[barId].CurrentGameId;\r\n            require(games[currentGameId].BarId > 0); // Ensure it hasn't been closed already\r\n            if(games[currentGameId].CurrentTotal.add(gameAmt) > gameBars[barId].Limit) {\r\n                require(msg.value == minGamePlayAmount);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function playGame(uint256 barId,\r\n            string _answer1, string _answer2, string _answer3) public \r\n            whenNotPaused \r\n            correctAnswers(barId, _answer1, _answer2, _answer3) \r\n            payable {\r\n        require(msg.value >= minGamePlayAmount);\r\n        \r\n        // check if a game is in play for this bar...\r\n        uint256 houseAmt = (msg.value.div(100)).mul(housePercent);\r\n        uint256 charityAmt = (msg.value.div(100)).mul(charityPercent);\r\n        uint256 gameAmt = (msg.value.div(100)).mul(100-(housePercent+charityPercent));\r\n        uint256 currentGameId = 0;\r\n        \r\n        \r\n        if(gameBars[barId].CurrentGameId == 0) {\r\n            \r\n            if(gameAmt > gameBars[barId].Limit) {\r\n                require(msg.value == minGamePlayAmount);\r\n            }\r\n            \r\n            address[] memory _addressList;\r\n            games.push(Game(barId, gameAmt, _addressList));\r\n            currentGameId = games.length-1;\r\n            \r\n            gameBars[barId].CurrentGameId = currentGameId;\r\n            \r\n        } else {\r\n            currentGameId = gameBars[barId].CurrentGameId;\r\n            require(games[currentGameId].BarId > 0); // Ensure it hasn't been closed already\r\n            if(games[currentGameId].CurrentTotal.add(gameAmt) > gameBars[barId].Limit) {\r\n                require(msg.value == minGamePlayAmount);\r\n            }\r\n            \r\n            games[currentGameId].CurrentTotal = games[currentGameId].CurrentTotal.add(gameAmt);    \r\n        }\r\n        \r\n        \r\n        \r\n        if(games[currentGameId].PlayerBidMap[msg.sender] == 0) {\r\n            games[currentGameId].PlayerAddressList.push(msg.sender);\r\n        }\r\n        \r\n        games[currentGameId].PlayerBidMap[msg.sender] = games[currentGameId].PlayerBidMap[msg.sender].add(gameAmt);\r\n        \r\n        bankBalance+=houseAmt;\r\n        charityBalance+=charityAmt;\r\n        \r\n        if(games[currentGameId].CurrentTotal >= gameBars[barId].Limit) {\r\n\r\n            emit gameComplete(gameBars[barId].CurrentGameId);\r\n            gameBars[barId].CurrentGameId = 0;\r\n        }\r\n        \r\n        \r\n    }\r\n    event completeGameResult(\r\n            uint256 indexed gameId,\r\n            uint256 indexed barId,\r\n            uint256 winningNumber,\r\n            string  proof,\r\n            address winnersAddress,\r\n            uint256 winningAmount,\r\n            uint256 timestamp\r\n        );\r\n    \r\n    // using NotaryProxy to generate random numbers with proofs stored in logs so they can be traced back\r\n    // publish list of players addresses - random number selection (With proof) and then how it was selected\r\n    \r\n    function completeGame(uint256 gameId, uint256 _winningNumber, string _proof, address winner) public onlyOwner {\r\n\r\n\r\n        \r\n        if(!winner.send(games[gameId].CurrentTotal)){\r\n            \r\n            playerPendingWithdrawals[winner] = playerPendingWithdrawals[winner].add(games[gameId].CurrentTotal);\r\n        }\r\n        \r\n\r\n        winners.push(Winner(\r\n                winner,\r\n                games[gameId].CurrentTotal,\r\n                now,\r\n                games[gameId].BarId,\r\n                gameId\r\n            ));\r\n        \r\n        emit completeGameResult(\r\n                gameId,\r\n                games[gameId].BarId,\r\n                _winningNumber,\r\n                _proof,\r\n                winner,\r\n                games[gameId].CurrentTotal,\r\n                now\r\n            );\r\n        \r\n        // reset the bar state...\r\n        gameBars[games[gameId].BarId].CurrentGameId = 0;\r\n        \r\n\r\n        \r\n    }\r\n    \r\n    event cancelGame(\r\n            uint256 indexed gameId,\r\n            uint256 indexed barId,\r\n            uint256 amountReturned,\r\n            address playerAddress\r\n            \r\n        );\r\n    // players can cancel their participation in a game as long as it hasn't completed\r\n    // they lose their housePercent fee (And pay any gas of course)\r\n    function player_cancelGame(uint256 barId) public {\r\n        address _playerAddr = msg.sender;\r\n        uint256 _gameId = gameBars[barId].CurrentGameId;\r\n        uint256 _gamePlayerBalance = games[_gameId].PlayerBidMap[_playerAddr];\r\n        \r\n        if(_gamePlayerBalance > 0){\r\n            // reset player bid amount\r\n            games[_gameId].PlayerBidMap[_playerAddr] = 1; // set to 1 wei to avoid duplicates\r\n            games[_gameId].CurrentTotal -= _gamePlayerBalance;\r\n            \r\n            if(!_playerAddr.send(_gamePlayerBalance)){\r\n                // need to add to a retry list...\r\n                playerPendingWithdrawals[_playerAddr] = playerPendingWithdrawals[_playerAddr].add(_gamePlayerBalance);\r\n            } \r\n        } \r\n        \r\n        emit cancelGame(\r\n            _gameId,\r\n            barId,\r\n            _gamePlayerBalance,\r\n            _playerAddr\r\n            );\r\n    }\r\n    \r\n    \r\n    function player_withdrawPendingTransactions() public\r\n        returns (bool)\r\n     {\r\n        uint withdrawAmount = playerPendingWithdrawals[msg.sender];\r\n        playerPendingWithdrawals[msg.sender] = 0;\r\n\r\n        if (msg.sender.call.value(withdrawAmount)()) {\r\n            return true;\r\n        } else {\r\n            /* if send failed revert playerPendingWithdrawals[msg.sender] = 0; */\r\n            /* player can try to withdraw again later */\r\n            playerPendingWithdrawals[msg.sender] = withdrawAmount;\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    uint256 internal gameOpUint;\r\n    function gameOp() public returns(uint256) {\r\n        return gameOpUint;\r\n    }\r\n    function private_SetPause(bool _gamePaused) public onlyOwner {\r\n        gamePaused = _gamePaused;\r\n    }\r\n\r\n    function private_AddGameBar(uint256 _limit, \r\n                    string _answer1, string _answer2, string _answer3) public onlyOwner {\r\n\r\n        gameBars.push(Bar(_limit, 0, _answer1, _answer2, _answer3));\r\n        emit uintEvent(gameBars.length);\r\n    }\r\n    function private_DelGameBar(uint256 barId) public onlyOwner {\r\n        if(gameBars[barId].CurrentGameId > 0){\r\n            delete games[gameBars[barId].CurrentGameId];\r\n        }\r\n        delete gameBars[barId];\r\n    }\r\n\r\n    // Used to rebalance a game when the ETH/USD rate changes\r\n    function private_UpdateGameBarLimit(uint256 barId, uint256 _limit) public onlyOwner {\r\n        gameBars[barId].Limit = _limit;\r\n    }\r\n    function private_setHousePercent(uint256 _housePercent) public onlyOwner {\r\n        housePercent = _housePercent;\r\n    }\r\n    function private_setMinGamePlayAmount(uint256 _minGamePlayAmount) onlyOwner {\r\n        minGamePlayAmount = _minGamePlayAmount;\r\n    }\r\n    function private_setBankAddress(address _bankAddress) public onlyOwner {\r\n        bankAddress = _bankAddress;\r\n    }\r\n    function private_withdrawBankFunds(address _whereTo) public onlyBanker {\r\n        if(_whereTo.send(bankBalance)) {\r\n            bankBalance = 0;\r\n        }\r\n    }\r\n    function private_withdrawBankFunds(address _whereTo, uint256 _amount) public onlyBanker {\r\n        if(_whereTo.send(_amount)){\r\n            bankBalance-=_amount;\r\n        }\r\n    }\r\n    function private_setCharityAddress(address _charityAddress) public onlyOwner {\r\n        charityAddress = _charityAddress;\r\n    }\r\n\r\n    event charityDonation(\r\n            address indexed charityAddress,\r\n            string charityName,\r\n            uint256 amountDonated,\r\n            uint256 timestamp\r\n        );\r\n    function private_sendCharityFunds(string _charityName) public onlyOwner {\r\n        if(charityAddress.send(charityBalance)) {\r\n            totalCharitySent += charityBalance;\r\n            emit charityDonation(\r\n                    charityAddress,\r\n                    _charityName,\r\n                    charityBalance,\r\n                    now\r\n                );\r\n            charityBalance = 0;\r\n        }\r\n    }\r\n    function private_sendCharityFunds(string _charityName, uint256 _amount) public onlyOwner {\r\n        require(_amount <= charityBalance);\r\n        if(charityAddress.send(_amount)) {\r\n            charityBalance -= _amount;\r\n            totalCharitySent += _amount;\r\n            emit charityDonation(\r\n                    charityAddress,\r\n                    _charityName,\r\n                    _amount,\r\n                    now\r\n                );\r\n        }\r\n    }\r\n    \r\n    function compareStrings (string a, string b) internal pure returns (bool){\r\n        return keccak256(a) == keccak256(b);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"barId\",\"type\":\"uint256\"}],\"name\":\"playGameCheckBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"name\":\"BarId\",\"type\":\"uint256\"},{\"name\":\"CurrentTotal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bankBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameBars\",\"outputs\":[{\"name\":\"Limit\",\"type\":\"uint256\"},{\"name\":\"CurrentGameId\",\"type\":\"uint256\"},{\"name\":\"answer1\",\"type\":\"string\"},{\"name\":\"answer2\",\"type\":\"string\"},{\"name\":\"answer3\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"housePercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gamePaused\",\"type\":\"bool\"}],\"name\":\"private_SetPause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_charityAddress\",\"type\":\"address\"}],\"name\":\"private_setCharityAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whereTo\",\"type\":\"address\"}],\"name\":\"private_withdrawBankFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"player_withdrawPendingTransactions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gameOp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWinnersLen\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minGamePlayAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGamesPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"charityBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_limit\",\"type\":\"uint256\"},{\"name\":\"_answer1\",\"type\":\"string\"},{\"name\":\"_answer2\",\"type\":\"string\"},{\"name\":\"_answer3\",\"type\":\"string\"}],\"name\":\"private_AddGameBar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_whereTo\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"private_withdrawBankFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winners\",\"outputs\":[{\"name\":\"winner\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"barId\",\"type\":\"uint256\"},{\"name\":\"gameId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_charityName\",\"type\":\"string\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"private_sendCharityFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"barId\",\"type\":\"uint256\"}],\"name\":\"private_DelGameBar\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_housePercent\",\"type\":\"uint256\"}],\"name\":\"private_setHousePercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"_winningNumber\",\"type\":\"uint256\"},{\"name\":\"_proof\",\"type\":\"string\"},{\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"completeGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"barId\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"private_UpdateGameBarLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"gameId\",\"type\":\"uint256\"},{\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"getGamesPlayerBids\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"barId\",\"type\":\"uint256\"}],\"name\":\"player_cancelGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minGamePlayAmount\",\"type\":\"uint256\"}],\"name\":\"private_setMinGamePlayAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"barId\",\"type\":\"uint256\"},{\"name\":\"_answer1\",\"type\":\"string\"},{\"name\":\"_answer2\",\"type\":\"string\"},{\"name\":\"_answer3\",\"type\":\"string\"}],\"name\":\"playGame\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_charityName\",\"type\":\"string\"}],\"name\":\"private_sendCharityFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bankAddress\",\"type\":\"address\"}],\"name\":\"private_setBankAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCharitySent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"eventUint\",\"type\":\"uint256\"}],\"name\":\"uintEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"gameComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"barId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"winningNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proof\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"winnersAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"winningAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"completeGameResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"barId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"playerAddress\",\"type\":\"address\"}],\"name\":\"cancelGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"charityAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"charityName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amountDonated\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"charityDonation\",\"type\":\"event\"}]","ContractName":"Win1Million","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8801f8fd512d655354aa161b63b79bfe71fd09c78c4faf2a7e52a094210b61f4"}]}