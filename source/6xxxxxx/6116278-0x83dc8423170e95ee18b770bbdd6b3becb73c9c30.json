{"status":"1","message":"OK","result":[{"SourceCode":"contract SafeMath {\r\n\t  function safeMul(uint a, uint b) internal returns (uint) {\r\n\t\tuint c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t  }\r\n\t  function safeSub(uint a, uint b) internal returns (uint) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t  }\r\n\t  function safeAdd(uint a, uint b) internal returns (uint) {\r\n\t\tuint c = a + b;\r\n\t\tassert(c>=a && c>=b);\r\n\t\treturn c;\r\n\t  }\r\n\t  // mitigate short address attack\r\n\t  // thanks to https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34.\r\n\t  // TODO: doublecheck implication of >= compared to ==\r\n\t  modifier onlyPayloadSize(uint numWords) {\r\n\t\t assert(msg.data.length >= numWords * 32 + 4);\r\n\t\t _;\r\n\t  }\r\n\t}\r\n\r\n\tcontract Token { // ERC20 standard\r\n\t\tfunction balanceOf(address _owner) public  view returns (uint256 balance);\r\n\t\tfunction transfer(address _to, uint256 _value) public  returns (bool success);\r\n\t\tfunction transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\r\n\t\tfunction approve(address _spender, uint256 _value)  returns (bool success);\r\n\t\tfunction allowance(address _owner, address _spender) public  view returns (uint256 remaining);\r\n\t\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\t\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\t}\r\n\r\n\tcontract StandardToken is Token, SafeMath {\r\n\t\tuint256 public totalSupply;\r\n\t\t// TODO: update tests to expect throw\r\n\t\tfunction transfer(address _to, uint256 _value) public  onlyPayloadSize(2) returns (bool success) {\r\n\t\t\trequire(_to != address(0));\r\n\t\t\trequire(balances[msg.sender] >= _value && _value > 0);\r\n\t\t\tbalances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n\t\t\tbalances[_to] = safeAdd(balances[_to], _value);\r\n\t\t\tTransfer(msg.sender, _to, _value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t// TODO: update tests to expect throw\r\n\t\tfunction transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) returns (bool success) {\r\n\t\t\trequire(_to != address(0));\r\n\t\t\trequire(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\r\n\t\t\tbalances[_from] = safeSub(balances[_from], _value);\r\n\t\t\tbalances[_to] = safeAdd(balances[_to], _value);\r\n\t\t\tallowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\r\n\t\t\tTransfer(_from, _to, _value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tfunction balanceOf(address _owner) view returns (uint256 balance) {\r\n\t\t\treturn balances[_owner];\r\n\t\t}\r\n\t\t// To change the approve amount you first have to reduce the addresses'\r\n\t\t//  allowance to zero by calling 'approve(_spender, 0)' if it is not\r\n\t\t//  already 0 to mitigate the race condition described here:\r\n\t\t//  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t\tfunction approve(address _spender, uint256 _value) onlyPayloadSize(2) returns (bool success) {\r\n\t\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\t\t\tallowed[msg.sender][_spender] = _value;\r\n\t\t\tApproval(msg.sender, _spender, _value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tfunction changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) onlyPayloadSize(3) returns (bool success) {\r\n\t\t\trequire(allowed[msg.sender][_spender] == _oldValue);\r\n\t\t\tallowed[msg.sender][_spender] = _newValue;\r\n\t\t\tApproval(msg.sender, _spender, _newValue);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tfunction allowance(address _owner, address _spender) public  view returns (uint256 remaining) {\r\n\t\t  return allowed[_owner][_spender];\r\n\t\t}\r\n\t\tmapping (address => uint256) public  balances;\r\n\t\tmapping (address => mapping (address => uint256)) public  allowed;\r\n\t}\r\n\r\n\tcontract STC is StandardToken {\r\n\t\t// FIELDS\r\n\t\tstring public name = \"SmarterThanCrypto\";\r\n\t\tstring public symbol = \"STC\";\r\n\t\tuint256 public decimals = 18;\r\n\t\tstring public version = \"10.0\";\r\n\t\tuint256 public tokenCap = 100000000 * 10**18;\r\n\t\t// crowdsale parameters\r\n\t\tuint256 public fundingStartTime;\r\n\t\tuint256 public fundingEndTime;\r\n\t\t// vesting fields\r\n\t\taddress public vestingContract;\r\n\t\tbool private vestingSet = false;\r\n\t\t// root control\r\n\t\taddress public fundWallet;\r\n\t\t// control of liquidity and limited control of updatePrice\r\n\t\taddress public controlWallet;\r\n\t\t// time to wait between controlWallet price updates\r\n\t\tuint256 public waitTime = 1 hours;\r\n\t\t// fundWallet controlled state variables\r\n\t\t// halted: halt buying due to emergency, tradeable: signal that assets have been acquired\r\n\t\tbool public halted = false;\r\n\t\tbool public tradeable = false;\r\n\t\t// -- totalSupply defined in StandardToken\r\n\t\t// -- mapping to token balances done in StandardToken\r\n\t\tuint256 public previousUpdateTime = 0;\r\n\t\tPrice public currentPrice;\r\n\t\tuint256 public minAmount = 0.04 ether;\r\n\t\tuint256 public OfferTime = 2592000;\r\n\t \r\n\r\n\t\t// map participant address to a withdrawal request\r\n\t\tmapping (address => Withdrawal) public withdrawals;\r\n\t\t// maps previousUpdateTime to the next price\r\n\t\tmapping (uint256 => Price) public prices;\r\n\t\t// maps addresses\r\n\t\tmapping (address => bool) public whitelist;\r\n\t\t// TYPES\r\n\t\tstruct Price { // tokensPerEth\r\n\t\t\tuint256 numerator;\r\n\t\t\tuint256 denominator;\r\n\t\t}\r\n\t\tstruct Withdrawal {\r\n\t\t\tuint256 tokens;\r\n\t\t\tuint256 time; // time for each withdrawal is set to the previousUpdateTime\r\n\t\t}\r\n\t\t// EVENTS\r\n\t\tevent Buy(address indexed participant, address indexed beneficiary, uint256 ethValue, uint256 amountTokens);\r\n\t\tevent AllocatePresale(address indexed participant, uint256 amountTokens);\r\n\t\tevent Whitelist(address indexed participant);\r\n\t\tevent PriceUpdate(uint256 numerator, uint256 denominator);\r\n\t\tevent AddLiquidity(uint256 ethAmount);\r\n\t\tevent RemoveLiquidity(uint256 ethAmount);\r\n\t\tevent WithdrawRequest(address indexed participant, uint256 amountTokens);\r\n\t\tevent Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\r\n\t\t// MODIFIERS\r\n\t\tmodifier isTradeable { // exempt vestingContract and fundWallet to allow dev allocations\r\n\t\t\trequire(tradeable || msg.sender == fundWallet || msg.sender == vestingContract);\r\n\t\t\t_;\r\n\t\t}\r\n\t\tmodifier onlyWhitelist {\r\n\t\t\trequire(whitelist[msg.sender]);\r\n\t\t\t_;\r\n\t\t}\r\n\t\tmodifier onlyFundWallet {\r\n\t\t\trequire(msg.sender == fundWallet);\r\n\t\t\t_;\r\n\t\t}\r\n\t\tmodifier onlyManagingWallets {\r\n\t\t\trequire(msg.sender == controlWallet || msg.sender == fundWallet);\r\n\t\t\t_;\r\n\t\t}\r\n\t\tmodifier only_if_controlWallet {\r\n\t\t\tif (msg.sender == controlWallet) _;\r\n\t\t}\r\n\t\tmodifier require_waited {\r\n\t\t\trequire(safeSub(now, waitTime) >= previousUpdateTime);\r\n\t\t\t_;\r\n\t\t}\r\n\t\tmodifier only_if_increase (uint256 newNumerator) {\r\n\t\t\tif (newNumerator > currentPrice.numerator) _;\r\n\t\t}\r\n\t\t// CONSTRUCTOR\r\n\t\tfunction STC(address controlWalletInput, uint256 priceNumeratorInput, uint256 startTimeInput, uint256 endTimeInput) public  {\r\n\t\t\trequire(controlWalletInput != address(0));\r\n\t\t\trequire(priceNumeratorInput > 0);\r\n\t\t\trequire(endTimeInput > startTimeInput);\r\n\t\t\tfundWallet = msg.sender;\r\n\t\t\tcontrolWallet = controlWalletInput;\r\n\t\t\twhitelist[fundWallet] = true;\r\n\t\t\twhitelist[controlWallet] = true;\r\n\t\t\tcurrentPrice = Price(priceNumeratorInput, 10000); // 1 token = 1 usd at ICO start\r\n\t\t\tfundingStartTime = startTimeInput;\r\n\t\t\tfundingEndTime = endTimeInput;\r\n\t\t\tpreviousUpdateTime = now;\r\n\t\t}\t\t\t\r\n\t\t// METHODS\t\r\n\t\tfunction setOfferTime(uint256 newOfferTime) external onlyFundWallet {\r\n\t\t\trequire(newOfferTime>0);\r\n\t\t\trequire(newOfferTime<safeSub(fundingEndTime,fundingStartTime));\r\n\t\t\tOfferTime = newOfferTime;\r\n\t\t}\t\t\r\n\t\tfunction setVestingContract(address vestingContractInput) external onlyFundWallet {\r\n\t\t\trequire(vestingContractInput != address(0));\r\n\t\t\tvestingContract = vestingContractInput;\r\n\t\t\twhitelist[vestingContract] = true;\r\n\t\t\tvestingSet = true;\r\n\t\t}\r\n\t\t// allows controlWallet to update the price within a time contstraint, allows fundWallet complete control\r\n\t\tfunction updatePrice(uint256 newNumerator) external onlyManagingWallets {\r\n\t\t\trequire(newNumerator > 0);\r\n\t\t\trequire_limited_change(newNumerator);\r\n\t\t\t// either controlWallet command is compliant or transaction came from fundWallet\r\n\t\t\tcurrentPrice.numerator = newNumerator;\r\n\t\t\t// maps time to new Price (if not during ICO)\r\n\t\t\tprices[previousUpdateTime] = currentPrice;\r\n\t\t\tpreviousUpdateTime = now;\r\n\t\t\tPriceUpdate(newNumerator, currentPrice.denominator);\r\n\t\t}\r\n\t\tfunction require_limited_change (uint256 newNumerator)\r\n\t\t\tprivate\r\n\t\t\tonly_if_controlWallet\r\n\t\t\trequire_waited\r\n\t\t\tonly_if_increase(newNumerator)\r\n\t\t{\r\n\t\t\tuint256 percentage_diff = 0;\r\n\t\t\tpercentage_diff = safeMul(newNumerator, 10000) / currentPrice.numerator;\r\n\t\t\tpercentage_diff = safeSub(percentage_diff, 10000);\r\n\t\t\t// controlWallet can only increase price by max 20% and only every waitTime\r\n\t\t\t//require(percentage_diff <= 20);\r\n\t\t}\r\n\t\tfunction updatePriceDenominator(uint256 newDenominator) external onlyManagingWallets {\r\n\t\t\trequire(now > fundingEndTime);\r\n\t\t\trequire(newDenominator > 0);\r\n\t\t\tcurrentPrice.denominator = newDenominator;\r\n\t\t\t// maps time to new Price\r\n\t\t\tprices[previousUpdateTime] = currentPrice;\r\n\t\t\tpreviousUpdateTime = now;\r\n\t\t\tPriceUpdate(currentPrice.numerator, newDenominator);\r\n\t\t}\r\n\t\tfunction updatePriceAndDenominator(uint256 newNumerator, uint256 newDenominator) external onlyManagingWallets {\r\n\t\t\trequire(now > fundingEndTime);\r\n\t\t\trequire(newDenominator > 0);\r\n\t\t\trequire(newNumerator > 0);\r\n\t\t\trequire(safeSub(now, waitTime) >= previousUpdateTime);\r\n\t\t\tcurrentPrice.denominator = newDenominator;\r\n\t\t\tcurrentPrice.numerator = newNumerator;\r\n\t\t\t// maps time to new Price\r\n\t\t\tprices[previousUpdateTime] = currentPrice;\r\n\t\t\tpreviousUpdateTime = now;\r\n\t\t\tPriceUpdate(currentPrice.numerator, newDenominator);\r\n\t\t}\r\n\t\tfunction allocateTokens(address participant, uint256 amountTokens) private {\r\n\t\t\trequire(vestingSet);\r\n\t\t\t// 13% of total allocated for PR, Marketing, Team, Advisors\r\n\t\t\tuint256 developmentAllocation = safeMul(amountTokens, 14942528735632200) / 100000000000000000;\r\n\t\t\t// check that token cap is not exceeded\r\n\t\t\tuint256 newTokens = safeAdd(amountTokens, developmentAllocation);\r\n\t\t\trequire(safeAdd(totalSupply, newTokens) <= tokenCap);\r\n\t\t\t// increase token supply, assign tokens to participant\r\n\t\t\ttotalSupply = safeAdd(totalSupply, newTokens);\r\n\t\t\tbalances[participant] = safeAdd(balances[participant], amountTokens);\r\n\t\t\tbalances[vestingContract] = safeAdd(balances[vestingContract], developmentAllocation);\r\n\t\t}\r\n\t\tfunction allocatePresaleTokens(address participant, uint amountTokens) external onlyManagingWallets {\r\n\t\t\trequire(!halted);\r\n\t\t\trequire(participant != address(0));\r\n\t\t\twhitelist[participant] = true; // automatically whitelist accepted presale\r\n\t\t\tallocateTokens(participant, amountTokens);\r\n\t\t\tWhitelist(participant);\r\n\t\t\tAllocatePresale(participant, amountTokens);\r\n\t\t}\r\n\t\tfunction verifyParticipant(address participant) external onlyManagingWallets {\r\n\t\t\twhitelist[participant] = true;\r\n\t\t\tWhitelist(participant);\r\n\t\t}\r\n\t\tfunction buy() external payable {\r\n\t\t\tbuyTo(msg.sender);\r\n\t\t}\r\n\t\tfunction buyTo(address participant) public payable onlyWhitelist {\r\n\t\t\trequire(!halted);\r\n\t\t\trequire(participant != address(0));\r\n\t\t\trequire(msg.value >= minAmount);\r\n\t\t\trequire(now >= fundingStartTime);\r\n\t\t\tuint256 icoDenominator = icoDenominatorPrice();\r\n\t\t\tuint256 tokensToBuy = safeMul(msg.value, currentPrice.numerator) / icoDenominator;\r\n\t\t\tallocateTokens(participant, tokensToBuy);\r\n\t\t\t// send ether to fundWallet\r\n\t\t\tfundWallet.transfer(msg.value);\r\n\t\t\tBuy(msg.sender, participant, msg.value, tokensToBuy);\r\n\t\t}\r\n\t\t// time based on blocknumbers, assuming a blocktime of 30s\r\n\t\tfunction icoDenominatorPrice() public view returns (uint256) {\r\n\t\t\tuint256 icoDuration = safeSub(now, fundingStartTime);\r\n\t\t\tuint256 denominator;\r\n\t\t\tif (icoDuration < 172800) { // time in sec = (48*60*60) = 172800\r\n\t\t\t   denominator = safeMul(currentPrice.denominator, 95) / 100;\r\n\t\t\t   return denominator;\r\n\t\t\t} else if (icoDuration < OfferTime ) { // time in sec = (((4*7)+2)*24*60*60) = 2592000\r\n\t\t\t\tdenominator = safeMul(currentPrice.denominator, 100) / 100;\r\n\t\t\t   return denominator;\r\n\t\t\t} else if (now > fundingEndTime ) {\r\n\t\t\t   denominator = safeMul(currentPrice.denominator, 100) / 100;\r\n\t\t\t   return denominator;   \r\n\t\t\t} else {\r\n\t\t\t\tdenominator = safeMul(currentPrice.denominator, 105) / 100;\r\n\t\t\t   return denominator;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfunction requestWithdrawal(uint256 amountTokensToWithdraw) external isTradeable onlyWhitelist {\r\n\t\t\trequire(now > fundingEndTime);\r\n\t\t\trequire(amountTokensToWithdraw > 0);\r\n\t\t\taddress participant = msg.sender;\r\n\t\t\trequire(balanceOf(participant) >= amountTokensToWithdraw);\r\n\t\t\trequire(withdrawals[participant].tokens == 0); // participant cannot have outstanding withdrawals\r\n\t\t\tbalances[participant] = safeSub(balances[participant], amountTokensToWithdraw);\r\n\t\t\twithdrawals[participant] = Withdrawal({tokens: amountTokensToWithdraw, time: previousUpdateTime});\r\n\t\t\tWithdrawRequest(participant, amountTokensToWithdraw);\r\n\t\t}\r\n\t\tfunction withdraw() external {\r\n\t\t\taddress participant = msg.sender;\r\n\t\t\tuint256 tokens = withdrawals[participant].tokens;\r\n\t\t\trequire(tokens > 0); // participant must have requested a withdrawal\r\n\t\t\tuint256 requestTime = withdrawals[participant].time;\r\n\t\t\t// obtain the next price that was set after the request\r\n\t\t\tPrice price = prices[requestTime];\r\n\t\t\trequire(price.numerator > 0); // price must have been set\r\n\t\t\tuint256 withdrawValue  = safeMul(tokens, price.denominator) / price.numerator;\r\n\t\t\t// if contract ethbal > then send + transfer tokens to fundWallet, otherwise give tokens back\r\n\t\t\twithdrawals[participant].tokens = 0;\r\n\t\t\tif (this.balance >= withdrawValue)\r\n\t\t\t\tenact_withdrawal_greater_equal(participant, withdrawValue, tokens);\r\n\t\t\telse\r\n\t\t\t\tenact_withdrawal_less(participant, withdrawValue, tokens);\r\n\t\t}\r\n\t\tfunction enact_withdrawal_greater_equal(address participant, uint256 withdrawValue, uint256 tokens)\r\n\t\t\tprivate\r\n\t\t{\r\n\t\t\tassert(this.balance >= withdrawValue);\r\n\t\t\tbalances[fundWallet] = safeAdd(balances[fundWallet], tokens);\r\n\t\t\tparticipant.transfer(withdrawValue);\r\n\t\t\tWithdraw(participant, tokens, withdrawValue);\r\n\t\t}\r\n\t\tfunction enact_withdrawal_less(address participant, uint256 withdrawValue, uint256 tokens)\r\n\t\t\tprivate\r\n\t\t{\r\n\t\t\tassert(this.balance < withdrawValue);\r\n\t\t\tbalances[participant] = safeAdd(balances[participant], tokens);\r\n\t\t\tWithdraw(participant, tokens, 0); // indicate a failed withdrawal\r\n\t\t}\r\n\t\tfunction checkWithdrawValue(uint256 amountTokensToWithdraw) public  view returns (uint256 etherValue) {\r\n\t\t\trequire(amountTokensToWithdraw > 0);\r\n\t\t\trequire(balanceOf(msg.sender) >= amountTokensToWithdraw);\r\n\t\t\tuint256 withdrawValue = safeMul(amountTokensToWithdraw, currentPrice.denominator) / currentPrice.numerator;\r\n\t\t\trequire(this.balance >= withdrawValue);\r\n\t\t\treturn withdrawValue;\r\n\t\t}\r\n\t\tfunction checkWithdrawValueForAddress(address participant,uint256 amountTokensToWithdraw) public  view returns (uint256 etherValue) {\r\n\t\t\trequire(amountTokensToWithdraw > 0);\r\n\t\t\trequire(balanceOf(participant) >= amountTokensToWithdraw);\r\n\t\t\tuint256 withdrawValue = safeMul(amountTokensToWithdraw, currentPrice.denominator) / currentPrice.numerator;\r\n\t\t\treturn withdrawValue;\r\n\t\t}\r\n\t\t// allow fundWallet or controlWallet to add ether to contract\r\n\t\tfunction addLiquidity() external onlyManagingWallets payable {\r\n\t\t\trequire(msg.value > 0);\r\n\t\t\tAddLiquidity(msg.value);\r\n\t\t}\r\n\t\t// allow fundWallet to remove ether from contract\r\n\t\tfunction removeLiquidity(uint256 amount) external onlyManagingWallets {\r\n\t\t\trequire(amount <= this.balance);\r\n\t\t\tfundWallet.transfer(amount);\r\n\t\t\tRemoveLiquidity(amount);\r\n\t\t}\r\n\t\tfunction changeFundWallet(address newFundWallet) external onlyFundWallet {\r\n\t\t\trequire(newFundWallet != address(0));\r\n\t\t\tfundWallet = newFundWallet;\r\n\t\t}\r\n\t\tfunction changeControlWallet(address newControlWallet) external onlyFundWallet {\r\n\t\t\trequire(newControlWallet != address(0));\r\n\t\t\tcontrolWallet = newControlWallet;\r\n\t\t}\r\n\t\tfunction changeWaitTime(uint256 newWaitTime) external onlyFundWallet {\r\n\t\t\twaitTime = newWaitTime;\r\n\t\t}\r\n\t\tfunction updatefundingStartTime(uint256 newfundingStartTime) external onlyFundWallet {\r\n\t\t   // require(now < fundingStartTime);\r\n\t\t   // require(now < newfundingStartTime);\r\n\t\t\tfundingStartTime = newfundingStartTime;\r\n\t\t}\r\n\t\tfunction updatefundingEndTime(uint256 newfundingEndTime) external onlyFundWallet {\r\n\t\t  //  require(now < fundingEndTime);\r\n\t\t  //  require(now < newfundingEndTime);\r\n\t\t\tfundingEndTime = newfundingEndTime;\r\n\t\t}\r\n\t\tfunction halt() external onlyFundWallet {\r\n\t\t\thalted = true;\r\n\t\t}\r\n\t\tfunction unhalt() external onlyFundWallet {\r\n\t\t\thalted = false;\r\n\t\t}\r\n\t\tfunction enableTrading() external onlyFundWallet {\r\n\t\t\trequire(now > fundingEndTime);\r\n\t\t\ttradeable = true;\r\n\t\t}\r\n\t\t// fallback function\r\n\t\tfunction() payable {\r\n\t\t\trequire(tx.origin == msg.sender);\r\n\t\t\tbuyTo(msg.sender);\r\n\t\t}\r\n\t\tfunction claimTokens(address _token) external onlyFundWallet {\r\n\t\t\trequire(_token != address(0));\r\n\t\t\tToken token = Token(_token);\r\n\t\t\tuint256 balance = token.balanceOf(this);\r\n\t\t\ttoken.transfer(fundWallet, balance);\r\n\t\t }\r\n\t\t// prevent transfers until trading allowed\r\n\t\tfunction transfer(address _to, uint256 _value) isTradeable returns (bool success) {\r\n\t\t\treturn super.transfer(_to, _value);\r\n\t\t}\r\n\t\tfunction transferFrom(address _from, address _to, uint256 _value) public  isTradeable returns (bool success) {\r\n\t\t\treturn super.transferFrom(_from, _to, _value);\r\n\t\t}\r\n\t}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newWaitTime\",\"type\":\"uint256\"}],\"name\":\"changeWaitTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOfferTime\",\"type\":\"uint256\"}],\"name\":\"setOfferTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNumerator\",\"type\":\"uint256\"},{\"name\":\"newDenominator\",\"type\":\"uint256\"}],\"name\":\"updatePriceAndDenominator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"previousUpdateTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OfferTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newControlWallet\",\"type\":\"address\"}],\"name\":\"changeControlWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"amountTokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"checkWithdrawValueForAddress\",\"outputs\":[{\"name\":\"etherValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"verifyParticipant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newFundWallet\",\"type\":\"address\"}],\"name\":\"changeFundWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"vestingContractInput\",\"type\":\"address\"}],\"name\":\"setVestingContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEndTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controlWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newfundingStartTime\",\"type\":\"uint256\"}],\"name\":\"updatefundingStartTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNumerator\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"amountTokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"checkWithdrawValue\",\"outputs\":[{\"name\":\"etherValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"},{\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"allocatePresaleTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_oldValue\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"changeApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountTokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"waitTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newfundingEndTime\",\"type\":\"uint256\"}],\"name\":\"updatefundingEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDenominator\",\"type\":\"uint256\"}],\"name\":\"updatePriceDenominator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"buyTo\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tradeable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"icoDenominatorPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"controlWalletInput\",\"type\":\"address\"},{\"name\":\"priceNumeratorInput\",\"type\":\"uint256\"},{\"name\":\"startTimeInput\",\"type\":\"uint256\"},{\"name\":\"endTimeInput\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AllocatePresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"STC","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000344f0e5555f0e11e523ffef4c503f29838cad6d4000000000000000000000000000000000000000000000000000000001585e223000000000000000000000000000000000000000000000000000000005b9eee80000000000000000000000000000000000000000000000000000000005bc3d880","Library":"","SwarmSource":"bzzr://3032deea60836f9d8140d5b32abcb94e30ef00c78e387606c325a1b1d904b09e"}]}