{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n/**\r\n* Audited by VZ Chains (vzchains.com)\r\n* HashRushICO.sol creates the client's token for crowdsale and allows for subsequent token sales and minting of tokens\r\n*   Crowdsale contracts edited from original contract code at https://www.ethereum.org/crowdsale#crowdfund-your-idea\r\n*   Additional crowdsale contracts, functions, libraries from OpenZeppelin\r\n*       at https://github.com/OpenZeppelin/zeppelin-solidity/tree/master/contracts/token\r\n*   Token contract edited from original contract code at https://www.ethereum.org/token\r\n*   ERC20 interface and certain token functions adapted from https://github.com/ConsenSys/Tokens\r\n**/\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 {\r\n    //Sets events and functions for ERC20 token\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n}\r\n/**\r\n * @title Owned\r\n * @dev The Owned contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Owned {\r\n    address public owner;\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n}\r\ncontract HashRush is ERC20, Owned {\r\n    // Applies SafeMath library to uint256 operations\r\n    using SafeMath for uint256;\r\n    // Public variables\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals;\r\n    // Variables\r\n    uint256 totalSupply_;\r\n    uint256 multiplier;\r\n    // Arrays for balances & allowance\r\n    mapping (address => uint256) balance;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    // Modifier to prevent short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        if(msg.data.length < size.add(4)) revert();\r\n        _;\r\n    }\r\n    constructor(string tokenName, string tokenSymbol, uint8 decimalUnits, uint256 decimalMultiplier) public {\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        decimals = decimalUnits;\r\n        multiplier = decimalMultiplier;\r\n    }\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balance[_owner];\r\n    }\r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balance[msg.sender]);\r\n        if ((balance[msg.sender] >= _value)\r\n            && (balance[_to].add(_value) > balance[_to])\r\n        ) {\r\n            balance[msg.sender] = balance[msg.sender].sub(_value);\r\n            balance[_to] = balance[_to].add(_value);\r\n            emit Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balance[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        if ((balance[_from] >= _value) && (allowed[_from][msg.sender] >= _value) && (balance[_to].add(_value) > balance[_to])) {\r\n            balance[_to] = balance[_to].add(_value);\r\n            balance[_from] = balance[_from].sub(_value);\r\n            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n            emit Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\ncontract HashRushICO is Owned, HashRush {\r\n    // Applies SafeMath library to uint256 operations\r\n    using SafeMath for uint256;\r\n    // Public Variables\r\n    address public multiSigWallet;\r\n    uint256 public amountRaised;\r\n    uint256 public startTime;\r\n    uint256 public stopTime;\r\n    uint256 public fixedTotalSupply;\r\n    uint256 public price;\r\n    uint256 public minimumInvestment;\r\n    uint256 public crowdsaleTarget;\r\n    // Variables\r\n    bool crowdsaleClosed = true;\r\n    string tokenName = \"HashRush\";\r\n    string tokenSymbol = \"RUSH\";\r\n    uint256 multiplier = 100000000;\r\n    uint8 decimalUnits = 8;\r\n    // Initializes the token\r\n    constructor()\r\n        HashRush(tokenName, tokenSymbol, decimalUnits, multiplier) public {\r\n            multiSigWallet = msg.sender;\r\n            fixedTotalSupply = 70000000;\r\n            fixedTotalSupply = fixedTotalSupply.mul(multiplier);\r\n    }\r\n    /**\r\n     * @dev Fallback function creates tokens and sends to investor when crowdsale is open\r\n     */\r\n    function () public payable {\r\n        require(!crowdsaleClosed\r\n            && (now < stopTime)\r\n            && (msg.value >= minimumInvestment)\r\n            && (totalSupply_.add(msg.value.mul(price).mul(multiplier).div(1 ether)) <= fixedTotalSupply)\r\n            && (amountRaised.add(msg.value.div(1 ether)) <= crowdsaleTarget)\r\n        );\r\n        address recipient = msg.sender;\r\n        amountRaised = amountRaised.add(msg.value.div(1 ether));\r\n        uint256 tokens = msg.value.mul(price).mul(multiplier).div(1 ether);\r\n        totalSupply_ = totalSupply_.add(tokens);\r\n    }\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param target The address that will receive the minted tokens.\r\n     * @param amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mintToken(address target, uint256 amount) onlyOwner public returns (bool) {\r\n        require(amount > 0);\r\n        require(totalSupply_.add(amount) <= fixedTotalSupply);\r\n        uint256 addTokens = amount;\r\n        balance[target] = balance[target].add(addTokens);\r\n        totalSupply_ = totalSupply_.add(addTokens);\r\n        emit Transfer(0, target, addTokens);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Function to set token price\r\n     * @param newPriceperEther New price.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function setPrice(uint256 newPriceperEther) onlyOwner public returns (uint256) {\r\n        require(newPriceperEther > 0);\r\n        price = newPriceperEther;\r\n        return price;\r\n    }\r\n    /**\r\n     * @dev Function to set the multisig wallet for a crowdsale\r\n     * @param wallet Wallet address.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function setMultiSigWallet(address wallet) onlyOwner public returns (bool) {\r\n        multiSigWallet = wallet;\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Function to set the minimum investment to participate in crowdsale\r\n     * @param minimum minimum amount in wei.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function setMinimumInvestment(uint256 minimum) onlyOwner public returns (bool) {\r\n        minimumInvestment = minimum;\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Function to set the crowdsale target\r\n     * @param target Target amount in ETH.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function setCrowdsaleTarget(uint256 target) onlyOwner public returns (bool) {\r\n        crowdsaleTarget = target;\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Function to start the crowdsale specifying startTime and stopTime\r\n     * @param saleStart Sale start timestamp.\r\n     * @param saleStop Sale stop timestamo.\r\n     * @param salePrice Token price per ether.\r\n     * @param setBeneficiary Beneficiary address.\r\n     * @param minInvestment Minimum investment to participate in crowdsale (wei).\r\n     * @param saleTarget Crowdsale target in ETH\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function startSale(uint256 saleStart, uint256 saleStop, uint256 salePrice, address setBeneficiary, uint256 minInvestment, uint256 saleTarget) onlyOwner public returns (bool) {\r\n        require(saleStop > now);\r\n        startTime = saleStart;\r\n        stopTime = saleStop;\r\n        amountRaised = 0;\r\n        crowdsaleClosed = false;\r\n        setPrice(salePrice);\r\n        setMultiSigWallet(setBeneficiary);\r\n        setMinimumInvestment(minInvestment);\r\n        setCrowdsaleTarget(saleTarget);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Function that allows owner to stop the crowdsale immediately\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function stopSale() onlyOwner public returns (bool) {\r\n        stopTime = now;\r\n        crowdsaleClosed = true;\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"stopTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"saleStart\",\"type\":\"uint256\"},{\"name\":\"saleStop\",\"type\":\"uint256\"},{\"name\":\"salePrice\",\"type\":\"uint256\"},{\"name\":\"setBeneficiary\",\"type\":\"address\"},{\"name\":\"minInvestment\",\"type\":\"uint256\"},{\"name\":\"saleTarget\",\"type\":\"uint256\"}],\"name\":\"startSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"setMinimumInvestment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiSigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newPriceperEther\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fixedTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopSale\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMultiSigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"setCrowdsaleTarget\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"HashRushICO","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://52779a033b695d1935dcf7ed760e743ab53ea27493641efe6da2e447c26bc59f"}]}