{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract RHEM {\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n}\r\n\r\ncontract Owner {\r\n    address public owner;\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner`\r\n     * of the contract to the sender account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the current owner\r\n     */\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Locker is Owner {\r\n    RHEM rhem;\r\n    mapping(address => uint256) lockedBalances;\r\n    bool _isLocked = true;\r\n    uint256 totalLockedBalance;\r\n\r\n    event Add(address to, uint256 value);\r\n    event Unlock();\r\n\r\n    constructor(address _t) public {\r\n        rhem = RHEM(_t);\r\n    }\r\n\r\n    /**\r\n     * @dev get Rhem Balance of Contract Address\r\n     */\r\n    function getContractRhemBalance() public view returns (uint256 balance) {\r\n        return rhem.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Add Address with Lock Rhem Token\r\n     */\r\n    function addLockAccount(address _addr, uint256 _value) public onlyOwner returns (bool success) {\r\n        require(_addr != address(0));\r\n        require(_value > 0);\r\n\r\n        uint256 amount = lockedBalances[_addr];\r\n        amount += _value;\r\n        require(amount > 0);\r\n\r\n        uint256 currentBalance = getContractRhemBalance();\r\n        totalLockedBalance += _value;\r\n        require(totalLockedBalance > 0);\r\n        require(totalLockedBalance <= currentBalance);\r\n\r\n        lockedBalances[_addr] = amount;\r\n        emit Add(_addr, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Unlock\r\n     */\r\n    function unlock() public onlyOwner {\r\n        _isLocked = false;\r\n\r\n        emit Unlock();\r\n    }\r\n\r\n    /**\r\n     * @dev Check if locked\r\n     */\r\n    function isLocked() public view returns (bool) {\r\n        return _isLocked;\r\n    }\r\n\r\n    /**\r\n     * @dev Get Lock Balance of Specific address\r\n     */\r\n    function lockedBalanceOf(address _addr) public view returns (uint256 lockedBalance) {\r\n        return lockedBalances[_addr];\r\n    }\r\n\r\n    /**\r\n     * @dev Release Lock Rhem Token of the sender\r\n     */\r\n    function release() public returns(bool success) {\r\n        require(!_isLocked);\r\n        require(lockedBalances[msg.sender] > 0);\r\n\r\n        rhem.transfer(msg.sender, lockedBalances[msg.sender]);\r\n        delete lockedBalances[msg.sender];\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addLockAccount\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"lockedBalanceOf\",\"outputs\":[{\"name\":\"lockedBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractRhemBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_t\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlock\",\"type\":\"event\"}]","ContractName":"Locker","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b1213d99661577b51a051ee5f6e371c86148cb46e9160bbbd4e4e8528112e9be"}]}