{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.4.25;\r\n/**\r\n * 外部调用外部代币。\r\n */\r\n interface token {\r\n    function transfer(address receiver, uint amount) external;\r\n}\r\n\r\n/**\r\n * 众筹合约\r\n */\r\ncontract Crowdsale {\r\n    address public beneficiary = msg.sender; //受益人地址，测试时为合约创建者\r\n    uint public fundingGoal;  //众筹目标，单位是ether\r\n    uint public amountRaised; //已筹集金额数量， 单位是ether\r\n    uint public deadline; //截止时间\r\n    uint public price;  //代币价格\r\n    token public tokenReward;   // 要卖的token\r\n    bool public fundingGoalReached = false;  //达成众筹目标\r\n    bool public crowdsaleClosed = false; //众筹关闭\r\n\r\n\r\n    mapping(address => uint256) public balance; //保存众筹地址及对应的以太币数量\r\n\r\n    // 受益人将众筹金额转走的通知\r\n    event GoalReached(address _beneficiary, uint _amountRaised);\r\n\r\n    // 用来记录众筹资金变动的通知，_isContribution表示是否是捐赠，因为有可能是捐赠者退出或发起者转移众筹资金\r\n    event FundTransfer(address _backer, uint _amount, bool _isContribution);\r\n\r\n    /**\r\n     * 初始化构造函数\r\n     *\r\n     * @param fundingGoalInEthers 众筹以太币总量\r\n     * @param durationInMinutes 众筹截止,单位是分钟\r\n     */\r\n    constructor(\r\n        uint fundingGoalInEthers,\r\n        uint durationInMinutes,\r\n        uint TokenCostOfEachether,\r\n        address addressOfTokenUsedAsReward\r\n    )  public {\r\n        fundingGoal = fundingGoalInEthers * 1 ether;\r\n        deadline = now + durationInMinutes * 1 minutes;\r\n        price = TokenCostOfEachether ; //1个以太币可以买几个代币\r\n        tokenReward = token(addressOfTokenUsedAsReward); \r\n    }\r\n\r\n\r\n    /**\r\n     * 默认函数\r\n     *\r\n     * 默认函数，可以向合约直接打款\r\n     */\r\n    function () payable public {\r\n\r\n        //判断是否关闭众筹\r\n        require(!crowdsaleClosed);\r\n        uint amount = msg.value;\r\n\r\n        //捐款人的金额累加\r\n        balance[msg.sender] += amount;\r\n\r\n        //捐款总额累加\r\n        amountRaised += amount;\r\n\r\n        //转帐操作，转多少代币给捐款人\r\n         tokenReward.transfer(msg.sender, amount * price);\r\n         emit FundTransfer(msg.sender, amount, true);\r\n    }\r\n\r\n    /**\r\n     * 判断是否已经过了众筹截止限期\r\n     */\r\n    modifier afterDeadline() { if (now >= deadline) _; }\r\n\r\n    /**\r\n     * 检测众筹目标是否已经达到\r\n     */\r\n    function checkGoalReached() afterDeadline public {\r\n        if (amountRaised >= fundingGoal){\r\n            //达成众筹目标\r\n            fundingGoalReached = true;\r\n          emit  GoalReached(beneficiary, amountRaised);\r\n        }\r\n\r\n        //关闭众筹\r\n        crowdsaleClosed = true;\r\n    }\r\n    function backtoken(uint backnum) public{\r\n        uint amount = backnum * 10 ** 18;\r\n        tokenReward.transfer(beneficiary, amount);\r\n       emit FundTransfer(beneficiary, amount, true);\r\n    }\r\n    \r\n    function backeth() public{\r\n        beneficiary.transfer(amountRaised);\r\n        emit FundTransfer(beneficiary, amountRaised, true);\r\n    }\r\n\r\n    /**\r\n     * 收回资金\r\n     *\r\n     * 检查是否达到了目标或时间限制，如果有，并且达到了资金目标，\r\n     * 将全部金额发送给受益人。如果没有达到目标，每个贡献者都可以退出\r\n     * 他们贡献的金额\r\n     * 注：这里代码应该是限制了众筹时间结束且众筹目标没有达成的情况下才允许退出。如果去掉限制条件afterDeadline，应该是可以允许众筹时间还未到且众筹目标没有达成的情况下退出\r\n     */\r\n    function safeWithdrawal() afterDeadline public {\r\n\r\n        //如果没有达成众筹目标\r\n        if (!fundingGoalReached) {\r\n            //获取合约调用者已捐款余额\r\n            uint amount = balance[msg.sender];\r\n\r\n            if (amount > 0) {\r\n                //返回合约发起者所有余额\r\n                beneficiary.transfer(amountRaised);\r\n                emit  FundTransfer(beneficiary, amount, false);\r\n                balance[msg.sender] = 0;\r\n            }\r\n        }\r\n\r\n        //如果达成众筹目标，并且合约调用者是受益人\r\n        if (fundingGoalReached && beneficiary == msg.sender) {\r\n\r\n            //将所有捐款从合约中给受益人\r\n            beneficiary.transfer(amountRaised);\r\n\r\n          emit  FundTransfer(beneficiary, amount, false);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"backeth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"safeWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"backnum\",\"type\":\"uint256\"}],\"name\":\"backtoken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"fundingGoalInEthers\",\"type\":\"uint256\"},{\"name\":\"durationInMinutes\",\"type\":\"uint256\"},{\"name\":\"TokenCostOfEachether\",\"type\":\"uint256\"},{\"name\":\"addressOfTokenUsedAsReward\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_backer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_isContribution\",\"type\":\"bool\"}],\"name\":\"FundTransfer\",\"type\":\"event\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000012cc8000000000000000000000000770f030fdbf63ebf1c939de8bcff8943c2c2d454","Library":"","SwarmSource":"bzzr://95038ffa255c65e56811918ed60f050905d9847690e1c565b776250efe57ceab"}]}