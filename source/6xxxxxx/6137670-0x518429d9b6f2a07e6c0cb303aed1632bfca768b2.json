{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() onlyPendingOwner public {\r\n    OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721 interface\r\n * @dev see https://github.com/ethereum/eips/issues/721\r\n */\r\ncontract ERC721 {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function takeOwnership(uint256 _tokenId) public;\r\n}\r\n\r\n\r\n/**\r\n * @title ERC721Token\r\n * Generic implementation for the required functionality of the ERC721 standard\r\n */\r\ncontract ERC721Token is ERC721 {\r\n  using SafeMath for uint256;\r\n\r\n  // Total amount of tokens\r\n  uint256 private totalTokens;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) private tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) private tokenApprovals;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) private ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) private ownedTokensIndex;\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is owner of the given token\r\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n  */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalTokens;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return ownedTokens[_owner].length;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the list of tokens owned by a given address\r\n  * @param _owner address to query the tokens of\r\n  * @return uint256[] representing the list of tokens owned by the passed address\r\n  */\r\n  function tokensOf(address _owner) public view returns (uint256[]) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param _tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address to take ownership of a given token ID\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved to take ownership of the given token ID\r\n   */\r\n  function approvedFor(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Approves another address to claim for the ownership of the given token ID\r\n  * @param _to address to be approved for the given token ID\r\n  * @param _tokenId uint256 ID of the token to be approved\r\n  */\r\n  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    if (approvedFor(_tokenId) != 0 || _to != 0) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Claims the ownership of a given token ID\r\n  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\r\n  */\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    require(isApprovedFor(msg.sender, _tokenId));\r\n    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Mint token function\r\n  * @param _to The address that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addToken(_to, _tokenId);\r\n    Transfer(0x0, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Burns a specific token\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\r\n    if (approvedFor(_tokenId) != 0) {\r\n      clearApproval(msg.sender, _tokenId);\r\n    }\r\n    removeToken(msg.sender, _tokenId);\r\n    Transfer(msg.sender, 0x0, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether the msg.sender is approved for the given token ID or not\r\n   * This function is not private so it can be extended in further implementations like the operatable ERC721\r\n   * @param _owner address of the owner to query the approval of\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return bool whether the msg.sender is approved for the given token ID or not\r\n   */\r\n  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\r\n    return approvedFor(_tokenId) == _owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\r\n  * @param _from address which you want to send tokens from\r\n  * @param _to address which you want to transfer the token to\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    require(_to != ownerOf(_tokenId));\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeToken(_from, _tokenId);\r\n    addToken(_to, _tokenId);\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApproval(address _owner, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    tokenApprovals[_tokenId] = 0;\r\n    Approval(_owner, 0, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addToken(address _to, uint256 _tokenId) private {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    uint256 length = balanceOf(_to);\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n    totalTokens = totalTokens.add(1);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeToken(address _from, uint256 _tokenId) private {\r\n    require(ownerOf(_tokenId) == _from);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = balanceOf(_from).sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    tokenOwner[_tokenId] = 0;\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n    totalTokens = totalTokens.sub(1);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title AccessDeposit\r\n * @dev Adds grant/revoke functions to the contract.\r\n */\r\ncontract AccessDeposit is Claimable {\r\n\r\n  // Access for adding deposit.\r\n  mapping(address => bool) private depositAccess;\r\n\r\n  // Modifier for accessibility to add deposit.\r\n  modifier onlyAccessDeposit {\r\n    require(msg.sender == owner || depositAccess[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  // @dev Grant acess to deposit heroes.\r\n  function grantAccessDeposit(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    depositAccess[_address] = true;\r\n  }\r\n\r\n  // @dev Revoke acess to deposit heroes.\r\n  function revokeAccessDeposit(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    depositAccess[_address] = false;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title AccessDeploy\r\n * @dev Adds grant/revoke functions to the contract.\r\n */\r\ncontract AccessDeploy is Claimable {\r\n\r\n  // Access for deploying heroes.\r\n  mapping(address => bool) private deployAccess;\r\n\r\n  // Modifier for accessibility to deploy a hero on a location.\r\n  modifier onlyAccessDeploy {\r\n    require(msg.sender == owner || deployAccess[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  // @dev Grant acess to deploy heroes.\r\n  function grantAccessDeploy(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    deployAccess[_address] = true;\r\n  }\r\n\r\n  // @dev Revoke acess to deploy heroes.\r\n  function revokeAccessDeploy(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    deployAccess[_address] = false;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title AccessMint\r\n * @dev Adds grant/revoke functions to the contract.\r\n */\r\ncontract AccessMint is Claimable {\r\n\r\n  // Access for minting new tokens.\r\n  mapping(address => bool) private mintAccess;\r\n\r\n  // Modifier for accessibility to define new hero types.\r\n  modifier onlyAccessMint {\r\n    require(msg.sender == owner || mintAccess[msg.sender] == true);\r\n    _;\r\n  }\r\n\r\n  // @dev Grant acess to mint heroes.\r\n  function grantAccessMint(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    mintAccess[_address] = true;\r\n  }\r\n\r\n  // @dev Revoke acess to mint heroes.\r\n  function revokeAccessMint(address _address)\r\n    onlyOwner\r\n    public\r\n  {\r\n    mintAccess[_address] = false;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title Gold\r\n * @dev ERC20 Token that can be minted.\r\n */\r\ncontract Gold is StandardToken, Claimable, AccessMint {\r\n\r\n  string public constant name = \"Gold\";\r\n  string public constant symbol = \"G\";\r\n  uint8 public constant decimals = 18;\r\n\r\n  // Event that is fired when minted.\r\n  event Mint(\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  // @dev Mint tokens with _amount to the address.\r\n  function mint(address _to, uint256 _amount) \r\n    onlyAccessMint\r\n    public \r\n    returns (bool) \r\n  {\r\n    totalSupply_ = totalSupply_.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title CryptoSagaHero\r\n * @dev The token contract for the hero.\r\n *  Also a superset of the ERC721 standard that allows for the minting\r\n *  of the non-fungible tokens.\r\n */\r\ncontract CryptoSagaHero is ERC721Token, Claimable, Pausable, AccessMint, AccessDeploy, AccessDeposit {\r\n\r\n  string public constant name = \"CryptoSaga Hero\";\r\n  string public constant symbol = \"HERO\";\r\n  \r\n  struct HeroClass {\r\n    // ex) Soldier, Knight, Fighter...\r\n    string className;\r\n    // 0: Common, 1: Uncommon, 2: Rare, 3: Heroic, 4: Legendary.\r\n    uint8 classRank;\r\n    // 0: Human, 1: Celestial, 2: Demon, 3: Elf, 4: Dark Elf, 5: Yogoe, 6: Furry, 7: Dragonborn, 8: Undead, 9: Goblin, 10: Troll, 11: Slime, and more to come.\r\n    uint8 classRace;\r\n    // How old is this hero class? \r\n    uint32 classAge;\r\n    // 0: Fighter, 1: Rogue, 2: Mage.\r\n    uint8 classType;\r\n\r\n    // Possible max level of this class.\r\n    uint32 maxLevel; \r\n    // 0: Water, 1: Fire, 2: Nature, 3: Light, 4: Darkness.\r\n    uint8 aura; \r\n\r\n    // Base stats of this hero type. \r\n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\r\n    uint32[5] baseStats;\r\n    // Minimum IVs for stats. \r\n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\r\n    uint32[5] minIVForStats;\r\n    // Maximum IVs for stats.\r\n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\r\n    uint32[5] maxIVForStats;\r\n    \r\n    // Number of currently instanced heroes.\r\n    uint32 currentNumberOfInstancedHeroes;\r\n  }\r\n    \r\n  struct HeroInstance {\r\n    // What is this hero's type? ex) John, Sally, Mark...\r\n    uint32 heroClassId;\r\n    \r\n    // Individual hero's name.\r\n    string heroName;\r\n    \r\n    // Current level of this hero.\r\n    uint32 currentLevel;\r\n    // Current exp of this hero.\r\n    uint32 currentExp;\r\n\r\n    // Where has this hero been deployed? (0: Never depolyed ever.) ex) Dungeon Floor #1, Arena #5...\r\n    uint32 lastLocationId;\r\n    // When a hero is deployed, it takes time for the hero to return to the base. This is in Unix epoch.\r\n    uint256 availableAt;\r\n\r\n    // Current stats of this hero. \r\n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\r\n    uint32[5] currentStats;\r\n    // The individual value for this hero's stats. \r\n    // This will affect the current stats of heroes.\r\n    // 0: ATK\t1: DEF 2: AGL\t3: LUK 4: HP.\r\n    uint32[5] ivForStats;\r\n  }\r\n\r\n  // Required exp for level up will increase when heroes level up.\r\n  // This defines how the value will increase.\r\n  uint32 public requiredExpIncreaseFactor = 100;\r\n\r\n  // Required Gold for level up will increase when heroes level up.\r\n  // This defines how the value will increase.\r\n  uint256 public requiredGoldIncreaseFactor = 1000000000000000000;\r\n\r\n  // Existing hero classes.\r\n  mapping(uint32 => HeroClass) public heroClasses;\r\n  // The number of hero classes ever defined.\r\n  uint32 public numberOfHeroClasses;\r\n\r\n  // Existing hero instances.\r\n  // The key is _tokenId.\r\n  mapping(uint256 => HeroInstance) public tokenIdToHeroInstance;\r\n  // The number of tokens ever minted. This works as the serial number.\r\n  uint256 public numberOfTokenIds;\r\n\r\n  // Gold contract.\r\n  Gold public goldContract;\r\n\r\n  // Deposit of players (in Gold).\r\n  mapping(address => uint256) public addressToGoldDeposit;\r\n\r\n  // Random seed.\r\n  uint32 private seed = 0;\r\n\r\n  // Event that is fired when a hero type defined.\r\n  event DefineType(\r\n    address indexed _by,\r\n    uint32 indexed _typeId,\r\n    string _className\r\n  );\r\n\r\n  // Event that is fired when a hero is upgraded.\r\n  event LevelUp(\r\n    address indexed _by,\r\n    uint256 indexed _tokenId,\r\n    uint32 _newLevel\r\n  );\r\n\r\n  // Event that is fired when a hero is deployed.\r\n  event Deploy(\r\n    address indexed _by,\r\n    uint256 indexed _tokenId,\r\n    uint32 _locationId,\r\n    uint256 _duration\r\n  );\r\n\r\n  // @dev Get the class's entire infomation.\r\n  function getClassInfo(uint32 _classId)\r\n    external view\r\n    returns (string className, uint8 classRank, uint8 classRace, uint32 classAge, uint8 classType, uint32 maxLevel, uint8 aura, uint32[5] baseStats, uint32[5] minIVs, uint32[5] maxIVs) \r\n  {\r\n    var _cl = heroClasses[_classId];\r\n    return (_cl.className, _cl.classRank, _cl.classRace, _cl.classAge, _cl.classType, _cl.maxLevel, _cl.aura, _cl.baseStats, _cl.minIVForStats, _cl.maxIVForStats);\r\n  }\r\n\r\n  // @dev Get the class's name.\r\n  function getClassName(uint32 _classId)\r\n    external view\r\n    returns (string)\r\n  {\r\n    return heroClasses[_classId].className;\r\n  }\r\n\r\n  // @dev Get the class's rank.\r\n  function getClassRank(uint32 _classId)\r\n    external view\r\n    returns (uint8)\r\n  {\r\n    return heroClasses[_classId].classRank;\r\n  }\r\n\r\n  // @dev Get the heroes ever minted for the class.\r\n  function getClassMintCount(uint32 _classId)\r\n    external view\r\n    returns (uint32)\r\n  {\r\n    return heroClasses[_classId].currentNumberOfInstancedHeroes;\r\n  }\r\n\r\n  // @dev Get the hero's entire infomation.\r\n  function getHeroInfo(uint256 _tokenId)\r\n    external view\r\n    returns (uint32 classId, string heroName, uint32 currentLevel, uint32 currentExp, uint32 lastLocationId, uint256 availableAt, uint32[5] currentStats, uint32[5] ivs, uint32 bp)\r\n  {\r\n    HeroInstance memory _h = tokenIdToHeroInstance[_tokenId];\r\n    var _bp = _h.currentStats[0] + _h.currentStats[1] + _h.currentStats[2] + _h.currentStats[3] + _h.currentStats[4];\r\n    return (_h.heroClassId, _h.heroName, _h.currentLevel, _h.currentExp, _h.lastLocationId, _h.availableAt, _h.currentStats, _h.ivForStats, _bp);\r\n  }\r\n\r\n  // @dev Get the hero's class id.\r\n  function getHeroClassId(uint256 _tokenId)\r\n    external view\r\n    returns (uint32)\r\n  {\r\n    return tokenIdToHeroInstance[_tokenId].heroClassId;\r\n  }\r\n\r\n  // @dev Get the hero's name.\r\n  function getHeroName(uint256 _tokenId)\r\n    external view\r\n    returns (string)\r\n  {\r\n    return tokenIdToHeroInstance[_tokenId].heroName;\r\n  }\r\n\r\n  // @dev Get the hero's level.\r\n  function getHeroLevel(uint256 _tokenId)\r\n    external view\r\n    returns (uint32)\r\n  {\r\n    return tokenIdToHeroInstance[_tokenId].currentLevel;\r\n  }\r\n  \r\n  // @dev Get the hero's location.\r\n  function getHeroLocation(uint256 _tokenId)\r\n    external view\r\n    returns (uint32)\r\n  {\r\n    return tokenIdToHeroInstance[_tokenId].lastLocationId;\r\n  }\r\n\r\n  // @dev Get the time when the hero become available.\r\n  function getHeroAvailableAt(uint256 _tokenId)\r\n    external view\r\n    returns (uint256)\r\n  {\r\n    return tokenIdToHeroInstance[_tokenId].availableAt;\r\n  }\r\n\r\n  // @dev Get the hero's BP.\r\n  function getHeroBP(uint256 _tokenId)\r\n    public view\r\n    returns (uint32)\r\n  {\r\n    var _tmp = tokenIdToHeroInstance[_tokenId].currentStats;\r\n    return (_tmp[0] + _tmp[1] + _tmp[2] + _tmp[3] + _tmp[4]);\r\n  }\r\n\r\n  // @dev Get the hero's required gold for level up.\r\n  function getHeroRequiredGoldForLevelUp(uint256 _tokenId)\r\n    public view\r\n    returns (uint256)\r\n  {\r\n    return (uint256(2) ** (tokenIdToHeroInstance[_tokenId].currentLevel / 10)) * requiredGoldIncreaseFactor;\r\n  }\r\n\r\n  // @dev Get the hero's required exp for level up.\r\n  function getHeroRequiredExpForLevelUp(uint256 _tokenId)\r\n    public view\r\n    returns (uint32)\r\n  {\r\n    return ((tokenIdToHeroInstance[_tokenId].currentLevel + 2) * requiredExpIncreaseFactor);\r\n  }\r\n\r\n  // @dev Get the deposit of gold of the player.\r\n  function getGoldDepositOfAddress(address _address)\r\n    external view\r\n    returns (uint256)\r\n  {\r\n    return addressToGoldDeposit[_address];\r\n  }\r\n\r\n  // @dev Get the token id of the player's #th token.\r\n  function getTokenIdOfAddressAndIndex(address _address, uint256 _index)\r\n    external view\r\n    returns (uint256)\r\n  {\r\n    return tokensOf(_address)[_index];\r\n  }\r\n\r\n  // @dev Get the total BP of the player.\r\n  function getTotalBPOfAddress(address _address)\r\n    external view\r\n    returns (uint32)\r\n  {\r\n    var _tokens = tokensOf(_address);\r\n    uint32 _totalBP = 0;\r\n    for (uint256 i = 0; i < _tokens.length; i ++) {\r\n      _totalBP += getHeroBP(_tokens[i]);\r\n    }\r\n    return _totalBP;\r\n  }\r\n\r\n  // @dev Set the hero's name.\r\n  function setHeroName(uint256 _tokenId, string _name)\r\n    onlyOwnerOf(_tokenId)\r\n    public\r\n  {\r\n    tokenIdToHeroInstance[_tokenId].heroName = _name;\r\n  }\r\n\r\n  // @dev Set the address of the contract that represents ERC20 Gold.\r\n  function setGoldContract(address _contractAddress)\r\n    onlyOwner\r\n    public\r\n  {\r\n    goldContract = Gold(_contractAddress);\r\n  }\r\n\r\n  // @dev Set the required golds to level up a hero.\r\n  function setRequiredExpIncreaseFactor(uint32 _value)\r\n    onlyOwner\r\n    public\r\n  {\r\n    requiredExpIncreaseFactor = _value;\r\n  }\r\n\r\n  // @dev Set the required golds to level up a hero.\r\n  function setRequiredGoldIncreaseFactor(uint256 _value)\r\n    onlyOwner\r\n    public\r\n  {\r\n    requiredGoldIncreaseFactor = _value;\r\n  }\r\n\r\n  // @dev Contructor.\r\n  function CryptoSagaHero(address _goldAddress)\r\n    public\r\n  {\r\n    require(_goldAddress != address(0));\r\n\r\n    // Assign Gold contract.\r\n    setGoldContract(_goldAddress);\r\n\r\n    // Initial heroes.\r\n    // Name, Rank, Race, Age, Type, Max Level, Aura, Stats.\r\n    defineType(\"Archangel\", 4, 1, 13540, 0, 99, 3, [uint32(74), 75, 57, 99, 95], [uint32(8), 6, 8, 5, 5], [uint32(8), 10, 10, 6, 6]);\r\n    defineType(\"Shadowalker\", 3, 4, 134, 1, 75, 4, [uint32(45), 35, 60, 80, 40], [uint32(3), 2, 10, 4, 5], [uint32(5), 5, 10, 7, 5]);\r\n    defineType(\"Pyromancer\", 2, 0, 14, 2, 50, 1, [uint32(50), 28, 17, 40, 35], [uint32(5), 3, 2, 3, 3], [uint32(8), 4, 3, 4, 5]);\r\n    defineType(\"Magician\", 1, 3, 224, 2, 30, 0, [uint32(35), 15, 25, 25, 30], [uint32(3), 1, 2, 2, 2], [uint32(5), 2, 3, 3, 3]);\r\n    defineType(\"Farmer\", 0, 0, 59, 0, 15, 2, [uint32(10), 22, 8, 15, 25], [uint32(1), 2, 1, 1, 2], [uint32(1), 3, 1, 2, 3]);\r\n  }\r\n\r\n  // @dev Define a new hero type (class).\r\n  function defineType(string _className, uint8 _classRank, uint8 _classRace, uint32 _classAge, uint8 _classType, uint32 _maxLevel, uint8 _aura, uint32[5] _baseStats, uint32[5] _minIVForStats, uint32[5] _maxIVForStats)\r\n    onlyOwner\r\n    public\r\n  {\r\n    require(_classRank < 5);\r\n    require(_classType < 3);\r\n    require(_aura < 5);\r\n    require(_minIVForStats[0] <= _maxIVForStats[0] && _minIVForStats[1] <= _maxIVForStats[1] && _minIVForStats[2] <= _maxIVForStats[2] && _minIVForStats[3] <= _maxIVForStats[3] && _minIVForStats[4] <= _maxIVForStats[4]);\r\n\r\n    HeroClass memory _heroType = HeroClass({\r\n      className: _className,\r\n      classRank: _classRank,\r\n      classRace: _classRace,\r\n      classAge: _classAge,\r\n      classType: _classType,\r\n      maxLevel: _maxLevel,\r\n      aura: _aura,\r\n      baseStats: _baseStats,\r\n      minIVForStats: _minIVForStats,\r\n      maxIVForStats: _maxIVForStats,\r\n      currentNumberOfInstancedHeroes: 0\r\n    });\r\n\r\n    // Save the hero class.\r\n    heroClasses[numberOfHeroClasses] = _heroType;\r\n\r\n    // Fire event.\r\n    DefineType(msg.sender, numberOfHeroClasses, _heroType.className);\r\n\r\n    // Increment number of hero classes.\r\n    numberOfHeroClasses ++;\r\n\r\n  }\r\n\r\n  // @dev Mint a new hero, with _heroClassId.\r\n  function mint(address _owner, uint32 _heroClassId)\r\n    onlyAccessMint\r\n    public\r\n    returns (uint256)\r\n  {\r\n    require(_owner != address(0));\r\n    require(_heroClassId < numberOfHeroClasses);\r\n\r\n    // The information of the hero's class.\r\n    var _heroClassInfo = heroClasses[_heroClassId];\r\n\r\n    // Mint ERC721 token.\r\n    _mint(_owner, numberOfTokenIds);\r\n\r\n    // Build random IVs for this hero instance.\r\n    uint32[5] memory _ivForStats;\r\n    uint32[5] memory _initialStats;\r\n    for (uint8 i = 0; i < 5; i++) {\r\n      _ivForStats[i] = (random(_heroClassInfo.maxIVForStats[i] + 1, _heroClassInfo.minIVForStats[i]));\r\n      _initialStats[i] = _heroClassInfo.baseStats[i] + _ivForStats[i];\r\n    }\r\n\r\n    // Temporary hero instance.\r\n    HeroInstance memory _heroInstance = HeroInstance({\r\n      heroClassId: _heroClassId,\r\n      heroName: \"\",\r\n      currentLevel: 1,\r\n      currentExp: 0,\r\n      lastLocationId: 0,\r\n      availableAt: now,\r\n      currentStats: _initialStats,\r\n      ivForStats: _ivForStats\r\n    });\r\n\r\n    // Save the hero instance.\r\n    tokenIdToHeroInstance[numberOfTokenIds] = _heroInstance;\r\n\r\n    // Increment number of token ids.\r\n    // This will only increment when new token is minted, and will never be decemented when the token is burned.\r\n    numberOfTokenIds ++;\r\n\r\n     // Increment instanced number of heroes.\r\n    _heroClassInfo.currentNumberOfInstancedHeroes ++;\r\n\r\n    return numberOfTokenIds - 1;\r\n  }\r\n\r\n  // @dev Set where the heroes are deployed, and when they will return.\r\n  //  This is intended to be called by Dungeon, Arena, Guild contracts.\r\n  function deploy(uint256 _tokenId, uint32 _locationId, uint256 _duration)\r\n    onlyAccessDeploy\r\n    public\r\n    returns (bool)\r\n  {\r\n    // The hero should be possessed by anybody.\r\n    require(ownerOf(_tokenId) != address(0));\r\n\r\n    var _heroInstance = tokenIdToHeroInstance[_tokenId];\r\n\r\n    // The character should be avaiable. \r\n    require(_heroInstance.availableAt <= now);\r\n\r\n    _heroInstance.lastLocationId = _locationId;\r\n    _heroInstance.availableAt = now + _duration;\r\n\r\n    // As the hero has been deployed to another place, fire event.\r\n    Deploy(msg.sender, _tokenId, _locationId, _duration);\r\n  }\r\n\r\n  // @dev Add exp.\r\n  //  This is intended to be called by Dungeon, Arena, Guild contracts.\r\n  function addExp(uint256 _tokenId, uint32 _exp)\r\n    onlyAccessDeploy\r\n    public\r\n    returns (bool)\r\n  {\r\n    // The hero should be possessed by anybody.\r\n    require(ownerOf(_tokenId) != address(0));\r\n\r\n    var _heroInstance = tokenIdToHeroInstance[_tokenId];\r\n\r\n    var _newExp = _heroInstance.currentExp + _exp;\r\n\r\n    // Sanity check to ensure we don't overflow.\r\n    require(_newExp == uint256(uint128(_newExp)));\r\n\r\n    _heroInstance.currentExp += _newExp;\r\n\r\n  }\r\n\r\n  // @dev Add deposit.\r\n  //  This is intended to be called by Dungeon, Arena, Guild contracts.\r\n  function addDeposit(address _to, uint256 _amount)\r\n    onlyAccessDeposit\r\n    public\r\n  {\r\n    // Increment deposit.\r\n    addressToGoldDeposit[_to] += _amount;\r\n  }\r\n\r\n  // @dev Level up the hero with _tokenId.\r\n  //  This function is called by the owner of the hero.\r\n  function levelUp(uint256 _tokenId)\r\n    onlyOwnerOf(_tokenId) whenNotPaused\r\n    public\r\n  {\r\n\r\n    // Hero instance.\r\n    var _heroInstance = tokenIdToHeroInstance[_tokenId];\r\n\r\n    // The character should be avaiable. (Should have already returned from the dungeons, arenas, etc.)\r\n    require(_heroInstance.availableAt <= now);\r\n\r\n    // The information of the hero's class.\r\n    var _heroClassInfo = heroClasses[_heroInstance.heroClassId];\r\n\r\n    // Hero shouldn't level up exceed its max level.\r\n    require(_heroInstance.currentLevel < _heroClassInfo.maxLevel);\r\n\r\n    // Required Exp.\r\n    var requiredExp = getHeroRequiredExpForLevelUp(_tokenId);\r\n\r\n    // Need to have enough exp.\r\n    require(_heroInstance.currentExp >= requiredExp);\r\n\r\n    // Required Gold.\r\n    var requiredGold = getHeroRequiredGoldForLevelUp(_tokenId);\r\n\r\n    // Owner of token.\r\n    var _ownerOfToken = ownerOf(_tokenId);\r\n\r\n    // Need to have enough Gold balance.\r\n    require(addressToGoldDeposit[_ownerOfToken] >= requiredGold);\r\n\r\n    // Increase Level.\r\n    _heroInstance.currentLevel += 1;\r\n\r\n    // Increase Stats.\r\n    for (uint8 i = 0; i < 5; i++) {\r\n      _heroInstance.currentStats[i] = _heroClassInfo.baseStats[i] + (_heroInstance.currentLevel - 1) * _heroInstance.ivForStats[i];\r\n    }\r\n    \r\n    // Deduct exp.\r\n    _heroInstance.currentExp -= requiredExp;\r\n\r\n    // Deduct gold.\r\n    addressToGoldDeposit[_ownerOfToken] -= requiredGold;\r\n\r\n    // Fire event.\r\n    LevelUp(msg.sender, _tokenId, _heroInstance.currentLevel);\r\n  }\r\n\r\n  // @dev Transfer deposit (with the allowance pattern.)\r\n  function transferDeposit(uint256 _amount)\r\n    whenNotPaused\r\n    public\r\n  {\r\n    require(goldContract.allowance(msg.sender, this) >= _amount);\r\n\r\n    // Send msg.sender's Gold to this contract.\r\n    if (goldContract.transferFrom(msg.sender, this, _amount)) {\r\n       // Increment deposit.\r\n      addressToGoldDeposit[msg.sender] += _amount;\r\n    }\r\n  }\r\n\r\n  // @dev Withdraw deposit.\r\n  function withdrawDeposit(uint256 _amount)\r\n    public\r\n  {\r\n    require(addressToGoldDeposit[msg.sender] >= _amount);\r\n\r\n    // Send deposit of Golds to msg.sender. (Rather minting...)\r\n    if (goldContract.transfer(msg.sender, _amount)) {\r\n      // Decrement deposit.\r\n      addressToGoldDeposit[msg.sender] -= _amount;\r\n    }\r\n  }\r\n\r\n  // @dev return a pseudo random number between lower and upper bounds\r\n  function random(uint32 _upper, uint32 _lower)\r\n    private\r\n    returns (uint32)\r\n  {\r\n    require(_upper > _lower);\r\n\r\n    seed = uint32(keccak256(keccak256(block.blockhash(block.number), seed), now));\r\n    return seed % (_upper - _lower) + _lower;\r\n  }\r\n\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract BitGuildToken {\r\n  // Public variables of the token\r\n  string public name = \"BitGuild PLAT\";\r\n  string public symbol = \"PLAT\";\r\n  uint8 public decimals = 18;\r\n  uint256 public totalSupply = 10000000000 * 10 ** uint256(decimals); // 10 billion tokens;\r\n\r\n  // This creates an array with all balances\r\n  mapping (address => uint256) public balanceOf;\r\n  mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n  // This generates a public event on the blockchain that will notify clients\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  // This notifies clients about the amount burnt\r\n  event Burn(address indexed from, uint256 value);\r\n\r\n  /**\r\n   * Constructor function\r\n   * Initializes contract with initial supply tokens to the creator of the contract\r\n   */\r\n  function BitGuildToken() public {\r\n    balanceOf[msg.sender] = totalSupply;\r\n  }\r\n\r\n  /**\r\n   * Internal transfer, only can be called by this contract\r\n   */\r\n  function _transfer(address _from, address _to, uint _value) internal {\r\n    // Prevent transfer to 0x0 address. Use burn() instead\r\n    require(_to != 0x0);\r\n    // Check if the sender has enough\r\n    require(balanceOf[_from] >= _value);\r\n    // Check for overflows\r\n    require(balanceOf[_to] + _value > balanceOf[_to]);\r\n    // Save this for an assertion in the future\r\n    uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n    // Subtract from the sender\r\n    balanceOf[_from] -= _value;\r\n    // Add the same to the recipient\r\n    balanceOf[_to] += _value;\r\n    Transfer(_from, _to, _value);\r\n    // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n    assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n  }\r\n\r\n  /**\r\n   * Transfer tokens\r\n   *\r\n   * Send `_value` tokens to `_to` from your account\r\n   *\r\n   * @param _to The address of the recipient\r\n   * @param _value the amount to send\r\n   */\r\n  function transfer(address _to, uint256 _value) public {\r\n    _transfer(msg.sender, _to, _value);\r\n  }\r\n\r\n  /**\r\n   * Transfer tokens from other address\r\n   *\r\n   * Send `_value` tokens to `_to` on behalf of `_from`\r\n   *\r\n   * @param _from The address of the sender\r\n   * @param _to The address of the recipient\r\n   * @param _value the amount to send\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n    require(_value <= allowance[_from][msg.sender]);  // Check allowance\r\n    allowance[_from][msg.sender] -= _value;\r\n    _transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Set allowance for other address\r\n   *\r\n   * Allows `_spender` to spend no more than `_value` tokens on your behalf\r\n   *\r\n   * @param _spender The address authorized to spend\r\n   * @param _value the max amount they can spend\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool success) {\r\n    allowance[msg.sender][_spender] = _value;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Set allowance for other address and notify\r\n   *\r\n   * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\r\n   *\r\n   * @param _spender The address authorized to spend\r\n   * @param _value the max amount they can spend\r\n   * @param _extraData some extra information to send to the approved contract\r\n   */\r\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n    tokenRecipient spender = tokenRecipient(_spender);\r\n    if (approve(_spender, _value)) {\r\n      spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy tokens\r\n   *\r\n   * Remove `_value` tokens from the system irreversibly\r\n   *\r\n   * @param _value the amount of money to burn\r\n   */\r\n  function burn(uint256 _value) public returns (bool success) {\r\n    require(balanceOf[msg.sender] >= _value);        // Check if the sender has enough\r\n    balanceOf[msg.sender] -= _value;                 // Subtract from the sender\r\n    totalSupply -= _value;                           // Updates totalSupply\r\n    Burn(msg.sender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Destroy tokens from other account\r\n   *\r\n   * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n   *\r\n   * @param _from the address of the sender\r\n   * @param _value the amount of money to burn\r\n   */\r\n  function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n    require(balanceOf[_from] >= _value);             // Check if the targeted balance is enough\r\n    require(_value <= allowance[_from][msg.sender]); // Check allowance\r\n    balanceOf[_from] -= _value;                      // Subtract from the targeted balance\r\n    allowance[_from][msg.sender] -= _value;          // Subtract from the sender's allowance\r\n    totalSupply -= _value;                           // Update totalSupply\r\n    Burn(_from, _value);\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\ncontract PLATPriceOracle {\r\n\r\n  mapping (address => bool) admins;\r\n\r\n  // How much PLAT you get for 1 ETH, multiplied by 10^18\r\n  uint256 public ETHPrice = 60000000000000000000000;\r\n\r\n  event PriceChanged(uint256 newPrice);\r\n\r\n  function PLATPriceOracle() public {\r\n    admins[msg.sender] = true;\r\n  }\r\n\r\n  function updatePrice(uint256 _newPrice) public {\r\n    require(_newPrice > 0);\r\n    require(admins[msg.sender] == true);\r\n    ETHPrice = _newPrice;\r\n    PriceChanged(_newPrice);\r\n  }\r\n\r\n  function setAdmin(address _newAdmin, bool _value) public {\r\n    require(admins[msg.sender] == true);\r\n    admins[_newAdmin] = _value;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title CryptoSagaSwapPLAT\r\n * @dev This directly summons hero. Accepts Bitguild's PLAT tokens.\r\n */\r\ncontract CryptoSagaSwapPLAT is Pausable{\r\n\r\n  // PLAT will be sent to this wallet.\r\n  address public wallet;\r\n\r\n  // The hero contract.\r\n  CryptoSagaHero public heroContract;\r\n\r\n  // Eth-Summon price.\r\n  uint256 public ethPrice = 20000000000000000; // 0.02 eth.\r\n\r\n  // To get PLAT-to-Eth price exchange rate.\r\n  PLATPriceOracle public platPriceOracleContract;\r\n  \r\n  // PLAT token contract\r\n  BitGuildToken public platContract;\r\n\r\n  // Blacklisted heroes.\r\n  // This is needed in order to protect players, in case there exists any hero with critical issues.\r\n  // We promise we will use this function carefully, and this won't be used for balancing the OP heroes.\r\n  mapping(uint32 => bool) public blackList;\r\n\r\n  // Random seed.\r\n  uint32 private seed = 0;\r\n\r\n  // @dev Set the price of summoning a hero with Eth.\r\n  function setEthPrice(uint256 _value)\r\n    onlyOwner\r\n    public\r\n  {\r\n    ethPrice = _value;\r\n  }\r\n\r\n  // @dev Set blacklist.\r\n  function setBlacklist(uint32 _classId, bool _value)\r\n    onlyOwner\r\n    public\r\n  {\r\n    blackList[_classId] = _value;\r\n  }\r\n\r\n  // @dev Contructor.\r\n  function CryptoSagaSwapPLAT(address _heroAddress, address _platAddress, address _platPriceOracleAddress, address _walletAddress)\r\n    public\r\n  {\r\n    require(_heroAddress != address(0));\r\n    require(_platAddress != address(0));\r\n    require(_platPriceOracleAddress != address(0));\r\n    require(_walletAddress != address(0));\r\n    \r\n    wallet = _walletAddress;\r\n\r\n    heroContract = CryptoSagaHero(_heroAddress);\r\n    platContract = BitGuildToken(_platAddress);\r\n    platPriceOracleContract = PLATPriceOracle(_platPriceOracleAddress);\r\n  }\r\n\r\n  // @dev Function that is called when trying to use PLAT for payments from approveAndCall\r\n  function receiveApproval(address _sender, uint256 _value, BitGuildToken _tokenContract, bytes _extraData)\r\n    public\r\n    whenNotPaused\r\n  {\r\n    require(msg.sender != address(0));\r\n    require(_tokenContract == platContract);\r\n    require(_tokenContract.transferFrom(_sender, address(this), _value));\r\n    require(_extraData.length != 0);\r\n\r\n    uint256 _amount;\r\n    for(uint256 i = 0; i < _extraData.length; i++) {\r\n      _amount = _amount + uint(_extraData[i]) * (2 ** (8 * (_extraData.length - (i + 1))));\r\n    }\r\n\r\n    // Up to 5 purchases at once.\r\n    require(_amount >= 1 && _amount <= 5);\r\n\r\n    uint256 _priceOfBundle = _amount * ethPrice * platPriceOracleContract.ETHPrice() / (10 ** 18);\r\n\r\n    // Sent PLAT tokens should be more than the price of bundle.\r\n    require(_value >= _priceOfBundle);\r\n\r\n    payWithPLAT(_amount);\r\n\r\n  }\r\n\r\n  // @dev Pay with PLAT.\r\n  function payWithPLAT(uint256 _amount)\r\n    private\r\n  {\r\n    for (uint i = 0; i < _amount; i ++) {\r\n      // Get value 0 ~ 9999.\r\n      var _randomValue = random(10000, 0);\r\n      \r\n      // We hard-code this in order to give credential to the players. \r\n      uint8 _heroRankToMint = 0; \r\n\r\n      if (_randomValue < 5000) {\r\n        _heroRankToMint = 1;\r\n      } else if (_randomValue < 9550) {\r\n        _heroRankToMint = 2;\r\n      }  else if (_randomValue < 9950) {\r\n        _heroRankToMint = 3;\r\n      } else {\r\n        _heroRankToMint = 4;\r\n      }\r\n\r\n      // Summon the hero.\r\n      summonHero(msg.sender, _heroRankToMint);\r\n    }\r\n  }\r\n\r\n  // @dev Summon a hero.\r\n  // 0: Common, 1: Uncommon, 2: Rare, 3: Heroic, 4: Legendary\r\n  function summonHero(address _to, uint8 _heroRankToMint)\r\n    private\r\n    returns (uint256)\r\n  {\r\n\r\n    // Get the list of hero classes.\r\n    uint32 _numberOfClasses = heroContract.numberOfHeroClasses();\r\n    uint32[] memory _candidates = new uint32[](_numberOfClasses);\r\n    uint32 _count = 0;\r\n    for (uint32 i = 0; i < _numberOfClasses; i ++) {\r\n      if (heroContract.getClassRank(i) == _heroRankToMint && blackList[i] != true) {\r\n        _candidates[_count] = i;\r\n        _count++;\r\n      }\r\n    }\r\n\r\n    require(_count != 0);\r\n    \r\n    return heroContract.mint(_to, _candidates[random(_count, 0)]);\r\n  }\r\n\r\n  // @dev return a pseudo random number between lower and upper bounds\r\n  function random(uint32 _upper, uint32 _lower)\r\n    private\r\n    returns (uint32)\r\n  {\r\n    require(_upper > _lower);\r\n    \r\n    seed = uint32(keccak256(keccak256(block.blockhash(block.number - 1), seed), now));\r\n    return seed % (_upper - _lower) + _lower;\r\n  }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setEthPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"blackList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"heroContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"receiveApproval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_classId\",\"type\":\"uint32\"},{\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platPriceOracleContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ethPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_heroAddress\",\"type\":\"address\"},{\"name\":\"_platAddress\",\"type\":\"address\"},{\"name\":\"_platPriceOracleAddress\",\"type\":\"address\"},{\"name\":\"_walletAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"CryptoSagaSwapPLAT","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000abc7e6c01237e8eef355bba2bf925a730b714d5f0000000000000000000000007e43581b19ab509bcf9397a2efd1ab10233f27de0000000000000000000000003127be52acba38beab6b4b3a406dc04e557c037c0000000000000000000000006ea5f3284ccb1a1878167c640a42b3c9b6e5930b","Library":"","SwarmSource":"bzzr://ab30abe281450ecc075da4a5fae61a4f5fe368985ab4837392d526044a4ff3a7"}]}